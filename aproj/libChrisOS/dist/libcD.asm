
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 7f 36 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000008:	05 74 54 00 00       	add    eax,0x5474
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 47 36 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000040:	05 3c 54 00 00       	add    eax,0x543c
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 0d 36 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00007a:	05 02 54 00 00       	add    eax,0x5402
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 b8 35 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0000cf:	05 ad 53 00 00       	add    eax,0x53ad
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 8a 35 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 56 53 00 00    	add    ebx,0x5356
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
9f000132:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 34 00 00 00    	mov    DWORD PTR [ebx+0x34],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
9f00018a:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
9f000197:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 34 00 00 00    	mov    DWORD PTR [ebx+0x34],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    
9f0001b3:	90                   	nop

9f0001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
9f0001b4:	55                   	push   ebp
9f0001b5:	89 e5                	mov    ebp,esp
9f0001b7:	53                   	push   ebx
9f0001b8:	83 ec 14             	sub    esp,0x14
9f0001bb:	e8 c7 34 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0001c0:	05 bc 52 00 00       	add    eax,0x52bc
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f0001cc:	83 ec 0c             	sub    esp,0xc
9f0001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0001d2:	89 c3                	mov    ebx,eax
9f0001d4:	e8 dc 21 00 00       	call   9f0023b5 <strlenI>
9f0001d9:	83 c4 10             	add    esp,0x10
9f0001dc:	83 e8 01             	sub    eax,0x1
9f0001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0001e2:	eb 39                	jmp    9f00021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
9f0001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001ea:	01 d0                	add    eax,edx
9f0001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
9f0001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001f8:	01 c2                	add    edx,eax
9f0001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000200:	01 c8                	add    eax,ecx
9f000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
9f000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00020d:	01 c2                	add    edx,eax
9f00020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
9f00021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f000223:	7c bf                	jl     9f0001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f000225:	90                   	nop
9f000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000229:	c9                   	leave  
9f00022a:	c3                   	ret    

9f00022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
9f00022b:	55                   	push   ebp
9f00022c:	89 e5                	mov    ebp,esp
9f00022e:	53                   	push   ebx
9f00022f:	83 ec 14             	sub    esp,0x14
9f000232:	e8 50 34 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000237:	05 45 52 00 00       	add    eax,0x5245
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000246:	79 03                	jns    9f00024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
9f000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
9f00024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000255:	8d 50 01             	lea    edx,[eax+0x1]
9f000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00025b:	89 c2                	mov    edx,eax
9f00025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000266:	ba 67 66 66 66       	mov    edx,0x66666667
9f00026b:	89 c8                	mov    eax,ecx
9f00026d:	f7 ea                	imul   edx
9f00026f:	c1 fa 02             	sar    edx,0x2
9f000272:	89 c8                	mov    eax,ecx
9f000274:	c1 f8 1f             	sar    eax,0x1f
9f000277:	29 c2                	sub    edx,eax
9f000279:	89 d0                	mov    eax,edx
9f00027b:	c1 e0 02             	shl    eax,0x2
9f00027e:	01 d0                	add    eax,edx
9f000280:	01 c0                	add    eax,eax
9f000282:	29 c1                	sub    ecx,eax
9f000284:	89 ca                	mov    edx,ecx
9f000286:	89 d0                	mov    eax,edx
9f000288:	83 c0 30             	add    eax,0x30
9f00028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f00028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000290:	ba 67 66 66 66       	mov    edx,0x66666667
9f000295:	89 c8                	mov    eax,ecx
9f000297:	f7 ea                	imul   edx
9f000299:	c1 fa 02             	sar    edx,0x2
9f00029c:	89 c8                	mov    eax,ecx
9f00029e:	c1 f8 1f             	sar    eax,0x1f
9f0002a1:	29 c2                	sub    edx,eax
9f0002a3:	89 d0                	mov    eax,edx
9f0002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0002ac:	7f a4                	jg     9f000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
9f0002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002b2:	79 13                	jns    9f0002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
9f0002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b7:	8d 50 01             	lea    edx,[eax+0x1]
9f0002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002bd:	89 c2                	mov    edx,eax
9f0002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002c2:	01 d0                	add    eax,edx
9f0002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
9f0002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002cd:	01 d0                	add    eax,edx
9f0002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
9f0002d2:	83 ec 0c             	sub    esp,0xc
9f0002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0002d8:	e8 d7 fe ff ff       	call   9f0001b4 <reverseI>
9f0002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
9f0002e0:	90                   	nop
9f0002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002e4:	c9                   	leave  
9f0002e5:	c3                   	ret    

9f0002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
9f0002e6:	55                   	push   ebp
9f0002e7:	89 e5                	mov    ebp,esp
9f0002e9:	53                   	push   ebx
9f0002ea:	83 ec 14             	sub    esp,0x14
9f0002ed:	e8 95 33 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0002f2:	05 8a 51 00 00       	add    eax,0x518a
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000301:	79 03                	jns    9f000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
9f000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
9f000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f00030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000310:	8d 50 01             	lea    edx,[eax+0x1]
9f000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000316:	89 c2                	mov    edx,eax
9f000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f00031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000321:	ba 67 66 66 66       	mov    edx,0x66666667
9f000326:	89 c8                	mov    eax,ecx
9f000328:	f7 ea                	imul   edx
9f00032a:	c1 fa 02             	sar    edx,0x2
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	c1 f8 1f             	sar    eax,0x1f
9f000332:	29 c2                	sub    edx,eax
9f000334:	89 d0                	mov    eax,edx
9f000336:	c1 e0 02             	shl    eax,0x2
9f000339:	01 d0                	add    eax,edx
9f00033b:	01 c0                	add    eax,eax
9f00033d:	29 c1                	sub    ecx,eax
9f00033f:	89 ca                	mov    edx,ecx
9f000341:	89 d0                	mov    eax,edx
9f000343:	83 c0 30             	add    eax,0x30
9f000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f00034b:	ba 67 66 66 66       	mov    edx,0x66666667
9f000350:	89 c8                	mov    eax,ecx
9f000352:	f7 ea                	imul   edx
9f000354:	c1 fa 02             	sar    edx,0x2
9f000357:	89 c8                	mov    eax,ecx
9f000359:	c1 f8 1f             	sar    eax,0x1f
9f00035c:	29 c2                	sub    edx,eax
9f00035e:	89 d0                	mov    eax,edx
9f000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000367:	7f a4                	jg     9f00030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
9f000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00036d:	79 13                	jns    9f000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
9f00036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000372:	8d 50 01             	lea    edx,[eax+0x1]
9f000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000378:	89 c2                	mov    edx,eax
9f00037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00037d:	01 d0                	add    eax,edx
9f00037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
9f000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000388:	01 d0                	add    eax,edx
9f00038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
9f00038d:	83 ec 0c             	sub    esp,0xc
9f000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000393:	e8 1c fe ff ff       	call   9f0001b4 <reverseI>
9f000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
9f00039b:	90                   	nop
9f00039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00039f:	c9                   	leave  
9f0003a0:	c3                   	ret    

9f0003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
9f0003a1:	55                   	push   ebp
9f0003a2:	89 e5                	mov    ebp,esp
9f0003a4:	83 ec 10             	sub    esp,0x10
9f0003a7:	e8 db 32 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0003ac:	05 d0 50 00 00       	add    eax,0x50d0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
9f0003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f0003bf:	eb 28                	jmp    9f0003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
9f0003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0003c4:	89 d0                	mov    eax,edx
9f0003c6:	c1 e0 02             	shl    eax,0x2
9f0003c9:	01 d0                	add    eax,edx
9f0003cb:	01 c0                	add    eax,eax
9f0003cd:	89 c1                	mov    ecx,eax
9f0003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003d5:	01 d0                	add    eax,edx
9f0003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003da:	0f be c0             	movsx  eax,al
9f0003dd:	01 c8                	add    eax,ecx
9f0003df:	83 e8 30             	sub    eax,0x30
9f0003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f0003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
9f0003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0003ef:	01 d0                	add    eax,edx
9f0003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0003f4:	84 c0                	test   al,al
9f0003f6:	75 c9                	jne    9f0003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f0003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
9f0003fb:	c9                   	leave  
9f0003fc:	c3                   	ret    
9f0003fd:	66 90                	xchg   ax,ax
9f0003ff:	90                   	nop

9f000400 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
9f000400:	55                   	push   ebp
9f000401:	89 e5                	mov    ebp,esp
9f000403:	53                   	push   ebx
9f000404:	83 ec 14             	sub    esp,0x14
9f000407:	e8 a4 32 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f00040c:	81 c3 70 50 00 00    	add    ebx,0x5070
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f000412:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000419:	eb 7b                	jmp    9f000496 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00041b:	83 ec 0c             	sub    esp,0xc
9f00041e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000421:	e8 8f 1f 00 00       	call   9f0023b5 <strlenI>
9f000426:	83 c4 10             	add    esp,0x10
9f000429:	89 c1                	mov    ecx,eax
9f00042b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000431:	8b 00                	mov    eax,DWORD PTR [eax]
9f000433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000436:	c1 e2 02             	shl    edx,0x2
9f000439:	01 d0                	add    eax,edx
9f00043b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00043d:	83 ec 04             	sub    esp,0x4
9f000440:	51                   	push   ecx
9f000441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000444:	50                   	push   eax
9f000445:	e8 05 20 00 00       	call   9f00244f <strncmpI>
9f00044a:	83 c4 10             	add    esp,0x10
9f00044d:	85 c0                	test   eax,eax
9f00044f:	75 41                	jne    9f000492 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f000451:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000457:	8b 00                	mov    eax,DWORD PTR [eax]
9f000459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00045c:	c1 e2 02             	shl    edx,0x2
9f00045f:	01 d0                	add    eax,edx
9f000461:	8b 00                	mov    eax,DWORD PTR [eax]
9f000463:	83 ec 08             	sub    esp,0x8
9f000466:	8d 93 64 f9 ff ff    	lea    edx,[ebx-0x69c]
9f00046c:	52                   	push   edx
9f00046d:	50                   	push   eax
9f00046e:	e8 b9 24 00 00       	call   9f00292c <strstrI>
9f000473:	83 c4 10             	add    esp,0x10
9f000476:	83 c0 01             	add    eax,0x1
9f000479:	83 ec 04             	sub    esp,0x4
9f00047c:	6a 32                	push   0x32
9f00047e:	50                   	push   eax
9f00047f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000482:	e8 31 20 00 00       	call   9f0024b8 <strncpyI>
9f000487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f00048a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00048d:	83 c0 01             	add    eax,0x1
9f000490:	eb 13                	jmp    9f0004a5 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f000492:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f000496:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f00049a:	0f 8e 7b ff ff ff    	jle    9f00041b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f0004a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f0004a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0004a8:	c9                   	leave  
9f0004a9:	c3                   	ret    

9f0004aa <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
9f0004aa:	55                   	push   ebp
9f0004ab:	89 e5                	mov    ebp,esp
9f0004ad:	53                   	push   ebx
9f0004ae:	83 ec 14             	sub    esp,0x14
9f0004b1:	e8 fa 31 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f0004b6:	81 c3 c6 4f 00 00    	add    ebx,0x4fc6
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
9f0004bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
9f0004c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f0004ca:	e9 d5 00 00 00       	jmp    9f0005a4 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
9f0004cf:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0004d5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0004d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0004da:	c1 e2 02             	shl    edx,0x2
9f0004dd:	01 d0                	add    eax,edx
9f0004df:	8b 00                	mov    eax,DWORD PTR [eax]
9f0004e1:	85 c0                	test   eax,eax
9f0004e3:	0f 84 b7 00 00 00    	je     9f0005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f0004e9:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0004ef:	8b 00                	mov    eax,DWORD PTR [eax]
9f0004f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0004f4:	c1 e2 02             	shl    edx,0x2
9f0004f7:	01 d0                	add    eax,edx
9f0004f9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0004fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f0004fe:	83 ec 0c             	sub    esp,0xc
9f000501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000504:	e8 ac 1e 00 00       	call   9f0023b5 <strlenI>
9f000509:	83 c4 10             	add    esp,0x10
9f00050c:	89 c1                	mov    ecx,eax
9f00050e:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000514:	8b 00                	mov    eax,DWORD PTR [eax]
9f000516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000519:	c1 e2 02             	shl    edx,0x2
9f00051c:	01 d0                	add    eax,edx
9f00051e:	8b 00                	mov    eax,DWORD PTR [eax]
9f000520:	83 ec 04             	sub    esp,0x4
9f000523:	51                   	push   ecx
9f000524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000527:	50                   	push   eax
9f000528:	e8 22 1f 00 00       	call   9f00244f <strncmpI>
9f00052d:	83 c4 10             	add    esp,0x10
9f000530:	85 c0                	test   eax,eax
9f000532:	75 6c                	jne    9f0005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
9f000534:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00053a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00053c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00053f:	c1 e2 02             	shl    edx,0x2
9f000542:	01 d0                	add    eax,edx
9f000544:	8b 00                	mov    eax,DWORD PTR [eax]
9f000546:	83 ec 08             	sub    esp,0x8
9f000549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00054c:	50                   	push   eax
9f00054d:	e8 1e 1d 00 00       	call   9f002270 <strcpyI>
9f000552:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
9f000555:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00055b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00055d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000560:	c1 e2 02             	shl    edx,0x2
9f000563:	01 d0                	add    eax,edx
9f000565:	8b 00                	mov    eax,DWORD PTR [eax]
9f000567:	83 ec 08             	sub    esp,0x8
9f00056a:	8d 93 64 f9 ff ff    	lea    edx,[ebx-0x69c]
9f000570:	52                   	push   edx
9f000571:	50                   	push   eax
9f000572:	e8 ab 1b 00 00       	call   9f002122 <strcatI>
9f000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
9f00057a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000580:	8b 00                	mov    eax,DWORD PTR [eax]
9f000582:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000585:	c1 e2 02             	shl    edx,0x2
9f000588:	01 d0                	add    eax,edx
9f00058a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00058c:	83 ec 08             	sub    esp,0x8
9f00058f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000592:	50                   	push   eax
9f000593:	e8 8a 1b 00 00       	call   9f002122 <strcatI>
9f000598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
9f00059b:	e9 c6 00 00 00       	jmp    9f000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f0005a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
9f0005a4:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f0005a8:	0f 8e 21 ff ff ff    	jle    9f0004cf <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0005ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0005b5:	e9 a2 00 00 00       	jmp    9f00065c <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
9f0005ba:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0005c0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0005c5:	c1 e2 02             	shl    edx,0x2
9f0005c8:	01 d0                	add    eax,edx
9f0005ca:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005cc:	85 c0                	test   eax,eax
9f0005ce:	0f 85 84 00 00 00    	jne    9f000658 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f0005d4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0005da:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0005df:	c1 e2 02             	shl    edx,0x2
9f0005e2:	01 d0                	add    eax,edx
9f0005e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0005e7:	81 c2 00 02 00 00    	add    edx,0x200
9f0005ed:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
9f0005ef:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f0005f5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0005f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0005fa:	c1 e2 02             	shl    edx,0x2
9f0005fd:	01 d0                	add    eax,edx
9f0005ff:	8b 00                	mov    eax,DWORD PTR [eax]
9f000601:	83 ec 08             	sub    esp,0x8
9f000604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000607:	50                   	push   eax
9f000608:	e8 63 1c 00 00       	call   9f002270 <strcpyI>
9f00060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
9f000610:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000616:	8b 00                	mov    eax,DWORD PTR [eax]
9f000618:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00061b:	c1 e2 02             	shl    edx,0x2
9f00061e:	01 d0                	add    eax,edx
9f000620:	8b 00                	mov    eax,DWORD PTR [eax]
9f000622:	83 ec 08             	sub    esp,0x8
9f000625:	8d 93 64 f9 ff ff    	lea    edx,[ebx-0x69c]
9f00062b:	52                   	push   edx
9f00062c:	50                   	push   eax
9f00062d:	e8 f0 1a 00 00       	call   9f002122 <strcatI>
9f000632:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
9f000635:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f00063b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00063d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000640:	c1 e2 02             	shl    edx,0x2
9f000643:	01 d0                	add    eax,edx
9f000645:	8b 00                	mov    eax,DWORD PTR [eax]
9f000647:	83 ec 08             	sub    esp,0x8
9f00064a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00064d:	50                   	push   eax
9f00064e:	e8 cf 1a 00 00       	call   9f002122 <strcatI>
9f000653:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
9f000656:	eb 0e                	jmp    9f000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f000658:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
9f00065c:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f000660:	0f 8e 54 ff ff ff    	jle    9f0005ba <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f000666:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000669:	c9                   	leave  
9f00066a:	c3                   	ret    
9f00066b:	90                   	nop

9f00066c <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:10
 */

#include "libChrisOS.h"

VISIBLE void* open(char* path, const char* mode)
{
9f00066c:	55                   	push   ebp
9f00066d:	89 e5                	mov    ebp,esp
9f00066f:	53                   	push   ebx
9f000670:	83 ec 04             	sub    esp,0x4
9f000673:	e8 0f 30 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000678:	05 04 4e 00 00       	add    eax,0x4e04
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
9f00067d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000683:	83 ec 04             	sub    esp,0x4
9f000686:	51                   	push   ecx
9f000687:	52                   	push   edx
9f000688:	6a 02                	push   0x2
9f00068a:	89 c3                	mov    ebx,eax
9f00068c:	e8 ad 02 00 00       	call   9f00093e <do_syscall2>
9f000691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
}
9f000694:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000697:	c9                   	leave  
9f000698:	c3                   	ret    

9f000699 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15

VISIBLE void close(void* handle)
{
9f000699:	55                   	push   ebp
9f00069a:	89 e5                	mov    ebp,esp
9f00069c:	53                   	push   ebx
9f00069d:	83 ec 04             	sub    esp,0x4
9f0006a0:	e8 e2 2f 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0006a5:	05 d7 4d 00 00       	add    eax,0x4dd7
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f0006aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0006ad:	83 ec 08             	sub    esp,0x8
9f0006b0:	52                   	push   edx
9f0006b1:	6a 03                	push   0x3
9f0006b3:	89 c3                	mov    ebx,eax
9f0006b5:	e8 c2 02 00 00       	call   9f00097c <do_syscall1>
9f0006ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
9f0006bd:	90                   	nop
9f0006be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0006c1:	c9                   	leave  
9f0006c2:	c3                   	ret    

9f0006c3 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f0006c3:	55                   	push   ebp
9f0006c4:	89 e5                	mov    ebp,esp
9f0006c6:	56                   	push   esi
9f0006c7:	53                   	push   ebx
9f0006c8:	e8 ba 2f 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0006cd:	05 af 4d 00 00       	add    eax,0x4daf
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f0006d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f0006d5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f0006d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0006db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0006de:	83 ec 0c             	sub    esp,0xc
9f0006e1:	56                   	push   esi
9f0006e2:	53                   	push   ebx
9f0006e3:	51                   	push   ecx
9f0006e4:	52                   	push   edx
9f0006e5:	6a 04                	push   0x4
9f0006e7:	89 c3                	mov    ebx,eax
9f0006e9:	e8 da 01 00 00       	call   9f0008c8 <do_syscall4>
9f0006ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
}
9f0006f1:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0006f4:	5b                   	pop    ebx
9f0006f5:	5e                   	pop    esi
9f0006f6:	5d                   	pop    ebp
9f0006f7:	c3                   	ret    

9f0006f8 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f0006f8:	55                   	push   ebp
9f0006f9:	89 e5                	mov    ebp,esp
9f0006fb:	56                   	push   esi
9f0006fc:	53                   	push   ebx
9f0006fd:	e8 85 2f 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000702:	05 7a 4d 00 00       	add    eax,0x4d7a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000707:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f00070a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f00070d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000710:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000713:	83 ec 0c             	sub    esp,0xc
9f000716:	56                   	push   esi
9f000717:	53                   	push   ebx
9f000718:	51                   	push   ecx
9f000719:	52                   	push   edx
9f00071a:	6a 05                	push   0x5
9f00071c:	89 c3                	mov    ebx,eax
9f00071e:	e8 a5 01 00 00       	call   9f0008c8 <do_syscall4>
9f000723:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
}
9f000726:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000729:	5b                   	pop    ebx
9f00072a:	5e                   	pop    esi
9f00072b:	5d                   	pop    ebp
9f00072c:	c3                   	ret    

9f00072d <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31


VISIBLE int getdir(char* path, char *buffer, int bufferCount)
{
9f00072d:	55                   	push   ebp
9f00072e:	89 e5                	mov    ebp,esp
9f000730:	53                   	push   ebx
9f000731:	83 ec 04             	sub    esp,0x4
9f000734:	e8 4e 2f 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000739:	05 43 4d 00 00       	add    eax,0x4d43
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, bufferCount);
9f00073e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000741:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000744:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000747:	53                   	push   ebx
9f000748:	51                   	push   ecx
9f000749:	52                   	push   edx
9f00074a:	68 04 03 00 00       	push   0x304
9f00074f:	89 c3                	mov    ebx,eax
9f000751:	e8 ac 01 00 00       	call   9f000902 <do_syscall3>
9f000756:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33
}
9f000759:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00075c:	c9                   	leave  
9f00075d:	c3                   	ret    
9f00075e:	66 90                	xchg   ax,ax

9f000760 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f000760:	55                   	push   ebp
9f000761:	89 e5                	mov    ebp,esp
9f000763:	53                   	push   ebx
9f000764:	e8 1e 2f 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000769:	05 13 4d 00 00       	add    eax,0x4d13
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f00076e:	b8 05 00 00 00       	mov    eax,0x5
9f000773:	bb 01 00 00 00       	mov    ebx,0x1
9f000778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00077b:	89 d1                	mov    ecx,edx
9f00077d:	e8 fc ff ff ff       	call   9f00077e <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f000782:	90                   	nop
9f000783:	5b                   	pop    ebx
9f000784:	5d                   	pop    ebp
9f000785:	c3                   	ret    

9f000786 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f000786:	55                   	push   ebp
9f000787:	89 e5                	mov    ebp,esp
9f000789:	53                   	push   ebx
9f00078a:	83 ec 14             	sub    esp,0x14
9f00078d:	e8 f5 2e 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000792:	05 ea 4c 00 00       	add    eax,0x4cea
9f000797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00079a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f00079d:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f0007a3:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f0007a7:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f0007aa:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f0007ae:	b8 05 00 00 00       	mov    eax,0x5
9f0007b3:	bb 01 00 00 00       	mov    ebx,0x1
9f0007b8:	8d 55 fa             	lea    edx,[ebp-0x6]
9f0007bb:	89 d1                	mov    ecx,edx
9f0007bd:	e8 fc ff ff ff       	call   9f0007be <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f0007c2:	90                   	nop
9f0007c3:	83 c4 14             	add    esp,0x14
9f0007c6:	5b                   	pop    ebx
9f0007c7:	5d                   	pop    ebp
9f0007c8:	c3                   	ret    

9f0007c9 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f0007c9:	55                   	push   ebp
9f0007ca:	89 e5                	mov    ebp,esp
9f0007cc:	53                   	push   ebx
9f0007cd:	83 ec 10             	sub    esp,0x10
9f0007d0:	e8 b2 2e 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0007d5:	05 a7 4c 00 00       	add    eax,0x4ca7
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f0007da:	b8 04 00 00 00       	mov    eax,0x4
9f0007df:	ba 00 00 00 00       	mov    edx,0x0
9f0007e4:	89 d3                	mov    ebx,edx
9f0007e6:	e8 fc ff ff ff       	call   9f0007e7 <getchar+0x1e>
9f0007eb:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f0007ee:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f0007f2:	74 06                	je     9f0007fa <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f0007f4:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f0007f8:	eb 0c                	jmp    9f000806 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f0007fa:	b8 02 03 00 00       	mov    eax,0x302
9f0007ff:	e8 fc ff ff ff       	call   9f000800 <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f000804:	eb d4                	jmp    9f0007da <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f000806:	83 c4 10             	add    esp,0x10
9f000809:	5b                   	pop    ebx
9f00080a:	5d                   	pop    ebp
9f00080b:	c3                   	ret    

9f00080c <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f00080c:	55                   	push   ebp
9f00080d:	89 e5                	mov    ebp,esp
9f00080f:	53                   	push   ebx
9f000810:	83 ec 14             	sub    esp,0x14
9f000813:	e8 6f 2e 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000818:	05 64 4c 00 00       	add    eax,0x4c64
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f00081d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:49
    char lbuf[2]={0,0};
9f000824:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
9f000828:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    
    if (stream!=1)
9f00082c:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f000830:	74 19                	je     9f00084b <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:53
    {
        printI("Stream %u not implemented\n",stream);
9f000832:	83 ec 08             	sub    esp,0x8
9f000835:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000838:	8d 90 66 f9 ff ff    	lea    edx,[eax-0x69a]
9f00083e:	52                   	push   edx
9f00083f:	89 c3                	mov    ebx,eax
9f000841:	e8 48 03 00 00       	call   9f000b8e <printI>
9f000846:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54 (discriminator 1)
        getsError: goto getsError;
9f000849:	eb fe                	jmp    9f000849 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f00084b:	b8 04 00 00 00       	mov    eax,0x4
9f000850:	ba 00 00 00 00       	mov    edx,0x0
9f000855:	89 d3                	mov    ebx,edx
9f000857:	e8 fc ff ff ff       	call   9f000858 <gets+0x4c>
9f00085c:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
        if (inchar=='\b' && len>0)
9f00085f:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f000863:	75 17                	jne    9f00087c <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60 (discriminator 1)
9f000865:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000869:	7e 11                	jle    9f00087c <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:62
        {
            buffer[len]=0;
9f00086b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00086e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000871:	01 d0                	add    eax,edx
9f000873:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            len--;
9f000876:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f00087a:	eb 43                	jmp    9f0008bf <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
        }
        else if (inchar!=0)
9f00087c:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f000880:	74 33                	je     9f0008b5 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:67
        {
            lbuf[0]=inchar;
9f000882:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f000886:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:69
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f000889:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00088c:	8d 50 01             	lea    edx,[eax+0x1]
9f00088f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000892:	89 c2                	mov    edx,eax
9f000894:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000897:	01 c2                	add    edx,eax
9f000899:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f00089d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f00089f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0008a2:	83 c0 01             	add    eax,0x1
9f0008a5:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f0008a8:	7d 06                	jge    9f0008b0 <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71 (discriminator 1)
9f0008aa:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f0008ae:	75 9b                	jne    9f00084b <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:73
            
                return len;
9f0008b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0008b3:	eb 0c                	jmp    9f0008c1 <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:76
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f0008b5:	b8 02 03 00 00       	mov    eax,0x302
9f0008ba:	e8 fc ff ff ff       	call   9f0008bb <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:81 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f0008bf:	eb 8a                	jmp    9f00084b <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82
}
9f0008c1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008c4:	c9                   	leave  
9f0008c5:	c3                   	ret    
9f0008c6:	66 90                	xchg   ax,ax

9f0008c8 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f0008c8:	55                   	push   ebp
9f0008c9:	89 e5                	mov    ebp,esp
9f0008cb:	56                   	push   esi
9f0008cc:	53                   	push   ebx
9f0008cd:	83 ec 10             	sub    esp,0x10
9f0008d0:	e8 b2 2d 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0008d5:	05 a7 4b 00 00       	add    eax,0x4ba7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    int retVal=0;
9f0008da:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f0008e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0008e4:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0008e7:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0008ea:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0008ed:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f0008f0:	e8 fc ff ff ff       	call   9f0008f1 <do_syscall4+0x29>
9f0008f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    return retVal;
9f0008f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
}
9f0008fb:	83 c4 10             	add    esp,0x10
9f0008fe:	5b                   	pop    ebx
9f0008ff:	5e                   	pop    esi
9f000900:	5d                   	pop    ebp
9f000901:	c3                   	ret    

9f000902 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f000902:	55                   	push   ebp
9f000903:	89 e5                	mov    ebp,esp
9f000905:	56                   	push   esi
9f000906:	53                   	push   ebx
9f000907:	83 ec 10             	sub    esp,0x10
9f00090a:	e8 78 2d 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00090f:	05 6d 4b 00 00       	add    eax,0x4b6d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    int retVal=0;
9f000914:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f00091b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00091e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f000921:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000924:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f000927:	be 00 00 00 00       	mov    esi,0x0
9f00092c:	e8 fc ff ff ff       	call   9f00092d <do_syscall3+0x2b>
9f000931:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    return retVal;
9f000934:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
}
9f000937:	83 c4 10             	add    esp,0x10
9f00093a:	5b                   	pop    ebx
9f00093b:	5e                   	pop    esi
9f00093c:	5d                   	pop    ebp
9f00093d:	c3                   	ret    

9f00093e <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f00093e:	55                   	push   ebp
9f00093f:	89 e5                	mov    ebp,esp
9f000941:	56                   	push   esi
9f000942:	53                   	push   ebx
9f000943:	83 ec 10             	sub    esp,0x10
9f000946:	e8 3c 2d 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00094b:	05 31 4b 00 00       	add    eax,0x4b31
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    int retVal=0;
9f000950:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    SYSCALL2(callnum, param1, param2, retVal);
9f000957:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00095a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00095d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000960:	ba 00 00 00 00       	mov    edx,0x0
9f000965:	be 00 00 00 00       	mov    esi,0x0
9f00096a:	e8 fc ff ff ff       	call   9f00096b <do_syscall2+0x2d>
9f00096f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    return retVal;
9f000972:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
}
9f000975:	83 c4 10             	add    esp,0x10
9f000978:	5b                   	pop    ebx
9f000979:	5e                   	pop    esi
9f00097a:	5d                   	pop    ebp
9f00097b:	c3                   	ret    

9f00097c <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38

int do_syscall1(int callnum, uint32_t param1)
{
9f00097c:	55                   	push   ebp
9f00097d:	89 e5                	mov    ebp,esp
9f00097f:	56                   	push   esi
9f000980:	53                   	push   ebx
9f000981:	83 ec 10             	sub    esp,0x10
9f000984:	e8 fe 2c 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000989:	05 f3 4a 00 00       	add    eax,0x4af3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    int retVal=0;
9f00098e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    SYSCALL1(callnum, param1, retVal);
9f000995:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000998:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f00099b:	b9 00 00 00 00       	mov    ecx,0x0
9f0009a0:	ba 00 00 00 00       	mov    edx,0x0
9f0009a5:	be 00 00 00 00       	mov    esi,0x0
9f0009aa:	e8 fc ff ff ff       	call   9f0009ab <do_syscall1+0x2f>
9f0009af:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    return retVal;
9f0009b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
}
9f0009b5:	83 c4 10             	add    esp,0x10
9f0009b8:	5b                   	pop    ebx
9f0009b9:	5e                   	pop    esi
9f0009ba:	5d                   	pop    ebp
9f0009bb:	c3                   	ret    

9f0009bc <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45

int do_syscall0(int callnum)
{
9f0009bc:	55                   	push   ebp
9f0009bd:	89 e5                	mov    ebp,esp
9f0009bf:	56                   	push   esi
9f0009c0:	53                   	push   ebx
9f0009c1:	83 ec 10             	sub    esp,0x10
9f0009c4:	e8 be 2c 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0009c9:	05 b3 4a 00 00       	add    eax,0x4ab3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    int retVal=0;
9f0009ce:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    SYSCALL0(callnum, retVal);
9f0009d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0009d8:	bb 00 00 00 00       	mov    ebx,0x0
9f0009dd:	b9 00 00 00 00       	mov    ecx,0x0
9f0009e2:	ba 00 00 00 00       	mov    edx,0x0
9f0009e7:	be 00 00 00 00       	mov    esi,0x0
9f0009ec:	e8 fc ff ff ff       	call   9f0009ed <do_syscall0+0x31>
9f0009f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    return retVal;
9f0009f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
}
9f0009f7:	83 c4 10             	add    esp,0x10
9f0009fa:	5b                   	pop    ebx
9f0009fb:	5e                   	pop    esi
9f0009fc:	5d                   	pop    ebp
9f0009fd:	c3                   	ret    

9f0009fe <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52

VISIBLE void __attribute__((constructor)) libc_init()
{
9f0009fe:	55                   	push   ebp
9f0009ff:	89 e5                	mov    ebp,esp
9f000a01:	53                   	push   ebx
9f000a02:	83 ec 04             	sub    esp,0x4
9f000a05:	e8 a6 2c 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f000a0a:	81 c3 72 4a 00 00    	add    ebx,0x4a72
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f000a10:	83 ec 08             	sub    esp,0x8
9f000a13:	8d 83 84 f9 ff ff    	lea    eax,[ebx-0x67c]
9f000a19:	50                   	push   eax
9f000a1a:	68 00 00 00 02       	push   0x2000000
9f000a1f:	e8 9e 01 00 00       	call   9f000bc2 <printdI>
9f000a24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    if (!libcInitialized)
9f000a27:	0f b6 83 38 00 00 00 	movzx  eax,BYTE PTR [ebx+0x38]
9f000a2e:	83 f0 01             	xor    eax,0x1
9f000a31:	84 c0                	test   al,al
9f000a33:	74 70                	je     9f000aa5 <libc_init+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:56
    {
        initmalloc();
9f000a35:	e8 ee 08 00 00       	call   9f001328 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f000a3a:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f000a3d:	89 c2                	mov    edx,eax
9f000a3f:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
9f000a45:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        do_syscall0(SYSCALL_INVALID);
9f000a47:	83 ec 0c             	sub    esp,0xc
9f000a4a:	6a 00                	push   0x0
9f000a4c:	e8 6b ff ff ff       	call   9f0009bc <do_syscall0>
9f000a51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f000a54:	8d 83 41 b6 ff ff    	lea    eax,[ebx-0x49bf]
9f000a5a:	83 ec 08             	sub    esp,0x8
9f000a5d:	50                   	push   eax
9f000a5e:	68 63 01 00 00       	push   0x163
9f000a63:	e8 14 ff ff ff       	call   9f00097c <do_syscall1>
9f000a68:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        libcInitialized = true;
9f000a6b:	c6 83 38 00 00 00 01 	mov    BYTE PTR [ebx+0x38],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        printBuffer = mallocI(0x1000);
9f000a72:	83 ec 0c             	sub    esp,0xc
9f000a75:	68 00 10 00 00       	push   0x1000
9f000a7a:	e8 d5 09 00 00       	call   9f001454 <mallocI>
9f000a7f:	83 c4 10             	add    esp,0x10
9f000a82:	89 c2                	mov    edx,eax
9f000a84:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000a8a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f000a8c:	83 ec 08             	sub    esp,0x8
9f000a8f:	8d 83 9c f9 ff ff    	lea    eax,[ebx-0x664]
9f000a95:	50                   	push   eax
9f000a96:	68 00 00 00 02       	push   0x2000000
9f000a9b:	e8 22 01 00 00       	call   9f000bc2 <printdI>
9f000aa0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f000aa3:	eb 12                	jmp    9f000ab7 <libc_init+0xb9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f000aa5:	83 ec 0c             	sub    esp,0xc
9f000aa8:	8d 83 b4 f9 ff ff    	lea    eax,[ebx-0x64c]
9f000aae:	50                   	push   eax
9f000aaf:	e8 da 00 00 00       	call   9f000b8e <printI>
9f000ab4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:67
}
9f000ab7:	90                   	nop
9f000ab8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000abb:	c9                   	leave  
9f000abc:	c3                   	ret    

9f000abd <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70

void __attribute__((destructor)) libc_cleanup(void)
{
9f000abd:	55                   	push   ebp
9f000abe:	89 e5                	mov    ebp,esp
9f000ac0:	53                   	push   ebx
9f000ac1:	83 ec 04             	sub    esp,0x4
9f000ac4:	e8 be 2b 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000ac9:	05 b3 49 00 00       	add    eax,0x49b3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71
    malloc_cleanup();
9f000ace:	89 c3                	mov    ebx,eax
9f000ad0:	e8 8e 0b 00 00       	call   9f001663 <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:72
}
9f000ad5:	90                   	nop
9f000ad6:	83 c4 04             	add    esp,0x4
9f000ad9:	5b                   	pop    ebx
9f000ada:	5d                   	pop    ebp
9f000adb:	c3                   	ret    

9f000adc <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75

VISIBLE int print(const char *format, ...)
{
9f000adc:	55                   	push   ebp
9f000add:	89 e5                	mov    ebp,esp
9f000adf:	53                   	push   ebx
9f000ae0:	83 ec 14             	sub    esp,0x14
9f000ae3:	e8 c8 2b 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f000ae8:	81 c3 94 49 00 00    	add    ebx,0x4994
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    va_list args;
    va_start( args, format );
9f000aee:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000af1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79
    
    int size = vsprintf(printBuffer, format, args);
9f000af4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000af7:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000afd:	8b 00                	mov    eax,DWORD PTR [eax]
9f000aff:	83 ec 04             	sub    esp,0x4
9f000b02:	52                   	push   edx
9f000b03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b06:	50                   	push   eax
9f000b07:	e8 d9 10 00 00       	call   9f001be5 <vsprintf>
9f000b0c:	83 c4 10             	add    esp,0x10
9f000b0f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:80
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000b12:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000b15:	8b 93 ec ff ff ff    	mov    edx,DWORD PTR [ebx-0x14]
9f000b1b:	8b 12                	mov    edx,DWORD PTR [edx]
9f000b1d:	50                   	push   eax
9f000b1e:	52                   	push   edx
9f000b1f:	6a 01                	push   0x1
9f000b21:	6a 05                	push   0x5
9f000b23:	e8 da fd ff ff       	call   9f000902 <do_syscall3>
9f000b28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    return 0;
9f000b2b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:82
}
9f000b30:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b33:	c9                   	leave  
9f000b34:	c3                   	ret    

9f000b35 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85

VISIBLE int printf(const char *format, ...)
{
9f000b35:	55                   	push   ebp
9f000b36:	89 e5                	mov    ebp,esp
9f000b38:	53                   	push   ebx
9f000b39:	83 ec 14             	sub    esp,0x14
9f000b3c:	e8 6f 2b 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f000b41:	81 c3 3b 49 00 00    	add    ebx,0x493b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87
    va_list args;
    va_start( args, format );
9f000b47:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000b4a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89
    
    int size = vsprintf(printBuffer, format, args);
9f000b4d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000b50:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000b56:	8b 00                	mov    eax,DWORD PTR [eax]
9f000b58:	83 ec 04             	sub    esp,0x4
9f000b5b:	52                   	push   edx
9f000b5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b5f:	50                   	push   eax
9f000b60:	e8 80 10 00 00       	call   9f001be5 <vsprintf>
9f000b65:	83 c4 10             	add    esp,0x10
9f000b68:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:90
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f000b6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000b6e:	8b 93 ec ff ff ff    	mov    edx,DWORD PTR [ebx-0x14]
9f000b74:	8b 12                	mov    edx,DWORD PTR [edx]
9f000b76:	50                   	push   eax
9f000b77:	52                   	push   edx
9f000b78:	6a 01                	push   0x1
9f000b7a:	6a 05                	push   0x5
9f000b7c:	e8 81 fd ff ff       	call   9f000902 <do_syscall3>
9f000b81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
    //do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
    return 0;
9f000b84:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
}
9f000b89:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000b8c:	c9                   	leave  
9f000b8d:	c3                   	ret    

9f000b8e <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:96

int printI(const char *format, ...)
{
9f000b8e:	55                   	push   ebp
9f000b8f:	89 e5                	mov    ebp,esp
9f000b91:	83 ec 10             	sub    esp,0x10
9f000b94:	e8 ee 2a 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000b99:	05 e3 48 00 00       	add    eax,0x48e3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98
    va_list args;
    va_start( args, format );
9f000b9e:	8d 45 0c             	lea    eax,[ebp+0xc]
9f000ba1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:99
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f000ba4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000ba7:	89 c2                	mov    edx,eax
9f000ba9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000bac:	52                   	push   edx
9f000bad:	50                   	push   eax
9f000bae:	68 00 03 00 00       	push   0x300
9f000bb3:	e8 86 fd ff ff       	call   9f00093e <do_syscall2>
9f000bb8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    return 0;
9f000bbb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
}
9f000bc0:	c9                   	leave  
9f000bc1:	c3                   	ret    

9f000bc2 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f000bc2:	55                   	push   ebp
9f000bc3:	89 e5                	mov    ebp,esp
9f000bc5:	83 ec 10             	sub    esp,0x10
9f000bc8:	e8 ba 2a 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000bcd:	05 af 48 00 00       	add    eax,0x48af
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106
    va_list args;
    va_start( args, format );
9f000bd2:	8d 45 10             	lea    eax,[ebp+0x10]
9f000bd5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f000bd8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000bdb:	89 c2                	mov    edx,eax
9f000bdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000be0:	52                   	push   edx
9f000be1:	50                   	push   eax
9f000be2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000be5:	68 01 03 00 00       	push   0x301
9f000bea:	e8 13 fd ff ff       	call   9f000902 <do_syscall3>
9f000bef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    return 0;
9f000bf2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    va_end(args);
}
9f000bf7:	c9                   	leave  
9f000bf8:	c3                   	ret    

9f000bf9 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:114

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f000bf9:	55                   	push   ebp
9f000bfa:	89 e5                	mov    ebp,esp
9f000bfc:	56                   	push   esi
9f000bfd:	53                   	push   ebx
9f000bfe:	83 ec 10             	sub    esp,0x10
9f000c01:	e8 81 2a 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000c06:	05 76 48 00 00       	add    eax,0x4876
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115
    SLEEP_SECONDS(__seconds)
9f000c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000c0e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000c11:	b8 70 01 00 00       	mov    eax,0x170
9f000c16:	bb 00 00 00 00       	mov    ebx,0x0
9f000c1b:	b9 00 00 00 00       	mov    ecx,0x0
9f000c20:	ba 00 00 00 00       	mov    edx,0x0
9f000c25:	be 00 00 00 00       	mov    esi,0x0
9f000c2a:	e8 fc ff ff ff       	call   9f000c2b <sleep+0x32>
9f000c2f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000c32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000c35:	6b d0 64             	imul   edx,eax,0x64
9f000c38:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000c3b:	01 d0                	add    eax,edx
9f000c3d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000c40:	b8 66 01 00 00       	mov    eax,0x166
9f000c45:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000c48:	b9 00 00 00 00       	mov    ecx,0x0
9f000c4d:	ba 00 00 00 00       	mov    edx,0x0
9f000c52:	be 00 00 00 00       	mov    esi,0x0
9f000c57:	e8 fc ff ff ff       	call   9f000c58 <sleep+0x5f>
9f000c5c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116
    return 0;
9f000c5f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
}
9f000c64:	83 c4 10             	add    esp,0x10
9f000c67:	5b                   	pop    ebx
9f000c68:	5e                   	pop    esi
9f000c69:	5d                   	pop    ebp
9f000c6a:	c3                   	ret    

9f000c6b <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120

void stop()
{
9f000c6b:	55                   	push   ebp
9f000c6c:	89 e5                	mov    ebp,esp
9f000c6e:	e8 14 2a 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000c73:	05 09 48 00 00       	add    eax,0x4809
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:121
    do_syscall0(SYSCALL_STOP);
9f000c78:	68 68 01 00 00       	push   0x168
9f000c7d:	e8 3a fd ff ff       	call   9f0009bc <do_syscall0>
9f000c82:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
}
9f000c85:	90                   	nop
9f000c86:	c9                   	leave  
9f000c87:	c3                   	ret    

9f000c88 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f000c88:	55                   	push   ebp
9f000c89:	89 e5                	mov    ebp,esp
9f000c8b:	e8 f7 29 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000c90:	05 ec 47 00 00       	add    eax,0x47ec
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:126
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f000c95:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000c98:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000c9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000c9e:	51                   	push   ecx
9f000c9f:	52                   	push   edx
9f000ca0:	50                   	push   eax
9f000ca1:	68 67 01 00 00       	push   0x167
9f000ca6:	e8 57 fc ff ff       	call   9f000902 <do_syscall3>
9f000cab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
}
9f000cae:	90                   	nop
9f000caf:	c9                   	leave  
9f000cb0:	c3                   	ret    

9f000cb1 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130

VISIBLE int fork()
{
9f000cb1:	55                   	push   ebp
9f000cb2:	89 e5                	mov    ebp,esp
9f000cb4:	83 ec 10             	sub    esp,0x10
9f000cb7:	e8 cb 29 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000cbc:	05 c0 47 00 00       	add    eax,0x47c0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:131
    uint32_t retVal = 0;
9f000cc1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133
    //return do_syscall0(SYSCALL_FORK);
    asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
9f000cc8:	b8 06 00 00 00       	mov    eax,0x6
9f000ccd:	e8 fc ff ff ff       	call   9f000cce <fork+0x1d>
9f000cd2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:134
    return retVal;
9f000cd5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135
}
9f000cd8:	c9                   	leave  
9f000cd9:	c3                   	ret    

9f000cda <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138

VISIBLE int exec(char* path, int argc, char** argv)
{
9f000cda:	55                   	push   ebp
9f000cdb:	89 e5                	mov    ebp,esp
9f000cdd:	83 ec 10             	sub    esp,0x10
9f000ce0:	e8 a2 29 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000ce5:	05 97 47 00 00       	add    eax,0x4797
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139
    int pid=0;
9f000cea:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:140
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f000cf1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000cf4:	8d 80 da f9 ff ff    	lea    eax,[eax-0x626]
9f000cfa:	50                   	push   eax
9f000cfb:	68 00 00 00 02       	push   0x2000000
9f000d00:	e8 bd fe ff ff       	call   9f000bc2 <printdI>
9f000d05:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f000d08:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000d0b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000d11:	51                   	push   ecx
9f000d12:	52                   	push   edx
9f000d13:	50                   	push   eax
9f000d14:	6a 59                	push   0x59
9f000d16:	e8 e7 fb ff ff       	call   9f000902 <do_syscall3>
9f000d1b:	83 c4 10             	add    esp,0x10
9f000d1e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    return pid;
9f000d21:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
}
9f000d24:	c9                   	leave  
9f000d25:	c3                   	ret    

9f000d26 <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

VISIBLE int execb(char* path)
{
9f000d26:	55                   	push   ebp
9f000d27:	89 e5                	mov    ebp,esp
9f000d29:	53                   	push   ebx
9f000d2a:	83 ec 24             	sub    esp,0x24
9f000d2d:	e8 7e 29 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f000d32:	81 c3 4a 47 00 00    	add    ebx,0x474a
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    int pid=0, argc=0;
9f000d38:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f000d3f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f000d46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000d49:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000d4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000d4f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151
    char* program;
    program=mallocI(512);
9f000d52:	83 ec 0c             	sub    esp,0xc
9f000d55:	68 00 02 00 00       	push   0x200
9f000d5a:	e8 f5 06 00 00       	call   9f001454 <mallocI>
9f000d5f:	83 c4 10             	add    esp,0x10
9f000d62:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f000d65:	83 ec 08             	sub    esp,0x8
9f000d68:	8d 83 ed f9 ff ff    	lea    eax,[ebx-0x613]
9f000d6e:	50                   	push   eax
9f000d6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f000d72:	e8 b5 1b 00 00       	call   9f00292c <strstrI>
9f000d77:	83 c4 10             	add    esp,0x10
9f000d7a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:155
        if (argc==0)
9f000d7d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000d81:	75 44                	jne    9f000dc7 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
        {
            if (spacePtr==0)
9f000d83:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000d87:	75 22                	jne    9f000dab <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
                strncpyI(program, path, strlenI(path));
9f000d89:	83 ec 0c             	sub    esp,0xc
9f000d8c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d8f:	e8 21 16 00 00       	call   9f0023b5 <strlenI>
9f000d94:	83 c4 10             	add    esp,0x10
9f000d97:	83 ec 04             	sub    esp,0x4
9f000d9a:	50                   	push   eax
9f000d9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d9e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000da1:	e8 12 17 00 00       	call   9f0024b8 <strncpyI>
9f000da6:	83 c4 10             	add    esp,0x10
9f000da9:	eb 1c                	jmp    9f000dc7 <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:160
            else
                strncpyI(program, path, spacePtr-path);
9f000dab:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000db1:	29 c2                	sub    edx,eax
9f000db3:	89 d0                	mov    eax,edx
9f000db5:	83 ec 04             	sub    esp,0x4
9f000db8:	50                   	push   eax
9f000db9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000dbc:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f000dbf:	e8 f4 16 00 00       	call   9f0024b8 <strncpyI>
9f000dc4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162
        }
        argc++;
9f000dc7:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
            
    } while (spacePtr++);
9f000dcb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000dce:	8d 50 01             	lea    edx,[eax+0x1]
9f000dd1:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f000dd4:	85 c0                	test   eax,eax
9f000dd6:	75 8d                	jne    9f000d65 <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:166
    
    argv=mallocI((argc*50)+(argc*4));
9f000dd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000ddb:	6b c0 36             	imul   eax,eax,0x36
9f000dde:	83 ec 0c             	sub    esp,0xc
9f000de1:	50                   	push   eax
9f000de2:	e8 6d 06 00 00       	call   9f001454 <mallocI>
9f000de7:	83 c4 10             	add    esp,0x10
9f000dea:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167
    int argvPtr=4*argc;
9f000ded:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000df0:	c1 e0 02             	shl    eax,0x2
9f000df3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    spacePtr=path;
9f000df6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000df9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169
    for (int cnt=0;cnt<argc; cnt++)
9f000dfc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f000e03:	e9 c8 00 00 00       	jmp    9f000ed0 <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171
    {
        argv[cnt]=(char*)argv+argvPtr;
9f000e08:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000e0b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f000e12:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000e15:	01 d0                	add    eax,edx
9f000e17:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f000e1a:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f000e1d:	01 ca                	add    edx,ecx
9f000e1f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
        spacePtr=strstrI(spacePtr," ");
9f000e21:	83 ec 08             	sub    esp,0x8
9f000e24:	8d 83 ed f9 ff ff    	lea    eax,[ebx-0x613]
9f000e2a:	50                   	push   eax
9f000e2b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f000e2e:	e8 f9 1a 00 00       	call   9f00292c <strstrI>
9f000e33:	83 c4 10             	add    esp,0x10
9f000e36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
        if (spacePtr)
9f000e39:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000e3d:	74 2f                	je     9f000e6e <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:174
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f000e3f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000e42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f000e45:	29 c2                	sub    edx,eax
9f000e47:	89 d0                	mov    eax,edx
9f000e49:	89 c1                	mov    ecx,eax
9f000e4b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000e4e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f000e55:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000e58:	01 d0                	add    eax,edx
9f000e5a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e5c:	83 ec 04             	sub    esp,0x4
9f000e5f:	51                   	push   ecx
9f000e60:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f000e63:	50                   	push   eax
9f000e64:	e8 4f 16 00 00       	call   9f0024b8 <strncpyI>
9f000e69:	83 c4 10             	add    esp,0x10
9f000e6c:	eb 31                	jmp    9f000e9f <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f000e6e:	83 ec 0c             	sub    esp,0xc
9f000e71:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f000e74:	e8 3c 15 00 00       	call   9f0023b5 <strlenI>
9f000e79:	83 c4 10             	add    esp,0x10
9f000e7c:	89 c2                	mov    edx,eax
9f000e7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000e81:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f000e88:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000e8b:	01 c8                	add    eax,ecx
9f000e8d:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e8f:	83 ec 04             	sub    esp,0x4
9f000e92:	52                   	push   edx
9f000e93:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f000e96:	50                   	push   eax
9f000e97:	e8 1c 16 00 00       	call   9f0024b8 <strncpyI>
9f000e9c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177 (discriminator 2)
        strtrimI(argv[cnt]);
9f000e9f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000ea2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f000ea9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f000eac:	01 d0                	add    eax,edx
9f000eae:	8b 00                	mov    eax,DWORD PTR [eax]
9f000eb0:	83 ec 0c             	sub    esp,0xc
9f000eb3:	50                   	push   eax
9f000eb4:	e8 bb 19 00 00       	call   9f002874 <strtrimI>
9f000eb9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:178 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f000ebc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f000ebf:	8d 50 01             	lea    edx,[eax+0x1]
9f000ec2:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f000ec5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179 (discriminator 2)
        argvPtr+=50;
9f000ec8:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f000ecc:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:169 (discriminator 1)
9f000ed0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f000ed3:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f000ed6:	0f 8c 2c ff ff ff    	jl     9f000e08 <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f000edc:	83 ec 04             	sub    esp,0x4
9f000edf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ee2:	8d 83 ef f9 ff ff    	lea    eax,[ebx-0x611]
9f000ee8:	50                   	push   eax
9f000ee9:	68 00 00 00 02       	push   0x2000000
9f000eee:	e8 cf fc ff ff       	call   9f000bc2 <printdI>
9f000ef3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:182
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f000ef6:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f000ef9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000efc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f000eff:	51                   	push   ecx
9f000f00:	52                   	push   edx
9f000f01:	50                   	push   eax
9f000f02:	68 05 03 00 00       	push   0x305
9f000f07:	e8 f6 f9 ff ff       	call   9f000902 <do_syscall3>
9f000f0c:	83 c4 10             	add    esp,0x10
9f000f0f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f000f12:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:189
    freeI(argv);
    freeI(program);
}
9f000f15:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000f18:	c9                   	leave  
9f000f19:	c3                   	ret    

9f000f1a <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:192

VISIBLE int execa(char* path, int argc, char** argv)
{
9f000f1a:	55                   	push   ebp
9f000f1b:	89 e5                	mov    ebp,esp
9f000f1d:	83 ec 10             	sub    esp,0x10
9f000f20:	e8 62 27 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000f25:	05 57 45 00 00       	add    eax,0x4557
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193
    int pid=0;
9f000f2a:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:194
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f000f31:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f34:	8d 80 03 fa ff ff    	lea    eax,[eax-0x5fd]
9f000f3a:	50                   	push   eax
9f000f3b:	68 00 00 00 02       	push   0x2000000
9f000f40:	e8 7d fc ff ff       	call   9f000bc2 <printdI>
9f000f45:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f000f48:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000f4b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f51:	51                   	push   ecx
9f000f52:	52                   	push   edx
9f000f53:	50                   	push   eax
9f000f54:	68 05 03 00 00       	push   0x305
9f000f59:	e8 a4 f9 ff ff       	call   9f000902 <do_syscall3>
9f000f5e:	83 c4 10             	add    esp,0x10
9f000f61:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:196
    return pid;
9f000f64:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:197
}
9f000f67:	c9                   	leave  
9f000f68:	c3                   	ret    

9f000f69 <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200

VISIBLE int waitpid(uint32_t pid)
{
9f000f69:	55                   	push   ebp
9f000f6a:	89 e5                	mov    ebp,esp
9f000f6c:	e8 16 27 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000f71:	05 0b 45 00 00       	add    eax,0x450b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f000f76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f79:	6a 61                	push   0x61
9f000f7b:	e8 fc f9 ff ff       	call   9f00097c <do_syscall1>
9f000f80:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
}
9f000f83:	c9                   	leave  
9f000f84:	c3                   	ret    

9f000f85 <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206


VISIBLE void exit (int status)
{
9f000f85:	55                   	push   ebp
9f000f86:	89 e5                	mov    ebp,esp
9f000f88:	e8 fa 26 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000f8d:	05 ef 44 00 00       	add    eax,0x44ef
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f000f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000f95:	50                   	push   eax
9f000f96:	6a 00                	push   0x0
9f000f98:	6a 01                	push   0x1
9f000f9a:	e8 9f f9 ff ff       	call   9f00093e <do_syscall2>
9f000f9f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:208
}
9f000fa2:	90                   	nop
9f000fa3:	c9                   	leave  
9f000fa4:	c3                   	ret    

9f000fa5 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:212


VISIBLE char* getcwd(char* buf, size_t size)
{
9f000fa5:	55                   	push   ebp
9f000fa6:	89 e5                	mov    ebp,esp
9f000fa8:	e8 da 26 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000fad:	05 cf 44 00 00       	add    eax,0x44cf
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:213
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f000fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000fb5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000fb8:	50                   	push   eax
9f000fb9:	6a 4f                	push   0x4f
9f000fbb:	e8 7e f9 ff ff       	call   9f00093e <do_syscall2>
9f000fc0:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214
}
9f000fc3:	c9                   	leave  
9f000fc4:	c3                   	ret    

9f000fc5 <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:218


size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f000fc5:	55                   	push   ebp
9f000fc6:	89 e5                	mov    ebp,esp
9f000fc8:	83 ec 20             	sub    esp,0x20
9f000fcb:	e8 b7 26 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f000fd0:	05 ac 44 00 00       	add    eax,0x44ac
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:221
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f000fd5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
    size_t argc = 0;
9f000fdc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f000fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000fe6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f000fe9:	e9 d8 00 00 00       	jmp    9f0010c6 <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:225
        c = (unsigned char) *p;
9f000fee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f000ff1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000ff4:	0f b6 c0             	movzx  eax,al
9f000ff7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226
        switch (state) {
9f000ffa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000ffd:	83 f8 01             	cmp    eax,0x1
9f001000:	74 7e                	je     9f001080 <splitI+0xbb>
9f001002:	83 f8 01             	cmp    eax,0x1
9f001005:	72 0a                	jb     9f001011 <splitI+0x4c>
9f001007:	83 f8 02             	cmp    eax,0x2
9f00100a:	74 45                	je     9f001051 <splitI+0x8c>
9f00100c:	e9 b1 00 00 00       	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:228
        case DULL:
            if (ISSPACE(c)) {
9f001011:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001015:	0f 94 c0             	sete   al
9f001018:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f00101b:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f00101f:	84 c0                	test   al,al
9f001021:	0f 85 94 00 00 00    	jne    9f0010bb <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:232
                continue;
            }

            if (c == '"') {
9f001027:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f00102b:	75 15                	jne    9f001042 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233
                state = IN_STRING;
9f00102d:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
                start_of_word = p + 1; 
9f001034:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001037:	83 c0 01             	add    eax,0x1
9f00103a:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:235
                continue;
9f00103d:	e9 80 00 00 00       	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:237
            }
            state = IN_WORD;
9f001042:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:238
            start_of_word = p;
9f001049:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00104c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239
            continue;
9f00104f:	eb 71                	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:242

        case IN_STRING:
            if (c == '"') {
9f001051:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001055:	75 67                	jne    9f0010be <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:243
                *p = 0;
9f001057:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00105a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:244
                argv[argc++] = start_of_word;
9f00105d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001060:	8d 50 01             	lea    edx,[eax+0x1]
9f001063:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001066:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00106d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001070:	01 c2                	add    edx,eax
9f001072:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001075:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
                state = DULL;
9f001077:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:247
            }
            continue;
9f00107e:	eb 3e                	jmp    9f0010be <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:250

        case IN_WORD:
            if (ISSPACE(c)) {
9f001080:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001084:	0f 94 c0             	sete   al
9f001087:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f00108a:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f00108e:	84 c0                	test   al,al
9f001090:	74 2f                	je     9f0010c1 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:251
                *p = 0;
9f001092:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001095:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
                argv[argc++] = start_of_word;
9f001098:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00109b:	8d 50 01             	lea    edx,[eax+0x1]
9f00109e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0010a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0010a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0010ab:	01 c2                	add    edx,eax
9f0010ad:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0010b0:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
                state = DULL;
9f0010b2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255
            }
            continue;
9f0010b9:	eb 06                	jmp    9f0010c1 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:229
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f0010bb:	90                   	nop
9f0010bc:	eb 04                	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:247
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0010be:	90                   	nop
9f0010bf:	eb 01                	jmp    9f0010c2 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f0010c1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f0010c2:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224 (discriminator 1)
9f0010c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0010c9:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f0010cc:	73 0e                	jae    9f0010dc <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:224 (discriminator 3)
9f0010ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0010d1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0010d4:	84 c0                	test   al,al
9f0010d6:	0f 85 12 ff ff ff    	jne    9f000fee <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f0010dc:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0010e0:	74 22                	je     9f001104 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259 (discriminator 1)
9f0010e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0010e5:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f0010e8:	73 1a                	jae    9f001104 <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260
        argv[argc++] = start_of_word;
9f0010ea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0010ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0010f0:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0010f3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0010fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0010fd:	01 c2                	add    edx,eax
9f0010ff:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001102:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:262

    return argc;
9f001104:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
}
9f001107:	c9                   	leave  
9f001108:	c3                   	ret    

9f001109 <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:266

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001109:	55                   	push   ebp
9f00110a:	89 e5                	mov    ebp,esp
9f00110c:	e8 76 25 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f001111:	05 6b 43 00 00       	add    eax,0x436b
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:267
    return splitI(buffer, argv, argv_size);
9f001116:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001119:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00111c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00111f:	e8 a1 fe ff ff       	call   9f000fc5 <splitI>
9f001124:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
}
9f001127:	c9                   	leave  
9f001128:	c3                   	ret    

9f001129 <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:271

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001129:	55                   	push   ebp
9f00112a:	89 e5                	mov    ebp,esp
9f00112c:	53                   	push   ebx
9f00112d:	81 ec 24 04 00 00    	sub    esp,0x424
9f001133:	e8 78 25 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f001138:	81 c3 44 43 00 00    	add    ebx,0x4344
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd;
9f00113e:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f001144:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001147:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f00114d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
    *argc = 0;
9f001150:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001153:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:277
    
    strncpyI(cmd,cmdline,1024);
9f001159:	83 ec 04             	sub    esp,0x4
9f00115c:	68 00 04 00 00       	push   0x400
9f001161:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001164:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f00116a:	50                   	push   eax
9f00116b:	e8 48 13 00 00       	call   9f0024b8 <strncpyI>
9f001170:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:278
    strtrimI(cmd);
9f001173:	83 ec 0c             	sub    esp,0xc
9f001176:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f00117c:	50                   	push   eax
9f00117d:	e8 f2 16 00 00       	call   9f002874 <strtrimI>
9f001182:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:281 (discriminator 1)
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f001185:	83 ec 08             	sub    esp,0x8
9f001188:	8d 83 ed f9 ff ff    	lea    eax,[ebx-0x613]
9f00118e:	50                   	push   eax
9f00118f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001192:	e8 95 17 00 00       	call   9f00292c <strstrI>
9f001197:	83 c4 10             	add    esp,0x10
9f00119a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282 (discriminator 1)
        *argc+=1;
9f00119d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011a0:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011a2:	8d 50 01             	lea    edx,[eax+0x1]
9f0011a5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011a8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284 (discriminator 1)
    
    } while (spacePtr++);
9f0011aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0011ad:	8d 50 01             	lea    edx,[eax+0x1]
9f0011b0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0011b3:	85 c0                	test   eax,eax
9f0011b5:	75 ce                	jne    9f001185 <cmdlineToArgvI+0x5c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f0011b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011ba:	8b 10                	mov    edx,DWORD PTR [eax]
9f0011bc:	89 d0                	mov    eax,edx
9f0011be:	c1 e0 08             	shl    eax,0x8
9f0011c1:	29 d0                	sub    eax,edx
9f0011c3:	89 c2                	mov    edx,eax
9f0011c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011c8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011ca:	c1 e0 02             	shl    eax,0x2
9f0011cd:	01 d0                	add    eax,edx
9f0011cf:	83 ec 0c             	sub    esp,0xc
9f0011d2:	50                   	push   eax
9f0011d3:	e8 7c 02 00 00       	call   9f001454 <mallocI>
9f0011d8:	83 c4 10             	add    esp,0x10
9f0011db:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:287
    int argvPtr=4* *argc;
9f0011de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0011e1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0011e3:	c1 e0 02             	shl    eax,0x2
9f0011e6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:288
    spacePtr=cmd;
9f0011e9:	8d 85 e4 fb ff ff    	lea    eax,[ebp-0x41c]
9f0011ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289
    for (int cnt=0;cnt<*argc; cnt++)
9f0011f2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f0011f9:	e9 cb 00 00 00       	jmp    9f0012c9 <cmdlineToArgvI+0x1a0>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
    {
        argv[cnt]=(char*)argv+argvPtr;
9f0011fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001201:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001208:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00120b:	01 d0                	add    eax,edx
9f00120d:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f001210:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001213:	01 ca                	add    edx,ecx
9f001215:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:292
        spacePtr=strstrI(spacePtr," ");
9f001217:	83 ec 08             	sub    esp,0x8
9f00121a:	8d 83 ed f9 ff ff    	lea    eax,[ebx-0x613]
9f001220:	50                   	push   eax
9f001221:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001224:	e8 03 17 00 00       	call   9f00292c <strstrI>
9f001229:	83 c4 10             	add    esp,0x10
9f00122c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:293
        if (spacePtr)
9f00122f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001233:	74 2f                	je     9f001264 <cmdlineToArgvI+0x13b>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:294
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001235:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001238:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00123b:	29 c2                	sub    edx,eax
9f00123d:	89 d0                	mov    eax,edx
9f00123f:	89 c1                	mov    ecx,eax
9f001241:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001244:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00124b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00124e:	01 d0                	add    eax,edx
9f001250:	8b 00                	mov    eax,DWORD PTR [eax]
9f001252:	83 ec 04             	sub    esp,0x4
9f001255:	51                   	push   ecx
9f001256:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001259:	50                   	push   eax
9f00125a:	e8 59 12 00 00       	call   9f0024b8 <strncpyI>
9f00125f:	83 c4 10             	add    esp,0x10
9f001262:	eb 31                	jmp    9f001295 <cmdlineToArgvI+0x16c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:296
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001264:	83 ec 0c             	sub    esp,0xc
9f001267:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00126a:	e8 46 11 00 00       	call   9f0023b5 <strlenI>
9f00126f:	83 c4 10             	add    esp,0x10
9f001272:	89 c2                	mov    edx,eax
9f001274:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001277:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f00127e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001281:	01 c8                	add    eax,ecx
9f001283:	8b 00                	mov    eax,DWORD PTR [eax]
9f001285:	83 ec 04             	sub    esp,0x4
9f001288:	52                   	push   edx
9f001289:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00128c:	50                   	push   eax
9f00128d:	e8 26 12 00 00       	call   9f0024b8 <strncpyI>
9f001292:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:297 (discriminator 2)
        strtrimI(argv[cnt]);
9f001295:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001298:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00129f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0012a2:	01 d0                	add    eax,edx
9f0012a4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0012a6:	83 ec 0c             	sub    esp,0xc
9f0012a9:	50                   	push   eax
9f0012aa:	e8 c5 15 00 00       	call   9f002874 <strtrimI>
9f0012af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f0012b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0012b5:	8d 50 01             	lea    edx,[eax+0x1]
9f0012b8:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0012bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f0012be:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f0012c5:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:289 (discriminator 1)
9f0012c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0012cc:	8b 00                	mov    eax,DWORD PTR [eax]
9f0012ce:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f0012d1:	0f 8f 27 ff ff ff    	jg     9f0011fe <cmdlineToArgvI+0xd5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:301
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f0012d7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302
}
9f0012da:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0012dd:	c9                   	leave  
9f0012de:	c3                   	ret    

9f0012df <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:305

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f0012df:	55                   	push   ebp
9f0012e0:	89 e5                	mov    ebp,esp
9f0012e2:	83 ec 08             	sub    esp,0x8
9f0012e5:	e8 9d 23 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0012ea:	05 92 41 00 00       	add    eax,0x4192
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306
    do_syscall0(0);
9f0012ef:	6a 00                	push   0x0
9f0012f1:	e8 c6 f6 ff ff       	call   9f0009bc <do_syscall0>
9f0012f6:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:308

    return cmdlineToArgvI(cmdline, argc);
9f0012f9:	83 ec 08             	sub    esp,0x8
9f0012fc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0012ff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001302:	e8 22 fe ff ff       	call   9f001129 <cmdlineToArgvI>
9f001307:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:309
}
9f00130a:	c9                   	leave  
9f00130b:	c3                   	ret    

9f00130c <test>:
test():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:312

VISIBLE int test()
{
9f00130c:	55                   	push   ebp
9f00130d:	89 e5                	mov    ebp,esp
9f00130f:	e8 73 23 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f001314:	05 68 41 00 00       	add    eax,0x4168
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
    return do_syscall0(0);
9f001319:	6a 00                	push   0x0
9f00131b:	e8 9c f6 ff ff       	call   9f0009bc <do_syscall0>
9f001320:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314
9f001323:	c9                   	leave  
9f001324:	c3                   	ret    
9f001325:	66 90                	xchg   ax,ax
9f001327:	90                   	nop

9f001328 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
9f001328:	55                   	push   ebp
9f001329:	89 e5                	mov    ebp,esp
9f00132b:	53                   	push   ebx
9f00132c:	83 ec 04             	sub    esp,0x4
9f00132f:	e8 7c 23 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f001334:	81 c3 48 41 00 00    	add    ebx,0x4148
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f00133a:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001340:	8b 00                	mov    eax,DWORD PTR [eax]
9f001342:	50                   	push   eax
9f001343:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001349:	50                   	push   eax
9f00134a:	8d 83 18 fa ff ff    	lea    eax,[ebx-0x5e8]
9f001350:	50                   	push   eax
9f001351:	68 00 00 00 01       	push   0x1000000
9f001356:	e8 67 f8 ff ff       	call   9f000bc2 <printdI>
9f00135b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
9f00135e:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001364:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
9f00136a:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001370:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
9f001376:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00137c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    libcTZ=-5;
9f001382:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
9f001388:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20

}
9f00138e:	90                   	nop
9f00138f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001392:	c9                   	leave  
9f001393:	c3                   	ret    

9f001394 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f001394:	55                   	push   ebp
9f001395:	89 e5                	mov    ebp,esp
9f001397:	83 ec 10             	sub    esp,0x10
9f00139a:	e8 e8 22 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00139f:	05 dd 40 00 00       	add    eax,0x40dd
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f0013a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0013a7:	83 c2 20             	add    edx,0x20
9f0013aa:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f0013ad:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
9f0013b3:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f0013b5:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0013b8:	01 d1                	add    ecx,edx
9f0013ba:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f0013c0:	8b 12                	mov    edx,DWORD PTR [edx]
9f0013c2:	39 d1                	cmp    ecx,edx
9f0013c4:	76 4e                	jbe    9f001414 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f0013c6:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
9f0013cc:	8b 12                	mov    edx,DWORD PTR [edx]
9f0013ce:	8b 80 e8 ff ff ff    	mov    eax,DWORD PTR [eax-0x18]
9f0013d4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0013d6:	29 c2                	sub    edx,eax
9f0013d8:	89 d0                	mov    eax,edx
9f0013da:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
        if (newSize== 0 || newSize%PAGE_SIZE)
9f0013dd:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f0013e1:	74 0c                	je     9f0013ef <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32 (discriminator 1)
9f0013e3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0013e6:	25 ff 0f 00 00       	and    eax,0xfff
9f0013eb:	85 c0                	test   eax,eax
9f0013ed:	74 10                	je     9f0013ff <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f0013ef:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0013f2:	25 00 f0 ff ff       	and    eax,0xfffff000
9f0013f7:	05 00 10 00 00       	add    eax,0x1000
9f0013fc:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:37
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
9f0013ff:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
9f001406:	77 07                	ja     9f00140f <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
            return ALLOC_REQUEST_SIZE;
9f001408:	b8 00 20 03 00       	mov    eax,0x32000
9f00140d:	eb 0a                	jmp    9f001419 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        else
            return newSize;
9f00140f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001412:	eb 05                	jmp    9f001419 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:43
    }
    else
        return 0;
9f001414:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
}
9f001419:	c9                   	leave  
9f00141a:	c3                   	ret    

9f00141b <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:47

void freeI(void* fpointer)
{
9f00141b:	55                   	push   ebp
9f00141c:	89 e5                	mov    ebp,esp
9f00141e:	83 ec 10             	sub    esp,0x10
9f001421:	e8 61 22 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f001426:	05 56 40 00 00       	add    eax,0x4056
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:50
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
9f00142b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f00142f:	74 20                	je     9f001451 <freeI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f001431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001434:	83 e8 10             	sub    eax,0x10
9f001437:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
9f00143a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00143d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00143f:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
9f001444:	74 02                	je     9f001448 <freeI+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
9f001446:	eb fe                	jmp    9f001446 <freeI+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
    }
    mp->inUse=false;
9f001448:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00144b:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f00144f:	eb 01                	jmp    9f001452 <freeI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f001451:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
9f001452:	c9                   	leave  
9f001453:	c3                   	ret    

9f001454 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65

void*  mallocI(size_t size)
{
9f001454:	55                   	push   ebp
9f001455:	89 e5                	mov    ebp,esp
9f001457:	53                   	push   ebx
9f001458:	83 ec 24             	sub    esp,0x24
9f00145b:	e8 50 22 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f001460:	81 c3 1c 40 00 00    	add    ebx,0x401c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
9f001466:	83 ec 04             	sub    esp,0x4
9f001469:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00146c:	8d 83 3b fa ff ff    	lea    eax,[ebx-0x5c5]
9f001472:	50                   	push   eax
9f001473:	68 00 00 00 01       	push   0x1000000
9f001478:	e8 45 f7 ff ff       	call   9f000bc2 <printdI>
9f00147d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    needed = newHeapRequiredToFulfillRequest(size);
9f001480:	83 ec 0c             	sub    esp,0xc
9f001483:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001486:	e8 09 ff ff ff       	call   9f001394 <newHeapRequiredToFulfillRequest>
9f00148b:	83 c4 10             	add    esp,0x10
9f00148e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f001491:	83 ec 04             	sub    esp,0x4
9f001494:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001497:	8d 83 4b fa ff ff    	lea    eax,[ebx-0x5b5]
9f00149d:	50                   	push   eax
9f00149e:	68 00 00 00 01       	push   0x1000000
9f0014a3:	e8 1a f7 ff ff       	call   9f000bc2 <printdI>
9f0014a8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    if (needed!=0)      //New heap required
9f0014ab:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0014af:	0f 84 ae 00 00 00    	je     9f001563 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
9f0014b5:	83 ec 08             	sub    esp,0x8
9f0014b8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0014bb:	68 65 01 00 00       	push   0x165
9f0014c0:	e8 b7 f4 ff ff       	call   9f00097c <do_syscall1>
9f0014c5:	83 c4 10             	add    esp,0x10
9f0014c8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f0014cb:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0014d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0014d3:	83 ec 04             	sub    esp,0x4
9f0014d6:	50                   	push   eax
9f0014d7:	8d 83 67 fa ff ff    	lea    eax,[ebx-0x599]
9f0014dd:	50                   	push   eax
9f0014de:	68 00 00 00 01       	push   0x1000000
9f0014e3:	e8 da f6 ff ff       	call   9f000bc2 <printdI>
9f0014e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
        heapEnd=allocatedPtr+needed;
9f0014eb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0014ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0014f1:	01 c2                	add    edx,eax
9f0014f3:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0014f9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0014fb:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f001501:	8b 00                	mov    eax,DWORD PTR [eax]
9f001503:	83 ec 0c             	sub    esp,0xc
9f001506:	50                   	push   eax
9f001507:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f00150a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00150d:	8d 83 84 fa ff ff    	lea    eax,[ebx-0x57c]
9f001513:	50                   	push   eax
9f001514:	68 00 00 00 01       	push   0x1000000
9f001519:	e8 a4 f6 ff ff       	call   9f000bc2 <printdI>
9f00151e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        if (heapBase==0)    //Hasn't been initialized yet!
9f001521:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f001527:	8b 00                	mov    eax,DWORD PTR [eax]
9f001529:	85 c0                	test   eax,eax
9f00152b:	75 36                	jne    9f001563 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        {
            heapCurr=allocatedPtr;
9f00152d:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001533:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001536:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
            heapBase=allocatedPtr;
9f001538:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f00153e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001541:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f001543:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001549:	8b 00                	mov    eax,DWORD PTR [eax]
9f00154b:	83 ec 04             	sub    esp,0x4
9f00154e:	50                   	push   eax
9f00154f:	8d 83 c4 fa ff ff    	lea    eax,[ebx-0x53c]
9f001555:	50                   	push   eax
9f001556:	68 00 00 00 01       	push   0x1000000
9f00155b:	e8 62 f6 ff ff       	call   9f000bc2 <printdI>
9f001560:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f001563:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001569:	8b 00                	mov    eax,DWORD PTR [eax]
9f00156b:	83 ec 04             	sub    esp,0x4
9f00156e:	50                   	push   eax
9f00156f:	8d 83 00 fb ff ff    	lea    eax,[ebx-0x500]
9f001575:	50                   	push   eax
9f001576:	68 00 00 00 01       	push   0x1000000
9f00157b:	e8 42 f6 ff ff       	call   9f000bc2 <printdI>
9f001580:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    heapPtr = (heaprec_t*)heapCurr;
9f001583:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001589:	8b 00                	mov    eax,DWORD PTR [eax]
9f00158b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    heapPtr->marker=ALLOC_MARKER_VALUE;
9f00158e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001591:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    heapPtr->len=size;
9f001597:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00159a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00159d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr->inUse=true;
9f0015a0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0015a3:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
9f0015a7:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0015ad:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015af:	6a 10                	push   0x10
9f0015b1:	50                   	push   eax
9f0015b2:	8d 83 28 fb ff ff    	lea    eax,[ebx-0x4d8]
9f0015b8:	50                   	push   eax
9f0015b9:	68 00 00 00 01       	push   0x1000000
9f0015be:	e8 ff f5 ff ff       	call   9f000bc2 <printdI>
9f0015c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
9f0015c6:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0015cc:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015ce:	83 c0 10             	add    eax,0x10
9f0015d1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
9f0015d4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0015d7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0015da:	8d 50 10             	lea    edx,[eax+0x10]
9f0015dd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0015e0:	01 d0                	add    eax,edx
9f0015e2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
9f0015e5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0015e8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0015eb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    heapCurr+=size+(sizeof(heaprec_t));
9f0015ee:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f0015f4:	8b 10                	mov    edx,DWORD PTR [eax]
9f0015f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0015f9:	01 d0                	add    eax,edx
9f0015fb:	8d 50 10             	lea    edx,[eax+0x10]
9f0015fe:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f001604:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f001606:	83 ec 04             	sub    esp,0x4
9f001609:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00160c:	8d 83 60 fb ff ff    	lea    eax,[ebx-0x4a0]
9f001612:	50                   	push   eax
9f001613:	68 00 00 00 01       	push   0x1000000
9f001618:	e8 a5 f5 ff ff       	call   9f000bc2 <printdI>
9f00161d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    return retVal;
9f001620:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
}
9f001623:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001626:	c9                   	leave  
9f001627:	c3                   	ret    

9f001628 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f001628:	55                   	push   ebp
9f001629:	89 e5                	mov    ebp,esp
9f00162b:	83 ec 08             	sub    esp,0x8
9f00162e:	e8 54 20 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f001633:	05 49 3e 00 00       	add    eax,0x3e49
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:105
    return mallocI(size);
9f001638:	83 ec 0c             	sub    esp,0xc
9f00163b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00163e:	e8 11 fe ff ff       	call   9f001454 <mallocI>
9f001643:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
}
9f001646:	c9                   	leave  
9f001647:	c3                   	ret    

9f001648 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f001648:	55                   	push   ebp
9f001649:	89 e5                	mov    ebp,esp
9f00164b:	e8 37 20 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f001650:	05 2c 3e 00 00       	add    eax,0x3e2c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110
    freeI(fpointer);
9f001655:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001658:	e8 be fd ff ff       	call   9f00141b <freeI>
9f00165d:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:111
}
9f001660:	90                   	nop
9f001661:	c9                   	leave  
9f001662:	c3                   	ret    

9f001663 <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114

void malloc_cleanup()
{
9f001663:	55                   	push   ebp
9f001664:	89 e5                	mov    ebp,esp
9f001666:	53                   	push   ebx
9f001667:	83 ec 04             	sub    esp,0x4
9f00166a:	e8 18 20 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00166f:	05 0d 3e 00 00       	add    eax,0x3e0d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    do_syscall1(SYSCALL_FREE, heapBase);
9f001674:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
9f00167a:	8b 12                	mov    edx,DWORD PTR [edx]
9f00167c:	83 ec 08             	sub    esp,0x8
9f00167f:	52                   	push   edx
9f001680:	68 64 01 00 00       	push   0x164
9f001685:	89 c3                	mov    ebx,eax
9f001687:	e8 f0 f2 ff ff       	call   9f00097c <do_syscall1>
9f00168c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
9f00168f:	90                   	nop
9f001690:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001693:	c9                   	leave  
9f001694:	c3                   	ret    
9f001695:	66 90                	xchg   ax,ax
9f001697:	90                   	nop

9f001698 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f001698:	55                   	push   ebp
9f001699:	89 e5                	mov    ebp,esp
9f00169b:	83 ec 20             	sub    esp,0x20
9f00169e:	e8 e4 1f 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0016a3:	05 d9 3d 00 00       	add    eax,0x3dd9
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
9f0016a8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0016ab:	83 e0 03             	and    eax,0x3
9f0016ae:	85 c0                	test   eax,eax
9f0016b0:	0f 94 c0             	sete   al
9f0016b3:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
9f0016b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0016b9:	83 e0 01             	and    eax,0x1
9f0016bc:	85 c0                	test   eax,eax
9f0016be:	0f 94 c0             	sete   al
9f0016c1:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
9f0016c4:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f0016c8:	74 7d                	je     9f001747 <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
9f0016ca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0016cd:	c1 e8 02             	shr    eax,0x2
9f0016d0:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
9f0016d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0016d6:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
9f0016d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0016dc:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
9f0016df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0016e2:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0016e5:	73 4b                	jae    9f001732 <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
9f0016e7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0016ea:	c1 e0 02             	shl    eax,0x2
9f0016ed:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
9f0016f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0016f3:	c1 e0 02             	shl    eax,0x2
9f0016f6:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
9f0016f9:	eb 12                	jmp    9f00170d <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
9f0016fb:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f0016ff:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f001703:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001706:	8b 10                	mov    edx,DWORD PTR [eax]
9f001708:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00170b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f00170d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001710:	8d 50 ff             	lea    edx,[eax-0x1]
9f001713:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001716:	85 c0                	test   eax,eax
9f001718:	75 e1                	jne    9f0016fb <memcpy+0x63>
9f00171a:	eb 23                	jmp    9f00173f <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f00171c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00171f:	8d 50 04             	lea    edx,[eax+0x4]
9f001722:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f001725:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f001728:	8d 4a 04             	lea    ecx,[edx+0x4]
9f00172b:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f00172e:	8b 12                	mov    edx,DWORD PTR [edx]
9f001730:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f001732:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001735:	8d 50 ff             	lea    edx,[eax-0x1]
9f001738:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00173b:	85 c0                	test   eax,eax
9f00173d:	75 dd                	jne    9f00171c <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
9f00173f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001742:	e9 ea 00 00 00       	jmp    9f001831 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
9f001747:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f00174b:	74 79                	je     9f0017c6 <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
9f00174d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001750:	d1 e8                	shr    eax,1
9f001752:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
9f001755:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001758:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
9f00175b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00175e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
9f001761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001764:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f001767:	73 4b                	jae    9f0017b4 <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
9f001769:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00176c:	c1 e0 02             	shl    eax,0x2
9f00176f:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
9f001772:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001775:	c1 e0 02             	shl    eax,0x2
9f001778:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
9f00177b:	eb 12                	jmp    9f00178f <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
9f00177d:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f001781:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f001785:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001788:	8b 10                	mov    edx,DWORD PTR [eax]
9f00178a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00178d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f00178f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001792:	8d 50 ff             	lea    edx,[eax-0x1]
9f001795:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001798:	85 c0                	test   eax,eax
9f00179a:	75 e1                	jne    9f00177d <memcpy+0xe5>
9f00179c:	eb 23                	jmp    9f0017c1 <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f00179e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0017a1:	8d 50 04             	lea    edx,[eax+0x4]
9f0017a4:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0017a7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0017aa:	8d 4a 04             	lea    ecx,[edx+0x4]
9f0017ad:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f0017b0:	8b 12                	mov    edx,DWORD PTR [edx]
9f0017b2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f0017b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0017b7:	8d 50 ff             	lea    edx,[eax-0x1]
9f0017ba:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0017bd:	85 c0                	test   eax,eax
9f0017bf:	75 dd                	jne    9f00179e <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
9f0017c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017c4:	eb 6b                	jmp    9f001831 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
9f0017c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0017c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
9f0017cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017cf:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
9f0017d2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0017d5:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f0017d8:	73 47                	jae    9f001821 <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
9f0017da:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0017dd:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
9f0017e0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0017e3:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
9f0017e6:	eb 13                	jmp    9f0017fb <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
9f0017e8:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f0017ec:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f0017f0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0017f3:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0017f6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0017f9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f0017fb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0017fe:	8d 50 ff             	lea    edx,[eax-0x1]
9f001801:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001804:	85 c0                	test   eax,eax
9f001806:	75 e0                	jne    9f0017e8 <memcpy+0x150>
9f001808:	eb 24                	jmp    9f00182e <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f00180a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00180d:	8d 50 01             	lea    edx,[eax+0x1]
9f001810:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f001813:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f001816:	8d 4a 01             	lea    ecx,[edx+0x1]
9f001819:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f00181c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00181f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f001821:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001824:	8d 50 ff             	lea    edx,[eax-0x1]
9f001827:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00182a:	85 c0                	test   eax,eax
9f00182c:	75 dc                	jne    9f00180a <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
9f00182e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
9f001831:	c9                   	leave  
9f001832:	c3                   	ret    
9f001833:	90                   	nop

9f001834 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
9f001834:	55                   	push   ebp
9f001835:	89 e5                	mov    ebp,esp
9f001837:	83 ec 20             	sub    esp,0x20
9f00183a:	e8 48 1e 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00183f:	05 3d 3c 00 00       	add    eax,0x3c3d
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f001844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001847:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f00184a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00184d:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f001850:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001853:	c1 e0 10             	shl    eax,0x10
9f001856:	89 c2                	mov    edx,eax
9f001858:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00185b:	c1 e0 08             	shl    eax,0x8
9f00185e:	09 c2                	or     edx,eax
9f001860:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001863:	09 d0                	or     eax,edx
9f001865:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f001869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00186c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f00186f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001872:	c1 e0 18             	shl    eax,0x18
9f001875:	89 c2                	mov    edx,eax
9f001877:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00187a:	c1 e0 10             	shl    eax,0x10
9f00187d:	09 c2                	or     edx,eax
9f00187f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001882:	c1 e0 08             	shl    eax,0x8
9f001885:	09 d0                	or     eax,edx
9f001887:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f00188a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f00188d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001890:	83 e0 03             	and    eax,0x3
9f001893:	85 c0                	test   eax,eax
9f001895:	75 1c                	jne    9f0018b3 <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f001897:	eb 0e                	jmp    9f0018a7 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f001899:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00189c:	8d 50 04             	lea    edx,[eax+0x4]
9f00189f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0018a2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0018a5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f0018a7:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f0018ab:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0018af:	75 e8                	jne    9f001899 <memsetI+0x65>
9f0018b1:	eb 43                	jmp    9f0018f6 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f0018b3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0018b6:	83 e0 01             	and    eax,0x1
9f0018b9:	85 c0                	test   eax,eax
9f0018bb:	75 2c                	jne    9f0018e9 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f0018bd:	eb 10                	jmp    9f0018cf <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f0018bf:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0018c2:	8d 50 02             	lea    edx,[eax+0x2]
9f0018c5:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f0018c8:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f0018cc:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f0018cf:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f0018d3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0018d7:	75 e6                	jne    9f0018bf <memsetI+0x8b>
9f0018d9:	eb 1b                	jmp    9f0018f6 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f0018db:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0018de:	8d 50 01             	lea    edx,[eax+0x1]
9f0018e1:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0018e4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0018e7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f0018e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0018ec:	8d 50 ff             	lea    edx,[eax-0x1]
9f0018ef:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0018f2:	85 c0                	test   eax,eax
9f0018f4:	75 e5                	jne    9f0018db <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f0018f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f0018f9:	c9                   	leave  
9f0018fa:	c3                   	ret    

9f0018fb <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f0018fb:	55                   	push   ebp
9f0018fc:	89 e5                	mov    ebp,esp
9f0018fe:	e8 84 1d 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f001903:	05 79 3b 00 00       	add    eax,0x3b79
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f001908:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00190b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00190e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001911:	e8 1e ff ff ff       	call   9f001834 <memsetI>
9f001916:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f001919:	c9                   	leave  
9f00191a:	c3                   	ret    
9f00191b:	90                   	nop

9f00191c <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f00191c:	55                   	push   ebp
9f00191d:	89 e5                	mov    ebp,esp
9f00191f:	53                   	push   ebx
9f001920:	83 ec 04             	sub    esp,0x4
9f001923:	e8 5f 1d 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f001928:	05 54 3b 00 00       	add    eax,0x3b54
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f00192d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001930:	83 ec 08             	sub    esp,0x8
9f001933:	52                   	push   edx
9f001934:	6a 07                	push   0x7
9f001936:	89 c3                	mov    ebx,eax
9f001938:	e8 3f f0 ff ff       	call   9f00097c <do_syscall1>
9f00193d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:13
9f001940:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001943:	c9                   	leave  
9f001944:	c3                   	ret    
9f001945:	66 90                	xchg   ax,ax
9f001947:	90                   	nop

9f001948 <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:11

#include <stdarg.h>
#include "strings.h"

static int skip_atoi(const char **s)
{
9f001948:	55                   	push   ebp
9f001949:	89 e5                	mov    ebp,esp
9f00194b:	53                   	push   ebx
9f00194c:	83 ec 10             	sub    esp,0x10
9f00194f:	e8 33 1d 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f001954:	05 28 3b 00 00       	add    eax,0x3b28
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
	int i = 0;
9f001959:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

	while (ISDIGIT(**s))
9f001960:	eb 29                	jmp    9f00198b <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15
		i = i * 10 + *((*s)++) - '0';
9f001962:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f001965:	89 d0                	mov    eax,edx
9f001967:	c1 e0 02             	shl    eax,0x2
9f00196a:	01 d0                	add    eax,edx
9f00196c:	01 c0                	add    eax,eax
9f00196e:	89 c3                	mov    ebx,eax
9f001970:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001973:	8b 00                	mov    eax,DWORD PTR [eax]
9f001975:	8d 48 01             	lea    ecx,[eax+0x1]
9f001978:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00197b:	89 0a                	mov    DWORD PTR [edx],ecx
9f00197d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001980:	0f be c0             	movsx  eax,al
9f001983:	01 d8                	add    eax,ebx
9f001985:	83 e8 30             	sub    eax,0x30
9f001988:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:14

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f00198b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00198e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001990:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001993:	0f be c0             	movsx  eax,al
9f001996:	83 e8 30             	sub    eax,0x30
9f001999:	83 f8 09             	cmp    eax,0x9
9f00199c:	76 c4                	jbe    9f001962 <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
	return i;
9f00199e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
}
9f0019a1:	83 c4 10             	add    esp,0x10
9f0019a4:	5b                   	pop    ebx
9f0019a5:	5d                   	pop    ebp
9f0019a6:	c3                   	ret    

9f0019a7 <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:35
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f0019a7:	55                   	push   ebp
9f0019a8:	89 e5                	mov    ebp,esp
9f0019aa:	56                   	push   esi
9f0019ab:	53                   	push   ebx
9f0019ac:	83 ec 60             	sub    esp,0x60
9f0019af:	e8 fc 1c 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f0019b4:	81 c3 c8 3a 00 00    	add    ebx,0x3ac8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:45
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f0019ba:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0019bd:	83 e0 20             	and    eax,0x20
9f0019c0:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	if (type & LEFT)
9f0019c3:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0019c6:	83 e0 10             	and    eax,0x10
9f0019c9:	85 c0                	test   eax,eax
9f0019cb:	74 04                	je     9f0019d1 <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
		type &= ~ZEROPAD;
9f0019cd:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
	if (base < 2 || base > 16)
9f0019d1:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f0019d5:	7e 06                	jle    9f0019dd <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48 (discriminator 1)
9f0019d7:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f0019db:	7e 0a                	jle    9f0019e7 <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
		return NULL;
9f0019dd:	b8 00 00 00 00       	mov    eax,0x0
9f0019e2:	e9 f7 01 00 00       	jmp    9f001bde <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
	c = (type & ZEROPAD) ? '0' : ' ';
9f0019e7:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0019ea:	83 e0 01             	and    eax,0x1
9f0019ed:	85 c0                	test   eax,eax
9f0019ef:	74 07                	je     9f0019f8 <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 1)
9f0019f1:	b8 30 00 00 00       	mov    eax,0x30
9f0019f6:	eb 05                	jmp    9f0019fd <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 2)
9f0019f8:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50 (discriminator 4)
9f0019fd:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
	sign = 0;
9f001a00:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	if (type & SIGN) {
9f001a04:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001a07:	83 e0 02             	and    eax,0x2
9f001a0a:	85 c0                	test   eax,eax
9f001a0c:	74 39                	je     9f001a47 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53
		if (num < 0) {
9f001a0e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001a12:	79 0d                	jns    9f001a21 <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
			sign = '-';
9f001a14:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			num = -num;
9f001a18:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			size--;
9f001a1b:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f001a1f:	eb 26                	jmp    9f001a47 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
		} else if (type & PLUS) {
9f001a21:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001a24:	83 e0 04             	and    eax,0x4
9f001a27:	85 c0                	test   eax,eax
9f001a29:	74 0a                	je     9f001a35 <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
			sign = '+';
9f001a2b:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			size--;
9f001a2f:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f001a33:	eb 12                	jmp    9f001a47 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
		} else if (type & SPACE) {
9f001a35:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001a38:	83 e0 08             	and    eax,0x8
9f001a3b:	85 c0                	test   eax,eax
9f001a3d:	74 08                	je     9f001a47 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
			sign = ' ';
9f001a3f:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			size--;
9f001a43:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:65
		}
	}
	if (type & SPECIAL) {
9f001a47:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001a4a:	83 e0 40             	and    eax,0x40
9f001a4d:	85 c0                	test   eax,eax
9f001a4f:	74 16                	je     9f001a67 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		if (base == 16)
9f001a51:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001a55:	75 06                	jne    9f001a5d <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
			size -= 2;
9f001a57:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f001a5b:	eb 0a                	jmp    9f001a67 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
		else if (base == 8)
9f001a5d:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f001a61:	75 04                	jne    9f001a67 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
			size--;
9f001a63:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:71
	}
	i = 0;
9f001a67:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	if (num == 0)
9f001a6e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001a72:	75 4d                	jne    9f001ac1 <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
		tmp[i++] = '0';
9f001a74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001a77:	8d 50 01             	lea    edx,[eax+0x1]
9f001a7a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001a7d:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f001a82:	eb 43                	jmp    9f001ac7 <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f001a84:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f001a87:	8d 41 01             	lea    eax,[ecx+0x1]
9f001a8a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001a8d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001a90:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f001a93:	ba 00 00 00 00       	mov    edx,0x0
9f001a98:	f7 f6                	div    esi
9f001a9a:	89 d0                	mov    eax,edx
9f001a9c:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f001a9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001aa2:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f001aa5:	ba 00 00 00 00       	mov    edx,0x0
9f001aaa:	f7 f6                	div    esi
9f001aac:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f001aaf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001ab2:	0f b6 84 03 10 fd ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x2f0]
9f001ab9:	ff 
9f001aba:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f001abd:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:75
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f001ac1:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f001ac5:	75 bd                	jne    9f001a84 <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f001ac7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001aca:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f001acd:	7e 06                	jle    9f001ad5 <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
		precision = i;
9f001acf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001ad2:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
	size -= precision;
9f001ad5:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f001ad8:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	if (!(type & (ZEROPAD + LEFT)))
9f001adb:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001ade:	83 e0 11             	and    eax,0x11
9f001ae1:	85 c0                	test   eax,eax
9f001ae3:	75 1b                	jne    9f001b00 <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
		while (size-- > 0)
9f001ae5:	eb 0c                	jmp    9f001af3 <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			*str++ = ' ';
9f001ae7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001aea:	8d 50 01             	lea    edx,[eax+0x1]
9f001aed:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001af0:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f001af3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f001af6:	8d 50 ff             	lea    edx,[eax-0x1]
9f001af9:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f001afc:	85 c0                	test   eax,eax
9f001afe:	7f e7                	jg     9f001ae7 <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
	if (sign)
9f001b00:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f001b04:	74 0f                	je     9f001b15 <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
		*str++ = sign;
9f001b06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b09:	8d 50 01             	lea    edx,[eax+0x1]
9f001b0c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b0f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f001b13:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
	if (type & SPECIAL) {
9f001b15:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001b18:	83 e0 40             	and    eax,0x40
9f001b1b:	85 c0                	test   eax,eax
9f001b1d:	74 38                	je     9f001b57 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
		if (base == 8)
9f001b1f:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f001b23:	75 0e                	jne    9f001b33 <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
			*str++ = '0';
9f001b25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b28:	8d 50 01             	lea    edx,[eax+0x1]
9f001b2b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b2e:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f001b31:	eb 24                	jmp    9f001b57 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
		else if (base == 16) {
9f001b33:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f001b37:	75 1e                	jne    9f001b57 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
			*str++ = '0';
9f001b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b3c:	8d 50 01             	lea    edx,[eax+0x1]
9f001b3f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b42:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = ('X' | locase);
9f001b45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b48:	8d 50 01             	lea    edx,[eax+0x1]
9f001b4b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b4e:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f001b52:	83 ca 58             	or     edx,0x58
9f001b55:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:93
		}
	}
	if (!(type & LEFT))
9f001b57:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f001b5a:	83 e0 10             	and    eax,0x10
9f001b5d:	85 c0                	test   eax,eax
9f001b5f:	75 2c                	jne    9f001b8d <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		while (size-- > 0)
9f001b61:	eb 0f                	jmp    9f001b72 <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = c;
9f001b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b66:	8d 50 01             	lea    edx,[eax+0x1]
9f001b69:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b6c:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f001b70:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f001b72:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f001b75:	8d 50 ff             	lea    edx,[eax-0x1]
9f001b78:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f001b7b:	85 c0                	test   eax,eax
9f001b7d:	7f e4                	jg     9f001b63 <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
	while (i < precision--)
9f001b7f:	eb 0c                	jmp    9f001b8d <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		*str++ = '0';
9f001b81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b84:	8d 50 01             	lea    edx,[eax+0x1]
9f001b87:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001b8a:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f001b8d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f001b90:	8d 50 ff             	lea    edx,[eax-0x1]
9f001b93:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f001b96:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f001b99:	7f e6                	jg     9f001b81 <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
	while (i-- > 0)
9f001b9b:	eb 16                	jmp    9f001bb3 <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = tmp[i];
9f001b9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ba0:	8d 50 01             	lea    edx,[eax+0x1]
9f001ba3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001ba6:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f001ba9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001bac:	01 ca                	add    edx,ecx
9f001bae:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001bb1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f001bb3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001bb6:	8d 50 ff             	lea    edx,[eax-0x1]
9f001bb9:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001bbc:	85 c0                	test   eax,eax
9f001bbe:	7f dd                	jg     9f001b9d <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
	while (size-- > 0)
9f001bc0:	eb 0c                	jmp    9f001bce <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = ' ';
9f001bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bc5:	8d 50 01             	lea    edx,[eax+0x1]
9f001bc8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f001bcb:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f001bce:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f001bd1:	8d 50 ff             	lea    edx,[eax-0x1]
9f001bd4:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f001bd7:	85 c0                	test   eax,eax
9f001bd9:	7f e7                	jg     9f001bc2 <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
	return str;
9f001bdb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103 (discriminator 1)
}
9f001bde:	83 c4 60             	add    esp,0x60
9f001be1:	5b                   	pop    ebx
9f001be2:	5e                   	pop    esi
9f001be3:	5d                   	pop    ebp
9f001be4:	c3                   	ret    

9f001be5 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:105
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f001be5:	55                   	push   ebp
9f001be6:	89 e5                	mov    ebp,esp
9f001be8:	53                   	push   ebx
9f001be9:	83 ec 34             	sub    esp,0x34
9f001bec:	e8 bf 1a 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f001bf1:	81 c3 8b 38 00 00    	add    ebx,0x388b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f001bf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bfa:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f001bfd:	e9 08 04 00 00       	jmp    9f00200a <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
		if (*fmt != '%') {
9f001c02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c05:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001c08:	3c 25                	cmp    al,0x25
9f001c0a:	74 16                	je     9f001c22 <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
			*str++ = *fmt;
9f001c0c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001c0f:	8d 50 01             	lea    edx,[eax+0x1]
9f001c12:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001c15:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001c18:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001c1b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			continue;
9f001c1d:	e9 df 03 00 00       	jmp    9f002001 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:126
		}

		/* process flags */
		flags = 0;
9f001c22:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:128
	      repeat:
		++fmt;		/* this also skips first '%' */
9f001c29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c2c:	83 c0 01             	add    eax,0x1
9f001c2f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
		switch (*fmt) {
9f001c32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c35:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001c38:	0f be c0             	movsx  eax,al
9f001c3b:	83 e8 20             	sub    eax,0x20
9f001c3e:	83 f8 10             	cmp    eax,0x10
9f001c41:	77 2c                	ja     9f001c6f <.L43>
9f001c43:	c1 e0 02             	shl    eax,0x2
9f001c46:	8b 84 18 7c fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x484]
9f001c4d:	01 d8                	add    eax,ebx
9f001c4f:	ff e0                	jmp    eax

9f001c51 <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:131
		case '-':
			flags |= LEFT;
9f001c51:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
			goto repeat;
9f001c55:	eb d2                	jmp    9f001c29 <vsprintf+0x44>

9f001c57 <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:134
		case '+':
			flags |= PLUS;
9f001c57:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
			goto repeat;
9f001c5b:	eb cc                	jmp    9f001c29 <vsprintf+0x44>

9f001c5d <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:137
		case ' ':
			flags |= SPACE;
9f001c5d:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
			goto repeat;
9f001c61:	eb c6                	jmp    9f001c29 <vsprintf+0x44>

9f001c63 <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:140
		case '#':
			flags |= SPECIAL;
9f001c63:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
			goto repeat;
9f001c67:	eb c0                	jmp    9f001c29 <vsprintf+0x44>

9f001c69 <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:143
		case '0':
			flags |= ZEROPAD;
9f001c69:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
			goto repeat;
9f001c6d:	eb ba                	jmp    9f001c29 <vsprintf+0x44>

9f001c6f <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:148
		}

		/* get field width */
		field_width = -1;
9f001c6f:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		if (ISDIGIT(*fmt))
9f001c76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c79:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001c7c:	0f be c0             	movsx  eax,al
9f001c7f:	83 e8 30             	sub    eax,0x30
9f001c82:	83 f8 09             	cmp    eax,0x9
9f001c85:	77 11                	ja     9f001c98 <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
			field_width = skip_atoi(&fmt);
9f001c87:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001c8a:	50                   	push   eax
9f001c8b:	e8 b8 fc ff ff       	call   9f001948 <skip_atoi>
9f001c90:	83 c4 04             	add    esp,0x4
9f001c93:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f001c96:	eb 2e                	jmp    9f001cc6 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
		else if (*fmt == '*') {
9f001c98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c9b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001c9e:	3c 2a                	cmp    al,0x2a
9f001ca0:	75 24                	jne    9f001cc6 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
			++fmt;
9f001ca2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ca5:	83 c0 01             	add    eax,0x1
9f001ca8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:154
			/* it's the next argument */
			field_width = va_arg(args, int);
9f001cab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001cae:	8d 50 04             	lea    edx,[eax+0x4]
9f001cb1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001cb4:	8b 00                	mov    eax,DWORD PTR [eax]
9f001cb6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			if (field_width < 0) {
9f001cb9:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f001cbd:	79 07                	jns    9f001cc6 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
				field_width = -field_width;
9f001cbf:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				flags |= LEFT;
9f001cc2:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:162
			}
		}

		/* get the precision */
		precision = -1;
9f001cc6:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
		if (*fmt == '.') {
9f001ccd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cd0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cd3:	3c 2e                	cmp    al,0x2e
9f001cd5:	75 59                	jne    9f001d30 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
			++fmt;
9f001cd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001cda:	83 c0 01             	add    eax,0x1
9f001cdd:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			if (ISDIGIT(*fmt))
9f001ce0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ce3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001ce6:	0f be c0             	movsx  eax,al
9f001ce9:	83 e8 30             	sub    eax,0x30
9f001cec:	83 f8 09             	cmp    eax,0x9
9f001cef:	77 11                	ja     9f001d02 <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
				precision = skip_atoi(&fmt);
9f001cf1:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001cf4:	50                   	push   eax
9f001cf5:	e8 4e fc ff ff       	call   9f001948 <skip_atoi>
9f001cfa:	83 c4 04             	add    esp,0x4
9f001cfd:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f001d00:	eb 21                	jmp    9f001d23 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
			else if (*fmt == '*') {
9f001d02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d05:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d08:	3c 2a                	cmp    al,0x2a
9f001d0a:	75 17                	jne    9f001d23 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
				++fmt;
9f001d0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d0f:	83 c0 01             	add    eax,0x1
9f001d12:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:170
				/* it's the next argument */
				precision = va_arg(args, int);
9f001d15:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001d18:	8d 50 04             	lea    edx,[eax+0x4]
9f001d1b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001d1e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001d20:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:172
			}
			if (precision < 0)
9f001d23:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f001d27:	79 07                	jns    9f001d30 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
				precision = 0;
9f001d29:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:177
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f001d30:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f001d37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d3a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d3d:	3c 68                	cmp    al,0x68
9f001d3f:	74 14                	je     9f001d55 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 1)
9f001d41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d44:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d47:	3c 6c                	cmp    al,0x6c
9f001d49:	74 0a                	je     9f001d55 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178 (discriminator 2)
9f001d4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d4e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d51:	3c 4c                	cmp    al,0x4c
9f001d53:	75 15                	jne    9f001d6a <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
			qualifier = *fmt;
9f001d55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d58:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d5b:	0f be c0             	movsx  eax,al
9f001d5e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			++fmt;
9f001d61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d64:	83 c0 01             	add    eax,0x1
9f001d67:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:184
		}

		/* default base */
		base = 10;
9f001d6a:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:186

		switch (*fmt) {
9f001d71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d74:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001d77:	0f be c0             	movsx  eax,al
9f001d7a:	83 e8 25             	sub    eax,0x25
9f001d7d:	83 f8 53             	cmp    eax,0x53
9f001d80:	0f 87 b5 01 00 00    	ja     9f001f3b <.L57>
9f001d86:	c1 e0 02             	shl    eax,0x2
9f001d89:	8b 84 18 c0 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x440]
9f001d90:	01 d8                	add    eax,ebx
9f001d92:	ff e0                	jmp    eax

9f001d94 <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:188
		case 'c':
			if (!(flags & LEFT))
9f001d94:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001d97:	83 e0 10             	and    eax,0x10
9f001d9a:	85 c0                	test   eax,eax
9f001d9c:	75 18                	jne    9f001db6 <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
				while (--field_width > 0)
9f001d9e:	eb 0c                	jmp    9f001dac <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
					*str++ = ' ';
9f001da0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001da3:	8d 50 01             	lea    edx,[eax+0x1]
9f001da6:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001da9:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f001dac:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f001db0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f001db4:	7f ea                	jg     9f001da0 <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f001db6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001db9:	8d 50 01             	lea    edx,[eax+0x1]
9f001dbc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001dbf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f001dc2:	8d 4a 04             	lea    ecx,[edx+0x4]
9f001dc5:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f001dc8:	8b 12                	mov    edx,DWORD PTR [edx]
9f001dca:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
			while (--field_width > 0)
9f001dcc:	eb 0c                	jmp    9f001dda <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
				*str++ = ' ';
9f001dce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001dd1:	8d 50 01             	lea    edx,[eax+0x1]
9f001dd4:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001dd7:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f001dda:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f001dde:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f001de2:	7f ea                	jg     9f001dce <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
			continue;
9f001de4:	e9 18 02 00 00       	jmp    9f002001 <.L96+0x8c>

9f001de9 <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:197

		case 's':
			s = va_arg(args, char *);
9f001de9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001dec:	8d 50 04             	lea    edx,[eax+0x4]
9f001def:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001df2:	8b 00                	mov    eax,DWORD PTR [eax]
9f001df4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f001df7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f001dfb:	74 13                	je     9f001e10 <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
                            len = strlenI(s);
9f001dfd:	83 ec 0c             	sub    esp,0xc
9f001e00:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f001e03:	e8 ad 05 00 00       	call   9f0023b5 <strlenI>
9f001e08:	83 c4 10             	add    esp,0x10
9f001e0b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001e0e:	eb 07                	jmp    9f001e17 <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:201
                        else
                            len = 0;
9f001e10:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:203

			if (!(flags & LEFT))
9f001e17:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e1a:	83 e0 10             	and    eax,0x10
9f001e1d:	85 c0                	test   eax,eax
9f001e1f:	75 1c                	jne    9f001e3d <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
				while (len < field_width--)
9f001e21:	eb 0c                	jmp    9f001e2f <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
					*str++ = ' ';
9f001e23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001e26:	8d 50 01             	lea    edx,[eax+0x1]
9f001e29:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001e2c:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f001e2f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001e32:	8d 50 ff             	lea    edx,[eax-0x1]
9f001e35:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f001e38:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001e3b:	7f e6                	jg     9f001e23 <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f001e3d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f001e44:	eb 1b                	jmp    9f001e61 <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
				*str++ = *s++;
9f001e46:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001e49:	8d 50 01             	lea    edx,[eax+0x1]
9f001e4c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001e4f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f001e52:	8d 4a 01             	lea    ecx,[edx+0x1]
9f001e55:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f001e58:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001e5b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f001e5d:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206 (discriminator 1)
9f001e61:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001e64:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001e67:	7c dd                	jl     9f001e46 <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
				*str++ = *s++;
			while (len < field_width--)
9f001e69:	eb 0c                	jmp    9f001e77 <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = ' ';
9f001e6b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001e6e:	8d 50 01             	lea    edx,[eax+0x1]
9f001e71:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001e74:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f001e77:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001e7a:	8d 50 ff             	lea    edx,[eax-0x1]
9f001e7d:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f001e80:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001e83:	7f e6                	jg     9f001e6b <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
			continue;
9f001e85:	e9 77 01 00 00       	jmp    9f002001 <.L96+0x8c>

9f001e8a <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:213

		case 'p':
			if (field_width == -1) {
9f001e8a:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f001e8e:	75 0b                	jne    9f001e9b <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214
				field_width = 2 * sizeof(void *);
9f001e90:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				flags |= ZEROPAD;
9f001e97:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f001e9b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001e9e:	8d 50 04             	lea    edx,[eax+0x4]
9f001ea1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001ea4:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:217
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f001ea6:	83 ec 08             	sub    esp,0x8
9f001ea9:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001eac:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f001eaf:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f001eb2:	6a 10                	push   0x10
9f001eb4:	50                   	push   eax
9f001eb5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f001eb8:	e8 ea fa ff ff       	call   9f0019a7 <number>
9f001ebd:	83 c4 20             	add    esp,0x20
9f001ec0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:220
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f001ec3:	e9 39 01 00 00       	jmp    9f002001 <.L96+0x8c>

9f001ec8 <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:223

		case 'n':
			if (qualifier == 'l') {
9f001ec8:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f001ecc:	75 20                	jne    9f001eee <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224
				long *ip = va_arg(args, long *);
9f001ece:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001ed1:	8d 50 04             	lea    edx,[eax+0x4]
9f001ed4:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001ed7:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ed9:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				*ip = (str - buf);
9f001edc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001edf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001ee2:	29 c2                	sub    edx,eax
9f001ee4:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f001ee7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f001ee9:	e9 13 01 00 00       	jmp    9f002001 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:227
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f001eee:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001ef1:	8d 50 04             	lea    edx,[eax+0x4]
9f001ef4:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001ef7:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ef9:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
				*ip = (str - buf);
9f001efc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001eff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001f02:	29 c2                	sub    edx,eax
9f001f04:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f001f07:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:230
			}
			continue;
9f001f09:	e9 f3 00 00 00       	jmp    9f002001 <.L96+0x8c>

9f001f0e <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:233

		case '%':
			*str++ = '%';
9f001f0e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f11:	8d 50 01             	lea    edx,[eax+0x1]
9f001f14:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001f17:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234
			continue;
9f001f1a:	e9 e2 00 00 00       	jmp    9f002001 <.L96+0x8c>

9f001f1f <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:238

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f001f1f:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239
			break;
9f001f26:	eb 4e                	jmp    9f001f76 <.L96+0x1>

9f001f28 <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:242

		case 'x':
			flags |= SMALL;
9f001f28:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f001f2c <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:244
		case 'X':
			base = 16;
9f001f2c:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
			break;
9f001f33:	eb 41                	jmp    9f001f76 <.L96+0x1>

9f001f35 <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:249

		case 'd':
		case 'i':
			flags |= SIGN;
9f001f35:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251
		case 'u':
			break;
9f001f39:	eb 3a                	jmp    9f001f75 <.L96>

9f001f3b <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:254

		default:
			*str++ = '%';
9f001f3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f3e:	8d 50 01             	lea    edx,[eax+0x1]
9f001f41:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001f44:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255
			if (*fmt)
9f001f47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f4a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001f4d:	84 c0                	test   al,al
9f001f4f:	74 16                	je     9f001f67 <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
				*str++ = *fmt;
9f001f51:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f54:	8d 50 01             	lea    edx,[eax+0x1]
9f001f57:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f001f5a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001f5d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f001f60:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			else
				--fmt;
			continue;
9f001f62:	e9 9a 00 00 00       	jmp    9f002001 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:258
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f001f67:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001f6a:	83 e8 01             	sub    eax,0x1
9f001f6d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
			continue;
9f001f70:	e9 8c 00 00 00       	jmp    9f002001 <.L96+0x8c>

9f001f75 <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:251

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f001f75:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:261
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f001f76:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f001f7a:	75 10                	jne    9f001f8c <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
			num = va_arg(args, unsigned long);
9f001f7c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001f7f:	8d 50 04             	lea    edx,[eax+0x4]
9f001f82:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001f85:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f87:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001f8a:	eb 54                	jmp    9f001fe0 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
		else if (qualifier == 'h') {
9f001f8c:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f001f90:	75 26                	jne    9f001fb8 <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
			num = (unsigned short)va_arg(args, int);
9f001f92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001f95:	8d 50 04             	lea    edx,[eax+0x4]
9f001f98:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001f9b:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f9d:	25 ff ff 00 00       	and    eax,0xffff
9f001fa2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			if (flags & SIGN)
9f001fa5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001fa8:	83 e0 02             	and    eax,0x2
9f001fab:	85 c0                	test   eax,eax
9f001fad:	74 31                	je     9f001fe0 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
				num = (short)num;
9f001faf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001fb2:	98                   	cwde   
9f001fb3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001fb6:	eb 28                	jmp    9f001fe0 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
		} else if (flags & SIGN)
9f001fb8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001fbb:	83 e0 02             	and    eax,0x2
9f001fbe:	85 c0                	test   eax,eax
9f001fc0:	74 10                	je     9f001fd2 <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
			num = va_arg(args, int);
9f001fc2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001fc5:	8d 50 04             	lea    edx,[eax+0x4]
9f001fc8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001fcb:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fcd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001fd0:	eb 0e                	jmp    9f001fe0 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:270
		else
			num = va_arg(args, unsigned int);
9f001fd2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f001fd5:	8d 50 04             	lea    edx,[eax+0x4]
9f001fd8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f001fdb:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fdd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		str = number(str, num, base, field_width, precision, flags);
9f001fe0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001fe3:	83 ec 08             	sub    esp,0x8
9f001fe6:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001fe9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f001fec:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f001fef:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f001ff2:	50                   	push   eax
9f001ff3:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f001ff6:	e8 ac f9 ff ff       	call   9f0019a7 <number>
9f001ffb:	83 c4 20             	add    esp,0x20
9f001ffe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f002001:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002004:	83 c0 01             	add    eax,0x1
9f002007:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:119 (discriminator 1)
9f00200a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00200d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002010:	84 c0                	test   al,al
9f002012:	0f 85 ea fb ff ff    	jne    9f001c02 <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:273
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f002018:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00201b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
	return str - buf;
9f00201e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002024:	29 c2                	sub    edx,eax
9f002026:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
}
9f002028:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00202b:	c9                   	leave  
9f00202c:	c3                   	ret    

9f00202d <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:278

int sprintf(char *buf, const char *fmt, ...)
{
9f00202d:	55                   	push   ebp
9f00202e:	89 e5                	mov    ebp,esp
9f002030:	83 ec 18             	sub    esp,0x18
9f002033:	e8 4f 16 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002038:	05 44 34 00 00       	add    eax,0x3444
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:282
	va_list args;
	int i;

	va_start(args, fmt);
9f00203d:	8d 45 10             	lea    eax,[ebp+0x10]
9f002040:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	i = vsprintf(buf, fmt, args);
9f002043:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002046:	83 ec 04             	sub    esp,0x4
9f002049:	50                   	push   eax
9f00204a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00204d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002050:	e8 90 fb ff ff       	call   9f001be5 <vsprintf>
9f002055:	83 c4 10             	add    esp,0x10
9f002058:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:285
	va_end(args);
	return i;
9f00205b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
}
9f00205e:	c9                   	leave  
9f00205f:	c3                   	ret    

9f002060 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:68
    return;
}
*/
//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f002060:	55                   	push   ebp
9f002061:	89 e5                	mov    ebp,esp
9f002063:	53                   	push   ebx
9f002064:	83 ec 14             	sub    esp,0x14
9f002067:	e8 44 16 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f00206c:	81 c3 10 34 00 00    	add    ebx,0x3410
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:70
    char buff[5];
    int buffPtr=0;
9f002072:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:72

    memsetI(buff,0,10);
9f002079:	83 ec 04             	sub    esp,0x4
9f00207c:	6a 0a                	push   0xa
9f00207e:	6a 00                	push   0x0
9f002080:	8d 45 ef             	lea    eax,[ebp-0x11]
9f002083:	50                   	push   eax
9f002084:	e8 ab f7 ff ff       	call   9f001834 <memsetI>
9f002089:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f00208c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00208f:	8d 50 01             	lea    edx,[eax+0x1]
9f002092:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f002095:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '[';
9f00209a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00209d:	8d 50 01             	lea    edx,[eax+0x1]
9f0020a0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0020a3:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = '0';
9f0020a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0020ab:	8d 50 01             	lea    edx,[eax+0x1]
9f0020ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0020b1:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr++] = 'K';
9f0020b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0020b9:	8d 50 01             	lea    edx,[eax+0x1]
9f0020bc:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0020bf:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    buff[buffPtr] = '\0';
9f0020c4:	8d 55 ef             	lea    edx,[ebp-0x11]
9f0020c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0020ca:	01 d0                	add    eax,edx
9f0020cc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:80
    printI(buff);
9f0020cf:	83 ec 0c             	sub    esp,0xc
9f0020d2:	8d 45 ef             	lea    eax,[ebp-0x11]
9f0020d5:	50                   	push   eax
9f0020d6:	e8 b3 ea ff ff       	call   9f000b8e <printI>
9f0020db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
    
    return;
9f0020de:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:83
}
9f0020df:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0020e2:	c9                   	leave  
9f0020e3:	c3                   	ret    

9f0020e4 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f0020e4:	55                   	push   ebp
9f0020e5:	89 e5                	mov    ebp,esp
9f0020e7:	53                   	push   ebx
9f0020e8:	83 ec 04             	sub    esp,0x4
9f0020eb:	e8 c0 15 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f0020f0:	81 c3 8c 33 00 00    	add    ebx,0x338c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
9f0020f6:	83 ec 0c             	sub    esp,0xc
9f0020f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0020fc:	e8 b4 02 00 00       	call   9f0023b5 <strlenI>
9f002101:	83 c4 10             	add    esp,0x10
9f002104:	89 c2                	mov    edx,eax
9f002106:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002109:	01 d0                	add    eax,edx
9f00210b:	83 ec 08             	sub    esp,0x8
9f00210e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002111:	50                   	push   eax
9f002112:	e8 59 01 00 00       	call   9f002270 <strcpyI>
9f002117:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
9f00211a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
9f00211d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002120:	c9                   	leave  
9f002121:	c3                   	ret    

9f002122 <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
9f002122:	55                   	push   ebp
9f002123:	89 e5                	mov    ebp,esp
9f002125:	53                   	push   ebx
9f002126:	83 ec 04             	sub    esp,0x4
9f002129:	e8 82 15 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f00212e:	81 c3 4e 33 00 00    	add    ebx,0x334e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
9f002134:	83 ec 0c             	sub    esp,0xc
9f002137:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00213a:	e8 76 02 00 00       	call   9f0023b5 <strlenI>
9f00213f:	83 c4 10             	add    esp,0x10
9f002142:	89 c2                	mov    edx,eax
9f002144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002147:	01 d0                	add    eax,edx
9f002149:	83 ec 08             	sub    esp,0x8
9f00214c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00214f:	50                   	push   eax
9f002150:	e8 1b 01 00 00       	call   9f002270 <strcpyI>
9f002155:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
9f002158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
9f00215b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00215e:	c9                   	leave  
9f00215f:	c3                   	ret    

9f002160 <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
9f002160:	55                   	push   ebp
9f002161:	89 e5                	mov    ebp,esp
9f002163:	83 ec 10             	sub    esp,0x10
9f002166:	e8 1c 15 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00216b:	05 11 33 00 00       	add    eax,0x3311
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
9f002170:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
9f002177:	eb 04                	jmp    9f00217d <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
9f002179:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
9f00217d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002180:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002183:	01 d0                	add    eax,edx
9f002185:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002188:	84 c0                	test   al,al
9f00218a:	75 ed                	jne    9f002179 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
9f00218c:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
9f002193:	eb 1d                	jmp    9f0021b2 <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
9f002195:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002198:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00219b:	01 c2                	add    edx,eax
9f00219d:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
9f0021a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021a3:	01 c8                	add    eax,ecx
9f0021a5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021a8:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
9f0021aa:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
9f0021ae:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
9f0021b2:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0021b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0021b8:	01 d0                	add    eax,edx
9f0021ba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021bd:	84 c0                	test   al,al
9f0021bf:	75 d4                	jne    9f002195 <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
9f0021c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0021c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0021c7:	01 d0                	add    eax,edx
9f0021c9:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
9f0021cc:	90                   	nop
9f0021cd:	c9                   	leave  
9f0021ce:	c3                   	ret    
9f0021cf:	90                   	nop

9f0021d0 <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
9f0021d0:	55                   	push   ebp
9f0021d1:	89 e5                	mov    ebp,esp
9f0021d3:	56                   	push   esi
9f0021d4:	53                   	push   ebx
9f0021d5:	83 ec 10             	sub    esp,0x10
9f0021d8:	e8 aa 14 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0021dd:	05 9f 32 00 00       	add    eax,0x329f
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
9f0021e2:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
9f0021e5:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f0021e8:	89 d8                	mov    eax,ebx
9f0021ea:	8d 58 01             	lea    ebx,[eax+0x1]
9f0021ed:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021f0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
9f0021f3:	89 f0                	mov    eax,esi
9f0021f5:	8d 70 01             	lea    esi,[eax+0x1]
9f0021f8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0021fb:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
9f0021fe:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f002202:	75 0e                	jne    9f002212 <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
9f002204:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f002208:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f00220c:	29 c2                	sub    edx,eax
9f00220e:	89 d0                	mov    eax,edx
9f002210:	eb 15                	jmp    9f002227 <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
9f002212:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f002216:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f002219:	74 cd                	je     9f0021e8 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
9f00221b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f00221f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f002223:	29 c2                	sub    edx,eax
9f002225:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
9f002227:	83 c4 10             	add    esp,0x10
9f00222a:	5b                   	pop    ebx
9f00222b:	5e                   	pop    esi
9f00222c:	5d                   	pop    ebp
9f00222d:	c3                   	ret    
9f00222e:	66 90                	xchg   ax,ax

9f002230 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f002230:	55                   	push   ebp
9f002231:	89 e5                	mov    ebp,esp
9f002233:	83 ec 10             	sub    esp,0x10
9f002236:	e8 4c 14 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00223b:	05 41 32 00 00       	add    eax,0x3241
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f002240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002243:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f002246:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f002247:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00224a:	8d 50 01             	lea    edx,[eax+0x1]
9f00224d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002250:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002253:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002256:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002259:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00225c:	88 10                	mov    BYTE PTR [eax],dl
9f00225e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002261:	84 c0                	test   al,al
9f002263:	75 e2                	jne    9f002247 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f002265:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002268:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f00226b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f00226e:	c9                   	leave  
9f00226f:	c3                   	ret    

9f002270 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f002270:	55                   	push   ebp
9f002271:	89 e5                	mov    ebp,esp
9f002273:	83 ec 10             	sub    esp,0x10
9f002276:	e8 0c 14 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00227b:	05 01 32 00 00       	add    eax,0x3201
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f002280:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002283:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f002286:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f002287:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00228a:	8d 50 01             	lea    edx,[eax+0x1]
9f00228d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002290:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002293:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002296:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f002299:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00229c:	88 10                	mov    BYTE PTR [eax],dl
9f00229e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0022a1:	84 c0                	test   al,al
9f0022a3:	75 e2                	jne    9f002287 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f0022a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0022a8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f0022ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f0022ae:	c9                   	leave  
9f0022af:	c3                   	ret    

9f0022b0 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f0022b0:	55                   	push   ebp
9f0022b1:	89 e5                	mov    ebp,esp
9f0022b3:	83 ec 10             	sub    esp,0x10
9f0022b6:	e8 cc 13 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0022bb:	05 c1 31 00 00       	add    eax,0x31c1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f0022c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0022c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f0022c6:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f0022c7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0022ca:	8d 50 01             	lea    edx,[eax+0x1]
9f0022cd:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0022d0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0022d3:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0022d6:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0022d9:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0022dc:	88 10                	mov    BYTE PTR [eax],dl
9f0022de:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0022e1:	84 c0                	test   al,al
9f0022e3:	74 0d                	je     9f0022f2 <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f0022e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0022e8:	8d 50 ff             	lea    edx,[eax-0x1]
9f0022eb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0022ee:	85 c0                	test   eax,eax
9f0022f0:	75 d5                	jne    9f0022c7 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f0022f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f0022f5:	c9                   	leave  
9f0022f6:	c3                   	ret    
9f0022f7:	90                   	nop

9f0022f8 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f0022f8:	55                   	push   ebp
9f0022f9:	89 e5                	mov    ebp,esp
9f0022fb:	83 ec 04             	sub    esp,0x4
9f0022fe:	e8 84 13 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002303:	05 79 31 00 00       	add    eax,0x3179
9f002308:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00230b:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f00230e:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f002312:	7e 0d                	jle    9f002321 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f002314:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f002318:	7f 07                	jg     9f002321 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f00231a:	b8 01 00 00 00       	mov    eax,0x1
9f00231f:	eb 05                	jmp    9f002326 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f002321:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f002326:	c9                   	leave  
9f002327:	c3                   	ret    

9f002328 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f002328:	55                   	push   ebp
9f002329:	89 e5                	mov    ebp,esp
9f00232b:	83 ec 10             	sub    esp,0x10
9f00232e:	e8 54 13 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002333:	05 49 31 00 00       	add    eax,0x3149
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f002338:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f00233f:	eb 27                	jmp    9f002368 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f002341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002344:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002347:	89 c2                	mov    edx,eax
9f002349:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00234c:	01 d0                	add    eax,edx
9f00234e:	0f be c0             	movsx  eax,al
9f002351:	50                   	push   eax
9f002352:	e8 a1 ff ff ff       	call   9f0022f8 <check_digit>
9f002357:	83 c4 04             	add    esp,0x4
9f00235a:	83 f0 01             	xor    eax,0x1
9f00235d:	84 c0                	test   al,al
9f00235f:	74 07                	je     9f002368 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f002361:	b8 00 00 00 00       	mov    eax,0x0
9f002366:	eb 17                	jmp    9f00237f <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f002368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00236b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00236e:	0f be d0             	movsx  edx,al
9f002371:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002374:	01 d0                	add    eax,edx
9f002376:	85 c0                	test   eax,eax
9f002378:	75 c7                	jne    9f002341 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f00237a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f00237f:	c9                   	leave  
9f002380:	c3                   	ret    
9f002381:	66 90                	xchg   ax,ax
9f002383:	90                   	nop

9f002384 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
9f002384:	55                   	push   ebp
9f002385:	89 e5                	mov    ebp,esp
9f002387:	83 ec 10             	sub    esp,0x10
9f00238a:	e8 f8 12 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f00238f:	05 ed 30 00 00       	add    eax,0x30ed
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
9f002394:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
9f00239b:	eb 04                	jmp    9f0023a1 <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
9f00239d:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f0023a1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0023a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0023a7:	01 d0                	add    eax,edx
9f0023a9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0023ac:	84 c0                	test   al,al
9f0023ae:	75 ed                	jne    9f00239d <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
9f0023b0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
9f0023b3:	c9                   	leave  
9f0023b4:	c3                   	ret    

9f0023b5 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
9f0023b5:	55                   	push   ebp
9f0023b6:	89 e5                	mov    ebp,esp
9f0023b8:	83 ec 10             	sub    esp,0x10
9f0023bb:	e8 c7 12 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0023c0:	05 bc 30 00 00       	add    eax,0x30bc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
9f0023c5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
9f0023cc:	eb 04                	jmp    9f0023d2 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
9f0023ce:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f0023d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0023d5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0023d8:	01 d0                	add    eax,edx
9f0023da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0023dd:	84 c0                	test   al,al
9f0023df:	75 ed                	jne    9f0023ce <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
9f0023e1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
9f0023e4:	c9                   	leave  
9f0023e5:	c3                   	ret    
9f0023e6:	66 90                	xchg   ax,ax

9f0023e8 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f0023e8:	55                   	push   ebp
9f0023e9:	89 e5                	mov    ebp,esp
9f0023eb:	e8 97 12 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0023f0:	05 8c 30 00 00       	add    eax,0x308c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f0023f5:	eb 4b                	jmp    9f002442 <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f0023f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0023fa:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0023fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002400:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002403:	38 c2                	cmp    dl,al
9f002405:	74 1e                	je     9f002425 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f002407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00240a:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00240d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002410:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002413:	38 c2                	cmp    dl,al
9f002415:	73 07                	jae    9f00241e <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f002417:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f00241c:	eb 2f                	jmp    9f00244d <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f00241e:	b8 01 00 00 00       	mov    eax,0x1
9f002423:	eb 28                	jmp    9f00244d <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f002425:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002428:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00242b:	84 c0                	test   al,al
9f00242d:	75 07                	jne    9f002436 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f00242f:	b8 00 00 00 00       	mov    eax,0x0
9f002434:	eb 17                	jmp    9f00244d <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f002436:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f00243a:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f00243e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f002442:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002446:	75 af                	jne    9f0023f7 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f002448:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f00244d:	5d                   	pop    ebp
9f00244e:	c3                   	ret    

9f00244f <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f00244f:	55                   	push   ebp
9f002450:	89 e5                	mov    ebp,esp
9f002452:	e8 30 12 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002457:	05 25 30 00 00       	add    eax,0x3025
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f00245c:	eb 4b                	jmp    9f0024a9 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f00245e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002461:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002464:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002467:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00246a:	38 c2                	cmp    dl,al
9f00246c:	74 1e                	je     9f00248c <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f00246e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002471:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002474:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002477:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00247a:	38 c2                	cmp    dl,al
9f00247c:	73 07                	jae    9f002485 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f00247e:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f002483:	eb 2f                	jmp    9f0024b4 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f002485:	b8 01 00 00 00       	mov    eax,0x1
9f00248a:	eb 28                	jmp    9f0024b4 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f00248c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00248f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002492:	84 c0                	test   al,al
9f002494:	75 07                	jne    9f00249d <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f002496:	b8 00 00 00 00       	mov    eax,0x0
9f00249b:	eb 17                	jmp    9f0024b4 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f00249d:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f0024a1:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f0024a5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f0024a9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0024ad:	75 af                	jne    9f00245e <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f0024af:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f0024b4:	5d                   	pop    ebp
9f0024b5:	c3                   	ret    
9f0024b6:	66 90                	xchg   ax,ax

9f0024b8 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f0024b8:	55                   	push   ebp
9f0024b9:	89 e5                	mov    ebp,esp
9f0024bb:	83 ec 10             	sub    esp,0x10
9f0024be:	e8 c4 11 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0024c3:	05 b9 2f 00 00       	add    eax,0x2fb9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f0024c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0024cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f0024ce:	eb 1b                	jmp    9f0024eb <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f0024d0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0024d3:	8d 50 01             	lea    edx,[eax+0x1]
9f0024d6:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f0024d9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0024dc:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0024df:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f0024e2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0024e5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f0024e7:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f0024eb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0024ef:	74 1c                	je     9f00250d <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f0024f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0024f4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0024f7:	84 c0                	test   al,al
9f0024f9:	75 d5                	jne    9f0024d0 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f0024fb:	eb 10                	jmp    9f00250d <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f0024fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002500:	8d 50 01             	lea    edx,[eax+0x1]
9f002503:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002506:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f002509:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f00250d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002511:	75 ea                	jne    9f0024fd <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
9f002513:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
9f002516:	c9                   	leave  
9f002517:	c3                   	ret    

9f002518 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f002518:	55                   	push   ebp
9f002519:	89 e5                	mov    ebp,esp
9f00251b:	e8 67 11 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002520:	05 5c 2f 00 00       	add    eax,0x2f5c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
9f002525:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002528:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00252b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00252e:	e8 85 ff ff ff       	call   9f0024b8 <strncpyI>
9f002533:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
9f002536:	c9                   	leave  
9f002537:	c3                   	ret    

9f002538 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f002538:	55                   	push   ebp
9f002539:	89 e5                	mov    ebp,esp
9f00253b:	57                   	push   edi
9f00253c:	56                   	push   esi
9f00253d:	53                   	push   ebx
9f00253e:	83 ec 08             	sub    esp,0x8
9f002541:	e8 41 11 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002546:	05 36 2f 00 00       	add    eax,0x2f36
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f00254b:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f00254e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f002555:	89 f0                	mov    eax,esi
9f002557:	8d 70 01             	lea    esi,[eax+0x1]
9f00255a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00255d:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f002560:	83 fb 20             	cmp    ebx,0x20
9f002563:	74 f0                	je     9f002555 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f002565:	83 fb 2d             	cmp    ebx,0x2d
9f002568:	75 14                	jne    9f00257e <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f00256a:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f002571:	89 f0                	mov    eax,esi
9f002573:	8d 70 01             	lea    esi,[eax+0x1]
9f002576:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002579:	0f be d8             	movsx  ebx,al
9f00257c:	eb 10                	jmp    9f00258e <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f00257e:	83 fb 2b             	cmp    ebx,0x2b
9f002581:	75 0b                	jne    9f00258e <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f002583:	89 f0                	mov    eax,esi
9f002585:	8d 70 01             	lea    esi,[eax+0x1]
9f002588:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00258b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f00258e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002592:	74 06                	je     9f00259a <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f002594:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002598:	75 26                	jne    9f0025c0 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f00259a:	83 fb 30             	cmp    ebx,0x30
9f00259d:	75 21                	jne    9f0025c0 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f00259f:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0025a2:	3c 78                	cmp    al,0x78
9f0025a4:	74 07                	je     9f0025ad <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f0025a6:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0025a9:	3c 58                	cmp    al,0x58
9f0025ab:	75 13                	jne    9f0025c0 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f0025ad:	8d 46 01             	lea    eax,[esi+0x1]
9f0025b0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0025b3:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f0025b6:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f0025b9:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f0025c0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0025c4:	75 14                	jne    9f0025da <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f0025c6:	83 fb 30             	cmp    ebx,0x30
9f0025c9:	75 07                	jne    9f0025d2 <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f0025cb:	b8 08 00 00 00       	mov    eax,0x8
9f0025d0:	eb 05                	jmp    9f0025d7 <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f0025d2:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f0025d7:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f0025da:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0025dd:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0025e2:	ba 00 00 00 00       	mov    edx,0x0
9f0025e7:	f7 f1                	div    ecx
9f0025e9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f0025ec:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0025ef:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f0025f4:	ba 00 00 00 00       	mov    edx,0x0
9f0025f9:	f7 f1                	div    ecx
9f0025fb:	89 d0                	mov    eax,edx
9f0025fd:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f0025ff:	bf 00 00 00 00       	mov    edi,0x0
9f002604:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f002609:	8d 43 d0             	lea    eax,[ebx-0x30]
9f00260c:	83 f8 09             	cmp    eax,0x9
9f00260f:	77 05                	ja     9f002616 <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f002611:	83 eb 30             	sub    ebx,0x30
9f002614:	eb 25                	jmp    9f00263b <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f002616:	89 d8                	mov    eax,ebx
9f002618:	83 c8 20             	or     eax,0x20
9f00261b:	83 e8 61             	sub    eax,0x61
9f00261e:	83 f8 19             	cmp    eax,0x19
9f002621:	77 56                	ja     9f002679 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f002623:	83 fb 40             	cmp    ebx,0x40
9f002626:	7e 0c                	jle    9f002634 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f002628:	83 fb 5a             	cmp    ebx,0x5a
9f00262b:	7f 07                	jg     9f002634 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f00262d:	b8 37 00 00 00       	mov    eax,0x37
9f002632:	eb 05                	jmp    9f002639 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f002634:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f002639:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f00263b:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f00263e:	7d 3c                	jge    9f00267c <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f002640:	89 c8                	mov    eax,ecx
9f002642:	85 c0                	test   eax,eax
9f002644:	78 10                	js     9f002656 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f002646:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f002649:	77 0b                	ja     9f002656 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f00264b:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f00264e:	75 0d                	jne    9f00265d <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f002650:	89 d0                	mov    eax,edx
9f002652:	39 c3                	cmp    ebx,eax
9f002654:	7e 07                	jle    9f00265d <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f002656:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f00265b:	eb 0f                	jmp    9f00266c <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f00265d:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f002662:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002665:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f002668:	89 d8                	mov    eax,ebx
9f00266a:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f00266c:	89 f0                	mov    eax,esi
9f00266e:	8d 70 01             	lea    esi,[eax+0x1]
9f002671:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002674:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002677:	eb 90                	jmp    9f002609 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002679:	90                   	nop
9f00267a:	eb 01                	jmp    9f00267d <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f00267c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f00267d:	89 c8                	mov    eax,ecx
9f00267f:	85 c0                	test   eax,eax
9f002681:	79 07                	jns    9f00268a <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f002683:	bf ff ff ff ff       	mov    edi,0xffffffff
9f002688:	eb 08                	jmp    9f002692 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f00268a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00268e:	74 02                	je     9f002692 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f002690:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f002692:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002696:	74 13                	je     9f0026ab <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f002698:	89 c8                	mov    eax,ecx
9f00269a:	85 c0                	test   eax,eax
9f00269c:	74 05                	je     9f0026a3 <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f00269e:	8d 46 ff             	lea    eax,[esi-0x1]
9f0026a1:	eb 03                	jmp    9f0026a6 <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f0026a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f0026a6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0026a9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f0026ab:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f0026ad:	83 c4 08             	add    esp,0x8
9f0026b0:	5b                   	pop    ebx
9f0026b1:	5e                   	pop    esi
9f0026b2:	5f                   	pop    edi
9f0026b3:	5d                   	pop    ebp
9f0026b4:	c3                   	ret    
9f0026b5:	66 90                	xchg   ax,ax
9f0026b7:	90                   	nop

9f0026b8 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f0026b8:	55                   	push   ebp
9f0026b9:	89 e5                	mov    ebp,esp
9f0026bb:	e8 c7 0f 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0026c0:	05 bc 2d 00 00       	add    eax,0x2dbc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f0026c5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0026c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026cb:	01 d0                	add    eax,edx
9f0026cd:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f0026d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f0026d3:	5d                   	pop    ebp
9f0026d4:	c3                   	ret    
9f0026d5:	66 90                	xchg   ax,ax
9f0026d7:	90                   	nop

9f0026d8 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f0026d8:	55                   	push   ebp
9f0026d9:	89 e5                	mov    ebp,esp
9f0026db:	57                   	push   edi
9f0026dc:	56                   	push   esi
9f0026dd:	53                   	push   ebx
9f0026de:	83 ec 0c             	sub    esp,0xc
9f0026e1:	e8 a1 0f 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0026e6:	05 96 2d 00 00       	add    eax,0x2d96
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f0026eb:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f0026ee:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f0026f5:	89 f0                	mov    eax,esi
9f0026f7:	8d 70 01             	lea    esi,[eax+0x1]
9f0026fa:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0026fd:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f002700:	83 fb 20             	cmp    ebx,0x20
9f002703:	74 f0                	je     9f0026f5 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f002705:	83 fb 2d             	cmp    ebx,0x2d
9f002708:	75 14                	jne    9f00271e <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f00270a:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f002711:	89 f0                	mov    eax,esi
9f002713:	8d 70 01             	lea    esi,[eax+0x1]
9f002716:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002719:	0f be d8             	movsx  ebx,al
9f00271c:	eb 10                	jmp    9f00272e <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f00271e:	83 fb 2b             	cmp    ebx,0x2b
9f002721:	75 0b                	jne    9f00272e <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f002723:	89 f0                	mov    eax,esi
9f002725:	8d 70 01             	lea    esi,[eax+0x1]
9f002728:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00272b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f00272e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002732:	74 06                	je     9f00273a <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f002734:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f002738:	75 26                	jne    9f002760 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f00273a:	83 fb 30             	cmp    ebx,0x30
9f00273d:	75 21                	jne    9f002760 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f00273f:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002742:	3c 78                	cmp    al,0x78
9f002744:	74 07                	je     9f00274d <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f002746:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f002749:	3c 58                	cmp    al,0x58
9f00274b:	75 13                	jne    9f002760 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f00274d:	8d 46 01             	lea    eax,[esi+0x1]
9f002750:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002753:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f002756:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f002759:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f002760:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002764:	75 14                	jne    9f00277a <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f002766:	83 fb 30             	cmp    ebx,0x30
9f002769:	75 07                	jne    9f002772 <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f00276b:	b8 08 00 00 00       	mov    eax,0x8
9f002770:	eb 05                	jmp    9f002777 <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f002772:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f002777:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f00277a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00277e:	74 07                	je     9f002787 <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f002780:	b8 00 00 00 80       	mov    eax,0x80000000
9f002785:	eb 05                	jmp    9f00278c <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f002787:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f00278c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00278f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f002792:	ba 00 00 00 00       	mov    edx,0x0
9f002797:	f7 f1                	div    ecx
9f002799:	89 d1                	mov    ecx,edx
9f00279b:	89 c8                	mov    eax,ecx
9f00279d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f0027a0:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f0027a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0027a6:	ba 00 00 00 00       	mov    edx,0x0
9f0027ab:	f7 f7                	div    edi
9f0027ad:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f0027b0:	bf 00 00 00 00       	mov    edi,0x0
9f0027b5:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f0027ba:	8d 43 d0             	lea    eax,[ebx-0x30]
9f0027bd:	83 f8 09             	cmp    eax,0x9
9f0027c0:	77 05                	ja     9f0027c7 <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f0027c2:	83 eb 30             	sub    ebx,0x30
9f0027c5:	eb 25                	jmp    9f0027ec <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f0027c7:	89 d8                	mov    eax,ebx
9f0027c9:	83 c8 20             	or     eax,0x20
9f0027cc:	83 e8 61             	sub    eax,0x61
9f0027cf:	83 f8 19             	cmp    eax,0x19
9f0027d2:	77 55                	ja     9f002829 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f0027d4:	83 fb 40             	cmp    ebx,0x40
9f0027d7:	7e 0c                	jle    9f0027e5 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f0027d9:	83 fb 5a             	cmp    ebx,0x5a
9f0027dc:	7f 07                	jg     9f0027e5 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f0027de:	b8 37 00 00 00       	mov    eax,0x37
9f0027e3:	eb 05                	jmp    9f0027ea <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f0027e5:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f0027ea:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f0027ec:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f0027ef:	7d 3b                	jge    9f00282c <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f0027f1:	89 c8                	mov    eax,ecx
9f0027f3:	85 c0                	test   eax,eax
9f0027f5:	78 0f                	js     9f002806 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f0027f7:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0027fa:	77 0a                	ja     9f002806 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f0027fc:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f0027ff:	75 0c                	jne    9f00280d <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f002801:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f002804:	7e 07                	jle    9f00280d <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f002806:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f00280b:	eb 0f                	jmp    9f00281c <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f00280d:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f002812:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002815:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f002818:	89 d8                	mov    eax,ebx
9f00281a:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f00281c:	89 f0                	mov    eax,esi
9f00281e:	8d 70 01             	lea    esi,[eax+0x1]
9f002821:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002824:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f002827:	eb 91                	jmp    9f0027ba <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f002829:	90                   	nop
9f00282a:	eb 01                	jmp    9f00282d <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f00282c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f00282d:	89 c8                	mov    eax,ecx
9f00282f:	85 c0                	test   eax,eax
9f002831:	79 16                	jns    9f002849 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f002833:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f002837:	74 07                	je     9f002840 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f002839:	b8 00 00 00 80       	mov    eax,0x80000000
9f00283e:	eb 05                	jmp    9f002845 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f002840:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f002845:	89 c7                	mov    edi,eax
9f002847:	eb 08                	jmp    9f002851 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f002849:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00284d:	74 02                	je     9f002851 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f00284f:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f002851:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f002855:	74 13                	je     9f00286a <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f002857:	89 c8                	mov    eax,ecx
9f002859:	85 c0                	test   eax,eax
9f00285b:	74 05                	je     9f002862 <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f00285d:	8d 46 ff             	lea    eax,[esi-0x1]
9f002860:	eb 03                	jmp    9f002865 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f002862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f002865:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002868:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f00286a:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f00286c:	83 c4 0c             	add    esp,0xc
9f00286f:	5b                   	pop    ebx
9f002870:	5e                   	pop    esi
9f002871:	5f                   	pop    edi
9f002872:	5d                   	pop    ebp
9f002873:	c3                   	ret    

9f002874 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f002874:	55                   	push   ebp
9f002875:	89 e5                	mov    ebp,esp
9f002877:	53                   	push   ebx
9f002878:	83 ec 14             	sub    esp,0x14
9f00287b:	e8 07 0e 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002880:	05 fc 2b 00 00       	add    eax,0x2bfc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f002885:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002888:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00288b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00288e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f002891:	eb 04                	jmp    9f002897 <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f002893:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f002897:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00289a:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00289d:	80 fa 20             	cmp    dl,0x20
9f0028a0:	74 f1                	je     9f002893 <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f0028a2:	83 ec 0c             	sub    esp,0xc
9f0028a5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0028a8:	89 c3                	mov    ebx,eax
9f0028aa:	e8 06 fb ff ff       	call   9f0023b5 <strlenI>
9f0028af:	83 c4 10             	add    esp,0x10
9f0028b2:	8d 50 ff             	lea    edx,[eax-0x1]
9f0028b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0028b8:	01 d0                	add    eax,edx
9f0028ba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f0028bd:	eb 0c                	jmp    9f0028cb <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f0028bf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0028c2:	8d 50 ff             	lea    edx,[eax-0x1]
9f0028c5:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0028c8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f0028cb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0028ce:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0028d1:	76 0a                	jbe    9f0028dd <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f0028d3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0028d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0028d9:	3c 20                	cmp    al,0x20
9f0028db:	74 e2                	je     9f0028bf <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f0028dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0028e0:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0028e3:	74 1f                	je     9f002904 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f0028e5:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f0028e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0028e9:	8d 50 01             	lea    edx,[eax+0x1]
9f0028ec:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0028ef:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0028f2:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0028f5:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f0028f8:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0028fb:	88 10                	mov    BYTE PTR [eax],dl
9f0028fd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002900:	84 c0                	test   al,al
9f002902:	75 e2                	jne    9f0028e6 <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f002904:	90                   	nop
9f002905:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002908:	c9                   	leave  
9f002909:	c3                   	ret    

9f00290a <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f00290a:	55                   	push   ebp
9f00290b:	89 e5                	mov    ebp,esp
9f00290d:	83 ec 08             	sub    esp,0x8
9f002910:	e8 72 0d 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002915:	05 67 2b 00 00       	add    eax,0x2b67
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f00291a:	83 ec 0c             	sub    esp,0xc
9f00291d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002920:	e8 4f ff ff ff       	call   9f002874 <strtrimI>
9f002925:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f002928:	c9                   	leave  
9f002929:	c3                   	ret    
9f00292a:	66 90                	xchg   ax,ax

9f00292c <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strstrI(char* string, char* substring)
{
9f00292c:	55                   	push   ebp
9f00292d:	89 e5                	mov    ebp,esp
9f00292f:	56                   	push   esi
9f002930:	53                   	push   ebx
9f002931:	e8 51 0d 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002936:	05 46 2b 00 00       	add    eax,0x2b46
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f00293b:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
9f00293e:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002941:	84 c0                	test   al,al
9f002943:	75 42                	jne    9f002987 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
9f002945:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002948:	eb 4c                	jmp    9f002996 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f00294a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00294d:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002950:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f002953:	38 c2                	cmp    dl,al
9f002955:	75 2b                	jne    9f002982 <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
9f002957:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
9f00295a:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f00295d:	84 c0                	test   al,al
9f00295f:	75 05                	jne    9f002966 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
9f002961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002964:	eb 30                	jmp    9f002996 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
9f002966:	89 f0                	mov    eax,esi
9f002968:	8d 70 01             	lea    esi,[eax+0x1]
9f00296b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f00296e:	89 d8                	mov    eax,ebx
9f002970:	8d 58 01             	lea    ebx,[eax+0x1]
9f002973:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f002976:	38 c2                	cmp    dl,al
9f002978:	75 02                	jne    9f00297c <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
9f00297a:	eb de                	jmp    9f00295a <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f00297c:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
9f00297d:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f002980:	eb 01                	jmp    9f002983 <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f002982:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f002983:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
9f002987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00298a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00298d:	84 c0                	test   al,al
9f00298f:	75 b9                	jne    9f00294a <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f002991:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
}
9f002996:	5b                   	pop    ebx
9f002997:	5e                   	pop    esi
9f002998:	5d                   	pop    ebp
9f002999:	c3                   	ret    

9f00299a <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83

VISIBLE char* strstr(char* string, char* substring)
{
9f00299a:	55                   	push   ebp
9f00299b:	89 e5                	mov    ebp,esp
9f00299d:	e8 e5 0c 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0029a2:	05 da 2a 00 00       	add    eax,0x2ada
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
    return strstrI(string, substring);
9f0029a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0029aa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0029ad:	e8 7a ff ff ff       	call   9f00292c <strstrI>
9f0029b2:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
}
9f0029b5:	c9                   	leave  
9f0029b6:	c3                   	ret    
9f0029b7:	90                   	nop

9f0029b8 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f0029b8:	55                   	push   ebp
9f0029b9:	89 e5                	mov    ebp,esp
9f0029bb:	56                   	push   esi
9f0029bc:	53                   	push   ebx
9f0029bd:	83 ec 10             	sub    esp,0x10
9f0029c0:	e8 c2 0c 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f0029c5:	05 b7 2a 00 00       	add    eax,0x2ab7
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
9f0029ca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    GET_TICKS(retVal);
9f0029d1:	b8 70 01 00 00       	mov    eax,0x170
9f0029d6:	bb 00 00 00 00       	mov    ebx,0x0
9f0029db:	b9 00 00 00 00       	mov    ecx,0x0
9f0029e0:	ba 00 00 00 00       	mov    edx,0x0
9f0029e5:	be 00 00 00 00       	mov    esi,0x0
9f0029ea:	e8 fc ff ff ff       	call   9f0029eb <getticks+0x33>
9f0029ef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
9f0029f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
9f0029f5:	83 c4 10             	add    esp,0x10
9f0029f8:	5b                   	pop    ebx
9f0029f9:	5e                   	pop    esi
9f0029fa:	5d                   	pop    ebp
9f0029fb:	c3                   	ret    

9f0029fc <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f0029fc:	55                   	push   ebp
9f0029fd:	89 e5                	mov    ebp,esp
9f0029ff:	53                   	push   ebx
9f002a00:	83 ec 10             	sub    esp,0x10
9f002a03:	e8 a8 0c 00 00       	call   9f0036b0 <__x86.get_pc_thunk.bx>
9f002a08:	81 c3 74 2a 00 00    	add    ebx,0x2a74
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32
  time_t time = *timer;
9f002a0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002a11:	8b 00                	mov    eax,DWORD PTR [eax]
9f002a13:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:34
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f002a16:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36

  dayclock = (unsigned long) time % SECS_DAY;
9f002a1d:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f002a20:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f002a25:	89 c8                	mov    eax,ecx
9f002a27:	f7 e2                	mul    edx
9f002a29:	89 d0                	mov    eax,edx
9f002a2b:	c1 e8 10             	shr    eax,0x10
9f002a2e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f002a31:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002a34:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f002a3a:	29 c1                	sub    ecx,eax
9f002a3c:	89 c8                	mov    eax,ecx
9f002a3e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37
  dayno = (unsigned long) time / SECS_DAY;
9f002a41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002a44:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f002a49:	f7 e2                	mul    edx
9f002a4b:	89 d0                	mov    eax,edx
9f002a4d:	c1 e8 10             	shr    eax,0x10
9f002a50:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39

  tmbuf->tm_sec = dayclock % 60;
9f002a53:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f002a56:	ba 89 88 88 88       	mov    edx,0x88888889
9f002a5b:	89 c8                	mov    eax,ecx
9f002a5d:	f7 e2                	mul    edx
9f002a5f:	89 d0                	mov    eax,edx
9f002a61:	c1 e8 05             	shr    eax,0x5
9f002a64:	89 c2                	mov    edx,eax
9f002a66:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f002a6d:	89 c2                	mov    edx,eax
9f002a6f:	89 d0                	mov    eax,edx
9f002a71:	c1 e0 04             	shl    eax,0x4
9f002a74:	29 d0                	sub    eax,edx
9f002a76:	29 c1                	sub    ecx,eax
9f002a78:	89 c8                	mov    eax,ecx
9f002a7a:	89 c2                	mov    edx,eax
9f002a7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002a7f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f002a81:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f002a84:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f002a89:	89 c8                	mov    eax,ecx
9f002a8b:	f7 e2                	mul    edx
9f002a8d:	89 d0                	mov    eax,edx
9f002a8f:	c1 e8 0b             	shr    eax,0xb
9f002a92:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f002a98:	29 c1                	sub    ecx,eax
9f002a9a:	89 c8                	mov    eax,ecx
9f002a9c:	ba 89 88 88 88       	mov    edx,0x88888889
9f002aa1:	f7 e2                	mul    edx
9f002aa3:	89 d0                	mov    eax,edx
9f002aa5:	c1 e8 05             	shr    eax,0x5
9f002aa8:	89 c2                	mov    edx,eax
9f002aaa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002aad:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_hour = dayclock / 3600;
9f002ab0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002ab3:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f002ab8:	f7 e2                	mul    edx
9f002aba:	89 d0                	mov    eax,edx
9f002abc:	c1 e8 0b             	shr    eax,0xb
9f002abf:	89 c2                	mov    edx,eax
9f002ac1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002ac4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f002ac7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002aca:	8d 48 04             	lea    ecx,[eax+0x4]
9f002acd:	ba 25 49 92 24       	mov    edx,0x24924925
9f002ad2:	89 c8                	mov    eax,ecx
9f002ad4:	f7 e2                	mul    edx
9f002ad6:	89 c8                	mov    eax,ecx
9f002ad8:	29 d0                	sub    eax,edx
9f002ada:	d1 e8                	shr    eax,1
9f002adc:	01 d0                	add    eax,edx
9f002ade:	c1 e8 02             	shr    eax,0x2
9f002ae1:	89 c2                	mov    edx,eax
9f002ae3:	c1 e2 03             	shl    edx,0x3
9f002ae6:	29 c2                	sub    edx,eax
9f002ae8:	89 c8                	mov    eax,ecx
9f002aea:	29 d0                	sub    eax,edx
9f002aec:	89 c2                	mov    edx,eax
9f002aee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002af1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f002af4:	eb 66                	jmp    9f002b5c <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
    dayno -= YEARSIZE(year);
9f002af6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002af9:	83 e0 03             	and    eax,0x3
9f002afc:	85 c0                	test   eax,eax
9f002afe:	75 50                	jne    9f002b50 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
9f002b00:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002b03:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002b08:	89 c8                	mov    eax,ecx
9f002b0a:	f7 ea                	imul   edx
9f002b0c:	c1 fa 05             	sar    edx,0x5
9f002b0f:	89 c8                	mov    eax,ecx
9f002b11:	c1 f8 1f             	sar    eax,0x1f
9f002b14:	29 c2                	sub    edx,eax
9f002b16:	89 d0                	mov    eax,edx
9f002b18:	6b c0 64             	imul   eax,eax,0x64
9f002b1b:	29 c1                	sub    ecx,eax
9f002b1d:	89 c8                	mov    eax,ecx
9f002b1f:	85 c0                	test   eax,eax
9f002b21:	75 26                	jne    9f002b49 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
9f002b23:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002b26:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002b2b:	89 c8                	mov    eax,ecx
9f002b2d:	f7 ea                	imul   edx
9f002b2f:	c1 fa 07             	sar    edx,0x7
9f002b32:	89 c8                	mov    eax,ecx
9f002b34:	c1 f8 1f             	sar    eax,0x1f
9f002b37:	29 c2                	sub    edx,eax
9f002b39:	89 d0                	mov    eax,edx
9f002b3b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f002b41:	29 c1                	sub    ecx,eax
9f002b43:	89 c8                	mov    eax,ecx
9f002b45:	85 c0                	test   eax,eax
9f002b47:	75 07                	jne    9f002b50 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
9f002b49:	b8 6e 01 00 00       	mov    eax,0x16e
9f002b4e:	eb 05                	jmp    9f002b55 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
9f002b50:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
9f002b55:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
    year++;
9f002b58:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f002b5c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002b5f:	83 e0 03             	and    eax,0x3
9f002b62:	85 c0                	test   eax,eax
9f002b64:	75 50                	jne    9f002bb6 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
9f002b66:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002b69:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002b6e:	89 c8                	mov    eax,ecx
9f002b70:	f7 ea                	imul   edx
9f002b72:	c1 fa 05             	sar    edx,0x5
9f002b75:	89 c8                	mov    eax,ecx
9f002b77:	c1 f8 1f             	sar    eax,0x1f
9f002b7a:	29 c2                	sub    edx,eax
9f002b7c:	89 d0                	mov    eax,edx
9f002b7e:	6b c0 64             	imul   eax,eax,0x64
9f002b81:	29 c1                	sub    ecx,eax
9f002b83:	89 c8                	mov    eax,ecx
9f002b85:	85 c0                	test   eax,eax
9f002b87:	75 26                	jne    9f002baf <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
9f002b89:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002b8c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002b91:	89 c8                	mov    eax,ecx
9f002b93:	f7 ea                	imul   edx
9f002b95:	c1 fa 07             	sar    edx,0x7
9f002b98:	89 c8                	mov    eax,ecx
9f002b9a:	c1 f8 1f             	sar    eax,0x1f
9f002b9d:	29 c2                	sub    edx,eax
9f002b9f:	89 d0                	mov    eax,edx
9f002ba1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f002ba7:	29 c1                	sub    ecx,eax
9f002ba9:	89 c8                	mov    eax,ecx
9f002bab:	85 c0                	test   eax,eax
9f002bad:	75 07                	jne    9f002bb6 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
9f002baf:	b8 6e 01 00 00       	mov    eax,0x16e
9f002bb4:	eb 05                	jmp    9f002bbb <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
9f002bb6:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
9f002bbb:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f002bbe:	0f 86 32 ff ff ff    	jbe    9f002af6 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f002bc4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002bc7:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f002bcd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bd0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_yday = dayno;
9f002bd3:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f002bd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bd9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_mon = 0;
9f002bdc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002bdf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f002be6:	e9 89 00 00 00       	jmp    9f002c74 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f002beb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002bee:	83 e0 03             	and    eax,0x3
9f002bf1:	85 c0                	test   eax,eax
9f002bf3:	75 50                	jne    9f002c45 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
9f002bf5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002bf8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002bfd:	89 c8                	mov    eax,ecx
9f002bff:	f7 ea                	imul   edx
9f002c01:	c1 fa 05             	sar    edx,0x5
9f002c04:	89 c8                	mov    eax,ecx
9f002c06:	c1 f8 1f             	sar    eax,0x1f
9f002c09:	29 c2                	sub    edx,eax
9f002c0b:	89 d0                	mov    eax,edx
9f002c0d:	6b c0 64             	imul   eax,eax,0x64
9f002c10:	29 c1                	sub    ecx,eax
9f002c12:	89 c8                	mov    eax,ecx
9f002c14:	85 c0                	test   eax,eax
9f002c16:	75 26                	jne    9f002c3e <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
9f002c18:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002c1b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002c20:	89 c8                	mov    eax,ecx
9f002c22:	f7 ea                	imul   edx
9f002c24:	c1 fa 07             	sar    edx,0x7
9f002c27:	89 c8                	mov    eax,ecx
9f002c29:	c1 f8 1f             	sar    eax,0x1f
9f002c2c:	29 c2                	sub    edx,eax
9f002c2e:	89 d0                	mov    eax,edx
9f002c30:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f002c36:	29 c1                	sub    ecx,eax
9f002c38:	89 c8                	mov    eax,ecx
9f002c3a:	85 c0                	test   eax,eax
9f002c3c:	75 07                	jne    9f002c45 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
9f002c3e:	ba 01 00 00 00       	mov    edx,0x1
9f002c43:	eb 05                	jmp    9f002c4a <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
9f002c45:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
9f002c4a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c4d:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f002c50:	89 d0                	mov    eax,edx
9f002c52:	01 c0                	add    eax,eax
9f002c54:	01 d0                	add    eax,edx
9f002c56:	c1 e0 02             	shl    eax,0x2
9f002c59:	01 c8                	add    eax,ecx
9f002c5b:	8b 84 83 44 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2bc]
9f002c62:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
    tmbuf->tm_mon++;
9f002c65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c68:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002c6b:	8d 50 01             	lea    edx,[eax+0x1]
9f002c6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002c71:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f002c74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002c77:	83 e0 03             	and    eax,0x3
9f002c7a:	85 c0                	test   eax,eax
9f002c7c:	75 50                	jne    9f002cce <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
9f002c7e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002c81:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002c86:	89 c8                	mov    eax,ecx
9f002c88:	f7 ea                	imul   edx
9f002c8a:	c1 fa 05             	sar    edx,0x5
9f002c8d:	89 c8                	mov    eax,ecx
9f002c8f:	c1 f8 1f             	sar    eax,0x1f
9f002c92:	29 c2                	sub    edx,eax
9f002c94:	89 d0                	mov    eax,edx
9f002c96:	6b c0 64             	imul   eax,eax,0x64
9f002c99:	29 c1                	sub    ecx,eax
9f002c9b:	89 c8                	mov    eax,ecx
9f002c9d:	85 c0                	test   eax,eax
9f002c9f:	75 26                	jne    9f002cc7 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
9f002ca1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f002ca4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002ca9:	89 c8                	mov    eax,ecx
9f002cab:	f7 ea                	imul   edx
9f002cad:	c1 fa 07             	sar    edx,0x7
9f002cb0:	89 c8                	mov    eax,ecx
9f002cb2:	c1 f8 1f             	sar    eax,0x1f
9f002cb5:	29 c2                	sub    edx,eax
9f002cb7:	89 d0                	mov    eax,edx
9f002cb9:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f002cbf:	29 c1                	sub    ecx,eax
9f002cc1:	89 c8                	mov    eax,ecx
9f002cc3:	85 c0                	test   eax,eax
9f002cc5:	75 07                	jne    9f002cce <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
9f002cc7:	ba 01 00 00 00       	mov    edx,0x1
9f002ccc:	eb 05                	jmp    9f002cd3 <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
9f002cce:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
9f002cd3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002cd6:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f002cd9:	89 d0                	mov    eax,edx
9f002cdb:	01 c0                	add    eax,eax
9f002cdd:	01 d0                	add    eax,edx
9f002cdf:	c1 e0 02             	shl    eax,0x2
9f002ce2:	01 c8                	add    eax,ecx
9f002ce4:	8b 84 83 44 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2bc]
9f002ceb:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f002cee:	0f 86 f7 fe ff ff    	jbe    9f002beb <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f002cf4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002cf7:	83 c0 01             	add    eax,0x1
9f002cfa:	89 c2                	mov    edx,eax
9f002cfc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002cff:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  tmbuf->tm_isdst = 0;
9f002d02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002d05:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  return tmbuf;
9f002d0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
}
9f002d0f:	83 c4 10             	add    esp,0x10
9f002d12:	5b                   	pop    ebx
9f002d13:	5d                   	pop    ebp
9f002d14:	c3                   	ret    

9f002d15 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f002d15:	55                   	push   ebp
9f002d16:	89 e5                	mov    ebp,esp
9f002d18:	e8 6a 09 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002d1d:	05 5f 27 00 00       	add    eax,0x275f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
    return gmtime_rI(timer, tmbuf);
9f002d22:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002d25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002d28:	e8 cf fc ff ff       	call   9f0029fc <gmtime_rI>
9f002d2d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
}
9f002d30:	c9                   	leave  
9f002d31:	c3                   	ret    

9f002d32 <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *localtime(const time_t *timer) {
9f002d32:	55                   	push   ebp
9f002d33:	89 e5                	mov    ebp,esp
9f002d35:	53                   	push   ebx
9f002d36:	83 ec 34             	sub    esp,0x34
9f002d39:	e8 49 09 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002d3e:	05 3e 27 00 00       	add    eax,0x273e
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
9f002d43:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d46:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f002d48:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
9f002d4e:	8b 12                	mov    edx,DWORD PTR [edx]
9f002d50:	29 d1                	sub    ecx,edx
9f002d52:	89 ca                	mov    edx,ecx
9f002d54:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
9f002d57:	83 ec 08             	sub    esp,0x8
9f002d5a:	8d 55 c8             	lea    edx,[ebp-0x38]
9f002d5d:	52                   	push   edx
9f002d5e:	8d 55 f4             	lea    edx,[ebp-0xc]
9f002d61:	52                   	push   edx
9f002d62:	89 c3                	mov    ebx,eax
9f002d64:	e8 37 09 00 00       	call   9f0036a0 <__x86.get_pc_thunk.ax+0x19>
9f002d69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
9f002d6c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002d6f:	c9                   	leave  
9f002d70:	c3                   	ret    

9f002d71 <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f002d71:	55                   	push   ebp
9f002d72:	89 e5                	mov    ebp,esp
9f002d74:	83 ec 10             	sub    esp,0x10
9f002d77:	e8 0b 09 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002d7c:	05 00 27 00 00       	add    eax,0x2700
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
9f002d81:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002d84:	8b 12                	mov    edx,DWORD PTR [edx]
9f002d86:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f002d8c:	8b 00                	mov    eax,DWORD PTR [eax]
9f002d8e:	29 c2                	sub    edx,eax
9f002d90:	89 d0                	mov    eax,edx
9f002d92:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
9f002d95:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002d98:	8d 45 fc             	lea    eax,[ebp-0x4]
9f002d9b:	50                   	push   eax
9f002d9c:	e8 5b fc ff ff       	call   9f0029fc <gmtime_rI>
9f002da1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
9f002da4:	c9                   	leave  
9f002da5:	c3                   	ret    

9f002da6 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f002da6:	55                   	push   ebp
9f002da7:	89 e5                	mov    ebp,esp
9f002da9:	e8 d9 08 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f002dae:	05 ce 26 00 00       	add    eax,0x26ce
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
9f002db3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002db6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002db9:	e8 b3 ff ff ff       	call   9f002d71 <localtime_rI>
9f002dbe:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
9f002dc1:	c9                   	leave  
9f002dc2:	c3                   	ret    

9f002dc3 <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
9f002dc3:	55                   	push   ebp
9f002dc4:	89 e5                	mov    ebp,esp
9f002dc6:	57                   	push   edi
9f002dc7:	56                   	push   esi
9f002dc8:	53                   	push   ebx
9f002dc9:	83 ec 20             	sub    esp,0x20
9f002dcc:	e8 e3 08 00 00       	call   9f0036b4 <__x86.get_pc_thunk.cx>
9f002dd1:	81 c1 ab 26 00 00    	add    ecx,0x26ab
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f002dd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002dda:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f002ddd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002de0:	8b 18                	mov    ebx,DWORD PTR [eax]
9f002de2:	ba 89 88 88 88       	mov    edx,0x88888889
9f002de7:	89 d8                	mov    eax,ebx
9f002de9:	f7 ea                	imul   edx
9f002deb:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f002dee:	c1 f8 05             	sar    eax,0x5
9f002df1:	89 c2                	mov    edx,eax
9f002df3:	89 d8                	mov    eax,ebx
9f002df5:	c1 f8 1f             	sar    eax,0x1f
9f002df8:	29 c2                	sub    edx,eax
9f002dfa:	89 d0                	mov    eax,edx
9f002dfc:	8d 14 06             	lea    edx,[esi+eax*1]
9f002dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e02:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
9f002e05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e08:	8b 18                	mov    ebx,DWORD PTR [eax]
9f002e0a:	ba 89 88 88 88       	mov    edx,0x88888889
9f002e0f:	89 d8                	mov    eax,ebx
9f002e11:	f7 ea                	imul   edx
9f002e13:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f002e16:	c1 f8 05             	sar    eax,0x5
9f002e19:	89 c2                	mov    edx,eax
9f002e1b:	89 d8                	mov    eax,ebx
9f002e1d:	c1 f8 1f             	sar    eax,0x1f
9f002e20:	29 c2                	sub    edx,eax
9f002e22:	89 d0                	mov    eax,edx
9f002e24:	89 c2                	mov    edx,eax
9f002e26:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f002e2d:	89 c2                	mov    edx,eax
9f002e2f:	89 d0                	mov    eax,edx
9f002e31:	c1 e0 04             	shl    eax,0x4
9f002e34:	29 d0                	sub    eax,edx
9f002e36:	29 c3                	sub    ebx,eax
9f002e38:	89 d8                	mov    eax,ebx
9f002e3a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002e3d:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
9f002e3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e42:	8b 00                	mov    eax,DWORD PTR [eax]
9f002e44:	85 c0                	test   eax,eax
9f002e46:	79 1c                	jns    9f002e64 <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
9f002e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e4b:	8b 00                	mov    eax,DWORD PTR [eax]
9f002e4d:	8d 50 3c             	lea    edx,[eax+0x3c]
9f002e50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e53:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
9f002e55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e58:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002e5b:	8d 50 ff             	lea    edx,[eax-0x1]
9f002e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e61:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f002e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e67:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f002e6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e6d:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f002e70:	ba 89 88 88 88       	mov    edx,0x88888889
9f002e75:	89 d8                	mov    eax,ebx
9f002e77:	f7 ea                	imul   edx
9f002e79:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f002e7c:	c1 f8 05             	sar    eax,0x5
9f002e7f:	89 c2                	mov    edx,eax
9f002e81:	89 d8                	mov    eax,ebx
9f002e83:	c1 f8 1f             	sar    eax,0x1f
9f002e86:	29 c2                	sub    edx,eax
9f002e88:	89 d0                	mov    eax,edx
9f002e8a:	8d 14 06             	lea    edx,[esi+eax*1]
9f002e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e90:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f002e93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e96:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f002e99:	ba 89 88 88 88       	mov    edx,0x88888889
9f002e9e:	89 d8                	mov    eax,ebx
9f002ea0:	f7 ea                	imul   edx
9f002ea2:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f002ea5:	c1 f8 05             	sar    eax,0x5
9f002ea8:	89 c2                	mov    edx,eax
9f002eaa:	89 d8                	mov    eax,ebx
9f002eac:	c1 f8 1f             	sar    eax,0x1f
9f002eaf:	29 c2                	sub    edx,eax
9f002eb1:	89 d0                	mov    eax,edx
9f002eb3:	89 c2                	mov    edx,eax
9f002eb5:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f002ebc:	89 c2                	mov    edx,eax
9f002ebe:	89 d0                	mov    eax,edx
9f002ec0:	c1 e0 04             	shl    eax,0x4
9f002ec3:	29 d0                	sub    eax,edx
9f002ec5:	29 c3                	sub    ebx,eax
9f002ec7:	89 d8                	mov    eax,ebx
9f002ec9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002ecc:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
9f002ecf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ed2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002ed5:	85 c0                	test   eax,eax
9f002ed7:	79 1e                	jns    9f002ef7 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
9f002ed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002edc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f002edf:	8d 50 3c             	lea    edx,[eax+0x3c]
9f002ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ee5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
9f002ee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002eeb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f002eee:	8d 50 ff             	lea    edx,[eax-0x1]
9f002ef1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ef4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
9f002ef7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002efa:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f002efd:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f002f02:	89 d8                	mov    eax,ebx
9f002f04:	f7 ea                	imul   edx
9f002f06:	c1 fa 02             	sar    edx,0x2
9f002f09:	89 d8                	mov    eax,ebx
9f002f0b:	c1 f8 1f             	sar    eax,0x1f
9f002f0e:	29 c2                	sub    edx,eax
9f002f10:	89 d0                	mov    eax,edx
9f002f12:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f002f15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f18:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f002f1b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f002f20:	89 d8                	mov    eax,ebx
9f002f22:	f7 ea                	imul   edx
9f002f24:	c1 fa 02             	sar    edx,0x2
9f002f27:	89 d8                	mov    eax,ebx
9f002f29:	c1 f8 1f             	sar    eax,0x1f
9f002f2c:	29 c2                	sub    edx,eax
9f002f2e:	89 d0                	mov    eax,edx
9f002f30:	01 c0                	add    eax,eax
9f002f32:	01 d0                	add    eax,edx
9f002f34:	c1 e0 03             	shl    eax,0x3
9f002f37:	29 c3                	sub    ebx,eax
9f002f39:	89 da                	mov    edx,ebx
9f002f3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
9f002f41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f44:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f002f47:	85 c0                	test   eax,eax
9f002f49:	79 13                	jns    9f002f5e <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
9f002f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f4e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f002f51:	8d 50 18             	lea    edx,[eax+0x18]
9f002f54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f57:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
9f002f5a:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f002f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f61:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f002f64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f67:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f002f6a:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f002f6f:	89 d8                	mov    eax,ebx
9f002f71:	f7 ea                	imul   edx
9f002f73:	d1 fa                	sar    edx,1
9f002f75:	89 d8                	mov    eax,ebx
9f002f77:	c1 f8 1f             	sar    eax,0x1f
9f002f7a:	29 c2                	sub    edx,eax
9f002f7c:	89 d0                	mov    eax,edx
9f002f7e:	8d 14 06             	lea    edx,[esi+eax*1]
9f002f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f84:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
9f002f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002f8a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f002f8d:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f002f92:	89 d8                	mov    eax,ebx
9f002f94:	f7 ea                	imul   edx
9f002f96:	d1 fa                	sar    edx,1
9f002f98:	89 d8                	mov    eax,ebx
9f002f9a:	c1 f8 1f             	sar    eax,0x1f
9f002f9d:	29 c2                	sub    edx,eax
9f002f9f:	89 d0                	mov    eax,edx
9f002fa1:	01 c0                	add    eax,eax
9f002fa3:	01 d0                	add    eax,edx
9f002fa5:	c1 e0 02             	shl    eax,0x2
9f002fa8:	29 c3                	sub    ebx,eax
9f002faa:	89 da                	mov    edx,ebx
9f002fac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002faf:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
9f002fb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fb5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002fb8:	85 c0                	test   eax,eax
9f002fba:	79 1e                	jns    9f002fda <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
9f002fbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fbf:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002fc2:	8d 50 0c             	lea    edx,[eax+0xc]
9f002fc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fc8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
9f002fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f002fd1:	8d 50 ff             	lea    edx,[eax-0x1]
9f002fd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fd7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
9f002fda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fdd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f002fe0:	83 e8 01             	sub    eax,0x1
9f002fe3:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
9f002fe6:	e9 c1 00 00 00       	jmp    9f0030ac <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
9f002feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002fee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f002ff1:	8d 50 ff             	lea    edx,[eax-0x1]
9f002ff4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ff7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f002ffa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ffd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003000:	85 c0                	test   eax,eax
9f003002:	79 19                	jns    9f00301d <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
9f003004:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003007:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00300a:	8d 50 ff             	lea    edx,[eax-0x1]
9f00300d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003010:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
9f003013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003016:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f00301d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003020:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003023:	83 e0 03             	and    eax,0x3
9f003026:	85 c0                	test   eax,eax
9f003028:	75 62                	jne    9f00308c <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
9f00302a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00302d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003030:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003036:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00303b:	89 d8                	mov    eax,ebx
9f00303d:	f7 ea                	imul   edx
9f00303f:	c1 fa 05             	sar    edx,0x5
9f003042:	89 d8                	mov    eax,ebx
9f003044:	c1 f8 1f             	sar    eax,0x1f
9f003047:	29 c2                	sub    edx,eax
9f003049:	89 d0                	mov    eax,edx
9f00304b:	6b c0 64             	imul   eax,eax,0x64
9f00304e:	29 c3                	sub    ebx,eax
9f003050:	89 d8                	mov    eax,ebx
9f003052:	85 c0                	test   eax,eax
9f003054:	75 2f                	jne    9f003085 <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
9f003056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003059:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00305c:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003062:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003067:	89 d8                	mov    eax,ebx
9f003069:	f7 ea                	imul   edx
9f00306b:	c1 fa 07             	sar    edx,0x7
9f00306e:	89 d8                	mov    eax,ebx
9f003070:	c1 f8 1f             	sar    eax,0x1f
9f003073:	29 c2                	sub    edx,eax
9f003075:	89 d0                	mov    eax,edx
9f003077:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00307d:	29 c3                	sub    ebx,eax
9f00307f:	89 d8                	mov    eax,ebx
9f003081:	85 c0                	test   eax,eax
9f003083:	75 07                	jne    9f00308c <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
9f003085:	ba 01 00 00 00       	mov    edx,0x1
9f00308a:	eb 05                	jmp    9f003091 <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
9f00308c:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
9f003091:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003094:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003097:	89 d0                	mov    eax,edx
9f003099:	01 c0                	add    eax,eax
9f00309b:	01 d0                	add    eax,edx
9f00309d:	c1 e0 02             	shl    eax,0x2
9f0030a0:	01 d8                	add    eax,ebx
9f0030a2:	8b 84 81 44 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2bc]
9f0030a9:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f0030ac:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0030b0:	0f 88 35 ff ff ff    	js     9f002feb <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f0030b6:	e9 c2 00 00 00       	jmp    9f00317d <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f0030bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030be:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0030c1:	83 e0 03             	and    eax,0x3
9f0030c4:	85 c0                	test   eax,eax
9f0030c6:	75 62                	jne    9f00312a <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f0030c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030cb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0030ce:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0030d4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0030d9:	89 d8                	mov    eax,ebx
9f0030db:	f7 ea                	imul   edx
9f0030dd:	c1 fa 05             	sar    edx,0x5
9f0030e0:	89 d8                	mov    eax,ebx
9f0030e2:	c1 f8 1f             	sar    eax,0x1f
9f0030e5:	29 c2                	sub    edx,eax
9f0030e7:	89 d0                	mov    eax,edx
9f0030e9:	6b c0 64             	imul   eax,eax,0x64
9f0030ec:	29 c3                	sub    ebx,eax
9f0030ee:	89 d8                	mov    eax,ebx
9f0030f0:	85 c0                	test   eax,eax
9f0030f2:	75 2f                	jne    9f003123 <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f0030f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030f7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0030fa:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003100:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003105:	89 d8                	mov    eax,ebx
9f003107:	f7 ea                	imul   edx
9f003109:	c1 fa 07             	sar    edx,0x7
9f00310c:	89 d8                	mov    eax,ebx
9f00310e:	c1 f8 1f             	sar    eax,0x1f
9f003111:	29 c2                	sub    edx,eax
9f003113:	89 d0                	mov    eax,edx
9f003115:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00311b:	29 c3                	sub    ebx,eax
9f00311d:	89 d8                	mov    eax,ebx
9f00311f:	85 c0                	test   eax,eax
9f003121:	75 07                	jne    9f00312a <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f003123:	ba 01 00 00 00       	mov    edx,0x1
9f003128:	eb 05                	jmp    9f00312f <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f00312a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f00312f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003132:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f003135:	89 d0                	mov    eax,edx
9f003137:	01 c0                	add    eax,eax
9f003139:	01 d0                	add    eax,edx
9f00313b:	c1 e0 02             	shl    eax,0x2
9f00313e:	01 d8                	add    eax,ebx
9f003140:	8b 84 81 44 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2bc]
9f003147:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f00314a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00314d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f003150:	8d 50 01             	lea    edx,[eax+0x1]
9f003153:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003156:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f003159:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00315c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00315f:	83 f8 0c             	cmp    eax,0xc
9f003162:	75 19                	jne    9f00317d <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
9f003164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003167:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
9f00316e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003171:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003174:	8d 50 01             	lea    edx,[eax+0x1]
9f003177:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00317a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f00317d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003180:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003183:	83 e0 03             	and    eax,0x3
9f003186:	85 c0                	test   eax,eax
9f003188:	75 62                	jne    9f0031ec <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
9f00318a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00318d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f003190:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f003196:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00319b:	89 d8                	mov    eax,ebx
9f00319d:	f7 ea                	imul   edx
9f00319f:	c1 fa 05             	sar    edx,0x5
9f0031a2:	89 d8                	mov    eax,ebx
9f0031a4:	c1 f8 1f             	sar    eax,0x1f
9f0031a7:	29 c2                	sub    edx,eax
9f0031a9:	89 d0                	mov    eax,edx
9f0031ab:	6b c0 64             	imul   eax,eax,0x64
9f0031ae:	29 c3                	sub    ebx,eax
9f0031b0:	89 d8                	mov    eax,ebx
9f0031b2:	85 c0                	test   eax,eax
9f0031b4:	75 2f                	jne    9f0031e5 <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
9f0031b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031b9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0031bc:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f0031c2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0031c7:	89 d8                	mov    eax,ebx
9f0031c9:	f7 ea                	imul   edx
9f0031cb:	c1 fa 07             	sar    edx,0x7
9f0031ce:	89 d8                	mov    eax,ebx
9f0031d0:	c1 f8 1f             	sar    eax,0x1f
9f0031d3:	29 c2                	sub    edx,eax
9f0031d5:	89 d0                	mov    eax,edx
9f0031d7:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0031dd:	29 c3                	sub    ebx,eax
9f0031df:	89 d8                	mov    eax,ebx
9f0031e1:	85 c0                	test   eax,eax
9f0031e3:	75 07                	jne    9f0031ec <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
9f0031e5:	ba 01 00 00 00       	mov    edx,0x1
9f0031ea:	eb 05                	jmp    9f0031f1 <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
9f0031ec:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
9f0031f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0031f4:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f0031f7:	89 d0                	mov    eax,edx
9f0031f9:	01 c0                	add    eax,eax
9f0031fb:	01 d0                	add    eax,edx
9f0031fd:	c1 e0 02             	shl    eax,0x2
9f003200:	01 d8                	add    eax,ebx
9f003202:	8b 84 81 44 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2bc]
9f003209:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00320c:	0f 8e a9 fe ff ff    	jle    9f0030bb <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f003212:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003215:	8d 50 01             	lea    edx,[eax+0x1]
9f003218:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00321b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
9f00321e:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f003225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003228:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00322b:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f00322e:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f003234:	39 d0                	cmp    eax,edx
9f003236:	7d 0a                	jge    9f003242 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
9f003238:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f00323d:	e9 d0 03 00 00       	jmp    9f003612 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
9f003242:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
9f003249:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
9f003250:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f003257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00325a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f00325d:	05 6c 07 00 00       	add    eax,0x76c
9f003262:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f003265:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003268:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00326b:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f003270:	7e 07                	jle    9f003279 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
9f003272:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
9f003279:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00327c:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f00327f:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f003285:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f003288:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f00328d:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f003290:	89 c2                	mov    edx,eax
9f003292:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003295:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003298:	8d 58 03             	lea    ebx,[eax+0x3]
9f00329b:	85 c0                	test   eax,eax
9f00329d:	0f 48 c3             	cmovs  eax,ebx
9f0032a0:	c1 f8 02             	sar    eax,0x2
9f0032a3:	83 c0 01             	add    eax,0x1
9f0032a6:	39 c2                	cmp    edx,eax
9f0032a8:	7d 04                	jge    9f0032ae <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
9f0032aa:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f0032ae:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0032b1:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f0032b4:	8d 50 03             	lea    edx,[eax+0x3]
9f0032b7:	85 c0                	test   eax,eax
9f0032b9:	0f 48 c2             	cmovs  eax,edx
9f0032bc:	c1 f8 02             	sar    eax,0x2
9f0032bf:	89 c3                	mov    ebx,eax
9f0032c1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0032c4:	83 e0 03             	and    eax,0x3
9f0032c7:	85 c0                	test   eax,eax
9f0032c9:	74 29                	je     9f0032f4 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f0032cb:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f0032ce:	99                   	cdq    
9f0032cf:	c1 ea 1e             	shr    edx,0x1e
9f0032d2:	01 d0                	add    eax,edx
9f0032d4:	83 e0 03             	and    eax,0x3
9f0032d7:	29 d0                	sub    eax,edx
9f0032d9:	89 c6                	mov    esi,eax
9f0032db:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0032de:	99                   	cdq    
9f0032df:	c1 ea 1e             	shr    edx,0x1e
9f0032e2:	01 d0                	add    eax,edx
9f0032e4:	83 e0 03             	and    eax,0x3
9f0032e7:	29 d0                	sub    eax,edx
9f0032e9:	39 c6                	cmp    esi,eax
9f0032eb:	7d 07                	jge    9f0032f4 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
9f0032ed:	b8 01 00 00 00       	mov    eax,0x1
9f0032f2:	eb 05                	jmp    9f0032f9 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
9f0032f4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
9f0032f9:	01 d8                	add    eax,ebx
9f0032fb:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f0032fe:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003301:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003304:	89 c3                	mov    ebx,eax
9f003306:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00330b:	89 d8                	mov    eax,ebx
9f00330d:	f7 ea                	imul   edx
9f00330f:	c1 fa 05             	sar    edx,0x5
9f003312:	89 d8                	mov    eax,ebx
9f003314:	c1 f8 1f             	sar    eax,0x1f
9f003317:	89 d7                	mov    edi,edx
9f003319:	29 c7                	sub    edi,eax
9f00331b:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f00331e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003323:	89 d8                	mov    eax,ebx
9f003325:	f7 ea                	imul   edx
9f003327:	c1 fa 05             	sar    edx,0x5
9f00332a:	89 d8                	mov    eax,ebx
9f00332c:	c1 f8 1f             	sar    eax,0x1f
9f00332f:	29 c2                	sub    edx,eax
9f003331:	89 d0                	mov    eax,edx
9f003333:	6b c0 64             	imul   eax,eax,0x64
9f003336:	29 c3                	sub    ebx,eax
9f003338:	89 d8                	mov    eax,ebx
9f00333a:	85 c0                	test   eax,eax
9f00333c:	74 49                	je     9f003387 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
9f00333e:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003341:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003346:	89 d8                	mov    eax,ebx
9f003348:	f7 ea                	imul   edx
9f00334a:	c1 fa 05             	sar    edx,0x5
9f00334d:	89 d8                	mov    eax,ebx
9f00334f:	c1 f8 1f             	sar    eax,0x1f
9f003352:	89 d6                	mov    esi,edx
9f003354:	29 c6                	sub    esi,eax
9f003356:	6b c6 64             	imul   eax,esi,0x64
9f003359:	89 de                	mov    esi,ebx
9f00335b:	29 c6                	sub    esi,eax
9f00335d:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f003360:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003365:	89 d8                	mov    eax,ebx
9f003367:	f7 ea                	imul   edx
9f003369:	c1 fa 05             	sar    edx,0x5
9f00336c:	89 d8                	mov    eax,ebx
9f00336e:	c1 f8 1f             	sar    eax,0x1f
9f003371:	29 c2                	sub    edx,eax
9f003373:	89 d0                	mov    eax,edx
9f003375:	6b c0 64             	imul   eax,eax,0x64
9f003378:	29 c3                	sub    ebx,eax
9f00337a:	89 d8                	mov    eax,ebx
9f00337c:	39 c6                	cmp    esi,eax
9f00337e:	7d 07                	jge    9f003387 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
9f003380:	b8 01 00 00 00       	mov    eax,0x1
9f003385:	eb 05                	jmp    9f00338c <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
9f003387:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
9f00338c:	01 f8                	add    eax,edi
9f00338e:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f003391:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f003394:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f003397:	89 c3                	mov    ebx,eax
9f003399:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00339e:	89 d8                	mov    eax,ebx
9f0033a0:	f7 ea                	imul   edx
9f0033a2:	c1 fa 07             	sar    edx,0x7
9f0033a5:	89 d8                	mov    eax,ebx
9f0033a7:	c1 f8 1f             	sar    eax,0x1f
9f0033aa:	89 d7                	mov    edi,edx
9f0033ac:	29 c7                	sub    edi,eax
9f0033ae:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0033b1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0033b6:	89 d8                	mov    eax,ebx
9f0033b8:	f7 ea                	imul   edx
9f0033ba:	c1 fa 07             	sar    edx,0x7
9f0033bd:	89 d8                	mov    eax,ebx
9f0033bf:	c1 f8 1f             	sar    eax,0x1f
9f0033c2:	29 c2                	sub    edx,eax
9f0033c4:	89 d0                	mov    eax,edx
9f0033c6:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0033cc:	29 c3                	sub    ebx,eax
9f0033ce:	89 d8                	mov    eax,ebx
9f0033d0:	85 c0                	test   eax,eax
9f0033d2:	74 4f                	je     9f003423 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f0033d4:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f0033d7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0033dc:	89 d8                	mov    eax,ebx
9f0033de:	f7 ea                	imul   edx
9f0033e0:	c1 fa 07             	sar    edx,0x7
9f0033e3:	89 d8                	mov    eax,ebx
9f0033e5:	c1 f8 1f             	sar    eax,0x1f
9f0033e8:	89 d6                	mov    esi,edx
9f0033ea:	29 c6                	sub    esi,eax
9f0033ec:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f0033f2:	89 de                	mov    esi,ebx
9f0033f4:	29 c6                	sub    esi,eax
9f0033f6:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f0033f9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0033fe:	89 d8                	mov    eax,ebx
9f003400:	f7 ea                	imul   edx
9f003402:	c1 fa 07             	sar    edx,0x7
9f003405:	89 d8                	mov    eax,ebx
9f003407:	c1 f8 1f             	sar    eax,0x1f
9f00340a:	29 c2                	sub    edx,eax
9f00340c:	89 d0                	mov    eax,edx
9f00340e:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003414:	29 c3                	sub    ebx,eax
9f003416:	89 d8                	mov    eax,ebx
9f003418:	39 c6                	cmp    esi,eax
9f00341a:	7d 07                	jge    9f003423 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
9f00341c:	b8 01 00 00 00       	mov    eax,0x1
9f003421:	eb 05                	jmp    9f003428 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
9f003423:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
9f003428:	01 f8                	add    eax,edi
9f00342a:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
9f00342d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f003434:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f003437:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f00343a:	eb 7b                	jmp    9f0034b7 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f00343c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f00343f:	83 e0 03             	and    eax,0x3
9f003442:	85 c0                	test   eax,eax
9f003444:	75 50                	jne    9f003496 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
9f003446:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f003449:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00344e:	89 d8                	mov    eax,ebx
9f003450:	f7 ea                	imul   edx
9f003452:	c1 fa 05             	sar    edx,0x5
9f003455:	89 d8                	mov    eax,ebx
9f003457:	c1 f8 1f             	sar    eax,0x1f
9f00345a:	29 c2                	sub    edx,eax
9f00345c:	89 d0                	mov    eax,edx
9f00345e:	6b c0 64             	imul   eax,eax,0x64
9f003461:	29 c3                	sub    ebx,eax
9f003463:	89 d8                	mov    eax,ebx
9f003465:	85 c0                	test   eax,eax
9f003467:	75 26                	jne    9f00348f <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
9f003469:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f00346c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f003471:	89 d8                	mov    eax,ebx
9f003473:	f7 ea                	imul   edx
9f003475:	c1 fa 07             	sar    edx,0x7
9f003478:	89 d8                	mov    eax,ebx
9f00347a:	c1 f8 1f             	sar    eax,0x1f
9f00347d:	29 c2                	sub    edx,eax
9f00347f:	89 d0                	mov    eax,edx
9f003481:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f003487:	29 c3                	sub    ebx,eax
9f003489:	89 d8                	mov    eax,ebx
9f00348b:	85 c0                	test   eax,eax
9f00348d:	75 07                	jne    9f003496 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
9f00348f:	ba 01 00 00 00       	mov    edx,0x1
9f003494:	eb 05                	jmp    9f00349b <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
9f003496:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
9f00349b:	89 d0                	mov    eax,edx
9f00349d:	01 c0                	add    eax,eax
9f00349f:	01 d0                	add    eax,edx
9f0034a1:	c1 e0 02             	shl    eax,0x2
9f0034a4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f0034a7:	01 d0                	add    eax,edx
9f0034a9:	8b 84 81 44 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2bc]
9f0034b0:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
9f0034b3:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f0034b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0034bd:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f0034c0:	0f 8f 76 ff ff ff    	jg     9f00343c <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f0034c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034c9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f0034cc:	83 e8 01             	sub    eax,0x1
9f0034cf:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
9f0034d2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0034d5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034d8:	01 d0                	add    eax,edx
9f0034da:	85 c0                	test   eax,eax
9f0034dc:	79 04                	jns    9f0034e2 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
9f0034de:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
9f0034e2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0034e5:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
9f0034e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0034eb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0034ee:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f0034f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0034f4:	8d 58 04             	lea    ebx,[eax+0x4]
9f0034f7:	ba 93 24 49 92       	mov    edx,0x92492493
9f0034fc:	89 d8                	mov    eax,ebx
9f0034fe:	f7 ea                	imul   edx
9f003500:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003503:	c1 f8 02             	sar    eax,0x2
9f003506:	89 c2                	mov    edx,eax
9f003508:	89 d8                	mov    eax,ebx
9f00350a:	c1 f8 1f             	sar    eax,0x1f
9f00350d:	29 c2                	sub    edx,eax
9f00350f:	89 d0                	mov    eax,edx
9f003511:	89 c2                	mov    edx,eax
9f003513:	c1 e2 03             	shl    edx,0x3
9f003516:	29 c2                	sub    edx,eax
9f003518:	89 d8                	mov    eax,ebx
9f00351a:	29 d0                	sub    eax,edx
9f00351c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00351f:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f003522:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003525:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f003528:	c1 e0 02             	shl    eax,0x2
9f00352b:	89 c2                	mov    edx,eax
9f00352d:	c1 e2 04             	shl    edx,0x4
9f003530:	29 c2                	sub    edx,eax
9f003532:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003535:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f003538:	01 d0                	add    eax,edx
9f00353a:	c1 e0 02             	shl    eax,0x2
9f00353d:	89 c2                	mov    edx,eax
9f00353f:	c1 e2 04             	shl    edx,0x4
9f003542:	29 c2                	sub    edx,eax
9f003544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003547:	8b 00                	mov    eax,DWORD PTR [eax]
9f003549:	01 d0                	add    eax,edx
9f00354b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f00354e:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f003553:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f003556:	89 c3                	mov    ebx,eax
9f003558:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f00355d:	89 d8                	mov    eax,ebx
9f00355f:	f7 ea                	imul   edx
9f003561:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f003564:	c1 f8 10             	sar    eax,0x10
9f003567:	89 c2                	mov    edx,eax
9f003569:	89 d8                	mov    eax,ebx
9f00356b:	c1 f8 1f             	sar    eax,0x1f
9f00356e:	29 c2                	sub    edx,eax
9f003570:	89 d0                	mov    eax,edx
9f003572:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003575:	7d 04                	jge    9f00357b <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
9f003577:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
9f00357b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00357e:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f003584:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f003587:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f00358d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00358f:	85 c0                	test   eax,eax
9f003591:	7e 16                	jle    9f0035a9 <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
9f003593:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f003599:	8b 00                	mov    eax,DWORD PTR [eax]
9f00359b:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f0035a0:	29 c2                	sub    edx,eax
9f0035a2:	89 d0                	mov    eax,edx
9f0035a4:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0035a7:	7c 1b                	jl     9f0035c4 <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f0035a9:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f0035af:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f0035b1:	85 c0                	test   eax,eax
9f0035b3:	79 13                	jns    9f0035c8 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:171
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f0035b5:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f0035bb:	8b 00                	mov    eax,DWORD PTR [eax]
9f0035bd:	f7 d8                	neg    eax
9f0035bf:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0035c2:	7e 04                	jle    9f0035c8 <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
          overflow|=16;
9f0035c4:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
9f0035c8:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
9f0035ce:	8b 00                	mov    eax,DWORD PTR [eax]
9f0035d0:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
9f0035d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0035d6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f0035d9:	85 c0                	test   eax,eax
9f0035db:	74 0b                	je     9f0035e8 <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
9f0035dd:	8b 81 58 00 00 00    	mov    eax,DWORD PTR [ecx+0x58]
9f0035e3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f0035e6:	eb 07                	jmp    9f0035ef <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
9f0035e8:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f0035ef:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0035f2:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f0035f5:	7e 04                	jle    9f0035fb <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
9f0035f7:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
9f0035fb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f0035fe:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
9f003601:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f003605:	74 08                	je     9f00360f <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f003607:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00360a:	83 e8 02             	sub    eax,0x2
9f00360d:	eb 03                	jmp    9f003612 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f00360f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
9f003612:	83 c4 20             	add    esp,0x20
9f003615:	5b                   	pop    ebx
9f003616:	5e                   	pop    esi
9f003617:	5f                   	pop    edi
9f003618:	5d                   	pop    ebp
9f003619:	c3                   	ret    

9f00361a <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f00361a:	55                   	push   ebp
9f00361b:	89 e5                	mov    ebp,esp
9f00361d:	56                   	push   esi
9f00361e:	53                   	push   ebx
9f00361f:	83 ec 14             	sub    esp,0x14
9f003622:	e8 60 00 00 00       	call   9f003687 <__x86.get_pc_thunk.ax>
9f003627:	05 55 1e 00 00       	add    eax,0x1e55
9f00362c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00362f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
9f003632:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f003639:	b8 71 01 00 00       	mov    eax,0x171
9f00363e:	bb 00 00 00 00       	mov    ebx,0x0
9f003643:	b9 00 00 00 00       	mov    ecx,0x0
9f003648:	ba 00 00 00 00       	mov    edx,0x0
9f00364d:	be 00 00 00 00       	mov    esi,0x0
9f003652:	e8 fc ff ff ff       	call   9f003653 <gettime+0x39>
9f003657:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
9f00365a:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f00365e:	74 11                	je     9f003671 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
9f003660:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003663:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003666:	50                   	push   eax
9f003667:	e8 05 f7 ff ff       	call   9f002d71 <localtime_rI>
9f00366c:	83 c4 08             	add    esp,0x8
9f00366f:	eb 0f                	jmp    9f003680 <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
9f003671:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003674:	8d 45 f4             	lea    eax,[ebp-0xc]
9f003677:	50                   	push   eax
9f003678:	e8 7f f3 ff ff       	call   9f0029fc <gmtime_rI>
9f00367d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
9f003680:	8d 65 f8             	lea    esp,[ebp-0x8]
9f003683:	5b                   	pop    ebx
9f003684:	5e                   	pop    esi
9f003685:	5d                   	pop    ebp
9f003686:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f003687 <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f003687:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f00368a:	c3                   	ret    

Disassembly of section .plt:

9f003690 <.plt>:
9f003690:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
9f003696:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
9f00369c:	00 00                	add    BYTE PTR [eax],al
9f00369e:	00 00                	add    BYTE PTR [eax],al
9f0036a0:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
9f0036a6:	68 00 00 00 00       	push   0x0
9f0036ab:	e9 e0 ff ff ff       	jmp    9f003690 <__x86.get_pc_thunk.ax+0x9>

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f0036b0 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f0036b0:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f0036b3:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f0036b4 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f0036b4:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f0036b7:	c3                   	ret    

Disassembly of section .eh_frame:

9f0036b8 <.eh_frame>:
9f0036b8:	14 00                	adc    al,0x0
9f0036ba:	00 00                	add    BYTE PTR [eax],al
9f0036bc:	00 00                	add    BYTE PTR [eax],al
9f0036be:	00 00                	add    BYTE PTR [eax],al
9f0036c0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0036c3:	00 01                	add    BYTE PTR [ecx],al
9f0036c5:	7c 08                	jl     9f0036cf <__x86.get_pc_thunk.cx+0x1b>
9f0036c7:	01 1b                	add    DWORD PTR [ebx],ebx
9f0036c9:	0c 04                	or     al,0x4
9f0036cb:	04 88                	add    al,0x88
9f0036cd:	01 00                	add    DWORD PTR [eax],eax
9f0036cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0036d2:	00 00                	add    BYTE PTR [eax],al
9f0036d4:	1c 00                	sbb    al,0x0
9f0036d6:	00 00                	add    BYTE PTR [eax],al
9f0036d8:	28 c9                	sub    cl,cl
9f0036da:	ff                   	(bad)  
9f0036db:	ff                   	(bad)  
9f0036dc:	38 00                	cmp    BYTE PTR [eax],al
9f0036de:	00 00                	add    BYTE PTR [eax],al
9f0036e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0036e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0036e9:	74 c5                	je     9f0036b0 <__x86.get_pc_thunk.bx>
9f0036eb:	0c 04                	or     al,0x4
9f0036ed:	04 00                	add    al,0x0
9f0036ef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0036f2:	00 00                	add    BYTE PTR [eax],al
9f0036f4:	3c 00                	cmp    al,0x0
9f0036f6:	00 00                	add    BYTE PTR [eax],al
9f0036f8:	40                   	inc    eax
9f0036f9:	c9                   	leave  
9f0036fa:	ff                   	(bad)  
9f0036fb:	ff                   	(bad)  
9f0036fc:	38 00                	cmp    BYTE PTR [eax],al
9f0036fe:	00 00                	add    BYTE PTR [eax],al
9f003700:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003703:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003709:	74 c5                	je     9f0036d0 <__x86.get_pc_thunk.cx+0x1c>
9f00370b:	0c 04                	or     al,0x4
9f00370d:	04 00                	add    al,0x0
9f00370f:	00 10                	add    BYTE PTR [eax],dl
9f003711:	00 00                	add    BYTE PTR [eax],al
9f003713:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f003717:	00 6f ff             	add    BYTE PTR [edi-0x1],ch
9f00371a:	ff                   	(bad)  
9f00371b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f00371e:	00 00                	add    BYTE PTR [eax],al
9f003720:	00 00                	add    BYTE PTR [eax],al
9f003722:	00 00                	add    BYTE PTR [eax],al
9f003724:	24 00                	and    al,0x0
9f003726:	00 00                	add    BYTE PTR [eax],al
9f003728:	70 00                	jo     9f00372a <__x86.get_pc_thunk.cx+0x76>
9f00372a:	00 00                	add    BYTE PTR [eax],al
9f00372c:	44                   	inc    esp
9f00372d:	c9                   	leave  
9f00372e:	ff                   	(bad)  
9f00372f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f003732:	00 00                	add    BYTE PTR [eax],al
9f003734:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003737:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00373d:	42                   	inc    edx
9f00373e:	86 03                	xchg   BYTE PTR [ebx],al
9f003740:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f003744:	c3                   	ret    
9f003745:	41                   	inc    ecx
9f003746:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00374a:	04 04                	add    al,0x4
9f00374c:	24 00                	and    al,0x0
9f00374e:	00 00                	add    BYTE PTR [eax],al
9f003750:	98                   	cwde   
9f003751:	00 00                	add    BYTE PTR [eax],al
9f003753:	00 71 c9             	add    BYTE PTR [ecx-0x37],dh
9f003756:	ff                   	(bad)  
9f003757:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f00375a:	00 00                	add    BYTE PTR [eax],al
9f00375c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00375f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003765:	42                   	inc    edx
9f003766:	86 03                	xchg   BYTE PTR [ebx],al
9f003768:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f00376c:	c3                   	ret    
9f00376d:	41                   	inc    ecx
9f00376e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003772:	04 04                	add    al,0x4
9f003774:	24 00                	and    al,0x0
9f003776:	00 00                	add    BYTE PTR [eax],al
9f003778:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f00377b:	00 a0 c9 ff ff 97    	add    BYTE PTR [eax-0x68000037],ah
9f003781:	00 00                	add    BYTE PTR [eax],al
9f003783:	00 00                	add    BYTE PTR [eax],al
9f003785:	41                   	inc    ecx
9f003786:	0e                   	push   cs
9f003787:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00378d:	42                   	inc    edx
9f00378e:	86 03                	xchg   BYTE PTR [ebx],al
9f003790:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f003794:	c3                   	ret    
9f003795:	41                   	inc    ecx
9f003796:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00379a:	04 04                	add    al,0x4
9f00379c:	10 00                	adc    BYTE PTR [eax],al
9f00379e:	00 00                	add    BYTE PTR [eax],al
9f0037a0:	e8 00 00 00 0c       	call   ab0037a5 <ticksToWait+0xbffe2cd>
9f0037a5:	ff                   	(bad)  
9f0037a6:	ff                   	(bad)  
9f0037a7:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f0037aa:	00 00                	add    BYTE PTR [eax],al
9f0037ac:	00 00                	add    BYTE PTR [eax],al
9f0037ae:	00 00                	add    BYTE PTR [eax],al
9f0037b0:	20 00                	and    BYTE PTR [eax],al
9f0037b2:	00 00                	add    BYTE PTR [eax],al
9f0037b4:	fc                   	cld    
9f0037b5:	00 00                	add    BYTE PTR [eax],al
9f0037b7:	00 fc                	add    ah,bh
9f0037b9:	c9                   	leave  
9f0037ba:	ff                   	(bad)  
9f0037bb:	ff 77 00             	push   DWORD PTR [edi+0x0]
9f0037be:	00 00                	add    BYTE PTR [eax],al
9f0037c0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0037c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0037c9:	44                   	inc    esp
9f0037ca:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0037cd:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0037ce:	c5 c3 0c             	(bad)  
9f0037d1:	04 04                	add    al,0x4
9f0037d3:	00 20                	add    BYTE PTR [eax],ah
9f0037d5:	00 00                	add    BYTE PTR [eax],al
9f0037d7:	00 20                	add    BYTE PTR [eax],ah
9f0037d9:	01 00                	add    DWORD PTR [eax],eax
9f0037db:	00 4f ca             	add    BYTE PTR [edi-0x36],cl
9f0037de:	ff                   	(bad)  
9f0037df:	ff                   	(bad)  
9f0037e0:	bb 00 00 00 00       	mov    ebx,0x0
9f0037e5:	41                   	inc    ecx
9f0037e6:	0e                   	push   cs
9f0037e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0037ed:	44                   	inc    esp
9f0037ee:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0037f1:	b3 c5                	mov    bl,0xc5
9f0037f3:	c3                   	ret    
9f0037f4:	0c 04                	or     al,0x4
9f0037f6:	04 00                	add    al,0x0
9f0037f8:	20 00                	and    BYTE PTR [eax],al
9f0037fa:	00 00                	add    BYTE PTR [eax],al
9f0037fc:	44                   	inc    esp
9f0037fd:	01 00                	add    DWORD PTR [eax],eax
9f0037ff:	00 e6                	add    dh,ah
9f003801:	ca ff ff             	retf   0xffff
9f003804:	bb 00 00 00 00       	mov    ebx,0x0
9f003809:	41                   	inc    ecx
9f00380a:	0e                   	push   cs
9f00380b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003811:	44                   	inc    esp
9f003812:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003815:	b3 c5                	mov    bl,0xc5
9f003817:	c3                   	ret    
9f003818:	0c 04                	or     al,0x4
9f00381a:	04 00                	add    al,0x0
9f00381c:	1c 00                	sbb    al,0x0
9f00381e:	00 00                	add    BYTE PTR [eax],al
9f003820:	68 01 00 00 7d       	push   0x7d000001
9f003825:	cb                   	retf   
9f003826:	ff                   	(bad)  
9f003827:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
9f00382b:	00 00                	add    BYTE PTR [eax],al
9f00382d:	41                   	inc    ecx
9f00382e:	0e                   	push   cs
9f00382f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003835:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f003838:	0c 04                	or     al,0x4
9f00383a:	04 00                	add    al,0x0
9f00383c:	20 00                	and    BYTE PTR [eax],al
9f00383e:	00 00                	add    BYTE PTR [eax],al
9f003840:	88 01                	mov    BYTE PTR [ecx],al
9f003842:	00 00                	add    BYTE PTR [eax],al
9f003844:	bc cb ff ff aa       	mov    esp,0xaaffffcb
9f003849:	00 00                	add    BYTE PTR [eax],al
9f00384b:	00 00                	add    BYTE PTR [eax],al
9f00384d:	41                   	inc    ecx
9f00384e:	0e                   	push   cs
9f00384f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003855:	44                   	inc    esp
9f003856:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003859:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f00385e:	04 00                	add    al,0x0
9f003860:	20 00                	and    BYTE PTR [eax],al
9f003862:	00 00                	add    BYTE PTR [eax],al
9f003864:	ac                   	lods   al,BYTE PTR ds:[esi]
9f003865:	01 00                	add    DWORD PTR [eax],eax
9f003867:	00 42 cc             	add    BYTE PTR [edx-0x34],al
9f00386a:	ff                   	(bad)  
9f00386b:	ff c1                	inc    ecx
9f00386d:	01 00                	add    DWORD PTR [eax],eax
9f00386f:	00 00                	add    BYTE PTR [eax],al
9f003871:	41                   	inc    ecx
9f003872:	0e                   	push   cs
9f003873:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003879:	44                   	inc    esp
9f00387a:	83 03 03             	add    DWORD PTR [ebx],0x3
9f00387d:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f003882:	04 04                	add    al,0x4
9f003884:	20 00                	and    BYTE PTR [eax],al
9f003886:	00 00                	add    BYTE PTR [eax],al
9f003888:	d0 01                	rol    BYTE PTR [ecx],1
9f00388a:	00 00                	add    BYTE PTR [eax],al
9f00388c:	e0 cd                	loopne 9f00385b <__x86.get_pc_thunk.cx+0x1a7>
9f00388e:	ff                   	(bad)  
9f00388f:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f003895:	41                   	inc    ecx
9f003896:	0e                   	push   cs
9f003897:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00389d:	44                   	inc    esp
9f00389e:	83 03 65             	add    DWORD PTR [ebx],0x65
9f0038a1:	c5 c3 0c             	(bad)  
9f0038a4:	04 04                	add    al,0x4
9f0038a6:	00 00                	add    BYTE PTR [eax],al
9f0038a8:	20 00                	and    BYTE PTR [eax],al
9f0038aa:	00 00                	add    BYTE PTR [eax],al
9f0038ac:	f4                   	hlt    
9f0038ad:	01 00                	add    DWORD PTR [eax],eax
9f0038af:	00 e9                	add    cl,ch
9f0038b1:	cd ff                	int    0xff
9f0038b3:	ff 2a                	jmp    FWORD PTR [edx]
9f0038b5:	00 00                	add    BYTE PTR [eax],al
9f0038b7:	00 00                	add    BYTE PTR [eax],al
9f0038b9:	41                   	inc    ecx
9f0038ba:	0e                   	push   cs
9f0038bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0038c1:	44                   	inc    esp
9f0038c2:	83 03 62             	add    DWORD PTR [ebx],0x62
9f0038c5:	c5 c3 0c             	(bad)  
9f0038c8:	04 04                	add    al,0x4
9f0038ca:	00 00                	add    BYTE PTR [eax],al
9f0038cc:	24 00                	and    al,0x0
9f0038ce:	00 00                	add    BYTE PTR [eax],al
9f0038d0:	18 02                	sbb    BYTE PTR [edx],al
9f0038d2:	00 00                	add    BYTE PTR [eax],al
9f0038d4:	ef                   	out    dx,eax
9f0038d5:	cd ff                	int    0xff
9f0038d7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f0038dd:	41                   	inc    ecx
9f0038de:	0e                   	push   cs
9f0038df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0038e5:	42                   	inc    edx
9f0038e6:	86 03                	xchg   BYTE PTR [ebx],al
9f0038e8:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f0038ef:	c5 
9f0038f0:	0c 04                	or     al,0x4
9f0038f2:	04 00                	add    al,0x0
9f0038f4:	24 00                	and    al,0x0
9f0038f6:	00 00                	add    BYTE PTR [eax],al
9f0038f8:	40                   	inc    eax
9f0038f9:	02 00                	add    al,BYTE PTR [eax]
9f0038fb:	00 fc                	add    ah,bh
9f0038fd:	cd ff                	int    0xff
9f0038ff:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f003905:	41                   	inc    ecx
9f003906:	0e                   	push   cs
9f003907:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00390d:	42                   	inc    edx
9f00390e:	86 03                	xchg   BYTE PTR [ebx],al
9f003910:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f003917:	c5 
9f003918:	0c 04                	or     al,0x4
9f00391a:	04 00                	add    al,0x0
9f00391c:	20 00                	and    BYTE PTR [eax],al
9f00391e:	00 00                	add    BYTE PTR [eax],al
9f003920:	68 02 00 00 09       	push   0x9000002
9f003925:	ce                   	into   
9f003926:	ff                   	(bad)  
9f003927:	ff 31                	push   DWORD PTR [ecx]
9f003929:	00 00                	add    BYTE PTR [eax],al
9f00392b:	00 00                	add    BYTE PTR [eax],al
9f00392d:	41                   	inc    ecx
9f00392e:	0e                   	push   cs
9f00392f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003935:	44                   	inc    esp
9f003936:	83 03 69             	add    DWORD PTR [ebx],0x69
9f003939:	c5 c3 0c             	(bad)  
9f00393c:	04 04                	add    al,0x4
9f00393e:	00 00                	add    BYTE PTR [eax],al
9f003940:	20 00                	and    BYTE PTR [eax],al
9f003942:	00 00                	add    BYTE PTR [eax],al
9f003944:	8c 02                	mov    WORD PTR [edx],es
9f003946:	00 00                	add    BYTE PTR [eax],al
9f003948:	18 ce                	sbb    dh,cl
9f00394a:	ff                   	(bad)  
9f00394b:	ff 26                	jmp    DWORD PTR [esi]
9f00394d:	00 00                	add    BYTE PTR [eax],al
9f00394f:	00 00                	add    BYTE PTR [eax],al
9f003951:	41                   	inc    ecx
9f003952:	0e                   	push   cs
9f003953:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003959:	41                   	inc    ecx
9f00395a:	83 03 60             	add    DWORD PTR [ebx],0x60
9f00395d:	c3                   	ret    
9f00395e:	41                   	inc    ecx
9f00395f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003962:	04 00                	add    al,0x0
9f003964:	20 00                	and    BYTE PTR [eax],al
9f003966:	00 00                	add    BYTE PTR [eax],al
9f003968:	b0 02                	mov    al,0x2
9f00396a:	00 00                	add    BYTE PTR [eax],al
9f00396c:	1a ce                	sbb    cl,dh
9f00396e:	ff                   	(bad)  
9f00396f:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f003972:	00 00                	add    BYTE PTR [eax],al
9f003974:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003977:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00397d:	44                   	inc    esp
9f00397e:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f003981:	c3                   	ret    
9f003982:	41                   	inc    ecx
9f003983:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003986:	04 00                	add    al,0x0
9f003988:	20 00                	and    BYTE PTR [eax],al
9f00398a:	00 00                	add    BYTE PTR [eax],al
9f00398c:	d4 02                	aam    0x2
9f00398e:	00 00                	add    BYTE PTR [eax],al
9f003990:	39 ce                	cmp    esi,ecx
9f003992:	ff                   	(bad)  
9f003993:	ff 43 00             	inc    DWORD PTR [ebx+0x0]
9f003996:	00 00                	add    BYTE PTR [eax],al
9f003998:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00399b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0039a1:	44                   	inc    esp
9f0039a2:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f0039a5:	c3                   	ret    
9f0039a6:	41                   	inc    ecx
9f0039a7:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0039aa:	04 00                	add    al,0x0
9f0039ac:	20 00                	and    BYTE PTR [eax],al
9f0039ae:	00 00                	add    BYTE PTR [eax],al
9f0039b0:	f8                   	clc    
9f0039b1:	02 00                	add    al,BYTE PTR [eax]
9f0039b3:	00 58 ce             	add    BYTE PTR [eax-0x32],bl
9f0039b6:	ff                   	(bad)  
9f0039b7:	ff                   	(bad)  
9f0039b8:	ba 00 00 00 00       	mov    edx,0x0
9f0039bd:	41                   	inc    ecx
9f0039be:	0e                   	push   cs
9f0039bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0039c5:	44                   	inc    esp
9f0039c6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0039c9:	b2 c5                	mov    dl,0xc5
9f0039cb:	c3                   	ret    
9f0039cc:	0c 04                	or     al,0x4
9f0039ce:	04 00                	add    al,0x0
9f0039d0:	24 00                	and    al,0x0
9f0039d2:	00 00                	add    BYTE PTR [eax],al
9f0039d4:	1c 03                	sbb    al,0x3
9f0039d6:	00 00                	add    BYTE PTR [eax],al
9f0039d8:	f0 ce                	lock into 
9f0039da:	ff                   	(bad)  
9f0039db:	ff                   	(bad)  
9f0039dc:	3a 00                	cmp    al,BYTE PTR [eax]
9f0039de:	00 00                	add    BYTE PTR [eax],al
9f0039e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0039e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0039e9:	45                   	inc    ebp
9f0039ea:	86 03                	xchg   BYTE PTR [ebx],al
9f0039ec:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f0039f0:	41                   	inc    ecx
9f0039f1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0039f5:	04 04                	add    al,0x4
9f0039f7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0039fa:	00 00                	add    BYTE PTR [eax],al
9f0039fc:	44                   	inc    esp
9f0039fd:	03 00                	add    eax,DWORD PTR [eax]
9f0039ff:	00 02                	add    BYTE PTR [edx],al
9f003a01:	cf                   	iret   
9f003a02:	ff                   	(bad)  
9f003a03:	ff                   	(bad)  
9f003a04:	3c 00                	cmp    al,0x0
9f003a06:	00 00                	add    BYTE PTR [eax],al
9f003a08:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003a0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003a11:	45                   	inc    ebp
9f003a12:	86 03                	xchg   BYTE PTR [ebx],al
9f003a14:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f003a18:	41                   	inc    ecx
9f003a19:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003a1d:	04 04                	add    al,0x4
9f003a1f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f003a22:	00 00                	add    BYTE PTR [eax],al
9f003a24:	6c                   	ins    BYTE PTR es:[edi],dx
9f003a25:	03 00                	add    eax,DWORD PTR [eax]
9f003a27:	00 16                	add    BYTE PTR [esi],dl
9f003a29:	cf                   	iret   
9f003a2a:	ff                   	(bad)  
9f003a2b:	ff                   	(bad)  
9f003a2c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f003a2f:	00 00                	add    BYTE PTR [eax],al
9f003a31:	41                   	inc    ecx
9f003a32:	0e                   	push   cs
9f003a33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003a39:	45                   	inc    ebp
9f003a3a:	86 03                	xchg   BYTE PTR [ebx],al
9f003a3c:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f003a40:	41                   	inc    ecx
9f003a41:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003a45:	04 04                	add    al,0x4
9f003a47:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f003a4a:	00 00                	add    BYTE PTR [eax],al
9f003a4c:	94                   	xchg   esp,eax
9f003a4d:	03 00                	add    eax,DWORD PTR [eax]
9f003a4f:	00 2c cf             	add    BYTE PTR [edi+ecx*8],ch
9f003a52:	ff                   	(bad)  
9f003a53:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f003a56:	00 00                	add    BYTE PTR [eax],al
9f003a58:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003a5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003a61:	45                   	inc    ebp
9f003a62:	86 03                	xchg   BYTE PTR [ebx],al
9f003a64:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f003a6b:	c5 
9f003a6c:	0c 04                	or     al,0x4
9f003a6e:	04 00                	add    al,0x0
9f003a70:	24 00                	and    al,0x0
9f003a72:	00 00                	add    BYTE PTR [eax],al
9f003a74:	bc 03 00 00 44       	mov    esp,0x44000003
9f003a79:	cf                   	iret   
9f003a7a:	ff                   	(bad)  
9f003a7b:	ff 42 00             	inc    DWORD PTR [edx+0x0]
9f003a7e:	00 00                	add    BYTE PTR [eax],al
9f003a80:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003a83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003a89:	45                   	inc    ebp
9f003a8a:	86 03                	xchg   BYTE PTR [ebx],al
9f003a8c:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f003a90:	41                   	inc    ecx
9f003a91:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003a95:	04 04                	add    al,0x4
9f003a97:	00 20                	add    BYTE PTR [eax],ah
9f003a99:	00 00                	add    BYTE PTR [eax],al
9f003a9b:	00 e4                	add    ah,ah
9f003a9d:	03 00                	add    eax,DWORD PTR [eax]
9f003a9f:	00 5e cf             	add    BYTE PTR [esi-0x31],bl
9f003aa2:	ff                   	(bad)  
9f003aa3:	ff                   	(bad)  
9f003aa4:	bf 00 00 00 00       	mov    edi,0x0
9f003aa9:	41                   	inc    ecx
9f003aaa:	0e                   	push   cs
9f003aab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ab1:	44                   	inc    esp
9f003ab2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003ab5:	b7 c5                	mov    bh,0xc5
9f003ab7:	c3                   	ret    
9f003ab8:	0c 04                	or     al,0x4
9f003aba:	04 00                	add    al,0x0
9f003abc:	20 00                	and    BYTE PTR [eax],al
9f003abe:	00 00                	add    BYTE PTR [eax],al
9f003ac0:	08 04 00             	or     BYTE PTR [eax+eax*1],al
9f003ac3:	00 f9                	add    cl,bh
9f003ac5:	cf                   	iret   
9f003ac6:	ff                   	(bad)  
9f003ac7:	ff 1f                	call   FWORD PTR [edi]
9f003ac9:	00 00                	add    BYTE PTR [eax],al
9f003acb:	00 00                	add    BYTE PTR [eax],al
9f003acd:	41                   	inc    ecx
9f003ace:	0e                   	push   cs
9f003acf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ad5:	44                   	inc    esp
9f003ad6:	83 03 56             	add    DWORD PTR [ebx],0x56
9f003ad9:	c3                   	ret    
9f003ada:	41                   	inc    ecx
9f003adb:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003ade:	04 00                	add    al,0x0
9f003ae0:	20 00                	and    BYTE PTR [eax],al
9f003ae2:	00 00                	add    BYTE PTR [eax],al
9f003ae4:	2c 04                	sub    al,0x4
9f003ae6:	00 00                	add    BYTE PTR [eax],al
9f003ae8:	f4                   	hlt    
9f003ae9:	cf                   	iret   
9f003aea:	ff                   	(bad)  
9f003aeb:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f003aee:	00 00                	add    BYTE PTR [eax],al
9f003af0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003af3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003af9:	44                   	inc    esp
9f003afa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003afd:	51                   	push   ecx
9f003afe:	c5 c3 0c             	(bad)  
9f003b01:	04 04                	add    al,0x4
9f003b03:	00 20                	add    BYTE PTR [eax],ah
9f003b05:	00 00                	add    BYTE PTR [eax],al
9f003b07:	00 50 04             	add    BYTE PTR [eax+0x4],dl
9f003b0a:	00 00                	add    BYTE PTR [eax],al
9f003b0c:	29 d0                	sub    eax,edx
9f003b0e:	ff                   	(bad)  
9f003b0f:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f003b12:	00 00                	add    BYTE PTR [eax],al
9f003b14:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003b17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003b1d:	44                   	inc    esp
9f003b1e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003b21:	51                   	push   ecx
9f003b22:	c5 c3 0c             	(bad)  
9f003b25:	04 04                	add    al,0x4
9f003b27:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003b2a:	00 00                	add    BYTE PTR [eax],al
9f003b2c:	74 04                	je     9f003b32 <__x86.get_pc_thunk.cx+0x47e>
9f003b2e:	00 00                	add    BYTE PTR [eax],al
9f003b30:	5e                   	pop    esi
9f003b31:	d0 ff                	sar    bh,1
9f003b33:	ff 34 00             	push   DWORD PTR [eax+eax*1]
9f003b36:	00 00                	add    BYTE PTR [eax],al
9f003b38:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003b3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003b41:	70 c5                	jo     9f003b08 <__x86.get_pc_thunk.cx+0x454>
9f003b43:	0c 04                	or     al,0x4
9f003b45:	04 00                	add    al,0x0
9f003b47:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003b4a:	00 00                	add    BYTE PTR [eax],al
9f003b4c:	94                   	xchg   esp,eax
9f003b4d:	04 00                	add    al,0x0
9f003b4f:	00 72 d0             	add    BYTE PTR [edx-0x30],dh
9f003b52:	ff                   	(bad)  
9f003b53:	ff 37                	push   DWORD PTR [edi]
9f003b55:	00 00                	add    BYTE PTR [eax],al
9f003b57:	00 00                	add    BYTE PTR [eax],al
9f003b59:	41                   	inc    ecx
9f003b5a:	0e                   	push   cs
9f003b5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003b61:	73 c5                	jae    9f003b28 <__x86.get_pc_thunk.cx+0x474>
9f003b63:	0c 04                	or     al,0x4
9f003b65:	04 00                	add    al,0x0
9f003b67:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f003b6a:	00 00                	add    BYTE PTR [eax],al
9f003b6c:	b4 04                	mov    ah,0x4
9f003b6e:	00 00                	add    BYTE PTR [eax],al
9f003b70:	89 d0                	mov    eax,edx
9f003b72:	ff                   	(bad)  
9f003b73:	ff 72 00             	push   DWORD PTR [edx+0x0]
9f003b76:	00 00                	add    BYTE PTR [eax],al
9f003b78:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003b7b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003b81:	45                   	inc    ebp
9f003b82:	86 03                	xchg   BYTE PTR [ebx],al
9f003b84:	83 04 02 67          	add    DWORD PTR [edx+eax*1],0x67
9f003b88:	c3                   	ret    
9f003b89:	41                   	inc    ecx
9f003b8a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003b8e:	04 04                	add    al,0x4
9f003b90:	1c 00                	sbb    al,0x0
9f003b92:	00 00                	add    BYTE PTR [eax],al
9f003b94:	dc 04 00             	fadd   QWORD PTR [eax+eax*1]
9f003b97:	00 d3                	add    bl,dl
9f003b99:	d0 ff                	sar    bh,1
9f003b9b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f003ba1:	41                   	inc    ecx
9f003ba2:	0e                   	push   cs
9f003ba3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ba9:	59                   	pop    ecx
9f003baa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003bad:	04 00                	add    al,0x0
9f003baf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003bb2:	00 00                	add    BYTE PTR [eax],al
9f003bb4:	fc                   	cld    
9f003bb5:	04 00                	add    al,0x0
9f003bb7:	00 d0                	add    al,dl
9f003bb9:	d0 ff                	sar    bh,1
9f003bbb:	ff 29                	jmp    FWORD PTR [ecx]
9f003bbd:	00 00                	add    BYTE PTR [eax],al
9f003bbf:	00 00                	add    BYTE PTR [eax],al
9f003bc1:	41                   	inc    ecx
9f003bc2:	0e                   	push   cs
9f003bc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003bc9:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f003bcd:	04 00                	add    al,0x0
9f003bcf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003bd2:	00 00                	add    BYTE PTR [eax],al
9f003bd4:	1c 05                	sbb    al,0x5
9f003bd6:	00 00                	add    BYTE PTR [eax],al
9f003bd8:	d9 d0                	fnop   
9f003bda:	ff                   	(bad)  
9f003bdb:	ff 29                	jmp    FWORD PTR [ecx]
9f003bdd:	00 00                	add    BYTE PTR [eax],al
9f003bdf:	00 00                	add    BYTE PTR [eax],al
9f003be1:	41                   	inc    ecx
9f003be2:	0e                   	push   cs
9f003be3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003be9:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f003bed:	04 00                	add    al,0x0
9f003bef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003bf2:	00 00                	add    BYTE PTR [eax],al
9f003bf4:	3c 05                	cmp    al,0x5
9f003bf6:	00 00                	add    BYTE PTR [eax],al
9f003bf8:	e2 d0                	loop   9f003bca <__x86.get_pc_thunk.cx+0x516>
9f003bfa:	ff                   	(bad)  
9f003bfb:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f003bff:	00 00                	add    BYTE PTR [eax],al
9f003c01:	41                   	inc    ecx
9f003c02:	0e                   	push   cs
9f003c03:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c09:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f003c0c:	0c 04                	or     al,0x4
9f003c0e:	04 00                	add    al,0x0
9f003c10:	20 00                	and    BYTE PTR [eax],al
9f003c12:	00 00                	add    BYTE PTR [eax],al
9f003c14:	5c                   	pop    esp
9f003c15:	05 00 00 0e d1       	add    eax,0xd10e0000
9f003c1a:	ff                   	(bad)  
9f003c1b:	ff f4                	push   esp
9f003c1d:	01 00                	add    DWORD PTR [eax],eax
9f003c1f:	00 00                	add    BYTE PTR [eax],al
9f003c21:	41                   	inc    ecx
9f003c22:	0e                   	push   cs
9f003c23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c29:	44                   	inc    esp
9f003c2a:	83 03 03             	add    DWORD PTR [ebx],0x3
9f003c2d:	ec                   	in     al,dx
9f003c2e:	01 c5                	add    ebp,eax
9f003c30:	c3                   	ret    
9f003c31:	0c 04                	or     al,0x4
9f003c33:	04 1c                	add    al,0x1c
9f003c35:	00 00                	add    BYTE PTR [eax],al
9f003c37:	00 80 05 00 00 de    	add    BYTE PTR [eax-0x21fffffb],al
9f003c3d:	d2 ff                	sar    bh,cl
9f003c3f:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
9f003c42:	00 00                	add    BYTE PTR [eax],al
9f003c44:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003c47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c4d:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f003c50:	0c 04                	or     al,0x4
9f003c52:	04 00                	add    al,0x0
9f003c54:	1c 00                	sbb    al,0x0
9f003c56:	00 00                	add    BYTE PTR [eax],al
9f003c58:	a0 05 00 00 0d       	mov    al,ds:0xd000005
9f003c5d:	d3 ff                	sar    edi,cl
9f003c5f:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
9f003c62:	00 00                	add    BYTE PTR [eax],al
9f003c64:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003c67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c6d:	58                   	pop    eax
9f003c6e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003c71:	04 00                	add    al,0x0
9f003c73:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003c76:	00 00                	add    BYTE PTR [eax],al
9f003c78:	c0 05 00 00 09 d3 ff 	rol    BYTE PTR ds:0xd3090000,0xff
9f003c7f:	ff 20                	jmp    DWORD PTR [eax]
9f003c81:	00 00                	add    BYTE PTR [eax],al
9f003c83:	00 00                	add    BYTE PTR [eax],al
9f003c85:	41                   	inc    ecx
9f003c86:	0e                   	push   cs
9f003c87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003c8d:	5c                   	pop    esp
9f003c8e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003c91:	04 00                	add    al,0x0
9f003c93:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003c96:	00 00                	add    BYTE PTR [eax],al
9f003c98:	e0 05                	loopne 9f003c9f <__x86.get_pc_thunk.cx+0x5eb>
9f003c9a:	00 00                	add    BYTE PTR [eax],al
9f003c9c:	09 d3                	or     ebx,edx
9f003c9e:	ff                   	(bad)  
9f003c9f:	ff 20                	jmp    DWORD PTR [eax]
9f003ca1:	00 00                	add    BYTE PTR [eax],al
9f003ca3:	00 00                	add    BYTE PTR [eax],al
9f003ca5:	41                   	inc    ecx
9f003ca6:	0e                   	push   cs
9f003ca7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003cad:	5c                   	pop    esp
9f003cae:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003cb1:	04 00                	add    al,0x0
9f003cb3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003cb6:	00 00                	add    BYTE PTR [eax],al
9f003cb8:	00 06                	add    BYTE PTR [esi],al
9f003cba:	00 00                	add    BYTE PTR [eax],al
9f003cbc:	09 d3                	or     ebx,edx
9f003cbe:	ff                   	(bad)  
9f003cbf:	ff 44 01 00          	inc    DWORD PTR [ecx+eax*1+0x0]
9f003cc3:	00 00                	add    BYTE PTR [eax],al
9f003cc5:	41                   	inc    ecx
9f003cc6:	0e                   	push   cs
9f003cc7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ccd:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f003cd0:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003cd3:	04 1c                	add    al,0x1c
9f003cd5:	00 00                	add    BYTE PTR [eax],al
9f003cd7:	00 20                	add    BYTE PTR [eax],ah
9f003cd9:	06                   	push   es
9f003cda:	00 00                	add    BYTE PTR [eax],al
9f003cdc:	2d d4 ff ff 20       	sub    eax,0x20ffffd4
9f003ce1:	00 00                	add    BYTE PTR [eax],al
9f003ce3:	00 00                	add    BYTE PTR [eax],al
9f003ce5:	41                   	inc    ecx
9f003ce6:	0e                   	push   cs
9f003ce7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ced:	5c                   	pop    esp
9f003cee:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003cf1:	04 00                	add    al,0x0
9f003cf3:	00 20                	add    BYTE PTR [eax],ah
9f003cf5:	00 00                	add    BYTE PTR [eax],al
9f003cf7:	00 40 06             	add    BYTE PTR [eax+0x6],al
9f003cfa:	00 00                	add    BYTE PTR [eax],al
9f003cfc:	2d d4 ff ff b6       	sub    eax,0xb6ffffd4
9f003d01:	01 00                	add    DWORD PTR [eax],eax
9f003d03:	00 00                	add    BYTE PTR [eax],al
9f003d05:	41                   	inc    ecx
9f003d06:	0e                   	push   cs
9f003d07:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d0d:	47                   	inc    edi
9f003d0e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f003d11:	ab                   	stos   DWORD PTR es:[edi],eax
9f003d12:	01 c5                	add    ebp,eax
9f003d14:	c3                   	ret    
9f003d15:	0c 04                	or     al,0x4
9f003d17:	04 1c                	add    al,0x1c
9f003d19:	00 00                	add    BYTE PTR [eax],al
9f003d1b:	00 64 06 00          	add    BYTE PTR [esi+eax*1+0x0],ah
9f003d1f:	00 bf d5 ff ff 2d    	add    BYTE PTR [edi+0x2dffffd5],bh
9f003d25:	00 00                	add    BYTE PTR [eax],al
9f003d27:	00 00                	add    BYTE PTR [eax],al
9f003d29:	41                   	inc    ecx
9f003d2a:	0e                   	push   cs
9f003d2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d31:	69 c5 0c 04 04 00    	imul   eax,ebp,0x4040c
9f003d37:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003d3a:	00 00                	add    BYTE PTR [eax],al
9f003d3c:	84 06                	test   BYTE PTR [esi],al
9f003d3e:	00 00                	add    BYTE PTR [eax],al
9f003d40:	cc                   	int3   
9f003d41:	d5 ff                	aad    0xff
9f003d43:	ff 19                	call   FWORD PTR [ecx]
9f003d45:	00 00                	add    BYTE PTR [eax],al
9f003d47:	00 00                	add    BYTE PTR [eax],al
9f003d49:	41                   	inc    ecx
9f003d4a:	0e                   	push   cs
9f003d4b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d51:	55                   	push   ebp
9f003d52:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003d55:	04 00                	add    al,0x0
9f003d57:	00 20                	add    BYTE PTR [eax],ah
9f003d59:	00 00                	add    BYTE PTR [eax],al
9f003d5b:	00 a4 06 00 00 c8 d5 	add    BYTE PTR [esi+eax*1-0x2a380000],ah
9f003d62:	ff                   	(bad)  
9f003d63:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f003d67:	00 00                	add    BYTE PTR [eax],al
9f003d69:	41                   	inc    ecx
9f003d6a:	0e                   	push   cs
9f003d6b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d71:	44                   	inc    esp
9f003d72:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003d75:	64                   	fs
9f003d76:	c5 c3 0c             	(bad)  
9f003d79:	04 04                	add    al,0x4
9f003d7b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003d7e:	00 00                	add    BYTE PTR [eax],al
9f003d80:	c8 06 00 00          	enter  0x6,0x0
9f003d84:	10 d6                	adc    dh,dl
9f003d86:	ff                   	(bad)  
9f003d87:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f003d8d:	41                   	inc    ecx
9f003d8e:	0e                   	push   cs
9f003d8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003d95:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f003d9b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003d9e:	00 00                	add    BYTE PTR [eax],al
9f003da0:	e8 06 00 00 77       	call   16003dab <sysEnter_Vector+0x15ed3dab>
9f003da5:	d6                   	(bad)  
9f003da6:	ff                   	(bad)  
9f003da7:	ff                   	(bad)  
9f003da8:	39 00                	cmp    DWORD PTR [eax],eax
9f003daa:	00 00                	add    BYTE PTR [eax],al
9f003dac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003daf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003db5:	75 c5                	jne    9f003d7c <__x86.get_pc_thunk.cx+0x6c8>
9f003db7:	0c 04                	or     al,0x4
9f003db9:	04 00                	add    al,0x0
9f003dbb:	00 20                	add    BYTE PTR [eax],ah
9f003dbd:	00 00                	add    BYTE PTR [eax],al
9f003dbf:	00 08                	add    BYTE PTR [eax],cl
9f003dc1:	07                   	pop    es
9f003dc2:	00 00                	add    BYTE PTR [eax],al
9f003dc4:	90                   	nop
9f003dc5:	d6                   	(bad)  
9f003dc6:	ff                   	(bad)  
9f003dc7:	ff d4                	call   esp
9f003dc9:	01 00                	add    DWORD PTR [eax],eax
9f003dcb:	00 00                	add    BYTE PTR [eax],al
9f003dcd:	41                   	inc    ecx
9f003dce:	0e                   	push   cs
9f003dcf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003dd5:	44                   	inc    esp
9f003dd6:	83 03 03             	add    DWORD PTR [ebx],0x3
9f003dd9:	cc                   	int3   
9f003dda:	01 c5                	add    ebp,eax
9f003ddc:	c3                   	ret    
9f003ddd:	0c 04                	or     al,0x4
9f003ddf:	04 1c                	add    al,0x1c
9f003de1:	00 00                	add    BYTE PTR [eax],al
9f003de3:	00 2c 07             	add    BYTE PTR [edi+eax*1],ch
9f003de6:	00 00                	add    BYTE PTR [eax],al
9f003de8:	40                   	inc    eax
9f003de9:	d8 ff                	fdivr  st,st(7)
9f003deb:	ff 20                	jmp    DWORD PTR [eax]
9f003ded:	00 00                	add    BYTE PTR [eax],al
9f003def:	00 00                	add    BYTE PTR [eax],al
9f003df1:	41                   	inc    ecx
9f003df2:	0e                   	push   cs
9f003df3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003df9:	5c                   	pop    esp
9f003dfa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003dfd:	04 00                	add    al,0x0
9f003dff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f003e02:	00 00                	add    BYTE PTR [eax],al
9f003e04:	4c                   	dec    esp
9f003e05:	07                   	pop    es
9f003e06:	00 00                	add    BYTE PTR [eax],al
9f003e08:	40                   	inc    eax
9f003e09:	d8 ff                	fdivr  st,st(7)
9f003e0b:	ff 1b                	call   FWORD PTR [ebx]
9f003e0d:	00 00                	add    BYTE PTR [eax],al
9f003e0f:	00 00                	add    BYTE PTR [eax],al
9f003e11:	41                   	inc    ecx
9f003e12:	0e                   	push   cs
9f003e13:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e19:	57                   	push   edi
9f003e1a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003e1d:	04 00                	add    al,0x0
9f003e1f:	00 20                	add    BYTE PTR [eax],ah
9f003e21:	00 00                	add    BYTE PTR [eax],al
9f003e23:	00 6c 07 00          	add    BYTE PTR [edi+eax*1+0x0],ch
9f003e27:	00 3b                	add    BYTE PTR [ebx],bh
9f003e29:	d8 ff                	fdivr  st,st(7)
9f003e2b:	ff 32                	push   DWORD PTR [edx]
9f003e2d:	00 00                	add    BYTE PTR [eax],al
9f003e2f:	00 00                	add    BYTE PTR [eax],al
9f003e31:	41                   	inc    ecx
9f003e32:	0e                   	push   cs
9f003e33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e39:	44                   	inc    esp
9f003e3a:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f003e3d:	c5 c3 0c             	(bad)  
9f003e40:	04 04                	add    al,0x4
9f003e42:	00 00                	add    BYTE PTR [eax],al
9f003e44:	1c 00                	sbb    al,0x0
9f003e46:	00 00                	add    BYTE PTR [eax],al
9f003e48:	90                   	nop
9f003e49:	07                   	pop    es
9f003e4a:	00 00                	add    BYTE PTR [eax],al
9f003e4c:	4c                   	dec    esp
9f003e4d:	d8 ff                	fdivr  st,st(7)
9f003e4f:	ff 9b 01 00 00 00    	call   FWORD PTR [ebx+0x1]
9f003e55:	41                   	inc    ecx
9f003e56:	0e                   	push   cs
9f003e57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e5d:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f003e63:	04 1c                	add    al,0x1c
9f003e65:	00 00                	add    BYTE PTR [eax],al
9f003e67:	00 b0 07 00 00 c8    	add    BYTE PTR [eax-0x37fffff9],dh
9f003e6d:	d9 ff                	fcos   
9f003e6f:	ff c7                	inc    edi
9f003e71:	00 00                	add    BYTE PTR [eax],al
9f003e73:	00 00                	add    BYTE PTR [eax],al
9f003e75:	41                   	inc    ecx
9f003e76:	0e                   	push   cs
9f003e77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e7d:	02 c3                	add    al,bl
9f003e7f:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003e82:	04 00                	add    al,0x0
9f003e84:	1c 00                	sbb    al,0x0
9f003e86:	00 00                	add    BYTE PTR [eax],al
9f003e88:	d0 07                	rol    BYTE PTR [edi],1
9f003e8a:	00 00                	add    BYTE PTR [eax],al
9f003e8c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f003e8d:	da ff                	(bad)  
9f003e8f:	ff 20                	jmp    DWORD PTR [eax]
9f003e91:	00 00                	add    BYTE PTR [eax],al
9f003e93:	00 00                	add    BYTE PTR [eax],al
9f003e95:	41                   	inc    ecx
9f003e96:	0e                   	push   cs
9f003e97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003e9d:	5c                   	pop    esp
9f003e9e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003ea1:	04 00                	add    al,0x0
9f003ea3:	00 20                	add    BYTE PTR [eax],ah
9f003ea5:	00 00                	add    BYTE PTR [eax],al
9f003ea7:	00 f0                	add    al,dh
9f003ea9:	07                   	pop    es
9f003eaa:	00 00                	add    BYTE PTR [eax],al
9f003eac:	70 da                	jo     9f003e88 <__x86.get_pc_thunk.cx+0x7d4>
9f003eae:	ff                   	(bad)  
9f003eaf:	ff 29                	jmp    FWORD PTR [ecx]
9f003eb1:	00 00                	add    BYTE PTR [eax],al
9f003eb3:	00 00                	add    BYTE PTR [eax],al
9f003eb5:	41                   	inc    ecx
9f003eb6:	0e                   	push   cs
9f003eb7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ebd:	44                   	inc    esp
9f003ebe:	83 03 61             	add    DWORD PTR [ebx],0x61
9f003ec1:	c5 c3 0c             	(bad)  
9f003ec4:	04 04                	add    al,0x4
9f003ec6:	00 00                	add    BYTE PTR [eax],al
9f003ec8:	20 00                	and    BYTE PTR [eax],al
9f003eca:	00 00                	add    BYTE PTR [eax],al
9f003ecc:	14 08                	adc    al,0x8
9f003ece:	00 00                	add    BYTE PTR [eax],al
9f003ed0:	78 da                	js     9f003eac <__x86.get_pc_thunk.cx+0x7f8>
9f003ed2:	ff                   	(bad)  
9f003ed3:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f003ed6:	00 00                	add    BYTE PTR [eax],al
9f003ed8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003edb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003ee1:	44                   	inc    esp
9f003ee2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003ee5:	56                   	push   esi
9f003ee6:	c3                   	ret    
9f003ee7:	41                   	inc    ecx
9f003ee8:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003eeb:	04 28                	add    al,0x28
9f003eed:	00 00                	add    BYTE PTR [eax],al
9f003eef:	00 38                	add    BYTE PTR [eax],bh
9f003ef1:	08 00                	or     BYTE PTR [eax],al
9f003ef3:	00 b3 da ff ff 3e    	add    BYTE PTR [ebx+0x3effffda],dh
9f003ef9:	02 00                	add    al,BYTE PTR [eax]
9f003efb:	00 00                	add    BYTE PTR [eax],al
9f003efd:	41                   	inc    ecx
9f003efe:	0e                   	push   cs
9f003eff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f05:	45                   	inc    ebp
9f003f06:	86 03                	xchg   BYTE PTR [ebx],al
9f003f08:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f003f0c:	02 c3                	add    al,bl
9f003f0e:	41                   	inc    ecx
9f003f0f:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f003f13:	04 04                	add    al,0x4
9f003f15:	00 00                	add    BYTE PTR [eax],al
9f003f17:	00 20                	add    BYTE PTR [eax],ah
9f003f19:	00 00                	add    BYTE PTR [eax],al
9f003f1b:	00 64 08 00          	add    BYTE PTR [eax+ecx*1+0x0],ah
9f003f1f:	00 c5                	add    ch,al
9f003f21:	dc ff                	fdiv   st(7),st
9f003f23:	ff 48 04             	dec    DWORD PTR [eax+0x4]
9f003f26:	00 00                	add    BYTE PTR [eax],al
9f003f28:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003f2b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f31:	44                   	inc    esp
9f003f32:	83 03 03             	add    DWORD PTR [ebx],0x3
9f003f35:	40                   	inc    eax
9f003f36:	04 c5                	add    al,0xc5
9f003f38:	c3                   	ret    
9f003f39:	0c 04                	or     al,0x4
9f003f3b:	04 1c                	add    al,0x1c
9f003f3d:	00 00                	add    BYTE PTR [eax],al
9f003f3f:	00 88 08 00 00 e9    	add    BYTE PTR [eax-0x16fffff8],cl
9f003f45:	e0 ff                	loopne 9f003f46 <__x86.get_pc_thunk.cx+0x892>
9f003f47:	ff 33                	push   DWORD PTR [ebx]
9f003f49:	00 00                	add    BYTE PTR [eax],al
9f003f4b:	00 00                	add    BYTE PTR [eax],al
9f003f4d:	41                   	inc    ecx
9f003f4e:	0e                   	push   cs
9f003f4f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f55:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f003f56:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f003f59:	04 00                	add    al,0x0
9f003f5b:	00 20                	add    BYTE PTR [eax],ah
9f003f5d:	00 00                	add    BYTE PTR [eax],al
9f003f5f:	00 a8 08 00 00 fc    	add    BYTE PTR [eax-0x3fffff8],ch
9f003f65:	e0 ff                	loopne 9f003f66 <__x86.get_pc_thunk.cx+0x8b2>
9f003f67:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f003f6e:	0e                   	push   cs
9f003f6f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f75:	44                   	inc    esp
9f003f76:	83 03 02             	add    DWORD PTR [ebx],0x2
9f003f79:	7c c5                	jl     9f003f40 <__x86.get_pc_thunk.cx+0x88c>
9f003f7b:	c3                   	ret    
9f003f7c:	0c 04                	or     al,0x4
9f003f7e:	04 00                	add    al,0x0
9f003f80:	20 00                	and    BYTE PTR [eax],al
9f003f82:	00 00                	add    BYTE PTR [eax],al
9f003f84:	cc                   	int3   
9f003f85:	08 00                	or     BYTE PTR [eax],al
9f003f87:	00 5c e1 ff          	add    BYTE PTR [ecx+eiz*8-0x1],bl
9f003f8b:	ff                   	(bad)  
9f003f8c:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f003f8f:	00 00                	add    BYTE PTR [eax],al
9f003f91:	41                   	inc    ecx
9f003f92:	0e                   	push   cs
9f003f93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003f99:	44                   	inc    esp
9f003f9a:	83 03 76             	add    DWORD PTR [ebx],0x76
9f003f9d:	c5 c3 0c             	(bad)  
9f003fa0:	04 04                	add    al,0x4
9f003fa2:	00 00                	add    BYTE PTR [eax],al
9f003fa4:	20 00                	and    BYTE PTR [eax],al
9f003fa6:	00 00                	add    BYTE PTR [eax],al
9f003fa8:	f0 08 00             	lock or BYTE PTR [eax],al
9f003fab:	00 76 e1             	add    BYTE PTR [esi-0x1f],dh
9f003fae:	ff                   	(bad)  
9f003faf:	ff                   	(bad)  
9f003fb0:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f003fb3:	00 00                	add    BYTE PTR [eax],al
9f003fb5:	41                   	inc    ecx
9f003fb6:	0e                   	push   cs
9f003fb7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fbd:	44                   	inc    esp
9f003fbe:	83 03 76             	add    DWORD PTR [ebx],0x76
9f003fc1:	c5 c3 0c             	(bad)  
9f003fc4:	04 04                	add    al,0x4
9f003fc6:	00 00                	add    BYTE PTR [eax],al
9f003fc8:	1c 00                	sbb    al,0x0
9f003fca:	00 00                	add    BYTE PTR [eax],al
9f003fcc:	14 09                	adc    al,0x9
9f003fce:	00 00                	add    BYTE PTR [eax],al
9f003fd0:	90                   	nop
9f003fd1:	e1 ff                	loope  9f003fd2 <__x86.get_pc_thunk.cx+0x91e>
9f003fd3:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f003fd6:	00 00                	add    BYTE PTR [eax],al
9f003fd8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003fdb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f003fe1:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
9f003fe4:	0c 04                	or     al,0x4
9f003fe6:	04 00                	add    al,0x0
9f003fe8:	24 00                	and    al,0x0
9f003fea:	00 00                	add    BYTE PTR [eax],al
9f003fec:	34 09                	xor    al,0x9
9f003fee:	00 00                	add    BYTE PTR [eax],al
9f003ff0:	e0 e1                	loopne 9f003fd3 <__x86.get_pc_thunk.cx+0x91f>
9f003ff2:	ff                   	(bad)  
9f003ff3:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f003ff6:	00 00                	add    BYTE PTR [eax],al
9f003ff8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f003ffb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004001:	45                   	inc    ebp
9f004002:	86 03                	xchg   BYTE PTR [ebx],al
9f004004:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f004008:	c3                   	ret    
9f004009:	41                   	inc    ecx
9f00400a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00400e:	04 04                	add    al,0x4
9f004010:	1c 00                	sbb    al,0x0
9f004012:	00 00                	add    BYTE PTR [eax],al
9f004014:	5c                   	pop    esp
9f004015:	09 00                	or     DWORD PTR [eax],eax
9f004017:	00 18                	add    BYTE PTR [eax],bl
9f004019:	e2 ff                	loop   9f00401a <__x86.get_pc_thunk.cx+0x966>
9f00401b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f00401e:	00 00                	add    BYTE PTR [eax],al
9f004020:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004023:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004029:	7c c5                	jl     9f003ff0 <__x86.get_pc_thunk.cx+0x93c>
9f00402b:	0c 04                	or     al,0x4
9f00402d:	04 00                	add    al,0x0
9f00402f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004032:	00 00                	add    BYTE PTR [eax],al
9f004034:	7c 09                	jl     9f00403f <__x86.get_pc_thunk.cx+0x98b>
9f004036:	00 00                	add    BYTE PTR [eax],al
9f004038:	38 e2                	cmp    dl,ah
9f00403a:	ff                   	(bad)  
9f00403b:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f00403e:	00 00                	add    BYTE PTR [eax],al
9f004040:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004043:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004049:	7c c5                	jl     9f004010 <__x86.get_pc_thunk.cx+0x95c>
9f00404b:	0c 04                	or     al,0x4
9f00404d:	04 00                	add    al,0x0
9f00404f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004052:	00 00                	add    BYTE PTR [eax],al
9f004054:	9c                   	pushf  
9f004055:	09 00                	or     DWORD PTR [eax],eax
9f004057:	00 58 e2             	add    BYTE PTR [eax-0x1e],bl
9f00405a:	ff                   	(bad)  
9f00405b:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f00405e:	00 00                	add    BYTE PTR [eax],al
9f004060:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004063:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004069:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f00406c:	0c 04                	or     al,0x4
9f00406e:	04 00                	add    al,0x0
9f004070:	1c 00                	sbb    al,0x0
9f004072:	00 00                	add    BYTE PTR [eax],al
9f004074:	bc 09 00 00 80       	mov    esp,0x80000009
9f004079:	e2 ff                	loop   9f00407a <__x86.get_pc_thunk.cx+0x9c6>
9f00407b:	ff 30                	push   DWORD PTR [eax]
9f00407d:	00 00                	add    BYTE PTR [eax],al
9f00407f:	00 00                	add    BYTE PTR [eax],al
9f004081:	41                   	inc    ecx
9f004082:	0e                   	push   cs
9f004083:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004089:	6c                   	ins    BYTE PTR es:[edi],dx
9f00408a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00408d:	04 00                	add    al,0x0
9f00408f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004092:	00 00                	add    BYTE PTR [eax],al
9f004094:	dc 09                	fmul   QWORD PTR [ecx]
9f004096:	00 00                	add    BYTE PTR [eax],al
9f004098:	90                   	nop
9f004099:	e2 ff                	loop   9f00409a <__x86.get_pc_thunk.cx+0x9e6>
9f00409b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f00409e:	00 00                	add    BYTE PTR [eax],al
9f0040a0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0040a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040a9:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f0040ac:	0c 04                	or     al,0x4
9f0040ae:	04 00                	add    al,0x0
9f0040b0:	1c 00                	sbb    al,0x0
9f0040b2:	00 00                	add    BYTE PTR [eax],al
9f0040b4:	fc                   	cld    
9f0040b5:	09 00                	or     DWORD PTR [eax],eax
9f0040b7:	00 cc                	add    ah,cl
9f0040b9:	e2 ff                	loop   9f0040ba <__x86.get_pc_thunk.cx+0xa06>
9f0040bb:	ff 31                	push   DWORD PTR [ecx]
9f0040bd:	00 00                	add    BYTE PTR [eax],al
9f0040bf:	00 00                	add    BYTE PTR [eax],al
9f0040c1:	41                   	inc    ecx
9f0040c2:	0e                   	push   cs
9f0040c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040c9:	6d                   	ins    DWORD PTR es:[edi],dx
9f0040ca:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0040cd:	04 00                	add    al,0x0
9f0040cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0040d2:	00 00                	add    BYTE PTR [eax],al
9f0040d4:	1c 0a                	sbb    al,0xa
9f0040d6:	00 00                	add    BYTE PTR [eax],al
9f0040d8:	dd e2                	fucom  st(2)
9f0040da:	ff                   	(bad)  
9f0040db:	ff 31                	push   DWORD PTR [ecx]
9f0040dd:	00 00                	add    BYTE PTR [eax],al
9f0040df:	00 00                	add    BYTE PTR [eax],al
9f0040e1:	41                   	inc    ecx
9f0040e2:	0e                   	push   cs
9f0040e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0040e9:	6d                   	ins    DWORD PTR es:[edi],dx
9f0040ea:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0040ed:	04 00                	add    al,0x0
9f0040ef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0040f2:	00 00                	add    BYTE PTR [eax],al
9f0040f4:	3c 0a                	cmp    al,0xa
9f0040f6:	00 00                	add    BYTE PTR [eax],al
9f0040f8:	f0 e2 ff             	lock loop 9f0040fa <__x86.get_pc_thunk.cx+0xa46>
9f0040fb:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f0040fe:	00 00                	add    BYTE PTR [eax],al
9f004100:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004103:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004109:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f00410c:	0c 04                	or     al,0x4
9f00410e:	04 00                	add    al,0x0
9f004110:	1c 00                	sbb    al,0x0
9f004112:	00 00                	add    BYTE PTR [eax],al
9f004114:	5c                   	pop    esp
9f004115:	0a 00                	or     al,BYTE PTR [eax]
9f004117:	00 37                	add    BYTE PTR [edi],dh
9f004119:	e3 ff                	jecxz  9f00411a <__x86.get_pc_thunk.cx+0xa66>
9f00411b:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f00411e:	00 00                	add    BYTE PTR [eax],al
9f004120:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004123:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004129:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f00412c:	0c 04                	or     al,0x4
9f00412e:	04 00                	add    al,0x0
9f004130:	1c 00                	sbb    al,0x0
9f004132:	00 00                	add    BYTE PTR [eax],al
9f004134:	7c 0a                	jl     9f004140 <__x86.get_pc_thunk.cx+0xa8c>
9f004136:	00 00                	add    BYTE PTR [eax],al
9f004138:	80 e3 ff             	and    bl,0xff
9f00413b:	ff 60 00             	jmp    DWORD PTR [eax+0x0]
9f00413e:	00 00                	add    BYTE PTR [eax],al
9f004140:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004143:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004149:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
9f00414d:	04 04                	add    al,0x4
9f00414f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004152:	00 00                	add    BYTE PTR [eax],al
9f004154:	9c                   	pushf  
9f004155:	0a 00                	or     al,BYTE PTR [eax]
9f004157:	00 c0                	add    al,al
9f004159:	e3 ff                	jecxz  9f00415a <__x86.get_pc_thunk.cx+0xaa6>
9f00415b:	ff 20                	jmp    DWORD PTR [eax]
9f00415d:	00 00                	add    BYTE PTR [eax],al
9f00415f:	00 00                	add    BYTE PTR [eax],al
9f004161:	41                   	inc    ecx
9f004162:	0e                   	push   cs
9f004163:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004169:	5c                   	pop    esp
9f00416a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00416d:	04 00                	add    al,0x0
9f00416f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004172:	00 00                	add    BYTE PTR [eax],al
9f004174:	bc 0a 00 00 c0       	mov    esp,0xc000000a
9f004179:	e3 ff                	jecxz  9f00417a <__x86.get_pc_thunk.cx+0xac6>
9f00417b:	ff                   	(bad)  
9f00417c:	7d 01                	jge    9f00417f <__x86.get_pc_thunk.cx+0xacb>
9f00417e:	00 00                	add    BYTE PTR [eax],al
9f004180:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004183:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004189:	46                   	inc    esi
9f00418a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00418c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00418f:	05 03 70 01 c3       	add    eax,0xc3017003
9f004194:	41                   	inc    ecx
9f004195:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004199:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00419c:	04 00                	add    al,0x0
9f00419e:	00 00                	add    BYTE PTR [eax],al
9f0041a0:	1c 00                	sbb    al,0x0
9f0041a2:	00 00                	add    BYTE PTR [eax],al
9f0041a4:	ec                   	in     al,dx
9f0041a5:	0a 00                	or     al,BYTE PTR [eax]
9f0041a7:	00 10                	add    BYTE PTR [eax],dl
9f0041a9:	e5 ff                	in     eax,0xff
9f0041ab:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0041b1:	41                   	inc    ecx
9f0041b2:	0e                   	push   cs
9f0041b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041b9:	59                   	pop    ecx
9f0041ba:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0041bd:	04 00                	add    al,0x0
9f0041bf:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f0041c2:	00 00                	add    BYTE PTR [eax],al
9f0041c4:	0c 0b                	or     al,0xb
9f0041c6:	00 00                	add    BYTE PTR [eax],al
9f0041c8:	10 e5                	adc    ch,ah
9f0041ca:	ff                   	(bad)  
9f0041cb:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
9f0041d2:	0e                   	push   cs
9f0041d3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0041d9:	46                   	inc    esi
9f0041da:	87 03                	xchg   DWORD PTR [ebx],eax
9f0041dc:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f0041df:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f0041e4:	41                   	inc    ecx
9f0041e5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0041e9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0041ec:	04 00                	add    al,0x0
9f0041ee:	00 00                	add    BYTE PTR [eax],al
9f0041f0:	20 00                	and    BYTE PTR [eax],al
9f0041f2:	00 00                	add    BYTE PTR [eax],al
9f0041f4:	3c 0b                	cmp    al,0xb
9f0041f6:	00 00                	add    BYTE PTR [eax],al
9f0041f8:	7c e6                	jl     9f0041e0 <__x86.get_pc_thunk.cx+0xb2c>
9f0041fa:	ff                   	(bad)  
9f0041fb:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f004201:	41                   	inc    ecx
9f004202:	0e                   	push   cs
9f004203:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004209:	44                   	inc    esp
9f00420a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00420d:	8e c5                	mov    es,ebp
9f00420f:	c3                   	ret    
9f004210:	0c 04                	or     al,0x4
9f004212:	04 00                	add    al,0x0
9f004214:	1c 00                	sbb    al,0x0
9f004216:	00 00                	add    BYTE PTR [eax],al
9f004218:	60                   	pusha  
9f004219:	0b 00                	or     eax,DWORD PTR [eax]
9f00421b:	00 ee                	add    dh,ch
9f00421d:	e6 ff                	out    0xff,al
9f00421f:	ff 20                	jmp    DWORD PTR [eax]
9f004221:	00 00                	add    BYTE PTR [eax],al
9f004223:	00 00                	add    BYTE PTR [eax],al
9f004225:	41                   	inc    ecx
9f004226:	0e                   	push   cs
9f004227:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00422d:	5c                   	pop    esp
9f00422e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004231:	04 00                	add    al,0x0
9f004233:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004236:	00 00                	add    BYTE PTR [eax],al
9f004238:	80 0b 00             	or     BYTE PTR [ebx],0x0
9f00423b:	00 f0                	add    al,dh
9f00423d:	e6 ff                	out    0xff,al
9f00423f:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f004242:	00 00                	add    BYTE PTR [eax],al
9f004244:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004247:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00424d:	42                   	inc    edx
9f00424e:	86 03                	xchg   BYTE PTR [ebx],al
9f004250:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f004254:	c3                   	ret    
9f004255:	41                   	inc    ecx
9f004256:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00425a:	04 04                	add    al,0x4
9f00425c:	1c 00                	sbb    al,0x0
9f00425e:	00 00                	add    BYTE PTR [eax],al
9f004260:	a8 0b                	test   al,0xb
9f004262:	00 00                	add    BYTE PTR [eax],al
9f004264:	36                   	ss
9f004265:	e7 ff                	out    0xff,eax
9f004267:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f00426d:	41                   	inc    ecx
9f00426e:	0e                   	push   cs
9f00426f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004275:	59                   	pop    ecx
9f004276:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f004279:	04 00                	add    al,0x0
9f00427b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00427e:	00 00                	add    BYTE PTR [eax],al
9f004280:	c8 0b 00 00          	enter  0xb,0x0
9f004284:	34 e7                	xor    al,0xe7
9f004286:	ff                   	(bad)  
9f004287:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f00428b:	00 00                	add    BYTE PTR [eax],al
9f00428d:	41                   	inc    ecx
9f00428e:	0e                   	push   cs
9f00428f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004295:	45                   	inc    ebp
9f004296:	86 03                	xchg   BYTE PTR [ebx],al
9f004298:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f00429c:	41                   	inc    ecx
9f00429d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0042a1:	04 04                	add    al,0x4
9f0042a3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0042a6:	00 00                	add    BYTE PTR [eax],al
9f0042a8:	f0 0b 00             	lock or eax,DWORD PTR [eax]
9f0042ab:	00 50 e7             	add    BYTE PTR [eax-0x19],dl
9f0042ae:	ff                   	(bad)  
9f0042af:	ff 19                	call   FWORD PTR [ecx]
9f0042b1:	03 00                	add    eax,DWORD PTR [eax]
9f0042b3:	00 00                	add    BYTE PTR [eax],al
9f0042b5:	41                   	inc    ecx
9f0042b6:	0e                   	push   cs
9f0042b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042bd:	44                   	inc    esp
9f0042be:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0042c1:	10 03                	adc    BYTE PTR [ebx],al
9f0042c3:	c3                   	ret    
9f0042c4:	41                   	inc    ecx
9f0042c5:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0042c8:	04 00                	add    al,0x0
9f0042ca:	00 00                	add    BYTE PTR [eax],al
9f0042cc:	1c 00                	sbb    al,0x0
9f0042ce:	00 00                	add    BYTE PTR [eax],al
9f0042d0:	18 0c 00             	sbb    BYTE PTR [eax+eax*1],cl
9f0042d3:	00 41 ea             	add    BYTE PTR [ecx-0x16],al
9f0042d6:	ff                   	(bad)  
9f0042d7:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0042dd:	41                   	inc    ecx
9f0042de:	0e                   	push   cs
9f0042df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0042e5:	59                   	pop    ecx
9f0042e6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0042e9:	04 00                	add    al,0x0
9f0042eb:	00 20                	add    BYTE PTR [eax],ah
9f0042ed:	00 00                	add    BYTE PTR [eax],al
9f0042ef:	00 38                	add    BYTE PTR [eax],bh
9f0042f1:	0c 00                	or     al,0x0
9f0042f3:	00 3e                	add    BYTE PTR [esi],bh
9f0042f5:	ea ff ff 3f 00 00 00 	jmp    0x0:0x3fffff
9f0042fc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0042ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004305:	44                   	inc    esp
9f004306:	83 03 77             	add    DWORD PTR [ebx],0x77
9f004309:	c5 c3 0c             	(bad)  
9f00430c:	04 04                	add    al,0x4
9f00430e:	00 00                	add    BYTE PTR [eax],al
9f004310:	1c 00                	sbb    al,0x0
9f004312:	00 00                	add    BYTE PTR [eax],al
9f004314:	5c                   	pop    esp
9f004315:	0c 00                	or     al,0x0
9f004317:	00 59 ea             	add    BYTE PTR [ecx-0x16],bl
9f00431a:	ff                   	(bad)  
9f00431b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f004321:	41                   	inc    ecx
9f004322:	0e                   	push   cs
9f004323:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004329:	71 c5                	jno    9f0042f0 <__x86.get_pc_thunk.cx+0xc3c>
9f00432b:	0c 04                	or     al,0x4
9f00432d:	04 00                	add    al,0x0
9f00432f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004332:	00 00                	add    BYTE PTR [eax],al
9f004334:	7c 0c                	jl     9f004342 <__x86.get_pc_thunk.cx+0xc8e>
9f004336:	00 00                	add    BYTE PTR [eax],al
9f004338:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004339:	ea ff ff 1d 00 00 00 	jmp    0x0:0x1dffff
9f004340:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004343:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004349:	59                   	pop    ecx
9f00434a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00434d:	04 00                	add    al,0x0
9f00434f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f004352:	00 00                	add    BYTE PTR [eax],al
9f004354:	9c                   	pushf  
9f004355:	0c 00                	or     al,0x0
9f004357:	00 6b ea             	add    BYTE PTR [ebx-0x16],ch
9f00435a:	ff                   	(bad)  
9f00435b:	ff 57 08             	call   DWORD PTR [edi+0x8]
9f00435e:	00 00                	add    BYTE PTR [eax],al
9f004360:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f004363:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004369:	46                   	inc    esi
9f00436a:	87 03                	xchg   DWORD PTR [ebx],eax
9f00436c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00436f:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f004374:	41                   	inc    ecx
9f004375:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f004379:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00437c:	04 00                	add    al,0x0
9f00437e:	00 00                	add    BYTE PTR [eax],al
9f004380:	24 00                	and    al,0x0
9f004382:	00 00                	add    BYTE PTR [eax],al
9f004384:	cc                   	int3   
9f004385:	0c 00                	or     al,0x0
9f004387:	00 92 f2 ff ff 6d    	add    BYTE PTR [edx+0x6dfffff2],dl
9f00438d:	00 00                	add    BYTE PTR [eax],al
9f00438f:	00 00                	add    BYTE PTR [eax],al
9f004391:	41                   	inc    ecx
9f004392:	0e                   	push   cs
9f004393:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f004399:	45                   	inc    ebp
9f00439a:	86 03                	xchg   BYTE PTR [ebx],al
9f00439c:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f0043a0:	c3                   	ret    
9f0043a1:	41                   	inc    ecx
9f0043a2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0043a6:	04 04                	add    al,0x4
9f0043a8:	10 00                	adc    BYTE PTR [eax],al
9f0043aa:	00 00                	add    BYTE PTR [eax],al
9f0043ac:	f4                   	hlt    
9f0043ad:	0c 00                	or     al,0x0
9f0043af:	00 04 f3             	add    BYTE PTR [ebx+esi*8],al
9f0043b2:	ff                   	(bad)  
9f0043b3:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f0043b6:	00 00                	add    BYTE PTR [eax],al
9f0043b8:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f0043bc <.dynsym>:
	...
9f0043cc:	16                   	push   ss
9f0043cd:	01 00                	add    DWORD PTR [eax],eax
9f0043cf:	00 30                	add    BYTE PTR [eax],dh
9f0043d1:	22 00                	and    al,BYTE PTR [eax]
9f0043d3:	9f                   	lahf   
9f0043d4:	40                   	inc    eax
9f0043d5:	00 00                	add    BYTE PTR [eax],al
9f0043d7:	00 12                	add    BYTE PTR [edx],dl
9f0043d9:	00 01                	add    BYTE PTR [ecx],al
9f0043db:	00 b3 00 00 00 69    	add    BYTE PTR [ebx+0x69000000],dh
9f0043e1:	0f 00 9f 1c 00 00 00 	ltr    WORD PTR [edi+0x1c]
9f0043e8:	12 00                	adc    al,BYTE PTR [eax]
9f0043ea:	01 00                	add    DWORD PTR [eax],eax
9f0043ec:	7d 00                	jge    9f0043ee <__x86.get_pc_thunk.cx+0xd3a>
9f0043ee:	00 00                	add    BYTE PTR [eax],al
9f0043f0:	dc 0a                	fmul   QWORD PTR [edx]
9f0043f2:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
9f0043f8:	12 00                	adc    al,BYTE PTR [eax]
9f0043fa:	01 00                	add    DWORD PTR [eax],eax
9f0043fc:	83 00 00             	add    DWORD PTR [eax],0x0
9f0043ff:	00 35 0b 00 9f 59    	add    BYTE PTR ds:0x599f000b,dh
9f004405:	00 00                	add    BYTE PTR [eax],al
9f004407:	00 12                	add    BYTE PTR [edx],dl
9f004409:	00 01                	add    BYTE PTR [ecx],al
9f00440b:	00 25 01 00 00 28    	add    BYTE PTR ds:0x28000001,ah
9f004411:	23 00                	and    eax,DWORD PTR [eax]
9f004413:	9f                   	lahf   
9f004414:	59                   	pop    ecx
9f004415:	00 00                	add    BYTE PTR [eax],al
9f004417:	00 12                	add    BYTE PTR [edx],dl
9f004419:	00 01                	add    BYTE PTR [ecx],al
9f00441b:	00 ff                	add    bh,bh
9f00441d:	00 00                	add    BYTE PTR [eax],al
9f00441f:	00 60 20             	add    BYTE PTR [eax+0x20],ah
9f004422:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f004428:	12 00                	adc    al,BYTE PTR [eax]
9f00442a:	01 00                	add    DWORD PTR [eax],eax
9f00442c:	21 00                	and    DWORD PTR [eax],eax
9f00442e:	00 00                	add    BYTE PTR [eax],al
9f004430:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f004433:	9f                   	lahf   
9f004434:	aa                   	stos   BYTE PTR es:[edi],al
9f004435:	00 00                	add    BYTE PTR [eax],al
9f004437:	00 12                	add    BYTE PTR [edx],dl
9f004439:	00 01                	add    BYTE PTR [ecx],al
9f00443b:	00 6e 00             	add    BYTE PTR [esi+0x0],ch
9f00443e:	00 00                	add    BYTE PTR [eax],al
9f004440:	0c 08                	or     al,0x8
9f004442:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
9f004448:	12 00                	adc    al,BYTE PTR [eax]
9f00444a:	01 00                	add    DWORD PTR [eax],eax
9f00444c:	ec                   	in     al,dx
9f00444d:	00 00                	add    BYTE PTR [eax],al
9f00444f:	00 98 16 00 9f 9b    	add    BYTE PTR [eax-0x6460ffea],bl
9f004455:	01 00                	add    DWORD PTR [eax],eax
9f004457:	00 12                	add    BYTE PTR [edx],dl
9f004459:	00 01                	add    BYTE PTR [ecx],al
9f00445b:	00 c7                	add    bh,al
9f00445d:	00 00                	add    BYTE PTR [eax],al
9f00445f:	00 09                	add    BYTE PTR [ecx],cl
9f004461:	11 00                	adc    DWORD PTR [eax],eax
9f004463:	9f                   	lahf   
9f004464:	20 00                	and    BYTE PTR [eax],al
9f004466:	00 00                	add    BYTE PTR [eax],al
9f004468:	12 00                	adc    al,BYTE PTR [eax]
9f00446a:	01 00                	add    DWORD PTR [eax],eax
9f00446c:	4c                   	dec    esp
9f00446d:	00 00                	add    BYTE PTR [eax],al
9f00446f:	00 60 07             	add    BYTE PTR [eax+0x7],ah
9f004472:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f004478:	12 00                	adc    al,BYTE PTR [eax]
9f00447a:	01 00                	add    DWORD PTR [eax],eax
9f00447c:	e0 00                	loopne 9f00447e <__x86.get_pc_thunk.cx+0xdca>
9f00447e:	00 00                	add    BYTE PTR [eax],al
9f004480:	28 16                	sub    BYTE PTR [esi],dl
9f004482:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f004488:	12 00                	adc    al,BYTE PTR [eax]
9f00448a:	01 00                	add    DWORD PTR [eax],eax
9f00448c:	8a 00                	mov    al,BYTE PTR [eax]
9f00448e:	00 00                	add    BYTE PTR [eax],al
9f004490:	f9                   	stc    
9f004491:	0b 00                	or     eax,DWORD PTR [eax]
9f004493:	9f                   	lahf   
9f004494:	72 00                	jb     9f004496 <__x86.get_pc_thunk.cx+0xde2>
9f004496:	00 00                	add    BYTE PTR [eax],al
9f004498:	12 00                	adc    al,BYTE PTR [eax]
9f00449a:	01 00                	add    DWORD PTR [eax],eax
9f00449c:	cd 00                	int    0x0
9f00449e:	00 00                	add    BYTE PTR [eax],al
9f0044a0:	df 12                	fist   WORD PTR [edx]
9f0044a2:	00 9f 2d 00 00 00    	add    BYTE PTR [edi+0x2d],bl
9f0044a8:	12 00                	adc    al,BYTE PTR [eax]
9f0044aa:	01 00                	add    DWORD PTR [eax],eax
9f0044ac:	45                   	inc    ebp
9f0044ad:	01 00                	add    DWORD PTR [eax],eax
9f0044af:	00 38                	add    BYTE PTR [eax],bh
9f0044b1:	25 00 9f 7d 01       	and    eax,0x17d9f00
9f0044b6:	00 00                	add    BYTE PTR [eax],al
9f0044b8:	12 00                	adc    al,BYTE PTR [eax]
9f0044ba:	01 00                	add    DWORD PTR [eax],eax
9f0044bc:	17                   	pop    ss
9f0044bd:	00 00                	add    BYTE PTR [eax],al
9f0044bf:	00 2b                	add    BYTE PTR [ebx],ch
9f0044c1:	02 00                	add    al,BYTE PTR [eax]
9f0044c3:	9f                   	lahf   
9f0044c4:	bb 00 00 00 12       	mov    ebx,0x12000000
9f0044c9:	00 01                	add    BYTE PTR [ecx],al
9f0044cb:	00 74 01 00          	add    BYTE PTR [ecx+eax*1+0x0],dh
9f0044cf:	00 15 2d 00 9f 1d    	add    BYTE PTR ds:0x1d9f002d,dl
9f0044d5:	00 00                	add    BYTE PTR [eax],al
9f0044d7:	00 12                	add    BYTE PTR [edx],dl
9f0044d9:	00 01                	add    BYTE PTR [ecx],al
9f0044db:	00 55 01             	add    BYTE PTR [ebp+0x1],dl
9f0044de:	00 00                	add    BYTE PTR [eax],al
9f0044e0:	d8 26                	fsub   DWORD PTR [esi]
9f0044e2:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
9f0044e8:	12 00                	adc    al,BYTE PTR [eax]
9f0044ea:	01 00                	add    DWORD PTR [eax],eax
9f0044ec:	73 00                	jae    9f0044ee <__x86.get_pc_thunk.cx+0xe3a>
9f0044ee:	00 00                	add    BYTE PTR [eax],al
9f0044f0:	fe 09                	dec    BYTE PTR [ecx]
9f0044f2:	00 9f bf 00 00 00    	add    BYTE PTR [edi+0xbf],bl
9f0044f8:	12 00                	adc    al,BYTE PTR [eax]
9f0044fa:	01 00                	add    DWORD PTR [eax],eax
9f0044fc:	fa                   	cli    
9f0044fd:	00 00                	add    BYTE PTR [eax],al
9f0044ff:	00 1c 19             	add    BYTE PTR [ecx+ebx*1],bl
9f004502:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f004508:	12 00                	adc    al,BYTE PTR [eax]
9f00450a:	01 00                	add    DWORD PTR [eax],eax
9f00450c:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f00450d:	00 00                	add    BYTE PTR [eax],al
9f00450f:	00 26                	add    BYTE PTR [esi],ah
9f004511:	0d 00 9f f4 01       	or     eax,0x1f49f00
9f004516:	00 00                	add    BYTE PTR [eax],al
9f004518:	12 00                	adc    al,BYTE PTR [eax]
9f00451a:	01 00                	add    DWORD PTR [eax],eax
9f00451c:	3f                   	aas    
9f00451d:	00 00                	add    BYTE PTR [eax],al
9f00451f:	00 f8                	add    al,bh
9f004521:	06                   	push   es
9f004522:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
9f004528:	12 00                	adc    al,BYTE PTR [eax]
9f00452a:	01 00                	add    DWORD PTR [eax],eax
9f00452c:	08 01                	or     BYTE PTR [ecx],al
9f00452e:	00 00                	add    BYTE PTR [eax],al
9f004530:	e4 20                	in     al,0x20
9f004532:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
9f004538:	12 00                	adc    al,BYTE PTR [eax]
9f00453a:	01 00                	add    DWORD PTR [eax],eax
9f00453c:	6b 01 00             	imul   eax,DWORD PTR [ecx],0x0
9f00453f:	00 b8 29 00 9f 44    	add    BYTE PTR [eax+0x449f0029],bh
9f004545:	00 00                	add    BYTE PTR [eax],al
9f004547:	00 12                	add    BYTE PTR [edx],dl
9f004549:	00 01                	add    BYTE PTR [ecx],al
9f00454b:	00 a2 00 00 00 da    	add    BYTE PTR [edx-0x26000000],ah
9f004551:	0c 00                	or     al,0x0
9f004553:	9f                   	lahf   
9f004554:	4c                   	dec    esp
9f004555:	00 00                	add    BYTE PTR [eax],al
9f004557:	00 12                	add    BYTE PTR [edx],dl
9f004559:	00 01                	add    BYTE PTR [ecx],al
9f00455b:	00 db                	add    bl,bl
9f00455d:	00 00                	add    BYTE PTR [eax],al
9f00455f:	00 0c 13             	add    BYTE PTR [ebx+edx*1],cl
9f004562:	00 9f 19 00 00 00    	add    BYTE PTR [edi+0x19],bl
9f004568:	12 00                	adc    al,BYTE PTR [eax]
9f00456a:	01 00                	add    DWORD PTR [eax],eax
9f00456c:	45                   	inc    ebp
9f00456d:	00 00                	add    BYTE PTR [eax],al
9f00456f:	00 2d 07 00 9f 31    	add    BYTE PTR ds:0x319f0007,ch
9f004575:	00 00                	add    BYTE PTR [eax],al
9f004577:	00 12                	add    BYTE PTR [edx],dl
9f004579:	00 01                	add    BYTE PTR [ecx],al
9f00457b:	00 93 01 00 00 c3    	add    BYTE PTR [ebx-0x3cffffff],dl
9f004581:	2d 00 9f 57 08       	sub    eax,0x8579f00
9f004586:	00 00                	add    BYTE PTR [eax],al
9f004588:	12 00                	adc    al,BYTE PTR [eax]
9f00458a:	01 00                	add    DWORD PTR [eax],eax
9f00458c:	64 01 00             	add    DWORD PTR fs:[eax],eax
9f00458f:	00 9a 29 00 9f 1d    	add    BYTE PTR [edx+0x1d9f0029],bl
9f004595:	00 00                	add    BYTE PTR [eax],al
9f004597:	00 12                	add    BYTE PTR [edx],dl
9f004599:	00 01                	add    BYTE PTR [ecx],al
9f00459b:	00 3a                	add    BYTE PTR [edx],bh
9f00459d:	00 00                	add    BYTE PTR [eax],al
9f00459f:	00 c3                	add    bl,al
9f0045a1:	06                   	push   es
9f0045a2:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
9f0045a8:	12 00                	adc    al,BYTE PTR [eax]
9f0045aa:	01 00                	add    DWORD PTR [eax],eax
9f0045ac:	35 01 00 00 e8       	xor    eax,0xe8000001
9f0045b1:	23 00                	and    eax,DWORD PTR [eax]
9f0045b3:	9f                   	lahf   
9f0045b4:	67 00 00             	add    BYTE PTR [bx+si],al
9f0045b7:	00 12                	add    BYTE PTR [edx],dl
9f0045b9:	00 01                	add    BYTE PTR [ecx],al
9f0045bb:	00 3d 01 00 00 18    	add    BYTE PTR ds:0x18000001,bh
9f0045c1:	25 00 9f 20 00       	and    eax,0x209f00
9f0045c6:	00 00                	add    BYTE PTR [eax],al
9f0045c8:	12 00                	adc    al,BYTE PTR [eax]
9f0045ca:	01 00                	add    DWORD PTR [eax],eax
9f0045cc:	28 00                	sub    BYTE PTR [eax],al
9f0045ce:	00 00                	add    BYTE PTR [eax],al
9f0045d0:	aa                   	stos   BYTE PTR es:[edi],al
9f0045d1:	04 00                	add    al,0x0
9f0045d3:	9f                   	lahf   
9f0045d4:	c1 01 00             	rol    DWORD PTR [ecx],0x0
9f0045d7:	00 12                	add    BYTE PTR [edx],dl
9f0045d9:	00 01                	add    BYTE PTR [ecx],al
9f0045db:	00 10                	add    BYTE PTR [eax],dl
9f0045dd:	00 00                	add    BYTE PTR [eax],al
9f0045df:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
9f0045e2:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f0045e8:	12 00                	adc    al,BYTE PTR [eax]
9f0045ea:	01 00                	add    DWORD PTR [eax],eax
9f0045ec:	9d                   	popf   
9f0045ed:	00 00                	add    BYTE PTR [eax],al
9f0045ef:	00 b1 0c 00 9f 29    	add    BYTE PTR [ecx+0x299f000c],dh
9f0045f5:	00 00                	add    BYTE PTR [eax],al
9f0045f7:	00 12                	add    BYTE PTR [edx],dl
9f0045f9:	00 01                	add    BYTE PTR [ecx],al
9f0045fb:	00 51 00             	add    BYTE PTR [ecx+0x0],dl
9f0045fe:	00 00                	add    BYTE PTR [eax],al
9f004600:	00 00                	add    BYTE PTR [eax],al
9f004602:	13 00                	adc    eax,DWORD PTR [eax]
9f004604:	00 00                	add    BYTE PTR [eax],al
9f004606:	00 00                	add    BYTE PTR [eax],al
9f004608:	10 00                	adc    BYTE PTR [eax],al
9f00460a:	01 00                	add    DWORD PTR [eax],eax
9f00460c:	7d 01                	jge    9f00460f <__x86.get_pc_thunk.cx+0xf5b>
9f00460e:	00 00                	add    BYTE PTR [eax],al
9f004610:	32 2d 00 9f 3f 00    	xor    ch,BYTE PTR ds:0x3f9f00
9f004616:	00 00                	add    BYTE PTR [eax],al
9f004618:	12 00                	adc    al,BYTE PTR [eax]
9f00461a:	01 00                	add    DWORD PTR [eax],eax
9f00461c:	f3 00 00             	repz add BYTE PTR [eax],al
9f00461f:	00 fb                	add    bl,bh
9f004621:	18 00                	sbb    BYTE PTR [eax],al
9f004623:	9f                   	lahf   
9f004624:	20 00                	and    BYTE PTR [eax],al
9f004626:	00 00                	add    BYTE PTR [eax],al
9f004628:	12 00                	adc    al,BYTE PTR [eax]
9f00462a:	01 00                	add    DWORD PTR [eax],eax
9f00462c:	5c                   	pop    esp
9f00462d:	01 00                	add    DWORD PTR [eax],eax
9f00462f:	00 0a                	add    BYTE PTR [edx],cl
9f004631:	29 00                	sub    DWORD PTR [eax],eax
9f004633:	9f                   	lahf   
9f004634:	20 00                	and    BYTE PTR [eax],al
9f004636:	00 00                	add    BYTE PTR [eax],al
9f004638:	12 00                	adc    al,BYTE PTR [eax]
9f00463a:	01 00                	add    DWORD PTR [eax],eax
9f00463c:	66                   	data16
9f00463d:	00 00                	add    BYTE PTR [eax],al
9f00463f:	00 c9                	add    cl,cl
9f004641:	07                   	pop    es
9f004642:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
9f004648:	12 00                	adc    al,BYTE PTR [eax]
9f00464a:	01 00                	add    DWORD PTR [eax],eax
9f00464c:	61                   	popa   
9f00464d:	00 00                	add    BYTE PTR [eax],al
9f00464f:	00 86 07 00 9f 43    	add    BYTE PTR [esi+0x439f0007],al
9f004655:	00 00                	add    BYTE PTR [eax],al
9f004657:	00 12                	add    BYTE PTR [edx],dl
9f004659:	00 01                	add    BYTE PTR [ecx],al
9f00465b:	00 0f                	add    BYTE PTR [edi],cl
9f00465d:	01 00                	add    DWORD PTR [eax],eax
9f00465f:	00 d0                	add    al,dl
9f004661:	21 00                	and    DWORD PTR [eax],eax
9f004663:	9f                   	lahf   
9f004664:	5e                   	pop    esi
9f004665:	00 00                	add    BYTE PTR [eax],al
9f004667:	00 12                	add    BYTE PTR [edx],dl
9f004669:	00 01                	add    BYTE PTR [ecx],al
9f00466b:	00 c0                	add    al,al
9f00466d:	00 00                	add    BYTE PTR [eax],al
9f00466f:	00 a5 0f 00 9f 20    	add    BYTE PTR [ebp+0x209f000f],ah
9f004675:	00 00                	add    BYTE PTR [eax],al
9f004677:	00 12                	add    BYTE PTR [edx],dl
9f004679:	00 01                	add    BYTE PTR [ecx],al
9f00467b:	00 08                	add    BYTE PTR [eax],cl
9f00467d:	00 00                	add    BYTE PTR [eax],al
9f00467f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
9f004682:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f004688:	12 00                	adc    al,BYTE PTR [eax]
9f00468a:	01 00                	add    DWORD PTR [eax],eax
9f00468c:	1d 01 00 00 b0       	sbb    eax,0xb0000001
9f004691:	22 00                	and    al,BYTE PTR [eax]
9f004693:	9f                   	lahf   
9f004694:	47                   	inc    edi
9f004695:	00 00                	add    BYTE PTR [eax],al
9f004697:	00 12                	add    BYTE PTR [edx],dl
9f004699:	00 01                	add    BYTE PTR [ecx],al
9f00469b:	00 90 00 00 00 88    	add    BYTE PTR [eax-0x78000000],dl
9f0046a1:	0c 00                	or     al,0x0
9f0046a3:	9f                   	lahf   
9f0046a4:	29 00                	sub    DWORD PTR [eax],eax
9f0046a6:	00 00                	add    BYTE PTR [eax],al
9f0046a8:	12 00                	adc    al,BYTE PTR [eax]
9f0046aa:	01 00                	add    DWORD PTR [eax],eax
9f0046ac:	87 01                	xchg   DWORD PTR [ecx],eax
9f0046ae:	00 00                	add    BYTE PTR [eax],al
9f0046b0:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f0046b1:	2d 00 9f 1d 00       	sub    eax,0x1d9f00
9f0046b6:	00 00                	add    BYTE PTR [eax],al
9f0046b8:	12 00                	adc    al,BYTE PTR [eax]
9f0046ba:	01 00                	add    DWORD PTR [eax],eax
9f0046bc:	9a 01 00 00 1a 36 00 	call   0x36:0x1a000001
9f0046c3:	9f                   	lahf   
9f0046c4:	6d                   	ins    DWORD PTR es:[edi],dx
9f0046c5:	00 00                	add    BYTE PTR [eax],al
9f0046c7:	00 12                	add    BYTE PTR [edx],dl
9f0046c9:	00 01                	add    BYTE PTR [ecx],al
9f0046cb:	00 bb 00 00 00 85    	add    BYTE PTR [ebx-0x7b000000],bh
9f0046d1:	0f 00 9f 20 00 00 00 	ltr    WORD PTR [edi+0x20]
9f0046d8:	12 00                	adc    al,BYTE PTR [eax]
9f0046da:	01 00                	add    DWORD PTR [eax],eax
9f0046dc:	1c 00                	sbb    al,0x0
9f0046de:	00 00                	add    BYTE PTR [eax],al
9f0046e0:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
9f0046e5:	00 00                	add    BYTE PTR [eax],al
9f0046e7:	00 12                	add    BYTE PTR [edx],dl
9f0046e9:	00 01                	add    BYTE PTR [ecx],al
9f0046eb:	00 2e                	add    BYTE PTR [esi],ch
9f0046ed:	01 00                	add    DWORD PTR [eax],eax
9f0046ef:	00 84 23 00 9f 31 00 	add    BYTE PTR [ebx+eiz*1+0x319f00],al
9f0046f6:	00 00                	add    BYTE PTR [eax],al
9f0046f8:	12 00                	adc    al,BYTE PTR [eax]
9f0046fa:	01 00                	add    DWORD PTR [eax],eax
9f0046fc:	2f                   	das    
9f0046fd:	00 00                	add    BYTE PTR [eax],al
9f0046ff:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
9f004703:	9f                   	lahf   
9f004704:	2d 00 00 00 12       	sub    eax,0x12000000
9f004709:	00 01                	add    BYTE PTR [ecx],al
9f00470b:	00 ad 00 00 00 1a    	add    BYTE PTR [ebp+0x1a000000],ch
9f004711:	0f 00 9f 4f 00 00 00 	ltr    WORD PTR [edi+0x4f]
9f004718:	12 00                	adc    al,BYTE PTR [eax]
9f00471a:	01 00                	add    DWORD PTR [eax],eax
9f00471c:	01 00                	add    DWORD PTR [eax],eax
9f00471e:	00 00                	add    BYTE PTR [eax],al
9f004720:	00 00                	add    BYTE PTR [eax],al
9f004722:	00 9f 38 00 00 00    	add    BYTE PTR [edi+0x38],bl
9f004728:	12 00                	adc    al,BYTE PTR [eax]
9f00472a:	01 00                	add    DWORD PTR [eax],eax
9f00472c:	4d                   	dec    ebp
9f00472d:	01 00                	add    DWORD PTR [eax],eax
9f00472f:	00 b8 26 00 9f 1d    	add    BYTE PTR [eax+0x1d9f0026],bh
9f004735:	00 00                	add    BYTE PTR [eax],al
9f004737:	00 12                	add    BYTE PTR [edx],dl
9f004739:	00 01                	add    BYTE PTR [ecx],al
9f00473b:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
9f00473e:	00 00                	add    BYTE PTR [eax],al
9f004740:	99                   	cdq    
9f004741:	06                   	push   es
9f004742:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
9f004748:	12 00                	adc    al,BYTE PTR [eax]
9f00474a:	01 00                	add    DWORD PTR [eax],eax
9f00474c:	e7 00                	out    0x0,eax
9f00474e:	00 00                	add    BYTE PTR [eax],al
9f004750:	48                   	dec    eax
9f004751:	16                   	push   ss
9f004752:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f004758:	12 00                	adc    al,BYTE PTR [eax]
9f00475a:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f00475c <.dynstr>:
9f00475c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00475f:	72 63                	jb     9f0047c4 <__x86.get_pc_thunk.cx+0x1110>
9f004761:	68 72 00 73 74       	push   0x74730072
9f004766:	72 63                	jb     9f0047cb <__x86.get_pc_thunk.cx+0x1117>
9f004768:	73 70                	jae    9f0047da <__x86.get_pc_thunk.cx+0x1126>
9f00476a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00476b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00476e:	72 74                	jb     9f0047e4 <__x86.get_pc_thunk.cx+0x1130>
9f004770:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004771:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f004774:	74 6f                	je     9f0047e5 <__x86.get_pc_thunk.cx+0x1131>
9f004776:	61                   	popa   
9f004777:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f00477a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00477b:	69 00 67 65 74 65    	imul   eax,DWORD PTR [eax],0x65746567
9f004781:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004782:	76 00                	jbe    9f004784 <__x86.get_pc_thunk.cx+0x10d0>
9f004784:	73 65                	jae    9f0047eb <__x86.get_pc_thunk.cx+0x1137>
9f004786:	74 65                	je     9f0047ed <__x86.get_pc_thunk.cx+0x1139>
9f004788:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004789:	76 00                	jbe    9f00478b <__x86.get_pc_thunk.cx+0x10d7>
9f00478b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00478c:	70 65                	jo     9f0047f3 <__x86.get_pc_thunk.cx+0x113f>
9f00478e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00478f:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
9f004792:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004793:	73 65                	jae    9f0047fa <__x86.get_pc_thunk.cx+0x1146>
9f004795:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f004798:	61                   	popa   
9f004799:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f00479d:	69 74 65 00 67 65 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x64746567
9f0047a4:	64 
9f0047a5:	69 72 00 70 75 74 73 	imul   esi,DWORD PTR [edx+0x0],0x73747570
9f0047ac:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
9f0047af:	73 45                	jae    9f0047f6 <__x86.get_pc_thunk.cx+0x1142>
9f0047b1:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0047b2:	74 65                	je     9f004819 <__x86.get_pc_thunk.cx+0x1165>
9f0047b4:	72 5f                	jb     9f004815 <__x86.get_pc_thunk.cx+0x1161>
9f0047b6:	56                   	push   esi
9f0047b7:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f0047bc:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f0047bf:	74 63                	je     9f004824 <__x86.get_pc_thunk.cx+0x1170>
9f0047c1:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0047c4:	74 63                	je     9f004829 <__x86.get_pc_thunk.cx+0x1175>
9f0047c6:	68 61 72 00 67       	push   0x67007261
9f0047cb:	65                   	gs
9f0047cc:	74 73                	je     9f004841 <__x86.get_pc_thunk.cx+0x118d>
9f0047ce:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f0047d2:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f0047d5:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0047d6:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f0047dd:	74 
9f0047de:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f0047e1:	69 6e 74 66 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730066
9f0047e8:	65                   	gs
9f0047e9:	65                   	gs
9f0047ea:	70 00                	jo     9f0047ec <__x86.get_pc_thunk.cx+0x1138>
9f0047ec:	6d                   	ins    DWORD PTR es:[edi],dx
9f0047ed:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0047ee:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f0047f5:	6e 
9f0047f6:	61                   	popa   
9f0047f7:	6c                   	ins    BYTE PTR es:[edi],dx
9f0047f8:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f0047fb:	72 6b                	jb     9f004868 <__x86.get_pc_thunk.cx+0x11b4>
9f0047fd:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f004800:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f004803:	65                   	gs
9f004804:	78 65                	js     9f00486b <__x86.get_pc_thunk.cx+0x11b7>
9f004806:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f004809:	65                   	gs
9f00480a:	78 65                	js     9f004871 <__x86.get_pc_thunk.cx+0x11bd>
9f00480c:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f00480f:	77 61                	ja     9f004872 <__x86.get_pc_thunk.cx+0x11be>
9f004811:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f004818:	78 
9f004819:	69 74 00 67 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x67],0x77637465
9f004820:	77 
9f004821:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f004825:	6c                   	ins    BYTE PTR es:[edi],dx
9f004826:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f00482d:	69 
9f00482e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00482f:	65                   	gs
9f004830:	54                   	push   esp
9f004831:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004832:	41                   	inc    ecx
9f004833:	72 67                	jb     9f00489c <__x86.get_pc_thunk.cx+0x11e8>
9f004835:	76 00                	jbe    9f004837 <__x86.get_pc_thunk.cx+0x1183>
9f004837:	74 65                	je     9f00489e <__x86.get_pc_thunk.cx+0x11ea>
9f004839:	73 74                	jae    9f0048af <__x86.get_pc_thunk.cx+0x11fb>
9f00483b:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f00483e:	6c                   	ins    BYTE PTR es:[edi],dx
9f00483f:	6c                   	ins    BYTE PTR es:[edi],dx
9f004840:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004841:	63 00                	arpl   WORD PTR [eax],ax
9f004843:	66                   	data16
9f004844:	72 65                	jb     9f0048ab <__x86.get_pc_thunk.cx+0x11f7>
9f004846:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f00484a:	6d                   	ins    DWORD PTR es:[edi],dx
9f00484b:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f00484e:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f004851:	6d                   	ins    DWORD PTR es:[edi],dx
9f004852:	73 65                	jae    9f0048b9 <__x86.get_pc_thunk.cx+0x1205>
9f004854:	74 00                	je     9f004856 <__x86.get_pc_thunk.cx+0x11a2>
9f004856:	70 69                	jo     9f0048c1 <__x86.get_pc_thunk.cx+0x120d>
9f004858:	70 65                	jo     9f0048bf <__x86.get_pc_thunk.cx+0x120b>
9f00485a:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f00485d:	73 65                	jae    9f0048c4 <__x86.get_pc_thunk.cx+0x1210>
9f00485f:	74 52                	je     9f0048b3 <__x86.get_pc_thunk.cx+0x11ff>
9f004861:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004862:	77 00                	ja     9f004864 <__x86.get_pc_thunk.cx+0x11b0>
9f004864:	73 74                	jae    9f0048da <__x86.get_pc_thunk.cx+0x1226>
9f004866:	72 63                	jb     9f0048cb <__x86.get_pc_thunk.cx+0x1217>
9f004868:	61                   	popa   
9f004869:	74 00                	je     9f00486b <__x86.get_pc_thunk.cx+0x11b7>
9f00486b:	73 74                	jae    9f0048e1 <__x86.get_pc_thunk.cx+0x122d>
9f00486d:	72 63                	jb     9f0048d2 <__x86.get_pc_thunk.cx+0x121e>
9f00486f:	6d                   	ins    DWORD PTR es:[edi],dx
9f004870:	70 00                	jo     9f004872 <__x86.get_pc_thunk.cx+0x11be>
9f004872:	73 74                	jae    9f0048e8 <__x86.get_pc_thunk.cx+0x1234>
9f004874:	72 63                	jb     9f0048d9 <__x86.get_pc_thunk.cx+0x1225>
9f004876:	70 79                	jo     9f0048f1 <__x86.get_pc_thunk.cx+0x123d>
9f004878:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00487b:	72 63                	jb     9f0048e0 <__x86.get_pc_thunk.cx+0x122c>
9f00487d:	70 79                	jo     9f0048f8 <__x86.get_pc_thunk.cx+0x1244>
9f00487f:	63 00                	arpl   WORD PTR [eax],ax
9f004881:	73 74                	jae    9f0048f7 <__x86.get_pc_thunk.cx+0x1243>
9f004883:	72 69                	jb     9f0048ee <__x86.get_pc_thunk.cx+0x123a>
9f004885:	73 6e                	jae    9f0048f5 <__x86.get_pc_thunk.cx+0x1241>
9f004887:	75 6d                	jne    9f0048f6 <__x86.get_pc_thunk.cx+0x1242>
9f004889:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00488c:	72 6c                	jb     9f0048fa <__x86.get_pc_thunk.cx+0x1246>
9f00488e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f004890:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f004893:	72 6e                	jb     9f004903 <__x86.get_pc_thunk.cx+0x124f>
9f004895:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f004898:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f00489b:	72 6e                	jb     9f00490b <__x86.get_pc_thunk.cx+0x1257>
9f00489d:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f0048a0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0048a3:	72 74                	jb     9f004919 <__x86.get_pc_thunk.cx+0x1265>
9f0048a5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0048a6:	75 6c                	jne    9f004914 <__x86.get_pc_thunk.cx+0x1260>
9f0048a8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0048ab:	72 6c                	jb     9f004919 <__x86.get_pc_thunk.cx+0x1265>
9f0048ad:	65                   	gs
9f0048ae:	66                   	data16
9f0048af:	74 00                	je     9f0048b1 <__x86.get_pc_thunk.cx+0x11fd>
9f0048b1:	73 74                	jae    9f004927 <__x86.get_pc_thunk.cx+0x1273>
9f0048b3:	72 74                	jb     9f004929 <__x86.get_pc_thunk.cx+0x1275>
9f0048b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0048b6:	6c                   	ins    BYTE PTR es:[edi],dx
9f0048b7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0048ba:	72 74                	jb     9f004930 <__x86.get_pc_thunk.cx+0x127c>
9f0048bc:	72 69                	jb     9f004927 <__x86.get_pc_thunk.cx+0x1273>
9f0048be:	6d                   	ins    DWORD PTR es:[edi],dx
9f0048bf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f0048c2:	72 73                	jb     9f004937 <__x86.get_pc_thunk.cx+0x1283>
9f0048c4:	74 72                	je     9f004938 <__x86.get_pc_thunk.cx+0x1284>
9f0048c6:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0048c9:	74 74                	je     9f00493f <__x86.get_pc_thunk.cx+0x128b>
9f0048cb:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f0048d2:	74 69                	je     9f00493d <__x86.get_pc_thunk.cx+0x1289>
9f0048d4:	6d                   	ins    DWORD PTR es:[edi],dx
9f0048d5:	65                   	gs
9f0048d6:	5f                   	pop    edi
9f0048d7:	72 00                	jb     9f0048d9 <__x86.get_pc_thunk.cx+0x1225>
9f0048d9:	6c                   	ins    BYTE PTR es:[edi],dx
9f0048da:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0048db:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f0048de:	74 69                	je     9f004949 <__x86.get_pc_thunk.cx+0x1295>
9f0048e0:	6d                   	ins    DWORD PTR es:[edi],dx
9f0048e1:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f0048e6:	61                   	popa   
9f0048e7:	6c                   	ins    BYTE PTR es:[edi],dx
9f0048e8:	74 69                	je     9f004953 <__x86.get_pc_thunk.cx+0x129f>
9f0048ea:	6d                   	ins    DWORD PTR es:[edi],dx
9f0048eb:	65                   	gs
9f0048ec:	5f                   	pop    edi
9f0048ed:	72 00                	jb     9f0048ef <__x86.get_pc_thunk.cx+0x123b>
9f0048ef:	6d                   	ins    DWORD PTR es:[edi],dx
9f0048f0:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f0048f5:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f0048f8:	74 74                	je     9f00496e <__x86.get_pc_thunk.cx+0x12ba>
9f0048fa:	69                   	.byte 0x69
9f0048fb:	6d                   	ins    DWORD PTR es:[edi],dx
9f0048fc:	65                   	gs
	...

Disassembly of section .hash:

9f004900 <.hash>:
9f004900:	25 00 00 00 3a       	and    eax,0x3a000000
9f004905:	00 00                	add    BYTE PTR [eax],al
9f004907:	00 1f                	add    BYTE PTR [edi],bl
9f004909:	00 00                	add    BYTE PTR [eax],al
9f00490b:	00 2a                	add    BYTE PTR [edx],ch
9f00490d:	00 00                	add    BYTE PTR [eax],al
9f00490f:	00 29                	add    BYTE PTR [ecx],ch
9f004911:	00 00                	add    BYTE PTR [eax],al
9f004913:	00 2b                	add    BYTE PTR [ebx],ch
9f004915:	00 00                	add    BYTE PTR [eax],al
9f004917:	00 25 00 00 00 35    	add    BYTE PTR ds:0x35000000,ah
9f00491d:	00 00                	add    BYTE PTR [eax],al
9f00491f:	00 15 00 00 00 1a    	add    BYTE PTR ds:0x1a000000,dl
9f004925:	00 00                	add    BYTE PTR [eax],al
9f004927:	00 21                	add    BYTE PTR [ecx],ah
	...
9f004931:	00 00                	add    BYTE PTR [eax],al
9f004933:	00 18                	add    BYTE PTR [eax],bl
9f004935:	00 00                	add    BYTE PTR [eax],al
9f004937:	00 1b                	add    BYTE PTR [ebx],bl
9f004939:	00 00                	add    BYTE PTR [eax],al
9f00493b:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
9f00493e:	00 00                	add    BYTE PTR [eax],al
9f004940:	22 00                	and    al,BYTE PTR [eax]
9f004942:	00 00                	add    BYTE PTR [eax],al
9f004944:	12 00                	adc    al,BYTE PTR [eax]
9f004946:	00 00                	add    BYTE PTR [eax],al
9f004948:	38 00                	cmp    BYTE PTR [eax],al
9f00494a:	00 00                	add    BYTE PTR [eax],al
9f00494c:	2d 00 00 00 2c       	sub    eax,0x2c000000
9f004951:	00 00                	add    BYTE PTR [eax],al
9f004953:	00 07                	add    BYTE PTR [edi],al
9f004955:	00 00                	add    BYTE PTR [eax],al
9f004957:	00 03                	add    BYTE PTR [ebx],al
9f004959:	00 00                	add    BYTE PTR [eax],al
9f00495b:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
9f00495e:	00 00                	add    BYTE PTR [eax],al
9f004960:	32 00                	xor    al,BYTE PTR [eax]
9f004962:	00 00                	add    BYTE PTR [eax],al
9f004964:	0c 00                	or     al,0x0
9f004966:	00 00                	add    BYTE PTR [eax],al
9f004968:	37                   	aaa    
	...
9f004975:	00 00                	add    BYTE PTR [eax],al
9f004977:	00 13                	add    BYTE PTR [ebx],dl
9f004979:	00 00                	add    BYTE PTR [eax],al
9f00497b:	00 33                	add    BYTE PTR [ebx],dh
9f00497d:	00 00                	add    BYTE PTR [eax],al
9f00497f:	00 1d 00 00 00 39    	add    BYTE PTR ds:0x39000000,bl
9f004985:	00 00                	add    BYTE PTR [eax],al
9f004987:	00 26                	add    BYTE PTR [esi],ah
9f004989:	00 00                	add    BYTE PTR [eax],al
9f00498b:	00 00                	add    BYTE PTR [eax],al
9f00498d:	00 00                	add    BYTE PTR [eax],al
9f00498f:	00 36                	add    BYTE PTR [esi],dh
9f004991:	00 00                	add    BYTE PTR [eax],al
9f004993:	00 28                	add    BYTE PTR [eax],ch
	...
9f0049b1:	00 00                	add    BYTE PTR [eax],al
9f0049b3:	00 02                	add    BYTE PTR [edx],al
9f0049b5:	00 00                	add    BYTE PTR [eax],al
9f0049b7:	00 00                	add    BYTE PTR [eax],al
9f0049b9:	00 00                	add    BYTE PTR [eax],al
9f0049bb:	00 06                	add    BYTE PTR [esi],al
9f0049bd:	00 00                	add    BYTE PTR [eax],al
9f0049bf:	00 00                	add    BYTE PTR [eax],al
9f0049c1:	00 00                	add    BYTE PTR [eax],al
9f0049c3:	00 08                	add    BYTE PTR [eax],cl
	...
9f0049d5:	00 00                	add    BYTE PTR [eax],al
9f0049d7:	00 0a                	add    BYTE PTR [edx],cl
9f0049d9:	00 00                	add    BYTE PTR [eax],al
9f0049db:	00 00                	add    BYTE PTR [eax],al
9f0049dd:	00 00                	add    BYTE PTR [eax],al
9f0049df:	00 0f                	add    BYTE PTR [edi],cl
9f0049e1:	00 00                	add    BYTE PTR [eax],al
9f0049e3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
	...
9f0049fa:	00 00                	add    BYTE PTR [eax],al
9f0049fc:	0e                   	push   cs
	...
9f004a11:	00 00                	add    BYTE PTR [eax],al
9f004a13:	00 01                	add    BYTE PTR [ecx],al
9f004a15:	00 00                	add    BYTE PTR [eax],al
9f004a17:	00 10                	add    BYTE PTR [eax],dl
9f004a19:	00 00                	add    BYTE PTR [eax],al
9f004a1b:	00 17                	add    BYTE PTR [edi],dl
9f004a1d:	00 00                	add    BYTE PTR [eax],al
9f004a1f:	00 00                	add    BYTE PTR [eax],al
9f004a21:	00 00                	add    BYTE PTR [eax],al
9f004a23:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
9f004a29:	00 00                	add    BYTE PTR [eax],al
9f004a2b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f004a2e:	00 00                	add    BYTE PTR [eax],al
9f004a30:	24 00                	and    al,0x0
9f004a32:	00 00                	add    BYTE PTR [eax],al
9f004a34:	23 00                	and    eax,DWORD PTR [eax]
9f004a36:	00 00                	add    BYTE PTR [eax],al
9f004a38:	19 00                	sbb    DWORD PTR [eax],eax
9f004a3a:	00 00                	add    BYTE PTR [eax],al
9f004a3c:	20 00                	and    BYTE PTR [eax],al
9f004a3e:	00 00                	add    BYTE PTR [eax],al
9f004a40:	09 00                	or     DWORD PTR [eax],eax
	...
9f004a4a:	00 00                	add    BYTE PTR [eax],al
9f004a4c:	0b 00                	or     eax,DWORD PTR [eax]
9f004a4e:	00 00                	add    BYTE PTR [eax],al
9f004a50:	11 00                	adc    DWORD PTR [eax],eax
9f004a52:	00 00                	add    BYTE PTR [eax],al
9f004a54:	00 00                	add    BYTE PTR [eax],al
9f004a56:	00 00                	add    BYTE PTR [eax],al
9f004a58:	1e                   	push   ds
	...
9f004a61:	00 00                	add    BYTE PTR [eax],al
9f004a63:	00 27                	add    BYTE PTR [edi],ah
9f004a65:	00 00                	add    BYTE PTR [eax],al
9f004a67:	00 31                	add    BYTE PTR [ecx],dh
9f004a69:	00 00                	add    BYTE PTR [eax],al
9f004a6b:	00 2f                	add    BYTE PTR [edi],ch
9f004a6d:	00 00                	add    BYTE PTR [eax],al
9f004a6f:	00 00                	add    BYTE PTR [eax],al
9f004a71:	00 00                	add    BYTE PTR [eax],al
9f004a73:	00 30                	add    BYTE PTR [eax],dh
9f004a75:	00 00                	add    BYTE PTR [eax],al
9f004a77:	00 05 00 00 00 16    	add    BYTE PTR ds:0x16000000,al
9f004a7d:	00 00                	add    BYTE PTR [eax],al
9f004a7f:	00 2e                	add    BYTE PTR [esi],ch
9f004a81:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame:

9f004a84 <.eh_frame>:
9f004a84:	14 00                	adc    al,0x0
9f004a86:	00 00                	add    BYTE PTR [eax],al
9f004a88:	00 00                	add    BYTE PTR [eax],al
9f004a8a:	00 00                	add    BYTE PTR [eax],al
9f004a8c:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f004a8f:	00 01                	add    BYTE PTR [ecx],al
9f004a91:	7c 08                	jl     9f004a9b <__x86.get_pc_thunk.cx+0x13e7>
9f004a93:	01 1b                	add    DWORD PTR [ebx],ebx
9f004a95:	0c 04                	or     al,0x4
9f004a97:	04 88                	add    al,0x88
9f004a99:	01 00                	add    DWORD PTR [eax],eax
9f004a9b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f004a9e:	00 00                	add    BYTE PTR [eax],al
9f004aa0:	1c 00                	sbb    al,0x0
9f004aa2:	00 00                	add    BYTE PTR [eax],al
9f004aa4:	ec                   	in     al,dx
9f004aa5:	eb ff                	jmp    9f004aa6 <__x86.get_pc_thunk.cx+0x13f2>
9f004aa7:	ff 20                	jmp    DWORD PTR [eax]
9f004aa9:	00 00                	add    BYTE PTR [eax],al
9f004aab:	00 00                	add    BYTE PTR [eax],al
9f004aad:	0e                   	push   cs
9f004aae:	08 46 0e             	or     BYTE PTR [esi+0xe],al
9f004ab1:	0c 4a                	or     al,0x4a
9f004ab3:	0f 0b                	ud2    
9f004ab5:	74 04                	je     9f004abb <__x86.get_pc_thunk.cx+0x1407>
9f004ab7:	78 00                	js     9f004ab9 <__x86.get_pc_thunk.cx+0x1405>
9f004ab9:	3f                   	aas    
9f004aba:	1a 3b                	sbb    bh,BYTE PTR [ebx]
9f004abc:	2a 32                	sub    dh,BYTE PTR [edx]
9f004abe:	24 22                	and    al,0x22
9f004ac0:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f004ac4 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f004ac4:	01 1b                	add    DWORD PTR [ebx],ebx
9f004ac6:	03 3b                	add    edi,DWORD PTR [ebx]
9f004ac8:	f0 eb ff             	lock jmp 9f004aca <__GNU_EH_FRAME_HDR+0x6>
9f004acb:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f004ace:	00 00                	add    BYTE PTR [eax],al
9f004ad0:	3c b5                	cmp    al,0xb5
9f004ad2:	ff                   	(bad)  
9f004ad3:	ff 0c ec             	dec    DWORD PTR [esp+ebp*8]
9f004ad6:	ff                   	(bad)  
9f004ad7:	ff 74 b5 ff          	push   DWORD PTR [ebp+esi*4-0x1]
9f004adb:	ff 2c ec             	jmp    FWORD PTR [esp+ebp*8]
9f004ade:	ff                   	(bad)  
9f004adf:	ff ac b5 ff ff 60 ec 	jmp    FWORD PTR [ebp+esi*4-0x139f0001]
9f004ae6:	ff                   	(bad)  
9f004ae7:	ff 01                	inc    DWORD PTR [ecx]
9f004ae9:	b6 ff                	mov    dh,0xff
9f004aeb:	ff 88 ec ff ff 58    	dec    DWORD PTR [eax+0x58ffffec]
9f004af1:	b6 ff                	mov    dh,0xff
9f004af3:	ff b0 ec ff ff f0    	push   DWORD PTR [eax-0xf000014]
9f004af9:	b6 ff                	mov    dh,0xff
9f004afb:	ff ec                	jmp    <internal disassembler error>
9f004afd:	ec                   	in     al,dx
9f004afe:	ff                   	(bad)  
9f004aff:	ff 67 b7             	jmp    DWORD PTR [edi-0x49]
9f004b02:	ff                   	(bad)  
9f004b03:	ff 10                	call   DWORD PTR [eax]
9f004b05:	ed                   	in     eax,dx
9f004b06:	ff                   	(bad)  
9f004b07:	ff 22                	jmp    DWORD PTR [edx]
9f004b09:	b8 ff ff 34 ed       	mov    eax,0xed34ffff
9f004b0e:	ff                   	(bad)  
9f004b0f:	ff dd                	call   <internal disassembler error>
9f004b11:	b8 ff ff 58 ed       	mov    eax,0xed58ffff
9f004b16:	ff                   	(bad)  
9f004b17:	ff                   	(bad)  
9f004b18:	3c b9                	cmp    al,0xb9
9f004b1a:	ff                   	(bad)  
9f004b1b:	ff                   	(bad)  
9f004b1c:	78 ed                	js     9f004b0b <__GNU_EH_FRAME_HDR+0x47>
9f004b1e:	ff                   	(bad)  
9f004b1f:	ff e6                	jmp    esi
9f004b21:	b9 ff ff 9c ed       	mov    ecx,0xed9cffff
9f004b26:	ff                   	(bad)  
9f004b27:	ff a8 bb ff ff c0    	jmp    FWORD PTR [eax-0x3f000045]
9f004b2d:	ed                   	in     eax,dx
9f004b2e:	ff                   	(bad)  
9f004b2f:	ff d5                	call   ebp
9f004b31:	bb ff ff e4 ed       	mov    ebx,0xede4ffff
9f004b36:	ff                   	(bad)  
9f004b37:	ff                   	(bad)  
9f004b38:	ff                   	(bad)  
9f004b39:	bb ff ff 08 ee       	mov    ebx,0xee08ffff
9f004b3e:	ff                   	(bad)  
9f004b3f:	ff 34 bc             	push   DWORD PTR [esp+edi*4]
9f004b42:	ff                   	(bad)  
9f004b43:	ff 30                	push   DWORD PTR [eax]
9f004b45:	ee                   	out    dx,al
9f004b46:	ff                   	(bad)  
9f004b47:	ff 69 bc             	jmp    FWORD PTR [ecx-0x44]
9f004b4a:	ff                   	(bad)  
9f004b4b:	ff 58 ee             	call   FWORD PTR [eax-0x12]
9f004b4e:	ff                   	(bad)  
9f004b4f:	ff 9c bc ff ff 7c ee 	call   FWORD PTR [esp+edi*4-0x11830001]
9f004b56:	ff                   	(bad)  
9f004b57:	ff c2                	inc    edx
9f004b59:	bc ff ff a0 ee       	mov    esp,0xeea0ffff
9f004b5e:	ff                   	(bad)  
9f004b5f:	ff 05 bd ff ff c4    	inc    DWORD PTR ds:0xc4ffffbd
9f004b65:	ee                   	out    dx,al
9f004b66:	ff                   	(bad)  
9f004b67:	ff 48 bd             	dec    DWORD PTR [eax-0x43]
9f004b6a:	ff                   	(bad)  
9f004b6b:	ff e8                	jmp    <internal disassembler error>
9f004b6d:	ee                   	out    dx,al
9f004b6e:	ff                   	(bad)  
9f004b6f:	ff 04 be             	inc    DWORD PTR [esi+edi*4]
9f004b72:	ff                   	(bad)  
9f004b73:	ff 0c ef             	dec    DWORD PTR [edi+ebp*8]
9f004b76:	ff                   	(bad)  
9f004b77:	ff                   	(bad)  
9f004b78:	3e                   	ds
9f004b79:	be ff ff 34 ef       	mov    esi,0xef34ffff
9f004b7e:	ff                   	(bad)  
9f004b7f:	ff                   	(bad)  
9f004b80:	7a be                	jp     9f004b40 <__GNU_EH_FRAME_HDR+0x7c>
9f004b82:	ff                   	(bad)  
9f004b83:	ff 5c ef ff          	call   FWORD PTR [edi+ebp*8-0x1]
9f004b87:	ff                   	(bad)  
9f004b88:	b8 be ff ff 84       	mov    eax,0x84ffffbe
9f004b8d:	ef                   	out    dx,eax
9f004b8e:	ff                   	(bad)  
9f004b8f:	ff                   	(bad)  
9f004b90:	f8                   	clc    
9f004b91:	be ff ff ac ef       	mov    esi,0xefacffff
9f004b96:	ff                   	(bad)  
9f004b97:	ff                   	(bad)  
9f004b98:	3a bf ff ff d4 ef    	cmp    bh,BYTE PTR [edi-0x102b0001]
9f004b9e:	ff                   	(bad)  
9f004b9f:	ff                   	(bad)  
9f004ba0:	f9                   	stc    
9f004ba1:	bf ff ff f8 ef       	mov    edi,0xeff8ffff
9f004ba6:	ff                   	(bad)  
9f004ba7:	ff 18                	call   FWORD PTR [eax]
9f004ba9:	c0 ff ff             	sar    bh,0xff
9f004bac:	1c f0                	sbb    al,0xf0
9f004bae:	ff                   	(bad)  
9f004baf:	ff 71 c0             	push   DWORD PTR [ecx-0x40]
9f004bb2:	ff                   	(bad)  
9f004bb3:	ff 40 f0             	inc    DWORD PTR [eax-0x10]
9f004bb6:	ff                   	(bad)  
9f004bb7:	ff ca                	dec    edx
9f004bb9:	c0 ff ff             	sar    bh,0xff
9f004bbc:	64                   	fs
9f004bbd:	f0 ff                	lock (bad) 
9f004bbf:	ff                   	(bad)  
9f004bc0:	fe c0                	inc    al
9f004bc2:	ff                   	(bad)  
9f004bc3:	ff 84 f0 ff ff 35 c1 	inc    DWORD PTR [eax+esi*8-0x3eca0001]
9f004bca:	ff                   	(bad)  
9f004bcb:	ff a4 f0 ff ff a7 c1 	jmp    DWORD PTR [eax+esi*8-0x3e580001]
9f004bd2:	ff                   	(bad)  
9f004bd3:	ff cc                	dec    esp
9f004bd5:	f0 ff                	lock (bad) 
9f004bd7:	ff c4                	inc    esp
9f004bd9:	c1 ff ff             	sar    edi,0xff
9f004bdc:	ec                   	in     al,dx
9f004bdd:	f0 ff                	lock (bad) 
9f004bdf:	ff ed                	jmp    <internal disassembler error>
9f004be1:	c1 ff ff             	sar    edi,0xff
9f004be4:	0c f1                	or     al,0xf1
9f004be6:	ff                   	(bad)  
9f004be7:	ff 16                	call   DWORD PTR [esi]
9f004be9:	c2 ff ff             	ret    0xffff
9f004bec:	2c f1                	sub    al,0xf1
9f004bee:	ff                   	(bad)  
9f004bef:	ff 62 c2             	jmp    DWORD PTR [edx-0x3e]
9f004bf2:	ff                   	(bad)  
9f004bf3:	ff 4c f1 ff          	dec    DWORD PTR [ecx+esi*8-0x1]
9f004bf7:	ff 56 c4             	call   DWORD PTR [esi-0x3c]
9f004bfa:	ff                   	(bad)  
9f004bfb:	ff 70 f1             	push   DWORD PTR [eax-0xf]
9f004bfe:	ff                   	(bad)  
9f004bff:	ff a5 c4 ff ff 90    	jmp    DWORD PTR [ebp-0x6f00003c]
9f004c05:	f1                   	icebp  
9f004c06:	ff                   	(bad)  
9f004c07:	ff c1                	inc    ecx
9f004c09:	c4                   	(bad)  
9f004c0a:	ff                   	(bad)  
9f004c0b:	ff b0 f1 ff ff e1    	push   DWORD PTR [eax-0x1e00000f]
9f004c11:	c4                   	(bad)  
9f004c12:	ff                   	(bad)  
9f004c13:	ff d0                	call   eax
9f004c15:	f1                   	icebp  
9f004c16:	ff                   	(bad)  
9f004c17:	ff 01                	inc    DWORD PTR [ecx]
9f004c19:	c5 ff ff             	(bad)  
9f004c1c:	f0 f1                	lock icebp 
9f004c1e:	ff                   	(bad)  
9f004c1f:	ff 45 c6             	inc    DWORD PTR [ebp-0x3a]
9f004c22:	ff                   	(bad)  
9f004c23:	ff 10                	call   DWORD PTR [eax]
9f004c25:	f2 ff                	repnz (bad) 
9f004c27:	ff 65 c6             	jmp    DWORD PTR [ebp-0x3a]
9f004c2a:	ff                   	(bad)  
9f004c2b:	ff 30                	push   DWORD PTR [eax]
9f004c2d:	f2 ff                	repnz (bad) 
9f004c2f:	ff 1b                	call   FWORD PTR [ebx]
9f004c31:	c8 ff ff 54          	enter  0xffff,0x54
9f004c35:	f2 ff                	repnz (bad) 
9f004c37:	ff 48 c8             	dec    DWORD PTR [eax-0x38]
9f004c3a:	ff                   	(bad)  
9f004c3b:	ff 74 f2 ff          	push   DWORD PTR [edx+esi*8-0x1]
9f004c3f:	ff 64 c8 ff          	jmp    DWORD PTR [eax+ecx*8-0x1]
9f004c43:	ff 94 f2 ff ff d0 c8 	call   DWORD PTR [edx+esi*8-0x372f0001]
9f004c4a:	ff                   	(bad)  
9f004c4b:	ff                   	(bad)  
9f004c4c:	b8 f2 ff ff 57       	mov    eax,0x57fffff2
9f004c51:	c9                   	leave  
9f004c52:	ff                   	(bad)  
9f004c53:	ff d8                	call   <internal disassembler error>
9f004c55:	f2 ff                	repnz (bad) 
9f004c57:	ff 90 c9 ff ff f8    	call   DWORD PTR [eax-0x7000037]
9f004c5d:	f2 ff                	repnz (bad) 
9f004c5f:	ff 64 cb ff          	jmp    DWORD PTR [ebx+ecx*8-0x1]
9f004c63:	ff 1c f3             	call   FWORD PTR [ebx+esi*8]
9f004c66:	ff                   	(bad)  
9f004c67:	ff 84 cb ff ff 3c f3 	inc    DWORD PTR [ebx+ecx*8-0xcc30001]
9f004c6e:	ff                   	(bad)  
9f004c6f:	ff 9f cb ff ff 5c    	call   FWORD PTR [edi+0x5cffffcb]
9f004c75:	f3 ff                	repz (bad) 
9f004c77:	ff d4                	call   esp
9f004c79:	cb                   	retf   
9f004c7a:	ff                   	(bad)  
9f004c7b:	ff 80 f3 ff ff 70    	inc    DWORD PTR [eax+0x70fffff3]
9f004c81:	cd ff                	int    0xff
9f004c83:	ff a0 f3 ff ff 37    	jmp    DWORD PTR [eax+0x37fffff3]
9f004c89:	ce                   	into   
9f004c8a:	ff                   	(bad)  
9f004c8b:	ff c0                	inc    eax
9f004c8d:	f3 ff                	repz (bad) 
9f004c8f:	ff 58 ce             	call   FWORD PTR [eax-0x32]
9f004c92:	ff                   	(bad)  
9f004c93:	ff e0                	jmp    eax
9f004c95:	f3 ff                	repz (bad) 
9f004c97:	ff 84 ce ff ff 04 f4 	inc    DWORD PTR [esi+ecx*8-0xbfb0001]
9f004c9e:	ff                   	(bad)  
9f004c9f:	ff e3                	jmp    ebx
9f004ca1:	ce                   	into   
9f004ca2:	ff                   	(bad)  
9f004ca3:	ff 28                	jmp    FWORD PTR [eax]
9f004ca5:	f4                   	hlt    
9f004ca6:	ff                   	(bad)  
9f004ca7:	ff 21                	jmp    DWORD PTR [ecx]
9f004ca9:	d1 ff                	sar    edi,1
9f004cab:	ff 54 f4 ff          	call   DWORD PTR [esp+esi*8-0x1]
9f004caf:	ff 69 d5             	jmp    FWORD PTR [ecx-0x2b]
9f004cb2:	ff                   	(bad)  
9f004cb3:	ff                   	(bad)  
9f004cb4:	78 f4                	js     9f004caa <__GNU_EH_FRAME_HDR+0x1e6>
9f004cb6:	ff                   	(bad)  
9f004cb7:	ff 9c d5 ff ff 98 f4 	call   FWORD PTR [ebp+edx*8-0xb670001]
9f004cbe:	ff                   	(bad)  
9f004cbf:	ff 20                	jmp    DWORD PTR [eax]
9f004cc1:	d6                   	(bad)  
9f004cc2:	ff                   	(bad)  
9f004cc3:	ff                   	(bad)  
9f004cc4:	bc f4 ff ff 5e       	mov    esp,0x5efffff4
9f004cc9:	d6                   	(bad)  
9f004cca:	ff                   	(bad)  
9f004ccb:	ff e0                	jmp    eax
9f004ccd:	f4                   	hlt    
9f004cce:	ff                   	(bad)  
9f004ccf:	ff 9c d6 ff ff 04 f5 	call   FWORD PTR [esi+edx*8-0xafb0001]
9f004cd6:	ff                   	(bad)  
9f004cd7:	ff 0c d7             	dec    DWORD PTR [edi+edx*8]
9f004cda:	ff                   	(bad)  
9f004cdb:	ff 24 f5 ff ff 6c d7 	jmp    DWORD PTR [esi*8-0x28930001]
9f004ce2:	ff                   	(bad)  
9f004ce3:	ff 4c f5 ff          	dec    DWORD PTR [ebp+esi*8-0x1]
9f004ce7:	ff ac d7 ff ff 6c f5 	jmp    FWORD PTR [edi+edx*8-0xa930001]
9f004cee:	ff                   	(bad)  
9f004cef:	ff ec                	jmp    <internal disassembler error>
9f004cf1:	d7                   	xlat   BYTE PTR ds:[ebx]
9f004cf2:	ff                   	(bad)  
9f004cf3:	ff 8c f5 ff ff 34 d8 	dec    DWORD PTR [ebp+esi*8-0x27cb0001]
9f004cfa:	ff                   	(bad)  
9f004cfb:	ff ac f5 ff ff 64 d8 	jmp    FWORD PTR [ebp+esi*8-0x279b0001]
9f004d02:	ff                   	(bad)  
9f004d03:	ff cc                	dec    esp
9f004d05:	f5                   	cmc    
9f004d06:	ff                   	(bad)  
9f004d07:	ff c0                	inc    eax
9f004d09:	d8 ff                	fdivr  st,st(7)
9f004d0b:	ff ec                	jmp    <internal disassembler error>
9f004d0d:	f5                   	cmc    
9f004d0e:	ff                   	(bad)  
9f004d0f:	ff f1                	push   ecx
9f004d11:	d8 ff                	fdivr  st,st(7)
9f004d13:	ff 0c f6             	dec    DWORD PTR [esi+esi*8]
9f004d16:	ff                   	(bad)  
9f004d17:	ff 24 d9             	jmp    DWORD PTR [ecx+ebx*8]
9f004d1a:	ff                   	(bad)  
9f004d1b:	ff 2c f6             	jmp    FWORD PTR [esi+esi*8]
9f004d1e:	ff                   	(bad)  
9f004d1f:	ff 8b d9 ff ff 4c    	dec    DWORD PTR [ebx+0x4cffffd9]
9f004d25:	f6 ff                	idiv   bh
9f004d27:	ff f4                	push   esp
9f004d29:	d9 ff                	fcos   
9f004d2b:	ff 6c f6 ff          	jmp    FWORD PTR [esi+esi*8-0x1]
9f004d2f:	ff 54 da ff          	call   DWORD PTR [edx+ebx*8-0x1]
9f004d33:	ff 8c f6 ff ff 74 da 	dec    DWORD PTR [esi+esi*8-0x258b0001]
9f004d3a:	ff                   	(bad)  
9f004d3b:	ff ac f6 ff ff f4 db 	jmp    FWORD PTR [esi+esi*8-0x240b0001]
9f004d42:	ff                   	(bad)  
9f004d43:	ff dc                	call   <internal disassembler error>
9f004d45:	f6 ff                	idiv   bh
9f004d47:	ff 14 dc             	call   DWORD PTR [esp+ebx*8]
9f004d4a:	ff                   	(bad)  
9f004d4b:	ff                   	(bad)  
9f004d4c:	fc                   	cld    
9f004d4d:	f6 ff                	idiv   bh
9f004d4f:	ff b0 dd ff ff 2c    	push   DWORD PTR [eax+0x2cffffdd]
9f004d55:	f7 ff                	idiv   edi
9f004d57:	ff 46 de             	inc    DWORD PTR [esi-0x22]
9f004d5a:	ff                   	(bad)  
9f004d5b:	ff 50 f7             	call   DWORD PTR [eax-0x9]
9f004d5e:	ff                   	(bad)  
9f004d5f:	ff 68 de             	jmp    FWORD PTR [eax-0x22]
9f004d62:	ff                   	(bad)  
9f004d63:	ff 70 f7             	push   DWORD PTR [eax-0x9]
9f004d66:	ff                   	(bad)  
9f004d67:	ff d6                	call   esi
9f004d69:	de ff                	fdivp  st(7),st
9f004d6b:	ff 98 f7 ff ff f4    	call   FWORD PTR [eax-0xb000009]
9f004d71:	de ff                	fdivp  st(7),st
9f004d73:	ff                   	(bad)  
9f004d74:	b8 f7 ff ff 38       	mov    eax,0x38fffff7
9f004d79:	df ff                	(bad)  
9f004d7b:	ff e0                	jmp    eax
9f004d7d:	f7 ff                	idiv   edi
9f004d7f:	ff 51 e2             	call   DWORD PTR [ecx-0x1e]
9f004d82:	ff                   	(bad)  
9f004d83:	ff 08                	dec    DWORD PTR [eax]
9f004d85:	f8                   	clc    
9f004d86:	ff                   	(bad)  
9f004d87:	ff 6e e2             	jmp    FWORD PTR [esi-0x1e]
9f004d8a:	ff                   	(bad)  
9f004d8b:	ff 28                	jmp    FWORD PTR [eax]
9f004d8d:	f8                   	clc    
9f004d8e:	ff                   	(bad)  
9f004d8f:	ff ad e2 ff ff 4c    	jmp    FWORD PTR [ebp+0x4cffffe2]
9f004d95:	f8                   	clc    
9f004d96:	ff                   	(bad)  
9f004d97:	ff e2                	jmp    edx
9f004d99:	e2 ff                	loop   9f004d9a <__GNU_EH_FRAME_HDR+0x2d6>
9f004d9b:	ff 6c f8 ff          	jmp    FWORD PTR [eax+edi*8-0x1]
9f004d9f:	ff                   	(bad)  
9f004da0:	ff e2                	jmp    edx
9f004da2:	ff                   	(bad)  
9f004da3:	ff 8c f8 ff ff 56 eb 	dec    DWORD PTR [eax+edi*8-0x14a90001]
9f004daa:	ff                   	(bad)  
9f004dab:	ff                   	(bad)  
9f004dac:	bc f8 ff ff c3       	mov    esp,0xc3fffff8
9f004db1:	eb ff                	jmp    9f004db2 <__GNU_EH_FRAME_HDR+0x2ee>
9f004db3:	ff 4c ec ff          	dec    DWORD PTR [esp+ebp*8-0x1]
9f004db7:	ff ec                	jmp    <internal disassembler error>
9f004db9:	eb ff                	jmp    9f004dba <__GNU_EH_FRAME_HDR+0x2f6>
9f004dbb:	ff d8                	call   <internal disassembler error>
9f004dbd:	ec                   	in     al,dx
9f004dbe:	ff                   	(bad)  
9f004dbf:	ff f0                	push   eax
9f004dc1:	eb ff                	jmp    9f004dc2 <__GNU_EH_FRAME_HDR+0x2fe>
9f004dc3:	ff e4                	jmp    esp
9f004dc5:	f8                   	clc    
9f004dc6:	ff                   	(bad)  
9f004dc7:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f004de0 <digits.1390-0x3ac>:
9f004de0:	3d 00 53 74 72       	cmp    eax,0x72745300
9f004de5:	65                   	gs
9f004de6:	61                   	popa   
9f004de7:	6d                   	ins    DWORD PTR es:[edi],dx
9f004de8:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f004dee:	74 20                	je     9f004e10 <__GNU_EH_FRAME_HDR+0x34c>
9f004df0:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f004df7:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004df8:	74 65                	je     9f004e5f <__GNU_EH_FRAME_HDR+0x39b>
9f004dfa:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f004dfd:	00 00                	add    BYTE PTR [eax],al
9f004dff:	00 2a                	add    BYTE PTR [edx],ch
9f004e01:	2a 2a                	sub    ch,BYTE PTR [edx]
9f004e03:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e04:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f004e0b:	74 20                	je     9f004e2d <__GNU_EH_FRAME_HDR+0x369>
9f004e0d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f004e10:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e11:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
9f004e15:	2a 2a                	sub    ch,BYTE PTR [edx]
9f004e17:	00 2a                	add    BYTE PTR [edx],ch
9f004e19:	2a 2a                	sub    ch,BYTE PTR [edx]
9f004e1b:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e1c:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f004e23:	74 20                	je     9f004e45 <__GNU_EH_FRAME_HDR+0x381>
9f004e25:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f004e28:	70 6c                	jo     9f004e96 <__GNU_EH_FRAME_HDR+0x3d2>
9f004e2a:	65                   	gs
9f004e2b:	74 65                	je     9f004e92 <__GNU_EH_FRAME_HDR+0x3ce>
9f004e2d:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f004e30:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e31:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f004e38:	74 20                	je     9f004e5a <__GNU_EH_FRAME_HDR+0x396>
9f004e3a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f004e3d:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e3e:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f004e43:	65                   	gs
9f004e44:	76 69                	jbe    9f004eaf <__GNU_EH_FRAME_HDR+0x3eb>
9f004e46:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004e47:	75 73                	jne    9f004ebc <__GNU_EH_FRAME_HDR+0x3f8>
9f004e49:	6c                   	ins    BYTE PTR es:[edi],dx
9f004e4a:	79 2c                	jns    9f004e78 <__GNU_EH_FRAME_HDR+0x3b4>
9f004e4c:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f004e4f:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f004e56:	6c 
9f004e57:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f004e5e:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f004e61:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f004e63:	72 20                	jb     9f004e85 <__GNU_EH_FRAME_HDR+0x3c1>
9f004e65:	25 73 0a 00 20       	and    eax,0x20000a73
9f004e6a:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f004e6e:	63 3a                	arpl   WORD PTR [edx],di
9f004e70:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f004e73:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f004e77:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f004e79:	72 20                	jb     9f004e9b <__GNU_EH_FRAME_HDR+0x3d7>
9f004e7b:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f004e80:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f004e87:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f004e8b:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f004e8d:	72 20                	jb     9f004eaf <__GNU_EH_FRAME_HDR+0x3eb>
9f004e8f:	25 73 0a 00 00       	and    eax,0xa73
9f004e94:	68 65 61 70 42       	push   0x42706165
9f004e99:	61                   	popa   
9f004e9a:	73 65                	jae    9f004f01 <__GNU_EH_FRAME_HDR+0x43d>
9f004e9c:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f004e9f:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f004ea2:	30 38                	xor    BYTE PTR [eax],bh
9f004ea4:	58                   	pop    eax
9f004ea5:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f004eab:	30 38                	xor    BYTE PTR [eax],bh
9f004ead:	58                   	pop    eax
9f004eae:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f004eb1:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f004eb3:	72 65                	jb     9f004f1a <__GNU_EH_FRAME_HDR+0x456>
9f004eb5:	0a 00                	or     al,BYTE PTR [eax]
9f004eb7:	6d                   	ins    DWORD PTR es:[edi],dx
9f004eb8:	61                   	popa   
9f004eb9:	6c                   	ins    BYTE PTR es:[edi],dx
9f004eba:	6c                   	ins    BYTE PTR es:[edi],dx
9f004ebb:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004ebc:	63 28                	arpl   WORD PTR [eax],bp
9f004ebe:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004ec1:	30 38                	xor    BYTE PTR [eax],bh
9f004ec3:	58                   	pop    eax
9f004ec4:	29 0a                	sub    DWORD PTR [edx],ecx
9f004ec6:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f004eca:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f004ecd:	61                   	popa   
9f004ece:	6c                   	ins    BYTE PTR es:[edi],dx
9f004ecf:	6c                   	ins    BYTE PTR es:[edi],dx
9f004ed0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004ed1:	63 3a                	arpl   WORD PTR [edx],di
9f004ed3:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f004ed6:	65                   	gs
9f004ed7:	64                   	fs
9f004ed8:	65                   	gs
9f004ed9:	64                   	fs
9f004eda:	3d 30 78 25 30       	cmp    eax,0x30257830
9f004edf:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f004ee2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f004ee6:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f004ee9:	61                   	popa   
9f004eea:	6c                   	ins    BYTE PTR es:[edi],dx
9f004eeb:	6c                   	ins    BYTE PTR es:[edi],dx
9f004eec:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004eed:	63 3a                	arpl   WORD PTR [edx],di
9f004eef:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f004ef2:	61                   	popa   
9f004ef3:	45                   	inc    ebp
9f004ef4:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004ef5:	64                   	fs
9f004ef6:	3d 30 78 25 30       	cmp    eax,0x30257830
9f004efb:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f004efe:	00 00                	add    BYTE PTR [eax],al
9f004f00:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f01:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f004f08:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f09:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004f0a:	63 3a                	arpl   WORD PTR [edx],di
9f004f0c:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f004f0f:	71 20                	jno    9f004f31 <__GNU_EH_FRAME_HDR+0x46d>
9f004f11:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004f14:	30 38                	xor    BYTE PTR [eax],bh
9f004f16:	58                   	pop    eax
9f004f17:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f004f1a:	74 65                	je     9f004f81 <__GNU_EH_FRAME_HDR+0x4bd>
9f004f1c:	73 2c                	jae    9f004f4a <__GNU_EH_FRAME_HDR+0x486>
9f004f1e:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f004f21:	74 20                	je     9f004f43 <__GNU_EH_FRAME_HDR+0x47f>
9f004f23:	77 61                	ja     9f004f86 <__GNU_EH_FRAME_HDR+0x4c2>
9f004f25:	73 20                	jae    9f004f47 <__GNU_EH_FRAME_HDR+0x483>
9f004f27:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004f2a:	30 38                	xor    BYTE PTR [eax],bh
9f004f2c:	58                   	pop    eax
9f004f2d:	2c 20                	sub    al,0x20
9f004f2f:	68 65 61 70 45       	push   0x45706165
9f004f34:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004f35:	64                   	fs
9f004f36:	3d 30 78 25 30       	cmp    eax,0x30257830
9f004f3b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f004f3e:	00 00                	add    BYTE PTR [eax],al
9f004f40:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f41:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f004f48:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f49:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004f4a:	63 3a                	arpl   WORD PTR [edx],di
9f004f4c:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f004f4f:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f004f56:	65 
9f004f57:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f004f5b:	61                   	popa   
9f004f5c:	70 43                	jo     9f004fa1 <__GNU_EH_FRAME_HDR+0x4dd>
9f004f5e:	75 72                	jne    9f004fd2 <__GNU_EH_FRAME_HDR+0x50e>
9f004f60:	72 20                	jb     9f004f82 <__GNU_EH_FRAME_HDR+0x4be>
9f004f62:	61                   	popa   
9f004f63:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004f64:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f004f68:	61                   	popa   
9f004f69:	70 42                	jo     9f004fad <__GNU_EH_FRAME_HDR+0x4e9>
9f004f6b:	61                   	popa   
9f004f6c:	73 65                	jae    9f004fd3 <__GNU_EH_FRAME_HDR+0x50f>
9f004f6e:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f004f72:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004f75:	30 38                	xor    BYTE PTR [eax],bh
9f004f77:	58                   	pop    eax
9f004f78:	0a 00                	or     al,BYTE PTR [eax]
9f004f7a:	00 00                	add    BYTE PTR [eax],al
9f004f7c:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f7d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f004f84:	6c                   	ins    BYTE PTR es:[edi],dx
9f004f85:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004f86:	63 3a                	arpl   WORD PTR [edx],di
9f004f88:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f004f8b:	61                   	popa   
9f004f8c:	74 69                	je     9f004ff7 <__GNU_EH_FRAME_HDR+0x533>
9f004f8e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f004f8f:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f004f93:	61                   	popa   
9f004f94:	70 20                	jo     9f004fb6 <__GNU_EH_FRAME_HDR+0x4f2>
9f004f96:	72 65                	jb     9f004ffd <__GNU_EH_FRAME_HDR+0x539>
9f004f98:	63 20                	arpl   WORD PTR [eax],sp
9f004f9a:	40                   	inc    eax
9f004f9b:	20 30                	and    BYTE PTR [eax],dh
9f004f9d:	78 25                	js     9f004fc4 <__GNU_EH_FRAME_HDR+0x500>
9f004f9f:	30 38                	xor    BYTE PTR [eax],bh
9f004fa1:	58                   	pop    eax
9f004fa2:	0a 00                	or     al,BYTE PTR [eax]
9f004fa4:	6c                   	ins    BYTE PTR es:[edi],dx
9f004fa5:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f004fac:	6c                   	ins    BYTE PTR es:[edi],dx
9f004fad:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004fae:	63 3a                	arpl   WORD PTR [edx],di
9f004fb0:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f004fb3:	61                   	popa   
9f004fb4:	70 43                	jo     9f004ff9 <__GNU_EH_FRAME_HDR+0x535>
9f004fb6:	75 72                	jne    9f00502a <__GNU_EH_FRAME_HDR+0x566>
9f004fb8:	72 3d                	jb     9f004ff7 <__GNU_EH_FRAME_HDR+0x533>
9f004fba:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f004fbd:	30 38                	xor    BYTE PTR [eax],bh
9f004fbf:	58                   	pop    eax
9f004fc0:	2c 20                	sub    al,0x20
9f004fc2:	73 69                	jae    9f00502d <__GNU_EH_FRAME_HDR+0x569>
9f004fc4:	7a 65                	jp     9f00502b <__GNU_EH_FRAME_HDR+0x567>
9f004fc6:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004fc7:	66                   	data16
9f004fc8:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
9f004fcb:	61                   	popa   
9f004fcc:	70 72                	jo     9f005040 <__GNU_EH_FRAME_HDR+0x57c>
9f004fce:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
9f004fd2:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
9f004fd8:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f004fdb:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f004fde:	6c                   	ins    BYTE PTR es:[edi],dx
9f004fdf:	6c                   	ins    BYTE PTR es:[edi],dx
9f004fe0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f004fe1:	63 3a                	arpl   WORD PTR [edx],di
9f004fe3:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f004fe6:	74 75                	je     9f00505d <__GNU_EH_FRAME_HDR+0x599>
9f004fe8:	72 6e                	jb     9f005058 <__GNU_EH_FRAME_HDR+0x594>
9f004fea:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f004ff1:	30 38                	xor    BYTE PTR [eax],bh
9f004ff3:	58                   	pop    eax
9f004ff4:	0a 00                	or     al,BYTE PTR [eax]
9f004ff6:	00 00                	add    BYTE PTR [eax],al
9f004ff8:	e1 c7                	loope  9f004fc1 <__GNU_EH_FRAME_HDR+0x4fd>
9f004ffa:	ff                   	(bad)  
9f004ffb:	ff f3                	push   ebx
9f004ffd:	c7                   	(bad)  
9f004ffe:	ff                   	(bad)  
9f004fff:	ff f3                	push   ebx
9f005001:	c7                   	(bad)  
9f005002:	ff                   	(bad)  
9f005003:	ff e7                	jmp    edi
9f005005:	c7                   	(bad)  
9f005006:	ff                   	(bad)  
9f005007:	ff f3                	push   ebx
9f005009:	c7                   	(bad)  
9f00500a:	ff                   	(bad)  
9f00500b:	ff f3                	push   ebx
9f00500d:	c7                   	(bad)  
9f00500e:	ff                   	(bad)  
9f00500f:	ff f3                	push   ebx
9f005011:	c7                   	(bad)  
9f005012:	ff                   	(bad)  
9f005013:	ff f3                	push   ebx
9f005015:	c7                   	(bad)  
9f005016:	ff                   	(bad)  
9f005017:	ff f3                	push   ebx
9f005019:	c7                   	(bad)  
9f00501a:	ff                   	(bad)  
9f00501b:	ff f3                	push   ebx
9f00501d:	c7                   	(bad)  
9f00501e:	ff                   	(bad)  
9f00501f:	ff f3                	push   ebx
9f005021:	c7                   	(bad)  
9f005022:	ff                   	(bad)  
9f005023:	ff db                	call   <internal disassembler error>
9f005025:	c7                   	(bad)  
9f005026:	ff                   	(bad)  
9f005027:	ff f3                	push   ebx
9f005029:	c7                   	(bad)  
9f00502a:	ff                   	(bad)  
9f00502b:	ff d5                	call   ebp
9f00502d:	c7                   	(bad)  
9f00502e:	ff                   	(bad)  
9f00502f:	ff f3                	push   ebx
9f005031:	c7                   	(bad)  
9f005032:	ff                   	(bad)  
9f005033:	ff f3                	push   ebx
9f005035:	c7                   	(bad)  
9f005036:	ff                   	(bad)  
9f005037:	ff ed                	jmp    <internal disassembler error>
9f005039:	c7                   	(bad)  
9f00503a:	ff                   	(bad)  
9f00503b:	ff 92 ca ff ff bf    	call   DWORD PTR [edx-0x40000036]
9f005041:	ca ff ff             	retf   0xffff
9f005044:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005049:	ca ff ff             	retf   0xffff
9f00504c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005051:	ca ff ff             	retf   0xffff
9f005054:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005059:	ca ff ff             	retf   0xffff
9f00505c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005061:	ca ff ff             	retf   0xffff
9f005064:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005069:	ca ff ff             	retf   0xffff
9f00506c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005071:	ca ff ff             	retf   0xffff
9f005074:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005079:	ca ff ff             	retf   0xffff
9f00507c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005081:	ca ff ff             	retf   0xffff
9f005084:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005089:	ca ff ff             	retf   0xffff
9f00508c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005091:	ca ff ff             	retf   0xffff
9f005094:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005099:	ca ff ff             	retf   0xffff
9f00509c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050a1:	ca ff ff             	retf   0xffff
9f0050a4:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050a9:	ca ff ff             	retf   0xffff
9f0050ac:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050b1:	ca ff ff             	retf   0xffff
9f0050b4:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050b9:	ca ff ff             	retf   0xffff
9f0050bc:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050c1:	ca ff ff             	retf   0xffff
9f0050c4:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050c9:	ca ff ff             	retf   0xffff
9f0050cc:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050d1:	ca ff ff             	retf   0xffff
9f0050d4:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050d9:	ca ff ff             	retf   0xffff
9f0050dc:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050e1:	ca ff ff             	retf   0xffff
9f0050e4:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050e9:	ca ff ff             	retf   0xffff
9f0050ec:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050f1:	ca ff ff             	retf   0xffff
9f0050f4:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f0050f9:	ca ff ff             	retf   0xffff
9f0050fc:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005101:	ca ff ff             	retf   0xffff
9f005104:	bf ca ff ff b0       	mov    edi,0xb0ffffca
9f005109:	ca ff ff             	retf   0xffff
9f00510c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005111:	ca ff ff             	retf   0xffff
9f005114:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005119:	ca ff ff             	retf   0xffff
9f00511c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005121:	ca ff ff             	retf   0xffff
9f005124:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005129:	ca ff ff             	retf   0xffff
9f00512c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005131:	ca ff ff             	retf   0xffff
9f005134:	18 c9                	sbb    cl,cl
9f005136:	ff                   	(bad)  
9f005137:	ff                   	(bad)  
9f005138:	b9 ca ff ff bf       	mov    ecx,0xbfffffca
9f00513d:	ca ff ff             	retf   0xffff
9f005140:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005145:	ca ff ff             	retf   0xffff
9f005148:	bf ca ff ff b9       	mov    edi,0xb9ffffca
9f00514d:	ca ff ff             	retf   0xffff
9f005150:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005155:	ca ff ff             	retf   0xffff
9f005158:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f00515d:	ca ff ff             	retf   0xffff
9f005160:	4c                   	dec    esp
9f005161:	ca ff ff             	retf   0xffff
9f005164:	a3 ca ff ff 0e       	mov    ds:0xeffffca,eax
9f005169:	ca ff ff             	retf   0xffff
9f00516c:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005171:	ca ff ff             	retf   0xffff
9f005174:	6d                   	ins    DWORD PTR es:[edi],dx
9f005175:	c9                   	leave  
9f005176:	ff                   	(bad)  
9f005177:	ff                   	(bad)  
9f005178:	bf ca ff ff f9       	mov    edi,0xf9ffffca
9f00517d:	ca ff ff             	retf   0xffff
9f005180:	bf ca ff ff bf       	mov    edi,0xbfffffca
9f005185:	ca ff ff             	retf   0xffff
9f005188:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005189:	ca ff ff             	retf   0xffff

9f00518c <digits.1390>:
9f00518c:	30 31                	xor    BYTE PTR [ecx],dh
9f00518e:	32 33                	xor    dh,BYTE PTR [ebx]
9f005190:	34 35                	xor    al,0x35
9f005192:	36                   	ss
9f005193:	37                   	aaa    
9f005194:	38 39                	cmp    BYTE PTR [ecx],bh
9f005196:	41                   	inc    ecx
9f005197:	42                   	inc    edx
9f005198:	43                   	inc    ebx
9f005199:	44                   	inc    esp
9f00519a:	45                   	inc    ebp
9f00519b:	46                   	inc    esi
9f00519c:	00 00                	add    BYTE PTR [eax],al
9f00519e:	00 00                	add    BYTE PTR [eax],al
9f0051a0:	47                   	inc    edi
9f0051a1:	4d                   	dec    ebp
9f0051a2:	54                   	push   esp
	...

9f0051c0 <_ytab>:
9f0051c0:	1f                   	pop    ds
9f0051c1:	00 00                	add    BYTE PTR [eax],al
9f0051c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0051c6:	00 00                	add    BYTE PTR [eax],al
9f0051c8:	1f                   	pop    ds
9f0051c9:	00 00                	add    BYTE PTR [eax],al
9f0051cb:	00 1e                	add    BYTE PTR [esi],bl
9f0051cd:	00 00                	add    BYTE PTR [eax],al
9f0051cf:	00 1f                	add    BYTE PTR [edi],bl
9f0051d1:	00 00                	add    BYTE PTR [eax],al
9f0051d3:	00 1e                	add    BYTE PTR [esi],bl
9f0051d5:	00 00                	add    BYTE PTR [eax],al
9f0051d7:	00 1f                	add    BYTE PTR [edi],bl
9f0051d9:	00 00                	add    BYTE PTR [eax],al
9f0051db:	00 1f                	add    BYTE PTR [edi],bl
9f0051dd:	00 00                	add    BYTE PTR [eax],al
9f0051df:	00 1e                	add    BYTE PTR [esi],bl
9f0051e1:	00 00                	add    BYTE PTR [eax],al
9f0051e3:	00 1f                	add    BYTE PTR [edi],bl
9f0051e5:	00 00                	add    BYTE PTR [eax],al
9f0051e7:	00 1e                	add    BYTE PTR [esi],bl
9f0051e9:	00 00                	add    BYTE PTR [eax],al
9f0051eb:	00 1f                	add    BYTE PTR [edi],bl
9f0051ed:	00 00                	add    BYTE PTR [eax],al
9f0051ef:	00 1f                	add    BYTE PTR [edi],bl
9f0051f1:	00 00                	add    BYTE PTR [eax],al
9f0051f3:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f0051f9:	00 00                	add    BYTE PTR [eax],al
9f0051fb:	00 1e                	add    BYTE PTR [esi],bl
9f0051fd:	00 00                	add    BYTE PTR [eax],al
9f0051ff:	00 1f                	add    BYTE PTR [edi],bl
9f005201:	00 00                	add    BYTE PTR [eax],al
9f005203:	00 1e                	add    BYTE PTR [esi],bl
9f005205:	00 00                	add    BYTE PTR [eax],al
9f005207:	00 1f                	add    BYTE PTR [edi],bl
9f005209:	00 00                	add    BYTE PTR [eax],al
9f00520b:	00 1f                	add    BYTE PTR [edi],bl
9f00520d:	00 00                	add    BYTE PTR [eax],al
9f00520f:	00 1e                	add    BYTE PTR [esi],bl
9f005211:	00 00                	add    BYTE PTR [eax],al
9f005213:	00 1f                	add    BYTE PTR [edi],bl
9f005215:	00 00                	add    BYTE PTR [eax],al
9f005217:	00 1e                	add    BYTE PTR [esi],bl
9f005219:	00 00                	add    BYTE PTR [eax],al
9f00521b:	00 1f                	add    BYTE PTR [edi],bl
9f00521d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f005220 <.rel.dyn>:
9f005220:	64                   	fs
9f005221:	54                   	push   esp
9f005222:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005228:	68 54 00 9f 08       	push   0x89f0054
9f00522d:	00 00                	add    BYTE PTR [eax],al
9f00522f:	00 6c 54 00          	add    BYTE PTR [esp+edx*2+0x0],ch
9f005233:	9f                   	lahf   
9f005234:	08 00                	or     BYTE PTR [eax],al
9f005236:	00 00                	add    BYTE PTR [eax],al
9f005238:	70 54                	jo     9f00528e <_ytab+0xce>
9f00523a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005240:	74 54                	je     9f005296 <_ytab+0xd6>
9f005242:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005248:	78 54                	js     9f00529e <_ytab+0xde>
9f00524a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005250:	90                   	nop
9f005251:	54                   	push   esp
9f005252:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005258:	94                   	xchg   esp,eax
9f005259:	54                   	push   esp
9f00525a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005260:	98                   	cwde   
9f005261:	54                   	push   esp
9f005262:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f005268:	7e 07                	jle    9f005271 <_ytab+0xb1>
9f00526a:	00 9f 02 24 00 00    	add    BYTE PTR [edi+0x2402],bl
9f005270:	be 07 00 9f 02       	mov    esi,0x29f0007
9f005275:	24 00                	and    al,0x0
9f005277:	00 e7                	add    bh,ah
9f005279:	07                   	pop    es
9f00527a:	00 9f 02 24 00 00    	add    BYTE PTR [edi+0x2402],bl
9f005280:	00 08                	add    BYTE PTR [eax],cl
9f005282:	00 9f 02 24 00 00    	add    BYTE PTR [edi+0x2402],bl
9f005288:	58                   	pop    eax
9f005289:	08 00                	or     BYTE PTR [eax],al
9f00528b:	9f                   	lahf   
9f00528c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
9f00528f:	00 bb 08 00 9f 02    	add    BYTE PTR [ebx+0x29f0008],bh
9f005295:	24 00                	and    al,0x0
9f005297:	00 f1                	add    cl,dh
9f005299:	08 00                	or     BYTE PTR [eax],al
9f00529b:	9f                   	lahf   
9f00529c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
9f00529f:	00 2d 09 00 9f 02    	add    BYTE PTR ds:0x29f0009,ch
9f0052a5:	24 00                	and    al,0x0
9f0052a7:	00 6b 09             	add    BYTE PTR [ebx+0x9],ch
9f0052aa:	00 9f 02 24 00 00    	add    BYTE PTR [edi+0x2402],bl
9f0052b0:	ab                   	stos   DWORD PTR es:[edi],eax
9f0052b1:	09 00                	or     DWORD PTR [eax],eax
9f0052b3:	9f                   	lahf   
9f0052b4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
9f0052b7:	00 ed                	add    ch,ch
9f0052b9:	09 00                	or     DWORD PTR [eax],eax
9f0052bb:	9f                   	lahf   
9f0052bc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
9f0052bf:	00 2b                	add    BYTE PTR [ebx],ch
9f0052c1:	0c 00                	or     al,0x0
9f0052c3:	9f                   	lahf   
9f0052c4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
9f0052c7:	00 58 0c             	add    BYTE PTR [eax+0xc],bl
9f0052ca:	00 9f 02 24 00 00    	add    BYTE PTR [edi+0x2402],bl
9f0052d0:	ce                   	into   
9f0052d1:	0c 00                	or     al,0x0
9f0052d3:	9f                   	lahf   
9f0052d4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
9f0052d7:	00 eb                	add    bl,ch
9f0052d9:	29 00                	sub    DWORD PTR [eax],eax
9f0052db:	9f                   	lahf   
9f0052dc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
9f0052df:	00 53 36             	add    BYTE PTR [ebx+0x36],dl
9f0052e2:	00 9f 02 24 00 00    	add    BYTE PTR [edi+0x2402],bl
9f0052e8:	8c 54 00 9f          	mov    WORD PTR [eax+eax*1-0x61],ss
9f0052ec:	01 13                	add    DWORD PTR [ebx],edx
9f0052ee:	00 00                	add    BYTE PTR [eax],al
9f0052f0:	88 54 00 9f          	mov    BYTE PTR [eax+eax*1-0x61],dl
9f0052f4:	07                   	pop    es
9f0052f5:	11 00                	adc    DWORD PTR [eax],eax
	...

Disassembly of section .data:

9f005300 <console_node>:
9f005300:	01 00                	add    DWORD PTR [eax],eax
	...

9f005340 <rcsid>:
9f005340:	24 48                	and    al,0x48
9f005342:	65                   	gs
9f005343:	61                   	popa   
9f005344:	64                   	fs
9f005345:	65                   	gs
9f005346:	72 3a                	jb     9f005382 <rcsid+0x42>
9f005348:	20 2f                	and    BYTE PTR [edi],ch
9f00534a:	75 73                	jne    9f0053bf <_DYNAMIC+0x13>
9f00534c:	65                   	gs
9f00534d:	72 36                	jb     9f005385 <rcsid+0x45>
9f00534f:	2f                   	das    
9f005350:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005351:	75 73                	jne    9f0053c6 <_DYNAMIC+0x1a>
9f005353:	74 65                	je     9f0053ba <_DYNAMIC+0xe>
9f005355:	72 2f                	jb     9f005386 <rcsid+0x46>
9f005357:	74 63                	je     9f0053bc <_DYNAMIC+0x10>
9f005359:	6c                   	ins    BYTE PTR es:[edi],dx
9f00535a:	2f                   	das    
9f00535b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00535e:	70 61                	jo     9f0053c1 <_DYNAMIC+0x15>
9f005360:	74 2f                	je     9f005391 <rcsid+0x51>
9f005362:	52                   	push   edx
9f005363:	43                   	inc    ebx
9f005364:	53                   	push   ebx
9f005365:	2f                   	das    
9f005366:	73 74                	jae    9f0053dc <_DYNAMIC+0x30>
9f005368:	72 73                	jb     9f0053dd <_DYNAMIC+0x31>
9f00536a:	74 72                	je     9f0053de <_DYNAMIC+0x32>
9f00536c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f005370:	20 31                	and    BYTE PTR [ecx],dh
9f005372:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f005375:	39 33                	cmp    DWORD PTR [ebx],esi
9f005377:	2f                   	das    
9f005378:	30 33                	xor    BYTE PTR [ebx],dh
9f00537a:	2f                   	das    
9f00537b:	31 39                	xor    DWORD PTR [ecx],edi
9f00537d:	20 31                	and    BYTE PTR [ecx],dh
9f00537f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f005384:	34 30                	xor    al,0x30
9f005386:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f005389:	73 74                	jae    9f0053ff <_DYNAMIC+0x53>
9f00538b:	65                   	gs
9f00538c:	72 20                	jb     9f0053ae <_DYNAMIC+0x2>
9f00538e:	45                   	inc    ebp
9f00538f:	78 70                	js     9f005401 <_DYNAMIC+0x55>
9f005391:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f005394:	53                   	push   ebx
9f005395:	50                   	push   eax
9f005396:	52                   	push   edx
9f005397:	49                   	dec    ecx
9f005398:	54                   	push   esp
9f005399:	45                   	inc    ebp
9f00539a:	20 28                	and    BYTE PTR [eax],ch
9f00539c:	42                   	inc    edx
9f00539d:	65                   	gs
9f00539e:	72 6b                	jb     9f00540b <_DYNAMIC+0x5f>
9f0053a0:	65                   	gs
9f0053a1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0053a2:	65                   	gs
9f0053a3:	79 29                	jns    9f0053ce <_DYNAMIC+0x22>
9f0053a5:	00 00                	add    BYTE PTR [eax],al
	...

9f0053a8 <_daylight>:
9f0053a8:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f0053ac <_DYNAMIC>:
9f0053ac:	19 00                	sbb    DWORD PTR [eax],eax
9f0053ae:	00 00                	add    BYTE PTR [eax],al
9f0053b0:	8c 54 00 9f          	mov    WORD PTR [eax+eax*1-0x61],ss
9f0053b4:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0053b6:	00 00                	add    BYTE PTR [eax],al
9f0053b8:	04 00                	add    al,0x0
9f0053ba:	00 00                	add    BYTE PTR [eax],al
9f0053bc:	1a 00                	sbb    al,BYTE PTR [eax]
9f0053be:	00 00                	add    BYTE PTR [eax],al
9f0053c0:	90                   	nop
9f0053c1:	54                   	push   esp
9f0053c2:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
9f0053c8:	04 00                	add    al,0x0
9f0053ca:	00 00                	add    BYTE PTR [eax],al
9f0053cc:	04 00                	add    al,0x0
9f0053ce:	00 00                	add    BYTE PTR [eax],al
9f0053d0:	00 49 00             	add    BYTE PTR [ecx+0x0],cl
9f0053d3:	9f                   	lahf   
9f0053d4:	05 00 00 00 5c       	add    eax,0x5c000000
9f0053d9:	47                   	inc    edi
9f0053da:	00 9f 06 00 00 00    	add    BYTE PTR [edi+0x6],bl
9f0053e0:	bc 43 00 9f 0a       	mov    esp,0xa9f0043
9f0053e5:	00 00                	add    BYTE PTR [eax],al
9f0053e7:	00 a2 01 00 00 0b    	add    BYTE PTR [edx+0xb000001],ah
9f0053ed:	00 00                	add    BYTE PTR [eax],al
9f0053ef:	00 10                	add    BYTE PTR [eax],dl
9f0053f1:	00 00                	add    BYTE PTR [eax],al
9f0053f3:	00 03                	add    BYTE PTR [ebx],al
9f0053f5:	00 00                	add    BYTE PTR [eax],al
9f0053f7:	00 7c 54 00          	add    BYTE PTR [esp+edx*2+0x0],bh
9f0053fb:	9f                   	lahf   
9f0053fc:	02 00                	add    al,BYTE PTR [eax]
9f0053fe:	00 00                	add    BYTE PTR [eax],al
9f005400:	08 00                	or     BYTE PTR [eax],al
9f005402:	00 00                	add    BYTE PTR [eax],al
9f005404:	14 00                	adc    al,0x0
9f005406:	00 00                	add    BYTE PTR [eax],al
9f005408:	11 00                	adc    DWORD PTR [eax],eax
9f00540a:	00 00                	add    BYTE PTR [eax],al
9f00540c:	17                   	pop    ss
9f00540d:	00 00                	add    BYTE PTR [eax],al
9f00540f:	00 f0                	add    al,dh
9f005411:	52                   	push   edx
9f005412:	00 9f 11 00 00 00    	add    BYTE PTR [edi+0x11],bl
9f005418:	20 52 00             	and    BYTE PTR [edx+0x0],dl
9f00541b:	9f                   	lahf   
9f00541c:	12 00                	adc    al,BYTE PTR [eax]
9f00541e:	00 00                	add    BYTE PTR [eax],al
9f005420:	d0 00                	rol    BYTE PTR [eax],1
9f005422:	00 00                	add    BYTE PTR [eax],al
9f005424:	13 00                	adc    eax,DWORD PTR [eax]
9f005426:	00 00                	add    BYTE PTR [eax],al
9f005428:	08 00                	or     BYTE PTR [eax],al
9f00542a:	00 00                	add    BYTE PTR [eax],al
9f00542c:	16                   	push   ss
9f00542d:	00 00                	add    BYTE PTR [eax],al
9f00542f:	00 00                	add    BYTE PTR [eax],al
9f005431:	00 00                	add    BYTE PTR [eax],al
9f005433:	00 fa                	add    dl,bh
9f005435:	ff                   	(bad)  
9f005436:	ff 6f 09             	jmp    FWORD PTR [edi+0x9]
	...

Disassembly of section .got:

9f005464 <.got>:
9f005464:	9c                   	pushf  
9f005465:	54                   	push   esp
9f005466:	00 9f b8 54 00 9f    	add    BYTE PTR [edi-0x60ffab48],bl
9f00546c:	a0 54 00 9f a4       	mov    al,ds:0xa49f0054
9f005471:	54                   	push   esp
9f005472:	00 9f a8 54 00 9f    	add    BYTE PTR [edi-0x60ffab58],bl
9f005478:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005479:	54                   	push   esp
9f00547a:	00                   	.byte 0x0
9f00547b:	9f                   	lahf   

Disassembly of section .got.plt:

9f00547c <_GLOBAL_OFFSET_TABLE_>:
9f00547c:	ac                   	lods   al,BYTE PTR ds:[esi]
9f00547d:	53                   	push   ebx
9f00547e:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f005484:	00 00                	add    BYTE PTR [eax],al
9f005486:	00 00                	add    BYTE PTR [eax],al
9f005488:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f005489:	36                   	ss
9f00548a:	00                   	.byte 0x0
9f00548b:	9f                   	lahf   

Disassembly of section .init_array:

9f00548c <.init_array>:
9f00548c:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f005490 <.fini_array>:
9f005490:	bd                   	.byte 0xbd
9f005491:	0a 00                	or     al,BYTE PTR [eax]
9f005493:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f005494 <_tzname>:
9f005494:	a0 51 00 9f a0       	mov    al,ds:0xa09f0051
9f005499:	51                   	push   ecx
9f00549a:	00                   	.byte 0x0
9f00549b:	9f                   	lahf   

Disassembly of section .bss:

9f00549c <heapEnd>:
9f00549c:	00 00                	add    BYTE PTR [eax],al
	...

9f0054a0 <heapBase>:
9f0054a0:	00 00                	add    BYTE PTR [eax],al
	...

9f0054a4 <heapCurr>:
9f0054a4:	00 00                	add    BYTE PTR [eax],al
	...

9f0054a8 <processEnvp>:
9f0054a8:	00 00                	add    BYTE PTR [eax],al
	...

9f0054ac <libcTZ>:
9f0054ac:	00 00                	add    BYTE PTR [eax],al
	...

9f0054b0 <lasts.1385>:
9f0054b0:	00 00                	add    BYTE PTR [eax],al
	...

9f0054b4 <libcInitialized>:
9f0054b4:	00 00                	add    BYTE PTR [eax],al
	...

9f0054b8 <printBuffer>:
9f0054b8:	00 00                	add    BYTE PTR [eax],al
	...

9f0054bc <fops>:
	...

9f0054c4 <console_file>:
	...

9f0054d4 <_dstbias>:
9f0054d4:	00 00                	add    BYTE PTR [eax],al
	...

9f0054d8 <ticksToWait>:
9f0054d8:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	5f                   	pop    edi
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	f4                   	hlt    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c b8             	add    BYTE PTR [eax+edi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 72 00             	add    BYTE PTR [edx+0x0],dh
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	64 00 00             	add    BYTE PTR fs:[eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	5d                   	pop    ebp
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
      5d:	61                   	popa   
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	3e 00 00             	add    BYTE PTR ds:[eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	34 00                	xor    al,0x0
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	9b                   	fwait
      7a:	00 00                	add    BYTE PTR [eax],al
      7c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
      82:	00 06                	add    BYTE PTR [esi],al
      84:	25 00 00 00 02       	and    eax,0x2000000
      89:	01 02                	add    DWORD PTR [edx],eax
      8b:	95                   	xchg   ebp,eax
      8c:	00 00                	add    BYTE PTR [eax],al
      8e:	00 02                	add    BYTE PTR [edx],al
      90:	04 07                	add    al,0x7
      92:	39 00                	cmp    DWORD PTR [eax],eax
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      99:	e1 00                	loope  9b <sysEnter_Vector-0x12ff65>
      9b:	00 00                	add    BYTE PTR [eax],al
      9d:	05 04 25 00 00       	add    eax,0x2504
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	21 00                	and    DWORD PTR [eax],eax
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	01 08                	add    DWORD PTR [eax],ecx
      aa:	9d                   	popf   
      ab:	00 00                	add    BYTE PTR [eax],al
      ad:	00 00                	add    BYTE PTR [eax],al
      af:	00 00                	add    BYTE PTR [eax],al
      b1:	9f                   	lahf   
      b2:	38 00                	cmp    BYTE PTR [eax],al
      b4:	00 00                	add    BYTE PTR [eax],al
      b6:	01 9c d5 00 00 00 08 	add    DWORD PTR [ebp+edx*8+0x8000000],ebx
      bd:	73 00                	jae    bf <sysEnter_Vector-0x12ff41>
      bf:	01 08                	add    DWORD PTR [eax],ecx
      c1:	7d 00                	jge    c3 <sysEnter_Vector-0x12ff3d>
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      cb:	01 08                	add    DWORD PTR [eax],ecx
      cd:	3a 00                	cmp    al,BYTE PTR [eax]
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	02 91 04 00 07 a7    	add    dl,BYTE PTR [ecx-0x58f8fffc]
      d7:	00 00                	add    BYTE PTR [eax],al
      d9:	00 01                	add    BYTE PTR [ecx],al
      db:	10 9d 00 00 00 38    	adc    BYTE PTR [ebp+0x38000000],bl
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	9f                   	lahf   
      e4:	38 00                	cmp    BYTE PTR [eax],al
      e6:	00 00                	add    BYTE PTR [eax],al
      e8:	01 9c 07 01 00 00 08 	add    DWORD PTR [edi+eax*1+0x8000001],ebx
      ef:	73 00                	jae    f1 <sysEnter_Vector-0x12ff0f>
      f1:	01 10                	add    DWORD PTR [eax],edx
      f3:	7d 00                	jge    f5 <sysEnter_Vector-0x12ff0b>
      f5:	00 00                	add    BYTE PTR [eax],al
      f7:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      fd:	01 10                	add    DWORD PTR [eax],edx
      ff:	3a 00                	cmp    al,BYTE PTR [eax]
     101:	00 00                	add    BYTE PTR [eax],al
     103:	02 91 04 00 09 4b    	add    dl,BYTE PTR [ecx+0x4b090004]
     109:	00 00                	add    BYTE PTR [eax],al
     10b:	00 02                	add    BYTE PTR [edx],al
     10d:	34 56                	xor    al,0x56
     10f:	00 00                	add    BYTE PTR [eax],al
     111:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
     117:	9f                   	lahf   
     118:	09 af 00 00 00 02    	or     DWORD PTR [edi+0x2000000],ebp
     11e:	35 56 00 00 00       	xor    eax,0x56
     123:	05 03 a4 54 00       	add    eax,0x54a403
     128:	9f                   	lahf   
     129:	09 5b 01             	or     DWORD PTR [ebx+0x1],ebx
     12c:	00 00                	add    BYTE PTR [eax],al
     12e:	02 36                	add    dh,BYTE PTR [esi]
     130:	56                   	push   esi
     131:	00 00                	add    BYTE PTR [eax],al
     133:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
     139:	9f                   	lahf   
     13a:	09 54 00 00          	or     DWORD PTR [eax+eax*1+0x0],edx
     13e:	00 02                	add    BYTE PTR [edx],al
     140:	37                   	aaa    
     141:	6f                   	outs   dx,DWORD PTR ds:[esi]
     142:	00 00                	add    BYTE PTR [eax],al
     144:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
     14a:	9f                   	lahf   
     14b:	09 28                	or     DWORD PTR [eax],ebp
     14d:	00 00                	add    BYTE PTR [eax],al
     14f:	00 03                	add    BYTE PTR [ebx],al
     151:	4f                   	dec    edi
     152:	5c                   	pop    esp
     153:	01 00                	add    DWORD PTR [eax],eax
     155:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
     15b:	9f                   	lahf   
     15c:	05 04 9d 00 00       	add    eax,0x9d04
     161:	00 00                	add    BYTE PTR [eax],al
     163:	9e                   	sahf   
     164:	01 00                	add    DWORD PTR [eax],eax
     166:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     169:	83 00 00             	add    DWORD PTR [eax],0x0
     16c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     16f:	f4                   	hlt    
     170:	00 00                	add    BYTE PTR [eax],al
     172:	00 0c 69             	add    BYTE PTR [ecx+ebp*2],cl
     175:	01 00                	add    DWORD PTR [eax],eax
     177:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     17a:	00 00                	add    BYTE PTR [eax],al
     17c:	70 00                	jo     17e <sysEnter_Vector-0x12fe82>
     17e:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     184:	d4 00                	aam    0x0
     186:	00 00                	add    BYTE PTR [eax],al
     188:	02 01                	add    al,BYTE PTR [ecx]
     18a:	06                   	push   es
     18b:	64 00 00             	add    BYTE PTR fs:[eax],al
     18e:	00 02                	add    BYTE PTR [edx],al
     190:	01 06                	add    DWORD PTR [esi],eax
     192:	5d                   	pop    ebp
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 02                	add    BYTE PTR [edx],al
     197:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     19d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1a4:	02 08                	add    cl,BYTE PTR [eax]
     1a6:	05 00 00 00 00       	add    eax,0x0
     1ab:	02 01                	add    al,BYTE PTR [ecx]
     1ad:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     1b0:	00 00                	add    BYTE PTR [eax],al
     1b2:	02 02                	add    al,BYTE PTR [edx]
     1b4:	07                   	pop    es
     1b5:	0e                   	push   cs
     1b6:	00 00                	add    BYTE PTR [eax],al
     1b8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     1c0:	61                   	popa   
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 02                	add    BYTE PTR [edx],al
     1c5:	04 07                	add    al,0x7
     1c7:	3e 00 00             	add    BYTE PTR ds:[eax],al
     1ca:	00 02                	add    BYTE PTR [edx],al
     1cc:	08 07                	or     BYTE PTR [edi],al
     1ce:	34 00                	xor    al,0x0
     1d0:	00 00                	add    BYTE PTR [eax],al
     1d2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1d9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1dc:	9b                   	fwait
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	00 02                	add    BYTE PTR [edx],al
     1e1:	01 02                	add    DWORD PTR [edx],eax
     1e3:	95                   	xchg   ebp,eax
     1e4:	00 00                	add    BYTE PTR [eax],al
     1e6:	00 02                	add    BYTE PTR [edx],al
     1e8:	04 07                	add    al,0x7
     1ea:	39 00                	cmp    DWORD PTR [eax],eax
     1ec:	00 00                	add    BYTE PTR [eax],al
     1ee:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     1f1:	e1 00                	loope  1f3 <sysEnter_Vector-0x12fe0d>
     1f3:	00 00                	add    BYTE PTR [eax],al
     1f5:	05 04 25 00 00       	add    eax,0x2504
     1fa:	00 06                	add    BYTE PTR [esi],al
     1fc:	93                   	xchg   ebx,eax
     1fd:	01 00                	add    DWORD PTR [eax],eax
     1ff:	00 01                	add    BYTE PTR [ecx],al
     201:	25 3a 00 00 00       	and    eax,0x3a
     206:	70 00                	jo     208 <sysEnter_Vector-0x12fdf8>
     208:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
     20e:	01 9c ef 00 00 00 07 	add    DWORD PTR [edi+ebp*8+0x7000000],ebx
     215:	8b 0b                	mov    ecx,DWORD PTR [ebx]
     217:	00 00                	add    BYTE PTR [eax],al
     219:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     21f:	02 91 00 07 63 01    	add    dl,BYTE PTR [ecx+0x1630700]
     225:	00 00                	add    BYTE PTR [eax],al
     227:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     22d:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     233:	01 27                	add    DWORD PTR [edi],esp
     235:	25 00 00 00 01       	and    eax,0x1000000
     23a:	51                   	push   ecx
     23b:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23e:	01 27                	add    DWORD PTR [edi],esp
     240:	92                   	xchg   edx,eax
     241:	00 00                	add    BYTE PTR [eax],al
     243:	00 01                	add    BYTE PTR [ecx],al
     245:	56                   	push   esi
     246:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	92                   	xchg   edx,eax
     24c:	00 00                	add    BYTE PTR [eax],al
     24e:	00 01                	add    BYTE PTR [ecx],al
     250:	53                   	push   ebx
     251:	00 06                	add    BYTE PTR [esi],al
     253:	9b                   	fwait
     254:	01 00                	add    DWORD PTR [eax],eax
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	33 3a                	xor    edi,DWORD PTR [edx]
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	00 c5                	add    ch,al
     25e:	00 00                	add    BYTE PTR [eax],al
     260:	9f                   	lahf   
     261:	55                   	push   ebp
     262:	00 00                	add    BYTE PTR [eax],al
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	9c                   	pushf  
     267:	46                   	inc    esi
     268:	01 00                	add    DWORD PTR [eax],eax
     26a:	00 07                	add    BYTE PTR [edi],al
     26c:	8b 0b                	mov    ecx,DWORD PTR [ebx]
     26e:	00 00                	add    BYTE PTR [eax],al
     270:	01 33                	add    DWORD PTR [ebx],esi
     272:	92                   	xchg   edx,eax
     273:	00 00                	add    BYTE PTR [eax],al
     275:	00 02                	add    BYTE PTR [edx],al
     277:	91                   	xchg   ecx,eax
     278:	00 07                	add    BYTE PTR [edi],al
     27a:	63 01                	arpl   WORD PTR [ecx],ax
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	01 33                	add    DWORD PTR [ebx],esi
     280:	92                   	xchg   edx,eax
     281:	00 00                	add    BYTE PTR [eax],al
     283:	00 02                	add    BYTE PTR [edx],al
     285:	91                   	xchg   ecx,eax
     286:	04 08                	add    al,0x8
     288:	63 00                	arpl   WORD PTR [eax],ax
     28a:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     290:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     293:	70 00                	jo     295 <sysEnter_Vector-0x12fd6b>
     295:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     29b:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29e:	73 00                	jae    2a0 <sysEnter_Vector-0x12fd60>
     2a0:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     2a6:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a9:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
     2b9:	9f                   	lahf   
     2ba:	09 af 00 00 00 02    	or     DWORD PTR [edi+0x2000000],ebp
     2c0:	35 56 00 00 00       	xor    eax,0x56
     2c5:	05 03 a4 54 00       	add    eax,0x54a403
     2ca:	9f                   	lahf   
     2cb:	09 5b 01             	or     DWORD PTR [ebx+0x1],ebx
     2ce:	00 00                	add    BYTE PTR [eax],al
     2d0:	02 36                	add    dh,BYTE PTR [esi]
     2d2:	56                   	push   esi
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
     2db:	9f                   	lahf   
     2dc:	09 54 00 00          	or     DWORD PTR [eax+eax*1+0x0],edx
     2e0:	00 02                	add    BYTE PTR [edx],al
     2e2:	37                   	aaa    
     2e3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
     2ec:	9f                   	lahf   
     2ed:	09 28                	or     DWORD PTR [eax],ebp
     2ef:	00 00                	add    BYTE PTR [eax],al
     2f1:	00 03                	add    BYTE PTR [ebx],al
     2f3:	4f                   	dec    edi
     2f4:	9b                   	fwait
     2f5:	01 00                	add    DWORD PTR [eax],eax
     2f7:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
     2fd:	9f                   	lahf   
     2fe:	05 04 92 00 00       	add    eax,0x9204
     303:	00 00                	add    BYTE PTR [eax],al
     305:	41                   	inc    ecx
     306:	01 00                	add    DWORD PTR [eax],eax
     308:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     30b:	0e                   	push   cs
     30c:	01 00                	add    DWORD PTR [eax],eax
     30e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     311:	f4                   	hlt    
     312:	00 00                	add    BYTE PTR [eax],al
     314:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
     317:	01 00                	add    DWORD PTR [eax],eax
     319:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     31c:	00 00                	add    BYTE PTR [eax],al
     31e:	1c 01                	sbb    al,0x1
     320:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     326:	db 01                	fild   DWORD PTR [ecx]
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	02 01                	add    al,BYTE PTR [ecx]
     32c:	06                   	push   es
     32d:	64 00 00             	add    BYTE PTR fs:[eax],al
     330:	00 02                	add    BYTE PTR [edx],al
     332:	01 06                	add    DWORD PTR [esi],eax
     334:	5d                   	pop    ebp
     335:	00 00                	add    BYTE PTR [eax],al
     337:	00 02                	add    BYTE PTR [edx],al
     339:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     33f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     346:	02 08                	add    cl,BYTE PTR [eax]
     348:	05 00 00 00 00       	add    eax,0x0
     34d:	02 01                	add    al,BYTE PTR [ecx]
     34f:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     352:	00 00                	add    BYTE PTR [eax],al
     354:	02 02                	add    al,BYTE PTR [edx]
     356:	07                   	pop    es
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     362:	61                   	popa   
     363:	00 00                	add    BYTE PTR [eax],al
     365:	00 02                	add    BYTE PTR [edx],al
     367:	04 07                	add    al,0x7
     369:	3e 00 00             	add    BYTE PTR ds:[eax],al
     36c:	00 02                	add    BYTE PTR [edx],al
     36e:	08 07                	or     BYTE PTR [edi],al
     370:	34 00                	xor    al,0x0
     372:	00 00                	add    BYTE PTR [eax],al
     374:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     37b:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     37e:	9b                   	fwait
     37f:	00 00                	add    BYTE PTR [eax],al
     381:	00 02                	add    BYTE PTR [edx],al
     383:	01 02                	add    DWORD PTR [edx],eax
     385:	95                   	xchg   ebp,eax
     386:	00 00                	add    BYTE PTR [eax],al
     388:	00 02                	add    BYTE PTR [edx],al
     38a:	04 07                	add    al,0x7
     38c:	39 00                	cmp    DWORD PTR [eax],eax
     38e:	00 00                	add    BYTE PTR [eax],al
     390:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     393:	e1 00                	loope  395 <sysEnter_Vector-0x12fc6b>
     395:	00 00                	add    BYTE PTR [eax],al
     397:	05 04 25 00 00       	add    eax,0x2504
     39c:	00 06                	add    BYTE PTR [esi],al
     39e:	d9 01                	fld    DWORD PTR [ecx]
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	01 28                	add    DWORD PTR [eax],ebp
     3a4:	92                   	xchg   edx,eax
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3aa:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     3b0:	01 9c e9 00 00 00 07 	add    DWORD PTR [ecx+ebp*8+0x7000000],ebx
     3b7:	73 00                	jae    3b9 <sysEnter_Vector-0x12fc47>
     3b9:	01 28                	add    DWORD PTR [eax],ebp
     3bb:	92                   	xchg   edx,eax
     3bc:	00 00                	add    BYTE PTR [eax],al
     3be:	00 02                	add    BYTE PTR [edx],al
     3c0:	91                   	xchg   ecx,eax
     3c1:	00 08                	add    BYTE PTR [eax],cl
     3c3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     3c4:	01 00                	add    DWORD PTR [eax],eax
     3c6:	00 01                	add    BYTE PTR [ecx],al
     3c8:	28 92 00 00 00 02    	sub    BYTE PTR [edx+0x2000000],dl
     3ce:	91                   	xchg   ecx,eax
     3cf:	04 09                	add    al,0x9
     3d1:	d3 01                	rol    DWORD PTR [ecx],cl
     3d3:	00 00                	add    BYTE PTR [eax],al
     3d5:	01 2a                	add    DWORD PTR [edx],ebp
     3d7:	92                   	xchg   edx,eax
     3d8:	00 00                	add    BYTE PTR [eax],al
     3da:	00 05 03 b0 54 00    	add    BYTE PTR ds:0x54b003,al
     3e0:	9f                   	lahf   
     3e1:	0a 63 68             	or     ah,BYTE PTR [ebx+0x68]
     3e4:	00 01                	add    BYTE PTR [ecx],al
     3e6:	2b 3a                	sub    edi,DWORD PTR [edx]
     3e8:	00 00                	add    BYTE PTR [eax],al
     3ea:	00 01                	add    BYTE PTR [ecx],al
     3ec:	56                   	push   esi
     3ed:	00 0b                	add    BYTE PTR [ebx],cl
     3ef:	4b                   	dec    ebx
     3f0:	00 00                	add    BYTE PTR [eax],al
     3f2:	00 02                	add    BYTE PTR [edx],al
     3f4:	34 56                	xor    al,0x56
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
     3fe:	9f                   	lahf   
     3ff:	0b af 00 00 00 02    	or     ebp,DWORD PTR [edi+0x2000000]
     405:	35 56 00 00 00       	xor    eax,0x56
     40a:	05 03 a4 54 00       	add    eax,0x54a403
     40f:	9f                   	lahf   
     410:	0b 5b 01             	or     ebx,DWORD PTR [ebx+0x1]
     413:	00 00                	add    BYTE PTR [eax],al
     415:	02 36                	add    dh,BYTE PTR [esi]
     417:	56                   	push   esi
     418:	00 00                	add    BYTE PTR [eax],al
     41a:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
     420:	9f                   	lahf   
     421:	0b 54 00 00          	or     edx,DWORD PTR [eax+eax*1+0x0]
     425:	00 02                	add    BYTE PTR [edx],al
     427:	37                   	aaa    
     428:	6f                   	outs   dx,DWORD PTR ds:[esi]
     429:	00 00                	add    BYTE PTR [eax],al
     42b:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
     431:	9f                   	lahf   
     432:	0b 28                	or     ebp,DWORD PTR [eax]
     434:	00 00                	add    BYTE PTR [eax],al
     436:	00 03                	add    BYTE PTR [ebx],al
     438:	4f                   	dec    edi
     439:	3e 01 00             	add    DWORD PTR ds:[eax],eax
     43c:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
     442:	9f                   	lahf   
     443:	05 04 92 00 00       	add    eax,0x9204
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	12 02                	adc    al,BYTE PTR [edx]
     44c:	00 00                	add    BYTE PTR [eax],al
     44e:	04 00                	add    al,0x0
     450:	b7 01                	mov    bh,0x1
     452:	00 00                	add    BYTE PTR [eax],al
     454:	04 01                	add    al,0x1
     456:	f4                   	hlt    
     457:	00 00                	add    BYTE PTR [eax],al
     459:	00 0c e6             	add    BYTE PTR [esi+eiz*8],cl
     45c:	01 00                	add    DWORD PTR [eax],eax
     45e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     461:	00 00                	add    BYTE PTR [eax],al
     463:	b4 01                	mov    ah,0x1
     465:	00 9f 49 02 00 00    	add    BYTE PTR [edi+0x249],bl
     46b:	b3 02                	mov    bl,0x2
     46d:	00 00                	add    BYTE PTR [eax],al
     46f:	02 01                	add    al,BYTE PTR [ecx]
     471:	06                   	push   es
     472:	64 00 00             	add    BYTE PTR fs:[eax],al
     475:	00 02                	add    BYTE PTR [edx],al
     477:	01 06                	add    DWORD PTR [esi],eax
     479:	5d                   	pop    ebp
     47a:	00 00                	add    BYTE PTR [eax],al
     47c:	00 02                	add    BYTE PTR [edx],al
     47e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     484:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     48b:	02 08                	add    cl,BYTE PTR [eax]
     48d:	05 00 00 00 00       	add    eax,0x0
     492:	02 01                	add    al,BYTE PTR [ecx]
     494:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     497:	00 00                	add    BYTE PTR [eax],al
     499:	02 02                	add    al,BYTE PTR [edx]
     49b:	07                   	pop    es
     49c:	0e                   	push   cs
     49d:	00 00                	add    BYTE PTR [eax],al
     49f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     4a2:	00 00                	add    BYTE PTR [eax],al
     4a4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     4a7:	61                   	popa   
     4a8:	00 00                	add    BYTE PTR [eax],al
     4aa:	00 02                	add    BYTE PTR [edx],al
     4ac:	04 07                	add    al,0x7
     4ae:	3e 00 00             	add    BYTE PTR ds:[eax],al
     4b1:	00 02                	add    BYTE PTR [edx],al
     4b3:	08 07                	or     BYTE PTR [edi],al
     4b5:	34 00                	xor    al,0x0
     4b7:	00 00                	add    BYTE PTR [eax],al
     4b9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     4c0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     4c3:	9b                   	fwait
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	00 02                	add    BYTE PTR [edx],al
     4c8:	01 02                	add    DWORD PTR [edx],eax
     4ca:	95                   	xchg   ebp,eax
     4cb:	00 00                	add    BYTE PTR [eax],al
     4cd:	00 02                	add    BYTE PTR [edx],al
     4cf:	04 07                	add    al,0x7
     4d1:	39 00                	cmp    DWORD PTR [eax],eax
     4d3:	00 00                	add    BYTE PTR [eax],al
     4d5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4d8:	e1 00                	loope  4da <sysEnter_Vector-0x12fb26>
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	05 04 25 00 00       	add    eax,0x2504
     4e1:	00 06                	add    BYTE PTR [esi],al
     4e3:	f7 01 00 00 01 09    	test   DWORD PTR [ecx],0x9010000
     4e9:	b4 01                	mov    ah,0x1
     4eb:	00 9f 77 00 00 00    	add    BYTE PTR [edi+0x77],bl
     4f1:	01 9c de 00 00 00 07 	add    DWORD PTR [esi+ebx*8+0x7000000],ebx
     4f8:	73 00                	jae    4fa <sysEnter_Vector-0x12fb06>
     4fa:	01 09                	add    DWORD PTR [ecx],ecx
     4fc:	92                   	xchg   edx,eax
     4fd:	00 00                	add    BYTE PTR [eax],al
     4ff:	00 02                	add    BYTE PTR [edx],al
     501:	91                   	xchg   ecx,eax
     502:	00 08                	add    BYTE PTR [eax],cl
     504:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     512:	01 0b                	add    DWORD PTR [ebx],ecx
     514:	3a 00                	cmp    al,BYTE PTR [eax]
     516:	00 00                	add    BYTE PTR [eax],al
     518:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     51e:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     525:	91                   	xchg   ecx,eax
     526:	67 00 06 f2 01       	add    BYTE PTR ds:0x1f2,al
     52b:	00 00                	add    BYTE PTR [eax],al
     52d:	01 15 2b 02 00 9f    	add    DWORD PTR ds:0x9f00022b,edx
     533:	bb 00 00 00 01       	mov    ebx,0x1000000
     538:	9c                   	pushf  
     539:	26 01 00             	add    DWORD PTR es:[eax],eax
     53c:	00 07                	add    BYTE PTR [edi],al
     53e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53f:	00 01                	add    BYTE PTR [ecx],al
     541:	15 3a 00 00 00       	adc    eax,0x3a
     546:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54c:	01 15 92 00 00 00    	add    DWORD PTR ds:0x92,edx
     552:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     558:	01 17                	add    DWORD PTR [edi],edx
     55a:	3a 00                	cmp    al,BYTE PTR [eax]
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	02 91 6c 09 00 02    	add    dl,BYTE PTR [ecx+0x200096c]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	01 17                	add    DWORD PTR [edi],edx
     568:	3a 00                	cmp    al,BYTE PTR [eax]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	02 91 68 00 06 e0    	add    dl,BYTE PTR [ecx-0x1ff9ff98]
     572:	01 00                	add    DWORD PTR [eax],eax
     574:	00 01                	add    BYTE PTR [ecx],al
     576:	25 e6 02 00 9f       	and    eax,0x9f0002e6
     57b:	bb 00 00 00 01       	mov    ebx,0x1000000
     580:	9c                   	pushf  
     581:	6e                   	outs   dx,BYTE PTR ds:[esi]
     582:	01 00                	add    DWORD PTR [eax],eax
     584:	00 07                	add    BYTE PTR [edi],al
     586:	6e                   	outs   dx,BYTE PTR ds:[esi]
     587:	00 01                	add    BYTE PTR [ecx],al
     589:	25 3a 00 00 00       	and    eax,0x3a
     58e:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     594:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     59a:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5a0:	01 27                	add    DWORD PTR [edi],esp
     5a2:	3a 00                	cmp    al,BYTE PTR [eax]
     5a4:	00 00                	add    BYTE PTR [eax],al
     5a6:	02 91 6c 09 00 02    	add    dl,BYTE PTR [ecx+0x200096c]
     5ac:	00 00                	add    BYTE PTR [eax],al
     5ae:	01 27                	add    DWORD PTR [edi],esp
     5b0:	3a 00                	cmp    al,BYTE PTR [eax]
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 91 68 00 0a 21    	add    dl,BYTE PTR [ecx+0x210a0068]
     5ba:	08 00                	or     BYTE PTR [eax],al
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	a1 03 00 9f 5c       	mov    eax,ds:0x5c9f0003
     5c8:	00 00                	add    BYTE PTR [eax],al
     5ca:	00 01                	add    BYTE PTR [ecx],al
     5cc:	9c                   	pushf  
     5cd:	ba 01 00 00 07       	mov    edx,0x7000001
     5d2:	73 74                	jae    648 <sysEnter_Vector-0x12f9b8>
     5d4:	72 00                	jb     5d6 <sysEnter_Vector-0x12fa2a>
     5d6:	01 36                	add    DWORD PTR [esi],esi
     5d8:	92                   	xchg   edx,eax
     5d9:	00 00                	add    BYTE PTR [eax],al
     5db:	00 02                	add    BYTE PTR [edx],al
     5dd:	91                   	xchg   ecx,eax
     5de:	00 08                	add    BYTE PTR [eax],cl
     5e0:	72 65                	jb     647 <sysEnter_Vector-0x12f9b9>
     5e2:	73 00                	jae    5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	01 38                	add    DWORD PTR [eax],edi
     5e6:	3a 00                	cmp    al,BYTE PTR [eax]
     5e8:	00 00                	add    BYTE PTR [eax],al
     5ea:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     5f0:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
     5f6:	08 69 00             	or     BYTE PTR [ecx+0x0],ch
     5f9:	01 3c 3a             	add    DWORD PTR [edx+edi*1],edi
     5fc:	00 00                	add    BYTE PTR [eax],al
     5fe:	00 02                	add    BYTE PTR [edx],al
     600:	91                   	xchg   ecx,eax
     601:	70 00                	jo     603 <sysEnter_Vector-0x12f9fd>
     603:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
     606:	00 00                	add    BYTE PTR [eax],al
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	34 56                	xor    al,0x56
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
     614:	9f                   	lahf   
     615:	0c af                	or     al,0xaf
     617:	00 00                	add    BYTE PTR [eax],al
     619:	00 02                	add    BYTE PTR [edx],al
     61b:	35 56 00 00 00       	xor    eax,0x56
     620:	05 03 a4 54 00       	add    eax,0x54a403
     625:	9f                   	lahf   
     626:	0c 5b                	or     al,0x5b
     628:	01 00                	add    DWORD PTR [eax],eax
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	36                   	ss
     62d:	56                   	push   esi
     62e:	00 00                	add    BYTE PTR [eax],al
     630:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
     636:	9f                   	lahf   
     637:	0c 54                	or     al,0x54
     639:	00 00                	add    BYTE PTR [eax],al
     63b:	00 02                	add    BYTE PTR [edx],al
     63d:	37                   	aaa    
     63e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     63f:	00 00                	add    BYTE PTR [eax],al
     641:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
     647:	9f                   	lahf   
     648:	0c 28                	or     al,0x28
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 03                	add    BYTE PTR [ebx],al
     64e:	4f                   	dec    edi
     64f:	0f 02 00             	lar    eax,WORD PTR [eax]
     652:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
     658:	9f                   	lahf   
     659:	05 04 92 00 00       	add    eax,0x9204
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	b2 01                	mov    dl,0x1
     662:	00 00                	add    BYTE PTR [eax],al
     664:	04 00                	add    al,0x0
     666:	74 02                	je     66a <sysEnter_Vector-0x12f996>
     668:	00 00                	add    BYTE PTR [eax],al
     66a:	04 01                	add    al,0x1
     66c:	f4                   	hlt    
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	00 0c 27             	add    BYTE PTR [edi+eiz*1],cl
     672:	02 00                	add    al,BYTE PTR [eax]
     674:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     677:	00 00                	add    BYTE PTR [eax],al
     679:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     67c:	9f                   	lahf   
     67d:	6b 02 00             	imul   eax,DWORD PTR [edx],0x0
     680:	00 c7                	add    bh,al
     682:	03 00                	add    eax,DWORD PTR [eax]
     684:	00 02                	add    BYTE PTR [edx],al
     686:	01 06                	add    DWORD PTR [esi],eax
     688:	64 00 00             	add    BYTE PTR fs:[eax],al
     68b:	00 02                	add    BYTE PTR [edx],al
     68d:	01 06                	add    DWORD PTR [esi],eax
     68f:	5d                   	pop    ebp
     690:	00 00                	add    BYTE PTR [eax],al
     692:	00 02                	add    BYTE PTR [edx],al
     694:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     69a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     6a1:	02 08                	add    cl,BYTE PTR [eax]
     6a3:	05 00 00 00 00       	add    eax,0x0
     6a8:	02 01                	add    al,BYTE PTR [ecx]
     6aa:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	02 02                	add    al,BYTE PTR [edx]
     6b1:	07                   	pop    es
     6b2:	0e                   	push   cs
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     6b8:	00 00                	add    BYTE PTR [eax],al
     6ba:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     6bd:	61                   	popa   
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	00 02                	add    BYTE PTR [edx],al
     6c2:	04 07                	add    al,0x7
     6c4:	3e 00 00             	add    BYTE PTR ds:[eax],al
     6c7:	00 02                	add    BYTE PTR [edx],al
     6c9:	08 07                	or     BYTE PTR [edi],al
     6cb:	34 00                	xor    al,0x0
     6cd:	00 00                	add    BYTE PTR [eax],al
     6cf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     6d6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     6d9:	9b                   	fwait
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	01 02                	add    DWORD PTR [edx],eax
     6e0:	95                   	xchg   ebp,eax
     6e1:	00 00                	add    BYTE PTR [eax],al
     6e3:	00 02                	add    BYTE PTR [edx],al
     6e5:	04 07                	add    al,0x7
     6e7:	39 00                	cmp    DWORD PTR [eax],eax
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     6ee:	e1 00                	loope  6f0 <sysEnter_Vector-0x12f910>
     6f0:	00 00                	add    BYTE PTR [eax],al
     6f2:	05 04 25 00 00       	add    eax,0x2504
     6f7:	00 06                	add    BYTE PTR [esi],al
     6f9:	20 02                	and    BYTE PTR [edx],al
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	01 09                	add    DWORD PTR [ecx],ecx
     6ff:	3a 00                	cmp    al,BYTE PTR [eax]
     701:	00 00                	add    BYTE PTR [eax],al
     703:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     706:	9f                   	lahf   
     707:	aa                   	stos   BYTE PTR es:[edi],al
     708:	00 00                	add    BYTE PTR [eax],al
     70a:	00 01                	add    BYTE PTR [ecx],al
     70c:	9c                   	pushf  
     70d:	e6 00                	out    0x0,al
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	07                   	pop    es
     712:	39 02                	cmp    DWORD PTR [edx],eax
     714:	00 00                	add    BYTE PTR [eax],al
     716:	01 09                	add    DWORD PTR [ecx],ecx
     718:	92                   	xchg   edx,eax
     719:	00 00                	add    BYTE PTR [eax],al
     71b:	00 02                	add    BYTE PTR [edx],al
     71d:	91                   	xchg   ecx,eax
     71e:	00 07                	add    BYTE PTR [edi],al
     720:	05 02 00 00 01       	add    eax,0x1000002
     725:	09 92 00 00 00 02    	or     DWORD PTR [edx+0x2000000],edx
     72b:	91                   	xchg   ecx,eax
     72c:	04 08                	add    al,0x8
     72e:	12 04 00             	adc    al,BYTE PTR [eax+eax*1]
     731:	9f                   	lahf   
     732:	8e 00                	mov    es,WORD PTR [eax]
     734:	00 00                	add    BYTE PTR [eax],al
     736:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     739:	74 00                	je     73b <sysEnter_Vector-0x12f8c5>
     73b:	01 0b                	add    DWORD PTR [ebx],ecx
     73d:	3a 00                	cmp    al,BYTE PTR [eax]
     73f:	00 00                	add    BYTE PTR [eax],al
     741:	02 91 6c 00 00 0a    	add    dl,BYTE PTR [ecx+0xa00006c]
     747:	19 02                	sbb    DWORD PTR [edx],eax
     749:	00 00                	add    BYTE PTR [eax],al
     74b:	01 14 aa             	add    DWORD PTR [edx+ebp*4],edx
     74e:	04 00                	add    al,0x0
     750:	9f                   	lahf   
     751:	c1 01 00             	rol    DWORD PTR [ecx],0x0
     754:	00 01                	add    BYTE PTR [ecx],al
     756:	9c                   	pushf  
     757:	5a                   	pop    edx
     758:	01 00                	add    DWORD PTR [eax],eax
     75a:	00 07                	add    BYTE PTR [edi],al
     75c:	39 02                	cmp    DWORD PTR [edx],eax
     75e:	00 00                	add    BYTE PTR [eax],al
     760:	01 14 92             	add    DWORD PTR [edx+edx*4],edx
     763:	00 00                	add    BYTE PTR [eax],al
     765:	00 02                	add    BYTE PTR [edx],al
     767:	91                   	xchg   ecx,eax
     768:	00 07                	add    BYTE PTR [edi],al
     76a:	05 02 00 00 01       	add    eax,0x1000002
     76f:	14 92                	adc    al,0x92
     771:	00 00                	add    BYTE PTR [eax],al
     773:	00 02                	add    BYTE PTR [edx],al
     775:	91                   	xchg   ecx,eax
     776:	04 0b                	add    al,0xb
     778:	0b 02                	or     eax,DWORD PTR [edx]
     77a:	00 00                	add    BYTE PTR [eax],al
     77c:	01 16                	add    DWORD PTR [esi],edx
     77e:	56                   	push   esi
     77f:	00 00                	add    BYTE PTR [eax],al
     781:	00 02                	add    BYTE PTR [edx],al
     783:	91                   	xchg   ecx,eax
     784:	6c                   	ins    BYTE PTR es:[edi],dx
     785:	0c c3                	or     al,0xc3
     787:	04 00                	add    al,0x0
     789:	9f                   	lahf   
     78a:	eb 00                	jmp    78c <sysEnter_Vector-0x12f874>
     78c:	00 00                	add    BYTE PTR [eax],al
     78e:	41                   	inc    ecx
     78f:	01 00                	add    DWORD PTR [eax],eax
     791:	00 09                	add    BYTE PTR [ecx],cl
     793:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     796:	00 01                	add    BYTE PTR [ecx],al
     798:	18 3a                	sbb    BYTE PTR [edx],bh
     79a:	00 00                	add    BYTE PTR [eax],al
     79c:	00 02                	add    BYTE PTR [edx],al
     79e:	91                   	xchg   ecx,eax
     79f:	68 00 08 ae 05       	push   0x5ae0800
     7a4:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     7aa:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     7ad:	74 00                	je     7af <sysEnter_Vector-0x12f851>
     7af:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     7b2:	00 00                	add    BYTE PTR [eax],al
     7b4:	00 02                	add    BYTE PTR [edx],al
     7b6:	91                   	xchg   ecx,eax
     7b7:	64 00 00             	add    BYTE PTR fs:[eax],al
     7ba:	0d 4b 00 00 00       	or     eax,0x4b
     7bf:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     7c2:	00 00                	add    BYTE PTR [eax],al
     7c4:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
     7ca:	9f                   	lahf   
     7cb:	0d af 00 00 00       	or     eax,0xaf
     7d0:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     7d6:	05 03 a4 54 00       	add    eax,0x54a403
     7db:	9f                   	lahf   
     7dc:	0d 5b 01 00 00       	or     eax,0x15b
     7e1:	02 36                	add    dh,BYTE PTR [esi]
     7e3:	56                   	push   esi
     7e4:	00 00                	add    BYTE PTR [eax],al
     7e6:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
     7ec:	9f                   	lahf   
     7ed:	0d 54 00 00 00       	or     eax,0x54
     7f2:	02 37                	add    dh,BYTE PTR [edi]
     7f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7f5:	00 00                	add    BYTE PTR [eax],al
     7f7:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
     7fd:	9f                   	lahf   
     7fe:	0d 28 00 00 00       	or     eax,0x28
     803:	03 4f af             	add    ecx,DWORD PTR [edi-0x51]
     806:	01 00                	add    DWORD PTR [eax],eax
     808:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
     80e:	9f                   	lahf   
     80f:	05 04 92 00 00       	add    eax,0x9204
     814:	00 00                	add    BYTE PTR [eax],al
     816:	01 03                	add    DWORD PTR [ebx],eax
     818:	00 00                	add    BYTE PTR [eax],al
     81a:	04 00                	add    al,0x0
     81c:	3c 03                	cmp    al,0x3
     81e:	00 00                	add    BYTE PTR [eax],al
     820:	04 01                	add    al,0x1
     822:	f4                   	hlt    
     823:	00 00                	add    BYTE PTR [eax],al
     825:	00 0c 9c             	add    BYTE PTR [esp+ebx*4],cl
     828:	02 00                	add    al,BYTE PTR [eax]
     82a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     82d:	00 00                	add    BYTE PTR [eax],al
     82f:	6c                   	ins    BYTE PTR es:[edi],dx
     830:	06                   	push   es
     831:	00 9f f2 00 00 00    	add    BYTE PTR [edi+0xf2],bl
     837:	d1 04 00             	rol    DWORD PTR [eax+eax*1],1
     83a:	00 02                	add    BYTE PTR [edx],al
     83c:	01 06                	add    DWORD PTR [esi],eax
     83e:	64 00 00             	add    BYTE PTR fs:[eax],al
     841:	00 02                	add    BYTE PTR [edx],al
     843:	01 06                	add    DWORD PTR [esi],eax
     845:	5d                   	pop    ebp
     846:	00 00                	add    BYTE PTR [eax],al
     848:	00 02                	add    BYTE PTR [edx],al
     84a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     850:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     857:	02 08                	add    cl,BYTE PTR [eax]
     859:	05 00 00 00 00       	add    eax,0x0
     85e:	02 01                	add    al,BYTE PTR [ecx]
     860:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     863:	00 00                	add    BYTE PTR [eax],al
     865:	02 02                	add    al,BYTE PTR [edx]
     867:	07                   	pop    es
     868:	0e                   	push   cs
     869:	00 00                	add    BYTE PTR [eax],al
     86b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     873:	61                   	popa   
     874:	00 00                	add    BYTE PTR [eax],al
     876:	00 02                	add    BYTE PTR [edx],al
     878:	04 07                	add    al,0x7
     87a:	3e 00 00             	add    BYTE PTR ds:[eax],al
     87d:	00 02                	add    BYTE PTR [edx],al
     87f:	08 07                	or     BYTE PTR [edi],al
     881:	34 00                	xor    al,0x0
     883:	00 00                	add    BYTE PTR [eax],al
     885:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     88c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     88f:	9b                   	fwait
     890:	00 00                	add    BYTE PTR [eax],al
     892:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
     898:	00 06                	add    BYTE PTR [esi],al
     89a:	25 00 00 00 02       	and    eax,0x2000000
     89f:	01 02                	add    DWORD PTR [edx],eax
     8a1:	95                   	xchg   ebp,eax
     8a2:	00 00                	add    BYTE PTR [eax],al
     8a4:	00 07                	add    BYTE PTR [edi],al
     8a6:	12 03                	adc    al,BYTE PTR [ebx]
     8a8:	00 00                	add    BYTE PTR [eax],al
     8aa:	04 61                	add    al,0x61
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	00 05 15 51 01 00    	add    BYTE PTR ds:0x15115,al
     8b4:	00 08                	add    BYTE PTR [eax],cl
     8b6:	77 03                	ja     8bb <sysEnter_Vector-0x12f745>
     8b8:	00 00                	add    BYTE PTR [eax],al
     8ba:	00 08                	add    BYTE PTR [eax],cl
     8bc:	af                   	scas   eax,DWORD PTR es:[edi]
     8bd:	03 00                	add    eax,DWORD PTR [eax]
     8bf:	00 01                	add    BYTE PTR [ecx],al
     8c1:	08 6e 02             	or     BYTE PTR [esi+0x2],ch
     8c4:	00 00                	add    BYTE PTR [eax],al
     8c6:	02 08                	add    cl,BYTE PTR [eax]
     8c8:	04 03                	add    al,0x3
     8ca:	00 00                	add    BYTE PTR [eax],al
     8cc:	03 08                	add    ecx,DWORD PTR [eax]
     8ce:	4e                   	dec    esi
     8cf:	02 00                	add    al,BYTE PTR [eax]
     8d1:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     8d4:	c9                   	leave  
     8d5:	03 00                	add    eax,DWORD PTR [eax]
     8d7:	00 05 08 28 03 00    	add    BYTE PTR ds:0x32808,al
     8dd:	00 06                	add    BYTE PTR [esi],al
     8df:	08 61 02             	or     BYTE PTR [ecx+0x2],ah
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	07                   	pop    es
     8e5:	08 fa                	or     dl,bh
     8e7:	03 00                	add    eax,DWORD PTR [eax]
     8e9:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     8ec:	6a 03                	push   0x3
     8ee:	00 00                	add    BYTE PTR [eax],al
     8f0:	59                   	pop    ecx
     8f1:	08 09                	or     BYTE PTR [ecx],cl
     8f3:	04 00                	add    al,0x0
     8f5:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     8f8:	f0 02 00             	lock add al,BYTE PTR [eax]
     8fb:	00 97 09 87 03 00    	add    BYTE PTR [edi+0x38709],dl
     901:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     904:	09 5d 03             	or     DWORD PTR [ebp+0x3],ebx
     907:	00 00                	add    BYTE PTR [eax],al
     909:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
     90c:	ec                   	in     al,dx
     90d:	03 00                	add    eax,DWORD PTR [eax]
     90f:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     912:	09 d2                	or     edx,edx
     914:	02 00                	add    al,BYTE PTR [eax]
     916:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     919:	09 21                	or     DWORD PTR [ecx],esp
     91b:	04 00                	add    al,0x0
     91d:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     920:	09 35 03 00 00 68    	or     DWORD PTR ds:0x68000003,esi
     926:	01 09                	add    DWORD PTR [ecx],ecx
     928:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     929:	02 00                	add    al,BYTE PTR [eax]
     92b:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     92e:	09 9e 03 00 00 70    	or     DWORD PTR [esi+0x70000003],ebx
     934:	01 09                	add    DWORD PTR [ecx],ecx
     936:	e0 02                	loopne 93a <sysEnter_Vector-0x12f6c6>
     938:	00 00                	add    BYTE PTR [eax],al
     93a:	71 01                	jno    93d <sysEnter_Vector-0x12f6c3>
     93c:	09 d7                	or     edi,edx
     93e:	03 00                	add    eax,DWORD PTR [eax]
     940:	00 00                	add    BYTE PTR [eax],al
     942:	03 09                	add    ecx,DWORD PTR [ecx]
     944:	42                   	inc    edx
     945:	03 00                	add    eax,DWORD PTR [eax]
     947:	00 01                	add    BYTE PTR [ecx],al
     949:	03 09                	add    ecx,DWORD PTR [ecx]
     94b:	b6 02                	mov    dh,0x2
     94d:	00 00                	add    BYTE PTR [eax],al
     94f:	02 03                	add    al,BYTE PTR [ebx]
     951:	09 7b 02             	or     DWORD PTR [ebx+0x2],edi
     954:	00 00                	add    BYTE PTR [eax],al
     956:	03 03                	add    eax,DWORD PTR [ebx]
     958:	09 8b 02 00 00 04    	or     DWORD PTR [ebx+0x4000002],ecx
     95e:	03 09                	add    ecx,DWORD PTR [ecx]
     960:	c2 02 00             	ret    0x2
     963:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
     969:	07                   	pop    es
     96a:	39 00                	cmp    DWORD PTR [eax],eax
     96c:	00 00                	add    BYTE PTR [eax],al
     96e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     971:	e1 00                	loope  973 <sysEnter_Vector-0x12f68d>
     973:	00 00                	add    BYTE PTR [eax],al
     975:	0a 04 05 04 25 00 00 	or     al,BYTE PTR [eax*1+0x2504]
     97c:	00 0b                	add    BYTE PTR [ebx],cl
     97e:	1c 04                	sbb    al,0x4
     980:	00 00                	add    BYTE PTR [eax],al
     982:	01 09                	add    DWORD PTR [ecx],ecx
     984:	5f                   	pop    edi
     985:	01 00                	add    DWORD PTR [eax],eax
     987:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
     98b:	9f                   	lahf   
     98c:	2d 00 00 00 01       	sub    eax,0x1000000
     991:	9c                   	pushf  
     992:	9d                   	popf   
     993:	01 00                	add    DWORD PTR [eax],eax
     995:	00 0c 9f             	add    BYTE PTR [edi+ebx*4],cl
     998:	09 00                	or     DWORD PTR [eax],eax
     99a:	00 01                	add    BYTE PTR [ecx],al
     99c:	09 61 01             	or     DWORD PTR [ecx+0x1],esp
     99f:	00 00                	add    BYTE PTR [eax],al
     9a1:	02 91 00 0c 4d 09    	add    dl,BYTE PTR [ecx+0x94d0c00]
     9a7:	00 00                	add    BYTE PTR [eax],al
     9a9:	01 09                	add    DWORD PTR [ecx],ecx
     9ab:	7d 00                	jge    9ad <sysEnter_Vector-0x12f653>
     9ad:	00 00                	add    BYTE PTR [eax],al
     9af:	02 91 04 00 0d 48    	add    dl,BYTE PTR [ecx+0x480d0004]
     9b5:	02 00                	add    al,BYTE PTR [eax]
     9b7:	00 01                	add    BYTE PTR [ecx],al
     9b9:	0e                   	push   cs
     9ba:	99                   	cdq    
     9bb:	06                   	push   es
     9bc:	00 9f 2a 00 00 00    	add    BYTE PTR [edi+0x2a],bl
     9c2:	01 9c c1 01 00 00 0c 	add    DWORD PTR [ecx+eax*8+0xc000001],ebx
     9c9:	e5 03                	in     eax,0x3
     9cb:	00 00                	add    BYTE PTR [eax],al
     9cd:	01 0e                	add    DWORD PTR [esi],ecx
     9cf:	5f                   	pop    edi
     9d0:	01 00                	add    DWORD PTR [eax],eax
     9d2:	00 02                	add    BYTE PTR [edx],al
     9d4:	91                   	xchg   ecx,eax
     9d5:	00 00                	add    BYTE PTR [eax],al
     9d7:	0b 23                	or     esp,DWORD PTR [ebx]
     9d9:	03 00                	add    eax,DWORD PTR [eax]
     9db:	00 01                	add    BYTE PTR [ecx],al
     9dd:	13 3a                	adc    edi,DWORD PTR [edx]
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	00 c3                	add    bl,al
     9e3:	06                   	push   es
     9e4:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
     9ea:	01 9c 13 02 00 00 0c 	add    DWORD PTR [ebx+edx*1+0xc000002],ebx
     9f1:	e5 03                	in     eax,0x3
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	01 13                	add    DWORD PTR [ebx],edx
     9f7:	5f                   	pop    edi
     9f8:	01 00                	add    DWORD PTR [eax],eax
     9fa:	00 02                	add    BYTE PTR [edx],al
     9fc:	91                   	xchg   ecx,eax
     9fd:	00 0c c2             	add    BYTE PTR [edx+eax*8],cl
     a00:	03 00                	add    eax,DWORD PTR [eax]
     a02:	00 01                	add    BYTE PTR [ecx],al
     a04:	13 5f 01             	adc    ebx,DWORD PTR [edi+0x1]
     a07:	00 00                	add    BYTE PTR [eax],al
     a09:	02 91 04 0c a2 05    	add    dl,BYTE PTR [ecx+0x5a20c04]
     a0f:	00 00                	add    BYTE PTR [eax],al
     a11:	01 13                	add    DWORD PTR [ebx],edx
     a13:	3a 00                	cmp    al,BYTE PTR [eax]
     a15:	00 00                	add    BYTE PTR [eax],al
     a17:	02 91 08 0c 1c 03    	add    dl,BYTE PTR [ecx+0x31c0c08]
     a1d:	00 00                	add    BYTE PTR [eax],al
     a1f:	01 13                	add    DWORD PTR [ebx],edx
     a21:	3a 00                	cmp    al,BYTE PTR [eax]
     a23:	00 00                	add    BYTE PTR [eax],al
     a25:	02 91 0c 00 0b 5b    	add    dl,BYTE PTR [ecx+0x5b0b000c]
     a2b:	02 00                	add    al,BYTE PTR [eax]
     a2d:	00 01                	add    BYTE PTR [ecx],al
     a2f:	18 3a                	sbb    BYTE PTR [edx],bh
     a31:	00 00                	add    BYTE PTR [eax],al
     a33:	00 f8                	add    al,bh
     a35:	06                   	push   es
     a36:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
     a3c:	01 9c 65 02 00 00 0c 	add    DWORD PTR [ebp+eiz*2+0xc000002],ebx
     a43:	e5 03                	in     eax,0x3
     a45:	00 00                	add    BYTE PTR [eax],al
     a47:	01 18                	add    DWORD PTR [eax],ebx
     a49:	5f                   	pop    edi
     a4a:	01 00                	add    DWORD PTR [eax],eax
     a4c:	00 02                	add    BYTE PTR [edx],al
     a4e:	91                   	xchg   ecx,eax
     a4f:	00 0c c2             	add    BYTE PTR [edx+eax*8],cl
     a52:	03 00                	add    eax,DWORD PTR [eax]
     a54:	00 01                	add    BYTE PTR [ecx],al
     a56:	18 5f 01             	sbb    BYTE PTR [edi+0x1],bl
     a59:	00 00                	add    BYTE PTR [eax],al
     a5b:	02 91 04 0c a2 05    	add    dl,BYTE PTR [ecx+0x5a20c04]
     a61:	00 00                	add    BYTE PTR [eax],al
     a63:	01 18                	add    DWORD PTR [eax],ebx
     a65:	3a 00                	cmp    al,BYTE PTR [eax]
     a67:	00 00                	add    BYTE PTR [eax],al
     a69:	02 91 08 0c 1c 03    	add    dl,BYTE PTR [ecx+0x31c0c08]
     a6f:	00 00                	add    BYTE PTR [eax],al
     a71:	01 18                	add    DWORD PTR [eax],ebx
     a73:	3a 00                	cmp    al,BYTE PTR [eax]
     a75:	00 00                	add    BYTE PTR [eax],al
     a77:	02 91 0c 00 0b 41    	add    dl,BYTE PTR [ecx+0x410b000c]
     a7d:	02 00                	add    al,BYTE PTR [eax]
     a7f:	00 01                	add    BYTE PTR [ecx],al
     a81:	1e                   	push   ds
     a82:	3a 00                	cmp    al,BYTE PTR [eax]
     a84:	00 00                	add    BYTE PTR [eax],al
     a86:	2d 07 00 9f 31       	sub    eax,0x319f0007
     a8b:	00 00                	add    BYTE PTR [eax],al
     a8d:	00 01                	add    BYTE PTR [ecx],al
     a8f:	9c                   	pushf  
     a90:	a9 02 00 00 0c       	test   eax,0xc000002
     a95:	9f                   	lahf   
     a96:	09 00                	or     DWORD PTR [eax],eax
     a98:	00 01                	add    BYTE PTR [ecx],al
     a9a:	1e                   	push   ds
     a9b:	61                   	popa   
     a9c:	01 00                	add    DWORD PTR [eax],eax
     a9e:	00 02                	add    BYTE PTR [edx],al
     aa0:	91                   	xchg   ecx,eax
     aa1:	00 0c c2             	add    BYTE PTR [edx+eax*8],cl
     aa4:	03 00                	add    eax,DWORD PTR [eax]
     aa6:	00 01                	add    BYTE PTR [ecx],al
     aa8:	1e                   	push   ds
     aa9:	61                   	popa   
     aaa:	01 00                	add    DWORD PTR [eax],eax
     aac:	00 02                	add    BYTE PTR [edx],al
     aae:	91                   	xchg   ecx,eax
     aaf:	04 0c                	add    al,0xc
     ab1:	51                   	push   ecx
     ab2:	03 00                	add    eax,DWORD PTR [eax]
     ab4:	00 01                	add    BYTE PTR [ecx],al
     ab6:	1e                   	push   ds
     ab7:	3a 00                	cmp    al,BYTE PTR [eax]
     ab9:	00 00                	add    BYTE PTR [eax],al
     abb:	02 91 08 00 0e 4b    	add    dl,BYTE PTR [ecx+0x4b0e0008]
     ac1:	00 00                	add    BYTE PTR [eax],al
     ac3:	00 02                	add    BYTE PTR [edx],al
     ac5:	34 56                	xor    al,0x56
     ac7:	00 00                	add    BYTE PTR [eax],al
     ac9:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
     acf:	9f                   	lahf   
     ad0:	0e                   	push   cs
     ad1:	af                   	scas   eax,DWORD PTR es:[edi]
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	00 02                	add    BYTE PTR [edx],al
     ad6:	35 56 00 00 00       	xor    eax,0x56
     adb:	05 03 a4 54 00       	add    eax,0x54a403
     ae0:	9f                   	lahf   
     ae1:	0e                   	push   cs
     ae2:	5b                   	pop    ebx
     ae3:	01 00                	add    DWORD PTR [eax],eax
     ae5:	00 02                	add    BYTE PTR [edx],al
     ae7:	36                   	ss
     ae8:	56                   	push   esi
     ae9:	00 00                	add    BYTE PTR [eax],al
     aeb:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
     af1:	9f                   	lahf   
     af2:	0e                   	push   cs
     af3:	54                   	push   esp
     af4:	00 00                	add    BYTE PTR [eax],al
     af6:	00 02                	add    BYTE PTR [edx],al
     af8:	37                   	aaa    
     af9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     afa:	00 00                	add    BYTE PTR [eax],al
     afc:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
     b02:	9f                   	lahf   
     b03:	0e                   	push   cs
     b04:	28 00                	sub    BYTE PTR [eax],al
     b06:	00 00                	add    BYTE PTR [eax],al
     b08:	03 4f fe             	add    ecx,DWORD PTR [edi-0x2]
     b0b:	02 00                	add    al,BYTE PTR [eax]
     b0d:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
     b13:	9f                   	lahf   
     b14:	05 04 61 01 00       	add    eax,0x16104
     b19:	00 00                	add    BYTE PTR [eax],al
     b1b:	b5 02                	mov    ch,0x2
     b1d:	00 00                	add    BYTE PTR [eax],al
     b1f:	04 00                	add    al,0x0
     b21:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     b24:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     b27:	f4                   	hlt    
     b28:	00 00                	add    BYTE PTR [eax],al
     b2a:	00 0c 4c             	add    BYTE PTR [esp+ecx*2],cl
     b2d:	04 00                	add    al,0x0
     b2f:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     b32:	00 00                	add    BYTE PTR [eax],al
     b34:	60                   	pusha  
     b35:	07                   	pop    es
     b36:	00 9f 66 01 00 00    	add    BYTE PTR [edi+0x166],bl
     b3c:	cd 05                	int    0x5
     b3e:	00 00                	add    BYTE PTR [eax],al
     b40:	02 01                	add    al,BYTE PTR [ecx]
     b42:	06                   	push   es
     b43:	64 00 00             	add    BYTE PTR fs:[eax],al
     b46:	00 02                	add    BYTE PTR [edx],al
     b48:	01 06                	add    DWORD PTR [esi],eax
     b4a:	5d                   	pop    ebp
     b4b:	00 00                	add    BYTE PTR [eax],al
     b4d:	00 02                	add    BYTE PTR [edx],al
     b4f:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     b55:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b5c:	02 08                	add    cl,BYTE PTR [eax]
     b5e:	05 00 00 00 00       	add    eax,0x0
     b63:	02 01                	add    al,BYTE PTR [ecx]
     b65:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     b68:	00 00                	add    BYTE PTR [eax],al
     b6a:	02 02                	add    al,BYTE PTR [edx]
     b6c:	07                   	pop    es
     b6d:	0e                   	push   cs
     b6e:	00 00                	add    BYTE PTR [eax],al
     b70:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     b73:	00 00                	add    BYTE PTR [eax],al
     b75:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     b78:	61                   	popa   
     b79:	00 00                	add    BYTE PTR [eax],al
     b7b:	00 02                	add    BYTE PTR [edx],al
     b7d:	04 07                	add    al,0x7
     b7f:	3e 00 00             	add    BYTE PTR ds:[eax],al
     b82:	00 02                	add    BYTE PTR [edx],al
     b84:	08 07                	or     BYTE PTR [edi],al
     b86:	34 00                	xor    al,0x0
     b88:	00 00                	add    BYTE PTR [eax],al
     b8a:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b91:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b94:	9b                   	fwait
     b95:	00 00                	add    BYTE PTR [eax],al
     b97:	00 02                	add    BYTE PTR [edx],al
     b99:	01 02                	add    DWORD PTR [edx],eax
     b9b:	95                   	xchg   ebp,eax
     b9c:	00 00                	add    BYTE PTR [eax],al
     b9e:	00 05 12 03 00 00    	add    BYTE PTR ds:0x312,al
     ba4:	04 61                	add    al,0x61
     ba6:	00 00                	add    BYTE PTR [eax],al
     ba8:	00 05 15 46 01 00    	add    BYTE PTR ds:0x14615,al
     bae:	00 06                	add    BYTE PTR [esi],al
     bb0:	77 03                	ja     bb5 <sysEnter_Vector-0x12f44b>
     bb2:	00 00                	add    BYTE PTR [eax],al
     bb4:	00 06                	add    BYTE PTR [esi],al
     bb6:	af                   	scas   eax,DWORD PTR es:[edi]
     bb7:	03 00                	add    eax,DWORD PTR [eax]
     bb9:	00 01                	add    BYTE PTR [ecx],al
     bbb:	06                   	push   es
     bbc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     bbd:	02 00                	add    al,BYTE PTR [eax]
     bbf:	00 02                	add    BYTE PTR [edx],al
     bc1:	06                   	push   es
     bc2:	04 03                	add    al,0x3
     bc4:	00 00                	add    BYTE PTR [eax],al
     bc6:	03 06                	add    eax,DWORD PTR [esi]
     bc8:	4e                   	dec    esi
     bc9:	02 00                	add    al,BYTE PTR [eax]
     bcb:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     bce:	c9                   	leave  
     bcf:	03 00                	add    eax,DWORD PTR [eax]
     bd1:	00 05 06 28 03 00    	add    BYTE PTR ds:0x32806,al
     bd7:	00 06                	add    BYTE PTR [esi],al
     bd9:	06                   	push   es
     bda:	61                   	popa   
     bdb:	02 00                	add    al,BYTE PTR [eax]
     bdd:	00 07                	add    BYTE PTR [edi],al
     bdf:	06                   	push   es
     be0:	fa                   	cli    
     be1:	03 00                	add    eax,DWORD PTR [eax]
     be3:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     be6:	6a 03                	push   0x3
     be8:	00 00                	add    BYTE PTR [eax],al
     bea:	59                   	pop    ecx
     beb:	06                   	push   es
     bec:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
     bef:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     bf2:	f0 02 00             	lock add al,BYTE PTR [eax]
     bf5:	00 97 07 87 03 00    	add    BYTE PTR [edi+0x38707],dl
     bfb:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     bfe:	07                   	pop    es
     bff:	5d                   	pop    ebp
     c00:	03 00                	add    eax,DWORD PTR [eax]
     c02:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
     c06:	ec                   	in     al,dx
     c07:	03 00                	add    eax,DWORD PTR [eax]
     c09:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     c0c:	07                   	pop    es
     c0d:	d2 02                	rol    BYTE PTR [edx],cl
     c0f:	00 00                	add    BYTE PTR [eax],al
     c11:	66 01 07             	add    WORD PTR [edi],ax
     c14:	21 04 00             	and    DWORD PTR [eax+eax*1],eax
     c17:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     c1a:	07                   	pop    es
     c1b:	35 03 00 00 68       	xor    eax,0x68000003
     c20:	01 07                	add    DWORD PTR [edi],eax
     c22:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     c23:	02 00                	add    al,BYTE PTR [eax]
     c25:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     c28:	07                   	pop    es
     c29:	9e                   	sahf   
     c2a:	03 00                	add    eax,DWORD PTR [eax]
     c2c:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     c2f:	07                   	pop    es
     c30:	e0 02                	loopne c34 <sysEnter_Vector-0x12f3cc>
     c32:	00 00                	add    BYTE PTR [eax],al
     c34:	71 01                	jno    c37 <sysEnter_Vector-0x12f3c9>
     c36:	07                   	pop    es
     c37:	d7                   	xlat   BYTE PTR ds:[ebx]
     c38:	03 00                	add    eax,DWORD PTR [eax]
     c3a:	00 00                	add    BYTE PTR [eax],al
     c3c:	03 07                	add    eax,DWORD PTR [edi]
     c3e:	42                   	inc    edx
     c3f:	03 00                	add    eax,DWORD PTR [eax]
     c41:	00 01                	add    BYTE PTR [ecx],al
     c43:	03 07                	add    eax,DWORD PTR [edi]
     c45:	b6 02                	mov    dh,0x2
     c47:	00 00                	add    BYTE PTR [eax],al
     c49:	02 03                	add    al,BYTE PTR [ebx]
     c4b:	07                   	pop    es
     c4c:	7b 02                	jnp    c50 <sysEnter_Vector-0x12f3b0>
     c4e:	00 00                	add    BYTE PTR [eax],al
     c50:	03 03                	add    eax,DWORD PTR [ebx]
     c52:	07                   	pop    es
     c53:	8b 02                	mov    eax,DWORD PTR [edx]
     c55:	00 00                	add    BYTE PTR [eax],al
     c57:	04 03                	add    al,0x3
     c59:	07                   	pop    es
     c5a:	c2 02 00             	ret    0x2
     c5d:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
     c63:	07                   	pop    es
     c64:	39 00                	cmp    DWORD PTR [eax],eax
     c66:	00 00                	add    BYTE PTR [eax],al
     c68:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     c6b:	e1 00                	loope  c6d <sysEnter_Vector-0x12f393>
     c6d:	00 00                	add    BYTE PTR [eax],al
     c6f:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
     c76:	7e 04                	jle    c7c <sysEnter_Vector-0x12f384>
     c78:	00 00                	add    BYTE PTR [eax],al
     c7a:	01 0f                	add    DWORD PTR [edi],ecx
     c7c:	60                   	pusha  
     c7d:	07                   	pop    es
     c7e:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
     c84:	01 9c 7e 01 00 00 0a 	add    DWORD PTR [esi+edi*2+0xa000001],ebx
     c8b:	c2 03 00             	ret    0x3
     c8e:	00 01                	add    BYTE PTR [ecx],al
     c90:	0f 54 01             	andps  xmm0,XMMWORD PTR [ecx]
     c93:	00 00                	add    BYTE PTR [eax],al
     c95:	02 91 00 00 09 71    	add    dl,BYTE PTR [ecx+0x71090000]
     c9b:	04 00                	add    al,0x0
     c9d:	00 01                	add    BYTE PTR [ecx],al
     c9f:	14 86                	adc    al,0x86
     ca1:	07                   	pop    es
     ca2:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
     ca8:	01 9c ae 01 00 00 0b 	add    DWORD PTR [esi+ebp*4+0xb000001],ebx
     caf:	63 00                	arpl   WORD PTR [eax],ax
     cb1:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     cb8:	91                   	xchg   ecx,eax
     cb9:	60                   	pusha  
     cba:	0c c2                	or     al,0xc2
     cbc:	03 00                	add    eax,DWORD PTR [eax]
     cbe:	00 01                	add    BYTE PTR [ecx],al
     cc0:	16                   	push   ss
     cc1:	ae                   	scas   al,BYTE PTR es:[edi]
     cc2:	01 00                	add    DWORD PTR [eax],eax
     cc4:	00 02                	add    BYTE PTR [edx],al
     cc6:	91                   	xchg   ecx,eax
     cc7:	72 00                	jb     cc9 <sysEnter_Vector-0x12f337>
     cc9:	0d 25 00 00 00       	or     eax,0x25
     cce:	be 01 00 00 0e       	mov    esi,0xe000001
     cd3:	4d                   	dec    ebp
     cd4:	01 00                	add    DWORD PTR [eax],eax
     cd6:	00 01                	add    BYTE PTR [ecx],al
     cd8:	00 0f                	add    BYTE PTR [edi],cl
     cda:	76 04                	jbe    ce0 <sysEnter_Vector-0x12f320>
     cdc:	00 00                	add    BYTE PTR [eax],al
     cde:	01 1f                	add    DWORD PTR [edi],ebx
     ce0:	25 00 00 00 c9       	and    eax,0xc9000000
     ce5:	07                   	pop    es
     ce6:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
     cec:	01 9c e4 01 00 00 10 	add    DWORD PTR [esp+eiz*8+0x10000001],ebx
     cf3:	63 00                	arpl   WORD PTR [eax],ax
     cf5:	01 21                	add    DWORD PTR [ecx],esp
     cf7:	25 00 00 00 02       	and    eax,0x2000000
     cfc:	91                   	xchg   ecx,eax
     cfd:	73 00                	jae    cff <sysEnter_Vector-0x12f301>
     cff:	11 6c 04 00          	adc    DWORD PTR [esp+eax*1+0x0],ebp
     d03:	00 01                	add    BYTE PTR [ecx],al
     d05:	2d 3a 00 00 00       	sub    eax,0x3a
     d0a:	0c 08                	or     al,0x8
     d0c:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
     d12:	01 9c 5d 02 00 00 0a 	add    DWORD PTR [ebp+ebx*2+0xa000002],ebx
     d19:	c2 03 00             	ret    0x3
     d1c:	00 01                	add    BYTE PTR [ecx],al
     d1e:	2d 54 01 00 00       	sub    eax,0x154
     d23:	02 91 00 0a 65 04    	add    dl,BYTE PTR [ecx+0x4650a00]
     d29:	00 00                	add    BYTE PTR [eax],al
     d2b:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
     d31:	02 91 04 0a 36 04    	add    dl,BYTE PTR [ecx+0x4360a04]
     d37:	00 00                	add    BYTE PTR [eax],al
     d39:	01 2d 3a 00 00 00    	add    DWORD PTR ds:0x3a,ebp
     d3f:	02 91 08 0c 5e 04    	add    dl,BYTE PTR [ecx+0x45e0c08]
     d45:	00 00                	add    BYTE PTR [eax],al
     d47:	01 2f                	add    DWORD PTR [edi],ebp
     d49:	25 00 00 00 02       	and    eax,0x2000000
     d4e:	91                   	xchg   ecx,eax
     d4f:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     d52:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d54:	00 01                	add    BYTE PTR [ecx],al
     d56:	30 3a                	xor    BYTE PTR [edx],bh
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	00 02                	add    BYTE PTR [edx],al
     d5c:	91                   	xchg   ecx,eax
     d5d:	6c                   	ins    BYTE PTR es:[edi],dx
     d5e:	0c 47                	or     al,0x47
     d60:	04 00                	add    al,0x0
     d62:	00 01                	add    BYTE PTR [ecx],al
     d64:	31 ae 01 00 00 02    	xor    DWORD PTR [esi+0x2000001],ebp
     d6a:	91                   	xchg   ecx,eax
     d6b:	69 12 3d 04 00 00    	imul   edx,DWORD PTR [edx],0x43d
     d71:	01 36                	add    DWORD PTR [esi],esi
     d73:	49                   	dec    ecx
     d74:	08 00                	or     BYTE PTR [eax],al
     d76:	9f                   	lahf   
     d77:	00 13                	add    BYTE PTR [ebx],dl
     d79:	4b                   	dec    ebx
     d7a:	00 00                	add    BYTE PTR [eax],al
     d7c:	00 02                	add    BYTE PTR [edx],al
     d7e:	34 56                	xor    al,0x56
     d80:	00 00                	add    BYTE PTR [eax],al
     d82:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
     d88:	9f                   	lahf   
     d89:	13 af 00 00 00 02    	adc    ebp,DWORD PTR [edi+0x2000000]
     d8f:	35 56 00 00 00       	xor    eax,0x56
     d94:	05 03 a4 54 00       	add    eax,0x54a403
     d99:	9f                   	lahf   
     d9a:	13 5b 01             	adc    ebx,DWORD PTR [ebx+0x1]
     d9d:	00 00                	add    BYTE PTR [eax],al
     d9f:	02 36                	add    dh,BYTE PTR [esi]
     da1:	56                   	push   esi
     da2:	00 00                	add    BYTE PTR [eax],al
     da4:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
     daa:	9f                   	lahf   
     dab:	13 54 00 00          	adc    edx,DWORD PTR [eax+eax*1+0x0]
     daf:	00 02                	add    BYTE PTR [edx],al
     db1:	37                   	aaa    
     db2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     db3:	00 00                	add    BYTE PTR [eax],al
     db5:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
     dbb:	9f                   	lahf   
     dbc:	13 28                	adc    ebp,DWORD PTR [eax]
     dbe:	00 00                	add    BYTE PTR [eax],al
     dc0:	00 03                	add    BYTE PTR [ebx],al
     dc2:	4f                   	dec    edi
     dc3:	b2 02                	mov    dl,0x2
     dc5:	00 00                	add    BYTE PTR [eax],al
     dc7:	05 03 a8 54 00       	add    eax,0x54a803
     dcc:	9f                   	lahf   
     dcd:	08 04 54             	or     BYTE PTR [esp+edx*2],al
     dd0:	01 00                	add    DWORD PTR [eax],eax
     dd2:	00 00                	add    BYTE PTR [eax],al
     dd4:	8f 09                	(bad)  
     dd6:	00 00                	add    BYTE PTR [eax],al
     dd8:	04 00                	add    al,0x0
     dda:	22 05 00 00 04 01    	and    al,BYTE PTR ds:0x1040000
     de0:	f4                   	hlt    
     de1:	00 00                	add    BYTE PTR [eax],al
     de3:	00 0c 31             	add    BYTE PTR [ecx+esi*1],cl
     de6:	06                   	push   es
     de7:	00 00                	add    BYTE PTR [eax],al
     de9:	72 00                	jb     deb <sysEnter_Vector-0x12f215>
     deb:	00 00                	add    BYTE PTR [eax],al
     ded:	c8 08 00 9f          	enter  0x8,0x9f
     df1:	5d                   	pop    ebp
     df2:	0a 00                	or     al,BYTE PTR [eax]
     df4:	00 fa                	add    dl,bh
     df6:	06                   	push   es
     df7:	00 00                	add    BYTE PTR [eax],al
     df9:	02 bf 05 00 00 02    	add    bh,BYTE PTR [edi+0x2000005]
     dff:	28 30                	sub    BYTE PTR [eax],dh
     e01:	00 00                	add    BYTE PTR [eax],al
     e03:	00 03                	add    BYTE PTR [ebx],al
     e05:	04 e9                	add    al,0xe9
     e07:	04 00                	add    al,0x0
     e09:	00 3a                	add    BYTE PTR [edx],bh
     e0b:	00 00                	add    BYTE PTR [eax],al
     e0d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e10:	06                   	push   es
     e11:	64 00 00             	add    BYTE PTR fs:[eax],al
     e14:	00 02                	add    BYTE PTR [edx],al
     e16:	c6 05 00 00 02 62 25 	mov    BYTE PTR ds:0x62020000,0x25
     e1d:	00 00                	add    BYTE PTR [eax],al
     e1f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e22:	06                   	push   es
     e23:	5d                   	pop    ebp
     e24:	00 00                	add    BYTE PTR [eax],al
     e26:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     e29:	05 ea 00 00 00       	add    eax,0xea
     e2e:	05 04 05 69 6e       	add    eax,0x6e690504
     e33:	74 00                	je     e35 <sysEnter_Vector-0x12f1cb>
     e35:	04 08                	add    al,0x8
     e37:	05 00 00 00 00       	add    eax,0x0
     e3c:	04 01                	add    al,0x1
     e3e:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     e41:	00 00                	add    BYTE PTR [eax],al
     e43:	04 02                	add    al,0x2
     e45:	07                   	pop    es
     e46:	0e                   	push   cs
     e47:	00 00                	add    BYTE PTR [eax],al
     e49:	00 02                	add    BYTE PTR [edx],al
     e4b:	69 00 00 00 03 34    	imul   eax,DWORD PTR [eax],0x34030000
     e51:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e57:	07                   	pop    es
     e58:	3e 00 00             	add    BYTE PTR ds:[eax],al
     e5b:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     e5e:	07                   	pop    es
     e5f:	34 00                	xor    al,0x0
     e61:	00 00                	add    BYTE PTR [eax],al
     e63:	02 a4 04 00 00 03 56 	add    ah,BYTE PTR [esp+eax*1+0x56030000]
     e6a:	81 00 00 00 02 9d    	add    DWORD PTR [eax],0x9d020000
     e70:	04 00                	add    al,0x0
     e72:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
     e75:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e7b:	05 05 00 00 00       	add    eax,0x5
     e80:	04 0c                	add    al,0xc
     e82:	04 9b                	add    al,0x9b
     e84:	00 00                	add    BYTE PTR [eax],al
     e86:	00 06                	add    BYTE PTR [esi],al
     e88:	04 b9                	add    al,0xb9
     e8a:	00 00                	add    BYTE PTR [eax],al
     e8c:	00 07                	add    BYTE PTR [edi],al
     e8e:	3a 00                	cmp    al,BYTE PTR [eax]
     e90:	00 00                	add    BYTE PTR [eax],al
     e92:	04 01                	add    al,0x1
     e94:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
     e9a:	12 03                	adc    al,BYTE PTR [ebx]
     e9c:	00 00                	add    BYTE PTR [eax],al
     e9e:	04 81                	add    al,0x81
     ea0:	00 00                	add    BYTE PTR [eax],al
     ea2:	00 05 15 87 01 00    	add    BYTE PTR ds:0x18715,al
     ea8:	00 09                	add    BYTE PTR [ecx],cl
     eaa:	77 03                	ja     eaf <sysEnter_Vector-0x12f151>
     eac:	00 00                	add    BYTE PTR [eax],al
     eae:	00 09                	add    BYTE PTR [ecx],cl
     eb0:	af                   	scas   eax,DWORD PTR es:[edi]
     eb1:	03 00                	add    eax,DWORD PTR [eax]
     eb3:	00 01                	add    BYTE PTR [ecx],al
     eb5:	09 6e 02             	or     DWORD PTR [esi+0x2],ebp
     eb8:	00 00                	add    BYTE PTR [eax],al
     eba:	02 09                	add    cl,BYTE PTR [ecx]
     ebc:	04 03                	add    al,0x3
     ebe:	00 00                	add    BYTE PTR [eax],al
     ec0:	03 09                	add    ecx,DWORD PTR [ecx]
     ec2:	4e                   	dec    esi
     ec3:	02 00                	add    al,BYTE PTR [eax]
     ec5:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
     ec8:	c9                   	leave  
     ec9:	03 00                	add    eax,DWORD PTR [eax]
     ecb:	00 05 09 28 03 00    	add    BYTE PTR ds:0x32809,al
     ed1:	00 06                	add    BYTE PTR [esi],al
     ed3:	09 61 02             	or     DWORD PTR [ecx+0x2],esp
     ed6:	00 00                	add    BYTE PTR [eax],al
     ed8:	07                   	pop    es
     ed9:	09 fa                	or     edx,edi
     edb:	03 00                	add    eax,DWORD PTR [eax]
     edd:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
     ee0:	6a 03                	push   0x3
     ee2:	00 00                	add    BYTE PTR [eax],al
     ee4:	59                   	pop    ecx
     ee5:	09 09                	or     DWORD PTR [ecx],ecx
     ee7:	04 00                	add    al,0x0
     ee9:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
     eec:	f0 02 00             	lock add al,BYTE PTR [eax]
     eef:	00 97 0a 87 03 00    	add    BYTE PTR [edi+0x3870a],dl
     ef5:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     ef8:	0a 5d 03             	or     bl,BYTE PTR [ebp+0x3]
     efb:	00 00                	add    BYTE PTR [eax],al
     efd:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
     f00:	ec                   	in     al,dx
     f01:	03 00                	add    eax,DWORD PTR [eax]
     f03:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
     f06:	0a d2                	or     dl,dl
     f08:	02 00                	add    al,BYTE PTR [eax]
     f0a:	00 66 01             	add    BYTE PTR [esi+0x1],ah
     f0d:	0a 21                	or     ah,BYTE PTR [ecx]
     f0f:	04 00                	add    al,0x0
     f11:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     f14:	0a 35 03 00 00 68    	or     dh,BYTE PTR ds:0x68000003
     f1a:	01 0a                	add    DWORD PTR [edx],ecx
     f1c:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     f1d:	02 00                	add    al,BYTE PTR [eax]
     f1f:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
     f22:	0a 9e 03 00 00 70    	or     bl,BYTE PTR [esi+0x70000003]
     f28:	01 0a                	add    DWORD PTR [edx],ecx
     f2a:	e0 02                	loopne f2e <sysEnter_Vector-0x12f0d2>
     f2c:	00 00                	add    BYTE PTR [eax],al
     f2e:	71 01                	jno    f31 <sysEnter_Vector-0x12f0cf>
     f30:	0a d7                	or     dl,bh
     f32:	03 00                	add    eax,DWORD PTR [eax]
     f34:	00 00                	add    BYTE PTR [eax],al
     f36:	03 0a                	add    ecx,DWORD PTR [edx]
     f38:	42                   	inc    edx
     f39:	03 00                	add    eax,DWORD PTR [eax]
     f3b:	00 01                	add    BYTE PTR [ecx],al
     f3d:	03 0a                	add    ecx,DWORD PTR [edx]
     f3f:	b6 02                	mov    dh,0x2
     f41:	00 00                	add    BYTE PTR [eax],al
     f43:	02 03                	add    al,BYTE PTR [ebx]
     f45:	0a 7b 02             	or     bh,BYTE PTR [ebx+0x2]
     f48:	00 00                	add    BYTE PTR [eax],al
     f4a:	03 03                	add    eax,DWORD PTR [ebx]
     f4c:	0a 8b 02 00 00 04    	or     cl,BYTE PTR [ebx+0x4000002]
     f52:	03 0a                	add    ecx,DWORD PTR [edx]
     f54:	c2 02 00             	ret    0x2
     f57:	00 05 03 00 04 04    	add    BYTE PTR ds:0x4040003,al
     f5d:	07                   	pop    es
     f5e:	39 00                	cmp    DWORD PTR [eax],eax
     f60:	00 00                	add    BYTE PTR [eax],al
     f62:	04 04                	add    al,0x4
     f64:	07                   	pop    es
     f65:	e1 00                	loope  f67 <sysEnter_Vector-0x12f099>
     f67:	00 00                	add    BYTE PTR [eax],al
     f69:	0b 04 06             	or     eax,DWORD PTR [esi+eax*1]
     f6c:	04 3a                	add    al,0x3a
     f6e:	00 00                	add    BYTE PTR [eax],al
     f70:	00 0c 89             	add    BYTE PTR [ecx+ecx*4],cl
     f73:	05 00 00 01 10       	add    eax,0x10010000
     f78:	5a                   	pop    edx
     f79:	00 00                	add    BYTE PTR [eax],al
     f7b:	00 c8                	add    al,cl
     f7d:	08 00                	or     BYTE PTR [eax],al
     f7f:	9f                   	lahf   
     f80:	3a 00                	cmp    al,BYTE PTR [eax]
     f82:	00 00                	add    BYTE PTR [eax],al
     f84:	01 9c 0b 02 00 00 0d 	add    DWORD PTR [ebx+ecx*1+0xd000002],ebx
     f8b:	30 05 00 00 01 10    	xor    BYTE PTR ds:0x10010000,al
     f91:	5a                   	pop    edx
     f92:	00 00                	add    BYTE PTR [eax],al
     f94:	00 02                	add    BYTE PTR [edx],al
     f96:	91                   	xchg   ecx,eax
     f97:	00 0d d6 05 00 00    	add    BYTE PTR ds:0x5d6,cl
     f9d:	01 10                	add    DWORD PTR [eax],edx
     f9f:	76 00                	jbe    fa1 <sysEnter_Vector-0x12f05f>
     fa1:	00 00                	add    BYTE PTR [eax],al
     fa3:	02 91 04 0d dd 05    	add    dl,BYTE PTR [ecx+0x5dd0d04]
     fa9:	00 00                	add    BYTE PTR [eax],al
     fab:	01 10                	add    DWORD PTR [eax],edx
     fad:	76 00                	jbe    faf <sysEnter_Vector-0x12f051>
     faf:	00 00                	add    BYTE PTR [eax],al
     fb1:	02 91 08 0d e4 05    	add    dl,BYTE PTR [ecx+0x5e40d08]
     fb7:	00 00                	add    BYTE PTR [eax],al
     fb9:	01 10                	add    DWORD PTR [eax],edx
     fbb:	76 00                	jbe    fbd <sysEnter_Vector-0x12f043>
     fbd:	00 00                	add    BYTE PTR [eax],al
     fbf:	02 91 0c 0d eb 05    	add    dl,BYTE PTR [ecx+0x5eb0d0c]
     fc5:	00 00                	add    BYTE PTR [eax],al
     fc7:	01 10                	add    DWORD PTR [eax],edx
     fc9:	76 00                	jbe    fcb <sysEnter_Vector-0x12f035>
     fcb:	00 00                	add    BYTE PTR [eax],al
     fcd:	02 91 10 0e 83 04    	add    dl,BYTE PTR [ecx+0x4830e10]
     fd3:	00 00                	add    BYTE PTR [eax],al
     fd5:	01 12                	add    DWORD PTR [edx],edx
     fd7:	5a                   	pop    edx
     fd8:	00 00                	add    BYTE PTR [eax],al
     fda:	00 02                	add    BYTE PTR [edx],al
     fdc:	91                   	xchg   ecx,eax
     fdd:	6c                   	ins    BYTE PTR es:[edi],dx
     fde:	00 0c 7d 05 00 00 01 	add    BYTE PTR [edi*2+0x1000005],cl
     fe5:	17                   	pop    ss
     fe6:	5a                   	pop    edx
     fe7:	00 00                	add    BYTE PTR [eax],al
     fe9:	00 02                	add    BYTE PTR [edx],al
     feb:	09 00                	or     DWORD PTR [eax],eax
     fed:	9f                   	lahf   
     fee:	3c 00                	cmp    al,0x0
     ff0:	00 00                	add    BYTE PTR [eax],al
     ff2:	01 9c 6b 02 00 00 0d 	add    DWORD PTR [ebx+ebp*2+0xd000002],ebx
     ff9:	30 05 00 00 01 17    	xor    BYTE PTR ds:0x17010000,al
     fff:	5a                   	pop    edx
    1000:	00 00                	add    BYTE PTR [eax],al
    1002:	00 02                	add    BYTE PTR [edx],al
    1004:	91                   	xchg   ecx,eax
    1005:	00 0d d6 05 00 00    	add    BYTE PTR ds:0x5d6,cl
    100b:	01 17                	add    DWORD PTR [edi],edx
    100d:	76 00                	jbe    100f <sysEnter_Vector-0x12eff1>
    100f:	00 00                	add    BYTE PTR [eax],al
    1011:	02 91 04 0d dd 05    	add    dl,BYTE PTR [ecx+0x5dd0d04]
    1017:	00 00                	add    BYTE PTR [eax],al
    1019:	01 17                	add    DWORD PTR [edi],edx
    101b:	76 00                	jbe    101d <sysEnter_Vector-0x12efe3>
    101d:	00 00                	add    BYTE PTR [eax],al
    101f:	02 91 08 0d e4 05    	add    dl,BYTE PTR [ecx+0x5e40d08]
    1025:	00 00                	add    BYTE PTR [eax],al
    1027:	01 17                	add    DWORD PTR [edi],edx
    1029:	76 00                	jbe    102b <sysEnter_Vector-0x12efd5>
    102b:	00 00                	add    BYTE PTR [eax],al
    102d:	02 91 0c 0e 83 04    	add    dl,BYTE PTR [ecx+0x4830e0c]
    1033:	00 00                	add    BYTE PTR [eax],al
    1035:	01 19                	add    DWORD PTR [ecx],ebx
    1037:	5a                   	pop    edx
    1038:	00 00                	add    BYTE PTR [eax],al
    103a:	00 02                	add    BYTE PTR [edx],al
    103c:	91                   	xchg   ecx,eax
    103d:	6c                   	ins    BYTE PTR es:[edi],dx
    103e:	00 0c 71             	add    BYTE PTR [ecx+esi*2],cl
    1041:	05 00 00 01 1e       	add    eax,0x1e010000
    1046:	5a                   	pop    edx
    1047:	00 00                	add    BYTE PTR [eax],al
    1049:	00 3e                	add    BYTE PTR [esi],bh
    104b:	09 00                	or     DWORD PTR [eax],eax
    104d:	9f                   	lahf   
    104e:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1051:	00 01                	add    BYTE PTR [ecx],al
    1053:	9c                   	pushf  
    1054:	bd 02 00 00 0d       	mov    ebp,0xd000002
    1059:	30 05 00 00 01 1e    	xor    BYTE PTR ds:0x1e010000,al
    105f:	5a                   	pop    edx
    1060:	00 00                	add    BYTE PTR [eax],al
    1062:	00 02                	add    BYTE PTR [edx],al
    1064:	91                   	xchg   ecx,eax
    1065:	00 0d d6 05 00 00    	add    BYTE PTR ds:0x5d6,cl
    106b:	01 1e                	add    DWORD PTR [esi],ebx
    106d:	76 00                	jbe    106f <sysEnter_Vector-0x12ef91>
    106f:	00 00                	add    BYTE PTR [eax],al
    1071:	02 91 04 0d dd 05    	add    dl,BYTE PTR [ecx+0x5dd0d04]
    1077:	00 00                	add    BYTE PTR [eax],al
    1079:	01 1e                	add    DWORD PTR [esi],ebx
    107b:	76 00                	jbe    107d <sysEnter_Vector-0x12ef83>
    107d:	00 00                	add    BYTE PTR [eax],al
    107f:	02 91 08 0e 83 04    	add    dl,BYTE PTR [ecx+0x4830e08]
    1085:	00 00                	add    BYTE PTR [eax],al
    1087:	01 20                	add    DWORD PTR [eax],esp
    1089:	5a                   	pop    edx
    108a:	00 00                	add    BYTE PTR [eax],al
    108c:	00 02                	add    BYTE PTR [edx],al
    108e:	91                   	xchg   ecx,eax
    108f:	6c                   	ins    BYTE PTR es:[edi],dx
    1090:	00 0c 65 05 00 00 01 	add    BYTE PTR [eiz*2+0x1000005],cl
    1097:	25 5a 00 00 00       	and    eax,0x5a
    109c:	7c 09                	jl     10a7 <sysEnter_Vector-0x12ef59>
    109e:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    10a4:	01 9c 01 03 00 00 0d 	add    DWORD PTR [ecx+eax*1+0xd000003],ebx
    10ab:	30 05 00 00 01 25    	xor    BYTE PTR ds:0x25010000,al
    10b1:	5a                   	pop    edx
    10b2:	00 00                	add    BYTE PTR [eax],al
    10b4:	00 02                	add    BYTE PTR [edx],al
    10b6:	91                   	xchg   ecx,eax
    10b7:	00 0d d6 05 00 00    	add    BYTE PTR ds:0x5d6,cl
    10bd:	01 25 76 00 00 00    	add    DWORD PTR ds:0x76,esp
    10c3:	02 91 04 0e 83 04    	add    dl,BYTE PTR [ecx+0x4830e04]
    10c9:	00 00                	add    BYTE PTR [eax],al
    10cb:	01 27                	add    DWORD PTR [edi],esp
    10cd:	5a                   	pop    edx
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	00 02                	add    BYTE PTR [edx],al
    10d2:	91                   	xchg   ecx,eax
    10d3:	6c                   	ins    BYTE PTR es:[edi],dx
    10d4:	00 0c 59             	add    BYTE PTR [ecx+ebx*2],cl
    10d7:	05 00 00 01 2c       	add    eax,0x2c010000
    10dc:	5a                   	pop    edx
    10dd:	00 00                	add    BYTE PTR [eax],al
    10df:	00 bc 09 00 9f 42 00 	add    BYTE PTR [ecx+ecx*1+0x429f00],bh
    10e6:	00 00                	add    BYTE PTR [eax],al
    10e8:	01 9c 37 03 00 00 0d 	add    DWORD PTR [edi+esi*1+0xd000003],ebx
    10ef:	30 05 00 00 01 2c    	xor    BYTE PTR ds:0x2c010000,al
    10f5:	5a                   	pop    edx
    10f6:	00 00                	add    BYTE PTR [eax],al
    10f8:	00 02                	add    BYTE PTR [edx],al
    10fa:	91                   	xchg   ecx,eax
    10fb:	00 0e                	add    BYTE PTR [esi],cl
    10fd:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
    1101:	01 2e                	add    DWORD PTR [esi],ebp
    1103:	5a                   	pop    edx
    1104:	00 00                	add    BYTE PTR [eax],al
    1106:	00 02                	add    BYTE PTR [edx],al
    1108:	91                   	xchg   ecx,eax
    1109:	6c                   	ins    BYTE PTR es:[edi],dx
    110a:	00 0f                	add    BYTE PTR [edi],cl
    110c:	d9 04 00             	fld    DWORD PTR [eax+eax*1]
    110f:	00 01                	add    BYTE PTR [ecx],al
    1111:	33 fe                	xor    edi,esi
    1113:	09 00                	or     DWORD PTR [eax],eax
    1115:	9f                   	lahf   
    1116:	bf 00 00 00 01       	mov    edi,0x1000000
    111b:	9c                   	pushf  
    111c:	10 56 06             	adc    BYTE PTR [esi+0x6],dl
    111f:	00 00                	add    BYTE PTR [eax],al
    1121:	01 45 bd             	add    DWORD PTR [ebp-0x43],eax
    1124:	0a 00                	or     al,BYTE PTR [eax]
    1126:	9f                   	lahf   
    1127:	1f                   	pop    ds
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	00 01                	add    BYTE PTR [ecx],al
    112c:	9c                   	pushf  
    112d:	11 8a 04 00 00 01    	adc    DWORD PTR [edx+0x1000004],ecx
    1133:	4a                   	dec    edx
    1134:	5a                   	pop    edx
    1135:	00 00                	add    BYTE PTR [eax],al
    1137:	00 dc                	add    ah,bl
    1139:	0a 00                	or     al,BYTE PTR [eax]
    113b:	9f                   	lahf   
    113c:	59                   	pop    ecx
    113d:	00 00                	add    BYTE PTR [eax],al
    113f:	00 01                	add    BYTE PTR [ecx],al
    1141:	9c                   	pushf  
    1142:	9e                   	sahf   
    1143:	03 00                	add    eax,DWORD PTR [eax]
    1145:	00 0d fe 05 00 00    	add    BYTE PTR ds:0x5fe,cl
    114b:	01 4a b3             	add    DWORD PTR [edx-0x4d],ecx
    114e:	00 00                	add    BYTE PTR [eax],al
    1150:	00 02                	add    BYTE PTR [edx],al
    1152:	91                   	xchg   ecx,eax
    1153:	00 12                	add    BYTE PTR [edx],dl
    1155:	0e                   	push   cs
    1156:	8c 06                	mov    WORD PTR [esi],es
    1158:	00 00                	add    BYTE PTR [eax],al
    115a:	01 4c 41 00          	add    DWORD PTR [ecx+eax*2+0x0],ecx
    115e:	00 00                	add    BYTE PTR [eax],al
    1160:	02 91 68 0e a2 05    	add    dl,BYTE PTR [ecx+0x5a20e68]
    1166:	00 00                	add    BYTE PTR [eax],al
    1168:	01 4f 5a             	add    DWORD PTR [edi+0x5a],ecx
    116b:	00 00                	add    BYTE PTR [eax],al
    116d:	00 02                	add    BYTE PTR [edx],al
    116f:	91                   	xchg   ecx,eax
    1170:	6c                   	ins    BYTE PTR es:[edi],dx
    1171:	00 11                	add    BYTE PTR [ecx],dl
    1173:	0b 08                	or     ecx,DWORD PTR [eax]
    1175:	00 00                	add    BYTE PTR [eax],al
    1177:	01 54 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],edx
    117b:	00 00                	add    BYTE PTR [eax],al
    117d:	35 0b 00 9f 59       	xor    eax,0x599f000b
    1182:	00 00                	add    BYTE PTR [eax],al
    1184:	00 01                	add    BYTE PTR [ecx],al
    1186:	9c                   	pushf  
    1187:	e3 03                	jecxz  118c <sysEnter_Vector-0x12ee74>
    1189:	00 00                	add    BYTE PTR [eax],al
    118b:	0d fe 05 00 00       	or     eax,0x5fe
    1190:	01 54 b3 00          	add    DWORD PTR [ebx+esi*4+0x0],edx
    1194:	00 00                	add    BYTE PTR [eax],al
    1196:	02 91 00 12 0e 8c    	add    dl,BYTE PTR [ecx-0x73f1ee00]
    119c:	06                   	push   es
    119d:	00 00                	add    BYTE PTR [eax],al
    119f:	01 56 41             	add    DWORD PTR [esi+0x41],edx
    11a2:	00 00                	add    BYTE PTR [eax],al
    11a4:	00 02                	add    BYTE PTR [edx],al
    11a6:	91                   	xchg   ecx,eax
    11a7:	68 0e a2 05 00       	push   0x5a20e
    11ac:	00 01                	add    BYTE PTR [ecx],al
    11ae:	59                   	pop    ecx
    11af:	5a                   	pop    edx
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	00 02                	add    BYTE PTR [edx],al
    11b4:	91                   	xchg   ecx,eax
    11b5:	6c                   	ins    BYTE PTR es:[edi],dx
    11b6:	00 11                	add    BYTE PTR [ecx],dl
    11b8:	91                   	xchg   ecx,eax
    11b9:	06                   	push   es
    11ba:	00 00                	add    BYTE PTR [eax],al
    11bc:	01 5f 5a             	add    DWORD PTR [edi+0x5a],ebx
    11bf:	00 00                	add    BYTE PTR [eax],al
    11c1:	00 8e 0b 00 9f 34    	add    BYTE PTR [esi+0x349f000b],cl
    11c7:	00 00                	add    BYTE PTR [eax],al
    11c9:	00 01                	add    BYTE PTR [ecx],al
    11cb:	9c                   	pushf  
    11cc:	1a 04 00             	sbb    al,BYTE PTR [eax+eax*1]
    11cf:	00 0d fe 05 00 00    	add    BYTE PTR ds:0x5fe,cl
    11d5:	01 5f b3             	add    DWORD PTR [edi-0x4d],ebx
    11d8:	00 00                	add    BYTE PTR [eax],al
    11da:	00 02                	add    BYTE PTR [edx],al
    11dc:	91                   	xchg   ecx,eax
    11dd:	00 12                	add    BYTE PTR [edx],dl
    11df:	0e                   	push   cs
    11e0:	8c 06                	mov    WORD PTR [esi],es
    11e2:	00 00                	add    BYTE PTR [eax],al
    11e4:	01 61 41             	add    DWORD PTR [ecx+0x41],esp
    11e7:	00 00                	add    BYTE PTR [eax],al
    11e9:	00 02                	add    BYTE PTR [edx],al
    11eb:	91                   	xchg   ecx,eax
    11ec:	74 00                	je     11ee <sysEnter_Vector-0x12ee12>
    11ee:	11 ce                	adc    esi,ecx
    11f0:	05 00 00 01 67       	add    eax,0x67010000
    11f5:	5a                   	pop    edx
    11f6:	00 00                	add    BYTE PTR [eax],al
    11f8:	00 c2                	add    dl,al
    11fa:	0b 00                	or     eax,DWORD PTR [eax]
    11fc:	9f                   	lahf   
    11fd:	37                   	aaa    
    11fe:	00 00                	add    BYTE PTR [eax],al
    1200:	00 01                	add    BYTE PTR [ecx],al
    1202:	9c                   	pushf  
    1203:	5f                   	pop    edi
    1204:	04 00                	add    al,0x0
    1206:	00 0d 25 05 00 00    	add    BYTE PTR ds:0x525,cl
    120c:	01 67 76             	add    DWORD PTR [edi+0x76],esp
    120f:	00 00                	add    BYTE PTR [eax],al
    1211:	00 02                	add    BYTE PTR [edx],al
    1213:	91                   	xchg   ecx,eax
    1214:	00 0d fe 05 00 00    	add    BYTE PTR ds:0x5fe,cl
    121a:	01 67 b3             	add    DWORD PTR [edi-0x4d],esp
    121d:	00 00                	add    BYTE PTR [eax],al
    121f:	00 02                	add    BYTE PTR [edx],al
    1221:	91                   	xchg   ecx,eax
    1222:	04 12                	add    al,0x12
    1224:	0e                   	push   cs
    1225:	8c 06                	mov    WORD PTR [esi],es
    1227:	00 00                	add    BYTE PTR [eax],al
    1229:	01 69 41             	add    DWORD PTR [ecx+0x41],ebp
    122c:	00 00                	add    BYTE PTR [eax],al
    122e:	00 02                	add    BYTE PTR [edx],al
    1230:	91                   	xchg   ecx,eax
    1231:	74 00                	je     1233 <sysEnter_Vector-0x12edcd>
    1233:	0c 44                	or     al,0x44
    1235:	05 00 00 01 71       	add    eax,0x71010000
    123a:	81 00 00 00 f9 0b    	add    DWORD PTR [eax],0xbf90000
    1240:	00 9f 72 00 00 00    	add    BYTE PTR [edi+0x72],bl
    1246:	01 9c ab 04 00 00 0d 	add    DWORD PTR [ebx+ebp*4+0xd000004],ebx
    124d:	11 06                	adc    DWORD PTR [esi],eax
    124f:	00 00                	add    BYTE PTR [eax],al
    1251:	01 71 81             	add    DWORD PTR [ecx-0x7f],esi
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	00 02                	add    BYTE PTR [edx],al
    1258:	91                   	xchg   ecx,eax
    1259:	00 13                	add    BYTE PTR [ebx],dl
    125b:	0b 0c 00             	or     ecx,DWORD PTR [eax+eax*1]
    125e:	9f                   	lahf   
    125f:	54                   	push   esp
    1260:	00 00                	add    BYTE PTR [eax],al
    1262:	00 14 73             	add    BYTE PTR [ebx+esi*2],dl
    1265:	32 00                	xor    al,BYTE PTR [eax]
    1267:	01 73 76             	add    DWORD PTR [ebx+0x76],esi
    126a:	00 00                	add    BYTE PTR [eax],al
    126c:	00 02                	add    BYTE PTR [edx],al
    126e:	91                   	xchg   ecx,eax
    126f:	6c                   	ins    BYTE PTR es:[edi],dx
    1270:	14 63                	adc    al,0x63
    1272:	74 00                	je     1274 <sysEnter_Vector-0x12ed8c>
    1274:	01 73 76             	add    DWORD PTR [ebx+0x76],esi
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	00 02                	add    BYTE PTR [edx],al
    127b:	91                   	xchg   ecx,eax
    127c:	68 00 00 0f 98       	push   0x980f0000
    1281:	06                   	push   es
    1282:	00 00                	add    BYTE PTR [eax],al
    1284:	01 77 6b             	add    DWORD PTR [edi+0x6b],esi
    1287:	0c 00                	or     al,0x0
    1289:	9f                   	lahf   
    128a:	1d 00 00 00 01       	sbb    eax,0x1000000
    128f:	9c                   	pushf  
    1290:	15 7f 06 00 00       	adc    eax,0x67f
    1295:	01 7c 88 0c          	add    DWORD PTR [eax+ecx*4+0xc],edi
    1299:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    129f:	01 9c fc 04 00 00 0d 	add    DWORD PTR [esp+edi*8+0xd000004],ebx
    12a6:	05 06 00 00 01       	add    eax,0x1000006
    12ab:	7c 5a                	jl     1307 <sysEnter_Vector-0x12ecf9>
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	00 02                	add    BYTE PTR [edx],al
    12b1:	91                   	xchg   ecx,eax
    12b2:	00 0d 74 06 00 00    	add    BYTE PTR ds:0x674,cl
    12b8:	01 7c 95 01          	add    DWORD PTR [ebp+edx*4+0x1],edi
    12bc:	00 00                	add    BYTE PTR [eax],al
    12be:	02 91 04 0d ae 04    	add    dl,BYTE PTR [ecx+0x4ae0d04]
    12c4:	00 00                	add    BYTE PTR [eax],al
    12c6:	01 7c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],edi
    12ca:	00 00                	add    BYTE PTR [eax],al
    12cc:	02 91 08 00 16 01    	add    dl,BYTE PTR [ecx+0x1160008]
    12d2:	05 00 00 01 81       	add    eax,0x81010000
    12d7:	5a                   	pop    edx
    12d8:	00 00                	add    BYTE PTR [eax],al
    12da:	00 b1 0c 00 9f 29    	add    BYTE PTR [ecx+0x299f000c],dh
    12e0:	00 00                	add    BYTE PTR [eax],al
    12e2:	00 01                	add    BYTE PTR [ecx],al
    12e4:	9c                   	pushf  
    12e5:	24 05                	and    al,0x5
    12e7:	00 00                	add    BYTE PTR [eax],al
    12e9:	0e                   	push   cs
    12ea:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
    12ee:	01 83 76 00 00 00    	add    DWORD PTR [ebx+0x76],eax
    12f4:	02 91 74 00 11 0c    	add    dl,BYTE PTR [ecx+0xc110074]
    12fa:	06                   	push   es
    12fb:	00 00                	add    BYTE PTR [eax],al
    12fd:	01 89 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],ecx
    1303:	da 0c 00             	fimul  DWORD PTR [eax+eax*1]
    1306:	9f                   	lahf   
    1307:	4c                   	dec    esp
    1308:	00 00                	add    BYTE PTR [eax],al
    130a:	00 01                	add    BYTE PTR [ecx],al
    130c:	9c                   	pushf  
    130d:	76 05                	jbe    1314 <sysEnter_Vector-0x12ecec>
    130f:	00 00                	add    BYTE PTR [eax],al
    1311:	0d 9f 09 00 00       	or     eax,0x99f
    1316:	01 89 97 01 00 00    	add    DWORD PTR [ecx+0x197],ecx
    131c:	02 91 00 0d 42 06    	add    dl,BYTE PTR [ecx+0x6420d00]
    1322:	00 00                	add    BYTE PTR [eax],al
    1324:	01 89 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],ecx
    132a:	02 91 04 0d 63 06    	add    dl,BYTE PTR [ecx+0x6630d04]
    1330:	00 00                	add    BYTE PTR [eax],al
    1332:	01 89 76 05 00 00    	add    DWORD PTR [ecx+0x576],ecx
    1338:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    133e:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1341:	8b 5a 00             	mov    ebx,DWORD PTR [edx+0x0]
    1344:	00 00                	add    BYTE PTR [eax],al
    1346:	02 91 74 00 06 04    	add    dl,BYTE PTR [ecx+0x4060074]
    134c:	97                   	xchg   edi,eax
    134d:	01 00                	add    DWORD PTR [eax],eax
    134f:	00 11                	add    BYTE PTR [ecx],dl
    1351:	f8                   	clc    
    1352:	05 00 00 01 91       	add    eax,0x91010000
    1357:	5a                   	pop    edx
    1358:	00 00                	add    BYTE PTR [eax],al
    135a:	00 26                	add    BYTE PTR [esi],ah
    135c:	0d 00 9f f4 01       	or     eax,0x1f49f00
    1361:	00 00                	add    BYTE PTR [eax],al
    1363:	01 9c 1e 06 00 00 0d 	add    DWORD PTR [esi+ebx*1+0xd000006],ebx
    136a:	9f                   	lahf   
    136b:	09 00                	or     DWORD PTR [eax],eax
    136d:	00 01                	add    BYTE PTR [ecx],al
    136f:	91                   	xchg   ecx,eax
    1370:	97                   	xchg   edi,eax
    1371:	01 00                	add    DWORD PTR [eax],eax
    1373:	00 02                	add    BYTE PTR [edx],al
    1375:	91                   	xchg   ecx,eax
    1376:	00 14 70             	add    BYTE PTR [eax+esi*2],dl
    1379:	69 64 00 01 93 5a 00 	imul   esp,DWORD PTR [eax+eax*1+0x1],0x5a93
    1380:	00 
    1381:	00 02                	add    BYTE PTR [edx],al
    1383:	91                   	xchg   ecx,eax
    1384:	58                   	pop    eax
    1385:	0e                   	push   cs
    1386:	42                   	inc    edx
    1387:	06                   	push   es
    1388:	00 00                	add    BYTE PTR [eax],al
    138a:	01 93 5a 00 00 00    	add    DWORD PTR [ebx+0x5a],edx
    1390:	02 91 6c 0e 63 06    	add    dl,BYTE PTR [ecx+0x6630e6c]
    1396:	00 00                	add    BYTE PTR [eax],al
    1398:	01 94 76 05 00 00 02 	add    DWORD PTR [esi+esi*2+0x2000005],edx
    139f:	91                   	xchg   ecx,eax
    13a0:	50                   	push   eax
    13a1:	0e                   	push   cs
    13a2:	06                   	push   es
    13a3:	05 00 00 01 95       	add    eax,0x95010000
    13a8:	97                   	xchg   edi,eax
    13a9:	01 00                	add    DWORD PTR [eax],eax
    13ab:	00 02                	add    BYTE PTR [edx],al
    13ad:	91                   	xchg   ecx,eax
    13ae:	68 0e 90 04 00       	push   0x4900e
    13b3:	00 01                	add    BYTE PTR [ecx],al
    13b5:	95                   	xchg   ebp,eax
    13b6:	97                   	xchg   edi,eax
    13b7:	01 00                	add    DWORD PTR [eax],eax
    13b9:	00 02                	add    BYTE PTR [edx],al
    13bb:	91                   	xchg   ecx,eax
    13bc:	64                   	fs
    13bd:	0e                   	push   cs
    13be:	cc                   	int3   
    13bf:	04 00                	add    al,0x0
    13c1:	00 01                	add    BYTE PTR [ecx],al
    13c3:	96                   	xchg   esi,eax
    13c4:	97                   	xchg   edi,eax
    13c5:	01 00                	add    DWORD PTR [eax],eax
    13c7:	00 02                	add    BYTE PTR [edx],al
    13c9:	91                   	xchg   ecx,eax
    13ca:	54                   	push   esp
    13cb:	0e                   	push   cs
    13cc:	b6 04                	mov    dh,0x4
    13ce:	00 00                	add    BYTE PTR [eax],al
    13d0:	01 a7 5a 00 00 00    	add    DWORD PTR [edi+0x5a],esp
    13d6:	02 91 60 13 fc 0d    	add    dl,BYTE PTR [ecx+0xdfc1360]
    13dc:	00 9f e0 00 00 00    	add    BYTE PTR [edi+0xe0],bl
    13e2:	14 63                	adc    al,0x63
    13e4:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13e5:	74 00                	je     13e7 <sysEnter_Vector-0x12ec19>
    13e7:	01 a9 5a 00 00 00    	add    DWORD PTR [ecx+0x5a],ebp
    13ed:	02 91 5c 00 00 11    	add    dl,BYTE PTR [ecx+0x1100005c]
    13f3:	f2 05 00 00 01 bf    	repnz add eax,0xbf010000
    13f9:	5a                   	pop    edx
    13fa:	00 00                	add    BYTE PTR [eax],al
    13fc:	00 1a                	add    BYTE PTR [edx],bl
    13fe:	0f 00 9f 4f 00 00 00 	ltr    WORD PTR [edi+0x4f]
    1405:	01 9c 70 06 00 00 0d 	add    DWORD PTR [eax+esi*2+0xd000006],ebx
    140c:	9f                   	lahf   
    140d:	09 00                	or     DWORD PTR [eax],eax
    140f:	00 01                	add    BYTE PTR [ecx],al
    1411:	bf 97 01 00 00       	mov    edi,0x197
    1416:	02 91 00 0d 42 06    	add    dl,BYTE PTR [ecx+0x6420d00]
    141c:	00 00                	add    BYTE PTR [eax],al
    141e:	01 bf 5a 00 00 00    	add    DWORD PTR [edi+0x5a],edi
    1424:	02 91 04 0d 63 06    	add    dl,BYTE PTR [ecx+0x6630d04]
    142a:	00 00                	add    BYTE PTR [eax],al
    142c:	01 bf 76 05 00 00    	add    DWORD PTR [edi+0x576],edi
    1432:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    1438:	64 00 01             	add    BYTE PTR fs:[ecx],al
    143b:	c1 5a 00 00          	rcr    DWORD PTR [edx+0x0],0x0
    143f:	00 02                	add    BYTE PTR [edx],al
    1441:	91                   	xchg   ecx,eax
    1442:	74 00                	je     1444 <sysEnter_Vector-0x12ebbc>
    1444:	11 1d 05 00 00 01    	adc    DWORD PTR ds:0x1000005,ebx
    144a:	c7                   	(bad)  
    144b:	5a                   	pop    edx
    144c:	00 00                	add    BYTE PTR [eax],al
    144e:	00 69 0f             	add    BYTE PTR [ecx+0xf],ch
    1451:	00 9f 1c 00 00 00    	add    BYTE PTR [edi+0x1c],bl
    1457:	01 9c 98 06 00 00 17 	add    DWORD PTR [eax+ebx*4+0x17000006],ebx
    145e:	70 69                	jo     14c9 <sysEnter_Vector-0x12eb37>
    1460:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1463:	c7                   	(bad)  
    1464:	76 00                	jbe    1466 <sysEnter_Vector-0x12eb9a>
    1466:	00 00                	add    BYTE PTR [eax],al
    1468:	02 91 00 00 15 68    	add    dl,BYTE PTR [ecx+0x68150000]
    146e:	06                   	push   es
    146f:	00 00                	add    BYTE PTR [eax],al
    1471:	01 cd                	add    ebp,ecx
    1473:	85 0f                	test   DWORD PTR [edi],ecx
    1475:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    147b:	01 9c bc 06 00 00 0d 	add    DWORD PTR [esp+edi*4+0xd000006],ebx
    1482:	6d                   	ins    DWORD PTR es:[edi],dx
    1483:	06                   	push   es
    1484:	00 00                	add    BYTE PTR [eax],al
    1486:	01 cd                	add    ebp,ecx
    1488:	5a                   	pop    edx
    1489:	00 00                	add    BYTE PTR [eax],al
    148b:	00 02                	add    BYTE PTR [edx],al
    148d:	91                   	xchg   ecx,eax
    148e:	00 00                	add    BYTE PTR [eax],al
    1490:	11 9d 06 00 00 01    	adc    DWORD PTR [ebp+0x1000006],ebx
    1496:	d3 97 01 00 00 a5    	rcl    DWORD PTR [edi-0x5affffff],cl
    149c:	0f 00 9f 20 00 00 00 	ltr    WORD PTR [edi+0x20]
    14a3:	01 9c f2 06 00 00 17 	add    DWORD PTR [edx+esi*8+0x17000006],ebx
    14aa:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    14ad:	00 01                	add    BYTE PTR [ecx],al
    14af:	d3 97 01 00 00 02    	rcl    DWORD PTR [edi+0x2000001],cl
    14b5:	91                   	xchg   ecx,eax
    14b6:	00 0d a2 05 00 00    	add    BYTE PTR ds:0x5a2,cl
    14bc:	01 d3                	add    ebx,edx
    14be:	9a 00 00 00 02 91 04 	call   0x491:0x2000000
    14c5:	00 0c 4f             	add    BYTE PTR [edi+ecx*2],cl
    14c8:	06                   	push   es
    14c9:	00 00                	add    BYTE PTR [eax],al
    14cb:	01 d9                	add    ecx,ebx
    14cd:	9a 00 00 00 c5 0f 00 	call   0xf:0xc5000000
    14d4:	9f                   	lahf   
    14d5:	44                   	inc    esp
    14d6:	01 00                	add    DWORD PTR [eax],eax
    14d8:	00 01                	add    BYTE PTR [ecx],al
    14da:	9c                   	pushf  
    14db:	cf                   	iret   
    14dc:	07                   	pop    es
    14dd:	00 00                	add    BYTE PTR [eax],al
    14df:	0d c2 03 00 00       	or     eax,0x3c2
    14e4:	01 d9                	add    ecx,ebx
    14e6:	97                   	xchg   edi,eax
    14e7:	01 00                	add    DWORD PTR [eax],eax
    14e9:	00 02                	add    BYTE PTR [edx],al
    14eb:	91                   	xchg   ecx,eax
    14ec:	00 0d 63 06 00 00    	add    BYTE PTR ds:0x663,cl
    14f2:	01 d9                	add    ecx,ebx
    14f4:	76 05                	jbe    14fb <sysEnter_Vector-0x12eb05>
    14f6:	00 00                	add    BYTE PTR [eax],al
    14f8:	02 91 04 0d 9d 05    	add    dl,BYTE PTR [ecx+0x59d0d04]
    14fe:	00 00                	add    BYTE PTR [eax],al
    1500:	01 d9                	add    ecx,ebx
    1502:	9a 00 00 00 02 91 08 	call   0x891:0x2000000
    1509:	14 70                	adc    al,0x70
    150b:	00 01                	add    BYTE PTR [ecx],al
    150d:	db 97 01 00 00 02    	fist   DWORD PTR [edi+0x2000001]
    1513:	91                   	xchg   ecx,eax
    1514:	74 0e                	je     1524 <sysEnter_Vector-0x12eadc>
    1516:	be 04 00 00 01       	mov    esi,0x1000004
    151b:	db 97 01 00 00 02    	fist   DWORD PTR [edi+0x2000001]
    1521:	91                   	xchg   ecx,eax
    1522:	70 14                	jo     1538 <sysEnter_Vector-0x12eac8>
    1524:	63 00                	arpl   WORD PTR [eax],ax
    1526:	01 dc                	add    esp,ebx
    1528:	5a                   	pop    edx
    1529:	00 00                	add    BYTE PTR [eax],al
    152b:	00 02                	add    BYTE PTR [edx],al
    152d:	91                   	xchg   ecx,eax
    152e:	64 08 20             	or     BYTE PTR fs:[eax],ah
    1531:	06                   	push   es
    1532:	00 00                	add    BYTE PTR [eax],al
    1534:	04 81                	add    al,0x81
    1536:	00 00                	add    BYTE PTR [eax],al
    1538:	00 01                	add    BYTE PTR [ecx],al
    153a:	dd 7e 07             	fnstsw WORD PTR [esi+0x7]
    153d:	00 00                	add    BYTE PTR [eax],al
    153f:	09 1b                	or     DWORD PTR [ebx],ebx
    1541:	06                   	push   es
    1542:	00 00                	add    BYTE PTR [eax],al
    1544:	00 09                	add    BYTE PTR [ecx],cl
    1546:	95                   	xchg   ebp,eax
    1547:	05 00 00 01 09       	add    eax,0x9010000
    154c:	27                   	daa    
    154d:	06                   	push   es
    154e:	00 00                	add    BYTE PTR [eax],al
    1550:	02 00                	add    al,BYTE PTR [eax]
    1552:	0e                   	push   cs
    1553:	e3 04                	jecxz  1559 <sysEnter_Vector-0x12eaa7>
    1555:	00 00                	add    BYTE PTR [eax],al
    1557:	01 dd                	add    ebp,ebx
    1559:	5b                   	pop    ebx
    155a:	07                   	pop    es
    155b:	00 00                	add    BYTE PTR [eax],al
    155d:	02 91 6c 0e 42 06    	add    dl,BYTE PTR [ecx+0x6420e6c]
    1563:	00 00                	add    BYTE PTR [eax],al
    1565:	01 de                	add    esi,ebx
    1567:	9a 00 00 00 02 91 68 	call   0x6891:0x2000000
    156e:	18 11                	sbb    BYTE PTR [ecx],dl
    1570:	10 00                	adc    BYTE PTR [eax],al
    1572:	9f                   	lahf   
    1573:	0e                   	push   cs
    1574:	00 00                	add    BYTE PTR [eax],al
    1576:	00 b6 07 00 00 0e    	add    BYTE PTR [esi+0xe000007],dh
    157c:	b7 05                	mov    bh,0x5
    157e:	00 00                	add    BYTE PTR [eax],al
    1580:	01 e4                	add    esp,esp
    1582:	be 00 00 00 02       	mov    esi,0x2000000
    1587:	91                   	xchg   ecx,eax
    1588:	63 00                	arpl   WORD PTR [eax],ax
    158a:	13 80 10 00 9f 0e    	adc    eax,DWORD PTR [eax+0xe9f0010]
    1590:	00 00                	add    BYTE PTR [eax],al
    1592:	00 0e                	add    BYTE PTR [esi],cl
    1594:	b7 05                	mov    bh,0x5
    1596:	00 00                	add    BYTE PTR [eax],al
    1598:	01 fa                	add    edx,edi
    159a:	be 00 00 00 02       	mov    esi,0x2000000
    159f:	91                   	xchg   ecx,eax
    15a0:	62 00                	bound  eax,QWORD PTR [eax]
    15a2:	00 19                	add    BYTE PTR [ecx],bl
    15a4:	fb                   	sti    
    15a5:	04 00                	add    al,0x0
    15a7:	00 01                	add    BYTE PTR [ecx],al
    15a9:	09 01                	or     DWORD PTR [ecx],eax
    15ab:	9a 00 00 00 09 11 00 	call   0x11:0x9000000
    15b2:	9f                   	lahf   
    15b3:	20 00                	and    BYTE PTR [eax],al
    15b5:	00 00                	add    BYTE PTR [eax],al
    15b7:	01 9c 17 08 00 00 1a 	add    DWORD PTR [edi+edx*1+0x1a000008],ebx
    15be:	c2 03 00             	ret    0x3
    15c1:	00 01                	add    BYTE PTR [ecx],al
    15c3:	09 01                	or     DWORD PTR [ecx],eax
    15c5:	97                   	xchg   edi,eax
    15c6:	01 00                	add    DWORD PTR [eax],eax
    15c8:	00 02                	add    BYTE PTR [edx],al
    15ca:	91                   	xchg   ecx,eax
    15cb:	00 1a                	add    BYTE PTR [edx],bl
    15cd:	63 06                	arpl   WORD PTR [esi],ax
    15cf:	00 00                	add    BYTE PTR [eax],al
    15d1:	01 09                	add    DWORD PTR [ecx],ecx
    15d3:	01 76 05             	add    DWORD PTR [esi+0x5],esi
    15d6:	00 00                	add    BYTE PTR [eax],al
    15d8:	02 91 04 1a 9d 05    	add    dl,BYTE PTR [ecx+0x59d1a04]
    15de:	00 00                	add    BYTE PTR [eax],al
    15e0:	01 09                	add    DWORD PTR [ecx],ecx
    15e2:	01 9a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ebx
    15e8:	91                   	xchg   ecx,eax
    15e9:	08 00                	or     BYTE PTR [eax],al
    15eb:	19 4a 05             	sbb    DWORD PTR [edx+0x5],ecx
    15ee:	00 00                	add    BYTE PTR [eax],al
    15f0:	01 0e                	add    DWORD PTR [esi],ecx
    15f2:	01 76 05             	add    DWORD PTR [esi+0x5],esi
    15f5:	00 00                	add    BYTE PTR [eax],al
    15f7:	29 11                	sub    DWORD PTR [ecx],edx
    15f9:	00 9f b6 01 00 00    	add    BYTE PTR [edi+0x1b6],bl
    15ff:	01 9c b5 08 00 00 1a 	add    DWORD PTR [ebp+esi*4+0x1a000008],ebx
    1606:	47                   	inc    edi
    1607:	06                   	push   es
    1608:	00 00                	add    BYTE PTR [eax],al
    160a:	01 0e                	add    DWORD PTR [esi],ecx
    160c:	01 b3 00 00 00 02    	add    DWORD PTR [ebx+0x2000000],esi
    1612:	91                   	xchg   ecx,eax
    1613:	00 1a                	add    BYTE PTR [edx],bl
    1615:	42                   	inc    edx
    1616:	06                   	push   es
    1617:	00 00                	add    BYTE PTR [eax],al
    1619:	01 0e                	add    DWORD PTR [esi],ecx
    161b:	01 b5 08 00 00 02    	add    DWORD PTR [ebp+0x2000008],esi
    1621:	91                   	xchg   ecx,eax
    1622:	04 1b                	add    al,0x1b
    1624:	63 06                	arpl   WORD PTR [esi],ax
    1626:	00 00                	add    BYTE PTR [eax],al
    1628:	01 10                	add    DWORD PTR [eax],edx
    162a:	01 76 05             	add    DWORD PTR [esi+0x5],esi
    162d:	00 00                	add    BYTE PTR [eax],al
    162f:	02 91 5c 1c 63 6d    	add    dl,BYTE PTR [ecx+0x6d631c5c]
    1635:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1638:	11 01                	adc    DWORD PTR [ecx],eax
    163a:	bb 08 00 00 03       	mov    ebx,0x3000008
    163f:	91                   	xchg   ecx,eax
    1640:	dc 77 1b             	fdiv   QWORD PTR [edi+0x1b]
    1643:	06                   	push   es
    1644:	05 00 00 01 12       	add    eax,0x12010000
    1649:	01 97 01 00 00 02    	add    DWORD PTR [edi+0x2000001],edx
    164f:	91                   	xchg   ecx,eax
    1650:	6c                   	ins    BYTE PTR es:[edi],dx
    1651:	1b 90 04 00 00 01    	sbb    edx,DWORD PTR [eax+0x1000004]
    1657:	12 01                	adc    al,BYTE PTR [ecx]
    1659:	97                   	xchg   edi,eax
    165a:	01 00                	add    DWORD PTR [eax],eax
    165c:	00 02                	add    BYTE PTR [edx],al
    165e:	91                   	xchg   ecx,eax
    165f:	68 1b b6 04 00       	push   0x4b61b
    1664:	00 01                	add    BYTE PTR [ecx],al
    1666:	1f                   	pop    ds
    1667:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    166a:	00 00                	add    BYTE PTR [eax],al
    166c:	02 91 64 13 f2 11    	add    dl,BYTE PTR [ecx+0x11f21364]
    1672:	00 9f e5 00 00 00    	add    BYTE PTR [edi+0xe5],bl
    1678:	1c 63                	sbb    al,0x63
    167a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    167b:	74 00                	je     167d <sysEnter_Vector-0x12e983>
    167d:	01 21                	add    DWORD PTR [ecx],esp
    167f:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    1682:	00 00                	add    BYTE PTR [eax],al
    1684:	02 91 60 00 00 06    	add    dl,BYTE PTR [ecx+0x6000060]
    168a:	04 5a                	add    al,0x5a
    168c:	00 00                	add    BYTE PTR [eax],al
    168e:	00 1d 3a 00 00 00    	add    BYTE PTR ds:0x3a,bl
    1694:	cc                   	int3   
    1695:	08 00                	or     BYTE PTR [eax],al
    1697:	00 1e                	add    BYTE PTR [esi],bl
    1699:	8e 01                	mov    es,WORD PTR [ecx]
    169b:	00 00                	add    BYTE PTR [eax],al
    169d:	ff 03                	inc    DWORD PTR [ebx]
    169f:	00 19                	add    BYTE PTR [ecx],bl
    16a1:	0f 05                	syscall 
    16a3:	00 00                	add    BYTE PTR [eax],al
    16a5:	01 30                	add    DWORD PTR [eax],esi
    16a7:	01 76 05             	add    DWORD PTR [esi+0x5],esi
    16aa:	00 00                	add    BYTE PTR [eax],al
    16ac:	df 12                	fist   WORD PTR [edx]
    16ae:	00 9f 2d 00 00 00    	add    BYTE PTR [edi+0x2d],bl
    16b4:	01 9c 05 09 00 00 1a 	add    DWORD PTR [ebp+eax*1+0x1a000009],ebx
    16bb:	47                   	inc    edi
    16bc:	06                   	push   es
    16bd:	00 00                	add    BYTE PTR [eax],al
    16bf:	01 30                	add    DWORD PTR [eax],esi
    16c1:	01 97 01 00 00 02    	add    DWORD PTR [edi+0x2000001],edx
    16c7:	91                   	xchg   ecx,eax
    16c8:	00 1a                	add    BYTE PTR [edx],bl
    16ca:	42                   	inc    edx
    16cb:	06                   	push   es
    16cc:	00 00                	add    BYTE PTR [eax],al
    16ce:	01 30                	add    DWORD PTR [eax],esi
    16d0:	01 b5 08 00 00 02    	add    DWORD PTR [ebp+0x2000008],esi
    16d6:	91                   	xchg   ecx,eax
    16d7:	04 00                	add    al,0x0
    16d9:	1f                   	pop    ds
    16da:	d4 04                	aam    0x4
    16dc:	00 00                	add    BYTE PTR [eax],al
    16de:	01 37                	add    DWORD PTR [edi],esi
    16e0:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    16e3:	00 00                	add    BYTE PTR [eax],al
    16e5:	0c 13                	or     al,0x13
    16e7:	00 9f 19 00 00 00    	add    BYTE PTR [edi+0x19],bl
    16ed:	01 9c 20 4b 00 00 00 	add    DWORD PTR [eax+eiz*1+0x4b],ebx
    16f4:	06                   	push   es
    16f5:	34 76                	xor    al,0x76
    16f7:	00 00                	add    BYTE PTR [eax],al
    16f9:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    16ff:	9f                   	lahf   
    1700:	20 af 00 00 00 06    	and    BYTE PTR [edi+0x6000000],ch
    1706:	35 76 00 00 00       	xor    eax,0x76
    170b:	05 03 a4 54 00       	add    eax,0x54a403
    1710:	9f                   	lahf   
    1711:	20 5b 01             	and    BYTE PTR [ebx+0x1],bl
    1714:	00 00                	add    BYTE PTR [eax],al
    1716:	06                   	push   es
    1717:	36                   	ss
    1718:	76 00                	jbe    171a <sysEnter_Vector-0x12e8e6>
    171a:	00 00                	add    BYTE PTR [eax],al
    171c:	05 03 9c 54 00       	add    eax,0x549c03
    1721:	9f                   	lahf   
    1722:	20 54 00 00          	and    BYTE PTR [eax+eax*1+0x0],dl
    1726:	00 06                	add    BYTE PTR [esi],al
    1728:	37                   	aaa    
    1729:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    172a:	00 00                	add    BYTE PTR [eax],al
    172c:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    1732:	9f                   	lahf   
    1733:	20 28                	and    BYTE PTR [eax],ch
    1735:	00 00                	add    BYTE PTR [eax],al
    1737:	00 07                	add    BYTE PTR [edi],al
    1739:	4f                   	dec    edi
    173a:	76 05                	jbe    1741 <sysEnter_Vector-0x12e8bf>
    173c:	00 00                	add    BYTE PTR [eax],al
    173e:	05 03 a8 54 00       	add    eax,0x54a803
    1743:	9f                   	lahf   
    1744:	20 a7 05 00 00 01    	and    BYTE PTR [edi+0x1000005],ah
    174a:	0c be                	or     al,0xbe
    174c:	00 00                	add    BYTE PTR [eax],al
    174e:	00 05 03 b4 54 00    	add    BYTE PTR ds:0x54b403,al
    1754:	9f                   	lahf   
    1755:	20 38                	and    BYTE PTR [eax],bh
    1757:	05 00 00 01 0d       	add    eax,0xd010000
    175c:	97                   	xchg   edi,eax
    175d:	01 00                	add    DWORD PTR [eax],eax
    175f:	00 05 03 b8 54 00    	add    BYTE PTR ds:0x54b803,al
    1765:	9f                   	lahf   
    1766:	00 72 03             	add    BYTE PTR [edx+0x3],dh
    1769:	00 00                	add    BYTE PTR [eax],al
    176b:	04 00                	add    al,0x0
    176d:	11 07                	adc    DWORD PTR [edi],eax
    176f:	00 00                	add    BYTE PTR [eax],al
    1771:	04 01                	add    al,0x1
    1773:	f4                   	hlt    
    1774:	00 00                	add    BYTE PTR [eax],al
    1776:	00 0c 48             	add    BYTE PTR [eax+ecx*2],cl
    1779:	07                   	pop    es
    177a:	00 00                	add    BYTE PTR [eax],al
    177c:	72 00                	jb     177e <sysEnter_Vector-0x12e882>
    177e:	00 00                	add    BYTE PTR [eax],al
    1780:	28 13                	sub    BYTE PTR [ebx],dl
    1782:	00 9f 6d 03 00 00    	add    BYTE PTR [edi+0x36d],bl
    1788:	66 09 00             	or     WORD PTR [eax],ax
    178b:	00 02                	add    BYTE PTR [edx],al
    178d:	01 06                	add    DWORD PTR [esi],eax
    178f:	5d                   	pop    ebp
    1790:	00 00                	add    BYTE PTR [eax],al
    1792:	00 02                	add    BYTE PTR [edx],al
    1794:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    179a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    17a1:	02 08                	add    cl,BYTE PTR [eax]
    17a3:	05 00 00 00 00       	add    eax,0x0
    17a8:	04 e8                	add    al,0xe8
    17aa:	06                   	push   es
    17ab:	00 00                	add    BYTE PTR [eax],al
    17ad:	02 2e                	add    ch,BYTE PTR [esi]
    17af:	4c                   	dec    esp
    17b0:	00 00                	add    BYTE PTR [eax],al
    17b2:	00 02                	add    BYTE PTR [edx],al
    17b4:	01 08                	add    DWORD PTR [eax],ecx
    17b6:	5b                   	pop    ebx
    17b7:	00 00                	add    BYTE PTR [eax],al
    17b9:	00 02                	add    BYTE PTR [edx],al
    17bb:	02 07                	add    al,BYTE PTR [edi]
    17bd:	0e                   	push   cs
    17be:	00 00                	add    BYTE PTR [eax],al
    17c0:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    17c3:	00 00                	add    BYTE PTR [eax],al
    17c5:	00 02                	add    BYTE PTR [edx],al
    17c7:	34 65                	xor    al,0x65
    17c9:	00 00                	add    BYTE PTR [eax],al
    17cb:	00 02                	add    BYTE PTR [edx],al
    17cd:	04 07                	add    al,0x7
    17cf:	3e 00 00             	add    BYTE PTR ds:[eax],al
    17d2:	00 02                	add    BYTE PTR [edx],al
    17d4:	08 07                	or     BYTE PTR [edi],al
    17d6:	34 00                	xor    al,0x0
    17d8:	00 00                	add    BYTE PTR [eax],al
    17da:	04 9d                	add    al,0x9d
    17dc:	04 00                	add    al,0x0
    17de:	00 03                	add    BYTE PTR [ebx],al
    17e0:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
    17e3:	00 00                	add    BYTE PTR [eax],al
    17e5:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    17ec:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    17ef:	9b                   	fwait
    17f0:	00 00                	add    BYTE PTR [eax],al
    17f2:	00 02                	add    BYTE PTR [edx],al
    17f4:	01 06                	add    DWORD PTR [esi],eax
    17f6:	64 00 00             	add    BYTE PTR fs:[eax],al
    17f9:	00 05 fc 06 00 00    	add    BYTE PTR ds:0x6fc,al
    17ff:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    1802:	d0 00                	rol    BYTE PTR [eax],1
    1804:	00 00                	add    BYTE PTR [eax],al
    1806:	06                   	push   es
    1807:	d1 06                	rol    DWORD PTR [esi],1
    1809:	00 00                	add    BYTE PTR [eax],al
    180b:	04 2e                	add    al,0x2e
    180d:	5a                   	pop    edx
    180e:	00 00                	add    BYTE PTR [eax],al
    1810:	00 00                	add    BYTE PTR [eax],al
    1812:	07                   	pop    es
    1813:	6c                   	ins    BYTE PTR es:[edi],dx
    1814:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1816:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    1819:	5a                   	pop    edx
    181a:	00 00                	add    BYTE PTR [eax],al
    181c:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    181f:	02 07                	add    al,BYTE PTR [edi]
    1821:	00 00                	add    BYTE PTR [eax],al
    1823:	04 30                	add    al,0x30
    1825:	d0 00                	rol    BYTE PTR [eax],1
    1827:	00 00                	add    BYTE PTR [eax],al
    1829:	08 06                	or     BYTE PTR [esi],al
    182b:	5b                   	pop    ebx
    182c:	07                   	pop    es
    182d:	00 00                	add    BYTE PTR [eax],al
    182f:	04 31                	add    al,0x31
    1831:	d7                   	xlat   BYTE PTR ds:[ebx]
    1832:	00 00                	add    BYTE PTR [eax],al
    1834:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
    1837:	02 01                	add    al,BYTE PTR [ecx]
    1839:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
    183f:	04 93                	add    al,0x93
    1841:	00 00                	add    BYTE PTR [eax],al
    1843:	00 04 60             	add    BYTE PTR [eax+eiz*2],al
    1846:	07                   	pop    es
    1847:	00 00                	add    BYTE PTR [eax],al
    1849:	04 32                	add    al,0x32
    184b:	93                   	xchg   ebx,eax
    184c:	00 00                	add    BYTE PTR [eax],al
    184e:	00 09                	add    BYTE PTR [ecx],cl
    1850:	12 03                	adc    al,BYTE PTR [ebx]
    1852:	00 00                	add    BYTE PTR [eax],al
    1854:	04 65                	add    al,0x65
    1856:	00 00                	add    BYTE PTR [eax],al
    1858:	00 06                	add    BYTE PTR [esi],al
    185a:	15 aa 01 00 00       	adc    eax,0x1aa
    185f:	0a 77 03             	or     dh,BYTE PTR [edi+0x3]
    1862:	00 00                	add    BYTE PTR [eax],al
    1864:	00 0a                	add    BYTE PTR [edx],cl
    1866:	af                   	scas   eax,DWORD PTR es:[edi]
    1867:	03 00                	add    eax,DWORD PTR [eax]
    1869:	00 01                	add    BYTE PTR [ecx],al
    186b:	0a 6e 02             	or     ch,BYTE PTR [esi+0x2]
    186e:	00 00                	add    BYTE PTR [eax],al
    1870:	02 0a                	add    cl,BYTE PTR [edx]
    1872:	04 03                	add    al,0x3
    1874:	00 00                	add    BYTE PTR [eax],al
    1876:	03 0a                	add    ecx,DWORD PTR [edx]
    1878:	4e                   	dec    esi
    1879:	02 00                	add    al,BYTE PTR [eax]
    187b:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    187e:	c9                   	leave  
    187f:	03 00                	add    eax,DWORD PTR [eax]
    1881:	00 05 0a 28 03 00    	add    BYTE PTR ds:0x3280a,al
    1887:	00 06                	add    BYTE PTR [esi],al
    1889:	0a 61 02             	or     ah,BYTE PTR [ecx+0x2]
    188c:	00 00                	add    BYTE PTR [eax],al
    188e:	07                   	pop    es
    188f:	0a fa                	or     bh,dl
    1891:	03 00                	add    eax,DWORD PTR [eax]
    1893:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    1896:	6a 03                	push   0x3
    1898:	00 00                	add    BYTE PTR [eax],al
    189a:	59                   	pop    ecx
    189b:	0a 09                	or     cl,BYTE PTR [ecx]
    189d:	04 00                	add    al,0x0
    189f:	00 61 0a             	add    BYTE PTR [ecx+0xa],ah
    18a2:	f0 02 00             	lock add al,BYTE PTR [eax]
    18a5:	00 97 0b 87 03 00    	add    BYTE PTR [edi+0x3870b],dl
    18ab:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    18ae:	0b 5d 03             	or     ebx,DWORD PTR [ebp+0x3]
    18b1:	00 00                	add    BYTE PTR [eax],al
    18b3:	64 01 0b             	add    DWORD PTR fs:[ebx],ecx
    18b6:	ec                   	in     al,dx
    18b7:	03 00                	add    eax,DWORD PTR [eax]
    18b9:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    18bc:	0b d2                	or     edx,edx
    18be:	02 00                	add    al,BYTE PTR [eax]
    18c0:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    18c3:	0b 21                	or     esp,DWORD PTR [ecx]
    18c5:	04 00                	add    al,0x0
    18c7:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    18ca:	0b 35 03 00 00 68    	or     esi,DWORD PTR ds:0x68000003
    18d0:	01 0b                	add    DWORD PTR [ebx],ecx
    18d2:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    18d3:	02 00                	add    al,BYTE PTR [eax]
    18d5:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    18d8:	0b 9e 03 00 00 70    	or     ebx,DWORD PTR [esi+0x70000003]
    18de:	01 0b                	add    DWORD PTR [ebx],ecx
    18e0:	e0 02                	loopne 18e4 <sysEnter_Vector-0x12e71c>
    18e2:	00 00                	add    BYTE PTR [eax],al
    18e4:	71 01                	jno    18e7 <sysEnter_Vector-0x12e719>
    18e6:	0b d7                	or     edx,edi
    18e8:	03 00                	add    eax,DWORD PTR [eax]
    18ea:	00 00                	add    BYTE PTR [eax],al
    18ec:	03 0b                	add    ecx,DWORD PTR [ebx]
    18ee:	42                   	inc    edx
    18ef:	03 00                	add    eax,DWORD PTR [eax]
    18f1:	00 01                	add    BYTE PTR [ecx],al
    18f3:	03 0b                	add    ecx,DWORD PTR [ebx]
    18f5:	b6 02                	mov    dh,0x2
    18f7:	00 00                	add    BYTE PTR [eax],al
    18f9:	02 03                	add    al,BYTE PTR [ebx]
    18fb:	0b 7b 02             	or     edi,DWORD PTR [ebx+0x2]
    18fe:	00 00                	add    BYTE PTR [eax],al
    1900:	03 03                	add    eax,DWORD PTR [ebx]
    1902:	0b 8b 02 00 00 04    	or     ecx,DWORD PTR [ebx+0x4000002]
    1908:	03 0b                	add    ecx,DWORD PTR [ebx]
    190a:	c2 02 00             	ret    0x2
    190d:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    1913:	07                   	pop    es
    1914:	39 00                	cmp    DWORD PTR [eax],eax
    1916:	00 00                	add    BYTE PTR [eax],al
    1918:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    191b:	e1 00                	loope  191d <sysEnter_Vector-0x12e6e3>
    191d:	00 00                	add    BYTE PTR [eax],al
    191f:	0c 04                	or     al,0x4
    1921:	08 04 8c             	or     BYTE PTR [esp+ecx*4],al
    1924:	00 00                	add    BYTE PTR [eax],al
    1926:	00 0d 08 07 00 00    	add    BYTE PTR ds:0x708,cl
    192c:	01 0c 28             	add    DWORD PTR [eax+ebp*1],ecx
    192f:	13 00                	adc    eax,DWORD PTR [eax]
    1931:	9f                   	lahf   
    1932:	6c                   	ins    BYTE PTR es:[edi],dx
    1933:	00 00                	add    BYTE PTR [eax],al
    1935:	00 01                	add    BYTE PTR [ecx],al
    1937:	9c                   	pushf  
    1938:	0e                   	push   cs
    1939:	28 07                	sub    BYTE PTR [edi],al
    193b:	00 00                	add    BYTE PTR [eax],al
    193d:	01 16                	add    DWORD PTR [esi],edx
    193f:	5a                   	pop    edx
    1940:	00 00                	add    BYTE PTR [eax],al
    1942:	00 94 13 00 9f 87 00 	add    BYTE PTR [ebx+edx*1+0x879f00],dl
    1949:	00 00                	add    BYTE PTR [eax],al
    194b:	01 9c 07 02 00 00 0f 	add    DWORD PTR [edi+eax*1+0xf000002],ebx
    1952:	a2 05 00 00 01       	mov    ds:0x1000005,al
    1957:	16                   	push   ss
    1958:	73 00                	jae    195a <sysEnter_Vector-0x12e6a6>
    195a:	00 00                	add    BYTE PTR [eax],al
    195c:	02 91 00 10 ba 06    	add    dl,BYTE PTR [ecx+0x6ba1000]
    1962:	00 00                	add    BYTE PTR [eax],al
    1964:	01 1a                	add    DWORD PTR [edx],ebx
    1966:	5a                   	pop    edx
    1967:	00 00                	add    BYTE PTR [eax],al
    1969:	00 02                	add    BYTE PTR [edx],al
    196b:	91                   	xchg   ecx,eax
    196c:	74 00                	je     196e <sysEnter_Vector-0x12e692>
    196e:	11 55 07             	adc    DWORD PTR [ebp+0x7],edx
    1971:	00 00                	add    BYTE PTR [eax],al
    1973:	01 2e                	add    DWORD PTR [esi],ebp
    1975:	1b 14 00             	sbb    edx,DWORD PTR [eax+eax*1]
    1978:	9f                   	lahf   
    1979:	39 00                	cmp    DWORD PTR [eax],eax
    197b:	00 00                	add    BYTE PTR [eax],al
    197d:	01 9c 43 02 00 00 0f 	add    DWORD PTR [ebx+eax*2+0xf000002],ebx
    1984:	b1 06                	mov    cl,0x6
    1986:	00 00                	add    BYTE PTR [eax],al
    1988:	01 2e                	add    DWORD PTR [esi],ebp
    198a:	b8 01 00 00 02       	mov    eax,0x2000001
    198f:	91                   	xchg   ecx,eax
    1990:	00 12                	add    BYTE PTR [edx],dl
    1992:	6d                   	ins    DWORD PTR es:[edi],dx
    1993:	70 00                	jo     1995 <sysEnter_Vector-0x12e66b>
    1995:	01 30                	add    DWORD PTR [eax],esi
    1997:	43                   	inc    ebx
    1998:	02 00                	add    al,BYTE PTR [eax]
    199a:	00 02                	add    BYTE PTR [edx],al
    199c:	91                   	xchg   ecx,eax
    199d:	74 13                	je     19b2 <sysEnter_Vector-0x12e64e>
    199f:	13 07                	adc    eax,DWORD PTR [edi]
    19a1:	00 00                	add    BYTE PTR [eax],al
    19a3:	01 3a                	add    DWORD PTR [edx],edi
    19a5:	46                   	inc    esi
    19a6:	14 00                	adc    al,0x0
    19a8:	9f                   	lahf   
    19a9:	00 08                	add    BYTE PTR [eax],cl
    19ab:	04 dd                	add    al,0xdd
    19ad:	00 00                	add    BYTE PTR [eax],al
    19af:	00 14 d8             	add    BYTE PTR [eax+ebx*8],dl
    19b2:	06                   	push   es
    19b3:	00 00                	add    BYTE PTR [eax],al
    19b5:	01 40 b8             	add    DWORD PTR [eax-0x48],eax
    19b8:	01 00                	add    DWORD PTR [eax],eax
    19ba:	00 54 14 00          	add    BYTE PTR [esp+edx*1+0x0],dl
    19be:	9f                   	lahf   
    19bf:	d4 01                	aam    0x1
    19c1:	00 00                	add    BYTE PTR [eax],al
    19c3:	01 9c b7 02 00 00 0f 	add    DWORD PTR [edi+esi*4+0xf000002],ebx
    19ca:	a2 05 00 00 01       	mov    ds:0x1000005,al
    19cf:	40                   	inc    eax
    19d0:	73 00                	jae    19d2 <sysEnter_Vector-0x12e62e>
    19d2:	00 00                	add    BYTE PTR [eax],al
    19d4:	02 91 00 10 83 04    	add    dl,BYTE PTR [ecx+0x4831000]
    19da:	00 00                	add    BYTE PTR [eax],al
    19dc:	01 42 b8             	add    DWORD PTR [edx-0x48],eax
    19df:	01 00                	add    DWORD PTR [eax],eax
    19e1:	00 02                	add    BYTE PTR [edx],al
    19e3:	91                   	xchg   ecx,eax
    19e4:	60                   	pusha  
    19e5:	10 f5                	adc    ch,dh
    19e7:	06                   	push   es
    19e8:	00 00                	add    BYTE PTR [eax],al
    19ea:	01 44 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],eax
    19ee:	00 00                	add    BYTE PTR [eax],al
    19f0:	02 91 6c 10 a4 06    	add    dl,BYTE PTR [ecx+0x6a4106c]
    19f6:	00 00                	add    BYTE PTR [eax],al
    19f8:	01 45 5a             	add    DWORD PTR [ebp+0x5a],eax
    19fb:	00 00                	add    BYTE PTR [eax],al
    19fd:	00 02                	add    BYTE PTR [edx],al
    19ff:	91                   	xchg   ecx,eax
    1a00:	68 10 e0 06 00       	push   0x6e010
    1a05:	00 01                	add    BYTE PTR [ecx],al
    1a07:	46                   	inc    esi
    1a08:	43                   	inc    ebx
    1a09:	02 00                	add    al,BYTE PTR [eax]
    1a0b:	00 02                	add    BYTE PTR [edx],al
    1a0d:	91                   	xchg   ecx,eax
    1a0e:	64 10 1c 07          	adc    BYTE PTR fs:[edi+eax*1],bl
    1a12:	00 00                	add    BYTE PTR [eax],al
    1a14:	01 47 b7             	add    DWORD PTR [edi-0x49],eax
    1a17:	02 00                	add    al,BYTE PTR [eax]
    1a19:	00 02                	add    BYTE PTR [edx],al
    1a1b:	91                   	xchg   ecx,eax
    1a1c:	5c                   	pop    esp
    1a1d:	00 08                	add    BYTE PTR [eax],cl
    1a1f:	04 41                	add    al,0x41
    1a21:	00 00                	add    BYTE PTR [eax],al
    1a23:	00 14 0c             	add    BYTE PTR [esp+ecx*1],dl
    1a26:	07                   	pop    es
    1a27:	00 00                	add    BYTE PTR [eax],al
    1a29:	01 67 b8             	add    DWORD PTR [edi-0x48],esp
    1a2c:	01 00                	add    DWORD PTR [eax],eax
    1a2e:	00 28                	add    BYTE PTR [eax],ch
    1a30:	16                   	push   ss
    1a31:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    1a37:	01 9c e5 02 00 00 0f 	add    DWORD PTR [ebp+eiz*8+0xf000002],ebx
    1a3e:	a2 05 00 00 01       	mov    ds:0x1000005,al
    1a43:	67 73 00             	addr16 jae 1a46 <sysEnter_Vector-0x12e5ba>
    1a46:	00 00                	add    BYTE PTR [eax],al
    1a48:	02 91 00 00 15 f0    	add    dl,BYTE PTR [ecx-0xfeb0000]
    1a4e:	06                   	push   es
    1a4f:	00 00                	add    BYTE PTR [eax],al
    1a51:	01 6c 48 16          	add    DWORD PTR [eax+ecx*2+0x16],ebp
    1a55:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    1a5b:	01 9c 09 03 00 00 0f 	add    DWORD PTR [ecx+ecx*1+0xf000003],ebx
    1a62:	b1 06                	mov    cl,0x6
    1a64:	00 00                	add    BYTE PTR [eax],al
    1a66:	01 6c b8 01          	add    DWORD PTR [eax+edi*4+0x1],ebp
    1a6a:	00 00                	add    BYTE PTR [eax],al
    1a6c:	02 91 00 00 0d c2    	add    dl,BYTE PTR [ecx-0x3df30000]
    1a72:	06                   	push   es
    1a73:	00 00                	add    BYTE PTR [eax],al
    1a75:	01 71 63             	add    DWORD PTR [ecx+0x63],esi
    1a78:	16                   	push   ss
    1a79:	00 9f 32 00 00 00    	add    BYTE PTR [edi+0x32],bl
    1a7f:	01 9c 16 4b 00 00 00 	add    DWORD PTR [esi+edx*1+0x4b],ebx
    1a86:	04 34                	add    al,0x34
    1a88:	5a                   	pop    edx
    1a89:	00 00                	add    BYTE PTR [eax],al
    1a8b:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    1a91:	9f                   	lahf   
    1a92:	16                   	push   ss
    1a93:	af                   	scas   eax,DWORD PTR es:[edi]
    1a94:	00 00                	add    BYTE PTR [eax],al
    1a96:	00 04 35 5a 00 00 00 	add    BYTE PTR [esi*1+0x5a],al
    1a9d:	05 03 a4 54 00       	add    eax,0x54a403
    1aa2:	9f                   	lahf   
    1aa3:	16                   	push   ss
    1aa4:	5b                   	pop    ebx
    1aa5:	01 00                	add    DWORD PTR [eax],eax
    1aa7:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1aaa:	5a                   	pop    edx
    1aab:	00 00                	add    BYTE PTR [eax],al
    1aad:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    1ab3:	9f                   	lahf   
    1ab4:	16                   	push   ss
    1ab5:	54                   	push   esp
    1ab6:	00 00                	add    BYTE PTR [eax],al
    1ab8:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1abb:	7e 00                	jle    1abd <sysEnter_Vector-0x12e543>
    1abd:	00 00                	add    BYTE PTR [eax],al
    1abf:	05 03 ac 54 00       	add    eax,0x54ac03
    1ac4:	9f                   	lahf   
    1ac5:	16                   	push   ss
    1ac6:	28 00                	sub    BYTE PTR [eax],al
    1ac8:	00 00                	add    BYTE PTR [eax],al
    1aca:	05 4f 6f 03 00       	add    eax,0x36f4f
    1acf:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    1ad5:	9f                   	lahf   
    1ad6:	08 04 ba             	or     BYTE PTR [edx+edi*4],al
    1ad9:	01 00                	add    DWORD PTR [eax],eax
    1adb:	00 00                	add    BYTE PTR [eax],al
    1add:	ea 01 00 00 04 00 75 	jmp    0x7500:0x4000001
    1ae4:	08 00                	or     BYTE PTR [eax],al
    1ae6:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1ae9:	f4                   	hlt    
    1aea:	00 00                	add    BYTE PTR [eax],al
    1aec:	00 0c 6a             	add    BYTE PTR [edx+ebp*2],cl
    1aef:	07                   	pop    es
    1af0:	00 00                	add    BYTE PTR [eax],al
    1af2:	72 00                	jb     1af4 <sysEnter_Vector-0x12e50c>
    1af4:	00 00                	add    BYTE PTR [eax],al
    1af6:	98                   	cwde   
    1af7:	16                   	push   ss
    1af8:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    1afe:	ba 0a 00 00 02       	mov    edx,0x200000a
    1b03:	01 08                	add    DWORD PTR [eax],ecx
    1b05:	5b                   	pop    ebx
    1b06:	00 00                	add    BYTE PTR [eax],al
    1b08:	00 02                	add    BYTE PTR [edx],al
    1b0a:	02 07                	add    al,BYTE PTR [edi]
    1b0c:	0e                   	push   cs
    1b0d:	00 00                	add    BYTE PTR [eax],al
    1b0f:	00 02                	add    BYTE PTR [edx],al
    1b11:	04 07                	add    al,0x7
    1b13:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1b16:	00 02                	add    BYTE PTR [edx],al
    1b18:	04 07                	add    al,0x7
    1b1a:	39 00                	cmp    DWORD PTR [eax],eax
    1b1c:	00 00                	add    BYTE PTR [eax],al
    1b1e:	02 01                	add    al,BYTE PTR [ecx]
    1b20:	06                   	push   es
    1b21:	5d                   	pop    ebp
    1b22:	00 00                	add    BYTE PTR [eax],al
    1b24:	00 02                	add    BYTE PTR [edx],al
    1b26:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1b2c:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1b33:	02 08                	add    cl,BYTE PTR [eax]
    1b35:	05 00 00 00 00       	add    eax,0x0
    1b3a:	02 08                	add    cl,BYTE PTR [eax]
    1b3c:	07                   	pop    es
    1b3d:	34 00                	xor    al,0x0
    1b3f:	00 00                	add    BYTE PTR [eax],al
    1b41:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1b48:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1b4b:	e1 00                	loope  1b4d <sysEnter_Vector-0x12e4b3>
    1b4d:	00 00                	add    BYTE PTR [eax],al
    1b4f:	04 04                	add    al,0x4
    1b51:	05 04 7a 00 00       	add    eax,0x7a04
    1b56:	00 02                	add    BYTE PTR [edx],al
    1b58:	01 06                	add    DWORD PTR [esi],eax
    1b5a:	64 00 00             	add    BYTE PTR fs:[eax],al
    1b5d:	00 06                	add    BYTE PTR [esi],al
    1b5f:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    1b65:	33 00                	xor    eax,DWORD PTR [eax]
    1b67:	00 00                	add    BYTE PTR [eax],al
    1b69:	05 04 92 00 00       	add    eax,0x9204
    1b6e:	00 07                	add    BYTE PTR [edi],al
    1b70:	7a 00                	jp     1b72 <sysEnter_Vector-0x12e48e>
    1b72:	00 00                	add    BYTE PTR [eax],al
    1b74:	06                   	push   es
    1b75:	9d                   	popf   
    1b76:	04 00                	add    al,0x0
    1b78:	00 03                	add    BYTE PTR [ebx],al
    1b7a:	d8 33                	fdiv   DWORD PTR [ebx]
    1b7c:	00 00                	add    BYTE PTR [eax],al
    1b7e:	00 02                	add    BYTE PTR [edx],al
    1b80:	0c 04                	or     al,0x4
    1b82:	9b                   	fwait
    1b83:	00 00                	add    BYTE PTR [eax],al
    1b85:	00 02                	add    BYTE PTR [edx],al
    1b87:	01 02                	add    DWORD PTR [edx],eax
    1b89:	95                   	xchg   ebp,eax
    1b8a:	00 00                	add    BYTE PTR [eax],al
    1b8c:	00 08                	add    BYTE PTR [eax],cl
    1b8e:	7c 07                	jl     1b97 <sysEnter_Vector-0x12e469>
    1b90:	00 00                	add    BYTE PTR [eax],al
    1b92:	01 0a                	add    DWORD PTR [edx],ecx
    1b94:	72 00                	jb     1b96 <sysEnter_Vector-0x12e46a>
    1b96:	00 00                	add    BYTE PTR [eax],al
    1b98:	98                   	cwde   
    1b99:	16                   	push   ss
    1b9a:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
    1ba0:	01 9c 7a 01 00 00 09 	add    DWORD PTR [edx+edi*2+0x9000001],ebx
    1ba7:	77 07                	ja     1bb0 <sysEnter_Vector-0x12e450>
    1ba9:	00 00                	add    BYTE PTR [eax],al
    1bab:	01 0a                	add    DWORD PTR [edx],ecx
    1bad:	72 00                	jb     1baf <sysEnter_Vector-0x12e451>
    1baf:	00 00                	add    BYTE PTR [eax],al
    1bb1:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    1bb7:	63 00                	arpl   WORD PTR [eax],ax
    1bb9:	01 0a                	add    DWORD PTR [edx],ecx
    1bbb:	7a 01                	jp     1bbe <sysEnter_Vector-0x12e442>
    1bbd:	00 00                	add    BYTE PTR [eax],al
    1bbf:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    1bc5:	01 0a                	add    DWORD PTR [edx],ecx
    1bc7:	97                   	xchg   edi,eax
    1bc8:	00 00                	add    BYTE PTR [eax],al
    1bca:	00 02                	add    BYTE PTR [edx],al
    1bcc:	91                   	xchg   ecx,eax
    1bcd:	08 0b                	or     BYTE PTR [ebx],cl
    1bcf:	64                   	fs
    1bd0:	77 00                	ja     1bd2 <sysEnter_Vector-0x12e42e>
    1bd2:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    1bd5:	00 00                	add    BYTE PTR [eax],al
    1bd7:	00 02                	add    BYTE PTR [edx],al
    1bd9:	91                   	xchg   ecx,eax
    1bda:	5e                   	pop    esi
    1bdb:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    1bdf:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    1be2:	00 00                	add    BYTE PTR [eax],al
    1be4:	00 02                	add    BYTE PTR [edx],al
    1be6:	91                   	xchg   ecx,eax
    1be7:	5f                   	pop    edi
    1be8:	0c ca                	or     al,0xca
    1bea:	16                   	push   ss
    1beb:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    1bf1:	31 01                	xor    DWORD PTR [ecx],eax
    1bf3:	00 00                	add    BYTE PTR [eax],al
    1bf5:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    1bf8:	01 13                	add    DWORD PTR [ebx],edx
    1bfa:	81 01 00 00 02 91    	add    DWORD PTR [ecx],0x91020000
    1c00:	74 0b                	je     1c0d <sysEnter_Vector-0x12e3f3>
    1c02:	74 00                	je     1c04 <sysEnter_Vector-0x12e3fc>
    1c04:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    1c07:	01 00                	add    DWORD PTR [eax],eax
    1c09:	00 02                	add    BYTE PTR [edx],al
    1c0b:	91                   	xchg   ecx,eax
    1c0c:	70 00                	jo     1c0e <sysEnter_Vector-0x12e3f2>
    1c0e:	0c 4d                	or     al,0x4d
    1c10:	17                   	pop    ss
    1c11:	00 9f 79 00 00 00    	add    BYTE PTR [edi+0x79],bl
    1c17:	57                   	push   edi
    1c18:	01 00                	add    DWORD PTR [eax],eax
    1c1a:	00 0b                	add    BYTE PTR [ebx],cl
    1c1c:	66                   	data16
    1c1d:	00 01                	add    BYTE PTR [ecx],al
    1c1f:	23 81 01 00 00 02    	and    eax,DWORD PTR [ecx+0x2000001]
    1c25:	91                   	xchg   ecx,eax
    1c26:	6c                   	ins    BYTE PTR es:[edi],dx
    1c27:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    1c2b:	24 8c                	and    al,0x8c
    1c2d:	01 00                	add    DWORD PTR [eax],eax
    1c2f:	00 02                	add    BYTE PTR [edx],al
    1c31:	91                   	xchg   ecx,eax
    1c32:	68 00 0d c6 17       	push   0x17c60d00
    1c37:	00 9f 6b 00 00 00    	add    BYTE PTR [edi+0x6b],bl
    1c3d:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    1c40:	01 32                	add    DWORD PTR [edx],esi
    1c42:	8c 00                	mov    WORD PTR [eax],es
    1c44:	00 00                	add    BYTE PTR [eax],al
    1c46:	02 91 64 0b 74 00    	add    dl,BYTE PTR [ecx+0x740b64]
    1c4c:	01 33                	add    DWORD PTR [ebx],esi
    1c4e:	74 00                	je     1c50 <sysEnter_Vector-0x12e3b0>
    1c50:	00 00                	add    BYTE PTR [eax],al
    1c52:	02 91 60 00 00 05    	add    dl,BYTE PTR [ecx+0x5000060]
    1c58:	04 80                	add    al,0x80
    1c5a:	01 00                	add    DWORD PTR [eax],eax
    1c5c:	00 0e                	add    BYTE PTR [esi],cl
    1c5e:	05 04 87 01 00       	add    eax,0x18704
    1c63:	00 07                	add    BYTE PTR [edi],al
    1c65:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    1c6b:	81 00 00 00 0f 4b    	add    DWORD PTR [eax],0x4b0f0000
    1c71:	00 00                	add    BYTE PTR [eax],al
    1c73:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1c76:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1c7c:	a0 54 00 9f 0f       	mov    al,ds:0xf9f0054
    1c81:	af                   	scas   eax,DWORD PTR es:[edi]
    1c82:	00 00                	add    BYTE PTR [eax],al
    1c84:	00 04 35 81 00 00 00 	add    BYTE PTR [esi*1+0x81],al
    1c8b:	05 03 a4 54 00       	add    eax,0x54a403
    1c90:	9f                   	lahf   
    1c91:	0f 5b 01             	cvtdq2ps xmm0,XMMWORD PTR [ecx]
    1c94:	00 00                	add    BYTE PTR [eax],al
    1c96:	04 36                	add    al,0x36
    1c98:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    1c9e:	9c                   	pushf  
    1c9f:	54                   	push   esp
    1ca0:	00 9f 0f 54 00 00    	add    BYTE PTR [edi+0x540f],bl
    1ca6:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1ca9:	64 00 00             	add    BYTE PTR fs:[eax],al
    1cac:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    1cb2:	9f                   	lahf   
    1cb3:	0f 28 00             	movaps xmm0,XMMWORD PTR [eax]
    1cb6:	00 00                	add    BYTE PTR [eax],al
    1cb8:	05 4f e7 01 00       	add    eax,0x1e74f
    1cbd:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    1cc3:	9f                   	lahf   
    1cc4:	05 04 74 00 00       	add    eax,0x7404
    1cc9:	00 00                	add    BYTE PTR [eax],al
    1ccb:	eb 01                	jmp    1cce <sysEnter_Vector-0x12e332>
    1ccd:	00 00                	add    BYTE PTR [eax],al
    1ccf:	04 00                	add    al,0x0
    1cd1:	36 09 00             	or     DWORD PTR ss:[eax],eax
    1cd4:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1cd7:	f4                   	hlt    
    1cd8:	00 00                	add    BYTE PTR [eax],al
    1cda:	00 0c 8f             	add    BYTE PTR [edi+ecx*4],cl
    1cdd:	07                   	pop    es
    1cde:	00 00                	add    BYTE PTR [eax],al
    1ce0:	72 00                	jb     1ce2 <sysEnter_Vector-0x12e31e>
    1ce2:	00 00                	add    BYTE PTR [eax],al
    1ce4:	34 18                	xor    al,0x18
    1ce6:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
    1cec:	a1 0b 00 00 02       	mov    eax,ds:0x200000b
    1cf1:	01 06                	add    DWORD PTR [esi],eax
    1cf3:	64 00 00             	add    BYTE PTR fs:[eax],al
    1cf6:	00 02                	add    BYTE PTR [edx],al
    1cf8:	01 06                	add    DWORD PTR [esi],eax
    1cfa:	5d                   	pop    ebp
    1cfb:	00 00                	add    BYTE PTR [eax],al
    1cfd:	00 02                	add    BYTE PTR [edx],al
    1cff:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1d05:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1d0c:	02 08                	add    cl,BYTE PTR [eax]
    1d0e:	05 00 00 00 00       	add    eax,0x0
    1d13:	04 e8                	add    al,0xe8
    1d15:	06                   	push   es
    1d16:	00 00                	add    BYTE PTR [eax],al
    1d18:	02 2e                	add    ch,BYTE PTR [esi]
    1d1a:	53                   	push   ebx
    1d1b:	00 00                	add    BYTE PTR [eax],al
    1d1d:	00 02                	add    BYTE PTR [edx],al
    1d1f:	01 08                	add    DWORD PTR [eax],ecx
    1d21:	5b                   	pop    ebx
    1d22:	00 00                	add    BYTE PTR [eax],al
    1d24:	00 04 a9             	add    BYTE PTR [ecx+ebp*4],al
    1d27:	07                   	pop    es
    1d28:	00 00                	add    BYTE PTR [eax],al
    1d2a:	02 31                	add    dh,BYTE PTR [ecx]
    1d2c:	65 00 00             	add    BYTE PTR gs:[eax],al
    1d2f:	00 02                	add    BYTE PTR [edx],al
    1d31:	02 07                	add    al,BYTE PTR [edi]
    1d33:	0e                   	push   cs
    1d34:	00 00                	add    BYTE PTR [eax],al
    1d36:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1d39:	00 00                	add    BYTE PTR [eax],al
    1d3b:	00 02                	add    BYTE PTR [edx],al
    1d3d:	34 77                	xor    al,0x77
    1d3f:	00 00                	add    BYTE PTR [eax],al
    1d41:	00 02                	add    BYTE PTR [edx],al
    1d43:	04 07                	add    al,0x7
    1d45:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1d48:	00 02                	add    BYTE PTR [edx],al
    1d4a:	08 07                	or     BYTE PTR [edi],al
    1d4c:	34 00                	xor    al,0x0
    1d4e:	00 00                	add    BYTE PTR [eax],al
    1d50:	04 9d                	add    al,0x9d
    1d52:	04 00                	add    al,0x0
    1d54:	00 03                	add    BYTE PTR [ebx],al
    1d56:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    1d59:	00 00                	add    BYTE PTR [eax],al
    1d5b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1d62:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1d65:	9b                   	fwait
    1d66:	00 00                	add    BYTE PTR [eax],al
    1d68:	00 02                	add    BYTE PTR [edx],al
    1d6a:	01 02                	add    DWORD PTR [edx],eax
    1d6c:	95                   	xchg   ebp,eax
    1d6d:	00 00                	add    BYTE PTR [eax],al
    1d6f:	00 02                	add    BYTE PTR [edx],al
    1d71:	04 07                	add    al,0x7
    1d73:	39 00                	cmp    DWORD PTR [eax],eax
    1d75:	00 00                	add    BYTE PTR [eax],al
    1d77:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1d7a:	e1 00                	loope  1d7c <sysEnter_Vector-0x12e284>
    1d7c:	00 00                	add    BYTE PTR [eax],al
    1d7e:	05 04 06 04 25       	add    eax,0x25040604
    1d83:	00 00                	add    BYTE PTR [eax],al
    1d85:	00 07                	add    BYTE PTR [edi],al
    1d87:	a1 07 00 00 01       	mov    eax,ds:0x1000007
    1d8c:	08 b3 00 00 00 34    	or     BYTE PTR [ebx+0x34000000],dh
    1d92:	18 00                	sbb    BYTE PTR [eax],al
    1d94:	9f                   	lahf   
    1d95:	c7 00 00 00 01 9c    	mov    DWORD PTR [eax],0x9c010000
    1d9b:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    1d9e:	00 08                	add    BYTE PTR [eax],cl
    1da0:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1da3:	01 08                	add    DWORD PTR [eax],ecx
    1da5:	b3 00                	mov    bl,0x0
    1da7:	00 00                	add    BYTE PTR [eax],al
    1da9:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1daf:	6c                   	ins    BYTE PTR es:[edi],dx
    1db0:	00 01                	add    BYTE PTR [ecx],al
    1db2:	08 3a                	or     BYTE PTR [edx],bh
    1db4:	00 00                	add    BYTE PTR [eax],al
    1db6:	00 02                	add    BYTE PTR [edx],al
    1db8:	91                   	xchg   ecx,eax
    1db9:	04 08                	add    al,0x8
    1dbb:	6c                   	ins    BYTE PTR es:[edi],dx
    1dbc:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1dbe:	00 01                	add    BYTE PTR [ecx],al
    1dc0:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1dc6:	91                   	xchg   ecx,eax
    1dc7:	08 09                	or     BYTE PTR [ecx],cl
    1dc9:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1dcc:	0a 3e                	or     bh,BYTE PTR [esi]
    1dce:	01 00                	add    DWORD PTR [eax],eax
    1dd0:	00 02                	add    BYTE PTR [edx],al
    1dd2:	91                   	xchg   ecx,eax
    1dd3:	74 09                	je     1dde <sysEnter_Vector-0x12e222>
    1dd5:	65 00 01             	add    BYTE PTR gs:[ecx],al
    1dd8:	0b 44 01 00          	or     eax,DWORD PTR [ecx+eax*1+0x0]
    1ddc:	00 02                	add    BYTE PTR [edx],al
    1dde:	91                   	xchg   ecx,eax
    1ddf:	70 0a                	jo     1deb <sysEnter_Vector-0x12e215>
    1de1:	83 07 00             	add    DWORD PTR [edi],0x0
    1de4:	00 01                	add    BYTE PTR [ecx],al
    1de6:	0c 5a                	or     al,0x5a
    1de8:	00 00                	add    BYTE PTR [eax],al
    1dea:	00 02                	add    BYTE PTR [edx],al
    1dec:	91                   	xchg   ecx,eax
    1ded:	6a 09                	push   0x9
    1def:	66                   	data16
    1df0:	00 01                	add    BYTE PTR [ecx],al
    1df2:	0d 4a 01 00 00       	or     eax,0x14a
    1df7:	02 91 6c 0a 9c 07    	add    dl,BYTE PTR [ecx+0x79c0a6c]
    1dfd:	00 00                	add    BYTE PTR [eax],al
    1dff:	01 0e                	add    DWORD PTR [esi],ecx
    1e01:	6c                   	ins    BYTE PTR es:[edi],dx
    1e02:	00 00                	add    BYTE PTR [eax],al
    1e04:	00 02                	add    BYTE PTR [edx],al
    1e06:	91                   	xchg   ecx,eax
    1e07:	64 00 06             	add    BYTE PTR fs:[esi],al
    1e0a:	04 48                	add    al,0x48
    1e0c:	00 00                	add    BYTE PTR [eax],al
    1e0e:	00 06                	add    BYTE PTR [esi],al
    1e10:	04 5a                	add    al,0x5a
    1e12:	00 00                	add    BYTE PTR [eax],al
    1e14:	00 06                	add    BYTE PTR [esi],al
    1e16:	04 6c                	add    al,0x6c
    1e18:	00 00                	add    BYTE PTR [eax],al
    1e1a:	00 0b                	add    BYTE PTR [ebx],cl
    1e1c:	88 07                	mov    BYTE PTR [edi],al
    1e1e:	00 00                	add    BYTE PTR [eax],al
    1e20:	01 1f                	add    DWORD PTR [edi],ebx
    1e22:	b3 00                	mov    bl,0x0
    1e24:	00 00                	add    BYTE PTR [eax],al
    1e26:	fb                   	sti    
    1e27:	18 00                	sbb    BYTE PTR [eax],al
    1e29:	9f                   	lahf   
    1e2a:	20 00                	and    BYTE PTR [eax],al
    1e2c:	00 00                	add    BYTE PTR [eax],al
    1e2e:	01 9c 93 01 00 00 08 	add    DWORD PTR [ebx+edx*4+0x8000001],ebx
    1e35:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1e38:	01 1f                	add    DWORD PTR [edi],ebx
    1e3a:	b3 00                	mov    bl,0x0
    1e3c:	00 00                	add    BYTE PTR [eax],al
    1e3e:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1e44:	6c                   	ins    BYTE PTR es:[edi],dx
    1e45:	00 01                	add    BYTE PTR [ecx],al
    1e47:	1f                   	pop    ds
    1e48:	3a 00                	cmp    al,BYTE PTR [eax]
    1e4a:	00 00                	add    BYTE PTR [eax],al
    1e4c:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    1e52:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1e53:	00 01                	add    BYTE PTR [ecx],al
    1e55:	1f                   	pop    ds
    1e56:	85 00                	test   DWORD PTR [eax],eax
    1e58:	00 00                	add    BYTE PTR [eax],al
    1e5a:	02 91 08 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0008]
    1e60:	00 00                	add    BYTE PTR [eax],al
    1e62:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1e65:	6c                   	ins    BYTE PTR es:[edi],dx
    1e66:	00 00                	add    BYTE PTR [eax],al
    1e68:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    1e6e:	9f                   	lahf   
    1e6f:	0c af                	or     al,0xaf
    1e71:	00 00                	add    BYTE PTR [eax],al
    1e73:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1e7a:	05 03 a4 54 00       	add    eax,0x54a403
    1e7f:	9f                   	lahf   
    1e80:	0c 5b                	or     al,0x5b
    1e82:	01 00                	add    DWORD PTR [eax],eax
    1e84:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1e87:	6c                   	ins    BYTE PTR es:[edi],dx
    1e88:	00 00                	add    BYTE PTR [eax],al
    1e8a:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    1e90:	9f                   	lahf   
    1e91:	0c 54                	or     al,0x54
    1e93:	00 00                	add    BYTE PTR [eax],al
    1e95:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1e98:	90                   	nop
    1e99:	00 00                	add    BYTE PTR [eax],al
    1e9b:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    1ea1:	9f                   	lahf   
    1ea2:	0c 28                	or     al,0x28
    1ea4:	00 00                	add    BYTE PTR [eax],al
    1ea6:	00 05 4f e8 01 00    	add    BYTE PTR ds:0x1e84f,al
    1eac:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    1eb2:	9f                   	lahf   
    1eb3:	06                   	push   es
    1eb4:	04 b5                	add    al,0xb5
    1eb6:	00 00                	add    BYTE PTR [eax],al
    1eb8:	00 00                	add    BYTE PTR [eax],al
    1eba:	e8 00 00 00 04       	call   4001ebf <sysEnter_Vector+0x3ed1ebf>
    1ebf:	00 f3                	add    bl,dh
    1ec1:	09 00                	or     DWORD PTR [eax],eax
    1ec3:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1ec6:	f4                   	hlt    
    1ec7:	00 00                	add    BYTE PTR [eax],al
    1ec9:	00 0c b2             	add    BYTE PTR [edx+esi*4],cl
    1ecc:	07                   	pop    es
    1ecd:	00 00                	add    BYTE PTR [eax],al
    1ecf:	72 00                	jb     1ed1 <sysEnter_Vector-0x12e12f>
    1ed1:	00 00                	add    BYTE PTR [eax],al
    1ed3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1ed4:	0c 00                	or     al,0x0
    1ed6:	00 02                	add    BYTE PTR [edx],al
    1ed8:	01 06                	add    DWORD PTR [esi],eax
    1eda:	64 00 00             	add    BYTE PTR fs:[eax],al
    1edd:	00 02                	add    BYTE PTR [edx],al
    1edf:	01 06                	add    DWORD PTR [esi],eax
    1ee1:	5d                   	pop    ebp
    1ee2:	00 00                	add    BYTE PTR [eax],al
    1ee4:	00 02                	add    BYTE PTR [edx],al
    1ee6:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1eec:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1ef3:	02 08                	add    cl,BYTE PTR [eax]
    1ef5:	05 00 00 00 00       	add    eax,0x0
    1efa:	02 01                	add    al,BYTE PTR [ecx]
    1efc:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1eff:	00 00                	add    BYTE PTR [eax],al
    1f01:	02 02                	add    al,BYTE PTR [edx]
    1f03:	07                   	pop    es
    1f04:	0e                   	push   cs
    1f05:	00 00                	add    BYTE PTR [eax],al
    1f07:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1f0a:	00 00                	add    BYTE PTR [eax],al
    1f0c:	00 03                	add    BYTE PTR [ebx],al
    1f0e:	34 59                	xor    al,0x59
    1f10:	00 00                	add    BYTE PTR [eax],al
    1f12:	00 02                	add    BYTE PTR [edx],al
    1f14:	04 07                	add    al,0x7
    1f16:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1f19:	00 02                	add    BYTE PTR [edx],al
    1f1b:	08 07                	or     BYTE PTR [edi],al
    1f1d:	34 00                	xor    al,0x0
    1f1f:	00 00                	add    BYTE PTR [eax],al
    1f21:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1f28:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1f2b:	9b                   	fwait
    1f2c:	00 00                	add    BYTE PTR [eax],al
    1f2e:	00 02                	add    BYTE PTR [edx],al
    1f30:	01 02                	add    DWORD PTR [edx],eax
    1f32:	95                   	xchg   ebp,eax
    1f33:	00 00                	add    BYTE PTR [eax],al
    1f35:	00 02                	add    BYTE PTR [edx],al
    1f37:	04 07                	add    al,0x7
    1f39:	39 00                	cmp    DWORD PTR [eax],eax
    1f3b:	00 00                	add    BYTE PTR [eax],al
    1f3d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1f40:	e1 00                	loope  1f42 <sysEnter_Vector-0x12e0be>
    1f42:	00 00                	add    BYTE PTR [eax],al
    1f44:	05 04 1d 00 00       	add    eax,0x1d04
    1f49:	00 06                	add    BYTE PTR [esi],al
    1f4b:	4b                   	dec    ebx
    1f4c:	00 00                	add    BYTE PTR [eax],al
    1f4e:	00 01                	add    BYTE PTR [ecx],al
    1f50:	34 4e                	xor    al,0x4e
    1f52:	00 00                	add    BYTE PTR [eax],al
    1f54:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    1f5a:	9f                   	lahf   
    1f5b:	06                   	push   es
    1f5c:	af                   	scas   eax,DWORD PTR es:[edi]
    1f5d:	00 00                	add    BYTE PTR [eax],al
    1f5f:	00 01                	add    BYTE PTR [ecx],al
    1f61:	35 4e 00 00 00       	xor    eax,0x4e
    1f66:	05 03 a4 54 00       	add    eax,0x54a403
    1f6b:	9f                   	lahf   
    1f6c:	06                   	push   es
    1f6d:	5b                   	pop    ebx
    1f6e:	01 00                	add    DWORD PTR [eax],eax
    1f70:	00 01                	add    BYTE PTR [ecx],al
    1f72:	36                   	ss
    1f73:	4e                   	dec    esi
    1f74:	00 00                	add    BYTE PTR [eax],al
    1f76:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    1f7c:	9f                   	lahf   
    1f7d:	06                   	push   es
    1f7e:	54                   	push   esp
    1f7f:	00 00                	add    BYTE PTR [eax],al
    1f81:	00 01                	add    BYTE PTR [ecx],al
    1f83:	37                   	aaa    
    1f84:	67 00 00             	add    BYTE PTR [bx+si],al
    1f87:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    1f8d:	9f                   	lahf   
    1f8e:	06                   	push   es
    1f8f:	28 00                	sub    BYTE PTR [eax],al
    1f91:	00 00                	add    BYTE PTR [eax],al
    1f93:	02 4f e5             	add    cl,BYTE PTR [edi-0x1b]
    1f96:	00 00                	add    BYTE PTR [eax],al
    1f98:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    1f9e:	9f                   	lahf   
    1f9f:	05 04 8a 00 00       	add    eax,0x8a04
    1fa4:	00 00                	add    BYTE PTR [eax],al
    1fa6:	eb 01                	jmp    1fa9 <sysEnter_Vector-0x12e057>
    1fa8:	00 00                	add    BYTE PTR [eax],al
    1faa:	04 00                	add    al,0x0
    1fac:	40                   	inc    eax
    1fad:	0a 00                	or     al,BYTE PTR [eax]
    1faf:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1fb2:	f4                   	hlt    
    1fb3:	00 00                	add    BYTE PTR [eax],al
    1fb5:	00 0c bd 07 00 00 72 	add    BYTE PTR [edi*4+0x72000007],cl
    1fbc:	00 00                	add    BYTE PTR [eax],al
    1fbe:	00 1c 19             	add    BYTE PTR [ecx+ebx*1],bl
    1fc1:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    1fc7:	fd                   	std    
    1fc8:	0c 00                	or     al,0x0
    1fca:	00 02                	add    BYTE PTR [edx],al
    1fcc:	01 06                	add    DWORD PTR [esi],eax
    1fce:	64 00 00             	add    BYTE PTR fs:[eax],al
    1fd1:	00 02                	add    BYTE PTR [edx],al
    1fd3:	01 06                	add    DWORD PTR [esi],eax
    1fd5:	5d                   	pop    ebp
    1fd6:	00 00                	add    BYTE PTR [eax],al
    1fd8:	00 02                	add    BYTE PTR [edx],al
    1fda:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1fe0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1fe7:	02 08                	add    cl,BYTE PTR [eax]
    1fe9:	05 00 00 00 00       	add    eax,0x0
    1fee:	02 01                	add    al,BYTE PTR [ecx]
    1ff0:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1ff3:	00 00                	add    BYTE PTR [eax],al
    1ff5:	02 02                	add    al,BYTE PTR [edx]
    1ff7:	07                   	pop    es
    1ff8:	0e                   	push   cs
    1ff9:	00 00                	add    BYTE PTR [eax],al
    1ffb:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1ffe:	00 00                	add    BYTE PTR [eax],al
    2000:	00 02                	add    BYTE PTR [edx],al
    2002:	34 61                	xor    al,0x61
    2004:	00 00                	add    BYTE PTR [eax],al
    2006:	00 02                	add    BYTE PTR [edx],al
    2008:	04 07                	add    al,0x7
    200a:	3e 00 00             	add    BYTE PTR ds:[eax],al
    200d:	00 02                	add    BYTE PTR [edx],al
    200f:	08 07                	or     BYTE PTR [edi],al
    2011:	34 00                	xor    al,0x0
    2013:	00 00                	add    BYTE PTR [eax],al
    2015:	04 a4                	add    al,0xa4
    2017:	04 00                	add    al,0x0
    2019:	00 02                	add    BYTE PTR [edx],al
    201b:	56                   	push   esi
    201c:	61                   	popa   
    201d:	00 00                	add    BYTE PTR [eax],al
    201f:	00 02                	add    BYTE PTR [edx],al
    2021:	04 05                	add    al,0x5
    2023:	05 00 00 00 02       	add    eax,0x2000000
    2028:	0c 04                	or     al,0x4
    202a:	9b                   	fwait
    202b:	00 00                	add    BYTE PTR [eax],al
    202d:	00 02                	add    BYTE PTR [edx],al
    202f:	01 02                	add    DWORD PTR [edx],eax
    2031:	95                   	xchg   ebp,eax
    2032:	00 00                	add    BYTE PTR [eax],al
    2034:	00 05 12 03 00 00    	add    BYTE PTR ds:0x312,al
    203a:	04 61                	add    al,0x61
    203c:	00 00                	add    BYTE PTR [eax],al
    203e:	00 05 15 51 01 00    	add    BYTE PTR ds:0x15115,al
    2044:	00 06                	add    BYTE PTR [esi],al
    2046:	77 03                	ja     204b <sysEnter_Vector-0x12dfb5>
    2048:	00 00                	add    BYTE PTR [eax],al
    204a:	00 06                	add    BYTE PTR [esi],al
    204c:	af                   	scas   eax,DWORD PTR es:[edi]
    204d:	03 00                	add    eax,DWORD PTR [eax]
    204f:	00 01                	add    BYTE PTR [ecx],al
    2051:	06                   	push   es
    2052:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2053:	02 00                	add    al,BYTE PTR [eax]
    2055:	00 02                	add    BYTE PTR [edx],al
    2057:	06                   	push   es
    2058:	04 03                	add    al,0x3
    205a:	00 00                	add    BYTE PTR [eax],al
    205c:	03 06                	add    eax,DWORD PTR [esi]
    205e:	4e                   	dec    esi
    205f:	02 00                	add    al,BYTE PTR [eax]
    2061:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    2064:	c9                   	leave  
    2065:	03 00                	add    eax,DWORD PTR [eax]
    2067:	00 05 06 28 03 00    	add    BYTE PTR ds:0x32806,al
    206d:	00 06                	add    BYTE PTR [esi],al
    206f:	06                   	push   es
    2070:	61                   	popa   
    2071:	02 00                	add    al,BYTE PTR [eax]
    2073:	00 07                	add    BYTE PTR [edi],al
    2075:	06                   	push   es
    2076:	fa                   	cli    
    2077:	03 00                	add    eax,DWORD PTR [eax]
    2079:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    207c:	6a 03                	push   0x3
    207e:	00 00                	add    BYTE PTR [eax],al
    2080:	59                   	pop    ecx
    2081:	06                   	push   es
    2082:	09 04 00             	or     DWORD PTR [eax+eax*1],eax
    2085:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    2088:	f0 02 00             	lock add al,BYTE PTR [eax]
    208b:	00 97 07 87 03 00    	add    BYTE PTR [edi+0x38707],dl
    2091:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2094:	07                   	pop    es
    2095:	5d                   	pop    ebp
    2096:	03 00                	add    eax,DWORD PTR [eax]
    2098:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    209c:	ec                   	in     al,dx
    209d:	03 00                	add    eax,DWORD PTR [eax]
    209f:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    20a2:	07                   	pop    es
    20a3:	d2 02                	rol    BYTE PTR [edx],cl
    20a5:	00 00                	add    BYTE PTR [eax],al
    20a7:	66 01 07             	add    WORD PTR [edi],ax
    20aa:	21 04 00             	and    DWORD PTR [eax+eax*1],eax
    20ad:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    20b0:	07                   	pop    es
    20b1:	35 03 00 00 68       	xor    eax,0x68000003
    20b6:	01 07                	add    DWORD PTR [edi],eax
    20b8:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    20b9:	02 00                	add    al,BYTE PTR [eax]
    20bb:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    20be:	07                   	pop    es
    20bf:	9e                   	sahf   
    20c0:	03 00                	add    eax,DWORD PTR [eax]
    20c2:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    20c5:	07                   	pop    es
    20c6:	e0 02                	loopne 20ca <sysEnter_Vector-0x12df36>
    20c8:	00 00                	add    BYTE PTR [eax],al
    20ca:	71 01                	jno    20cd <sysEnter_Vector-0x12df33>
    20cc:	07                   	pop    es
    20cd:	d7                   	xlat   BYTE PTR ds:[ebx]
    20ce:	03 00                	add    eax,DWORD PTR [eax]
    20d0:	00 00                	add    BYTE PTR [eax],al
    20d2:	03 07                	add    eax,DWORD PTR [edi]
    20d4:	42                   	inc    edx
    20d5:	03 00                	add    eax,DWORD PTR [eax]
    20d7:	00 01                	add    BYTE PTR [ecx],al
    20d9:	03 07                	add    eax,DWORD PTR [edi]
    20db:	b6 02                	mov    dh,0x2
    20dd:	00 00                	add    BYTE PTR [eax],al
    20df:	02 03                	add    al,BYTE PTR [ebx]
    20e1:	07                   	pop    es
    20e2:	7b 02                	jnp    20e6 <sysEnter_Vector-0x12df1a>
    20e4:	00 00                	add    BYTE PTR [eax],al
    20e6:	03 03                	add    eax,DWORD PTR [ebx]
    20e8:	07                   	pop    es
    20e9:	8b 02                	mov    eax,DWORD PTR [edx]
    20eb:	00 00                	add    BYTE PTR [eax],al
    20ed:	04 03                	add    al,0x3
    20ef:	07                   	pop    es
    20f0:	c2 02 00             	ret    0x2
    20f3:	00 05 03 00 02 04    	add    BYTE PTR ds:0x4020003,al
    20f9:	07                   	pop    es
    20fa:	39 00                	cmp    DWORD PTR [eax],eax
    20fc:	00 00                	add    BYTE PTR [eax],al
    20fe:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2101:	e1 00                	loope  2103 <sysEnter_Vector-0x12defd>
    2103:	00 00                	add    BYTE PTR [eax],al
    2105:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
    210c:	c8 07 00 00          	enter  0x7,0x0
    2110:	01 0a                	add    DWORD PTR [edx],ecx
    2112:	3a 00                	cmp    al,BYTE PTR [eax]
    2114:	00 00                	add    BYTE PTR [eax],al
    2116:	1c 19                	sbb    al,0x19
    2118:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    211e:	01 9c 8d 01 00 00 0a 	add    DWORD PTR [ebp+ecx*4+0xa000001],ebx
    2125:	cd 07                	int    0x7
    2127:	00 00                	add    BYTE PTR [eax],al
    2129:	01 0a                	add    DWORD PTR [edx],ecx
    212b:	8d 01                	lea    eax,[ecx]
    212d:	00 00                	add    BYTE PTR [eax],al
    212f:	02 91 00 00 08 04    	add    dl,BYTE PTR [ecx+0x4080000]
    2135:	3a 00                	cmp    al,BYTE PTR [eax]
    2137:	00 00                	add    BYTE PTR [eax],al
    2139:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    213c:	00 00                	add    BYTE PTR [eax],al
    213e:	03 34 56             	add    esi,DWORD PTR [esi+edx*2]
    2141:	00 00                	add    BYTE PTR [eax],al
    2143:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    2149:	9f                   	lahf   
    214a:	0b af 00 00 00 03    	or     ebp,DWORD PTR [edi+0x3000000]
    2150:	35 56 00 00 00       	xor    eax,0x56
    2155:	05 03 a4 54 00       	add    eax,0x54a403
    215a:	9f                   	lahf   
    215b:	0b 5b 01             	or     ebx,DWORD PTR [ebx+0x1]
    215e:	00 00                	add    BYTE PTR [eax],al
    2160:	03 36                	add    esi,DWORD PTR [esi]
    2162:	56                   	push   esi
    2163:	00 00                	add    BYTE PTR [eax],al
    2165:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    216b:	9f                   	lahf   
    216c:	0b 54 00 00          	or     edx,DWORD PTR [eax+eax*1+0x0]
    2170:	00 03                	add    BYTE PTR [ebx],al
    2172:	37                   	aaa    
    2173:	7a 00                	jp     2175 <sysEnter_Vector-0x12de8b>
    2175:	00 00                	add    BYTE PTR [eax],al
    2177:	05 03 ac 54 00       	add    eax,0x54ac03
    217c:	9f                   	lahf   
    217d:	0b 28                	or     ebp,DWORD PTR [eax]
    217f:	00 00                	add    BYTE PTR [eax],al
    2181:	00 04 4f             	add    BYTE PTR [edi+ecx*2],al
    2184:	e8 01 00 00 05       	call   500218a <sysEnter_Vector+0x4ed218a>
    2189:	03 a8 54 00 9f 08    	add    ebp,DWORD PTR [eax+0x89f0054]
    218f:	04 5f                	add    al,0x5f
    2191:	01 00                	add    DWORD PTR [eax],eax
    2193:	00 00                	add    BYTE PTR [eax],al
    2195:	bd 03 00 00 04       	mov    ebp,0x4000003
    219a:	00 df                	add    bh,bl
    219c:	0a 00                	or     al,BYTE PTR [eax]
    219e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    21a1:	f4                   	hlt    
    21a2:	00 00                	add    BYTE PTR [eax],al
    21a4:	00 0c f4             	add    BYTE PTR [esp+esi*8],cl
    21a7:	07                   	pop    es
    21a8:	00 00                	add    BYTE PTR [eax],al
    21aa:	72 00                	jb     21ac <sysEnter_Vector-0x12de54>
    21ac:	00 00                	add    BYTE PTR [eax],al
    21ae:	48                   	dec    eax
    21af:	19 00                	sbb    DWORD PTR [eax],eax
    21b1:	9f                   	lahf   
    21b2:	18 07                	sbb    BYTE PTR [edi],al
    21b4:	00 00                	add    BYTE PTR [eax],al
    21b6:	e7 0d                	out    0xd,eax
    21b8:	00 00                	add    BYTE PTR [eax],al
    21ba:	02 bf 05 00 00 02    	add    bh,BYTE PTR [edi+0x2000005]
    21c0:	28 30                	sub    BYTE PTR [eax],dh
    21c2:	00 00                	add    BYTE PTR [eax],al
    21c4:	00 03                	add    BYTE PTR [ebx],al
    21c6:	04 e9                	add    al,0xe9
    21c8:	04 00                	add    al,0x0
    21ca:	00 3a                	add    BYTE PTR [edx],bh
    21cc:	00 00                	add    BYTE PTR [eax],al
    21ce:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    21d1:	06                   	push   es
    21d2:	64 00 00             	add    BYTE PTR fs:[eax],al
    21d5:	00 02                	add    BYTE PTR [edx],al
    21d7:	c6 05 00 00 02 62 25 	mov    BYTE PTR ds:0x62020000,0x25
    21de:	00 00                	add    BYTE PTR [eax],al
    21e0:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    21e3:	06                   	push   es
    21e4:	5d                   	pop    ebp
    21e5:	00 00                	add    BYTE PTR [eax],al
    21e7:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    21ea:	05 ea 00 00 00       	add    eax,0xea
    21ef:	05 04 05 69 6e       	add    eax,0x6e690504
    21f4:	74 00                	je     21f6 <sysEnter_Vector-0x12de0a>
    21f6:	04 08                	add    al,0x8
    21f8:	05 00 00 00 00       	add    eax,0x0
    21fd:	04 01                	add    al,0x1
    21ff:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2202:	00 00                	add    BYTE PTR [eax],al
    2204:	04 02                	add    al,0x2
    2206:	07                   	pop    es
    2207:	0e                   	push   cs
    2208:	00 00                	add    BYTE PTR [eax],al
    220a:	00 02                	add    BYTE PTR [edx],al
    220c:	69 00 00 00 03 34    	imul   eax,DWORD PTR [eax],0x34030000
    2212:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
    2218:	07                   	pop    es
    2219:	3e 00 00             	add    BYTE PTR ds:[eax],al
    221c:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
    221f:	07                   	pop    es
    2220:	34 00                	xor    al,0x0
    2222:	00 00                	add    BYTE PTR [eax],al
    2224:	04 04                	add    al,0x4
    2226:	05 05 00 00 00       	add    eax,0x5
    222b:	04 0c                	add    al,0xc
    222d:	04 9b                	add    al,0x9b
    222f:	00 00                	add    BYTE PTR [eax],al
    2231:	00 06                	add    BYTE PTR [esi],al
    2233:	04 a3                	add    al,0xa3
    2235:	00 00                	add    BYTE PTR [eax],al
    2237:	00 07                	add    BYTE PTR [edi],al
    2239:	3a 00                	cmp    al,BYTE PTR [eax]
    223b:	00 00                	add    BYTE PTR [eax],al
    223d:	04 01                	add    al,0x1
    223f:	02 95 00 00 00 04    	add    dl,BYTE PTR [ebp+0x4000000]
    2245:	04 07                	add    al,0x7
    2247:	39 00                	cmp    DWORD PTR [eax],eax
    2249:	00 00                	add    BYTE PTR [eax],al
    224b:	04 04                	add    al,0x4
    224d:	07                   	pop    es
    224e:	e1 00                	loope  2250 <sysEnter_Vector-0x12ddb0>
    2250:	00 00                	add    BYTE PTR [eax],al
    2252:	06                   	push   es
    2253:	04 3a                	add    al,0x3a
    2255:	00 00                	add    BYTE PTR [eax],al
    2257:	00 08                	add    BYTE PTR [eax],cl
    2259:	1c 08                	sbb    al,0x8
    225b:	00 00                	add    BYTE PTR [eax],al
    225d:	01 0a                	add    DWORD PTR [edx],ecx
    225f:	5a                   	pop    edx
    2260:	00 00                	add    BYTE PTR [eax],al
    2262:	00 48 19             	add    BYTE PTR [eax+0x19],cl
    2265:	00 9f 5f 00 00 00    	add    BYTE PTR [edi+0x5f],bl
    226b:	01 9c f5 00 00 00 09 	add    DWORD PTR [ebp+esi*8+0x9000000],ebx
    2272:	73 00                	jae    2274 <sysEnter_Vector-0x12dd8c>
    2274:	01 0a                	add    DWORD PTR [edx],ecx
    2276:	f5                   	cmc    
    2277:	00 00                	add    BYTE PTR [eax],al
    2279:	00 02                	add    BYTE PTR [edx],al
    227b:	91                   	xchg   ecx,eax
    227c:	00 0a                	add    BYTE PTR [edx],cl
    227e:	69 00 01 0c 5a 00    	imul   eax,DWORD PTR [eax],0x5a0c01
    2284:	00 00                	add    BYTE PTR [eax],al
    2286:	02 91 70 00 06 04    	add    dl,BYTE PTR [ecx+0x4060070]
    228c:	9d                   	popf   
    228d:	00 00                	add    BYTE PTR [eax],al
    228f:	00 08                	add    BYTE PTR [eax],cl
    2291:	26 08 00             	or     BYTE PTR es:[eax],al
    2294:	00 01                	add    BYTE PTR [ecx],al
    2296:	21 bd 00 00 00 a7    	and    DWORD PTR [ebp-0x59000000],edi
    229c:	19 00                	sbb    DWORD PTR [eax],eax
    229e:	9f                   	lahf   
    229f:	3e 02 00             	add    al,BYTE PTR ds:[eax]
    22a2:	00 01                	add    BYTE PTR [ecx],al
    22a4:	9c                   	pushf  
    22a5:	d5 01                	aad    0x1
    22a7:	00 00                	add    BYTE PTR [eax],al
    22a9:	09 73 74             	or     DWORD PTR [ebx+0x74],esi
    22ac:	72 00                	jb     22ae <sysEnter_Vector-0x12dd52>
    22ae:	01 21                	add    DWORD PTR [ecx],esp
    22b0:	bd 00 00 00 02       	mov    ebp,0x2000000
    22b5:	91                   	xchg   ecx,eax
    22b6:	00 09                	add    BYTE PTR [ecx],cl
    22b8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    22b9:	75 6d                	jne    2328 <sysEnter_Vector-0x12dcd8>
    22bb:	00 01                	add    BYTE PTR [ecx],al
    22bd:	21 8f 00 00 00 02    	and    DWORD PTR [edi+0x2000000],ecx
    22c3:	91                   	xchg   ecx,eax
    22c4:	04 0b                	add    al,0xb
    22c6:	2d 08 00 00 01       	sub    eax,0x1000008
    22cb:	21 5a 00             	and    DWORD PTR [edx+0x0],ebx
    22ce:	00 00                	add    BYTE PTR [eax],al
    22d0:	02 91 08 0b a2 05    	add    dl,BYTE PTR [ecx+0x5a20b08]
    22d6:	00 00                	add    BYTE PTR [eax],al
    22d8:	01 21                	add    DWORD PTR [ecx],esp
    22da:	5a                   	pop    edx
    22db:	00 00                	add    BYTE PTR [eax],al
    22dd:	00 02                	add    BYTE PTR [edx],al
    22df:	91                   	xchg   ecx,eax
    22e0:	0c 0b                	or     al,0xb
    22e2:	32 08                	xor    cl,BYTE PTR [eax]
    22e4:	00 00                	add    BYTE PTR [eax],al
    22e6:	01 21                	add    DWORD PTR [ecx],esp
    22e8:	5a                   	pop    edx
    22e9:	00 00                	add    BYTE PTR [eax],al
    22eb:	00 02                	add    BYTE PTR [edx],al
    22ed:	91                   	xchg   ecx,eax
    22ee:	10 0b                	adc    BYTE PTR [ebx],cl
    22f0:	e5 00                	in     eax,0x0
    22f2:	00 00                	add    BYTE PTR [eax],al
    22f4:	01 22                	add    DWORD PTR [edx],esp
    22f6:	5a                   	pop    edx
    22f7:	00 00                	add    BYTE PTR [eax],al
    22f9:	00 02                	add    BYTE PTR [edx],al
    22fb:	91                   	xchg   ecx,eax
    22fc:	14 0c                	adc    al,0xc
    22fe:	02 08                	add    cl,BYTE PTR [eax]
    2300:	00 00                	add    BYTE PTR [eax],al
    2302:	01 25 e5 01 00 00    	add    DWORD PTR ds:0x1e5,esp
    2308:	05 03 8c 51 00       	add    eax,0x518c03
    230d:	9f                   	lahf   
    230e:	0a 74 6d 70          	or     dh,BYTE PTR [ebp+ebp*2+0x70]
    2312:	00 01                	add    BYTE PTR [ecx],al
    2314:	27                   	daa    
    2315:	ea 01 00 00 03 91 9e 	jmp    0x9e91:0x3000001
    231c:	7f 0a                	jg     2328 <sysEnter_Vector-0x12dcd8>
    231e:	63 00                	arpl   WORD PTR [eax],ax
    2320:	01 28                	add    DWORD PTR [eax],ebp
    2322:	3a 00                	cmp    al,BYTE PTR [eax]
    2324:	00 00                	add    BYTE PTR [eax],al
    2326:	02 91 66 0c 00 02    	add    dl,BYTE PTR [ecx+0x2000c66]
    232c:	00 00                	add    BYTE PTR [eax],al
    232e:	01 28                	add    DWORD PTR [eax],ebp
    2330:	3a 00                	cmp    al,BYTE PTR [eax]
    2332:	00 00                	add    BYTE PTR [eax],al
    2334:	02 91 6f 0c e7 07    	add    dl,BYTE PTR [ecx+0x7e70c6f]
    233a:	00 00                	add    BYTE PTR [eax],al
    233c:	01 28                	add    DWORD PTR [eax],ebp
    233e:	3a 00                	cmp    al,BYTE PTR [eax]
    2340:	00 00                	add    BYTE PTR [eax],al
    2342:	02 91 67 0a 69 00    	add    dl,BYTE PTR [ecx+0x690a67]
    2348:	01 29                	add    DWORD PTR [ecx],ebp
    234a:	5a                   	pop    edx
    234b:	00 00                	add    BYTE PTR [eax],al
    234d:	00 02                	add    BYTE PTR [edx],al
    234f:	91                   	xchg   ecx,eax
    2350:	68 0d 8d 1a 00       	push   0x1a8d0d
    2355:	9f                   	lahf   
    2356:	25 00 00 00 0c       	and    eax,0xc000000
    235b:	ee                   	out    dx,al
    235c:	07                   	pop    es
    235d:	00 00                	add    BYTE PTR [eax],al
    235f:	01 4c 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],ecx
    2363:	00 00                	add    BYTE PTR [eax],al
    2365:	02 91 60 00 00 0e    	add    dl,BYTE PTR [ecx+0xe000060]
    236b:	3a 00                	cmp    al,BYTE PTR [eax]
    236d:	00 00                	add    BYTE PTR [eax],al
    236f:	e5 01                	in     eax,0x1
    2371:	00 00                	add    BYTE PTR [eax],al
    2373:	0f b6 00             	movzx  eax,BYTE PTR [eax]
    2376:	00 00                	add    BYTE PTR [eax],al
    2378:	0f 00 07             	sldt   WORD PTR [edi]
    237b:	d5 01                	aad    0x1
    237d:	00 00                	add    BYTE PTR [eax],al
    237f:	0e                   	push   cs
    2380:	3a 00                	cmp    al,BYTE PTR [eax]
    2382:	00 00                	add    BYTE PTR [eax],al
    2384:	fa                   	cli    
    2385:	01 00                	add    DWORD PTR [eax],eax
    2387:	00 0f                	add    BYTE PTR [edi],cl
    2389:	b6 00                	mov    dh,0x0
    238b:	00 00                	add    BYTE PTR [eax],al
    238d:	41                   	inc    ecx
    238e:	00 10                	add    BYTE PTR [eax],dl
    2390:	09 08                	or     DWORD PTR [eax],ecx
    2392:	00 00                	add    BYTE PTR [eax],al
    2394:	01 68 5a             	add    DWORD PTR [eax+0x5a],ebp
    2397:	00 00                	add    BYTE PTR [eax],al
    2399:	00 e5                	add    ch,ah
    239b:	1b 00                	sbb    eax,DWORD PTR [eax]
    239d:	9f                   	lahf   
    239e:	48                   	dec    eax
    239f:	04 00                	add    al,0x0
    23a1:	00 01                	add    BYTE PTR [ecx],al
    23a3:	9c                   	pushf  
    23a4:	03 03                	add    eax,DWORD PTR [ebx]
    23a6:	00 00                	add    BYTE PTR [eax],al
    23a8:	09 62 75             	or     DWORD PTR [edx+0x75],esp
    23ab:	66                   	data16
    23ac:	00 01                	add    BYTE PTR [ecx],al
    23ae:	68 bd 00 00 00       	push   0xbd
    23b3:	02 91 00 09 66 6d    	add    dl,BYTE PTR [ecx+0x6d660900]
    23b9:	74 00                	je     23bb <sysEnter_Vector-0x12dc45>
    23bb:	01 68 9d             	add    DWORD PTR [eax-0x63],ebp
    23be:	00 00                	add    BYTE PTR [eax],al
    23c0:	00 02                	add    BYTE PTR [edx],al
    23c2:	91                   	xchg   ecx,eax
    23c3:	04 0b                	add    al,0xb
    23c5:	8c 06                	mov    WORD PTR [esi],es
    23c7:	00 00                	add    BYTE PTR [eax],al
    23c9:	01 68 41             	add    DWORD PTR [eax+0x41],ebp
    23cc:	00 00                	add    BYTE PTR [eax],al
    23ce:	00 02                	add    BYTE PTR [edx],al
    23d0:	91                   	xchg   ecx,eax
    23d1:	08 0a                	or     BYTE PTR [edx],cl
    23d3:	6c                   	ins    BYTE PTR es:[edi],dx
    23d4:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    23d6:	00 01                	add    BYTE PTR [ecx],al
    23d8:	6a 5a                	push   0x5a
    23da:	00 00                	add    BYTE PTR [eax],al
    23dc:	00 02                	add    BYTE PTR [edx],al
    23de:	91                   	xchg   ecx,eax
    23df:	6c                   	ins    BYTE PTR es:[edi],dx
    23e0:	0a 6e 75             	or     ch,BYTE PTR [esi+0x75]
    23e3:	6d                   	ins    DWORD PTR es:[edi],dx
    23e4:	00 01                	add    BYTE PTR [ecx],al
    23e6:	6b af 00 00 00 02 91 	imul   ebp,DWORD PTR [edi+0x2000000],0xffffff91
    23ed:	68 0a 69 00 01       	push   0x100690a
    23f2:	6c                   	ins    BYTE PTR es:[edi],dx
    23f3:	5a                   	pop    edx
    23f4:	00 00                	add    BYTE PTR [eax],al
    23f6:	00 02                	add    BYTE PTR [edx],al
    23f8:	91                   	xchg   ecx,eax
    23f9:	64                   	fs
    23fa:	0c 2d                	or     al,0x2d
    23fc:	08 00                	or     BYTE PTR [eax],al
    23fe:	00 01                	add    BYTE PTR [ecx],al
    2400:	6c                   	ins    BYTE PTR es:[edi],dx
    2401:	5a                   	pop    edx
    2402:	00 00                	add    BYTE PTR [eax],al
    2404:	00 02                	add    BYTE PTR [edx],al
    2406:	91                   	xchg   ecx,eax
    2407:	60                   	pusha  
    2408:	0a 73 74             	or     dh,BYTE PTR [ebx+0x74]
    240b:	72 00                	jb     240d <sysEnter_Vector-0x12dbf3>
    240d:	01 6d bd             	add    DWORD PTR [ebp-0x43],ebp
    2410:	00 00                	add    BYTE PTR [eax],al
    2412:	00 02                	add    BYTE PTR [edx],al
    2414:	91                   	xchg   ecx,eax
    2415:	5c                   	pop    esp
    2416:	0a 73 00             	or     dh,BYTE PTR [ebx+0x0]
    2419:	01 6e 9d             	add    DWORD PTR [esi-0x63],ebp
    241c:	00 00                	add    BYTE PTR [eax],al
    241e:	00 02                	add    BYTE PTR [edx],al
    2420:	91                   	xchg   ecx,eax
    2421:	58                   	pop    eax
    2422:	0c 3f                	or     al,0x3f
    2424:	09 00                	or     DWORD PTR [eax],eax
    2426:	00 01                	add    BYTE PTR [ecx],al
    2428:	70 5a                	jo     2484 <sysEnter_Vector-0x12db7c>
    242a:	00 00                	add    BYTE PTR [eax],al
    242c:	00 02                	add    BYTE PTR [edx],al
    242e:	91                   	xchg   ecx,eax
    242f:	54                   	push   esp
    2430:	0c d4                	or     al,0xd4
    2432:	07                   	pop    es
    2433:	00 00                	add    BYTE PTR [eax],al
    2435:	01 72 5a             	add    DWORD PTR [edx+0x5a],esi
    2438:	00 00                	add    BYTE PTR [eax],al
    243a:	00 02                	add    BYTE PTR [edx],al
    243c:	91                   	xchg   ecx,eax
    243d:	50                   	push   eax
    243e:	0c 32                	or     al,0x32
    2440:	08 00                	or     BYTE PTR [eax],al
    2442:	00 01                	add    BYTE PTR [ecx],al
    2444:	73 5a                	jae    24a0 <sysEnter_Vector-0x12db60>
    2446:	00 00                	add    BYTE PTR [eax],al
    2448:	00 02                	add    BYTE PTR [edx],al
    244a:	91                   	xchg   ecx,eax
    244b:	4c                   	dec    esp
    244c:	0c 12                	or     al,0x12
    244e:	08 00                	or     BYTE PTR [eax],al
    2450:	00 01                	add    BYTE PTR [ecx],al
    2452:	75 5a                	jne    24ae <sysEnter_Vector-0x12db52>
    2454:	00 00                	add    BYTE PTR [eax],al
    2456:	00 02                	add    BYTE PTR [edx],al
    2458:	91                   	xchg   ecx,eax
    2459:	48                   	dec    eax
    245a:	11 e0                	adc    eax,esp
    245c:	07                   	pop    es
    245d:	00 00                	add    BYTE PTR [eax],al
    245f:	01 7f 29             	add    DWORD PTR [edi+0x29],edi
    2462:	1c 00                	sbb    al,0x0
    2464:	9f                   	lahf   
    2465:	12 ce                	adc    cl,dh
    2467:	1e                   	push   ds
    2468:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
    246e:	eb 02                	jmp    2472 <sysEnter_Vector-0x12db8e>
    2470:	00 00                	add    BYTE PTR [eax],al
    2472:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    2475:	00 01                	add    BYTE PTR [ecx],al
    2477:	e0 03                	loopne 247c <sysEnter_Vector-0x12db84>
    2479:	03 00                	add    eax,DWORD PTR [eax]
    247b:	00 02                	add    BYTE PTR [edx],al
    247d:	91                   	xchg   ecx,eax
    247e:	44                   	inc    esp
    247f:	00 0d ee 1e 00 9f    	add    BYTE PTR ds:0x9f001eee,cl
    2485:	1b 00                	sbb    eax,DWORD PTR [eax]
    2487:	00 00                	add    BYTE PTR [eax],al
    2489:	0a 69 70             	or     ch,BYTE PTR [ecx+0x70]
    248c:	00 01                	add    BYTE PTR [ecx],al
    248e:	e3 09                	jecxz  2499 <sysEnter_Vector-0x12db67>
    2490:	03 00                	add    eax,DWORD PTR [eax]
    2492:	00 02                	add    BYTE PTR [edx],al
    2494:	91                   	xchg   ecx,eax
    2495:	40                   	inc    eax
    2496:	00 00                	add    BYTE PTR [eax],al
    2498:	06                   	push   es
    2499:	04 8f                	add    al,0x8f
    249b:	00 00                	add    BYTE PTR [eax],al
    249d:	00 06                	add    BYTE PTR [esi],al
    249f:	04 5a                	add    al,0x5a
    24a1:	00 00                	add    BYTE PTR [eax],al
    24a3:	00 13                	add    BYTE PTR [ebx],dl
    24a5:	0a 08                	or     cl,BYTE PTR [eax]
    24a7:	00 00                	add    BYTE PTR [eax],al
    24a9:	01 15 01 5a 00 00    	add    DWORD PTR ds:0x5a01,edx
    24af:	00 2d 20 00 9f 33    	add    BYTE PTR ds:0x339f0020,ch
    24b5:	00 00                	add    BYTE PTR [eax],al
    24b7:	00 01                	add    BYTE PTR [ecx],al
    24b9:	9c                   	pushf  
    24ba:	65 03 00             	add    eax,DWORD PTR gs:[eax]
    24bd:	00 14 62             	add    BYTE PTR [edx+eiz*2],dl
    24c0:	75 66                	jne    2528 <sysEnter_Vector-0x12dad8>
    24c2:	00 01                	add    BYTE PTR [ecx],al
    24c4:	15 01 bd 00 00       	adc    eax,0xbd01
    24c9:	00 02                	add    BYTE PTR [edx],al
    24cb:	91                   	xchg   ecx,eax
    24cc:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    24cf:	6d                   	ins    DWORD PTR es:[edi],dx
    24d0:	74 00                	je     24d2 <sysEnter_Vector-0x12db2e>
    24d2:	01 15 01 9d 00 00    	add    DWORD PTR ds:0x9d01,edx
    24d8:	00 02                	add    BYTE PTR [edx],al
    24da:	91                   	xchg   ecx,eax
    24db:	04 15                	add    al,0x15
    24dd:	16                   	push   ss
    24de:	8c 06                	mov    WORD PTR [esi],es
    24e0:	00 00                	add    BYTE PTR [eax],al
    24e2:	01 17                	add    DWORD PTR [edi],edx
    24e4:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    24e7:	00 00                	add    BYTE PTR [eax],al
    24e9:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    24ef:	01 18                	add    DWORD PTR [eax],ebx
    24f1:	01 5a 00             	add    DWORD PTR [edx+0x0],ebx
    24f4:	00 00                	add    BYTE PTR [eax],al
    24f6:	02 91 6c 00 18 4b    	add    dl,BYTE PTR [ecx+0x4b18006c]
    24fc:	00 00                	add    BYTE PTR [eax],al
    24fe:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2501:	76 00                	jbe    2503 <sysEnter_Vector-0x12dafd>
    2503:	00 00                	add    BYTE PTR [eax],al
    2505:	05 03 a0 54 00       	add    eax,0x54a003
    250a:	9f                   	lahf   
    250b:	18 af 00 00 00 04    	sbb    BYTE PTR [edi+0x4000000],ch
    2511:	35 76 00 00 00       	xor    eax,0x76
    2516:	05 03 a4 54 00       	add    eax,0x54a403
    251b:	9f                   	lahf   
    251c:	18 5b 01             	sbb    BYTE PTR [ebx+0x1],bl
    251f:	00 00                	add    BYTE PTR [eax],al
    2521:	04 36                	add    al,0x36
    2523:	76 00                	jbe    2525 <sysEnter_Vector-0x12dadb>
    2525:	00 00                	add    BYTE PTR [eax],al
    2527:	05 03 9c 54 00       	add    eax,0x549c03
    252c:	9f                   	lahf   
    252d:	18 54 00 00          	sbb    BYTE PTR [eax+eax*1+0x0],dl
    2531:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    2534:	8f 00                	pop    DWORD PTR [eax]
    2536:	00 00                	add    BYTE PTR [eax],al
    2538:	05 03 ac 54 00       	add    eax,0x54ac03
    253d:	9f                   	lahf   
    253e:	18 28                	sbb    BYTE PTR [eax],ch
    2540:	00 00                	add    BYTE PTR [eax],al
    2542:	00 05 4f ba 03 00    	add    BYTE PTR ds:0x3ba4f,al
    2548:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    254e:	9f                   	lahf   
    254f:	06                   	push   es
    2550:	04 bd                	add    al,0xbd
    2552:	00 00                	add    BYTE PTR [eax],al
    2554:	00 00                	add    BYTE PTR [eax],al
    2556:	58                   	pop    eax
    2557:	04 00                	add    al,0x0
    2559:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    255c:	35 0c 00 00 04       	xor    eax,0x400000c
    2561:	01 f4                	add    esp,esi
    2563:	00 00                	add    BYTE PTR [eax],al
    2565:	00 0c 9e             	add    BYTE PTR [esi+ebx*4],cl
    2568:	08 00                	or     BYTE PTR [eax],al
    256a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    256d:	00 00                	add    BYTE PTR [eax],al
    256f:	60                   	pusha  
    2570:	20 00                	and    BYTE PTR [eax],al
    2572:	9f                   	lahf   
    2573:	84 00                	test   BYTE PTR [eax],al
    2575:	00 00                	add    BYTE PTR [eax],al
    2577:	c9                   	leave  
    2578:	0f 00 00             	sldt   WORD PTR [eax]
    257b:	02 01                	add    al,BYTE PTR [ecx]
    257d:	06                   	push   es
    257e:	64 00 00             	add    BYTE PTR fs:[eax],al
    2581:	00 02                	add    BYTE PTR [edx],al
    2583:	01 06                	add    DWORD PTR [esi],eax
    2585:	5d                   	pop    ebp
    2586:	00 00                	add    BYTE PTR [eax],al
    2588:	00 02                	add    BYTE PTR [edx],al
    258a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2590:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2597:	02 08                	add    cl,BYTE PTR [eax]
    2599:	05 00 00 00 00       	add    eax,0x0
    259e:	02 01                	add    al,BYTE PTR [ecx]
    25a0:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    25a3:	00 00                	add    BYTE PTR [eax],al
    25a5:	02 02                	add    al,BYTE PTR [edx]
    25a7:	07                   	pop    es
    25a8:	0e                   	push   cs
    25a9:	00 00                	add    BYTE PTR [eax],al
    25ab:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    25ae:	00 00                	add    BYTE PTR [eax],al
    25b0:	00 02                	add    BYTE PTR [edx],al
    25b2:	34 61                	xor    al,0x61
    25b4:	00 00                	add    BYTE PTR [eax],al
    25b6:	00 02                	add    BYTE PTR [edx],al
    25b8:	04 07                	add    al,0x7
    25ba:	3e 00 00             	add    BYTE PTR ds:[eax],al
    25bd:	00 04 42             	add    BYTE PTR [edx+eax*2],al
    25c0:	08 00                	or     BYTE PTR [eax],al
    25c2:	00 02                	add    BYTE PTR [edx],al
    25c4:	37                   	aaa    
    25c5:	73 00                	jae    25c7 <sysEnter_Vector-0x12da39>
    25c7:	00 00                	add    BYTE PTR [eax],al
    25c9:	02 08                	add    cl,BYTE PTR [eax]
    25cb:	07                   	pop    es
    25cc:	34 00                	xor    al,0x0
    25ce:	00 00                	add    BYTE PTR [eax],al
    25d0:	04 9d                	add    al,0x9d
    25d2:	04 00                	add    al,0x0
    25d4:	00 03                	add    BYTE PTR [ebx],al
    25d6:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    25d9:	00 00                	add    BYTE PTR [eax],al
    25db:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    25e2:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    25e5:	9b                   	fwait
    25e6:	00 00                	add    BYTE PTR [eax],al
    25e8:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    25ee:	00 06                	add    BYTE PTR [esi],al
    25f0:	25 00 00 00 02       	and    eax,0x2000000
    25f5:	01 02                	add    DWORD PTR [edx],eax
    25f7:	95                   	xchg   ebp,eax
    25f8:	00 00                	add    BYTE PTR [eax],al
    25fa:	00 02                	add    BYTE PTR [edx],al
    25fc:	04 07                	add    al,0x7
    25fe:	39 00                	cmp    DWORD PTR [eax],eax
    2600:	00 00                	add    BYTE PTR [eax],al
    2602:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2605:	e1 00                	loope  2607 <sysEnter_Vector-0x12d9f9>
    2607:	00 00                	add    BYTE PTR [eax],al
    2609:	07                   	pop    es
    260a:	04 05                	add    al,0x5
    260c:	04 25                	add    al,0x25
    260e:	00 00                	add    BYTE PTR [eax],al
    2610:	00 08                	add    BYTE PTR [eax],cl
    2612:	19 09                	sbb    DWORD PTR [ecx],ecx
    2614:	00 00                	add    BYTE PTR [eax],al
    2616:	0c 04                	or     al,0x4
    2618:	17                   	pop    ss
    2619:	ec                   	in     al,dx
    261a:	00 00                	add    BYTE PTR [eax],al
    261c:	00 09                	add    BYTE PTR [ecx],cl
    261e:	5b                   	pop    ebx
    261f:	08 00                	or     BYTE PTR [eax],al
    2621:	00 04 19             	add    BYTE PTR [ecx+ebx*1],al
    2624:	ec                   	in     al,dx
    2625:	00 00                	add    BYTE PTR [eax],al
    2627:	00 00                	add    BYTE PTR [eax],al
    2629:	09 5b 07             	or     DWORD PTR [ebx+0x7],ebx
    262c:	00 00                	add    BYTE PTR [eax],al
    262e:	04 19                	add    al,0x19
    2630:	ec                   	in     al,dx
    2631:	00 00                	add    BYTE PTR [eax],al
    2633:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2636:	11 09                	adc    DWORD PTR [ecx],ecx
    2638:	00 00                	add    BYTE PTR [eax],al
    263a:	04 1a                	add    al,0x1a
    263c:	b3 00                	mov    bl,0x0
    263e:	00 00                	add    BYTE PTR [eax],al
    2640:	08 00                	or     BYTE PTR [eax],al
    2642:	05 04 bb 00 00       	add    eax,0xbb04
    2647:	00 04 cd 08 00 00 04 	add    BYTE PTR [ecx*8+0x4000008],al
    264e:	1b bb 00 00 00 08    	sbb    edi,DWORD PTR [ebx+0x8000000]
    2654:	79 08                	jns    265e <sysEnter_Vector-0x12d9a2>
    2656:	00 00                	add    BYTE PTR [eax],al
    2658:	14 05                	adc    al,0x5
    265a:	1b 2e                	sbb    ebp,DWORD PTR [esi]
    265c:	01 00                	add    DWORD PTR [eax],eax
    265e:	00 09                	add    BYTE PTR [ecx],cl
    2660:	72 08                	jb     266a <sysEnter_Vector-0x12d996>
    2662:	00 00                	add    BYTE PTR [eax],al
    2664:	05 1d f2 00 00       	add    eax,0xf21d
    2669:	00 00                	add    BYTE PTR [eax],al
    266b:	09 3c 08             	or     DWORD PTR [eax+ecx*1],edi
    266e:	00 00                	add    BYTE PTR [eax],al
    2670:	05 1e 61 00 00       	add    eax,0x611e
    2675:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    2678:	74 09                	je     2683 <sysEnter_Vector-0x12d97d>
    267a:	00 00                	add    BYTE PTR [eax],al
    267c:	05 1f 5f 01 00       	add    eax,0x15f1f
    2681:	00 10                	add    BYTE PTR [eax],dl
    2683:	00 08                	add    BYTE PTR [eax],cl
    2685:	aa                   	stos   BYTE PTR es:[edi],al
    2686:	08 00                	or     BYTE PTR [eax],al
    2688:	00 0c 05 37 5f 01 00 	add    BYTE PTR [eax*1+0x15f37],cl
    268f:	00 09                	add    BYTE PTR [ecx],cl
    2691:	97                   	xchg   edi,eax
    2692:	08 00                	or     BYTE PTR [eax],al
    2694:	00 05 39 b5 00 00    	add    BYTE PTR ds:0xb539,al
    269a:	00 00                	add    BYTE PTR [eax],al
    269c:	09 7b 09             	or     DWORD PTR [ebx+0x9],edi
    269f:	00 00                	add    BYTE PTR [eax],al
    26a1:	05 3a 68 02 00       	add    eax,0x2683a
    26a6:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    26a9:	8c 09                	mov    WORD PTR [ecx],cs
    26ab:	00 00                	add    BYTE PTR [eax],al
    26ad:	05 3b 5f 01 00       	add    eax,0x15f3b
    26b2:	00 08                	add    BYTE PTR [eax],cl
    26b4:	00 05 04 2e 01 00    	add    BYTE PTR ds:0x12e04,al
    26ba:	00 08                	add    BYTE PTR [eax],cl
    26bc:	87 08                	xchg   DWORD PTR [eax],ecx
    26be:	00 00                	add    BYTE PTR [eax],al
    26c0:	0c 05                	or     al,0x5
    26c2:	22 96 01 00 00 09    	and    dl,BYTE PTR [esi+0x9000001]
    26c8:	28 09                	sub    BYTE PTR [ecx],cl
    26ca:	00 00                	add    BYTE PTR [eax],al
    26cc:	05 24 5f 01 00       	add    eax,0x15f24
    26d1:	00 00                	add    BYTE PTR [eax],al
    26d3:	09 6b 08             	or     DWORD PTR [ebx+0x8],ebp
    26d6:	00 00                	add    BYTE PTR [eax],al
    26d8:	05 25 96 01 00       	add    eax,0x19625
    26dd:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    26e0:	4b                   	dec    ebx
    26e1:	08 00                	or     BYTE PTR [eax],al
    26e3:	00 05 26 3a 00 00    	add    BYTE PTR ds:0x3a26,al
    26e9:	00 08                	add    BYTE PTR [eax],cl
    26eb:	00 05 04 fd 00 00    	add    BYTE PTR ds:0xfd04,al
    26f1:	00 08                	add    BYTE PTR [eax],cl
    26f3:	7d 09                	jge    26fe <sysEnter_Vector-0x12d902>
    26f5:	00 00                	add    BYTE PTR [eax],al
    26f7:	24 05                	and    al,0x5
    26f9:	29 09                	sub    DWORD PTR [ecx],ecx
    26fb:	02 00                	add    al,BYTE PTR [eax]
    26fd:	00 09                	add    BYTE PTR [ecx],cl
    26ff:	0b 09                	or     ecx,DWORD PTR [ecx]
    2701:	00 00                	add    BYTE PTR [eax],al
    2703:	05 2b 61 00 00       	add    eax,0x612b
    2708:	00 00                	add    BYTE PTR [eax],al
    270a:	09 4b 09             	or     DWORD PTR [ebx+0x9],ecx
    270d:	00 00                	add    BYTE PTR [eax],al
    270f:	05 2c 4f 00 00       	add    eax,0x4f2c
    2714:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2717:	e7 08                	out    0x8,eax
    2719:	00 00                	add    BYTE PTR [eax],al
    271b:	05 2d 4f 00 00       	add    eax,0x4f2d
    2720:	00 06                	add    BYTE PTR [esi],al
    2722:	09 45 09             	or     DWORD PTR [ebp+0x9],eax
    2725:	00 00                	add    BYTE PTR [eax],al
    2727:	05 2e 61 00 00       	add    eax,0x612e
    272c:	00 08                	add    BYTE PTR [eax],cl
    272e:	09 c7                	or     edi,eax
    2730:	08 00                	or     BYTE PTR [eax],al
    2732:	00 05 2f 61 00 00    	add    BYTE PTR ds:0x612f,al
    2738:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    273b:	3d 09 00 00 05       	cmp    eax,0x5000009
    2740:	30 61 00             	xor    BYTE PTR [ecx+0x0],ah
    2743:	00 00                	add    BYTE PTR [eax],al
    2745:	10 09                	adc    BYTE PTR [ecx],cl
    2747:	23 09                	and    ecx,DWORD PTR [ecx]
    2749:	00 00                	add    BYTE PTR [eax],al
    274b:	05 31 52 02 00       	add    eax,0x25231
    2750:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    2753:	85 08                	test   DWORD PTR [eax],ecx
    2755:	00 00                	add    BYTE PTR [eax],al
    2757:	05 32 65 01 00       	add    eax,0x16532
    275c:	00 18                	add    BYTE PTR [eax],bl
    275e:	00 08                	add    BYTE PTR [eax],cl
    2760:	d6                   	(bad)  
    2761:	08 00                	or     BYTE PTR [eax],al
    2763:	00 14 05 3e 52 02 00 	add    BYTE PTR [eax*1+0x2523e],dl
    276a:	00 09                	add    BYTE PTR [ecx],cl
    276c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    276d:	09 00                	or     DWORD PTR [eax],eax
    276f:	00 05 40 82 02 00    	add    BYTE PTR ds:0x28240,al
    2775:	00 00                	add    BYTE PTR [eax],al
    2777:	09 60 08             	or     DWORD PTR [eax+0x8],esp
    277a:	00 00                	add    BYTE PTR [eax],al
    277c:	05 41 82 02 00       	add    eax,0x28241
    2781:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2784:	c1 08 00             	ror    DWORD PTR [eax],0x0
    2787:	00 05 42 82 02 00    	add    BYTE PTR ds:0x28242,al
    278d:	00 08                	add    BYTE PTR [eax],cl
    278f:	09 55 08             	or     DWORD PTR [ebp+0x8],edx
    2792:	00 00                	add    BYTE PTR [eax],al
    2794:	05 43 9c 02 00       	add    eax,0x29c43
    2799:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    279c:	90                   	nop
    279d:	08 00                	or     BYTE PTR [eax],al
    279f:	00 05 44 c5 02 00    	add    BYTE PTR ds:0x2c544,al
    27a5:	00 10                	add    BYTE PTR [eax],dl
    27a7:	00 05 04 58 02 00    	add    BYTE PTR ds:0x25804,al
    27ad:	00 06                	add    BYTE PTR [esi],al
    27af:	09 02                	or     DWORD PTR [edx],eax
    27b1:	00 00                	add    BYTE PTR [eax],al
    27b3:	04 5f                	add    al,0x5f
    27b5:	09 00                	or     DWORD PTR [eax],eax
    27b7:	00 05 35 9c 01 00    	add    BYTE PTR ds:0x19c35,al
    27bd:	00 05 04 9c 01 00    	add    BYTE PTR ds:0x19c04,al
    27c3:	00 0a                	add    BYTE PTR [edx],cl
    27c5:	3a 00                	cmp    al,BYTE PTR [eax]
    27c7:	00 00                	add    BYTE PTR [eax],al
    27c9:	82                   	(bad)  
    27ca:	02 00                	add    al,BYTE PTR [eax]
    27cc:	00 0b                	add    BYTE PTR [ebx],cl
    27ce:	68 02 00 00 0b       	push   0xb000002
    27d3:	5f                   	pop    edi
    27d4:	01 00                	add    DWORD PTR [eax],eax
    27d6:	00 00                	add    BYTE PTR [eax],al
    27d8:	05 04 6e 02 00       	add    eax,0x26e04
    27dd:	00 0a                	add    BYTE PTR [edx],cl
    27df:	3a 00                	cmp    al,BYTE PTR [eax]
    27e1:	00 00                	add    BYTE PTR [eax],al
    27e3:	9c                   	pushf  
    27e4:	02 00                	add    al,BYTE PTR [eax]
    27e6:	00 0b                	add    BYTE PTR [ebx],cl
    27e8:	68 02 00 00 0b       	push   0xb000002
    27ed:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    27f0:	00 00                	add    BYTE PTR [eax],al
    27f2:	05 04 88 02 00       	add    eax,0x28804
    27f7:	00 0a                	add    BYTE PTR [edx],cl
    27f9:	3a 00                	cmp    al,BYTE PTR [eax]
    27fb:	00 00                	add    BYTE PTR [eax],al
    27fd:	c5 02                	lds    eax,FWORD PTR [edx]
    27ff:	00 00                	add    BYTE PTR [eax],al
    2801:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    2804:	00 00                	add    BYTE PTR [eax],al
    2806:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    2809:	00 00                	add    BYTE PTR [eax],al
    280b:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    280e:	00 00                	add    BYTE PTR [eax],al
    2810:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    2813:	00 00                	add    BYTE PTR [eax],al
    2815:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    2818:	00 00                	add    BYTE PTR [eax],al
    281a:	00 05 04 a2 02 00    	add    BYTE PTR ds:0x2a204,al
    2820:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    2823:	09 00                	or     DWORD PTR [eax],eax
    2825:	00 05 47 d6 02 00    	add    BYTE PTR ds:0x2d647,al
    282b:	00 08                	add    BYTE PTR [eax],cl
    282d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    282e:	09 00                	or     DWORD PTR [eax],eax
    2830:	00 10                	add    BYTE PTR [eax],dl
    2832:	05 4f 07 03 00       	add    eax,0x3074f
    2837:	00 09                	add    BYTE PTR [ecx],cl
    2839:	9d                   	popf   
    283a:	09 00                	or     DWORD PTR [eax],eax
    283c:	00 05 51 b5 00 00    	add    BYTE PTR ds:0xb551,al
    2842:	00 00                	add    BYTE PTR [eax],al
    2844:	09 95 09 00 00 05    	or     DWORD PTR [ebp+0x5000009],edx
    284a:	52                   	push   edx
    284b:	68 02 00 00 04       	push   0x4000002
    2850:	09 31                	or     DWORD PTR [ecx],esi
    2852:	09 00                	or     DWORD PTR [eax],eax
    2854:	00 05 53 07 03 00    	add    BYTE PTR ds:0x30753,al
    285a:	00 08                	add    BYTE PTR [eax],cl
    285c:	00 08                	add    BYTE PTR [eax],cl
    285e:	b1 08                	mov    cl,0x8
    2860:	00 00                	add    BYTE PTR [eax],al
    2862:	08 05 49 2c 03 00    	or     BYTE PTR ds:0x32c49,al
    2868:	00 09                	add    BYTE PTR [ecx],cl
    286a:	23 03                	and    eax,DWORD PTR [ebx]
    286c:	00 00                	add    BYTE PTR [eax],al
    286e:	05 4b 56 03 00       	add    eax,0x3564b
    2873:	00 00                	add    BYTE PTR [eax],al
    2875:	09 5b 02             	or     DWORD PTR [ebx+0x2],ebx
    2878:	00 00                	add    BYTE PTR [eax],al
    287a:	05 4c 7a 03 00       	add    eax,0x37a4c
    287f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2882:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    2885:	00 00                	add    BYTE PTR [eax],al
    2887:	4a                   	dec    edx
    2888:	03 00                	add    eax,DWORD PTR [eax]
    288a:	00 0b                	add    BYTE PTR [ebx],cl
    288c:	4a                   	dec    edx
    288d:	03 00                	add    eax,DWORD PTR [eax]
    288f:	00 0b                	add    BYTE PTR [ebx],cl
    2891:	b5 00                	mov    ch,0x0
    2893:	00 00                	add    BYTE PTR [eax],al
    2895:	0b 7a 00             	or     edi,DWORD PTR [edx+0x0]
    2898:	00 00                	add    BYTE PTR [eax],al
    289a:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    289d:	00 00                	add    BYTE PTR [eax],al
    289f:	00 05 04 d6 02 00    	add    BYTE PTR ds:0x2d604,al
    28a5:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    28ab:	00 05 04 2c 03 00    	add    BYTE PTR ds:0x32c04,al
    28b1:	00 0a                	add    BYTE PTR [edx],cl
    28b3:	7a 00                	jp     28b5 <sysEnter_Vector-0x12d74b>
    28b5:	00 00                	add    BYTE PTR [eax],al
    28b7:	7a 03                	jp     28bc <sysEnter_Vector-0x12d744>
    28b9:	00 00                	add    BYTE PTR [eax],al
    28bb:	0b 4a 03             	or     ecx,DWORD PTR [edx+0x3]
    28be:	00 00                	add    BYTE PTR [eax],al
    28c0:	0b 93 00 00 00 0b    	or     edx,DWORD PTR [ebx+0xb000000]
    28c6:	7a 00                	jp     28c8 <sysEnter_Vector-0x12d738>
    28c8:	00 00                	add    BYTE PTR [eax],al
    28ca:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    28cd:	00 00                	add    BYTE PTR [eax],al
    28cf:	00 05 04 5c 03 00    	add    BYTE PTR ds:0x35c04,al
    28d5:	00 04 f1             	add    BYTE PTR [ecx+esi*8],al
    28d8:	08 00                	or     BYTE PTR [eax],al
    28da:	00 05 4d 07 03 00    	add    BYTE PTR ds:0x3074d,al
    28e0:	00 0c 83             	add    BYTE PTR [ebx+eax*4],cl
    28e3:	09 00                	or     DWORD PTR [eax],eax
    28e5:	00 01                	add    BYTE PTR [ecx],al
    28e7:	43                   	inc    ebx
    28e8:	60                   	pusha  
    28e9:	20 00                	and    BYTE PTR [eax],al
    28eb:	9f                   	lahf   
    28ec:	84 00                	test   BYTE PTR [eax],al
    28ee:	00 00                	add    BYTE PTR [eax],al
    28f0:	01 9c bd 03 00 00 0d 	add    DWORD PTR [ebp+edi*4+0xd000003],ebx
    28f7:	66                   	data16
    28f8:	08 00                	or     BYTE PTR [eax],al
    28fa:	00 01                	add    BYTE PTR [ecx],al
    28fc:	45                   	inc    ebp
    28fd:	bd 03 00 00 02       	mov    ebp,0x2000003
    2902:	91                   	xchg   ecx,eax
    2903:	67 0d 03 09 00 00    	addr16 or eax,0x903
    2909:	01 46 3a             	add    DWORD PTR [esi+0x3a],eax
    290c:	00 00                	add    BYTE PTR [eax],al
    290e:	00 02                	add    BYTE PTR [edx],al
    2910:	91                   	xchg   ecx,eax
    2911:	6c                   	ins    BYTE PTR es:[edi],dx
    2912:	00 0e                	add    BYTE PTR [esi],cl
    2914:	25 00 00 00 cd       	and    eax,0xcd000000
    2919:	03 00                	add    eax,DWORD PTR [eax]
    291b:	00 0f                	add    BYTE PTR [edi],cl
    291d:	ac                   	lods   al,BYTE PTR ds:[esi]
    291e:	00 00                	add    BYTE PTR [eax],al
    2920:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2923:	10 4b 00             	adc    BYTE PTR [ebx+0x0],cl
    2926:	00 00                	add    BYTE PTR [eax],al
    2928:	06                   	push   es
    2929:	34 56                	xor    al,0x56
    292b:	00 00                	add    BYTE PTR [eax],al
    292d:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    2933:	9f                   	lahf   
    2934:	10 af 00 00 00 06    	adc    BYTE PTR [edi+0x6000000],ch
    293a:	35 56 00 00 00       	xor    eax,0x56
    293f:	05 03 a4 54 00       	add    eax,0x54a403
    2944:	9f                   	lahf   
    2945:	10 5b 01             	adc    BYTE PTR [ebx+0x1],bl
    2948:	00 00                	add    BYTE PTR [eax],al
    294a:	06                   	push   es
    294b:	36                   	ss
    294c:	56                   	push   esi
    294d:	00 00                	add    BYTE PTR [eax],al
    294f:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    2955:	9f                   	lahf   
    2956:	10 54 00 00          	adc    BYTE PTR [eax+eax*1+0x0],dl
    295a:	00 06                	add    BYTE PTR [esi],al
    295c:	37                   	aaa    
    295d:	85 00                	test   DWORD PTR [eax],eax
    295f:	00 00                	add    BYTE PTR [eax],al
    2961:	05 03 ac 54 00       	add    eax,0x54ac03
    2966:	9f                   	lahf   
    2967:	10 28                	adc    BYTE PTR [eax],ch
    2969:	00 00                	add    BYTE PTR [eax],al
    296b:	00 07                	add    BYTE PTR [edi],al
    296d:	4f                   	dec    edi
    296e:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    2971:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    2977:	9f                   	lahf   
    2978:	05 04 b5 00 00       	add    eax,0xb504
    297d:	00 10                	add    BYTE PTR [eax],dl
    297f:	31 09                	xor    DWORD PTR [ecx],ecx
    2981:	00 00                	add    BYTE PTR [eax],al
    2983:	01 0e                	add    DWORD PTR [esi],ecx
    2985:	80 03 00             	add    BYTE PTR [ebx],0x0
    2988:	00 05 03 bc 54 00    	add    BYTE PTR ds:0x54bc03,al
    298e:	9f                   	lahf   
    298f:	10 52 09             	adc    BYTE PTR [edx+0x9],dl
    2992:	00 00                	add    BYTE PTR [eax],al
    2994:	01 0f                	add    DWORD PTR [edi],ecx
    2996:	5d                   	pop    ebp
    2997:	02 00                	add    al,BYTE PTR [eax]
    2999:	00 05 03 00 53 00    	add    BYTE PTR ds:0x530003,al
    299f:	9f                   	lahf   
    29a0:	10 67 09             	adc    BYTE PTR [edi+0x9],ah
    29a3:	00 00                	add    BYTE PTR [eax],al
    29a5:	01 10                	add    DWORD PTR [eax],edx
    29a7:	cb                   	retf   
    29a8:	02 00                	add    al,BYTE PTR [eax]
    29aa:	00 05 03 c4 54 00    	add    BYTE PTR ds:0x54c403,al
    29b0:	9f                   	lahf   
    29b1:	00 ad 01 00 00 04    	add    BYTE PTR [ebp+0x4000001],ch
    29b7:	00 fd                	add    ch,bh
    29b9:	0c 00                	or     al,0x0
    29bb:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    29be:	f4                   	hlt    
    29bf:	00 00                	add    BYTE PTR [eax],al
    29c1:	00 0c c6             	add    BYTE PTR [esi+eax*8],cl
    29c4:	09 00                	or     DWORD PTR [eax],eax
    29c6:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    29c9:	00 00                	add    BYTE PTR [eax],al
    29cb:	e4 20                	in     al,0x20
    29cd:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
    29d3:	c7                   	(bad)  
    29d4:	10 00                	adc    BYTE PTR [eax],al
    29d6:	00 02                	add    BYTE PTR [edx],al
    29d8:	01 06                	add    DWORD PTR [esi],eax
    29da:	64 00 00             	add    BYTE PTR fs:[eax],al
    29dd:	00 02                	add    BYTE PTR [edx],al
    29df:	01 06                	add    DWORD PTR [esi],eax
    29e1:	5d                   	pop    ebp
    29e2:	00 00                	add    BYTE PTR [eax],al
    29e4:	00 02                	add    BYTE PTR [edx],al
    29e6:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    29ec:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    29f3:	02 08                	add    cl,BYTE PTR [eax]
    29f5:	05 00 00 00 00       	add    eax,0x0
    29fa:	02 01                	add    al,BYTE PTR [ecx]
    29fc:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    29ff:	00 00                	add    BYTE PTR [eax],al
    2a01:	02 02                	add    al,BYTE PTR [edx]
    2a03:	07                   	pop    es
    2a04:	0e                   	push   cs
    2a05:	00 00                	add    BYTE PTR [eax],al
    2a07:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2a0a:	00 00                	add    BYTE PTR [eax],al
    2a0c:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2a0f:	61                   	popa   
    2a10:	00 00                	add    BYTE PTR [eax],al
    2a12:	00 02                	add    BYTE PTR [edx],al
    2a14:	04 07                	add    al,0x7
    2a16:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2a19:	00 02                	add    BYTE PTR [edx],al
    2a1b:	08 07                	or     BYTE PTR [edi],al
    2a1d:	34 00                	xor    al,0x0
    2a1f:	00 00                	add    BYTE PTR [eax],al
    2a21:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2a28:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2a2b:	9b                   	fwait
    2a2c:	00 00                	add    BYTE PTR [eax],al
    2a2e:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2a34:	00 06                	add    BYTE PTR [esi],al
    2a36:	25 00 00 00 02       	and    eax,0x2000000
    2a3b:	01 02                	add    DWORD PTR [edx],eax
    2a3d:	95                   	xchg   ebp,eax
    2a3e:	00 00                	add    BYTE PTR [eax],al
    2a40:	00 02                	add    BYTE PTR [edx],al
    2a42:	04 07                	add    al,0x7
    2a44:	39 00                	cmp    DWORD PTR [eax],eax
    2a46:	00 00                	add    BYTE PTR [eax],al
    2a48:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2a4b:	e1 00                	loope  2a4d <sysEnter_Vector-0x12d5b3>
    2a4d:	00 00                	add    BYTE PTR [eax],al
    2a4f:	05 04 25 00 00       	add    eax,0x2504
    2a54:	00 07                	add    BYTE PTR [edi],al
    2a56:	bf 09 00 00 01       	mov    edi,0x1000009
    2a5b:	1d 9d 00 00 00       	sbb    eax,0x9d
    2a60:	e4 20                	in     al,0x20
    2a62:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
    2a68:	01 9c d9 00 00 00 08 	add    DWORD PTR [ecx+ebx*8+0x8000000],ebx
    2a6f:	77 07                	ja     2a78 <sysEnter_Vector-0x12d588>
    2a71:	00 00                	add    BYTE PTR [eax],al
    2a73:	01 1d 9d 00 00 00    	add    DWORD PTR ds:0x9d,ebx
    2a79:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    2a7f:	63 00                	arpl   WORD PTR [eax],ax
    2a81:	01 1d 7d 00 00 00    	add    DWORD PTR ds:0x7d,ebx
    2a87:	02 91 04 00 07 b7    	add    dl,BYTE PTR [ecx-0x48f8fffc]
    2a8d:	09 00                	or     DWORD PTR [eax],eax
    2a8f:	00 01                	add    BYTE PTR [ecx],al
    2a91:	23 9d 00 00 00 22    	and    ebx,DWORD PTR [ebp+0x22000000]
    2a97:	21 00                	and    DWORD PTR [eax],eax
    2a99:	9f                   	lahf   
    2a9a:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2a9d:	00 01                	add    BYTE PTR [ecx],al
    2a9f:	9c                   	pushf  
    2aa0:	0f 01 00             	sgdtd  [eax]
    2aa3:	00 08                	add    BYTE PTR [eax],cl
    2aa5:	77 07                	ja     2aae <sysEnter_Vector-0x12d552>
    2aa7:	00 00                	add    BYTE PTR [eax],al
    2aa9:	01 23                	add    DWORD PTR [ebx],esp
    2aab:	9d                   	popf   
    2aac:	00 00                	add    BYTE PTR [eax],al
    2aae:	00 02                	add    BYTE PTR [edx],al
    2ab0:	91                   	xchg   ecx,eax
    2ab1:	00 09                	add    BYTE PTR [ecx],cl
    2ab3:	73 72                	jae    2b27 <sysEnter_Vector-0x12d4d9>
    2ab5:	63 00                	arpl   WORD PTR [eax],ax
    2ab7:	01 23                	add    DWORD PTR [ebx],esp
    2ab9:	7d 00                	jge    2abb <sysEnter_Vector-0x12d545>
    2abb:	00 00                	add    BYTE PTR [eax],al
    2abd:	02 91 04 00 0a ab    	add    dl,BYTE PTR [ecx-0x54f5fffc]
    2ac3:	09 00                	or     DWORD PTR [eax],eax
    2ac5:	00 01                	add    BYTE PTR [ecx],al
    2ac7:	29 60 21             	sub    DWORD PTR [eax+0x21],esp
    2aca:	00 9f 6f 00 00 00    	add    BYTE PTR [edi+0x6f],bl
    2ad0:	01 9c 55 01 00 00 09 	add    DWORD PTR [ebp+edx*2+0x9000001],ebx
    2ad7:	70 00                	jo     2ad9 <sysEnter_Vector-0x12d527>
    2ad9:	01 29                	add    DWORD PTR [ecx],ebp
    2adb:	9d                   	popf   
    2adc:	00 00                	add    BYTE PTR [eax],al
    2ade:	00 02                	add    BYTE PTR [edx],al
    2ae0:	91                   	xchg   ecx,eax
    2ae1:	00 09                	add    BYTE PTR [ecx],cl
    2ae3:	71 00                	jno    2ae5 <sysEnter_Vector-0x12d51b>
    2ae5:	01 29                	add    DWORD PTR [ecx],ebp
    2ae7:	9d                   	popf   
    2ae8:	00 00                	add    BYTE PTR [eax],al
    2aea:	00 02                	add    BYTE PTR [edx],al
    2aec:	91                   	xchg   ecx,eax
    2aed:	04 0b                	add    al,0xb
    2aef:	63 00                	arpl   WORD PTR [eax],ax
    2af1:	01 2a                	add    DWORD PTR [edx],ebp
    2af3:	3a 00                	cmp    al,BYTE PTR [eax]
    2af5:	00 00                	add    BYTE PTR [eax],al
    2af7:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    2afd:	01 2a                	add    DWORD PTR [edx],ebp
    2aff:	3a 00                	cmp    al,BYTE PTR [eax]
    2b01:	00 00                	add    BYTE PTR [eax],al
    2b03:	02 91 70 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0070]
    2b09:	00 00                	add    BYTE PTR [eax],al
    2b0b:	00 02                	add    BYTE PTR [edx],al
    2b0d:	34 56                	xor    al,0x56
    2b0f:	00 00                	add    BYTE PTR [eax],al
    2b11:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    2b17:	9f                   	lahf   
    2b18:	0c af                	or     al,0xaf
    2b1a:	00 00                	add    BYTE PTR [eax],al
    2b1c:	00 02                	add    BYTE PTR [edx],al
    2b1e:	35 56 00 00 00       	xor    eax,0x56
    2b23:	05 03 a4 54 00       	add    eax,0x54a403
    2b28:	9f                   	lahf   
    2b29:	0c 5b                	or     al,0x5b
    2b2b:	01 00                	add    DWORD PTR [eax],eax
    2b2d:	00 02                	add    BYTE PTR [edx],al
    2b2f:	36                   	ss
    2b30:	56                   	push   esi
    2b31:	00 00                	add    BYTE PTR [eax],al
    2b33:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    2b39:	9f                   	lahf   
    2b3a:	0c 54                	or     al,0x54
    2b3c:	00 00                	add    BYTE PTR [eax],al
    2b3e:	00 02                	add    BYTE PTR [edx],al
    2b40:	37                   	aaa    
    2b41:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2b42:	00 00                	add    BYTE PTR [eax],al
    2b44:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    2b4a:	9f                   	lahf   
    2b4b:	0c 28                	or     al,0x28
    2b4d:	00 00                	add    BYTE PTR [eax],al
    2b4f:	00 03                	add    BYTE PTR [ebx],al
    2b51:	4f                   	dec    edi
    2b52:	aa                   	stos   BYTE PTR es:[edi],al
    2b53:	01 00                	add    DWORD PTR [eax],eax
    2b55:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    2b5b:	9f                   	lahf   
    2b5c:	05 04 9d 00 00       	add    eax,0x9d04
    2b61:	00 00                	add    BYTE PTR [eax],al
    2b63:	6c                   	ins    BYTE PTR es:[edi],dx
    2b64:	01 00                	add    DWORD PTR [eax],eax
    2b66:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b69:	b8 0d 00 00 04       	mov    eax,0x400000d
    2b6e:	01 f4                	add    esp,esi
    2b70:	00 00                	add    BYTE PTR [eax],al
    2b72:	00 0c e2             	add    BYTE PTR [edx+eiz*8],cl
    2b75:	09 00                	or     DWORD PTR [eax],eax
    2b77:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2b7a:	00 00                	add    BYTE PTR [eax],al
    2b7c:	d0 21                	shl    BYTE PTR [ecx],1
    2b7e:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
    2b84:	97                   	xchg   edi,eax
    2b85:	11 00                	adc    DWORD PTR [eax],eax
    2b87:	00 02                	add    BYTE PTR [edx],al
    2b89:	01 06                	add    DWORD PTR [esi],eax
    2b8b:	64 00 00             	add    BYTE PTR fs:[eax],al
    2b8e:	00 02                	add    BYTE PTR [edx],al
    2b90:	01 06                	add    DWORD PTR [esi],eax
    2b92:	5d                   	pop    ebp
    2b93:	00 00                	add    BYTE PTR [eax],al
    2b95:	00 02                	add    BYTE PTR [edx],al
    2b97:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2b9d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2ba4:	02 08                	add    cl,BYTE PTR [eax]
    2ba6:	05 00 00 00 00       	add    eax,0x0
    2bab:	02 01                	add    al,BYTE PTR [ecx]
    2bad:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2bb0:	00 00                	add    BYTE PTR [eax],al
    2bb2:	02 02                	add    al,BYTE PTR [edx]
    2bb4:	07                   	pop    es
    2bb5:	0e                   	push   cs
    2bb6:	00 00                	add    BYTE PTR [eax],al
    2bb8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2bbb:	00 00                	add    BYTE PTR [eax],al
    2bbd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2bc0:	61                   	popa   
    2bc1:	00 00                	add    BYTE PTR [eax],al
    2bc3:	00 02                	add    BYTE PTR [edx],al
    2bc5:	04 07                	add    al,0x7
    2bc7:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2bca:	00 02                	add    BYTE PTR [edx],al
    2bcc:	08 07                	or     BYTE PTR [edi],al
    2bce:	34 00                	xor    al,0x0
    2bd0:	00 00                	add    BYTE PTR [eax],al
    2bd2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2bd9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2bdc:	9b                   	fwait
    2bdd:	00 00                	add    BYTE PTR [eax],al
    2bdf:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2be5:	00 06                	add    BYTE PTR [esi],al
    2be7:	25 00 00 00 02       	and    eax,0x2000000
    2bec:	01 02                	add    DWORD PTR [edx],eax
    2bee:	95                   	xchg   ebp,eax
    2bef:	00 00                	add    BYTE PTR [eax],al
    2bf1:	00 02                	add    BYTE PTR [edx],al
    2bf3:	04 07                	add    al,0x7
    2bf5:	39 00                	cmp    DWORD PTR [eax],eax
    2bf7:	00 00                	add    BYTE PTR [eax],al
    2bf9:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2bfc:	e1 00                	loope  2bfe <sysEnter_Vector-0x12d402>
    2bfe:	00 00                	add    BYTE PTR [eax],al
    2c00:	05 04 25 00 00       	add    eax,0x2504
    2c05:	00 07                	add    BYTE PTR [edi],al
    2c07:	db 09                	fisttp DWORD PTR [ecx]
    2c09:	00 00                	add    BYTE PTR [eax],al
    2c0b:	01 18                	add    DWORD PTR [eax],ebx
    2c0d:	3a 00                	cmp    al,BYTE PTR [eax]
    2c0f:	00 00                	add    BYTE PTR [eax],al
    2c11:	d0 21                	shl    BYTE PTR [ecx],1
    2c13:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
    2c19:	01 9c 09 01 00 00 08 	add    DWORD PTR [ecx+ecx*1+0x8000001],ebx
    2c20:	70 31                	jo     2c53 <sysEnter_Vector-0x12d3ad>
    2c22:	00 01                	add    BYTE PTR [ecx],al
    2c24:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2c27:	00 00                	add    BYTE PTR [eax],al
    2c29:	02 91 00 08 70 32    	add    dl,BYTE PTR [ecx+0x32700800]
    2c2f:	00 01                	add    BYTE PTR [ecx],al
    2c31:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2c34:	00 00                	add    BYTE PTR [eax],al
    2c36:	02 91 04 09 73 31    	add    dl,BYTE PTR [ecx+0x31730904]
    2c3c:	00 01                	add    BYTE PTR [ecx],al
    2c3e:	1a 09                	sbb    cl,BYTE PTR [ecx]
    2c40:	01 00                	add    DWORD PTR [eax],eax
    2c42:	00 01                	add    BYTE PTR [ecx],al
    2c44:	53                   	push   ebx
    2c45:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    2c48:	00 01                	add    BYTE PTR [ecx],al
    2c4a:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    2c4c:	01 00                	add    DWORD PTR [eax],eax
    2c4e:	00 01                	add    BYTE PTR [ecx],al
    2c50:	56                   	push   esi
    2c51:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    2c54:	00 01                	add    BYTE PTR [ecx],al
    2c56:	1c 48                	sbb    al,0x48
    2c58:	00 00                	add    BYTE PTR [eax],al
    2c5a:	00 02                	add    BYTE PTR [edx],al
    2c5c:	91                   	xchg   ecx,eax
    2c5d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2c5e:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    2c61:	00 01                	add    BYTE PTR [ecx],al
    2c63:	1c 48                	sbb    al,0x48
    2c65:	00 00                	add    BYTE PTR [eax],al
    2c67:	00 02                	add    BYTE PTR [edx],al
    2c69:	91                   	xchg   ecx,eax
    2c6a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c6b:	00 05 04 0f 01 00    	add    BYTE PTR ds:0x10f04,al
    2c71:	00 06                	add    BYTE PTR [esi],al
    2c73:	48                   	dec    eax
    2c74:	00 00                	add    BYTE PTR [eax],al
    2c76:	00 0a                	add    BYTE PTR [edx],cl
    2c78:	4b                   	dec    ebx
    2c79:	00 00                	add    BYTE PTR [eax],al
    2c7b:	00 02                	add    BYTE PTR [edx],al
    2c7d:	34 56                	xor    al,0x56
    2c7f:	00 00                	add    BYTE PTR [eax],al
    2c81:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    2c87:	9f                   	lahf   
    2c88:	0a af 00 00 00 02    	or     ch,BYTE PTR [edi+0x2000000]
    2c8e:	35 56 00 00 00       	xor    eax,0x56
    2c93:	05 03 a4 54 00       	add    eax,0x54a403
    2c98:	9f                   	lahf   
    2c99:	0a 5b 01             	or     bl,BYTE PTR [ebx+0x1]
    2c9c:	00 00                	add    BYTE PTR [eax],al
    2c9e:	02 36                	add    dh,BYTE PTR [esi]
    2ca0:	56                   	push   esi
    2ca1:	00 00                	add    BYTE PTR [eax],al
    2ca3:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    2ca9:	9f                   	lahf   
    2caa:	0a 54 00 00          	or     dl,BYTE PTR [eax+eax*1+0x0]
    2cae:	00 02                	add    BYTE PTR [edx],al
    2cb0:	37                   	aaa    
    2cb1:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2cb2:	00 00                	add    BYTE PTR [eax],al
    2cb4:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    2cba:	9f                   	lahf   
    2cbb:	0a 28                	or     ch,BYTE PTR [eax]
    2cbd:	00 00                	add    BYTE PTR [eax],al
    2cbf:	00 03                	add    BYTE PTR [ebx],al
    2cc1:	4f                   	dec    edi
    2cc2:	69 01 00 00 05 03    	imul   eax,DWORD PTR [ecx],0x3050000
    2cc8:	a8 54                	test   al,0x54
    2cca:	00 9f 05 04 9d 00    	add    BYTE PTR [edi+0x9d0405],bl
    2cd0:	00 00                	add    BYTE PTR [eax],al
    2cd2:	00 c9                	add    cl,cl
    2cd4:	01 00                	add    DWORD PTR [eax],eax
    2cd6:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2cd9:	4a                   	dec    edx
    2cda:	0e                   	push   cs
    2cdb:	00 00                	add    BYTE PTR [eax],al
    2cdd:	04 01                	add    al,0x1
    2cdf:	f4                   	hlt    
    2ce0:	00 00                	add    BYTE PTR [eax],al
    2ce2:	00 0c 14             	add    BYTE PTR [esp+edx*1],cl
    2ce5:	0a 00                	or     al,BYTE PTR [eax]
    2ce7:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2cea:	00 00                	add    BYTE PTR [eax],al
    2cec:	30 22                	xor    BYTE PTR [edx],ah
    2cee:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2cf4:	56                   	push   esi
    2cf5:	12 00                	adc    al,BYTE PTR [eax]
    2cf7:	00 02                	add    BYTE PTR [edx],al
    2cf9:	01 06                	add    DWORD PTR [esi],eax
    2cfb:	64 00 00             	add    BYTE PTR fs:[eax],al
    2cfe:	00 02                	add    BYTE PTR [edx],al
    2d00:	01 06                	add    DWORD PTR [esi],eax
    2d02:	5d                   	pop    ebp
    2d03:	00 00                	add    BYTE PTR [eax],al
    2d05:	00 02                	add    BYTE PTR [edx],al
    2d07:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2d0d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2d14:	02 08                	add    cl,BYTE PTR [eax]
    2d16:	05 00 00 00 00       	add    eax,0x0
    2d1b:	02 01                	add    al,BYTE PTR [ecx]
    2d1d:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2d20:	00 00                	add    BYTE PTR [eax],al
    2d22:	02 02                	add    al,BYTE PTR [edx]
    2d24:	07                   	pop    es
    2d25:	0e                   	push   cs
    2d26:	00 00                	add    BYTE PTR [eax],al
    2d28:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2d2b:	00 00                	add    BYTE PTR [eax],al
    2d2d:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2d30:	61                   	popa   
    2d31:	00 00                	add    BYTE PTR [eax],al
    2d33:	00 02                	add    BYTE PTR [edx],al
    2d35:	04 07                	add    al,0x7
    2d37:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2d3a:	00 02                	add    BYTE PTR [edx],al
    2d3c:	08 07                	or     BYTE PTR [edi],al
    2d3e:	34 00                	xor    al,0x0
    2d40:	00 00                	add    BYTE PTR [eax],al
    2d42:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2d49:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2d4c:	9b                   	fwait
    2d4d:	00 00                	add    BYTE PTR [eax],al
    2d4f:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2d55:	00 06                	add    BYTE PTR [esi],al
    2d57:	25 00 00 00 02       	and    eax,0x2000000
    2d5c:	01 02                	add    DWORD PTR [edx],eax
    2d5e:	95                   	xchg   ebp,eax
    2d5f:	00 00                	add    BYTE PTR [eax],al
    2d61:	00 02                	add    BYTE PTR [edx],al
    2d63:	04 07                	add    al,0x7
    2d65:	39 00                	cmp    DWORD PTR [eax],eax
    2d67:	00 00                	add    BYTE PTR [eax],al
    2d69:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2d6c:	e1 00                	loope  2d6e <sysEnter_Vector-0x12d292>
    2d6e:	00 00                	add    BYTE PTR [eax],al
    2d70:	05 04 25 00 00       	add    eax,0x2504
    2d75:	00 07                	add    BYTE PTR [edi],al
    2d77:	f7                   	(bad)  
    2d78:	09 00                	or     DWORD PTR [eax],eax
    2d7a:	00 01                	add    BYTE PTR [ecx],al
    2d7c:	04 9d                	add    al,0x9d
    2d7e:	00 00                	add    BYTE PTR [eax],al
    2d80:	00 30                	add    BYTE PTR [eax],dh
    2d82:	22 00                	and    al,BYTE PTR [eax]
    2d84:	9f                   	lahf   
    2d85:	40                   	inc    eax
    2d86:	00 00                	add    BYTE PTR [eax],al
    2d88:	00 01                	add    BYTE PTR [ecx],al
    2d8a:	9c                   	pushf  
    2d8b:	e3 00                	jecxz  2d8d <sysEnter_Vector-0x12d273>
    2d8d:	00 00                	add    BYTE PTR [eax],al
    2d8f:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2d92:	00 01                	add    BYTE PTR [ecx],al
    2d94:	04 9d                	add    al,0x9d
    2d96:	00 00                	add    BYTE PTR [eax],al
    2d98:	00 02                	add    BYTE PTR [edx],al
    2d9a:	91                   	xchg   ecx,eax
    2d9b:	00 08                	add    BYTE PTR [eax],cl
    2d9d:	73 32                	jae    2dd1 <sysEnter_Vector-0x12d22f>
    2d9f:	00 01                	add    BYTE PTR [ecx],al
    2da1:	04 7d                	add    al,0x7d
    2da3:	00 00                	add    BYTE PTR [eax],al
    2da5:	00 02                	add    BYTE PTR [edx],al
    2da7:	91                   	xchg   ecx,eax
    2da8:	04 09                	add    al,0x9
    2daa:	73 00                	jae    2dac <sysEnter_Vector-0x12d254>
    2dac:	01 06                	add    DWORD PTR [esi],eax
    2dae:	9d                   	popf   
    2daf:	00 00                	add    BYTE PTR [eax],al
    2db1:	00 02                	add    BYTE PTR [edx],al
    2db3:	91                   	xchg   ecx,eax
    2db4:	74 00                	je     2db6 <sysEnter_Vector-0x12d24a>
    2db6:	07                   	pop    es
    2db7:	0c 0a                	or     al,0xa
    2db9:	00 00                	add    BYTE PTR [eax],al
    2dbb:	01 0e                	add    DWORD PTR [esi],ecx
    2dbd:	9d                   	popf   
    2dbe:	00 00                	add    BYTE PTR [eax],al
    2dc0:	00 70 22             	add    BYTE PTR [eax+0x22],dh
    2dc3:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    2dc9:	01 9c 23 01 00 00 08 	add    DWORD PTR [ebx+eiz*1+0x8000001],ebx
    2dd0:	73 31                	jae    2e03 <sysEnter_Vector-0x12d1fd>
    2dd2:	00 01                	add    BYTE PTR [ecx],al
    2dd4:	0e                   	push   cs
    2dd5:	9d                   	popf   
    2dd6:	00 00                	add    BYTE PTR [eax],al
    2dd8:	00 02                	add    BYTE PTR [edx],al
    2dda:	91                   	xchg   ecx,eax
    2ddb:	00 08                	add    BYTE PTR [eax],cl
    2ddd:	73 32                	jae    2e11 <sysEnter_Vector-0x12d1ef>
    2ddf:	00 01                	add    BYTE PTR [ecx],al
    2de1:	0e                   	push   cs
    2de2:	7d 00                	jge    2de4 <sysEnter_Vector-0x12d21c>
    2de4:	00 00                	add    BYTE PTR [eax],al
    2de6:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    2dec:	01 10                	add    DWORD PTR [eax],edx
    2dee:	9d                   	popf   
    2def:	00 00                	add    BYTE PTR [eax],al
    2df1:	00 02                	add    BYTE PTR [edx],al
    2df3:	91                   	xchg   ecx,eax
    2df4:	74 00                	je     2df6 <sysEnter_Vector-0x12d20a>
    2df6:	07                   	pop    es
    2df7:	04 0a                	add    al,0xa
    2df9:	00 00                	add    BYTE PTR [eax],al
    2dfb:	01 18                	add    DWORD PTR [eax],ebx
    2dfd:	9d                   	popf   
    2dfe:	00 00                	add    BYTE PTR [eax],al
    2e00:	00 b0 22 00 9f 47    	add    BYTE PTR [eax+0x479f0022],dh
    2e06:	00 00                	add    BYTE PTR [eax],al
    2e08:	00 01                	add    BYTE PTR [ecx],al
    2e0a:	9c                   	pushf  
    2e0b:	71 01                	jno    2e0e <sysEnter_Vector-0x12d1f2>
    2e0d:	00 00                	add    BYTE PTR [eax],al
    2e0f:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2e12:	00 01                	add    BYTE PTR [ecx],al
    2e14:	18 9d 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],bl
    2e1a:	91                   	xchg   ecx,eax
    2e1b:	00 08                	add    BYTE PTR [eax],cl
    2e1d:	73 32                	jae    2e51 <sysEnter_Vector-0x12d1af>
    2e1f:	00 01                	add    BYTE PTR [ecx],al
    2e21:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    2e24:	00 00                	add    BYTE PTR [eax],al
    2e26:	02 91 04 0a fe 09    	add    dl,BYTE PTR [ecx+0x9fe0a04]
    2e2c:	00 00                	add    BYTE PTR [eax],al
    2e2e:	01 18                	add    DWORD PTR [eax],ebx
    2e30:	61                   	popa   
    2e31:	00 00                	add    BYTE PTR [eax],al
    2e33:	00 02                	add    BYTE PTR [edx],al
    2e35:	91                   	xchg   ecx,eax
    2e36:	08 09                	or     BYTE PTR [ecx],cl
    2e38:	73 00                	jae    2e3a <sysEnter_Vector-0x12d1c6>
    2e3a:	01 1a                	add    DWORD PTR [edx],ebx
    2e3c:	9d                   	popf   
    2e3d:	00 00                	add    BYTE PTR [eax],al
    2e3f:	00 02                	add    BYTE PTR [edx],al
    2e41:	91                   	xchg   ecx,eax
    2e42:	74 00                	je     2e44 <sysEnter_Vector-0x12d1bc>
    2e44:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    2e47:	00 00                	add    BYTE PTR [eax],al
    2e49:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2e4c:	00 00                	add    BYTE PTR [eax],al
    2e4e:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    2e54:	9f                   	lahf   
    2e55:	0b af 00 00 00 02    	or     ebp,DWORD PTR [edi+0x2000000]
    2e5b:	35 56 00 00 00       	xor    eax,0x56
    2e60:	05 03 a4 54 00       	add    eax,0x54a403
    2e65:	9f                   	lahf   
    2e66:	0b 5b 01             	or     ebx,DWORD PTR [ebx+0x1]
    2e69:	00 00                	add    BYTE PTR [eax],al
    2e6b:	02 36                	add    dh,BYTE PTR [esi]
    2e6d:	56                   	push   esi
    2e6e:	00 00                	add    BYTE PTR [eax],al
    2e70:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    2e76:	9f                   	lahf   
    2e77:	0b 54 00 00          	or     edx,DWORD PTR [eax+eax*1+0x0]
    2e7b:	00 02                	add    BYTE PTR [edx],al
    2e7d:	37                   	aaa    
    2e7e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2e7f:	00 00                	add    BYTE PTR [eax],al
    2e81:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    2e87:	9f                   	lahf   
    2e88:	0b 28                	or     ebp,DWORD PTR [eax]
    2e8a:	00 00                	add    BYTE PTR [eax],al
    2e8c:	00 03                	add    BYTE PTR [ebx],al
    2e8e:	4f                   	dec    edi
    2e8f:	c6 01 00             	mov    BYTE PTR [ecx],0x0
    2e92:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    2e98:	9f                   	lahf   
    2e99:	05 04 9d 00 00       	add    eax,0x9d04
    2e9e:	00 00                	add    BYTE PTR [eax],al
    2ea0:	4c                   	dec    esp
    2ea1:	01 00                	add    DWORD PTR [eax],eax
    2ea3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2ea6:	eb 0e                	jmp    2eb6 <sysEnter_Vector-0x12d14a>
    2ea8:	00 00                	add    BYTE PTR [eax],al
    2eaa:	04 01                	add    al,0x1
    2eac:	f4                   	hlt    
    2ead:	00 00                	add    BYTE PTR [eax],al
    2eaf:	00 0c 3e             	add    BYTE PTR [esi+edi*1],cl
    2eb2:	0a 00                	or     al,BYTE PTR [eax]
    2eb4:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2eb7:	00 00                	add    BYTE PTR [eax],al
    2eb9:	f8                   	clc    
    2eba:	22 00                	and    al,BYTE PTR [eax]
    2ebc:	9f                   	lahf   
    2ebd:	89 00                	mov    DWORD PTR [eax],eax
    2ebf:	00 00                	add    BYTE PTR [eax],al
    2ec1:	36 13 00             	adc    eax,DWORD PTR ss:[eax]
    2ec4:	00 02                	add    BYTE PTR [edx],al
    2ec6:	01 06                	add    DWORD PTR [esi],eax
    2ec8:	64 00 00             	add    BYTE PTR fs:[eax],al
    2ecb:	00 02                	add    BYTE PTR [edx],al
    2ecd:	01 06                	add    DWORD PTR [esi],eax
    2ecf:	5d                   	pop    ebp
    2ed0:	00 00                	add    BYTE PTR [eax],al
    2ed2:	00 02                	add    BYTE PTR [edx],al
    2ed4:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2eda:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2ee1:	02 08                	add    cl,BYTE PTR [eax]
    2ee3:	05 00 00 00 00       	add    eax,0x0
    2ee8:	02 01                	add    al,BYTE PTR [ecx]
    2eea:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2eed:	00 00                	add    BYTE PTR [eax],al
    2eef:	02 02                	add    al,BYTE PTR [edx]
    2ef1:	07                   	pop    es
    2ef2:	0e                   	push   cs
    2ef3:	00 00                	add    BYTE PTR [eax],al
    2ef5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2ef8:	00 00                	add    BYTE PTR [eax],al
    2efa:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2efd:	61                   	popa   
    2efe:	00 00                	add    BYTE PTR [eax],al
    2f00:	00 02                	add    BYTE PTR [edx],al
    2f02:	04 07                	add    al,0x7
    2f04:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2f07:	00 02                	add    BYTE PTR [edx],al
    2f09:	08 07                	or     BYTE PTR [edi],al
    2f0b:	34 00                	xor    al,0x0
    2f0d:	00 00                	add    BYTE PTR [eax],al
    2f0f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2f16:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2f19:	9b                   	fwait
    2f1a:	00 00                	add    BYTE PTR [eax],al
    2f1c:	00 02                	add    BYTE PTR [edx],al
    2f1e:	01 02                	add    DWORD PTR [edx],eax
    2f20:	95                   	xchg   ebp,eax
    2f21:	00 00                	add    BYTE PTR [eax],al
    2f23:	00 02                	add    BYTE PTR [edx],al
    2f25:	04 07                	add    al,0x7
    2f27:	39 00                	cmp    DWORD PTR [eax],eax
    2f29:	00 00                	add    BYTE PTR [eax],al
    2f2b:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2f2e:	e1 00                	loope  2f30 <sysEnter_Vector-0x12d0d0>
    2f30:	00 00                	add    BYTE PTR [eax],al
    2f32:	05 04 25 00 00       	add    eax,0x2504
    2f37:	00 06                	add    BYTE PTR [esi],al
    2f39:	29 0a                	sub    DWORD PTR [edx],ecx
    2f3b:	00 00                	add    BYTE PTR [eax],al
    2f3d:	01 09                	add    DWORD PTR [ecx],ecx
    2f3f:	7d 00                	jge    2f41 <sysEnter_Vector-0x12d0bf>
    2f41:	00 00                	add    BYTE PTR [eax],al
    2f43:	f8                   	clc    
    2f44:	22 00                	and    al,BYTE PTR [eax]
    2f46:	9f                   	lahf   
    2f47:	30 00                	xor    BYTE PTR [eax],al
    2f49:	00 00                	add    BYTE PTR [eax],al
    2f4b:	01 9c be 00 00 00 07 	add    DWORD PTR [esi+edi*4+0x7000000],ebx
    2f52:	63 00                	arpl   WORD PTR [eax],ax
    2f54:	01 09                	add    DWORD PTR [ecx],ecx
    2f56:	25 00 00 00 02       	and    eax,0x2000000
    2f5b:	91                   	xchg   ecx,eax
    2f5c:	74 00                	je     2f5e <sysEnter_Vector-0x12d0a2>
    2f5e:	08 35 0a 00 00 01    	or     BYTE PTR ds:0x100000a,dh
    2f64:	0e                   	push   cs
    2f65:	7d 00                	jge    2f67 <sysEnter_Vector-0x12d099>
    2f67:	00 00                	add    BYTE PTR [eax],al
    2f69:	28 23                	sub    BYTE PTR [ebx],ah
    2f6b:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
    2f71:	01 9c f4 00 00 00 07 	add    DWORD PTR [esp+esi*8+0x7000000],ebx
    2f78:	73 74                	jae    2fee <sysEnter_Vector-0x12d012>
    2f7a:	72 00                	jb     2f7c <sysEnter_Vector-0x12d084>
    2f7c:	01 0e                	add    DWORD PTR [esi],ecx
    2f7e:	92                   	xchg   edx,eax
    2f7f:	00 00                	add    BYTE PTR [eax],al
    2f81:	00 02                	add    BYTE PTR [edx],al
    2f83:	91                   	xchg   ecx,eax
    2f84:	00 09                	add    BYTE PTR [ecx],cl
    2f86:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    2f89:	00 01                	add    BYTE PTR [ecx],al
    2f8b:	10 3a                	adc    BYTE PTR [edx],bh
    2f8d:	00 00                	add    BYTE PTR [eax],al
    2f8f:	00 02                	add    BYTE PTR [edx],al
    2f91:	91                   	xchg   ecx,eax
    2f92:	74 00                	je     2f94 <sysEnter_Vector-0x12d06c>
    2f94:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    2f97:	00 00                	add    BYTE PTR [eax],al
    2f99:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2f9c:	00 00                	add    BYTE PTR [eax],al
    2f9e:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    2fa4:	9f                   	lahf   
    2fa5:	0a af 00 00 00 02    	or     ch,BYTE PTR [edi+0x2000000]
    2fab:	35 56 00 00 00       	xor    eax,0x56
    2fb0:	05 03 a4 54 00       	add    eax,0x54a403
    2fb5:	9f                   	lahf   
    2fb6:	0a 5b 01             	or     bl,BYTE PTR [ebx+0x1]
    2fb9:	00 00                	add    BYTE PTR [eax],al
    2fbb:	02 36                	add    dh,BYTE PTR [esi]
    2fbd:	56                   	push   esi
    2fbe:	00 00                	add    BYTE PTR [eax],al
    2fc0:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    2fc6:	9f                   	lahf   
    2fc7:	0a 54 00 00          	or     dl,BYTE PTR [eax+eax*1+0x0]
    2fcb:	00 02                	add    BYTE PTR [edx],al
    2fcd:	37                   	aaa    
    2fce:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2fcf:	00 00                	add    BYTE PTR [eax],al
    2fd1:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    2fd7:	9f                   	lahf   
    2fd8:	0a 28                	or     ch,BYTE PTR [eax]
    2fda:	00 00                	add    BYTE PTR [eax],al
    2fdc:	00 03                	add    BYTE PTR [ebx],al
    2fde:	4f                   	dec    edi
    2fdf:	49                   	dec    ecx
    2fe0:	01 00                	add    DWORD PTR [eax],eax
    2fe2:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    2fe8:	9f                   	lahf   
    2fe9:	05 04 92 00 00       	add    eax,0x9204
    2fee:	00 00                	add    BYTE PTR [eax],al
    2ff0:	ca 00 00             	retf   0x0
    2ff3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2ff6:	92                   	xchg   edx,eax
    2ff7:	0f 00 00             	sldt   WORD PTR [eax]
    2ffa:	04 01                	add    al,0x1
    2ffc:	f4                   	hlt    
    2ffd:	00 00                	add    BYTE PTR [eax],al
    2fff:	00 0c 5c             	add    BYTE PTR [esp+ebx*2],cl
    3002:	0a 00                	or     al,BYTE PTR [eax]
    3004:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    3007:	00 00                	add    BYTE PTR [eax],al
    3009:	84 23                	test   BYTE PTR [ebx],ah
    300b:	00 9f 62 00 00 00    	add    BYTE PTR [edi+0x62],bl
    3011:	05 14 00 00 02       	add    eax,0x2000014
    3016:	04 05                	add    al,0x5
    3018:	69 6e 74 00 03 9d 04 	imul   ebp,DWORD PTR [esi+0x74],0x49d0300
    301f:	00 00                	add    BYTE PTR [eax],al
    3021:	02 d8                	add    bl,al
    3023:	37                   	aaa    
    3024:	00 00                	add    BYTE PTR [eax],al
    3026:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3029:	07                   	pop    es
    302a:	3e 00 00             	add    BYTE PTR ds:[eax],al
    302d:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3030:	05 05 00 00 00       	add    eax,0x5
    3035:	04 08                	add    al,0x8
    3037:	05 00 00 00 00       	add    eax,0x0
    303c:	04 0c                	add    al,0xc
    303e:	04 9b                	add    al,0x9b
    3040:	00 00                	add    BYTE PTR [eax],al
    3042:	00 05 55 0a 00 00    	add    BYTE PTR ds:0xa55,al
    3048:	01 03                	add    DWORD PTR [ebx],eax
    304a:	2c 00                	sub    al,0x0
    304c:	00 00                	add    BYTE PTR [eax],al
    304e:	84 23                	test   BYTE PTR [ebx],ah
    3050:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
    3056:	01 9c 89 00 00 00 06 	add    DWORD PTR [ecx+ecx*4+0x6000000],ebx
    305d:	73 74                	jae    30d3 <sysEnter_Vector-0x12cf2d>
    305f:	72 00                	jb     3061 <sysEnter_Vector-0x12cf9f>
    3061:	01 03                	add    DWORD PTR [ebx],eax
    3063:	89 00                	mov    DWORD PTR [eax],eax
    3065:	00 00                	add    BYTE PTR [eax],al
    3067:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    306d:	74 00                	je     306f <sysEnter_Vector-0x12cf91>
    306f:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    3072:	00 00                	add    BYTE PTR [eax],al
    3074:	00 02                	add    BYTE PTR [edx],al
    3076:	91                   	xchg   ecx,eax
    3077:	74 00                	je     3079 <sysEnter_Vector-0x12cf87>
    3079:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    307c:	00 00                	add    BYTE PTR [eax],al
    307e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3081:	06                   	push   es
    3082:	64 00 00             	add    BYTE PTR fs:[eax],al
    3085:	00 09                	add    BYTE PTR [ecx],cl
    3087:	8f 00                	pop    DWORD PTR [eax]
    3089:	00 00                	add    BYTE PTR [eax],al
    308b:	0a 71 0a             	or     dh,BYTE PTR [ecx+0xa]
    308e:	00 00                	add    BYTE PTR [eax],al
    3090:	01 0a                	add    DWORD PTR [edx],ecx
    3092:	2c 00                	sub    al,0x0
    3094:	00 00                	add    BYTE PTR [eax],al
    3096:	b5 23                	mov    ch,0x23
    3098:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
    309e:	01 9c 06 73 74 72 00 	add    DWORD PTR [esi+eax*1+0x727473],ebx
    30a5:	01 0a                	add    DWORD PTR [edx],ecx
    30a7:	89 00                	mov    DWORD PTR [eax],eax
    30a9:	00 00                	add    BYTE PTR [eax],al
    30ab:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    30b1:	74 00                	je     30b3 <sysEnter_Vector-0x12cf4d>
    30b3:	01 0b                	add    DWORD PTR [ebx],ecx
    30b5:	2c 00                	sub    al,0x0
    30b7:	00 00                	add    BYTE PTR [eax],al
    30b9:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    30bf:	00 00                	add    BYTE PTR [eax],al
    30c1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    30c4:	2d 10 00 00 04       	sub    eax,0x4000010
    30c9:	01 f4                	add    esp,esi
    30cb:	00 00                	add    BYTE PTR [eax],al
    30cd:	00 0c 8a             	add    BYTE PTR [edx+ecx*4],cl
    30d0:	0a 00                	or     al,BYTE PTR [eax]
    30d2:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    30d5:	00 00                	add    BYTE PTR [eax],al
    30d7:	e8 23 00 9f ce       	call   ce9f30ff <ticksToWait+0x2f9edc27>
    30dc:	00 00                	add    BYTE PTR [eax],al
    30de:	00 9d 14 00 00 02    	add    BYTE PTR [ebp+0x2000014],bl
    30e4:	04 05                	add    al,0x5
    30e6:	69 6e 74 00 03 9d 04 	imul   ebp,DWORD PTR [esi+0x74],0x49d0300
    30ed:	00 00                	add    BYTE PTR [eax],al
    30ef:	02 d8                	add    bl,al
    30f1:	37                   	aaa    
    30f2:	00 00                	add    BYTE PTR [eax],al
    30f4:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    30f7:	07                   	pop    es
    30f8:	3e 00 00             	add    BYTE PTR ds:[eax],al
    30fb:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    30fe:	05 05 00 00 00       	add    eax,0x5
    3103:	04 08                	add    al,0x8
    3105:	05 00 00 00 00       	add    eax,0x0
    310a:	04 0c                	add    al,0xc
    310c:	04 9b                	add    al,0x9b
    310e:	00 00                	add    BYTE PTR [eax],al
    3110:	00 05 82 0a 00 00    	add    BYTE PTR ds:0xa82,al
    3116:	01 0c 25 00 00 00 e8 	add    DWORD PTR [eiz*1-0x18000000],ecx
    311d:	23 00                	and    eax,DWORD PTR [eax]
    311f:	9f                   	lahf   
    3120:	67 00 00             	add    BYTE PTR [bx+si],al
    3123:	00 01                	add    BYTE PTR [ecx],al
    3125:	9c                   	pushf  
    3126:	93                   	xchg   ebx,eax
    3127:	00 00                	add    BYTE PTR [eax],al
    3129:	00 06                	add    BYTE PTR [esi],al
    312b:	73 31                	jae    315e <sysEnter_Vector-0x12cea2>
    312d:	00 01                	add    BYTE PTR [ecx],al
    312f:	0c 93                	or     al,0x93
    3131:	00 00                	add    BYTE PTR [eax],al
    3133:	00 02                	add    BYTE PTR [edx],al
    3135:	91                   	xchg   ecx,eax
    3136:	00 06                	add    BYTE PTR [esi],al
    3138:	73 32                	jae    316c <sysEnter_Vector-0x12ce94>
    313a:	00 01                	add    BYTE PTR [ecx],al
    313c:	0c 93                	or     al,0x93
    313e:	00 00                	add    BYTE PTR [eax],al
    3140:	00 02                	add    BYTE PTR [edx],al
    3142:	91                   	xchg   ecx,eax
    3143:	04 06                	add    al,0x6
    3145:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3146:	00 01                	add    BYTE PTR [ecx],al
    3148:	0c 2c                	or     al,0x2c
    314a:	00 00                	add    BYTE PTR [eax],al
    314c:	00 02                	add    BYTE PTR [edx],al
    314e:	91                   	xchg   ecx,eax
    314f:	08 00                	or     BYTE PTR [eax],al
    3151:	07                   	pop    es
    3152:	04 a0                	add    al,0xa0
    3154:	00 00                	add    BYTE PTR [eax],al
    3156:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3159:	06                   	push   es
    315a:	64 00 00             	add    BYTE PTR fs:[eax],al
    315d:	00 08                	add    BYTE PTR [eax],cl
    315f:	99                   	cdq    
    3160:	00 00                	add    BYTE PTR [eax],al
    3162:	00 09                	add    BYTE PTR [ecx],cl
    3164:	79 0a                	jns    3170 <sysEnter_Vector-0x12ce90>
    3166:	00 00                	add    BYTE PTR [eax],al
    3168:	01 16                	add    DWORD PTR [esi],edx
    316a:	25 00 00 00 4f       	and    eax,0x4f000000
    316f:	24 00                	and    al,0x0
    3171:	9f                   	lahf   
    3172:	67 00 00             	add    BYTE PTR [bx+si],al
    3175:	00 01                	add    BYTE PTR [ecx],al
    3177:	9c                   	pushf  
    3178:	06                   	push   es
    3179:	73 31                	jae    31ac <sysEnter_Vector-0x12ce54>
    317b:	00 01                	add    BYTE PTR [ecx],al
    317d:	16                   	push   ss
    317e:	93                   	xchg   ebx,eax
    317f:	00 00                	add    BYTE PTR [eax],al
    3181:	00 02                	add    BYTE PTR [edx],al
    3183:	91                   	xchg   ecx,eax
    3184:	00 06                	add    BYTE PTR [esi],al
    3186:	73 32                	jae    31ba <sysEnter_Vector-0x12ce46>
    3188:	00 01                	add    BYTE PTR [ecx],al
    318a:	16                   	push   ss
    318b:	93                   	xchg   ebx,eax
    318c:	00 00                	add    BYTE PTR [eax],al
    318e:	00 02                	add    BYTE PTR [edx],al
    3190:	91                   	xchg   ecx,eax
    3191:	04 06                	add    al,0x6
    3193:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3194:	00 01                	add    BYTE PTR [ecx],al
    3196:	16                   	push   ss
    3197:	2c 00                	sub    al,0x0
    3199:	00 00                	add    BYTE PTR [eax],al
    319b:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    31a1:	00 00                	add    BYTE PTR [eax],al
    31a3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    31a6:	b9 10 00 00 04       	mov    ecx,0x4000010
    31ab:	01 f4                	add    esp,esi
    31ad:	00 00                	add    BYTE PTR [eax],al
    31af:	00 0c a0             	add    BYTE PTR [eax+eiz*4],cl
    31b2:	0a 00                	or     al,BYTE PTR [eax]
    31b4:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    31b7:	00 00                	add    BYTE PTR [eax],al
    31b9:	b8 24 00 9f 80       	mov    eax,0x809f0024
    31be:	00 00                	add    BYTE PTR [eax],al
    31c0:	00 62 15             	add    BYTE PTR [edx+0x15],ah
    31c3:	00 00                	add    BYTE PTR [eax],al
    31c5:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    31cc:	03 9d 04 00 00 02    	add    ebx,DWORD PTR [ebp+0x2000004]
    31d2:	d8 37                	fdiv   DWORD PTR [edi]
    31d4:	00 00                	add    BYTE PTR [eax],al
    31d6:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    31d9:	07                   	pop    es
    31da:	3e 00 00             	add    BYTE PTR ds:[eax],al
    31dd:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    31e0:	05 05 00 00 00       	add    eax,0x5
    31e5:	04 08                	add    al,0x8
    31e7:	05 00 00 00 00       	add    eax,0x0
    31ec:	04 0c                	add    al,0xc
    31ee:	04 9b                	add    al,0x9b
    31f0:	00 00                	add    BYTE PTR [eax],al
    31f2:	00 05 b6 0a 00 00    	add    BYTE PTR ds:0xab6,al
    31f8:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    31fe:	b8 24 00 9f 60       	mov    eax,0x609f0024
    3203:	00 00                	add    BYTE PTR [eax],al
    3205:	00 01                	add    BYTE PTR [ecx],al
    3207:	9c                   	pushf  
    3208:	9f                   	lahf   
    3209:	00 00                	add    BYTE PTR [eax],al
    320b:	00 06                	add    BYTE PTR [esi],al
    320d:	73 31                	jae    3240 <sysEnter_Vector-0x12cdc0>
    320f:	00 01                	add    BYTE PTR [ecx],al
    3211:	0d 9f 00 00 00       	or     eax,0x9f
    3216:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    321c:	00 01                	add    BYTE PTR [ecx],al
    321e:	0d ac 00 00 00       	or     eax,0xac
    3223:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    3229:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    322f:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    3235:	01 0f                	add    DWORD PTR [edi],ecx
    3237:	9f                   	lahf   
    3238:	00 00                	add    BYTE PTR [eax],al
    323a:	00 02                	add    BYTE PTR [edx],al
    323c:	91                   	xchg   ecx,eax
    323d:	74 00                	je     323f <sysEnter_Vector-0x12cdc1>
    323f:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    3246:	01 06                	add    DWORD PTR [esi],eax
    3248:	64 00 00             	add    BYTE PTR fs:[eax],al
    324b:	00 08                	add    BYTE PTR [eax],cl
    324d:	04 b2                	add    al,0xb2
    324f:	00 00                	add    BYTE PTR [eax],al
    3251:	00 09                	add    BYTE PTR [ecx],cl
    3253:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    3254:	00 00                	add    BYTE PTR [eax],al
    3256:	00 0a                	add    BYTE PTR [edx],cl
    3258:	bf 0a 00 00 01       	mov    edi,0x100000a
    325d:	1b 9f 00 00 00 18    	sbb    ebx,DWORD PTR [edi+0x18000000]
    3263:	25 00 9f 20 00       	and    eax,0x209f00
    3268:	00 00                	add    BYTE PTR [eax],al
    326a:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    3271:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    3277:	91                   	xchg   ecx,eax
    3278:	00 06                	add    BYTE PTR [esi],al
    327a:	73 32                	jae    32ae <sysEnter_Vector-0x12cd52>
    327c:	00 01                	add    BYTE PTR [ecx],al
    327e:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    3285:	04 06                	add    al,0x6
    3287:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3288:	00 01                	add    BYTE PTR [ecx],al
    328a:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    328d:	00 00                	add    BYTE PTR [eax],al
    328f:	02 91 08 00 00 92    	add    dl,BYTE PTR [ecx-0x6dfffff8]
    3295:	01 00                	add    DWORD PTR [eax],eax
    3297:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    329a:	54                   	push   esp
    329b:	11 00                	adc    DWORD PTR [eax],eax
    329d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    32a0:	f4                   	hlt    
    32a1:	00 00                	add    BYTE PTR [eax],al
    32a3:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
    32a6:	0a 00                	or     al,BYTE PTR [eax]
    32a8:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    32ab:	00 00                	add    BYTE PTR [eax],al
    32ad:	38 25 00 9f 7d 01    	cmp    BYTE PTR ds:0x17d9f00,ah
    32b3:	00 00                	add    BYTE PTR [eax],al
    32b5:	07                   	pop    es
    32b6:	16                   	push   ss
    32b7:	00 00                	add    BYTE PTR [eax],al
    32b9:	02 01                	add    al,BYTE PTR [ecx]
    32bb:	06                   	push   es
    32bc:	64 00 00             	add    BYTE PTR fs:[eax],al
    32bf:	00 02                	add    BYTE PTR [edx],al
    32c1:	01 06                	add    DWORD PTR [esi],eax
    32c3:	5d                   	pop    ebp
    32c4:	00 00                	add    BYTE PTR [eax],al
    32c6:	00 02                	add    BYTE PTR [edx],al
    32c8:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    32ce:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    32d5:	02 08                	add    cl,BYTE PTR [eax]
    32d7:	05 00 00 00 00       	add    eax,0x0
    32dc:	02 01                	add    al,BYTE PTR [ecx]
    32de:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    32e1:	00 00                	add    BYTE PTR [eax],al
    32e3:	02 02                	add    al,BYTE PTR [edx]
    32e5:	07                   	pop    es
    32e6:	0e                   	push   cs
    32e7:	00 00                	add    BYTE PTR [eax],al
    32e9:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    32ec:	00 00                	add    BYTE PTR [eax],al
    32ee:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    32f1:	61                   	popa   
    32f2:	00 00                	add    BYTE PTR [eax],al
    32f4:	00 02                	add    BYTE PTR [edx],al
    32f6:	04 07                	add    al,0x7
    32f8:	3e 00 00             	add    BYTE PTR ds:[eax],al
    32fb:	00 02                	add    BYTE PTR [edx],al
    32fd:	08 07                	or     BYTE PTR [edi],al
    32ff:	34 00                	xor    al,0x0
    3301:	00 00                	add    BYTE PTR [eax],al
    3303:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    330a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    330d:	9b                   	fwait
    330e:	00 00                	add    BYTE PTR [eax],al
    3310:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    3316:	00 06                	add    BYTE PTR [esi],al
    3318:	25 00 00 00 02       	and    eax,0x2000000
    331d:	01 02                	add    DWORD PTR [edx],eax
    331f:	95                   	xchg   ebp,eax
    3320:	00 00                	add    BYTE PTR [eax],al
    3322:	00 02                	add    BYTE PTR [edx],al
    3324:	04 07                	add    al,0x7
    3326:	39 00                	cmp    DWORD PTR [eax],eax
    3328:	00 00                	add    BYTE PTR [eax],al
    332a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    332d:	e1 00                	loope  332f <sysEnter_Vector-0x12ccd1>
    332f:	00 00                	add    BYTE PTR [eax],al
    3331:	05 04 25 00 00       	add    eax,0x2504
    3336:	00 07                	add    BYTE PTR [edi],al
    3338:	ea 0a 00 00 01 3b 8f 	jmp    0x8f3b:0x100000a
    333f:	00 00                	add    BYTE PTR [eax],al
    3341:	00 38                	add    BYTE PTR [eax],bh
    3343:	25 00 9f 7d 01       	and    eax,0x17d9f00
    3348:	00 00                	add    BYTE PTR [eax],al
    334a:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    3351:	f9                   	stc    
    3352:	0a 00                	or     al,BYTE PTR [eax]
    3354:	00 01                	add    BYTE PTR [ecx],al
    3356:	3b 7d 00             	cmp    edi,DWORD PTR [ebp+0x0]
    3359:	00 00                	add    BYTE PTR [eax],al
    335b:	02 91 00 08 f2 0a    	add    dl,BYTE PTR [ecx+0xaf20800]
    3361:	00 00                	add    BYTE PTR [eax],al
    3363:	01 3b                	add    DWORD PTR [ebx],edi
    3365:	3a 01                	cmp    al,BYTE PTR [ecx]
    3367:	00 00                	add    BYTE PTR [eax],al
    3369:	02 91 04 08 2d 08    	add    dl,BYTE PTR [ecx+0x82d0804]
    336f:	00 00                	add    BYTE PTR [eax],al
    3371:	01 3b                	add    DWORD PTR [ebx],edi
    3373:	3a 00                	cmp    al,BYTE PTR [eax]
    3375:	00 00                	add    BYTE PTR [eax],al
    3377:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    337d:	01 3d 7d 00 00 00    	add    DWORD PTR ds:0x7d,edi
    3383:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3386:	61                   	popa   
    3387:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    338a:	01 3e                	add    DWORD PTR [esi],edi
    338c:	8f 00                	pop    DWORD PTR [eax]
    338e:	00 00                	add    BYTE PTR [eax],al
    3390:	01 57 09             	add    DWORD PTR [edi+0x9],edx
    3393:	63 00                	arpl   WORD PTR [eax],ax
    3395:	01 3f                	add    DWORD PTR [edi],edi
    3397:	3a 00                	cmp    al,BYTE PTR [eax]
    3399:	00 00                	add    BYTE PTR [eax],al
    339b:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    339e:	dc 0a                	fmul   QWORD PTR [edx]
    33a0:	00 00                	add    BYTE PTR [eax],al
    33a2:	01 40 8f             	add    DWORD PTR [eax-0x71],eax
    33a5:	00 00                	add    BYTE PTR [eax],al
    33a7:	00 0b                	add    BYTE PTR [ebx],cl
    33a9:	6e                   	outs   dx,BYTE PTR ds:[esi]
    33aa:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    33ae:	41                   	inc    ecx
    33af:	3a 00                	cmp    al,BYTE PTR [eax]
    33b1:	00 00                	add    BYTE PTR [eax],al
    33b3:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    33b6:	79 00                	jns    33b8 <sysEnter_Vector-0x12cc48>
    33b8:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    33bb:	00 00                	add    BYTE PTR [eax],al
    33bd:	00 01                	add    BYTE PTR [ecx],al
    33bf:	51                   	push   ecx
    33c0:	0c e3                	or     al,0xe3
    33c2:	0a 00                	or     al,BYTE PTR [eax]
    33c4:	00 01                	add    BYTE PTR [ecx],al
    33c6:	41                   	inc    ecx
    33c7:	3a 00                	cmp    al,BYTE PTR [eax]
    33c9:	00 00                	add    BYTE PTR [eax],al
    33cb:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    33ce:	05 04 9d 00 00       	add    eax,0x9d04
    33d3:	00 0d 4b 00 00 00    	add    BYTE PTR ds:0x4b,cl
    33d9:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    33dc:	00 00                	add    BYTE PTR [eax],al
    33de:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    33e4:	9f                   	lahf   
    33e5:	0d af 00 00 00       	or     eax,0xaf
    33ea:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    33f0:	05 03 a4 54 00       	add    eax,0x54a403
    33f5:	9f                   	lahf   
    33f6:	0d 5b 01 00 00       	or     eax,0x15b
    33fb:	02 36                	add    dh,BYTE PTR [esi]
    33fd:	56                   	push   esi
    33fe:	00 00                	add    BYTE PTR [eax],al
    3400:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    3406:	9f                   	lahf   
    3407:	0d 54 00 00 00       	or     eax,0x54
    340c:	02 37                	add    dh,BYTE PTR [edi]
    340e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    340f:	00 00                	add    BYTE PTR [eax],al
    3411:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    3417:	9f                   	lahf   
    3418:	0d 28 00 00 00       	or     eax,0x28
    341d:	03 4f 3a             	add    ecx,DWORD PTR [edi+0x3a]
    3420:	01 00                	add    DWORD PTR [eax],eax
    3422:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    3428:	9f                   	lahf   
    3429:	00 6c 00 00          	add    BYTE PTR [eax+eax*1+0x0],ch
    342d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3430:	0f 12 00             	movlps xmm0,QWORD PTR [eax]
    3433:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3436:	f4                   	hlt    
    3437:	00 00                	add    BYTE PTR [eax],al
    3439:	00 0c fe             	add    BYTE PTR [esi+edi*8],cl
    343c:	0a 00                	or     al,BYTE PTR [eax]
    343e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    3441:	00 00                	add    BYTE PTR [eax],al
    3443:	b8 26 00 9f 1d       	mov    eax,0x1d9f0026
    3448:	00 00                	add    BYTE PTR [eax],al
    344a:	00 54 17 00          	add    BYTE PTR [edi+edx*1+0x0],dl
    344e:	00 02                	add    BYTE PTR [edx],al
    3450:	15 0b 00 00 01       	adc    eax,0x100000b
    3455:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    3458:	00 00                	add    BYTE PTR [eax],al
    345a:	b8 26 00 9f 1d       	mov    eax,0x1d9f0026
    345f:	00 00                	add    BYTE PTR [eax],al
    3461:	00 01                	add    BYTE PTR [ecx],al
    3463:	9c                   	pushf  
    3464:	5b                   	pop    ebx
    3465:	00 00                	add    BYTE PTR [eax],al
    3467:	00 03                	add    BYTE PTR [ebx],al
    3469:	76 61                	jbe    34cc <sysEnter_Vector-0x12cb34>
    346b:	6c                   	ins    BYTE PTR es:[edi],dx
    346c:	00 01                	add    BYTE PTR [ecx],al
    346e:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    3471:	00 00                	add    BYTE PTR [eax],al
    3473:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    3479:	74 00                	je     347b <sysEnter_Vector-0x12cb85>
    347b:	01 01                	add    DWORD PTR [ecx],eax
    347d:	68 00 00 00 02       	push   0x2000000
    3482:	91                   	xchg   ecx,eax
    3483:	04 00                	add    al,0x0
    3485:	04 04                	add    al,0x4
    3487:	61                   	popa   
    3488:	00 00                	add    BYTE PTR [eax],al
    348a:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    3490:	00 00                	add    BYTE PTR [eax],al
    3492:	06                   	push   es
    3493:	04 05                	add    al,0x5
    3495:	69 6e 74 00 00 90 01 	imul   ebp,DWORD PTR [esi+0x74],0x1900000
    349c:	00 00                	add    BYTE PTR [eax],al
    349e:	04 00                	add    al,0x0
    34a0:	6d                   	ins    DWORD PTR es:[edi],dx
    34a1:	12 00                	adc    al,BYTE PTR [eax]
    34a3:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    34a6:	f4                   	hlt    
    34a7:	00 00                	add    BYTE PTR [eax],al
    34a9:	00 0c 1d 0b 00 00 72 	add    BYTE PTR [ebx*1+0x7200000b],cl
    34b0:	00 00                	add    BYTE PTR [eax],al
    34b2:	00 d8                	add    al,bl
    34b4:	26 00 9f 9c 01 00 00 	add    BYTE PTR es:[edi+0x19c],bl
    34bb:	9b                   	fwait
    34bc:	17                   	pop    ss
    34bd:	00 00                	add    BYTE PTR [eax],al
    34bf:	02 01                	add    al,BYTE PTR [ecx]
    34c1:	06                   	push   es
    34c2:	64 00 00             	add    BYTE PTR fs:[eax],al
    34c5:	00 02                	add    BYTE PTR [edx],al
    34c7:	01 06                	add    DWORD PTR [esi],eax
    34c9:	5d                   	pop    ebp
    34ca:	00 00                	add    BYTE PTR [eax],al
    34cc:	00 02                	add    BYTE PTR [edx],al
    34ce:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    34d4:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    34db:	02 08                	add    cl,BYTE PTR [eax]
    34dd:	05 00 00 00 00       	add    eax,0x0
    34e2:	02 01                	add    al,BYTE PTR [ecx]
    34e4:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    34e7:	00 00                	add    BYTE PTR [eax],al
    34e9:	02 02                	add    al,BYTE PTR [edx]
    34eb:	07                   	pop    es
    34ec:	0e                   	push   cs
    34ed:	00 00                	add    BYTE PTR [eax],al
    34ef:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    34f2:	00 00                	add    BYTE PTR [eax],al
    34f4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    34f7:	61                   	popa   
    34f8:	00 00                	add    BYTE PTR [eax],al
    34fa:	00 02                	add    BYTE PTR [edx],al
    34fc:	04 07                	add    al,0x7
    34fe:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3501:	00 02                	add    BYTE PTR [edx],al
    3503:	08 07                	or     BYTE PTR [edi],al
    3505:	34 00                	xor    al,0x0
    3507:	00 00                	add    BYTE PTR [eax],al
    3509:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3510:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3513:	9b                   	fwait
    3514:	00 00                	add    BYTE PTR [eax],al
    3516:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    351c:	00 06                	add    BYTE PTR [esi],al
    351e:	25 00 00 00 02       	and    eax,0x2000000
    3523:	01 02                	add    DWORD PTR [edx],eax
    3525:	95                   	xchg   ebp,eax
    3526:	00 00                	add    BYTE PTR [eax],al
    3528:	00 02                	add    BYTE PTR [edx],al
    352a:	04 07                	add    al,0x7
    352c:	39 00                	cmp    DWORD PTR [eax],eax
    352e:	00 00                	add    BYTE PTR [eax],al
    3530:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3533:	e1 00                	loope  3535 <sysEnter_Vector-0x12cacb>
    3535:	00 00                	add    BYTE PTR [eax],al
    3537:	05 04 25 00 00       	add    eax,0x2504
    353c:	00 07                	add    BYTE PTR [edi],al
    353e:	32 0b                	xor    cl,BYTE PTR [ebx]
    3540:	00 00                	add    BYTE PTR [eax],al
    3542:	01 57 6f             	add    DWORD PTR [edi+0x6f],edx
    3545:	00 00                	add    BYTE PTR [eax],al
    3547:	00 d8                	add    al,bl
    3549:	26 00 9f 9c 01 00 00 	add    BYTE PTR es:[edi+0x19c],bl
    3550:	01 9c 38 01 00 00 08 	add    DWORD PTR [eax+edi*1+0x8000001],ebx
    3557:	f9                   	stc    
    3558:	0a 00                	or     al,BYTE PTR [eax]
    355a:	00 01                	add    BYTE PTR [ecx],al
    355c:	57                   	push   edi
    355d:	7d 00                	jge    355f <sysEnter_Vector-0x12caa1>
    355f:	00 00                	add    BYTE PTR [eax],al
    3561:	02 91 00 08 f2 0a    	add    dl,BYTE PTR [ecx+0xaf20800]
    3567:	00 00                	add    BYTE PTR [eax],al
    3569:	01 57 38             	add    DWORD PTR [edi+0x38],edx
    356c:	01 00                	add    DWORD PTR [eax],eax
    356e:	00 02                	add    BYTE PTR [edx],al
    3570:	91                   	xchg   ecx,eax
    3571:	04 08                	add    al,0x8
    3573:	2d 08 00 00 01       	sub    eax,0x1000008
    3578:	57                   	push   edi
    3579:	3a 00                	cmp    al,BYTE PTR [eax]
    357b:	00 00                	add    BYTE PTR [eax],al
    357d:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    3583:	01 59 7d             	add    DWORD PTR [ecx+0x7d],ebx
    3586:	00 00                	add    BYTE PTR [eax],al
    3588:	00 01                	add    BYTE PTR [ecx],al
    358a:	56                   	push   esi
    358b:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    358e:	63 00                	arpl   WORD PTR [eax],ax
    3590:	01 5a 8f             	add    DWORD PTR [edx-0x71],ebx
    3593:	00 00                	add    BYTE PTR [eax],al
    3595:	00 01                	add    BYTE PTR [ecx],al
    3597:	57                   	push   edi
    3598:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    359b:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    359e:	00 00                	add    BYTE PTR [eax],al
    35a0:	00 01                	add    BYTE PTR [ecx],al
    35a2:	53                   	push   ebx
    35a3:	0a dc                	or     bl,ah
    35a5:	0a 00                	or     al,BYTE PTR [eax]
    35a7:	00 01                	add    BYTE PTR [ecx],al
    35a9:	5c                   	pop    esp
    35aa:	8f 00                	pop    DWORD PTR [eax]
    35ac:	00 00                	add    BYTE PTR [eax],al
    35ae:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    35b1:	67 00 01             	add    BYTE PTR [bx+di],al
    35b4:	5d                   	pop    ebp
    35b5:	3a 00                	cmp    al,BYTE PTR [eax]
    35b7:	00 00                	add    BYTE PTR [eax],al
    35b9:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    35bc:	79 00                	jns    35be <sysEnter_Vector-0x12ca42>
    35be:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    35c1:	00 00                	add    BYTE PTR [eax],al
    35c3:	00 01                	add    BYTE PTR [ecx],al
    35c5:	51                   	push   ecx
    35c6:	0a e3                	or     ah,bl
    35c8:	0a 00                	or     al,BYTE PTR [eax]
    35ca:	00 01                	add    BYTE PTR [ecx],al
    35cc:	5d                   	pop    ebp
    35cd:	3a 00                	cmp    al,BYTE PTR [eax]
    35cf:	00 00                	add    BYTE PTR [eax],al
    35d1:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    35d7:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    35da:	00 00                	add    BYTE PTR [eax],al
    35dc:	00 02                	add    BYTE PTR [edx],al
    35de:	34 56                	xor    al,0x56
    35e0:	00 00                	add    BYTE PTR [eax],al
    35e2:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    35e8:	9f                   	lahf   
    35e9:	0c af                	or     al,0xaf
    35eb:	00 00                	add    BYTE PTR [eax],al
    35ed:	00 02                	add    BYTE PTR [edx],al
    35ef:	35 56 00 00 00       	xor    eax,0x56
    35f4:	05 03 a4 54 00       	add    eax,0x54a403
    35f9:	9f                   	lahf   
    35fa:	0c 5b                	or     al,0x5b
    35fc:	01 00                	add    DWORD PTR [eax],eax
    35fe:	00 02                	add    BYTE PTR [edx],al
    3600:	36                   	ss
    3601:	56                   	push   esi
    3602:	00 00                	add    BYTE PTR [eax],al
    3604:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    360a:	9f                   	lahf   
    360b:	0c 54                	or     al,0x54
    360d:	00 00                	add    BYTE PTR [eax],al
    360f:	00 02                	add    BYTE PTR [edx],al
    3611:	37                   	aaa    
    3612:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3613:	00 00                	add    BYTE PTR [eax],al
    3615:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    361b:	9f                   	lahf   
    361c:	0c 28                	or     al,0x28
    361e:	00 00                	add    BYTE PTR [eax],al
    3620:	00 03                	add    BYTE PTR [ebx],al
    3622:	4f                   	dec    edi
    3623:	38 01                	cmp    BYTE PTR [ecx],al
    3625:	00 00                	add    BYTE PTR [eax],al
    3627:	05 03 a8 54 00       	add    eax,0x54a803
    362c:	9f                   	lahf   
    362d:	00 62 01             	add    BYTE PTR [edx+0x1],ah
    3630:	00 00                	add    BYTE PTR [eax],al
    3632:	04 00                	add    al,0x0
    3634:	19 13                	sbb    DWORD PTR [ebx],edx
    3636:	00 00                	add    BYTE PTR [eax],al
    3638:	04 01                	add    al,0x1
    363a:	f4                   	hlt    
    363b:	00 00                	add    BYTE PTR [eax],al
    363d:	00 0c 3f             	add    BYTE PTR [edi+edi*1],cl
    3640:	0b 00                	or     eax,DWORD PTR [eax]
    3642:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    3645:	00 00                	add    BYTE PTR [eax],al
    3647:	74 28                	je     3671 <sysEnter_Vector-0x12c98f>
    3649:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
    364f:	14 19                	adc    al,0x19
    3651:	00 00                	add    BYTE PTR [eax],al
    3653:	02 01                	add    al,BYTE PTR [ecx]
    3655:	06                   	push   es
    3656:	64 00 00             	add    BYTE PTR fs:[eax],al
    3659:	00 02                	add    BYTE PTR [edx],al
    365b:	01 06                	add    DWORD PTR [esi],eax
    365d:	5d                   	pop    ebp
    365e:	00 00                	add    BYTE PTR [eax],al
    3660:	00 02                	add    BYTE PTR [edx],al
    3662:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    3668:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    366f:	02 08                	add    cl,BYTE PTR [eax]
    3671:	05 00 00 00 00       	add    eax,0x0
    3676:	02 01                	add    al,BYTE PTR [ecx]
    3678:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    367b:	00 00                	add    BYTE PTR [eax],al
    367d:	02 02                	add    al,BYTE PTR [edx]
    367f:	07                   	pop    es
    3680:	0e                   	push   cs
    3681:	00 00                	add    BYTE PTR [eax],al
    3683:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    3686:	00 00                	add    BYTE PTR [eax],al
    3688:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    368b:	61                   	popa   
    368c:	00 00                	add    BYTE PTR [eax],al
    368e:	00 02                	add    BYTE PTR [edx],al
    3690:	04 07                	add    al,0x7
    3692:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3695:	00 02                	add    BYTE PTR [edx],al
    3697:	08 07                	or     BYTE PTR [edi],al
    3699:	34 00                	xor    al,0x0
    369b:	00 00                	add    BYTE PTR [eax],al
    369d:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    36a4:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    36a7:	9b                   	fwait
    36a8:	00 00                	add    BYTE PTR [eax],al
    36aa:	00 02                	add    BYTE PTR [edx],al
    36ac:	01 02                	add    DWORD PTR [edx],eax
    36ae:	95                   	xchg   ebp,eax
    36af:	00 00                	add    BYTE PTR [eax],al
    36b1:	00 02                	add    BYTE PTR [edx],al
    36b3:	04 07                	add    al,0x7
    36b5:	39 00                	cmp    DWORD PTR [eax],eax
    36b7:	00 00                	add    BYTE PTR [eax],al
    36b9:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    36bc:	e1 00                	loope  36be <sysEnter_Vector-0x12c942>
    36be:	00 00                	add    BYTE PTR [eax],al
    36c0:	05 04 25 00 00       	add    eax,0x2504
    36c5:	00 06                	add    BYTE PTR [esi],al
    36c7:	5d                   	pop    ebp
    36c8:	0b 00                	or     eax,DWORD PTR [eax]
    36ca:	00 01                	add    BYTE PTR [ecx],al
    36cc:	03 74 28 00          	add    esi,DWORD PTR [eax+ebp*1+0x0]
    36d0:	9f                   	lahf   
    36d1:	96                   	xchg   esi,eax
    36d2:	00 00                	add    BYTE PTR [eax],al
    36d4:	00 01                	add    BYTE PTR [ecx],al
    36d6:	9c                   	pushf  
    36d7:	e6 00                	out    0x0,al
    36d9:	00 00                	add    BYTE PTR [eax],al
    36db:	07                   	pop    es
    36dc:	39 0b                	cmp    DWORD PTR [ebx],ecx
    36de:	00 00                	add    BYTE PTR [eax],al
    36e0:	01 03                	add    DWORD PTR [ebx],eax
    36e2:	92                   	xchg   edx,eax
    36e3:	00 00                	add    BYTE PTR [eax],al
    36e5:	00 02                	add    BYTE PTR [edx],al
    36e7:	91                   	xchg   ecx,eax
    36e8:	00 08                	add    BYTE PTR [eax],cl
    36ea:	64                   	fs
    36eb:	73 74                	jae    3761 <sysEnter_Vector-0x12c89f>
    36ed:	00 01                	add    BYTE PTR [ecx],al
    36ef:	05 92 00 00 00       	add    eax,0x92
    36f4:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    36fa:	63 00                	arpl   WORD PTR [eax],ax
    36fc:	01 05 92 00 00 00    	add    DWORD PTR ds:0x92,eax
    3702:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    3708:	64 00 01             	add    BYTE PTR fs:[ecx],al
    370b:	06                   	push   es
    370c:	92                   	xchg   edx,eax
    370d:	00 00                	add    BYTE PTR [eax],al
    370f:	00 02                	add    BYTE PTR [edx],al
    3711:	91                   	xchg   ecx,eax
    3712:	64 00 06             	add    BYTE PTR fs:[esi],al
    3715:	55                   	push   ebp
    3716:	0b 00                	or     eax,DWORD PTR [eax]
    3718:	00 01                	add    BYTE PTR [ecx],al
    371a:	1f                   	pop    ds
    371b:	0a 29                	or     ch,BYTE PTR [ecx]
    371d:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    3723:	01 9c 0a 01 00 00 07 	add    DWORD PTR [edx+ecx*1+0x7000001],ebx
    372a:	39 0b                	cmp    DWORD PTR [ebx],ecx
    372c:	00 00                	add    BYTE PTR [eax],al
    372e:	01 1f                	add    DWORD PTR [edi],ebx
    3730:	92                   	xchg   edx,eax
    3731:	00 00                	add    BYTE PTR [eax],al
    3733:	00 02                	add    BYTE PTR [edx],al
    3735:	91                   	xchg   ecx,eax
    3736:	00 00                	add    BYTE PTR [eax],al
    3738:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
    373b:	00 00                	add    BYTE PTR [eax],al
    373d:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    3740:	00 00                	add    BYTE PTR [eax],al
    3742:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    3748:	9f                   	lahf   
    3749:	09 af 00 00 00 02    	or     DWORD PTR [edi+0x2000000],ebp
    374f:	35 56 00 00 00       	xor    eax,0x56
    3754:	05 03 a4 54 00       	add    eax,0x54a403
    3759:	9f                   	lahf   
    375a:	09 5b 01             	or     DWORD PTR [ebx+0x1],ebx
    375d:	00 00                	add    BYTE PTR [eax],al
    375f:	02 36                	add    dh,BYTE PTR [esi]
    3761:	56                   	push   esi
    3762:	00 00                	add    BYTE PTR [eax],al
    3764:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    376a:	9f                   	lahf   
    376b:	09 54 00 00          	or     DWORD PTR [eax+eax*1+0x0],edx
    376f:	00 02                	add    BYTE PTR [edx],al
    3771:	37                   	aaa    
    3772:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3773:	00 00                	add    BYTE PTR [eax],al
    3775:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    377b:	9f                   	lahf   
    377c:	09 28                	or     DWORD PTR [eax],ebp
    377e:	00 00                	add    BYTE PTR [eax],al
    3780:	00 03                	add    BYTE PTR [ebx],al
    3782:	4f                   	dec    edi
    3783:	5f                   	pop    edi
    3784:	01 00                	add    DWORD PTR [eax],eax
    3786:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    378c:	9f                   	lahf   
    378d:	05 04 92 00 00       	add    eax,0x9204
    3792:	00 00                	add    BYTE PTR [eax],al
    3794:	93                   	xchg   ebx,eax
    3795:	01 00                	add    DWORD PTR [eax],eax
    3797:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    379a:	a2 13 00 00 04       	mov    ds:0x4000013,al
    379f:	01 f4                	add    esp,esi
    37a1:	00 00                	add    BYTE PTR [eax],al
    37a3:	00 0c 6e             	add    BYTE PTR [esi+ebp*2],cl
    37a6:	0b 00                	or     eax,DWORD PTR [eax]
    37a8:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    37ab:	00 00                	add    BYTE PTR [eax],al
    37ad:	2c 29                	sub    al,0x29
    37af:	00 9f 8b 00 00 00    	add    BYTE PTR [edi+0x8b],bl
    37b5:	e7 19                	out    0x19,eax
    37b7:	00 00                	add    BYTE PTR [eax],al
    37b9:	02 01                	add    al,BYTE PTR [ecx]
    37bb:	06                   	push   es
    37bc:	64 00 00             	add    BYTE PTR fs:[eax],al
    37bf:	00 02                	add    BYTE PTR [edx],al
    37c1:	01 06                	add    DWORD PTR [esi],eax
    37c3:	5d                   	pop    ebp
    37c4:	00 00                	add    BYTE PTR [eax],al
    37c6:	00 02                	add    BYTE PTR [edx],al
    37c8:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    37ce:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    37d5:	02 08                	add    cl,BYTE PTR [eax]
    37d7:	05 00 00 00 00       	add    eax,0x0
    37dc:	02 01                	add    al,BYTE PTR [ecx]
    37de:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    37e1:	00 00                	add    BYTE PTR [eax],al
    37e3:	02 02                	add    al,BYTE PTR [edx]
    37e5:	07                   	pop    es
    37e6:	0e                   	push   cs
    37e7:	00 00                	add    BYTE PTR [eax],al
    37e9:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    37ec:	00 00                	add    BYTE PTR [eax],al
    37ee:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    37f1:	61                   	popa   
    37f2:	00 00                	add    BYTE PTR [eax],al
    37f4:	00 02                	add    BYTE PTR [edx],al
    37f6:	04 07                	add    al,0x7
    37f8:	3e 00 00             	add    BYTE PTR ds:[eax],al
    37fb:	00 02                	add    BYTE PTR [edx],al
    37fd:	08 07                	or     BYTE PTR [edi],al
    37ff:	34 00                	xor    al,0x0
    3801:	00 00                	add    BYTE PTR [eax],al
    3803:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    380a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    380d:	9b                   	fwait
    380e:	00 00                	add    BYTE PTR [eax],al
    3810:	00 02                	add    BYTE PTR [edx],al
    3812:	01 02                	add    DWORD PTR [edx],eax
    3814:	95                   	xchg   ebp,eax
    3815:	00 00                	add    BYTE PTR [eax],al
    3817:	00 02                	add    BYTE PTR [edx],al
    3819:	04 07                	add    al,0x7
    381b:	39 00                	cmp    DWORD PTR [eax],eax
    381d:	00 00                	add    BYTE PTR [eax],al
    381f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3822:	e1 00                	loope  3824 <sysEnter_Vector-0x12c7dc>
    3824:	00 00                	add    BYTE PTR [eax],al
    3826:	05 04 25 00 00       	add    eax,0x2504
    382b:	00 06                	add    BYTE PTR [esi],al
    382d:	66 0b 00             	or     ax,WORD PTR [eax]
    3830:	00 01                	add    BYTE PTR [ecx],al
    3832:	33 92 00 00 00 2c    	xor    edx,DWORD PTR [edx+0x2c000000]
    3838:	29 00                	sub    DWORD PTR [eax],eax
    383a:	9f                   	lahf   
    383b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    383c:	00 00                	add    BYTE PTR [eax],al
    383e:	00 01                	add    BYTE PTR [ecx],al
    3840:	9c                   	pushf  
    3841:	e4 00                	in     al,0x0
    3843:	00 00                	add    BYTE PTR [eax],al
    3845:	07                   	pop    es
    3846:	8b 0b                	mov    ecx,DWORD PTR [ebx]
    3848:	00 00                	add    BYTE PTR [eax],al
    384a:	01 33                	add    DWORD PTR [ebx],esi
    384c:	92                   	xchg   edx,eax
    384d:	00 00                	add    BYTE PTR [eax],al
    384f:	00 02                	add    BYTE PTR [edx],al
    3851:	91                   	xchg   ecx,eax
    3852:	00 07                	add    BYTE PTR [edi],al
    3854:	88 0b                	mov    BYTE PTR [ebx],cl
    3856:	00 00                	add    BYTE PTR [eax],al
    3858:	01 33                	add    DWORD PTR [ebx],esi
    385a:	92                   	xchg   edx,eax
    385b:	00 00                	add    BYTE PTR [eax],al
    385d:	00 02                	add    BYTE PTR [edx],al
    385f:	91                   	xchg   ecx,eax
    3860:	04 08                	add    al,0x8
    3862:	61                   	popa   
    3863:	00 01                	add    BYTE PTR [ecx],al
    3865:	35 92 00 00 00       	xor    eax,0x92
    386a:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    386d:	62 00                	bound  eax,QWORD PTR [eax]
    386f:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
    3875:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    3878:	09 7b 0b             	or     DWORD PTR [ebx+0xb],edi
    387b:	00 00                	add    BYTE PTR [eax],al
    387d:	01 52 92             	add    DWORD PTR [edx-0x6e],edx
    3880:	00 00                	add    BYTE PTR [eax],al
    3882:	00 9a 29 00 9f 1d    	add    BYTE PTR [edx+0x1d9f0029],bl
    3888:	00 00                	add    BYTE PTR [eax],al
    388a:	00 01                	add    BYTE PTR [ecx],al
    388c:	9c                   	pushf  
    388d:	1a 01                	sbb    al,BYTE PTR [ecx]
    388f:	00 00                	add    BYTE PTR [eax],al
    3891:	07                   	pop    es
    3892:	8b 0b                	mov    ecx,DWORD PTR [ebx]
    3894:	00 00                	add    BYTE PTR [eax],al
    3896:	01 52 92             	add    DWORD PTR [edx-0x6e],edx
    3899:	00 00                	add    BYTE PTR [eax],al
    389b:	00 02                	add    BYTE PTR [edx],al
    389d:	91                   	xchg   ecx,eax
    389e:	00 07                	add    BYTE PTR [edi],al
    38a0:	88 0b                	mov    BYTE PTR [ebx],cl
    38a2:	00 00                	add    BYTE PTR [eax],al
    38a4:	01 52 92             	add    DWORD PTR [edx-0x6e],edx
    38a7:	00 00                	add    BYTE PTR [eax],al
    38a9:	00 02                	add    BYTE PTR [edx],al
    38ab:	91                   	xchg   ecx,eax
    38ac:	04 00                	add    al,0x0
    38ae:	0a 25 00 00 00 2a    	or     ah,BYTE PTR ds:0x2a000000
    38b4:	01 00                	add    DWORD PTR [eax],eax
    38b6:	00 0b                	add    BYTE PTR [ebx],cl
    38b8:	8b 00                	mov    eax,DWORD PTR [eax]
    38ba:	00 00                	add    BYTE PTR [eax],al
    38bc:	65 00 0c 82          	add    BYTE PTR gs:[edx+eax*4],cl
    38c0:	0b 00                	or     eax,DWORD PTR [eax]
    38c2:	00 01                	add    BYTE PTR [ecx],al
    38c4:	19 1a                	sbb    DWORD PTR [edx],ebx
    38c6:	01 00                	add    DWORD PTR [eax],eax
    38c8:	00 05 03 40 53 00    	add    BYTE PTR ds:0x534003,al
    38ce:	9f                   	lahf   
    38cf:	0d 4b 00 00 00       	or     eax,0x4b
    38d4:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    38d7:	00 00                	add    BYTE PTR [eax],al
    38d9:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    38df:	9f                   	lahf   
    38e0:	0d af 00 00 00       	or     eax,0xaf
    38e5:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    38eb:	05 03 a4 54 00       	add    eax,0x54a403
    38f0:	9f                   	lahf   
    38f1:	0d 5b 01 00 00       	or     eax,0x15b
    38f6:	02 36                	add    dh,BYTE PTR [esi]
    38f8:	56                   	push   esi
    38f9:	00 00                	add    BYTE PTR [eax],al
    38fb:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    3901:	9f                   	lahf   
    3902:	0d 54 00 00 00       	or     eax,0x54
    3907:	02 37                	add    dh,BYTE PTR [edi]
    3909:	6f                   	outs   dx,DWORD PTR ds:[esi]
    390a:	00 00                	add    BYTE PTR [eax],al
    390c:	00 05 03 ac 54 00    	add    BYTE PTR ds:0x54ac03,al
    3912:	9f                   	lahf   
    3913:	0d 28 00 00 00       	or     eax,0x28
    3918:	03 4f 90             	add    ecx,DWORD PTR [edi-0x70]
    391b:	01 00                	add    DWORD PTR [eax],eax
    391d:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    3923:	9f                   	lahf   
    3924:	05 04 92 00 00       	add    eax,0x9204
    3929:	00 00                	add    BYTE PTR [eax],al
    392b:	4b                   	dec    ebx
    392c:	05 00 00 04 00       	add    eax,0x40000
    3931:	6a 14                	push   0x14
    3933:	00 00                	add    BYTE PTR [eax],al
    3935:	04 01                	add    al,0x1
    3937:	f4                   	hlt    
    3938:	00 00                	add    BYTE PTR [eax],al
    393a:	00 0c 92             	add    BYTE PTR [edx+edx*4],cl
    393d:	0b 00                	or     eax,DWORD PTR [eax]
    393f:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    3942:	00 00                	add    BYTE PTR [eax],al
    3944:	b8 29 00 9f cf       	mov    eax,0xcf9f0029
    3949:	0c 00                	or     al,0x0
    394b:	00 b2 1a 00 00 02    	add    BYTE PTR [edx+0x200001a],dh
    3951:	12 03                	adc    al,BYTE PTR [ebx]
    3953:	00 00                	add    BYTE PTR [eax],al
    3955:	04 e7                	add    al,0xe7
    3957:	00 00                	add    BYTE PTR [eax],al
    3959:	00 06                	add    BYTE PTR [esi],al
    395b:	15 e7 00 00 00       	adc    eax,0xe7
    3960:	03 77 03             	add    esi,DWORD PTR [edi+0x3]
    3963:	00 00                	add    BYTE PTR [eax],al
    3965:	00 03                	add    BYTE PTR [ebx],al
    3967:	af                   	scas   eax,DWORD PTR es:[edi]
    3968:	03 00                	add    eax,DWORD PTR [eax]
    396a:	00 01                	add    BYTE PTR [ecx],al
    396c:	03 6e 02             	add    ebp,DWORD PTR [esi+0x2]
    396f:	00 00                	add    BYTE PTR [eax],al
    3971:	02 03                	add    al,BYTE PTR [ebx]
    3973:	04 03                	add    al,0x3
    3975:	00 00                	add    BYTE PTR [eax],al
    3977:	03 03                	add    eax,DWORD PTR [ebx]
    3979:	4e                   	dec    esi
    397a:	02 00                	add    al,BYTE PTR [eax]
    397c:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    397f:	c9                   	leave  
    3980:	03 00                	add    eax,DWORD PTR [eax]
    3982:	00 05 03 28 03 00    	add    BYTE PTR ds:0x32803,al
    3988:	00 06                	add    BYTE PTR [esi],al
    398a:	03 61 02             	add    esp,DWORD PTR [ecx+0x2]
    398d:	00 00                	add    BYTE PTR [eax],al
    398f:	07                   	pop    es
    3990:	03 fa                	add    edi,edx
    3992:	03 00                	add    eax,DWORD PTR [eax]
    3994:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    3997:	6a 03                	push   0x3
    3999:	00 00                	add    BYTE PTR [eax],al
    399b:	59                   	pop    ecx
    399c:	03 09                	add    ecx,DWORD PTR [ecx]
    399e:	04 00                	add    al,0x0
    39a0:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    39a3:	f0 02 00             	lock add al,BYTE PTR [eax]
    39a6:	00 97 04 87 03 00    	add    BYTE PTR [edi+0x38704],dl
    39ac:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    39af:	04 5d                	add    al,0x5d
    39b1:	03 00                	add    eax,DWORD PTR [eax]
    39b3:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    39b7:	ec                   	in     al,dx
    39b8:	03 00                	add    eax,DWORD PTR [eax]
    39ba:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
    39bd:	04 d2                	add    al,0xd2
    39bf:	02 00                	add    al,BYTE PTR [eax]
    39c1:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    39c4:	04 21                	add    al,0x21
    39c6:	04 00                	add    al,0x0
    39c8:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    39cb:	04 35                	add    al,0x35
    39cd:	03 00                	add    eax,DWORD PTR [eax]
    39cf:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    39d2:	04 a7                	add    al,0xa7
    39d4:	02 00                	add    al,BYTE PTR [eax]
    39d6:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    39d9:	04 9e                	add    al,0x9e
    39db:	03 00                	add    eax,DWORD PTR [eax]
    39dd:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    39e0:	04 e0                	add    al,0xe0
    39e2:	02 00                	add    al,BYTE PTR [eax]
    39e4:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    39e7:	04 d7                	add    al,0xd7
    39e9:	03 00                	add    eax,DWORD PTR [eax]
    39eb:	00 00                	add    BYTE PTR [eax],al
    39ed:	03 04 42             	add    eax,DWORD PTR [edx+eax*2]
    39f0:	03 00                	add    eax,DWORD PTR [eax]
    39f2:	00 01                	add    BYTE PTR [ecx],al
    39f4:	03 04 b6             	add    eax,DWORD PTR [esi+esi*4]
    39f7:	02 00                	add    al,BYTE PTR [eax]
    39f9:	00 02                	add    BYTE PTR [edx],al
    39fb:	03 04 7b             	add    eax,DWORD PTR [ebx+edi*2]
    39fe:	02 00                	add    al,BYTE PTR [eax]
    3a00:	00 03                	add    BYTE PTR [ebx],al
    3a02:	03 04 8b             	add    eax,DWORD PTR [ebx+ecx*4]
    3a05:	02 00                	add    al,BYTE PTR [eax]
    3a07:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    3a0a:	04 c2                	add    al,0xc2
    3a0c:	02 00                	add    al,BYTE PTR [eax]
    3a0e:	00 05 03 00 05 04    	add    BYTE PTR ds:0x4050003,al
    3a14:	07                   	pop    es
    3a15:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3a18:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    3a1e:	00 00                	add    BYTE PTR [eax],al
    3a20:	05 01 06 5d 00       	add    eax,0x5d0601
    3a25:	00 00                	add    BYTE PTR [eax],al
    3a27:	05 02 05 ea 00       	add    eax,0xea0502
    3a2c:	00 00                	add    BYTE PTR [eax],al
    3a2e:	06                   	push   es
    3a2f:	04 05                	add    al,0x5
    3a31:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    3a38:	00 00                	add    BYTE PTR [eax],al
    3a3a:	00 00                	add    BYTE PTR [eax],al
    3a3c:	05 01 08 5b 00       	add    eax,0x5b0801
    3a41:	00 00                	add    BYTE PTR [eax],al
    3a43:	05 02 07 0e 00       	add    eax,0xe0702
    3a48:	00 00                	add    BYTE PTR [eax],al
    3a4a:	07                   	pop    es
    3a4b:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    3a51:	e7 00                	out    0x0,eax
    3a53:	00 00                	add    BYTE PTR [eax],al
    3a55:	05 08 07 34 00       	add    eax,0x340708
    3a5a:	00 00                	add    BYTE PTR [eax],al
    3a5c:	05 04 05 05 00       	add    eax,0x50504
    3a61:	00 00                	add    BYTE PTR [eax],al
    3a63:	05 0c 04 9b 00       	add    eax,0x9b040c
    3a68:	00 00                	add    BYTE PTR [eax],al
    3a6a:	07                   	pop    es
    3a6b:	34 0c                	xor    al,0xc
    3a6d:	00 00                	add    BYTE PTR [eax],al
    3a6f:	03 2a                	add    ebp,DWORD PTR [edx]
    3a71:	31 01                	xor    DWORD PTR [ecx],eax
    3a73:	00 00                	add    BYTE PTR [eax],al
    3a75:	08 74 6d 00          	or     BYTE PTR [ebp+ebp*2+0x0],dh
    3a79:	2c 03                	sub    al,0x3
    3a7b:	2c da                	sub    al,0xda
    3a7d:	01 00                	add    DWORD PTR [eax],eax
    3a7f:	00 09                	add    BYTE PTR [ecx],cl
    3a81:	77 0c                	ja     3a8f <sysEnter_Vector-0x12c571>
    3a83:	00 00                	add    BYTE PTR [eax],al
    3a85:	03 2e                	add    ebp,DWORD PTR [esi]
    3a87:	03 01                	add    eax,DWORD PTR [ecx]
    3a89:	00 00                	add    BYTE PTR [eax],al
    3a8b:	00 09                	add    BYTE PTR [ecx],cl
    3a8d:	15 0c 00 00 03       	adc    eax,0x300000c
    3a92:	2f                   	das    
    3a93:	03 01                	add    eax,DWORD PTR [ecx]
    3a95:	00 00                	add    BYTE PTR [eax],al
    3a97:	04 09                	add    al,0x9
    3a99:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    3a9a:	0b 00                	or     eax,DWORD PTR [eax]
    3a9c:	00 03                	add    BYTE PTR [ebx],al
    3a9e:	30 03                	xor    BYTE PTR [ebx],al
    3aa0:	01 00                	add    DWORD PTR [eax],eax
    3aa2:	00 08                	add    BYTE PTR [eax],cl
    3aa4:	09 6f 0c             	or     DWORD PTR [edi+0xc],ebp
    3aa7:	00 00                	add    BYTE PTR [eax],al
    3aa9:	03 31                	add    esi,DWORD PTR [ecx]
    3aab:	03 01                	add    eax,DWORD PTR [ecx]
    3aad:	00 00                	add    BYTE PTR [eax],al
    3aaf:	0c 09                	or     al,0x9
    3ab1:	df 0b                	fisttp WORD PTR [ebx]
    3ab3:	00 00                	add    BYTE PTR [eax],al
    3ab5:	03 32                	add    esi,DWORD PTR [edx]
    3ab7:	03 01                	add    eax,DWORD PTR [ecx]
    3ab9:	00 00                	add    BYTE PTR [eax],al
    3abb:	10 09                	adc    BYTE PTR [ecx],cl
    3abd:	e6 0b                	out    0xb,al
    3abf:	00 00                	add    BYTE PTR [eax],al
    3ac1:	03 33                	add    esi,DWORD PTR [ebx]
    3ac3:	03 01                	add    eax,DWORD PTR [ecx]
    3ac5:	00 00                	add    BYTE PTR [eax],al
    3ac7:	14 09                	adc    al,0x9
    3ac9:	61                   	popa   
    3aca:	0c 00                	or     al,0x0
    3acc:	00 03                	add    BYTE PTR [ebx],al
    3ace:	34 03                	xor    al,0x3
    3ad0:	01 00                	add    DWORD PTR [eax],eax
    3ad2:	00 18                	add    BYTE PTR [eax],bl
    3ad4:	09 1c 0c             	or     DWORD PTR [esp+ecx*1],ebx
    3ad7:	00 00                	add    BYTE PTR [eax],al
    3ad9:	03 35 03 01 00 00    	add    esi,DWORD PTR ds:0x103
    3adf:	1c 09                	sbb    al,0x9
    3ae1:	fc                   	cld    
    3ae2:	0b 00                	or     eax,DWORD PTR [eax]
    3ae4:	00 03                	add    BYTE PTR [ebx],al
    3ae6:	36 03 01             	add    eax,DWORD PTR ss:[ecx]
    3ae9:	00 00                	add    BYTE PTR [eax],al
    3aeb:	20 09                	and    BYTE PTR [ecx],cl
    3aed:	57                   	push   edi
    3aee:	0c 00                	or     al,0x0
    3af0:	00 03                	add    BYTE PTR [ebx],al
    3af2:	37                   	aaa    
    3af3:	31 01                	xor    DWORD PTR [ecx],eax
    3af5:	00 00                	add    BYTE PTR [eax],al
    3af7:	24 09                	and    al,0x9
    3af9:	7e 0c                	jle    3b07 <sysEnter_Vector-0x12c4f9>
    3afb:	00 00                	add    BYTE PTR [eax],al
    3afd:	03 38                	add    edi,DWORD PTR [eax]
    3aff:	da 01                	fiadd  DWORD PTR [ecx]
    3b01:	00 00                	add    BYTE PTR [eax],al
    3b03:	28 00                	sub    BYTE PTR [eax],al
    3b05:	0a 04 e0             	or     al,BYTE PTR [eax+eiz*8]
    3b08:	01 00                	add    DWORD PTR [eax],eax
    3b0a:	00 0b                	add    BYTE PTR [ebx],cl
    3b0c:	ee                   	out    dx,al
    3b0d:	00 00                	add    BYTE PTR [eax],al
    3b0f:	00 05 01 02 95 00    	add    BYTE PTR ds:0x950201,al
    3b15:	00 00                	add    BYTE PTR [eax],al
    3b17:	05 04 07 39 00       	add    eax,0x390704
    3b1c:	00 00                	add    BYTE PTR [eax],al
    3b1e:	05 04 07 e1 00       	add    eax,0xe10704
    3b23:	00 00                	add    BYTE PTR [eax],al
    3b25:	0a 04 ee             	or     al,BYTE PTR [esi+ebp*8]
    3b28:	00 00                	add    BYTE PTR [eax],al
    3b2a:	00 0c af             	add    BYTE PTR [edi+ebp*4],cl
    3b2d:	0b 00                	or     eax,DWORD PTR [eax]
    3b2f:	00 01                	add    BYTE PTR [ecx],al
    3b31:	16                   	push   ss
    3b32:	3f                   	aas    
    3b33:	01 00                	add    DWORD PTR [eax],eax
    3b35:	00 b8 29 00 9f 44    	add    BYTE PTR [eax+0x449f0029],bh
    3b3b:	00 00                	add    BYTE PTR [eax],al
    3b3d:	00 01                	add    BYTE PTR [ecx],al
    3b3f:	9c                   	pushf  
    3b40:	28 02                	sub    BYTE PTR [edx],al
    3b42:	00 00                	add    BYTE PTR [eax],al
    3b44:	0d 83 04 00 00       	or     eax,0x483
    3b49:	01 18                	add    DWORD PTR [eax],ebx
    3b4b:	1f                   	pop    ds
    3b4c:	01 00                	add    DWORD PTR [eax],eax
    3b4e:	00 02                	add    BYTE PTR [edx],al
    3b50:	91                   	xchg   ecx,eax
    3b51:	6c                   	ins    BYTE PTR es:[edi],dx
    3b52:	00 0e                	add    BYTE PTR [esi],cl
    3b54:	0b 0c 00             	or     ecx,DWORD PTR [eax+eax*1]
    3b57:	00 01                	add    BYTE PTR [ecx],al
    3b59:	1e                   	push   ds
    3b5a:	96                   	xchg   esi,eax
    3b5b:	02 00                	add    al,BYTE PTR [eax]
    3b5d:	00 fc                	add    ah,bh
    3b5f:	29 00                	sub    DWORD PTR [eax],eax
    3b61:	9f                   	lahf   
    3b62:	19 03                	sbb    DWORD PTR [ebx],eax
    3b64:	00 00                	add    BYTE PTR [eax],al
    3b66:	01 9c 96 02 00 00 0f 	add    DWORD PTR [esi+edx*4+0xf000002],ebx
    3b6d:	86 0c 00             	xchg   BYTE PTR [eax+eax*1],cl
    3b70:	00 01                	add    BYTE PTR [ecx],al
    3b72:	1e                   	push   ds
    3b73:	9c                   	pushf  
    3b74:	02 00                	add    al,BYTE PTR [eax]
    3b76:	00 02                	add    BYTE PTR [edx],al
    3b78:	91                   	xchg   ecx,eax
    3b79:	00 0f                	add    BYTE PTR [edi],cl
    3b7b:	2e                   	cs
    3b7c:	0c 00                	or     al,0x0
    3b7e:	00 01                	add    BYTE PTR [ecx],al
    3b80:	1e                   	push   ds
    3b81:	96                   	xchg   esi,eax
    3b82:	02 00                	add    al,BYTE PTR [eax]
    3b84:	00 02                	add    BYTE PTR [edx],al
    3b86:	91                   	xchg   ecx,eax
    3b87:	04 0d                	add    al,0xd
    3b89:	52                   	push   edx
    3b8a:	0c 00                	or     al,0x0
    3b8c:	00 01                	add    BYTE PTR [ecx],al
    3b8e:	20 3f                	and    BYTE PTR [edi],bh
    3b90:	01 00                	add    DWORD PTR [eax],eax
    3b92:	00 02                	add    BYTE PTR [edx],al
    3b94:	91                   	xchg   ecx,eax
    3b95:	68 0d 47 0c 00       	push   0xc470d
    3b9a:	00 01                	add    BYTE PTR [ecx],al
    3b9c:	21 ec                	and    esp,ebp
    3b9e:	01 00                	add    DWORD PTR [eax],eax
    3ba0:	00 02                	add    BYTE PTR [edx],al
    3ba2:	91                   	xchg   ecx,eax
    3ba3:	64                   	fs
    3ba4:	0d 05 0c 00 00       	or     eax,0xc05
    3ba9:	01 21                	add    DWORD PTR [ecx],esp
    3bab:	ec                   	in     al,dx
    3bac:	01 00                	add    DWORD PTR [eax],eax
    3bae:	00 02                	add    BYTE PTR [edx],al
    3bb0:	91                   	xchg   ecx,eax
    3bb1:	70 0d                	jo     3bc0 <sysEnter_Vector-0x12c440>
    3bb3:	e9 0b 00 00 01       	jmp    1003bc3 <sysEnter_Vector+0xed3bc3>
    3bb8:	22 03                	and    al,BYTE PTR [ebx]
    3bba:	01 00                	add    DWORD PTR [eax],eax
    3bbc:	00 02                	add    BYTE PTR [edx],al
    3bbe:	91                   	xchg   ecx,eax
    3bbf:	6c                   	ins    BYTE PTR es:[edi],dx
    3bc0:	00 0a                	add    BYTE PTR [edx],cl
    3bc2:	04 4a                	add    al,0x4a
    3bc4:	01 00                	add    DWORD PTR [eax],eax
    3bc6:	00 0a                	add    BYTE PTR [edx],cl
    3bc8:	04 a2                	add    al,0xa2
    3bca:	02 00                	add    al,BYTE PTR [eax]
    3bcc:	00 0b                	add    BYTE PTR [ebx],cl
    3bce:	3f                   	aas    
    3bcf:	01 00                	add    DWORD PTR [eax],eax
    3bd1:	00 10                	add    BYTE PTR [eax],dl
    3bd3:	ca 0b 00             	retf   0xb
    3bd6:	00 01                	add    BYTE PTR [ecx],al
    3bd8:	3b 96 02 00 00 15    	cmp    edx,DWORD PTR [esi+0x15000002]
    3bde:	2d 00 9f 1d 00       	sub    eax,0x1d9f00
    3be3:	00 00                	add    BYTE PTR [eax],al
    3be5:	01 9c dd 02 00 00 0f 	add    DWORD PTR [ebp+ebx*8+0xf000002],ebx
    3bec:	86 0c 00             	xchg   BYTE PTR [eax+eax*1],cl
    3bef:	00 01                	add    BYTE PTR [ecx],al
    3bf1:	3b 9c 02 00 00 02 91 	cmp    ebx,DWORD PTR [edx+eax*1-0x6efe0000]
    3bf8:	00 0f                	add    BYTE PTR [edi],cl
    3bfa:	2e                   	cs
    3bfb:	0c 00                	or     al,0x0
    3bfd:	00 01                	add    BYTE PTR [ecx],al
    3bff:	3b 96 02 00 00 02    	cmp    edx,DWORD PTR [esi+0x2000002]
    3c05:	91                   	xchg   ecx,eax
    3c06:	04 00                	add    al,0x0
    3c08:	10 9d 0b 00 00 01    	adc    BYTE PTR [ebp+0x100000b],bl
    3c0e:	40                   	inc    eax
    3c0f:	96                   	xchg   esi,eax
    3c10:	02 00                	add    al,BYTE PTR [eax]
    3c12:	00 32                	add    BYTE PTR [edx],dh
    3c14:	2d 00 9f 3f 00       	sub    eax,0x3f9f00
    3c19:	00 00                	add    BYTE PTR [eax],al
    3c1b:	01 9c 1f 03 00 00 0f 	add    DWORD PTR [edi+ebx*1+0xf000003],ebx
    3c22:	86 0c 00             	xchg   BYTE PTR [eax+eax*1],cl
    3c25:	00 01                	add    BYTE PTR [ecx],al
    3c27:	40                   	inc    eax
    3c28:	9c                   	pushf  
    3c29:	02 00                	add    al,BYTE PTR [eax]
    3c2b:	00 02                	add    BYTE PTR [edx],al
    3c2d:	91                   	xchg   ecx,eax
    3c2e:	00 11                	add    BYTE PTR [ecx],dl
    3c30:	74 00                	je     3c32 <sysEnter_Vector-0x12c3ce>
    3c32:	01 41 3f             	add    DWORD PTR [ecx+0x3f],eax
    3c35:	01 00                	add    DWORD PTR [eax],eax
    3c37:	00 02                	add    BYTE PTR [edx],al
    3c39:	91                   	xchg   ecx,eax
    3c3a:	6c                   	ins    BYTE PTR es:[edi],dx
    3c3b:	0d 2e 0c 00 00       	or     eax,0xc2e
    3c40:	01 42 4a             	add    DWORD PTR [edx+0x4a],eax
    3c43:	01 00                	add    DWORD PTR [eax],eax
    3c45:	00 02                	add    BYTE PTR [edx],al
    3c47:	91                   	xchg   ecx,eax
    3c48:	40                   	inc    eax
    3c49:	00 10                	add    BYTE PTR [eax],dl
    3c4b:	8c 0c 00             	mov    WORD PTR [eax+eax*1],cs
    3c4e:	00 01                	add    BYTE PTR [ecx],al
    3c50:	48                   	dec    eax
    3c51:	96                   	xchg   esi,eax
    3c52:	02 00                	add    al,BYTE PTR [eax]
    3c54:	00 71 2d             	add    BYTE PTR [ecx+0x2d],dh
    3c57:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    3c5d:	01 9c 61 03 00 00 0f 	add    DWORD PTR [ecx+eiz*2+0xf000003],ebx
    3c64:	86 0c 00             	xchg   BYTE PTR [eax+eax*1],cl
    3c67:	00 01                	add    BYTE PTR [ecx],al
    3c69:	48                   	dec    eax
    3c6a:	9c                   	pushf  
    3c6b:	02 00                	add    al,BYTE PTR [eax]
    3c6d:	00 02                	add    BYTE PTR [edx],al
    3c6f:	91                   	xchg   ecx,eax
    3c70:	00 0f                	add    BYTE PTR [edi],cl
    3c72:	2e                   	cs
    3c73:	0c 00                	or     al,0x0
    3c75:	00 01                	add    BYTE PTR [ecx],al
    3c77:	48                   	dec    eax
    3c78:	96                   	xchg   esi,eax
    3c79:	02 00                	add    al,BYTE PTR [eax]
    3c7b:	00 02                	add    BYTE PTR [edx],al
    3c7d:	91                   	xchg   ecx,eax
    3c7e:	04 11                	add    al,0x11
    3c80:	74 00                	je     3c82 <sysEnter_Vector-0x12c37e>
    3c82:	01 4a 3f             	add    DWORD PTR [edx+0x3f],ecx
    3c85:	01 00                	add    DWORD PTR [eax],eax
    3c87:	00 02                	add    BYTE PTR [edx],al
    3c89:	91                   	xchg   ecx,eax
    3c8a:	74 00                	je     3c8c <sysEnter_Vector-0x12c374>
    3c8c:	10 3b                	adc    BYTE PTR [ebx],bh
    3c8e:	0c 00                	or     al,0x0
    3c90:	00 01                	add    BYTE PTR [ecx],al
    3c92:	50                   	push   eax
    3c93:	96                   	xchg   esi,eax
    3c94:	02 00                	add    al,BYTE PTR [eax]
    3c96:	00 a6 2d 00 9f 1d    	add    BYTE PTR [esi+0x1d9f002d],ah
    3c9c:	00 00                	add    BYTE PTR [eax],al
    3c9e:	00 01                	add    BYTE PTR [ecx],al
    3ca0:	9c                   	pushf  
    3ca1:	97                   	xchg   edi,eax
    3ca2:	03 00                	add    eax,DWORD PTR [eax]
    3ca4:	00 0f                	add    BYTE PTR [edi],cl
    3ca6:	86 0c 00             	xchg   BYTE PTR [eax+eax*1],cl
    3ca9:	00 01                	add    BYTE PTR [ecx],al
    3cab:	50                   	push   eax
    3cac:	9c                   	pushf  
    3cad:	02 00                	add    al,BYTE PTR [eax]
    3caf:	00 02                	add    BYTE PTR [edx],al
    3cb1:	91                   	xchg   ecx,eax
    3cb2:	00 0f                	add    BYTE PTR [edi],cl
    3cb4:	2e                   	cs
    3cb5:	0c 00                	or     al,0x0
    3cb7:	00 01                	add    BYTE PTR [ecx],al
    3cb9:	50                   	push   eax
    3cba:	96                   	xchg   esi,eax
    3cbb:	02 00                	add    al,BYTE PTR [eax]
    3cbd:	00 02                	add    BYTE PTR [edx],al
    3cbf:	91                   	xchg   ecx,eax
    3cc0:	04 00                	add    al,0x0
    3cc2:	0e                   	push   cs
    3cc3:	50                   	push   eax
    3cc4:	0c 00                	or     al,0x0
    3cc6:	00 01                	add    BYTE PTR [ecx],al
    3cc8:	54                   	push   esp
    3cc9:	3f                   	aas    
    3cca:	01 00                	add    DWORD PTR [eax],eax
    3ccc:	00 c3                	add    bl,al
    3cce:	2d 00 9f 57 08       	sub    eax,0x8579f00
    3cd3:	00 00                	add    BYTE PTR [eax],al
    3cd5:	01 9c 2f 04 00 00 0f 	add    DWORD PTR [edi+ebp*1+0xf000004],ebx
    3cdc:	2e                   	cs
    3cdd:	0c 00                	or     al,0x0
    3cdf:	00 01                	add    BYTE PTR [ecx],al
    3ce1:	54                   	push   esp
    3ce2:	96                   	xchg   esi,eax
    3ce3:	02 00                	add    al,BYTE PTR [eax]
    3ce5:	00 02                	add    BYTE PTR [edx],al
    3ce7:	91                   	xchg   ecx,eax
    3ce8:	00 11                	add    BYTE PTR [ecx],dl
    3cea:	64                   	fs
    3ceb:	61                   	popa   
    3cec:	79 00                	jns    3cee <sysEnter_Vector-0x12c312>
    3cee:	01 55 31             	add    DWORD PTR [ebp+0x31],edx
    3cf1:	01 00                	add    DWORD PTR [eax],eax
    3cf3:	00 02                	add    BYTE PTR [edx],al
    3cf5:	91                   	xchg   ecx,eax
    3cf6:	68 0d e9 0b 00       	push   0xbe90d
    3cfb:	00 01                	add    BYTE PTR [ecx],al
    3cfd:	55                   	push   ebp
    3cfe:	31 01                	xor    DWORD PTR [ecx],eax
    3d00:	00 00                	add    BYTE PTR [eax],al
    3d02:	02 91 54 0d e6 0b    	add    dl,BYTE PTR [ecx+0xbe60d54]
    3d08:	00 00                	add    BYTE PTR [eax],al
    3d0a:	01 56 03             	add    DWORD PTR [esi+0x3],edx
    3d0d:	01 00                	add    DWORD PTR [eax],eax
    3d0f:	00 02                	add    BYTE PTR [edx],al
    3d11:	91                   	xchg   ecx,eax
    3d12:	4c                   	dec    esp
    3d13:	0d 1f 0c 00 00       	or     eax,0xc1f
    3d18:	01 57 03             	add    DWORD PTR [edi+0x3],edx
    3d1b:	01 00                	add    DWORD PTR [eax],eax
    3d1d:	00 02                	add    BYTE PTR [edx],al
    3d1f:	91                   	xchg   ecx,eax
    3d20:	64                   	fs
    3d21:	0d ee 0b 00 00       	or     eax,0xbee
    3d26:	01 57 03             	add    DWORD PTR [edi+0x3],edx
    3d29:	01 00                	add    DWORD PTR [eax],eax
    3d2b:	00 02                	add    BYTE PTR [edx],al
    3d2d:	91                   	xchg   ecx,eax
    3d2e:	60                   	pusha  
    3d2f:	0d 13 06 00 00       	or     eax,0x613
    3d34:	01 58 31             	add    DWORD PTR [eax+0x31],ebx
    3d37:	01 00                	add    DWORD PTR [eax],eax
    3d39:	00 02                	add    BYTE PTR [edx],al
    3d3b:	91                   	xchg   ecx,eax
    3d3c:	50                   	push   eax
    3d3d:	0d a2 0c 00 00       	or     eax,0xca2
    3d42:	01 59 03             	add    DWORD PTR [ecx+0x3],ebx
    3d45:	01 00                	add    DWORD PTR [eax],eax
    3d47:	00 02                	add    BYTE PTR [edx],al
    3d49:	91                   	xchg   ecx,eax
    3d4a:	5c                   	pop    esp
    3d4b:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    3d4f:	00 01                	add    BYTE PTR [ecx],al
    3d51:	5a                   	pop    edx
    3d52:	31 01                	xor    DWORD PTR [ecx],eax
    3d54:	00 00                	add    BYTE PTR [eax],al
    3d56:	02 91 58 00 10 f4    	add    dl,BYTE PTR [ecx-0xbefffa8]
    3d5c:	0b 00                	or     eax,DWORD PTR [eax]
    3d5e:	00 01                	add    BYTE PTR [ecx],al
    3d60:	bf 96 02 00 00       	mov    edi,0x296
    3d65:	1a 36                	sbb    dh,BYTE PTR [esi]
    3d67:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
    3d6d:	01 9c 73 04 00 00 0f 	add    DWORD PTR [ebx+esi*2+0xf000004],ebx
    3d74:	52                   	push   edx
    3d75:	0c 00                	or     al,0x0
    3d77:	00 01                	add    BYTE PTR [ecx],al
    3d79:	bf 96 02 00 00       	mov    edi,0x296
    3d7e:	02 91 00 0f 24 0c    	add    dl,BYTE PTR [ecx+0xc240f00]
    3d84:	00 00                	add    BYTE PTR [eax],al
    3d86:	01 bf e5 01 00 00    	add    DWORD PTR [edi+0x1e5],edi
    3d8c:	02 91 5c 0d b2 0b    	add    dl,BYTE PTR [ecx+0xbb20d5c]
    3d92:	00 00                	add    BYTE PTR [eax],al
    3d94:	01 c1                	add    ecx,eax
    3d96:	3f                   	aas    
    3d97:	01 00                	add    DWORD PTR [eax],eax
    3d99:	00 02                	add    BYTE PTR [edx],al
    3d9b:	91                   	xchg   ecx,eax
    3d9c:	6c                   	ins    BYTE PTR es:[edi],dx
    3d9d:	00 12                	add    BYTE PTR [edx],dl
    3d9f:	4b                   	dec    ebx
    3da0:	00 00                	add    BYTE PTR [eax],al
    3da2:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3da5:	1f                   	pop    ds
    3da6:	01 00                	add    DWORD PTR [eax],eax
    3da8:	00 05 03 a0 54 00    	add    BYTE PTR ds:0x54a003,al
    3dae:	9f                   	lahf   
    3daf:	12 af 00 00 00 04    	adc    ch,BYTE PTR [edi+0x4000000]
    3db5:	35 1f 01 00 00       	xor    eax,0x11f
    3dba:	05 03 a4 54 00       	add    eax,0x54a403
    3dbf:	9f                   	lahf   
    3dc0:	12 5b 01             	adc    bl,BYTE PTR [ebx+0x1]
    3dc3:	00 00                	add    BYTE PTR [eax],al
    3dc5:	04 36                	add    al,0x36
    3dc7:	1f                   	pop    ds
    3dc8:	01 00                	add    DWORD PTR [eax],eax
    3dca:	00 05 03 9c 54 00    	add    BYTE PTR ds:0x549c03,al
    3dd0:	9f                   	lahf   
    3dd1:	12 54 00 00          	adc    dl,BYTE PTR [eax+eax*1+0x0]
    3dd5:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    3dd8:	31 01                	xor    DWORD PTR [ecx],eax
    3dda:	00 00                	add    BYTE PTR [eax],al
    3ddc:	05 03 ac 54 00       	add    eax,0x54ac03
    3de1:	9f                   	lahf   
    3de2:	12 28                	adc    ch,BYTE PTR [eax]
    3de4:	00 00                	add    BYTE PTR [eax],al
    3de6:	00 05 4f c8 04 00    	add    BYTE PTR ds:0x4c84f,al
    3dec:	00 05 03 a8 54 00    	add    BYTE PTR ds:0x54a803,al
    3df2:	9f                   	lahf   
    3df3:	0a 04 fa             	or     al,BYTE PTR [edx+edi*8]
    3df6:	01 00                	add    DWORD PTR [eax],eax
    3df8:	00 12                	add    BYTE PTR [edx],dl
    3dfa:	b8 0b 00 00 01       	mov    eax,0x100000b
    3dff:	0c 03                	or     al,0x3
    3e01:	01 00                	add    DWORD PTR [eax],eax
    3e03:	00 05 03 a8 53 00    	add    BYTE PTR ds:0x53a803,al
    3e09:	9f                   	lahf   
    3e0a:	12 99 0c 00 00 01    	adc    bl,BYTE PTR [ecx+0x100000c]
    3e10:	0d 31 01 00 00       	or     eax,0x131
    3e15:	05 03 d4 54 00       	add    eax,0x54d403
    3e1a:	9f                   	lahf   
    3e1b:	13 fa                	adc    edi,edx
    3e1d:	01 00                	add    DWORD PTR [eax],eax
    3e1f:	00 00                	add    BYTE PTR [eax],al
    3e21:	05 00 00 14 f3       	add    eax,0xf3140000
    3e26:	01 00                	add    DWORD PTR [eax],eax
    3e28:	00 01                	add    BYTE PTR [ecx],al
    3e2a:	00 12                	add    BYTE PTR [edx],dl
    3e2c:	c2 0b 00             	ret    0xb
    3e2f:	00 01                	add    BYTE PTR [ecx],al
    3e31:	0e                   	push   cs
    3e32:	f0 04 00             	lock add al,0x0
    3e35:	00 05 03 94 54 00    	add    BYTE PTR ds:0x549403,al
    3e3b:	9f                   	lahf   
    3e3c:	12 d3                	adc    dl,bl
    3e3e:	0b 00                	or     eax,DWORD PTR [eax]
    3e40:	00 01                	add    BYTE PTR [ecx],al
    3e42:	0f 03 01             	lsl    eax,WORD PTR [ecx]
    3e45:	00 00                	add    BYTE PTR [eax],al
    3e47:	05 03 d8 54 00       	add    eax,0x54d803
    3e4c:	9f                   	lahf   
    3e4d:	13 03                	adc    eax,DWORD PTR [ebx]
    3e4f:	01 00                	add    DWORD PTR [eax],eax
    3e51:	00 38                	add    BYTE PTR [eax],bh
    3e53:	05 00 00 14 f3       	add    eax,0xf3140000
    3e58:	01 00                	add    DWORD PTR [eax],eax
    3e5a:	00 01                	add    BYTE PTR [ecx],al
    3e5c:	14 f3                	adc    al,0xf3
    3e5e:	01 00                	add    DWORD PTR [eax],eax
    3e60:	00 0b                	add    BYTE PTR [ebx],cl
    3e62:	00 12                	add    BYTE PTR [edx],dl
    3e64:	69 0c 00 00 01 11 49 	imul   ecx,DWORD PTR [eax+eax*1],0x49110100
    3e6b:	05 00 00 05 03       	add    eax,0x3050000
    3e70:	c0 51 00 9f          	rcl    BYTE PTR [ecx+0x0],0x9f
    3e74:	0b 22                	or     esp,DWORD PTR [edx]
    3e76:	05                   	.byte 0x5
    3e77:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     2c2:	11 01                	adc    DWORD PTR [ecx],eax
     2c4:	12 06                	adc    al,BYTE PTR [esi]
     2c6:	40                   	inc    eax
     2c7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cd:	00 00                	add    BYTE PTR [eax],al
     2cf:	07                   	pop    es
     2d0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     2d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2da:	02 18                	add    bl,BYTE PTR [eax]
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	08 0b                	or     BYTE PTR [ebx],cl
     2e0:	01 11                	add    DWORD PTR [ecx],edx
     2e2:	01 12                	add    DWORD PTR [edx],edx
     2e4:	06                   	push   es
     2e5:	00 00                	add    BYTE PTR [eax],al
     2e7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     2ea:	03 08                	add    ecx,DWORD PTR [eax]
     2ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f0:	49                   	dec    ecx
     2f1:	13 02                	adc    eax,DWORD PTR [edx]
     2f3:	18 00                	sbb    BYTE PTR [eax],al
     2f5:	00 0a                	add    BYTE PTR [edx],cl
     2f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2fa:	19 03                	sbb    DWORD PTR [ebx],eax
     2fc:	0e                   	push   cs
     2fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     301:	27                   	daa    
     302:	19 11                	sbb    DWORD PTR [ecx],edx
     304:	01 12                	add    DWORD PTR [edx],edx
     306:	06                   	push   es
     307:	40                   	inc    eax
     308:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     313:	03 0e                	add    ecx,DWORD PTR [esi]
     315:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     317:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     319:	49                   	dec    ecx
     31a:	13 02                	adc    eax,DWORD PTR [edx]
     31c:	18 00                	sbb    BYTE PTR [eax],al
     31e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     321:	01 11                	add    DWORD PTR [ecx],edx
     323:	01 12                	add    DWORD PTR [edx],edx
     325:	06                   	push   es
     326:	01 13                	add    DWORD PTR [ebx],edx
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	0d 34 00 03 0e       	or     eax,0xe030034
     32f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     333:	49                   	dec    ecx
     334:	13 3f                	adc    edi,DWORD PTR [edi]
     336:	19 02                	sbb    DWORD PTR [edx],eax
     338:	18 00                	sbb    BYTE PTR [eax],al
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	01 11                	add    DWORD PTR [ecx],edx
     33e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     344:	0e                   	push   cs
     345:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     347:	11 01                	adc    DWORD PTR [ecx],eax
     349:	12 06                	adc    al,BYTE PTR [esi]
     34b:	10 17                	adc    BYTE PTR [edi],dl
     34d:	00 00                	add    BYTE PTR [eax],al
     34f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     352:	0b 0b                	or     ecx,DWORD PTR [ebx]
     354:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     35f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     362:	08 00                	or     BYTE PTR [eax],al
     364:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     367:	00 03                	add    BYTE PTR [ebx],al
     369:	0e                   	push   cs
     36a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36e:	49                   	dec    ecx
     36f:	13 00                	adc    eax,DWORD PTR [eax]
     371:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     377:	49                   	dec    ecx
     378:	13 00                	adc    eax,DWORD PTR [eax]
     37a:	00 06                	add    BYTE PTR [esi],al
     37c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     380:	00 00                	add    BYTE PTR [eax],al
     382:	07                   	pop    es
     383:	04 01                	add    al,0x1
     385:	03 0e                	add    ecx,DWORD PTR [esi]
     387:	0b 0b                	or     ecx,DWORD PTR [ebx]
     389:	49                   	dec    ecx
     38a:	13 3a                	adc    edi,DWORD PTR [edx]
     38c:	0b 3b                	or     edi,DWORD PTR [ebx]
     38e:	0b 01                	or     eax,DWORD PTR [ecx]
     390:	13 00                	adc    eax,DWORD PTR [eax]
     392:	00 08                	add    BYTE PTR [eax],cl
     394:	28 00                	sub    BYTE PTR [eax],al
     396:	03 0e                	add    ecx,DWORD PTR [esi]
     398:	1c 0b                	sbb    al,0xb
     39a:	00 00                	add    BYTE PTR [eax],al
     39c:	09 28                	or     DWORD PTR [eax],ebp
     39e:	00 03                	add    BYTE PTR [ebx],al
     3a0:	0e                   	push   cs
     3a1:	1c 05                	sbb    al,0x5
     3a3:	00 00                	add    BYTE PTR [eax],al
     3a5:	0a 0f                	or     cl,BYTE PTR [edi]
     3a7:	00 0b                	add    BYTE PTR [ebx],cl
     3a9:	0b 00                	or     eax,DWORD PTR [eax]
     3ab:	00 0b                	add    BYTE PTR [ebx],cl
     3ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3b0:	19 03                	sbb    DWORD PTR [ebx],eax
     3b2:	0e                   	push   cs
     3b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b7:	27                   	daa    
     3b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3bb:	11 01                	adc    DWORD PTR [ecx],eax
     3bd:	12 06                	adc    al,BYTE PTR [esi]
     3bf:	40                   	inc    eax
     3c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	0c 05                	or     al,0x5
     3ca:	00 03                	add    BYTE PTR [ebx],al
     3cc:	0e                   	push   cs
     3cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d1:	49                   	dec    ecx
     3d2:	13 02                	adc    eax,DWORD PTR [edx]
     3d4:	18 00                	sbb    BYTE PTR [eax],al
     3d6:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	27                   	daa    
     3e3:	19 11                	sbb    DWORD PTR [ecx],edx
     3e5:	01 12                	add    DWORD PTR [edx],edx
     3e7:	06                   	push   es
     3e8:	40                   	inc    eax
     3e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3ef:	00 00                	add    BYTE PTR [eax],al
     3f1:	0e                   	push   cs
     3f2:	34 00                	xor    al,0x0
     3f4:	03 0e                	add    ecx,DWORD PTR [esi]
     3f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fa:	49                   	dec    ecx
     3fb:	13 3f                	adc    edi,DWORD PTR [edi]
     3fd:	19 02                	sbb    DWORD PTR [edx],eax
     3ff:	18 00                	sbb    BYTE PTR [eax],al
     401:	00 00                	add    BYTE PTR [eax],al
     403:	01 11                	add    DWORD PTR [ecx],edx
     405:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40b:	0e                   	push   cs
     40c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	10 17                	adc    BYTE PTR [edi],dl
     414:	00 00                	add    BYTE PTR [eax],al
     416:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     419:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     41e:	0e                   	push   cs
     41f:	00 00                	add    BYTE PTR [eax],al
     421:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     424:	0b 0b                	or     ecx,DWORD PTR [ebx]
     426:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     429:	08 00                	or     BYTE PTR [eax],al
     42b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     42e:	00 03                	add    BYTE PTR [ebx],al
     430:	0e                   	push   cs
     431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     435:	49                   	dec    ecx
     436:	13 00                	adc    eax,DWORD PTR [eax]
     438:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     43e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     440:	49                   	dec    ecx
     441:	13 3a                	adc    edi,DWORD PTR [edx]
     443:	0b 3b                	or     edi,DWORD PTR [ebx]
     445:	0b 01                	or     eax,DWORD PTR [ecx]
     447:	13 00                	adc    eax,DWORD PTR [eax]
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	28 00                	sub    BYTE PTR [eax],al
     44d:	03 0e                	add    ecx,DWORD PTR [esi]
     44f:	1c 0b                	sbb    al,0xb
     451:	00 00                	add    BYTE PTR [eax],al
     453:	07                   	pop    es
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	03 0e                	add    ecx,DWORD PTR [esi]
     458:	1c 05                	sbb    al,0x5
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	08 0f                	or     BYTE PTR [edi],cl
     45e:	00 0b                	add    BYTE PTR [ebx],cl
     460:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 2e                	or     DWORD PTR [esi],ebp
     467:	01 3f                	add    DWORD PTR [edi],edi
     469:	19 03                	sbb    DWORD PTR [ebx],eax
     46b:	0e                   	push   cs
     46c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     46e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     470:	27                   	daa    
     471:	19 11                	sbb    DWORD PTR [ecx],edx
     473:	01 12                	add    DWORD PTR [edx],edx
     475:	06                   	push   es
     476:	40                   	inc    eax
     477:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     485:	0b 3b                	or     edi,DWORD PTR [ebx]
     487:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     48a:	02 18                	add    bl,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     494:	0b 3b                	or     edi,DWORD PTR [ebx]
     496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     499:	02 18                	add    bl,BYTE PTR [eax]
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	0c 34                	or     al,0x34
     49f:	00 03                	add    BYTE PTR [ebx],al
     4a1:	0e                   	push   cs
     4a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a6:	49                   	dec    ecx
     4a7:	13 02                	adc    eax,DWORD PTR [edx]
     4a9:	18 00                	sbb    BYTE PTR [eax],al
     4ab:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     4b1:	01 13                	add    DWORD PTR [ebx],edx
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	0e                   	push   cs
     4b6:	21 00                	and    DWORD PTR [eax],eax
     4b8:	49                   	dec    ecx
     4b9:	13 2f                	adc    ebp,DWORD PTR [edi]
     4bb:	0b 00                	or     eax,DWORD PTR [eax]
     4bd:	00 0f                	add    BYTE PTR [edi],cl
     4bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c2:	19 03                	sbb    DWORD PTR [ebx],eax
     4c4:	0e                   	push   cs
     4c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c9:	49                   	dec    ecx
     4ca:	13 11                	adc    edx,DWORD PTR [ecx]
     4cc:	01 12                	add    DWORD PTR [edx],edx
     4ce:	06                   	push   es
     4cf:	40                   	inc    eax
     4d0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4db:	03 08                	add    ecx,DWORD PTR [eax]
     4dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e1:	49                   	dec    ecx
     4e2:	13 02                	adc    eax,DWORD PTR [edx]
     4e4:	18 00                	sbb    BYTE PTR [eax],al
     4e6:	00 11                	add    BYTE PTR [ecx],dl
     4e8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4eb:	19 03                	sbb    DWORD PTR [ebx],eax
     4ed:	0e                   	push   cs
     4ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f2:	27                   	daa    
     4f3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4f6:	11 01                	adc    DWORD PTR [ecx],eax
     4f8:	12 06                	adc    al,BYTE PTR [esi]
     4fa:	40                   	inc    eax
     4fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     501:	00 00                	add    BYTE PTR [eax],al
     503:	12 0a                	adc    cl,BYTE PTR [edx]
     505:	00 03                	add    BYTE PTR [ebx],al
     507:	0e                   	push   cs
     508:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     50a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     50c:	11 01                	adc    DWORD PTR [ecx],eax
     50e:	00 00                	add    BYTE PTR [eax],al
     510:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     513:	03 0e                	add    ecx,DWORD PTR [esi]
     515:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     517:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     519:	49                   	dec    ecx
     51a:	13 3f                	adc    edi,DWORD PTR [edi]
     51c:	19 02                	sbb    DWORD PTR [edx],eax
     51e:	18 00                	sbb    BYTE PTR [eax],al
     520:	00 00                	add    BYTE PTR [eax],al
     522:	01 11                	add    DWORD PTR [ecx],edx
     524:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     52a:	0e                   	push   cs
     52b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     52d:	11 01                	adc    DWORD PTR [ecx],eax
     52f:	12 06                	adc    al,BYTE PTR [esi]
     531:	10 17                	adc    BYTE PTR [edi],dl
     533:	00 00                	add    BYTE PTR [eax],al
     535:	02 16                	add    dl,BYTE PTR [esi]
     537:	00 03                	add    BYTE PTR [ebx],al
     539:	0e                   	push   cs
     53a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53e:	49                   	dec    ecx
     53f:	13 00                	adc    eax,DWORD PTR [eax]
     541:	00 03                	add    BYTE PTR [ebx],al
     543:	0f 00 0b             	str    WORD PTR [ebx]
     546:	0b 03                	or     eax,DWORD PTR [ebx]
     548:	0e                   	push   cs
     549:	49                   	dec    ecx
     54a:	13 00                	adc    eax,DWORD PTR [eax]
     54c:	00 04 24             	add    BYTE PTR [esp],al
     54f:	00 0b                	add    BYTE PTR [ebx],cl
     551:	0b 3e                	or     edi,DWORD PTR [esi]
     553:	0b 03                	or     eax,DWORD PTR [ebx]
     555:	0e                   	push   cs
     556:	00 00                	add    BYTE PTR [eax],al
     558:	05 24 00 0b 0b       	add    eax,0xb0b0024
     55d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     560:	08 00                	or     BYTE PTR [eax],al
     562:	00 06                	add    BYTE PTR [esi],al
     564:	0f 00 0b             	str    WORD PTR [ebx]
     567:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	07                   	pop    es
     56d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     571:	00 00                	add    BYTE PTR [eax],al
     573:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     576:	03 0e                	add    ecx,DWORD PTR [esi]
     578:	0b 0b                	or     ecx,DWORD PTR [ebx]
     57a:	49                   	dec    ecx
     57b:	13 3a                	adc    edi,DWORD PTR [edx]
     57d:	0b 3b                	or     edi,DWORD PTR [ebx]
     57f:	0b 01                	or     eax,DWORD PTR [ecx]
     581:	13 00                	adc    eax,DWORD PTR [eax]
     583:	00 09                	add    BYTE PTR [ecx],cl
     585:	28 00                	sub    BYTE PTR [eax],al
     587:	03 0e                	add    ecx,DWORD PTR [esi]
     589:	1c 0b                	sbb    al,0xb
     58b:	00 00                	add    BYTE PTR [eax],al
     58d:	0a 28                	or     ch,BYTE PTR [eax]
     58f:	00 03                	add    BYTE PTR [ebx],al
     591:	0e                   	push   cs
     592:	1c 05                	sbb    al,0x5
     594:	00 00                	add    BYTE PTR [eax],al
     596:	0b 0f                	or     ecx,DWORD PTR [edi]
     598:	00 0b                	add    BYTE PTR [ebx],cl
     59a:	0b 00                	or     eax,DWORD PTR [eax]
     59c:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     59f:	01 3f                	add    DWORD PTR [edi],edi
     5a1:	19 03                	sbb    DWORD PTR [ebx],eax
     5a3:	0e                   	push   cs
     5a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a8:	27                   	daa    
     5a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ac:	11 01                	adc    DWORD PTR [ecx],eax
     5ae:	12 06                	adc    al,BYTE PTR [esi]
     5b0:	40                   	inc    eax
     5b1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	0d 05 00 03 0e       	or     eax,0xe030005
     5be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5c2:	49                   	dec    ecx
     5c3:	13 02                	adc    eax,DWORD PTR [edx]
     5c5:	18 00                	sbb    BYTE PTR [eax],al
     5c7:	00 0e                	add    BYTE PTR [esi],cl
     5c9:	34 00                	xor    al,0x0
     5cb:	03 0e                	add    ecx,DWORD PTR [esi]
     5cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d1:	49                   	dec    ecx
     5d2:	13 02                	adc    eax,DWORD PTR [edx]
     5d4:	18 00                	sbb    BYTE PTR [eax],al
     5d6:	00 0f                	add    BYTE PTR [edi],cl
     5d8:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     5db:	19 03                	sbb    DWORD PTR [ebx],eax
     5dd:	0e                   	push   cs
     5de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e2:	11 01                	adc    DWORD PTR [ecx],eax
     5e4:	12 06                	adc    al,BYTE PTR [esi]
     5e6:	40                   	inc    eax
     5e7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     5ed:	10 2e                	adc    BYTE PTR [esi],ch
     5ef:	00 3f                	add    BYTE PTR [edi],bh
     5f1:	19 03                	sbb    DWORD PTR [ebx],eax
     5f3:	0e                   	push   cs
     5f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5f8:	27                   	daa    
     5f9:	19 11                	sbb    DWORD PTR [ecx],edx
     5fb:	01 12                	add    DWORD PTR [edx],edx
     5fd:	06                   	push   es
     5fe:	40                   	inc    eax
     5ff:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     605:	11 2e                	adc    DWORD PTR [esi],ebp
     607:	01 3f                	add    DWORD PTR [edi],edi
     609:	19 03                	sbb    DWORD PTR [ebx],eax
     60b:	0e                   	push   cs
     60c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     60e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     610:	27                   	daa    
     611:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     614:	11 01                	adc    DWORD PTR [ecx],eax
     616:	12 06                	adc    al,BYTE PTR [esi]
     618:	40                   	inc    eax
     619:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	12 18                	adc    bl,BYTE PTR [eax]
     623:	00 00                	add    BYTE PTR [eax],al
     625:	00 13                	add    BYTE PTR [ebx],dl
     627:	0b 01                	or     eax,DWORD PTR [ecx]
     629:	11 01                	adc    DWORD PTR [ecx],eax
     62b:	12 06                	adc    al,BYTE PTR [esi]
     62d:	00 00                	add    BYTE PTR [eax],al
     62f:	14 34                	adc    al,0x34
     631:	00 03                	add    BYTE PTR [ebx],al
     633:	08 3a                	or     BYTE PTR [edx],bh
     635:	0b 3b                	or     edi,DWORD PTR [ebx]
     637:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     63a:	02 18                	add    bl,BYTE PTR [eax]
     63c:	00 00                	add    BYTE PTR [eax],al
     63e:	15 2e 01 3f 19       	adc    eax,0x193f012e
     643:	03 0e                	add    ecx,DWORD PTR [esi]
     645:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     647:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     649:	27                   	daa    
     64a:	19 11                	sbb    DWORD PTR [ecx],edx
     64c:	01 12                	add    DWORD PTR [edx],edx
     64e:	06                   	push   es
     64f:	40                   	inc    eax
     650:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     656:	00 00                	add    BYTE PTR [eax],al
     658:	16                   	push   ss
     659:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     65c:	19 03                	sbb    DWORD PTR [ebx],eax
     65e:	0e                   	push   cs
     65f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     661:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     663:	49                   	dec    ecx
     664:	13 11                	adc    edx,DWORD PTR [ecx]
     666:	01 12                	add    DWORD PTR [edx],edx
     668:	06                   	push   es
     669:	40                   	inc    eax
     66a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     670:	00 00                	add    BYTE PTR [eax],al
     672:	17                   	pop    ss
     673:	05 00 03 08 3a       	add    eax,0x3a080300
     678:	0b 3b                	or     edi,DWORD PTR [ebx]
     67a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     67d:	02 18                	add    bl,BYTE PTR [eax]
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	18 0b                	sbb    BYTE PTR [ebx],cl
     683:	01 11                	add    DWORD PTR [ecx],edx
     685:	01 12                	add    DWORD PTR [edx],edx
     687:	06                   	push   es
     688:	01 13                	add    DWORD PTR [ebx],edx
     68a:	00 00                	add    BYTE PTR [eax],al
     68c:	19 2e                	sbb    DWORD PTR [esi],ebp
     68e:	01 3f                	add    DWORD PTR [edi],edi
     690:	19 03                	sbb    DWORD PTR [ebx],eax
     692:	0e                   	push   cs
     693:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     695:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     69b:	11 01                	adc    DWORD PTR [ecx],eax
     69d:	12 06                	adc    al,BYTE PTR [esi]
     69f:	40                   	inc    eax
     6a0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	1a 05 00 03 0e 3a    	sbb    al,BYTE PTR ds:0x3a0e0300
     6ae:	0b 3b                	or     edi,DWORD PTR [ebx]
     6b0:	05 49 13 02 18       	add    eax,0x18021349
     6b5:	00 00                	add    BYTE PTR [eax],al
     6b7:	1b 34 00             	sbb    esi,DWORD PTR [eax+eax*1]
     6ba:	03 0e                	add    ecx,DWORD PTR [esi]
     6bc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6be:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	1c 34                	sbb    al,0x34
     6c8:	00 03                	add    BYTE PTR [ebx],al
     6ca:	08 3a                	or     BYTE PTR [edx],bh
     6cc:	0b 3b                	or     edi,DWORD PTR [ebx]
     6ce:	05 49 13 02 18       	add    eax,0x18021349
     6d3:	00 00                	add    BYTE PTR [eax],al
     6d5:	1d 01 01 49 13       	sbb    eax,0x13490101
     6da:	01 13                	add    DWORD PTR [ebx],edx
     6dc:	00 00                	add    BYTE PTR [eax],al
     6de:	1e                   	push   ds
     6df:	21 00                	and    DWORD PTR [eax],eax
     6e1:	49                   	dec    ecx
     6e2:	13 2f                	adc    ebp,DWORD PTR [edi]
     6e4:	05 00 00 1f 2e       	add    eax,0x2e1f0000
     6e9:	00 3f                	add    BYTE PTR [edi],bh
     6eb:	19 03                	sbb    DWORD PTR [ebx],eax
     6ed:	0e                   	push   cs
     6ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6f0:	3b 05 49 13 11 01    	cmp    eax,DWORD PTR ds:0x1111349
     6f6:	12 06                	adc    al,BYTE PTR [esi]
     6f8:	40                   	inc    eax
     6f9:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     6ff:	20 34 00             	and    BYTE PTR [eax+eax*1],dh
     702:	03 0e                	add    ecx,DWORD PTR [esi]
     704:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     706:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     708:	49                   	dec    ecx
     709:	13 3f                	adc    edi,DWORD PTR [edi]
     70b:	19 02                	sbb    DWORD PTR [edx],eax
     70d:	18 00                	sbb    BYTE PTR [eax],al
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	01 11                	add    DWORD PTR [ecx],edx
     713:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     719:	0e                   	push   cs
     71a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     71c:	11 01                	adc    DWORD PTR [ecx],eax
     71e:	12 06                	adc    al,BYTE PTR [esi]
     720:	10 17                	adc    BYTE PTR [edi],dl
     722:	00 00                	add    BYTE PTR [eax],al
     724:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     727:	0b 0b                	or     ecx,DWORD PTR [ebx]
     729:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     72c:	0e                   	push   cs
     72d:	00 00                	add    BYTE PTR [eax],al
     72f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     732:	0b 0b                	or     ecx,DWORD PTR [ebx]
     734:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     737:	08 00                	or     BYTE PTR [eax],al
     739:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     73c:	00 03                	add    BYTE PTR [ebx],al
     73e:	0e                   	push   cs
     73f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     741:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     743:	49                   	dec    ecx
     744:	13 00                	adc    eax,DWORD PTR [eax]
     746:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     74c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     74e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     750:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     752:	01 13                	add    DWORD PTR [ebx],edx
     754:	00 00                	add    BYTE PTR [eax],al
     756:	06                   	push   es
     757:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     75c:	0b 3b                	or     edi,DWORD PTR [ebx]
     75e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     761:	38 0b                	cmp    BYTE PTR [ebx],cl
     763:	00 00                	add    BYTE PTR [eax],al
     765:	07                   	pop    es
     766:	0d 00 03 08 3a       	or     eax,0x3a080300
     76b:	0b 3b                	or     edi,DWORD PTR [ebx]
     76d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     770:	38 0b                	cmp    BYTE PTR [ebx],cl
     772:	00 00                	add    BYTE PTR [eax],al
     774:	08 0f                	or     BYTE PTR [edi],cl
     776:	00 0b                	add    BYTE PTR [ebx],cl
     778:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     77b:	00 00                	add    BYTE PTR [eax],al
     77d:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     780:	03 0e                	add    ecx,DWORD PTR [esi]
     782:	0b 0b                	or     ecx,DWORD PTR [ebx]
     784:	49                   	dec    ecx
     785:	13 3a                	adc    edi,DWORD PTR [edx]
     787:	0b 3b                	or     edi,DWORD PTR [ebx]
     789:	0b 01                	or     eax,DWORD PTR [ecx]
     78b:	13 00                	adc    eax,DWORD PTR [eax]
     78d:	00 0a                	add    BYTE PTR [edx],cl
     78f:	28 00                	sub    BYTE PTR [eax],al
     791:	03 0e                	add    ecx,DWORD PTR [esi]
     793:	1c 0b                	sbb    al,0xb
     795:	00 00                	add    BYTE PTR [eax],al
     797:	0b 28                	or     ebp,DWORD PTR [eax]
     799:	00 03                	add    BYTE PTR [ebx],al
     79b:	0e                   	push   cs
     79c:	1c 05                	sbb    al,0x5
     79e:	00 00                	add    BYTE PTR [eax],al
     7a0:	0c 0f                	or     al,0xf
     7a2:	00 0b                	add    BYTE PTR [ebx],cl
     7a4:	0b 00                	or     eax,DWORD PTR [eax]
     7a6:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     7ac:	03 0e                	add    ecx,DWORD PTR [esi]
     7ae:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7b0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7b2:	11 01                	adc    DWORD PTR [ecx],eax
     7b4:	12 06                	adc    al,BYTE PTR [esi]
     7b6:	40                   	inc    eax
     7b7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     7bd:	0e                   	push   cs
     7be:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     7c1:	19 03                	sbb    DWORD PTR [ebx],eax
     7c3:	0e                   	push   cs
     7c4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7c6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7c8:	27                   	daa    
     7c9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7cc:	11 01                	adc    DWORD PTR [ecx],eax
     7ce:	12 06                	adc    al,BYTE PTR [esi]
     7d0:	40                   	inc    eax
     7d1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     7d7:	00 00                	add    BYTE PTR [eax],al
     7d9:	0f 05                	syscall 
     7db:	00 03                	add    BYTE PTR [ebx],al
     7dd:	0e                   	push   cs
     7de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7e2:	49                   	dec    ecx
     7e3:	13 02                	adc    eax,DWORD PTR [edx]
     7e5:	18 00                	sbb    BYTE PTR [eax],al
     7e7:	00 10                	add    BYTE PTR [eax],dl
     7e9:	34 00                	xor    al,0x0
     7eb:	03 0e                	add    ecx,DWORD PTR [esi]
     7ed:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ef:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7f1:	49                   	dec    ecx
     7f2:	13 02                	adc    eax,DWORD PTR [edx]
     7f4:	18 00                	sbb    BYTE PTR [eax],al
     7f6:	00 11                	add    BYTE PTR [ecx],dl
     7f8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     7fb:	19 03                	sbb    DWORD PTR [ebx],eax
     7fd:	0e                   	push   cs
     7fe:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     800:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     802:	27                   	daa    
     803:	19 11                	sbb    DWORD PTR [ecx],edx
     805:	01 12                	add    DWORD PTR [edx],edx
     807:	06                   	push   es
     808:	40                   	inc    eax
     809:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     80f:	00 00                	add    BYTE PTR [eax],al
     811:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     814:	03 08                	add    ecx,DWORD PTR [eax]
     816:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     818:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     81a:	49                   	dec    ecx
     81b:	13 02                	adc    eax,DWORD PTR [edx]
     81d:	18 00                	sbb    BYTE PTR [eax],al
     81f:	00 13                	add    BYTE PTR [ebx],dl
     821:	0a 00                	or     al,BYTE PTR [eax]
     823:	03 0e                	add    ecx,DWORD PTR [esi]
     825:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     827:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     829:	11 01                	adc    DWORD PTR [ecx],eax
     82b:	00 00                	add    BYTE PTR [eax],al
     82d:	14 2e                	adc    al,0x2e
     82f:	01 3f                	add    DWORD PTR [edi],edi
     831:	19 03                	sbb    DWORD PTR [ebx],eax
     833:	0e                   	push   cs
     834:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     836:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     838:	27                   	daa    
     839:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     83c:	11 01                	adc    DWORD PTR [ecx],eax
     83e:	12 06                	adc    al,BYTE PTR [esi]
     840:	40                   	inc    eax
     841:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     847:	00 00                	add    BYTE PTR [eax],al
     849:	15 2e 01 3f 19       	adc    eax,0x193f012e
     84e:	03 0e                	add    ecx,DWORD PTR [esi]
     850:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     852:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     854:	27                   	daa    
     855:	19 11                	sbb    DWORD PTR [ecx],edx
     857:	01 12                	add    DWORD PTR [edx],edx
     859:	06                   	push   es
     85a:	40                   	inc    eax
     85b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     861:	00 00                	add    BYTE PTR [eax],al
     863:	16                   	push   ss
     864:	34 00                	xor    al,0x0
     866:	03 0e                	add    ecx,DWORD PTR [esi]
     868:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     86a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     86c:	49                   	dec    ecx
     86d:	13 3f                	adc    edi,DWORD PTR [edi]
     86f:	19 02                	sbb    DWORD PTR [edx],eax
     871:	18 00                	sbb    BYTE PTR [eax],al
     873:	00 00                	add    BYTE PTR [eax],al
     875:	01 11                	add    DWORD PTR [ecx],edx
     877:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     87d:	0e                   	push   cs
     87e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     880:	11 01                	adc    DWORD PTR [ecx],eax
     882:	12 06                	adc    al,BYTE PTR [esi]
     884:	10 17                	adc    BYTE PTR [edi],dl
     886:	00 00                	add    BYTE PTR [eax],al
     888:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     88b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     88d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     890:	0e                   	push   cs
     891:	00 00                	add    BYTE PTR [eax],al
     893:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     896:	0b 0b                	or     ecx,DWORD PTR [ebx]
     898:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     89b:	08 00                	or     BYTE PTR [eax],al
     89d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     8a0:	00 0b                	add    BYTE PTR [ebx],cl
     8a2:	0b 00                	or     eax,DWORD PTR [eax]
     8a4:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     8aa:	49                   	dec    ecx
     8ab:	13 00                	adc    eax,DWORD PTR [eax]
     8ad:	00 06                	add    BYTE PTR [esi],al
     8af:	16                   	push   ss
     8b0:	00 03                	add    BYTE PTR [ebx],al
     8b2:	0e                   	push   cs
     8b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8b7:	49                   	dec    ecx
     8b8:	13 00                	adc    eax,DWORD PTR [eax]
     8ba:	00 07                	add    BYTE PTR [edi],al
     8bc:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     8c0:	00 00                	add    BYTE PTR [eax],al
     8c2:	08 2e                	or     BYTE PTR [esi],ch
     8c4:	01 3f                	add    DWORD PTR [edi],edi
     8c6:	19 03                	sbb    DWORD PTR [ebx],eax
     8c8:	0e                   	push   cs
     8c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8cd:	27                   	daa    
     8ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     8d1:	11 01                	adc    DWORD PTR [ecx],eax
     8d3:	12 06                	adc    al,BYTE PTR [esi]
     8d5:	40                   	inc    eax
     8d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     8dc:	00 00                	add    BYTE PTR [eax],al
     8de:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     8e4:	0b 3b                	or     edi,DWORD PTR [ebx]
     8e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8e9:	02 18                	add    bl,BYTE PTR [eax]
     8eb:	00 00                	add    BYTE PTR [eax],al
     8ed:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     8f3:	0b 3b                	or     edi,DWORD PTR [ebx]
     8f5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8f8:	02 18                	add    bl,BYTE PTR [eax]
     8fa:	00 00                	add    BYTE PTR [eax],al
     8fc:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     8ff:	03 08                	add    ecx,DWORD PTR [eax]
     901:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     903:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     905:	49                   	dec    ecx
     906:	13 02                	adc    eax,DWORD PTR [edx]
     908:	18 00                	sbb    BYTE PTR [eax],al
     90a:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     90d:	01 11                	add    DWORD PTR [ecx],edx
     90f:	01 12                	add    DWORD PTR [edx],edx
     911:	06                   	push   es
     912:	01 13                	add    DWORD PTR [ebx],edx
     914:	00 00                	add    BYTE PTR [eax],al
     916:	0d 0b 01 11 01       	or     eax,0x111010b
     91b:	12 06                	adc    al,BYTE PTR [esi]
     91d:	00 00                	add    BYTE PTR [eax],al
     91f:	0e                   	push   cs
     920:	26 00 00             	add    BYTE PTR es:[eax],al
     923:	00 0f                	add    BYTE PTR [edi],cl
     925:	34 00                	xor    al,0x0
     927:	03 0e                	add    ecx,DWORD PTR [esi]
     929:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     92b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     92d:	49                   	dec    ecx
     92e:	13 3f                	adc    edi,DWORD PTR [edi]
     930:	19 02                	sbb    DWORD PTR [edx],eax
     932:	18 00                	sbb    BYTE PTR [eax],al
     934:	00 00                	add    BYTE PTR [eax],al
     936:	01 11                	add    DWORD PTR [ecx],edx
     938:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     93e:	0e                   	push   cs
     93f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     941:	11 01                	adc    DWORD PTR [ecx],eax
     943:	12 06                	adc    al,BYTE PTR [esi]
     945:	10 17                	adc    BYTE PTR [edi],dl
     947:	00 00                	add    BYTE PTR [eax],al
     949:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     94c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     94e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     951:	0e                   	push   cs
     952:	00 00                	add    BYTE PTR [eax],al
     954:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     957:	0b 0b                	or     ecx,DWORD PTR [ebx]
     959:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     95c:	08 00                	or     BYTE PTR [eax],al
     95e:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     961:	00 03                	add    BYTE PTR [ebx],al
     963:	0e                   	push   cs
     964:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     966:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     968:	49                   	dec    ecx
     969:	13 00                	adc    eax,DWORD PTR [eax]
     96b:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     971:	00 00                	add    BYTE PTR [eax],al
     973:	06                   	push   es
     974:	0f 00 0b             	str    WORD PTR [ebx]
     977:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     97a:	00 00                	add    BYTE PTR [eax],al
     97c:	07                   	pop    es
     97d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     980:	19 03                	sbb    DWORD PTR [ebx],eax
     982:	0e                   	push   cs
     983:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     985:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     987:	27                   	daa    
     988:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     98b:	11 01                	adc    DWORD PTR [ecx],eax
     98d:	12 06                	adc    al,BYTE PTR [esi]
     98f:	40                   	inc    eax
     990:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     996:	00 00                	add    BYTE PTR [eax],al
     998:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     99e:	0b 3b                	or     edi,DWORD PTR [ebx]
     9a0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9a3:	02 18                	add    bl,BYTE PTR [eax]
     9a5:	00 00                	add    BYTE PTR [eax],al
     9a7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     9aa:	03 08                	add    ecx,DWORD PTR [eax]
     9ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9b0:	49                   	dec    ecx
     9b1:	13 02                	adc    eax,DWORD PTR [edx]
     9b3:	18 00                	sbb    BYTE PTR [eax],al
     9b5:	00 0a                	add    BYTE PTR [edx],cl
     9b7:	34 00                	xor    al,0x0
     9b9:	03 0e                	add    ecx,DWORD PTR [esi]
     9bb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9bd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9bf:	49                   	dec    ecx
     9c0:	13 02                	adc    eax,DWORD PTR [edx]
     9c2:	18 00                	sbb    BYTE PTR [eax],al
     9c4:	00 0b                	add    BYTE PTR [ebx],cl
     9c6:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9c9:	19 03                	sbb    DWORD PTR [ebx],eax
     9cb:	0e                   	push   cs
     9cc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9ce:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9d0:	27                   	daa    
     9d1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9d4:	11 01                	adc    DWORD PTR [ecx],eax
     9d6:	12 06                	adc    al,BYTE PTR [esi]
     9d8:	40                   	inc    eax
     9d9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     9df:	00 00                	add    BYTE PTR [eax],al
     9e1:	0c 34                	or     al,0x34
     9e3:	00 03                	add    BYTE PTR [ebx],al
     9e5:	0e                   	push   cs
     9e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9ea:	49                   	dec    ecx
     9eb:	13 3f                	adc    edi,DWORD PTR [edi]
     9ed:	19 02                	sbb    DWORD PTR [edx],eax
     9ef:	18 00                	sbb    BYTE PTR [eax],al
     9f1:	00 00                	add    BYTE PTR [eax],al
     9f3:	01 11                	add    DWORD PTR [ecx],edx
     9f5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9fb:	0e                   	push   cs
     9fc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9fe:	10 17                	adc    BYTE PTR [edi],dl
     a00:	00 00                	add    BYTE PTR [eax],al
     a02:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a05:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a07:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a0a:	0e                   	push   cs
     a0b:	00 00                	add    BYTE PTR [eax],al
     a0d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a10:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a12:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a15:	08 00                	or     BYTE PTR [eax],al
     a17:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a1a:	00 03                	add    BYTE PTR [ebx],al
     a1c:	0e                   	push   cs
     a1d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a1f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a21:	49                   	dec    ecx
     a22:	13 00                	adc    eax,DWORD PTR [eax]
     a24:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     a2a:	49                   	dec    ecx
     a2b:	13 00                	adc    eax,DWORD PTR [eax]
     a2d:	00 06                	add    BYTE PTR [esi],al
     a2f:	34 00                	xor    al,0x0
     a31:	03 0e                	add    ecx,DWORD PTR [esi]
     a33:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a35:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a37:	49                   	dec    ecx
     a38:	13 3f                	adc    edi,DWORD PTR [edi]
     a3a:	19 02                	sbb    DWORD PTR [edx],eax
     a3c:	18 00                	sbb    BYTE PTR [eax],al
     a3e:	00 00                	add    BYTE PTR [eax],al
     a40:	01 11                	add    DWORD PTR [ecx],edx
     a42:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a48:	0e                   	push   cs
     a49:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a4b:	11 01                	adc    DWORD PTR [ecx],eax
     a4d:	12 06                	adc    al,BYTE PTR [esi]
     a4f:	10 17                	adc    BYTE PTR [edi],dl
     a51:	00 00                	add    BYTE PTR [eax],al
     a53:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a56:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a58:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a5b:	0e                   	push   cs
     a5c:	00 00                	add    BYTE PTR [eax],al
     a5e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a61:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a63:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a66:	08 00                	or     BYTE PTR [eax],al
     a68:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a6b:	00 03                	add    BYTE PTR [ebx],al
     a6d:	0e                   	push   cs
     a6e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a70:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a72:	49                   	dec    ecx
     a73:	13 00                	adc    eax,DWORD PTR [eax]
     a75:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     a7b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a7d:	49                   	dec    ecx
     a7e:	13 3a                	adc    edi,DWORD PTR [edx]
     a80:	0b 3b                	or     edi,DWORD PTR [ebx]
     a82:	0b 01                	or     eax,DWORD PTR [ecx]
     a84:	13 00                	adc    eax,DWORD PTR [eax]
     a86:	00 06                	add    BYTE PTR [esi],al
     a88:	28 00                	sub    BYTE PTR [eax],al
     a8a:	03 0e                	add    ecx,DWORD PTR [esi]
     a8c:	1c 0b                	sbb    al,0xb
     a8e:	00 00                	add    BYTE PTR [eax],al
     a90:	07                   	pop    es
     a91:	28 00                	sub    BYTE PTR [eax],al
     a93:	03 0e                	add    ecx,DWORD PTR [esi]
     a95:	1c 05                	sbb    al,0x5
     a97:	00 00                	add    BYTE PTR [eax],al
     a99:	08 0f                	or     BYTE PTR [edi],cl
     a9b:	00 0b                	add    BYTE PTR [ebx],cl
     a9d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     aa0:	00 00                	add    BYTE PTR [eax],al
     aa2:	09 2e                	or     DWORD PTR [esi],ebp
     aa4:	01 3f                	add    DWORD PTR [edi],edi
     aa6:	19 03                	sbb    DWORD PTR [ebx],eax
     aa8:	0e                   	push   cs
     aa9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aad:	27                   	daa    
     aae:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ab1:	11 01                	adc    DWORD PTR [ecx],eax
     ab3:	12 06                	adc    al,BYTE PTR [esi]
     ab5:	40                   	inc    eax
     ab6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     abc:	00 00                	add    BYTE PTR [eax],al
     abe:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     ac4:	0b 3b                	or     edi,DWORD PTR [ebx]
     ac6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ac9:	02 18                	add    bl,BYTE PTR [eax]
     acb:	00 00                	add    BYTE PTR [eax],al
     acd:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     ad0:	03 0e                	add    ecx,DWORD PTR [esi]
     ad2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ad4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ad6:	49                   	dec    ecx
     ad7:	13 3f                	adc    edi,DWORD PTR [edi]
     ad9:	19 02                	sbb    DWORD PTR [edx],eax
     adb:	18 00                	sbb    BYTE PTR [eax],al
     add:	00 00                	add    BYTE PTR [eax],al
     adf:	01 11                	add    DWORD PTR [ecx],edx
     ae1:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ae7:	0e                   	push   cs
     ae8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     aea:	11 01                	adc    DWORD PTR [ecx],eax
     aec:	12 06                	adc    al,BYTE PTR [esi]
     aee:	10 17                	adc    BYTE PTR [edi],dl
     af0:	00 00                	add    BYTE PTR [eax],al
     af2:	02 16                	add    dl,BYTE PTR [esi]
     af4:	00 03                	add    BYTE PTR [ebx],al
     af6:	0e                   	push   cs
     af7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     af9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     afb:	49                   	dec    ecx
     afc:	13 00                	adc    eax,DWORD PTR [eax]
     afe:	00 03                	add    BYTE PTR [ebx],al
     b00:	0f 00 0b             	str    WORD PTR [ebx]
     b03:	0b 03                	or     eax,DWORD PTR [ebx]
     b05:	0e                   	push   cs
     b06:	49                   	dec    ecx
     b07:	13 00                	adc    eax,DWORD PTR [eax]
     b09:	00 04 24             	add    BYTE PTR [esp],al
     b0c:	00 0b                	add    BYTE PTR [ebx],cl
     b0e:	0b 3e                	or     edi,DWORD PTR [esi]
     b10:	0b 03                	or     eax,DWORD PTR [ebx]
     b12:	0e                   	push   cs
     b13:	00 00                	add    BYTE PTR [eax],al
     b15:	05 24 00 0b 0b       	add    eax,0xb0b0024
     b1a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b1d:	08 00                	or     BYTE PTR [eax],al
     b1f:	00 06                	add    BYTE PTR [esi],al
     b21:	0f 00 0b             	str    WORD PTR [ebx]
     b24:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b27:	00 00                	add    BYTE PTR [eax],al
     b29:	07                   	pop    es
     b2a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b2e:	00 00                	add    BYTE PTR [eax],al
     b30:	08 2e                	or     BYTE PTR [esi],ch
     b32:	01 03                	add    DWORD PTR [ebx],eax
     b34:	0e                   	push   cs
     b35:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b37:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b39:	27                   	daa    
     b3a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b3d:	11 01                	adc    DWORD PTR [ecx],eax
     b3f:	12 06                	adc    al,BYTE PTR [esi]
     b41:	40                   	inc    eax
     b42:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b48:	00 00                	add    BYTE PTR [eax],al
     b4a:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     b50:	0b 3b                	or     edi,DWORD PTR [ebx]
     b52:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b55:	02 18                	add    bl,BYTE PTR [eax]
     b57:	00 00                	add    BYTE PTR [eax],al
     b59:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     b5c:	03 08                	add    ecx,DWORD PTR [eax]
     b5e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b60:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b62:	49                   	dec    ecx
     b63:	13 02                	adc    eax,DWORD PTR [edx]
     b65:	18 00                	sbb    BYTE PTR [eax],al
     b67:	00 0b                	add    BYTE PTR [ebx],cl
     b69:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     b6e:	0b 3b                	or     edi,DWORD PTR [ebx]
     b70:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b73:	02 18                	add    bl,BYTE PTR [eax]
     b75:	00 00                	add    BYTE PTR [eax],al
     b77:	0c 34                	or     al,0x34
     b79:	00 03                	add    BYTE PTR [ebx],al
     b7b:	0e                   	push   cs
     b7c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b7e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b80:	49                   	dec    ecx
     b81:	13 02                	adc    eax,DWORD PTR [edx]
     b83:	18 00                	sbb    BYTE PTR [eax],al
     b85:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     b8b:	12 06                	adc    al,BYTE PTR [esi]
     b8d:	00 00                	add    BYTE PTR [eax],al
     b8f:	0e                   	push   cs
     b90:	01 01                	add    DWORD PTR [ecx],eax
     b92:	49                   	dec    ecx
     b93:	13 01                	adc    eax,DWORD PTR [ecx]
     b95:	13 00                	adc    eax,DWORD PTR [eax]
     b97:	00 0f                	add    BYTE PTR [edi],cl
     b99:	21 00                	and    DWORD PTR [eax],eax
     b9b:	49                   	dec    ecx
     b9c:	13 2f                	adc    ebp,DWORD PTR [edi]
     b9e:	0b 00                	or     eax,DWORD PTR [eax]
     ba0:	00 10                	add    BYTE PTR [eax],dl
     ba2:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ba5:	19 03                	sbb    DWORD PTR [ebx],eax
     ba7:	0e                   	push   cs
     ba8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     baa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bac:	27                   	daa    
     bad:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bb0:	11 01                	adc    DWORD PTR [ecx],eax
     bb2:	12 06                	adc    al,BYTE PTR [esi]
     bb4:	40                   	inc    eax
     bb5:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bbb:	00 00                	add    BYTE PTR [eax],al
     bbd:	11 0a                	adc    DWORD PTR [edx],ecx
     bbf:	00 03                	add    BYTE PTR [ebx],al
     bc1:	0e                   	push   cs
     bc2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bc4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bc6:	11 01                	adc    DWORD PTR [ecx],eax
     bc8:	00 00                	add    BYTE PTR [eax],al
     bca:	12 0b                	adc    cl,BYTE PTR [ebx]
     bcc:	01 11                	add    DWORD PTR [ecx],edx
     bce:	01 12                	add    DWORD PTR [edx],edx
     bd0:	06                   	push   es
     bd1:	01 13                	add    DWORD PTR [ebx],edx
     bd3:	00 00                	add    BYTE PTR [eax],al
     bd5:	13 2e                	adc    ebp,DWORD PTR [esi]
     bd7:	01 3f                	add    DWORD PTR [edi],edi
     bd9:	19 03                	sbb    DWORD PTR [ebx],eax
     bdb:	0e                   	push   cs
     bdc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bde:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     be4:	11 01                	adc    DWORD PTR [ecx],eax
     be6:	12 06                	adc    al,BYTE PTR [esi]
     be8:	40                   	inc    eax
     be9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bef:	00 00                	add    BYTE PTR [eax],al
     bf1:	14 05                	adc    al,0x5
     bf3:	00 03                	add    BYTE PTR [ebx],al
     bf5:	08 3a                	or     BYTE PTR [edx],bh
     bf7:	0b 3b                	or     edi,DWORD PTR [ebx]
     bf9:	05 49 13 02 18       	add    eax,0x18021349
     bfe:	00 00                	add    BYTE PTR [eax],al
     c00:	15 18 00 00 00       	adc    eax,0x18
     c05:	16                   	push   ss
     c06:	34 00                	xor    al,0x0
     c08:	03 0e                	add    ecx,DWORD PTR [esi]
     c0a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c0c:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     c12:	00 00                	add    BYTE PTR [eax],al
     c14:	17                   	pop    ss
     c15:	34 00                	xor    al,0x0
     c17:	03 08                	add    ecx,DWORD PTR [eax]
     c19:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c1b:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     c21:	00 00                	add    BYTE PTR [eax],al
     c23:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     c26:	03 0e                	add    ecx,DWORD PTR [esi]
     c28:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c2a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c2c:	49                   	dec    ecx
     c2d:	13 3f                	adc    edi,DWORD PTR [edi]
     c2f:	19 02                	sbb    DWORD PTR [edx],eax
     c31:	18 00                	sbb    BYTE PTR [eax],al
     c33:	00 00                	add    BYTE PTR [eax],al
     c35:	01 11                	add    DWORD PTR [ecx],edx
     c37:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c3d:	0e                   	push   cs
     c3e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c40:	11 01                	adc    DWORD PTR [ecx],eax
     c42:	12 06                	adc    al,BYTE PTR [esi]
     c44:	10 17                	adc    BYTE PTR [edi],dl
     c46:	00 00                	add    BYTE PTR [eax],al
     c48:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c4b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c4d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c50:	0e                   	push   cs
     c51:	00 00                	add    BYTE PTR [eax],al
     c53:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c56:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c58:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c5b:	08 00                	or     BYTE PTR [eax],al
     c5d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c60:	00 03                	add    BYTE PTR [ebx],al
     c62:	0e                   	push   cs
     c63:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c65:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c67:	49                   	dec    ecx
     c68:	13 00                	adc    eax,DWORD PTR [eax]
     c6a:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c70:	49                   	dec    ecx
     c71:	13 00                	adc    eax,DWORD PTR [eax]
     c73:	00 06                	add    BYTE PTR [esi],al
     c75:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     c79:	00 00                	add    BYTE PTR [eax],al
     c7b:	07                   	pop    es
     c7c:	0f 00 0b             	str    WORD PTR [ebx]
     c7f:	0b 00                	or     eax,DWORD PTR [eax]
     c81:	00 08                	add    BYTE PTR [eax],cl
     c83:	13 01                	adc    eax,DWORD PTR [ecx]
     c85:	03 0e                	add    ecx,DWORD PTR [esi]
     c87:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c89:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c8b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c8d:	01 13                	add    DWORD PTR [ebx],edx
     c8f:	00 00                	add    BYTE PTR [eax],al
     c91:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     c97:	0b 3b                	or     edi,DWORD PTR [ebx]
     c99:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c9c:	38 0b                	cmp    BYTE PTR [ebx],cl
     c9e:	00 00                	add    BYTE PTR [eax],al
     ca0:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     ca6:	13 01                	adc    eax,DWORD PTR [ecx]
     ca8:	13 00                	adc    eax,DWORD PTR [eax]
     caa:	00 0b                	add    BYTE PTR [ebx],cl
     cac:	05 00 49 13 00       	add    eax,0x134900
     cb1:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     cb4:	01 3f                	add    DWORD PTR [edi],edi
     cb6:	19 03                	sbb    DWORD PTR [ebx],eax
     cb8:	0e                   	push   cs
     cb9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cbb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cbd:	11 01                	adc    DWORD PTR [ecx],eax
     cbf:	12 06                	adc    al,BYTE PTR [esi]
     cc1:	40                   	inc    eax
     cc2:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     cc8:	00 00                	add    BYTE PTR [eax],al
     cca:	0d 34 00 03 0e       	or     eax,0xe030034
     ccf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cd1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cd3:	49                   	dec    ecx
     cd4:	13 02                	adc    eax,DWORD PTR [edx]
     cd6:	18 00                	sbb    BYTE PTR [eax],al
     cd8:	00 0e                	add    BYTE PTR [esi],cl
     cda:	01 01                	add    DWORD PTR [ecx],eax
     cdc:	49                   	dec    ecx
     cdd:	13 01                	adc    eax,DWORD PTR [ecx]
     cdf:	13 00                	adc    eax,DWORD PTR [eax]
     ce1:	00 0f                	add    BYTE PTR [edi],cl
     ce3:	21 00                	and    DWORD PTR [eax],eax
     ce5:	49                   	dec    ecx
     ce6:	13 2f                	adc    ebp,DWORD PTR [edi]
     ce8:	0b 00                	or     eax,DWORD PTR [eax]
     cea:	00 10                	add    BYTE PTR [eax],dl
     cec:	34 00                	xor    al,0x0
     cee:	03 0e                	add    ecx,DWORD PTR [esi]
     cf0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cf2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cf4:	49                   	dec    ecx
     cf5:	13 3f                	adc    edi,DWORD PTR [edi]
     cf7:	19 02                	sbb    DWORD PTR [edx],eax
     cf9:	18 00                	sbb    BYTE PTR [eax],al
     cfb:	00 00                	add    BYTE PTR [eax],al
     cfd:	01 11                	add    DWORD PTR [ecx],edx
     cff:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d05:	0e                   	push   cs
     d06:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d08:	11 01                	adc    DWORD PTR [ecx],eax
     d0a:	12 06                	adc    al,BYTE PTR [esi]
     d0c:	10 17                	adc    BYTE PTR [edi],dl
     d0e:	00 00                	add    BYTE PTR [eax],al
     d10:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d13:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d15:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d18:	0e                   	push   cs
     d19:	00 00                	add    BYTE PTR [eax],al
     d1b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d1e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d20:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d23:	08 00                	or     BYTE PTR [eax],al
     d25:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     d28:	00 03                	add    BYTE PTR [ebx],al
     d2a:	0e                   	push   cs
     d2b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d2d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d2f:	49                   	dec    ecx
     d30:	13 00                	adc    eax,DWORD PTR [eax]
     d32:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     d38:	49                   	dec    ecx
     d39:	13 00                	adc    eax,DWORD PTR [eax]
     d3b:	00 06                	add    BYTE PTR [esi],al
     d3d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     d41:	00 00                	add    BYTE PTR [eax],al
     d43:	07                   	pop    es
     d44:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d47:	19 03                	sbb    DWORD PTR [ebx],eax
     d49:	0e                   	push   cs
     d4a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d4c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d4e:	27                   	daa    
     d4f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d52:	11 01                	adc    DWORD PTR [ecx],eax
     d54:	12 06                	adc    al,BYTE PTR [esi]
     d56:	40                   	inc    eax
     d57:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d5d:	00 00                	add    BYTE PTR [eax],al
     d5f:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     d65:	0b 3b                	or     edi,DWORD PTR [ebx]
     d67:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d6a:	02 18                	add    bl,BYTE PTR [eax]
     d6c:	00 00                	add    BYTE PTR [eax],al
     d6e:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     d74:	0b 3b                	or     edi,DWORD PTR [ebx]
     d76:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d79:	02 18                	add    bl,BYTE PTR [eax]
     d7b:	00 00                	add    BYTE PTR [eax],al
     d7d:	0a 2e                	or     ch,BYTE PTR [esi]
     d7f:	01 3f                	add    DWORD PTR [edi],edi
     d81:	19 03                	sbb    DWORD PTR [ebx],eax
     d83:	0e                   	push   cs
     d84:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d86:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d88:	27                   	daa    
     d89:	19 11                	sbb    DWORD PTR [ecx],edx
     d8b:	01 12                	add    DWORD PTR [edx],edx
     d8d:	06                   	push   es
     d8e:	40                   	inc    eax
     d8f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d95:	00 00                	add    BYTE PTR [eax],al
     d97:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d9a:	03 08                	add    ecx,DWORD PTR [eax]
     d9c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d9e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     da0:	49                   	dec    ecx
     da1:	13 02                	adc    eax,DWORD PTR [edx]
     da3:	18 00                	sbb    BYTE PTR [eax],al
     da5:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     da8:	00 03                	add    BYTE PTR [ebx],al
     daa:	0e                   	push   cs
     dab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     daf:	49                   	dec    ecx
     db0:	13 3f                	adc    edi,DWORD PTR [edi]
     db2:	19 02                	sbb    DWORD PTR [edx],eax
     db4:	18 00                	sbb    BYTE PTR [eax],al
     db6:	00 00                	add    BYTE PTR [eax],al
     db8:	01 11                	add    DWORD PTR [ecx],edx
     dba:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     dc0:	0e                   	push   cs
     dc1:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     dc3:	11 01                	adc    DWORD PTR [ecx],eax
     dc5:	12 06                	adc    al,BYTE PTR [esi]
     dc7:	10 17                	adc    BYTE PTR [edi],dl
     dc9:	00 00                	add    BYTE PTR [eax],al
     dcb:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     dce:	0b 0b                	or     ecx,DWORD PTR [ebx]
     dd0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dd3:	0e                   	push   cs
     dd4:	00 00                	add    BYTE PTR [eax],al
     dd6:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     dd9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ddb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     dde:	08 00                	or     BYTE PTR [eax],al
     de0:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     de3:	00 03                	add    BYTE PTR [ebx],al
     de5:	0e                   	push   cs
     de6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dea:	49                   	dec    ecx
     deb:	13 00                	adc    eax,DWORD PTR [eax]
     ded:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     df3:	49                   	dec    ecx
     df4:	13 00                	adc    eax,DWORD PTR [eax]
     df6:	00 06                	add    BYTE PTR [esi],al
     df8:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     dfc:	00 00                	add    BYTE PTR [eax],al
     dfe:	07                   	pop    es
     dff:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     e02:	19 03                	sbb    DWORD PTR [ebx],eax
     e04:	0e                   	push   cs
     e05:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e07:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e09:	27                   	daa    
     e0a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e0d:	11 01                	adc    DWORD PTR [ecx],eax
     e0f:	12 06                	adc    al,BYTE PTR [esi]
     e11:	40                   	inc    eax
     e12:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e18:	00 00                	add    BYTE PTR [eax],al
     e1a:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     e20:	0b 3b                	or     edi,DWORD PTR [ebx]
     e22:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e25:	02 18                	add    bl,BYTE PTR [eax]
     e27:	00 00                	add    BYTE PTR [eax],al
     e29:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     e2c:	03 08                	add    ecx,DWORD PTR [eax]
     e2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e32:	49                   	dec    ecx
     e33:	13 02                	adc    eax,DWORD PTR [edx]
     e35:	18 00                	sbb    BYTE PTR [eax],al
     e37:	00 0a                	add    BYTE PTR [edx],cl
     e39:	34 00                	xor    al,0x0
     e3b:	03 0e                	add    ecx,DWORD PTR [esi]
     e3d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e3f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e41:	49                   	dec    ecx
     e42:	13 3f                	adc    edi,DWORD PTR [edi]
     e44:	19 02                	sbb    DWORD PTR [edx],eax
     e46:	18 00                	sbb    BYTE PTR [eax],al
     e48:	00 00                	add    BYTE PTR [eax],al
     e4a:	01 11                	add    DWORD PTR [ecx],edx
     e4c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e52:	0e                   	push   cs
     e53:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e55:	11 01                	adc    DWORD PTR [ecx],eax
     e57:	12 06                	adc    al,BYTE PTR [esi]
     e59:	10 17                	adc    BYTE PTR [edi],dl
     e5b:	00 00                	add    BYTE PTR [eax],al
     e5d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e60:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e62:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e65:	0e                   	push   cs
     e66:	00 00                	add    BYTE PTR [eax],al
     e68:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     e6b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e6d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e70:	08 00                	or     BYTE PTR [eax],al
     e72:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     e75:	00 03                	add    BYTE PTR [ebx],al
     e77:	0e                   	push   cs
     e78:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e7a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e7c:	49                   	dec    ecx
     e7d:	13 00                	adc    eax,DWORD PTR [eax]
     e7f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     e85:	49                   	dec    ecx
     e86:	13 00                	adc    eax,DWORD PTR [eax]
     e88:	00 06                	add    BYTE PTR [esi],al
     e8a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     e8e:	00 00                	add    BYTE PTR [eax],al
     e90:	07                   	pop    es
     e91:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     e94:	19 03                	sbb    DWORD PTR [ebx],eax
     e96:	0e                   	push   cs
     e97:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e99:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e9b:	27                   	daa    
     e9c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e9f:	11 01                	adc    DWORD PTR [ecx],eax
     ea1:	12 06                	adc    al,BYTE PTR [esi]
     ea3:	40                   	inc    eax
     ea4:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     eaa:	00 00                	add    BYTE PTR [eax],al
     eac:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     eb2:	0b 3b                	or     edi,DWORD PTR [ebx]
     eb4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     eb7:	02 18                	add    bl,BYTE PTR [eax]
     eb9:	00 00                	add    BYTE PTR [eax],al
     ebb:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     ebe:	03 08                	add    ecx,DWORD PTR [eax]
     ec0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ec4:	49                   	dec    ecx
     ec5:	13 02                	adc    eax,DWORD PTR [edx]
     ec7:	18 00                	sbb    BYTE PTR [eax],al
     ec9:	00 0a                	add    BYTE PTR [edx],cl
     ecb:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     ed0:	0b 3b                	or     edi,DWORD PTR [ebx]
     ed2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ed5:	02 18                	add    bl,BYTE PTR [eax]
     ed7:	00 00                	add    BYTE PTR [eax],al
     ed9:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     edc:	03 0e                	add    ecx,DWORD PTR [esi]
     ede:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ee0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ee2:	49                   	dec    ecx
     ee3:	13 3f                	adc    edi,DWORD PTR [edi]
     ee5:	19 02                	sbb    DWORD PTR [edx],eax
     ee7:	18 00                	sbb    BYTE PTR [eax],al
     ee9:	00 00                	add    BYTE PTR [eax],al
     eeb:	01 11                	add    DWORD PTR [ecx],edx
     eed:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     ef3:	0e                   	push   cs
     ef4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ef6:	11 01                	adc    DWORD PTR [ecx],eax
     ef8:	12 06                	adc    al,BYTE PTR [esi]
     efa:	10 17                	adc    BYTE PTR [edi],dl
     efc:	00 00                	add    BYTE PTR [eax],al
     efe:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f01:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f03:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f06:	0e                   	push   cs
     f07:	00 00                	add    BYTE PTR [eax],al
     f09:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     f0c:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f0e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f11:	08 00                	or     BYTE PTR [eax],al
     f13:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     f16:	00 03                	add    BYTE PTR [ebx],al
     f18:	0e                   	push   cs
     f19:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f1b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f1d:	49                   	dec    ecx
     f1e:	13 00                	adc    eax,DWORD PTR [eax]
     f20:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     f26:	49                   	dec    ecx
     f27:	13 00                	adc    eax,DWORD PTR [eax]
     f29:	00 06                	add    BYTE PTR [esi],al
     f2b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f2e:	19 03                	sbb    DWORD PTR [ebx],eax
     f30:	0e                   	push   cs
     f31:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f33:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f35:	27                   	daa    
     f36:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f39:	11 01                	adc    DWORD PTR [ecx],eax
     f3b:	12 06                	adc    al,BYTE PTR [esi]
     f3d:	40                   	inc    eax
     f3e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f44:	00 00                	add    BYTE PTR [eax],al
     f46:	07                   	pop    es
     f47:	05 00 03 08 3a       	add    eax,0x3a080300
     f4c:	0b 3b                	or     edi,DWORD PTR [ebx]
     f4e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f51:	02 18                	add    bl,BYTE PTR [eax]
     f53:	00 00                	add    BYTE PTR [eax],al
     f55:	08 2e                	or     BYTE PTR [esi],ch
     f57:	01 3f                	add    DWORD PTR [edi],edi
     f59:	19 03                	sbb    DWORD PTR [ebx],eax
     f5b:	0e                   	push   cs
     f5c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f5e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f60:	27                   	daa    
     f61:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f64:	11 01                	adc    DWORD PTR [ecx],eax
     f66:	12 06                	adc    al,BYTE PTR [esi]
     f68:	40                   	inc    eax
     f69:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f6f:	00 00                	add    BYTE PTR [eax],al
     f71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     f74:	03 08                	add    ecx,DWORD PTR [eax]
     f76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f7a:	49                   	dec    ecx
     f7b:	13 02                	adc    eax,DWORD PTR [edx]
     f7d:	18 00                	sbb    BYTE PTR [eax],al
     f7f:	00 0a                	add    BYTE PTR [edx],cl
     f81:	34 00                	xor    al,0x0
     f83:	03 0e                	add    ecx,DWORD PTR [esi]
     f85:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f87:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f89:	49                   	dec    ecx
     f8a:	13 3f                	adc    edi,DWORD PTR [edi]
     f8c:	19 02                	sbb    DWORD PTR [edx],eax
     f8e:	18 00                	sbb    BYTE PTR [eax],al
     f90:	00 00                	add    BYTE PTR [eax],al
     f92:	01 11                	add    DWORD PTR [ecx],edx
     f94:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     f9a:	0e                   	push   cs
     f9b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f9d:	11 01                	adc    DWORD PTR [ecx],eax
     f9f:	12 06                	adc    al,BYTE PTR [esi]
     fa1:	10 17                	adc    BYTE PTR [edi],dl
     fa3:	00 00                	add    BYTE PTR [eax],al
     fa5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fa8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     faa:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fad:	08 00                	or     BYTE PTR [eax],al
     faf:	00 03                	add    BYTE PTR [ebx],al
     fb1:	16                   	push   ss
     fb2:	00 03                	add    BYTE PTR [ebx],al
     fb4:	0e                   	push   cs
     fb5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fb9:	49                   	dec    ecx
     fba:	13 00                	adc    eax,DWORD PTR [eax]
     fbc:	00 04 24             	add    BYTE PTR [esp],al
     fbf:	00 0b                	add    BYTE PTR [ebx],cl
     fc1:	0b 3e                	or     edi,DWORD PTR [esi]
     fc3:	0b 03                	or     eax,DWORD PTR [ebx]
     fc5:	0e                   	push   cs
     fc6:	00 00                	add    BYTE PTR [eax],al
     fc8:	05 2e 01 3f 19       	add    eax,0x193f012e
     fcd:	03 0e                	add    ecx,DWORD PTR [esi]
     fcf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fd1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fd3:	27                   	daa    
     fd4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fd7:	11 01                	adc    DWORD PTR [ecx],eax
     fd9:	12 06                	adc    al,BYTE PTR [esi]
     fdb:	40                   	inc    eax
     fdc:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     fe2:	00 00                	add    BYTE PTR [eax],al
     fe4:	06                   	push   es
     fe5:	05 00 03 08 3a       	add    eax,0x3a080300
     fea:	0b 3b                	or     edi,DWORD PTR [ebx]
     fec:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fef:	02 18                	add    bl,BYTE PTR [eax]
     ff1:	00 00                	add    BYTE PTR [eax],al
     ff3:	07                   	pop    es
     ff4:	34 00                	xor    al,0x0
     ff6:	03 08                	add    ecx,DWORD PTR [eax]
     ff8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ffa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ffc:	49                   	dec    ecx
     ffd:	13 02                	adc    eax,DWORD PTR [edx]
     fff:	18 00                	sbb    BYTE PTR [eax],al
    1001:	00 08                	add    BYTE PTR [eax],cl
    1003:	0f 00 0b             	str    WORD PTR [ebx]
    1006:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1009:	00 00                	add    BYTE PTR [eax],al
    100b:	09 26                	or     DWORD PTR [esi],esp
    100d:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1010:	00 00                	add    BYTE PTR [eax],al
    1012:	0a 2e                	or     ch,BYTE PTR [esi]
    1014:	01 3f                	add    DWORD PTR [edi],edi
    1016:	19 03                	sbb    DWORD PTR [ebx],eax
    1018:	0e                   	push   cs
    1019:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    101b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    101d:	27                   	daa    
    101e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1021:	11 01                	adc    DWORD PTR [ecx],eax
    1023:	12 06                	adc    al,BYTE PTR [esi]
    1025:	40                   	inc    eax
    1026:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    102c:	00 01                	add    BYTE PTR [ecx],al
    102e:	11 01                	adc    DWORD PTR [ecx],eax
    1030:	25 0e 13 0b 03       	and    eax,0x30b130e
    1035:	0e                   	push   cs
    1036:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1038:	11 01                	adc    DWORD PTR [ecx],eax
    103a:	12 06                	adc    al,BYTE PTR [esi]
    103c:	10 17                	adc    BYTE PTR [edi],dl
    103e:	00 00                	add    BYTE PTR [eax],al
    1040:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1043:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1045:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1048:	08 00                	or     BYTE PTR [eax],al
    104a:	00 03                	add    BYTE PTR [ebx],al
    104c:	16                   	push   ss
    104d:	00 03                	add    BYTE PTR [ebx],al
    104f:	0e                   	push   cs
    1050:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1052:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1054:	49                   	dec    ecx
    1055:	13 00                	adc    eax,DWORD PTR [eax]
    1057:	00 04 24             	add    BYTE PTR [esp],al
    105a:	00 0b                	add    BYTE PTR [ebx],cl
    105c:	0b 3e                	or     edi,DWORD PTR [esi]
    105e:	0b 03                	or     eax,DWORD PTR [ebx]
    1060:	0e                   	push   cs
    1061:	00 00                	add    BYTE PTR [eax],al
    1063:	05 2e 01 3f 19       	add    eax,0x193f012e
    1068:	03 0e                	add    ecx,DWORD PTR [esi]
    106a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    106c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    106e:	27                   	daa    
    106f:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1072:	11 01                	adc    DWORD PTR [ecx],eax
    1074:	12 06                	adc    al,BYTE PTR [esi]
    1076:	40                   	inc    eax
    1077:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    107d:	00 00                	add    BYTE PTR [eax],al
    107f:	06                   	push   es
    1080:	05 00 03 08 3a       	add    eax,0x3a080300
    1085:	0b 3b                	or     edi,DWORD PTR [ebx]
    1087:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    108a:	02 18                	add    bl,BYTE PTR [eax]
    108c:	00 00                	add    BYTE PTR [eax],al
    108e:	07                   	pop    es
    108f:	0f 00 0b             	str    WORD PTR [ebx]
    1092:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1095:	00 00                	add    BYTE PTR [eax],al
    1097:	08 26                	or     BYTE PTR [esi],ah
    1099:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    109c:	00 00                	add    BYTE PTR [eax],al
    109e:	09 2e                	or     DWORD PTR [esi],ebp
    10a0:	01 3f                	add    DWORD PTR [edi],edi
    10a2:	19 03                	sbb    DWORD PTR [ebx],eax
    10a4:	0e                   	push   cs
    10a5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10a7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10a9:	27                   	daa    
    10aa:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10ad:	11 01                	adc    DWORD PTR [ecx],eax
    10af:	12 06                	adc    al,BYTE PTR [esi]
    10b1:	40                   	inc    eax
    10b2:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    10b8:	00 01                	add    BYTE PTR [ecx],al
    10ba:	11 01                	adc    DWORD PTR [ecx],eax
    10bc:	25 0e 13 0b 03       	and    eax,0x30b130e
    10c1:	0e                   	push   cs
    10c2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10c4:	11 01                	adc    DWORD PTR [ecx],eax
    10c6:	12 06                	adc    al,BYTE PTR [esi]
    10c8:	10 17                	adc    BYTE PTR [edi],dl
    10ca:	00 00                	add    BYTE PTR [eax],al
    10cc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10cf:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10d1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10d4:	08 00                	or     BYTE PTR [eax],al
    10d6:	00 03                	add    BYTE PTR [ebx],al
    10d8:	16                   	push   ss
    10d9:	00 03                	add    BYTE PTR [ebx],al
    10db:	0e                   	push   cs
    10dc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10de:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10e0:	49                   	dec    ecx
    10e1:	13 00                	adc    eax,DWORD PTR [eax]
    10e3:	00 04 24             	add    BYTE PTR [esp],al
    10e6:	00 0b                	add    BYTE PTR [ebx],cl
    10e8:	0b 3e                	or     edi,DWORD PTR [esi]
    10ea:	0b 03                	or     eax,DWORD PTR [ebx]
    10ec:	0e                   	push   cs
    10ed:	00 00                	add    BYTE PTR [eax],al
    10ef:	05 2e 01 3f 19       	add    eax,0x193f012e
    10f4:	03 0e                	add    ecx,DWORD PTR [esi]
    10f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10fa:	27                   	daa    
    10fb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10fe:	11 01                	adc    DWORD PTR [ecx],eax
    1100:	12 06                	adc    al,BYTE PTR [esi]
    1102:	40                   	inc    eax
    1103:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1109:	00 00                	add    BYTE PTR [eax],al
    110b:	06                   	push   es
    110c:	05 00 03 08 3a       	add    eax,0x3a080300
    1111:	0b 3b                	or     edi,DWORD PTR [ebx]
    1113:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1116:	02 18                	add    bl,BYTE PTR [eax]
    1118:	00 00                	add    BYTE PTR [eax],al
    111a:	07                   	pop    es
    111b:	34 00                	xor    al,0x0
    111d:	03 08                	add    ecx,DWORD PTR [eax]
    111f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1121:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1123:	49                   	dec    ecx
    1124:	13 02                	adc    eax,DWORD PTR [edx]
    1126:	18 00                	sbb    BYTE PTR [eax],al
    1128:	00 08                	add    BYTE PTR [eax],cl
    112a:	0f 00 0b             	str    WORD PTR [ebx]
    112d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1130:	00 00                	add    BYTE PTR [eax],al
    1132:	09 26                	or     DWORD PTR [esi],esp
    1134:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1137:	00 00                	add    BYTE PTR [eax],al
    1139:	0a 2e                	or     ch,BYTE PTR [esi]
    113b:	01 3f                	add    DWORD PTR [edi],edi
    113d:	19 03                	sbb    DWORD PTR [ebx],eax
    113f:	0e                   	push   cs
    1140:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1142:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1144:	27                   	daa    
    1145:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1148:	11 01                	adc    DWORD PTR [ecx],eax
    114a:	12 06                	adc    al,BYTE PTR [esi]
    114c:	40                   	inc    eax
    114d:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    1153:	00 01                	add    BYTE PTR [ecx],al
    1155:	11 01                	adc    DWORD PTR [ecx],eax
    1157:	25 0e 13 0b 03       	and    eax,0x30b130e
    115c:	0e                   	push   cs
    115d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    115f:	11 01                	adc    DWORD PTR [ecx],eax
    1161:	12 06                	adc    al,BYTE PTR [esi]
    1163:	10 17                	adc    BYTE PTR [edi],dl
    1165:	00 00                	add    BYTE PTR [eax],al
    1167:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    116a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    116c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    116f:	0e                   	push   cs
    1170:	00 00                	add    BYTE PTR [eax],al
    1172:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1175:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1177:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    117a:	08 00                	or     BYTE PTR [eax],al
    117c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    117f:	00 03                	add    BYTE PTR [ebx],al
    1181:	0e                   	push   cs
    1182:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1184:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1186:	49                   	dec    ecx
    1187:	13 00                	adc    eax,DWORD PTR [eax]
    1189:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    118f:	49                   	dec    ecx
    1190:	13 00                	adc    eax,DWORD PTR [eax]
    1192:	00 06                	add    BYTE PTR [esi],al
    1194:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1198:	00 00                	add    BYTE PTR [eax],al
    119a:	07                   	pop    es
    119b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    119e:	19 03                	sbb    DWORD PTR [ebx],eax
    11a0:	0e                   	push   cs
    11a1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11a3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11a5:	27                   	daa    
    11a6:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11a9:	11 01                	adc    DWORD PTR [ecx],eax
    11ab:	12 06                	adc    al,BYTE PTR [esi]
    11ad:	40                   	inc    eax
    11ae:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    11b4:	00 00                	add    BYTE PTR [eax],al
    11b6:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    11bc:	0b 3b                	or     edi,DWORD PTR [ebx]
    11be:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11c1:	02 18                	add    bl,BYTE PTR [eax]
    11c3:	00 00                	add    BYTE PTR [eax],al
    11c5:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    11c8:	03 08                	add    ecx,DWORD PTR [eax]
    11ca:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11cc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11ce:	49                   	dec    ecx
    11cf:	13 02                	adc    eax,DWORD PTR [edx]
    11d1:	18 00                	sbb    BYTE PTR [eax],al
    11d3:	00 0a                	add    BYTE PTR [edx],cl
    11d5:	34 00                	xor    al,0x0
    11d7:	03 0e                	add    ecx,DWORD PTR [esi]
    11d9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11db:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11dd:	49                   	dec    ecx
    11de:	13 00                	adc    eax,DWORD PTR [eax]
    11e0:	00 0b                	add    BYTE PTR [ebx],cl
    11e2:	34 00                	xor    al,0x0
    11e4:	03 08                	add    ecx,DWORD PTR [eax]
    11e6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11e8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11ea:	49                   	dec    ecx
    11eb:	13 00                	adc    eax,DWORD PTR [eax]
    11ed:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    11f0:	00 03                	add    BYTE PTR [ebx],al
    11f2:	0e                   	push   cs
    11f3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f7:	49                   	dec    ecx
    11f8:	13 02                	adc    eax,DWORD PTR [edx]
    11fa:	18 00                	sbb    BYTE PTR [eax],al
    11fc:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1202:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1204:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1206:	49                   	dec    ecx
    1207:	13 3f                	adc    edi,DWORD PTR [edi]
    1209:	19 02                	sbb    DWORD PTR [edx],eax
    120b:	18 00                	sbb    BYTE PTR [eax],al
    120d:	00 00                	add    BYTE PTR [eax],al
    120f:	01 11                	add    DWORD PTR [ecx],edx
    1211:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1217:	0e                   	push   cs
    1218:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    121a:	11 01                	adc    DWORD PTR [ecx],eax
    121c:	12 06                	adc    al,BYTE PTR [esi]
    121e:	10 17                	adc    BYTE PTR [edi],dl
    1220:	00 00                	add    BYTE PTR [eax],al
    1222:	02 2e                	add    ch,BYTE PTR [esi]
    1224:	01 3f                	add    DWORD PTR [edi],edi
    1226:	19 03                	sbb    DWORD PTR [ebx],eax
    1228:	0e                   	push   cs
    1229:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    122b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    122d:	27                   	daa    
    122e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1231:	11 01                	adc    DWORD PTR [ecx],eax
    1233:	12 06                	adc    al,BYTE PTR [esi]
    1235:	40                   	inc    eax
    1236:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    123c:	00 00                	add    BYTE PTR [eax],al
    123e:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    1244:	0b 3b                	or     edi,DWORD PTR [ebx]
    1246:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1249:	02 18                	add    bl,BYTE PTR [eax]
    124b:	00 00                	add    BYTE PTR [eax],al
    124d:	04 0f                	add    al,0xf
    124f:	00 0b                	add    BYTE PTR [ebx],cl
    1251:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1254:	00 00                	add    BYTE PTR [eax],al
    1256:	05 24 00 0b 0b       	add    eax,0xb0b0024
    125b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    125e:	0e                   	push   cs
    125f:	00 00                	add    BYTE PTR [eax],al
    1261:	06                   	push   es
    1262:	24 00                	and    al,0x0
    1264:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1266:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1269:	08 00                	or     BYTE PTR [eax],al
    126b:	00 00                	add    BYTE PTR [eax],al
    126d:	01 11                	add    DWORD PTR [ecx],edx
    126f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1275:	0e                   	push   cs
    1276:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1278:	11 01                	adc    DWORD PTR [ecx],eax
    127a:	12 06                	adc    al,BYTE PTR [esi]
    127c:	10 17                	adc    BYTE PTR [edi],dl
    127e:	00 00                	add    BYTE PTR [eax],al
    1280:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1283:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1285:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1288:	0e                   	push   cs
    1289:	00 00                	add    BYTE PTR [eax],al
    128b:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    128e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1290:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1293:	08 00                	or     BYTE PTR [eax],al
    1295:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1298:	00 03                	add    BYTE PTR [ebx],al
    129a:	0e                   	push   cs
    129b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    129d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    129f:	49                   	dec    ecx
    12a0:	13 00                	adc    eax,DWORD PTR [eax]
    12a2:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    12a8:	49                   	dec    ecx
    12a9:	13 00                	adc    eax,DWORD PTR [eax]
    12ab:	00 06                	add    BYTE PTR [esi],al
    12ad:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    12b1:	00 00                	add    BYTE PTR [eax],al
    12b3:	07                   	pop    es
    12b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    12b7:	19 03                	sbb    DWORD PTR [ebx],eax
    12b9:	0e                   	push   cs
    12ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12be:	27                   	daa    
    12bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    12c2:	11 01                	adc    DWORD PTR [ecx],eax
    12c4:	12 06                	adc    al,BYTE PTR [esi]
    12c6:	40                   	inc    eax
    12c7:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    12cd:	00 00                	add    BYTE PTR [eax],al
    12cf:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    12d5:	0b 3b                	or     edi,DWORD PTR [ebx]
    12d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12da:	02 18                	add    bl,BYTE PTR [eax]
    12dc:	00 00                	add    BYTE PTR [eax],al
    12de:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    12e1:	03 08                	add    ecx,DWORD PTR [eax]
    12e3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12e5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12e7:	49                   	dec    ecx
    12e8:	13 02                	adc    eax,DWORD PTR [edx]
    12ea:	18 00                	sbb    BYTE PTR [eax],al
    12ec:	00 0a                	add    BYTE PTR [edx],cl
    12ee:	34 00                	xor    al,0x0
    12f0:	03 0e                	add    ecx,DWORD PTR [esi]
    12f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12f6:	49                   	dec    ecx
    12f7:	13 00                	adc    eax,DWORD PTR [eax]
    12f9:	00 0b                	add    BYTE PTR [ebx],cl
    12fb:	34 00                	xor    al,0x0
    12fd:	03 08                	add    ecx,DWORD PTR [eax]
    12ff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1301:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1303:	49                   	dec    ecx
    1304:	13 00                	adc    eax,DWORD PTR [eax]
    1306:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1309:	00 03                	add    BYTE PTR [ebx],al
    130b:	0e                   	push   cs
    130c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    130e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1310:	49                   	dec    ecx
    1311:	13 3f                	adc    edi,DWORD PTR [edi]
    1313:	19 02                	sbb    DWORD PTR [edx],eax
    1315:	18 00                	sbb    BYTE PTR [eax],al
    1317:	00 00                	add    BYTE PTR [eax],al
    1319:	01 11                	add    DWORD PTR [ecx],edx
    131b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1321:	0e                   	push   cs
    1322:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1324:	11 01                	adc    DWORD PTR [ecx],eax
    1326:	12 06                	adc    al,BYTE PTR [esi]
    1328:	10 17                	adc    BYTE PTR [edi],dl
    132a:	00 00                	add    BYTE PTR [eax],al
    132c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    132f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1331:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1334:	0e                   	push   cs
    1335:	00 00                	add    BYTE PTR [eax],al
    1337:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    133a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    133c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    133f:	08 00                	or     BYTE PTR [eax],al
    1341:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1344:	00 03                	add    BYTE PTR [ebx],al
    1346:	0e                   	push   cs
    1347:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1349:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    134b:	49                   	dec    ecx
    134c:	13 00                	adc    eax,DWORD PTR [eax]
    134e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1354:	49                   	dec    ecx
    1355:	13 00                	adc    eax,DWORD PTR [eax]
    1357:	00 06                	add    BYTE PTR [esi],al
    1359:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    135c:	19 03                	sbb    DWORD PTR [ebx],eax
    135e:	0e                   	push   cs
    135f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1361:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1363:	27                   	daa    
    1364:	19 11                	sbb    DWORD PTR [ecx],edx
    1366:	01 12                	add    DWORD PTR [edx],edx
    1368:	06                   	push   es
    1369:	40                   	inc    eax
    136a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1370:	00 00                	add    BYTE PTR [eax],al
    1372:	07                   	pop    es
    1373:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1378:	0b 3b                	or     edi,DWORD PTR [ebx]
    137a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    137d:	02 18                	add    bl,BYTE PTR [eax]
    137f:	00 00                	add    BYTE PTR [eax],al
    1381:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    1384:	03 08                	add    ecx,DWORD PTR [eax]
    1386:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1388:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    138a:	49                   	dec    ecx
    138b:	13 02                	adc    eax,DWORD PTR [edx]
    138d:	18 00                	sbb    BYTE PTR [eax],al
    138f:	00 09                	add    BYTE PTR [ecx],cl
    1391:	34 00                	xor    al,0x0
    1393:	03 0e                	add    ecx,DWORD PTR [esi]
    1395:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1397:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1399:	49                   	dec    ecx
    139a:	13 3f                	adc    edi,DWORD PTR [edi]
    139c:	19 02                	sbb    DWORD PTR [edx],eax
    139e:	18 00                	sbb    BYTE PTR [eax],al
    13a0:	00 00                	add    BYTE PTR [eax],al
    13a2:	01 11                	add    DWORD PTR [ecx],edx
    13a4:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    13aa:	0e                   	push   cs
    13ab:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    13ad:	11 01                	adc    DWORD PTR [ecx],eax
    13af:	12 06                	adc    al,BYTE PTR [esi]
    13b1:	10 17                	adc    BYTE PTR [edi],dl
    13b3:	00 00                	add    BYTE PTR [eax],al
    13b5:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    13b8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13ba:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13bd:	0e                   	push   cs
    13be:	00 00                	add    BYTE PTR [eax],al
    13c0:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    13c3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13c5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13c8:	08 00                	or     BYTE PTR [eax],al
    13ca:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    13cd:	00 03                	add    BYTE PTR [ebx],al
    13cf:	0e                   	push   cs
    13d0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13d2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13d4:	49                   	dec    ecx
    13d5:	13 00                	adc    eax,DWORD PTR [eax]
    13d7:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    13dd:	49                   	dec    ecx
    13de:	13 00                	adc    eax,DWORD PTR [eax]
    13e0:	00 06                	add    BYTE PTR [esi],al
    13e2:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13e5:	19 03                	sbb    DWORD PTR [ebx],eax
    13e7:	0e                   	push   cs
    13e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13ec:	27                   	daa    
    13ed:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13f0:	11 01                	adc    DWORD PTR [ecx],eax
    13f2:	12 06                	adc    al,BYTE PTR [esi]
    13f4:	40                   	inc    eax
    13f5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13fb:	00 00                	add    BYTE PTR [eax],al
    13fd:	07                   	pop    es
    13fe:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1403:	0b 3b                	or     edi,DWORD PTR [ebx]
    1405:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1408:	02 18                	add    bl,BYTE PTR [eax]
    140a:	00 00                	add    BYTE PTR [eax],al
    140c:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    140f:	03 08                	add    ecx,DWORD PTR [eax]
    1411:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1413:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1415:	49                   	dec    ecx
    1416:	13 02                	adc    eax,DWORD PTR [edx]
    1418:	18 00                	sbb    BYTE PTR [eax],al
    141a:	00 09                	add    BYTE PTR [ecx],cl
    141c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    141f:	19 03                	sbb    DWORD PTR [ebx],eax
    1421:	0e                   	push   cs
    1422:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1424:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1426:	27                   	daa    
    1427:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    142a:	11 01                	adc    DWORD PTR [ecx],eax
    142c:	12 06                	adc    al,BYTE PTR [esi]
    142e:	40                   	inc    eax
    142f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1435:	00 00                	add    BYTE PTR [eax],al
    1437:	0a 01                	or     al,BYTE PTR [ecx]
    1439:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    143c:	01 13                	add    DWORD PTR [ebx],edx
    143e:	00 00                	add    BYTE PTR [eax],al
    1440:	0b 21                	or     esp,DWORD PTR [ecx]
    1442:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1445:	2f                   	das    
    1446:	0b 00                	or     eax,DWORD PTR [eax]
    1448:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    144b:	00 03                	add    BYTE PTR [ebx],al
    144d:	0e                   	push   cs
    144e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1450:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1452:	49                   	dec    ecx
    1453:	13 02                	adc    eax,DWORD PTR [edx]
    1455:	18 00                	sbb    BYTE PTR [eax],al
    1457:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    145d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    145f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1461:	49                   	dec    ecx
    1462:	13 3f                	adc    edi,DWORD PTR [edi]
    1464:	19 02                	sbb    DWORD PTR [edx],eax
    1466:	18 00                	sbb    BYTE PTR [eax],al
    1468:	00 00                	add    BYTE PTR [eax],al
    146a:	01 11                	add    DWORD PTR [ecx],edx
    146c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1472:	0e                   	push   cs
    1473:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1475:	11 01                	adc    DWORD PTR [ecx],eax
    1477:	12 06                	adc    al,BYTE PTR [esi]
    1479:	10 17                	adc    BYTE PTR [edi],dl
    147b:	00 00                	add    BYTE PTR [eax],al
    147d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1480:	03 0e                	add    ecx,DWORD PTR [esi]
    1482:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1484:	49                   	dec    ecx
    1485:	13 3a                	adc    edi,DWORD PTR [edx]
    1487:	0b 3b                	or     edi,DWORD PTR [ebx]
    1489:	0b 01                	or     eax,DWORD PTR [ecx]
    148b:	13 00                	adc    eax,DWORD PTR [eax]
    148d:	00 03                	add    BYTE PTR [ebx],al
    148f:	28 00                	sub    BYTE PTR [eax],al
    1491:	03 0e                	add    ecx,DWORD PTR [esi]
    1493:	1c 0b                	sbb    al,0xb
    1495:	00 00                	add    BYTE PTR [eax],al
    1497:	04 28                	add    al,0x28
    1499:	00 03                	add    BYTE PTR [ebx],al
    149b:	0e                   	push   cs
    149c:	1c 05                	sbb    al,0x5
    149e:	00 00                	add    BYTE PTR [eax],al
    14a0:	05 24 00 0b 0b       	add    eax,0xb0b0024
    14a5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14a8:	0e                   	push   cs
    14a9:	00 00                	add    BYTE PTR [eax],al
    14ab:	06                   	push   es
    14ac:	24 00                	and    al,0x0
    14ae:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14b0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14b3:	08 00                	or     BYTE PTR [eax],al
    14b5:	00 07                	add    BYTE PTR [edi],al
    14b7:	16                   	push   ss
    14b8:	00 03                	add    BYTE PTR [ebx],al
    14ba:	0e                   	push   cs
    14bb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14bd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14bf:	49                   	dec    ecx
    14c0:	13 00                	adc    eax,DWORD PTR [eax]
    14c2:	00 08                	add    BYTE PTR [eax],cl
    14c4:	13 01                	adc    eax,DWORD PTR [ecx]
    14c6:	03 08                	add    ecx,DWORD PTR [eax]
    14c8:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14ca:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14cc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14ce:	01 13                	add    DWORD PTR [ebx],edx
    14d0:	00 00                	add    BYTE PTR [eax],al
    14d2:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    14d8:	0b 3b                	or     edi,DWORD PTR [ebx]
    14da:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14dd:	38 0b                	cmp    BYTE PTR [ebx],cl
    14df:	00 00                	add    BYTE PTR [eax],al
    14e1:	0a 0f                	or     cl,BYTE PTR [edi]
    14e3:	00 0b                	add    BYTE PTR [ebx],cl
    14e5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    14e8:	00 00                	add    BYTE PTR [eax],al
    14ea:	0b 26                	or     esp,DWORD PTR [esi]
    14ec:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    14ef:	00 00                	add    BYTE PTR [eax],al
    14f1:	0c 2e                	or     al,0x2e
    14f3:	01 3f                	add    DWORD PTR [edi],edi
    14f5:	19 03                	sbb    DWORD PTR [ebx],eax
    14f7:	0e                   	push   cs
    14f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14fc:	49                   	dec    ecx
    14fd:	13 11                	adc    edx,DWORD PTR [ecx]
    14ff:	01 12                	add    DWORD PTR [edx],edx
    1501:	06                   	push   es
    1502:	40                   	inc    eax
    1503:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1509:	00 00                	add    BYTE PTR [eax],al
    150b:	0d 34 00 03 0e       	or     eax,0xe030034
    1510:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1512:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1514:	49                   	dec    ecx
    1515:	13 02                	adc    eax,DWORD PTR [edx]
    1517:	18 00                	sbb    BYTE PTR [eax],al
    1519:	00 0e                	add    BYTE PTR [esi],cl
    151b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    151e:	19 03                	sbb    DWORD PTR [ebx],eax
    1520:	0e                   	push   cs
    1521:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1523:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1525:	27                   	daa    
    1526:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1529:	11 01                	adc    DWORD PTR [ecx],eax
    152b:	12 06                	adc    al,BYTE PTR [esi]
    152d:	40                   	inc    eax
    152e:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1534:	00 00                	add    BYTE PTR [eax],al
    1536:	0f 05                	syscall 
    1538:	00 03                	add    BYTE PTR [ebx],al
    153a:	0e                   	push   cs
    153b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    153d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    153f:	49                   	dec    ecx
    1540:	13 02                	adc    eax,DWORD PTR [edx]
    1542:	18 00                	sbb    BYTE PTR [eax],al
    1544:	00 10                	add    BYTE PTR [eax],dl
    1546:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1549:	19 03                	sbb    DWORD PTR [ebx],eax
    154b:	0e                   	push   cs
    154c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    154e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1550:	27                   	daa    
    1551:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1554:	11 01                	adc    DWORD PTR [ecx],eax
    1556:	12 06                	adc    al,BYTE PTR [esi]
    1558:	40                   	inc    eax
    1559:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    155f:	00 00                	add    BYTE PTR [eax],al
    1561:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1564:	03 08                	add    ecx,DWORD PTR [eax]
    1566:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1568:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    156a:	49                   	dec    ecx
    156b:	13 02                	adc    eax,DWORD PTR [edx]
    156d:	18 00                	sbb    BYTE PTR [eax],al
    156f:	00 12                	add    BYTE PTR [edx],dl
    1571:	34 00                	xor    al,0x0
    1573:	03 0e                	add    ecx,DWORD PTR [esi]
    1575:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1577:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1579:	49                   	dec    ecx
    157a:	13 3f                	adc    edi,DWORD PTR [edi]
    157c:	19 02                	sbb    DWORD PTR [edx],eax
    157e:	18 00                	sbb    BYTE PTR [eax],al
    1580:	00 13                	add    BYTE PTR [ebx],dl
    1582:	01 01                	add    DWORD PTR [ecx],eax
    1584:	49                   	dec    ecx
    1585:	13 01                	adc    eax,DWORD PTR [ecx]
    1587:	13 00                	adc    eax,DWORD PTR [eax]
    1589:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    158c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    158f:	2f                   	das    
    1590:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	63 01                	arpl   WORD PTR [ecx],ax
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	05 03 00 00 04       	add    eax,0x4000003
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 00                	add    BYTE PTR [eax],al
  4f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
  52:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	4a                   	dec    edx
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 9f 49 02 00 00    	add    BYTE PTR [edi+0x249],bl
	...
  80:	1c 00                	sbb    al,0x0
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	60                   	pusha  
  87:	06                   	push   es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	9f                   	lahf   
  94:	6b 02 00             	imul   eax,DWORD PTR [edx],0x0
	...
  9f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	16                   	push   ss
  a7:	08 00                	or     BYTE PTR [eax],al
  a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	6c                   	ins    BYTE PTR es:[edi],dx
  b1:	06                   	push   es
  b2:	00 9f f2 00 00 00    	add    BYTE PTR [edi+0xf2],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	1b 0b                	sbb    ecx,DWORD PTR [ebx]
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	60                   	pusha  
  d1:	07                   	pop    es
  d2:	00 9f 66 01 00 00    	add    BYTE PTR [edi+0x166],bl
	...
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	d4 0d                	aam    0xd
  e8:	00 00                	add    BYTE PTR [eax],al
  ea:	04 00                	add    al,0x0
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	c8 08 00 9f          	enter  0x8,0x9f
  f4:	5d                   	pop    ebp
  f5:	0a 00                	or     al,BYTE PTR [eax]
	...
  ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	67 17                	addr16 pop ss
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	28 13                	sub    BYTE PTR [ebx],dl
 112:	00 9f 6d 03 00 00    	add    BYTE PTR [edi+0x36d],bl
	...
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	dd 1a                	fstp   QWORD PTR [edx]
 128:	00 00                	add    BYTE PTR [eax],al
 12a:	04 00                	add    al,0x0
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	98                   	cwde   
 131:	16                   	push   ss
 132:	00 9f 9b 01 00 00    	add    BYTE PTR [edi+0x19b],bl
	...
 140:	1c 00                	sbb    al,0x0
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	cb                   	retf   
 147:	1c 00                	sbb    al,0x0
 149:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	34 18                	xor    al,0x18
 152:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
	...
 160:	14 00                	adc    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	ba 1e 00 00 04       	mov    edx,0x400001e
	...
 177:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 17a:	00 00                	add    BYTE PTR [eax],al
 17c:	02 00                	add    al,BYTE PTR [eax]
 17e:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
 17f:	1f                   	pop    ds
 180:	00 00                	add    BYTE PTR [eax],al
 182:	04 00                	add    al,0x0
 184:	00 00                	add    BYTE PTR [eax],al
 186:	00 00                	add    BYTE PTR [eax],al
 188:	1c 19                	sbb    al,0x19
 18a:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
	...
 198:	1c 00                	sbb    al,0x0
 19a:	00 00                	add    BYTE PTR [eax],al
 19c:	02 00                	add    al,BYTE PTR [eax]
 19e:	95                   	xchg   ebp,eax
 19f:	21 00                	and    DWORD PTR [eax],eax
 1a1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1a4:	00 00                	add    BYTE PTR [eax],al
 1a6:	00 00                	add    BYTE PTR [eax],al
 1a8:	48                   	dec    eax
 1a9:	19 00                	sbb    DWORD PTR [eax],eax
 1ab:	9f                   	lahf   
 1ac:	18 07                	sbb    BYTE PTR [edi],al
	...
 1b6:	00 00                	add    BYTE PTR [eax],al
 1b8:	1c 00                	sbb    al,0x0
 1ba:	00 00                	add    BYTE PTR [eax],al
 1bc:	02 00                	add    al,BYTE PTR [eax]
 1be:	56                   	push   esi
 1bf:	25 00 00 04 00       	and    eax,0x40000
 1c4:	00 00                	add    BYTE PTR [eax],al
 1c6:	00 00                	add    BYTE PTR [eax],al
 1c8:	60                   	pusha  
 1c9:	20 00                	and    BYTE PTR [eax],al
 1cb:	9f                   	lahf   
 1cc:	84 00                	test   BYTE PTR [eax],al
	...
 1d6:	00 00                	add    BYTE PTR [eax],al
 1d8:	1c 00                	sbb    al,0x0
 1da:	00 00                	add    BYTE PTR [eax],al
 1dc:	02 00                	add    al,BYTE PTR [eax]
 1de:	b2 29                	mov    dl,0x29
 1e0:	00 00                	add    BYTE PTR [eax],al
 1e2:	04 00                	add    al,0x0
 1e4:	00 00                	add    BYTE PTR [eax],al
 1e6:	00 00                	add    BYTE PTR [eax],al
 1e8:	e4 20                	in     al,0x20
 1ea:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
	...
 1f8:	1c 00                	sbb    al,0x0
 1fa:	00 00                	add    BYTE PTR [eax],al
 1fc:	02 00                	add    al,BYTE PTR [eax]
 1fe:	63 2b                	arpl   WORD PTR [ebx],bp
 200:	00 00                	add    BYTE PTR [eax],al
 202:	04 00                	add    al,0x0
 204:	00 00                	add    BYTE PTR [eax],al
 206:	00 00                	add    BYTE PTR [eax],al
 208:	d0 21                	shl    BYTE PTR [ecx],1
 20a:	00 9f 5e 00 00 00    	add    BYTE PTR [edi+0x5e],bl
	...
 218:	1c 00                	sbb    al,0x0
 21a:	00 00                	add    BYTE PTR [eax],al
 21c:	02 00                	add    al,BYTE PTR [eax]
 21e:	d3 2c 00             	shr    DWORD PTR [eax+eax*1],cl
 221:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 224:	00 00                	add    BYTE PTR [eax],al
 226:	00 00                	add    BYTE PTR [eax],al
 228:	30 22                	xor    BYTE PTR [edx],ah
 22a:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
	...
 238:	1c 00                	sbb    al,0x0
 23a:	00 00                	add    BYTE PTR [eax],al
 23c:	02 00                	add    al,BYTE PTR [eax]
 23e:	a0 2e 00 00 04       	mov    al,ds:0x400002e
 243:	00 00                	add    BYTE PTR [eax],al
 245:	00 00                	add    BYTE PTR [eax],al
 247:	00 f8                	add    al,bh
 249:	22 00                	and    al,BYTE PTR [eax]
 24b:	9f                   	lahf   
 24c:	89 00                	mov    DWORD PTR [eax],eax
	...
 256:	00 00                	add    BYTE PTR [eax],al
 258:	1c 00                	sbb    al,0x0
 25a:	00 00                	add    BYTE PTR [eax],al
 25c:	02 00                	add    al,BYTE PTR [eax]
 25e:	f0 2f                	lock das 
 260:	00 00                	add    BYTE PTR [eax],al
 262:	04 00                	add    al,0x0
 264:	00 00                	add    BYTE PTR [eax],al
 266:	00 00                	add    BYTE PTR [eax],al
 268:	84 23                	test   BYTE PTR [ebx],ah
 26a:	00 9f 62 00 00 00    	add    BYTE PTR [edi+0x62],bl
	...
 278:	1c 00                	sbb    al,0x0
 27a:	00 00                	add    BYTE PTR [eax],al
 27c:	02 00                	add    al,BYTE PTR [eax]
 27e:	be 30 00 00 04       	mov    esi,0x4000030
 283:	00 00                	add    BYTE PTR [eax],al
 285:	00 00                	add    BYTE PTR [eax],al
 287:	00 e8                	add    al,ch
 289:	23 00                	and    eax,DWORD PTR [eax]
 28b:	9f                   	lahf   
 28c:	ce                   	into   
	...
 295:	00 00                	add    BYTE PTR [eax],al
 297:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 29a:	00 00                	add    BYTE PTR [eax],al
 29c:	02 00                	add    al,BYTE PTR [eax]
 29e:	a0 31 00 00 04       	mov    al,ds:0x4000031
 2a3:	00 00                	add    BYTE PTR [eax],al
 2a5:	00 00                	add    BYTE PTR [eax],al
 2a7:	00 b8 24 00 9f 80    	add    BYTE PTR [eax-0x7f60ffdc],bh
	...
 2b5:	00 00                	add    BYTE PTR [eax],al
 2b7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2ba:	00 00                	add    BYTE PTR [eax],al
 2bc:	02 00                	add    al,BYTE PTR [eax]
 2be:	94                   	xchg   esp,eax
 2bf:	32 00                	xor    al,BYTE PTR [eax]
 2c1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2c4:	00 00                	add    BYTE PTR [eax],al
 2c6:	00 00                	add    BYTE PTR [eax],al
 2c8:	38 25 00 9f 7d 01    	cmp    BYTE PTR ds:0x17d9f00,ah
	...
 2d6:	00 00                	add    BYTE PTR [eax],al
 2d8:	1c 00                	sbb    al,0x0
 2da:	00 00                	add    BYTE PTR [eax],al
 2dc:	02 00                	add    al,BYTE PTR [eax]
 2de:	2a 34 00             	sub    dh,BYTE PTR [eax+eax*1]
 2e1:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2e4:	00 00                	add    BYTE PTR [eax],al
 2e6:	00 00                	add    BYTE PTR [eax],al
 2e8:	b8 26 00 9f 1d       	mov    eax,0x1d9f0026
	...
 2f5:	00 00                	add    BYTE PTR [eax],al
 2f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2fa:	00 00                	add    BYTE PTR [eax],al
 2fc:	02 00                	add    al,BYTE PTR [eax]
 2fe:	9a 34 00 00 04 00 00 	call   0x0:0x4000034
 305:	00 00                	add    BYTE PTR [eax],al
 307:	00 d8                	add    al,bl
 309:	26 00 9f 9c 01 00 00 	add    BYTE PTR es:[edi+0x19c],bl
	...
 318:	1c 00                	sbb    al,0x0
 31a:	00 00                	add    BYTE PTR [eax],al
 31c:	02 00                	add    al,BYTE PTR [eax]
 31e:	2e 36 00 00          	cs add BYTE PTR cs:ss:[eax],al
 322:	04 00                	add    al,0x0
 324:	00 00                	add    BYTE PTR [eax],al
 326:	00 00                	add    BYTE PTR [eax],al
 328:	74 28                	je     352 <sysEnter_Vector-0x12fcae>
 32a:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
	...
 338:	1c 00                	sbb    al,0x0
 33a:	00 00                	add    BYTE PTR [eax],al
 33c:	02 00                	add    al,BYTE PTR [eax]
 33e:	94                   	xchg   esp,eax
 33f:	37                   	aaa    
 340:	00 00                	add    BYTE PTR [eax],al
 342:	04 00                	add    al,0x0
 344:	00 00                	add    BYTE PTR [eax],al
 346:	00 00                	add    BYTE PTR [eax],al
 348:	2c 29                	sub    al,0x29
 34a:	00 9f 8b 00 00 00    	add    BYTE PTR [edi+0x8b],bl
	...
 358:	1c 00                	sbb    al,0x0
 35a:	00 00                	add    BYTE PTR [eax],al
 35c:	02 00                	add    al,BYTE PTR [eax]
 35e:	2b 39                	sub    edi,DWORD PTR [ecx]
 360:	00 00                	add    BYTE PTR [eax],al
 362:	04 00                	add    al,0x0
 364:	00 00                	add    BYTE PTR [eax],al
 366:	00 00                	add    BYTE PTR [eax],al
 368:	b8 29 00 9f cf       	mov    eax,0xcf9f0029
 36d:	0c 00                	or     al,0x0
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	d0 00                	rol    BYTE PTR [eax],1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	b0 00                	mov    al,0x0
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 2f                	add    BYTE PTR [edi],ch
      44:	68 6f 6d 65 2f       	push   0x2f656d6f
      49:	79 6f                	jns    ba <sysEnter_Vector-0x12ff46>
      4b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      52:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      55:	73 73                	jae    ca <sysEnter_Vector-0x12ff36>
      57:	2f                   	das    
      58:	6c                   	ins    BYTE PTR es:[edi],dx
      59:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      60:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      66:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      6c:	78 2d                	js     9b <sysEnter_Vector-0x12ff65>
      6e:	67 6e                	outs   dx,BYTE PTR ds:[si]
      70:	75 2f                	jne    a1 <sysEnter_Vector-0x12ff5f>
      72:	35 2e 33 2e 30       	xor    eax,0x302e332e
      77:	2f                   	das    
      78:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      7f:	00 00                	add    BYTE PTR [eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
      8f:	6c                   	ins    BYTE PTR es:[edi],dx
      90:	6c                   	ins    BYTE PTR es:[edi],dx
      91:	6f                   	outs   dx,DWORD PTR ds:[esi]
      92:	63 2e                	arpl   WORD PTR [esi],bp
      94:	68 00 02 00 00       	push   0x200
      99:	6c                   	ins    BYTE PTR es:[edi],dx
      9a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      a1:	4f                   	dec    edi
      a2:	53                   	push   ebx
      a3:	2e                   	cs
      a4:	68 00 02 00 00       	push   0x200
      a9:	73 74                	jae    11f <sysEnter_Vector-0x12fee1>
      ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      b2:	63 
      b3:	2e                   	cs
      b4:	68 00 03 00 00       	push   0x300
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	05 02 00 00 00       	add    eax,0x2
      c0:	9f                   	lahf   
      c1:	1a c9                	sbb    cl,cl
      c3:	2f                   	das    
      c4:	f3 72 cb             	repz jb 92 <sysEnter_Vector-0x12ff6e>
      c7:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      cc:	72 cb                	jb     99 <sysEnter_Vector-0x12ff67>
      ce:	3d 02 02 00 01       	cmp    eax,0x1000202
      d3:	01 03                	add    DWORD PTR [ebx],eax
      d5:	01 00                	add    DWORD PTR [eax],eax
      d7:	00 02                	add    BYTE PTR [edx],al
      d9:	00 b1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dh
      df:	01 fb                	add    ebx,edi
      e1:	0e                   	push   cs
      e2:	0d 00 01 01 01       	or     eax,0x1010100
      e7:	01 00                	add    DWORD PTR [eax],eax
      e9:	00 00                	add    BYTE PTR [eax],al
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 01                	add    BYTE PTR [ecx],al
      ef:	2e                   	cs
      f0:	2e                   	cs
      f1:	2f                   	das    
      f2:	2e                   	cs
      f3:	2e                   	cs
      f4:	2f                   	das    
      f5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      f9:	6a 2f                	push   0x2f
      fb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      fe:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     105:	63 2f                	arpl   WORD PTR [edi],bp
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	72 69                	jb     174 <sysEnter_Vector-0x12fe8c>
     10b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10c:	67 73 00             	addr16 jae 10f <sysEnter_Vector-0x12fef1>
     10f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     116:	00 2f                	add    BYTE PTR [edi],ch
     118:	68 6f 6d 65 2f       	push   0x2f656d6f
     11d:	79 6f                	jns    18e <sysEnter_Vector-0x12fe72>
     11f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     126:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     129:	73 73                	jae    19e <sysEnter_Vector-0x12fe62>
     12b:	2f                   	das    
     12c:	6c                   	ins    BYTE PTR es:[edi],dx
     12d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     134:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     140:	78 2d                	js     16f <sysEnter_Vector-0x12fe91>
     142:	67 6e                	outs   dx,BYTE PTR ds:[si]
     144:	75 2f                	jne    175 <sysEnter_Vector-0x12fe8b>
     146:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14b:	2f                   	das    
     14c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     153:	00 00                	add    BYTE PTR [eax],al
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	73 70                	jae    1cb <sysEnter_Vector-0x12fe35>
     15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     15f:	01 00                	add    DWORD PTR [eax],eax
     161:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     164:	6c                   	ins    BYTE PTR es:[edi],dx
     165:	6c                   	ins    BYTE PTR es:[edi],dx
     166:	6f                   	outs   dx,DWORD PTR ds:[esi]
     167:	63 2e                	arpl   WORD PTR [esi],bp
     169:	68 00 02 00 00       	push   0x200
     16e:	6c                   	ins    BYTE PTR es:[edi],dx
     16f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     176:	4f                   	dec    edi
     177:	53                   	push   ebx
     178:	2e                   	cs
     179:	68 00 02 00 00       	push   0x200
     17e:	73 74                	jae    1f4 <sysEnter_Vector-0x12fe0c>
     180:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     187:	63 
     188:	2e                   	cs
     189:	68 00 03 00 00       	push   0x300
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	05 02 70 00 00       	add    eax,0x7002
     195:	9f                   	lahf   
     196:	03 25 01 e7 9f 59    	add    esp,DWORD PTR ds:0x599fe701
     19c:	75 00                	jne    19e <sysEnter_Vector-0x12fe62>
     19e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1a1:	aa                   	stos   BYTE PTR es:[edi],al
     1a2:	00 02                	add    BYTE PTR [edx],al
     1a4:	04 01                	add    al,0x1
     1a6:	06                   	push   es
     1a7:	3c 00                	cmp    al,0x0
     1a9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1ac:	06                   	push   es
     1ad:	73 00                	jae    1af <sysEnter_Vector-0x12fe51>
     1af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1b2:	06                   	push   es
     1b3:	82                   	(bad)  
     1b4:	06                   	push   es
     1b5:	6d                   	ins    DWORD PTR es:[edi],dx
     1b6:	91                   	xchg   ecx,eax
     1b7:	4d                   	dec    ebp
     1b8:	e7 9f                	out    0x9f,eax
     1ba:	59                   	pop    ecx
     1bb:	75 00                	jne    1bd <sysEnter_Vector-0x12fe43>
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	aa                   	stos   BYTE PTR es:[edi],al
     1c1:	00 02                	add    BYTE PTR [edx],al
     1c3:	04 01                	add    al,0x1
     1c5:	06                   	push   es
     1c6:	3c 00                	cmp    al,0x0
     1c8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1cb:	06                   	push   es
     1cc:	73 00                	jae    1ce <sysEnter_Vector-0x12fe32>
     1ce:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1d1:	06                   	push   es
     1d2:	82                   	(bad)  
     1d3:	06                   	push   es
     1d4:	6d                   	ins    DWORD PTR es:[edi],dx
     1d5:	91                   	xchg   ecx,eax
     1d6:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1d9:	01 01                	add    DWORD PTR [ecx],eax
     1db:	d4 00                	aam    0x0
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	02 00                	add    al,BYTE PTR [eax]
     1e1:	b0 00                	mov    al,0x0
     1e3:	00 00                	add    BYTE PTR [eax],al
     1e5:	01 01                	add    DWORD PTR [ecx],eax
     1e7:	fb                   	sti    
     1e8:	0e                   	push   cs
     1e9:	0d 00 01 01 01       	or     eax,0x1010100
     1ee:	01 00                	add    DWORD PTR [eax],eax
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	01 00                	add    DWORD PTR [eax],eax
     1f4:	00 01                	add    BYTE PTR [ecx],al
     1f6:	2e                   	cs
     1f7:	2e                   	cs
     1f8:	2f                   	das    
     1f9:	2e                   	cs
     1fa:	2e                   	cs
     1fb:	2f                   	das    
     1fc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     200:	6a 2f                	push   0x2f
     202:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     205:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     20c:	63 2f                	arpl   WORD PTR [edi],bp
     20e:	73 74                	jae    284 <sysEnter_Vector-0x12fd7c>
     210:	72 69                	jb     27b <sysEnter_Vector-0x12fd85>
     212:	6e                   	outs   dx,BYTE PTR ds:[esi]
     213:	67 73 00             	addr16 jae 216 <sysEnter_Vector-0x12fdea>
     216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     21d:	00 2f                	add    BYTE PTR [edi],ch
     21f:	68 6f 6d 65 2f       	push   0x2f656d6f
     224:	79 6f                	jns    295 <sysEnter_Vector-0x12fd6b>
     226:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     22d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     230:	73 73                	jae    2a5 <sysEnter_Vector-0x12fd5b>
     232:	2f                   	das    
     233:	6c                   	ins    BYTE PTR es:[edi],dx
     234:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     23b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     241:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     247:	78 2d                	js     276 <sysEnter_Vector-0x12fd8a>
     249:	67 6e                	outs   dx,BYTE PTR ds:[si]
     24b:	75 2f                	jne    27c <sysEnter_Vector-0x12fd84>
     24d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     252:	2f                   	das    
     253:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	73 74                	jae    2d2 <sysEnter_Vector-0x12fd2e>
     25e:	72 74                	jb     2d4 <sysEnter_Vector-0x12fd2c>
     260:	6f                   	outs   dx,DWORD PTR ds:[esi]
     261:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	00 00                	add    BYTE PTR [eax],al
     268:	6d                   	ins    DWORD PTR es:[edi],dx
     269:	61                   	popa   
     26a:	6c                   	ins    BYTE PTR es:[edi],dx
     26b:	6c                   	ins    BYTE PTR es:[edi],dx
     26c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     26d:	63 2e                	arpl   WORD PTR [esi],bp
     26f:	68 00 02 00 00       	push   0x200
     274:	6c                   	ins    BYTE PTR es:[edi],dx
     275:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     27c:	4f                   	dec    edi
     27d:	53                   	push   ebx
     27e:	2e                   	cs
     27f:	68 00 02 00 00       	push   0x200
     284:	73 74                	jae    2fa <sysEnter_Vector-0x12fd06>
     286:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     28d:	63 
     28e:	2e                   	cs
     28f:	68 00 03 00 00       	push   0x300
     294:	00 00                	add    BYTE PTR [eax],al
     296:	05 02 1c 01 00       	add    eax,0x11c02
     29b:	9f                   	lahf   
     29c:	03 28                	add    ebp,DWORD PTR [eax]
     29e:	01 f6                	add    esi,esi
     2a0:	67 92                	addr16 xchg edx,eax
     2a2:	08 2f                	or     BYTE PTR [edi],ch
     2a4:	75 08                	jne    2ae <sysEnter_Vector-0x12fd52>
     2a6:	2f                   	das    
     2a7:	4b                   	dec    ebx
     2a8:	08 c9                	or     cl,cl
     2aa:	c9                   	leave  
     2ab:	08 21                	or     BYTE PTR [ecx],ah
     2ad:	3d 02 07 00 01       	cmp    eax,0x1000702
     2b2:	01 10                	add    DWORD PTR [eax],edx
     2b4:	01 00                	add    DWORD PTR [eax],eax
     2b6:	00 02                	add    BYTE PTR [edx],al
     2b8:	00 93 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dl
     2be:	01 fb                	add    ebx,edi
     2c0:	0e                   	push   cs
     2c1:	0d 00 01 01 01       	or     eax,0x1010100
     2c6:	01 00                	add    DWORD PTR [eax],eax
     2c8:	00 00                	add    BYTE PTR [eax],al
     2ca:	01 00                	add    DWORD PTR [eax],eax
     2cc:	00 01                	add    BYTE PTR [ecx],al
     2ce:	73 72                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d0:	63 00                	arpl   WORD PTR [eax],ax
     2d2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2d9:	00 2f                	add    BYTE PTR [edi],ch
     2db:	68 6f 6d 65 2f       	push   0x2f656d6f
     2e0:	79 6f                	jns    351 <sysEnter_Vector-0x12fcaf>
     2e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     2ec:	73 73                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ee:	2f                   	das    
     2ef:	6c                   	ins    BYTE PTR es:[edi],dx
     2f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     303:	78 2d                	js     332 <sysEnter_Vector-0x12fcce>
     305:	67 6e                	outs   dx,BYTE PTR ds:[si]
     307:	75 2f                	jne    338 <sysEnter_Vector-0x12fcc8>
     309:	35 2e 33 2e 30       	xor    eax,0x302e332e
     30e:	2f                   	das    
     30f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     316:	00 00                	add    BYTE PTR [eax],al
     318:	61                   	popa   
     319:	73 63                	jae    37e <sysEnter_Vector-0x12fc82>
     31b:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     322:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     325:	6c                   	ins    BYTE PTR es:[edi],dx
     326:	6c                   	ins    BYTE PTR es:[edi],dx
     327:	6f                   	outs   dx,DWORD PTR ds:[esi]
     328:	63 2e                	arpl   WORD PTR [esi],bp
     32a:	68 00 02 00 00       	push   0x200
     32f:	6c                   	ins    BYTE PTR es:[edi],dx
     330:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     337:	4f                   	dec    edi
     338:	53                   	push   ebx
     339:	2e                   	cs
     33a:	68 00 02 00 00       	push   0x200
     33f:	73 74                	jae    3b5 <sysEnter_Vector-0x12fc4b>
     341:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     348:	63 
     349:	2e                   	cs
     34a:	68 00 03 00 00       	push   0x300
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	05 02 b4 01 00       	add    eax,0x1b402
     356:	9f                   	lahf   
     357:	03 09                	add    ecx,DWORD PTR [ecx]
     359:	01 08                	add    DWORD PTR [eax],ecx
     35b:	16                   	push   ss
     35c:	00 02                	add    BYTE PTR [edx],al
     35e:	04 03                	add    al,0x3
     360:	08 d7                	or     bh,dl
     362:	00 02                	add    BYTE PTR [edx],al
     364:	04 03                	add    al,0x3
     366:	d7                   	xlat   BYTE PTR ds:[ebx]
     367:	00 02                	add    BYTE PTR [edx],al
     369:	04 03                	add    al,0x3
     36b:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     36e:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     371:	d3 00                	rol    DWORD PTR [eax],cl
     373:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     376:	06                   	push   es
     377:	82                   	(bad)  
     378:	06                   	push   es
     379:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     37c:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     381:	04 01                	add    al,0x1
     383:	76 00                	jbe    385 <sysEnter_Vector-0x12fc7b>
     385:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     388:	02 3b                	add    bh,BYTE PTR [ebx]
     38a:	13 08                	adc    ecx,DWORD PTR [eax]
     38c:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     390:	ad                   	lods   eax,DWORD PTR ds:[esi]
     391:	d7                   	xlat   BYTE PTR ds:[ebx]
     392:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     398:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39b:	76 00                	jbe    39d <sysEnter_Vector-0x12fc63>
     39d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3a0:	02 3b                	add    bh,BYTE PTR [ebx]
     3a2:	13 08                	adc    ecx,DWORD PTR [eax]
     3a4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3a8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3aa:	6a f3                	push   0xfffffff3
     3ac:	78 00                	js     3ae <sysEnter_Vector-0x12fc52>
     3ae:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3b1:	91                   	xchg   ecx,eax
     3b2:	00 02                	add    BYTE PTR [edx],al
     3b4:	04 03                	add    al,0x3
     3b6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3b9:	00 02                	add    BYTE PTR [edx],al
     3bb:	04 01                	add    al,0x1
     3bd:	06                   	push   es
     3be:	4a                   	dec    edx
     3bf:	06                   	push   es
     3c0:	e8 3d 02 02 00       	call   20602 <sysEnter_Vector-0x10f9fe>
     3c5:	01 01                	add    DWORD PTR [ecx],eax
     3c7:	06                   	push   es
     3c8:	01 00                	add    DWORD PTR [eax],eax
     3ca:	00 02                	add    BYTE PTR [edx],al
     3cc:	00 99 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],bl
     3d2:	01 fb                	add    ebx,edi
     3d4:	0e                   	push   cs
     3d5:	0d 00 01 01 01       	or     eax,0x1010100
     3da:	01 00                	add    DWORD PTR [eax],eax
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 00                	add    DWORD PTR [eax],eax
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	73 72                	jae    456 <sysEnter_Vector-0x12fbaa>
     3e4:	63 00                	arpl   WORD PTR [eax],ax
     3e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3ed:	00 2f                	add    BYTE PTR [edi],ch
     3ef:	68 6f 6d 65 2f       	push   0x2f656d6f
     3f4:	79 6f                	jns    465 <sysEnter_Vector-0x12fb9b>
     3f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     3fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     400:	73 73                	jae    475 <sysEnter_Vector-0x12fb8b>
     402:	2f                   	das    
     403:	6c                   	ins    BYTE PTR es:[edi],dx
     404:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     40b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     411:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     417:	78 2d                	js     446 <sysEnter_Vector-0x12fbba>
     419:	67 6e                	outs   dx,BYTE PTR ds:[si]
     41b:	75 2f                	jne    44c <sysEnter_Vector-0x12fbb4>
     41d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     422:	2f                   	das    
     423:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     42a:	00 00                	add    BYTE PTR [eax],al
     42c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     42e:	76 69                	jbe    499 <sysEnter_Vector-0x12fb67>
     430:	72 6f                	jb     4a1 <sysEnter_Vector-0x12fb5f>
     432:	6e                   	outs   dx,BYTE PTR ds:[esi]
     433:	6d                   	ins    DWORD PTR es:[edi],dx
     434:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     436:	74 2e                	je     466 <sysEnter_Vector-0x12fb9a>
     438:	63 00                	arpl   WORD PTR [eax],ax
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     43f:	6c                   	ins    BYTE PTR es:[edi],dx
     440:	6c                   	ins    BYTE PTR es:[edi],dx
     441:	6f                   	outs   dx,DWORD PTR ds:[esi]
     442:	63 2e                	arpl   WORD PTR [esi],bp
     444:	68 00 02 00 00       	push   0x200
     449:	6c                   	ins    BYTE PTR es:[edi],dx
     44a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     451:	4f                   	dec    edi
     452:	53                   	push   ebx
     453:	2e                   	cs
     454:	68 00 02 00 00       	push   0x200
     459:	73 74                	jae    4cf <sysEnter_Vector-0x12fb31>
     45b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     462:	63 
     463:	2e                   	cs
     464:	68 00 03 00 00       	push   0x300
     469:	00 00                	add    BYTE PTR [eax],al
     46b:	05 02 00 04 00       	add    eax,0x40002
     470:	9f                   	lahf   
     471:	03 09                	add    ecx,DWORD PTR [ecx]
     473:	01 08                	add    DWORD PTR [eax],ecx
     475:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     47b:	39 13                	cmp    DWORD PTR [ebx],edx
     47d:	00 02                	add    BYTE PTR [edx],al
     47f:	04 02                	add    al,0x2
     481:	7e 00                	jle    483 <sysEnter_Vector-0x12fb7d>
     483:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     486:	06                   	push   es
     487:	4a                   	dec    edx
     488:	06                   	push   es
     489:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     48a:	59                   	pop    ecx
     48b:	5b                   	pop    ebx
     48c:	08 21                	or     BYTE PTR [ecx],ah
     48e:	76 bb                	jbe    44b <sysEnter_Vector-0x12fbb5>
     490:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     496:	14 08                	adc    al,0x8
     498:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     49f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4a2:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     4a5:	00 02                	add    BYTE PTR [edx],al
     4a7:	04 01                	add    al,0x1
     4a9:	06                   	push   es
     4aa:	4a                   	dec    edx
     4ab:	06                   	push   es
     4ac:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     4af:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     4b4:	08 f3                	or     bl,dh
     4b6:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     4bc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4bf:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     4c2:	00 02                	add    BYTE PTR [edx],al
     4c4:	04 01                	add    al,0x1
     4c6:	06                   	push   es
     4c7:	4a                   	dec    edx
     4c8:	06                   	push   es
     4c9:	03 0b                	add    ecx,DWORD PTR [ebx]
     4cb:	9e                   	sahf   
     4cc:	02 05 00 01 01 f8    	add    al,BYTE PTR ds:0xf8010100
     4d2:	00 00                	add    BYTE PTR [eax],al
     4d4:	00 02                	add    BYTE PTR [edx],al
     4d6:	00 cd                	add    ch,cl
     4d8:	00 00                	add    BYTE PTR [eax],al
     4da:	00 01                	add    BYTE PTR [ecx],al
     4dc:	01 fb                	add    ebx,edi
     4de:	0e                   	push   cs
     4df:	0d 00 01 01 01       	or     eax,0x1010100
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	01 00                	add    DWORD PTR [eax],eax
     4ea:	00 01                	add    BYTE PTR [ecx],al
     4ec:	73 72                	jae    560 <sysEnter_Vector-0x12faa0>
     4ee:	63 00                	arpl   WORD PTR [eax],ax
     4f0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4f7:	00 2f                	add    BYTE PTR [edi],ch
     4f9:	68 6f 6d 65 2f       	push   0x2f656d6f
     4fe:	79 6f                	jns    56f <sysEnter_Vector-0x12fa91>
     500:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     507:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50a:	73 73                	jae    57f <sysEnter_Vector-0x12fa81>
     50c:	2f                   	das    
     50d:	6c                   	ins    BYTE PTR es:[edi],dx
     50e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     515:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     521:	78 2d                	js     550 <sysEnter_Vector-0x12fab0>
     523:	67 6e                	outs   dx,BYTE PTR ds:[si]
     525:	75 2f                	jne    556 <sysEnter_Vector-0x12faaa>
     527:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52c:	2f                   	das    
     52d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     534:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     537:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53b:	65                   	gs
     53c:	2f                   	das    
     53d:	2e                   	cs
     53e:	2e                   	cs
     53f:	2f                   	das    
     540:	2e                   	cs
     541:	2e                   	cs
     542:	2f                   	das    
     543:	2e                   	cs
     544:	2e                   	cs
     545:	2f                   	das    
     546:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     54a:	6a 2f                	push   0x2f
     54c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     54f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     556:	6e                   	outs   dx,BYTE PTR ds:[esi]
     557:	65                   	gs
     558:	6c                   	ins    BYTE PTR es:[edi],dx
     559:	2f                   	das    
     55a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     561:	00 00                	add    BYTE PTR [eax],al
     563:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     56a:	01 00                	add    DWORD PTR [eax],eax
     56c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     56f:	6c                   	ins    BYTE PTR es:[edi],dx
     570:	6c                   	ins    BYTE PTR es:[edi],dx
     571:	6f                   	outs   dx,DWORD PTR ds:[esi]
     572:	63 2e                	arpl   WORD PTR [esi],bp
     574:	68 00 02 00 00       	push   0x200
     579:	6c                   	ins    BYTE PTR es:[edi],dx
     57a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     581:	4f                   	dec    edi
     582:	53                   	push   ebx
     583:	2e                   	cs
     584:	68 00 02 00 00       	push   0x200
     589:	73 74                	jae    5ff <sysEnter_Vector-0x12fa01>
     58b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     592:	63 
     593:	2e                   	cs
     594:	68 00 03 00 00       	push   0x300
     599:	73 79                	jae    614 <sysEnter_Vector-0x12f9ec>
     59b:	73 63                	jae    600 <sysEnter_Vector-0x12fa00>
     59d:	61                   	popa   
     59e:	6c                   	ins    BYTE PTR es:[edi],dx
     59f:	6c                   	ins    BYTE PTR es:[edi],dx
     5a0:	73 2e                	jae    5d0 <sysEnter_Vector-0x12fa30>
     5a2:	68 00 04 00 00       	push   0x400
     5a7:	00 00                	add    BYTE PTR [eax],al
     5a9:	05 02 6c 06 00       	add    eax,0x66c02
     5ae:	9f                   	lahf   
     5af:	03 09                	add    ecx,DWORD PTR [ecx]
     5b1:	01 08                	add    DWORD PTR [eax],ecx
     5b3:	13 08                	adc    ecx,DWORD PTR [eax]
     5b5:	67 5b                	addr16 pop ebx
     5b7:	08 13                	or     BYTE PTR [ebx],dl
     5b9:	08 2f                	or     BYTE PTR [edi],ch
     5bb:	69 e5 08 d7 77 e5    	imul   esp,ebp,0xe577d708
     5c1:	08 d7                	or     bh,dl
     5c3:	78 08                	js     5cd <sysEnter_Vector-0x12fa33>
     5c5:	13 08                	adc    ecx,DWORD PTR [eax]
     5c7:	9f                   	lahf   
     5c8:	02 05 00 01 01 29    	add    al,BYTE PTR ds:0x29010100
     5ce:	01 00                	add    DWORD PTR [eax],eax
     5d0:	00 02                	add    BYTE PTR [edx],al
     5d2:	00 d4                	add    ah,dl
     5d4:	00 00                	add    BYTE PTR [eax],al
     5d6:	00 01                	add    BYTE PTR [ecx],al
     5d8:	01 fb                	add    ebx,edi
     5da:	0e                   	push   cs
     5db:	0d 00 01 01 01       	or     eax,0x1010100
     5e0:	01 00                	add    DWORD PTR [eax],eax
     5e2:	00 00                	add    BYTE PTR [eax],al
     5e4:	01 00                	add    DWORD PTR [eax],eax
     5e6:	00 01                	add    BYTE PTR [ecx],al
     5e8:	73 72                	jae    65c <sysEnter_Vector-0x12f9a4>
     5ea:	63 2f                	arpl   WORD PTR [edi],bp
     5ec:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     5f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5f4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     5f8:	65 00 2f             	add    BYTE PTR gs:[edi],ch
     5fb:	68 6f 6d 65 2f       	push   0x2f656d6f
     600:	79 6f                	jns    671 <sysEnter_Vector-0x12f98f>
     602:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     609:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     60c:	73 73                	jae    681 <sysEnter_Vector-0x12f97f>
     60e:	2f                   	das    
     60f:	6c                   	ins    BYTE PTR es:[edi],dx
     610:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     617:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     61d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     623:	78 2d                	js     652 <sysEnter_Vector-0x12f9ae>
     625:	67 6e                	outs   dx,BYTE PTR ds:[si]
     627:	75 2f                	jne    658 <sysEnter_Vector-0x12f9a8>
     629:	35 2e 33 2e 30       	xor    eax,0x302e332e
     62e:	2f                   	das    
     62f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     636:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     639:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     63d:	65                   	gs
     63e:	2f                   	das    
     63f:	2e                   	cs
     640:	2e                   	cs
     641:	2f                   	das    
     642:	2e                   	cs
     643:	2e                   	cs
     644:	2f                   	das    
     645:	2e                   	cs
     646:	2e                   	cs
     647:	2f                   	das    
     648:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     64c:	6a 2f                	push   0x2f
     64e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     651:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     658:	6e                   	outs   dx,BYTE PTR ds:[esi]
     659:	65                   	gs
     65a:	6c                   	ins    BYTE PTR es:[edi],dx
     65b:	2f                   	das    
     65c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     663:	00 00                	add    BYTE PTR [eax],al
     665:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     66c:	00 01                	add    BYTE PTR [ecx],al
     66e:	00 00                	add    BYTE PTR [eax],al
     670:	6d                   	ins    DWORD PTR es:[edi],dx
     671:	61                   	popa   
     672:	6c                   	ins    BYTE PTR es:[edi],dx
     673:	6c                   	ins    BYTE PTR es:[edi],dx
     674:	6f                   	outs   dx,DWORD PTR ds:[esi]
     675:	63 2e                	arpl   WORD PTR [esi],bp
     677:	68 00 02 00 00       	push   0x200
     67c:	6c                   	ins    BYTE PTR es:[edi],dx
     67d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     684:	4f                   	dec    edi
     685:	53                   	push   ebx
     686:	2e                   	cs
     687:	68 00 02 00 00       	push   0x200
     68c:	73 74                	jae    702 <sysEnter_Vector-0x12f8fe>
     68e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     695:	63 
     696:	2e                   	cs
     697:	68 00 03 00 00       	push   0x300
     69c:	73 79                	jae    717 <sysEnter_Vector-0x12f8e9>
     69e:	73 63                	jae    703 <sysEnter_Vector-0x12f8fd>
     6a0:	61                   	popa   
     6a1:	6c                   	ins    BYTE PTR es:[edi],dx
     6a2:	6c                   	ins    BYTE PTR es:[edi],dx
     6a3:	73 2e                	jae    6d3 <sysEnter_Vector-0x12f92d>
     6a5:	68 00 04 00 00       	push   0x400
     6aa:	00 00                	add    BYTE PTR [eax],al
     6ac:	05 02 60 07 00       	add    eax,0x76002
     6b1:	9f                   	lahf   
     6b2:	03 0f                	add    ecx,DWORD PTR [edi]
     6b4:	01 d7                	add    edi,edx
     6b6:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6bc:	75 4b                	jne    709 <sysEnter_Vector-0x12f8f7>
     6be:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     6c4:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     6c9:	6a 08                	push   0x8
     6cb:	14 75                	adc    al,0x75
     6cd:	84 68 00             	test   BYTE PTR [eax+0x0],ch
     6d0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     6d3:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     6d6:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     6dc:	06                   	push   es
     6dd:	66 06                	pushw  es
     6df:	68 ad 68 68 76       	push   0x766868ad
     6e4:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     6e7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     6ea:	06                   	push   es
     6eb:	ac                   	lods   al,BYTE PTR ds:[esi]
     6ec:	06                   	push   es
     6ed:	68 5b 00 02 04       	push   0x402005b
     6f2:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     6f8:	01 01                	add    DWORD PTR [ecx],eax
     6fa:	68 02 00 00 02       	push   0x2000002
     6ff:	00 eb                	add    bl,ch
     701:	00 00                	add    BYTE PTR [eax],al
     703:	00 01                	add    BYTE PTR [ecx],al
     705:	01 fb                	add    ebx,edi
     707:	0e                   	push   cs
     708:	0d 00 01 01 01       	or     eax,0x1010100
     70d:	01 00                	add    DWORD PTR [eax],eax
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	01 00                	add    DWORD PTR [eax],eax
     713:	00 01                	add    BYTE PTR [ecx],al
     715:	73 72                	jae    789 <sysEnter_Vector-0x12f877>
     717:	63 00                	arpl   WORD PTR [eax],ax
     719:	2f                   	das    
     71a:	68 6f 6d 65 2f       	push   0x2f656d6f
     71f:	79 6f                	jns    790 <sysEnter_Vector-0x12f870>
     721:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     728:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     72b:	73 73                	jae    7a0 <sysEnter_Vector-0x12f860>
     72d:	2f                   	das    
     72e:	6c                   	ins    BYTE PTR es:[edi],dx
     72f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     736:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     73c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     742:	78 2d                	js     771 <sysEnter_Vector-0x12f88f>
     744:	67 6e                	outs   dx,BYTE PTR ds:[si]
     746:	75 2f                	jne    777 <sysEnter_Vector-0x12f889>
     748:	35 2e 33 2e 30       	xor    eax,0x302e332e
     74d:	2f                   	das    
     74e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     755:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     758:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     75c:	65                   	gs
     75d:	2f                   	das    
     75e:	2e                   	cs
     75f:	2e                   	cs
     760:	2f                   	das    
     761:	2e                   	cs
     762:	2e                   	cs
     763:	2f                   	das    
     764:	2e                   	cs
     765:	2e                   	cs
     766:	2f                   	das    
     767:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     76b:	6a 2f                	push   0x2f
     76d:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     770:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     777:	6e                   	outs   dx,BYTE PTR ds:[esi]
     778:	65                   	gs
     779:	6c                   	ins    BYTE PTR es:[edi],dx
     77a:	2f                   	das    
     77b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     782:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     785:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     789:	65 00 00             	add    BYTE PTR gs:[eax],al
     78c:	6c                   	ins    BYTE PTR es:[edi],dx
     78d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     794:	4f                   	dec    edi
     795:	53                   	push   ebx
     796:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     799:	01 00                	add    DWORD PTR [eax],eax
     79b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     79e:	64                   	fs
     79f:	61                   	popa   
     7a0:	72 67                	jb     809 <sysEnter_Vector-0x12f7f7>
     7a2:	2e                   	cs
     7a3:	68 00 02 00 00       	push   0x200
     7a8:	73 74                	jae    81e <sysEnter_Vector-0x12f7e2>
     7aa:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7b1:	63 
     7b2:	2e                   	cs
     7b3:	68 00 02 00 00       	push   0x200
     7b8:	73 74                	jae    82e <sysEnter_Vector-0x12f7d2>
     7ba:	64                   	fs
     7bb:	64                   	fs
     7bc:	65                   	gs
     7bd:	66                   	data16
     7be:	2e                   	cs
     7bf:	68 00 02 00 00       	push   0x200
     7c4:	73 79                	jae    83f <sysEnter_Vector-0x12f7c1>
     7c6:	73 63                	jae    82b <sysEnter_Vector-0x12f7d5>
     7c8:	61                   	popa   
     7c9:	6c                   	ins    BYTE PTR es:[edi],dx
     7ca:	6c                   	ins    BYTE PTR es:[edi],dx
     7cb:	73 2e                	jae    7fb <sysEnter_Vector-0x12f805>
     7cd:	68 00 03 00 00       	push   0x300
     7d2:	6d                   	ins    DWORD PTR es:[edi],dx
     7d3:	61                   	popa   
     7d4:	6c                   	ins    BYTE PTR es:[edi],dx
     7d5:	6c                   	ins    BYTE PTR es:[edi],dx
     7d6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7d7:	63 2e                	arpl   WORD PTR [esi],bp
     7d9:	68 00 04 00 00       	push   0x400
     7de:	6c                   	ins    BYTE PTR es:[edi],dx
     7df:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7e6:	4f                   	dec    edi
     7e7:	53                   	push   ebx
     7e8:	2e                   	cs
     7e9:	68 00 04 00 00       	push   0x400
     7ee:	00 00                	add    BYTE PTR [eax],al
     7f0:	05 02 c8 08 00       	add    eax,0x8c802
     7f5:	9f                   	lahf   
     7f6:	03 10                	add    edx,DWORD PTR [eax]
     7f8:	01 08                	add    DWORD PTR [eax],ecx
     7fa:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     7fd:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     803:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     809:	75 08                	jne    813 <sysEnter_Vector-0x12f7ed>
     80b:	9f                   	lahf   
     80c:	3d 77 08 21 75       	cmp    eax,0x75210877
     811:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     817:	75 08                	jne    821 <sysEnter_Vector-0x12f7df>
     819:	d7                   	xlat   BYTE PTR ds:[ebx]
     81a:	3d 77 08 21 08       	cmp    eax,0x8210877
     81f:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     823:	c9                   	leave  
     824:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     827:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     82d:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     830:	13 75 77             	adc    esi,DWORD PTR [ebp+0x77]
     833:	08 22                	or     BYTE PTR [edx],ah
     835:	68 08 c9 08 83       	push   0x8308c908
     83a:	59                   	pop    ecx
     83b:	5b                   	pop    ebx
     83c:	08 22                	or     BYTE PTR [edx],ah
     83e:	68 08 c9 08 84       	push   0x8408c908
     843:	59                   	pop    ecx
     844:	5b                   	pop    ebx
     845:	f4                   	hlt    
     846:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     84a:	31 f4                	xor    esp,esi
     84c:	68 08 91 5a 31       	push   0x315a9108
     851:	08 21                	or     BYTE PTR [ecx],ah
     853:	02 54 13 59          	add    dl,BYTE PTR [ebx+edx*1+0x59]
     857:	77 c9                	ja     822 <sysEnter_Vector-0x12f7de>
     859:	c9                   	leave  
     85a:	3f                   	aas    
     85b:	c9                   	leave  
     85c:	08 83 3f f3 76 c9    	or     BYTE PTR [ebx-0x36890cc1],al
     862:	3d 31 f3 75 08       	cmp    eax,0x875f331
     867:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     86c:	08 21                	or     BYTE PTR [ecx],ah
     86e:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     875:	67 02 22             	add    ah,BYTE PTR [bp+si]
     878:	14 08                	adc    al,0x8
     87a:	ae                   	scas   al,BYTE PTR es:[edi]
     87b:	4c                   	dec    esp
     87c:	ca 08 4b             	retf   0x4b08
     87f:	91                   	xchg   ecx,eax
     880:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     886:	67 02 2f             	add    ch,BYTE PTR [bx]
     889:	14 00                	adc    al,0x0
     88b:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     88e:	02 31                	add    dh,BYTE PTR [ecx]
     890:	13 00                	adc    eax,DWORD PTR [eax]
     892:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     895:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     89b:	bb 00 02 04 02       	mov    ebx,0x2040200
     8a0:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     8a3:	00 02                	add    BYTE PTR [edx],al
     8a5:	04 01                	add    al,0x1
     8a7:	06                   	push   es
     8a8:	4a                   	dec    edx
     8a9:	06                   	push   es
     8aa:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     8ad:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     8b3:	f3 75 08             	repz jne 8be <sysEnter_Vector-0x12f742>
     8b6:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     8bb:	c9                   	leave  
     8bc:	c9                   	leave  
     8bd:	32 c9                	xor    cl,cl
     8bf:	f3 40                	repz inc eax
     8c1:	c9                   	leave  
     8c2:	08 13                	or     BYTE PTR [ebx],dl
     8c4:	32 f5                	xor    dh,ch
     8c6:	75 76                	jne    93e <sysEnter_Vector-0x12f6c2>
     8c8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     8c9:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     8ce:	67 75 91             	addr16 jne 862 <sysEnter_Vector-0x12f79e>
     8d1:	5a                   	pop    edx
     8d2:	75 67                	jne    93b <sysEnter_Vector-0x12f6c5>
     8d4:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     8d7:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     8dd:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     8e2:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     8e6:	3c 44                	cmp    al,0x44
     8e8:	00 02                	add    BYTE PTR [edx],al
     8ea:	04 02                	add    al,0x2
     8ec:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     8ef:	00 02                	add    BYTE PTR [edx],al
     8f1:	04 01                	add    al,0x1
     8f3:	06                   	push   es
     8f4:	4a                   	dec    edx
     8f5:	00 02                	add    BYTE PTR [edx],al
     8f7:	04 03                	add    al,0x3
     8f9:	82                   	(bad)  
     8fa:	06                   	push   es
     8fb:	03 23                	add    esp,DWORD PTR [ebx]
     8fd:	d6                   	(bad)  
     8fe:	00 02                	add    BYTE PTR [edx],al
     900:	04 01                	add    al,0x1
     902:	06                   	push   es
     903:	66 06                	pushw  es
     905:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     908:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     90d:	31 08                	xor    DWORD PTR [eax],ecx
     90f:	4d                   	dec    ebp
     910:	08 21                	or     BYTE PTR [ecx],ah
     912:	92                   	xchg   edx,eax
     913:	08 91 00 02 04 01    	or     BYTE PTR [ecx+0x1040200],dl
     919:	08 23                	or     BYTE PTR [ebx],ah
     91b:	00 02                	add    BYTE PTR [edx],al
     91d:	04 01                	add    al,0x1
     91f:	08 75 00             	or     BYTE PTR [ebp+0x0],dh
     922:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     925:	ca ca 02             	retf   0x2ca
     928:	27                   	daa    
     929:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     92f:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     932:	02 2f                	add    ch,BYTE PTR [edi]
     934:	14 00                	adc    al,0x0
     936:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     939:	02 31                	add    dh,BYTE PTR [ecx]
     93b:	13 00                	adc    eax,DWORD PTR [eax]
     93d:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     940:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     946:	bb 00 02 04 02       	mov    ebx,0x2040200
     94b:	03 76 74             	add    esi,DWORD PTR [esi+0x74]
     94e:	00 02                	add    BYTE PTR [edx],al
     950:	04 01                	add    al,0x1
     952:	06                   	push   es
     953:	4a                   	dec    edx
     954:	06                   	push   es
     955:	03 0c d6             	add    ecx,DWORD PTR [esi+edx*8]
     958:	3d 5b f3 a0 08       	cmp    eax,0x8a0f35b
     95d:	13 31                	adc    esi,DWORD PTR [ecx]
     95f:	c9                   	leave  
     960:	9f                   	lahf   
     961:	02 02                	add    al,BYTE PTR [edx]
     963:	00 01                	add    BYTE PTR [ecx],al
     965:	01 50 01             	add    DWORD PTR [eax+0x1],edx
     968:	00 00                	add    BYTE PTR [eax],al
     96a:	02 00                	add    al,BYTE PTR [eax]
     96c:	db 00                	fild   DWORD PTR [eax]
     96e:	00 00                	add    BYTE PTR [eax],al
     970:	01 01                	add    DWORD PTR [ecx],eax
     972:	fb                   	sti    
     973:	0e                   	push   cs
     974:	0d 00 01 01 01       	or     eax,0x1010100
     979:	01 00                	add    DWORD PTR [eax],eax
     97b:	00 00                	add    BYTE PTR [eax],al
     97d:	01 00                	add    DWORD PTR [eax],eax
     97f:	00 01                	add    BYTE PTR [ecx],al
     981:	73 72                	jae    9f5 <sysEnter_Vector-0x12f60b>
     983:	63 00                	arpl   WORD PTR [eax],ax
     985:	2f                   	das    
     986:	68 6f 6d 65 2f       	push   0x2f656d6f
     98b:	79 6f                	jns    9fc <sysEnter_Vector-0x12f604>
     98d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     994:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     997:	73 73                	jae    a0c <sysEnter_Vector-0x12f5f4>
     999:	2f                   	das    
     99a:	6c                   	ins    BYTE PTR es:[edi],dx
     99b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     9a2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     9a8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     9ae:	78 2d                	js     9dd <sysEnter_Vector-0x12f623>
     9b0:	67 6e                	outs   dx,BYTE PTR ds:[si]
     9b2:	75 2f                	jne    9e3 <sysEnter_Vector-0x12f61d>
     9b4:	35 2e 33 2e 30       	xor    eax,0x302e332e
     9b9:	2f                   	das    
     9ba:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9c1:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     9c4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9c8:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     9cc:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     9d0:	65                   	gs
     9d1:	2f                   	das    
     9d2:	2e                   	cs
     9d3:	2e                   	cs
     9d4:	2f                   	das    
     9d5:	2e                   	cs
     9d6:	2e                   	cs
     9d7:	2f                   	das    
     9d8:	2e                   	cs
     9d9:	2e                   	cs
     9da:	2f                   	das    
     9db:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     9df:	6a 2f                	push   0x2f
     9e1:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     9e4:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     9eb:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9ec:	65                   	gs
     9ed:	6c                   	ins    BYTE PTR es:[edi],dx
     9ee:	2f                   	das    
     9ef:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     9f6:	00 00                	add    BYTE PTR [eax],al
     9f8:	6d                   	ins    DWORD PTR es:[edi],dx
     9f9:	61                   	popa   
     9fa:	6c                   	ins    BYTE PTR es:[edi],dx
     9fb:	6c                   	ins    BYTE PTR es:[edi],dx
     9fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9fd:	63 2e                	arpl   WORD PTR [esi],bp
     9ff:	63 00                	arpl   WORD PTR [eax],ax
     a01:	01 00                	add    DWORD PTR [eax],eax
     a03:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     a06:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a0d:	63 
     a0e:	2e                   	cs
     a0f:	68 00 02 00 00       	push   0x200
     a14:	73 74                	jae    a8a <sysEnter_Vector-0x12f576>
     a16:	64                   	fs
     a17:	64                   	fs
     a18:	65                   	gs
     a19:	66                   	data16
     a1a:	2e                   	cs
     a1b:	68 00 02 00 00       	push   0x200
     a20:	6d                   	ins    DWORD PTR es:[edi],dx
     a21:	61                   	popa   
     a22:	6c                   	ins    BYTE PTR es:[edi],dx
     a23:	6c                   	ins    BYTE PTR es:[edi],dx
     a24:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a25:	63 2e                	arpl   WORD PTR [esi],bp
     a27:	68 00 03 00 00       	push   0x300
     a2c:	6c                   	ins    BYTE PTR es:[edi],dx
     a2d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     a34:	4f                   	dec    edi
     a35:	53                   	push   ebx
     a36:	2e                   	cs
     a37:	68 00 03 00 00       	push   0x300
     a3c:	73 79                	jae    ab7 <sysEnter_Vector-0x12f549>
     a3e:	73 63                	jae    aa3 <sysEnter_Vector-0x12f55d>
     a40:	61                   	popa   
     a41:	6c                   	ins    BYTE PTR es:[edi],dx
     a42:	6c                   	ins    BYTE PTR es:[edi],dx
     a43:	73 2e                	jae    a73 <sysEnter_Vector-0x12f58d>
     a45:	68 00 04 00 00       	push   0x400
     a4a:	00 00                	add    BYTE PTR [eax],al
     a4c:	05 02 28 13 00       	add    eax,0x132802
     a51:	9f                   	lahf   
     a52:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
     a55:	08 21                	or     BYTE PTR [ecx],ah
     a57:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     a5a:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     a5f:	f5                   	cmc    
     a60:	92                   	xchg   edx,eax
     a61:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     a67:	04 01                	add    al,0x1
     a69:	06                   	push   es
     a6a:	66 06                	pushw  es
     a6c:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     a71:	59                   	pop    ecx
     a72:	31 f5                	xor    ebp,esi
     a74:	68 93 00 02 04       	push   0x4020093
     a79:	02 be 30 03 76 90    	add    bh,BYTE PTR [esi-0x6f89fcd0]
     a7f:	03 0b                	add    ecx,DWORD PTR [ebx]
     a81:	20 31                	and    BYTE PTR [ecx],dh
     a83:	08 27                	or     BYTE PTR [edi],ah
     a85:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     a8b:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     a90:	f3 02 26             	repz add ah,BYTE PTR [esi]
     a93:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     a9a:	e5 ad                	in     eax,0xad
     a9c:	91                   	xchg   ecx,eax
     a9d:	91                   	xchg   ecx,eax
     a9e:	75 08                	jne    aa8 <sysEnter_Vector-0x12f558>
     aa0:	d7                   	xlat   BYTE PTR ds:[ebx]
     aa1:	d7                   	xlat   BYTE PTR ds:[ebx]
     aa2:	08 13                	or     BYTE PTR [ebx],dl
     aa4:	91                   	xchg   ecx,eax
     aa5:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     aa8:	91                   	xchg   ecx,eax
     aa9:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     aae:	c9                   	leave  
     aaf:	ad                   	lods   eax,DWORD PTR ds:[esi]
     ab0:	3f                   	aas    
     ab1:	08 13                	or     BYTE PTR [ebx],dl
     ab3:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     ab9:	01 e3                	add    ebx,esp
     abb:	00 00                	add    BYTE PTR [eax],al
     abd:	00 02                	add    BYTE PTR [edx],al
     abf:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     ac5:	01 fb                	add    ebx,edi
     ac7:	0e                   	push   cs
     ac8:	0d 00 01 01 01       	or     eax,0x1010100
     acd:	01 00                	add    DWORD PTR [eax],eax
     acf:	00 00                	add    BYTE PTR [eax],al
     ad1:	01 00                	add    DWORD PTR [eax],eax
     ad3:	00 01                	add    BYTE PTR [ecx],al
     ad5:	73 72                	jae    b49 <sysEnter_Vector-0x12f4b7>
     ad7:	63 00                	arpl   WORD PTR [eax],ax
     ad9:	2f                   	das    
     ada:	68 6f 6d 65 2f       	push   0x2f656d6f
     adf:	79 6f                	jns    b50 <sysEnter_Vector-0x12f4b0>
     ae1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ae8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     aeb:	73 73                	jae    b60 <sysEnter_Vector-0x12f4a0>
     aed:	2f                   	das    
     aee:	6c                   	ins    BYTE PTR es:[edi],dx
     aef:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     af6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     afc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b02:	78 2d                	js     b31 <sysEnter_Vector-0x12f4cf>
     b04:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b06:	75 2f                	jne    b37 <sysEnter_Vector-0x12f4c9>
     b08:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b0d:	2f                   	das    
     b0e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b15:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b18:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b1c:	65 00 00             	add    BYTE PTR gs:[eax],al
     b1f:	6d                   	ins    DWORD PTR es:[edi],dx
     b20:	65                   	gs
     b21:	6d                   	ins    DWORD PTR es:[edi],dx
     b22:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     b25:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     b28:	01 00                	add    DWORD PTR [eax],eax
     b2a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b2d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b34:	63 
     b35:	2e                   	cs
     b36:	68 00 02 00 00       	push   0x200
     b3b:	73 74                	jae    bb1 <sysEnter_Vector-0x12f44f>
     b3d:	64                   	fs
     b3e:	64                   	fs
     b3f:	65                   	gs
     b40:	66                   	data16
     b41:	2e                   	cs
     b42:	68 00 02 00 00       	push   0x200
     b47:	6d                   	ins    DWORD PTR es:[edi],dx
     b48:	61                   	popa   
     b49:	6c                   	ins    BYTE PTR es:[edi],dx
     b4a:	6c                   	ins    BYTE PTR es:[edi],dx
     b4b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b4c:	63 2e                	arpl   WORD PTR [esi],bp
     b4e:	68 00 03 00 00       	push   0x300
     b53:	6c                   	ins    BYTE PTR es:[edi],dx
     b54:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b5b:	4f                   	dec    edi
     b5c:	53                   	push   ebx
     b5d:	2e                   	cs
     b5e:	68 00 03 00 00       	push   0x300
     b63:	00 00                	add    BYTE PTR [eax],al
     b65:	05 02 98 16 00       	add    eax,0x169802
     b6a:	9f                   	lahf   
     b6b:	03 0a                	add    ecx,DWORD PTR [edx]
     b6d:	01 f5                	add    ebp,esi
     b6f:	d7                   	xlat   BYTE PTR ds:[ebx]
     b70:	d7                   	xlat   BYTE PTR ds:[ebx]
     b71:	68 91 67 68 83       	push   0x83686791
     b76:	91                   	xchg   ecx,eax
     b77:	91                   	xchg   ecx,eax
     b78:	2f                   	das    
     b79:	08 1f                	or     BYTE PTR [edi],bl
     b7b:	e8 08 57 ca 84       	call   84ca6288 <sysEnter_Vector+0x84b76288>
     b80:	68 83 67 68 83       	push   0x83686783
     b85:	91                   	xchg   ecx,eax
     b86:	91                   	xchg   ecx,eax
     b87:	2f                   	das    
     b88:	08 1f                	or     BYTE PTR [edi],bl
     b8a:	e8 08 57 ca 5c       	call   5cca6297 <sysEnter_Vector+0x5cb76297>
     b8f:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     b95:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     b9b:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     b9e:	00 01                	add    BYTE PTR [ecx],al
     ba0:	01 ca                	add    edx,ecx
     ba2:	00 00                	add    BYTE PTR [eax],al
     ba4:	00 02                	add    BYTE PTR [edx],al
     ba6:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     bac:	01 fb                	add    ebx,edi
     bae:	0e                   	push   cs
     baf:	0d 00 01 01 01       	or     eax,0x1010100
     bb4:	01 00                	add    DWORD PTR [eax],eax
     bb6:	00 00                	add    BYTE PTR [eax],al
     bb8:	01 00                	add    DWORD PTR [eax],eax
     bba:	00 01                	add    BYTE PTR [ecx],al
     bbc:	73 72                	jae    c30 <sysEnter_Vector-0x12f3d0>
     bbe:	63 00                	arpl   WORD PTR [eax],ax
     bc0:	2f                   	das    
     bc1:	68 6f 6d 65 2f       	push   0x2f656d6f
     bc6:	79 6f                	jns    c37 <sysEnter_Vector-0x12f3c9>
     bc8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     bcf:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     bd2:	73 73                	jae    c47 <sysEnter_Vector-0x12f3b9>
     bd4:	2f                   	das    
     bd5:	6c                   	ins    BYTE PTR es:[edi],dx
     bd6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     bdd:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     be3:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     be9:	78 2d                	js     c18 <sysEnter_Vector-0x12f3e8>
     beb:	67 6e                	outs   dx,BYTE PTR ds:[si]
     bed:	75 2f                	jne    c1e <sysEnter_Vector-0x12f3e2>
     bef:	35 2e 33 2e 30       	xor    eax,0x302e332e
     bf4:	2f                   	das    
     bf5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     bfc:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     bff:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c03:	65 00 00             	add    BYTE PTR gs:[eax],al
     c06:	6d                   	ins    DWORD PTR es:[edi],dx
     c07:	65                   	gs
     c08:	6d                   	ins    DWORD PTR es:[edi],dx
     c09:	73 65                	jae    c70 <sysEnter_Vector-0x12f390>
     c0b:	74 2e                	je     c3b <sysEnter_Vector-0x12f3c5>
     c0d:	63 00                	arpl   WORD PTR [eax],ax
     c0f:	01 00                	add    DWORD PTR [eax],eax
     c11:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c14:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c1b:	63 
     c1c:	2e                   	cs
     c1d:	68 00 02 00 00       	push   0x200
     c22:	73 74                	jae    c98 <sysEnter_Vector-0x12f368>
     c24:	64                   	fs
     c25:	64                   	fs
     c26:	65                   	gs
     c27:	66                   	data16
     c28:	2e                   	cs
     c29:	68 00 02 00 00       	push   0x200
     c2e:	6d                   	ins    DWORD PTR es:[edi],dx
     c2f:	61                   	popa   
     c30:	6c                   	ins    BYTE PTR es:[edi],dx
     c31:	6c                   	ins    BYTE PTR es:[edi],dx
     c32:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c33:	63 2e                	arpl   WORD PTR [esi],bp
     c35:	68 00 03 00 00       	push   0x300
     c3a:	6c                   	ins    BYTE PTR es:[edi],dx
     c3b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c42:	4f                   	dec    edi
     c43:	53                   	push   ebx
     c44:	2e                   	cs
     c45:	68 00 03 00 00       	push   0x300
     c4a:	00 00                	add    BYTE PTR [eax],al
     c4c:	05 02 34 18 00       	add    eax,0x183402
     c51:	9f                   	lahf   
     c52:	1a f3                	sbb    dh,bl
     c54:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
     c5a:	ca 9f 2f             	retf   0x2f9f
     c5d:	d5 bd                	aad    0xbd
     c5f:	9f                   	lahf   
     c60:	2f                   	das    
     c61:	f1                   	icebp  
     c62:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     c67:	c9                   	leave  
     c68:	08 13                	or     BYTE PTR [ebx],dl
     c6a:	02 02                	add    al,BYTE PTR [edx]
     c6c:	00 01                	add    BYTE PTR [ecx],al
     c6e:	01 8a 00 00 00 02    	add    DWORD PTR [edx+0x2000000],ecx
     c74:	00 84 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],al
     c7b:	fb                   	sti    
     c7c:	0e                   	push   cs
     c7d:	0d 00 01 01 01       	or     eax,0x1010100
     c82:	01 00                	add    DWORD PTR [eax],eax
     c84:	00 00                	add    BYTE PTR [eax],al
     c86:	01 00                	add    DWORD PTR [eax],eax
     c88:	00 01                	add    BYTE PTR [ecx],al
     c8a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c91:	00 2f                	add    BYTE PTR [edi],ch
     c93:	68 6f 6d 65 2f       	push   0x2f656d6f
     c98:	79 6f                	jns    d09 <sysEnter_Vector-0x12f2f7>
     c9a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ca1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ca4:	73 73                	jae    d19 <sysEnter_Vector-0x12f2e7>
     ca6:	2f                   	das    
     ca7:	6c                   	ins    BYTE PTR es:[edi],dx
     ca8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     caf:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     cb5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cbb:	78 2d                	js     cea <sysEnter_Vector-0x12f316>
     cbd:	67 6e                	outs   dx,BYTE PTR ds:[si]
     cbf:	75 2f                	jne    cf0 <sysEnter_Vector-0x12f310>
     cc1:	35 2e 33 2e 30       	xor    eax,0x302e332e
     cc6:	2f                   	das    
     cc7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cce:	00 00                	add    BYTE PTR [eax],al
     cd0:	6d                   	ins    DWORD PTR es:[edi],dx
     cd1:	61                   	popa   
     cd2:	6c                   	ins    BYTE PTR es:[edi],dx
     cd3:	6c                   	ins    BYTE PTR es:[edi],dx
     cd4:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cd5:	63 2e                	arpl   WORD PTR [esi],bp
     cd7:	68 00 01 00 00       	push   0x100
     cdc:	6c                   	ins    BYTE PTR es:[edi],dx
     cdd:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     ce4:	4f                   	dec    edi
     ce5:	53                   	push   ebx
     ce6:	2e                   	cs
     ce7:	68 00 01 00 00       	push   0x100
     cec:	73 74                	jae    d62 <sysEnter_Vector-0x12f29e>
     cee:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     cf5:	63 
     cf6:	2e                   	cs
     cf7:	68 00 02 00 00       	push   0x200
     cfc:	00 e6                	add    dh,ah
     cfe:	00 00                	add    BYTE PTR [eax],al
     d00:	00 02                	add    BYTE PTR [edx],al
     d02:	00 cd                	add    ch,cl
     d04:	00 00                	add    BYTE PTR [eax],al
     d06:	00 01                	add    BYTE PTR [ecx],al
     d08:	01 fb                	add    ebx,edi
     d0a:	0e                   	push   cs
     d0b:	0d 00 01 01 01       	or     eax,0x1010100
     d10:	01 00                	add    DWORD PTR [eax],eax
     d12:	00 00                	add    BYTE PTR [eax],al
     d14:	01 00                	add    DWORD PTR [eax],eax
     d16:	00 01                	add    BYTE PTR [ecx],al
     d18:	73 72                	jae    d8c <sysEnter_Vector-0x12f274>
     d1a:	63 00                	arpl   WORD PTR [eax],ax
     d1c:	2f                   	das    
     d1d:	68 6f 6d 65 2f       	push   0x2f656d6f
     d22:	79 6f                	jns    d93 <sysEnter_Vector-0x12f26d>
     d24:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d2b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d2e:	73 73                	jae    da3 <sysEnter_Vector-0x12f25d>
     d30:	2f                   	das    
     d31:	6c                   	ins    BYTE PTR es:[edi],dx
     d32:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d39:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     d3f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     d45:	78 2d                	js     d74 <sysEnter_Vector-0x12f28c>
     d47:	67 6e                	outs   dx,BYTE PTR ds:[si]
     d49:	75 2f                	jne    d7a <sysEnter_Vector-0x12f286>
     d4b:	35 2e 33 2e 30       	xor    eax,0x302e332e
     d50:	2f                   	das    
     d51:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d58:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d5b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d5f:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     d63:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d67:	65                   	gs
     d68:	2f                   	das    
     d69:	2e                   	cs
     d6a:	2e                   	cs
     d6b:	2f                   	das    
     d6c:	2e                   	cs
     d6d:	2e                   	cs
     d6e:	2f                   	das    
     d6f:	2e                   	cs
     d70:	2e                   	cs
     d71:	2f                   	das    
     d72:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     d76:	6a 2f                	push   0x2f
     d78:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     d7b:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     d82:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d83:	65                   	gs
     d84:	6c                   	ins    BYTE PTR es:[edi],dx
     d85:	2f                   	das    
     d86:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d8d:	00 00                	add    BYTE PTR [eax],al
     d8f:	70 69                	jo     dfa <sysEnter_Vector-0x12f206>
     d91:	70 65                	jo     df8 <sysEnter_Vector-0x12f208>
     d93:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d96:	01 00                	add    DWORD PTR [eax],eax
     d98:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d9b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     da2:	63 
     da3:	2e                   	cs
     da4:	68 00 02 00 00       	push   0x200
     da9:	6d                   	ins    DWORD PTR es:[edi],dx
     daa:	61                   	popa   
     dab:	6c                   	ins    BYTE PTR es:[edi],dx
     dac:	6c                   	ins    BYTE PTR es:[edi],dx
     dad:	6f                   	outs   dx,DWORD PTR ds:[esi]
     dae:	63 2e                	arpl   WORD PTR [esi],bp
     db0:	68 00 03 00 00       	push   0x300
     db5:	6c                   	ins    BYTE PTR es:[edi],dx
     db6:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     dbd:	4f                   	dec    edi
     dbe:	53                   	push   ebx
     dbf:	2e                   	cs
     dc0:	68 00 03 00 00       	push   0x300
     dc5:	73 79                	jae    e40 <sysEnter_Vector-0x12f1c0>
     dc7:	73 63                	jae    e2c <sysEnter_Vector-0x12f1d4>
     dc9:	61                   	popa   
     dca:	6c                   	ins    BYTE PTR es:[edi],dx
     dcb:	6c                   	ins    BYTE PTR es:[edi],dx
     dcc:	73 2e                	jae    dfc <sysEnter_Vector-0x12f204>
     dce:	68 00 04 00 00       	push   0x400
     dd3:	00 00                	add    BYTE PTR [eax],al
     dd5:	05 02 1c 19 00       	add    eax,0x191c02
     dda:	9f                   	lahf   
     ddb:	03 0a                	add    ecx,DWORD PTR [edx]
     ddd:	01 08                	add    DWORD PTR [eax],ecx
     ddf:	13 08                	adc    ecx,DWORD PTR [eax]
     de1:	2f                   	das    
     de2:	02 05 00 01 01 de    	add    al,BYTE PTR ds:0xde010100
     de8:	01 00                	add    DWORD PTR [eax],eax
     dea:	00 02                	add    BYTE PTR [edx],al
     dec:	00 a1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],ah
     df2:	01 fb                	add    ebx,edi
     df4:	0e                   	push   cs
     df5:	0d 00 01 01 01       	or     eax,0x1010100
     dfa:	01 00                	add    DWORD PTR [eax],eax
     dfc:	00 00                	add    BYTE PTR [eax],al
     dfe:	01 00                	add    DWORD PTR [eax],eax
     e00:	00 01                	add    BYTE PTR [ecx],al
     e02:	73 72                	jae    e76 <sysEnter_Vector-0x12f18a>
     e04:	63 00                	arpl   WORD PTR [eax],ax
     e06:	2f                   	das    
     e07:	68 6f 6d 65 2f       	push   0x2f656d6f
     e0c:	79 6f                	jns    e7d <sysEnter_Vector-0x12f183>
     e0e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e15:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e18:	73 73                	jae    e8d <sysEnter_Vector-0x12f173>
     e1a:	2f                   	das    
     e1b:	6c                   	ins    BYTE PTR es:[edi],dx
     e1c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e23:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e29:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e2f:	78 2d                	js     e5e <sysEnter_Vector-0x12f1a2>
     e31:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e33:	75 2f                	jne    e64 <sysEnter_Vector-0x12f19c>
     e35:	35 2e 33 2e 30       	xor    eax,0x302e332e
     e3a:	2f                   	das    
     e3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e42:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e45:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e49:	65 00 00             	add    BYTE PTR gs:[eax],al
     e4c:	73 70                	jae    ebe <sysEnter_Vector-0x12f142>
     e4e:	72 69                	jb     eb9 <sysEnter_Vector-0x12f147>
     e50:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e51:	74 66                	je     eb9 <sysEnter_Vector-0x12f147>
     e53:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     e56:	01 00                	add    DWORD PTR [eax],eax
     e58:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e5b:	64                   	fs
     e5c:	61                   	popa   
     e5d:	72 67                	jb     ec6 <sysEnter_Vector-0x12f13a>
     e5f:	2e                   	cs
     e60:	68 00 02 00 00       	push   0x200
     e65:	73 74                	jae    edb <sysEnter_Vector-0x12f125>
     e67:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     e6e:	63 
     e6f:	2e                   	cs
     e70:	68 00 02 00 00       	push   0x200
     e75:	6d                   	ins    DWORD PTR es:[edi],dx
     e76:	61                   	popa   
     e77:	6c                   	ins    BYTE PTR es:[edi],dx
     e78:	6c                   	ins    BYTE PTR es:[edi],dx
     e79:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e7a:	63 2e                	arpl   WORD PTR [esi],bp
     e7c:	68 00 03 00 00       	push   0x300
     e81:	6c                   	ins    BYTE PTR es:[edi],dx
     e82:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     e89:	4f                   	dec    edi
     e8a:	53                   	push   ebx
     e8b:	2e                   	cs
     e8c:	68 00 03 00 00       	push   0x300
     e91:	00 00                	add    BYTE PTR [eax],al
     e93:	05 02 48 19 00       	add    eax,0x194802
     e98:	9f                   	lahf   
     e99:	03 0a                	add    ecx,DWORD PTR [edx]
     e9b:	01 08                	add    DWORD PTR [eax],ecx
     e9d:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
     ea0:	02 29                	add    ch,BYTE PTR [ecx]
     ea2:	11 08                	adc    DWORD PTR [eax],ecx
     ea4:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
     eaa:	0a 08                	or     cl,BYTE PTR [eax]
     eac:	2e                   	cs
     ead:	91                   	xchg   ecx,eax
     eae:	9f                   	lahf   
     eaf:	4b                   	dec    ebx
     eb0:	00 02                	add    BYTE PTR [edx],al
     eb2:	04 01                	add    al,0x1
     eb4:	06                   	push   es
     eb5:	66 06                	pushw  es
     eb7:	67 9f                	addr16 lahf 
     eb9:	00 02                	add    BYTE PTR [edx],al
     ebb:	04 01                	add    al,0x1
     ebd:	06                   	push   es
     ebe:	9e                   	sahf   
     ebf:	00 02                	add    BYTE PTR [edx],al
     ec1:	04 02                	add    al,0x2
     ec3:	74 00                	je     ec5 <sysEnter_Vector-0x12f13b>
     ec5:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
     ec8:	58                   	pop    eax
     ec9:	00 02                	add    BYTE PTR [edx],al
     ecb:	04 04                	add    al,0x4
     ecd:	06                   	push   es
     ece:	3d 00 02 04 04       	cmp    eax,0x4040200
     ed3:	4b                   	dec    ebx
     ed4:	9f                   	lahf   
     ed5:	67 4b                	addr16 dec ebx
     ed7:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
     edc:	9f                   	lahf   
     edd:	4b                   	dec    ebx
     ede:	4d                   	dec    ebp
     edf:	9f                   	lahf   
     ee0:	67 67 67 4c          	addr32 addr32 addr16 dec esp
     ee4:	75 67                	jne    f4d <sysEnter_Vector-0x12f0b3>
     ee6:	f5                   	cmc    
     ee7:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
     eed:	67 9f                	addr16 lahf 
     eef:	2f                   	das    
     ef0:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
     ef5:	67 d7                	xlat   BYTE PTR ds:[bx]
     ef7:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
     efd:	e3 ca                	jecxz  ec9 <sysEnter_Vector-0x12f137>
     eff:	2f                   	das    
     f00:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
     f05:	ca 2f b9             	retf   0xb92f
     f08:	ca 00 02             	retf   0x200
     f0b:	04 01                	add    al,0x1
     f0d:	3d 76 03 0e 08       	cmp    eax,0x80e0376
     f12:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
     f18:	76 91                	jbe    eab <sysEnter_Vector-0x12f155>
     f1a:	08 d8                	or     al,bl
     f1c:	4b                   	dec    ebx
     f1d:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
     f20:	4b                   	dec    ebx
     f21:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
     f24:	4b                   	dec    ebx
     f25:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
     f28:	13 08                	adc    ecx,DWORD PTR [eax]
     f2a:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
     f30:	4f                   	dec    edi
     f31:	75 9f                	jne    ed2 <sysEnter_Vector-0x12f12e>
     f33:	91                   	xchg   ecx,eax
     f34:	08 13                	or     BYTE PTR [ebx],dl
     f36:	08 13                	or     BYTE PTR [ebx],dl
     f38:	9f                   	lahf   
     f39:	92                   	xchg   edx,eax
     f3a:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
     f3d:	75 00                	jne    f3f <sysEnter_Vector-0x12f0c1>
     f3f:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     f42:	06                   	push   es
     f43:	9e                   	sahf   
     f44:	00 02                	add    BYTE PTR [edx],al
     f46:	04 02                	add    al,0x2
     f48:	9e                   	sahf   
     f49:	06                   	push   es
     f4a:	9f                   	lahf   
     f4b:	bb 94 76 02 23       	mov    ebx,0x23027694
     f50:	14 9f                	adc    al,0x9f
     f52:	2f                   	das    
     f53:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
     f58:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
     f5d:	08 30                	or     BYTE PTR [eax],dh
     f5f:	76 9f                	jbe    f00 <sysEnter_Vector-0x12f100>
     f61:	2f                   	das    
     f62:	b9 d8 00 02 04       	mov    ecx,0x40200d8
     f67:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
     f6d:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
     f70:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     f73:	06                   	push   es
     f74:	4a                   	dec    edx
     f75:	06                   	push   es
     f76:	84 2f                	test   BYTE PTR [edi],ch
     f78:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
     f7d:	4d                   	dec    ebp
     f7e:	ab                   	stos   DWORD PTR es:[edi],eax
     f7f:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
     f85:	55                   	push   ebp
     f86:	d7                   	xlat   BYTE PTR ds:[ebx]
     f87:	ca 5b bb             	retf   0xbb5b
     f8a:	5c                   	pop    esp
     f8b:	75 31                	jne    fbe <sysEnter_Vector-0x12f042>
     f8d:	4c                   	dec    esp
     f8e:	75 32                	jne    fc2 <sysEnter_Vector-0x12f03e>
     f90:	4c                   	dec    esp
     f91:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
     f97:	91                   	xchg   ecx,eax
     f98:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
     f9b:	03 0a                	add    ecx,DWORD PTR [edx]
     f9d:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
     fa0:	67 08 2f             	or     BYTE PTR [bx],ch
     fa3:	9f                   	lahf   
     fa4:	91                   	xchg   ecx,eax
     fa5:	9f                   	lahf   
     fa6:	f4                   	hlt    
     fa7:	d7                   	xlat   BYTE PTR ds:[ebx]
     fa8:	00 02                	add    BYTE PTR [edx],al
     faa:	04 02                	add    al,0x2
     fac:	03 e8                	add    ebp,eax
     fae:	7e 08                	jle    fb8 <sysEnter_Vector-0x12f048>
     fb0:	f2 00 02             	repnz add BYTE PTR [edx],al
     fb3:	04 01                	add    al,0x1
     fb5:	06                   	push   es
     fb6:	90                   	nop
     fb7:	06                   	push   es
     fb8:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
     fbe:	5b                   	pop    ebx
     fbf:	f6 67 08             	mul    BYTE PTR [edi+0x8]
     fc2:	76 3d                	jbe    1001 <sysEnter_Vector-0x12efff>
     fc4:	02 02                	add    al,BYTE PTR [edx]
     fc6:	00 01                	add    BYTE PTR [ecx],al
     fc8:	01 fa                	add    edx,edi
     fca:	00 00                	add    BYTE PTR [eax],al
     fcc:	00 02                	add    BYTE PTR [edx],al
     fce:	00 d8                	add    al,bl
     fd0:	00 00                	add    BYTE PTR [eax],al
     fd2:	00 01                	add    BYTE PTR [ecx],al
     fd4:	01 fb                	add    ebx,edi
     fd6:	0e                   	push   cs
     fd7:	0d 00 01 01 01       	or     eax,0x1010100
     fdc:	01 00                	add    DWORD PTR [eax],eax
     fde:	00 00                	add    BYTE PTR [eax],al
     fe0:	01 00                	add    DWORD PTR [eax],eax
     fe2:	00 01                	add    BYTE PTR [ecx],al
     fe4:	73 72                	jae    1058 <sysEnter_Vector-0x12efa8>
     fe6:	63 00                	arpl   WORD PTR [eax],ax
     fe8:	2f                   	das    
     fe9:	68 6f 6d 65 2f       	push   0x2f656d6f
     fee:	79 6f                	jns    105f <sysEnter_Vector-0x12efa1>
     ff0:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ff7:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ffa:	73 73                	jae    106f <sysEnter_Vector-0x12ef91>
     ffc:	2f                   	das    
     ffd:	6c                   	ins    BYTE PTR es:[edi],dx
     ffe:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1005:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    100b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1011:	78 2d                	js     1040 <sysEnter_Vector-0x12efc0>
    1013:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1015:	75 2f                	jne    1046 <sysEnter_Vector-0x12efba>
    1017:	35 2e 33 2e 30       	xor    eax,0x302e332e
    101c:	2f                   	das    
    101d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1024:	00 2e                	add    BYTE PTR [esi],ch
    1026:	2e                   	cs
    1027:	2f                   	das    
    1028:	2e                   	cs
    1029:	2e                   	cs
    102a:	2f                   	das    
    102b:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    102f:	6a 2f                	push   0x2f
    1031:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1034:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    103b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    103c:	65                   	gs
    103d:	6c                   	ins    BYTE PTR es:[edi],dx
    103e:	2f                   	das    
    103f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1046:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1049:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    104d:	65 00 00             	add    BYTE PTR gs:[eax],al
    1050:	73 74                	jae    10c6 <sysEnter_Vector-0x12ef3a>
    1052:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    1059:	00 
    105a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    105d:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1064:	63 
    1065:	2e                   	cs
    1066:	68 00 02 00 00       	push   0x200
    106b:	73 74                	jae    10e1 <sysEnter_Vector-0x12ef1f>
    106d:	64                   	fs
    106e:	64                   	fs
    106f:	65                   	gs
    1070:	66                   	data16
    1071:	2e                   	cs
    1072:	68 00 02 00 00       	push   0x200
    1077:	64                   	fs
    1078:	6c                   	ins    BYTE PTR es:[edi],dx
    1079:	6c                   	ins    BYTE PTR es:[edi],dx
    107a:	69 73 74 2e 68 00 03 	imul   esi,DWORD PTR [ebx+0x74],0x300682e
    1081:	00 00                	add    BYTE PTR [eax],al
    1083:	73 74                	jae    10f9 <sysEnter_Vector-0x12ef07>
    1085:	64 69 6f 2e 68 00 04 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x40068
    108c:	00 
    108d:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1090:	6c                   	ins    BYTE PTR es:[edi],dx
    1091:	6c                   	ins    BYTE PTR es:[edi],dx
    1092:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1093:	63 2e                	arpl   WORD PTR [esi],bp
    1095:	68 00 04 00 00       	push   0x400
    109a:	6c                   	ins    BYTE PTR es:[edi],dx
    109b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    10a2:	4f                   	dec    edi
    10a3:	53                   	push   ebx
    10a4:	2e                   	cs
    10a5:	68 00 04 00 00       	push   0x400
    10aa:	00 00                	add    BYTE PTR [eax],al
    10ac:	05 02 60 20 00       	add    eax,0x206002
    10b1:	9f                   	lahf   
    10b2:	03 c3                	add    eax,ebx
    10b4:	00 01                	add    BYTE PTR [ecx],al
    10b6:	08 22                	or     BYTE PTR [edx],ah
    10b8:	76 08                	jbe    10c2 <sysEnter_Vector-0x12ef3e>
    10ba:	31 d7                	xor    edi,edx
    10bc:	d7                   	xlat   BYTE PTR ds:[ebx]
    10bd:	d7                   	xlat   BYTE PTR ds:[ebx]
    10be:	d7                   	xlat   BYTE PTR ds:[ebx]
    10bf:	ad                   	lods   eax,DWORD PTR ds:[esi]
    10c0:	e6 21                	out    0x21,al
    10c2:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
    10c8:	00 00                	add    BYTE PTR [eax],al
    10ca:	00 02                	add    BYTE PTR [edx],al
    10cc:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
    10d3:	fb                   	sti    
    10d4:	0e                   	push   cs
    10d5:	0d 00 01 01 01       	or     eax,0x1010100
    10da:	01 00                	add    DWORD PTR [eax],eax
    10dc:	00 00                	add    BYTE PTR [eax],al
    10de:	01 00                	add    DWORD PTR [eax],eax
    10e0:	00 01                	add    BYTE PTR [ecx],al
    10e2:	73 72                	jae    1156 <sysEnter_Vector-0x12eeaa>
    10e4:	63 2f                	arpl   WORD PTR [edi],bp
    10e6:	73 74                	jae    115c <sysEnter_Vector-0x12eea4>
    10e8:	72 69                	jb     1153 <sysEnter_Vector-0x12eead>
    10ea:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10eb:	67 73 00             	addr16 jae 10ee <sysEnter_Vector-0x12ef12>
    10ee:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10f5:	00 2f                	add    BYTE PTR [edi],ch
    10f7:	68 6f 6d 65 2f       	push   0x2f656d6f
    10fc:	79 6f                	jns    116d <sysEnter_Vector-0x12ee93>
    10fe:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1105:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1108:	73 73                	jae    117d <sysEnter_Vector-0x12ee83>
    110a:	2f                   	das    
    110b:	6c                   	ins    BYTE PTR es:[edi],dx
    110c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1113:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1119:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    111f:	78 2d                	js     114e <sysEnter_Vector-0x12eeb2>
    1121:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1123:	75 2f                	jne    1154 <sysEnter_Vector-0x12eeac>
    1125:	35 2e 33 2e 30       	xor    eax,0x302e332e
    112a:	2f                   	das    
    112b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1132:	00 00                	add    BYTE PTR [eax],al
    1134:	73 74                	jae    11aa <sysEnter_Vector-0x12ee56>
    1136:	72 63                	jb     119b <sysEnter_Vector-0x12ee65>
    1138:	61                   	popa   
    1139:	74 2e                	je     1169 <sysEnter_Vector-0x12ee97>
    113b:	63 00                	arpl   WORD PTR [eax],ax
    113d:	01 00                	add    DWORD PTR [eax],eax
    113f:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1142:	6c                   	ins    BYTE PTR es:[edi],dx
    1143:	6c                   	ins    BYTE PTR es:[edi],dx
    1144:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1145:	63 2e                	arpl   WORD PTR [esi],bp
    1147:	68 00 02 00 00       	push   0x200
    114c:	6c                   	ins    BYTE PTR es:[edi],dx
    114d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1154:	4f                   	dec    edi
    1155:	53                   	push   ebx
    1156:	2e                   	cs
    1157:	68 00 02 00 00       	push   0x200
    115c:	73 74                	jae    11d2 <sysEnter_Vector-0x12ee2e>
    115e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1165:	63 
    1166:	2e                   	cs
    1167:	68 00 03 00 00       	push   0x300
    116c:	00 00                	add    BYTE PTR [eax],al
    116e:	05 02 e4 20 00       	add    eax,0x20e402
    1173:	9f                   	lahf   
    1174:	03 1d 01 08 21 02    	add    ebx,DWORD PTR ds:0x2210801
    117a:	24 13                	and    al,0x13
    117c:	3d 5b 08 21 02       	cmp    eax,0x221085b
    1181:	24 13                	and    al,0x13
    1183:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
    1188:	49                   	dec    ecx
    1189:	e8 76 2f 08 4b       	call   4b084104 <sysEnter_Vector+0x4af54104>
    118e:	4b                   	dec    ebx
    118f:	47                   	inc    edi
    1190:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
    1197:	bb 00 00 00 02       	mov    ebx,0x2000000
    119c:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
    11a3:	fb                   	sti    
    11a4:	0e                   	push   cs
    11a5:	0d 00 01 01 01       	or     eax,0x1010100
    11aa:	01 00                	add    DWORD PTR [eax],eax
    11ac:	00 00                	add    BYTE PTR [eax],al
    11ae:	01 00                	add    DWORD PTR [eax],eax
    11b0:	00 01                	add    BYTE PTR [ecx],al
    11b2:	73 72                	jae    1226 <sysEnter_Vector-0x12edda>
    11b4:	63 2f                	arpl   WORD PTR [edi],bp
    11b6:	73 74                	jae    122c <sysEnter_Vector-0x12edd4>
    11b8:	72 69                	jb     1223 <sysEnter_Vector-0x12eddd>
    11ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11bb:	67 73 00             	addr16 jae 11be <sysEnter_Vector-0x12ee42>
    11be:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    11c5:	00 2f                	add    BYTE PTR [edi],ch
    11c7:	68 6f 6d 65 2f       	push   0x2f656d6f
    11cc:	79 6f                	jns    123d <sysEnter_Vector-0x12edc3>
    11ce:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11d5:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11d8:	73 73                	jae    124d <sysEnter_Vector-0x12edb3>
    11da:	2f                   	das    
    11db:	6c                   	ins    BYTE PTR es:[edi],dx
    11dc:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11e3:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11e9:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11ef:	78 2d                	js     121e <sysEnter_Vector-0x12ede2>
    11f1:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11f3:	75 2f                	jne    1224 <sysEnter_Vector-0x12eddc>
    11f5:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11fa:	2f                   	das    
    11fb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1202:	00 00                	add    BYTE PTR [eax],al
    1204:	73 74                	jae    127a <sysEnter_Vector-0x12ed86>
    1206:	72 63                	jb     126b <sysEnter_Vector-0x12ed95>
    1208:	6d                   	ins    DWORD PTR es:[edi],dx
    1209:	70 2e                	jo     1239 <sysEnter_Vector-0x12edc7>
    120b:	63 00                	arpl   WORD PTR [eax],ax
    120d:	01 00                	add    DWORD PTR [eax],eax
    120f:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1212:	6c                   	ins    BYTE PTR es:[edi],dx
    1213:	6c                   	ins    BYTE PTR es:[edi],dx
    1214:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1215:	63 2e                	arpl   WORD PTR [esi],bp
    1217:	68 00 02 00 00       	push   0x200
    121c:	6c                   	ins    BYTE PTR es:[edi],dx
    121d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1224:	4f                   	dec    edi
    1225:	53                   	push   ebx
    1226:	2e                   	cs
    1227:	68 00 02 00 00       	push   0x200
    122c:	73 74                	jae    12a2 <sysEnter_Vector-0x12ed5e>
    122e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1235:	63 
    1236:	2e                   	cs
    1237:	68 00 03 00 00       	push   0x300
    123c:	00 00                	add    BYTE PTR [eax],al
    123e:	05 02 d0 21 00       	add    eax,0x21d002
    1243:	9f                   	lahf   
    1244:	03 18                	add    ebx,DWORD PTR [eax]
    1246:	01 08                	add    DWORD PTR [eax],ecx
    1248:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    124e:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
    1254:	01 01                	add    DWORD PTR [ecx],eax
    1256:	dc 00                	fadd   QWORD PTR [eax]
    1258:	00 00                	add    BYTE PTR [eax],al
    125a:	02 00                	add    al,BYTE PTR [eax]
    125c:	9c                   	pushf  
    125d:	00 00                	add    BYTE PTR [eax],al
    125f:	00 01                	add    BYTE PTR [ecx],al
    1261:	01 fb                	add    ebx,edi
    1263:	0e                   	push   cs
    1264:	0d 00 01 01 01       	or     eax,0x1010100
    1269:	01 00                	add    DWORD PTR [eax],eax
    126b:	00 00                	add    BYTE PTR [eax],al
    126d:	01 00                	add    DWORD PTR [eax],eax
    126f:	00 01                	add    BYTE PTR [ecx],al
    1271:	73 72                	jae    12e5 <sysEnter_Vector-0x12ed1b>
    1273:	63 2f                	arpl   WORD PTR [edi],bp
    1275:	73 74                	jae    12eb <sysEnter_Vector-0x12ed15>
    1277:	72 69                	jb     12e2 <sysEnter_Vector-0x12ed1e>
    1279:	6e                   	outs   dx,BYTE PTR ds:[esi]
    127a:	67 73 00             	addr16 jae 127d <sysEnter_Vector-0x12ed83>
    127d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1284:	00 2f                	add    BYTE PTR [edi],ch
    1286:	68 6f 6d 65 2f       	push   0x2f656d6f
    128b:	79 6f                	jns    12fc <sysEnter_Vector-0x12ed04>
    128d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1294:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1297:	73 73                	jae    130c <sysEnter_Vector-0x12ecf4>
    1299:	2f                   	das    
    129a:	6c                   	ins    BYTE PTR es:[edi],dx
    129b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    12a2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    12a8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    12ae:	78 2d                	js     12dd <sysEnter_Vector-0x12ed23>
    12b0:	67 6e                	outs   dx,BYTE PTR ds:[si]
    12b2:	75 2f                	jne    12e3 <sysEnter_Vector-0x12ed1d>
    12b4:	35 2e 33 2e 30       	xor    eax,0x302e332e
    12b9:	2f                   	das    
    12ba:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    12c1:	00 00                	add    BYTE PTR [eax],al
    12c3:	73 74                	jae    1339 <sysEnter_Vector-0x12ecc7>
    12c5:	72 63                	jb     132a <sysEnter_Vector-0x12ecd6>
    12c7:	70 79                	jo     1342 <sysEnter_Vector-0x12ecbe>
    12c9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    12cc:	01 00                	add    DWORD PTR [eax],eax
    12ce:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    12d1:	6c                   	ins    BYTE PTR es:[edi],dx
    12d2:	6c                   	ins    BYTE PTR es:[edi],dx
    12d3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    12d4:	63 2e                	arpl   WORD PTR [esi],bp
    12d6:	68 00 02 00 00       	push   0x200
    12db:	6c                   	ins    BYTE PTR es:[edi],dx
    12dc:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    12e3:	4f                   	dec    edi
    12e4:	53                   	push   ebx
    12e5:	2e                   	cs
    12e6:	68 00 02 00 00       	push   0x200
    12eb:	73 74                	jae    1361 <sysEnter_Vector-0x12ec9f>
    12ed:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    12f4:	63 
    12f5:	2e                   	cs
    12f6:	68 00 03 00 00       	push   0x300
    12fb:	00 00                	add    BYTE PTR [eax],al
    12fd:	05 02 30 22 00       	add    eax,0x223002
    1302:	9f                   	lahf   
    1303:	16                   	push   ss
    1304:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    1308:	04 01                	add    al,0x1
    130a:	06                   	push   es
    130b:	20 06                	and    BYTE PTR [esi],al
    130d:	08 ca                	or     dl,cl
    130f:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1315:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1318:	06                   	push   es
    1319:	20 06                	and    BYTE PTR [esi],al
    131b:	08 ca                	or     dl,cl
    131d:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1323:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1326:	06                   	push   es
    1327:	20 00                	and    BYTE PTR [eax],al
    1329:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    132c:	08 c8                	or     al,cl
    132e:	06                   	push   es
    132f:	ca 3d 02             	retf   0x23d
    1332:	02 00                	add    al,BYTE PTR [eax]
    1334:	01 01                	add    DWORD PTR [ecx],eax
    1336:	cb                   	retf   
    1337:	00 00                	add    BYTE PTR [eax],al
    1339:	00 02                	add    BYTE PTR [edx],al
    133b:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    1341:	01 fb                	add    ebx,edi
    1343:	0e                   	push   cs
    1344:	0d 00 01 01 01       	or     eax,0x1010100
    1349:	01 00                	add    DWORD PTR [eax],eax
    134b:	00 00                	add    BYTE PTR [eax],al
    134d:	01 00                	add    DWORD PTR [eax],eax
    134f:	00 01                	add    BYTE PTR [ecx],al
    1351:	73 72                	jae    13c5 <sysEnter_Vector-0x12ec3b>
    1353:	63 2f                	arpl   WORD PTR [edi],bp
    1355:	73 74                	jae    13cb <sysEnter_Vector-0x12ec35>
    1357:	72 69                	jb     13c2 <sysEnter_Vector-0x12ec3e>
    1359:	6e                   	outs   dx,BYTE PTR ds:[esi]
    135a:	67 73 00             	addr16 jae 135d <sysEnter_Vector-0x12eca3>
    135d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1364:	00 2f                	add    BYTE PTR [edi],ch
    1366:	68 6f 6d 65 2f       	push   0x2f656d6f
    136b:	79 6f                	jns    13dc <sysEnter_Vector-0x12ec24>
    136d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1374:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1377:	73 73                	jae    13ec <sysEnter_Vector-0x12ec14>
    1379:	2f                   	das    
    137a:	6c                   	ins    BYTE PTR es:[edi],dx
    137b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1382:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1388:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    138e:	78 2d                	js     13bd <sysEnter_Vector-0x12ec43>
    1390:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1392:	75 2f                	jne    13c3 <sysEnter_Vector-0x12ec3d>
    1394:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1399:	2f                   	das    
    139a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13a1:	00 00                	add    BYTE PTR [eax],al
    13a3:	73 74                	jae    1419 <sysEnter_Vector-0x12ebe7>
    13a5:	72 69                	jb     1410 <sysEnter_Vector-0x12ebf0>
    13a7:	73 6e                	jae    1417 <sysEnter_Vector-0x12ebe9>
    13a9:	75 6d                	jne    1418 <sysEnter_Vector-0x12ebe8>
    13ab:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    13ae:	01 00                	add    DWORD PTR [eax],eax
    13b0:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    13b3:	6c                   	ins    BYTE PTR es:[edi],dx
    13b4:	6c                   	ins    BYTE PTR es:[edi],dx
    13b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
    13b6:	63 2e                	arpl   WORD PTR [esi],bp
    13b8:	68 00 02 00 00       	push   0x200
    13bd:	6c                   	ins    BYTE PTR es:[edi],dx
    13be:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    13c5:	4f                   	dec    edi
    13c6:	53                   	push   ebx
    13c7:	2e                   	cs
    13c8:	68 00 02 00 00       	push   0x200
    13cd:	73 74                	jae    1443 <sysEnter_Vector-0x12ebbd>
    13cf:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    13d6:	63 
    13d7:	2e                   	cs
    13d8:	68 00 03 00 00       	push   0x300
    13dd:	00 00                	add    BYTE PTR [eax],al
    13df:	05 02 f8 22 00       	add    eax,0x22f802
    13e4:	9f                   	lahf   
    13e5:	1a 08                	sbb    cl,BYTE PTR [eax]
    13e7:	59                   	pop    ecx
    13e8:	00 02                	add    BYTE PTR [edx],al
    13ea:	04 01                	add    al,0x1
    13ec:	06                   	push   es
    13ed:	66                   	data16
    13ee:	00 02                	add    BYTE PTR [edx],al
    13f0:	04 02                	add    al,0x2
    13f2:	66 06                	pushw  es
    13f4:	75 59                	jne    144f <sysEnter_Vector-0x12ebb1>
    13f6:	31 f3                	xor    ebx,esi
    13f8:	76 2f                	jbe    1429 <sysEnter_Vector-0x12ebd7>
    13fa:	08 e5                	or     ch,ah
    13fc:	72 08                	jb     1406 <sysEnter_Vector-0x12ebfa>
    13fe:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    1401:	02 00                	add    al,BYTE PTR [eax]
    1403:	01 01                	add    DWORD PTR [ecx],eax
    1405:	94                   	xchg   esp,eax
    1406:	00 00                	add    BYTE PTR [eax],al
    1408:	00 02                	add    BYTE PTR [edx],al
    140a:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    140e:	00 01                	add    BYTE PTR [ecx],al
    1410:	01 fb                	add    ebx,edi
    1412:	0e                   	push   cs
    1413:	0d 00 01 01 01       	or     eax,0x1010100
    1418:	01 00                	add    DWORD PTR [eax],eax
    141a:	00 00                	add    BYTE PTR [eax],al
    141c:	01 00                	add    DWORD PTR [eax],eax
    141e:	00 01                	add    BYTE PTR [ecx],al
    1420:	73 72                	jae    1494 <sysEnter_Vector-0x12eb6c>
    1422:	63 2f                	arpl   WORD PTR [edi],bp
    1424:	73 74                	jae    149a <sysEnter_Vector-0x12eb66>
    1426:	72 69                	jb     1491 <sysEnter_Vector-0x12eb6f>
    1428:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1429:	67 73 00             	addr16 jae 142c <sysEnter_Vector-0x12ebd4>
    142c:	2f                   	das    
    142d:	68 6f 6d 65 2f       	push   0x2f656d6f
    1432:	79 6f                	jns    14a3 <sysEnter_Vector-0x12eb5d>
    1434:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    143b:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    143e:	73 73                	jae    14b3 <sysEnter_Vector-0x12eb4d>
    1440:	2f                   	das    
    1441:	6c                   	ins    BYTE PTR es:[edi],dx
    1442:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1449:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    144f:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1455:	78 2d                	js     1484 <sysEnter_Vector-0x12eb7c>
    1457:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1459:	75 2f                	jne    148a <sysEnter_Vector-0x12eb76>
    145b:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1460:	2f                   	das    
    1461:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1468:	00 00                	add    BYTE PTR [eax],al
    146a:	73 74                	jae    14e0 <sysEnter_Vector-0x12eb20>
    146c:	72 6c                	jb     14da <sysEnter_Vector-0x12eb26>
    146e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1470:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1473:	01 00                	add    DWORD PTR [eax],eax
    1475:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1478:	64                   	fs
    1479:	64                   	fs
    147a:	65                   	gs
    147b:	66                   	data16
    147c:	2e                   	cs
    147d:	68 00 02 00 00       	push   0x200
    1482:	00 00                	add    BYTE PTR [eax],al
    1484:	05 02 84 23 00       	add    eax,0x238402
    1489:	9f                   	lahf   
    148a:	14 f3                	adc    al,0xf3
    148c:	75 2f                	jne    14bd <sysEnter_Vector-0x12eb43>
    148e:	49                   	dec    ecx
    148f:	e6 3d                	out    0x3d,al
    1491:	30 f3                	xor    bl,dh
    1493:	75 2f                	jne    14c4 <sysEnter_Vector-0x12eb3c>
    1495:	49                   	dec    ecx
    1496:	e6 3d                	out    0x3d,al
    1498:	02 02                	add    al,BYTE PTR [edx]
    149a:	00 01                	add    BYTE PTR [ecx],al
    149c:	01 c1                	add    ecx,eax
    149e:	00 00                	add    BYTE PTR [eax],al
    14a0:	00 02                	add    BYTE PTR [edx],al
    14a2:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    14a5:	00 00                	add    BYTE PTR [eax],al
    14a7:	01 01                	add    DWORD PTR [ecx],eax
    14a9:	fb                   	sti    
    14aa:	0e                   	push   cs
    14ab:	0d 00 01 01 01       	or     eax,0x1010100
    14b0:	01 00                	add    DWORD PTR [eax],eax
    14b2:	00 00                	add    BYTE PTR [eax],al
    14b4:	01 00                	add    DWORD PTR [eax],eax
    14b6:	00 01                	add    BYTE PTR [ecx],al
    14b8:	73 72                	jae    152c <sysEnter_Vector-0x12ead4>
    14ba:	63 2f                	arpl   WORD PTR [edi],bp
    14bc:	73 74                	jae    1532 <sysEnter_Vector-0x12eace>
    14be:	72 69                	jb     1529 <sysEnter_Vector-0x12ead7>
    14c0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    14c1:	67 73 00             	addr16 jae 14c4 <sysEnter_Vector-0x12eb3c>
    14c4:	2f                   	das    
    14c5:	68 6f 6d 65 2f       	push   0x2f656d6f
    14ca:	79 6f                	jns    153b <sysEnter_Vector-0x12eac5>
    14cc:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    14d3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    14d6:	73 73                	jae    154b <sysEnter_Vector-0x12eab5>
    14d8:	2f                   	das    
    14d9:	6c                   	ins    BYTE PTR es:[edi],dx
    14da:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    14e1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    14e7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    14ed:	78 2d                	js     151c <sysEnter_Vector-0x12eae4>
    14ef:	67 6e                	outs   dx,BYTE PTR ds:[si]
    14f1:	75 2f                	jne    1522 <sysEnter_Vector-0x12eade>
    14f3:	35 2e 33 2e 30       	xor    eax,0x302e332e
    14f8:	2f                   	das    
    14f9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1500:	00 00                	add    BYTE PTR [eax],al
    1502:	73 74                	jae    1578 <sysEnter_Vector-0x12ea88>
    1504:	72 6e                	jb     1574 <sysEnter_Vector-0x12ea8c>
    1506:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    1509:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    150c:	01 00                	add    DWORD PTR [eax],eax
    150e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1511:	64                   	fs
    1512:	64                   	fs
    1513:	65                   	gs
    1514:	66                   	data16
    1515:	2e                   	cs
    1516:	68 00 02 00 00       	push   0x200
    151b:	00 00                	add    BYTE PTR [eax],al
    151d:	05 02 e8 23 00       	add    eax,0x23e802
    1522:	9f                   	lahf   
    1523:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    1526:	c9                   	leave  
    1527:	2f                   	das    
    1528:	f3 00 02             	repz add BYTE PTR [edx],al
    152b:	04 01                	add    al,0x1
    152d:	06                   	push   es
    152e:	f2 00 02             	repnz add BYTE PTR [edx],al
    1531:	04 02                	add    al,0x2
    1533:	74 06                	je     153b <sysEnter_Vector-0x12eac5>
    1535:	75 9f                	jne    14d6 <sysEnter_Vector-0x12eb2a>
    1537:	70 00                	jo     1539 <sysEnter_Vector-0x12eac7>
    1539:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    153c:	06                   	push   es
    153d:	ba 06 6b 59 31       	mov    edx,0x31596b06
    1542:	c9                   	leave  
    1543:	2f                   	das    
    1544:	f3 00 02             	repz add BYTE PTR [edx],al
    1547:	04 01                	add    al,0x1
    1549:	06                   	push   es
    154a:	f2 00 02             	repnz add BYTE PTR [edx],al
    154d:	04 02                	add    al,0x2
    154f:	74 06                	je     1557 <sysEnter_Vector-0x12eaa9>
    1551:	75 9f                	jne    14f2 <sysEnter_Vector-0x12eb0e>
    1553:	70 00                	jo     1555 <sysEnter_Vector-0x12eaab>
    1555:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1558:	06                   	push   es
    1559:	ba 06 6b 59 02       	mov    edx,0x2596b06
    155e:	02 00                	add    al,BYTE PTR [eax]
    1560:	01 01                	add    DWORD PTR [ecx],eax
    1562:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1567:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    156a:	00 00                	add    BYTE PTR [eax],al
    156c:	01 01                	add    DWORD PTR [ecx],eax
    156e:	fb                   	sti    
    156f:	0e                   	push   cs
    1570:	0d 00 01 01 01       	or     eax,0x1010100
    1575:	01 00                	add    DWORD PTR [eax],eax
    1577:	00 00                	add    BYTE PTR [eax],al
    1579:	01 00                	add    DWORD PTR [eax],eax
    157b:	00 01                	add    BYTE PTR [ecx],al
    157d:	73 72                	jae    15f1 <sysEnter_Vector-0x12ea0f>
    157f:	63 2f                	arpl   WORD PTR [edi],bp
    1581:	73 74                	jae    15f7 <sysEnter_Vector-0x12ea09>
    1583:	72 69                	jb     15ee <sysEnter_Vector-0x12ea12>
    1585:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1586:	67 73 00             	addr16 jae 1589 <sysEnter_Vector-0x12ea77>
    1589:	2f                   	das    
    158a:	68 6f 6d 65 2f       	push   0x2f656d6f
    158f:	79 6f                	jns    1600 <sysEnter_Vector-0x12ea00>
    1591:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1598:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    159b:	73 73                	jae    1610 <sysEnter_Vector-0x12e9f0>
    159d:	2f                   	das    
    159e:	6c                   	ins    BYTE PTR es:[edi],dx
    159f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    15a6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    15ac:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    15b2:	78 2d                	js     15e1 <sysEnter_Vector-0x12ea1f>
    15b4:	67 6e                	outs   dx,BYTE PTR ds:[si]
    15b6:	75 2f                	jne    15e7 <sysEnter_Vector-0x12ea19>
    15b8:	35 2e 33 2e 30       	xor    eax,0x302e332e
    15bd:	2f                   	das    
    15be:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15c5:	00 00                	add    BYTE PTR [eax],al
    15c7:	73 74                	jae    163d <sysEnter_Vector-0x12e9c3>
    15c9:	72 6e                	jb     1639 <sysEnter_Vector-0x12e9c7>
    15cb:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    15ce:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15d1:	01 00                	add    DWORD PTR [eax],eax
    15d3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15d6:	64                   	fs
    15d7:	64                   	fs
    15d8:	65                   	gs
    15d9:	66                   	data16
    15da:	2e                   	cs
    15db:	68 00 02 00 00       	push   0x200
    15e0:	00 00                	add    BYTE PTR [eax],al
    15e2:	05 02 b8 24 00       	add    eax,0x24b802
    15e7:	9f                   	lahf   
    15e8:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    15ee:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    15f1:	00 02                	add    BYTE PTR [edx],al
    15f3:	04 01                	add    al,0x1
    15f5:	06                   	push   es
    15f6:	66 06                	pushw  es
    15f8:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    15fd:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    1602:	02 02                	add    al,BYTE PTR [edx]
    1604:	00 01                	add    BYTE PTR [ecx],al
    1606:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
    1609:	00 00                	add    BYTE PTR [eax],al
    160b:	02 00                	add    al,BYTE PTR [eax]
    160d:	9c                   	pushf  
    160e:	00 00                	add    BYTE PTR [eax],al
    1610:	00 01                	add    BYTE PTR [ecx],al
    1612:	01 fb                	add    ebx,edi
    1614:	0e                   	push   cs
    1615:	0d 00 01 01 01       	or     eax,0x1010100
    161a:	01 00                	add    DWORD PTR [eax],eax
    161c:	00 00                	add    BYTE PTR [eax],al
    161e:	01 00                	add    DWORD PTR [eax],eax
    1620:	00 01                	add    BYTE PTR [ecx],al
    1622:	73 72                	jae    1696 <sysEnter_Vector-0x12e96a>
    1624:	63 2f                	arpl   WORD PTR [edi],bp
    1626:	73 74                	jae    169c <sysEnter_Vector-0x12e964>
    1628:	72 69                	jb     1693 <sysEnter_Vector-0x12e96d>
    162a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    162b:	67 73 00             	addr16 jae 162e <sysEnter_Vector-0x12e9d2>
    162e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1635:	00 2f                	add    BYTE PTR [edi],ch
    1637:	68 6f 6d 65 2f       	push   0x2f656d6f
    163c:	79 6f                	jns    16ad <sysEnter_Vector-0x12e953>
    163e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1645:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1648:	73 73                	jae    16bd <sysEnter_Vector-0x12e943>
    164a:	2f                   	das    
    164b:	6c                   	ins    BYTE PTR es:[edi],dx
    164c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1653:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1659:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    165f:	78 2d                	js     168e <sysEnter_Vector-0x12e972>
    1661:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1663:	75 2f                	jne    1694 <sysEnter_Vector-0x12e96c>
    1665:	35 2e 33 2e 30       	xor    eax,0x302e332e
    166a:	2f                   	das    
    166b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1672:	00 00                	add    BYTE PTR [eax],al
    1674:	73 74                	jae    16ea <sysEnter_Vector-0x12e916>
    1676:	72 6f                	jb     16e7 <sysEnter_Vector-0x12e919>
    1678:	75 6c                	jne    16e6 <sysEnter_Vector-0x12e91a>
    167a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    167d:	01 00                	add    DWORD PTR [eax],eax
    167f:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1682:	6c                   	ins    BYTE PTR es:[edi],dx
    1683:	6c                   	ins    BYTE PTR es:[edi],dx
    1684:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1685:	63 2e                	arpl   WORD PTR [esi],bp
    1687:	68 00 02 00 00       	push   0x200
    168c:	6c                   	ins    BYTE PTR es:[edi],dx
    168d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1694:	4f                   	dec    edi
    1695:	53                   	push   ebx
    1696:	2e                   	cs
    1697:	68 00 02 00 00       	push   0x200
    169c:	73 74                	jae    1712 <sysEnter_Vector-0x12e8ee>
    169e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    16a5:	63 
    16a6:	2e                   	cs
    16a7:	68 00 03 00 00       	push   0x300
    16ac:	00 00                	add    BYTE PTR [eax],al
    16ae:	05 02 38 25 00       	add    eax,0x253802
    16b3:	9f                   	lahf   
    16b4:	03 3b                	add    edi,DWORD PTR [ebx]
    16b6:	01 08                	add    DWORD PTR [eax],ecx
    16b8:	2f                   	das    
    16b9:	40                   	inc    eax
    16ba:	00 02                	add    BYTE PTR [edx],al
    16bc:	04 01                	add    al,0x1
    16be:	7a 00                	jp     16c0 <sysEnter_Vector-0x12e940>
    16c0:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16c3:	ad                   	lods   eax,DWORD PTR ds:[esi]
    16c4:	59                   	pop    ecx
    16c5:	59                   	pop    ecx
    16c6:	75 c9                	jne    1691 <sysEnter_Vector-0x12e96f>
    16c8:	59                   	pop    ecx
    16c9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    16ca:	00 02                	add    BYTE PTR [edx],al
    16cc:	04 02                	add    al,0x2
    16ce:	06                   	push   es
    16cf:	66                   	data16
    16d0:	00 02                	add    BYTE PTR [edx],al
    16d2:	04 03                	add    al,0x3
    16d4:	66 06                	pushw  es
    16d6:	59                   	pop    ecx
    16d7:	00 02                	add    BYTE PTR [edx],al
    16d9:	04 01                	add    al,0x1
    16db:	06                   	push   es
    16dc:	74 06                	je     16e4 <sysEnter_Vector-0x12e91c>
    16de:	75 91                	jne    1671 <sysEnter_Vector-0x12e98f>
    16e0:	3d 76 67 00 02       	cmp    eax,0x2006776
    16e5:	04 01                	add    al,0x1
    16e7:	06                   	push   es
    16e8:	58                   	pop    eax
    16e9:	00 02                	add    BYTE PTR [edx],al
    16eb:	04 02                	add    al,0x2
    16ed:	74 00                	je     16ef <sysEnter_Vector-0x12e911>
    16ef:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    16f2:	58                   	pop    eax
    16f3:	06                   	push   es
    16f4:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    16f9:	9f                   	lahf   
    16fa:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    16fe:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1701:	06                   	push   es
    1702:	58                   	pop    eax
    1703:	00 02                	add    BYTE PTR [edx],al
    1705:	04 03                	add    al,0x3
    1707:	58                   	pop    eax
    1708:	00 02                	add    BYTE PTR [edx],al
    170a:	04 04                	add    al,0x4
    170c:	74 00                	je     170e <sysEnter_Vector-0x12e8f2>
    170e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1711:	58                   	pop    eax
    1712:	06                   	push   es
    1713:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1716:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1719:	06                   	push   es
    171a:	66                   	data16
    171b:	00 02                	add    BYTE PTR [edx],al
    171d:	04 02                	add    al,0x2
    171f:	58                   	pop    eax
    1720:	00 02                	add    BYTE PTR [edx],al
    1722:	04 03                	add    al,0x3
    1724:	58                   	pop    eax
    1725:	06                   	push   es
    1726:	67 76 59             	addr16 jbe 1782 <sysEnter_Vector-0x12e87e>
    1729:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    172d:	03 10                	add    edx,DWORD PTR [eax]
    172f:	ac                   	lods   al,BYTE PTR ds:[esi]
    1730:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1733:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1736:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    1739:	67 2f                	addr16 das 
    173b:	67 00 02             	add    BYTE PTR [bp+si],al
    173e:	04 01                	add    al,0x1
    1740:	06                   	push   es
    1741:	66                   	data16
    1742:	00 02                	add    BYTE PTR [edx],al
    1744:	04 02                	add    al,0x2
    1746:	58                   	pop    eax
    1747:	00 02                	add    BYTE PTR [edx],al
    1749:	04 04                	add    al,0x4
    174b:	3c 06                	cmp    al,0x6
    174d:	59                   	pop    ecx
    174e:	2f                   	das    
    174f:	02 08                	add    cl,BYTE PTR [eax]
    1751:	00 01                	add    BYTE PTR [ecx],al
    1753:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1756:	00 00                	add    BYTE PTR [eax],al
    1758:	02 00                	add    al,BYTE PTR [eax]
    175a:	2d 00 00 00 01       	sub    eax,0x1000000
    175f:	01 fb                	add    ebx,edi
    1761:	0e                   	push   cs
    1762:	0d 00 01 01 01       	or     eax,0x1010100
    1767:	01 00                	add    DWORD PTR [eax],eax
    1769:	00 00                	add    BYTE PTR [eax],al
    176b:	01 00                	add    DWORD PTR [eax],eax
    176d:	00 01                	add    BYTE PTR [ecx],al
    176f:	73 72                	jae    17e3 <sysEnter_Vector-0x12e81d>
    1771:	63 2f                	arpl   WORD PTR [edi],bp
    1773:	73 74                	jae    17e9 <sysEnter_Vector-0x12e817>
    1775:	72 69                	jb     17e0 <sysEnter_Vector-0x12e820>
    1777:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1778:	67 73 00             	addr16 jae 177b <sysEnter_Vector-0x12e885>
    177b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    177e:	72 70                	jb     17f0 <sysEnter_Vector-0x12e810>
    1780:	61                   	popa   
    1781:	72 74                	jb     17f7 <sysEnter_Vector-0x12e809>
    1783:	73 2e                	jae    17b3 <sysEnter_Vector-0x12e84d>
    1785:	63 00                	arpl   WORD PTR [eax],ax
    1787:	01 00                	add    DWORD PTR [eax],eax
    1789:	00 00                	add    BYTE PTR [eax],al
    178b:	00 05 02 b8 26 00    	add    BYTE PTR ds:0x26b802,al
    1791:	9f                   	lahf   
    1792:	13 c9                	adc    ecx,ecx
    1794:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1795:	3d 02 02 00 01       	cmp    eax,0x1000202
    179a:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    179d:	00 00                	add    BYTE PTR [eax],al
    179f:	02 00                	add    al,BYTE PTR [eax]
    17a1:	9c                   	pushf  
    17a2:	00 00                	add    BYTE PTR [eax],al
    17a4:	00 01                	add    BYTE PTR [ecx],al
    17a6:	01 fb                	add    ebx,edi
    17a8:	0e                   	push   cs
    17a9:	0d 00 01 01 01       	or     eax,0x1010100
    17ae:	01 00                	add    DWORD PTR [eax],eax
    17b0:	00 00                	add    BYTE PTR [eax],al
    17b2:	01 00                	add    DWORD PTR [eax],eax
    17b4:	00 01                	add    BYTE PTR [ecx],al
    17b6:	73 72                	jae    182a <sysEnter_Vector-0x12e7d6>
    17b8:	63 2f                	arpl   WORD PTR [edi],bp
    17ba:	73 74                	jae    1830 <sysEnter_Vector-0x12e7d0>
    17bc:	72 69                	jb     1827 <sysEnter_Vector-0x12e7d9>
    17be:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17bf:	67 73 00             	addr16 jae 17c2 <sysEnter_Vector-0x12e83e>
    17c2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17c9:	00 2f                	add    BYTE PTR [edi],ch
    17cb:	68 6f 6d 65 2f       	push   0x2f656d6f
    17d0:	79 6f                	jns    1841 <sysEnter_Vector-0x12e7bf>
    17d2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17d9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17dc:	73 73                	jae    1851 <sysEnter_Vector-0x12e7af>
    17de:	2f                   	das    
    17df:	6c                   	ins    BYTE PTR es:[edi],dx
    17e0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17e7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17ed:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    17f3:	78 2d                	js     1822 <sysEnter_Vector-0x12e7de>
    17f5:	67 6e                	outs   dx,BYTE PTR ds:[si]
    17f7:	75 2f                	jne    1828 <sysEnter_Vector-0x12e7d8>
    17f9:	35 2e 33 2e 30       	xor    eax,0x302e332e
    17fe:	2f                   	das    
    17ff:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1806:	00 00                	add    BYTE PTR [eax],al
    1808:	73 74                	jae    187e <sysEnter_Vector-0x12e782>
    180a:	72 74                	jb     1880 <sysEnter_Vector-0x12e780>
    180c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    180d:	6c                   	ins    BYTE PTR es:[edi],dx
    180e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1811:	01 00                	add    DWORD PTR [eax],eax
    1813:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1816:	6c                   	ins    BYTE PTR es:[edi],dx
    1817:	6c                   	ins    BYTE PTR es:[edi],dx
    1818:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1819:	63 2e                	arpl   WORD PTR [esi],bp
    181b:	68 00 02 00 00       	push   0x200
    1820:	6c                   	ins    BYTE PTR es:[edi],dx
    1821:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1828:	4f                   	dec    edi
    1829:	53                   	push   ebx
    182a:	2e                   	cs
    182b:	68 00 02 00 00       	push   0x200
    1830:	73 74                	jae    18a6 <sysEnter_Vector-0x12e75a>
    1832:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1839:	63 
    183a:	2e                   	cs
    183b:	68 00 03 00 00       	push   0x300
    1840:	00 00                	add    BYTE PTR [eax],al
    1842:	05 02 d8 26 00       	add    eax,0x26d802
    1847:	9f                   	lahf   
    1848:	03 d7                	add    edx,edi
    184a:	00 01                	add    BYTE PTR [ecx],al
    184c:	08 2f                	or     BYTE PTR [edi],ch
    184e:	40                   	inc    eax
    184f:	00 02                	add    BYTE PTR [edx],al
    1851:	04 01                	add    al,0x1
    1853:	7c 00                	jl     1855 <sysEnter_Vector-0x12e7ab>
    1855:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1858:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1859:	59                   	pop    ecx
    185a:	59                   	pop    ecx
    185b:	75 c9                	jne    1826 <sysEnter_Vector-0x12e7da>
    185d:	59                   	pop    ecx
    185e:	ad                   	lods   eax,DWORD PTR ds:[esi]
    185f:	00 02                	add    BYTE PTR [edx],al
    1861:	04 02                	add    al,0x2
    1863:	06                   	push   es
    1864:	66                   	data16
    1865:	00 02                	add    BYTE PTR [edx],al
    1867:	04 03                	add    al,0x3
    1869:	66 06                	pushw  es
    186b:	59                   	pop    ecx
    186c:	00 02                	add    BYTE PTR [edx],al
    186e:	04 01                	add    al,0x1
    1870:	06                   	push   es
    1871:	74 06                	je     1879 <sysEnter_Vector-0x12e787>
    1873:	75 91                	jne    1806 <sysEnter_Vector-0x12e7fa>
    1875:	3d 76 67 00 02       	cmp    eax,0x2006776
    187a:	04 01                	add    al,0x1
    187c:	06                   	push   es
    187d:	58                   	pop    eax
    187e:	00 02                	add    BYTE PTR [edx],al
    1880:	04 02                	add    al,0x2
    1882:	74 00                	je     1884 <sysEnter_Vector-0x12e77c>
    1884:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1887:	58                   	pop    eax
    1888:	06                   	push   es
    1889:	03 13                	add    edx,DWORD PTR [ebx]
    188b:	3c 00                	cmp    al,0x0
    188d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1890:	06                   	push   es
    1891:	66                   	data16
    1892:	00 02                	add    BYTE PTR [edx],al
    1894:	04 02                	add    al,0x2
    1896:	74 00                	je     1898 <sysEnter_Vector-0x12e768>
    1898:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    189b:	06                   	push   es
    189c:	59                   	pop    ecx
    189d:	00 02                	add    BYTE PTR [edx],al
    189f:	04 04                	add    al,0x4
    18a1:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    18a7:	f3 9f                	repz lahf 
    18a9:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    18ad:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18b0:	06                   	push   es
    18b1:	58                   	pop    eax
    18b2:	00 02                	add    BYTE PTR [edx],al
    18b4:	04 03                	add    al,0x3
    18b6:	58                   	pop    eax
    18b7:	00 02                	add    BYTE PTR [edx],al
    18b9:	04 04                	add    al,0x4
    18bb:	74 00                	je     18bd <sysEnter_Vector-0x12e743>
    18bd:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    18c0:	58                   	pop    eax
    18c1:	06                   	push   es
    18c2:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    18c5:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18c8:	06                   	push   es
    18c9:	66                   	data16
    18ca:	00 02                	add    BYTE PTR [edx],al
    18cc:	04 02                	add    al,0x2
    18ce:	58                   	pop    eax
    18cf:	00 02                	add    BYTE PTR [edx],al
    18d1:	04 03                	add    al,0x3
    18d3:	58                   	pop    eax
    18d4:	06                   	push   es
    18d5:	59                   	pop    ecx
    18d6:	76 59                	jbe    1931 <sysEnter_Vector-0x12e6cf>
    18d8:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    18dc:	03 10                	add    edx,DWORD PTR [eax]
    18de:	ac                   	lods   al,BYTE PTR ds:[esi]
    18df:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    18e2:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    18e5:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    18e8:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18eb:	06                   	push   es
    18ec:	66                   	data16
    18ed:	00 02                	add    BYTE PTR [edx],al
    18ef:	04 02                	add    al,0x2
    18f1:	74 00                	je     18f3 <sysEnter_Vector-0x12e70d>
    18f3:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    18f6:	58                   	pop    eax
    18f7:	06                   	push   es
    18f8:	4b                   	dec    ebx
    18f9:	67 2f                	addr16 das 
    18fb:	67 00 02             	add    BYTE PTR [bp+si],al
    18fe:	04 01                	add    al,0x1
    1900:	06                   	push   es
    1901:	66                   	data16
    1902:	00 02                	add    BYTE PTR [edx],al
    1904:	04 02                	add    al,0x2
    1906:	58                   	pop    eax
    1907:	00 02                	add    BYTE PTR [edx],al
    1909:	04 04                	add    al,0x4
    190b:	3c 06                	cmp    al,0x6
    190d:	59                   	pop    ecx
    190e:	2f                   	das    
    190f:	02 08                	add    cl,BYTE PTR [eax]
    1911:	00 01                	add    BYTE PTR [ecx],al
    1913:	01 cf                	add    edi,ecx
    1915:	00 00                	add    BYTE PTR [eax],al
    1917:	00 02                	add    BYTE PTR [edx],al
    1919:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    191f:	01 fb                	add    ebx,edi
    1921:	0e                   	push   cs
    1922:	0d 00 01 01 01       	or     eax,0x1010100
    1927:	01 00                	add    DWORD PTR [eax],eax
    1929:	00 00                	add    BYTE PTR [eax],al
    192b:	01 00                	add    DWORD PTR [eax],eax
    192d:	00 01                	add    BYTE PTR [ecx],al
    192f:	73 72                	jae    19a3 <sysEnter_Vector-0x12e65d>
    1931:	63 2f                	arpl   WORD PTR [edi],bp
    1933:	73 74                	jae    19a9 <sysEnter_Vector-0x12e657>
    1935:	72 69                	jb     19a0 <sysEnter_Vector-0x12e660>
    1937:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1938:	67 73 00             	addr16 jae 193b <sysEnter_Vector-0x12e6c5>
    193b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1942:	00 2f                	add    BYTE PTR [edi],ch
    1944:	68 6f 6d 65 2f       	push   0x2f656d6f
    1949:	79 6f                	jns    19ba <sysEnter_Vector-0x12e646>
    194b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1952:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1955:	73 73                	jae    19ca <sysEnter_Vector-0x12e636>
    1957:	2f                   	das    
    1958:	6c                   	ins    BYTE PTR es:[edi],dx
    1959:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1960:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1966:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    196c:	78 2d                	js     199b <sysEnter_Vector-0x12e665>
    196e:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1970:	75 2f                	jne    19a1 <sysEnter_Vector-0x12e65f>
    1972:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1977:	2f                   	das    
    1978:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    197f:	00 00                	add    BYTE PTR [eax],al
    1981:	73 74                	jae    19f7 <sysEnter_Vector-0x12e609>
    1983:	72 74                	jb     19f9 <sysEnter_Vector-0x12e607>
    1985:	72 69                	jb     19f0 <sysEnter_Vector-0x12e610>
    1987:	6d                   	ins    DWORD PTR es:[edi],dx
    1988:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    198b:	01 00                	add    DWORD PTR [eax],eax
    198d:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1990:	6c                   	ins    BYTE PTR es:[edi],dx
    1991:	6c                   	ins    BYTE PTR es:[edi],dx
    1992:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1993:	63 2e                	arpl   WORD PTR [esi],bp
    1995:	68 00 02 00 00       	push   0x200
    199a:	6c                   	ins    BYTE PTR es:[edi],dx
    199b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    19a2:	4f                   	dec    edi
    19a3:	53                   	push   ebx
    19a4:	2e                   	cs
    19a5:	68 00 02 00 00       	push   0x200
    19aa:	73 74                	jae    1a20 <sysEnter_Vector-0x12e5e0>
    19ac:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    19b3:	63 
    19b4:	2e                   	cs
    19b5:	68 00 03 00 00       	push   0x300
    19ba:	00 00                	add    BYTE PTR [eax],al
    19bc:	05 02 74 28 00       	add    eax,0x287402
    19c1:	9f                   	lahf   
    19c2:	15 08 13 bf 30       	adc    eax,0x30bf1308
    19c7:	48                   	dec    eax
    19c8:	b3 08                	mov    bl,0x8
    19ca:	9f                   	lahf   
    19cb:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    19d1:	06                   	push   es
    19d2:	82                   	(bad)  
    19d3:	06                   	push   es
    19d4:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    19d5:	84 00                	test   BYTE PTR [eax],al
    19d7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    19da:	06                   	push   es
    19db:	20 06                	and    BYTE PTR [esi],al
    19dd:	08 ca                	or     dl,cl
    19df:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    19e5:	01 01                	add    DWORD PTR [ecx],eax
    19e7:	c7 00 00 00 02 00    	mov    DWORD PTR [eax],0x20000
    19ed:	94                   	xchg   esp,eax
    19ee:	00 00                	add    BYTE PTR [eax],al
    19f0:	00 01                	add    BYTE PTR [ecx],al
    19f2:	01 fb                	add    ebx,edi
    19f4:	0e                   	push   cs
    19f5:	0d 00 01 01 01       	or     eax,0x1010100
    19fa:	01 00                	add    DWORD PTR [eax],eax
    19fc:	00 00                	add    BYTE PTR [eax],al
    19fe:	01 00                	add    DWORD PTR [eax],eax
    1a00:	00 01                	add    BYTE PTR [ecx],al
    1a02:	73 72                	jae    1a76 <sysEnter_Vector-0x12e58a>
    1a04:	63 00                	arpl   WORD PTR [eax],ax
    1a06:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a0d:	00 2f                	add    BYTE PTR [edi],ch
    1a0f:	68 6f 6d 65 2f       	push   0x2f656d6f
    1a14:	79 6f                	jns    1a85 <sysEnter_Vector-0x12e57b>
    1a16:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1a1d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1a20:	73 73                	jae    1a95 <sysEnter_Vector-0x12e56b>
    1a22:	2f                   	das    
    1a23:	6c                   	ins    BYTE PTR es:[edi],dx
    1a24:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1a2b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1a31:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a37:	78 2d                	js     1a66 <sysEnter_Vector-0x12e59a>
    1a39:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a3b:	75 2f                	jne    1a6c <sysEnter_Vector-0x12e594>
    1a3d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a42:	2f                   	das    
    1a43:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a4a:	00 00                	add    BYTE PTR [eax],al
    1a4c:	73 74                	jae    1ac2 <sysEnter_Vector-0x12e53e>
    1a4e:	72 73                	jb     1ac3 <sysEnter_Vector-0x12e53d>
    1a50:	74 72                	je     1ac4 <sysEnter_Vector-0x12e53c>
    1a52:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1a55:	01 00                	add    DWORD PTR [eax],eax
    1a57:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1a5a:	6c                   	ins    BYTE PTR es:[edi],dx
    1a5b:	6c                   	ins    BYTE PTR es:[edi],dx
    1a5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1a5d:	63 2e                	arpl   WORD PTR [esi],bp
    1a5f:	68 00 02 00 00       	push   0x200
    1a64:	6c                   	ins    BYTE PTR es:[edi],dx
    1a65:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1a6c:	4f                   	dec    edi
    1a6d:	53                   	push   ebx
    1a6e:	2e                   	cs
    1a6f:	68 00 02 00 00       	push   0x200
    1a74:	73 74                	jae    1aea <sysEnter_Vector-0x12e516>
    1a76:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1a7d:	63 
    1a7e:	2e                   	cs
    1a7f:	68 00 03 00 00       	push   0x300
    1a84:	00 00                	add    BYTE PTR [eax],al
    1a86:	05 02 2c 29 00       	add    eax,0x292c02
    1a8b:	9f                   	lahf   
    1a8c:	03 33                	add    esi,DWORD PTR [ebx]
    1a8e:	01 ec                	add    esp,ebp
    1a90:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1a95:	75 5a                	jne    1af1 <sysEnter_Vector-0x12e50f>
    1a97:	08 3f                	or     BYTE PTR [edi],bh
    1a99:	2c 23                	sub    al,0x23
    1a9b:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1a9e:	1e                   	push   ds
    1a9f:	00 02                	add    BYTE PTR [edx],al
    1aa1:	04 01                	add    al,0x1
    1aa3:	06                   	push   es
    1aa4:	4a                   	dec    edx
    1aa5:	06                   	push   es
    1aa6:	03 0f                	add    ecx,DWORD PTR [edi]
    1aa8:	9e                   	sahf   
    1aa9:	59                   	pop    ecx
    1aaa:	4d                   	dec    ebp
    1aab:	c9                   	leave  
    1aac:	d7                   	xlat   BYTE PTR ds:[ebx]
    1aad:	02 02                	add    al,BYTE PTR [edx]
    1aaf:	00 01                	add    BYTE PTR [ecx],al
    1ab1:	01 3b                	add    DWORD PTR [ebx],edi
    1ab3:	03 00                	add    eax,DWORD PTR [eax]
    1ab5:	00 02                	add    BYTE PTR [edx],al
    1ab7:	00 cc                	add    ah,cl
    1ab9:	00 00                	add    BYTE PTR [eax],al
    1abb:	00 01                	add    BYTE PTR [ecx],al
    1abd:	01 fb                	add    ebx,edi
    1abf:	0e                   	push   cs
    1ac0:	0d 00 01 01 01       	or     eax,0x1010100
    1ac5:	01 00                	add    DWORD PTR [eax],eax
    1ac7:	00 00                	add    BYTE PTR [eax],al
    1ac9:	01 00                	add    DWORD PTR [eax],eax
    1acb:	00 01                	add    BYTE PTR [ecx],al
    1acd:	73 72                	jae    1b41 <sysEnter_Vector-0x12e4bf>
    1acf:	63 00                	arpl   WORD PTR [eax],ax
    1ad1:	2f                   	das    
    1ad2:	68 6f 6d 65 2f       	push   0x2f656d6f
    1ad7:	79 6f                	jns    1b48 <sysEnter_Vector-0x12e4b8>
    1ad9:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1ae0:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1ae3:	73 73                	jae    1b58 <sysEnter_Vector-0x12e4a8>
    1ae5:	2f                   	das    
    1ae6:	6c                   	ins    BYTE PTR es:[edi],dx
    1ae7:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1aee:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1af4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1afa:	78 2d                	js     1b29 <sysEnter_Vector-0x12e4d7>
    1afc:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1afe:	75 2f                	jne    1b2f <sysEnter_Vector-0x12e4d1>
    1b00:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1b05:	2f                   	das    
    1b06:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1b0d:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1b10:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1b14:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    1b17:	2e                   	cs
    1b18:	2f                   	das    
    1b19:	2e                   	cs
    1b1a:	2e                   	cs
    1b1b:	2f                   	das    
    1b1c:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1b20:	6a 2f                	push   0x2f
    1b22:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1b25:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1b2c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b2d:	65                   	gs
    1b2e:	6c                   	ins    BYTE PTR es:[edi],dx
    1b2f:	2f                   	das    
    1b30:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1b37:	00 00                	add    BYTE PTR [eax],al
    1b39:	74 69                	je     1ba4 <sysEnter_Vector-0x12e45c>
    1b3b:	6d                   	ins    DWORD PTR es:[edi],dx
    1b3c:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    1b40:	01 00                	add    DWORD PTR [eax],eax
    1b42:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1b45:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1b4c:	63 
    1b4d:	2e                   	cs
    1b4e:	68 00 02 00 00       	push   0x200
    1b53:	74 69                	je     1bbe <sysEnter_Vector-0x12e442>
    1b55:	6d                   	ins    DWORD PTR es:[edi],dx
    1b56:	65                   	gs
    1b57:	2e                   	cs
    1b58:	68 00 03 00 00       	push   0x300
    1b5d:	6d                   	ins    DWORD PTR es:[edi],dx
    1b5e:	61                   	popa   
    1b5f:	6c                   	ins    BYTE PTR es:[edi],dx
    1b60:	6c                   	ins    BYTE PTR es:[edi],dx
    1b61:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1b62:	63 2e                	arpl   WORD PTR [esi],bp
    1b64:	68 00 03 00 00       	push   0x300
    1b69:	6c                   	ins    BYTE PTR es:[edi],dx
    1b6a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1b71:	4f                   	dec    edi
    1b72:	53                   	push   ebx
    1b73:	2e                   	cs
    1b74:	68 00 03 00 00       	push   0x300
    1b79:	73 79                	jae    1bf4 <sysEnter_Vector-0x12e40c>
    1b7b:	73 63                	jae    1be0 <sysEnter_Vector-0x12e420>
    1b7d:	61                   	popa   
    1b7e:	6c                   	ins    BYTE PTR es:[edi],dx
    1b7f:	6c                   	ins    BYTE PTR es:[edi],dx
    1b80:	73 2e                	jae    1bb0 <sysEnter_Vector-0x12e450>
    1b82:	68 00 04 00 00       	push   0x400
    1b87:	00 00                	add    BYTE PTR [eax],al
    1b89:	05 02 b8 29 00       	add    eax,0x29b802
    1b8e:	9f                   	lahf   
    1b8f:	03 16                	add    edx,DWORD PTR [esi]
    1b91:	01 08                	add    DWORD PTR [eax],ecx
    1b93:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1b96:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1b9c:	76 02                	jbe    1ba0 <sysEnter_Vector-0x12e460>
    1b9e:	24 13                	and    al,0x13
    1ba0:	08 22                	or     BYTE PTR [edx],ah
    1ba2:	02 2e                	add    ch,BYTE PTR [esi]
    1ba4:	13 02                	adc    eax,DWORD PTR [edx]
    1ba6:	2f                   	das    
    1ba7:	13 08                	adc    ecx,DWORD PTR [eax]
    1ba9:	67 02 2d             	add    ch,BYTE PTR [di]
    1bac:	13 2f                	adc    ebp,DWORD PTR [edi]
    1bae:	00 02                	add    BYTE PTR [edx],al
    1bb0:	04 01                	add    al,0x1
    1bb2:	06                   	push   es
    1bb3:	9e                   	sahf   
    1bb4:	00 02                	add    BYTE PTR [edx],al
    1bb6:	04 04                	add    al,0x4
    1bb8:	02 23                	add    ah,BYTE PTR [ebx]
    1bba:	12 00                	adc    al,BYTE PTR [eax]
    1bbc:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1bc3:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1bc6:	74 00                	je     1bc8 <sysEnter_Vector-0x12e438>
    1bc8:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1bcb:	58                   	pop    eax
    1bcc:	00 02                	add    BYTE PTR [edx],al
    1bce:	04 08                	add    al,0x8
    1bd0:	06                   	push   es
    1bd1:	3d 48 00 02 04       	cmp    eax,0x4020048
    1bd6:	01 06                	add    DWORD PTR [esi],eax
    1bd8:	9e                   	sahf   
    1bd9:	00 02                	add    BYTE PTR [edx],al
    1bdb:	04 04                	add    al,0x4
    1bdd:	02 23                	add    ah,BYTE PTR [ebx]
    1bdf:	12 00                	adc    al,BYTE PTR [eax]
    1be1:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1be8:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1beb:	74 00                	je     1bed <sysEnter_Vector-0x12e413>
    1bed:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1bf0:	58                   	pop    eax
    1bf1:	06                   	push   es
    1bf2:	94                   	xchg   esp,eax
    1bf3:	e5 91                	in     eax,0x91
    1bf5:	9f                   	lahf   
    1bf6:	59                   	pop    ecx
    1bf7:	00 02                	add    BYTE PTR [edx],al
    1bf9:	04 01                	add    al,0x1
    1bfb:	06                   	push   es
    1bfc:	9e                   	sahf   
    1bfd:	00 02                	add    BYTE PTR [edx],al
    1bff:	04 04                	add    al,0x4
    1c01:	02 23                	add    ah,BYTE PTR [ebx]
    1c03:	12 00                	adc    al,BYTE PTR [eax]
    1c05:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1c0c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c0f:	74 00                	je     1c11 <sysEnter_Vector-0x12e3ef>
    1c11:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1c14:	58                   	pop    eax
    1c15:	00 02                	add    BYTE PTR [edx],al
    1c17:	04 08                	add    al,0x8
    1c19:	06                   	push   es
    1c1a:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    1c20:	01 06                	add    DWORD PTR [esi],eax
    1c22:	9e                   	sahf   
    1c23:	00 02                	add    BYTE PTR [edx],al
    1c25:	04 04                	add    al,0x4
    1c27:	02 23                	add    ah,BYTE PTR [ebx]
    1c29:	12 00                	adc    al,BYTE PTR [eax]
    1c2b:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1c32:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c35:	74 00                	je     1c37 <sysEnter_Vector-0x12e3c9>
    1c37:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1c3a:	58                   	pop    eax
    1c3b:	06                   	push   es
    1c3c:	08 f6                	or     dh,dh
    1c3e:	d7                   	xlat   BYTE PTR ds:[ebx]
    1c3f:	9f                   	lahf   
    1c40:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    1c45:	08 16                	or     BYTE PTR [esi],dl
    1c47:	08 3d 08 4b 5b f5    	or     BYTE PTR ds:0xf55b4b08,bh
    1c4d:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    1c53:	30 08                	xor    BYTE PTR [eax],cl
    1c55:	44                   	inc    esp
    1c56:	02 2e                	add    ch,BYTE PTR [esi]
    1c58:	13 02                	adc    eax,DWORD PTR [edx]
    1c5a:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1c5c:	91                   	xchg   ecx,eax
    1c5d:	c9                   	leave  
    1c5e:	e6 02                	out    0x2,al
    1c60:	2f                   	das    
    1c61:	13 02                	adc    eax,DWORD PTR [edx]
    1c63:	3c 13                	cmp    al,0x13
    1c65:	9f                   	lahf   
    1c66:	e5 e6                	in     eax,0xe6
    1c68:	08 c9                	or     cl,cl
    1c6a:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1c6d:	9f                   	lahf   
    1c6e:	e5 4c                	in     eax,0x4c
    1c70:	02 29                	add    ch,BYTE PTR [ecx]
    1c72:	13 02                	adc    eax,DWORD PTR [edx]
    1c74:	2b 13                	sub    edx,DWORD PTR [ebx]
    1c76:	9f                   	lahf   
    1c77:	e5 e6                	in     eax,0xe6
    1c79:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1c7e:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1c83:	06                   	push   es
    1c84:	c8 00 02 04          	enter  0x200,0x4
    1c88:	04 02                	add    al,0x2
    1c8a:	2c 12                	sub    al,0x12
    1c8c:	00 02                	add    BYTE PTR [edx],al
    1c8e:	04 05                	add    al,0x5
    1c90:	02 2f                	add    ch,BYTE PTR [edi]
    1c92:	12 00                	adc    al,BYTE PTR [eax]
    1c94:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c97:	74 00                	je     1c99 <sysEnter_Vector-0x12e367>
    1c99:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1c9c:	58                   	pop    eax
    1c9d:	06                   	push   es
    1c9e:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1ca4:	04 01                	add    al,0x1
    1ca6:	06                   	push   es
    1ca7:	c8 00 02 04          	enter  0x200,0x4
    1cab:	04 02                	add    al,0x2
    1cad:	2c 12                	sub    al,0x12
    1caf:	00 02                	add    BYTE PTR [edx],al
    1cb1:	04 05                	add    al,0x5
    1cb3:	02 2f                	add    ch,BYTE PTR [edi]
    1cb5:	12 00                	adc    al,BYTE PTR [eax]
    1cb7:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1cba:	74 00                	je     1cbc <sysEnter_Vector-0x12e344>
    1cbc:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1cbf:	58                   	pop    eax
    1cc0:	00 02                	add    BYTE PTR [edx],al
    1cc2:	04 08                	add    al,0x8
    1cc4:	06                   	push   es
    1cc5:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1ccb:	00 02                	add    BYTE PTR [edx],al
    1ccd:	04 01                	add    al,0x1
    1ccf:	06                   	push   es
    1cd0:	c8 00 02 04          	enter  0x200,0x4
    1cd4:	04 02                	add    al,0x2
    1cd6:	2c 12                	sub    al,0x12
    1cd8:	00 02                	add    BYTE PTR [edx],al
    1cda:	04 05                	add    al,0x5
    1cdc:	02 2f                	add    ch,BYTE PTR [edi]
    1cde:	12 00                	adc    al,BYTE PTR [eax]
    1ce0:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ce3:	74 00                	je     1ce5 <sysEnter_Vector-0x12e31b>
    1ce5:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1ce8:	58                   	pop    eax
    1ce9:	06                   	push   es
    1cea:	08 f9                	or     cl,bh
    1cec:	bb 75 00 02 04       	mov    ebx,0x4020075
    1cf1:	01 06                	add    DWORD PTR [esi],eax
    1cf3:	08 2e                	or     BYTE PTR [esi],ch
    1cf5:	06                   	push   es
    1cf6:	9f                   	lahf   
    1cf7:	75 75                	jne    1d6e <sysEnter_Vector-0x12e292>
    1cf9:	7b d8                	jnp    1cd3 <sysEnter_Vector-0x12e32d>
    1cfb:	00 02                	add    BYTE PTR [edx],al
    1cfd:	04 01                	add    al,0x1
    1cff:	06                   	push   es
    1d00:	c8 06 75 e5          	enter  0x7506,0xe5
    1d04:	00 02                	add    BYTE PTR [edx],al
    1d06:	04 01                	add    al,0x1
    1d08:	06                   	push   es
    1d09:	02 22                	add    ah,BYTE PTR [edx]
    1d0b:	12 06                	adc    al,BYTE PTR [esi]
    1d0d:	4b                   	dec    ebx
    1d0e:	00 02                	add    BYTE PTR [edx],al
    1d10:	04 01                	add    al,0x1
    1d12:	06                   	push   es
    1d13:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1d19:	02 22                	add    ah,BYTE PTR [edx]
    1d1b:	12 00                	adc    al,BYTE PTR [eax]
    1d1d:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1d20:	74 00                	je     1d22 <sysEnter_Vector-0x12e2de>
    1d22:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d25:	58                   	pop    eax
    1d26:	00 02                	add    BYTE PTR [edx],al
    1d28:	04 06                	add    al,0x6
    1d2a:	06                   	push   es
    1d2b:	59                   	pop    ecx
    1d2c:	00 02                	add    BYTE PTR [edx],al
    1d2e:	04 01                	add    al,0x1
    1d30:	06                   	push   es
    1d31:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1d34:	00 02                	add    BYTE PTR [edx],al
    1d36:	04 03                	add    al,0x3
    1d38:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1d3b:	00 02                	add    BYTE PTR [edx],al
    1d3d:	04 04                	add    al,0x4
    1d3f:	74 00                	je     1d41 <sysEnter_Vector-0x12e2bf>
    1d41:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d44:	58                   	pop    eax
    1d45:	00 02                	add    BYTE PTR [edx],al
    1d47:	04 06                	add    al,0x6
    1d49:	06                   	push   es
    1d4a:	59                   	pop    ecx
    1d4b:	00 02                	add    BYTE PTR [edx],al
    1d4d:	04 01                	add    al,0x1
    1d4f:	06                   	push   es
    1d50:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1d53:	00 02                	add    BYTE PTR [edx],al
    1d55:	04 03                	add    al,0x3
    1d57:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1d5a:	00 02                	add    BYTE PTR [edx],al
    1d5c:	04 04                	add    al,0x4
    1d5e:	74 00                	je     1d60 <sysEnter_Vector-0x12e2a0>
    1d60:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d63:	58                   	pop    eax
    1d64:	00 02                	add    BYTE PTR [edx],al
    1d66:	04 06                	add    al,0x6
    1d68:	06                   	push   es
    1d69:	5a                   	pop    edx
    1d6a:	00 02                	add    BYTE PTR [edx],al
    1d6c:	04 06                	add    al,0x6
    1d6e:	c9                   	leave  
    1d6f:	2f                   	das    
    1d70:	00 02                	add    BYTE PTR [edx],al
    1d72:	04 01                	add    al,0x1
    1d74:	06                   	push   es
    1d75:	9e                   	sahf   
    1d76:	00 02                	add    BYTE PTR [edx],al
    1d78:	04 04                	add    al,0x4
    1d7a:	02 23                	add    ah,BYTE PTR [ebx]
    1d7c:	12 00                	adc    al,BYTE PTR [eax]
    1d7e:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1d85:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d88:	74 00                	je     1d8a <sysEnter_Vector-0x12e276>
    1d8a:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1d8d:	58                   	pop    eax
    1d8e:	00 02                	add    BYTE PTR [edx],al
    1d90:	04 08                	add    al,0x8
    1d92:	06                   	push   es
    1d93:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1d96:	e8 bb 00 02 04       	call   4021e56 <sysEnter_Vector+0x3ef1e56>
    1d9b:	01 06                	add    DWORD PTR [esi],eax
    1d9d:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1da2:	02 31                	add    dh,BYTE PTR [ecx]
    1da4:	14 02                	adc    al,0x2
    1da6:	2c 14                	sub    al,0x14
    1da8:	00 02                	add    BYTE PTR [edx],al
    1daa:	04 01                	add    al,0x1
    1dac:	06                   	push   es
    1dad:	02 29                	add    ch,BYTE PTR [ecx]
    1daf:	12 06                	adc    al,BYTE PTR [esi]
    1db1:	4b                   	dec    ebx
    1db2:	bd 00 02 04 01       	mov    ebp,0x1040200
    1db7:	06                   	push   es
    1db8:	ba 00 02 04 03       	mov    edx,0x3040200
    1dbd:	06                   	push   es
    1dbe:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1dc1:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    1dc4:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    1dcb:	77 00                	ja     1dcd <sysEnter_Vector-0x12e233>
    1dcd:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1dd0:	06                   	push   es
    1dd1:	82                   	(bad)  
    1dd2:	06                   	push   es
    1dd3:	4b                   	dec    ebx
    1dd4:	68 00 02 04 01       	push   0x1040200
    1dd9:	06                   	push   es
    1dda:	66 06                	pushw  es
    1ddc:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    1de2:	08 f3                	or     bl,dh
    1de4:	67 08 14             	or     BYTE PTR [si],dl
    1de7:	00 02                	add    BYTE PTR [edx],al
    1de9:	04 01                	add    al,0x1
    1deb:	e5 02                	in     eax,0x2
    1ded:	07                   	pop    es
    1dee:	00 01                	add    BYTE PTR [ecx],al
    1df0:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 70 72       	push   0x72700072
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  2e:	73 45                	jae    75 <sysEnter_Vector-0x12ff8b>
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	76 70                	jbe    a3 <sysEnter_Vector-0x12ff5d>
  33:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  37:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  3c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  40:	73 69                	jae    ab <sysEnter_Vector-0x12ff55>
  42:	67 6e                	outs   dx,BYTE PTR ds:[si]
  44:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  49:	74 00                	je     4b <sysEnter_Vector-0x12ffb5>
  4b:	68 65 61 70 42       	push   0x42706165
  50:	61                   	popa   
  51:	73 65                	jae    b8 <sysEnter_Vector-0x12ff48>
  53:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  57:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  5b:	75 6e                	jne    cb <sysEnter_Vector-0x12ff35>
  5d:	73 69                	jae    c8 <sysEnter_Vector-0x12ff38>
  5f:	67 6e                	outs   dx,BYTE PTR ds:[si]
  61:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  66:	61                   	popa   
  67:	72 00                	jb     69 <sysEnter_Vector-0x12ff97>
  69:	75 69                	jne    d4 <sysEnter_Vector-0x12ff2c>
  6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  6c:	74 33                	je     a1 <sysEnter_Vector-0x12ff5f>
  6e:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  71:	00 2f                	add    BYTE PTR [edi],ch
  73:	68 6f 6d 65 2f       	push   0x2f656d6f
  78:	79 6f                	jns    e9 <sysEnter_Vector-0x12ff17>
  7a:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  81:	6f                   	outs   dx,DWORD PTR ds:[esi]
  82:	73 2f                	jae    b3 <sysEnter_Vector-0x12ff4d>
  84:	61                   	popa   
  85:	70 72                	jo     f9 <sysEnter_Vector-0x12ff07>
  87:	6f                   	outs   dx,DWORD PTR ds:[esi]
  88:	6a 2f                	push   0x2f
  8a:	6c                   	ins    BYTE PTR es:[edi],dx
  8b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  92:	4f                   	dec    edi
  93:	53                   	push   ebx
  94:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  97:	6f                   	outs   dx,DWORD PTR ds:[esi]
  98:	6f                   	outs   dx,DWORD PTR ds:[esi]
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  9e:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  a2:	75 62                	jne    106 <sysEnter_Vector-0x12fefa>
  a4:	6c                   	ins    BYTE PTR es:[edi],dx
  a5:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  a9:	72 63                	jb     10e <sysEnter_Vector-0x12fef2>
  ab:	68 72 49 00 68       	push   0x68004972
  b0:	65                   	gs
  b1:	61                   	popa   
  b2:	70 43                	jo     f7 <sysEnter_Vector-0x12ff09>
  b4:	75 72                	jne    128 <sysEnter_Vector-0x12fed8>
  b6:	72 00                	jb     b8 <sysEnter_Vector-0x12ff48>
  b8:	2e                   	cs
  b9:	2e                   	cs
  ba:	2f                   	das    
  bb:	2e                   	cs
  bc:	2e                   	cs
  bd:	2f                   	das    
  be:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  c2:	6a 2f                	push   0x2f
  c4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  c7:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  ce:	63 2f                	arpl   WORD PTR [edi],bp
  d0:	73 74                	jae    146 <sysEnter_Vector-0x12feba>
  d2:	72 69                	jb     13d <sysEnter_Vector-0x12fec3>
  d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
  d5:	67 73 2f             	addr16 jae 107 <sysEnter_Vector-0x12fef9>
  d8:	73 74                	jae    14e <sysEnter_Vector-0x12feb2>
  da:	72 63                	jb     13f <sysEnter_Vector-0x12fec1>
  dc:	68 72 2e 63 00       	push   0x632e72
  e1:	73 69                	jae    14c <sysEnter_Vector-0x12feb4>
  e3:	7a 65                	jp     14a <sysEnter_Vector-0x12feb6>
  e5:	74 79                	je     160 <sysEnter_Vector-0x12fea0>
  e7:	70 65                	jo     14e <sysEnter_Vector-0x12feb2>
  e9:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ed:	72 74                	jb     163 <sysEnter_Vector-0x12fe9d>
  ef:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  f2:	74 00                	je     f4 <sysEnter_Vector-0x12ff0c>
  f4:	47                   	inc    edi
  f5:	4e                   	dec    esi
  f6:	55                   	push   ebp
  f7:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  fa:	31 20                	xor    DWORD PTR [eax],esp
  fc:	35 2e 33 2e 30       	xor    eax,0x302e332e
 101:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 107:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 10c:	6c                   	ins    BYTE PTR es:[edi],dx
 10d:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 113:	65                   	gs
 114:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 119:	72 69                	jb     184 <sysEnter_Vector-0x12fe7c>
 11b:	63 20                	arpl   WORD PTR [eax],sp
 11d:	2d 6d 61 72 63       	sub    eax,0x6372616d
 122:	68 3d 70 65 6e       	push   0x6e65703d
 127:	74 69                	je     192 <sysEnter_Vector-0x12fe6e>
 129:	75 6d                	jne    198 <sysEnter_Vector-0x12fe68>
 12b:	70 72                	jo     19f <sysEnter_Vector-0x12fe61>
 12d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 12e:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 134:	66                   	data16
 135:	72 65                	jb     19c <sysEnter_Vector-0x12fe64>
 137:	65                   	gs
 138:	73 74                	jae    1ae <sysEnter_Vector-0x12fe52>
 13a:	61                   	popa   
 13b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 13c:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 143:	76 
 144:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 14b:	74 79                	je     1c6 <sysEnter_Vector-0x12fe3a>
 14d:	3d 68 69 64 64       	cmp    eax,0x64646968
 152:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 154:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 15a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 15d:	61                   	popa   
 15e:	70 45                	jo     1a5 <sysEnter_Vector-0x12fe5b>
 160:	6e                   	outs   dx,BYTE PTR ds:[esi]
 161:	64 00 63 68          	add    BYTE PTR fs:[ebx+0x68],ah
 165:	61                   	popa   
 166:	72 73                	jb     1db <sysEnter_Vector-0x12fe25>
 168:	00 2e                	add    BYTE PTR [esi],ch
 16a:	2e                   	cs
 16b:	2f                   	das    
 16c:	2e                   	cs
 16d:	2e                   	cs
 16e:	2f                   	das    
 16f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 173:	6a 2f                	push   0x2f
 175:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 178:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 17f:	63 2f                	arpl   WORD PTR [edi],bp
 181:	73 74                	jae    1f7 <sysEnter_Vector-0x12fe09>
 183:	72 69                	jb     1ee <sysEnter_Vector-0x12fe12>
 185:	6e                   	outs   dx,BYTE PTR ds:[esi]
 186:	67 73 2f             	addr16 jae 1b8 <sysEnter_Vector-0x12fe48>
 189:	73 74                	jae    1ff <sysEnter_Vector-0x12fe01>
 18b:	72 63                	jb     1f0 <sysEnter_Vector-0x12fe10>
 18d:	73 70                	jae    1ff <sysEnter_Vector-0x12fe01>
 18f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 190:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 193:	73 74                	jae    209 <sysEnter_Vector-0x12fdf7>
 195:	72 63                	jb     1fa <sysEnter_Vector-0x12fe06>
 197:	73 70                	jae    209 <sysEnter_Vector-0x12fdf7>
 199:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 19d:	72 63                	jb     202 <sysEnter_Vector-0x12fdfe>
 19f:	73 70                	jae    211 <sysEnter_Vector-0x12fdef>
 1a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a2:	49                   	dec    ecx
 1a3:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1a7:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
 1ae:	2e                   	cs
 1af:	2f                   	das    
 1b0:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1b4:	6a 2f                	push   0x2f
 1b6:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1b9:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c0:	63 2f                	arpl   WORD PTR [edi],bp
 1c2:	73 74                	jae    238 <sysEnter_Vector-0x12fdc8>
 1c4:	72 69                	jb     22f <sysEnter_Vector-0x12fdd1>
 1c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1c7:	67 73 2f             	addr16 jae 1f9 <sysEnter_Vector-0x12fe07>
 1ca:	73 74                	jae    240 <sysEnter_Vector-0x12fdc0>
 1cc:	72 74                	jb     242 <sysEnter_Vector-0x12fdbe>
 1ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1cf:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d2:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1d6:	74 73                	je     24b <sysEnter_Vector-0x12fdb5>
 1d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1db:	72 74                	jb     251 <sysEnter_Vector-0x12fdaf>
 1dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1de:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1e1:	74 6f                	je     252 <sysEnter_Vector-0x12fdae>
 1e3:	61                   	popa   
 1e4:	49                   	dec    ecx
 1e5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1e8:	63 2f                	arpl   WORD PTR [edi],bp
 1ea:	61                   	popa   
 1eb:	73 63                	jae    250 <sysEnter_Vector-0x12fdb0>
 1ed:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f5:	61                   	popa   
 1f6:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 1f9:	76 65                	jbe    260 <sysEnter_Vector-0x12fda0>
 1fb:	72 73                	jb     270 <sysEnter_Vector-0x12fd90>
 1fd:	65                   	gs
 1fe:	49                   	dec    ecx
 1ff:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 202:	67 6e                	outs   dx,BYTE PTR ds:[si]
 204:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 207:	6c                   	ins    BYTE PTR es:[edi],dx
 208:	75 65                	jne    26f <sysEnter_Vector-0x12fd91>
 20a:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 20e:	74 50                	je     260 <sysEnter_Vector-0x12fda0>
 210:	6f                   	outs   dx,DWORD PTR ds:[esi]
 211:	70 75                	jo     288 <sysEnter_Vector-0x12fd78>
 213:	6c                   	ins    BYTE PTR es:[edi],dx
 214:	61                   	popa   
 215:	74 65                	je     27c <sysEnter_Vector-0x12fd84>
 217:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 21b:	74 65                	je     282 <sysEnter_Vector-0x12fd7e>
 21d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 21e:	76 00                	jbe    220 <sysEnter_Vector-0x12fde0>
 220:	67                   	addr16
 221:	65                   	gs
 222:	74 65                	je     289 <sysEnter_Vector-0x12fd77>
 224:	6e                   	outs   dx,BYTE PTR ds:[esi]
 225:	76 00                	jbe    227 <sysEnter_Vector-0x12fdd9>
 227:	73 72                	jae    29b <sysEnter_Vector-0x12fd65>
 229:	63 2f                	arpl   WORD PTR [edi],bp
 22b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 22d:	76 69                	jbe    298 <sysEnter_Vector-0x12fd68>
 22f:	72 6f                	jb     2a0 <sysEnter_Vector-0x12fd60>
 231:	6e                   	outs   dx,BYTE PTR ds:[esi]
 232:	6d                   	ins    DWORD PTR es:[edi],dx
 233:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 235:	74 2e                	je     265 <sysEnter_Vector-0x12fd9b>
 237:	63 00                	arpl   WORD PTR [eax],ax
 239:	76 61                	jbe    29c <sysEnter_Vector-0x12fd64>
 23b:	72 6e                	jb     2ab <sysEnter_Vector-0x12fd55>
 23d:	61                   	popa   
 23e:	6d                   	ins    DWORD PTR es:[edi],dx
 23f:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
 243:	74 64                	je     2a9 <sysEnter_Vector-0x12fd57>
 245:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
 24c:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 250:	53                   	push   ebx
 251:	43                   	inc    ebx
 252:	41                   	inc    ecx
 253:	4c                   	dec    esp
 254:	4c                   	dec    esp
 255:	5f                   	pop    edi
 256:	52                   	push   edx
 257:	45                   	inc    ebp
 258:	41                   	inc    ecx
 259:	44                   	inc    esp
 25a:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 25d:	69 74 65 00 53 59 53 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x43535953
 264:	43 
 265:	41                   	inc    ecx
 266:	4c                   	dec    esp
 267:	4c                   	dec    esp
 268:	5f                   	pop    edi
 269:	50                   	push   eax
 26a:	49                   	dec    ecx
 26b:	50                   	push   eax
 26c:	45                   	inc    ebp
 26d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 270:	53                   	push   ebx
 271:	43                   	inc    ebx
 272:	41                   	inc    ecx
 273:	4c                   	dec    esp
 274:	4c                   	dec    esp
 275:	5f                   	pop    edi
 276:	4f                   	dec    edi
 277:	50                   	push   eax
 278:	45                   	inc    ebp
 279:	4e                   	dec    esi
 27a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 27d:	53                   	push   ebx
 27e:	43                   	inc    ebx
 27f:	41                   	inc    ecx
 280:	4c                   	dec    esp
 281:	4c                   	dec    esp
 282:	5f                   	pop    edi
 283:	4d                   	dec    ebp
 284:	41                   	inc    ecx
 285:	53                   	push   ebx
 286:	4b                   	dec    ebx
 287:	53                   	push   ebx
 288:	49                   	dec    ecx
 289:	47                   	inc    edi
 28a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 28d:	53                   	push   ebx
 28e:	43                   	inc    ebx
 28f:	41                   	inc    ecx
 290:	4c                   	dec    esp
 291:	4c                   	dec    esp
 292:	5f                   	pop    edi
 293:	47                   	inc    edi
 294:	45                   	inc    ebp
 295:	54                   	push   esp
 296:	44                   	inc    esp
 297:	45                   	inc    ebp
 298:	4e                   	dec    esi
 299:	54                   	push   esp
 29a:	53                   	push   ebx
 29b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 29e:	63 2f                	arpl   WORD PTR [edi],bp
 2a0:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 2a7:	53                   	push   ebx
 2a8:	59                   	pop    ecx
 2a9:	53                   	push   ebx
 2aa:	43                   	inc    ebx
 2ab:	41                   	inc    ecx
 2ac:	4c                   	dec    esp
 2ad:	4c                   	dec    esp
 2ae:	5f                   	pop    edi
 2af:	52                   	push   edx
 2b0:	45                   	inc    ebp
 2b1:	42                   	inc    edx
 2b2:	4f                   	dec    edi
 2b3:	4f                   	dec    edi
 2b4:	54                   	push   esp
 2b5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2b8:	53                   	push   ebx
 2b9:	43                   	inc    ebx
 2ba:	41                   	inc    ecx
 2bb:	4c                   	dec    esp
 2bc:	4c                   	dec    esp
 2bd:	5f                   	pop    edi
 2be:	48                   	dec    eax
 2bf:	4c                   	dec    esp
 2c0:	54                   	push   esp
 2c1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2c4:	53                   	push   ebx
 2c5:	43                   	inc    ebx
 2c6:	41                   	inc    ecx
 2c7:	4c                   	dec    esp
 2c8:	4c                   	dec    esp
 2c9:	5f                   	pop    edi
 2ca:	45                   	inc    ebp
 2cb:	58                   	pop    eax
 2cc:	45                   	inc    ebp
 2cd:	43                   	inc    ebx
 2ce:	4e                   	dec    esi
 2cf:	45                   	inc    ebp
 2d0:	57                   	push   edi
 2d1:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d4:	53                   	push   ebx
 2d5:	43                   	inc    ebx
 2d6:	41                   	inc    ecx
 2d7:	4c                   	dec    esp
 2d8:	4c                   	dec    esp
 2d9:	5f                   	pop    edi
 2da:	53                   	push   ebx
 2db:	4c                   	dec    esp
 2dc:	45                   	inc    ebp
 2dd:	45                   	inc    ebp
 2de:	50                   	push   eax
 2df:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e2:	53                   	push   ebx
 2e3:	43                   	inc    ebx
 2e4:	41                   	inc    ecx
 2e5:	4c                   	dec    esp
 2e6:	4c                   	dec    esp
 2e7:	5f                   	pop    edi
 2e8:	47                   	inc    edi
 2e9:	45                   	inc    ebp
 2ea:	54                   	push   esp
 2eb:	54                   	push   esp
 2ec:	49                   	dec    ecx
 2ed:	4d                   	dec    ebp
 2ee:	45                   	inc    ebp
 2ef:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2f2:	53                   	push   ebx
 2f3:	43                   	inc    ebx
 2f4:	41                   	inc    ecx
 2f5:	4c                   	dec    esp
 2f6:	4c                   	dec    esp
 2f7:	5f                   	pop    edi
 2f8:	53                   	push   ebx
 2f9:	45                   	inc    ebp
 2fa:	54                   	push   esp
 2fb:	50                   	push   eax
 2fc:	52                   	push   edx
 2fd:	49                   	dec    ecx
 2fe:	4f                   	dec    edi
 2ff:	52                   	push   edx
 300:	49                   	dec    ecx
 301:	54                   	push   esp
 302:	59                   	pop    ecx
 303:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 306:	53                   	push   ebx
 307:	43                   	inc    ebx
 308:	41                   	inc    ecx
 309:	4c                   	dec    esp
 30a:	4c                   	dec    esp
 30b:	5f                   	pop    edi
 30c:	43                   	inc    ebx
 30d:	4c                   	dec    esp
 30e:	4f                   	dec    edi
 30f:	53                   	push   ebx
 310:	45                   	inc    ebp
 311:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 314:	79 73                	jns    389 <sysEnter_Vector-0x12fc77>
 316:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 319:	6c                   	ins    BYTE PTR es:[edi],dx
 31a:	73 00                	jae    31c <sysEnter_Vector-0x12fce4>
 31c:	6c                   	ins    BYTE PTR es:[edi],dx
 31d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 31f:	67 74 68             	addr16 je 38a <sysEnter_Vector-0x12fc76>
 322:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 325:	61                   	popa   
 326:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 32a:	53                   	push   ebx
 32b:	43                   	inc    ebx
 32c:	41                   	inc    ecx
 32d:	4c                   	dec    esp
 32e:	4c                   	dec    esp
 32f:	5f                   	pop    edi
 330:	46                   	inc    esi
 331:	4f                   	dec    edi
 332:	52                   	push   edx
 333:	4b                   	dec    ebx
 334:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 337:	53                   	push   ebx
 338:	43                   	inc    ebx
 339:	41                   	inc    ecx
 33a:	4c                   	dec    esp
 33b:	4c                   	dec    esp
 33c:	5f                   	pop    edi
 33d:	53                   	push   ebx
 33e:	54                   	push   esp
 33f:	4f                   	dec    edi
 340:	50                   	push   eax
 341:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 344:	53                   	push   ebx
 345:	43                   	inc    ebx
 346:	41                   	inc    ecx
 347:	4c                   	dec    esp
 348:	4c                   	dec    esp
 349:	5f                   	pop    edi
 34a:	50                   	push   eax
 34b:	52                   	push   edx
 34c:	49                   	dec    ecx
 34d:	4e                   	dec    esi
 34e:	54                   	push   esp
 34f:	44                   	inc    esp
 350:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 353:	66                   	data16
 354:	66                   	data16
 355:	65                   	gs
 356:	72 43                	jb     39b <sysEnter_Vector-0x12fc65>
 358:	6f                   	outs   dx,DWORD PTR ds:[esi]
 359:	75 6e                	jne    3c9 <sysEnter_Vector-0x12fc37>
 35b:	74 00                	je     35d <sysEnter_Vector-0x12fca3>
 35d:	53                   	push   ebx
 35e:	59                   	pop    ecx
 35f:	53                   	push   ebx
 360:	43                   	inc    ebx
 361:	41                   	inc    ecx
 362:	4c                   	dec    esp
 363:	4c                   	dec    esp
 364:	5f                   	pop    edi
 365:	46                   	inc    esi
 366:	52                   	push   edx
 367:	45                   	inc    ebp
 368:	45                   	inc    ebp
 369:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 36c:	53                   	push   ebx
 36d:	43                   	inc    ebx
 36e:	41                   	inc    ecx
 36f:	4c                   	dec    esp
 370:	4c                   	dec    esp
 371:	5f                   	pop    edi
 372:	45                   	inc    ebp
 373:	58                   	pop    eax
 374:	45                   	inc    ebp
 375:	43                   	inc    ebx
 376:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 379:	53                   	push   ebx
 37a:	43                   	inc    ebx
 37b:	41                   	inc    ecx
 37c:	4c                   	dec    esp
 37d:	4c                   	dec    esp
 37e:	5f                   	pop    edi
 37f:	49                   	dec    ecx
 380:	4e                   	dec    esi
 381:	56                   	push   esi
 382:	41                   	inc    ecx
 383:	4c                   	dec    esp
 384:	49                   	dec    ecx
 385:	44                   	inc    esp
 386:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 389:	53                   	push   ebx
 38a:	43                   	inc    ebx
 38b:	41                   	inc    ecx
 38c:	4c                   	dec    esp
 38d:	4c                   	dec    esp
 38e:	5f                   	pop    edi
 38f:	52                   	push   edx
 390:	45                   	inc    ebp
 391:	47                   	inc    edi
 392:	45                   	inc    ebp
 393:	58                   	pop    eax
 394:	49                   	dec    ecx
 395:	54                   	push   esp
 396:	48                   	dec    eax
 397:	41                   	inc    ecx
 398:	4e                   	dec    esi
 399:	44                   	inc    esp
 39a:	4c                   	dec    esp
 39b:	45                   	inc    ebp
 39c:	52                   	push   edx
 39d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a0:	53                   	push   ebx
 3a1:	43                   	inc    ebx
 3a2:	41                   	inc    ecx
 3a3:	4c                   	dec    esp
 3a4:	4c                   	dec    esp
 3a5:	5f                   	pop    edi
 3a6:	47                   	inc    edi
 3a7:	45                   	inc    ebp
 3a8:	54                   	push   esp
 3a9:	54                   	push   esp
 3aa:	49                   	dec    ecx
 3ab:	43                   	inc    ebx
 3ac:	4b                   	dec    ebx
 3ad:	53                   	push   ebx
 3ae:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3b1:	53                   	push   ebx
 3b2:	43                   	inc    ebx
 3b3:	41                   	inc    ecx
 3b4:	4c                   	dec    esp
 3b5:	4c                   	dec    esp
 3b6:	5f                   	pop    edi
 3b7:	45                   	inc    ebp
 3b8:	4e                   	dec    esi
 3b9:	44                   	inc    esp
 3ba:	50                   	push   eax
 3bb:	52                   	push   edx
 3bc:	4f                   	dec    edi
 3bd:	43                   	inc    ebx
 3be:	45                   	inc    ebp
 3bf:	53                   	push   ebx
 3c0:	53                   	push   ebx
 3c1:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 3c4:	66                   	data16
 3c5:	66                   	data16
 3c6:	65                   	gs
 3c7:	72 00                	jb     3c9 <sysEnter_Vector-0x12fc37>
 3c9:	53                   	push   ebx
 3ca:	59                   	pop    ecx
 3cb:	53                   	push   ebx
 3cc:	43                   	inc    ebx
 3cd:	41                   	inc    ecx
 3ce:	4c                   	dec    esp
 3cf:	4c                   	dec    esp
 3d0:	5f                   	pop    edi
 3d1:	57                   	push   edi
 3d2:	52                   	push   edx
 3d3:	49                   	dec    ecx
 3d4:	54                   	push   esp
 3d5:	45                   	inc    ebp
 3d6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3d9:	53                   	push   ebx
 3da:	43                   	inc    ebx
 3db:	41                   	inc    ecx
 3dc:	4c                   	dec    esp
 3dd:	4c                   	dec    esp
 3de:	5f                   	pop    edi
 3df:	50                   	push   eax
 3e0:	52                   	push   edx
 3e1:	49                   	dec    ecx
 3e2:	4e                   	dec    esi
 3e3:	54                   	push   esp
 3e4:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 3e7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3e8:	64                   	fs
 3e9:	6c                   	ins    BYTE PTR es:[edi],dx
 3ea:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 3ee:	53                   	push   ebx
 3ef:	43                   	inc    ebx
 3f0:	41                   	inc    ecx
 3f1:	4c                   	dec    esp
 3f2:	4c                   	dec    esp
 3f3:	5f                   	pop    edi
 3f4:	41                   	inc    ecx
 3f5:	4c                   	dec    esp
 3f6:	4c                   	dec    esp
 3f7:	4f                   	dec    edi
 3f8:	43                   	inc    ebx
 3f9:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3fc:	53                   	push   ebx
 3fd:	43                   	inc    ebx
 3fe:	41                   	inc    ecx
 3ff:	4c                   	dec    esp
 400:	4c                   	dec    esp
 401:	5f                   	pop    edi
 402:	47                   	inc    edi
 403:	45                   	inc    ebp
 404:	54                   	push   esp
 405:	43                   	inc    ebx
 406:	57                   	push   edi
 407:	44                   	inc    esp
 408:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 40b:	53                   	push   ebx
 40c:	43                   	inc    ebx
 40d:	41                   	inc    ecx
 40e:	4c                   	dec    esp
 40f:	4c                   	dec    esp
 410:	5f                   	pop    edi
 411:	57                   	push   edi
 412:	41                   	inc    ecx
 413:	49                   	dec    ecx
 414:	54                   	push   esp
 415:	46                   	inc    esi
 416:	4f                   	dec    edi
 417:	52                   	push   edx
 418:	50                   	push   eax
 419:	49                   	dec    ecx
 41a:	44                   	inc    esp
 41b:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
 41e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 420:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 423:	53                   	push   ebx
 424:	43                   	inc    ebx
 425:	41                   	inc    ecx
 426:	4c                   	dec    esp
 427:	4c                   	dec    esp
 428:	5f                   	pop    edi
 429:	53                   	push   ebx
 42a:	45                   	inc    ebp
 42b:	54                   	push   esp
 42c:	53                   	push   ebx
 42d:	49                   	dec    ecx
 42e:	47                   	inc    edi
 42f:	41                   	inc    ecx
 430:	43                   	inc    ebx
 431:	54                   	push   esp
 432:	49                   	dec    ecx
 433:	4f                   	dec    edi
 434:	4e                   	dec    esi
 435:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 438:	72 65                	jb     49f <sysEnter_Vector-0x12fb61>
 43a:	61                   	popa   
 43b:	6d                   	ins    DWORD PTR es:[edi],dx
 43c:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 43f:	74 73                	je     4b4 <sysEnter_Vector-0x12fb4c>
 441:	45                   	inc    ebp
 442:	72 72                	jb     4b6 <sysEnter_Vector-0x12fb4a>
 444:	6f                   	outs   dx,DWORD PTR ds:[esi]
 445:	72 00                	jb     447 <sysEnter_Vector-0x12fbb9>
 447:	6c                   	ins    BYTE PTR es:[edi],dx
 448:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 44b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 44e:	63 2f                	arpl   WORD PTR [edi],bp
 450:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 457:	6e                   	outs   dx,BYTE PTR ds:[esi]
 458:	70 75                	jo     4cf <sysEnter_Vector-0x12fb31>
 45a:	74 2e                	je     48a <sysEnter_Vector-0x12fb76>
 45c:	63 00                	arpl   WORD PTR [eax],ax
 45e:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 465:	6d                   	ins    DWORD PTR es:[edi],dx
 466:	61                   	popa   
 467:	78 6c                	js     4d5 <sysEnter_Vector-0x12fb2b>
 469:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 46b:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 46e:	74 73                	je     4e3 <sysEnter_Vector-0x12fb1d>
 470:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 473:	74 63                	je     4d8 <sysEnter_Vector-0x12fb28>
 475:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 478:	74 63                	je     4dd <sysEnter_Vector-0x12fb23>
 47a:	68 61 72 00 70       	push   0x70007261
 47f:	75 74                	jne    4f5 <sysEnter_Vector-0x12fb0b>
 481:	73 00                	jae    483 <sysEnter_Vector-0x12fb7d>
 483:	72 65                	jb     4ea <sysEnter_Vector-0x12fb16>
 485:	74 56                	je     4dd <sysEnter_Vector-0x12fb23>
 487:	61                   	popa   
 488:	6c                   	ins    BYTE PTR es:[edi],dx
 489:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 48c:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
 493:	74 53                	je     4e8 <sysEnter_Vector-0x12fb18>
 495:	70 61                	jo     4f8 <sysEnter_Vector-0x12fb08>
 497:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 49a:	74 72                	je     50e <sysEnter_Vector-0x12faf2>
 49c:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 49f:	7a 65                	jp     506 <sysEnter_Vector-0x12fafa>
 4a1:	5f                   	pop    edi
 4a2:	74 00                	je     4a4 <sysEnter_Vector-0x12fb5c>
 4a4:	75 69                	jne    50f <sysEnter_Vector-0x12faf1>
 4a6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4a7:	74 70                	je     519 <sysEnter_Vector-0x12fae7>
 4a9:	74 72                	je     51d <sysEnter_Vector-0x12fae3>
 4ab:	5f                   	pop    edi
 4ac:	74 00                	je     4ae <sysEnter_Vector-0x12fb52>
 4ae:	73 69                	jae    519 <sysEnter_Vector-0x12fae7>
 4b0:	67 44                	addr16 inc esp
 4b2:	61                   	popa   
 4b3:	74 61                	je     516 <sysEnter_Vector-0x12faea>
 4b5:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 4b8:	67 76 50             	addr16 jbe 50b <sysEnter_Vector-0x12faf5>
 4bb:	74 72                	je     52f <sysEnter_Vector-0x12fad1>
 4bd:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 4c0:	61                   	popa   
 4c1:	72 74                	jb     537 <sysEnter_Vector-0x12fac9>
 4c3:	5f                   	pop    edi
 4c4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4c5:	66 5f                	pop    di
 4c7:	77 6f                	ja     538 <sysEnter_Vector-0x12fac8>
 4c9:	72 64                	jb     52f <sysEnter_Vector-0x12fad1>
 4cb:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 4ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4cf:	67 72 61             	addr16 jb 533 <sysEnter_Vector-0x12facd>
 4d2:	6d                   	ins    DWORD PTR es:[edi],dx
 4d3:	00 74 65 73          	add    BYTE PTR [ebp+eiz*2+0x73],dh
 4d7:	74 00                	je     4d9 <sysEnter_Vector-0x12fb27>
 4d9:	6c                   	ins    BYTE PTR es:[edi],dx
 4da:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
 4e1:	74 00                	je     4e3 <sysEnter_Vector-0x12fb1d>
 4e3:	73 74                	jae    559 <sysEnter_Vector-0x12faa7>
 4e5:	61                   	popa   
 4e6:	74 65                	je     54d <sysEnter_Vector-0x12fab3>
 4e8:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 4eb:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
 4ee:	6c                   	ins    BYTE PTR es:[edi],dx
 4ef:	74 69                	je     55a <sysEnter_Vector-0x12faa6>
 4f1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4f2:	5f                   	pop    edi
 4f3:	76 61                	jbe    556 <sysEnter_Vector-0x12faaa>
 4f5:	5f                   	pop    edi
 4f6:	6c                   	ins    BYTE PTR es:[edi],dx
 4f7:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
 4fe:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
 505:	00 
 506:	73 70                	jae    578 <sysEnter_Vector-0x12fa88>
 508:	61                   	popa   
 509:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 50c:	74 72                	je     580 <sysEnter_Vector-0x12fa80>
 50e:	00 63 6d             	add    BYTE PTR [ebx+0x6d],ah
 511:	64                   	fs
 512:	6c                   	ins    BYTE PTR es:[edi],dx
 513:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 51a:	67 76 00             	addr16 jbe 51d <sysEnter_Vector-0x12fae3>
 51d:	77 61                	ja     580 <sysEnter_Vector-0x12fa80>
 51f:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 526:	65 
 527:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 52a:	4c                   	dec    esp
 52b:	65                   	gs
 52c:	76 65                	jbe    593 <sysEnter_Vector-0x12fa6d>
 52e:	6c                   	ins    BYTE PTR es:[edi],dx
 52f:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 532:	6c                   	ins    BYTE PTR es:[edi],dx
 533:	6c                   	ins    BYTE PTR es:[edi],dx
 534:	6e                   	outs   dx,BYTE PTR ds:[esi]
 535:	75 6d                	jne    5a4 <sysEnter_Vector-0x12fa5c>
 537:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 53a:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
 541:	65                   	gs
 542:	72 00                	jb     544 <sysEnter_Vector-0x12fabc>
 544:	73 6c                	jae    5b2 <sysEnter_Vector-0x12fa4e>
 546:	65                   	gs
 547:	65                   	gs
 548:	70 00                	jo     54a <sysEnter_Vector-0x12fab6>
 54a:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 54d:	6c                   	ins    BYTE PTR es:[edi],dx
 54e:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
 555:	67 76 49             	addr16 jbe 5a1 <sysEnter_Vector-0x12fa5f>
 558:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
 55c:	73 79                	jae    5d7 <sysEnter_Vector-0x12fa29>
 55e:	73 63                	jae    5c3 <sysEnter_Vector-0x12fa3d>
 560:	61                   	popa   
 561:	6c                   	ins    BYTE PTR es:[edi],dx
 562:	6c                   	ins    BYTE PTR es:[edi],dx
 563:	30 00                	xor    BYTE PTR [eax],al
 565:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 567:	5f                   	pop    edi
 568:	73 79                	jae    5e3 <sysEnter_Vector-0x12fa1d>
 56a:	73 63                	jae    5cf <sysEnter_Vector-0x12fa31>
 56c:	61                   	popa   
 56d:	6c                   	ins    BYTE PTR es:[edi],dx
 56e:	6c                   	ins    BYTE PTR es:[edi],dx
 56f:	31 00                	xor    DWORD PTR [eax],eax
 571:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 573:	5f                   	pop    edi
 574:	73 79                	jae    5ef <sysEnter_Vector-0x12fa11>
 576:	73 63                	jae    5db <sysEnter_Vector-0x12fa25>
 578:	61                   	popa   
 579:	6c                   	ins    BYTE PTR es:[edi],dx
 57a:	6c                   	ins    BYTE PTR es:[edi],dx
 57b:	32 00                	xor    al,BYTE PTR [eax]
 57d:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 57f:	5f                   	pop    edi
 580:	73 79                	jae    5fb <sysEnter_Vector-0x12fa05>
 582:	73 63                	jae    5e7 <sysEnter_Vector-0x12fa19>
 584:	61                   	popa   
 585:	6c                   	ins    BYTE PTR es:[edi],dx
 586:	6c                   	ins    BYTE PTR es:[edi],dx
 587:	33 00                	xor    eax,DWORD PTR [eax]
 589:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 58b:	5f                   	pop    edi
 58c:	73 79                	jae    607 <sysEnter_Vector-0x12f9f9>
 58e:	73 63                	jae    5f3 <sysEnter_Vector-0x12fa0d>
 590:	61                   	popa   
 591:	6c                   	ins    BYTE PTR es:[edi],dx
 592:	6c                   	ins    BYTE PTR es:[edi],dx
 593:	34 00                	xor    al,0x0
 595:	49                   	dec    ecx
 596:	4e                   	dec    esi
 597:	5f                   	pop    edi
 598:	57                   	push   edi
 599:	4f                   	dec    edi
 59a:	52                   	push   edx
 59b:	44                   	inc    esp
 59c:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 59f:	67 76 5f             	addr16 jbe 601 <sysEnter_Vector-0x12f9ff>
 5a2:	73 69                	jae    60d <sysEnter_Vector-0x12f9f3>
 5a4:	7a 65                	jp     60b <sysEnter_Vector-0x12f9f5>
 5a6:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 5aa:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
 5ad:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
 5b4:	65 
 5b5:	64 00 69 73          	add    BYTE PTR fs:[ecx+0x73],ch
 5b9:	73 70                	jae    62b <sysEnter_Vector-0x12f9d5>
 5bb:	61                   	popa   
 5bc:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
 5bf:	5f                   	pop    edi
 5c0:	5f                   	pop    edi
 5c1:	67 6e                	outs   dx,BYTE PTR ds:[si]
 5c3:	75 63                	jne    628 <sysEnter_Vector-0x12f9d8>
 5c5:	5f                   	pop    edi
 5c6:	76 61                	jbe    629 <sysEnter_Vector-0x12f9d7>
 5c8:	5f                   	pop    edi
 5c9:	6c                   	ins    BYTE PTR es:[edi],dx
 5ca:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 5d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5d2:	74 64                	je     638 <sysEnter_Vector-0x12f9c8>
 5d4:	49                   	dec    ecx
 5d5:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 5d8:	72 61                	jb     63b <sysEnter_Vector-0x12f9c5>
 5da:	6d                   	ins    DWORD PTR es:[edi],dx
 5db:	31 00                	xor    DWORD PTR [eax],eax
 5dd:	70 61                	jo     640 <sysEnter_Vector-0x12f9c0>
 5df:	72 61                	jb     642 <sysEnter_Vector-0x12f9be>
 5e1:	6d                   	ins    DWORD PTR es:[edi],dx
 5e2:	32 00                	xor    al,BYTE PTR [eax]
 5e4:	70 61                	jo     647 <sysEnter_Vector-0x12f9b9>
 5e6:	72 61                	jb     649 <sysEnter_Vector-0x12f9b7>
 5e8:	6d                   	ins    DWORD PTR es:[edi],dx
 5e9:	33 00                	xor    eax,DWORD PTR [eax]
 5eb:	70 61                	jo     64e <sysEnter_Vector-0x12f9b2>
 5ed:	72 61                	jb     650 <sysEnter_Vector-0x12f9b0>
 5ef:	6d                   	ins    DWORD PTR es:[edi],dx
 5f0:	34 00                	xor    al,0x0
 5f2:	65                   	gs
 5f3:	78 65                	js     65a <sysEnter_Vector-0x12f9a6>
 5f5:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 5f8:	65                   	gs
 5f9:	78 65                	js     660 <sysEnter_Vector-0x12f9a0>
 5fb:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
 5fe:	66 6f                	outs   dx,WORD PTR ds:[esi]
 600:	72 6d                	jb     66f <sysEnter_Vector-0x12f991>
 602:	61                   	popa   
 603:	74 00                	je     605 <sysEnter_Vector-0x12f9fb>
 605:	73 69                	jae    670 <sysEnter_Vector-0x12f990>
 607:	67 6e                	outs   dx,BYTE PTR ds:[si]
 609:	61                   	popa   
 60a:	6c                   	ins    BYTE PTR es:[edi],dx
 60b:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 60e:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 611:	5f                   	pop    edi
 612:	5f                   	pop    edi
 613:	73 65                	jae    67a <sysEnter_Vector-0x12f986>
 615:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 618:	64                   	fs
 619:	73 00                	jae    61b <sysEnter_Vector-0x12f9e5>
 61b:	44                   	inc    esp
 61c:	55                   	push   ebp
 61d:	4c                   	dec    esp
 61e:	4c                   	dec    esp
 61f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 622:	61                   	popa   
 623:	74 65                	je     68a <sysEnter_Vector-0x12f976>
 625:	73 00                	jae    627 <sysEnter_Vector-0x12f9d9>
 627:	49                   	dec    ecx
 628:	4e                   	dec    esi
 629:	5f                   	pop    edi
 62a:	53                   	push   ebx
 62b:	54                   	push   esp
 62c:	52                   	push   edx
 62d:	49                   	dec    ecx
 62e:	4e                   	dec    esi
 62f:	47                   	inc    edi
 630:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 633:	63 2f                	arpl   WORD PTR [edi],bp
 635:	6c                   	ins    BYTE PTR es:[edi],dx
 636:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 63d:	4f                   	dec    edi
 63e:	53                   	push   ebx
 63f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 642:	61                   	popa   
 643:	72 67                	jb     6ac <sysEnter_Vector-0x12f954>
 645:	63 00                	arpl   WORD PTR [eax],ax
 647:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
 64a:	6c                   	ins    BYTE PTR es:[edi],dx
 64b:	69 6e 65 00 73 70 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c707300
 652:	69 74 49 00 6c 69 62 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x6362696c
 659:	63 
 65a:	5f                   	pop    edi
 65b:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
 65f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 660:	75 70                	jne    6d2 <sysEnter_Vector-0x12f92e>
 662:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 665:	67 76 00             	addr16 jbe 668 <sysEnter_Vector-0x12f998>
 668:	65                   	gs
 669:	78 69                	js     6d4 <sysEnter_Vector-0x12f92c>
 66b:	74 00                	je     66d <sysEnter_Vector-0x12f993>
 66d:	73 74                	jae    6e3 <sysEnter_Vector-0x12f91d>
 66f:	61                   	popa   
 670:	74 75                	je     6e7 <sysEnter_Vector-0x12f919>
 672:	73 00                	jae    674 <sysEnter_Vector-0x12f98c>
 674:	73 69                	jae    6df <sysEnter_Vector-0x12f921>
 676:	67 48                	addr16 dec eax
 678:	61                   	popa   
 679:	6e                   	outs   dx,BYTE PTR ds:[esi]
 67a:	64                   	fs
 67b:	6c                   	ins    BYTE PTR es:[edi],dx
 67c:	65                   	gs
 67d:	72 00                	jb     67f <sysEnter_Vector-0x12f981>
 67f:	6d                   	ins    DWORD PTR es:[edi],dx
 680:	6f                   	outs   dx,DWORD PTR ds:[esi]
 681:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 688:	6e 
 689:	61                   	popa   
 68a:	6c                   	ins    BYTE PTR es:[edi],dx
 68b:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 68e:	67 73 00             	addr16 jae 691 <sysEnter_Vector-0x12f96f>
 691:	70 72                	jo     705 <sysEnter_Vector-0x12f8fb>
 693:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 69a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 69b:	70 00                	jo     69d <sysEnter_Vector-0x12f963>
 69d:	67                   	addr16
 69e:	65                   	gs
 69f:	74 63                	je     704 <sysEnter_Vector-0x12f8fc>
 6a1:	77 64                	ja     707 <sysEnter_Vector-0x12f8f9>
 6a3:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 6a6:	6c                   	ins    BYTE PTR es:[edi],dx
 6a7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6a8:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 6ab:	65                   	gs
 6ac:	64                   	fs
 6ad:	50                   	push   eax
 6ae:	74 72                	je     722 <sysEnter_Vector-0x12f8de>
 6b0:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 6b3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6b4:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 6bb:	65                   	gs
 6bc:	77 53                	ja     711 <sysEnter_Vector-0x12f8ef>
 6be:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 6c5:	6c                   	ins    BYTE PTR es:[edi],dx
 6c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6c7:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 6ca:	6c                   	ins    BYTE PTR es:[edi],dx
 6cb:	65                   	gs
 6cc:	61                   	popa   
 6cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6ce:	75 70                	jne    740 <sysEnter_Vector-0x12f8c0>
 6d0:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 6d3:	72 6b                	jb     740 <sysEnter_Vector-0x12f8c0>
 6d5:	65                   	gs
 6d6:	72 00                	jb     6d8 <sysEnter_Vector-0x12f928>
 6d8:	6d                   	ins    DWORD PTR es:[edi],dx
 6d9:	61                   	popa   
 6da:	6c                   	ins    BYTE PTR es:[edi],dx
 6db:	6c                   	ins    BYTE PTR es:[edi],dx
 6dc:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6dd:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 6e0:	68 65 61 70 50       	push   0x50706165
 6e5:	74 72                	je     759 <sysEnter_Vector-0x12f8a7>
 6e7:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 6ea:	6e                   	outs   dx,BYTE PTR ds:[esi]
 6eb:	74 38                	je     725 <sysEnter_Vector-0x12f8db>
 6ed:	5f                   	pop    edi
 6ee:	74 00                	je     6f0 <sysEnter_Vector-0x12f910>
 6f0:	66                   	data16
 6f1:	72 65                	jb     758 <sysEnter_Vector-0x12f8a8>
 6f3:	65 00 6e 65          	add    BYTE PTR gs:[esi+0x65],ch
 6f7:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 6fe:	65                   	gs
 6ff:	61                   	popa   
 700:	70 00                	jo     702 <sysEnter_Vector-0x12f8fe>
 702:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 709:	6e                   	outs   dx,BYTE PTR ds:[esi]
 70a:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 711:	63 
 712:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 715:	74 6f                	je     786 <sysEnter_Vector-0x12f87a>
 717:	48                   	dec    eax
 718:	65                   	gs
 719:	72 65                	jb     780 <sysEnter_Vector-0x12f880>
 71b:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 71e:	61                   	popa   
 71f:	70 50                	jo     771 <sysEnter_Vector-0x12f88f>
 721:	74 72                	je     795 <sysEnter_Vector-0x12f86b>
 723:	4e                   	dec    esi
 724:	65                   	gs
 725:	78 74                	js     79b <sysEnter_Vector-0x12f865>
 727:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 72a:	77 48                	ja     774 <sysEnter_Vector-0x12f88c>
 72c:	65                   	gs
 72d:	61                   	popa   
 72e:	70 52                	jo     782 <sysEnter_Vector-0x12f87e>
 730:	65                   	gs
 731:	71 75                	jno    7a8 <sysEnter_Vector-0x12f858>
 733:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 73a:	75 6c                	jne    7a8 <sysEnter_Vector-0x12f858>
 73c:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 743:	75 65                	jne    7aa <sysEnter_Vector-0x12f856>
 745:	73 74                	jae    7bb <sysEnter_Vector-0x12f845>
 747:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 74a:	63 2f                	arpl   WORD PTR [edi],bp
 74c:	6d                   	ins    DWORD PTR es:[edi],dx
 74d:	61                   	popa   
 74e:	6c                   	ins    BYTE PTR es:[edi],dx
 74f:	6c                   	ins    BYTE PTR es:[edi],dx
 750:	6f                   	outs   dx,DWORD PTR ds:[esi]
 751:	63 2e                	arpl   WORD PTR [esi],bp
 753:	63 00                	arpl   WORD PTR [eax],ax
 755:	66                   	data16
 756:	72 65                	jb     7bd <sysEnter_Vector-0x12f843>
 758:	65                   	gs
 759:	49                   	dec    ecx
 75a:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 75d:	65                   	gs
 75e:	76 00                	jbe    760 <sysEnter_Vector-0x12f8a0>
 760:	68 65 61 70 72       	push   0x72706165
 765:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 769:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 76c:	63 2f                	arpl   WORD PTR [edi],bp
 76e:	6d                   	ins    DWORD PTR es:[edi],dx
 76f:	65                   	gs
 770:	6d                   	ins    DWORD PTR es:[edi],dx
 771:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 774:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 777:	64                   	fs
 778:	65                   	gs
 779:	73 74                	jae    7ef <sysEnter_Vector-0x12f811>
 77b:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 77e:	6d                   	ins    DWORD PTR es:[edi],dx
 77f:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 782:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 785:	61                   	popa   
 786:	6c                   	ins    BYTE PTR es:[edi],dx
 787:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 78a:	6d                   	ins    DWORD PTR es:[edi],dx
 78b:	73 65                	jae    7f2 <sysEnter_Vector-0x12f80e>
 78d:	74 00                	je     78f <sysEnter_Vector-0x12f871>
 78f:	73 72                	jae    803 <sysEnter_Vector-0x12f7fd>
 791:	63 2f                	arpl   WORD PTR [edi],bp
 793:	6d                   	ins    DWORD PTR es:[edi],dx
 794:	65                   	gs
 795:	6d                   	ins    DWORD PTR es:[edi],dx
 796:	73 65                	jae    7fd <sysEnter_Vector-0x12f803>
 798:	74 2e                	je     7c8 <sysEnter_Vector-0x12f838>
 79a:	63 00                	arpl   WORD PTR [eax],ax
 79c:	66 56                	push   si
 79e:	61                   	popa   
 79f:	6c                   	ins    BYTE PTR es:[edi],dx
 7a0:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 7a3:	6d                   	ins    DWORD PTR es:[edi],dx
 7a4:	73 65                	jae    80b <sysEnter_Vector-0x12f7f5>
 7a6:	74 49                	je     7f1 <sysEnter_Vector-0x12f80f>
 7a8:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 7ab:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7ac:	74 31                	je     7df <sysEnter_Vector-0x12f821>
 7ae:	36                   	ss
 7af:	5f                   	pop    edi
 7b0:	74 00                	je     7b2 <sysEnter_Vector-0x12f84e>
 7b2:	73 72                	jae    826 <sysEnter_Vector-0x12f7da>
 7b4:	63 2f                	arpl   WORD PTR [edi],bp
 7b6:	6d                   	ins    DWORD PTR es:[edi],dx
 7b7:	6d                   	ins    DWORD PTR es:[edi],dx
 7b8:	61                   	popa   
 7b9:	70 2e                	jo     7e9 <sysEnter_Vector-0x12f817>
 7bb:	63 00                	arpl   WORD PTR [eax],ax
 7bd:	73 72                	jae    831 <sysEnter_Vector-0x12f7cf>
 7bf:	63 2f                	arpl   WORD PTR [edi],bp
 7c1:	70 69                	jo     82c <sysEnter_Vector-0x12f7d4>
 7c3:	70 65                	jo     82a <sysEnter_Vector-0x12f7d6>
 7c5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 7c8:	70 69                	jo     833 <sysEnter_Vector-0x12f7cd>
 7ca:	70 65                	jo     831 <sysEnter_Vector-0x12f7cf>
 7cc:	00 70 69             	add    BYTE PTR [eax+0x69],dh
 7cf:	70 65                	jo     836 <sysEnter_Vector-0x12f7ca>
 7d1:	66                   	data16
 7d2:	64 00 66 69          	add    BYTE PTR fs:[esi+0x69],ah
 7d6:	65                   	gs
 7d7:	6c                   	ins    BYTE PTR es:[edi],dx
 7d8:	64                   	fs
 7d9:	5f                   	pop    edi
 7da:	77 69                	ja     845 <sysEnter_Vector-0x12f7bb>
 7dc:	64                   	fs
 7dd:	74 68                	je     847 <sysEnter_Vector-0x12f7b9>
 7df:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 7e2:	70 65                	jo     849 <sysEnter_Vector-0x12f7b7>
 7e4:	61                   	popa   
 7e5:	74 00                	je     7e7 <sysEnter_Vector-0x12f819>
 7e7:	6c                   	ins    BYTE PTR es:[edi],dx
 7e8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7e9:	63 61 73             	arpl   WORD PTR [ecx+0x73],sp
 7ec:	65 00 5f 5f          	add    BYTE PTR gs:[edi+0x5f],bl
 7f0:	72 65                	jb     857 <sysEnter_Vector-0x12f7a9>
 7f2:	73 00                	jae    7f4 <sysEnter_Vector-0x12f80c>
 7f4:	73 72                	jae    868 <sysEnter_Vector-0x12f798>
 7f6:	63 2f                	arpl   WORD PTR [edi],bp
 7f8:	73 70                	jae    86a <sysEnter_Vector-0x12f796>
 7fa:	72 69                	jb     865 <sysEnter_Vector-0x12f79b>
 7fc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7fd:	74 66                	je     865 <sysEnter_Vector-0x12f79b>
 7ff:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 802:	64 69 67 69 74 73 00 	imul   esp,DWORD PTR fs:[edi+0x69],0x76007374
 809:	76 
 80a:	73 70                	jae    87c <sysEnter_Vector-0x12f784>
 80c:	72 69                	jb     877 <sysEnter_Vector-0x12f789>
 80e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 80f:	74 66                	je     877 <sysEnter_Vector-0x12f789>
 811:	00 71 75             	add    BYTE PTR [ecx+0x75],dh
 814:	61                   	popa   
 815:	6c                   	ins    BYTE PTR es:[edi],dx
 816:	69 66 69 65 72 00 73 	imul   esp,DWORD PTR [esi+0x69],0x73007265
 81d:	6b 69 70 5f          	imul   ebp,DWORD PTR [ecx+0x70],0x5f
 821:	61                   	popa   
 822:	74 6f                	je     893 <sysEnter_Vector-0x12f76d>
 824:	69 00 6e 75 6d 62    	imul   eax,DWORD PTR [eax],0x626d756e
 82a:	65                   	gs
 82b:	72 00                	jb     82d <sysEnter_Vector-0x12f7d3>
 82d:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 830:	65 00 70 72          	add    BYTE PTR gs:[eax+0x72],dh
 834:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
 838:	69 6f 6e 00 73 5f 64 	imul   ebp,DWORD PTR [edi+0x6e],0x645f7300
 83f:	65                   	gs
 840:	76 00                	jbe    842 <sysEnter_Vector-0x12f7be>
 842:	75 69                	jne    8ad <sysEnter_Vector-0x12f753>
 844:	6e                   	outs   dx,BYTE PTR ds:[esi]
 845:	74 36                	je     87d <sysEnter_Vector-0x12f783>
 847:	34 5f                	xor    al,0x5f
 849:	74 00                	je     84b <sysEnter_Vector-0x12f7b5>
 84b:	6d                   	ins    DWORD PTR es:[edi],dx
 84c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 84d:	74 5f                	je     8ae <sysEnter_Vector-0x12f752>
 84f:	66                   	data16
 850:	6c                   	ins    BYTE PTR es:[edi],dx
 851:	61                   	popa   
 852:	67 73 00             	addr16 jae 855 <sysEnter_Vector-0x12f7ab>
 855:	6d                   	ins    DWORD PTR es:[edi],dx
 856:	6b 6e 6f 64          	imul   ebp,DWORD PTR [esi+0x6f],0x64
 85a:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 85d:	78 74                	js     8d3 <sysEnter_Vector-0x12f72d>
 85f:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 862:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 869:	66 
 86a:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 86d:	74 5f                	je     8ce <sysEnter_Vector-0x12f732>
 86f:	73 62                	jae    8d3 <sysEnter_Vector-0x12f72d>
 871:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 874:	6c                   	ins    BYTE PTR es:[edi],dx
 875:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 87c:	65                   	gs
 87d:	72 5f                	jb     8de <sysEnter_Vector-0x12f722>
 87f:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 883:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 886:	5f                   	pop    edi
 887:	76 66                	jbe    8ef <sysEnter_Vector-0x12f711>
 889:	73 6d                	jae    8f8 <sysEnter_Vector-0x12f708>
 88b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 88c:	75 6e                	jne    8fc <sysEnter_Vector-0x12f704>
 88e:	74 00                	je     890 <sysEnter_Vector-0x12f770>
 890:	72 65                	jb     8f7 <sysEnter_Vector-0x12f709>
 892:	6e                   	outs   dx,BYTE PTR ds:[esi]
 893:	61                   	popa   
 894:	6d                   	ins    DWORD PTR es:[edi],dx
 895:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 89a:	61                   	popa   
 89b:	6d                   	ins    DWORD PTR es:[edi],dx
 89c:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 8a0:	63 2f                	arpl   WORD PTR [edi],bp
 8a2:	73 74                	jae    918 <sysEnter_Vector-0x12f6e8>
 8a4:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 8ab:	65 
 8ac:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8ad:	74 72                	je     921 <sysEnter_Vector-0x12f6df>
 8af:	79 00                	jns    8b1 <sysEnter_Vector-0x12f74f>
 8b1:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 8b8:	65                   	gs
 8b9:	72 61                	jb     91c <sysEnter_Vector-0x12f6e4>
 8bb:	74 69                	je     926 <sysEnter_Vector-0x12f6da>
 8bd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8be:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8bf:	73 00                	jae    8c1 <sysEnter_Vector-0x12f73f>
 8c1:	72 6d                	jb     930 <sysEnter_Vector-0x12f6d0>
 8c3:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 8ca:	69 
 8cb:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 8d0:	69 73 74 5f 74 00 69 	imul   esi,DWORD PTR [ebx+0x74],0x6900745f
 8d7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8d8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8d9:	64                   	fs
 8da:	65                   	gs
 8db:	5f                   	pop    edi
 8dc:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8dd:	70 65                	jo     944 <sysEnter_Vector-0x12f6bc>
 8df:	72 61                	jb     942 <sysEnter_Vector-0x12f6be>
 8e1:	74 69                	je     94c <sysEnter_Vector-0x12f6b4>
 8e3:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8e4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8e5:	73 00                	jae    8e7 <sysEnter_Vector-0x12f719>
 8e7:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 8ee:	67 73 00             	addr16 jae 8f1 <sysEnter_Vector-0x12f70f>
 8f1:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 8f8:	65                   	gs
 8f9:	72 61                	jb     95c <sysEnter_Vector-0x12f6a4>
 8fb:	74 69                	je     966 <sysEnter_Vector-0x12f69a>
 8fd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 8fe:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8ff:	73 5f                	jae    960 <sysEnter_Vector-0x12f6a0>
 901:	74 00                	je     903 <sysEnter_Vector-0x12f6fd>
 903:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 906:	66 50                	push   ax
 908:	74 72                	je     97c <sysEnter_Vector-0x12f684>
 90a:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 90d:	64                   	fs
 90e:	65                   	gs
 90f:	76 00                	jbe    911 <sysEnter_Vector-0x12f6ef>
 911:	70 61                	jo     974 <sysEnter_Vector-0x12f68c>
 913:	79 6c                	jns    981 <sysEnter_Vector-0x12f67f>
 915:	6f                   	outs   dx,DWORD PTR ds:[esi]
 916:	61                   	popa   
 917:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 91b:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 922:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 925:	6f                   	outs   dx,DWORD PTR ds:[esi]
 926:	70 00                	jo     928 <sysEnter_Vector-0x12f6d8>
 928:	6d                   	ins    DWORD PTR es:[edi],dx
 929:	6e                   	outs   dx,BYTE PTR ds:[esi]
 92a:	74 5f                	je     98b <sysEnter_Vector-0x12f675>
 92c:	72 6f                	jb     99d <sysEnter_Vector-0x12f663>
 92e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 92f:	74 00                	je     931 <sysEnter_Vector-0x12f6cf>
 931:	66 6f                	outs   dx,WORD PTR ds:[esi]
 933:	70 73                	jo     9a8 <sysEnter_Vector-0x12f658>
 935:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 938:	6c                   	ins    BYTE PTR es:[edi],dx
 939:	65                   	gs
 93a:	5f                   	pop    edi
 93b:	74 00                	je     93d <sysEnter_Vector-0x12f6c3>
 93d:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 944:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 947:	75 69                	jne    9b2 <sysEnter_Vector-0x12f64e>
 949:	64 00 69 5f          	add    BYTE PTR fs:[ecx+0x5f],ch
 94d:	6d                   	ins    DWORD PTR es:[edi],dx
 94e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 94f:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 954:	6e                   	outs   dx,BYTE PTR ds:[esi]
 955:	73 6f                	jae    9c6 <sysEnter_Vector-0x12f63a>
 957:	6c                   	ins    BYTE PTR es:[edi],dx
 958:	65                   	gs
 959:	5f                   	pop    edi
 95a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 95b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 95c:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 961:	6f                   	outs   dx,DWORD PTR ds:[esi]
 962:	64                   	fs
 963:	65                   	gs
 964:	5f                   	pop    edi
 965:	74 00                	je     967 <sysEnter_Vector-0x12f699>
 967:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 96a:	73 6f                	jae    9db <sysEnter_Vector-0x12f625>
 96c:	6c                   	ins    BYTE PTR es:[edi],dx
 96d:	65                   	gs
 96e:	5f                   	pop    edi
 96f:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 976:	72 6f                	jb     9e7 <sysEnter_Vector-0x12f619>
 978:	6f                   	outs   dx,DWORD PTR ds:[esi]
 979:	74 00                	je     97b <sysEnter_Vector-0x12f685>
 97b:	64                   	fs
 97c:	5f                   	pop    edi
 97d:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 984:	65                   	gs
 985:	73 65                	jae    9ec <sysEnter_Vector-0x12f614>
 987:	74 52                	je     9db <sysEnter_Vector-0x12f625>
 989:	6f                   	outs   dx,DWORD PTR ds:[esi]
 98a:	77 00                	ja     98c <sysEnter_Vector-0x12f674>
 98c:	64                   	fs
 98d:	5f                   	pop    edi
 98e:	70 61                	jo     9f1 <sysEnter_Vector-0x12f60f>
 990:	72 65                	jb     9f7 <sysEnter_Vector-0x12f609>
 992:	6e                   	outs   dx,BYTE PTR ds:[esi]
 993:	74 00                	je     995 <sysEnter_Vector-0x12f66b>
 995:	66 5f                	pop    di
 997:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 99e:	5f                   	pop    edi
 99f:	70 61                	jo     a02 <sysEnter_Vector-0x12f5fe>
 9a1:	74 68                	je     a0b <sysEnter_Vector-0x12f5f5>
 9a3:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 9a6:	65                   	gs
 9a7:	61                   	popa   
 9a8:	74 65                	je     a0f <sysEnter_Vector-0x12f5f1>
 9aa:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 9ad:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9ae:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 9b1:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 9b3:	61                   	popa   
 9b4:	74 65                	je     a1b <sysEnter_Vector-0x12f5e5>
 9b6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9b9:	72 63                	jb     a1e <sysEnter_Vector-0x12f5e2>
 9bb:	61                   	popa   
 9bc:	74 49                	je     a07 <sysEnter_Vector-0x12f5f9>
 9be:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9c1:	72 63                	jb     a26 <sysEnter_Vector-0x12f5da>
 9c3:	61                   	popa   
 9c4:	74 00                	je     9c6 <sysEnter_Vector-0x12f63a>
 9c6:	73 72                	jae    a3a <sysEnter_Vector-0x12f5c6>
 9c8:	63 2f                	arpl   WORD PTR [edi],bp
 9ca:	73 74                	jae    a40 <sysEnter_Vector-0x12f5c0>
 9cc:	72 69                	jb     a37 <sysEnter_Vector-0x12f5c9>
 9ce:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9cf:	67 73 2f             	addr16 jae a01 <sysEnter_Vector-0x12f5ff>
 9d2:	73 74                	jae    a48 <sysEnter_Vector-0x12f5b8>
 9d4:	72 63                	jb     a39 <sysEnter_Vector-0x12f5c7>
 9d6:	61                   	popa   
 9d7:	74 2e                	je     a07 <sysEnter_Vector-0x12f5f9>
 9d9:	63 00                	arpl   WORD PTR [eax],ax
 9db:	73 74                	jae    a51 <sysEnter_Vector-0x12f5af>
 9dd:	72 63                	jb     a42 <sysEnter_Vector-0x12f5be>
 9df:	6d                   	ins    DWORD PTR es:[edi],dx
 9e0:	70 00                	jo     9e2 <sysEnter_Vector-0x12f61e>
 9e2:	73 72                	jae    a56 <sysEnter_Vector-0x12f5aa>
 9e4:	63 2f                	arpl   WORD PTR [edi],bp
 9e6:	73 74                	jae    a5c <sysEnter_Vector-0x12f5a4>
 9e8:	72 69                	jb     a53 <sysEnter_Vector-0x12f5ad>
 9ea:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9eb:	67 73 2f             	addr16 jae a1d <sysEnter_Vector-0x12f5e3>
 9ee:	73 74                	jae    a64 <sysEnter_Vector-0x12f59c>
 9f0:	72 63                	jb     a55 <sysEnter_Vector-0x12f5ab>
 9f2:	6d                   	ins    DWORD PTR es:[edi],dx
 9f3:	70 2e                	jo     a23 <sysEnter_Vector-0x12f5dd>
 9f5:	63 00                	arpl   WORD PTR [eax],ax
 9f7:	73 74                	jae    a6d <sysEnter_Vector-0x12f593>
 9f9:	72 63                	jb     a5e <sysEnter_Vector-0x12f5a2>
 9fb:	70 79                	jo     a76 <sysEnter_Vector-0x12f58a>
 9fd:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 a00:	75 6e                	jne    a70 <sysEnter_Vector-0x12f590>
 a02:	74 00                	je     a04 <sysEnter_Vector-0x12f5fc>
 a04:	73 74                	jae    a7a <sysEnter_Vector-0x12f586>
 a06:	72 63                	jb     a6b <sysEnter_Vector-0x12f595>
 a08:	70 79                	jo     a83 <sysEnter_Vector-0x12f57d>
 a0a:	63 00                	arpl   WORD PTR [eax],ax
 a0c:	73 74                	jae    a82 <sysEnter_Vector-0x12f57e>
 a0e:	72 63                	jb     a73 <sysEnter_Vector-0x12f58d>
 a10:	70 79                	jo     a8b <sysEnter_Vector-0x12f575>
 a12:	49                   	dec    ecx
 a13:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a16:	63 2f                	arpl   WORD PTR [edi],bp
 a18:	73 74                	jae    a8e <sysEnter_Vector-0x12f572>
 a1a:	72 69                	jb     a85 <sysEnter_Vector-0x12f57b>
 a1c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a1d:	67 73 2f             	addr16 jae a4f <sysEnter_Vector-0x12f5b1>
 a20:	73 74                	jae    a96 <sysEnter_Vector-0x12f56a>
 a22:	72 63                	jb     a87 <sysEnter_Vector-0x12f579>
 a24:	70 79                	jo     a9f <sysEnter_Vector-0x12f561>
 a26:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a29:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 a2c:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 a2f:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 a36:	74 
 a37:	72 69                	jb     aa2 <sysEnter_Vector-0x12f55e>
 a39:	73 6e                	jae    aa9 <sysEnter_Vector-0x12f557>
 a3b:	75 6d                	jne    aaa <sysEnter_Vector-0x12f556>
 a3d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a40:	63 2f                	arpl   WORD PTR [edi],bp
 a42:	73 74                	jae    ab8 <sysEnter_Vector-0x12f548>
 a44:	72 69                	jb     aaf <sysEnter_Vector-0x12f551>
 a46:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a47:	67 73 2f             	addr16 jae a79 <sysEnter_Vector-0x12f587>
 a4a:	73 74                	jae    ac0 <sysEnter_Vector-0x12f540>
 a4c:	72 69                	jb     ab7 <sysEnter_Vector-0x12f549>
 a4e:	73 6e                	jae    abe <sysEnter_Vector-0x12f542>
 a50:	75 6d                	jne    abf <sysEnter_Vector-0x12f541>
 a52:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a55:	73 74                	jae    acb <sysEnter_Vector-0x12f535>
 a57:	72 6c                	jb     ac5 <sysEnter_Vector-0x12f53b>
 a59:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a5b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a5e:	63 2f                	arpl   WORD PTR [edi],bp
 a60:	73 74                	jae    ad6 <sysEnter_Vector-0x12f52a>
 a62:	72 69                	jb     acd <sysEnter_Vector-0x12f533>
 a64:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a65:	67 73 2f             	addr16 jae a97 <sysEnter_Vector-0x12f569>
 a68:	73 74                	jae    ade <sysEnter_Vector-0x12f522>
 a6a:	72 6c                	jb     ad8 <sysEnter_Vector-0x12f528>
 a6c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a6e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a71:	73 74                	jae    ae7 <sysEnter_Vector-0x12f519>
 a73:	72 6c                	jb     ae1 <sysEnter_Vector-0x12f51f>
 a75:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 a77:	49                   	dec    ecx
 a78:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a7b:	72 6e                	jb     aeb <sysEnter_Vector-0x12f515>
 a7d:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a80:	49                   	dec    ecx
 a81:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a84:	72 6e                	jb     af4 <sysEnter_Vector-0x12f50c>
 a86:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a89:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a8c:	63 2f                	arpl   WORD PTR [edi],bp
 a8e:	73 74                	jae    b04 <sysEnter_Vector-0x12f4fc>
 a90:	72 69                	jb     afb <sysEnter_Vector-0x12f505>
 a92:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a93:	67 73 2f             	addr16 jae ac5 <sysEnter_Vector-0x12f53b>
 a96:	73 74                	jae    b0c <sysEnter_Vector-0x12f4f4>
 a98:	72 6e                	jb     b08 <sysEnter_Vector-0x12f4f8>
 a9a:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 a9d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 aa0:	73 72                	jae    b14 <sysEnter_Vector-0x12f4ec>
 aa2:	63 2f                	arpl   WORD PTR [edi],bp
 aa4:	73 74                	jae    b1a <sysEnter_Vector-0x12f4e6>
 aa6:	72 69                	jb     b11 <sysEnter_Vector-0x12f4ef>
 aa8:	6e                   	outs   dx,BYTE PTR ds:[esi]
 aa9:	67 73 2f             	addr16 jae adb <sysEnter_Vector-0x12f525>
 aac:	73 74                	jae    b22 <sysEnter_Vector-0x12f4de>
 aae:	72 6e                	jb     b1e <sysEnter_Vector-0x12f4e2>
 ab0:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 ab3:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 ab6:	73 74                	jae    b2c <sysEnter_Vector-0x12f4d4>
 ab8:	72 6e                	jb     b28 <sysEnter_Vector-0x12f4d8>
 aba:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 abd:	49                   	dec    ecx
 abe:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 ac1:	72 6e                	jb     b31 <sysEnter_Vector-0x12f4cf>
 ac3:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 ac6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 ac9:	63 2f                	arpl   WORD PTR [edi],bp
 acb:	73 74                	jae    b41 <sysEnter_Vector-0x12f4bf>
 acd:	72 69                	jb     b38 <sysEnter_Vector-0x12f4c8>
 acf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 ad0:	67 73 2f             	addr16 jae b02 <sysEnter_Vector-0x12f4fe>
 ad3:	73 74                	jae    b49 <sysEnter_Vector-0x12f4b7>
 ad5:	72 6f                	jb     b46 <sysEnter_Vector-0x12f4ba>
 ad7:	75 6c                	jne    b45 <sysEnter_Vector-0x12f4bb>
 ad9:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 adc:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 adf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ae0:	66                   	data16
 ae1:	66                   	data16
 ae2:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 ae5:	74 6c                	je     b53 <sysEnter_Vector-0x12f4ad>
 ae7:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 aee:	6f                   	outs   dx,DWORD PTR ds:[esi]
 aef:	75 6c                	jne    b5d <sysEnter_Vector-0x12f4a3>
 af1:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 af4:	64                   	fs
 af5:	70 74                	jo     b6b <sysEnter_Vector-0x12f495>
 af7:	72 00                	jb     af9 <sysEnter_Vector-0x12f507>
 af9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 afa:	70 74                	jo     b70 <sysEnter_Vector-0x12f490>
 afc:	72 00                	jb     afe <sysEnter_Vector-0x12f502>
 afe:	73 72                	jae    b72 <sysEnter_Vector-0x12f48e>
 b00:	63 2f                	arpl   WORD PTR [edi],bp
 b02:	73 74                	jae    b78 <sysEnter_Vector-0x12f488>
 b04:	72 69                	jb     b6f <sysEnter_Vector-0x12f491>
 b06:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b07:	67 73 2f             	addr16 jae b39 <sysEnter_Vector-0x12f4c7>
 b0a:	73 74                	jae    b80 <sysEnter_Vector-0x12f480>
 b0c:	72 70                	jb     b7e <sysEnter_Vector-0x12f482>
 b0e:	61                   	popa   
 b0f:	72 74                	jb     b85 <sysEnter_Vector-0x12f47b>
 b11:	73 2e                	jae    b41 <sysEnter_Vector-0x12f4bf>
 b13:	63 00                	arpl   WORD PTR [eax],ax
 b15:	73 74                	jae    b8b <sysEnter_Vector-0x12f475>
 b17:	72 6c                	jb     b85 <sysEnter_Vector-0x12f47b>
 b19:	65                   	gs
 b1a:	66                   	data16
 b1b:	74 00                	je     b1d <sysEnter_Vector-0x12f4e3>
 b1d:	73 72                	jae    b91 <sysEnter_Vector-0x12f46f>
 b1f:	63 2f                	arpl   WORD PTR [edi],bp
 b21:	73 74                	jae    b97 <sysEnter_Vector-0x12f469>
 b23:	72 69                	jb     b8e <sysEnter_Vector-0x12f472>
 b25:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b26:	67 73 2f             	addr16 jae b58 <sysEnter_Vector-0x12f4a8>
 b29:	73 74                	jae    b9f <sysEnter_Vector-0x12f461>
 b2b:	72 74                	jb     ba1 <sysEnter_Vector-0x12f45f>
 b2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b2e:	6c                   	ins    BYTE PTR es:[edi],dx
 b2f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b32:	73 74                	jae    ba8 <sysEnter_Vector-0x12f458>
 b34:	72 74                	jb     baa <sysEnter_Vector-0x12f456>
 b36:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b37:	6c                   	ins    BYTE PTR es:[edi],dx
 b38:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 b3b:	70 75                	jo     bb2 <sysEnter_Vector-0x12f44e>
 b3d:	74 00                	je     b3f <sysEnter_Vector-0x12f4c1>
 b3f:	73 72                	jae    bb3 <sysEnter_Vector-0x12f44d>
 b41:	63 2f                	arpl   WORD PTR [edi],bp
 b43:	73 74                	jae    bb9 <sysEnter_Vector-0x12f447>
 b45:	72 69                	jb     bb0 <sysEnter_Vector-0x12f450>
 b47:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b48:	67 73 2f             	addr16 jae b7a <sysEnter_Vector-0x12f486>
 b4b:	73 74                	jae    bc1 <sysEnter_Vector-0x12f43f>
 b4d:	72 74                	jb     bc3 <sysEnter_Vector-0x12f43d>
 b4f:	72 69                	jb     bba <sysEnter_Vector-0x12f446>
 b51:	6d                   	ins    DWORD PTR es:[edi],dx
 b52:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b55:	73 74                	jae    bcb <sysEnter_Vector-0x12f435>
 b57:	72 74                	jb     bcd <sysEnter_Vector-0x12f433>
 b59:	72 69                	jb     bc4 <sysEnter_Vector-0x12f43c>
 b5b:	6d                   	ins    DWORD PTR es:[edi],dx
 b5c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b5f:	72 74                	jb     bd5 <sysEnter_Vector-0x12f42b>
 b61:	72 69                	jb     bcc <sysEnter_Vector-0x12f434>
 b63:	6d                   	ins    DWORD PTR es:[edi],dx
 b64:	49                   	dec    ecx
 b65:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 b68:	72 73                	jb     bdd <sysEnter_Vector-0x12f423>
 b6a:	74 72                	je     bde <sysEnter_Vector-0x12f422>
 b6c:	49                   	dec    ecx
 b6d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 b70:	63 2f                	arpl   WORD PTR [edi],bp
 b72:	73 74                	jae    be8 <sysEnter_Vector-0x12f418>
 b74:	72 73                	jb     be9 <sysEnter_Vector-0x12f417>
 b76:	74 72                	je     bea <sysEnter_Vector-0x12f416>
 b78:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 b7b:	73 74                	jae    bf1 <sysEnter_Vector-0x12f40f>
 b7d:	72 73                	jb     bf2 <sysEnter_Vector-0x12f40e>
 b7f:	74 72                	je     bf3 <sysEnter_Vector-0x12f40d>
 b81:	00 72 63             	add    BYTE PTR [edx+0x63],dh
 b84:	73 69                	jae    bef <sysEnter_Vector-0x12f411>
 b86:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 b8a:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 b8d:	72 69                	jb     bf8 <sysEnter_Vector-0x12f408>
 b8f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b90:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
 b94:	63 2f                	arpl   WORD PTR [edi],bp
 b96:	74 69                	je     c01 <sysEnter_Vector-0x12f3ff>
 b98:	6d                   	ins    DWORD PTR es:[edi],dx
 b99:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 b9d:	6c                   	ins    BYTE PTR es:[edi],dx
 b9e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b9f:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 ba2:	74 69                	je     c0d <sysEnter_Vector-0x12f3f3>
 ba4:	6d                   	ins    DWORD PTR es:[edi],dx
 ba5:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 baa:	68 6f 75 72 00       	push   0x72756f
 baf:	67                   	addr16
 bb0:	65                   	gs
 bb1:	74 74                	je     c27 <sysEnter_Vector-0x12f3d9>
 bb3:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 bba:	61                   	popa   
 bbb:	79 6c                	jns    c29 <sysEnter_Vector-0x12f3d7>
 bbd:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 bc4:	7a 6e                	jp     c34 <sysEnter_Vector-0x12f3cc>
 bc6:	61                   	popa   
 bc7:	6d                   	ins    DWORD PTR es:[edi],dx
 bc8:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 bcc:	74 69                	je     c37 <sysEnter_Vector-0x12f3c9>
 bce:	6d                   	ins    DWORD PTR es:[edi],dx
 bcf:	65                   	gs
 bd0:	5f                   	pop    edi
 bd1:	72 00                	jb     bd3 <sysEnter_Vector-0x12f42d>
 bd3:	74 69                	je     c3e <sysEnter_Vector-0x12f3c2>
 bd5:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 bd8:	54                   	push   esp
 bd9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bda:	57                   	push   edi
 bdb:	61                   	popa   
 bdc:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 be3:	6f 
 be4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 be5:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 be9:	79 65                	jns    c50 <sysEnter_Vector-0x12f3b0>
 beb:	61                   	popa   
 bec:	72 00                	jb     bee <sysEnter_Vector-0x12f412>
 bee:	6d                   	ins    DWORD PTR es:[edi],dx
 bef:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bf0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 bf1:	74 68                	je     c5b <sysEnter_Vector-0x12f3a5>
 bf3:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 bf6:	74 74                	je     c6c <sysEnter_Vector-0x12f394>
 bf8:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 bff:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 c06:	61                   	popa   
 c07:	79 6e                	jns    c77 <sysEnter_Vector-0x12f389>
 c09:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c0a:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 c0d:	74 69                	je     c78 <sysEnter_Vector-0x12f388>
 c0f:	6d                   	ins    DWORD PTR es:[edi],dx
 c10:	65                   	gs
 c11:	5f                   	pop    edi
 c12:	72 49                	jb     c5d <sysEnter_Vector-0x12f3a3>
 c14:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c18:	6d                   	ins    DWORD PTR es:[edi],dx
 c19:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 c20:	64                   	fs
 c21:	61                   	popa   
 c22:	79 00                	jns    c24 <sysEnter_Vector-0x12f3dc>
 c24:	6c                   	ins    BYTE PTR es:[edi],dx
 c25:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c26:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c29:	54                   	push   esp
 c2a:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 c31:	75 66                	jne    c99 <sysEnter_Vector-0x12f367>
 c33:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 c37:	65                   	gs
 c38:	5f                   	pop    edi
 c39:	74 00                	je     c3b <sysEnter_Vector-0x12f3c5>
 c3b:	6c                   	ins    BYTE PTR es:[edi],dx
 c3c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c3d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c40:	74 69                	je     cab <sysEnter_Vector-0x12f355>
 c42:	6d                   	ins    DWORD PTR es:[edi],dx
 c43:	65                   	gs
 c44:	5f                   	pop    edi
 c45:	72 00                	jb     c47 <sysEnter_Vector-0x12f3b9>
 c47:	64                   	fs
 c48:	61                   	popa   
 c49:	79 63                	jns    cae <sysEnter_Vector-0x12f352>
 c4b:	6c                   	ins    BYTE PTR es:[edi],dx
 c4c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c4d:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 c50:	6d                   	ins    DWORD PTR es:[edi],dx
 c51:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 c56:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c5a:	67 6d                	ins    DWORD PTR es:[di],dx
 c5c:	74 6f                	je     ccd <sysEnter_Vector-0x12f333>
 c5e:	66                   	data16
 c5f:	66                   	data16
 c60:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 c64:	77 64                	ja     cca <sysEnter_Vector-0x12f336>
 c66:	61                   	popa   
 c67:	79 00                	jns    c69 <sysEnter_Vector-0x12f397>
 c69:	5f                   	pop    edi
 c6a:	79 74                	jns    ce0 <sysEnter_Vector-0x12f320>
 c6c:	61                   	popa   
 c6d:	62 00                	bound  eax,QWORD PTR [eax]
 c6f:	74 6d                	je     cde <sysEnter_Vector-0x12f322>
 c71:	5f                   	pop    edi
 c72:	6d                   	ins    DWORD PTR es:[edi],dx
 c73:	64                   	fs
 c74:	61                   	popa   
 c75:	79 00                	jns    c77 <sysEnter_Vector-0x12f389>
 c77:	74 6d                	je     ce6 <sysEnter_Vector-0x12f31a>
 c79:	5f                   	pop    edi
 c7a:	73 65                	jae    ce1 <sysEnter_Vector-0x12f31f>
 c7c:	63 00                	arpl   WORD PTR [eax],ax
 c7e:	74 6d                	je     ced <sysEnter_Vector-0x12f313>
 c80:	5f                   	pop    edi
 c81:	7a 6f                	jp     cf2 <sysEnter_Vector-0x12f30e>
 c83:	6e                   	outs   dx,BYTE PTR ds:[esi]
 c84:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 c89:	65                   	gs
 c8a:	72 00                	jb     c8c <sysEnter_Vector-0x12f374>
 c8c:	6c                   	ins    BYTE PTR es:[edi],dx
 c8d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 c8e:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 c91:	74 69                	je     cfc <sysEnter_Vector-0x12f304>
 c93:	6d                   	ins    DWORD PTR es:[edi],dx
 c94:	65                   	gs
 c95:	5f                   	pop    edi
 c96:	72 49                	jb     ce1 <sysEnter_Vector-0x12f31f>
 c98:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 c9b:	73 74                	jae    d11 <sysEnter_Vector-0x12f2ef>
 c9d:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 ca0:	73 00                	jae    ca2 <sysEnter_Vector-0x12f35e>
 ca2:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ca3:	76 65                	jbe    d0a <sysEnter_Vector-0x12f2f6>
 ca5:	72 66                	jb     d0d <sysEnter_Vector-0x12f2f3>
 ca7:	6c                   	ins    BYTE PTR es:[edi],dx
 ca8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ca9:	77 00                	ja     cab <sysEnter_Vector-0x12f355>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
