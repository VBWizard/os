
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

9f000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"
#include "common.h"

VISIBLE char *strchr(const char *s, int c)
{
9f000000:	55                   	push   ebp
9f000001:	89 e5                	mov    ebp,esp
9f000003:	e8 a6 50 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000008:	05 94 7d 00 00       	add    eax,0x7d94
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
    while (*s != (char)c)
9f00000d:	eb 17                	jmp    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
        if (!*s++)
9f00000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000012:	8d 50 01             	lea    edx,[eax+0x1]
9f000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00001b:	84 c0                	test   al,al
9f00001d:	75 07                	jne    9f000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
            return 0;
9f00001f:	b8 00 00 00 00       	mov    eax,0x0
9f000024:	eb 10                	jmp    9f000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
#include "strings.h"
#include "common.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
9f000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00002f:	38 d0                	cmp    al,dl
9f000031:	75 dc                	jne    9f00000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
        if (!*s++)
            return 0;
    return (char *)s;
9f000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:15
}
9f000036:	5d                   	pop    ebp
9f000037:	c3                   	ret    

9f000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18

char *strchrI(const char *s, int c)
{
9f000038:	55                   	push   ebp
9f000039:	89 e5                	mov    ebp,esp
9f00003b:	e8 6e 50 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000040:	05 5c 7d 00 00       	add    eax,0x7d5c
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    while (*s != (char)c)
9f000045:	eb 17                	jmp    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
        if (!*s++)
9f000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00004a:	8d 50 01             	lea    edx,[eax+0x1]
9f00004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000053:	84 c0                	test   al,al
9f000055:	75 07                	jne    9f00005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
            return 0;
9f000057:	b8 00 00 00 00       	mov    eax,0x0
9f00005c:	eb 10                	jmp    9f00006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
9f00005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000067:	38 d0                	cmp    al,dl
9f000069:	75 dc                	jne    9f000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
        if (!*s++)
            return 0;
    return (char *)s;
9f00006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:23
}
9f00006e:	5d                   	pop    ebp
9f00006f:	c3                   	ret    

9f000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:39

#include "strings.h"
#include "common.h"

VISIBLE int strcspn(char* string, char* chars)
{
9f000070:	55                   	push   ebp
9f000071:	89 e5                	mov    ebp,esp
9f000073:	56                   	push   esi
9f000074:	53                   	push   ebx
9f000075:	e8 34 50 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00007a:	05 22 7d 00 00       	add    eax,0x7d22
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f00007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000085:	89 c1                	mov    ecx,eax
9f000087:	eb 29                	jmp    9f0000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	for (p = chars; *p != 0; p++) {
9f000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f00008c:	eb 15                	jmp    9f0000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
	    if (c == *p) {
9f00008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f000091:	38 c8                	cmp    al,cl
9f000093:	75 0b                	jne    9f0000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:45
		return s-string;
9f000095:	89 da                	mov    edx,ebx
9f000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00009a:	29 c2                	sub    edx,eax
9f00009c:	89 d0                	mov    eax,edx
9f00009e:	eb 21                	jmp    9f0000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43 (discriminator 1)
9f0000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000a6:	84 c0                	test   al,al
9f0000a8:	75 e4                	jne    9f00008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000aa:	83 c3 01             	add    ebx,0x1
9f0000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
9f0000b2:	89 c8                	mov    eax,ecx
9f0000b4:	84 c0                	test   al,al
9f0000b6:	75 d1                	jne    9f000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f0000b8:	89 da                	mov    edx,ebx
9f0000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000bd:	29 c2                	sub    edx,eax
9f0000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:50
}
9f0000c1:	5b                   	pop    ebx
9f0000c2:	5e                   	pop    esi
9f0000c3:	5d                   	pop    ebp
9f0000c4:	c3                   	ret    

9f0000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:53

int strcspnI(char* string, char* chars)
{
9f0000c5:	55                   	push   ebp
9f0000c6:	89 e5                	mov    ebp,esp
9f0000c8:	56                   	push   esi
9f0000c9:	53                   	push   ebx
9f0000ca:	e8 df 4f 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0000cf:	05 cd 7c 00 00       	add    eax,0x7ccd
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0000da:	89 c1                	mov    ecx,eax
9f0000dc:	eb 29                	jmp    9f000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	for (p = chars; *p != 0; p++) {
9f0000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
9f0000e1:	eb 15                	jmp    9f0000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
	    if (c == *p) {
9f0000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000e6:	38 c8                	cmp    al,cl
9f0000e8:	75 0b                	jne    9f0000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:59
		return s-string;
9f0000ea:	89 da                	mov    edx,ebx
9f0000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0000ef:	29 c2                	sub    edx,eax
9f0000f1:	89 d0                	mov    eax,edx
9f0000f3:	eb 21                	jmp    9f000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
9f0000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57 (discriminator 1)
9f0000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f0000fb:	84 c0                	test   al,al
9f0000fd:	75 e4                	jne    9f0000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
9f0000ff:	83 c3 01             	add    ebx,0x1
9f000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
9f000107:	89 c8                	mov    eax,ecx
9f000109:	84 c0                	test   al,al
9f00010b:	75 d1                	jne    9f0000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
9f00010d:	89 da                	mov    edx,ebx
9f00010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000112:	29 c2                	sub    edx,eax
9f000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:64
}
9f000116:	5b                   	pop    ebx
9f000117:	5e                   	pop    esi
9f000118:	5d                   	pop    ebp
9f000119:	c3                   	ret    
9f00011a:	66 90                	xchg   ax,ax

9f00011c <strtokI>:
strtokI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:43

int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

char * strtokI(char* s, /*const*/ char* delim)
{
9f00011c:	55                   	push   ebp
9f00011d:	89 e5                	mov    ebp,esp
9f00011f:	56                   	push   esi
9f000120:	53                   	push   ebx
9f000121:	e8 8c 4f 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f000126:	81 c3 76 7c 00 00    	add    ebx,0x7c76
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:47
    static char *lasts;
    register int ch;

    if (s == 0)
9f00012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000130:	75 09                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
	s = lasts;
9f000132:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
9f000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    do {
	if ((ch = *s++) == '\0')
9f00013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00013e:	8d 50 01             	lea    edx,[eax+0x1]
9f000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000147:	0f be f0             	movsx  esi,al
9f00014a:	85 f6                	test   esi,esi
9f00014c:	75 07                	jne    9f000155 <strtokI+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
	    return 0;
9f00014e:	b8 00 00 00 00       	mov    eax,0x0
9f000153:	eb 57                	jmp    9f0001ac <strtokI+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    } while (strchrI(delim, ch));
9f000155:	83 ec 08             	sub    esp,0x8
9f000158:	56                   	push   esi
9f000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00015c:	e8 d7 fe ff ff       	call   9f000038 <strchrI>
9f000161:	83 c4 10             	add    esp,0x10
9f000164:	85 c0                	test   eax,eax
9f000166:	75 d3                	jne    9f00013b <strtokI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    --s;
9f000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
    lasts = s + strcspnI(s, delim);
9f00016c:	83 ec 08             	sub    esp,0x8
9f00016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000175:	e8 4b ff ff ff       	call   9f0000c5 <strcspnI>
9f00017a:	83 c4 10             	add    esp,0x10
9f00017d:	89 c2                	mov    edx,eax
9f00017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000182:	01 d0                	add    eax,edx
9f000184:	89 83 28 00 00 00    	mov    DWORD PTR [ebx+0x28],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    if (*lasts != 0)
9f00018a:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
9f000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000193:	84 c0                	test   al,al
9f000195:	74 12                	je     9f0001a9 <strtokI+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
	*lasts++ = 0;
9f000197:	8b 83 28 00 00 00    	mov    eax,DWORD PTR [ebx+0x28]
9f00019d:	8d 50 01             	lea    edx,[eax+0x1]
9f0001a0:	89 93 28 00 00 00    	mov    DWORD PTR [ebx+0x28],edx
9f0001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:57
    return s;
9f0001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:58
}
9f0001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
9f0001af:	5b                   	pop    ebx
9f0001b0:	5e                   	pop    esi
9f0001b1:	5d                   	pop    ebp
9f0001b2:	c3                   	ret    

9f0001b3 <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:61

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
9f0001b3:	55                   	push   ebp
9f0001b4:	89 e5                	mov    ebp,esp
9f0001b6:	56                   	push   esi
9f0001b7:	53                   	push   ebx
9f0001b8:	e8 f5 4e 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0001bd:	81 c3 df 7b 00 00    	add    ebx,0x7bdf
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:65
    static char *lasts;
    register int ch;

    if (s == 0)
9f0001c3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0001c7:	75 09                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:66
	s = lasts;
9f0001c9:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
9f0001cf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:68
    do {
	if ((ch = *s++) == '\0')
9f0001d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0001d5:	8d 50 01             	lea    edx,[eax+0x1]
9f0001d8:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0001db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0001de:	0f be f0             	movsx  esi,al
9f0001e1:	85 f6                	test   esi,esi
9f0001e3:	75 07                	jne    9f0001ec <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:69
	    return 0;
9f0001e5:	b8 00 00 00 00       	mov    eax,0x0
9f0001ea:	eb 57                	jmp    9f000243 <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:70
    } while (strchrI(delim, ch));
9f0001ec:	83 ec 08             	sub    esp,0x8
9f0001ef:	56                   	push   esi
9f0001f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0001f3:	e8 40 fe ff ff       	call   9f000038 <strchrI>
9f0001f8:	83 c4 10             	add    esp,0x10
9f0001fb:	85 c0                	test   eax,eax
9f0001fd:	75 d3                	jne    9f0001d2 <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:71
    --s;
9f0001ff:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:72
    lasts = s + strcspnI(s, delim);
9f000203:	83 ec 08             	sub    esp,0x8
9f000206:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000209:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00020c:	e8 b4 fe ff ff       	call   9f0000c5 <strcspnI>
9f000211:	83 c4 10             	add    esp,0x10
9f000214:	89 c2                	mov    edx,eax
9f000216:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000219:	01 d0                	add    eax,edx
9f00021b:	89 83 2c 00 00 00    	mov    DWORD PTR [ebx+0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:73
    if (*lasts != 0)
9f000221:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
9f000227:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00022a:	84 c0                	test   al,al
9f00022c:	74 12                	je     9f000240 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:74
	*lasts++ = 0;
9f00022e:	8b 83 2c 00 00 00    	mov    eax,DWORD PTR [ebx+0x2c]
9f000234:	8d 50 01             	lea    edx,[eax+0x1]
9f000237:	89 93 2c 00 00 00    	mov    DWORD PTR [ebx+0x2c],edx
9f00023d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:75
    return s;
9f000240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:76
9f000243:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000246:	5b                   	pop    ebx
9f000247:	5e                   	pop    esi
9f000248:	5d                   	pop    ebp
9f000249:	c3                   	ret    
9f00024a:	66 90                	xchg   ax,ax

9f00024c <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:11

#include "common.h"
#include "strings.h"

void reverseI(char s[])
 {
9f00024c:	55                   	push   ebp
9f00024d:	89 e5                	mov    ebp,esp
9f00024f:	53                   	push   ebx
9f000250:	83 ec 14             	sub    esp,0x14
9f000253:	e8 56 4e 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000258:	05 44 7b 00 00       	add    eax,0x7b44
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f00025d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f000264:	83 ec 0c             	sub    esp,0xc
9f000267:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00026a:	89 c3                	mov    ebx,eax
9f00026c:	e8 cb 38 00 00       	call   9f003b3c <strlenI>
9f000271:	83 c4 10             	add    esp,0x10
9f000274:	83 e8 01             	sub    eax,0x1
9f000277:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00027a:	eb 39                	jmp    9f0002b5 <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         c = s[i];
9f00027c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00027f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000282:	01 d0                	add    eax,edx
9f000284:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000287:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[i] = s[j];
9f00028a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00028d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000290:	01 c2                	add    edx,eax
9f000292:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f000295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000298:	01 c8                	add    eax,ecx
9f00029a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00029d:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:18 (discriminator 3)
         s[j] = c;
9f00029f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0002a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002a5:	01 c2                	add    edx,eax
9f0002a7:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
9f0002ab:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
9f0002ad:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
9f0002b1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 1)
9f0002b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002b8:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0002bb:	7c bf                	jl     9f00027c <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:20
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
9f0002bd:	90                   	nop
9f0002be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0002c1:	c9                   	leave  
9f0002c2:	c3                   	ret    

9f0002c3 <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:23

VISIBLE void itoa(int n, char s[])
 {
9f0002c3:	55                   	push   ebp
9f0002c4:	89 e5                	mov    ebp,esp
9f0002c6:	53                   	push   ebx
9f0002c7:	83 ec 14             	sub    esp,0x14
9f0002ca:	e8 df 4d 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0002cf:	05 cd 7a 00 00       	add    eax,0x7acd
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f0002d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0002d7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0002da:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0002de:	79 03                	jns    9f0002e3 <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
         n = -n;          /* make n positive */
9f0002e0:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:28
     i = 0;
9f0002e3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0002ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0002ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0002f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0002f3:	89 c2                	mov    edx,eax
9f0002f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0002f8:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0002fb:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0002fe:	ba 67 66 66 66       	mov    edx,0x66666667
9f000303:	89 c8                	mov    eax,ecx
9f000305:	f7 ea                	imul   edx
9f000307:	c1 fa 02             	sar    edx,0x2
9f00030a:	89 c8                	mov    eax,ecx
9f00030c:	c1 f8 1f             	sar    eax,0x1f
9f00030f:	29 c2                	sub    edx,eax
9f000311:	89 d0                	mov    eax,edx
9f000313:	c1 e0 02             	shl    eax,0x2
9f000316:	01 d0                	add    eax,edx
9f000318:	01 c0                	add    eax,eax
9f00031a:	29 c1                	sub    ecx,eax
9f00031c:	89 ca                	mov    edx,ecx
9f00031e:	89 d0                	mov    eax,edx
9f000320:	83 c0 30             	add    eax,0x30
9f000323:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f000325:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f000328:	ba 67 66 66 66       	mov    edx,0x66666667
9f00032d:	89 c8                	mov    eax,ecx
9f00032f:	f7 ea                	imul   edx
9f000331:	c1 fa 02             	sar    edx,0x2
9f000334:	89 c8                	mov    eax,ecx
9f000336:	c1 f8 1f             	sar    eax,0x1f
9f000339:	29 c2                	sub    edx,eax
9f00033b:	89 d0                	mov    eax,edx
9f00033d:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f000340:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f000344:	7f a4                	jg     9f0002ea <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
     if (sign < 0)
9f000346:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00034a:	79 13                	jns    9f00035f <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
         s[i++] = '-';
9f00034c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00034f:	8d 50 01             	lea    edx,[eax+0x1]
9f000352:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000355:	89 c2                	mov    edx,eax
9f000357:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00035a:	01 d0                	add    eax,edx
9f00035c:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     s[i] = '\0';
9f00035f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000362:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000365:	01 d0                	add    eax,edx
9f000367:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
     reverseI(s);
9f00036a:	83 ec 0c             	sub    esp,0xc
9f00036d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000370:	e8 d7 fe ff ff       	call   9f00024c <reverseI>
9f000375:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:36
 }
9f000378:	90                   	nop
9f000379:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00037c:	c9                   	leave  
9f00037d:	c3                   	ret    

9f00037e <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:39

 char *itoaI(int n, char s[])
 {
9f00037e:	55                   	push   ebp
9f00037f:	89 e5                	mov    ebp,esp
9f000381:	53                   	push   ebx
9f000382:	83 ec 14             	sub    esp,0x14
9f000385:	e8 24 4d 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00038a:	05 12 7a 00 00       	add    eax,0x7a12
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
9f00038f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000392:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f000395:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000399:	79 03                	jns    9f00039e <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
         n = -n;          /* make n positive */
9f00039b:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:44
     i = 0;
9f00039e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
9f0003a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0003a8:	8d 50 01             	lea    edx,[eax+0x1]
9f0003ab:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0003ae:	89 c2                	mov    edx,eax
9f0003b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0003b3:	8d 1c 02             	lea    ebx,[edx+eax*1]
9f0003b6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003b9:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003be:	89 c8                	mov    eax,ecx
9f0003c0:	f7 ea                	imul   edx
9f0003c2:	c1 fa 02             	sar    edx,0x2
9f0003c5:	89 c8                	mov    eax,ecx
9f0003c7:	c1 f8 1f             	sar    eax,0x1f
9f0003ca:	29 c2                	sub    edx,eax
9f0003cc:	89 d0                	mov    eax,edx
9f0003ce:	c1 e0 02             	shl    eax,0x2
9f0003d1:	01 d0                	add    eax,edx
9f0003d3:	01 c0                	add    eax,eax
9f0003d5:	29 c1                	sub    ecx,eax
9f0003d7:	89 ca                	mov    edx,ecx
9f0003d9:	89 d0                	mov    eax,edx
9f0003db:	83 c0 30             	add    eax,0x30
9f0003de:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
9f0003e0:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0003e3:	ba 67 66 66 66       	mov    edx,0x66666667
9f0003e8:	89 c8                	mov    eax,ecx
9f0003ea:	f7 ea                	imul   edx
9f0003ec:	c1 fa 02             	sar    edx,0x2
9f0003ef:	89 c8                	mov    eax,ecx
9f0003f1:	c1 f8 1f             	sar    eax,0x1f
9f0003f4:	29 c2                	sub    edx,eax
9f0003f6:	89 d0                	mov    eax,edx
9f0003f8:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0003fb:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f0003ff:	7f a4                	jg     9f0003a5 <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
     if (sign < 0)
9f000401:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f000405:	79 13                	jns    9f00041a <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
         s[i++] = '-';
9f000407:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00040a:	8d 50 01             	lea    edx,[eax+0x1]
9f00040d:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f000410:	89 c2                	mov    edx,eax
9f000412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000415:	01 d0                	add    eax,edx
9f000417:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     s[i] = '\0';
9f00041a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00041d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000420:	01 d0                	add    eax,edx
9f000422:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
     reverseI(s);
9f000425:	83 ec 0c             	sub    esp,0xc
9f000428:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00042b:	e8 1c fe ff ff       	call   9f00024c <reverseI>
9f000430:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:52
     return s;
9f000433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:53
 }
9f000436:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000439:	c9                   	leave  
9f00043a:	c3                   	ret    

9f00043b <atoiI>:
atoiI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:57

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoiI(char *str)
{
9f00043b:	55                   	push   ebp
9f00043c:	89 e5                	mov    ebp,esp
9f00043e:	83 ec 10             	sub    esp,0x10
9f000441:	e8 68 4c 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000446:	05 56 79 00 00       	add    eax,0x7956
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:58
    int res = 0; // Initialize result
9f00044b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f000452:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
9f000459:	eb 28                	jmp    9f000483 <atoiI+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:63 (discriminator 3)
        res = res*10 + str[i] - '0';
9f00045b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00045e:	89 d0                	mov    eax,edx
9f000460:	c1 e0 02             	shl    eax,0x2
9f000463:	01 d0                	add    eax,edx
9f000465:	01 c0                	add    eax,eax
9f000467:	89 c1                	mov    ecx,eax
9f000469:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f00046c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00046f:	01 d0                	add    eax,edx
9f000471:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000474:	0f be c0             	movsx  eax,al
9f000477:	01 c8                	add    eax,ecx
9f000479:	83 e8 30             	sub    eax,0x30
9f00047c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
9f00047f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:62 (discriminator 1)
9f000483:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f000486:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000489:	01 d0                	add    eax,edx
9f00048b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00048e:	84 c0                	test   al,al
9f000490:	75 c9                	jne    9f00045b <atoiI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:66
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
9f000492:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:67
}
9f000495:	c9                   	leave  
9f000496:	c3                   	ret    

9f000497 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:70

VISIBLE int atoi(char *str)
{
9f000497:	55                   	push   ebp
9f000498:	89 e5                	mov    ebp,esp
9f00049a:	e8 0f 4c 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00049f:	05 fd 78 00 00       	add    eax,0x78fd
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:71
    return atoiI(str);
9f0004a4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004a7:	e8 8f ff ff ff       	call   9f00043b <atoiI>
9f0004ac:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:72
}
9f0004af:	c9                   	leave  
9f0004b0:	c3                   	ret    
9f0004b1:	66 90                	xchg   ax,ax
9f0004b3:	90                   	nop

9f0004b4 <moveToXY>:
moveToXY():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:16
#include "ascii.h"

const char ansiEscSeq[3] =  {0x1b,0x5b,0};

VISIBLE void moveToXY(int x, int y)
{
9f0004b4:	55                   	push   ebp
9f0004b5:	89 e5                	mov    ebp,esp
9f0004b7:	53                   	push   ebx
9f0004b8:	83 ec 14             	sub    esp,0x14
9f0004bb:	e8 f2 4b 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0004c0:	81 c3 dc 78 00 00    	add    ebx,0x78dc
/home/yogi/src/os/aproj/libChrisOS/src/console.c:20
    char cmd[10];
    char xstr[3], ystr[3];
    
    strcpyI(cmd,ansiEscSeq);
9f0004c6:	83 ec 08             	sub    esp,0x8
9f0004c9:	8d 83 44 f6 ff ff    	lea    eax,[ebx-0x9bc]
9f0004cf:	50                   	push   eax
9f0004d0:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004d3:	50                   	push   eax
9f0004d4:	e8 4f 35 00 00       	call   9f003a28 <strcpyI>
9f0004d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:21
    itoaI(x,xstr);
9f0004dc:	83 ec 08             	sub    esp,0x8
9f0004df:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004e2:	50                   	push   eax
9f0004e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0004e6:	e8 93 fe ff ff       	call   9f00037e <itoaI>
9f0004eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:22
    strcatI(cmd,xstr);
9f0004ee:	83 ec 08             	sub    esp,0x8
9f0004f1:	8d 45 eb             	lea    eax,[ebp-0x15]
9f0004f4:	50                   	push   eax
9f0004f5:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0004f8:	50                   	push   eax
9f0004f9:	e8 98 33 00 00       	call   9f003896 <strcatI>
9f0004fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:23
    strcatI(cmd,";");
9f000501:	83 ec 08             	sub    esp,0x8
9f000504:	8d 83 47 f6 ff ff    	lea    eax,[ebx-0x9b9]
9f00050a:	50                   	push   eax
9f00050b:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00050e:	50                   	push   eax
9f00050f:	e8 82 33 00 00       	call   9f003896 <strcatI>
9f000514:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:24
    itoaI(y,ystr);
9f000517:	83 ec 08             	sub    esp,0x8
9f00051a:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00051d:	50                   	push   eax
9f00051e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000521:	e8 58 fe ff ff       	call   9f00037e <itoaI>
9f000526:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:25
    strcatI(cmd,ystr);
9f000529:	83 ec 08             	sub    esp,0x8
9f00052c:	8d 45 e8             	lea    eax,[ebp-0x18]
9f00052f:	50                   	push   eax
9f000530:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000533:	50                   	push   eax
9f000534:	e8 5d 33 00 00       	call   9f003896 <strcatI>
9f000539:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:26
    strcatI(cmd,"H");
9f00053c:	83 ec 08             	sub    esp,0x8
9f00053f:	8d 83 49 f6 ff ff    	lea    eax,[ebx-0x9b7]
9f000545:	50                   	push   eax
9f000546:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000549:	50                   	push   eax
9f00054a:	e8 47 33 00 00       	call   9f003896 <strcatI>
9f00054f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:28
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000552:	83 ec 08             	sub    esp,0x8
9f000555:	8d 45 ee             	lea    eax,[ebp-0x12]
9f000558:	50                   	push   eax
9f000559:	8d 83 4b f6 ff ff    	lea    eax,[ebx-0x9b5]
9f00055f:	50                   	push   eax
9f000560:	e8 94 10 00 00       	call   9f0015f9 <printfI>
9f000565:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:29
}
9f000568:	90                   	nop
9f000569:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00056c:	c9                   	leave  
9f00056d:	c3                   	ret    

9f00056e <saveCursorPosition>:
saveCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:32

VISIBLE void saveCursorPosition()
{
9f00056e:	55                   	push   ebp
9f00056f:	89 e5                	mov    ebp,esp
9f000571:	53                   	push   ebx
9f000572:	83 ec 14             	sub    esp,0x14
9f000575:	e8 38 4b 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f00057a:	81 c3 22 78 00 00    	add    ebx,0x7822
/home/yogi/src/os/aproj/libChrisOS/src/console.c:35
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f000580:	83 ec 08             	sub    esp,0x8
9f000583:	8d 83 44 f6 ff ff    	lea    eax,[ebx-0x9bc]
9f000589:	50                   	push   eax
9f00058a:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00058d:	50                   	push   eax
9f00058e:	e8 95 34 00 00       	call   9f003a28 <strcpyI>
9f000593:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:36
    strcatI(cmd,"s");
9f000596:	83 ec 08             	sub    esp,0x8
9f000599:	8d 83 4e f6 ff ff    	lea    eax,[ebx-0x9b2]
9f00059f:	50                   	push   eax
9f0005a0:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005a3:	50                   	push   eax
9f0005a4:	e8 ed 32 00 00       	call   9f003896 <strcatI>
9f0005a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:38
    //writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f0005ac:	83 ec 08             	sub    esp,0x8
9f0005af:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005b2:	50                   	push   eax
9f0005b3:	8d 83 4b f6 ff ff    	lea    eax,[ebx-0x9b5]
9f0005b9:	50                   	push   eax
9f0005ba:	e8 3a 10 00 00       	call   9f0015f9 <printfI>
9f0005bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:39
}
9f0005c2:	90                   	nop
9f0005c3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0005c6:	c9                   	leave  
9f0005c7:	c3                   	ret    

9f0005c8 <restoreCursorPosition>:
restoreCursorPosition():
/home/yogi/src/os/aproj/libChrisOS/src/console.c:42

VISIBLE void restoreCursorPosition()
{
9f0005c8:	55                   	push   ebp
9f0005c9:	89 e5                	mov    ebp,esp
9f0005cb:	53                   	push   ebx
9f0005cc:	83 ec 14             	sub    esp,0x14
9f0005cf:	e8 de 4a 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0005d4:	81 c3 c8 77 00 00    	add    ebx,0x77c8
/home/yogi/src/os/aproj/libChrisOS/src/console.c:45
    char cmd[10];
    
    strcpyI(cmd,ansiEscSeq);
9f0005da:	83 ec 08             	sub    esp,0x8
9f0005dd:	8d 83 44 f6 ff ff    	lea    eax,[ebx-0x9bc]
9f0005e3:	50                   	push   eax
9f0005e4:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005e7:	50                   	push   eax
9f0005e8:	e8 3b 34 00 00       	call   9f003a28 <strcpyI>
9f0005ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:46
    strcatI(cmd,"u");
9f0005f0:	83 ec 08             	sub    esp,0x8
9f0005f3:	8d 83 50 f6 ff ff    	lea    eax,[ebx-0x9b0]
9f0005f9:	50                   	push   eax
9f0005fa:	8d 45 ee             	lea    eax,[ebp-0x12]
9f0005fd:	50                   	push   eax
9f0005fe:	e8 93 32 00 00       	call   9f003896 <strcatI>
9f000603:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:48
//    writeI((void*)1, cmd, strlenI(cmd),1);
    printfI("%s",cmd);
9f000606:	83 ec 08             	sub    esp,0x8
9f000609:	8d 45 ee             	lea    eax,[ebp-0x12]
9f00060c:	50                   	push   eax
9f00060d:	8d 83 4b f6 ff ff    	lea    eax,[ebx-0x9b5]
9f000613:	50                   	push   eax
9f000614:	e8 e0 0f 00 00       	call   9f0015f9 <printfI>
9f000619:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/console.c:49
}
9f00061c:	90                   	nop
9f00061d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000620:	c9                   	leave  
9f000621:	c3                   	ret    
9f000622:	66 90                	xchg   ax,ax

9f000624 <getenvI>:
getenvI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "common.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
9f000624:	55                   	push   ebp
9f000625:	89 e5                	mov    ebp,esp
9f000627:	53                   	push   ebx
9f000628:	83 ec 14             	sub    esp,0x14
9f00062b:	e8 82 4a 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f000630:	81 c3 6c 77 00 00    	add    ebx,0x776c
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
9f000636:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f00063d:	eb 7b                	jmp    9f0006ba <getenvI+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f00063f:	83 ec 0c             	sub    esp,0xc
9f000642:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000645:	e8 f2 34 00 00       	call   9f003b3c <strlenI>
9f00064a:	83 c4 10             	add    esp,0x10
9f00064d:	89 c1                	mov    ecx,eax
9f00064f:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000655:	8b 00                	mov    eax,DWORD PTR [eax]
9f000657:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00065a:	c1 e2 02             	shl    edx,0x2
9f00065d:	01 d0                	add    eax,edx
9f00065f:	8b 00                	mov    eax,DWORD PTR [eax]
9f000661:	83 ec 04             	sub    esp,0x4
9f000664:	51                   	push   ecx
9f000665:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000668:	50                   	push   eax
9f000669:	e8 d9 35 00 00       	call   9f003c47 <strncmpI>
9f00066e:	83 c4 10             	add    esp,0x10
9f000671:	85 c0                	test   eax,eax
9f000673:	75 41                	jne    9f0006b6 <getenvI+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
9f000675:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00067b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00067d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f000680:	c1 e2 02             	shl    edx,0x2
9f000683:	01 d0                	add    eax,edx
9f000685:	8b 00                	mov    eax,DWORD PTR [eax]
9f000687:	83 ec 08             	sub    esp,0x8
9f00068a:	8d 93 52 f6 ff ff    	lea    edx,[ebx-0x9ae]
9f000690:	52                   	push   edx
9f000691:	50                   	push   eax
9f000692:	e8 7b 3c 00 00       	call   9f004312 <strstrI>
9f000697:	83 c4 10             	add    esp,0x10
9f00069a:	83 c0 01             	add    eax,0x1
9f00069d:	83 ec 04             	sub    esp,0x4
9f0006a0:	6a 32                	push   0x32
9f0006a2:	50                   	push   eax
9f0006a3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0006a6:	e8 05 36 00 00       	call   9f003cb0 <strncpyI>
9f0006ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
9f0006ae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0006b1:	83 c0 01             	add    eax,0x1
9f0006b4:	eb 13                	jmp    9f0006c9 <getenvI+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "common.h"
#include "strings.h"

int getenvI(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
9f0006b6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
9f0006ba:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
9f0006be:	0f 8e 7b ff ff ff    	jle    9f00063f <getenvI+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
9f0006c4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
9f0006c9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0006cc:	c9                   	leave  
9f0006cd:	c3                   	ret    

9f0006ce <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE int getenv(char *varname, char *value)
{
9f0006ce:	55                   	push   ebp
9f0006cf:	89 e5                	mov    ebp,esp
9f0006d1:	83 ec 08             	sub    esp,0x8
9f0006d4:	e8 d5 49 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0006d9:	05 c3 76 00 00       	add    eax,0x76c3
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    return getenvI(varname, value);
9f0006de:	83 ec 08             	sub    esp,0x8
9f0006e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0006e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0006e7:	e8 38 ff ff ff       	call   9f000624 <getenvI>
9f0006ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:23
}
9f0006ef:	c9                   	leave  
9f0006f0:	c3                   	ret    

9f0006f1 <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:26

VISIBLE void  setenv(char *varname, char *value)
{
9f0006f1:	55                   	push   ebp
9f0006f2:	89 e5                	mov    ebp,esp
9f0006f4:	53                   	push   ebx
9f0006f5:	83 ec 14             	sub    esp,0x14
9f0006f8:	e8 b5 49 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0006fd:	81 c3 9f 76 00 00    	add    ebx,0x769f
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
    uint32_t lastPopulated = 0;
9f000703:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29
    
    for (int cnt=0;cnt<100;cnt++)
9f00070a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000711:	e9 d5 00 00 00       	jmp    9f0007eb <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
        if (processEnvp[cnt]!=0)
9f000716:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00071c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00071e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000721:	c1 e2 02             	shl    edx,0x2
9f000724:	01 d0                	add    eax,edx
9f000726:	8b 00                	mov    eax,DWORD PTR [eax]
9f000728:	85 c0                	test   eax,eax
9f00072a:	0f 84 b7 00 00 00    	je     9f0007e7 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
9f000730:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000736:	8b 00                	mov    eax,DWORD PTR [eax]
9f000738:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00073b:	c1 e2 02             	shl    edx,0x2
9f00073e:	01 d0                	add    eax,edx
9f000740:	8b 00                	mov    eax,DWORD PTR [eax]
9f000742:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
9f000745:	83 ec 0c             	sub    esp,0xc
9f000748:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00074b:	e8 ec 33 00 00       	call   9f003b3c <strlenI>
9f000750:	83 c4 10             	add    esp,0x10
9f000753:	89 c1                	mov    ecx,eax
9f000755:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00075b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00075d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000760:	c1 e2 02             	shl    edx,0x2
9f000763:	01 d0                	add    eax,edx
9f000765:	8b 00                	mov    eax,DWORD PTR [eax]
9f000767:	83 ec 04             	sub    esp,0x4
9f00076a:	51                   	push   ecx
9f00076b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00076e:	50                   	push   eax
9f00076f:	e8 d3 34 00 00       	call   9f003c47 <strncmpI>
9f000774:	83 c4 10             	add    esp,0x10
9f000777:	85 c0                	test   eax,eax
9f000779:	75 6c                	jne    9f0007e7 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:35
            {
                strcpyI(processEnvp[cnt],varname);
9f00077b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000781:	8b 00                	mov    eax,DWORD PTR [eax]
9f000783:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f000786:	c1 e2 02             	shl    edx,0x2
9f000789:	01 d0                	add    eax,edx
9f00078b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00078d:	83 ec 08             	sub    esp,0x8
9f000790:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000793:	50                   	push   eax
9f000794:	e8 8f 32 00 00       	call   9f003a28 <strcpyI>
9f000799:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
9f00079c:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007a2:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007a4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007a7:	c1 e2 02             	shl    edx,0x2
9f0007aa:	01 d0                	add    eax,edx
9f0007ac:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007ae:	83 ec 08             	sub    esp,0x8
9f0007b1:	8d 93 52 f6 ff ff    	lea    edx,[ebx-0x9ae]
9f0007b7:	52                   	push   edx
9f0007b8:	50                   	push   eax
9f0007b9:	e8 d8 30 00 00       	call   9f003896 <strcatI>
9f0007be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
                strcatI(processEnvp[cnt],value);
9f0007c1:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0007c7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007c9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0007cc:	c1 e2 02             	shl    edx,0x2
9f0007cf:	01 d0                	add    eax,edx
9f0007d1:	8b 00                	mov    eax,DWORD PTR [eax]
9f0007d3:	83 ec 08             	sub    esp,0x8
9f0007d6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0007d9:	50                   	push   eax
9f0007da:	e8 b7 30 00 00       	call   9f003896 <strcatI>
9f0007df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:38
                return;
9f0007e2:	e9 c6 00 00 00       	jmp    9f0008ad <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
9f0007e7:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:29 (discriminator 1)
9f0007eb:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
9f0007ef:	0f 8e 21 ff ff ff    	jle    9f000716 <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f0007f5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f0007fc:	e9 a2 00 00 00       	jmp    9f0008a3 <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
        if (processEnvp[cnt]==0)
9f000801:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000807:	8b 00                	mov    eax,DWORD PTR [eax]
9f000809:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00080c:	c1 e2 02             	shl    edx,0x2
9f00080f:	01 d0                	add    eax,edx
9f000811:	8b 00                	mov    eax,DWORD PTR [eax]
9f000813:	85 c0                	test   eax,eax
9f000815:	0f 85 84 00 00 00    	jne    9f00089f <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:44
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
9f00081b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000821:	8b 00                	mov    eax,DWORD PTR [eax]
9f000823:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000826:	c1 e2 02             	shl    edx,0x2
9f000829:	01 d0                	add    eax,edx
9f00082b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00082e:	81 c2 00 02 00 00    	add    edx,0x200
9f000834:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:45
            strcpyI(processEnvp[cnt],varname);
9f000836:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00083c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00083e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000841:	c1 e2 02             	shl    edx,0x2
9f000844:	01 d0                	add    eax,edx
9f000846:	8b 00                	mov    eax,DWORD PTR [eax]
9f000848:	83 ec 08             	sub    esp,0x8
9f00084b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00084e:	50                   	push   eax
9f00084f:	e8 d4 31 00 00       	call   9f003a28 <strcpyI>
9f000854:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:46
            strcatI(processEnvp[cnt],"=");
9f000857:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f00085d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00085f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000862:	c1 e2 02             	shl    edx,0x2
9f000865:	01 d0                	add    eax,edx
9f000867:	8b 00                	mov    eax,DWORD PTR [eax]
9f000869:	83 ec 08             	sub    esp,0x8
9f00086c:	8d 93 52 f6 ff ff    	lea    edx,[ebx-0x9ae]
9f000872:	52                   	push   edx
9f000873:	50                   	push   eax
9f000874:	e8 1d 30 00 00       	call   9f003896 <strcatI>
9f000879:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
9f00087c:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f000882:	8b 00                	mov    eax,DWORD PTR [eax]
9f000884:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f000887:	c1 e2 02             	shl    edx,0x2
9f00088a:	01 d0                	add    eax,edx
9f00088c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00088e:	83 ec 08             	sub    esp,0x8
9f000891:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000894:	50                   	push   eax
9f000895:	e8 fc 2f 00 00       	call   9f003896 <strcatI>
9f00089a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:48
            return;
9f00089d:	eb 0e                	jmp    9f0008ad <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
9f00089f:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41 (discriminator 1)
9f0008a3:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
9f0008a7:	0f 8e 54 ff ff ff    	jle    9f000801 <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:52
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
9f0008ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008b0:	c9                   	leave  
9f0008b1:	c3                   	ret    

9f0008b2 <getcwdI>:
getcwdI():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:55

char* getcwdI(char* buf, size_t size)
{
9f0008b2:	55                   	push   ebp
9f0008b3:	89 e5                	mov    ebp,esp
9f0008b5:	53                   	push   ebx
9f0008b6:	83 ec 04             	sub    esp,0x4
9f0008b9:	e8 f0 47 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0008be:	05 de 74 00 00       	add    eax,0x74de
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:56
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
9f0008c3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0008c6:	83 ec 04             	sub    esp,0x4
9f0008c9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008cc:	52                   	push   edx
9f0008cd:	6a 4f                	push   0x4f
9f0008cf:	89 c3                	mov    ebx,eax
9f0008d1:	e8 c8 0a 00 00       	call   9f00139e <do_syscall2>
9f0008d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:58
    
}
9f0008d9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0008dc:	c9                   	leave  
9f0008dd:	c3                   	ret    

9f0008de <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:61

VISIBLE char* getcwd(char* buf, size_t size)
{
9f0008de:	55                   	push   ebp
9f0008df:	89 e5                	mov    ebp,esp
9f0008e1:	83 ec 08             	sub    esp,0x8
9f0008e4:	e8 c5 47 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0008e9:	05 b3 74 00 00       	add    eax,0x74b3
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:62
    return getcwdI(buf,size);
9f0008ee:	83 ec 08             	sub    esp,0x8
9f0008f1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0008f4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0008f7:	e8 b6 ff ff ff       	call   9f0008b2 <getcwdI>
9f0008fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:63
}
9f0008ff:	c9                   	leave  
9f000900:	c3                   	ret    
9f000901:	66 90                	xchg   ax,ax
9f000903:	90                   	nop

9f000904 <getdirI>:
getdirI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:19
    char *resolvePath_inPath;
    char *resolvePath_resPath;
    char *resolvePath_cwd;

int getdirI(char* path, direntry_t *entries, int bufferCount)
{
9f000904:	55                   	push   ebp
9f000905:	89 e5                	mov    ebp,esp
9f000907:	53                   	push   ebx
9f000908:	83 ec 04             	sub    esp,0x4
9f00090b:	e8 9e 47 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000910:	05 8c 74 00 00       	add    eax,0x748c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)entries, bufferCount);
9f000915:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000918:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00091b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00091e:	53                   	push   ebx
9f00091f:	51                   	push   ecx
9f000920:	52                   	push   edx
9f000921:	68 04 03 00 00       	push   0x304
9f000926:	89 c3                	mov    ebx,eax
9f000928:	e8 35 0a 00 00       	call   9f001362 <do_syscall3>
9f00092d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
    
}
9f000930:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000933:	c9                   	leave  
9f000934:	c3                   	ret    

9f000935 <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:24
VISIBLE int getdir(char* path, direntry_t *entries, int bufferCount)
{
9f000935:	55                   	push   ebp
9f000936:	89 e5                	mov    ebp,esp
9f000938:	83 ec 08             	sub    esp,0x8
9f00093b:	e8 6e 47 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000940:	05 5c 74 00 00       	add    eax,0x745c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25
    return getdirI(path, entries, bufferCount);
9f000945:	83 ec 04             	sub    esp,0x4
9f000948:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f00094b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00094e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000951:	e8 ae ff ff ff       	call   9f000904 <getdirI>
9f000956:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
}
9f000959:	c9                   	leave  
9f00095a:	c3                   	ret    

9f00095b <openI>:
openI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:29

void* openI(char* path, const char* mode)
{
9f00095b:	55                   	push   ebp
9f00095c:	89 e5                	mov    ebp,esp
9f00095e:	53                   	push   ebx
9f00095f:	83 ec 04             	sub    esp,0x4
9f000962:	e8 47 47 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000967:	05 35 74 00 00       	add    eax,0x7435
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31
    //NOTE: Using syscall3 and passing -1 as 3rd parameter, otherwise param3 will be 0 and syscall will think freopen is calling!
    return (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode,-1);
9f00096c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f00096f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000972:	6a ff                	push   0xffffffff
9f000974:	51                   	push   ecx
9f000975:	52                   	push   edx
9f000976:	6a 02                	push   0x2
9f000978:	89 c3                	mov    ebx,eax
9f00097a:	e8 e3 09 00 00       	call   9f001362 <do_syscall3>
9f00097f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
}
9f000982:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000985:	c9                   	leave  
9f000986:	c3                   	ret    

9f000987 <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:35

VISIBLE void* open(char* path, const char* mode)
{
9f000987:	55                   	push   ebp
9f000988:	89 e5                	mov    ebp,esp
9f00098a:	83 ec 08             	sub    esp,0x8
9f00098d:	e8 1c 47 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000992:	05 0a 74 00 00       	add    eax,0x740a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:36
    return openI(path, mode);
9f000997:	83 ec 08             	sub    esp,0x8
9f00099a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00099d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0009a0:	e8 b6 ff ff ff       	call   9f00095b <openI>
9f0009a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:37
}
9f0009a8:	c9                   	leave  
9f0009a9:	c3                   	ret    

9f0009aa <file_cleanup>:
file_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:40

void file_cleanup()
{
9f0009aa:	55                   	push   ebp
9f0009ab:	89 e5                	mov    ebp,esp
9f0009ad:	53                   	push   ebx
9f0009ae:	83 ec 04             	sub    esp,0x4
9f0009b1:	e8 fc 46 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0009b6:	81 c3 e6 73 00 00    	add    ebx,0x73e6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    while (filesToClose)
9f0009bc:	eb 1f                	jmp    9f0009dd <file_cleanup+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:42
        closeI(filesToClose++);
9f0009be:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009c4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009c6:	8d 48 04             	lea    ecx,[eax+0x4]
9f0009c9:	8b 93 d8 ff ff ff    	mov    edx,DWORD PTR [ebx-0x28]
9f0009cf:	89 0a                	mov    DWORD PTR [edx],ecx
9f0009d1:	83 ec 0c             	sub    esp,0xc
9f0009d4:	50                   	push   eax
9f0009d5:	e8 bc 00 00 00       	call   9f000a96 <closeI>
9f0009da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:41
    return openI(path, mode);
}

void file_cleanup()
{
    while (filesToClose)
9f0009dd:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009e3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009e5:	85 c0                	test   eax,eax
9f0009e7:	75 d5                	jne    9f0009be <file_cleanup+0x14>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:43
        closeI(filesToClose++);
    freeI(filesToClose);
9f0009e9:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f0009ef:	8b 00                	mov    eax,DWORD PTR [eax]
9f0009f1:	83 ec 0c             	sub    esp,0xc
9f0009f4:	50                   	push   eax
9f0009f5:	e8 f1 17 00 00       	call   9f0021eb <freeI>
9f0009fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:44
}
9f0009fd:	90                   	nop
9f0009fe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000a01:	c9                   	leave  
9f000a02:	c3                   	ret    

9f000a03 <freopen>:
freopen():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:47

VISIBLE void* freopen(char* path, const char* mode, void *stream)
{
9f000a03:	55                   	push   ebp
9f000a04:	89 e5                	mov    ebp,esp
9f000a06:	56                   	push   esi
9f000a07:	53                   	push   ebx
9f000a08:	83 ec 10             	sub    esp,0x10
9f000a0b:	e8 a2 46 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f000a10:	81 c3 8c 73 00 00    	add    ebx,0x738c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:48
    void *retVal=0;
9f000a16:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:49
    retVal = (void*)do_syscall3(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode, (uint32_t)stream);
9f000a1d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f000a20:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f000a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000a26:	51                   	push   ecx
9f000a27:	52                   	push   edx
9f000a28:	50                   	push   eax
9f000a29:	6a 02                	push   0x2
9f000a2b:	e8 32 09 00 00       	call   9f001362 <do_syscall3>
9f000a30:	83 c4 10             	add    esp,0x10
9f000a33:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:50
    if (retVal==NULL)
9f000a36:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000a3a:	75 07                	jne    9f000a43 <freopen+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:51
        return (void*)-1;
9f000a3c:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f000a41:	eb 4c                	jmp    9f000a8f <freopen+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:52
    if (filesToClose==NULL)
9f000a43:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000a49:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a4b:	85 c0                	test   eax,eax
9f000a4d:	75 17                	jne    9f000a66 <freopen+0x63>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:54
    {
        filesToClose=mallocI(sizeof(uintptr_t)*25);
9f000a4f:	83 ec 0c             	sub    esp,0xc
9f000a52:	6a 64                	push   0x64
9f000a54:	e8 14 19 00 00       	call   9f00236d <mallocI>
9f000a59:	83 c4 10             	add    esp,0x10
9f000a5c:	89 c2                	mov    edx,eax
9f000a5e:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000a64:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:56
    }
    filesToClose[filesToCloseCount++]=(uintptr_t)retVal;
9f000a66:	8b 83 d8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x28]
9f000a6c:	8b 30                	mov    esi,DWORD PTR [eax]
9f000a6e:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f000a74:	8b 00                	mov    eax,DWORD PTR [eax]
9f000a76:	8d 48 01             	lea    ecx,[eax+0x1]
9f000a79:	8b 93 d0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x30]
9f000a7f:	89 0a                	mov    DWORD PTR [edx],ecx
9f000a81:	c1 e0 02             	shl    eax,0x2
9f000a84:	8d 14 06             	lea    edx,[esi+eax*1]
9f000a87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f000a8a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:57
    return retVal;
9f000a8c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:58
}
9f000a8f:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000a92:	5b                   	pop    ebx
9f000a93:	5e                   	pop    esi
9f000a94:	5d                   	pop    ebp
9f000a95:	c3                   	ret    

9f000a96 <closeI>:
closeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:61

void closeI(void* handle)
{
9f000a96:	55                   	push   ebp
9f000a97:	89 e5                	mov    ebp,esp
9f000a99:	53                   	push   ebx
9f000a9a:	83 ec 04             	sub    esp,0x4
9f000a9d:	e8 0c 46 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000aa2:	05 fa 72 00 00       	add    eax,0x72fa
/home/yogi/src/os/aproj/libChrisOS/src/file.c:62
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
9f000aa7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000aaa:	83 ec 08             	sub    esp,0x8
9f000aad:	52                   	push   edx
9f000aae:	6a 03                	push   0x3
9f000ab0:	89 c3                	mov    ebx,eax
9f000ab2:	e8 25 09 00 00       	call   9f0013dc <do_syscall1>
9f000ab7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:63
}
9f000aba:	90                   	nop
9f000abb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000abe:	c9                   	leave  
9f000abf:	c3                   	ret    

9f000ac0 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:66

VISIBLE void close(void* handle)
{
9f000ac0:	55                   	push   ebp
9f000ac1:	89 e5                	mov    ebp,esp
9f000ac3:	83 ec 08             	sub    esp,0x8
9f000ac6:	e8 e3 45 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000acb:	05 d1 72 00 00       	add    eax,0x72d1
/home/yogi/src/os/aproj/libChrisOS/src/file.c:67
    return closeI(handle);
9f000ad0:	83 ec 0c             	sub    esp,0xc
9f000ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000ad6:	e8 bb ff ff ff       	call   9f000a96 <closeI>
9f000adb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:68
}
9f000ade:	c9                   	leave  
9f000adf:	c3                   	ret    

9f000ae0 <readI>:
readI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:71

int readI(void* handle, void *buffer, int size, int length)
{
9f000ae0:	55                   	push   ebp
9f000ae1:	89 e5                	mov    ebp,esp
9f000ae3:	56                   	push   esi
9f000ae4:	53                   	push   ebx
9f000ae5:	e8 c4 45 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000aea:	05 b2 72 00 00       	add    eax,0x72b2
/home/yogi/src/os/aproj/libChrisOS/src/file.c:72
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000aef:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000af2:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000af5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000af8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000afb:	83 ec 0c             	sub    esp,0xc
9f000afe:	56                   	push   esi
9f000aff:	53                   	push   ebx
9f000b00:	51                   	push   ecx
9f000b01:	52                   	push   edx
9f000b02:	6a 04                	push   0x4
9f000b04:	89 c3                	mov    ebx,eax
9f000b06:	e8 1d 08 00 00       	call   9f001328 <do_syscall4>
9f000b0b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:73
}
9f000b0e:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000b11:	5b                   	pop    ebx
9f000b12:	5e                   	pop    esi
9f000b13:	5d                   	pop    ebp
9f000b14:	c3                   	ret    

9f000b15 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:76

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
9f000b15:	55                   	push   ebp
9f000b16:	89 e5                	mov    ebp,esp
9f000b18:	83 ec 08             	sub    esp,0x8
9f000b1b:	e8 8e 45 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000b20:	05 7c 72 00 00       	add    eax,0x727c
/home/yogi/src/os/aproj/libChrisOS/src/file.c:77
    return readI(handle, buffer, size, length);
9f000b25:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000b28:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b2b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b2e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b31:	e8 aa ff ff ff       	call   9f000ae0 <readI>
9f000b36:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:78
}
9f000b39:	c9                   	leave  
9f000b3a:	c3                   	ret    

9f000b3b <writeI>:
writeI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:80
int writeI(void* handle, void *buffer, int size, int length)
{
9f000b3b:	55                   	push   ebp
9f000b3c:	89 e5                	mov    ebp,esp
9f000b3e:	56                   	push   esi
9f000b3f:	53                   	push   ebx
9f000b40:	e8 69 45 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000b45:	05 57 72 00 00       	add    eax,0x7257
/home/yogi/src/os/aproj/libChrisOS/src/file.c:81
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
9f000b4a:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
9f000b4d:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000b50:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000b53:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000b56:	83 ec 0c             	sub    esp,0xc
9f000b59:	56                   	push   esi
9f000b5a:	53                   	push   ebx
9f000b5b:	51                   	push   ecx
9f000b5c:	52                   	push   edx
9f000b5d:	6a 05                	push   0x5
9f000b5f:	89 c3                	mov    ebx,eax
9f000b61:	e8 c2 07 00 00       	call   9f001328 <do_syscall4>
9f000b66:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:82
}
9f000b69:	8d 65 f8             	lea    esp,[ebp-0x8]
9f000b6c:	5b                   	pop    ebx
9f000b6d:	5e                   	pop    esi
9f000b6e:	5d                   	pop    ebp
9f000b6f:	c3                   	ret    

9f000b70 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:85

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
9f000b70:	55                   	push   ebp
9f000b71:	89 e5                	mov    ebp,esp
9f000b73:	83 ec 08             	sub    esp,0x8
9f000b76:	e8 33 45 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000b7b:	05 21 72 00 00       	add    eax,0x7221
/home/yogi/src/os/aproj/libChrisOS/src/file.c:86
    return writeI(handle, buffer, size, length);
9f000b80:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f000b83:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000b86:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000b89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000b8c:	e8 aa ff ff ff       	call   9f000b3b <writeI>
9f000b91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:87
}
9f000b94:	c9                   	leave  
9f000b95:	c3                   	ret    

9f000b96 <seekI>:
seekI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:90

int seekI(void* handle, long position, int whence)
{
9f000b96:	55                   	push   ebp
9f000b97:	89 e5                	mov    ebp,esp
9f000b99:	53                   	push   ebx
9f000b9a:	83 ec 04             	sub    esp,0x4
9f000b9d:	e8 0c 45 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000ba2:	05 fa 71 00 00       	add    eax,0x71fa
/home/yogi/src/os/aproj/libChrisOS/src/file.c:91
    return do_syscall3(SYSCALL_SEEK, (uint32_t)handle, position, whence);
9f000ba7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f000baa:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000bad:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000bb0:	53                   	push   ebx
9f000bb1:	51                   	push   ecx
9f000bb2:	52                   	push   edx
9f000bb3:	6a 0b                	push   0xb
9f000bb5:	89 c3                	mov    ebx,eax
9f000bb7:	e8 a6 07 00 00       	call   9f001362 <do_syscall3>
9f000bbc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:92
}
9f000bbf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000bc2:	c9                   	leave  
9f000bc3:	c3                   	ret    

9f000bc4 <seek>:
seek():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:95

VISIBLE int seek(void* handle, long position, int whence)
{
9f000bc4:	55                   	push   ebp
9f000bc5:	89 e5                	mov    ebp,esp
9f000bc7:	83 ec 08             	sub    esp,0x8
9f000bca:	e8 df 44 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000bcf:	05 cd 71 00 00       	add    eax,0x71cd
/home/yogi/src/os/aproj/libChrisOS/src/file.c:96
    return seekI(handle, position, whence);
9f000bd4:	83 ec 04             	sub    esp,0x4
9f000bd7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000bda:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000bdd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000be0:	e8 b1 ff ff ff       	call   9f000b96 <seekI>
9f000be5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:97
}
9f000be8:	c9                   	leave  
9f000be9:	c3                   	ret    

9f000bea <statI>:
statI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:99
int statI(char *path, fstat_t *stat)
{
9f000bea:	55                   	push   ebp
9f000beb:	89 e5                	mov    ebp,esp
9f000bed:	53                   	push   ebx
9f000bee:	83 ec 04             	sub    esp,0x4
9f000bf1:	e8 b8 44 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000bf6:	05 a6 71 00 00       	add    eax,0x71a6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:100
    return do_syscall2(SYSCALL_STAT, (uint32_t)path, (uint32_t)stat);
9f000bfb:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f000bfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000c01:	83 ec 04             	sub    esp,0x4
9f000c04:	51                   	push   ecx
9f000c05:	52                   	push   edx
9f000c06:	6a 0a                	push   0xa
9f000c08:	89 c3                	mov    ebx,eax
9f000c0a:	e8 8f 07 00 00       	call   9f00139e <do_syscall2>
9f000c0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:101
}
9f000c12:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000c15:	c9                   	leave  
9f000c16:	c3                   	ret    

9f000c17 <stat>:
stat():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:104

VISIBLE int stat(char *path, fstat_t *stat)
{
9f000c17:	55                   	push   ebp
9f000c18:	89 e5                	mov    ebp,esp
9f000c1a:	83 ec 08             	sub    esp,0x8
9f000c1d:	e8 8c 44 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000c22:	05 7a 71 00 00       	add    eax,0x717a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:105
    return statI(path, stat);
9f000c27:	83 ec 08             	sub    esp,0x8
9f000c2a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000c2d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000c30:	e8 b5 ff ff ff       	call   9f000bea <statI>
9f000c35:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:106
}
9f000c38:	c9                   	leave  
9f000c39:	c3                   	ret    

9f000c3a <resolvePath>:
resolvePath():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:109

VISIBLE int resolvePath(const char *inPath, char *outPath, bool usePathVariable)
{
9f000c3a:	55                   	push   ebp
9f000c3b:	89 e5                	mov    ebp,esp
9f000c3d:	53                   	push   ebx
9f000c3e:	83 ec 34             	sub    esp,0x34
9f000c41:	e8 6c 44 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f000c46:	81 c3 56 71 00 00    	add    ebx,0x7156
9f000c4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f000c4f:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/aproj/libChrisOS/src/file.c:110
    char delim[2]=":";
9f000c52:	66 c7 45 e6 3a 00    	mov    WORD PTR [ebp-0x1a],0x3a
/home/yogi/src/os/aproj/libChrisOS/src/file.c:112
    char *token;
    int retVal=-1;
9f000c58:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:115
    fstat_t fstat;
    
    if (!resolvePath_envPath)
9f000c5f:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000c65:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c67:	85 c0                	test   eax,eax
9f000c69:	75 1a                	jne    9f000c85 <resolvePath+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:116
        resolvePath_envPath=mallocI(1024);
9f000c6b:	83 ec 0c             	sub    esp,0xc
9f000c6e:	68 00 04 00 00       	push   0x400
9f000c73:	e8 f5 16 00 00       	call   9f00236d <mallocI>
9f000c78:	83 c4 10             	add    esp,0x10
9f000c7b:	89 c2                	mov    edx,eax
9f000c7d:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000c83:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:117
    if (!resolvePath_cwd)
9f000c85:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000c8b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000c8d:	85 c0                	test   eax,eax
9f000c8f:	75 1a                	jne    9f000cab <resolvePath+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:118
        resolvePath_cwd=mallocI(1024);
9f000c91:	83 ec 0c             	sub    esp,0xc
9f000c94:	68 00 04 00 00       	push   0x400
9f000c99:	e8 cf 16 00 00       	call   9f00236d <mallocI>
9f000c9e:	83 c4 10             	add    esp,0x10
9f000ca1:	89 c2                	mov    edx,eax
9f000ca3:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000ca9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:119
    if (!resolvePath_inPath)
9f000cab:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000cb1:	8b 00                	mov    eax,DWORD PTR [eax]
9f000cb3:	85 c0                	test   eax,eax
9f000cb5:	75 1a                	jne    9f000cd1 <resolvePath+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:120
            resolvePath_inPath=mallocI(1024);
9f000cb7:	83 ec 0c             	sub    esp,0xc
9f000cba:	68 00 04 00 00       	push   0x400
9f000cbf:	e8 a9 16 00 00       	call   9f00236d <mallocI>
9f000cc4:	83 c4 10             	add    esp,0x10
9f000cc7:	89 c2                	mov    edx,eax
9f000cc9:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000ccf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:121
    if (!resolvePath_resPath)
9f000cd1:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000cd7:	8b 00                	mov    eax,DWORD PTR [eax]
9f000cd9:	85 c0                	test   eax,eax
9f000cdb:	75 1a                	jne    9f000cf7 <resolvePath+0xbd>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:122
        resolvePath_resPath=mallocI(1024);
9f000cdd:	83 ec 0c             	sub    esp,0xc
9f000ce0:	68 00 04 00 00       	push   0x400
9f000ce5:	e8 83 16 00 00       	call   9f00236d <mallocI>
9f000cea:	83 c4 10             	add    esp,0x10
9f000ced:	89 c2                	mov    edx,eax
9f000cef:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000cf5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:127

    //using the PATH variable, attempt to resolve the path to an executable when a path isn't given in the commandline
    
    //If there is a / character in the path, then don't attempt to resolve
    if (usePathVariable)
9f000cf7:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
9f000cfb:	74 1d                	je     9f000d1a <resolvePath+0xe0>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:128
        getenvI("PATH",resolvePath_envPath);
9f000cfd:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000d03:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d05:	83 ec 08             	sub    esp,0x8
9f000d08:	50                   	push   eax
9f000d09:	8d 83 54 f6 ff ff    	lea    eax,[ebx-0x9ac]
9f000d0f:	50                   	push   eax
9f000d10:	e8 0f f9 ff ff       	call   9f000624 <getenvI>
9f000d15:	83 c4 10             	add    esp,0x10
9f000d18:	eb 0b                	jmp    9f000d25 <resolvePath+0xeb>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:130
    else
        resolvePath_envPath[0]='\0';
9f000d1a:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000d20:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d22:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:132

    getcwdI(resolvePath_cwd,1024);
9f000d25:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000d2b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d2d:	83 ec 08             	sub    esp,0x8
9f000d30:	68 00 04 00 00       	push   0x400
9f000d35:	50                   	push   eax
9f000d36:	e8 77 fb ff ff       	call   9f0008b2 <getcwdI>
9f000d3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:134
    
    if (strstrI(inPath, "/"))
9f000d3e:	83 ec 08             	sub    esp,0x8
9f000d41:	8d 83 59 f6 ff ff    	lea    eax,[ebx-0x9a7]
9f000d47:	50                   	push   eax
9f000d48:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d4b:	e8 c2 35 00 00       	call   9f004312 <strstrI>
9f000d50:	83 c4 10             	add    esp,0x10
9f000d53:	85 c0                	test   eax,eax
9f000d55:	74 53                	je     9f000daa <resolvePath+0x170>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:136
    {
        if (*inPath!='/')
9f000d57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000d5a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000d5d:	3c 2f                	cmp    al,0x2f
9f000d5f:	74 2c                	je     9f000d8d <resolvePath+0x153>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:138
        {
            strcpyI(outPath,resolvePath_cwd);
9f000d61:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000d67:	8b 00                	mov    eax,DWORD PTR [eax]
9f000d69:	83 ec 08             	sub    esp,0x8
9f000d6c:	50                   	push   eax
9f000d6d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d70:	e8 b3 2c 00 00       	call   9f003a28 <strcpyI>
9f000d75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:139
            strcatI(outPath,"/");
9f000d78:	83 ec 08             	sub    esp,0x8
9f000d7b:	8d 83 59 f6 ff ff    	lea    eax,[ebx-0x9a7]
9f000d81:	50                   	push   eax
9f000d82:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d85:	e8 0c 2b 00 00       	call   9f003896 <strcatI>
9f000d8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:141
        }
        strcatI(outPath,inPath);
9f000d8d:	83 ec 08             	sub    esp,0x8
9f000d90:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000d93:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000d96:	e8 fb 2a 00 00       	call   9f003896 <strcatI>
9f000d9b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:142
        retVal=0;
9f000d9e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
9f000da5:	e9 b1 01 00 00       	jmp    9f000f5b <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:146
    }
    else
    {
        strcpyI(resolvePath_inPath,inPath);
9f000daa:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
9f000db0:	8b 00                	mov    eax,DWORD PTR [eax]
9f000db2:	83 ec 08             	sub    esp,0x8
9f000db5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000db8:	50                   	push   eax
9f000db9:	e8 6a 2c 00 00       	call   9f003a28 <strcpyI>
9f000dbe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:147
        if (resolvePath_envPath[0])
9f000dc1:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000dc7:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dc9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f000dcc:	84 c0                	test   al,al
9f000dce:	74 20                	je     9f000df0 <resolvePath+0x1b6>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:148
            token=strtokI(resolvePath_envPath,delim);
9f000dd0:	8b 83 c8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x38]
9f000dd6:	8b 00                	mov    eax,DWORD PTR [eax]
9f000dd8:	83 ec 08             	sub    esp,0x8
9f000ddb:	8d 55 e6             	lea    edx,[ebp-0x1a]
9f000dde:	52                   	push   edx
9f000ddf:	50                   	push   eax
9f000de0:	e8 37 f3 ff ff       	call   9f00011c <strtokI>
9f000de5:	83 c4 10             	add    esp,0x10
9f000de8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f000deb:	e9 c9 00 00 00       	jmp    9f000eb9 <resolvePath+0x27f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:150
        else
            token=NULL;
9f000df0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        while (token!=NULL)
9f000df7:	e9 bd 00 00 00       	jmp    9f000eb9 <resolvePath+0x27f>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:153
        {
            strcpyI(resolvePath_resPath,token);
9f000dfc:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e02:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e04:	83 ec 08             	sub    esp,0x8
9f000e07:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f000e0a:	50                   	push   eax
9f000e0b:	e8 18 2c 00 00       	call   9f003a28 <strcpyI>
9f000e10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:154
            if (strcmpI(resolvePath_resPath,"/")!=0)
9f000e13:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e19:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e1b:	83 ec 08             	sub    esp,0x8
9f000e1e:	8d 93 59 f6 ff ff    	lea    edx,[ebx-0x9a7]
9f000e24:	52                   	push   edx
9f000e25:	50                   	push   eax
9f000e26:	e8 41 2b 00 00       	call   9f00396c <strcmpI>
9f000e2b:	83 c4 10             	add    esp,0x10
9f000e2e:	85 c0                	test   eax,eax
9f000e30:	74 1b                	je     9f000e4d <resolvePath+0x213>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:155
                strcatI(resolvePath_resPath,"/");
9f000e32:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e38:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e3a:	83 ec 08             	sub    esp,0x8
9f000e3d:	8d 93 59 f6 ff ff    	lea    edx,[ebx-0x9a7]
9f000e43:	52                   	push   edx
9f000e44:	50                   	push   eax
9f000e45:	e8 4c 2a 00 00       	call   9f003896 <strcatI>
9f000e4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:156
            strcatI(resolvePath_resPath,inPath);
9f000e4d:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e53:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e55:	83 ec 08             	sub    esp,0x8
9f000e58:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000e5b:	50                   	push   eax
9f000e5c:	e8 35 2a 00 00       	call   9f003896 <strcatI>
9f000e61:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:157
            int res=statI(resolvePath_resPath,&fstat);
9f000e64:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e6a:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e6c:	83 ec 08             	sub    esp,0x8
9f000e6f:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000e72:	52                   	push   edx
9f000e73:	50                   	push   eax
9f000e74:	e8 71 fd ff ff       	call   9f000bea <statI>
9f000e79:	83 c4 10             	add    esp,0x10
9f000e7c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:158
            if (res==0)
9f000e7f:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f000e83:	75 20                	jne    9f000ea5 <resolvePath+0x26b>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:160
            {
                strcpyI(outPath,resolvePath_resPath);
9f000e85:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000e8b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000e8d:	83 ec 08             	sub    esp,0x8
9f000e90:	50                   	push   eax
9f000e91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000e94:	e8 8f 2b 00 00       	call   9f003a28 <strcpyI>
9f000e99:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:161
                retVal=0;
9f000e9c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:162
                break;
9f000ea3:	eb 1e                	jmp    9f000ec3 <resolvePath+0x289>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:164
            }
            token=strtokI(NULL,delim);
9f000ea5:	83 ec 08             	sub    esp,0x8
9f000ea8:	8d 45 e6             	lea    eax,[ebp-0x1a]
9f000eab:	50                   	push   eax
9f000eac:	6a 00                	push   0x0
9f000eae:	e8 69 f2 ff ff       	call   9f00011c <strtokI>
9f000eb3:	83 c4 10             	add    esp,0x10
9f000eb6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:151
        strcpyI(resolvePath_inPath,inPath);
        if (resolvePath_envPath[0])
            token=strtokI(resolvePath_envPath,delim);
        else
            token=NULL;
        while (token!=NULL)
9f000eb9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f000ebd:	0f 85 39 ff ff ff    	jne    9f000dfc <resolvePath+0x1c2>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:167
                break;
            }
            token=strtokI(NULL,delim);
        }

        if (retVal==-1)
9f000ec3:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
9f000ec7:	0f 85 8e 00 00 00    	jne    9f000f5b <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:169
        {
            strcpyI(resolvePath_resPath,resolvePath_cwd);
9f000ecd:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
9f000ed3:	8b 10                	mov    edx,DWORD PTR [eax]
9f000ed5:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000edb:	8b 00                	mov    eax,DWORD PTR [eax]
9f000edd:	83 ec 08             	sub    esp,0x8
9f000ee0:	52                   	push   edx
9f000ee1:	50                   	push   eax
9f000ee2:	e8 41 2b 00 00       	call   9f003a28 <strcpyI>
9f000ee7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:170
            strcatI(resolvePath_resPath,"/");
9f000eea:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000ef0:	8b 00                	mov    eax,DWORD PTR [eax]
9f000ef2:	83 ec 08             	sub    esp,0x8
9f000ef5:	8d 93 59 f6 ff ff    	lea    edx,[ebx-0x9a7]
9f000efb:	52                   	push   edx
9f000efc:	50                   	push   eax
9f000efd:	e8 94 29 00 00       	call   9f003896 <strcatI>
9f000f02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:171
            strcatI(resolvePath_resPath,inPath);
9f000f05:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f0b:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f0d:	83 ec 08             	sub    esp,0x8
9f000f10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000f13:	50                   	push   eax
9f000f14:	e8 7d 29 00 00       	call   9f003896 <strcatI>
9f000f19:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:172
            int res=statI(resolvePath_resPath,&fstat);
9f000f1c:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f22:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f24:	83 ec 08             	sub    esp,0x8
9f000f27:	8d 55 dc             	lea    edx,[ebp-0x24]
9f000f2a:	52                   	push   edx
9f000f2b:	50                   	push   eax
9f000f2c:	e8 b9 fc ff ff       	call   9f000bea <statI>
9f000f31:	83 c4 10             	add    esp,0x10
9f000f34:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:173
            if (res==0)
9f000f37:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f000f3b:	75 1e                	jne    9f000f5b <resolvePath+0x321>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:175
            {
                strcpyI(outPath,resolvePath_resPath);
9f000f3d:	8b 83 d4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x2c]
9f000f43:	8b 00                	mov    eax,DWORD PTR [eax]
9f000f45:	83 ec 08             	sub    esp,0x8
9f000f48:	50                   	push   eax
9f000f49:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f000f4c:	e8 d7 2a 00 00       	call   9f003a28 <strcpyI>
9f000f51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:176
                retVal=0;
9f000f54:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:181
            }
        }
    }
    
    return retVal;
9f000f5b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:182
}
9f000f5e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000f61:	c9                   	leave  
9f000f62:	c3                   	ret    

9f000f63 <tellI>:
tellI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:185

long tellI(void *stream)
{
9f000f63:	55                   	push   ebp
9f000f64:	89 e5                	mov    ebp,esp
9f000f66:	53                   	push   ebx
9f000f67:	83 ec 04             	sub    esp,0x4
9f000f6a:	e8 3f 41 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000f6f:	05 2d 6e 00 00       	add    eax,0x6e2d
/home/yogi/src/os/aproj/libChrisOS/src/file.c:186
    return do_syscall1(SYSCALL_TELL,(uint32_t)stream);
9f000f74:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f000f77:	83 ec 08             	sub    esp,0x8
9f000f7a:	52                   	push   edx
9f000f7b:	6a 0c                	push   0xc
9f000f7d:	89 c3                	mov    ebx,eax
9f000f7f:	e8 58 04 00 00       	call   9f0013dc <do_syscall1>
9f000f84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:187
}
9f000f87:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f000f8a:	c9                   	leave  
9f000f8b:	c3                   	ret    

9f000f8c <tell>:
tell():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:190

VISIBLE long tell(void *stream)
{
9f000f8c:	55                   	push   ebp
9f000f8d:	89 e5                	mov    ebp,esp
9f000f8f:	83 ec 08             	sub    esp,0x8
9f000f92:	e8 17 41 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f000f97:	05 05 6e 00 00       	add    eax,0x6e05
/home/yogi/src/os/aproj/libChrisOS/src/file.c:191
    return tellI(stream);
9f000f9c:	83 ec 0c             	sub    esp,0xc
9f000f9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f000fa2:	e8 bc ff ff ff       	call   9f000f63 <tellI>
9f000fa7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:192
}
9f000faa:	c9                   	leave  
9f000fab:	c3                   	ret    

9f000fac <getlineI>:
getlineI():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:195

size_t getlineI(char **lineptr, size_t *n, void *stream)
{
9f000fac:	55                   	push   ebp
9f000fad:	89 e5                	mov    ebp,esp
9f000faf:	53                   	push   ebx
9f000fb0:	83 ec 24             	sub    esp,0x24
9f000fb3:	e8 fa 40 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f000fb8:	81 c3 e4 6d 00 00    	add    ebx,0x6de4
/home/yogi/src/os/aproj/libChrisOS/src/file.c:197
    char *buffer;
    int bytesReturned=0;
9f000fbe:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:198
    size_t bytesParsed=0;
9f000fc5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:199
    char *crPtr=NULL;
9f000fcc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/file.c:200
    char *lineToOutput=*lineptr;
9f000fd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f000fd6:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fd8:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:201
    size_t lLinePtrLen=*n;
9f000fdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f000fde:	8b 00                	mov    eax,DWORD PTR [eax]
9f000fe0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:202
    int startFilePos=tellI(stream);
9f000fe3:	83 ec 0c             	sub    esp,0xc
9f000fe6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f000fe9:	e8 75 ff ff ff       	call   9f000f63 <tellI>
9f000fee:	83 c4 10             	add    esp,0x10
9f000ff1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:203
    int retVal=-1;
9f000ff4:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/file.c:205
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
9f000ffb:	83 ec 0c             	sub    esp,0xc
9f000ffe:	68 00 04 00 00       	push   0x400
9f001003:	e8 65 13 00 00       	call   9f00236d <mallocI>
9f001008:	83 c4 10             	add    esp,0x10
9f00100b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f00100e:	e9 22 01 00 00       	jmp    9f001135 <getlineI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:209
    {
        if (crPtr==strstrI(buffer,"\n"))
9f001013:	83 ec 08             	sub    esp,0x8
9f001016:	8d 83 5b f6 ff ff    	lea    eax,[ebx-0x9a5]
9f00101c:	50                   	push   eax
9f00101d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001020:	e8 ed 32 00 00       	call   9f004312 <strstrI>
9f001025:	83 c4 10             	add    esp,0x10
9f001028:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
9f00102b:	0f 85 cf 00 00 00    	jne    9f001100 <getlineI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:211
        { 
            if (crPtr-buffer+bytesParsed<*n)
9f001031:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001034:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001037:	29 c2                	sub    edx,eax
9f001039:	89 d0                	mov    eax,edx
9f00103b:	89 c2                	mov    edx,eax
9f00103d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001040:	01 c2                	add    edx,eax
9f001042:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001045:	8b 00                	mov    eax,DWORD PTR [eax]
9f001047:	39 c2                	cmp    edx,eax
9f001049:	73 1f                	jae    9f00106a <getlineI+0xbe>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:212
                strncatI(lineToOutput,buffer,crPtr-buffer);
9f00104b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00104e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001051:	29 c2                	sub    edx,eax
9f001053:	89 d0                	mov    eax,edx
9f001055:	89 c2                	mov    edx,eax
9f001057:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00105a:	83 ec 04             	sub    esp,0x4
9f00105d:	52                   	push   edx
9f00105e:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001061:	50                   	push   eax
9f001062:	e8 6d 28 00 00       	call   9f0038d4 <strncatI>
9f001067:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:213
            if (bytesParsed+(crPtr-buffer)>*n)
9f00106a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00106d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001070:	29 c2                	sub    edx,eax
9f001072:	89 d0                	mov    eax,edx
9f001074:	89 c2                	mov    edx,eax
9f001076:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001079:	01 c2                	add    edx,eax
9f00107b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00107e:	8b 00                	mov    eax,DWORD PTR [eax]
9f001080:	39 c2                	cmp    edx,eax
9f001082:	76 21                	jbe    9f0010a5 <getlineI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:214
                reallocI(lineToOutput,bytesParsed+(crPtr-buffer));
9f001084:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f001087:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00108a:	29 c2                	sub    edx,eax
9f00108c:	89 d0                	mov    eax,edx
9f00108e:	89 c2                	mov    edx,eax
9f001090:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001093:	01 c2                	add    edx,eax
9f001095:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001098:	83 ec 08             	sub    esp,0x8
9f00109b:	52                   	push   edx
9f00109c:	50                   	push   eax
9f00109d:	e8 ab 15 00 00       	call   9f00264d <reallocI>
9f0010a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:215
            strncatI(lineToOutput,buffer,crPtr-buffer);
9f0010a5:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0010a8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0010ab:	29 c2                	sub    edx,eax
9f0010ad:	89 d0                	mov    eax,edx
9f0010af:	89 c2                	mov    edx,eax
9f0010b1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0010b4:	83 ec 04             	sub    esp,0x4
9f0010b7:	52                   	push   edx
9f0010b8:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0010bb:	50                   	push   eax
9f0010bc:	e8 13 28 00 00       	call   9f0038d4 <strncatI>
9f0010c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:216
            bytesParsed+=(crPtr-buffer);
9f0010c4:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0010c7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0010ca:	29 c2                	sub    edx,eax
9f0010cc:	89 d0                	mov    eax,edx
9f0010ce:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:217
            seekI(stream, startFilePos+bytesParsed,SEEK_SET);
9f0010d1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f0010d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0010d7:	01 d0                	add    eax,edx
9f0010d9:	83 ec 04             	sub    esp,0x4
9f0010dc:	6a 00                	push   0x0
9f0010de:	50                   	push   eax
9f0010df:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0010e2:	e8 af fa ff ff       	call   9f000b96 <seekI>
9f0010e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:218
            *n=lLinePtrLen;
9f0010ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0010ed:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0010f0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/file.c:219
            lineptr=&lineToOutput;
9f0010f2:	8d 45 d8             	lea    eax,[ebp-0x28]
9f0010f5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:220
            retVal=bytesParsed;
9f0010f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0010fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:221
            goto getlineReturn;
9f0010fe:	eb 57                	jmp    9f001157 <getlineI+0x1ab>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:225
        }
        else
        {
            lLinePtrLen+=bytesReturned;
9f001100:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001103:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:226
            bytesParsed+=bytesReturned;
9f001106:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001109:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/file.c:227
            reallocI(lineToOutput,lLinePtrLen);
9f00110c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f00110f:	83 ec 08             	sub    esp,0x8
9f001112:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001115:	50                   	push   eax
9f001116:	e8 32 15 00 00       	call   9f00264d <reallocI>
9f00111b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:228
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
9f00111e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001121:	83 ec 04             	sub    esp,0x4
9f001124:	68 00 04 00 00       	push   0x400
9f001129:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00112c:	50                   	push   eax
9f00112d:	e8 a2 27 00 00       	call   9f0038d4 <strncatI>
9f001132:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:207
    int startFilePos=tellI(stream);
    int retVal=-1;
    
    buffer=mallocI(GETLINE_BUFFER_SIZE);        
    
    while ((bytesReturned=readI(stream, buffer,GETLINE_BUFFER_SIZE,1))>0)
9f001135:	6a 01                	push   0x1
9f001137:	68 00 04 00 00       	push   0x400
9f00113c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00113f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001142:	e8 99 f9 ff ff       	call   9f000ae0 <readI>
9f001147:	83 c4 10             	add    esp,0x10
9f00114a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f00114d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f001151:	0f 8f bc fe ff ff    	jg     9f001013 <getlineI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/file.c:233
            strncatI(lineToOutput,buffer,GETLINE_BUFFER_SIZE);
        }
    }

getlineReturn:    
    freeI(buffer);
9f001157:	83 ec 0c             	sub    esp,0xc
9f00115a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f00115d:	e8 89 10 00 00       	call   9f0021eb <freeI>
9f001162:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:234
    return retVal;
9f001165:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/file.c:235
}
9f001168:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00116b:	c9                   	leave  
9f00116c:	c3                   	ret    

9f00116d <getline>:
getline():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:238

VISIBLE size_t getline(char **lineptr, size_t *n, void *stream)
{
9f00116d:	55                   	push   ebp
9f00116e:	89 e5                	mov    ebp,esp
9f001170:	83 ec 08             	sub    esp,0x8
9f001173:	e8 36 3f 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001178:	05 24 6c 00 00       	add    eax,0x6c24
/home/yogi/src/os/aproj/libChrisOS/src/file.c:239
    return getlineI(lineptr, n, stream);
9f00117d:	83 ec 04             	sub    esp,0x4
9f001180:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001183:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001186:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001189:	e8 1e fe ff ff       	call   9f000fac <getlineI>
9f00118e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:240
}
9f001191:	c9                   	leave  
9f001192:	c3                   	ret    

9f001193 <unlink>:
unlink():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:243

VISIBLE int unlink(char *filename)
{
9f001193:	55                   	push   ebp
9f001194:	89 e5                	mov    ebp,esp
9f001196:	53                   	push   ebx
9f001197:	83 ec 04             	sub    esp,0x4
9f00119a:	e8 0f 3f 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00119f:	05 fd 6b 00 00       	add    eax,0x6bfd
/home/yogi/src/os/aproj/libChrisOS/src/file.c:244
    return do_syscall1(SYSCALL_UNLINK,(uintptr_t)filename);
9f0011a4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0011a7:	83 ec 08             	sub    esp,0x8
9f0011aa:	52                   	push   edx
9f0011ab:	6a 0d                	push   0xd
9f0011ad:	89 c3                	mov    ebx,eax
9f0011af:	e8 28 02 00 00       	call   9f0013dc <do_syscall1>
9f0011b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:245
9f0011b7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0011ba:	c9                   	leave  
9f0011bb:	c3                   	ret    

9f0011bc <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
9f0011bc:	55                   	push   ebp
9f0011bd:	89 e5                	mov    ebp,esp
9f0011bf:	53                   	push   ebx
9f0011c0:	e8 e9 3e 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0011c5:	05 d7 6b 00 00       	add    eax,0x6bd7
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
9f0011ca:	b8 05 00 00 00       	mov    eax,0x5
9f0011cf:	bb 01 00 00 00       	mov    ebx,0x1
9f0011d4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0011d7:	89 d1                	mov    ecx,edx
9f0011d9:	e8 fc ff ff ff       	call   9f0011da <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
9f0011de:	90                   	nop
9f0011df:	5b                   	pop    ebx
9f0011e0:	5d                   	pop    ebp
9f0011e1:	c3                   	ret    

9f0011e2 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
9f0011e2:	55                   	push   ebp
9f0011e3:	89 e5                	mov    ebp,esp
9f0011e5:	53                   	push   ebx
9f0011e6:	83 ec 14             	sub    esp,0x14
9f0011e9:	e8 c0 3e 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0011ee:	05 ae 6b 00 00       	add    eax,0x6bae
9f0011f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0011f6:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
9f0011f9:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
9f0011ff:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
9f001203:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
9f001206:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
9f00120a:	b8 05 00 00 00       	mov    eax,0x5
9f00120f:	bb 01 00 00 00       	mov    ebx,0x1
9f001214:	8d 55 fa             	lea    edx,[ebp-0x6]
9f001217:	89 d1                	mov    ecx,edx
9f001219:	e8 fc ff ff ff       	call   9f00121a <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
9f00121e:	90                   	nop
9f00121f:	83 c4 14             	add    esp,0x14
9f001222:	5b                   	pop    ebx
9f001223:	5d                   	pop    ebp
9f001224:	c3                   	ret    

9f001225 <getchar>:
getchar():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32



VISIBLE char getchar()
{
9f001225:	55                   	push   ebp
9f001226:	89 e5                	mov    ebp,esp
9f001228:	53                   	push   ebx
9f001229:	83 ec 10             	sub    esp,0x10
9f00122c:	e8 7d 3e 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001231:	05 6b 6b 00 00       	add    eax,0x6b6b
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:36
    char c;
    while (1==1)
    {
        READCHAR(c);
9f001236:	b8 04 00 00 00       	mov    eax,0x4
9f00123b:	ba 00 00 00 00       	mov    edx,0x0
9f001240:	89 d3                	mov    ebx,edx
9f001242:	e8 fc ff ff ff       	call   9f001243 <getchar+0x1e>
9f001247:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:37
        if (c)
9f00124a:	80 7d fb 00          	cmp    BYTE PTR [ebp-0x5],0x0
9f00124e:	74 06                	je     9f001256 <getchar+0x31>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38
            return c;
9f001250:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
9f001254:	eb 0c                	jmp    9f001262 <getchar+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:39
        asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001256:	b8 02 03 00 00       	mov    eax,0x302
9f00125b:	e8 fc ff ff ff       	call   9f00125c <getchar+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    }
9f001260:	eb d4                	jmp    9f001236 <getchar+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:42
    return 0; //Should not get here
}
9f001262:	83 c4 10             	add    esp,0x10
9f001265:	5b                   	pop    ebx
9f001266:	5d                   	pop    ebp
9f001267:	c3                   	ret    

9f001268 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
9f001268:	55                   	push   ebp
9f001269:	89 e5                	mov    ebp,esp
9f00126b:	53                   	push   ebx
9f00126c:	83 ec 14             	sub    esp,0x14
9f00126f:	e8 3a 3e 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001274:	05 28 6b 00 00       	add    eax,0x6b28
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:48
    char inchar;
    int len=0;
9f001279:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    char lbuf[2];
    
    lbuf[0]=lbuf[1]=0;
9f001280:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
9f001284:	0f b6 55 f2          	movzx  edx,BYTE PTR [ebp-0xe]
9f001288:	88 55 f1             	mov    BYTE PTR [ebp-0xf],dl
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
    if (stream!=1)
9f00128b:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f00128f:	74 19                	je     9f0012aa <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
    {
        printI("Stream %u not implemented\n",stream);
9f001291:	83 ec 08             	sub    esp,0x8
9f001294:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001297:	8d 90 5d f6 ff ff    	lea    edx,[eax-0x9a3]
9f00129d:	52                   	push   edx
9f00129e:	89 c3                	mov    ebx,eax
9f0012a0:	e8 a8 03 00 00       	call   9f00164d <printI>
9f0012a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55 (discriminator 1)
        getsError: goto getsError;
9f0012a8:	eb fe                	jmp    9f0012a8 <gets+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:60
    }
    
    while (1==1)
    {
        READCHAR(inchar)
9f0012aa:	b8 04 00 00 00       	mov    eax,0x4
9f0012af:	ba 00 00 00 00       	mov    edx,0x0
9f0012b4:	89 d3                	mov    ebx,edx
9f0012b6:	e8 fc ff ff ff       	call   9f0012b7 <gets+0x4f>
9f0012bb:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
        if (inchar=='\b' && len>0)
9f0012be:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
9f0012c2:	75 17                	jne    9f0012db <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61 (discriminator 1)
9f0012c4:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f0012c8:	7e 11                	jle    9f0012db <gets+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
        {
            buffer[len]=0;
9f0012ca:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0012cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012d0:	01 d0                	add    eax,edx
9f0012d2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:64
            len--;
9f0012d5:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
9f0012d9:	eb 43                	jmp    9f00131e <gets+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:66
        }
        else if (inchar!=0)
9f0012db:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
9f0012df:	74 33                	je     9f001314 <gets+0xac>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        {
            lbuf[0]=inchar;
9f0012e1:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f0012e5:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
9f0012e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0012eb:	8d 50 01             	lea    edx,[eax+0x1]
9f0012ee:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0012f1:	89 c2                	mov    edx,eax
9f0012f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0012f6:	01 c2                	add    edx,eax
9f0012f8:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
9f0012fc:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
9f0012fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001301:	83 c0 01             	add    eax,0x1
9f001304:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f001307:	7d 06                	jge    9f00130f <gets+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:72 (discriminator 1)
9f001309:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
9f00130d:	75 9b                	jne    9f0012aa <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:74
            
                return len;
9f00130f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001312:	eb 0c                	jmp    9f001320 <gets+0xb8>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:77
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
9f001314:	b8 02 03 00 00       	mov    eax,0x302
9f001319:	e8 fc ff ff ff       	call   9f00131a <gets+0xb2>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:82 (discriminator 2)
        //added these for 1000 hertz clock, not needed for 100 hertz
/*            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt*/

    }
9f00131e:	eb 8a                	jmp    9f0012aa <gets+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:83
}
9f001320:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001323:	c9                   	leave  
9f001324:	c3                   	ret    
9f001325:	66 90                	xchg   ax,ax
9f001327:	90                   	nop

9f001328 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
bool libcInitialized = false;
char *printBuffer;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
9f001328:	55                   	push   ebp
9f001329:	89 e5                	mov    ebp,esp
9f00132b:	56                   	push   esi
9f00132c:	53                   	push   ebx
9f00132d:	83 ec 10             	sub    esp,0x10
9f001330:	e8 79 3d 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001335:	05 67 6a 00 00       	add    eax,0x6a67
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    int retVal=0;
9f00133a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
9f001341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001344:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001347:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f00134a:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f00134d:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
9f001350:	e8 fc ff ff ff       	call   9f001351 <do_syscall4+0x29>
9f001355:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
    return retVal;
9f001358:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:22
}
9f00135b:	83 c4 10             	add    esp,0x10
9f00135e:	5b                   	pop    ebx
9f00135f:	5e                   	pop    esi
9f001360:	5d                   	pop    ebp
9f001361:	c3                   	ret    

9f001362 <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
9f001362:	55                   	push   ebp
9f001363:	89 e5                	mov    ebp,esp
9f001365:	56                   	push   esi
9f001366:	53                   	push   ebx
9f001367:	83 ec 10             	sub    esp,0x10
9f00136a:	e8 3f 3d 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00136f:	05 2d 6a 00 00       	add    eax,0x6a2d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    int retVal=0;
9f001374:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    SYSCALL3(callnum, param1, param2, param3, retVal);
9f00137b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00137e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f001381:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001384:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f001387:	be 00 00 00 00       	mov    esi,0x0
9f00138c:	e8 fc ff ff ff       	call   9f00138d <do_syscall3+0x2b>
9f001391:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
    return retVal;
9f001394:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:29
}
9f001397:	83 c4 10             	add    esp,0x10
9f00139a:	5b                   	pop    ebx
9f00139b:	5e                   	pop    esi
9f00139c:	5d                   	pop    ebp
9f00139d:	c3                   	ret    

9f00139e <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
9f00139e:	55                   	push   ebp
9f00139f:	89 e5                	mov    ebp,esp
9f0013a1:	56                   	push   esi
9f0013a2:	53                   	push   ebx
9f0013a3:	83 ec 10             	sub    esp,0x10
9f0013a6:	e8 03 3d 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0013ab:	05 f1 69 00 00       	add    eax,0x69f1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    int retVal=0;
9f0013b0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    SYSCALL2(callnum, param1, param2, retVal);
9f0013b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0013ba:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0013bd:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0013c0:	ba 00 00 00 00       	mov    edx,0x0
9f0013c5:	be 00 00 00 00       	mov    esi,0x0
9f0013ca:	e8 fc ff ff ff       	call   9f0013cb <do_syscall2+0x2d>
9f0013cf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
    return retVal;
9f0013d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:36
}
9f0013d5:	83 c4 10             	add    esp,0x10
9f0013d8:	5b                   	pop    ebx
9f0013d9:	5e                   	pop    esi
9f0013da:	5d                   	pop    ebp
9f0013db:	c3                   	ret    

9f0013dc <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39

int do_syscall1(int callnum, uint32_t param1)
{
9f0013dc:	55                   	push   ebp
9f0013dd:	89 e5                	mov    ebp,esp
9f0013df:	56                   	push   esi
9f0013e0:	53                   	push   ebx
9f0013e1:	83 ec 10             	sub    esp,0x10
9f0013e4:	e8 c5 3c 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0013e9:	05 b3 69 00 00       	add    eax,0x69b3
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    int retVal=0;
9f0013ee:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    SYSCALL1(callnum, param1, retVal);
9f0013f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0013f8:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0013fb:	b9 00 00 00 00       	mov    ecx,0x0
9f001400:	ba 00 00 00 00       	mov    edx,0x0
9f001405:	be 00 00 00 00       	mov    esi,0x0
9f00140a:	e8 fc ff ff ff       	call   9f00140b <do_syscall1+0x2f>
9f00140f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
    return retVal;
9f001412:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:43
}
9f001415:	83 c4 10             	add    esp,0x10
9f001418:	5b                   	pop    ebx
9f001419:	5e                   	pop    esi
9f00141a:	5d                   	pop    ebp
9f00141b:	c3                   	ret    

9f00141c <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46

int do_syscall0(int callnum)
{
9f00141c:	55                   	push   ebp
9f00141d:	89 e5                	mov    ebp,esp
9f00141f:	56                   	push   esi
9f001420:	53                   	push   ebx
9f001421:	83 ec 10             	sub    esp,0x10
9f001424:	e8 85 3c 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001429:	05 73 69 00 00       	add    eax,0x6973
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    int retVal=0;
9f00142e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    SYSCALL0(callnum, retVal);
9f001435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001438:	bb 00 00 00 00       	mov    ebx,0x0
9f00143d:	b9 00 00 00 00       	mov    ecx,0x0
9f001442:	ba 00 00 00 00       	mov    edx,0x0
9f001447:	be 00 00 00 00       	mov    esi,0x0
9f00144c:	e8 fc ff ff ff       	call   9f00144d <do_syscall0+0x31>
9f001451:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
    return retVal;
9f001454:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:50
}
9f001457:	83 c4 10             	add    esp,0x10
9f00145a:	5b                   	pop    ebx
9f00145b:	5e                   	pop    esi
9f00145c:	5d                   	pop    ebp
9f00145d:	c3                   	ret    

9f00145e <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53

VISIBLE void __attribute__((constructor)) libc_init()
{
9f00145e:	55                   	push   ebp
9f00145f:	89 e5                	mov    ebp,esp
9f001461:	53                   	push   ebx
9f001462:	83 ec 04             	sub    esp,0x4
9f001465:	e8 48 3c 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f00146a:	81 c3 32 69 00 00    	add    ebx,0x6932
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    printdI(DEBUG_LIBC,"***libc_init called\n***");
9f001470:	83 ec 08             	sub    esp,0x8
9f001473:	8d 83 78 f6 ff ff    	lea    eax,[ebx-0x988]
9f001479:	50                   	push   eax
9f00147a:	68 00 00 00 02       	push   0x2000000
9f00147f:	e8 34 02 00 00       	call   9f0016b8 <printdI>
9f001484:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:55
    if (!libcInitialized)
9f001487:	0f b6 83 48 00 00 00 	movzx  eax,BYTE PTR [ebx+0x48]
9f00148e:	83 f0 01             	xor    eax,0x1
9f001491:	84 c0                	test   al,al
9f001493:	74 7c                	je     9f001511 <libc_init+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:57
    {
        initmalloc();
9f001495:	e8 6a 0c 00 00       	call   9f002104 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        filesToCloseCount=0;
9f00149a:	8b 83 d0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x30]
9f0014a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
//        printfI("libc_init: filesToCloseCount=%u\n",filesToCloseCount);
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
9f0014a6:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
9f0014a9:	89 c2                	mov    edx,eax
9f0014ab:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
9f0014b1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        do_syscall0(SYSCALL_INVALID);
9f0014b3:	83 ec 0c             	sub    esp,0xc
9f0014b6:	6a 00                	push   0x0
9f0014b8:	e8 5f ff ff ff       	call   9f00141c <do_syscall0>
9f0014bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:63
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
9f0014c0:	8d 83 8d 97 ff ff    	lea    eax,[ebx-0x6873]
9f0014c6:	83 ec 08             	sub    esp,0x8
9f0014c9:	50                   	push   eax
9f0014ca:	68 63 01 00 00       	push   0x163
9f0014cf:	e8 08 ff ff ff       	call   9f0013dc <do_syscall1>
9f0014d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:64
        libcInitialized = true;
9f0014d7:	c6 83 48 00 00 00 01 	mov    BYTE PTR [ebx+0x48],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        printBuffer = mallocI(0x1000);
9f0014de:	83 ec 0c             	sub    esp,0xc
9f0014e1:	68 00 10 00 00       	push   0x1000
9f0014e6:	e8 82 0e 00 00       	call   9f00236d <mallocI>
9f0014eb:	83 c4 10             	add    esp,0x10
9f0014ee:	89 c2                	mov    edx,eax
9f0014f0:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0014f6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
        printdI(DEBUG_LIBC,"***libc_init completed\n");
9f0014f8:	83 ec 08             	sub    esp,0x8
9f0014fb:	8d 83 90 f6 ff ff    	lea    eax,[ebx-0x970]
9f001501:	50                   	push   eax
9f001502:	68 00 00 00 02       	push   0x2000000
9f001507:	e8 ac 01 00 00       	call   9f0016b8 <printdI>
9f00150c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    }
    else
        printI("libc_init called previously, exiting\n");
}
9f00150f:	eb 12                	jmp    9f001523 <libc_init+0xc5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69
        libcInitialized = true;
        printBuffer = mallocI(0x1000);
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
9f001511:	83 ec 0c             	sub    esp,0xc
9f001514:	8d 83 a8 f6 ff ff    	lea    eax,[ebx-0x958]
9f00151a:	50                   	push   eax
9f00151b:	e8 2d 01 00 00       	call   9f00164d <printI>
9f001520:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
}
9f001523:	90                   	nop
9f001524:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001527:	c9                   	leave  
9f001528:	c3                   	ret    

9f001529 <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:73

void __attribute__((destructor)) libc_cleanup(void)
{
9f001529:	55                   	push   ebp
9f00152a:	89 e5                	mov    ebp,esp
9f00152c:	53                   	push   ebx
9f00152d:	83 ec 04             	sub    esp,0x4
9f001530:	e8 7d 3b 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f001535:	81 c3 67 68 00 00    	add    ebx,0x6867
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74
    malloc_cleanup();
9f00153b:	e8 54 12 00 00       	call   9f002794 <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:75
    file_cleanup();
9f001540:	e8 65 f4 ff ff       	call   9f0009aa <file_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
}
9f001545:	90                   	nop
9f001546:	83 c4 04             	add    esp,0x4
9f001549:	5b                   	pop    ebx
9f00154a:	5d                   	pop    ebp
9f00154b:	c3                   	ret    

9f00154c <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79

VISIBLE int print(const char *format, ...)
{
9f00154c:	55                   	push   ebp
9f00154d:	89 e5                	mov    ebp,esp
9f00154f:	53                   	push   ebx
9f001550:	83 ec 14             	sub    esp,0x14
9f001553:	e8 5a 3b 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f001558:	81 c3 44 68 00 00    	add    ebx,0x6844
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:81
    va_list args;
    va_start( args, format );
9f00155e:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001561:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:83
    
    int size = vsprintf(printBuffer, format, args);
9f001564:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001567:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00156d:	8b 00                	mov    eax,DWORD PTR [eax]
9f00156f:	83 ec 04             	sub    esp,0x4
9f001572:	52                   	push   edx
9f001573:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001576:	50                   	push   eax
9f001577:	e8 a9 1d 00 00       	call   9f003325 <vsprintf>
9f00157c:	83 c4 10             	add    esp,0x10
9f00157f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f001582:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001585:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f00158b:	8b 12                	mov    edx,DWORD PTR [edx]
9f00158d:	50                   	push   eax
9f00158e:	52                   	push   edx
9f00158f:	6a 01                	push   0x1
9f001591:	6a 05                	push   0x5
9f001593:	e8 ca fd ff ff       	call   9f001362 <do_syscall3>
9f001598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    return 0;
9f00159b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
}
9f0015a0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0015a3:	c9                   	leave  
9f0015a4:	c3                   	ret    

9f0015a5 <printf>:
printf():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:89

VISIBLE int printf(const char *format, ...)
{
9f0015a5:	55                   	push   ebp
9f0015a6:	89 e5                	mov    ebp,esp
9f0015a8:	53                   	push   ebx
9f0015a9:	83 ec 14             	sub    esp,0x14
9f0015ac:	e8 01 3b 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0015b1:	81 c3 eb 67 00 00    	add    ebx,0x67eb
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:91
    va_list args;
    va_start( args, format );
9f0015b7:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0015ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:93
    
    int size = vsprintf(printBuffer, format, args);
9f0015bd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0015c0:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f0015c6:	8b 00                	mov    eax,DWORD PTR [eax]
9f0015c8:	83 ec 04             	sub    esp,0x4
9f0015cb:	52                   	push   edx
9f0015cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0015cf:	50                   	push   eax
9f0015d0:	e8 50 1d 00 00       	call   9f003325 <vsprintf>
9f0015d5:	83 c4 10             	add    esp,0x10
9f0015d8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    return do_syscall3(SYSCALL_WRITE, STDOUT_FILE, (uint32_t)printBuffer, size);
9f0015db:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0015de:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f0015e4:	8b 12                	mov    edx,DWORD PTR [edx]
9f0015e6:	50                   	push   eax
9f0015e7:	52                   	push   edx
9f0015e8:	6a 01                	push   0x1
9f0015ea:	6a 05                	push   0x5
9f0015ec:	e8 71 fd ff ff       	call   9f001362 <do_syscall3>
9f0015f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
}
9f0015f4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0015f7:	c9                   	leave  
9f0015f8:	c3                   	ret    

9f0015f9 <printfI>:
printfI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:98

int printfI(const char *format, ...)
{
9f0015f9:	55                   	push   ebp
9f0015fa:	89 e5                	mov    ebp,esp
9f0015fc:	53                   	push   ebx
9f0015fd:	83 ec 14             	sub    esp,0x14
9f001600:	e8 ad 3a 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f001605:	81 c3 97 67 00 00    	add    ebx,0x6797
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100
    va_list args;
    va_start( args, format );
9f00160b:	8d 45 0c             	lea    eax,[ebp+0xc]
9f00160e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    
    int size = vsprintf(printBuffer, format, args);
9f001611:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001614:	8b 83 e0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x20]
9f00161a:	8b 00                	mov    eax,DWORD PTR [eax]
9f00161c:	83 ec 04             	sub    esp,0x4
9f00161f:	52                   	push   edx
9f001620:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001623:	50                   	push   eax
9f001624:	e8 fc 1c 00 00       	call   9f003325 <vsprintf>
9f001629:	83 c4 10             	add    esp,0x10
9f00162c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
    return do_syscall3(SYSCALL_WRITE, 1, (uint32_t)printBuffer, size);
9f00162f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001632:	8b 93 e0 ff ff ff    	mov    edx,DWORD PTR [ebx-0x20]
9f001638:	8b 12                	mov    edx,DWORD PTR [edx]
9f00163a:	50                   	push   eax
9f00163b:	52                   	push   edx
9f00163c:	6a 01                	push   0x1
9f00163e:	6a 05                	push   0x5
9f001640:	e8 1d fd ff ff       	call   9f001362 <do_syscall3>
9f001645:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:104
}
9f001648:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00164b:	c9                   	leave  
9f00164c:	c3                   	ret    

9f00164d <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107

int printI(const char *format, ...)
{
9f00164d:	55                   	push   ebp
9f00164e:	89 e5                	mov    ebp,esp
9f001650:	83 ec 10             	sub    esp,0x10
9f001653:	e8 56 3a 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001658:	05 44 67 00 00       	add    eax,0x6744
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:109
    va_list args;
    va_start( args, format );
9f00165d:	8d 45 0c             	lea    eax,[ebp+0xc]
9f001660:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:110
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
9f001663:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001666:	89 c2                	mov    edx,eax
9f001668:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00166b:	52                   	push   edx
9f00166c:	50                   	push   eax
9f00166d:	68 00 03 00 00       	push   0x300
9f001672:	e8 27 fd ff ff       	call   9f00139e <do_syscall2>
9f001677:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111
    return 0;
9f00167a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
}
9f00167f:	c9                   	leave  
9f001680:	c3                   	ret    

9f001681 <printd>:
printd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:115

VISIBLE int printd(uint32_t DebugLevel, const char *format, ...)
{
9f001681:	55                   	push   ebp
9f001682:	89 e5                	mov    ebp,esp
9f001684:	83 ec 10             	sub    esp,0x10
9f001687:	e8 22 3a 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00168c:	05 10 67 00 00       	add    eax,0x6710
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    va_list args;
    va_start( args, format );
9f001691:	8d 45 10             	lea    eax,[ebp+0x10]
9f001694:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:119
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f001697:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f00169a:	89 c2                	mov    edx,eax
9f00169c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00169f:	52                   	push   edx
9f0016a0:	50                   	push   eax
9f0016a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0016a4:	68 01 03 00 00       	push   0x301
9f0016a9:	e8 b4 fc ff ff       	call   9f001362 <do_syscall3>
9f0016ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:120
    return 0;
9f0016b1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
    va_end(args);
}
9f0016b6:	c9                   	leave  
9f0016b7:	c3                   	ret    

9f0016b8 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:125

int printdI(uint32_t DebugLevel, const char *format, ...)
{
9f0016b8:	55                   	push   ebp
9f0016b9:	89 e5                	mov    ebp,esp
9f0016bb:	83 ec 10             	sub    esp,0x10
9f0016be:	e8 eb 39 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0016c3:	05 d9 66 00 00       	add    eax,0x66d9
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:127
    va_list args;
    va_start( args, format );
9f0016c8:	8d 45 10             	lea    eax,[ebp+0x10]
9f0016cb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
9f0016ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0016d1:	89 c2                	mov    edx,eax
9f0016d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0016d6:	52                   	push   edx
9f0016d7:	50                   	push   eax
9f0016d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0016db:	68 01 03 00 00       	push   0x301
9f0016e0:	e8 7d fc ff ff       	call   9f001362 <do_syscall3>
9f0016e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
    return 0;
9f0016e8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
    va_end(args);
}
9f0016ed:	c9                   	leave  
9f0016ee:	c3                   	ret    

9f0016ef <sleepMS>:
sleepMS():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135

VISIBLE unsigned int sleepMS (unsigned int __ms)
{
9f0016ef:	55                   	push   ebp
9f0016f0:	89 e5                	mov    ebp,esp
9f0016f2:	56                   	push   esi
9f0016f3:	53                   	push   ebx
9f0016f4:	83 ec 10             	sub    esp,0x10
9f0016f7:	e8 b2 39 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0016fc:	05 a0 66 00 00       	add    eax,0x66a0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:136
    int ms=__ms*MS_PER_TICK;
9f001701:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001704:	69 c0 e8 03 00 00    	imul   eax,eax,0x3e8
9f00170a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00170f:	f7 e2                	mul    edx
9f001711:	89 d0                	mov    eax,edx
9f001713:	c1 e8 05             	shr    eax,0x5
9f001716:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
    return SLEEP_TICKS(ms);
9f001719:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00171c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00171f:	b8 70 01 00 00       	mov    eax,0x170
9f001724:	bb 00 00 00 00       	mov    ebx,0x0
9f001729:	b9 00 00 00 00       	mov    ecx,0x0
9f00172e:	ba 00 00 00 00       	mov    edx,0x0
9f001733:	be 00 00 00 00       	mov    esi,0x0
9f001738:	e8 fc ff ff ff       	call   9f001739 <sleepMS+0x4a>
9f00173d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f001740:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001743:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001746:	01 d0                	add    eax,edx
9f001748:	83 e8 01             	sub    eax,0x1
9f00174b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00174e:	b8 66 01 00 00       	mov    eax,0x166
9f001753:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
9f001756:	b9 00 00 00 00       	mov    ecx,0x0
9f00175b:	ba 00 00 00 00       	mov    edx,0x0
9f001760:	be 00 00 00 00       	mov    esi,0x0
9f001765:	e8 fc ff ff ff       	call   9f001766 <sleepMS+0x77>
9f00176a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f00176d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:138
}
9f001770:	83 c4 10             	add    esp,0x10
9f001773:	5b                   	pop    ebx
9f001774:	5e                   	pop    esi
9f001775:	5d                   	pop    ebp
9f001776:	c3                   	ret    

9f001777 <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141

VISIBLE unsigned int sleep (unsigned int __seconds)
{
9f001777:	55                   	push   ebp
9f001778:	89 e5                	mov    ebp,esp
9f00177a:	56                   	push   esi
9f00177b:	53                   	push   ebx
9f00177c:	83 ec 10             	sub    esp,0x10
9f00177f:	e8 2a 39 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001784:	05 18 66 00 00       	add    eax,0x6618
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    return SLEEP_SECONDS(__seconds);
9f001789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00178c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00178f:	b8 70 01 00 00       	mov    eax,0x170
9f001794:	bb 00 00 00 00       	mov    ebx,0x0
9f001799:	b9 00 00 00 00       	mov    ecx,0x0
9f00179e:	ba 00 00 00 00       	mov    edx,0x0
9f0017a3:	be 00 00 00 00       	mov    esi,0x0
9f0017a8:	e8 fc ff ff ff       	call   9f0017a9 <sleep+0x32>
9f0017ad:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0017b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017b3:	6b d0 64             	imul   edx,eax,0x64
9f0017b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0017b9:	01 d0                	add    eax,edx
9f0017bb:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f0017be:	b8 66 01 00 00       	mov    eax,0x166
9f0017c3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f0017c6:	b9 00 00 00 00       	mov    ecx,0x0
9f0017cb:	ba 00 00 00 00       	mov    edx,0x0
9f0017d0:	be 00 00 00 00       	mov    esi,0x0
9f0017d5:	e8 fc ff ff ff       	call   9f0017d6 <sleep+0x5f>
9f0017da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0017dd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
}
9f0017e0:	83 c4 10             	add    esp,0x10
9f0017e3:	5b                   	pop    ebx
9f0017e4:	5e                   	pop    esi
9f0017e5:	5d                   	pop    ebp
9f0017e6:	c3                   	ret    

9f0017e7 <sleepTicks>:
sleepTicks():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146

VISIBLE unsigned int sleepTicks(unsigned int __ticks)
{
9f0017e7:	55                   	push   ebp
9f0017e8:	89 e5                	mov    ebp,esp
9f0017ea:	56                   	push   esi
9f0017eb:	53                   	push   ebx
9f0017ec:	83 ec 10             	sub    esp,0x10
9f0017ef:	e8 ba 38 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0017f4:	05 a8 65 00 00       	add    eax,0x65a8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
    return SLEEP_TICKS(__ticks);
9f0017f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0017fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f0017ff:	b8 70 01 00 00       	mov    eax,0x170
9f001804:	bb 00 00 00 00       	mov    ebx,0x0
9f001809:	b9 00 00 00 00       	mov    ecx,0x0
9f00180e:	ba 00 00 00 00       	mov    edx,0x0
9f001813:	be 00 00 00 00       	mov    esi,0x0
9f001818:	e8 fc ff ff ff       	call   9f001819 <sleepTicks+0x32>
9f00181d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001820:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f001823:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001826:	01 d0                	add    eax,edx
9f001828:	83 e8 01             	sub    eax,0x1
9f00182b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
9f00182e:	b8 66 01 00 00       	mov    eax,0x166
9f001833:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
9f001836:	b9 00 00 00 00       	mov    ecx,0x0
9f00183b:	ba 00 00 00 00       	mov    edx,0x0
9f001840:	be 00 00 00 00       	mov    esi,0x0
9f001845:	e8 fc ff ff ff       	call   9f001846 <sleepTicks+0x5f>
9f00184a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00184d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
    
}
9f001850:	83 c4 10             	add    esp,0x10
9f001853:	5b                   	pop    ebx
9f001854:	5e                   	pop    esi
9f001855:	5d                   	pop    ebp
9f001856:	c3                   	ret    

9f001857 <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152

void stop()
{
9f001857:	55                   	push   ebp
9f001858:	89 e5                	mov    ebp,esp
9f00185a:	e8 4f 38 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00185f:	05 3d 65 00 00       	add    eax,0x653d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153
    do_syscall0(SYSCALL_STOP);
9f001864:	68 68 01 00 00       	push   0x168
9f001869:	e8 ae fb ff ff       	call   9f00141c <do_syscall0>
9f00186e:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154
}
9f001871:	90                   	nop
9f001872:	c9                   	leave  
9f001873:	c3                   	ret    

9f001874 <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
9f001874:	55                   	push   ebp
9f001875:	89 e5                	mov    ebp,esp
9f001877:	e8 32 38 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00187c:	05 20 65 00 00       	add    eax,0x6520
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:158
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
9f001881:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001884:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001887:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00188a:	51                   	push   ecx
9f00188b:	52                   	push   edx
9f00188c:	50                   	push   eax
9f00188d:	68 67 01 00 00       	push   0x167
9f001892:	e8 cb fa ff ff       	call   9f001362 <do_syscall3>
9f001897:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:159
}
9f00189a:	90                   	nop
9f00189b:	c9                   	leave  
9f00189c:	c3                   	ret    

9f00189d <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:162

VISIBLE int fork()
{
9f00189d:	55                   	push   ebp
9f00189e:	89 e5                	mov    ebp,esp
9f0018a0:	83 ec 10             	sub    esp,0x10
9f0018a3:	e8 06 38 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0018a8:	05 f4 64 00 00       	add    eax,0x64f4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:163
    uint32_t retVal = 0;
9f0018ad:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:165
    //return do_syscall0(SYSCALL_FORK);
    return do_syscall0(SYSCALL_FORK);
9f0018b4:	6a 0e                	push   0xe
9f0018b6:	e8 61 fb ff ff       	call   9f00141c <do_syscall0>
9f0018bb:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    //asm("call sysEnter_Vector\n":"=a" (retVal): "a" (SYSCALL_FORK));
    return retVal;
}
9f0018be:	c9                   	leave  
9f0018bf:	c3                   	ret    

9f0018c0 <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171

VISIBLE int exec(char* path, int argc, char** argv)
{
9f0018c0:	55                   	push   ebp
9f0018c1:	89 e5                	mov    ebp,esp
9f0018c3:	83 ec 10             	sub    esp,0x10
9f0018c6:	e8 e3 37 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0018cb:	05 d1 64 00 00       	add    eax,0x64d1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
    int pid=0;
9f0018d0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:173
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
9f0018d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0018da:	8d 80 ce f6 ff ff    	lea    eax,[eax-0x932]
9f0018e0:	50                   	push   eax
9f0018e1:	68 00 00 00 02       	push   0x2000000
9f0018e6:	e8 cd fd ff ff       	call   9f0016b8 <printdI>
9f0018eb:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:174
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
9f0018ee:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0018f1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f0018f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0018f7:	51                   	push   ecx
9f0018f8:	52                   	push   edx
9f0018f9:	50                   	push   eax
9f0018fa:	6a 59                	push   0x59
9f0018fc:	e8 61 fa ff ff       	call   9f001362 <do_syscall3>
9f001901:	83 c4 10             	add    esp,0x10
9f001904:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:175
    return pid;
9f001907:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
}
9f00190a:	c9                   	leave  
9f00190b:	c3                   	ret    

9f00190c <execb>:
execb():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:179

VISIBLE int execb(char* path)
{
9f00190c:	55                   	push   ebp
9f00190d:	89 e5                	mov    ebp,esp
9f00190f:	53                   	push   ebx
9f001910:	83 ec 24             	sub    esp,0x24
9f001913:	e8 9a 37 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f001918:	81 c3 84 64 00 00    	add    ebx,0x6484
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180
    int pid=0, argc=0;
9f00191e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
9f001925:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:182
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
9f00192c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00192f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001932:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001935:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:184
    char* program;
    program=mallocI(512);
9f001938:	83 ec 0c             	sub    esp,0xc
9f00193b:	68 00 02 00 00       	push   0x200
9f001940:	e8 28 0a 00 00       	call   9f00236d <mallocI>
9f001945:	83 c4 10             	add    esp,0x10
9f001948:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187
    do
    {
        spacePtr=strstrI(spacePtr," ");
9f00194b:	83 ec 08             	sub    esp,0x8
9f00194e:	8d 83 e1 f6 ff ff    	lea    eax,[ebx-0x91f]
9f001954:	50                   	push   eax
9f001955:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001958:	e8 b5 29 00 00       	call   9f004312 <strstrI>
9f00195d:	83 c4 10             	add    esp,0x10
9f001960:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:188
        if (argc==0)
9f001963:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001967:	75 44                	jne    9f0019ad <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:190
        {
            if (spacePtr==0)
9f001969:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00196d:	75 22                	jne    9f001991 <execb+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:191
                strncpyI(program, path, strlenI(path));
9f00196f:	83 ec 0c             	sub    esp,0xc
9f001972:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001975:	e8 c2 21 00 00       	call   9f003b3c <strlenI>
9f00197a:	83 c4 10             	add    esp,0x10
9f00197d:	83 ec 04             	sub    esp,0x4
9f001980:	50                   	push   eax
9f001981:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001984:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f001987:	e8 24 23 00 00       	call   9f003cb0 <strncpyI>
9f00198c:	83 c4 10             	add    esp,0x10
9f00198f:	eb 1c                	jmp    9f0019ad <execb+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:193
            else
                strncpyI(program, path, spacePtr-path);
9f001991:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001997:	29 c2                	sub    edx,eax
9f001999:	89 d0                	mov    eax,edx
9f00199b:	83 ec 04             	sub    esp,0x4
9f00199e:	50                   	push   eax
9f00199f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0019a2:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0019a5:	e8 06 23 00 00       	call   9f003cb0 <strncpyI>
9f0019aa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:195
        }
        argc++;
9f0019ad:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:197
            
    } while (spacePtr++);
9f0019b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0019b4:	8d 50 01             	lea    edx,[eax+0x1]
9f0019b7:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0019ba:	85 c0                	test   eax,eax
9f0019bc:	75 8d                	jne    9f00194b <execb+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:199
    
    argv=mallocI((argc*50)+(argc*4));
9f0019be:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0019c1:	6b c0 36             	imul   eax,eax,0x36
9f0019c4:	83 ec 0c             	sub    esp,0xc
9f0019c7:	50                   	push   eax
9f0019c8:	e8 a0 09 00 00       	call   9f00236d <mallocI>
9f0019cd:	83 c4 10             	add    esp,0x10
9f0019d0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:200
    int argvPtr=4*argc;
9f0019d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0019d6:	c1 e0 02             	shl    eax,0x2
9f0019d9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:201
    spacePtr=path;
9f0019dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0019df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202
    for (int cnt=0;cnt<argc; cnt++)
9f0019e2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
9f0019e9:	e9 c8 00 00 00       	jmp    9f001ab6 <execb+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:204
    {
        argv[cnt]=(char*)argv+argvPtr;
9f0019ee:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0019f1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f0019f8:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0019fb:	01 d0                	add    eax,edx
9f0019fd:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
9f001a00:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
9f001a03:	01 ca                	add    edx,ecx
9f001a05:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:205
        spacePtr=strstrI(spacePtr," ");
9f001a07:	83 ec 08             	sub    esp,0x8
9f001a0a:	8d 83 e1 f6 ff ff    	lea    eax,[ebx-0x91f]
9f001a10:	50                   	push   eax
9f001a11:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001a14:	e8 f9 28 00 00       	call   9f004312 <strstrI>
9f001a19:	83 c4 10             	add    esp,0x10
9f001a1c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:206
        if (spacePtr)
9f001a1f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f001a23:	74 2f                	je     9f001a54 <execb+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:207
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001a25:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f001a28:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f001a2b:	29 c2                	sub    edx,eax
9f001a2d:	89 d0                	mov    eax,edx
9f001a2f:	89 c1                	mov    ecx,eax
9f001a31:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001a34:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001a3b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001a3e:	01 d0                	add    eax,edx
9f001a40:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a42:	83 ec 04             	sub    esp,0x4
9f001a45:	51                   	push   ecx
9f001a46:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001a49:	50                   	push   eax
9f001a4a:	e8 61 22 00 00       	call   9f003cb0 <strncpyI>
9f001a4f:	83 c4 10             	add    esp,0x10
9f001a52:	eb 31                	jmp    9f001a85 <execb+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:209
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001a54:	83 ec 0c             	sub    esp,0xc
9f001a57:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001a5a:	e8 dd 20 00 00       	call   9f003b3c <strlenI>
9f001a5f:	83 c4 10             	add    esp,0x10
9f001a62:	89 c2                	mov    edx,eax
9f001a64:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001a67:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001a6e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001a71:	01 c8                	add    eax,ecx
9f001a73:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a75:	83 ec 04             	sub    esp,0x4
9f001a78:	52                   	push   edx
9f001a79:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f001a7c:	50                   	push   eax
9f001a7d:	e8 2e 22 00 00       	call   9f003cb0 <strncpyI>
9f001a82:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:210 (discriminator 2)
        strtrimI(argv[cnt]);
9f001a85:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001a88:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001a8f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001a92:	01 d0                	add    eax,edx
9f001a94:	8b 00                	mov    eax,DWORD PTR [eax]
9f001a96:	83 ec 0c             	sub    esp,0xc
9f001a99:	50                   	push   eax
9f001a9a:	e8 d9 25 00 00       	call   9f004078 <strtrimI>
9f001a9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:211 (discriminator 2)
        lastSpacePtr=spacePtr++;
9f001aa2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001aa5:	8d 50 01             	lea    edx,[eax+0x1]
9f001aa8:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001aab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:212 (discriminator 2)
        argvPtr+=50;
9f001aae:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
9f001ab2:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:202 (discriminator 1)
9f001ab6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ab9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001abc:	0f 8c 2c ff ff ff    	jl     9f0019ee <execb+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:214
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: execb for %s\n",path);;
9f001ac2:	83 ec 04             	sub    esp,0x4
9f001ac5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001ac8:	8d 83 e3 f6 ff ff    	lea    eax,[ebx-0x91d]
9f001ace:	50                   	push   eax
9f001acf:	68 00 00 00 02       	push   0x2000000
9f001ad4:	e8 df fb ff ff       	call   9f0016b8 <printdI>
9f001ad9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:215
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)program, argc, (uintptr_t)argv);
9f001adc:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
9f001adf:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001ae2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001ae5:	51                   	push   ecx
9f001ae6:	52                   	push   edx
9f001ae7:	50                   	push   eax
9f001ae8:	68 05 03 00 00       	push   0x305
9f001aed:	e8 70 f8 ff ff       	call   9f001362 <do_syscall3>
9f001af2:	83 c4 10             	add    esp,0x10
9f001af5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:219
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
9f001af8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:222
    freeI(argv);
    freeI(program);
}
9f001afb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f001afe:	c9                   	leave  
9f001aff:	c3                   	ret    

9f001b00 <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:225

VISIBLE int execa(char* path, int argc, char** argv)
{
9f001b00:	55                   	push   ebp
9f001b01:	89 e5                	mov    ebp,esp
9f001b03:	83 ec 10             	sub    esp,0x10
9f001b06:	e8 a3 35 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001b0b:	05 91 62 00 00       	add    eax,0x6291
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:226
    int pid=0;
9f001b10:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:227
    printdI(DEBUG_LIBC,"libc: execa for %s\n",path);;
9f001b17:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b1a:	8d 80 f7 f6 ff ff    	lea    eax,[eax-0x909]
9f001b20:	50                   	push   eax
9f001b21:	68 00 00 00 02       	push   0x2000000
9f001b26:	e8 8d fb ff ff       	call   9f0016b8 <printdI>
9f001b2b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:228
    pid = do_syscall3(SYSCALL_EXECNEW, (uintptr_t)path, argc, (uintptr_t)argv);
9f001b2e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f001b31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f001b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b37:	51                   	push   ecx
9f001b38:	52                   	push   edx
9f001b39:	50                   	push   eax
9f001b3a:	68 05 03 00 00       	push   0x305
9f001b3f:	e8 1e f8 ff ff       	call   9f001362 <do_syscall3>
9f001b44:	83 c4 10             	add    esp,0x10
9f001b47:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:229
    return pid;
9f001b4a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:230
}
9f001b4d:	c9                   	leave  
9f001b4e:	c3                   	ret    

9f001b4f <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:233

VISIBLE int waitpid(uint32_t pid)
{
9f001b4f:	55                   	push   ebp
9f001b50:	89 e5                	mov    ebp,esp
9f001b52:	e8 57 35 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001b57:	05 45 62 00 00       	add    eax,0x6245
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:234
    return do_syscall1(SYSCALL_WAITFORPID,pid);
9f001b5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001b5f:	6a 61                	push   0x61
9f001b61:	e8 76 f8 ff ff       	call   9f0013dc <do_syscall1>
9f001b66:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:235
}
9f001b69:	c9                   	leave  
9f001b6a:	c3                   	ret    

9f001b6b <exit>:
exit():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:239


VISIBLE void exit (int status)
{
9f001b6b:	55                   	push   ebp
9f001b6c:	89 e5                	mov    ebp,esp
9f001b6e:	e8 3b 35 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001b73:	05 29 62 00 00       	add    eax,0x6229
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:240
    do_syscall2(SYSCALL_ENDPROCESS, 0, status);
9f001b78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b7b:	50                   	push   eax
9f001b7c:	6a 00                	push   0x0
9f001b7e:	6a 01                	push   0x1
9f001b80:	e8 19 f8 ff ff       	call   9f00139e <do_syscall2>
9f001b85:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:241
}
9f001b88:	90                   	nop
9f001b89:	c9                   	leave  
9f001b8a:	c3                   	ret    

9f001b8b <setcwd>:
setcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:244

VISIBLE char* setcwd(char* buf, size_t size)
{
9f001b8b:	55                   	push   ebp
9f001b8c:	89 e5                	mov    ebp,esp
9f001b8e:	e8 1b 35 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001b93:	05 09 62 00 00       	add    eax,0x6209
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:245
    return (char*)do_syscall2(SYSCALL_SETCWD,(uint32_t)buf,size);
9f001b98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001b9b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001b9e:	50                   	push   eax
9f001b9f:	6a 50                	push   0x50
9f001ba1:	e8 f8 f7 ff ff       	call   9f00139e <do_syscall2>
9f001ba6:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:246
}
9f001ba9:	c9                   	leave  
9f001baa:	c3                   	ret    

9f001bab <splitI>:
splitI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:249

size_t splitI(char *buffer, char *argv[], size_t argv_size)
{
9f001bab:	55                   	push   ebp
9f001bac:	89 e5                	mov    ebp,esp
9f001bae:	83 ec 20             	sub    esp,0x20
9f001bb1:	e8 f8 34 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001bb6:	05 e6 61 00 00       	add    eax,0x61e6
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:252
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
9f001bbb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:253
    size_t argc = 0;
9f001bc2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001bc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f001bcc:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
9f001bcf:	e9 d8 00 00 00       	jmp    9f001cac <splitI+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:256
        c = (unsigned char) *p;
9f001bd4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001bd7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001bda:	0f b6 c0             	movzx  eax,al
9f001bdd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:257
        switch (state) {
9f001be0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001be3:	83 f8 01             	cmp    eax,0x1
9f001be6:	74 7e                	je     9f001c66 <splitI+0xbb>
9f001be8:	83 f8 01             	cmp    eax,0x1
9f001beb:	72 0a                	jb     9f001bf7 <splitI+0x4c>
9f001bed:	83 f8 02             	cmp    eax,0x2
9f001bf0:	74 45                	je     9f001c37 <splitI+0x8c>
9f001bf2:	e9 b1 00 00 00       	jmp    9f001ca8 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:259
        case DULL:
            if (ISSPACE(c)) {
9f001bf7:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001bfb:	0f 94 c0             	sete   al
9f001bfe:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
9f001c01:	0f b6 45 eb          	movzx  eax,BYTE PTR [ebp-0x15]
9f001c05:	84 c0                	test   al,al
9f001c07:	0f 85 94 00 00 00    	jne    9f001ca1 <splitI+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:263
                continue;
            }

            if (c == '"') {
9f001c0d:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001c11:	75 15                	jne    9f001c28 <splitI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:264
                state = IN_STRING;
9f001c13:	c7 45 f4 02 00 00 00 	mov    DWORD PTR [ebp-0xc],0x2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:265
                start_of_word = p + 1; 
9f001c1a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c1d:	83 c0 01             	add    eax,0x1
9f001c20:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:266
                continue;
9f001c23:	e9 80 00 00 00       	jmp    9f001ca8 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:268
            }
            state = IN_WORD;
9f001c28:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:269
            start_of_word = p;
9f001c2f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c32:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:270
            continue;
9f001c35:	eb 71                	jmp    9f001ca8 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:273

        case IN_STRING:
            if (c == '"') {
9f001c37:	83 7d ec 22          	cmp    DWORD PTR [ebp-0x14],0x22
9f001c3b:	75 67                	jne    9f001ca4 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:274
                *p = 0;
9f001c3d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c40:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:275
                argv[argc++] = start_of_word;
9f001c43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001c46:	8d 50 01             	lea    edx,[eax+0x1]
9f001c49:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001c4c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001c53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c56:	01 c2                	add    edx,eax
9f001c58:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001c5b:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:276
                state = DULL;
9f001c5d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:278
            }
            continue;
9f001c64:	eb 3e                	jmp    9f001ca4 <splitI+0xf9>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:281

        case IN_WORD:
            if (ISSPACE(c)) {
9f001c66:	83 7d ec 20          	cmp    DWORD PTR [ebp-0x14],0x20
9f001c6a:	0f 94 c0             	sete   al
9f001c6d:	88 45 ea             	mov    BYTE PTR [ebp-0x16],al
9f001c70:	0f b6 45 ea          	movzx  eax,BYTE PTR [ebp-0x16]
9f001c74:	84 c0                	test   al,al
9f001c76:	74 2f                	je     9f001ca7 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:282
                *p = 0;
9f001c78:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001c7b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:283
                argv[argc++] = start_of_word;
9f001c7e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001c81:	8d 50 01             	lea    edx,[eax+0x1]
9f001c84:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001c87:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001c8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001c91:	01 c2                	add    edx,eax
9f001c93:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001c96:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:284
                state = DULL;
9f001c98:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286
            }
            continue;
9f001c9f:	eb 06                	jmp    9f001ca7 <splitI+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:260
    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
        c = (unsigned char) *p;
        switch (state) {
        case DULL:
            if (ISSPACE(c)) {
                continue;
9f001ca1:	90                   	nop
9f001ca2:	eb 04                	jmp    9f001ca8 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:278
            if (c == '"') {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001ca4:	90                   	nop
9f001ca5:	eb 01                	jmp    9f001ca8 <splitI+0xfd>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:286
            if (ISSPACE(c)) {
                *p = 0;
                argv[argc++] = start_of_word;
                state = DULL;
            }
            continue;
9f001ca7:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255 (discriminator 2)
    char *p, *start_of_word;
    int c;
    enum states { DULL, IN_WORD, IN_STRING } state = DULL;
    size_t argc = 0;

    for (p = buffer; argc < argv_size && *p != '\0'; p++) {
9f001ca8:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255 (discriminator 1)
9f001cac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001caf:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001cb2:	73 0e                	jae    9f001cc2 <splitI+0x117>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:255 (discriminator 3)
9f001cb4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f001cb7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001cba:	84 c0                	test   al,al
9f001cbc:	0f 85 12 ff ff ff    	jne    9f001bd4 <splitI+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290
            }
            continue;
        }
    }

    if (state != DULL && argc < argv_size)
9f001cc2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001cc6:	74 22                	je     9f001cea <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:290 (discriminator 1)
9f001cc8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001ccb:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
9f001cce:	73 1a                	jae    9f001cea <splitI+0x13f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:291
        argv[argc++] = start_of_word;
9f001cd0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001cd3:	8d 50 01             	lea    edx,[eax+0x1]
9f001cd6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f001cd9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001ce0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ce3:	01 c2                	add    edx,eax
9f001ce5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f001ce8:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:293

    return argc;
9f001cea:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:294
}
9f001ced:	c9                   	leave  
9f001cee:	c3                   	ret    

9f001cef <split>:
split():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:297

VISIBLE size_t split(char *buffer, char *argv[], size_t argv_size)
{
9f001cef:	55                   	push   ebp
9f001cf0:	89 e5                	mov    ebp,esp
9f001cf2:	e8 b7 33 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f001cf7:	05 a5 60 00 00       	add    eax,0x60a5
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:298
    return splitI(buffer, argv, argv_size);
9f001cfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f001cff:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f001d02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001d05:	e8 a1 fe ff ff       	call   9f001bab <splitI>
9f001d0a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:299
}
9f001d0d:	c9                   	leave  
9f001d0e:	c3                   	ret    

9f001d0f <cmdlineToArgvI>:
cmdlineToArgvI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:302

char** cmdlineToArgvI(const char* cmdline, int *argc)
{
9f001d0f:	55                   	push   ebp
9f001d10:	89 e5                	mov    ebp,esp
9f001d12:	56                   	push   esi
9f001d13:	53                   	push   ebx
9f001d14:	81 ec 30 04 00 00    	sub    esp,0x430
9f001d1a:	e8 93 33 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f001d1f:	81 c3 7d 60 00 00    	add    ebx,0x607d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:305
    char** argv;
    char cmd[1024];
    char *spacePtr=cmd, *lastSpacePtr=cmd, *quotePtr=cmd;
9f001d25:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d2b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001d2e:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d34:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f001d37:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d3d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:306
    char dblquote[2] = {'"',0};
9f001d40:	c6 85 d6 fb ff ff 22 	mov    BYTE PTR [ebp-0x42a],0x22
9f001d47:	c6 85 d7 fb ff ff 00 	mov    BYTE PTR [ebp-0x429],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:307
    *argc = 0;
9f001d4e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001d51:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:309
    
    strncpyI(cmd,cmdline,1024);
9f001d57:	83 ec 04             	sub    esp,0x4
9f001d5a:	68 00 04 00 00       	push   0x400
9f001d5f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f001d62:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d68:	50                   	push   eax
9f001d69:	e8 42 1f 00 00       	call   9f003cb0 <strncpyI>
9f001d6e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:310
    strtrimI(cmd);
9f001d71:	83 ec 0c             	sub    esp,0xc
9f001d74:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001d7a:	50                   	push   eax
9f001d7b:	e8 f8 22 00 00       	call   9f004078 <strtrimI>
9f001d80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:313
    do
    {
        quotePtr = strnstrI(spacePtr,dblquote,4000);        //Need to honor double quotes
9f001d83:	83 ec 04             	sub    esp,0x4
9f001d86:	68 a0 0f 00 00       	push   0xfa0
9f001d8b:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001d91:	50                   	push   eax
9f001d92:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001d95:	e8 da 24 00 00       	call   9f004274 <strnstrI>
9f001d9a:	83 c4 10             	add    esp,0x10
9f001d9d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:314
        spacePtr=strstrI(spacePtr," ");
9f001da0:	83 ec 08             	sub    esp,0x8
9f001da3:	8d 83 e1 f6 ff ff    	lea    eax,[ebx-0x91f]
9f001da9:	50                   	push   eax
9f001daa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001dad:	e8 60 25 00 00       	call   9f004312 <strstrI>
9f001db2:	83 c4 10             	add    esp,0x10
9f001db5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315
        if (quotePtr!=0 && (quotePtr <= spacePtr))                            //If a double quote shows up before a space ...
9f001db8:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001dbc:	74 48                	je     9f001e06 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:315 (discriminator 1)
9f001dbe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001dc1:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001dc4:	77 40                	ja     9f001e06 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:317
        {
            char *temp = spacePtr;
9f001dc6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001dc9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:318
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);  //Look for the closing double quote
9f001dcc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001dcf:	8d 50 01             	lea    edx,[eax+0x1]
9f001dd2:	83 ec 04             	sub    esp,0x4
9f001dd5:	68 a0 0f 00 00       	push   0xfa0
9f001dda:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001de0:	50                   	push   eax
9f001de1:	52                   	push   edx
9f001de2:	e8 8d 24 00 00       	call   9f004274 <strnstrI>
9f001de7:	83 c4 10             	add    esp,0x10
9f001dea:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:319
            if (spacePtr>=quotePtr+4000)
9f001ded:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001df0:	05 a0 0f 00 00       	add    eax,0xfa0
9f001df5:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001df8:	77 08                	ja     9f001e02 <cmdlineToArgvI+0xf3>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:320
                spacePtr = temp;                            //Didn't find it so resume normal processing (space bound)
9f001dfa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f001dfd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f001e00:	eb 04                	jmp    9f001e06 <cmdlineToArgvI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:322
            else
                spacePtr += 1;                              //Skip the closing quote
9f001e02:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:324
        }
        *argc+=1;
9f001e06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e09:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e0b:	8d 50 01             	lea    edx,[eax+0x1]
9f001e0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e11:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325
        if (spacePtr!=0 && *spacePtr)
9f001e13:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001e17:	74 0e                	je     9f001e27 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:325 (discriminator 1)
9f001e19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001e1c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e1f:	84 c0                	test   al,al
9f001e21:	74 04                	je     9f001e27 <cmdlineToArgvI+0x118>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:326
            spacePtr++;
9f001e23:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328
    
    } while (spacePtr!=0 && *spacePtr);
9f001e27:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001e2b:	74 0e                	je     9f001e3b <cmdlineToArgvI+0x12c>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:328 (discriminator 1)
9f001e2d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001e30:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f001e33:	84 c0                	test   al,al
9f001e35:	0f 85 48 ff ff ff    	jne    9f001d83 <cmdlineToArgvI+0x74>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:330
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
9f001e3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e3e:	8b 10                	mov    edx,DWORD PTR [eax]
9f001e40:	89 d0                	mov    eax,edx
9f001e42:	c1 e0 08             	shl    eax,0x8
9f001e45:	29 d0                	sub    eax,edx
9f001e47:	89 c2                	mov    edx,eax
9f001e49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e4c:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e4e:	c1 e0 02             	shl    eax,0x2
9f001e51:	01 d0                	add    eax,edx
9f001e53:	83 ec 0c             	sub    esp,0xc
9f001e56:	50                   	push   eax
9f001e57:	e8 11 05 00 00       	call   9f00236d <mallocI>
9f001e5c:	83 c4 10             	add    esp,0x10
9f001e5f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:331
    int argvPtr=4* *argc;
9f001e62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001e65:	8b 00                	mov    eax,DWORD PTR [eax]
9f001e67:	c1 e0 02             	shl    eax,0x2
9f001e6a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:332
    spacePtr=cmd;
9f001e6d:	8d 85 d8 fb ff ff    	lea    eax,[ebp-0x428]
9f001e73:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333
    for (int cnt=0;cnt<*argc; cnt++)
9f001e76:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f001e7d:	e9 72 01 00 00       	jmp    9f001ff4 <cmdlineToArgvI+0x2e5>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:335
    {
        argv[cnt]=(char*)argv+argvPtr;
9f001e82:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001e85:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001e8c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001e8f:	01 d0                	add    eax,edx
9f001e91:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f001e94:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f001e97:	01 ca                	add    edx,ecx
9f001e99:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:336
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
9f001e9b:	83 ec 04             	sub    esp,0x4
9f001e9e:	68 a0 0f 00 00       	push   0xfa0
9f001ea3:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001ea9:	50                   	push   eax
9f001eaa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001ead:	e8 c2 23 00 00       	call   9f004274 <strnstrI>
9f001eb2:	83 c4 10             	add    esp,0x10
9f001eb5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
9f001eb8:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f001ebc:	0f 84 80 00 00 00    	je     9f001f42 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:337 (discriminator 1)
9f001ec2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ec5:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001ec8:	77 78                	ja     9f001f42 <cmdlineToArgvI+0x233>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:339
        {
            char *temp = spacePtr;
9f001eca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001ecd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:340
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
9f001ed0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ed3:	8d 50 01             	lea    edx,[eax+0x1]
9f001ed6:	83 ec 04             	sub    esp,0x4
9f001ed9:	68 a0 0f 00 00       	push   0xfa0
9f001ede:	8d 85 d6 fb ff ff    	lea    eax,[ebp-0x42a]
9f001ee4:	50                   	push   eax
9f001ee5:	52                   	push   edx
9f001ee6:	e8 89 23 00 00       	call   9f004274 <strnstrI>
9f001eeb:	83 c4 10             	add    esp,0x10
9f001eee:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:341
            if (spacePtr>=quotePtr+4000)
9f001ef1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001ef4:	05 a0 0f 00 00       	add    eax,0xfa0
9f001ef9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f001efc:	77 0b                	ja     9f001f09 <cmdlineToArgvI+0x1fa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:342
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
9f001efe:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f001f01:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001f04:	e9 d4 00 00 00       	jmp    9f001fdd <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:345
            spacePtr = strnstrI(quotePtr+1,dblquote,4000);              //Look for the closing double quote
            if (spacePtr>=quotePtr+4000)
                spacePtr = temp;                                        //Didn't find it so resume normal processing (space bound)
            else
            {
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
9f001f09:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001f0c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f0f:	29 c2                	sub    edx,eax
9f001f11:	89 d0                	mov    eax,edx
9f001f13:	83 e8 02             	sub    eax,0x2
9f001f16:	89 c6                	mov    esi,eax
9f001f18:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f001f1b:	8d 50 01             	lea    edx,[eax+0x1]
9f001f1e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001f21:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001f28:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001f2b:	01 c8                	add    eax,ecx
9f001f2d:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f2f:	83 ec 04             	sub    esp,0x4
9f001f32:	56                   	push   esi
9f001f33:	52                   	push   edx
9f001f34:	50                   	push   eax
9f001f35:	e8 76 1d 00 00       	call   9f003cb0 <strncpyI>
9f001f3a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:338
    for (int cnt=0;cnt<*argc; cnt++)
    {
        argv[cnt]=(char*)argv+argvPtr;
        quotePtr = strnstrI(spacePtr,dblquote,4000);                    //Need to honor double quotes
        if (quotePtr && quotePtr <= spacePtr)                                       //If a double quote shows up before a space ...
        {
9f001f3d:	e9 9b 00 00 00       	jmp    9f001fdd <cmdlineToArgvI+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:350
                strncpyI(argv[cnt],quotePtr+1,spacePtr-lastSpacePtr-2); //parameter value becomes the entire quoted string minus the 2 quotes
            }
        }
        else
        {
            spacePtr=strstrI(spacePtr," ");
9f001f42:	83 ec 08             	sub    esp,0x8
9f001f45:	8d 83 e1 f6 ff ff    	lea    eax,[ebx-0x91f]
9f001f4b:	50                   	push   eax
9f001f4c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f001f4f:	e8 be 23 00 00       	call   9f004312 <strstrI>
9f001f54:	83 c4 10             	add    esp,0x10
9f001f57:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:351
            if (spacePtr)
9f001f5a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f001f5e:	74 2f                	je     9f001f8f <cmdlineToArgvI+0x280>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:352
                strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
9f001f60:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f001f63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f001f66:	29 c2                	sub    edx,eax
9f001f68:	89 d0                	mov    eax,edx
9f001f6a:	89 c1                	mov    ecx,eax
9f001f6c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001f6f:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001f76:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001f79:	01 d0                	add    eax,edx
9f001f7b:	8b 00                	mov    eax,DWORD PTR [eax]
9f001f7d:	83 ec 04             	sub    esp,0x4
9f001f80:	51                   	push   ecx
9f001f81:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001f84:	50                   	push   eax
9f001f85:	e8 26 1d 00 00       	call   9f003cb0 <strncpyI>
9f001f8a:	83 c4 10             	add    esp,0x10
9f001f8d:	eb 31                	jmp    9f001fc0 <cmdlineToArgvI+0x2b1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:354
            else
                strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
9f001f8f:	83 ec 0c             	sub    esp,0xc
9f001f92:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001f95:	e8 a2 1b 00 00       	call   9f003b3c <strlenI>
9f001f9a:	83 c4 10             	add    esp,0x10
9f001f9d:	89 c2                	mov    edx,eax
9f001f9f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001fa2:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
9f001fa9:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001fac:	01 c8                	add    eax,ecx
9f001fae:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fb0:	83 ec 04             	sub    esp,0x4
9f001fb3:	52                   	push   edx
9f001fb4:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f001fb7:	50                   	push   eax
9f001fb8:	e8 f3 1c 00 00       	call   9f003cb0 <strncpyI>
9f001fbd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:355
            strtrimI(argv[cnt]);
9f001fc0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f001fc3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f001fca:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f001fcd:	01 d0                	add    eax,edx
9f001fcf:	8b 00                	mov    eax,DWORD PTR [eax]
9f001fd1:	83 ec 0c             	sub    esp,0xc
9f001fd4:	50                   	push   eax
9f001fd5:	e8 9e 20 00 00       	call   9f004078 <strtrimI>
9f001fda:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:357 (discriminator 2)
        }
        lastSpacePtr=spacePtr++;
9f001fdd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f001fe0:	8d 50 01             	lea    edx,[eax+0x1]
9f001fe3:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f001fe6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:358 (discriminator 2)
        argvPtr+=MAXPARAMLEN;
9f001fe9:	81 45 ec ff 00 00 00 	add    DWORD PTR [ebp-0x14],0xff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333 (discriminator 2)
    } while (spacePtr!=0 && *spacePtr);
    
    argv=mallocI((*argc*MAXPARAMLEN)+(*argc*sizeof(int)));
    int argvPtr=4* *argc;
    spacePtr=cmd;
    for (int cnt=0;cnt<*argc; cnt++)
9f001ff0:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:333 (discriminator 1)
9f001ff4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f001ff7:	8b 00                	mov    eax,DWORD PTR [eax]
9f001ff9:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f001ffc:	0f 8f 80 fe ff ff    	jg     9f001e82 <cmdlineToArgvI+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:360
            strtrimI(argv[cnt]);
        }
        lastSpacePtr=spacePtr++;
        argvPtr+=MAXPARAMLEN;
    }
    return argv;
9f002002:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:361
}
9f002005:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002008:	5b                   	pop    ebx
9f002009:	5e                   	pop    esi
9f00200a:	5d                   	pop    ebp
9f00200b:	c3                   	ret    

9f00200c <cmdlineToArgv>:
cmdlineToArgv():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:364

VISIBLE char** cmdlineToArgv(char* cmdline, int *argc)
{
9f00200c:	55                   	push   ebp
9f00200d:	89 e5                	mov    ebp,esp
9f00200f:	83 ec 08             	sub    esp,0x8
9f002012:	e8 97 30 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f002017:	05 85 5d 00 00       	add    eax,0x5d85
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:365
    return cmdlineToArgvI(cmdline, argc);
9f00201c:	83 ec 08             	sub    esp,0x8
9f00201f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002022:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002025:	e8 e5 fc ff ff       	call   9f001d0f <cmdlineToArgvI>
9f00202a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:366
}
9f00202d:	c9                   	leave  
9f00202e:	c3                   	ret    

9f00202f <setSTD>:
setSTD():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:369

VISIBLE int setSTD(int std, uint32_t filed)
{
9f00202f:	55                   	push   ebp
9f002030:	89 e5                	mov    ebp,esp
9f002032:	e8 77 30 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f002037:	05 65 5d 00 00       	add    eax,0x5d65
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:370
    return do_syscall2(SYSCALL_SETSTD, std, filed);
9f00203c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00203f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002042:	50                   	push   eax
9f002043:	68 06 03 00 00       	push   0x306
9f002048:	e8 51 f3 ff ff       	call   9f00139e <do_syscall2>
9f00204d:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:371
}
9f002050:	c9                   	leave  
9f002051:	c3                   	ret    

9f002052 <takeADump>:
takeADump():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:374

VISIBLE void takeADump()
{
9f002052:	55                   	push   ebp
9f002053:	89 e5                	mov    ebp,esp
9f002055:	e8 54 30 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00205a:	05 42 5d 00 00       	add    eax,0x5d42
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:375
    do_syscall0(SYSCALL_TAKEADUMP);
9f00205f:	68 00 09 00 00       	push   0x900
9f002064:	e8 b3 f3 ff ff       	call   9f00141c <do_syscall0>
9f002069:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:376
}
9f00206c:	90                   	nop
9f00206d:	c9                   	leave  
9f00206e:	c3                   	ret    

9f00206f <setpriority>:
setpriority():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:379

VISIBLE int setpriority(int which, int who, int prio)
{
9f00206f:	55                   	push   ebp
9f002070:	89 e5                	mov    ebp,esp
9f002072:	e8 37 30 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f002077:	05 25 5d 00 00       	add    eax,0x5d25
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:380
    return do_syscall1(SYSCALL_SETPRIORITY,prio);
9f00207c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00207f:	50                   	push   eax
9f002080:	68 97 00 00 00       	push   0x97
9f002085:	e8 52 f3 ff ff       	call   9f0013dc <do_syscall1>
9f00208a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:381
9f00208d:	c9                   	leave  
9f00208e:	c3                   	ret    
9f00208f:	90                   	nop

9f002090 <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:14
//#include "../../../kproj/chrisOSKernel/include/syscalls.h"

syscall_mmap_t params;

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset)
{
9f002090:	55                   	push   ebp
9f002091:	89 e5                	mov    ebp,esp
9f002093:	53                   	push   ebx
9f002094:	83 ec 04             	sub    esp,0x4
9f002097:	e8 12 30 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00209c:	05 00 5d 00 00       	add    eax,0x5d00
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:16
    
    params.addr = addr;
9f0020a1:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020a7:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0020aa:	89 0a                	mov    DWORD PTR [edx],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:17
    params.len = len;
9f0020ac:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f0020af:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020b5:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:18
    params.prot = prot;
9f0020b8:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020be:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f0020c1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:19
    params.flags = flags;
9f0020c4:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020ca:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
9f0020cd:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:20
    params.fd = fd;
9f0020d0:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020d6:	8b 4d 18             	mov    ecx,DWORD PTR [ebp+0x18]
9f0020d9:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:21
    params.offset = offset;
9f0020dc:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020e2:	8b 4d 1c             	mov    ecx,DWORD PTR [ebp+0x1c]
9f0020e5:	89 4a 14             	mov    DWORD PTR [edx+0x14],ecx
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:23
    
    return (void*)do_syscall1(SYSCALL_MMAP, (uint32_t)&params);
9f0020e8:	8b 90 cc ff ff ff    	mov    edx,DWORD PTR [eax-0x34]
9f0020ee:	83 ec 08             	sub    esp,0x8
9f0020f1:	52                   	push   edx
9f0020f2:	6a 11                	push   0x11
9f0020f4:	89 c3                	mov    ebx,eax
9f0020f6:	e8 e1 f2 ff ff       	call   9f0013dc <do_syscall1>
9f0020fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libcmmap.c:24
}
9f0020fe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002101:	c9                   	leave  
9f002102:	c3                   	ret    
9f002103:	90                   	nop

9f002104 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:22
VISIBLE uint32_t heapBase=0;
VISIBLE uint32_t heapCurr=0;
VISIBLE uint32_t heapEnd=0;

void initmalloc()
{
9f002104:	55                   	push   ebp
9f002105:	89 e5                	mov    ebp,esp
9f002107:	53                   	push   ebx
9f002108:	83 ec 04             	sub    esp,0x4
9f00210b:	e8 a2 2f 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f002110:	81 c3 8c 5c 00 00    	add    ebx,0x5c8c
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
9f002116:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f00211c:	8b 00                	mov    eax,DWORD PTR [eax]
9f00211e:	50                   	push   eax
9f00211f:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002125:	50                   	push   eax
9f002126:	8d 83 0c f7 ff ff    	lea    eax,[ebx-0x8f4]
9f00212c:	50                   	push   eax
9f00212d:	68 00 00 00 01       	push   0x1000000
9f002132:	e8 81 f5 ff ff       	call   9f0016b8 <printdI>
9f002137:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:24
    heapBase=0;
9f00213a:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002140:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:25
    heapCurr=0;
9f002146:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00214c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    heapEnd=0;
9f002152:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f002158:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28

}
9f00215e:	90                   	nop
9f00215f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002162:	c9                   	leave  
9f002163:	c3                   	ret    

9f002164 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
9f002164:	55                   	push   ebp
9f002165:	89 e5                	mov    ebp,esp
9f002167:	83 ec 10             	sub    esp,0x10
9f00216a:	e8 3f 2f 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00216f:	05 2d 5c 00 00       	add    eax,0x5c2d
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
9f002174:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002177:	83 c2 30             	add    edx,0x30
9f00217a:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:36
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
9f00217d:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002183:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f002185:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002188:	01 d1                	add    ecx,edx
9f00218a:	8b 90 dc ff ff ff    	mov    edx,DWORD PTR [eax-0x24]
9f002190:	8b 12                	mov    edx,DWORD PTR [edx]
9f002192:	39 d1                	cmp    ecx,edx
9f002194:	76 4e                	jbe    9f0021e4 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:39
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
9f002196:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f00219c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00219e:	8b 80 dc ff ff ff    	mov    eax,DWORD PTR [eax-0x24]
9f0021a4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0021a6:	29 c2                	sub    edx,eax
9f0021a8:	89 d0                	mov    eax,edx
9f0021aa:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        if (newSize== 0 || newSize%PAGE_SIZE)
9f0021ad:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
9f0021b1:	74 0c                	je     9f0021bf <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40 (discriminator 1)
9f0021b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0021b6:	25 ff 0f 00 00       	and    eax,0xfff
9f0021bb:	85 c0                	test   eax,eax
9f0021bd:	74 10                	je     9f0021cf <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:42
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
9f0021bf:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0021c2:	25 00 f0 ff ff       	and    eax,0xfffff000
9f0021c7:	05 00 10 00 00       	add    eax,0x1000
9f0021cc:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:45
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < MALLOC_MINIMUM_REQUEST_SIZE)
9f0021cf:	81 7d fc ff 0f 00 00 	cmp    DWORD PTR [ebp-0x4],0xfff
9f0021d6:	77 07                	ja     9f0021df <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:46
            return MALLOC_MINIMUM_REQUEST_SIZE;
9f0021d8:	b8 00 10 00 00       	mov    eax,0x1000
9f0021dd:	eb 0a                	jmp    9f0021e9 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:48
        else
            return newSize;
9f0021df:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0021e2:	eb 05                	jmp    9f0021e9 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
    }
    else
        return 0;
9f0021e4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
}
9f0021e9:	c9                   	leave  
9f0021ea:	c3                   	ret    

9f0021eb <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55

void freeI(void* fpointer)
{
9f0021eb:	55                   	push   ebp
9f0021ec:	89 e5                	mov    ebp,esp
9f0021ee:	53                   	push   ebx
9f0021ef:	83 ec 14             	sub    esp,0x14
9f0021f2:	e8 b7 2e 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0021f7:	05 a5 5b 00 00       	add    eax,0x5ba5
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
9f0021fc:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f0021ff:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002205:	8b 12                	mov    edx,DWORD PTR [edx]
9f002207:	39 d1                	cmp    ecx,edx
9f002209:	72 4a                	jb     9f002255 <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:58 (discriminator 1)
9f00220b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
9f00220e:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f002214:	8b 12                	mov    edx,DWORD PTR [edx]
9f002216:	39 d1                	cmp    ecx,edx
9f002218:	77 3b                	ja     9f002255 <freeI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
        return;
    
    if (fpointer==NULL)
9f00221a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
9f00221e:	74 38                	je     9f002258 <freeI+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:63
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
9f002220:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002223:	83 ea 18             	sub    edx,0x18
9f002226:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:66
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=MALLOC_MARKER_VALUE)
9f002229:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00222c:	8b 12                	mov    edx,DWORD PTR [edx]
9f00222e:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f002234:	74 16                	je     9f00224c <freeI+0x61>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:68
    {
        printI("malloc: marker not found error!!!\n");
9f002236:	83 ec 0c             	sub    esp,0xc
9f002239:	8d 90 30 f7 ff ff    	lea    edx,[eax-0x8d0]
9f00223f:	52                   	push   edx
9f002240:	89 c3                	mov    ebx,eax
9f002242:	e8 06 f4 ff ff       	call   9f00164d <printI>
9f002247:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:69
        return; //Return silently ... for now
9f00224a:	eb 0d                	jmp    9f002259 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:71
    }
    mp->inUse=false;
9f00224c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00224f:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
9f002253:	eb 04                	jmp    9f002259 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if ((uint32_t)fpointer < heapBase || (uint32_t)fpointer > heapCurr)
        return;
9f002255:	90                   	nop
9f002256:	eb 01                	jmp    9f002259 <freeI+0x6e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
9f002258:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:76
    mp->inUse=false;
#ifdef MALLOC_CLEAR_ON_FREE
    uint32_t bytesToClear=0, bytesCleared=0;
    memset(fpointer,mp->len,MALLOC_DEFAULT_CLEAR_VALUE1);
#endif
}
9f002259:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00225c:	c9                   	leave  
9f00225d:	c3                   	ret    

9f00225e <mallocFindAvailableMemory>:
mallocFindAvailableMemory():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79

heaprec_t *mallocFindAvailableMemory(size_t size)
{
9f00225e:	55                   	push   ebp
9f00225f:	89 e5                	mov    ebp,esp
9f002261:	83 ec 10             	sub    esp,0x10
9f002264:	e8 45 2e 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f002269:	05 33 5b 00 00       	add    eax,0x5b33
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
    heaprec_t* heapPtr=(heaprec_t*)heapBase;
9f00226e:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002274:	8b 12                	mov    edx,DWORD PTR [edx]
9f002276:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83
    do
    {
        if (!heapPtr->inUse && heapPtr->len>=size && heapPtr->marker==MALLOC_MARKER_VALUE)
9f002279:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00227c:	0f b6 52 08          	movzx  edx,BYTE PTR [edx+0x8]
9f002280:	83 f2 01             	xor    edx,0x1
9f002283:	84 d2                	test   dl,dl
9f002285:	74 1d                	je     9f0022a4 <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83 (discriminator 1)
9f002287:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f00228a:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
9f00228d:	3b 55 08             	cmp    edx,DWORD PTR [ebp+0x8]
9f002290:	72 12                	jb     9f0022a4 <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:83 (discriminator 2)
9f002292:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002295:	8b 12                	mov    edx,DWORD PTR [edx]
9f002297:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f00229d:	75 05                	jne    9f0022a4 <mallocFindAvailableMemory+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
            return heapPtr;
9f00229f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f0022a2:	eb 3c                	jmp    9f0022e0 <mallocFindAvailableMemory+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
        if (heapPtr->next)
9f0022a4:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0022a7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f0022aa:	85 d2                	test   edx,edx
9f0022ac:	74 09                	je     9f0022b7 <mallocFindAvailableMemory+0x59>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            heapPtr=heapPtr->next;
9f0022ae:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0022b1:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f0022b4:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        
    }
    while(heapPtr<(heaprec_t*)heapCurr && heapPtr->next && heapPtr->marker==MALLOC_MARKER_VALUE);
9f0022b7:	8b 90 e8 ff ff ff    	mov    edx,DWORD PTR [eax-0x18]
9f0022bd:	8b 12                	mov    edx,DWORD PTR [edx]
9f0022bf:	39 55 fc             	cmp    DWORD PTR [ebp-0x4],edx
9f0022c2:	73 17                	jae    9f0022db <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 1)
9f0022c4:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0022c7:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
9f0022ca:	85 d2                	test   edx,edx
9f0022cc:	74 0d                	je     9f0022db <mallocFindAvailableMemory+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89 (discriminator 2)
9f0022ce:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f0022d1:	8b 12                	mov    edx,DWORD PTR [edx]
9f0022d3:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f0022d9:	74 9e                	je     9f002279 <mallocFindAvailableMemory+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    //while (heapPtr->marker==ALLOC_MARKER_VALUE);
    return NULL;
9f0022db:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
}
9f0022e0:	c9                   	leave  
9f0022e1:	c3                   	ret    

9f0022e2 <mallocSanityCheck>:
mallocSanityCheck():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95

void mallocSanityCheck(heaprec_t *heaprec)
{
9f0022e2:	55                   	push   ebp
9f0022e3:	89 e5                	mov    ebp,esp
9f0022e5:	53                   	push   ebx
9f0022e6:	83 ec 14             	sub    esp,0x14
9f0022e9:	e8 c0 2d 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0022ee:	05 ae 5a 00 00       	add    eax,0x5aae
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
#ifdef MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
9f0022f3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0022f6:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f0022f9:	eb 54                	jmp    9f00234f <mallocSanityCheck+0x6d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    {
        if (heapBase<(uintptr_t)heapPtr-8)
9f0022fb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0022fe:	8d 4a f8             	lea    ecx,[edx-0x8]
9f002301:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002307:	8b 12                	mov    edx,DWORD PTR [edx]
9f002309:	39 d1                	cmp    ecx,edx
9f00230b:	76 16                	jbe    9f002323 <mallocSanityCheck+0x41>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:102
        {
                printfI("\n**************************malloc base error!!!**************************\n");
9f00230d:	83 ec 0c             	sub    esp,0xc
9f002310:	8d 90 54 f7 ff ff    	lea    edx,[eax-0x8ac]
9f002316:	52                   	push   edx
9f002317:	89 c3                	mov    ebx,eax
9f002319:	e8 db f2 ff ff       	call   9f0015f9 <printfI>
9f00231e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104 (discriminator 1)
    SanityLoop2:
                goto SanityLoop2;
9f002321:	eb fe                	jmp    9f002321 <mallocSanityCheck+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
        }
        if (heapPtr->marker!=MALLOC_MARKER_VALUE)
9f002323:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002326:	8b 12                	mov    edx,DWORD PTR [edx]
9f002328:	81 fa 1f 2f 3f 4f    	cmp    edx,0x4f3f2f1f
9f00232e:	74 16                	je     9f002346 <mallocSanityCheck+0x64>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:108
        {
            printfI("\n**************************malloc pointer error!!!**************************\n");
9f002330:	83 ec 0c             	sub    esp,0xc
9f002333:	8d 90 a0 f7 ff ff    	lea    edx,[eax-0x860]
9f002339:	52                   	push   edx
9f00233a:	89 c3                	mov    ebx,eax
9f00233c:	e8 b8 f2 ff ff       	call   9f0015f9 <printfI>
9f002341:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110 (discriminator 2)
SanityLoop:
            goto SanityLoop;
9f002344:	eb fe                	jmp    9f002344 <mallocSanityCheck+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:112
        }
        heapPtr=heapPtr->prev;
9f002346:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002349:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f00234c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98

void mallocSanityCheck(heaprec_t *heaprec)
{
#ifdef MALLOC_SANITY_CHECK
    heaprec_t *heapPtr=heaprec;
    while (heapPtr>=(heaprec_t*)heapBase && heapPtr->prev!=heapPtr)
9f00234f:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f002355:	8b 12                	mov    edx,DWORD PTR [edx]
9f002357:	39 55 f4             	cmp    DWORD PTR [ebp-0xc],edx
9f00235a:	72 0b                	jb     9f002367 <mallocSanityCheck+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98 (discriminator 1)
9f00235c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f00235f:	8b 52 10             	mov    edx,DWORD PTR [edx+0x10]
9f002362:	3b 55 f4             	cmp    edx,DWORD PTR [ebp-0xc]
9f002365:	75 94                	jne    9f0022fb <mallocSanityCheck+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
            goto SanityLoop;
        }
        heapPtr=heapPtr->prev;
    }
#endif
}
9f002367:	90                   	nop
9f002368:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00236b:	c9                   	leave  
9f00236c:	c3                   	ret    

9f00236d <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:118

void*  mallocI(size_t size)
{
9f00236d:	55                   	push   ebp
9f00236e:	89 e5                	mov    ebp,esp
9f002370:	53                   	push   ebx
9f002371:	83 ec 24             	sub    esp,0x24
9f002374:	e8 39 2d 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f002379:	81 c3 23 5a 00 00    	add    ebx,0x5a23
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:123
    void* retVal;

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr=NULL;
9f00237f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:124
    size_t requestSize=size;
9f002386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002389:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:127
    static heaprec_t *lastHRCreated=NULL;

    if (size<MALLOC_MIN_SIZE_TO_ALLOCATE)
9f00238c:	83 7d 08 17          	cmp    DWORD PTR [ebp+0x8],0x17
9f002390:	77 07                	ja     9f002399 <mallocI+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:128
        requestSize=MALLOC_MIN_SIZE_TO_ALLOCATE;
9f002392:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:129
    printdI(DEBUG_MALLOC,"libc_malloc: Request for 0x%08x bytes\n",requestSize);
9f002399:	83 ec 04             	sub    esp,0x4
9f00239c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00239f:	8d 83 f0 f7 ff ff    	lea    eax,[ebx-0x810]
9f0023a5:	50                   	push   eax
9f0023a6:	68 00 00 00 01       	push   0x1000000
9f0023ab:	e8 08 f3 ff ff       	call   9f0016b8 <printdI>
9f0023b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:130
    if (heapBase>0)
9f0023b3:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f0023b9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0023bb:	85 c0                	test   eax,eax
9f0023bd:	74 71                	je     9f002430 <mallocI+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:132
    {
        heapPtr=mallocFindAvailableMemory(requestSize);
9f0023bf:	83 ec 0c             	sub    esp,0xc
9f0023c2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0023c5:	e8 94 fe ff ff       	call   9f00225e <mallocFindAvailableMemory>
9f0023ca:	83 c4 10             	add    esp,0x10
9f0023cd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:133
        if (heapPtr!=NULL)
9f0023d0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f0023d4:	74 5a                	je     9f002430 <mallocI+0xc3>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:135
        {
            heapPtr->inUse=true;
9f0023d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023d9:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:136
            heapPtr->uses++;
9f0023dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023e0:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f0023e4:	8d 50 01             	lea    edx,[eax+0x1]
9f0023e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023ea:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:137
            printdI(DEBUG_MALLOC,"libc_malloc: Reusing heaprec=0x%08x, address=0x%08x (uses=%u)",heapPtr,HEAP_PTR_MEM_ADDR(heapPtr),heapPtr->uses);
9f0023ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0023f1:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f0023f5:	0f b7 d0             	movzx  edx,ax
9f0023f8:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0023fe:	8b 00                	mov    eax,DWORD PTR [eax]
9f002400:	83 c0 18             	add    eax,0x18
9f002403:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f002406:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002409:	83 ec 0c             	sub    esp,0xc
9f00240c:	52                   	push   edx
9f00240d:	50                   	push   eax
9f00240e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f002411:	8d 83 18 f8 ff ff    	lea    eax,[ebx-0x7e8]
9f002417:	50                   	push   eax
9f002418:	68 00 00 00 01       	push   0x1000000
9f00241d:	e8 96 f2 ff ff       	call   9f0016b8 <printdI>
9f002422:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:138
            return ((void*)heapPtr)+sizeof(heaprec_t);
9f002425:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002428:	83 c0 18             	add    eax,0x18
9f00242b:	e9 f8 01 00 00       	jmp    9f002628 <mallocI+0x2bb>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:142
        }
    }
    
    needed = newHeapRequiredToFulfillRequest(requestSize);
9f002430:	83 ec 0c             	sub    esp,0xc
9f002433:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002436:	e8 29 fd ff ff       	call   9f002164 <newHeapRequiredToFulfillRequest>
9f00243b:	83 c4 10             	add    esp,0x10
9f00243e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:143
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
9f002441:	83 ec 04             	sub    esp,0x4
9f002444:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f002447:	8d 83 56 f8 ff ff    	lea    eax,[ebx-0x7aa]
9f00244d:	50                   	push   eax
9f00244e:	68 00 00 00 01       	push   0x1000000
9f002453:	e8 60 f2 ff ff       	call   9f0016b8 <printdI>
9f002458:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:144
    if (needed!=0)      //New heap required
9f00245b:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
9f00245f:	0f 84 e5 00 00 00    	je     9f00254a <mallocI+0x1dd>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:146
    {
        if (heapCurr>0)
9f002465:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00246b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00246d:	85 c0                	test   eax,eax
9f00246f:	74 17                	je     9f002488 <mallocI+0x11b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:147
            mallocSanityCheck(((heaprec_t*)heapCurr)->prev);        
9f002471:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002477:	8b 00                	mov    eax,DWORD PTR [eax]
9f002479:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00247c:	83 ec 0c             	sub    esp,0xc
9f00247f:	50                   	push   eax
9f002480:	e8 5d fe ff ff       	call   9f0022e2 <mallocSanityCheck>
9f002485:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:148
        allocatedPtr = do_syscall1(SYSCALL_ALLOCHEAP, needed);
9f002488:	83 ec 08             	sub    esp,0x8
9f00248b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f00248e:	68 65 01 00 00       	push   0x165
9f002493:	e8 44 ef ff ff       	call   9f0013dc <do_syscall1>
9f002498:	83 c4 10             	add    esp,0x10
9f00249b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:150
        //This is needed to keep in sync with what the kernel thinks
        memsetI((char*)allocatedPtr,0,needed);
9f00249e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0024a1:	83 ec 04             	sub    esp,0x4
9f0024a4:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0024a7:	6a 00                	push   0x0
9f0024a9:	50                   	push   eax
9f0024aa:	e8 d5 04 00 00       	call   9f002984 <memsetI>
9f0024af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:151
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
9f0024b2:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0024b8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0024ba:	83 ec 04             	sub    esp,0x4
9f0024bd:	50                   	push   eax
9f0024be:	8d 83 72 f8 ff ff    	lea    eax,[ebx-0x78e]
9f0024c4:	50                   	push   eax
9f0024c5:	68 00 00 00 01       	push   0x1000000
9f0024ca:	e8 e9 f1 ff ff       	call   9f0016b8 <printdI>
9f0024cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:152
        heapEnd=allocatedPtr+needed;
9f0024d2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f0024d5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0024d8:	01 c2                	add    edx,eax
9f0024da:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0024e0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:153
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
9f0024e2:	8b 83 dc ff ff ff    	mov    eax,DWORD PTR [ebx-0x24]
9f0024e8:	8b 00                	mov    eax,DWORD PTR [eax]
9f0024ea:	83 ec 0c             	sub    esp,0xc
9f0024ed:	50                   	push   eax
9f0024ee:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f0024f1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f0024f4:	8d 83 90 f8 ff ff    	lea    eax,[ebx-0x770]
9f0024fa:	50                   	push   eax
9f0024fb:	68 00 00 00 01       	push   0x1000000
9f002500:	e8 b3 f1 ff ff       	call   9f0016b8 <printdI>
9f002505:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:154
        if (heapBase==0)    //Hasn't been initialized yet!
9f002508:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f00250e:	8b 00                	mov    eax,DWORD PTR [eax]
9f002510:	85 c0                	test   eax,eax
9f002512:	75 36                	jne    9f00254a <mallocI+0x1dd>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:156
        {
            heapCurr=allocatedPtr;
9f002514:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f00251a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00251d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:157
            heapBase=allocatedPtr;
9f00251f:	8b 83 e4 ff ff ff    	mov    eax,DWORD PTR [ebx-0x1c]
9f002525:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f002528:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:158
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
9f00252a:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002530:	8b 00                	mov    eax,DWORD PTR [eax]
9f002532:	83 ec 04             	sub    esp,0x4
9f002535:	50                   	push   eax
9f002536:	8d 83 d0 f8 ff ff    	lea    eax,[ebx-0x730]
9f00253c:	50                   	push   eax
9f00253d:	68 00 00 00 01       	push   0x1000000
9f002542:	e8 71 f1 ff ff       	call   9f0016b8 <printdI>
9f002547:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:161
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
9f00254a:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002550:	8b 00                	mov    eax,DWORD PTR [eax]
9f002552:	83 ec 04             	sub    esp,0x4
9f002555:	50                   	push   eax
9f002556:	8d 83 0c f9 ff ff    	lea    eax,[ebx-0x6f4]
9f00255c:	50                   	push   eax
9f00255d:	68 00 00 00 01       	push   0x1000000
9f002562:	e8 51 f1 ff ff       	call   9f0016b8 <printdI>
9f002567:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:162
    heapPtr = (heaprec_t*)heapCurr;
9f00256a:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002570:	8b 00                	mov    eax,DWORD PTR [eax]
9f002572:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:163
    heapPtr->marker=MALLOC_MARKER_VALUE;
9f002575:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002578:	c7 00 1f 2f 3f 4f    	mov    DWORD PTR [eax],0x4f3f2f1f
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:164
    heapPtr->len=requestSize;
9f00257e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002581:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f002584:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:165
    heapPtr->inUse=true;
9f002587:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00258a:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:166
    heapPtr->uses++;
9f00258e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002591:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
9f002595:	8d 50 01             	lea    edx,[eax+0x1]
9f002598:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00259b:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:167
    if (lastHRCreated!=NULL)
9f00259f:	8b 83 74 00 00 00    	mov    eax,DWORD PTR [ebx+0x74]
9f0025a5:	85 c0                	test   eax,eax
9f0025a7:	74 18                	je     9f0025c1 <mallocI+0x254>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:169
    {
        heapPtr->prev=lastHRCreated;
9f0025a9:	8b 93 74 00 00 00    	mov    edx,DWORD PTR [ebx+0x74]
9f0025af:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0025b2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:170
        heapPtr->prev->next=heapPtr;
9f0025b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0025b8:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0025bb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0025be:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:173
    }

    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08x\n",heapCurr);
9f0025c1:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0025c7:	8b 00                	mov    eax,DWORD PTR [eax]
9f0025c9:	83 ec 04             	sub    esp,0x4
9f0025cc:	50                   	push   eax
9f0025cd:	8d 83 34 f9 ff ff    	lea    eax,[ebx-0x6cc]
9f0025d3:	50                   	push   eax
9f0025d4:	68 00 00 00 01       	push   0x1000000
9f0025d9:	e8 da f0 ff ff       	call   9f0016b8 <printdI>
9f0025de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:174
    retVal=((void*)(heapPtr)+sizeof(heaprec_t));
9f0025e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0025e4:	83 c0 18             	add    eax,0x18
9f0025e7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:175
    heapCurr+=requestSize+(sizeof(heaprec_t));
9f0025ea:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f0025f0:	8b 10                	mov    edx,DWORD PTR [eax]
9f0025f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0025f5:	01 d0                	add    eax,edx
9f0025f7:	8d 50 18             	lea    edx,[eax+0x18]
9f0025fa:	8b 83 e8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x18]
9f002600:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:176
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
9f002602:	83 ec 04             	sub    esp,0x4
9f002605:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f002608:	8d 83 52 f9 ff ff    	lea    eax,[ebx-0x6ae]
9f00260e:	50                   	push   eax
9f00260f:	68 00 00 00 01       	push   0x1000000
9f002614:	e8 9f f0 ff ff       	call   9f0016b8 <printdI>
9f002619:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:177
    lastHRCreated=heapPtr;
9f00261c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00261f:	89 83 74 00 00 00    	mov    DWORD PTR [ebx+0x74],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:178
    return retVal;
9f002625:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:179
}
9f002628:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00262b:	c9                   	leave  
9f00262c:	c3                   	ret    

9f00262d <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:182

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
9f00262d:	55                   	push   ebp
9f00262e:	89 e5                	mov    ebp,esp
9f002630:	83 ec 08             	sub    esp,0x8
9f002633:	e8 76 2a 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f002638:	05 64 57 00 00       	add    eax,0x5764
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:183
    return mallocI(size);
9f00263d:	83 ec 0c             	sub    esp,0xc
9f002640:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002643:	e8 25 fd ff ff       	call   9f00236d <mallocI>
9f002648:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:184
}
9f00264b:	c9                   	leave  
9f00264c:	c3                   	ret    

9f00264d <reallocI>:
reallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:187

void* reallocI(void *foldptr, uint32_t newlen)
{
9f00264d:	55                   	push   ebp
9f00264e:	89 e5                	mov    ebp,esp
9f002650:	53                   	push   ebx
9f002651:	83 ec 14             	sub    esp,0x14
9f002654:	e8 59 2a 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f002659:	81 c3 43 57 00 00    	add    ebx,0x5743
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:189
    
    printdI(DEBUG_MALLOC,"libc_realloc: called for old pointer 0x%08x, new size=0x%08x",foldptr,newlen);
9f00265f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002662:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002665:	8d 83 6c f9 ff ff    	lea    eax,[ebx-0x694]
9f00266b:	50                   	push   eax
9f00266c:	68 00 00 00 01       	push   0x1000000
9f002671:	e8 42 f0 ff ff       	call   9f0016b8 <printdI>
9f002676:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:192

    //Get old heap pointer
    uint32_t realSize=newlen;
9f002679:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00267c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:194
    heaprec_t* mp;  //-1 means back up to the heaprec_t struct
    HEAP_CURR(foldptr,mp);
9f00267f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002682:	83 e8 18             	sub    eax,0x18
9f002685:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:196

    if (newlen==0)
9f002688:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f00268c:	75 17                	jne    9f0026a5 <reallocI+0x58>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:197
        printdI(DEBUG_MALLOC,"libc_relloc: Request for 0 bytes, cannot fulfill\n");
9f00268e:	83 ec 08             	sub    esp,0x8
9f002691:	8d 83 ac f9 ff ff    	lea    eax,[ebx-0x654]
9f002697:	50                   	push   eax
9f002698:	68 00 00 00 01       	push   0x1000000
9f00269d:	e8 16 f0 ff ff       	call   9f0016b8 <printdI>
9f0026a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198
    if (newlen==0 || newlen<=mp->len)
9f0026a5:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0026a9:	74 0b                	je     9f0026b6 <reallocI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:198 (discriminator 1)
9f0026ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0026ae:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0026b1:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f0026b4:	72 08                	jb     9f0026be <reallocI+0x71>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:199
        return foldptr;
9f0026b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0026b9:	e9 8d 00 00 00       	jmp    9f00274b <reallocI+0xfe>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:201

    if (newlen<MALLOC_MIN_SIZE_TO_ALLOCATE)
9f0026be:	83 7d 0c 17          	cmp    DWORD PTR [ebp+0xc],0x17
9f0026c2:	77 07                	ja     9f0026cb <reallocI+0x7e>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:202
        realSize=MALLOC_MIN_SIZE_TO_ALLOCATE;
9f0026c4:	c7 45 f4 18 00 00 00 	mov    DWORD PTR [ebp-0xc],0x18
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:205
    
    //Allocate space of newlen
    uintptr_t *fnewptr = mallocI(realSize);
9f0026cb:	83 ec 0c             	sub    esp,0xc
9f0026ce:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0026d1:	e8 97 fc ff ff       	call   9f00236d <mallocI>
9f0026d6:	83 c4 10             	add    esp,0x10
9f0026d9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:206
    printdI(DEBUG_MALLOC,"\tlibc_realloc: received new malloc pointer 0x%08x, old size=0x%08x, new size=0x%08x\n",fnewptr, mp->len, realSize);
9f0026dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0026df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0026e2:	83 ec 0c             	sub    esp,0xc
9f0026e5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f0026e8:	50                   	push   eax
9f0026e9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f0026ec:	8d 83 e0 f9 ff ff    	lea    eax,[ebx-0x620]
9f0026f2:	50                   	push   eax
9f0026f3:	68 00 00 00 01       	push   0x1000000
9f0026f8:	e8 bb ef ff ff       	call   9f0016b8 <printdI>
9f0026fd:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:211
   
    //Copy from old pointer to new memory using the old pointer's length
//    if (newlen>mp->len)
//        memsetI(fnewptr+mp->len,0,newlen-mp->len);
    memcpyI(fnewptr, foldptr, mp->len>realSize?realSize:mp->len);
9f002700:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002703:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
9f002706:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002709:	39 c2                	cmp    edx,eax
9f00270b:	0f 46 c2             	cmovbe eax,edx
9f00270e:	83 ec 04             	sub    esp,0x4
9f002711:	50                   	push   eax
9f002712:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002715:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002718:	e8 ab 00 00 00       	call   9f0027c8 <memcpyI>
9f00271d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:212
    printdI(DEBUG_MALLOC,"\tlibc_realloc: updated new pointer 0x%08x with old pointer data and cleared out remaing if applicable\n",fnewptr);
9f002720:	83 ec 04             	sub    esp,0x4
9f002723:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002726:	8d 83 38 fa ff ff    	lea    eax,[ebx-0x5c8]
9f00272c:	50                   	push   eax
9f00272d:	68 00 00 00 01       	push   0x1000000
9f002732:	e8 81 ef ff ff       	call   9f0016b8 <printdI>
9f002737:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:215
    
   //free old pointer
    freeI(foldptr);
9f00273a:	83 ec 0c             	sub    esp,0xc
9f00273d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002740:	e8 a6 fa ff ff       	call   9f0021eb <freeI>
9f002745:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:216
    return fnewptr;
9f002748:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:217
}
9f00274b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00274e:	c9                   	leave  
9f00274f:	c3                   	ret    

9f002750 <realloc>:
realloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:220

VISIBLE void* realloc(void *foldptr, uint32_t newlen)
{
9f002750:	55                   	push   ebp
9f002751:	89 e5                	mov    ebp,esp
9f002753:	83 ec 08             	sub    esp,0x8
9f002756:	e8 53 29 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00275b:	05 41 56 00 00       	add    eax,0x5641
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:221
    return reallocI(foldptr, newlen);
9f002760:	83 ec 08             	sub    esp,0x8
9f002763:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002766:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002769:	e8 df fe ff ff       	call   9f00264d <reallocI>
9f00276e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:222
}
9f002771:	c9                   	leave  
9f002772:	c3                   	ret    

9f002773 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:225

__attribute__((visibility("default"))) void free(void* fpointer)
{
9f002773:	55                   	push   ebp
9f002774:	89 e5                	mov    ebp,esp
9f002776:	83 ec 08             	sub    esp,0x8
9f002779:	e8 30 29 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00277e:	05 1e 56 00 00       	add    eax,0x561e
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:226
    freeI(fpointer);
9f002783:	83 ec 0c             	sub    esp,0xc
9f002786:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002789:	e8 5d fa ff ff       	call   9f0021eb <freeI>
9f00278e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:227
}
9f002791:	90                   	nop
9f002792:	c9                   	leave  
9f002793:	c3                   	ret    

9f002794 <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:230

void malloc_cleanup()
{
9f002794:	55                   	push   ebp
9f002795:	89 e5                	mov    ebp,esp
9f002797:	53                   	push   ebx
9f002798:	83 ec 04             	sub    esp,0x4
9f00279b:	e8 0e 29 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0027a0:	05 fc 55 00 00       	add    eax,0x55fc
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:231
    do_syscall1(SYSCALL_FREE, heapBase);
9f0027a5:	8b 90 e4 ff ff ff    	mov    edx,DWORD PTR [eax-0x1c]
9f0027ab:	8b 12                	mov    edx,DWORD PTR [edx]
9f0027ad:	83 ec 08             	sub    esp,0x8
9f0027b0:	52                   	push   edx
9f0027b1:	68 64 01 00 00       	push   0x164
9f0027b6:	89 c3                	mov    ebx,eax
9f0027b8:	e8 1f ec ff ff       	call   9f0013dc <do_syscall1>
9f0027bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:232
9f0027c0:	90                   	nop
9f0027c1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0027c4:	c9                   	leave  
9f0027c5:	c3                   	ret    
9f0027c6:	66 90                	xchg   ax,ax

9f0027c8 <memcpyI>:
memcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:12
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time

void *memcpyI(void *dest, const void *src, size_t n)
{
9f0027c8:	55                   	push   ebp
9f0027c9:	89 e5                	mov    ebp,esp
9f0027cb:	83 ec 20             	sub    esp,0x20
9f0027ce:	e8 db 28 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0027d3:	05 c9 55 00 00       	add    eax,0x55c9
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
9f0027d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027db:	83 e0 03             	and    eax,0x3
9f0027de:	85 c0                	test   eax,eax
9f0027e0:	0f 94 c0             	sete   al
9f0027e3:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    dw=n%2==0;
9f0027e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027e9:	83 e0 01             	and    eax,0x1
9f0027ec:	85 c0                	test   eax,eax
9f0027ee:	0f 94 c0             	sete   al
9f0027f1:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:17
    if (dd)
9f0027f4:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
9f0027f8:	74 7d                	je     9f002877 <memcpyI+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
    {
        n /=4;
9f0027fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0027fd:	c1 e8 02             	shr    eax,0x2
9f002800:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        const uint32_t *f = src;
9f002803:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002806:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:21
        uint32_t *t = dest;
9f002809:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00280c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23

        if (f < t) {
9f00280f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002812:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f002815:	73 4b                	jae    9f002862 <memcpyI+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                f += n;
9f002817:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00281a:	c1 e0 02             	shl    eax,0x2
9f00281d:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                t += n;
9f002820:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002823:	c1 e0 02             	shl    eax,0x2
9f002826:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
9f002829:	eb 12                	jmp    9f00283d <memcpyI+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:27
                        *--t = *--f;
9f00282b:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
9f00282f:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
9f002833:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002836:	8b 10                	mov    edx,DWORD PTR [eax]
9f002838:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00283b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f00283d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002840:	8d 50 ff             	lea    edx,[eax-0x1]
9f002843:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002846:	85 c0                	test   eax,eax
9f002848:	75 e1                	jne    9f00282b <memcpyI+0x63>
9f00284a:	eb 23                	jmp    9f00286f <memcpyI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f00284c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f00284f:	8d 50 04             	lea    edx,[eax+0x4]
9f002852:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f002855:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
9f002858:	8d 4a 04             	lea    ecx,[edx+0x4]
9f00285b:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
9f00285e:	8b 12                	mov    edx,DWORD PTR [edx]
9f002860:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f002862:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002865:	8d 50 ff             	lea    edx,[eax-0x1]
9f002868:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00286b:	85 c0                	test   eax,eax
9f00286d:	75 dd                	jne    9f00284c <memcpyI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
9f00286f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002872:	e9 ea 00 00 00       	jmp    9f002961 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:33
    }
    else if (dw)
9f002877:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
9f00287b:	74 79                	je     9f0028f6 <memcpyI+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
    {
        n /=2;
9f00287d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002880:	d1 e8                	shr    eax,1
9f002882:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        const uint32_t *f = src;
9f002885:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f002888:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:37
        uint32_t *t = dest;
9f00288b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00288e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39

        if (f < t) {
9f002891:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002894:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f002897:	73 4b                	jae    9f0028e4 <memcpyI+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                f += n;
9f002899:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00289c:	c1 e0 02             	shl    eax,0x2
9f00289f:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                t += n;
9f0028a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0028a5:	c1 e0 02             	shl    eax,0x2
9f0028a8:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
9f0028ab:	eb 12                	jmp    9f0028bf <memcpyI+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:43
                        *--t = *--f;
9f0028ad:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
9f0028b1:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
9f0028b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0028b8:	8b 10                	mov    edx,DWORD PTR [eax]
9f0028ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0028bd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
9f0028bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0028c2:	8d 50 ff             	lea    edx,[eax-0x1]
9f0028c5:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0028c8:	85 c0                	test   eax,eax
9f0028ca:	75 e1                	jne    9f0028ad <memcpyI+0xe5>
9f0028cc:	eb 23                	jmp    9f0028f1 <memcpyI+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
9f0028ce:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0028d1:	8d 50 04             	lea    edx,[eax+0x4]
9f0028d4:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0028d7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
9f0028da:	8d 4a 04             	lea    ecx,[edx+0x4]
9f0028dd:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
9f0028e0:	8b 12                	mov    edx,DWORD PTR [edx]
9f0028e2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
9f0028e4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0028e7:	8d 50 ff             	lea    edx,[eax-0x1]
9f0028ea:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0028ed:	85 c0                	test   eax,eax
9f0028ef:	75 dd                	jne    9f0028ce <memcpyI+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
9f0028f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028f4:	eb 6b                	jmp    9f002961 <memcpyI+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
9f0028f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0028f9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:52
        char *t = dest;
9f0028fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0028ff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54

        if (f < t) {
9f002902:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002905:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f002908:	73 47                	jae    9f002951 <memcpyI+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                f += n;
9f00290a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00290d:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                t += n;
9f002910:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002913:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                while (n-- > 0)
9f002916:	eb 13                	jmp    9f00292b <memcpyI+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:58
                        *--t = *--f;
9f002918:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
9f00291c:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
9f002920:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f002923:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002926:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f002929:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
9f00292b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00292e:	8d 50 ff             	lea    edx,[eax-0x1]
9f002931:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002934:	85 c0                	test   eax,eax
9f002936:	75 e0                	jne    9f002918 <memcpyI+0x150>
9f002938:	eb 24                	jmp    9f00295e <memcpyI+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
9f00293a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f00293d:	8d 50 01             	lea    edx,[eax+0x1]
9f002940:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
9f002943:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002946:	8d 4a 01             	lea    ecx,[edx+0x1]
9f002949:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
9f00294c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00294f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
9f002951:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002954:	8d 50 ff             	lea    edx,[eax-0x1]
9f002957:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00295a:	85 c0                	test   eax,eax
9f00295c:	75 dc                	jne    9f00293a <memcpyI+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
9f00295e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:64
    }
}
9f002961:	c9                   	leave  
9f002962:	c3                   	ret    

9f002963 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:67

VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
9f002963:	55                   	push   ebp
9f002964:	89 e5                	mov    ebp,esp
9f002966:	e8 43 27 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00296b:	05 31 54 00 00       	add    eax,0x5431
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:68
    return memcpyI(dest, src, n);
9f002970:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002973:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002976:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002979:	e8 4a fe ff ff       	call   9f0027c8 <memcpyI>
9f00297e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:69
9f002981:	c9                   	leave  
9f002982:	c3                   	ret    
9f002983:	90                   	nop

9f002984 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "common.h"

void *memsetI(void *d1, int val, size_t len)
{
9f002984:	55                   	push   ebp
9f002985:	89 e5                	mov    ebp,esp
9f002987:	83 ec 20             	sub    esp,0x20
9f00298a:	e8 1f 27 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00298f:	05 0d 54 00 00       	add    eax,0x540d
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
9f002994:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002997:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
9f00299a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00299d:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
9f0029a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029a3:	c1 e0 10             	shl    eax,0x10
9f0029a6:	89 c2                	mov    edx,eax
9f0029a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029ab:	c1 e0 08             	shl    eax,0x8
9f0029ae:	09 c2                	or     edx,eax
9f0029b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029b3:	09 d0                	or     eax,edx
9f0029b5:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
9f0029b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0029bc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
9f0029bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029c2:	c1 e0 18             	shl    eax,0x18
9f0029c5:	89 c2                	mov    edx,eax
9f0029c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029ca:	c1 e0 10             	shl    eax,0x10
9f0029cd:	09 c2                	or     edx,eax
9f0029cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0029d2:	c1 e0 08             	shl    eax,0x8
9f0029d5:	09 d0                	or     eax,edx
9f0029d7:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
9f0029da:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
9f0029dd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0029e0:	83 e0 03             	and    eax,0x3
9f0029e3:	85 c0                	test   eax,eax
9f0029e5:	75 1c                	jne    9f002a03 <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
9f0029e7:	eb 0e                	jmp    9f0029f7 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
9f0029e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0029ec:	8d 50 04             	lea    edx,[eax+0x4]
9f0029ef:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0029f2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f0029f5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
9f0029f7:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
9f0029fb:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f0029ff:	75 e8                	jne    9f0029e9 <memsetI+0x65>
9f002a01:	eb 43                	jmp    9f002a46 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
9f002a03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a06:	83 e0 01             	and    eax,0x1
9f002a09:	85 c0                	test   eax,eax
9f002a0b:	75 2c                	jne    9f002a39 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
9f002a0d:	eb 10                	jmp    9f002a1f <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
9f002a0f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f002a12:	8d 50 02             	lea    edx,[eax+0x2]
9f002a15:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
9f002a18:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
9f002a1c:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
9f002a1f:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
9f002a23:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f002a27:	75 e6                	jne    9f002a0f <memsetI+0x8b>
9f002a29:	eb 1b                	jmp    9f002a46 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
9f002a2b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f002a2e:	8d 50 01             	lea    edx,[eax+0x1]
9f002a31:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f002a34:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f002a37:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
9f002a39:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f002a3c:	8d 50 ff             	lea    edx,[eax-0x1]
9f002a3f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f002a42:	85 c0                	test   eax,eax
9f002a44:	75 e5                	jne    9f002a2b <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
9f002a46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
9f002a49:	c9                   	leave  
9f002a4a:	c3                   	ret    

9f002a4b <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
9f002a4b:	55                   	push   ebp
9f002a4c:	89 e5                	mov    ebp,esp
9f002a4e:	e8 5b 26 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f002a53:	05 49 53 00 00       	add    eax,0x5349
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
9f002a58:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f002a5b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002a5e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002a61:	e8 1e ff ff ff       	call   9f002984 <memsetI>
9f002a66:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
9f002a69:	c9                   	leave  
9f002a6a:	c3                   	ret    
9f002a6b:	90                   	nop

9f002a6c <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:11

#include "common.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
9f002a6c:	55                   	push   ebp
9f002a6d:	89 e5                	mov    ebp,esp
9f002a6f:	53                   	push   ebx
9f002a70:	83 ec 04             	sub    esp,0x4
9f002a73:	e8 36 26 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f002a78:	05 24 53 00 00       	add    eax,0x5324
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
9f002a7d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002a80:	83 ec 08             	sub    esp,0x8
9f002a83:	52                   	push   edx
9f002a84:	6a 0f                	push   0xf
9f002a86:	89 c3                	mov    ebx,eax
9f002a88:	e8 4f e9 ff ff       	call   9f0013dc <do_syscall1>
9f002a8d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:13
}
9f002a90:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002a93:	c9                   	leave  
9f002a94:	c3                   	ret    

9f002a95 <dup3>:
dup3():
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:16

VISIBLE int dup3(int oldfd, int newfd, int flags)
{
9f002a95:	55                   	push   ebp
9f002a96:	89 e5                	mov    ebp,esp
9f002a98:	53                   	push   ebx
9f002a99:	83 ec 04             	sub    esp,0x4
9f002a9c:	e8 0d 26 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f002aa1:	05 fb 52 00 00       	add    eax,0x52fb
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:17
    return do_syscall3(SYSCALL_DUP3,oldfd,newfd,flags);
9f002aa6:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
9f002aa9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
9f002aac:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f002aaf:	53                   	push   ebx
9f002ab0:	51                   	push   ecx
9f002ab1:	52                   	push   edx
9f002ab2:	6a 10                	push   0x10
9f002ab4:	89 c3                	mov    ebx,eax
9f002ab6:	e8 a7 e8 ff ff       	call   9f001362 <do_syscall3>
9f002abb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe_lib.c:18
9f002abe:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f002ac1:	c9                   	leave  
9f002ac2:	c3                   	ret    
9f002ac3:	90                   	nop

9f002ac4 <buildProcInfoTI>:
buildProcInfoTI():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:17
#include "ascii.h"
#include "file.h"
#include "malloc.h"

procInfo_t *buildProcInfoTI(procInfo_t *procinfo, char *statinfo, int ticksPerUpdateInterval)
{
9f002ac4:	55                   	push   ebp
9f002ac5:	89 e5                	mov    ebp,esp
9f002ac7:	56                   	push   esi
9f002ac8:	53                   	push   ebx
9f002ac9:	81 ec 50 01 00 00    	sub    esp,0x150
9f002acf:	e8 de 25 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f002ad4:	81 c3 c8 52 00 00    	add    ebx,0x52c8
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:18
    char delim[4]={'\n','\t',' ','\0'};
9f002ada:	c6 45 e8 0a          	mov    BYTE PTR [ebp-0x18],0xa
9f002ade:	c6 45 e9 09          	mov    BYTE PTR [ebp-0x17],0x9
9f002ae2:	c6 45 ea 20          	mov    BYTE PTR [ebp-0x16],0x20
9f002ae6:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:20
    char *token;
    int tokenNumber=1;
9f002aea:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:25
    int pid;
    char name[100], name2[100], name3[100];
    static struct tm tinfo;

    memsetI(name,0,100);
9f002af1:	83 ec 04             	sub    esp,0x4
9f002af4:	6a 64                	push   0x64
9f002af6:	6a 00                	push   0x0
9f002af8:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002afb:	50                   	push   eax
9f002afc:	e8 83 fe ff ff       	call   9f002984 <memsetI>
9f002b01:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:26
    memsetI(name2,0,100);
9f002b04:	83 ec 04             	sub    esp,0x4
9f002b07:	6a 64                	push   0x64
9f002b09:	6a 00                	push   0x0
9f002b0b:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002b11:	50                   	push   eax
9f002b12:	e8 6d fe ff ff       	call   9f002984 <memsetI>
9f002b17:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:27
    memsetI(name3,0,100);
9f002b1a:	83 ec 04             	sub    esp,0x4
9f002b1d:	6a 64                	push   0x64
9f002b1f:	6a 00                	push   0x0
9f002b21:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002b27:	50                   	push   eax
9f002b28:	e8 57 fe ff ff       	call   9f002984 <memsetI>
9f002b2d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:29
    
    token=strtokI(statinfo,delim);
9f002b30:	83 ec 08             	sub    esp,0x8
9f002b33:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002b36:	50                   	push   eax
9f002b37:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002b3a:	e8 dd d5 ff ff       	call   9f00011c <strtokI>
9f002b3f:	83 c4 10             	add    esp,0x10
9f002b42:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    while (token)
9f002b45:	e9 df 02 00 00       	jmp    9f002e29 <.L3+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:32
    {
        switch (tokenNumber)
9f002b4a:	83 7d f0 17          	cmp    DWORD PTR [ebp-0x10],0x17
9f002b4e:	0f 87 bd 02 00 00    	ja     9f002e11 <.L3>
9f002b54:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f002b57:	c1 e0 02             	shl    eax,0x2
9f002b5a:	8b 84 18 c0 fa ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x540]
9f002b61:	01 d8                	add    eax,ebx
9f002b63:	ff e0                	jmp    eax

9f002b65 <.L4>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:35
        {
            case 1: //pid
                pid=atoiI(token);
9f002b65:	83 ec 0c             	sub    esp,0xc
9f002b68:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002b6b:	e8 cb d8 ff ff       	call   9f00043b <atoiI>
9f002b70:	83 c4 10             	add    esp,0x10
9f002b73:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:36
                procinfo->pid=pid;
9f002b76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b79:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f002b7c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:38
//procinfo->lastUpdateIteration=iteration;
                break;
9f002b7e:	e9 8e 02 00 00       	jmp    9f002e11 <.L3>

9f002b83 <.L7>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:40
            case 3: //state
                procinfo->status=token[0];
9f002b83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002b86:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f002b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002b8c:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:41
                break;
9f002b8f:	e9 7d 02 00 00       	jmp    9f002e11 <.L3>

9f002b94 <.L8>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:43
            case 4: //ppid
                procinfo->ppid=atoiI(token);
9f002b94:	83 ec 0c             	sub    esp,0xc
9f002b97:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002b9a:	e8 9c d8 ff ff       	call   9f00043b <atoiI>
9f002b9f:	83 c4 10             	add    esp,0x10
9f002ba2:	89 c2                	mov    edx,eax
9f002ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ba7:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:44
                break;
9f002baa:	e9 62 02 00 00       	jmp    9f002e11 <.L3>

9f002baf <.L9>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:46
            case 7: //tty_nr
                procinfo->tty=atoiI(token);
9f002baf:	83 ec 0c             	sub    esp,0xc
9f002bb2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002bb5:	e8 81 d8 ff ff       	call   9f00043b <atoiI>
9f002bba:	83 c4 10             	add    esp,0x10
9f002bbd:	89 c2                	mov    edx,eax
9f002bbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002bc2:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:47
                break;
9f002bc5:	e9 47 02 00 00       	jmp    9f002e11 <.L3>

9f002bca <.L10>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:49
            case 10://minflt
                procinfo->minorFaults=atoiI(token);
9f002bca:	83 ec 0c             	sub    esp,0xc
9f002bcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002bd0:	e8 66 d8 ff ff       	call   9f00043b <atoiI>
9f002bd5:	83 c4 10             	add    esp,0x10
9f002bd8:	89 c2                	mov    edx,eax
9f002bda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002bdd:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:50
                break;
9f002be0:	e9 2c 02 00 00       	jmp    9f002e11 <.L3>

9f002be5 <.L11>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:52
            case 11://majflt
                procinfo->majorFaults=atoiI(token);
9f002be5:	83 ec 0c             	sub    esp,0xc
9f002be8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002beb:	e8 4b d8 ff ff       	call   9f00043b <atoiI>
9f002bf0:	83 c4 10             	add    esp,0x10
9f002bf3:	89 c2                	mov    edx,eax
9f002bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002bf8:	89 50 3c             	mov    DWORD PTR [eax+0x3c],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:53
                break;
9f002bfb:	e9 11 02 00 00       	jmp    9f002e11 <.L3>

9f002c00 <.L13>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:55
            case 17://priority
                if (strstrI(token,"-"))
9f002c00:	83 ec 08             	sub    esp,0x8
9f002c03:	8d 83 a4 fa ff ff    	lea    eax,[ebx-0x55c]
9f002c09:	50                   	push   eax
9f002c0a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002c0d:	e8 00 17 00 00       	call   9f004312 <strstrI>
9f002c12:	83 c4 10             	add    esp,0x10
9f002c15:	85 c0                	test   eax,eax
9f002c17:	74 21                	je     9f002c3a <.L13+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:56
                    procinfo->priority= -atoiI(token+1);
9f002c19:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002c1c:	83 c0 01             	add    eax,0x1
9f002c1f:	83 ec 0c             	sub    esp,0xc
9f002c22:	50                   	push   eax
9f002c23:	e8 13 d8 ff ff       	call   9f00043b <atoiI>
9f002c28:	83 c4 10             	add    esp,0x10
9f002c2b:	f7 d8                	neg    eax
9f002c2d:	89 c2                	mov    edx,eax
9f002c2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c32:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:59
                else
                    procinfo->priority=atoiI(token);
                break;
9f002c35:	e9 d7 01 00 00       	jmp    9f002e11 <.L3>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:58
                break;
            case 17://priority
                if (strstrI(token,"-"))
                    procinfo->priority= -atoiI(token+1);
                else
                    procinfo->priority=atoiI(token);
9f002c3a:	83 ec 0c             	sub    esp,0xc
9f002c3d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002c40:	e8 f6 d7 ff ff       	call   9f00043b <atoiI>
9f002c45:	83 c4 10             	add    esp,0x10
9f002c48:	89 c2                	mov    edx,eax
9f002c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002c4d:	89 50 54             	mov    DWORD PTR [eax+0x54],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:59
                break;
9f002c50:	e9 bc 01 00 00       	jmp    9f002e11 <.L3>

9f002c55 <.L6>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:61
            case 2: //comm
                strreplaceI(token,"(","",name);
9f002c55:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002c58:	50                   	push   eax
9f002c59:	8d 83 a6 fa ff ff    	lea    eax,[ebx-0x55a]
9f002c5f:	50                   	push   eax
9f002c60:	8d 83 a7 fa ff ff    	lea    eax,[ebx-0x559]
9f002c66:	50                   	push   eax
9f002c67:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002c6a:	e8 c1 14 00 00       	call   9f004130 <strreplaceI>
9f002c6f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:62
                strreplaceI(name,")","",name2);
9f002c72:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002c78:	50                   	push   eax
9f002c79:	8d 83 a6 fa ff ff    	lea    eax,[ebx-0x55a]
9f002c7f:	50                   	push   eax
9f002c80:	8d 83 a9 fa ff ff    	lea    eax,[ebx-0x557]
9f002c86:	50                   	push   eax
9f002c87:	8d 45 84             	lea    eax,[ebp-0x7c]
9f002c8a:	50                   	push   eax
9f002c8b:	e8 a0 14 00 00       	call   9f004130 <strreplaceI>
9f002c90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:63
                sprintfI(name3,"%-10s",name2);
9f002c93:	83 ec 04             	sub    esp,0x4
9f002c96:	8d 85 20 ff ff ff    	lea    eax,[ebp-0xe0]
9f002c9c:	50                   	push   eax
9f002c9d:	8d 83 ab fa ff ff    	lea    eax,[ebx-0x555]
9f002ca3:	50                   	push   eax
9f002ca4:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002caa:	50                   	push   eax
9f002cab:	e8 bd 0a 00 00       	call   9f00376d <sprintfI>
9f002cb0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:64
                strncpyI((char*)procinfo->name,name3,9);
9f002cb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002cb6:	8d 50 04             	lea    edx,[eax+0x4]
9f002cb9:	83 ec 04             	sub    esp,0x4
9f002cbc:	6a 09                	push   0x9
9f002cbe:	8d 85 bc fe ff ff    	lea    eax,[ebp-0x144]
9f002cc4:	50                   	push   eax
9f002cc5:	52                   	push   edx
9f002cc6:	e8 e5 0f 00 00       	call   9f003cb0 <strncpyI>
9f002ccb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:65
                break;
9f002cce:	e9 3e 01 00 00       	jmp    9f002e11 <.L3>

9f002cd3 <.L12>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:67
            case 13://ticks
                procinfo->ticks=atoiI(token);
9f002cd3:	83 ec 0c             	sub    esp,0xc
9f002cd6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002cd9:	e8 5d d7 ff ff       	call   9f00043b <atoiI>
9f002cde:	83 c4 10             	add    esp,0x10
9f002ce1:	89 c2                	mov    edx,eax
9f002ce3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ce6:	89 50 40             	mov    DWORD PTR [eax+0x40],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:68
                procinfo->totalTicks+=(procinfo->ticks - procinfo->lastTicks);
9f002ce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002cec:	8b 50 48             	mov    edx,DWORD PTR [eax+0x48]
9f002cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002cf2:	8b 48 40             	mov    ecx,DWORD PTR [eax+0x40]
9f002cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002cf8:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002cfb:	29 c1                	sub    ecx,eax
9f002cfd:	89 c8                	mov    eax,ecx
9f002cff:	01 c2                	add    edx,eax
9f002d01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d04:	89 50 48             	mov    DWORD PTR [eax+0x48],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:69
                time_t runtime_secs=procinfo->totalTicks/TICKS_PER_SECOND;
9f002d07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d0a:	8b 48 48             	mov    ecx,DWORD PTR [eax+0x48]
9f002d0d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f002d12:	89 c8                	mov    eax,ecx
9f002d14:	f7 ea                	imul   edx
9f002d16:	c1 fa 05             	sar    edx,0x5
9f002d19:	89 c8                	mov    eax,ecx
9f002d1b:	c1 f8 1f             	sar    eax,0x1f
9f002d1e:	29 c2                	sub    edx,eax
9f002d20:	89 d0                	mov    eax,edx
9f002d22:	89 85 b8 fe ff ff    	mov    DWORD PTR [ebp-0x148],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:71
                
                memsetI(&tinfo,0,sizeof(struct tm));
9f002d28:	83 ec 04             	sub    esp,0x4
9f002d2b:	6a 2c                	push   0x2c
9f002d2d:	6a 00                	push   0x0
9f002d2f:	8d 83 84 00 00 00    	lea    eax,[ebx+0x84]
9f002d35:	50                   	push   eax
9f002d36:	e8 49 fc ff ff       	call   9f002984 <memsetI>
9f002d3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:72
                gmtime_rI((time_t*)&runtime_secs,&tinfo);
9f002d3e:	83 ec 08             	sub    esp,0x8
9f002d41:	8d 83 84 00 00 00    	lea    eax,[ebx+0x84]
9f002d47:	50                   	push   eax
9f002d48:	8d 85 b8 fe ff ff    	lea    eax,[ebp-0x148]
9f002d4e:	50                   	push   eax
9f002d4f:	e8 90 16 00 00       	call   9f0043e4 <gmtime_rI>
9f002d54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:73
                memsetI(procinfo->time,0,40);
9f002d57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d5a:	83 c0 64             	add    eax,0x64
9f002d5d:	83 ec 04             	sub    esp,0x4
9f002d60:	6a 28                	push   0x28
9f002d62:	6a 00                	push   0x0
9f002d64:	50                   	push   eax
9f002d65:	e8 1a fc ff ff       	call   9f002984 <memsetI>
9f002d6a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:74
                sprintfI(procinfo->time,"%02i:%02i:%02i",tinfo.tm_hour,tinfo.tm_min,tinfo.tm_sec);
9f002d6d:	8b 8b 84 00 00 00    	mov    ecx,DWORD PTR [ebx+0x84]
9f002d73:	8b 93 88 00 00 00    	mov    edx,DWORD PTR [ebx+0x88]
9f002d79:	8b 83 8c 00 00 00    	mov    eax,DWORD PTR [ebx+0x8c]
9f002d7f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
9f002d82:	83 c6 64             	add    esi,0x64
9f002d85:	83 ec 0c             	sub    esp,0xc
9f002d88:	51                   	push   ecx
9f002d89:	52                   	push   edx
9f002d8a:	50                   	push   eax
9f002d8b:	8d 83 b1 fa ff ff    	lea    eax,[ebx-0x54f]
9f002d91:	50                   	push   eax
9f002d92:	56                   	push   esi
9f002d93:	e8 d5 09 00 00       	call   9f00376d <sprintfI>
9f002d98:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:75
                procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)ticksPerUpdateInterval)*100;
9f002d9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002d9e:	8b 40 40             	mov    eax,DWORD PTR [eax+0x40]
9f002da1:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002da7:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002dad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002db0:	8b 40 44             	mov    eax,DWORD PTR [eax+0x44]
9f002db3:	89 85 b4 fe ff ff    	mov    DWORD PTR [ebp-0x14c],eax
9f002db9:	db 85 b4 fe ff ff    	fild   DWORD PTR [ebp-0x14c]
9f002dbf:	de e9                	fsubp  st(1),st
9f002dc1:	db 45 10             	fild   DWORD PTR [ebp+0x10]
9f002dc4:	de f9                	fdivp  st(1),st
9f002dc6:	dd 83 3c fb ff ff    	fld    QWORD PTR [ebx-0x4c4]
9f002dcc:	de c9                	fmulp  st(1),st
9f002dce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002dd1:	dd 58 4c             	fstp   QWORD PTR [eax+0x4c]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:76
                procinfo->lastTicks=procinfo->ticks;
9f002dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002dd7:	8b 50 40             	mov    edx,DWORD PTR [eax+0x40]
9f002dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002ddd:	89 50 44             	mov    DWORD PTR [eax+0x44],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:79
                
//procinfo->cpu=(((double)procinfo->ticks-(double)procinfo->lastTicks)/(double)intervalTicks)*100;
                break;
9f002de0:	eb 2f                	jmp    9f002e11 <.L3>

9f002de2 <.L14>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:81
            case 22://vsize
                procinfo->virtualSize=atoiI(token);
9f002de2:	83 ec 0c             	sub    esp,0xc
9f002de5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002de8:	e8 4e d6 ff ff       	call   9f00043b <atoiI>
9f002ded:	83 c4 10             	add    esp,0x10
9f002df0:	89 c2                	mov    edx,eax
9f002df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002df5:	89 50 58             	mov    DWORD PTR [eax+0x58],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:82
                break;
9f002df8:	eb 17                	jmp    9f002e11 <.L3>

9f002dfa <.L15>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:84
            case 23://rss
                procinfo->memorySize=atoiI(token);
9f002dfa:	83 ec 0c             	sub    esp,0xc
9f002dfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f002e00:	e8 36 d6 ff ff       	call   9f00043b <atoiI>
9f002e05:	83 c4 10             	add    esp,0x10
9f002e08:	89 c2                	mov    edx,eax
9f002e0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f002e0d:	89 50 5c             	mov    DWORD PTR [eax+0x5c],edx
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:85
                break;
9f002e10:	90                   	nop

9f002e11 <.L3>:
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:87
        }
        tokenNumber++;
9f002e11:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:88
        token=strtokI(NULL,delim);
9f002e15:	83 ec 08             	sub    esp,0x8
9f002e18:	8d 45 e8             	lea    eax,[ebp-0x18]
9f002e1b:	50                   	push   eax
9f002e1c:	6a 00                	push   0x0
9f002e1e:	e8 f9 d2 ff ff       	call   9f00011c <strtokI>
9f002e23:	83 c4 10             	add    esp,0x10
9f002e26:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:30
    memsetI(name,0,100);
    memsetI(name2,0,100);
    memsetI(name3,0,100);
    
    token=strtokI(statinfo,delim);
    while (token)
9f002e29:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
9f002e2d:	0f 85 17 fd ff ff    	jne    9f002b4a <buildProcInfoTI+0x86>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:90
                break;
        }
        tokenNumber++;
        token=strtokI(NULL,delim);
    }
    return procinfo;
9f002e33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:92
    
}
9f002e36:	8d 65 f8             	lea    esp,[ebp-0x8]
9f002e39:	5b                   	pop    ebx
9f002e3a:	5e                   	pop    esi
9f002e3b:	5d                   	pop    ebp
9f002e3c:	c3                   	ret    

9f002e3d <buildProcInfoT>:
buildProcInfoT():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:95

VISIBLE procInfo_t *buildProcInfoT(procInfo_t *procinfo, char *statinfo)
{
9f002e3d:	55                   	push   ebp
9f002e3e:	89 e5                	mov    ebp,esp
9f002e40:	83 ec 08             	sub    esp,0x8
9f002e43:	e8 66 22 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f002e48:	05 54 4f 00 00       	add    eax,0x4f54
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:96
    return buildProcInfoTI(procinfo, statinfo, 0);
9f002e4d:	83 ec 04             	sub    esp,0x4
9f002e50:	6a 00                	push   0x0
9f002e52:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f002e55:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f002e58:	e8 67 fc ff ff       	call   9f002ac4 <buildProcInfoTI>
9f002e5d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:97
}
9f002e60:	c9                   	leave  
9f002e61:	c3                   	ret    

9f002e62 <buildAllProcInfoTs>:
buildAllProcInfoTs():
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:100

VISIBLE void buildAllProcInfoTs(procInfo_t **topinfo, int intervalTicks, int iteration)
{
9f002e62:	55                   	push   ebp
9f002e63:	89 e5                	mov    ebp,esp
9f002e65:	56                   	push   esi
9f002e66:	53                   	push   ebx
9f002e67:	81 ec a0 01 00 00    	sub    esp,0x1a0
9f002e6d:	e8 40 22 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f002e72:	81 c3 2a 4f 00 00    	add    ebx,0x4f2a
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:103
    static direntry_t *dirEntries;
    
    if (!dirEntries)
9f002e78:	8b 83 b0 00 00 00    	mov    eax,DWORD PTR [ebx+0xb0]
9f002e7e:	85 c0                	test   eax,eax
9f002e80:	75 16                	jne    9f002e98 <buildAllProcInfoTs+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:104
        dirEntries=mallocI(PROCINFO_MAX_PROCESSES*sizeof(direntry_t));
9f002e82:	83 ec 0c             	sub    esp,0xc
9f002e85:	68 00 17 01 00       	push   0x11700
9f002e8a:	e8 de f4 ff ff       	call   9f00236d <mallocI>
9f002e8f:	83 c4 10             	add    esp,0x10
9f002e92:	89 83 b0 00 00 00    	mov    DWORD PTR [ebx+0xb0],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:107

    char path[128];
    int procCount=getdirI("/proc/",dirEntries,1024*100);
9f002e98:	8b 83 b0 00 00 00    	mov    eax,DWORD PTR [ebx+0xb0]
9f002e9e:	83 ec 04             	sub    esp,0x4
9f002ea1:	68 00 90 01 00       	push   0x19000
9f002ea6:	50                   	push   eax
9f002ea7:	8d 83 20 fb ff ff    	lea    eax,[ebx-0x4e0]
9f002ead:	50                   	push   eax
9f002eae:	e8 51 da ff ff       	call   9f000904 <getdirI>
9f002eb3:	83 c4 10             	add    esp,0x10
9f002eb6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:111
    char statBuffer[256];
    procInfo_t *currProc;

    for (int cnt=0;cnt<procCount;cnt++)
9f002eb9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
9f002ec0:	e9 af 01 00 00       	jmp    9f003074 <buildAllProcInfoTs+0x212>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:113
    {
        if (dirEntries[cnt].is_dir)
9f002ec5:	8b 93 b0 00 00 00    	mov    edx,DWORD PTR [ebx+0xb0]
9f002ecb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002ece:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f002ed4:	01 d0                	add    eax,edx
9f002ed6:	0f b6 80 04 01 00 00 	movzx  eax,BYTE PTR [eax+0x104]
9f002edd:	84 c0                	test   al,al
9f002edf:	0f 84 8b 01 00 00    	je     9f003070 <buildAllProcInfoTs+0x20e>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:115
        {
            strcpyI(path,"/proc/");
9f002ee5:	83 ec 08             	sub    esp,0x8
9f002ee8:	8d 83 20 fb ff ff    	lea    eax,[ebx-0x4e0]
9f002eee:	50                   	push   eax
9f002eef:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002ef5:	50                   	push   eax
9f002ef6:	e8 2d 0b 00 00       	call   9f003a28 <strcpyI>
9f002efb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:116
            strcatI(path,dirEntries[cnt].filename);
9f002efe:	8b 93 b0 00 00 00    	mov    edx,DWORD PTR [ebx+0xb0]
9f002f04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f002f07:	69 c0 17 01 00 00    	imul   eax,eax,0x117
9f002f0d:	01 d0                	add    eax,edx
9f002f0f:	83 ec 08             	sub    esp,0x8
9f002f12:	50                   	push   eax
9f002f13:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002f19:	50                   	push   eax
9f002f1a:	e8 77 09 00 00       	call   9f003896 <strcatI>
9f002f1f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:117
            strcatI(path,"/stat");
9f002f22:	83 ec 08             	sub    esp,0x8
9f002f25:	8d 83 27 fb ff ff    	lea    eax,[ebx-0x4d9]
9f002f2b:	50                   	push   eax
9f002f2c:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002f32:	50                   	push   eax
9f002f33:	e8 5e 09 00 00       	call   9f003896 <strcatI>
9f002f38:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:118
            if (strstrI(path,"self")!=NULL)
9f002f3b:	83 ec 08             	sub    esp,0x8
9f002f3e:	8d 83 2d fb ff ff    	lea    eax,[ebx-0x4d3]
9f002f44:	50                   	push   eax
9f002f45:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002f4b:	50                   	push   eax
9f002f4c:	e8 c1 13 00 00       	call   9f004312 <strstrI>
9f002f51:	83 c4 10             	add    esp,0x10
9f002f54:	85 c0                	test   eax,eax
9f002f56:	0f 85 13 01 00 00    	jne    9f00306f <buildAllProcInfoTs+0x20d>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:120
                continue;
            int *handle=openI(path,"r");
9f002f5c:	83 ec 08             	sub    esp,0x8
9f002f5f:	8d 83 32 fb ff ff    	lea    eax,[ebx-0x4ce]
9f002f65:	50                   	push   eax
9f002f66:	8d 85 60 ff ff ff    	lea    eax,[ebp-0xa0]
9f002f6c:	50                   	push   eax
9f002f6d:	e8 e9 d9 ff ff       	call   9f00095b <openI>
9f002f72:	83 c4 10             	add    esp,0x10
9f002f75:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:121
            if (handle)
9f002f78:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f002f7c:	0f 84 ee 00 00 00    	je     9f003070 <buildAllProcInfoTs+0x20e>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:123
            {
                readI(handle,statBuffer,1024,1);
9f002f82:	6a 01                	push   0x1
9f002f84:	68 00 04 00 00       	push   0x400
9f002f89:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f002f8f:	50                   	push   eax
9f002f90:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002f93:	e8 48 db ff ff       	call   9f000ae0 <readI>
9f002f98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:124
                closeI(handle);
9f002f9b:	83 ec 0c             	sub    esp,0xc
9f002f9e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
9f002fa1:	e8 f0 da ff ff       	call   9f000a96 <closeI>
9f002fa6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:126
                //buildTopInfo(statBuffer,topinfo);
                char *space=strstrI(statBuffer," ");
9f002fa9:	83 ec 08             	sub    esp,0x8
9f002fac:	8d 83 34 fb ff ff    	lea    eax,[ebx-0x4cc]
9f002fb2:	50                   	push   eax
9f002fb3:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f002fb9:	50                   	push   eax
9f002fba:	e8 53 13 00 00       	call   9f004312 <strstrI>
9f002fbf:	83 c4 10             	add    esp,0x10
9f002fc2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:128
                char pid[8];
                strncpyI(pid,statBuffer,space-statBuffer);
9f002fc5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f002fc8:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f002fce:	29 c2                	sub    edx,eax
9f002fd0:	89 d0                	mov    eax,edx
9f002fd2:	83 ec 04             	sub    esp,0x4
9f002fd5:	50                   	push   eax
9f002fd6:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f002fdc:	50                   	push   eax
9f002fdd:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f002fe3:	50                   	push   eax
9f002fe4:	e8 c7 0c 00 00       	call   9f003cb0 <strncpyI>
9f002fe9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:129
                int ipid=atoiI(pid);
9f002fec:	83 ec 0c             	sub    esp,0xc
9f002fef:	8d 85 58 fe ff ff    	lea    eax,[ebp-0x1a8]
9f002ff5:	50                   	push   eax
9f002ff6:	e8 40 d4 ff ff       	call   9f00043b <atoiI>
9f002ffb:	83 c4 10             	add    esp,0x10
9f002ffe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:130
                if (topinfo[ipid]==NULL)
9f003001:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003004:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f00300b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00300e:	01 d0                	add    eax,edx
9f003010:	8b 00                	mov    eax,DWORD PTR [eax]
9f003012:	85 c0                	test   eax,eax
9f003014:	75 22                	jne    9f003038 <buildAllProcInfoTs+0x1d6>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:131
                    topinfo[ipid]=mallocI(sizeof(procInfo_t));
9f003016:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003019:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f003020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003023:	8d 34 02             	lea    esi,[edx+eax*1]
9f003026:	83 ec 0c             	sub    esp,0xc
9f003029:	68 8c 00 00 00       	push   0x8c
9f00302e:	e8 3a f3 ff ff       	call   9f00236d <mallocI>
9f003033:	83 c4 10             	add    esp,0x10
9f003036:	89 06                	mov    DWORD PTR [esi],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:132
                currProc=topinfo[ipid];
9f003038:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00303b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
9f003042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003045:	01 d0                	add    eax,edx
9f003047:	8b 00                	mov    eax,DWORD PTR [eax]
9f003049:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:133
                buildProcInfoTI(currProc, statBuffer, intervalTicks);
9f00304c:	83 ec 04             	sub    esp,0x4
9f00304f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003052:	8d 85 60 fe ff ff    	lea    eax,[ebp-0x1a0]
9f003058:	50                   	push   eax
9f003059:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f00305c:	e8 63 fa ff ff       	call   9f002ac4 <buildProcInfoTI>
9f003061:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:134
                currProc->lastUpdateIteration=iteration;
9f003064:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f003067:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f00306a:	89 50 60             	mov    DWORD PTR [eax+0x60],edx
9f00306d:	eb 01                	jmp    9f003070 <buildAllProcInfoTs+0x20e>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:119
        {
            strcpyI(path,"/proc/");
            strcatI(path,dirEntries[cnt].filename);
            strcatI(path,"/stat");
            if (strstrI(path,"self")!=NULL)
                continue;
9f00306f:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:111 (discriminator 2)
    char path[128];
    int procCount=getdirI("/proc/",dirEntries,1024*100);
    char statBuffer[256];
    procInfo_t *currProc;

    for (int cnt=0;cnt<procCount;cnt++)
9f003070:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:111 (discriminator 1)
9f003074:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003077:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f00307a:	0f 8c 45 fe ff ff    	jl     9f002ec5 <buildAllProcInfoTs+0x63>
/home/yogi/src/os/aproj/libChrisOS/src/procinfo.c:140
            }
        }
    }
    //free(dirEntries); variable is static so it will exist until the program ends
    //at which time it will be free'd automagically
9f003080:	90                   	nop
9f003081:	8d 65 f8             	lea    esp,[ebp-0x8]
9f003084:	5b                   	pop    ebx
9f003085:	5e                   	pop    esi
9f003086:	5d                   	pop    ebp
9f003087:	c3                   	ret    

9f003088 <skip_atoi>:
skip_atoi():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:12
#include <stdarg.h>
#include "common.h"
#include "strings.h"

static int skip_atoi(const char **s)
{
9f003088:	55                   	push   ebp
9f003089:	89 e5                	mov    ebp,esp
9f00308b:	53                   	push   ebx
9f00308c:	83 ec 10             	sub    esp,0x10
9f00308f:	e8 1a 20 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003094:	05 08 4d 00 00       	add    eax,0x4d08
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:13
	int i = 0;
9f003099:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15

	while (ISDIGIT(**s))
9f0030a0:	eb 29                	jmp    9f0030cb <skip_atoi+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:16
		i = i * 10 + *((*s)++) - '0';
9f0030a2:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0030a5:	89 d0                	mov    eax,edx
9f0030a7:	c1 e0 02             	shl    eax,0x2
9f0030aa:	01 d0                	add    eax,edx
9f0030ac:	01 c0                	add    eax,eax
9f0030ae:	89 c3                	mov    ebx,eax
9f0030b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030b3:	8b 00                	mov    eax,DWORD PTR [eax]
9f0030b5:	8d 48 01             	lea    ecx,[eax+0x1]
9f0030b8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0030bb:	89 0a                	mov    DWORD PTR [edx],ecx
9f0030bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0030c0:	0f be c0             	movsx  eax,al
9f0030c3:	01 d8                	add    eax,ebx
9f0030c5:	83 e8 30             	sub    eax,0x30
9f0030c8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:15

static int skip_atoi(const char **s)
{
	int i = 0;

	while (ISDIGIT(**s))
9f0030cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0030ce:	8b 00                	mov    eax,DWORD PTR [eax]
9f0030d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0030d3:	0f be c0             	movsx  eax,al
9f0030d6:	83 e8 30             	sub    eax,0x30
9f0030d9:	83 f8 09             	cmp    eax,0x9
9f0030dc:	76 c4                	jbe    9f0030a2 <skip_atoi+0x1a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:17
		i = i * 10 + *((*s)++) - '0';
	return i;
9f0030de:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:18
}
9f0030e1:	83 c4 10             	add    esp,0x10
9f0030e4:	5b                   	pop    ebx
9f0030e5:	5d                   	pop    ebp
9f0030e6:	c3                   	ret    

9f0030e7 <number>:
number():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:36
n = ((unsigned long) n) / (unsigned) base; \
__res; })

static char *number(char *str, long num, int base, int size, int precision,
		    int type)
{
9f0030e7:	55                   	push   ebp
9f0030e8:	89 e5                	mov    ebp,esp
9f0030ea:	56                   	push   esi
9f0030eb:	53                   	push   ebx
9f0030ec:	83 ec 60             	sub    esp,0x60
9f0030ef:	e8 be 1f 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0030f4:	81 c3 a8 4c 00 00    	add    ebx,0x4ca8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:46
	char c, sign, locase;
	int i;

	/* locase = 0 or 0x20. ORing digits or letters with 'locase'
	 * produces same digits or (maybe lowercased) letters */
	locase = (type & SMALL);
9f0030fa:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f0030fd:	83 e0 20             	and    eax,0x20
9f003100:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:47
	if (type & LEFT)
9f003103:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003106:	83 e0 10             	and    eax,0x10
9f003109:	85 c0                	test   eax,eax
9f00310b:	74 04                	je     9f003111 <number+0x2a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:48
		type &= ~ZEROPAD;
9f00310d:	83 65 1c fe          	and    DWORD PTR [ebp+0x1c],0xfffffffe
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49
	if (base < 2 || base > 16)
9f003111:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
9f003115:	7e 06                	jle    9f00311d <number+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:49 (discriminator 1)
9f003117:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f00311b:	7e 0a                	jle    9f003127 <number+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:50
		return NULL;
9f00311d:	b8 00 00 00 00       	mov    eax,0x0
9f003122:	e9 f7 01 00 00       	jmp    9f00331e <number+0x237>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51
	c = (type & ZEROPAD) ? '0' : ' ';
9f003127:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00312a:	83 e0 01             	and    eax,0x1
9f00312d:	85 c0                	test   eax,eax
9f00312f:	74 07                	je     9f003138 <number+0x51>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 1)
9f003131:	b8 30 00 00 00       	mov    eax,0x30
9f003136:	eb 05                	jmp    9f00313d <number+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 2)
9f003138:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:51 (discriminator 4)
9f00313d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:52 (discriminator 4)
	sign = 0;
9f003140:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:53 (discriminator 4)
	if (type & SIGN) {
9f003144:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003147:	83 e0 02             	and    eax,0x2
9f00314a:	85 c0                	test   eax,eax
9f00314c:	74 39                	je     9f003187 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:54
		if (num < 0) {
9f00314e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003152:	79 0d                	jns    9f003161 <number+0x7a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:55
			sign = '-';
9f003154:	c6 45 f7 2d          	mov    BYTE PTR [ebp-0x9],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:56
			num = -num;
9f003158:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:57
			size--;
9f00315b:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f00315f:	eb 26                	jmp    9f003187 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:58
		} else if (type & PLUS) {
9f003161:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003164:	83 e0 04             	and    eax,0x4
9f003167:	85 c0                	test   eax,eax
9f003169:	74 0a                	je     9f003175 <number+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:59
			sign = '+';
9f00316b:	c6 45 f7 2b          	mov    BYTE PTR [ebp-0x9],0x2b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:60
			size--;
9f00316f:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
9f003173:	eb 12                	jmp    9f003187 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:61
		} else if (type & SPACE) {
9f003175:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003178:	83 e0 08             	and    eax,0x8
9f00317b:	85 c0                	test   eax,eax
9f00317d:	74 08                	je     9f003187 <number+0xa0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:62
			sign = ' ';
9f00317f:	c6 45 f7 20          	mov    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:63
			size--;
9f003183:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:66
		}
	}
	if (type & SPECIAL) {
9f003187:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00318a:	83 e0 40             	and    eax,0x40
9f00318d:	85 c0                	test   eax,eax
9f00318f:	74 16                	je     9f0031a7 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:67
		if (base == 16)
9f003191:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003195:	75 06                	jne    9f00319d <number+0xb6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:68
			size -= 2;
9f003197:	83 6d 14 02          	sub    DWORD PTR [ebp+0x14],0x2
9f00319b:	eb 0a                	jmp    9f0031a7 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:69
		else if (base == 8)
9f00319d:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f0031a1:	75 04                	jne    9f0031a7 <number+0xc0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:70
			size--;
9f0031a3:	83 6d 14 01          	sub    DWORD PTR [ebp+0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:72
	}
	i = 0;
9f0031a7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:73
	if (num == 0)
9f0031ae:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f0031b2:	75 4d                	jne    9f003201 <number+0x11a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:74
		tmp[i++] = '0';
9f0031b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0031b7:	8d 50 01             	lea    edx,[eax+0x1]
9f0031ba:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0031bd:	c6 44 05 a6 30       	mov    BYTE PTR [ebp+eax*1-0x5a],0x30
9f0031c2:	eb 43                	jmp    9f003207 <number+0x120>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:77
	else
		while (num != 0)
			tmp[i++] = (digits[__do_div(num, base)] | locase);
9f0031c4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f0031c7:	8d 41 01             	lea    eax,[ecx+0x1]
9f0031ca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0031cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0031d0:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0031d3:	ba 00 00 00 00       	mov    edx,0x0
9f0031d8:	f7 f6                	div    esi
9f0031da:	89 d0                	mov    eax,edx
9f0031dc:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
9f0031df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0031e2:	8b 75 10             	mov    esi,DWORD PTR [ebp+0x10]
9f0031e5:	ba 00 00 00 00       	mov    edx,0x0
9f0031ea:	f7 f6                	div    esi
9f0031ec:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
9f0031ef:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f0031f2:	0f b6 84 03 d8 fc ff 	movzx  eax,BYTE PTR [ebx+eax*1-0x328]
9f0031f9:	ff 
9f0031fa:	0a 45 ef             	or     al,BYTE PTR [ebp-0x11]
9f0031fd:	88 44 0d a6          	mov    BYTE PTR [ebp+ecx*1-0x5a],al
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:76
	}
	i = 0;
	if (num == 0)
		tmp[i++] = '0';
	else
		while (num != 0)
9f003201:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003205:	75 bd                	jne    9f0031c4 <number+0xdd>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:78
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
9f003207:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00320a:	3b 45 18             	cmp    eax,DWORD PTR [ebp+0x18]
9f00320d:	7e 06                	jle    9f003215 <number+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:79
		precision = i;
9f00320f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003212:	89 45 18             	mov    DWORD PTR [ebp+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:80
	size -= precision;
9f003215:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f003218:	29 45 14             	sub    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:81
	if (!(type & (ZEROPAD + LEFT)))
9f00321b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00321e:	83 e0 11             	and    eax,0x11
9f003221:	85 c0                	test   eax,eax
9f003223:	75 1b                	jne    9f003240 <number+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
		while (size-- > 0)
9f003225:	eb 0c                	jmp    9f003233 <number+0x14c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:83
			*str++ = ' ';
9f003227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00322a:	8d 50 01             	lea    edx,[eax+0x1]
9f00322d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003230:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:82
			tmp[i++] = (digits[__do_div(num, base)] | locase);
	if (i > precision)
		precision = i;
	size -= precision;
	if (!(type & (ZEROPAD + LEFT)))
		while (size-- > 0)
9f003233:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003236:	8d 50 ff             	lea    edx,[eax-0x1]
9f003239:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f00323c:	85 c0                	test   eax,eax
9f00323e:	7f e7                	jg     9f003227 <number+0x140>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:84
			*str++ = ' ';
	if (sign)
9f003240:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f003244:	74 0f                	je     9f003255 <number+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:85
		*str++ = sign;
9f003246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003249:	8d 50 01             	lea    edx,[eax+0x1]
9f00324c:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00324f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f003253:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:86
	if (type & SPECIAL) {
9f003255:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f003258:	83 e0 40             	and    eax,0x40
9f00325b:	85 c0                	test   eax,eax
9f00325d:	74 38                	je     9f003297 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:87
		if (base == 8)
9f00325f:	83 7d 10 08          	cmp    DWORD PTR [ebp+0x10],0x8
9f003263:	75 0e                	jne    9f003273 <number+0x18c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:88
			*str++ = '0';
9f003265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003268:	8d 50 01             	lea    edx,[eax+0x1]
9f00326b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00326e:	c6 00 30             	mov    BYTE PTR [eax],0x30
9f003271:	eb 24                	jmp    9f003297 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:89
		else if (base == 16) {
9f003273:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003277:	75 1e                	jne    9f003297 <number+0x1b0>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:90
			*str++ = '0';
9f003279:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00327c:	8d 50 01             	lea    edx,[eax+0x1]
9f00327f:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f003282:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:91
			*str++ = ('X' | locase);
9f003285:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003288:	8d 50 01             	lea    edx,[eax+0x1]
9f00328b:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00328e:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
9f003292:	83 ca 58             	or     edx,0x58
9f003295:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:94
		}
	}
	if (!(type & LEFT))
9f003297:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
9f00329a:	83 e0 10             	and    eax,0x10
9f00329d:	85 c0                	test   eax,eax
9f00329f:	75 2c                	jne    9f0032cd <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
		while (size-- > 0)
9f0032a1:	eb 0f                	jmp    9f0032b2 <number+0x1cb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:96
			*str++ = c;
9f0032a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032a6:	8d 50 01             	lea    edx,[eax+0x1]
9f0032a9:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0032ac:	0f b6 55 ee          	movzx  edx,BYTE PTR [ebp-0x12]
9f0032b0:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:95
			*str++ = '0';
			*str++ = ('X' | locase);
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
9f0032b2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f0032b5:	8d 50 ff             	lea    edx,[eax-0x1]
9f0032b8:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f0032bb:	85 c0                	test   eax,eax
9f0032bd:	7f e4                	jg     9f0032a3 <number+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
			*str++ = c;
	while (i < precision--)
9f0032bf:	eb 0c                	jmp    9f0032cd <number+0x1e6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:98
		*str++ = '0';
9f0032c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032c4:	8d 50 01             	lea    edx,[eax+0x1]
9f0032c7:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0032ca:	c6 00 30             	mov    BYTE PTR [eax],0x30
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:97
		}
	}
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
9f0032cd:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
9f0032d0:	8d 50 ff             	lea    edx,[eax-0x1]
9f0032d3:	89 55 18             	mov    DWORD PTR [ebp+0x18],edx
9f0032d6:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0032d9:	7f e6                	jg     9f0032c1 <number+0x1da>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
		*str++ = '0';
	while (i-- > 0)
9f0032db:	eb 16                	jmp    9f0032f3 <number+0x20c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:100
		*str++ = tmp[i];
9f0032dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0032e0:	8d 50 01             	lea    edx,[eax+0x1]
9f0032e3:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f0032e6:	8d 4d a6             	lea    ecx,[ebp-0x5a]
9f0032e9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0032ec:	01 ca                	add    edx,ecx
9f0032ee:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0032f1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:99
	if (!(type & LEFT))
		while (size-- > 0)
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
9f0032f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0032f6:	8d 50 ff             	lea    edx,[eax-0x1]
9f0032f9:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
9f0032fc:	85 c0                	test   eax,eax
9f0032fe:	7f dd                	jg     9f0032dd <number+0x1f6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
		*str++ = tmp[i];
	while (size-- > 0)
9f003300:	eb 0c                	jmp    9f00330e <number+0x227>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:102
		*str++ = ' ';
9f003302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003305:	8d 50 01             	lea    edx,[eax+0x1]
9f003308:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
9f00330b:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:101
			*str++ = c;
	while (i < precision--)
		*str++ = '0';
	while (i-- > 0)
		*str++ = tmp[i];
	while (size-- > 0)
9f00330e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
9f003311:	8d 50 ff             	lea    edx,[eax-0x1]
9f003314:	89 55 14             	mov    DWORD PTR [ebp+0x14],edx
9f003317:	85 c0                	test   eax,eax
9f003319:	7f e7                	jg     9f003302 <number+0x21b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:103
		*str++ = ' ';
	return str;
9f00331b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:104 (discriminator 1)
}
9f00331e:	83 c4 60             	add    esp,0x60
9f003321:	5b                   	pop    ebx
9f003322:	5e                   	pop    esi
9f003323:	5d                   	pop    ebp
9f003324:	c3                   	ret    

9f003325 <vsprintf>:
vsprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:106
int vsprintf(char *buf, const char *fmt, va_list args)
{
9f003325:	55                   	push   ebp
9f003326:	89 e5                	mov    ebp,esp
9f003328:	53                   	push   ebx
9f003329:	83 ec 34             	sub    esp,0x34
9f00332c:	e8 81 1d 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f003331:	81 c3 6b 4a 00 00    	add    ebx,0x4a6b
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f003337:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00333a:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
9f00333d:	e9 08 04 00 00       	jmp    9f00374a <.L96+0x95>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:121
		if (*fmt != '%') {
9f003342:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003345:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003348:	3c 25                	cmp    al,0x25
9f00334a:	74 16                	je     9f003362 <vsprintf+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:122
			*str++ = *fmt;
9f00334c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00334f:	8d 50 01             	lea    edx,[eax+0x1]
9f003352:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003355:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003358:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00335b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:123
			continue;
9f00335d:	e9 df 03 00 00       	jmp    9f003741 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:127
		}

		/* process flags */
		flags = 0;
9f003362:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:129
	      repeat:
		++fmt;		/* this also skips first '%' */
9f003369:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00336c:	83 c0 01             	add    eax,0x1
9f00336f:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:130
		switch (*fmt) {
9f003372:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003375:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003378:	0f be c0             	movsx  eax,al
9f00337b:	83 e8 20             	sub    eax,0x20
9f00337e:	83 f8 10             	cmp    eax,0x10
9f003381:	77 2c                	ja     9f0033af <.L43>
9f003383:	c1 e0 02             	shl    eax,0x2
9f003386:	8b 84 18 44 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x4bc]
9f00338d:	01 d8                	add    eax,ebx
9f00338f:	ff e0                	jmp    eax

9f003391 <.L48>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:132
		case '-':
			flags |= LEFT;
9f003391:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:133
			goto repeat;
9f003395:	eb d2                	jmp    9f003369 <vsprintf+0x44>

9f003397 <.L47>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:135
		case '+':
			flags |= PLUS;
9f003397:	83 4d dc 04          	or     DWORD PTR [ebp-0x24],0x4
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:136
			goto repeat;
9f00339b:	eb cc                	jmp    9f003369 <vsprintf+0x44>

9f00339d <.L44>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:138
		case ' ':
			flags |= SPACE;
9f00339d:	83 4d dc 08          	or     DWORD PTR [ebp-0x24],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:139
			goto repeat;
9f0033a1:	eb c6                	jmp    9f003369 <vsprintf+0x44>

9f0033a3 <.L46>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:141
		case '#':
			flags |= SPECIAL;
9f0033a3:	83 4d dc 40          	or     DWORD PTR [ebp-0x24],0x40
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:142
			goto repeat;
9f0033a7:	eb c0                	jmp    9f003369 <vsprintf+0x44>

9f0033a9 <.L49>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:144
		case '0':
			flags |= ZEROPAD;
9f0033a9:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:145
			goto repeat;
9f0033ad:	eb ba                	jmp    9f003369 <vsprintf+0x44>

9f0033af <.L43>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:149
		}

		/* get field width */
		field_width = -1;
9f0033af:	c7 45 d8 ff ff ff ff 	mov    DWORD PTR [ebp-0x28],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:150
		if (ISDIGIT(*fmt))
9f0033b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033b9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033bc:	0f be c0             	movsx  eax,al
9f0033bf:	83 e8 30             	sub    eax,0x30
9f0033c2:	83 f8 09             	cmp    eax,0x9
9f0033c5:	77 11                	ja     9f0033d8 <.L43+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:151
			field_width = skip_atoi(&fmt);
9f0033c7:	8d 45 0c             	lea    eax,[ebp+0xc]
9f0033ca:	50                   	push   eax
9f0033cb:	e8 b8 fc ff ff       	call   9f003088 <skip_atoi>
9f0033d0:	83 c4 04             	add    esp,0x4
9f0033d3:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
9f0033d6:	eb 2e                	jmp    9f003406 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:152
		else if (*fmt == '*') {
9f0033d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0033de:	3c 2a                	cmp    al,0x2a
9f0033e0:	75 24                	jne    9f003406 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:153
			++fmt;
9f0033e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0033e5:	83 c0 01             	add    eax,0x1
9f0033e8:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:155
			/* it's the next argument */
			field_width = va_arg(args, int);
9f0033eb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0033ee:	8d 50 04             	lea    edx,[eax+0x4]
9f0033f1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0033f4:	8b 00                	mov    eax,DWORD PTR [eax]
9f0033f6:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:156
			if (field_width < 0) {
9f0033f9:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f0033fd:	79 07                	jns    9f003406 <.L43+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:157
				field_width = -field_width;
9f0033ff:	f7 5d d8             	neg    DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:158
				flags |= LEFT;
9f003402:	83 4d dc 10          	or     DWORD PTR [ebp-0x24],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:163
			}
		}

		/* get the precision */
		precision = -1;
9f003406:	c7 45 d4 ff ff ff ff 	mov    DWORD PTR [ebp-0x2c],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:164
		if (*fmt == '.') {
9f00340d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003410:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003413:	3c 2e                	cmp    al,0x2e
9f003415:	75 59                	jne    9f003470 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:165
			++fmt;
9f003417:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00341a:	83 c0 01             	add    eax,0x1
9f00341d:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:166
			if (ISDIGIT(*fmt))
9f003420:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003423:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003426:	0f be c0             	movsx  eax,al
9f003429:	83 e8 30             	sub    eax,0x30
9f00342c:	83 f8 09             	cmp    eax,0x9
9f00342f:	77 11                	ja     9f003442 <.L43+0x93>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:167
				precision = skip_atoi(&fmt);
9f003431:	8d 45 0c             	lea    eax,[ebp+0xc]
9f003434:	50                   	push   eax
9f003435:	e8 4e fc ff ff       	call   9f003088 <skip_atoi>
9f00343a:	83 c4 04             	add    esp,0x4
9f00343d:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
9f003440:	eb 21                	jmp    9f003463 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:168
			else if (*fmt == '*') {
9f003442:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003445:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003448:	3c 2a                	cmp    al,0x2a
9f00344a:	75 17                	jne    9f003463 <.L43+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:169
				++fmt;
9f00344c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00344f:	83 c0 01             	add    eax,0x1
9f003452:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:171
				/* it's the next argument */
				precision = va_arg(args, int);
9f003455:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003458:	8d 50 04             	lea    edx,[eax+0x4]
9f00345b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00345e:	8b 00                	mov    eax,DWORD PTR [eax]
9f003460:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:173
			}
			if (precision < 0)
9f003463:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
9f003467:	79 07                	jns    9f003470 <.L43+0xc1>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:174
				precision = 0;
9f003469:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:178
		}

		/* get the conversion qualifier */
		qualifier = -1;
9f003470:	c7 45 d0 ff ff ff ff 	mov    DWORD PTR [ebp-0x30],0xffffffff
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179
		if (*fmt == 'h' || *fmt == 'l' || *fmt == 'L') {
9f003477:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00347a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00347d:	3c 68                	cmp    al,0x68
9f00347f:	74 14                	je     9f003495 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179 (discriminator 1)
9f003481:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003484:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003487:	3c 6c                	cmp    al,0x6c
9f003489:	74 0a                	je     9f003495 <.L43+0xe6>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:179 (discriminator 2)
9f00348b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00348e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003491:	3c 4c                	cmp    al,0x4c
9f003493:	75 15                	jne    9f0034aa <.L43+0xfb>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:180
			qualifier = *fmt;
9f003495:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003498:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00349b:	0f be c0             	movsx  eax,al
9f00349e:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:181
			++fmt;
9f0034a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0034a4:	83 c0 01             	add    eax,0x1
9f0034a7:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:185
		}

		/* default base */
		base = 10;
9f0034aa:	c7 45 e8 0a 00 00 00 	mov    DWORD PTR [ebp-0x18],0xa
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:187

		switch (*fmt) {
9f0034b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0034b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0034b7:	0f be c0             	movsx  eax,al
9f0034ba:	83 e8 25             	sub    eax,0x25
9f0034bd:	83 f8 53             	cmp    eax,0x53
9f0034c0:	0f 87 b5 01 00 00    	ja     9f00367b <.L57>
9f0034c6:	c1 e0 02             	shl    eax,0x2
9f0034c9:	8b 84 18 88 fb ff ff 	mov    eax,DWORD PTR [eax+ebx*1-0x478]
9f0034d0:	01 d8                	add    eax,ebx
9f0034d2:	ff e0                	jmp    eax

9f0034d4 <.L61>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:189
		case 'c':
			if (!(flags & LEFT))
9f0034d4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0034d7:	83 e0 10             	and    eax,0x10
9f0034da:	85 c0                	test   eax,eax
9f0034dc:	75 18                	jne    9f0034f6 <.L61+0x22>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
				while (--field_width > 0)
9f0034de:	eb 0c                	jmp    9f0034ec <.L61+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:191
					*str++ = ' ';
9f0034e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0034e3:	8d 50 01             	lea    edx,[eax+0x1]
9f0034e6:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0034e9:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:190
		base = 10;

		switch (*fmt) {
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
9f0034ec:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f0034f0:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f0034f4:	7f ea                	jg     9f0034e0 <.L61+0xc>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:192
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
9f0034f6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0034f9:	8d 50 01             	lea    edx,[eax+0x1]
9f0034fc:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0034ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
9f003502:	8d 4a 04             	lea    ecx,[edx+0x4]
9f003505:	89 4d 10             	mov    DWORD PTR [ebp+0x10],ecx
9f003508:	8b 12                	mov    edx,DWORD PTR [edx]
9f00350a:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
			while (--field_width > 0)
9f00350c:	eb 0c                	jmp    9f00351a <.L61+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:194
				*str++ = ' ';
9f00350e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003511:	8d 50 01             	lea    edx,[eax+0x1]
9f003514:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003517:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:193
		case 'c':
			if (!(flags & LEFT))
				while (--field_width > 0)
					*str++ = ' ';
			*str++ = (unsigned char)va_arg(args, int);
			while (--field_width > 0)
9f00351a:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
9f00351e:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
9f003522:	7f ea                	jg     9f00350e <.L61+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:195
				*str++ = ' ';
			continue;
9f003524:	e9 18 02 00 00       	jmp    9f003741 <.L96+0x8c>

9f003529 <.L66>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:198

		case 's':
			s = va_arg(args, char *);
9f003529:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f00352c:	8d 50 04             	lea    edx,[eax+0x4]
9f00352f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003532:	8b 00                	mov    eax,DWORD PTR [eax]
9f003534:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:199
			if (s) //CLR 01/09/2019: Handling case where pointer is NULL
9f003537:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
9f00353b:	74 13                	je     9f003550 <.L66+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:200
                            len = strlenI(s);
9f00353d:	83 ec 0c             	sub    esp,0xc
9f003540:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
9f003543:	e8 f4 05 00 00       	call   9f003b3c <strlenI>
9f003548:	83 c4 10             	add    esp,0x10
9f00354b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00354e:	eb 07                	jmp    9f003557 <.L66+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:202
                        else
                            len = 0;
9f003550:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:204

			if (!(flags & LEFT))
9f003557:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f00355a:	83 e0 10             	and    eax,0x10
9f00355d:	85 c0                	test   eax,eax
9f00355f:	75 1c                	jne    9f00357d <.L66+0x54>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
				while (len < field_width--)
9f003561:	eb 0c                	jmp    9f00356f <.L66+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:206
					*str++ = ' ';
9f003563:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003566:	8d 50 01             	lea    edx,[eax+0x1]
9f003569:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00356c:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:205
                            len = strlenI(s);
                        else
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
9f00356f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f003572:	8d 50 ff             	lea    edx,[eax-0x1]
9f003575:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f003578:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f00357b:	7f e6                	jg     9f003563 <.L66+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f00357d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
9f003584:	eb 1b                	jmp    9f0035a1 <.L66+0x78>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:208 (discriminator 3)
				*str++ = *s++;
9f003586:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003589:	8d 50 01             	lea    edx,[eax+0x1]
9f00358c:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00358f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
9f003592:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003595:	89 4d e0             	mov    DWORD PTR [ebp-0x20],ecx
9f003598:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f00359b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 3)
                            len = 0;

			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
9f00359d:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:207 (discriminator 1)
9f0035a1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0035a4:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0035a7:	7c dd                	jl     9f003586 <.L66+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
				*str++ = *s++;
			while (len < field_width--)
9f0035a9:	eb 0c                	jmp    9f0035b7 <.L66+0x8e>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:210
				*str++ = ' ';
9f0035ab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f0035ae:	8d 50 01             	lea    edx,[eax+0x1]
9f0035b1:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f0035b4:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:209
			if (!(flags & LEFT))
				while (len < field_width--)
					*str++ = ' ';
			for (i = 0; i < len; ++i)
				*str++ = *s++;
			while (len < field_width--)
9f0035b7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
9f0035ba:	8d 50 ff             	lea    edx,[eax-0x1]
9f0035bd:	89 55 d8             	mov    DWORD PTR [ebp-0x28],edx
9f0035c0:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0035c3:	7f e6                	jg     9f0035ab <.L66+0x82>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:211
				*str++ = ' ';
			continue;
9f0035c5:	e9 77 01 00 00       	jmp    9f003741 <.L96+0x8c>

9f0035ca <.L65>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:214

		case 'p':
			if (field_width == -1) {
9f0035ca:	83 7d d8 ff          	cmp    DWORD PTR [ebp-0x28],0xffffffff
9f0035ce:	75 0b                	jne    9f0035db <.L65+0x11>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:215
				field_width = 2 * sizeof(void *);
9f0035d0:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:216
				flags |= ZEROPAD;
9f0035d7:	83 4d dc 01          	or     DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:219
			}
			str = number(str,
				     (unsigned long)va_arg(args, void *), 16,
9f0035db:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0035de:	8d 50 04             	lea    edx,[eax+0x4]
9f0035e1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0035e4:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:218
		case 'p':
			if (field_width == -1) {
				field_width = 2 * sizeof(void *);
				flags |= ZEROPAD;
			}
			str = number(str,
9f0035e6:	83 ec 08             	sub    esp,0x8
9f0035e9:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f0035ec:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f0035ef:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f0035f2:	6a 10                	push   0x10
9f0035f4:	50                   	push   eax
9f0035f5:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f0035f8:	e8 ea fa ff ff       	call   9f0030e7 <number>
9f0035fd:	83 c4 20             	add    esp,0x20
9f003600:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:221
				     (unsigned long)va_arg(args, void *), 16,
				     field_width, precision, flags);
			continue;
9f003603:	e9 39 01 00 00       	jmp    9f003741 <.L96+0x8c>

9f003608 <.L63>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:224

		case 'n':
			if (qualifier == 'l') {
9f003608:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f00360c:	75 20                	jne    9f00362e <.L63+0x26>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:225
				long *ip = va_arg(args, long *);
9f00360e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003611:	8d 50 04             	lea    edx,[eax+0x4]
9f003614:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003617:	8b 00                	mov    eax,DWORD PTR [eax]
9f003619:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:226
				*ip = (str - buf);
9f00361c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00361f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003622:	29 c2                	sub    edx,eax
9f003624:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
9f003627:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:231
			} else {
				int *ip = va_arg(args, int *);
				*ip = (str - buf);
			}
			continue;
9f003629:	e9 13 01 00 00       	jmp    9f003741 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:228
		case 'n':
			if (qualifier == 'l') {
				long *ip = va_arg(args, long *);
				*ip = (str - buf);
			} else {
				int *ip = va_arg(args, int *);
9f00362e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003631:	8d 50 04             	lea    edx,[eax+0x4]
9f003634:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003637:	8b 00                	mov    eax,DWORD PTR [eax]
9f003639:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:229
				*ip = (str - buf);
9f00363c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f00363f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003642:	29 c2                	sub    edx,eax
9f003644:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
9f003647:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:231
			}
			continue;
9f003649:	e9 f3 00 00 00       	jmp    9f003741 <.L96+0x8c>

9f00364e <.L58>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:234

		case '%':
			*str++ = '%';
9f00364e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003651:	8d 50 01             	lea    edx,[eax+0x1]
9f003654:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003657:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:235
			continue;
9f00365a:	e9 e2 00 00 00       	jmp    9f003741 <.L96+0x8c>

9f00365f <.L64>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:239

			/* integer number formats - set up the flags and "break" */
		case 'o':
			base = 8;
9f00365f:	c7 45 e8 08 00 00 00 	mov    DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:240
			break;
9f003666:	eb 4e                	jmp    9f0036b6 <.L96+0x1>

9f003668 <.L68>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:243

		case 'x':
			flags |= SMALL;
9f003668:	83 4d dc 20          	or     DWORD PTR [ebp-0x24],0x20

9f00366c <.L60>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:245
		case 'X':
			base = 16;
9f00366c:	c7 45 e8 10 00 00 00 	mov    DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:246
			break;
9f003673:	eb 41                	jmp    9f0036b6 <.L96+0x1>

9f003675 <.L62>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:250

		case 'd':
		case 'i':
			flags |= SIGN;
9f003675:	83 4d dc 02          	or     DWORD PTR [ebp-0x24],0x2
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252
		case 'u':
			break;
9f003679:	eb 3a                	jmp    9f0036b5 <.L96>

9f00367b <.L57>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:255

		default:
			*str++ = '%';
9f00367b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00367e:	8d 50 01             	lea    edx,[eax+0x1]
9f003681:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f003684:	c6 00 25             	mov    BYTE PTR [eax],0x25
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:256
			if (*fmt)
9f003687:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00368a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00368d:	84 c0                	test   al,al
9f00368f:	74 16                	je     9f0036a7 <.L57+0x2c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:257
				*str++ = *fmt;
9f003691:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f003694:	8d 50 01             	lea    edx,[eax+0x1]
9f003697:	89 55 e4             	mov    DWORD PTR [ebp-0x1c],edx
9f00369a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00369d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0036a0:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:260
			else
				--fmt;
			continue;
9f0036a2:	e9 9a 00 00 00       	jmp    9f003741 <.L96+0x8c>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:259
		default:
			*str++ = '%';
			if (*fmt)
				*str++ = *fmt;
			else
				--fmt;
9f0036a7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0036aa:	83 e8 01             	sub    eax,0x1
9f0036ad:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:260
			continue;
9f0036b0:	e9 8c 00 00 00       	jmp    9f003741 <.L96+0x8c>

9f0036b5 <.L96>:
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:252

		case 'd':
		case 'i':
			flags |= SIGN;
		case 'u':
			break;
9f0036b5:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:262
				*str++ = *fmt;
			else
				--fmt;
			continue;
		}
		if (qualifier == 'l')
9f0036b6:	83 7d d0 6c          	cmp    DWORD PTR [ebp-0x30],0x6c
9f0036ba:	75 10                	jne    9f0036cc <.L96+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:263
			num = va_arg(args, unsigned long);
9f0036bc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0036bf:	8d 50 04             	lea    edx,[eax+0x4]
9f0036c2:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0036c5:	8b 00                	mov    eax,DWORD PTR [eax]
9f0036c7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0036ca:	eb 54                	jmp    9f003720 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:264
		else if (qualifier == 'h') {
9f0036cc:	83 7d d0 68          	cmp    DWORD PTR [ebp-0x30],0x68
9f0036d0:	75 26                	jne    9f0036f8 <.L96+0x43>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:265
			num = (unsigned short)va_arg(args, int);
9f0036d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f0036d5:	8d 50 04             	lea    edx,[eax+0x4]
9f0036d8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f0036db:	8b 00                	mov    eax,DWORD PTR [eax]
9f0036dd:	25 ff ff 00 00       	and    eax,0xffff
9f0036e2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:266
			if (flags & SIGN)
9f0036e5:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0036e8:	83 e0 02             	and    eax,0x2
9f0036eb:	85 c0                	test   eax,eax
9f0036ed:	74 31                	je     9f003720 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:267
				num = (short)num;
9f0036ef:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0036f2:	98                   	cwde   
9f0036f3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f0036f6:	eb 28                	jmp    9f003720 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:268
		} else if (flags & SIGN)
9f0036f8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f0036fb:	83 e0 02             	and    eax,0x2
9f0036fe:	85 c0                	test   eax,eax
9f003700:	74 10                	je     9f003712 <.L96+0x5d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:269
			num = va_arg(args, int);
9f003702:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003705:	8d 50 04             	lea    edx,[eax+0x4]
9f003708:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00370b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00370d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
9f003710:	eb 0e                	jmp    9f003720 <.L96+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:271
		else
			num = va_arg(args, unsigned int);
9f003712:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003715:	8d 50 04             	lea    edx,[eax+0x4]
9f003718:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f00371b:	8b 00                	mov    eax,DWORD PTR [eax]
9f00371d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:272
		str = number(str, num, base, field_width, precision, flags);
9f003720:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003723:	83 ec 08             	sub    esp,0x8
9f003726:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
9f003729:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
9f00372c:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
9f00372f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
9f003732:	50                   	push   eax
9f003733:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
9f003736:	e8 ac f9 ff ff       	call   9f0030e7 <number>
9f00373b:	83 c4 20             	add    esp,0x20
9f00373e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120 (discriminator 2)
	int field_width;	/* width of output field */
	int precision;		/* min. # of digits for integers; max
				   number of chars for from string */
	int qualifier;		/* 'h', 'l', or 'L' for integer fields */

	for (str = buf; *fmt; ++fmt) {
9f003741:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003744:	83 c0 01             	add    eax,0x1
9f003747:	89 45 0c             	mov    DWORD PTR [ebp+0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:120 (discriminator 1)
9f00374a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f00374d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003750:	84 c0                	test   al,al
9f003752:	0f 85 ea fb ff ff    	jne    9f003342 <vsprintf+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:274
			num = va_arg(args, int);
		else
			num = va_arg(args, unsigned int);
		str = number(str, num, base, field_width, precision, flags);
	}
	*str = '\0';
9f003758:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f00375b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:275
	return str - buf;
9f00375e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
9f003761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003764:	29 c2                	sub    edx,eax
9f003766:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:276
}
9f003768:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00376b:	c9                   	leave  
9f00376c:	c3                   	ret    

9f00376d <sprintfI>:
sprintfI():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:279

int sprintfI(char *buf, const char *fmt, ...)
{
9f00376d:	55                   	push   ebp
9f00376e:	89 e5                	mov    ebp,esp
9f003770:	83 ec 18             	sub    esp,0x18
9f003773:	e8 36 19 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003778:	05 24 46 00 00       	add    eax,0x4624
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:283
	va_list args;
	int i;

	va_start(args, fmt);
9f00377d:	8d 45 10             	lea    eax,[ebp+0x10]
9f003780:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:284
	i = vsprintf(buf, fmt, args);
9f003783:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003786:	83 ec 04             	sub    esp,0x4
9f003789:	50                   	push   eax
9f00378a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00378d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003790:	e8 90 fb ff ff       	call   9f003325 <vsprintf>
9f003795:	83 c4 10             	add    esp,0x10
9f003798:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:286
	va_end(args);
	return i;
9f00379b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:287
}
9f00379e:	c9                   	leave  
9f00379f:	c3                   	ret    

9f0037a0 <sprintf>:
sprintf():
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:290

VISIBLE int sprintf(char *buf, const char *fmt, ...)
{
9f0037a0:	55                   	push   ebp
9f0037a1:	89 e5                	mov    ebp,esp
9f0037a3:	83 ec 18             	sub    esp,0x18
9f0037a6:	e8 03 19 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0037ab:	05 f1 45 00 00       	add    eax,0x45f1
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:294
	va_list args;
	int i;

	va_start(args, fmt);
9f0037b0:	8d 45 10             	lea    eax,[ebp+0x10]
9f0037b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:295
	i = vsprintf(buf, fmt, args);
9f0037b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0037b9:	83 ec 04             	sub    esp,0x4
9f0037bc:	50                   	push   eax
9f0037bd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0037c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0037c3:	e8 5d fb ff ff       	call   9f003325 <vsprintf>
9f0037c8:	83 c4 10             	add    esp,0x10
9f0037cb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:297
	va_end(args);
	return i;
9f0037ce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/sprintf.c:298
9f0037d1:	c9                   	leave  
9f0037d2:	c3                   	ret    
9f0037d3:	90                   	nop

9f0037d4 <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:18
extern int gets(char* buffer, int maxlen, int stream);


//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
9f0037d4:	55                   	push   ebp
9f0037d5:	89 e5                	mov    ebp,esp
9f0037d7:	53                   	push   ebx
9f0037d8:	83 ec 14             	sub    esp,0x14
9f0037db:	e8 d2 18 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0037e0:	81 c3 bc 45 00 00    	add    ebx,0x45bc
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:20
    char buff[5];
    int buffPtr=0;
9f0037e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:22

    memsetI(buff,0,10);
9f0037ed:	83 ec 04             	sub    esp,0x4
9f0037f0:	6a 0a                	push   0xa
9f0037f2:	6a 00                	push   0x0
9f0037f4:	8d 45 ef             	lea    eax,[ebp-0x11]
9f0037f7:	50                   	push   eax
9f0037f8:	e8 87 f1 ff ff       	call   9f002984 <memsetI>
9f0037fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:25
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
9f003800:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003803:	8d 50 01             	lea    edx,[eax+0x1]
9f003806:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003809:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:26
    buff[buffPtr++] = '[';
9f00380e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f003811:	8d 50 01             	lea    edx,[eax+0x1]
9f003814:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003817:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:27
    buff[buffPtr++] = '0';
9f00381c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00381f:	8d 50 01             	lea    edx,[eax+0x1]
9f003822:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003825:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:28
    buff[buffPtr++] = 'K';
9f00382a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00382d:	8d 50 01             	lea    edx,[eax+0x1]
9f003830:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f003833:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:29
    buff[buffPtr] = '\0';
9f003838:	8d 55 ef             	lea    edx,[ebp-0x11]
9f00383b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00383e:	01 d0                	add    eax,edx
9f003840:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:30
    printI(buff);
9f003843:	83 ec 0c             	sub    esp,0xc
9f003846:	8d 45 ef             	lea    eax,[ebp-0x11]
9f003849:	50                   	push   eax
9f00384a:	e8 fe dd ff ff       	call   9f00164d <printI>
9f00384f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:32
    
    return;
9f003852:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:33
}
9f003853:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003856:	c9                   	leave  
9f003857:	c3                   	ret    

9f003858 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
9f003858:	55                   	push   ebp
9f003859:	89 e5                	mov    ebp,esp
9f00385b:	53                   	push   ebx
9f00385c:	83 ec 04             	sub    esp,0x4
9f00385f:	e8 4e 18 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f003864:	81 c3 38 45 00 00    	add    ebx,0x4538
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     strcpyI (dest + strlenI (dest), src);
9f00386a:	83 ec 0c             	sub    esp,0xc
9f00386d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003870:	e8 c7 02 00 00       	call   9f003b3c <strlenI>
9f003875:	83 c4 10             	add    esp,0x10
9f003878:	89 c2                	mov    edx,eax
9f00387a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00387d:	01 d0                	add    eax,edx
9f00387f:	83 ec 08             	sub    esp,0x8
9f003882:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003885:	50                   	push   eax
9f003886:	e8 9d 01 00 00       	call   9f003a28 <strcpyI>
9f00388b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
     return dest;
9f00388e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:34
   }
9f003891:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003894:	c9                   	leave  
9f003895:	c3                   	ret    

9f003896 <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37

   char* strcatI (char *dest, const char *src)
   {
9f003896:	55                   	push   ebp
9f003897:	89 e5                	mov    ebp,esp
9f003899:	53                   	push   ebx
9f00389a:	83 ec 04             	sub    esp,0x4
9f00389d:	e8 10 18 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0038a2:	81 c3 fa 44 00 00    	add    ebx,0x44fa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     strcpyI (dest + strlenI (dest), src);
9f0038a8:	83 ec 0c             	sub    esp,0xc
9f0038ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0038ae:	e8 89 02 00 00       	call   9f003b3c <strlenI>
9f0038b3:	83 c4 10             	add    esp,0x10
9f0038b6:	89 c2                	mov    edx,eax
9f0038b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0038bb:	01 d0                	add    eax,edx
9f0038bd:	83 ec 08             	sub    esp,0x8
9f0038c0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0038c3:	50                   	push   eax
9f0038c4:	e8 5f 01 00 00       	call   9f003a28 <strcpyI>
9f0038c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
     return dest;
9f0038cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:40
   }
9f0038cf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0038d2:	c9                   	leave  
9f0038d3:	c3                   	ret    

9f0038d4 <strncatI>:
strncatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:43
   
char *strncatI(char *dest, const char *src, size_t n)
{
9f0038d4:	55                   	push   ebp
9f0038d5:	89 e5                	mov    ebp,esp
9f0038d7:	53                   	push   ebx
9f0038d8:	83 ec 14             	sub    esp,0x14
9f0038db:	e8 d2 17 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0038e0:	81 c3 bc 44 00 00    	add    ebx,0x44bc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
    size_t bytesToCopy=0;
9f0038e6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:45
    size_t srcStringLen=strlenI(src);;
9f0038ed:	83 ec 0c             	sub    esp,0xc
9f0038f0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0038f3:	e8 44 02 00 00       	call   9f003b3c <strlenI>
9f0038f8:	83 c4 10             	add    esp,0x10
9f0038fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
    
    if (n<=srcStringLen)
9f0038fe:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003901:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f003904:	77 08                	ja     9f00390e <strncatI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:48
        bytesToCopy=n;
9f003906:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003909:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
9f00390c:	eb 06                	jmp    9f003914 <strncatI+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
    else
        bytesToCopy=srcStringLen;
9f00390e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f003911:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
    
     strncpyI (dest + strlenI (dest),src,bytesToCopy);
9f003914:	83 ec 0c             	sub    esp,0xc
9f003917:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00391a:	e8 1d 02 00 00       	call   9f003b3c <strlenI>
9f00391f:	83 c4 10             	add    esp,0x10
9f003922:	89 c2                	mov    edx,eax
9f003924:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003927:	01 d0                	add    eax,edx
9f003929:	83 ec 04             	sub    esp,0x4
9f00392c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
9f00392f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003932:	50                   	push   eax
9f003933:	e8 78 03 00 00       	call   9f003cb0 <strncpyI>
9f003938:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
     return dest;
9f00393b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
}
9f00393e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f003941:	c9                   	leave  
9f003942:	c3                   	ret    

9f003943 <strncat>:
strncat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:57

VISIBLE char *strncat(char *dest, const char *src, size_t n)
{
9f003943:	55                   	push   ebp
9f003944:	89 e5                	mov    ebp,esp
9f003946:	83 ec 08             	sub    esp,0x8
9f003949:	e8 60 17 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00394e:	05 4e 44 00 00       	add    eax,0x444e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
    return strncatI(dest, src, n);
9f003953:	83 ec 04             	sub    esp,0x4
9f003956:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003959:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00395c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00395f:	e8 70 ff ff ff       	call   9f0038d4 <strncatI>
9f003964:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
9f003967:	c9                   	leave  
9f003968:	c3                   	ret    
9f003969:	66 90                	xchg   ax,ax
9f00396b:	90                   	nop

9f00396c <strcmpI>:
strcmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
   equal to or greater than S2.  */

#include "libChrisOS.h"

int strcmpI (const char *p1, const char *p2)
{
9f00396c:	55                   	push   ebp
9f00396d:	89 e5                	mov    ebp,esp
9f00396f:	56                   	push   esi
9f003970:	53                   	push   ebx
9f003971:	83 ec 10             	sub    esp,0x10
9f003974:	e8 35 17 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003979:	05 23 44 00 00       	add    eax,0x4423
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:28
  register const unsigned char *s1 = (const unsigned char *) p1;
9f00397e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:29
  register const unsigned char *s2 = (const unsigned char *) p2;
9f003981:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
9f003984:	89 d8                	mov    eax,ebx
9f003986:	8d 58 01             	lea    ebx,[eax+0x1]
9f003989:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00398c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
      c2 = (unsigned char) *s2++;
9f00398f:	89 f0                	mov    eax,esi
9f003991:	8d 70 01             	lea    esi,[eax+0x1]
9f003994:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003997:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:36
      if (c1 == '\0')
9f00399a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
9f00399e:	75 0e                	jne    9f0039ae <strcmpI+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
	return c1 - c2;
9f0039a0:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0039a4:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0039a8:	29 c2                	sub    edx,eax
9f0039aa:	89 d0                	mov    eax,edx
9f0039ac:	eb 15                	jmp    9f0039c3 <strcmpI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39
    }
  while (c1 == c2);
9f0039ae:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
9f0039b2:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
9f0039b5:	74 cd                	je     9f003984 <strcmpI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:41

  return c1 - c2;
9f0039b7:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
9f0039bb:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
9f0039bf:	29 c2                	sub    edx,eax
9f0039c1:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:42
}
9f0039c3:	83 c4 10             	add    esp,0x10
9f0039c6:	5b                   	pop    ebx
9f0039c7:	5e                   	pop    esi
9f0039c8:	5d                   	pop    ebp
9f0039c9:	c3                   	ret    

9f0039ca <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:45

VISIBLE int strcmp(const char *p1, const char *p2)
{
9f0039ca:	55                   	push   ebp
9f0039cb:	89 e5                	mov    ebp,esp
9f0039cd:	e8 dc 16 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0039d2:	05 ca 43 00 00       	add    eax,0x43ca
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:46
    return strcmpI(p1, p2);
9f0039d7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0039da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f0039dd:	e8 8a ff ff ff       	call   9f00396c <strcmpI>
9f0039e2:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:47
9f0039e5:	c9                   	leave  
9f0039e6:	c3                   	ret    
9f0039e7:	90                   	nop

9f0039e8 <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
9f0039e8:	55                   	push   ebp
9f0039e9:	89 e5                	mov    ebp,esp
9f0039eb:	83 ec 10             	sub    esp,0x10
9f0039ee:	e8 bb 16 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0039f3:	05 a9 43 00 00       	add    eax,0x43a9
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
9f0039f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0039fb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
9f0039fe:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
9f0039ff:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003a02:	8d 50 01             	lea    edx,[eax+0x1]
9f003a05:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003a08:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003a0b:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003a0e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003a11:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003a14:	88 10                	mov    BYTE PTR [eax],dl
9f003a16:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a19:	84 c0                	test   al,al
9f003a1b:	75 e2                	jne    9f0039ff <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f003a1d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003a20:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
9f003a23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
9f003a26:	c9                   	leave  
9f003a27:	c3                   	ret    

9f003a28 <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
9f003a28:	55                   	push   ebp
9f003a29:	89 e5                	mov    ebp,esp
9f003a2b:	83 ec 10             	sub    esp,0x10
9f003a2e:	e8 7b 16 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003a33:	05 69 43 00 00       	add    eax,0x4369
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
9f003a38:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a3b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
9f003a3e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
9f003a3f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003a42:	8d 50 01             	lea    edx,[eax+0x1]
9f003a45:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003a48:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003a4b:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003a4e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003a51:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003a54:	88 10                	mov    BYTE PTR [eax],dl
9f003a56:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a59:	84 c0                	test   al,al
9f003a5b:	75 e2                	jne    9f003a3f <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
9f003a5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003a60:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
9f003a63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
9f003a66:	c9                   	leave  
9f003a67:	c3                   	ret    

9f003a68 <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
9f003a68:	55                   	push   ebp
9f003a69:	89 e5                	mov    ebp,esp
9f003a6b:	83 ec 10             	sub    esp,0x10
9f003a6e:	e8 3b 16 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003a73:	05 29 43 00 00       	add    eax,0x4329
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
9f003a78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003a7b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
9f003a7e:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
9f003a7f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003a82:	8d 50 01             	lea    edx,[eax+0x1]
9f003a85:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003a88:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003a8b:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003a8e:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003a91:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003a94:	88 10                	mov    BYTE PTR [eax],dl
9f003a96:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003a99:	84 c0                	test   al,al
9f003a9b:	74 0d                	je     9f003aaa <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
9f003a9d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003aa0:	8d 50 ff             	lea    edx,[eax-0x1]
9f003aa3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
9f003aa6:	85 c0                	test   eax,eax
9f003aa8:	75 d5                	jne    9f003a7f <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
9f003aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
9f003aad:	c9                   	leave  
9f003aae:	c3                   	ret    
9f003aaf:	90                   	nop

9f003ab0 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
9f003ab0:	55                   	push   ebp
9f003ab1:	89 e5                	mov    ebp,esp
9f003ab3:	83 ec 04             	sub    esp,0x4
9f003ab6:	e8 f3 15 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003abb:	05 e1 42 00 00       	add    eax,0x42e1
9f003ac0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ac3:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
9f003ac6:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
9f003aca:	7e 0d                	jle    9f003ad9 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
9f003acc:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
9f003ad0:	7f 07                	jg     9f003ad9 <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
9f003ad2:	b8 01 00 00 00       	mov    eax,0x1
9f003ad7:	eb 05                	jmp    9f003ade <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
9f003ad9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
9f003ade:	c9                   	leave  
9f003adf:	c3                   	ret    

9f003ae0 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
9f003ae0:	55                   	push   ebp
9f003ae1:	89 e5                	mov    ebp,esp
9f003ae3:	83 ec 10             	sub    esp,0x10
9f003ae6:	e8 c3 15 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003aeb:	05 b1 42 00 00       	add    eax,0x42b1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
9f003af0:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
9f003af7:	eb 27                	jmp    9f003b20 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
9f003af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003afc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003aff:	89 c2                	mov    edx,eax
9f003b01:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003b04:	01 d0                	add    eax,edx
9f003b06:	0f be c0             	movsx  eax,al
9f003b09:	50                   	push   eax
9f003b0a:	e8 a1 ff ff ff       	call   9f003ab0 <check_digit>
9f003b0f:	83 c4 04             	add    esp,0x4
9f003b12:	83 f0 01             	xor    eax,0x1
9f003b15:	84 c0                	test   al,al
9f003b17:	74 07                	je     9f003b20 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
9f003b19:	b8 00 00 00 00       	mov    eax,0x0
9f003b1e:	eb 17                	jmp    9f003b37 <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
9f003b20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003b23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b26:	0f be d0             	movsx  edx,al
9f003b29:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003b2c:	01 d0                	add    eax,edx
9f003b2e:	85 c0                	test   eax,eax
9f003b30:	75 c7                	jne    9f003af9 <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
9f003b32:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
9f003b37:	c9                   	leave  
9f003b38:	c3                   	ret    
9f003b39:	66 90                	xchg   ax,ax
9f003b3b:	90                   	nop

9f003b3c <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
9f003b3c:	55                   	push   ebp
9f003b3d:	89 e5                	mov    ebp,esp
9f003b3f:	83 ec 10             	sub    esp,0x10
9f003b42:	e8 67 15 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003b47:	05 55 42 00 00       	add    eax,0x4255
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
          size_t ret = 0;
9f003b4c:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
        while ( str[ret] != 0 )
9f003b53:	eb 04                	jmp    9f003b59 <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
9f003b55:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
//#include <stddef.h>
#include "libChrisOS.h"

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
9f003b59:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003b5c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003b5f:	01 d0                	add    eax,edx
9f003b61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003b64:	84 c0                	test   al,al
9f003b66:	75 ed                	jne    9f003b55 <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
                ret++;
        return ret;
9f003b68:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:9
}
9f003b6b:	c9                   	leave  
9f003b6c:	c3                   	ret    

9f003b6d <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12

__attribute__((visibility("default"))) size_t strlen(const char* str) 
{
9f003b6d:	55                   	push   ebp
9f003b6e:	89 e5                	mov    ebp,esp
9f003b70:	e8 39 15 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003b75:	05 27 42 00 00       	add    eax,0x4227
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
    return strlenI(str);
9f003b7a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003b7d:	e8 ba ff ff ff       	call   9f003b3c <strlenI>
9f003b82:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
}
9f003b85:	c9                   	leave  
9f003b86:	c3                   	ret    

9f003b87 <strnlenI>:
strnlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:17

size_t strnlenI(const char* str, size_t maxlen)
{
9f003b87:	55                   	push   ebp
9f003b88:	89 e5                	mov    ebp,esp
9f003b8a:	83 ec 10             	sub    esp,0x10
9f003b8d:	e8 1c 15 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003b92:	05 0a 42 00 00       	add    eax,0x420a
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:18
  size_t ret = 0;
9f003b97:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
  while ( str[ret] != 0 && ret<maxlen)
9f003b9e:	eb 04                	jmp    9f003ba4 <strnlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:20
          ret++;
9f003ba0:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19
}

size_t strnlenI(const char* str, size_t maxlen)
{
  size_t ret = 0;
  while ( str[ret] != 0 && ret<maxlen)
9f003ba4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f003ba7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003baa:	01 d0                	add    eax,edx
9f003bac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003baf:	84 c0                	test   al,al
9f003bb1:	74 08                	je     9f003bbb <strnlenI+0x34>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:19 (discriminator 1)
9f003bb3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003bb6:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
9f003bb9:	72 e5                	jb     9f003ba0 <strnlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:21
          ret++;
  return ret;
9f003bbb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:22
}
9f003bbe:	c9                   	leave  
9f003bbf:	c3                   	ret    

9f003bc0 <strnlen>:
strnlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:25

VISIBLE size_t strnlen(const char* str, int maxlen)
{
9f003bc0:	55                   	push   ebp
9f003bc1:	89 e5                	mov    ebp,esp
9f003bc3:	e8 e6 14 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003bc8:	05 d4 41 00 00       	add    eax,0x41d4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:26
    return strnlenI(str, maxlen);
9f003bcd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003bd0:	50                   	push   eax
9f003bd1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003bd4:	e8 ae ff ff ff       	call   9f003b87 <strnlenI>
9f003bd9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:27
9f003bdc:	c9                   	leave  
9f003bdd:	c3                   	ret    
9f003bde:	66 90                	xchg   ax,ax

9f003be0 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
9f003be0:	55                   	push   ebp
9f003be1:	89 e5                	mov    ebp,esp
9f003be3:	e8 c6 14 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003be8:	05 b4 41 00 00       	add    eax,0x41b4
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
9f003bed:	eb 4b                	jmp    9f003c3a <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
9f003bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003bf2:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003bf5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003bf8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003bfb:	38 c2                	cmp    dl,al
9f003bfd:	74 1e                	je     9f003c1d <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f003bff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c02:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003c05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c08:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003c0b:	38 c2                	cmp    dl,al
9f003c0d:	73 07                	jae    9f003c16 <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
9f003c0f:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003c14:	eb 2f                	jmp    9f003c45 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
9f003c16:	b8 01 00 00 00       	mov    eax,0x1
9f003c1b:	eb 28                	jmp    9f003c45 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
9f003c1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c20:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003c23:	84 c0                	test   al,al
9f003c25:	75 07                	jne    9f003c2e <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
9f003c27:	b8 00 00 00 00       	mov    eax,0x0
9f003c2c:	eb 17                	jmp    9f003c45 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f003c2e:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f003c32:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f003c36:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
9f003c3a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003c3e:	75 af                	jne    9f003bef <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f003c40:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
9f003c45:	5d                   	pop    ebp
9f003c46:	c3                   	ret    

9f003c47 <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
9f003c47:	55                   	push   ebp
9f003c48:	89 e5                	mov    ebp,esp
9f003c4a:	e8 5f 14 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003c4f:	05 4d 41 00 00       	add    eax,0x414d
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
9f003c54:	eb 4b                	jmp    9f003ca1 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
9f003c56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c59:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003c5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c5f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003c62:	38 c2                	cmp    dl,al
9f003c64:	74 1e                	je     9f003c84 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
9f003c66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c69:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f003c6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003c6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003c72:	38 c2                	cmp    dl,al
9f003c74:	73 07                	jae    9f003c7d <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
9f003c76:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003c7b:	eb 2f                	jmp    9f003cac <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
9f003c7d:	b8 01 00 00 00       	mov    eax,0x1
9f003c82:	eb 28                	jmp    9f003cac <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
9f003c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003c87:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003c8a:	84 c0                	test   al,al
9f003c8c:	75 07                	jne    9f003c95 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
9f003c8e:	b8 00 00 00 00       	mov    eax,0x0
9f003c93:	eb 17                	jmp    9f003cac <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
9f003c95:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
9f003c99:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
9f003c9d:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
9f003ca1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003ca5:	75 af                	jne    9f003c56 <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
9f003ca7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
9f003cac:	5d                   	pop    ebp
9f003cad:	c3                   	ret    
9f003cae:	66 90                	xchg   ax,ax

9f003cb0 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
9f003cb0:	55                   	push   ebp
9f003cb1:	89 e5                	mov    ebp,esp
9f003cb3:	83 ec 10             	sub    esp,0x10
9f003cb6:	e8 f3 13 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003cbb:	05 e1 40 00 00       	add    eax,0x40e1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
9f003cc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003cc3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
9f003cc6:	eb 1b                	jmp    9f003ce3 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
9f003cc8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003ccb:	8d 50 01             	lea    edx,[eax+0x1]
9f003cce:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003cd1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003cd4:	8d 4a 01             	lea    ecx,[edx+0x1]
9f003cd7:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
9f003cda:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f003cdd:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
9f003cdf:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
9f003ce3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003ce7:	74 1c                	je     9f003d05 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
9f003ce9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f003cec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003cef:	84 c0                	test   al,al
9f003cf1:	75 d5                	jne    9f003cc8 <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f003cf3:	eb 10                	jmp    9f003d05 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
9f003cf5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003cf8:	8d 50 01             	lea    edx,[eax+0x1]
9f003cfb:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
9f003cfe:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
9f003d01:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
9f003d05:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003d09:	75 ea                	jne    9f003cf5 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    if (n==0)
9f003d0b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003d0f:	75 06                	jne    9f003d17 <strncpyI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
        *s='\0';
9f003d11:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
9f003d14:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:26
    return s1;
9f003d17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:27
}
9f003d1a:	c9                   	leave  
9f003d1b:	c3                   	ret    

9f003d1c <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
9f003d1c:	55                   	push   ebp
9f003d1d:	89 e5                	mov    ebp,esp
9f003d1f:	e8 8a 13 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003d24:	05 78 40 00 00       	add    eax,0x4078
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:31
    return strncpyI(s1, s2, n);
9f003d29:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f003d2c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f003d2f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f003d32:	e8 79 ff ff ff       	call   9f003cb0 <strncpyI>
9f003d37:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:32
}
9f003d3a:	c9                   	leave  
9f003d3b:	c3                   	ret    

9f003d3c <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
9f003d3c:	55                   	push   ebp
9f003d3d:	89 e5                	mov    ebp,esp
9f003d3f:	57                   	push   edi
9f003d40:	56                   	push   esi
9f003d41:	53                   	push   ebx
9f003d42:	83 ec 08             	sub    esp,0x8
9f003d45:	e8 64 13 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003d4a:	05 52 40 00 00       	add    eax,0x4052
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
9f003d4f:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f003d52:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
9f003d59:	89 f0                	mov    eax,esi
9f003d5b:	8d 70 01             	lea    esi,[eax+0x1]
9f003d5e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003d61:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
9f003d64:	83 fb 20             	cmp    ebx,0x20
9f003d67:	74 f0                	je     9f003d59 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
9f003d69:	83 fb 2d             	cmp    ebx,0x2d
9f003d6c:	75 14                	jne    9f003d82 <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
9f003d6e:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
9f003d75:	89 f0                	mov    eax,esi
9f003d77:	8d 70 01             	lea    esi,[eax+0x1]
9f003d7a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003d7d:	0f be d8             	movsx  ebx,al
9f003d80:	eb 10                	jmp    9f003d92 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
9f003d82:	83 fb 2b             	cmp    ebx,0x2b
9f003d85:	75 0b                	jne    9f003d92 <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
9f003d87:	89 f0                	mov    eax,esi
9f003d89:	8d 70 01             	lea    esi,[eax+0x1]
9f003d8c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003d8f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
9f003d92:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003d96:	74 06                	je     9f003d9e <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
9f003d98:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003d9c:	75 26                	jne    9f003dc4 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
9f003d9e:	83 fb 30             	cmp    ebx,0x30
9f003da1:	75 21                	jne    9f003dc4 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f003da3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003da6:	3c 78                	cmp    al,0x78
9f003da8:	74 07                	je     9f003db1 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
9f003daa:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003dad:	3c 58                	cmp    al,0x58
9f003daf:	75 13                	jne    9f003dc4 <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
9f003db1:	8d 46 01             	lea    eax,[esi+0x1]
9f003db4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003db7:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
9f003dba:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
9f003dbd:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
9f003dc4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003dc8:	75 14                	jne    9f003dde <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
9f003dca:	83 fb 30             	cmp    ebx,0x30
9f003dcd:	75 07                	jne    9f003dd6 <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
9f003dcf:	b8 08 00 00 00       	mov    eax,0x8
9f003dd4:	eb 05                	jmp    9f003ddb <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
9f003dd6:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
9f003ddb:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
9f003dde:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003de1:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003de6:	ba 00 00 00 00       	mov    edx,0x0
9f003deb:	f7 f1                	div    ecx
9f003ded:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
9f003df0:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003df3:	b8 ff ff ff ff       	mov    eax,0xffffffff
9f003df8:	ba 00 00 00 00       	mov    edx,0x0
9f003dfd:	f7 f1                	div    ecx
9f003dff:	89 d0                	mov    eax,edx
9f003e01:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
9f003e03:	bf 00 00 00 00       	mov    edi,0x0
9f003e08:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
9f003e0d:	8d 43 d0             	lea    eax,[ebx-0x30]
9f003e10:	83 f8 09             	cmp    eax,0x9
9f003e13:	77 05                	ja     9f003e1a <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
9f003e15:	83 eb 30             	sub    ebx,0x30
9f003e18:	eb 25                	jmp    9f003e3f <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
9f003e1a:	89 d8                	mov    eax,ebx
9f003e1c:	83 c8 20             	or     eax,0x20
9f003e1f:	83 e8 61             	sub    eax,0x61
9f003e22:	83 f8 19             	cmp    eax,0x19
9f003e25:	77 56                	ja     9f003e7d <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f003e27:	83 fb 40             	cmp    ebx,0x40
9f003e2a:	7e 0c                	jle    9f003e38 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
9f003e2c:	83 fb 5a             	cmp    ebx,0x5a
9f003e2f:	7f 07                	jg     9f003e38 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
9f003e31:	b8 37 00 00 00       	mov    eax,0x37
9f003e36:	eb 05                	jmp    9f003e3d <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
9f003e38:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
9f003e3d:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
9f003e3f:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f003e42:	7d 3c                	jge    9f003e80 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f003e44:	89 c8                	mov    eax,ecx
9f003e46:	85 c0                	test   eax,eax
9f003e48:	78 10                	js     9f003e5a <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
9f003e4a:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003e4d:	77 0b                	ja     9f003e5a <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
9f003e4f:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003e52:	75 0d                	jne    9f003e61 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
9f003e54:	89 d0                	mov    eax,edx
9f003e56:	39 c3                	cmp    ebx,eax
9f003e58:	7e 07                	jle    9f003e61 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
9f003e5a:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f003e5f:	eb 0f                	jmp    9f003e70 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
9f003e61:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
9f003e66:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f003e69:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
9f003e6c:	89 d8                	mov    eax,ebx
9f003e6e:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f003e70:	89 f0                	mov    eax,esi
9f003e72:	8d 70 01             	lea    esi,[eax+0x1]
9f003e75:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003e78:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f003e7b:	eb 90                	jmp    9f003e0d <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f003e7d:	90                   	nop
9f003e7e:	eb 01                	jmp    9f003e81 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
9f003e80:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f003e81:	89 c8                	mov    eax,ecx
9f003e83:	85 c0                	test   eax,eax
9f003e85:	79 07                	jns    9f003e8e <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
9f003e87:	bf ff ff ff ff       	mov    edi,0xffffffff
9f003e8c:	eb 08                	jmp    9f003e96 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
9f003e8e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003e92:	74 02                	je     9f003e96 <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
9f003e94:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
9f003e96:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f003e9a:	74 13                	je     9f003eaf <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
9f003e9c:	89 c8                	mov    eax,ecx
9f003e9e:	85 c0                	test   eax,eax
9f003ea0:	74 05                	je     9f003ea7 <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
9f003ea2:	8d 46 ff             	lea    eax,[esi-0x1]
9f003ea5:	eb 03                	jmp    9f003eaa <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
9f003ea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
9f003eaa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003ead:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
9f003eaf:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
9f003eb1:	83 c4 08             	add    esp,0x8
9f003eb4:	5b                   	pop    ebx
9f003eb5:	5e                   	pop    esi
9f003eb6:	5f                   	pop    edi
9f003eb7:	5d                   	pop    ebp
9f003eb8:	c3                   	ret    
9f003eb9:	66 90                	xchg   ax,ax
9f003ebb:	90                   	nop

9f003ebc <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
9f003ebc:	55                   	push   ebp
9f003ebd:	89 e5                	mov    ebp,esp
9f003ebf:	e8 ea 11 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003ec4:	05 d8 3e 00 00       	add    eax,0x3ed8
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
9f003ec9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f003ecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f003ecf:	01 d0                	add    eax,edx
9f003ed1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
9f003ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
9f003ed7:	5d                   	pop    ebp
9f003ed8:	c3                   	ret    
9f003ed9:	66 90                	xchg   ax,ax
9f003edb:	90                   	nop

9f003edc <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
9f003edc:	55                   	push   ebp
9f003edd:	89 e5                	mov    ebp,esp
9f003edf:	57                   	push   edi
9f003ee0:	56                   	push   esi
9f003ee1:	53                   	push   ebx
9f003ee2:	83 ec 0c             	sub    esp,0xc
9f003ee5:	e8 c4 11 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f003eea:	05 b2 3e 00 00       	add    eax,0x3eb2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
9f003eef:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
9f003ef2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
9f003ef9:	89 f0                	mov    eax,esi
9f003efb:	8d 70 01             	lea    esi,[eax+0x1]
9f003efe:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003f01:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
9f003f04:	83 fb 20             	cmp    ebx,0x20
9f003f07:	74 f0                	je     9f003ef9 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
9f003f09:	83 fb 2d             	cmp    ebx,0x2d
9f003f0c:	75 14                	jne    9f003f22 <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
9f003f0e:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
9f003f15:	89 f0                	mov    eax,esi
9f003f17:	8d 70 01             	lea    esi,[eax+0x1]
9f003f1a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003f1d:	0f be d8             	movsx  ebx,al
9f003f20:	eb 10                	jmp    9f003f32 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
9f003f22:	83 fb 2b             	cmp    ebx,0x2b
9f003f25:	75 0b                	jne    9f003f32 <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
9f003f27:	89 f0                	mov    eax,esi
9f003f29:	8d 70 01             	lea    esi,[eax+0x1]
9f003f2c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003f2f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
9f003f32:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003f36:	74 06                	je     9f003f3e <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
9f003f38:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
9f003f3c:	75 26                	jne    9f003f64 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
9f003f3e:	83 fb 30             	cmp    ebx,0x30
9f003f41:	75 21                	jne    9f003f64 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
9f003f43:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003f46:	3c 78                	cmp    al,0x78
9f003f48:	74 07                	je     9f003f51 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
9f003f4a:	0f b6 06             	movzx  eax,BYTE PTR [esi]
9f003f4d:	3c 58                	cmp    al,0x58
9f003f4f:	75 13                	jne    9f003f64 <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
9f003f51:	8d 46 01             	lea    eax,[esi+0x1]
9f003f54:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f003f57:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
9f003f5a:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
9f003f5d:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
9f003f64:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
9f003f68:	75 14                	jne    9f003f7e <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
9f003f6a:	83 fb 30             	cmp    ebx,0x30
9f003f6d:	75 07                	jne    9f003f76 <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
9f003f6f:	b8 08 00 00 00       	mov    eax,0x8
9f003f74:	eb 05                	jmp    9f003f7b <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
9f003f76:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
9f003f7b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
9f003f7e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f003f82:	74 07                	je     9f003f8b <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
9f003f84:	b8 00 00 00 80       	mov    eax,0x80000000
9f003f89:	eb 05                	jmp    9f003f90 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
9f003f8b:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
9f003f90:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
9f003f93:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f003f96:	ba 00 00 00 00       	mov    edx,0x0
9f003f9b:	f7 f1                	div    ecx
9f003f9d:	89 d1                	mov    ecx,edx
9f003f9f:	89 c8                	mov    eax,ecx
9f003fa1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
9f003fa4:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
9f003fa7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f003faa:	ba 00 00 00 00       	mov    edx,0x0
9f003faf:	f7 f7                	div    edi
9f003fb1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
9f003fb4:	bf 00 00 00 00       	mov    edi,0x0
9f003fb9:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
9f003fbe:	8d 43 d0             	lea    eax,[ebx-0x30]
9f003fc1:	83 f8 09             	cmp    eax,0x9
9f003fc4:	77 05                	ja     9f003fcb <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
9f003fc6:	83 eb 30             	sub    ebx,0x30
9f003fc9:	eb 25                	jmp    9f003ff0 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
9f003fcb:	89 d8                	mov    eax,ebx
9f003fcd:	83 c8 20             	or     eax,0x20
9f003fd0:	83 e8 61             	sub    eax,0x61
9f003fd3:	83 f8 19             	cmp    eax,0x19
9f003fd6:	77 55                	ja     9f00402d <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
9f003fd8:	83 fb 40             	cmp    ebx,0x40
9f003fdb:	7e 0c                	jle    9f003fe9 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
9f003fdd:	83 fb 5a             	cmp    ebx,0x5a
9f003fe0:	7f 07                	jg     9f003fe9 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
9f003fe2:	b8 37 00 00 00       	mov    eax,0x37
9f003fe7:	eb 05                	jmp    9f003fee <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
9f003fe9:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
9f003fee:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
9f003ff0:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
9f003ff3:	7d 3b                	jge    9f004030 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
9f003ff5:	89 c8                	mov    eax,ecx
9f003ff7:	85 c0                	test   eax,eax
9f003ff9:	78 0f                	js     9f00400a <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
9f003ffb:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f003ffe:	77 0a                	ja     9f00400a <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
9f004000:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
9f004003:	75 0c                	jne    9f004011 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
9f004005:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
9f004008:	7e 07                	jle    9f004011 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
9f00400a:	b9 ff ff ff ff       	mov    ecx,0xffffffff
9f00400f:	eb 0f                	jmp    9f004020 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
9f004011:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
9f004016:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004019:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
9f00401c:	89 d8                	mov    eax,ebx
9f00401e:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
9f004020:	89 f0                	mov    eax,esi
9f004022:	8d 70 01             	lea    esi,[eax+0x1]
9f004025:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004028:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
9f00402b:	eb 91                	jmp    9f003fbe <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
9f00402d:	90                   	nop
9f00402e:	eb 01                	jmp    9f004031 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
9f004030:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
9f004031:	89 c8                	mov    eax,ecx
9f004033:	85 c0                	test   eax,eax
9f004035:	79 16                	jns    9f00404d <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
9f004037:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f00403b:	74 07                	je     9f004044 <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
9f00403d:	b8 00 00 00 80       	mov    eax,0x80000000
9f004042:	eb 05                	jmp    9f004049 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
9f004044:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
9f004049:	89 c7                	mov    edi,eax
9f00404b:	eb 08                	jmp    9f004055 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
9f00404d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f004051:	74 02                	je     9f004055 <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
9f004053:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
9f004055:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
9f004059:	74 13                	je     9f00406e <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
9f00405b:	89 c8                	mov    eax,ecx
9f00405d:	85 c0                	test   eax,eax
9f00405f:	74 05                	je     9f004066 <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
9f004061:	8d 46 ff             	lea    eax,[esi-0x1]
9f004064:	eb 03                	jmp    9f004069 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
9f004066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
9f004069:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
9f00406c:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
9f00406e:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
9f004070:	83 c4 0c             	add    esp,0xc
9f004073:	5b                   	pop    ebx
9f004074:	5e                   	pop    esi
9f004075:	5f                   	pop    edi
9f004076:	5d                   	pop    ebp
9f004077:	c3                   	ret    

9f004078 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
9f004078:	55                   	push   ebp
9f004079:	89 e5                	mov    ebp,esp
9f00407b:	53                   	push   ebx
9f00407c:	83 ec 14             	sub    esp,0x14
9f00407f:	e8 2a 10 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f004084:	05 18 3d 00 00       	add    eax,0x3d18
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
9f004089:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00408c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f00408f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004092:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f004095:	eb 04                	jmp    9f00409b <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
9f004097:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
9f00409b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f00409e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0040a1:	80 fa 20             	cmp    dl,0x20
9f0040a4:	74 f1                	je     9f004097 <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
9f0040a6:	83 ec 0c             	sub    esp,0xc
9f0040a9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
9f0040ac:	89 c3                	mov    ebx,eax
9f0040ae:	e8 89 fa ff ff       	call   9f003b3c <strlenI>
9f0040b3:	83 c4 10             	add    esp,0x10
9f0040b6:	8d 50 ff             	lea    edx,[eax-0x1]
9f0040b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0040bc:	01 d0                	add    eax,edx
9f0040be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
9f0040c1:	eb 0c                	jmp    9f0040cf <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
9f0040c3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0040c6:	8d 50 ff             	lea    edx,[eax-0x1]
9f0040c9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
9f0040cc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
9f0040cf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0040d2:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f0040d5:	76 0a                	jbe    9f0040e1 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
9f0040d7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0040da:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0040dd:	3c 20                	cmp    al,0x20
9f0040df:	74 e2                	je     9f0040c3 <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
9f0040e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0040e4:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
9f0040e7:	74 1f                	je     9f004108 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
9f0040e9:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
9f0040ea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0040ed:	8d 50 01             	lea    edx,[eax+0x1]
9f0040f0:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0040f3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f0040f6:	8d 4a 01             	lea    ecx,[edx+0x1]
9f0040f9:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
9f0040fc:	0f b6 12             	movzx  edx,BYTE PTR [edx]
9f0040ff:	88 10                	mov    BYTE PTR [eax],dl
9f004101:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004104:	84 c0                	test   al,al
9f004106:	75 e2                	jne    9f0040ea <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
9f004108:	90                   	nop
9f004109:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f00410c:	c9                   	leave  
9f00410d:	c3                   	ret    

9f00410e <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
9f00410e:	55                   	push   ebp
9f00410f:	89 e5                	mov    ebp,esp
9f004111:	83 ec 08             	sub    esp,0x8
9f004114:	e8 95 0f 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f004119:	05 83 3c 00 00       	add    eax,0x3c83
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
9f00411e:	83 ec 0c             	sub    esp,0xc
9f004121:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004124:	e8 4f ff ff ff       	call   9f004078 <strtrimI>
9f004129:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
9f00412c:	c9                   	leave  
9f00412d:	c3                   	ret    
9f00412e:	66 90                	xchg   ax,ax

9f004130 <strreplaceI>:
strreplaceI():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:14



///NOTE: outString has to be big enough to hold the modified string
char *strreplaceI(const char *in, const char *pattern, const char *by, char *outString)
{
9f004130:	55                   	push   ebp
9f004131:	89 e5                	mov    ebp,esp
9f004133:	56                   	push   esi
9f004134:	53                   	push   ebx
9f004135:	83 ec 10             	sub    esp,0x10
9f004138:	e8 75 0f 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f00413d:	81 c3 5f 3c 00 00    	add    ebx,0x3c5f
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:15
    size_t outsize = strlenI(in) + 1;
9f004143:	83 ec 0c             	sub    esp,0xc
9f004146:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004149:	e8 ee f9 ff ff       	call   9f003b3c <strlenI>
9f00414e:	83 c4 10             	add    esp,0x10
9f004151:	83 c0 01             	add    eax,0x1
9f004154:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:18
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
9f004157:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f00415e:	e9 ac 00 00 00       	jmp    9f00420f <strreplaceI+0xdf>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:22
        // copy everything up to the pattern
        memcpyI(outString + resoffset, in, needle - in);
9f004163:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f004166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004169:	29 c2                	sub    edx,eax
9f00416b:	89 d0                	mov    eax,edx
9f00416d:	89 c1                	mov    ecx,eax
9f00416f:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f004172:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004175:	01 d0                	add    eax,edx
9f004177:	83 ec 04             	sub    esp,0x4
9f00417a:	51                   	push   ecx
9f00417b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00417e:	50                   	push   eax
9f00417f:	e8 44 e6 ff ff       	call   9f0027c8 <memcpyI>
9f004184:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:23
        resoffset += needle - in;
9f004187:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f00418a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00418d:	29 c2                	sub    edx,eax
9f00418f:	89 d0                	mov    eax,edx
9f004191:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:26

        // skip the pattern in the input-string
        in = needle + strlenI(pattern);
9f004194:	83 ec 0c             	sub    esp,0xc
9f004197:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00419a:	e8 9d f9 ff ff       	call   9f003b3c <strlenI>
9f00419f:	83 c4 10             	add    esp,0x10
9f0041a2:	89 c2                	mov    edx,eax
9f0041a4:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f0041a7:	01 d0                	add    eax,edx
9f0041a9:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:29

        // adjust space for replacement
        outsize = outsize - strlenI(pattern) + strlenI(by);
9f0041ac:	83 ec 0c             	sub    esp,0xc
9f0041af:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f0041b2:	e8 85 f9 ff ff       	call   9f003b3c <strlenI>
9f0041b7:	83 c4 10             	add    esp,0x10
9f0041ba:	89 c2                	mov    edx,eax
9f0041bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0041bf:	29 d0                	sub    eax,edx
9f0041c1:	89 c6                	mov    esi,eax
9f0041c3:	83 ec 0c             	sub    esp,0xc
9f0041c6:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0041c9:	e8 6e f9 ff ff       	call   9f003b3c <strlenI>
9f0041ce:	83 c4 10             	add    esp,0x10
9f0041d1:	01 f0                	add    eax,esi
9f0041d3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:32

        // copy the pattern
        memcpyI(outString + resoffset, by, strlenI(by));
9f0041d6:	83 ec 0c             	sub    esp,0xc
9f0041d9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0041dc:	e8 5b f9 ff ff       	call   9f003b3c <strlenI>
9f0041e1:	83 c4 10             	add    esp,0x10
9f0041e4:	89 c1                	mov    ecx,eax
9f0041e6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f0041e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f0041ec:	01 d0                	add    eax,edx
9f0041ee:	83 ec 04             	sub    esp,0x4
9f0041f1:	51                   	push   ecx
9f0041f2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f0041f5:	50                   	push   eax
9f0041f6:	e8 cd e5 ff ff       	call   9f0027c8 <memcpyI>
9f0041fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:33
        resoffset += strlenI(by);
9f0041fe:	83 ec 0c             	sub    esp,0xc
9f004201:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004204:	e8 33 f9 ff ff       	call   9f003b3c <strlenI>
9f004209:	83 c4 10             	add    esp,0x10
9f00420c:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:20
    size_t outsize = strlenI(in) + 1;
    // TODO maybe avoid reallocing by counting the non-overlapping occurences of pattern
    // use this to iterate over the output
    size_t resoffset = 0;
    char *needle;
    while ((needle = strstrI(in, pattern))) {
9f00420f:	83 ec 08             	sub    esp,0x8
9f004212:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004215:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004218:	e8 f5 00 00 00       	call   9f004312 <strstrI>
9f00421d:	83 c4 10             	add    esp,0x10
9f004220:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f004223:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
9f004227:	0f 85 36 ff ff ff    	jne    9f004163 <strreplaceI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:37
        memcpyI(outString + resoffset, by, strlenI(by));
        resoffset += strlenI(by);
    }

    // copy the remaining input
    strcpyI(outString + resoffset, in);
9f00422d:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
9f004230:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004233:	01 d0                	add    eax,edx
9f004235:	83 ec 08             	sub    esp,0x8
9f004238:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00423b:	50                   	push   eax
9f00423c:	e8 e7 f7 ff ff       	call   9f003a28 <strcpyI>
9f004241:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:39

    return outString;
9f004244:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:40
}
9f004247:	8d 65 f8             	lea    esp,[ebp-0x8]
9f00424a:	5b                   	pop    ebx
9f00424b:	5e                   	pop    esi
9f00424c:	5d                   	pop    ebp
9f00424d:	c3                   	ret    

9f00424e <strreplace>:
strreplace():
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:43

VISIBLE char *strreplace(const char *in, const char *pattern, const char *by, char *outString)
{
9f00424e:	55                   	push   ebp
9f00424f:	89 e5                	mov    ebp,esp
9f004251:	83 ec 08             	sub    esp,0x8
9f004254:	e8 55 0e 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f004259:	05 43 3b 00 00       	add    eax,0x3b43
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:44
    return strreplaceI(in, pattern, by, outString);
9f00425e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
9f004261:	ff 75 10             	push   DWORD PTR [ebp+0x10]
9f004264:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004267:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00426a:	e8 c1 fe ff ff       	call   9f004130 <strreplaceI>
9f00426f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strreplace.c:45
}
9f004272:	c9                   	leave  
9f004273:	c3                   	ret    

9f004274 <strnstrI>:
strnstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:53

#include "strings.h"
#include "common.h"

char* strnstrI(char* string, char* substring, int length)
{
9f004274:	55                   	push   ebp
9f004275:	89 e5                	mov    ebp,esp
9f004277:	56                   	push   esi
9f004278:	53                   	push   ebx
9f004279:	83 ec 10             	sub    esp,0x10
9f00427c:	e8 2d 0e 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f004281:	05 1b 3b 00 00       	add    eax,0x3b1b
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60

    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */
    int len=length;
9f004286:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
9f004289:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
    
    b = substring;
9f00428c:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:63
    if (*b == 0) {
9f00428f:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f004292:	84 c0                	test   al,al
9f004294:	75 66                	jne    9f0042fc <strnstrI+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64
	return string;
9f004296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004299:	eb 70                	jmp    9f00430b <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:67
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f00429b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00429e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0042a1:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0042a4:	38 c2                	cmp    dl,al
9f0042a6:	74 12                	je     9f0042ba <strnstrI+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
            if (len--<=0)
9f0042a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0042ab:	8d 50 ff             	lea    edx,[eax-0x1]
9f0042ae:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0042b1:	85 c0                	test   eax,eax
9f0042b3:	7f 42                	jg     9f0042f7 <strnstrI+0x83>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:69
                return string;
9f0042b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042b8:	eb 51                	jmp    9f00430b <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:72
	    continue;
	}
	a = string;
9f0042ba:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
9f0042bd:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f0042c0:	84 c0                	test   al,al
9f0042c2:	75 05                	jne    9f0042c9 <strnstrI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:75
		return string;
9f0042c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042c7:	eb 42                	jmp    9f00430b <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
            if (len--<=0)
9f0042c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0042cc:	8d 50 ff             	lea    edx,[eax-0x1]
9f0042cf:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
9f0042d2:	85 c0                	test   eax,eax
9f0042d4:	7f 05                	jg     9f0042db <strnstrI+0x67>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:78
                return string;
9f0042d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042d9:	eb 30                	jmp    9f00430b <strnstrI+0x97>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
	    if (*a++ != *b++) {
9f0042db:	89 f0                	mov    eax,esi
9f0042dd:	8d 70 01             	lea    esi,[eax+0x1]
9f0042e0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f0042e3:	89 d8                	mov    eax,ebx
9f0042e5:	8d 58 01             	lea    ebx,[eax+0x1]
9f0042e8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f0042eb:	38 c2                	cmp    dl,al
9f0042ed:	75 02                	jne    9f0042f1 <strnstrI+0x7d>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:82
		break;
	    }
	}
9f0042ef:	eb cc                	jmp    9f0042bd <strnstrI+0x49>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
		return string;
	    }
            if (len--<=0)
                return string;
	    if (*a++ != *b++) {
		break;
9f0042f1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83
	    }
	}
	b = substring;
9f0042f2:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f0042f5:	eb 01                	jmp    9f0042f8 <strnstrI+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
            if (len--<=0)
                return string;
	    continue;
9f0042f7:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    
    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f0042f8:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66 (discriminator 1)
9f0042fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0042ff:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004302:	84 c0                	test   al,al
9f004304:	75 95                	jne    9f00429b <strnstrI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f004306:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:86
}
9f00430b:	83 c4 10             	add    esp,0x10
9f00430e:	5b                   	pop    ebx
9f00430f:	5e                   	pop    esi
9f004310:	5d                   	pop    ebp
9f004311:	c3                   	ret    

9f004312 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:89

char* strstrI(const char* string, const char* substring)
{
9f004312:	55                   	push   ebp
9f004313:	89 e5                	mov    ebp,esp
9f004315:	56                   	push   esi
9f004316:	53                   	push   ebx
9f004317:	e8 92 0d 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00431c:	05 80 3a 00 00       	add    eax,0x3a80
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:97
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
9f004321:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:98
    if (*b == 0) {
9f004324:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f004327:	84 c0                	test   al,al
9f004329:	75 42                	jne    9f00436d <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:99
	return string;
9f00432b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00432e:	eb 4c                	jmp    9f00437c <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:102
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
9f004330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004333:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004336:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f004339:	38 c2                	cmp    dl,al
9f00433b:	75 2b                	jne    9f004368 <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:105
	    continue;
	}
	a = string;
9f00433d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:107
	while (1) {
	    if (*b == 0) {
9f004340:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
9f004343:	84 c0                	test   al,al
9f004345:	75 05                	jne    9f00434c <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:108
		return string;
9f004347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00434a:	eb 30                	jmp    9f00437c <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:110
	    }
	    if (*a++ != *b++) {
9f00434c:	89 f0                	mov    eax,esi
9f00434e:	8d 70 01             	lea    esi,[eax+0x1]
9f004351:	0f b6 10             	movzx  edx,BYTE PTR [eax]
9f004354:	89 d8                	mov    eax,ebx
9f004356:	8d 58 01             	lea    ebx,[eax+0x1]
9f004359:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f00435c:	38 c2                	cmp    dl,al
9f00435e:	75 02                	jne    9f004362 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:113
		break;
	    }
	}
9f004360:	eb de                	jmp    9f004340 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:111
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
9f004362:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:114
	    }
	}
	b = substring;
9f004363:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
9f004366:	eb 01                	jmp    9f004369 <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:103
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
9f004368:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
9f004369:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:101 (discriminator 1)
9f00436d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004370:	0f b6 00             	movzx  eax,BYTE PTR [eax]
9f004373:	84 c0                	test   al,al
9f004375:	75 b9                	jne    9f004330 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:116
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
9f004377:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:117
}
9f00437c:	5b                   	pop    ebx
9f00437d:	5e                   	pop    esi
9f00437e:	5d                   	pop    ebp
9f00437f:	c3                   	ret    

9f004380 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:120

VISIBLE char* strstr(const char* string, const char* substring)
{
9f004380:	55                   	push   ebp
9f004381:	89 e5                	mov    ebp,esp
9f004383:	e8 26 0d 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f004388:	05 14 3a 00 00       	add    eax,0x3a14
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:121
    return strstrI(string, substring);
9f00438d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f004390:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004393:	e8 7a ff ff ff       	call   9f004312 <strstrI>
9f004398:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:122
}
9f00439b:	c9                   	leave  
9f00439c:	c3                   	ret    
9f00439d:	66 90                	xchg   ax,ax
9f00439f:	90                   	nop

9f0043a0 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
9f0043a0:	55                   	push   ebp
9f0043a1:	89 e5                	mov    ebp,esp
9f0043a3:	56                   	push   esi
9f0043a4:	53                   	push   ebx
9f0043a5:	83 ec 10             	sub    esp,0x10
9f0043a8:	e8 01 0d 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f0043ad:	05 ef 39 00 00       	add    eax,0x39ef
/home/yogi/src/os/aproj/libChrisOS/src/time.c:28
    uint32_t retVal=0;
9f0043b2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:29
    GET_TICKS(retVal);
9f0043b9:	b8 70 01 00 00       	mov    eax,0x170
9f0043be:	bb 00 00 00 00       	mov    ebx,0x0
9f0043c3:	b9 00 00 00 00       	mov    ecx,0x0
9f0043c8:	ba 00 00 00 00       	mov    edx,0x0
9f0043cd:	be 00 00 00 00       	mov    esi,0x0
9f0043d2:	e8 fc ff ff ff       	call   9f0043d3 <getticks+0x33>
9f0043d7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:30
    return (time_t)retVal;
9f0043da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31
}
9f0043dd:	83 c4 10             	add    esp,0x10
9f0043e0:	5b                   	pop    ebx
9f0043e1:	5e                   	pop    esi
9f0043e2:	5d                   	pop    ebp
9f0043e3:	c3                   	ret    

9f0043e4 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:35


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f0043e4:	55                   	push   ebp
9f0043e5:	89 e5                	mov    ebp,esp
9f0043e7:	53                   	push   ebx
9f0043e8:	83 ec 10             	sub    esp,0x10
9f0043eb:	e8 c2 0c 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f0043f0:	81 c3 ac 39 00 00    	add    ebx,0x39ac
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36
  time_t time = *timer;
9f0043f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0043f9:	8b 00                	mov    eax,DWORD PTR [eax]
9f0043fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:38
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
9f0043fe:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40

  dayclock = (unsigned long) time % SECS_DAY;
9f004405:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
9f004408:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f00440d:	89 c8                	mov    eax,ecx
9f00440f:	f7 e2                	mul    edx
9f004411:	89 d0                	mov    eax,edx
9f004413:	c1 e8 10             	shr    eax,0x10
9f004416:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
9f004419:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00441c:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f004422:	29 c1                	sub    ecx,eax
9f004424:	89 c8                	mov    eax,ecx
9f004426:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  dayno = (unsigned long) time / SECS_DAY;
9f004429:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f00442c:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f004431:	f7 e2                	mul    edx
9f004433:	89 d0                	mov    eax,edx
9f004435:	c1 e8 10             	shr    eax,0x10
9f004438:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
9f00443b:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f00443e:	ba 89 88 88 88       	mov    edx,0x88888889
9f004443:	89 c8                	mov    eax,ecx
9f004445:	f7 e2                	mul    edx
9f004447:	89 d0                	mov    eax,edx
9f004449:	c1 e8 05             	shr    eax,0x5
9f00444c:	89 c2                	mov    edx,eax
9f00444e:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f004455:	89 c2                	mov    edx,eax
9f004457:	89 d0                	mov    eax,edx
9f004459:	c1 e0 04             	shl    eax,0x4
9f00445c:	29 d0                	sub    eax,edx
9f00445e:	29 c1                	sub    ecx,eax
9f004460:	89 c8                	mov    eax,ecx
9f004462:	89 c2                	mov    edx,eax
9f004464:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004467:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
  tmbuf->tm_min = (dayclock % 3600) / 60;
9f004469:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
9f00446c:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f004471:	89 c8                	mov    eax,ecx
9f004473:	f7 e2                	mul    edx
9f004475:	89 d0                	mov    eax,edx
9f004477:	c1 e8 0b             	shr    eax,0xb
9f00447a:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
9f004480:	29 c1                	sub    ecx,eax
9f004482:	89 c8                	mov    eax,ecx
9f004484:	ba 89 88 88 88       	mov    edx,0x88888889
9f004489:	f7 e2                	mul    edx
9f00448b:	89 d0                	mov    eax,edx
9f00448d:	c1 e8 05             	shr    eax,0x5
9f004490:	89 c2                	mov    edx,eax
9f004492:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004495:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45
  tmbuf->tm_hour = dayclock / 3600;
9f004498:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f00449b:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
9f0044a0:	f7 e2                	mul    edx
9f0044a2:	89 d0                	mov    eax,edx
9f0044a4:	c1 e8 0b             	shr    eax,0xb
9f0044a7:	89 c2                	mov    edx,eax
9f0044a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0044ac:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:46
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
9f0044af:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0044b2:	8d 48 04             	lea    ecx,[eax+0x4]
9f0044b5:	ba 25 49 92 24       	mov    edx,0x24924925
9f0044ba:	89 c8                	mov    eax,ecx
9f0044bc:	f7 e2                	mul    edx
9f0044be:	89 c8                	mov    eax,ecx
9f0044c0:	29 d0                	sub    eax,edx
9f0044c2:	d1 e8                	shr    eax,1
9f0044c4:	01 d0                	add    eax,edx
9f0044c6:	c1 e8 02             	shr    eax,0x2
9f0044c9:	89 c2                	mov    edx,eax
9f0044cb:	c1 e2 03             	shl    edx,0x3
9f0044ce:	29 c2                	sub    edx,eax
9f0044d0:	89 c8                	mov    eax,ecx
9f0044d2:	29 d0                	sub    eax,edx
9f0044d4:	89 c2                	mov    edx,eax
9f0044d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0044d9:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f0044dc:	eb 66                	jmp    9f004544 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
    dayno -= YEARSIZE(year);
9f0044de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0044e1:	83 e0 03             	and    eax,0x3
9f0044e4:	85 c0                	test   eax,eax
9f0044e6:	75 50                	jne    9f004538 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 1)
9f0044e8:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0044eb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0044f0:	89 c8                	mov    eax,ecx
9f0044f2:	f7 ea                	imul   edx
9f0044f4:	c1 fa 05             	sar    edx,0x5
9f0044f7:	89 c8                	mov    eax,ecx
9f0044f9:	c1 f8 1f             	sar    eax,0x1f
9f0044fc:	29 c2                	sub    edx,eax
9f0044fe:	89 d0                	mov    eax,edx
9f004500:	6b c0 64             	imul   eax,eax,0x64
9f004503:	29 c1                	sub    ecx,eax
9f004505:	89 c8                	mov    eax,ecx
9f004507:	85 c0                	test   eax,eax
9f004509:	75 26                	jne    9f004531 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 4)
9f00450b:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00450e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004513:	89 c8                	mov    eax,ecx
9f004515:	f7 ea                	imul   edx
9f004517:	c1 fa 07             	sar    edx,0x7
9f00451a:	89 c8                	mov    eax,ecx
9f00451c:	c1 f8 1f             	sar    eax,0x1f
9f00451f:	29 c2                	sub    edx,eax
9f004521:	89 d0                	mov    eax,edx
9f004523:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004529:	29 c1                	sub    ecx,eax
9f00452b:	89 c8                	mov    eax,ecx
9f00452d:	85 c0                	test   eax,eax
9f00452f:	75 07                	jne    9f004538 <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 5)
9f004531:	b8 6e 01 00 00       	mov    eax,0x16e
9f004536:	eb 05                	jmp    9f00453d <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 6)
9f004538:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48 (discriminator 8)
9f00453d:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49 (discriminator 8)
    year++;
9f004540:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
9f004544:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f004547:	83 e0 03             	and    eax,0x3
9f00454a:	85 c0                	test   eax,eax
9f00454c:	75 50                	jne    9f00459e <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 1)
9f00454e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004551:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004556:	89 c8                	mov    eax,ecx
9f004558:	f7 ea                	imul   edx
9f00455a:	c1 fa 05             	sar    edx,0x5
9f00455d:	89 c8                	mov    eax,ecx
9f00455f:	c1 f8 1f             	sar    eax,0x1f
9f004562:	29 c2                	sub    edx,eax
9f004564:	89 d0                	mov    eax,edx
9f004566:	6b c0 64             	imul   eax,eax,0x64
9f004569:	29 c1                	sub    ecx,eax
9f00456b:	89 c8                	mov    eax,ecx
9f00456d:	85 c0                	test   eax,eax
9f00456f:	75 26                	jne    9f004597 <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 4)
9f004571:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004574:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004579:	89 c8                	mov    eax,ecx
9f00457b:	f7 ea                	imul   edx
9f00457d:	c1 fa 07             	sar    edx,0x7
9f004580:	89 c8                	mov    eax,ecx
9f004582:	c1 f8 1f             	sar    eax,0x1f
9f004585:	29 c2                	sub    edx,eax
9f004587:	89 d0                	mov    eax,edx
9f004589:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00458f:	29 c1                	sub    ecx,eax
9f004591:	89 c8                	mov    eax,ecx
9f004593:	85 c0                	test   eax,eax
9f004595:	75 07                	jne    9f00459e <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 5)
9f004597:	b8 6e 01 00 00       	mov    eax,0x16e
9f00459c:	eb 05                	jmp    9f0045a3 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 6)
9f00459e:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47 (discriminator 8)
9f0045a3:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0045a6:	0f 86 32 ff ff ff    	jbe    9f0044de <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
9f0045ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0045af:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
9f0045b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0045b8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52
  tmbuf->tm_yday = dayno;
9f0045bb:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
9f0045be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0045c1:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:53
  tmbuf->tm_mon = 0;
9f0045c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0045c7:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f0045ce:	e9 89 00 00 00       	jmp    9f00465c <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
9f0045d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f0045d6:	83 e0 03             	and    eax,0x3
9f0045d9:	85 c0                	test   eax,eax
9f0045db:	75 50                	jne    9f00462d <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 1)
9f0045dd:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f0045e0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f0045e5:	89 c8                	mov    eax,ecx
9f0045e7:	f7 ea                	imul   edx
9f0045e9:	c1 fa 05             	sar    edx,0x5
9f0045ec:	89 c8                	mov    eax,ecx
9f0045ee:	c1 f8 1f             	sar    eax,0x1f
9f0045f1:	29 c2                	sub    edx,eax
9f0045f3:	89 d0                	mov    eax,edx
9f0045f5:	6b c0 64             	imul   eax,eax,0x64
9f0045f8:	29 c1                	sub    ecx,eax
9f0045fa:	89 c8                	mov    eax,ecx
9f0045fc:	85 c0                	test   eax,eax
9f0045fe:	75 26                	jne    9f004626 <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 4)
9f004600:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004603:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004608:	89 c8                	mov    eax,ecx
9f00460a:	f7 ea                	imul   edx
9f00460c:	c1 fa 07             	sar    edx,0x7
9f00460f:	89 c8                	mov    eax,ecx
9f004611:	c1 f8 1f             	sar    eax,0x1f
9f004614:	29 c2                	sub    edx,eax
9f004616:	89 d0                	mov    eax,edx
9f004618:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f00461e:	29 c1                	sub    ecx,eax
9f004620:	89 c8                	mov    eax,ecx
9f004622:	85 c0                	test   eax,eax
9f004624:	75 07                	jne    9f00462d <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 5)
9f004626:	ba 01 00 00 00       	mov    edx,0x1
9f00462b:	eb 05                	jmp    9f004632 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 6)
9f00462d:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55 (discriminator 8)
9f004632:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004635:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f004638:	89 d0                	mov    eax,edx
9f00463a:	01 c0                	add    eax,eax
9f00463c:	01 d0                	add    eax,edx
9f00463e:	c1 e0 02             	shl    eax,0x2
9f004641:	01 c8                	add    eax,ecx
9f004643:	8b 84 83 24 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2dc]
9f00464a:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56 (discriminator 8)
    tmbuf->tm_mon++;
9f00464d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004650:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004653:	8d 50 01             	lea    edx,[eax+0x1]
9f004656:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f004659:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
9f00465c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
9f00465f:	83 e0 03             	and    eax,0x3
9f004662:	85 c0                	test   eax,eax
9f004664:	75 50                	jne    9f0046b6 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 1)
9f004666:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f004669:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f00466e:	89 c8                	mov    eax,ecx
9f004670:	f7 ea                	imul   edx
9f004672:	c1 fa 05             	sar    edx,0x5
9f004675:	89 c8                	mov    eax,ecx
9f004677:	c1 f8 1f             	sar    eax,0x1f
9f00467a:	29 c2                	sub    edx,eax
9f00467c:	89 d0                	mov    eax,edx
9f00467e:	6b c0 64             	imul   eax,eax,0x64
9f004681:	29 c1                	sub    ecx,eax
9f004683:	89 c8                	mov    eax,ecx
9f004685:	85 c0                	test   eax,eax
9f004687:	75 26                	jne    9f0046af <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 4)
9f004689:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
9f00468c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004691:	89 c8                	mov    eax,ecx
9f004693:	f7 ea                	imul   edx
9f004695:	c1 fa 07             	sar    edx,0x7
9f004698:	89 c8                	mov    eax,ecx
9f00469a:	c1 f8 1f             	sar    eax,0x1f
9f00469d:	29 c2                	sub    edx,eax
9f00469f:	89 d0                	mov    eax,edx
9f0046a1:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f0046a7:	29 c1                	sub    ecx,eax
9f0046a9:	89 c8                	mov    eax,ecx
9f0046ab:	85 c0                	test   eax,eax
9f0046ad:	75 07                	jne    9f0046b6 <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 5)
9f0046af:	ba 01 00 00 00       	mov    edx,0x1
9f0046b4:	eb 05                	jmp    9f0046bb <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 6)
9f0046b6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54 (discriminator 8)
9f0046bb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0046be:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
9f0046c1:	89 d0                	mov    eax,edx
9f0046c3:	01 c0                	add    eax,eax
9f0046c5:	01 d0                	add    eax,edx
9f0046c7:	c1 e0 02             	shl    eax,0x2
9f0046ca:	01 c8                	add    eax,ecx
9f0046cc:	8b 84 83 24 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x2dc]
9f0046d3:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
9f0046d6:	0f 86 f7 fe ff ff    	jbe    9f0045d3 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:58
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
9f0046dc:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
9f0046df:	83 c0 01             	add    eax,0x1
9f0046e2:	89 c2                	mov    edx,eax
9f0046e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0046e7:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:59
  tmbuf->tm_isdst = 0;
9f0046ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f0046ed:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60
  return tmbuf;
9f0046f4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
}
9f0046f7:	83 c4 10             	add    esp,0x10
9f0046fa:	5b                   	pop    ebx
9f0046fb:	5d                   	pop    ebp
9f0046fc:	c3                   	ret    

9f0046fd <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
9f0046fd:	55                   	push   ebp
9f0046fe:	89 e5                	mov    ebp,esp
9f004700:	e8 a9 09 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f004705:	05 97 36 00 00       	add    eax,0x3697
/home/yogi/src/os/aproj/libChrisOS/src/time.c:65
    return gmtime_rI(timer, tmbuf);
9f00470a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00470d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f004710:	e8 cf fc ff ff       	call   9f0043e4 <gmtime_rI>
9f004715:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:66
}
9f004718:	c9                   	leave  
9f004719:	c3                   	ret    

9f00471a <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68

VISIBLE struct tm *localtime(const time_t *timer) {
9f00471a:	55                   	push   ebp
9f00471b:	89 e5                	mov    ebp,esp
9f00471d:	83 ec 10             	sub    esp,0x10
9f004720:	e8 89 09 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f004725:	05 77 36 00 00       	add    eax,0x3677
/home/yogi/src/os/aproj/libChrisOS/src/time.c:71
  time_t t;
 
  t = *timer + (libcTZ*60*60);
9f00472a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00472d:	8b 0a                	mov    ecx,DWORD PTR [edx]
9f00472f:	8b 90 f8 ff ff ff    	mov    edx,DWORD PTR [eax-0x8]
9f004735:	8b 12                	mov    edx,DWORD PTR [edx]
9f004737:	69 d2 10 0e 00 00    	imul   edx,edx,0xe10
9f00473d:	01 ca                	add    edx,ecx
9f00473f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:72
  return gmtime_rI(&t, &tmbuf);
9f004742:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
9f004748:	50                   	push   eax
9f004749:	8d 45 fc             	lea    eax,[ebp-0x4]
9f00474c:	50                   	push   eax
9f00474d:	e8 92 fc ff ff       	call   9f0043e4 <gmtime_rI>
9f004752:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73
}
9f004755:	c9                   	leave  
9f004756:	c3                   	ret    

9f004757 <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
9f004757:	55                   	push   ebp
9f004758:	89 e5                	mov    ebp,esp
9f00475a:	83 ec 10             	sub    esp,0x10
9f00475d:	e8 4c 09 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f004762:	05 3a 36 00 00       	add    eax,0x363a
/home/yogi/src/os/aproj/libChrisOS/src/time.c:79
  time_t t;

  t = *timer - libcTZ;
9f004767:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f00476a:	8b 12                	mov    edx,DWORD PTR [edx]
9f00476c:	8b 80 f8 ff ff ff    	mov    eax,DWORD PTR [eax-0x8]
9f004772:	8b 00                	mov    eax,DWORD PTR [eax]
9f004774:	29 c2                	sub    edx,eax
9f004776:	89 d0                	mov    eax,edx
9f004778:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80
  return gmtime_rI(&t, tmbuf);
9f00477b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00477e:	8d 45 fc             	lea    eax,[ebp-0x4]
9f004781:	50                   	push   eax
9f004782:	e8 5d fc ff ff       	call   9f0043e4 <gmtime_rI>
9f004787:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
}
9f00478a:	c9                   	leave  
9f00478b:	c3                   	ret    

9f00478c <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:83

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
9f00478c:	55                   	push   ebp
9f00478d:	89 e5                	mov    ebp,esp
9f00478f:	e8 1a 09 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f004794:	05 08 36 00 00       	add    eax,0x3608
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84
    return localtime_rI(timer, tmbuf);
9f004799:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
9f00479c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00479f:	e8 b3 ff ff ff       	call   9f004757 <localtime_rI>
9f0047a4:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:85
}
9f0047a7:	c9                   	leave  
9f0047a8:	c3                   	ret    

9f0047a9 <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:87

VISIBLE time_t mktime(struct tm *tmbuf) {
9f0047a9:	55                   	push   ebp
9f0047aa:	89 e5                	mov    ebp,esp
9f0047ac:	57                   	push   edi
9f0047ad:	56                   	push   esi
9f0047ae:	53                   	push   ebx
9f0047af:	83 ec 20             	sub    esp,0x20
9f0047b2:	e8 ff 08 00 00       	call   9f0050b6 <__x86.get_pc_thunk.cx>
9f0047b7:	81 c1 e5 35 00 00    	add    ecx,0x35e5
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
9f0047bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047c0:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
9f0047c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047c6:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0047c8:	ba 89 88 88 88       	mov    edx,0x88888889
9f0047cd:	89 d8                	mov    eax,ebx
9f0047cf:	f7 ea                	imul   edx
9f0047d1:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0047d4:	c1 f8 05             	sar    eax,0x5
9f0047d7:	89 c2                	mov    edx,eax
9f0047d9:	89 d8                	mov    eax,ebx
9f0047db:	c1 f8 1f             	sar    eax,0x1f
9f0047de:	29 c2                	sub    edx,eax
9f0047e0:	89 d0                	mov    eax,edx
9f0047e2:	8d 14 06             	lea    edx,[esi+eax*1]
9f0047e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
  tmbuf->tm_sec %= 60;
9f0047eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0047ee:	8b 18                	mov    ebx,DWORD PTR [eax]
9f0047f0:	ba 89 88 88 88       	mov    edx,0x88888889
9f0047f5:	89 d8                	mov    eax,ebx
9f0047f7:	f7 ea                	imul   edx
9f0047f9:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f0047fc:	c1 f8 05             	sar    eax,0x5
9f0047ff:	89 c2                	mov    edx,eax
9f004801:	89 d8                	mov    eax,ebx
9f004803:	c1 f8 1f             	sar    eax,0x1f
9f004806:	29 c2                	sub    edx,eax
9f004808:	89 d0                	mov    eax,edx
9f00480a:	89 c2                	mov    edx,eax
9f00480c:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f004813:	89 c2                	mov    edx,eax
9f004815:	89 d0                	mov    eax,edx
9f004817:	c1 e0 04             	shl    eax,0x4
9f00481a:	29 d0                	sub    eax,edx
9f00481c:	29 c3                	sub    ebx,eax
9f00481e:	89 d8                	mov    eax,ebx
9f004820:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004823:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:97
  if (tmbuf->tm_sec < 0) {
9f004825:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004828:	8b 00                	mov    eax,DWORD PTR [eax]
9f00482a:	85 c0                	test   eax,eax
9f00482c:	79 1c                	jns    9f00484a <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
    tmbuf->tm_sec += 60;
9f00482e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004831:	8b 00                	mov    eax,DWORD PTR [eax]
9f004833:	8d 50 3c             	lea    edx,[eax+0x3c]
9f004836:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004839:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
    tmbuf->tm_min--;
9f00483b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00483e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004841:	8d 50 ff             	lea    edx,[eax-0x1]
9f004844:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004847:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
9f00484a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00484d:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
9f004850:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004853:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f004856:	ba 89 88 88 88       	mov    edx,0x88888889
9f00485b:	89 d8                	mov    eax,ebx
9f00485d:	f7 ea                	imul   edx
9f00485f:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004862:	c1 f8 05             	sar    eax,0x5
9f004865:	89 c2                	mov    edx,eax
9f004867:	89 d8                	mov    eax,ebx
9f004869:	c1 f8 1f             	sar    eax,0x1f
9f00486c:	29 c2                	sub    edx,eax
9f00486e:	89 d0                	mov    eax,edx
9f004870:	8d 14 06             	lea    edx,[esi+eax*1]
9f004873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004876:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
  tmbuf->tm_min = tmbuf->tm_min % 60;
9f004879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00487c:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
9f00487f:	ba 89 88 88 88       	mov    edx,0x88888889
9f004884:	89 d8                	mov    eax,ebx
9f004886:	f7 ea                	imul   edx
9f004888:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f00488b:	c1 f8 05             	sar    eax,0x5
9f00488e:	89 c2                	mov    edx,eax
9f004890:	89 d8                	mov    eax,ebx
9f004892:	c1 f8 1f             	sar    eax,0x1f
9f004895:	29 c2                	sub    edx,eax
9f004897:	89 d0                	mov    eax,edx
9f004899:	89 c2                	mov    edx,eax
9f00489b:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
9f0048a2:	89 c2                	mov    edx,eax
9f0048a4:	89 d0                	mov    eax,edx
9f0048a6:	c1 e0 04             	shl    eax,0x4
9f0048a9:	29 d0                	sub    eax,edx
9f0048ab:	29 c3                	sub    ebx,eax
9f0048ad:	89 d8                	mov    eax,ebx
9f0048af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f0048b2:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:103
  if (tmbuf->tm_min < 0) {
9f0048b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0048bb:	85 c0                	test   eax,eax
9f0048bd:	79 1e                	jns    9f0048dd <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
    tmbuf->tm_min += 60;
9f0048bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048c2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f0048c5:	8d 50 3c             	lea    edx,[eax+0x3c]
9f0048c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048cb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
    tmbuf->tm_hour--;
9f0048ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048d1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f0048d4:	8d 50 ff             	lea    edx,[eax-0x1]
9f0048d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048da:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
  }
  day = tmbuf->tm_hour / 24;
9f0048dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048e0:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f0048e3:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f0048e8:	89 d8                	mov    eax,ebx
9f0048ea:	f7 ea                	imul   edx
9f0048ec:	c1 fa 02             	sar    edx,0x2
9f0048ef:	89 d8                	mov    eax,ebx
9f0048f1:	c1 f8 1f             	sar    eax,0x1f
9f0048f4:	29 c2                	sub    edx,eax
9f0048f6:	89 d0                	mov    eax,edx
9f0048f8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
9f0048fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0048fe:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
9f004901:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004906:	89 d8                	mov    eax,ebx
9f004908:	f7 ea                	imul   edx
9f00490a:	c1 fa 02             	sar    edx,0x2
9f00490d:	89 d8                	mov    eax,ebx
9f00490f:	c1 f8 1f             	sar    eax,0x1f
9f004912:	29 c2                	sub    edx,eax
9f004914:	89 d0                	mov    eax,edx
9f004916:	01 c0                	add    eax,eax
9f004918:	01 d0                	add    eax,edx
9f00491a:	c1 e0 03             	shl    eax,0x3
9f00491d:	29 c3                	sub    ebx,eax
9f00491f:	89 da                	mov    edx,ebx
9f004921:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004924:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:109
  if (tmbuf->tm_hour < 0) {
9f004927:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00492a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f00492d:	85 c0                	test   eax,eax
9f00492f:	79 13                	jns    9f004944 <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
    tmbuf->tm_hour += 24;
9f004931:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004934:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004937:	8d 50 18             	lea    edx,[eax+0x18]
9f00493a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00493d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
    day--;
9f004940:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
9f004944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004947:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
9f00494a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00494d:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004950:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004955:	89 d8                	mov    eax,ebx
9f004957:	f7 ea                	imul   edx
9f004959:	d1 fa                	sar    edx,1
9f00495b:	89 d8                	mov    eax,ebx
9f00495d:	c1 f8 1f             	sar    eax,0x1f
9f004960:	29 c2                	sub    edx,eax
9f004962:	89 d0                	mov    eax,edx
9f004964:	8d 14 06             	lea    edx,[esi+eax*1]
9f004967:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00496a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
  tmbuf->tm_mon %= 12;
9f00496d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004970:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004973:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
9f004978:	89 d8                	mov    eax,ebx
9f00497a:	f7 ea                	imul   edx
9f00497c:	d1 fa                	sar    edx,1
9f00497e:	89 d8                	mov    eax,ebx
9f004980:	c1 f8 1f             	sar    eax,0x1f
9f004983:	29 c2                	sub    edx,eax
9f004985:	89 d0                	mov    eax,edx
9f004987:	01 c0                	add    eax,eax
9f004989:	01 d0                	add    eax,edx
9f00498b:	c1 e0 02             	shl    eax,0x2
9f00498e:	29 c3                	sub    ebx,eax
9f004990:	89 da                	mov    edx,ebx
9f004992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004995:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:115
  if (tmbuf->tm_mon < 0) {
9f004998:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f00499b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f00499e:	85 c0                	test   eax,eax
9f0049a0:	79 1e                	jns    9f0049c0 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
    tmbuf->tm_mon += 12;
9f0049a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049a5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0049a8:	8d 50 0c             	lea    edx,[eax+0xc]
9f0049ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049ae:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
    tmbuf->tm_year--;
9f0049b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049b4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0049b7:	8d 50 ff             	lea    edx,[eax-0x1]
9f0049ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049bd:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
  }
  day += (tmbuf->tm_mday - 1);
9f0049c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049c3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f0049c6:	83 e8 01             	sub    eax,0x1
9f0049c9:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  while (day < 0) {
9f0049cc:	e9 c1 00 00 00       	jmp    9f004a92 <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:121
    if(--tmbuf->tm_mon < 0) {
9f0049d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0049d7:	8d 50 ff             	lea    edx,[eax-0x1]
9f0049da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049dd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f0049e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049e3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f0049e6:	85 c0                	test   eax,eax
9f0049e8:	79 19                	jns    9f004a03 <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
      tmbuf->tm_year--;
9f0049ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049ed:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f0049f0:	8d 50 ff             	lea    edx,[eax-0x1]
9f0049f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049f6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:123
      tmbuf->tm_mon = 11;
9f0049f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f0049fc:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f004a03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a06:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004a09:	83 e0 03             	and    eax,0x3
9f004a0c:	85 c0                	test   eax,eax
9f004a0e:	75 62                	jne    9f004a72 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
9f004a10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a13:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004a16:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004a1c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004a21:	89 d8                	mov    eax,ebx
9f004a23:	f7 ea                	imul   edx
9f004a25:	c1 fa 05             	sar    edx,0x5
9f004a28:	89 d8                	mov    eax,ebx
9f004a2a:	c1 f8 1f             	sar    eax,0x1f
9f004a2d:	29 c2                	sub    edx,eax
9f004a2f:	89 d0                	mov    eax,edx
9f004a31:	6b c0 64             	imul   eax,eax,0x64
9f004a34:	29 c3                	sub    ebx,eax
9f004a36:	89 d8                	mov    eax,ebx
9f004a38:	85 c0                	test   eax,eax
9f004a3a:	75 2f                	jne    9f004a6b <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
9f004a3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a3f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004a42:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004a48:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004a4d:	89 d8                	mov    eax,ebx
9f004a4f:	f7 ea                	imul   edx
9f004a51:	c1 fa 07             	sar    edx,0x7
9f004a54:	89 d8                	mov    eax,ebx
9f004a56:	c1 f8 1f             	sar    eax,0x1f
9f004a59:	29 c2                	sub    edx,eax
9f004a5b:	89 d0                	mov    eax,edx
9f004a5d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004a63:	29 c3                	sub    ebx,eax
9f004a65:	89 d8                	mov    eax,ebx
9f004a67:	85 c0                	test   eax,eax
9f004a69:	75 07                	jne    9f004a72 <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
9f004a6b:	ba 01 00 00 00       	mov    edx,0x1
9f004a70:	eb 05                	jmp    9f004a77 <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
9f004a72:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
9f004a77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004a7a:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004a7d:	89 d0                	mov    eax,edx
9f004a7f:	01 c0                	add    eax,eax
9f004a81:	01 d0                	add    eax,edx
9f004a83:	c1 e0 02             	shl    eax,0x2
9f004a86:	01 d8                	add    eax,ebx
9f004a88:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
9f004a8f:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
9f004a92:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
9f004a96:	0f 88 35 ff ff ff    	js     9f0049d1 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f004a9c:	e9 c2 00 00 00       	jmp    9f004b63 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
9f004aa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004aa4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004aa7:	83 e0 03             	and    eax,0x3
9f004aaa:	85 c0                	test   eax,eax
9f004aac:	75 62                	jne    9f004b10 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 1)
9f004aae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ab1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004ab4:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004aba:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004abf:	89 d8                	mov    eax,ebx
9f004ac1:	f7 ea                	imul   edx
9f004ac3:	c1 fa 05             	sar    edx,0x5
9f004ac6:	89 d8                	mov    eax,ebx
9f004ac8:	c1 f8 1f             	sar    eax,0x1f
9f004acb:	29 c2                	sub    edx,eax
9f004acd:	89 d0                	mov    eax,edx
9f004acf:	6b c0 64             	imul   eax,eax,0x64
9f004ad2:	29 c3                	sub    ebx,eax
9f004ad4:	89 d8                	mov    eax,ebx
9f004ad6:	85 c0                	test   eax,eax
9f004ad8:	75 2f                	jne    9f004b09 <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 4)
9f004ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004add:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004ae0:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004ae6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004aeb:	89 d8                	mov    eax,ebx
9f004aed:	f7 ea                	imul   edx
9f004aef:	c1 fa 07             	sar    edx,0x7
9f004af2:	89 d8                	mov    eax,ebx
9f004af4:	c1 f8 1f             	sar    eax,0x1f
9f004af7:	29 c2                	sub    edx,eax
9f004af9:	89 d0                	mov    eax,edx
9f004afb:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004b01:	29 c3                	sub    ebx,eax
9f004b03:	89 d8                	mov    eax,ebx
9f004b05:	85 c0                	test   eax,eax
9f004b07:	75 07                	jne    9f004b10 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 5)
9f004b09:	ba 01 00 00 00       	mov    edx,0x1
9f004b0e:	eb 05                	jmp    9f004b15 <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 6)
9f004b10:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128 (discriminator 8)
9f004b15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b18:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004b1b:	89 d0                	mov    eax,edx
9f004b1d:	01 c0                	add    eax,eax
9f004b1f:	01 d0                	add    eax,edx
9f004b21:	c1 e0 02             	shl    eax,0x2
9f004b24:	01 d8                	add    eax,ebx
9f004b26:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
9f004b2d:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:129 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
9f004b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b33:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004b36:	8d 50 01             	lea    edx,[eax+0x1]
9f004b39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b3c:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
9f004b3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b42:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004b45:	83 f8 0c             	cmp    eax,0xc
9f004b48:	75 19                	jne    9f004b63 <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:130
      tmbuf->tm_mon = 0;
9f004b4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b4d:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
      tmbuf->tm_year++;
9f004b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b57:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004b5a:	8d 50 01             	lea    edx,[eax+0x1]
9f004b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b60:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
9f004b63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b66:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004b69:	83 e0 03             	and    eax,0x3
9f004b6c:	85 c0                	test   eax,eax
9f004b6e:	75 62                	jne    9f004bd2 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 1)
9f004b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b73:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004b76:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004b7c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004b81:	89 d8                	mov    eax,ebx
9f004b83:	f7 ea                	imul   edx
9f004b85:	c1 fa 05             	sar    edx,0x5
9f004b88:	89 d8                	mov    eax,ebx
9f004b8a:	c1 f8 1f             	sar    eax,0x1f
9f004b8d:	29 c2                	sub    edx,eax
9f004b8f:	89 d0                	mov    eax,edx
9f004b91:	6b c0 64             	imul   eax,eax,0x64
9f004b94:	29 c3                	sub    ebx,eax
9f004b96:	89 d8                	mov    eax,ebx
9f004b98:	85 c0                	test   eax,eax
9f004b9a:	75 2f                	jne    9f004bcb <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 4)
9f004b9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004b9f:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004ba2:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
9f004ba8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004bad:	89 d8                	mov    eax,ebx
9f004baf:	f7 ea                	imul   edx
9f004bb1:	c1 fa 07             	sar    edx,0x7
9f004bb4:	89 d8                	mov    eax,ebx
9f004bb6:	c1 f8 1f             	sar    eax,0x1f
9f004bb9:	29 c2                	sub    edx,eax
9f004bbb:	89 d0                	mov    eax,edx
9f004bbd:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004bc3:	29 c3                	sub    ebx,eax
9f004bc5:	89 d8                	mov    eax,ebx
9f004bc7:	85 c0                	test   eax,eax
9f004bc9:	75 07                	jne    9f004bd2 <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 5)
9f004bcb:	ba 01 00 00 00       	mov    edx,0x1
9f004bd0:	eb 05                	jmp    9f004bd7 <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 6)
9f004bd2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127 (discriminator 8)
9f004bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004bda:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
9f004bdd:	89 d0                	mov    eax,edx
9f004bdf:	01 c0                	add    eax,eax
9f004be1:	01 d0                	add    eax,edx
9f004be3:	c1 e0 02             	shl    eax,0x2
9f004be6:	01 d8                	add    eax,ebx
9f004be8:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
9f004bef:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f004bf2:	0f 8e a9 fe ff ff    	jle    9f004aa1 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
9f004bf8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004bfb:	8d 50 01             	lea    edx,[eax+0x1]
9f004bfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004c01:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  year = EPOCH_YR;
9f004c04:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
9f004c0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004c0e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004c11:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
9f004c14:	81 ea 6c 07 00 00    	sub    edx,0x76c
9f004c1a:	39 d0                	cmp    eax,edx
9f004c1c:	7d 0a                	jge    9f004c28 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136 (discriminator 1)
9f004c1e:	b8 19 fc ff ff       	mov    eax,0xfffffc19
9f004c23:	e9 d0 03 00 00       	jmp    9f004ff8 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:137
  seconds = 0;
9f004c28:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:138
  day = 0;                      // Means days since day 0 now
9f004c2f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:139
  overflow = 0;
9f004c36:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
9f004c3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004c40:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
9f004c43:	05 6c 07 00 00       	add    eax,0x76c
9f004c48:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
9f004c4b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004c4e:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004c51:	3d 7c c6 59 00       	cmp    eax,0x59c67c
9f004c56:	7e 07                	jle    9f004c5f <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
9f004c58:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149
  day = (tm_year - year) * 365;
9f004c5f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004c62:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004c65:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
9f004c6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
9f004c6e:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f004c73:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
9f004c76:	89 c2                	mov    edx,eax
9f004c78:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004c7b:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004c7e:	8d 58 03             	lea    ebx,[eax+0x3]
9f004c81:	85 c0                	test   eax,eax
9f004c83:	0f 48 c3             	cmovs  eax,ebx
9f004c86:	c1 f8 02             	sar    eax,0x2
9f004c89:	83 c0 01             	add    eax,0x1
9f004c8c:	39 c2                	cmp    edx,eax
9f004c8e:	7d 04                	jge    9f004c94 <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
9f004c90:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
9f004c94:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004c97:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004c9a:	8d 50 03             	lea    edx,[eax+0x3]
9f004c9d:	85 c0                	test   eax,eax
9f004c9f:	0f 48 c2             	cmovs  eax,edx
9f004ca2:	c1 f8 02             	sar    eax,0x2
9f004ca5:	89 c3                	mov    ebx,eax
9f004ca7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004caa:	83 e0 03             	and    eax,0x3
9f004cad:	85 c0                	test   eax,eax
9f004caf:	74 29                	je     9f004cda <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 1)
9f004cb1:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004cb4:	99                   	cdq    
9f004cb5:	c1 ea 1e             	shr    edx,0x1e
9f004cb8:	01 d0                	add    eax,edx
9f004cba:	83 e0 03             	and    eax,0x3
9f004cbd:	29 d0                	sub    eax,edx
9f004cbf:	89 c6                	mov    esi,eax
9f004cc1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
9f004cc4:	99                   	cdq    
9f004cc5:	c1 ea 1e             	shr    edx,0x1e
9f004cc8:	01 d0                	add    eax,edx
9f004cca:	83 e0 03             	and    eax,0x3
9f004ccd:	29 d0                	sub    eax,edx
9f004ccf:	39 c6                	cmp    esi,eax
9f004cd1:	7d 07                	jge    9f004cda <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 3)
9f004cd3:	b8 01 00 00 00       	mov    eax,0x1
9f004cd8:	eb 05                	jmp    9f004cdf <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 4)
9f004cda:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:151 (discriminator 6)
9f004cdf:	01 d8                	add    eax,ebx
9f004ce1:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
9f004ce4:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004ce7:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004cea:	89 c3                	mov    ebx,eax
9f004cec:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004cf1:	89 d8                	mov    eax,ebx
9f004cf3:	f7 ea                	imul   edx
9f004cf5:	c1 fa 05             	sar    edx,0x5
9f004cf8:	89 d8                	mov    eax,ebx
9f004cfa:	c1 f8 1f             	sar    eax,0x1f
9f004cfd:	89 d7                	mov    edi,edx
9f004cff:	29 c7                	sub    edi,eax
9f004d01:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004d04:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004d09:	89 d8                	mov    eax,ebx
9f004d0b:	f7 ea                	imul   edx
9f004d0d:	c1 fa 05             	sar    edx,0x5
9f004d10:	89 d8                	mov    eax,ebx
9f004d12:	c1 f8 1f             	sar    eax,0x1f
9f004d15:	29 c2                	sub    edx,eax
9f004d17:	89 d0                	mov    eax,edx
9f004d19:	6b c0 64             	imul   eax,eax,0x64
9f004d1c:	29 c3                	sub    ebx,eax
9f004d1e:	89 d8                	mov    eax,ebx
9f004d20:	85 c0                	test   eax,eax
9f004d22:	74 49                	je     9f004d6d <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 1)
9f004d24:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004d27:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004d2c:	89 d8                	mov    eax,ebx
9f004d2e:	f7 ea                	imul   edx
9f004d30:	c1 fa 05             	sar    edx,0x5
9f004d33:	89 d8                	mov    eax,ebx
9f004d35:	c1 f8 1f             	sar    eax,0x1f
9f004d38:	89 d6                	mov    esi,edx
9f004d3a:	29 c6                	sub    esi,eax
9f004d3c:	6b c6 64             	imul   eax,esi,0x64
9f004d3f:	89 de                	mov    esi,ebx
9f004d41:	29 c6                	sub    esi,eax
9f004d43:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f004d46:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004d4b:	89 d8                	mov    eax,ebx
9f004d4d:	f7 ea                	imul   edx
9f004d4f:	c1 fa 05             	sar    edx,0x5
9f004d52:	89 d8                	mov    eax,ebx
9f004d54:	c1 f8 1f             	sar    eax,0x1f
9f004d57:	29 c2                	sub    edx,eax
9f004d59:	89 d0                	mov    eax,edx
9f004d5b:	6b c0 64             	imul   eax,eax,0x64
9f004d5e:	29 c3                	sub    ebx,eax
9f004d60:	89 d8                	mov    eax,ebx
9f004d62:	39 c6                	cmp    esi,eax
9f004d64:	7d 07                	jge    9f004d6d <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 3)
9f004d66:	b8 01 00 00 00       	mov    eax,0x1
9f004d6b:	eb 05                	jmp    9f004d72 <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 4)
9f004d6d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)
9f004d72:	01 f8                	add    eax,edi
9f004d74:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
9f004d77:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004d7a:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
9f004d7d:	89 c3                	mov    ebx,eax
9f004d7f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004d84:	89 d8                	mov    eax,ebx
9f004d86:	f7 ea                	imul   edx
9f004d88:	c1 fa 07             	sar    edx,0x7
9f004d8b:	89 d8                	mov    eax,ebx
9f004d8d:	c1 f8 1f             	sar    eax,0x1f
9f004d90:	89 d7                	mov    edi,edx
9f004d92:	29 c7                	sub    edi,eax
9f004d94:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004d97:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004d9c:	89 d8                	mov    eax,ebx
9f004d9e:	f7 ea                	imul   edx
9f004da0:	c1 fa 07             	sar    edx,0x7
9f004da3:	89 d8                	mov    eax,ebx
9f004da5:	c1 f8 1f             	sar    eax,0x1f
9f004da8:	29 c2                	sub    edx,eax
9f004daa:	89 d0                	mov    eax,edx
9f004dac:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004db2:	29 c3                	sub    ebx,eax
9f004db4:	89 d8                	mov    eax,ebx
9f004db6:	85 c0                	test   eax,eax
9f004db8:	74 4f                	je     9f004e09 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 1)
9f004dba:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004dbd:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004dc2:	89 d8                	mov    eax,ebx
9f004dc4:	f7 ea                	imul   edx
9f004dc6:	c1 fa 07             	sar    edx,0x7
9f004dc9:	89 d8                	mov    eax,ebx
9f004dcb:	c1 f8 1f             	sar    eax,0x1f
9f004dce:	89 d6                	mov    esi,edx
9f004dd0:	29 c6                	sub    esi,eax
9f004dd2:	69 c6 90 01 00 00    	imul   eax,esi,0x190
9f004dd8:	89 de                	mov    esi,ebx
9f004dda:	29 c6                	sub    esi,eax
9f004ddc:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
9f004ddf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004de4:	89 d8                	mov    eax,ebx
9f004de6:	f7 ea                	imul   edx
9f004de8:	c1 fa 07             	sar    edx,0x7
9f004deb:	89 d8                	mov    eax,ebx
9f004ded:	c1 f8 1f             	sar    eax,0x1f
9f004df0:	29 c2                	sub    edx,eax
9f004df2:	89 d0                	mov    eax,edx
9f004df4:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004dfa:	29 c3                	sub    ebx,eax
9f004dfc:	89 d8                	mov    eax,ebx
9f004dfe:	39 c6                	cmp    esi,eax
9f004e00:	7d 07                	jge    9f004e09 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 3)
9f004e02:	b8 01 00 00 00       	mov    eax,0x1
9f004e07:	eb 05                	jmp    9f004e0e <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 4)
9f004e09:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
9f004e0e:	01 f8                	add    eax,edi
9f004e10:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 6)

  yday = month = 0;
9f004e13:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
9f004e1a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
9f004e1d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156 (discriminator 6)
  while (month < tmbuf->tm_mon) {
9f004e20:	eb 7b                	jmp    9f004e9d <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
9f004e22:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
9f004e25:	83 e0 03             	and    eax,0x3
9f004e28:	85 c0                	test   eax,eax
9f004e2a:	75 50                	jne    9f004e7c <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 1)
9f004e2c:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004e2f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004e34:	89 d8                	mov    eax,ebx
9f004e36:	f7 ea                	imul   edx
9f004e38:	c1 fa 05             	sar    edx,0x5
9f004e3b:	89 d8                	mov    eax,ebx
9f004e3d:	c1 f8 1f             	sar    eax,0x1f
9f004e40:	29 c2                	sub    edx,eax
9f004e42:	89 d0                	mov    eax,edx
9f004e44:	6b c0 64             	imul   eax,eax,0x64
9f004e47:	29 c3                	sub    ebx,eax
9f004e49:	89 d8                	mov    eax,ebx
9f004e4b:	85 c0                	test   eax,eax
9f004e4d:	75 26                	jne    9f004e75 <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 4)
9f004e4f:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
9f004e52:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
9f004e57:	89 d8                	mov    eax,ebx
9f004e59:	f7 ea                	imul   edx
9f004e5b:	c1 fa 07             	sar    edx,0x7
9f004e5e:	89 d8                	mov    eax,ebx
9f004e60:	c1 f8 1f             	sar    eax,0x1f
9f004e63:	29 c2                	sub    edx,eax
9f004e65:	89 d0                	mov    eax,edx
9f004e67:	69 c0 90 01 00 00    	imul   eax,eax,0x190
9f004e6d:	29 c3                	sub    ebx,eax
9f004e6f:	89 d8                	mov    eax,ebx
9f004e71:	85 c0                	test   eax,eax
9f004e73:	75 07                	jne    9f004e7c <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 5)
9f004e75:	ba 01 00 00 00       	mov    edx,0x1
9f004e7a:	eb 05                	jmp    9f004e81 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 6)
9f004e7c:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157 (discriminator 8)
9f004e81:	89 d0                	mov    eax,edx
9f004e83:	01 c0                	add    eax,eax
9f004e85:	01 d0                	add    eax,edx
9f004e87:	c1 e0 02             	shl    eax,0x2
9f004e8a:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
9f004e8d:	01 d0                	add    eax,edx
9f004e8f:	8b 84 81 24 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x2dc]
9f004e96:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 8)
    month++;
9f004e99:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:156
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
9f004e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ea0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
9f004ea3:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
9f004ea6:	0f 8f 76 ff ff ff    	jg     9f004e22 <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:160
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
9f004eac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004eaf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
9f004eb2:	83 e8 01             	sub    eax,0x1
9f004eb5:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161
  if (day + yday < 0) overflow|=4;
9f004eb8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
9f004ebb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f004ebe:	01 d0                	add    eax,edx
9f004ec0:	85 c0                	test   eax,eax
9f004ec2:	79 04                	jns    9f004ec8 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161 (discriminator 1)
9f004ec4:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  day += yday;
9f004ec8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
9f004ecb:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  tmbuf->tm_yday = yday;
9f004ece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004ed1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
9f004ed4:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:165
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
9f004ed7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004eda:	8d 58 04             	lea    ebx,[eax+0x4]
9f004edd:	ba 93 24 49 92       	mov    edx,0x92492493
9f004ee2:	89 d8                	mov    eax,ebx
9f004ee4:	f7 ea                	imul   edx
9f004ee6:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004ee9:	c1 f8 02             	sar    eax,0x2
9f004eec:	89 c2                	mov    edx,eax
9f004eee:	89 d8                	mov    eax,ebx
9f004ef0:	c1 f8 1f             	sar    eax,0x1f
9f004ef3:	29 c2                	sub    edx,eax
9f004ef5:	89 d0                	mov    eax,edx
9f004ef7:	89 c2                	mov    edx,eax
9f004ef9:	c1 e2 03             	shl    edx,0x3
9f004efc:	29 c2                	sub    edx,eax
9f004efe:	89 d8                	mov    eax,ebx
9f004f00:	29 d0                	sub    eax,edx
9f004f02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
9f004f05:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
9f004f08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004f0b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
9f004f0e:	c1 e0 02             	shl    eax,0x2
9f004f11:	89 c2                	mov    edx,eax
9f004f13:	c1 e2 04             	shl    edx,0x4
9f004f16:	29 c2                	sub    edx,eax
9f004f18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004f1b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
9f004f1e:	01 d0                	add    eax,edx
9f004f20:	c1 e0 02             	shl    eax,0x2
9f004f23:	89 c2                	mov    edx,eax
9f004f25:	c1 e2 04             	shl    edx,0x4
9f004f28:	29 c2                	sub    edx,eax
9f004f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004f2d:	8b 00                	mov    eax,DWORD PTR [eax]
9f004f2f:	01 d0                	add    eax,edx
9f004f31:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
9f004f34:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
9f004f39:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
9f004f3c:	89 c3                	mov    ebx,eax
9f004f3e:	ba 07 45 2e c2       	mov    edx,0xc22e4507
9f004f43:	89 d8                	mov    eax,ebx
9f004f45:	f7 ea                	imul   edx
9f004f47:	8d 04 1a             	lea    eax,[edx+ebx*1]
9f004f4a:	c1 f8 10             	sar    eax,0x10
9f004f4d:	89 c2                	mov    edx,eax
9f004f4f:	89 d8                	mov    eax,ebx
9f004f51:	c1 f8 1f             	sar    eax,0x1f
9f004f54:	29 c2                	sub    edx,eax
9f004f56:	89 d0                	mov    eax,edx
9f004f58:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
9f004f5b:	7d 04                	jge    9f004f61 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:169 (discriminator 1)
9f004f5d:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170
  seconds += day * SECS_DAY;
9f004f61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
9f004f64:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
9f004f6a:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f004f6d:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004f73:	8b 00                	mov    eax,DWORD PTR [eax]
9f004f75:	85 c0                	test   eax,eax
9f004f77:	7e 16                	jle    9f004f8f <mktime+0x7e6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 1)
9f004f79:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004f7f:	8b 00                	mov    eax,DWORD PTR [eax]
9f004f81:	ba ff ff ff 7f       	mov    edx,0x7fffffff
9f004f86:	29 c2                	sub    edx,eax
9f004f88:	89 d0                	mov    eax,edx
9f004f8a:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f004f8d:	7c 1b                	jl     9f004faa <mktime+0x801>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174 (discriminator 3)
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f004f8f:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004f95:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:173 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
9f004f97:	85 c0                	test   eax,eax
9f004f99:	79 13                	jns    9f004fae <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
      ((libcTZ < 0) && (seconds < -libcTZ))) {
9f004f9b:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004fa1:	8b 00                	mov    eax,DWORD PTR [eax]
9f004fa3:	f7 d8                	neg    eax
9f004fa5:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f004fa8:	7e 04                	jle    9f004fae <mktime+0x805>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:175
          overflow|=16;
9f004faa:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
  }
  seconds += libcTZ;
9f004fae:	8b 81 f8 ff ff ff    	mov    eax,DWORD PTR [ecx-0x8]
9f004fb4:	8b 00                	mov    eax,DWORD PTR [eax]
9f004fb6:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179

  if (tmbuf->tm_isdst) {
9f004fb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
9f004fbc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
9f004fbf:	85 c0                	test   eax,eax
9f004fc1:	74 0b                	je     9f004fce <mktime+0x825>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:180
    dst = _dstbias;
9f004fc3:	8b 81 b4 00 00 00    	mov    eax,DWORD PTR [ecx+0xb4]
9f004fc9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
9f004fcc:	eb 07                	jmp    9f004fd5 <mktime+0x82c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  } else {
    dst = 0;
9f004fce:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
9f004fd5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004fd8:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
9f004fdb:	7e 04                	jle    9f004fe1 <mktime+0x838>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
9f004fdd:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:186
  seconds -= dst;
9f004fe1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
9f004fe4:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if (overflow) return (time_t) overflow-2;
9f004fe7:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
9f004feb:	74 08                	je     9f004ff5 <mktime+0x84c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188 (discriminator 1)
9f004fed:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
9f004ff0:	83 e8 02             	sub    eax,0x2
9f004ff3:	eb 03                	jmp    9f004ff8 <mktime+0x84f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:191

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
9f004ff5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192
}
9f004ff8:	83 c4 20             	add    esp,0x20
9f004ffb:	5b                   	pop    ebx
9f004ffc:	5e                   	pop    esi
9f004ffd:	5f                   	pop    edi
9f004ffe:	5d                   	pop    ebp
9f004fff:	c3                   	ret    

9f005000 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
9f005000:	55                   	push   ebp
9f005001:	89 e5                	mov    ebp,esp
9f005003:	56                   	push   esi
9f005004:	53                   	push   ebx
9f005005:	83 ec 14             	sub    esp,0x14
9f005008:	e8 a1 00 00 00       	call   9f0050ae <__x86.get_pc_thunk.ax>
9f00500d:	05 8f 2d 00 00       	add    eax,0x2d8f
9f005012:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
9f005015:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    time_t ticks=0;
9f005018:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:198
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
9f00501f:	b8 71 01 00 00       	mov    eax,0x171
9f005024:	bb 00 00 00 00       	mov    ebx,0x0
9f005029:	b9 00 00 00 00       	mov    ecx,0x0
9f00502e:	ba 00 00 00 00       	mov    edx,0x0
9f005033:	be 00 00 00 00       	mov    esi,0x0
9f005038:	e8 fc ff ff ff       	call   9f005039 <gettime+0x39>
9f00503d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    if (localTime)
9f005040:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
9f005044:	74 11                	je     9f005057 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200
        return localtime_rI(&ticks,time);
9f005046:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f005049:	8d 45 f4             	lea    eax,[ebp-0xc]
9f00504c:	50                   	push   eax
9f00504d:	e8 05 f7 ff ff       	call   9f004757 <localtime_rI>
9f005052:	83 c4 08             	add    esp,0x8
9f005055:	eb 0f                	jmp    9f005066 <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:202
    else
        return gmtime_rI((time_t*)&ticks,time);
9f005057:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00505a:	8d 45 f4             	lea    eax,[ebp-0xc]
9f00505d:	50                   	push   eax
9f00505e:	e8 81 f3 ff ff       	call   9f0043e4 <gmtime_rI>
9f005063:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:203 (discriminator 1)
}
9f005066:	8d 65 f8             	lea    esp,[ebp-0x8]
9f005069:	5b                   	pop    ebx
9f00506a:	5e                   	pop    esi
9f00506b:	5d                   	pop    ebp
9f00506c:	c3                   	ret    

9f00506d <time>:
time():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:206

VISIBLE time_t time (time_t *result)
{
9f00506d:	55                   	push   ebp
9f00506e:	89 e5                	mov    ebp,esp
9f005070:	53                   	push   ebx
9f005071:	83 ec 14             	sub    esp,0x14
9f005074:	e8 39 00 00 00       	call   9f0050b2 <__x86.get_pc_thunk.bx>
9f005079:	81 c3 23 2d 00 00    	add    ebx,0x2d23
/home/yogi/src/os/aproj/libChrisOS/src/time.c:207
    uint32_t ticks = do_syscall0(SYSCALL_GETTIME);
9f00507f:	83 ec 0c             	sub    esp,0xc
9f005082:	68 71 01 00 00       	push   0x171
9f005087:	e8 90 c3 ff ff       	call   9f00141c <do_syscall0>
9f00508c:	83 c4 10             	add    esp,0x10
9f00508f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:208
    memcpyI(result, &ticks, 4);
9f005092:	83 ec 04             	sub    esp,0x4
9f005095:	6a 04                	push   0x4
9f005097:	8d 45 f4             	lea    eax,[ebp-0xc]
9f00509a:	50                   	push   eax
9f00509b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
9f00509e:	e8 25 d7 ff ff       	call   9f0027c8 <memcpyI>
9f0050a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:209
    return ticks;
9f0050a6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:210
9f0050a9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
9f0050ac:	c9                   	leave  
9f0050ad:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

9f0050ae <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
9f0050ae:	8b 04 24             	mov    eax,DWORD PTR [esp]
9f0050b1:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.bx:

9f0050b2 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
9f0050b2:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
9f0050b5:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

9f0050b6 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
9f0050b6:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
9f0050b9:	c3                   	ret    

Disassembly of section .eh_frame:

9f0050bc <.eh_frame>:
9f0050bc:	14 00                	adc    al,0x0
9f0050be:	00 00                	add    BYTE PTR [eax],al
9f0050c0:	00 00                	add    BYTE PTR [eax],al
9f0050c2:	00 00                	add    BYTE PTR [eax],al
9f0050c4:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
9f0050c7:	00 01                	add    BYTE PTR [ecx],al
9f0050c9:	7c 08                	jl     9f0050d3 <__x86.get_pc_thunk.cx+0x1d>
9f0050cb:	01 1b                	add    DWORD PTR [ebx],ebx
9f0050cd:	0c 04                	or     al,0x4
9f0050cf:	04 88                	add    al,0x88
9f0050d1:	01 00                	add    DWORD PTR [eax],eax
9f0050d3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0050d6:	00 00                	add    BYTE PTR [eax],al
9f0050d8:	1c 00                	sbb    al,0x0
9f0050da:	00 00                	add    BYTE PTR [eax],al
9f0050dc:	24 af                	and    al,0xaf
9f0050de:	ff                   	(bad)  
9f0050df:	ff                   	(bad)  
9f0050e0:	38 00                	cmp    BYTE PTR [eax],al
9f0050e2:	00 00                	add    BYTE PTR [eax],al
9f0050e4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0050e7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0050ed:	74 c5                	je     9f0050b4 <__x86.get_pc_thunk.bx+0x2>
9f0050ef:	0c 04                	or     al,0x4
9f0050f1:	04 00                	add    al,0x0
9f0050f3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0050f6:	00 00                	add    BYTE PTR [eax],al
9f0050f8:	3c 00                	cmp    al,0x0
9f0050fa:	00 00                	add    BYTE PTR [eax],al
9f0050fc:	3c af                	cmp    al,0xaf
9f0050fe:	ff                   	(bad)  
9f0050ff:	ff                   	(bad)  
9f005100:	38 00                	cmp    BYTE PTR [eax],al
9f005102:	00 00                	add    BYTE PTR [eax],al
9f005104:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005107:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00510d:	74 c5                	je     9f0050d4 <__x86.get_pc_thunk.cx+0x1e>
9f00510f:	0c 04                	or     al,0x4
9f005111:	04 00                	add    al,0x0
9f005113:	00 10                	add    BYTE PTR [eax],dl
9f005115:	00 00                	add    BYTE PTR [eax],al
9f005117:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
9f00511b:	00 92 ff ff ff 04    	add    BYTE PTR [edx+0x4ffffff],dl
9f005121:	00 00                	add    BYTE PTR [eax],al
9f005123:	00 00                	add    BYTE PTR [eax],al
9f005125:	00 00                	add    BYTE PTR [eax],al
9f005127:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00512a:	00 00                	add    BYTE PTR [eax],al
9f00512c:	70 00                	jo     9f00512e <__x86.get_pc_thunk.cx+0x78>
9f00512e:	00 00                	add    BYTE PTR [eax],al
9f005130:	40                   	inc    eax
9f005131:	af                   	scas   eax,DWORD PTR es:[edi]
9f005132:	ff                   	(bad)  
9f005133:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f005136:	00 00                	add    BYTE PTR [eax],al
9f005138:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00513b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005141:	42                   	inc    edx
9f005142:	86 03                	xchg   BYTE PTR [ebx],al
9f005144:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f005148:	c3                   	ret    
9f005149:	41                   	inc    ecx
9f00514a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00514e:	04 04                	add    al,0x4
9f005150:	24 00                	and    al,0x0
9f005152:	00 00                	add    BYTE PTR [eax],al
9f005154:	98                   	cwde   
9f005155:	00 00                	add    BYTE PTR [eax],al
9f005157:	00 6d af             	add    BYTE PTR [ebp-0x51],ch
9f00515a:	ff                   	(bad)  
9f00515b:	ff 55 00             	call   DWORD PTR [ebp+0x0]
9f00515e:	00 00                	add    BYTE PTR [eax],al
9f005160:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005163:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005169:	42                   	inc    edx
9f00516a:	86 03                	xchg   BYTE PTR [ebx],al
9f00516c:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
9f005170:	c3                   	ret    
9f005171:	41                   	inc    ecx
9f005172:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005176:	04 04                	add    al,0x4
9f005178:	24 00                	and    al,0x0
9f00517a:	00 00                	add    BYTE PTR [eax],al
9f00517c:	c0 00 00             	rol    BYTE PTR [eax],0x0
9f00517f:	00 9c af ff ff 97 00 	add    BYTE PTR [edi+ebp*4+0x97ffff],bl
9f005186:	00 00                	add    BYTE PTR [eax],al
9f005188:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00518b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005191:	42                   	inc    edx
9f005192:	86 03                	xchg   BYTE PTR [ebx],al
9f005194:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f005198:	c3                   	ret    
9f005199:	41                   	inc    ecx
9f00519a:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00519e:	04 04                	add    al,0x4
9f0051a0:	24 00                	and    al,0x0
9f0051a2:	00 00                	add    BYTE PTR [eax],al
9f0051a4:	e8 00 00 00 0b       	call   aa0051a9 <tmbuf+0xaffd329>
9f0051a9:	b0 ff                	mov    al,0xff
9f0051ab:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
9f0051b1:	41                   	inc    ecx
9f0051b2:	0e                   	push   cs
9f0051b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051b9:	42                   	inc    edx
9f0051ba:	86 03                	xchg   BYTE PTR [ebx],al
9f0051bc:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
9f0051c0:	c3                   	ret    
9f0051c1:	41                   	inc    ecx
9f0051c2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0051c6:	04 04                	add    al,0x4
9f0051c8:	10 00                	adc    BYTE PTR [eax],al
9f0051ca:	00 00                	add    BYTE PTR [eax],al
9f0051cc:	10 01                	adc    BYTE PTR [ecx],al
9f0051ce:	00 00                	add    BYTE PTR [eax],al
9f0051d0:	e2 fe                	loop   9f0051d0 <__x86.get_pc_thunk.cx+0x11a>
9f0051d2:	ff                   	(bad)  
9f0051d3:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f0051d6:	00 00                	add    BYTE PTR [eax],al
9f0051d8:	00 00                	add    BYTE PTR [eax],al
9f0051da:	00 00                	add    BYTE PTR [eax],al
9f0051dc:	20 00                	and    BYTE PTR [eax],al
9f0051de:	00 00                	add    BYTE PTR [eax],al
9f0051e0:	24 01                	and    al,0x1
9f0051e2:	00 00                	add    BYTE PTR [eax],al
9f0051e4:	68 b0 ff ff 77       	push   0x77ffffb0
9f0051e9:	00 00                	add    BYTE PTR [eax],al
9f0051eb:	00 00                	add    BYTE PTR [eax],al
9f0051ed:	41                   	inc    ecx
9f0051ee:	0e                   	push   cs
9f0051ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0051f5:	44                   	inc    esp
9f0051f6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0051f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0051fa:	c5 c3 0c             	(bad)  
9f0051fd:	04 04                	add    al,0x4
9f0051ff:	00 20                	add    BYTE PTR [eax],ah
9f005201:	00 00                	add    BYTE PTR [eax],al
9f005203:	00 48 01             	add    BYTE PTR [eax+0x1],cl
9f005206:	00 00                	add    BYTE PTR [eax],al
9f005208:	bb b0 ff ff bb       	mov    ebx,0xbbffffb0
9f00520d:	00 00                	add    BYTE PTR [eax],al
9f00520f:	00 00                	add    BYTE PTR [eax],al
9f005211:	41                   	inc    ecx
9f005212:	0e                   	push   cs
9f005213:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005219:	44                   	inc    esp
9f00521a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00521d:	b3 c5                	mov    bl,0xc5
9f00521f:	c3                   	ret    
9f005220:	0c 04                	or     al,0x4
9f005222:	04 00                	add    al,0x0
9f005224:	20 00                	and    BYTE PTR [eax],al
9f005226:	00 00                	add    BYTE PTR [eax],al
9f005228:	6c                   	ins    BYTE PTR es:[edi],dx
9f005229:	01 00                	add    DWORD PTR [eax],eax
9f00522b:	00 52 b1             	add    BYTE PTR [edx-0x4f],dl
9f00522e:	ff                   	(bad)  
9f00522f:	ff                   	(bad)  
9f005230:	bd 00 00 00 00       	mov    ebp,0x0
9f005235:	41                   	inc    ecx
9f005236:	0e                   	push   cs
9f005237:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00523d:	44                   	inc    esp
9f00523e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005241:	b5 c5                	mov    ch,0xc5
9f005243:	c3                   	ret    
9f005244:	0c 04                	or     al,0x4
9f005246:	04 00                	add    al,0x0
9f005248:	1c 00                	sbb    al,0x0
9f00524a:	00 00                	add    BYTE PTR [eax],al
9f00524c:	90                   	nop
9f00524d:	01 00                	add    DWORD PTR [eax],eax
9f00524f:	00 eb                	add    bl,ch
9f005251:	b1 ff                	mov    cl,0xff
9f005253:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
9f005257:	00 00                	add    BYTE PTR [eax],al
9f005259:	41                   	inc    ecx
9f00525a:	0e                   	push   cs
9f00525b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005261:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
9f005264:	0c 04                	or     al,0x4
9f005266:	04 00                	add    al,0x0
9f005268:	1c 00                	sbb    al,0x0
9f00526a:	00 00                	add    BYTE PTR [eax],al
9f00526c:	b0 01                	mov    al,0x1
9f00526e:	00 00                	add    BYTE PTR [eax],al
9f005270:	27                   	daa    
9f005271:	b2 ff                	mov    dl,0xff
9f005273:	ff 1a                	call   FWORD PTR [edx]
9f005275:	00 00                	add    BYTE PTR [eax],al
9f005277:	00 00                	add    BYTE PTR [eax],al
9f005279:	41                   	inc    ecx
9f00527a:	0e                   	push   cs
9f00527b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005281:	56                   	push   esi
9f005282:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005285:	04 00                	add    al,0x0
9f005287:	00 20                	add    BYTE PTR [eax],ah
9f005289:	00 00                	add    BYTE PTR [eax],al
9f00528b:	00 d0                	add    al,dl
9f00528d:	01 00                	add    DWORD PTR [eax],eax
9f00528f:	00 24 b2             	add    BYTE PTR [edx+esi*4],ah
9f005292:	ff                   	(bad)  
9f005293:	ff                   	(bad)  
9f005294:	ba 00 00 00 00       	mov    edx,0x0
9f005299:	41                   	inc    ecx
9f00529a:	0e                   	push   cs
9f00529b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052a1:	44                   	inc    esp
9f0052a2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0052a5:	b2 c5                	mov    dl,0xc5
9f0052a7:	c3                   	ret    
9f0052a8:	0c 04                	or     al,0x4
9f0052aa:	04 00                	add    al,0x0
9f0052ac:	20 00                	and    BYTE PTR [eax],al
9f0052ae:	00 00                	add    BYTE PTR [eax],al
9f0052b0:	f4                   	hlt    
9f0052b1:	01 00                	add    DWORD PTR [eax],eax
9f0052b3:	00 ba b2 ff ff 5a    	add    BYTE PTR [edx+0x5affffb2],bh
9f0052b9:	00 00                	add    BYTE PTR [eax],al
9f0052bb:	00 00                	add    BYTE PTR [eax],al
9f0052bd:	41                   	inc    ecx
9f0052be:	0e                   	push   cs
9f0052bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052c5:	44                   	inc    esp
9f0052c6:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0052c9:	52                   	push   edx
9f0052ca:	c5 c3 0c             	(bad)  
9f0052cd:	04 04                	add    al,0x4
9f0052cf:	00 20                	add    BYTE PTR [eax],ah
9f0052d1:	00 00                	add    BYTE PTR [eax],al
9f0052d3:	00 18                	add    BYTE PTR [eax],bl
9f0052d5:	02 00                	add    al,BYTE PTR [eax]
9f0052d7:	00 f0                	add    al,dh
9f0052d9:	b2 ff                	mov    dl,0xff
9f0052db:	ff 5a 00             	call   FWORD PTR [edx+0x0]
9f0052de:	00 00                	add    BYTE PTR [eax],al
9f0052e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0052e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0052e9:	44                   	inc    esp
9f0052ea:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0052ed:	52                   	push   edx
9f0052ee:	c5 c3 0c             	(bad)  
9f0052f1:	04 04                	add    al,0x4
9f0052f3:	00 20                	add    BYTE PTR [eax],ah
9f0052f5:	00 00                	add    BYTE PTR [eax],al
9f0052f7:	00 3c 02             	add    BYTE PTR [edx+eax*1],bh
9f0052fa:	00 00                	add    BYTE PTR [eax],al
9f0052fc:	28 b3 ff ff aa 00    	sub    BYTE PTR [ebx+0xaaffff],dh
9f005302:	00 00                	add    BYTE PTR [eax],al
9f005304:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005307:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00530d:	44                   	inc    esp
9f00530e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005311:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
9f005316:	04 00                	add    al,0x0
9f005318:	1c 00                	sbb    al,0x0
9f00531a:	00 00                	add    BYTE PTR [eax],al
9f00531c:	60                   	pusha  
9f00531d:	02 00                	add    al,BYTE PTR [eax]
9f00531f:	00 ae b3 ff ff 23    	add    BYTE PTR [esi+0x23ffffb3],ch
9f005325:	00 00                	add    BYTE PTR [eax],al
9f005327:	00 00                	add    BYTE PTR [eax],al
9f005329:	41                   	inc    ecx
9f00532a:	0e                   	push   cs
9f00532b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005331:	5f                   	pop    edi
9f005332:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005335:	04 00                	add    al,0x0
9f005337:	00 20                	add    BYTE PTR [eax],ah
9f005339:	00 00                	add    BYTE PTR [eax],al
9f00533b:	00 80 02 00 00 b1    	add    BYTE PTR [eax-0x4efffffe],al
9f005341:	b3 ff                	mov    bl,0xff
9f005343:	ff c1                	inc    ecx
9f005345:	01 00                	add    DWORD PTR [eax],eax
9f005347:	00 00                	add    BYTE PTR [eax],al
9f005349:	41                   	inc    ecx
9f00534a:	0e                   	push   cs
9f00534b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005351:	44                   	inc    esp
9f005352:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005355:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f00535a:	04 04                	add    al,0x4
9f00535c:	20 00                	and    BYTE PTR [eax],al
9f00535e:	00 00                	add    BYTE PTR [eax],al
9f005360:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005361:	02 00                	add    al,BYTE PTR [eax]
9f005363:	00 4e b5             	add    BYTE PTR [esi-0x4b],cl
9f005366:	ff                   	(bad)  
9f005367:	ff 2c 00             	jmp    FWORD PTR [eax+eax*1]
9f00536a:	00 00                	add    BYTE PTR [eax],al
9f00536c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00536f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005375:	44                   	inc    esp
9f005376:	83 03 64             	add    DWORD PTR [ebx],0x64
9f005379:	c5 c3 0c             	(bad)  
9f00537c:	04 04                	add    al,0x4
9f00537e:	00 00                	add    BYTE PTR [eax],al
9f005380:	1c 00                	sbb    al,0x0
9f005382:	00 00                	add    BYTE PTR [eax],al
9f005384:	c8 02 00 00          	enter  0x2,0x0
9f005388:	56                   	push   esi
9f005389:	b5 ff                	mov    ch,0xff
9f00538b:	ff 23                	jmp    DWORD PTR [ebx]
9f00538d:	00 00                	add    BYTE PTR [eax],al
9f00538f:	00 00                	add    BYTE PTR [eax],al
9f005391:	41                   	inc    ecx
9f005392:	0e                   	push   cs
9f005393:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005399:	5f                   	pop    edi
9f00539a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00539d:	04 00                	add    al,0x0
9f00539f:	00 20                	add    BYTE PTR [eax],ah
9f0053a1:	00 00                	add    BYTE PTR [eax],al
9f0053a3:	00 e8                	add    al,ch
9f0053a5:	02 00                	add    al,BYTE PTR [eax]
9f0053a7:	00 5c b5 ff          	add    BYTE PTR [ebp+esi*4-0x1],bl
9f0053ab:	ff 31                	push   DWORD PTR [ecx]
9f0053ad:	00 00                	add    BYTE PTR [eax],al
9f0053af:	00 00                	add    BYTE PTR [eax],al
9f0053b1:	41                   	inc    ecx
9f0053b2:	0e                   	push   cs
9f0053b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053b9:	44                   	inc    esp
9f0053ba:	83 03 69             	add    DWORD PTR [ebx],0x69
9f0053bd:	c5 c3 0c             	(bad)  
9f0053c0:	04 04                	add    al,0x4
9f0053c2:	00 00                	add    BYTE PTR [eax],al
9f0053c4:	1c 00                	sbb    al,0x0
9f0053c6:	00 00                	add    BYTE PTR [eax],al
9f0053c8:	0c 03                	or     al,0x3
9f0053ca:	00 00                	add    BYTE PTR [eax],al
9f0053cc:	69 b5 ff ff 26 00 00 	imul   esi,DWORD PTR [ebp+0x26ffff],0x41000000
9f0053d3:	00 00 41 
9f0053d6:	0e                   	push   cs
9f0053d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053dd:	62                   	(bad)  
9f0053de:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0053e1:	04 00                	add    al,0x0
9f0053e3:	00 20                	add    BYTE PTR [eax],ah
9f0053e5:	00 00                	add    BYTE PTR [eax],al
9f0053e7:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
9f0053ea:	00 00                	add    BYTE PTR [eax],al
9f0053ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0053ed:	b5 ff                	mov    ch,0xff
9f0053ef:	ff 2c 00             	jmp    FWORD PTR [eax+eax*1]
9f0053f2:	00 00                	add    BYTE PTR [eax],al
9f0053f4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0053f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0053fd:	44                   	inc    esp
9f0053fe:	83 03 64             	add    DWORD PTR [ebx],0x64
9f005401:	c5 c3 0c             	(bad)  
9f005404:	04 04                	add    al,0x4
9f005406:	00 00                	add    BYTE PTR [eax],al
9f005408:	1c 00                	sbb    al,0x0
9f00540a:	00 00                	add    BYTE PTR [eax],al
9f00540c:	50                   	push   eax
9f00540d:	03 00                	add    eax,DWORD PTR [eax]
9f00540f:	00 77 b5             	add    BYTE PTR [edi-0x4b],dh
9f005412:	ff                   	(bad)  
9f005413:	ff 23                	jmp    DWORD PTR [ebx]
9f005415:	00 00                	add    BYTE PTR [eax],al
9f005417:	00 00                	add    BYTE PTR [eax],al
9f005419:	41                   	inc    ecx
9f00541a:	0e                   	push   cs
9f00541b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005421:	5f                   	pop    edi
9f005422:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005425:	04 00                	add    al,0x0
9f005427:	00 20                	add    BYTE PTR [eax],ah
9f005429:	00 00                	add    BYTE PTR [eax],al
9f00542b:	00 70 03             	add    BYTE PTR [eax+0x3],dh
9f00542e:	00 00                	add    BYTE PTR [eax],al
9f005430:	7a b5                	jp     9f0053e7 <__x86.get_pc_thunk.cx+0x331>
9f005432:	ff                   	(bad)  
9f005433:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f005436:	00 00                	add    BYTE PTR [eax],al
9f005438:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00543b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005441:	44                   	inc    esp
9f005442:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005445:	51                   	push   ecx
9f005446:	c5 c3 0c             	(bad)  
9f005449:	04 04                	add    al,0x4
9f00544b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00544e:	00 00                	add    BYTE PTR [eax],al
9f005450:	94                   	xchg   esp,eax
9f005451:	03 00                	add    eax,DWORD PTR [eax]
9f005453:	00 af b5 ff ff 93    	add    BYTE PTR [edi-0x6c00004b],ch
9f005459:	00 00                	add    BYTE PTR [eax],al
9f00545b:	00 00                	add    BYTE PTR [eax],al
9f00545d:	41                   	inc    ecx
9f00545e:	0e                   	push   cs
9f00545f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005465:	45                   	inc    ebp
9f005466:	86 03                	xchg   BYTE PTR [ebx],al
9f005468:	83 04 02 88          	add    DWORD PTR [edx+eax*1],0xffffff88
9f00546c:	c3                   	ret    
9f00546d:	41                   	inc    ecx
9f00546e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005472:	04 04                	add    al,0x4
9f005474:	20 00                	and    BYTE PTR [eax],al
9f005476:	00 00                	add    BYTE PTR [eax],al
9f005478:	bc 03 00 00 1a       	mov    esp,0x1a000003
9f00547d:	b6 ff                	mov    dh,0xff
9f00547f:	ff 2a                	jmp    FWORD PTR [edx]
9f005481:	00 00                	add    BYTE PTR [eax],al
9f005483:	00 00                	add    BYTE PTR [eax],al
9f005485:	41                   	inc    ecx
9f005486:	0e                   	push   cs
9f005487:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00548d:	44                   	inc    esp
9f00548e:	83 03 62             	add    DWORD PTR [ebx],0x62
9f005491:	c5 c3 0c             	(bad)  
9f005494:	04 04                	add    al,0x4
9f005496:	00 00                	add    BYTE PTR [eax],al
9f005498:	1c 00                	sbb    al,0x0
9f00549a:	00 00                	add    BYTE PTR [eax],al
9f00549c:	e0 03                	loopne 9f0054a1 <__x86.get_pc_thunk.cx+0x3eb>
9f00549e:	00 00                	add    BYTE PTR [eax],al
9f0054a0:	20 b6 ff ff 20 00    	and    BYTE PTR [esi+0x20ffff],dh
9f0054a6:	00 00                	add    BYTE PTR [eax],al
9f0054a8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0054ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054b1:	5c                   	pop    esp
9f0054b2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0054b5:	04 00                	add    al,0x0
9f0054b7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0054ba:	00 00                	add    BYTE PTR [eax],al
9f0054bc:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f0054bf:	00 20                	add    BYTE PTR [eax],ah
9f0054c1:	b6 ff                	mov    dh,0xff
9f0054c3:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f0054c9:	41                   	inc    ecx
9f0054ca:	0e                   	push   cs
9f0054cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054d1:	42                   	inc    edx
9f0054d2:	86 03                	xchg   BYTE PTR [ebx],al
9f0054d4:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f0054db:	c5 
9f0054dc:	0c 04                	or     al,0x4
9f0054de:	04 00                	add    al,0x0
9f0054e0:	1c 00                	sbb    al,0x0
9f0054e2:	00 00                	add    BYTE PTR [eax],al
9f0054e4:	28 04 00             	sub    BYTE PTR [eax+eax*1],al
9f0054e7:	00 2d b6 ff ff 26    	add    BYTE PTR ds:0x26ffffb6,ch
9f0054ed:	00 00                	add    BYTE PTR [eax],al
9f0054ef:	00 00                	add    BYTE PTR [eax],al
9f0054f1:	41                   	inc    ecx
9f0054f2:	0e                   	push   cs
9f0054f3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0054f9:	62                   	(bad)  
9f0054fa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0054fd:	04 00                	add    al,0x0
9f0054ff:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005502:	00 00                	add    BYTE PTR [eax],al
9f005504:	48                   	dec    eax
9f005505:	04 00                	add    al,0x0
9f005507:	00 33                	add    BYTE PTR [ebx],dh
9f005509:	b6 ff                	mov    dh,0xff
9f00550b:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f005511:	41                   	inc    ecx
9f005512:	0e                   	push   cs
9f005513:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005519:	42                   	inc    edx
9f00551a:	86 03                	xchg   BYTE PTR [ebx],al
9f00551c:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
9f005523:	c5 
9f005524:	0c 04                	or     al,0x4
9f005526:	04 00                	add    al,0x0
9f005528:	1c 00                	sbb    al,0x0
9f00552a:	00 00                	add    BYTE PTR [eax],al
9f00552c:	70 04                	jo     9f005532 <__x86.get_pc_thunk.cx+0x47c>
9f00552e:	00 00                	add    BYTE PTR [eax],al
9f005530:	40                   	inc    eax
9f005531:	b6 ff                	mov    dh,0xff
9f005533:	ff 26                	jmp    DWORD PTR [esi]
9f005535:	00 00                	add    BYTE PTR [eax],al
9f005537:	00 00                	add    BYTE PTR [eax],al
9f005539:	41                   	inc    ecx
9f00553a:	0e                   	push   cs
9f00553b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005541:	62                   	(bad)  
9f005542:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005545:	04 00                	add    al,0x0
9f005547:	00 20                	add    BYTE PTR [eax],ah
9f005549:	00 00                	add    BYTE PTR [eax],al
9f00554b:	00 90 04 00 00 46    	add    BYTE PTR [eax+0x46000004],dl
9f005551:	b6 ff                	mov    dh,0xff
9f005553:	ff 2e                	jmp    FWORD PTR [esi]
9f005555:	00 00                	add    BYTE PTR [eax],al
9f005557:	00 00                	add    BYTE PTR [eax],al
9f005559:	41                   	inc    ecx
9f00555a:	0e                   	push   cs
9f00555b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005561:	44                   	inc    esp
9f005562:	83 03 66             	add    DWORD PTR [ebx],0x66
9f005565:	c5 c3 0c             	(bad)  
9f005568:	04 04                	add    al,0x4
9f00556a:	00 00                	add    BYTE PTR [eax],al
9f00556c:	1c 00                	sbb    al,0x0
9f00556e:	00 00                	add    BYTE PTR [eax],al
9f005570:	b4 04                	mov    ah,0x4
9f005572:	00 00                	add    BYTE PTR [eax],al
9f005574:	50                   	push   eax
9f005575:	b6 ff                	mov    dh,0xff
9f005577:	ff 26                	jmp    DWORD PTR [esi]
9f005579:	00 00                	add    BYTE PTR [eax],al
9f00557b:	00 00                	add    BYTE PTR [eax],al
9f00557d:	41                   	inc    ecx
9f00557e:	0e                   	push   cs
9f00557f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005585:	62                   	(bad)  
9f005586:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005589:	04 00                	add    al,0x0
9f00558b:	00 20                	add    BYTE PTR [eax],ah
9f00558d:	00 00                	add    BYTE PTR [eax],al
9f00558f:	00 d4                	add    ah,dl
9f005591:	04 00                	add    al,0x0
9f005593:	00 56 b6             	add    BYTE PTR [esi-0x4a],dl
9f005596:	ff                   	(bad)  
9f005597:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
9f00559d:	41                   	inc    ecx
9f00559e:	0e                   	push   cs
9f00559f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055a5:	44                   	inc    esp
9f0055a6:	83 03 65             	add    DWORD PTR [ebx],0x65
9f0055a9:	c5 c3 0c             	(bad)  
9f0055ac:	04 04                	add    al,0x4
9f0055ae:	00 00                	add    BYTE PTR [eax],al
9f0055b0:	1c 00                	sbb    al,0x0
9f0055b2:	00 00                	add    BYTE PTR [eax],al
9f0055b4:	f8                   	clc    
9f0055b5:	04 00                	add    al,0x0
9f0055b7:	00 5f b6             	add    BYTE PTR [edi-0x4a],bl
9f0055ba:	ff                   	(bad)  
9f0055bb:	ff 23                	jmp    DWORD PTR [ebx]
9f0055bd:	00 00                	add    BYTE PTR [eax],al
9f0055bf:	00 00                	add    BYTE PTR [eax],al
9f0055c1:	41                   	inc    ecx
9f0055c2:	0e                   	push   cs
9f0055c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055c9:	5f                   	pop    edi
9f0055ca:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0055cd:	04 00                	add    al,0x0
9f0055cf:	00 20                	add    BYTE PTR [eax],ah
9f0055d1:	00 00                	add    BYTE PTR [eax],al
9f0055d3:	00 18                	add    BYTE PTR [eax],bl
9f0055d5:	05 00 00 62 b6       	add    eax,0xb6620000
9f0055da:	ff                   	(bad)  
9f0055db:	ff 29                	jmp    FWORD PTR [ecx]
9f0055dd:	03 00                	add    eax,DWORD PTR [eax]
9f0055df:	00 00                	add    BYTE PTR [eax],al
9f0055e1:	41                   	inc    ecx
9f0055e2:	0e                   	push   cs
9f0055e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0055e9:	44                   	inc    esp
9f0055ea:	83 03 03             	add    DWORD PTR [ebx],0x3
9f0055ed:	21 03                	and    DWORD PTR [ebx],eax
9f0055ef:	c5 c3 0c             	(bad)  
9f0055f2:	04 04                	add    al,0x4
9f0055f4:	20 00                	and    BYTE PTR [eax],al
9f0055f6:	00 00                	add    BYTE PTR [eax],al
9f0055f8:	3c 05                	cmp    al,0x5
9f0055fa:	00 00                	add    BYTE PTR [eax],al
9f0055fc:	67 b9 ff ff 29 00    	addr16 mov ecx,0x29ffff
9f005602:	00 00                	add    BYTE PTR [eax],al
9f005604:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005607:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00560d:	44                   	inc    esp
9f00560e:	83 03 61             	add    DWORD PTR [ebx],0x61
9f005611:	c5 c3 0c             	(bad)  
9f005614:	04 04                	add    al,0x4
9f005616:	00 00                	add    BYTE PTR [eax],al
9f005618:	1c 00                	sbb    al,0x0
9f00561a:	00 00                	add    BYTE PTR [eax],al
9f00561c:	60                   	pusha  
9f00561d:	05 00 00 6c b9       	add    eax,0xb96c0000
9f005622:	ff                   	(bad)  
9f005623:	ff 20                	jmp    DWORD PTR [eax]
9f005625:	00 00                	add    BYTE PTR [eax],al
9f005627:	00 00                	add    BYTE PTR [eax],al
9f005629:	41                   	inc    ecx
9f00562a:	0e                   	push   cs
9f00562b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005631:	5c                   	pop    esp
9f005632:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005635:	04 00                	add    al,0x0
9f005637:	00 20                	add    BYTE PTR [eax],ah
9f005639:	00 00                	add    BYTE PTR [eax],al
9f00563b:	00 80 05 00 00 6c    	add    BYTE PTR [eax+0x6c000005],al
9f005641:	b9 ff ff c1 01       	mov    ecx,0x1c1ffff
9f005646:	00 00                	add    BYTE PTR [eax],al
9f005648:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00564b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005651:	44                   	inc    esp
9f005652:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005655:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
9f00565a:	04 04                	add    al,0x4
9f00565c:	1c 00                	sbb    al,0x0
9f00565e:	00 00                	add    BYTE PTR [eax],al
9f005660:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005661:	05 00 00 09 bb       	add    eax,0xbb090000
9f005666:	ff                   	(bad)  
9f005667:	ff 26                	jmp    DWORD PTR [esi]
9f005669:	00 00                	add    BYTE PTR [eax],al
9f00566b:	00 00                	add    BYTE PTR [eax],al
9f00566d:	41                   	inc    ecx
9f00566e:	0e                   	push   cs
9f00566f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005675:	62                   	(bad)  
9f005676:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005679:	04 00                	add    al,0x0
9f00567b:	00 20                	add    BYTE PTR [eax],ah
9f00567d:	00 00                	add    BYTE PTR [eax],al
9f00567f:	00 c4                	add    ah,al
9f005681:	05 00 00 0f bb       	add    eax,0xbb0f0000
9f005686:	ff                   	(bad)  
9f005687:	ff 29                	jmp    FWORD PTR [ecx]
9f005689:	00 00                	add    BYTE PTR [eax],al
9f00568b:	00 00                	add    BYTE PTR [eax],al
9f00568d:	41                   	inc    ecx
9f00568e:	0e                   	push   cs
9f00568f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005695:	44                   	inc    esp
9f005696:	83 03 61             	add    DWORD PTR [ebx],0x61
9f005699:	c5 c3 0c             	(bad)  
9f00569c:	04 04                	add    al,0x4
9f00569e:	00 00                	add    BYTE PTR [eax],al
9f0056a0:	20 00                	and    BYTE PTR [eax],al
9f0056a2:	00 00                	add    BYTE PTR [eax],al
9f0056a4:	e8 05 00 00 14       	call   b30056ae <tmbuf+0x13ffd82e>
9f0056a9:	bb ff ff 26 00       	mov    ebx,0x26ffff
9f0056ae:	00 00                	add    BYTE PTR [eax],al
9f0056b0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056b9:	41                   	inc    ecx
9f0056ba:	83 03 60             	add    DWORD PTR [ebx],0x60
9f0056bd:	c3                   	ret    
9f0056be:	41                   	inc    ecx
9f0056bf:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0056c2:	04 00                	add    al,0x0
9f0056c4:	20 00                	and    BYTE PTR [eax],al
9f0056c6:	00 00                	add    BYTE PTR [eax],al
9f0056c8:	0c 06                	or     al,0x6
9f0056ca:	00 00                	add    BYTE PTR [eax],al
9f0056cc:	16                   	push   ss
9f0056cd:	bb ff ff 43 00       	mov    ebx,0x43ffff
9f0056d2:	00 00                	add    BYTE PTR [eax],al
9f0056d4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0056d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0056dd:	44                   	inc    esp
9f0056de:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f0056e1:	c3                   	ret    
9f0056e2:	41                   	inc    ecx
9f0056e3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0056e6:	04 00                	add    al,0x0
9f0056e8:	20 00                	and    BYTE PTR [eax],al
9f0056ea:	00 00                	add    BYTE PTR [eax],al
9f0056ec:	30 06                	xor    BYTE PTR [esi],al
9f0056ee:	00 00                	add    BYTE PTR [eax],al
9f0056f0:	35 bb ff ff 43       	xor    eax,0x43ffffbb
9f0056f5:	00 00                	add    BYTE PTR [eax],al
9f0056f7:	00 00                	add    BYTE PTR [eax],al
9f0056f9:	41                   	inc    ecx
9f0056fa:	0e                   	push   cs
9f0056fb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005701:	44                   	inc    esp
9f005702:	83 03 7a             	add    DWORD PTR [ebx],0x7a
9f005705:	c3                   	ret    
9f005706:	41                   	inc    ecx
9f005707:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00570a:	04 00                	add    al,0x0
9f00570c:	20 00                	and    BYTE PTR [eax],al
9f00570e:	00 00                	add    BYTE PTR [eax],al
9f005710:	54                   	push   esp
9f005711:	06                   	push   es
9f005712:	00 00                	add    BYTE PTR [eax],al
9f005714:	54                   	push   esp
9f005715:	bb ff ff bd 00       	mov    ebx,0xbdffff
9f00571a:	00 00                	add    BYTE PTR [eax],al
9f00571c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00571f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005725:	44                   	inc    esp
9f005726:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005729:	b5 c5                	mov    ch,0xc5
9f00572b:	c3                   	ret    
9f00572c:	0c 04                	or     al,0x4
9f00572e:	04 00                	add    al,0x0
9f005730:	24 00                	and    al,0x0
9f005732:	00 00                	add    BYTE PTR [eax],al
9f005734:	78 06                	js     9f00573c <__x86.get_pc_thunk.cx+0x686>
9f005736:	00 00                	add    BYTE PTR [eax],al
9f005738:	f0 bb ff ff 3a 00    	lock mov ebx,0x3affff
9f00573e:	00 00                	add    BYTE PTR [eax],al
9f005740:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005743:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005749:	45                   	inc    ebp
9f00574a:	86 03                	xchg   BYTE PTR [ebx],al
9f00574c:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
9f005750:	41                   	inc    ecx
9f005751:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005755:	04 04                	add    al,0x4
9f005757:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00575a:	00 00                	add    BYTE PTR [eax],al
9f00575c:	a0 06 00 00 02       	mov    al,ds:0x2000006
9f005761:	bc ff ff 3c 00       	mov    esp,0x3cffff
9f005766:	00 00                	add    BYTE PTR [eax],al
9f005768:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00576b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005771:	45                   	inc    ebp
9f005772:	86 03                	xchg   BYTE PTR [ebx],al
9f005774:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
9f005778:	41                   	inc    ecx
9f005779:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00577d:	04 04                	add    al,0x4
9f00577f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005782:	00 00                	add    BYTE PTR [eax],al
9f005784:	c8 06 00 00          	enter  0x6,0x0
9f005788:	16                   	push   ss
9f005789:	bc ff ff 3e 00       	mov    esp,0x3effff
9f00578e:	00 00                	add    BYTE PTR [eax],al
9f005790:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005793:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005799:	45                   	inc    ebp
9f00579a:	86 03                	xchg   BYTE PTR [ebx],al
9f00579c:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
9f0057a0:	41                   	inc    ecx
9f0057a1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0057a5:	04 04                	add    al,0x4
9f0057a7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0057aa:	00 00                	add    BYTE PTR [eax],al
9f0057ac:	f0 06                	lock push es
9f0057ae:	00 00                	add    BYTE PTR [eax],al
9f0057b0:	2c bc                	sub    al,0xbc
9f0057b2:	ff                   	(bad)  
9f0057b3:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f0057b6:	00 00                	add    BYTE PTR [eax],al
9f0057b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0057bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057c1:	45                   	inc    ebp
9f0057c2:	86 03                	xchg   BYTE PTR [ebx],al
9f0057c4:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
9f0057cb:	c5 
9f0057cc:	0c 04                	or     al,0x4
9f0057ce:	04 00                	add    al,0x0
9f0057d0:	24 00                	and    al,0x0
9f0057d2:	00 00                	add    BYTE PTR [eax],al
9f0057d4:	18 07                	sbb    BYTE PTR [edi],al
9f0057d6:	00 00                	add    BYTE PTR [eax],al
9f0057d8:	44                   	inc    esp
9f0057d9:	bc ff ff 42 00       	mov    esp,0x42ffff
9f0057de:	00 00                	add    BYTE PTR [eax],al
9f0057e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0057e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0057e9:	45                   	inc    ebp
9f0057ea:	86 03                	xchg   BYTE PTR [ebx],al
9f0057ec:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
9f0057f0:	41                   	inc    ecx
9f0057f1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0057f5:	04 04                	add    al,0x4
9f0057f7:	00 20                	add    BYTE PTR [eax],ah
9f0057f9:	00 00                	add    BYTE PTR [eax],al
9f0057fb:	00 40 07             	add    BYTE PTR [eax+0x7],al
9f0057fe:	00 00                	add    BYTE PTR [eax],al
9f005800:	5e                   	pop    esi
9f005801:	bc ff ff cb 00       	mov    esp,0xcbffff
9f005806:	00 00                	add    BYTE PTR [eax],al
9f005808:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00580b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005811:	44                   	inc    esp
9f005812:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005815:	c3                   	ret    
9f005816:	c5 c3 0c             	(bad)  
9f005819:	04 04                	add    al,0x4
9f00581b:	00 20                	add    BYTE PTR [eax],ah
9f00581d:	00 00                	add    BYTE PTR [eax],al
9f00581f:	00 64 07 00          	add    BYTE PTR [edi+eax*1+0x0],ah
9f005823:	00 05 bd ff ff 23    	add    BYTE PTR ds:0x23ffffbd,al
9f005829:	00 00                	add    BYTE PTR [eax],al
9f00582b:	00 00                	add    BYTE PTR [eax],al
9f00582d:	41                   	inc    ecx
9f00582e:	0e                   	push   cs
9f00582f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005835:	44                   	inc    esp
9f005836:	83 03 5a             	add    DWORD PTR [ebx],0x5a
9f005839:	c3                   	ret    
9f00583a:	41                   	inc    ecx
9f00583b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00583e:	04 00                	add    al,0x0
9f005840:	20 00                	and    BYTE PTR [eax],al
9f005842:	00 00                	add    BYTE PTR [eax],al
9f005844:	88 07                	mov    BYTE PTR [edi],al
9f005846:	00 00                	add    BYTE PTR [eax],al
9f005848:	04 bd                	add    al,0xbd
9f00584a:	ff                   	(bad)  
9f00584b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f00584e:	00 00                	add    BYTE PTR [eax],al
9f005850:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005853:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005859:	44                   	inc    esp
9f00585a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f00585d:	51                   	push   ecx
9f00585e:	c5 c3 0c             	(bad)  
9f005861:	04 04                	add    al,0x4
9f005863:	00 20                	add    BYTE PTR [eax],ah
9f005865:	00 00                	add    BYTE PTR [eax],al
9f005867:	00 ac 07 00 00 39 bd 	add    BYTE PTR [edi+eax*1-0x42c70000],ch
9f00586e:	ff                   	(bad)  
9f00586f:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
9f005873:	00 00                	add    BYTE PTR [eax],al
9f005875:	41                   	inc    ecx
9f005876:	0e                   	push   cs
9f005877:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00587d:	44                   	inc    esp
9f00587e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005881:	4c                   	dec    esp
9f005882:	c5 c3 0c             	(bad)  
9f005885:	04 04                	add    al,0x4
9f005887:	00 20                	add    BYTE PTR [eax],ah
9f005889:	00 00                	add    BYTE PTR [eax],al
9f00588b:	00 d0                	add    al,dl
9f00588d:	07                   	pop    es
9f00588e:	00 00                	add    BYTE PTR [eax],al
9f005890:	69 bd ff ff 54 00 00 	imul   edi,DWORD PTR [ebp+0x54ffff],0x41000000
9f005897:	00 00 41 
9f00589a:	0e                   	push   cs
9f00589b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058a1:	44                   	inc    esp
9f0058a2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f0058a5:	4c                   	dec    esp
9f0058a6:	c5 c3 0c             	(bad)  
9f0058a9:	04 04                	add    al,0x4
9f0058ab:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0058ae:	00 00                	add    BYTE PTR [eax],al
9f0058b0:	f4                   	hlt    
9f0058b1:	07                   	pop    es
9f0058b2:	00 00                	add    BYTE PTR [eax],al
9f0058b4:	99                   	cdq    
9f0058b5:	bd ff ff 34 00       	mov    ebp,0x34ffff
9f0058ba:	00 00                	add    BYTE PTR [eax],al
9f0058bc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0058bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058c5:	70 c5                	jo     9f00588c <__x86.get_pc_thunk.cx+0x7d6>
9f0058c7:	0c 04                	or     al,0x4
9f0058c9:	04 00                	add    al,0x0
9f0058cb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0058ce:	00 00                	add    BYTE PTR [eax],al
9f0058d0:	14 08                	adc    al,0x8
9f0058d2:	00 00                	add    BYTE PTR [eax],al
9f0058d4:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f0058d5:	bd ff ff 37 00       	mov    ebp,0x37ffff
9f0058da:	00 00                	add    BYTE PTR [eax],al
9f0058dc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0058df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0058e5:	73 c5                	jae    9f0058ac <__x86.get_pc_thunk.cx+0x7f6>
9f0058e7:	0c 04                	or     al,0x4
9f0058e9:	04 00                	add    al,0x0
9f0058eb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0058ee:	00 00                	add    BYTE PTR [eax],al
9f0058f0:	34 08                	xor    al,0x8
9f0058f2:	00 00                	add    BYTE PTR [eax],al
9f0058f4:	c4 bd ff ff 37 00    	les    edi,FWORD PTR [ebp+0x37ffff]
9f0058fa:	00 00                	add    BYTE PTR [eax],al
9f0058fc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0058ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005905:	73 c5                	jae    9f0058cc <__x86.get_pc_thunk.cx+0x816>
9f005907:	0c 04                	or     al,0x4
9f005909:	04 00                	add    al,0x0
9f00590b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00590e:	00 00                	add    BYTE PTR [eax],al
9f005910:	54                   	push   esp
9f005911:	08 00                	or     BYTE PTR [eax],al
9f005913:	00 db                	add    bl,bl
9f005915:	bd ff ff 88 00       	mov    ebp,0x88ffff
9f00591a:	00 00                	add    BYTE PTR [eax],al
9f00591c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00591f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005925:	45                   	inc    ebp
9f005926:	86 03                	xchg   BYTE PTR [ebx],al
9f005928:	83 04 02 7d          	add    DWORD PTR [edx+eax*1],0x7d
9f00592c:	c3                   	ret    
9f00592d:	41                   	inc    ecx
9f00592e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005932:	04 04                	add    al,0x4
9f005934:	24 00                	and    al,0x0
9f005936:	00 00                	add    BYTE PTR [eax],al
9f005938:	7c 08                	jl     9f005942 <__x86.get_pc_thunk.cx+0x88c>
9f00593a:	00 00                	add    BYTE PTR [eax],al
9f00593c:	3b be ff ff 70 00    	cmp    edi,DWORD PTR [esi+0x70ffff]
9f005942:	00 00                	add    BYTE PTR [eax],al
9f005944:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005947:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00594d:	45                   	inc    ebp
9f00594e:	86 03                	xchg   BYTE PTR [ebx],al
9f005950:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f005954:	c3                   	ret    
9f005955:	41                   	inc    ecx
9f005956:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00595a:	04 04                	add    al,0x4
9f00595c:	24 00                	and    al,0x0
9f00595e:	00 00                	add    BYTE PTR [eax],al
9f005960:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f005961:	08 00                	or     BYTE PTR [eax],al
9f005963:	00 83 be ff ff 70    	add    BYTE PTR [ebx+0x70ffffbe],al
9f005969:	00 00                	add    BYTE PTR [eax],al
9f00596b:	00 00                	add    BYTE PTR [eax],al
9f00596d:	41                   	inc    ecx
9f00596e:	0e                   	push   cs
9f00596f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005975:	45                   	inc    ebp
9f005976:	86 03                	xchg   BYTE PTR [ebx],al
9f005978:	83 04 02 65          	add    DWORD PTR [edx+eax*1],0x65
9f00597c:	c3                   	ret    
9f00597d:	41                   	inc    ecx
9f00597e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005982:	04 04                	add    al,0x4
9f005984:	1c 00                	sbb    al,0x0
9f005986:	00 00                	add    BYTE PTR [eax],al
9f005988:	cc                   	int3   
9f005989:	08 00                	or     BYTE PTR [eax],al
9f00598b:	00 cb                	add    bl,cl
9f00598d:	be ff ff 1d 00       	mov    esi,0x1dffff
9f005992:	00 00                	add    BYTE PTR [eax],al
9f005994:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005997:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00599d:	59                   	pop    ecx
9f00599e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0059a1:	04 00                	add    al,0x0
9f0059a3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0059a6:	00 00                	add    BYTE PTR [eax],al
9f0059a8:	ec                   	in     al,dx
9f0059a9:	08 00                	or     BYTE PTR [eax],al
9f0059ab:	00 c8                	add    al,cl
9f0059ad:	be ff ff 29 00       	mov    esi,0x29ffff
9f0059b2:	00 00                	add    BYTE PTR [eax],al
9f0059b4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0059b7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059bd:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
9f0059c1:	04 00                	add    al,0x0
9f0059c3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0059c6:	00 00                	add    BYTE PTR [eax],al
9f0059c8:	0c 09                	or     al,0x9
9f0059ca:	00 00                	add    BYTE PTR [eax],al
9f0059cc:	d1 be ff ff 23 00    	sar    DWORD PTR [esi+0x23ffff],1
9f0059d2:	00 00                	add    BYTE PTR [eax],al
9f0059d4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0059d7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059dd:	5f                   	pop    edi
9f0059de:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0059e1:	04 00                	add    al,0x0
9f0059e3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0059e6:	00 00                	add    BYTE PTR [eax],al
9f0059e8:	2c 09                	sub    al,0x9
9f0059ea:	00 00                	add    BYTE PTR [eax],al
9f0059ec:	d4 be                	aam    0xbe
9f0059ee:	ff                   	(bad)  
9f0059ef:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
9f0059f3:	00 00                	add    BYTE PTR [eax],al
9f0059f5:	41                   	inc    ecx
9f0059f6:	0e                   	push   cs
9f0059f7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0059fd:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
9f005a00:	0c 04                	or     al,0x4
9f005a02:	04 00                	add    al,0x0
9f005a04:	20 00                	and    BYTE PTR [eax],al
9f005a06:	00 00                	add    BYTE PTR [eax],al
9f005a08:	4c                   	dec    esp
9f005a09:	09 00                	or     DWORD PTR [eax],eax
9f005a0b:	00 00                	add    BYTE PTR [eax],al
9f005a0d:	bf ff ff f4 01       	mov    edi,0x1f4ffff
9f005a12:	00 00                	add    BYTE PTR [eax],al
9f005a14:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005a17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a1d:	44                   	inc    esp
9f005a1e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005a21:	ec                   	in     al,dx
9f005a22:	01 c5                	add    ebp,eax
9f005a24:	c3                   	ret    
9f005a25:	0c 04                	or     al,0x4
9f005a27:	04 1c                	add    al,0x1c
9f005a29:	00 00                	add    BYTE PTR [eax],al
9f005a2b:	00 70 09             	add    BYTE PTR [eax+0x9],dh
9f005a2e:	00 00                	add    BYTE PTR [eax],al
9f005a30:	d0 c0                	rol    al,1
9f005a32:	ff                   	(bad)  
9f005a33:	ff 4f 00             	dec    DWORD PTR [edi+0x0]
9f005a36:	00 00                	add    BYTE PTR [eax],al
9f005a38:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005a3b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a41:	02 4b c5             	add    cl,BYTE PTR [ebx-0x3b]
9f005a44:	0c 04                	or     al,0x4
9f005a46:	04 00                	add    al,0x0
9f005a48:	1c 00                	sbb    al,0x0
9f005a4a:	00 00                	add    BYTE PTR [eax],al
9f005a4c:	90                   	nop
9f005a4d:	09 00                	or     DWORD PTR [eax],eax
9f005a4f:	00 ff                	add    bh,bh
9f005a51:	c0 ff ff             	sar    bh,0xff
9f005a54:	1c 00                	sbb    al,0x0
9f005a56:	00 00                	add    BYTE PTR [eax],al
9f005a58:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005a5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a61:	58                   	pop    eax
9f005a62:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a65:	04 00                	add    al,0x0
9f005a67:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a6a:	00 00                	add    BYTE PTR [eax],al
9f005a6c:	b0 09                	mov    al,0x9
9f005a6e:	00 00                	add    BYTE PTR [eax],al
9f005a70:	fb                   	sti    
9f005a71:	c0 ff ff             	sar    bh,0xff
9f005a74:	20 00                	and    BYTE PTR [eax],al
9f005a76:	00 00                	add    BYTE PTR [eax],al
9f005a78:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005a7b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005a81:	5c                   	pop    esp
9f005a82:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005a85:	04 00                	add    al,0x0
9f005a87:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005a8a:	00 00                	add    BYTE PTR [eax],al
9f005a8c:	d0 09                	ror    BYTE PTR [ecx],1
9f005a8e:	00 00                	add    BYTE PTR [eax],al
9f005a90:	fb                   	sti    
9f005a91:	c0 ff ff             	sar    bh,0xff
9f005a94:	20 00                	and    BYTE PTR [eax],al
9f005a96:	00 00                	add    BYTE PTR [eax],al
9f005a98:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005a9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005aa1:	5c                   	pop    esp
9f005aa2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005aa5:	04 00                	add    al,0x0
9f005aa7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005aaa:	00 00                	add    BYTE PTR [eax],al
9f005aac:	f0 09 00             	lock or DWORD PTR [eax],eax
9f005aaf:	00 fb                	add    bl,bh
9f005ab1:	c0 ff ff             	sar    bh,0xff
9f005ab4:	44                   	inc    esp
9f005ab5:	01 00                	add    DWORD PTR [eax],eax
9f005ab7:	00 00                	add    BYTE PTR [eax],al
9f005ab9:	41                   	inc    ecx
9f005aba:	0e                   	push   cs
9f005abb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ac1:	03 40 01             	add    eax,DWORD PTR [eax+0x1]
9f005ac4:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ac7:	04 1c                	add    al,0x1c
9f005ac9:	00 00                	add    BYTE PTR [eax],al
9f005acb:	00 10                	add    BYTE PTR [eax],dl
9f005acd:	0a 00                	or     al,BYTE PTR [eax]
9f005acf:	00 1f                	add    BYTE PTR [edi],bl
9f005ad1:	c2 ff ff             	ret    0xffff
9f005ad4:	20 00                	and    BYTE PTR [eax],al
9f005ad6:	00 00                	add    BYTE PTR [eax],al
9f005ad8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005adb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ae1:	5c                   	pop    esp
9f005ae2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ae5:	04 00                	add    al,0x0
9f005ae7:	00 28                	add    BYTE PTR [eax],ch
9f005ae9:	00 00                	add    BYTE PTR [eax],al
9f005aeb:	00 30                	add    BYTE PTR [eax],dh
9f005aed:	0a 00                	or     al,BYTE PTR [eax]
9f005aef:	00 1f                	add    BYTE PTR [edi],bl
9f005af1:	c2 ff ff             	ret    0xffff
9f005af4:	fd                   	std    
9f005af5:	02 00                	add    al,BYTE PTR [eax]
9f005af7:	00 00                	add    BYTE PTR [eax],al
9f005af9:	41                   	inc    ecx
9f005afa:	0e                   	push   cs
9f005afb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b01:	48                   	dec    eax
9f005b02:	86 03                	xchg   BYTE PTR [ebx],al
9f005b04:	83 04 03 ef          	add    DWORD PTR [ebx+eax*1],0xffffffef
9f005b08:	02 c3                	add    al,bl
9f005b0a:	41                   	inc    ecx
9f005b0b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005b0f:	04 04                	add    al,0x4
9f005b11:	00 00                	add    BYTE PTR [eax],al
9f005b13:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005b16:	00 00                	add    BYTE PTR [eax],al
9f005b18:	5c                   	pop    esp
9f005b19:	0a 00                	or     al,BYTE PTR [eax]
9f005b1b:	00 f0                	add    al,dh
9f005b1d:	c4                   	(bad)  
9f005b1e:	ff                   	(bad)  
9f005b1f:	ff 23                	jmp    DWORD PTR [ebx]
9f005b21:	00 00                	add    BYTE PTR [eax],al
9f005b23:	00 00                	add    BYTE PTR [eax],al
9f005b25:	41                   	inc    ecx
9f005b26:	0e                   	push   cs
9f005b27:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b2d:	5f                   	pop    edi
9f005b2e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005b31:	04 00                	add    al,0x0
9f005b33:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005b36:	00 00                	add    BYTE PTR [eax],al
9f005b38:	7c 0a                	jl     9f005b44 <__x86.get_pc_thunk.cx+0xa8e>
9f005b3a:	00 00                	add    BYTE PTR [eax],al
9f005b3c:	f3 c4                	repz (bad) 
9f005b3e:	ff                   	(bad)  
9f005b3f:	ff 23                	jmp    DWORD PTR [ebx]
9f005b41:	00 00                	add    BYTE PTR [eax],al
9f005b43:	00 00                	add    BYTE PTR [eax],al
9f005b45:	41                   	inc    ecx
9f005b46:	0e                   	push   cs
9f005b47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b4d:	5f                   	pop    edi
9f005b4e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005b51:	04 00                	add    al,0x0
9f005b53:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005b56:	00 00                	add    BYTE PTR [eax],al
9f005b58:	9c                   	pushf  
9f005b59:	0a 00                	or     al,BYTE PTR [eax]
9f005b5b:	00 f6                	add    dh,dh
9f005b5d:	c4                   	(bad)  
9f005b5e:	ff                   	(bad)  
9f005b5f:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f005b65:	41                   	inc    ecx
9f005b66:	0e                   	push   cs
9f005b67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b6d:	59                   	pop    ecx
9f005b6e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005b71:	04 00                	add    al,0x0
9f005b73:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005b76:	00 00                	add    BYTE PTR [eax],al
9f005b78:	bc 0a 00 00 f3       	mov    esp,0xf300000a
9f005b7d:	c4                   	(bad)  
9f005b7e:	ff                   	(bad)  
9f005b7f:	ff 20                	jmp    DWORD PTR [eax]
9f005b81:	00 00                	add    BYTE PTR [eax],al
9f005b83:	00 00                	add    BYTE PTR [eax],al
9f005b85:	41                   	inc    ecx
9f005b86:	0e                   	push   cs
9f005b87:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005b8d:	5c                   	pop    esp
9f005b8e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005b91:	04 00                	add    al,0x0
9f005b93:	00 20                	add    BYTE PTR [eax],ah
9f005b95:	00 00                	add    BYTE PTR [eax],al
9f005b97:	00 dc                	add    ah,bl
9f005b99:	0a 00                	or     al,BYTE PTR [eax]
9f005b9b:	00 f4                	add    ah,dh
9f005b9d:	c4                   	(bad)  
9f005b9e:	ff                   	(bad)  
9f005b9f:	ff 73 00             	push   DWORD PTR [ebx+0x0]
9f005ba2:	00 00                	add    BYTE PTR [eax],al
9f005ba4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005ba7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005bad:	44                   	inc    esp
9f005bae:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005bb1:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f005bb4:	0c 04                	or     al,0x4
9f005bb6:	04 00                	add    al,0x0
9f005bb8:	20 00                	and    BYTE PTR [eax],al
9f005bba:	00 00                	add    BYTE PTR [eax],al
9f005bbc:	00 0b                	add    BYTE PTR [ebx],cl
9f005bbe:	00 00                	add    BYTE PTR [eax],al
9f005bc0:	44                   	inc    esp
9f005bc1:	c5 ff ff             	(bad)  
9f005bc4:	60                   	pusha  
9f005bc5:	00 00                	add    BYTE PTR [eax],al
9f005bc7:	00 00                	add    BYTE PTR [eax],al
9f005bc9:	41                   	inc    ecx
9f005bca:	0e                   	push   cs
9f005bcb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005bd1:	44                   	inc    esp
9f005bd2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005bd5:	58                   	pop    eax
9f005bd6:	c5 c3 0c             	(bad)  
9f005bd9:	04 04                	add    al,0x4
9f005bdb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005bde:	00 00                	add    BYTE PTR [eax],al
9f005be0:	24 0b                	and    al,0xb
9f005be2:	00 00                	add    BYTE PTR [eax],al
9f005be4:	80 c5 ff             	add    ch,0xff
9f005be7:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
9f005bed:	41                   	inc    ecx
9f005bee:	0e                   	push   cs
9f005bef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005bf5:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
9f005bfb:	00 20                	add    BYTE PTR [eax],ah
9f005bfd:	00 00                	add    BYTE PTR [eax],al
9f005bff:	00 44 0b 00          	add    BYTE PTR [ebx+ecx*1+0x0],al
9f005c03:	00 e7                	add    bh,ah
9f005c05:	c5 ff ff             	(bad)  
9f005c08:	73 00                	jae    9f005c0a <__x86.get_pc_thunk.cx+0xb54>
9f005c0a:	00 00                	add    BYTE PTR [eax],al
9f005c0c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005c0f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c15:	44                   	inc    esp
9f005c16:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005c19:	6b c5 c3             	imul   eax,ebp,0xffffffc3
9f005c1c:	0c 04                	or     al,0x4
9f005c1e:	04 00                	add    al,0x0
9f005c20:	1c 00                	sbb    al,0x0
9f005c22:	00 00                	add    BYTE PTR [eax],al
9f005c24:	68 0b 00 00 36       	push   0x3600000b
9f005c29:	c6                   	(bad)  
9f005c2a:	ff                   	(bad)  
9f005c2b:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
9f005c32:	0e                   	push   cs
9f005c33:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c39:	02 80 c5 0c 04 04    	add    al,BYTE PTR [eax+0x4040cc5]
9f005c3f:	00 20                	add    BYTE PTR [eax],ah
9f005c41:	00 00                	add    BYTE PTR [eax],al
9f005c43:	00 88 0b 00 00 9a    	add    BYTE PTR [eax-0x65fffff5],cl
9f005c49:	c6                   	(bad)  
9f005c4a:	ff                   	(bad)  
9f005c4b:	ff 8b 00 00 00 00    	dec    DWORD PTR [ebx+0x0]
9f005c51:	41                   	inc    ecx
9f005c52:	0e                   	push   cs
9f005c53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c59:	44                   	inc    esp
9f005c5a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005c5d:	83 c5 c3             	add    ebp,0xffffffc3
9f005c60:	0c 04                	or     al,0x4
9f005c62:	04 00                	add    al,0x0
9f005c64:	20 00                	and    BYTE PTR [eax],al
9f005c66:	00 00                	add    BYTE PTR [eax],al
9f005c68:	ac                   	lods   al,BYTE PTR ds:[esi]
9f005c69:	0b 00                	or     eax,DWORD PTR [eax]
9f005c6b:	00 01                	add    BYTE PTR [ecx],al
9f005c6d:	c7                   	(bad)  
9f005c6e:	ff                   	(bad)  
9f005c6f:	ff c0                	inc    eax
9f005c71:	02 00                	add    al,BYTE PTR [eax]
9f005c73:	00 00                	add    BYTE PTR [eax],al
9f005c75:	41                   	inc    ecx
9f005c76:	0e                   	push   cs
9f005c77:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005c7d:	44                   	inc    esp
9f005c7e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005c81:	b8 02 c5 c3 0c       	mov    eax,0xcc3c502
9f005c86:	04 04                	add    al,0x4
9f005c88:	1c 00                	sbb    al,0x0
9f005c8a:	00 00                	add    BYTE PTR [eax],al
9f005c8c:	d0 0b                	ror    BYTE PTR [ebx],1
9f005c8e:	00 00                	add    BYTE PTR [eax],al
9f005c90:	9d                   	popf   
9f005c91:	c9                   	leave  
9f005c92:	ff                   	(bad)  
9f005c93:	ff 20                	jmp    DWORD PTR [eax]
9f005c95:	00 00                	add    BYTE PTR [eax],al
9f005c97:	00 00                	add    BYTE PTR [eax],al
9f005c99:	41                   	inc    ecx
9f005c9a:	0e                   	push   cs
9f005c9b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ca1:	5c                   	pop    esp
9f005ca2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ca5:	04 00                	add    al,0x0
9f005ca7:	00 20                	add    BYTE PTR [eax],ah
9f005ca9:	00 00                	add    BYTE PTR [eax],al
9f005cab:	00 f0                	add    al,dh
9f005cad:	0b 00                	or     eax,DWORD PTR [eax]
9f005caf:	00 9d c9 ff ff 03    	add    BYTE PTR [ebp+0x3ffffc9],bl
9f005cb5:	01 00                	add    DWORD PTR [eax],eax
9f005cb7:	00 00                	add    BYTE PTR [eax],al
9f005cb9:	41                   	inc    ecx
9f005cba:	0e                   	push   cs
9f005cbb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005cc1:	44                   	inc    esp
9f005cc2:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005cc5:	fb                   	sti    
9f005cc6:	c5 c3 0c             	(bad)  
9f005cc9:	04 04                	add    al,0x4
9f005ccb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005cce:	00 00                	add    BYTE PTR [eax],al
9f005cd0:	14 0c                	adc    al,0xc
9f005cd2:	00 00                	add    BYTE PTR [eax],al
9f005cd4:	7c ca                	jl     9f005ca0 <__x86.get_pc_thunk.cx+0xbea>
9f005cd6:	ff                   	(bad)  
9f005cd7:	ff 23                	jmp    DWORD PTR [ebx]
9f005cd9:	00 00                	add    BYTE PTR [eax],al
9f005cdb:	00 00                	add    BYTE PTR [eax],al
9f005cdd:	41                   	inc    ecx
9f005cde:	0e                   	push   cs
9f005cdf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ce5:	5f                   	pop    edi
9f005ce6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005ce9:	04 00                	add    al,0x0
9f005ceb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005cee:	00 00                	add    BYTE PTR [eax],al
9f005cf0:	34 0c                	xor    al,0xc
9f005cf2:	00 00                	add    BYTE PTR [eax],al
9f005cf4:	7f ca                	jg     9f005cc0 <__x86.get_pc_thunk.cx+0xc0a>
9f005cf6:	ff                   	(bad)  
9f005cf7:	ff 21                	jmp    DWORD PTR [ecx]
9f005cf9:	00 00                	add    BYTE PTR [eax],al
9f005cfb:	00 00                	add    BYTE PTR [eax],al
9f005cfd:	41                   	inc    ecx
9f005cfe:	0e                   	push   cs
9f005cff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d05:	5d                   	pop    ebp
9f005d06:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005d09:	04 00                	add    al,0x0
9f005d0b:	00 20                	add    BYTE PTR [eax],ah
9f005d0d:	00 00                	add    BYTE PTR [eax],al
9f005d0f:	00 54 0c 00          	add    BYTE PTR [esp+ecx*1+0x0],dl
9f005d13:	00 80 ca ff ff 32    	add    BYTE PTR [eax+0x32ffffca],al
9f005d19:	00 00                	add    BYTE PTR [eax],al
9f005d1b:	00 00                	add    BYTE PTR [eax],al
9f005d1d:	41                   	inc    ecx
9f005d1e:	0e                   	push   cs
9f005d1f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d25:	44                   	inc    esp
9f005d26:	83 03 6a             	add    DWORD PTR [ebx],0x6a
9f005d29:	c5 c3 0c             	(bad)  
9f005d2c:	04 04                	add    al,0x4
9f005d2e:	00 00                	add    BYTE PTR [eax],al
9f005d30:	1c 00                	sbb    al,0x0
9f005d32:	00 00                	add    BYTE PTR [eax],al
9f005d34:	78 0c                	js     9f005d42 <__x86.get_pc_thunk.cx+0xc8c>
9f005d36:	00 00                	add    BYTE PTR [eax],al
9f005d38:	90                   	nop
9f005d39:	ca ff ff             	retf   0xffff
9f005d3c:	9b                   	fwait
9f005d3d:	01 00                	add    DWORD PTR [eax],eax
9f005d3f:	00 00                	add    BYTE PTR [eax],al
9f005d41:	41                   	inc    ecx
9f005d42:	0e                   	push   cs
9f005d43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d49:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
9f005d4f:	04 1c                	add    al,0x1c
9f005d51:	00 00                	add    BYTE PTR [eax],al
9f005d53:	00 98 0c 00 00 0b    	add    BYTE PTR [eax+0xb00000c],bl
9f005d59:	cc                   	int3   
9f005d5a:	ff                   	(bad)  
9f005d5b:	ff 20                	jmp    DWORD PTR [eax]
9f005d5d:	00 00                	add    BYTE PTR [eax],al
9f005d5f:	00 00                	add    BYTE PTR [eax],al
9f005d61:	41                   	inc    ecx
9f005d62:	0e                   	push   cs
9f005d63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d69:	5c                   	pop    esp
9f005d6a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005d6d:	04 00                	add    al,0x0
9f005d6f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005d72:	00 00                	add    BYTE PTR [eax],al
9f005d74:	b8 0c 00 00 0c       	mov    eax,0xc00000c
9f005d79:	cc                   	int3   
9f005d7a:	ff                   	(bad)  
9f005d7b:	ff c7                	inc    edi
9f005d7d:	00 00                	add    BYTE PTR [eax],al
9f005d7f:	00 00                	add    BYTE PTR [eax],al
9f005d81:	41                   	inc    ecx
9f005d82:	0e                   	push   cs
9f005d83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005d89:	02 c3                	add    al,bl
9f005d8b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005d8e:	04 00                	add    al,0x0
9f005d90:	1c 00                	sbb    al,0x0
9f005d92:	00 00                	add    BYTE PTR [eax],al
9f005d94:	d8 0c 00             	fmul   DWORD PTR [eax+eax*1]
9f005d97:	00 b3 cc ff ff 20    	add    BYTE PTR [ebx+0x20ffffcc],dh
9f005d9d:	00 00                	add    BYTE PTR [eax],al
9f005d9f:	00 00                	add    BYTE PTR [eax],al
9f005da1:	41                   	inc    ecx
9f005da2:	0e                   	push   cs
9f005da3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005da9:	5c                   	pop    esp
9f005daa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005dad:	04 00                	add    al,0x0
9f005daf:	00 20                	add    BYTE PTR [eax],ah
9f005db1:	00 00                	add    BYTE PTR [eax],al
9f005db3:	00 f8                	add    al,bh
9f005db5:	0c 00                	or     al,0x0
9f005db7:	00 b4 cc ff ff 29 00 	add    BYTE PTR [esp+ecx*8+0x29ffff],dh
9f005dbe:	00 00                	add    BYTE PTR [eax],al
9f005dc0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005dc3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005dc9:	44                   	inc    esp
9f005dca:	83 03 61             	add    DWORD PTR [ebx],0x61
9f005dcd:	c5 c3 0c             	(bad)  
9f005dd0:	04 04                	add    al,0x4
9f005dd2:	00 00                	add    BYTE PTR [eax],al
9f005dd4:	20 00                	and    BYTE PTR [eax],al
9f005dd6:	00 00                	add    BYTE PTR [eax],al
9f005dd8:	1c 0d                	sbb    al,0xd
9f005dda:	00 00                	add    BYTE PTR [eax],al
9f005ddc:	b9 cc ff ff 2e       	mov    ecx,0x2effffcc
9f005de1:	00 00                	add    BYTE PTR [eax],al
9f005de3:	00 00                	add    BYTE PTR [eax],al
9f005de5:	41                   	inc    ecx
9f005de6:	0e                   	push   cs
9f005de7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ded:	44                   	inc    esp
9f005dee:	83 03 66             	add    DWORD PTR [ebx],0x66
9f005df1:	c5 c3 0c             	(bad)  
9f005df4:	04 04                	add    al,0x4
9f005df6:	00 00                	add    BYTE PTR [eax],al
9f005df8:	28 00                	sub    BYTE PTR [eax],al
9f005dfa:	00 00                	add    BYTE PTR [eax],al
9f005dfc:	40                   	inc    eax
9f005dfd:	0d 00 00 c4 cc       	or     eax,0xccc40000
9f005e02:	ff                   	(bad)  
9f005e03:	ff                   	(bad)  
9f005e04:	79 03                	jns    9f005e09 <__x86.get_pc_thunk.cx+0xd53>
9f005e06:	00 00                	add    BYTE PTR [eax],al
9f005e08:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005e0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e11:	48                   	dec    eax
9f005e12:	86 03                	xchg   BYTE PTR [ebx],al
9f005e14:	83 04 03 6b          	add    DWORD PTR [ebx+eax*1],0x6b
9f005e18:	03 c3                	add    eax,ebx
9f005e1a:	41                   	inc    ecx
9f005e1b:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005e1f:	04 04                	add    al,0x4
9f005e21:	00 00                	add    BYTE PTR [eax],al
9f005e23:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005e26:	00 00                	add    BYTE PTR [eax],al
9f005e28:	6c                   	ins    BYTE PTR es:[edi],dx
9f005e29:	0d 00 00 11 d0       	or     eax,0xd0110000
9f005e2e:	ff                   	(bad)  
9f005e2f:	ff 25 00 00 00 00    	jmp    DWORD PTR ds:0x0
9f005e35:	41                   	inc    ecx
9f005e36:	0e                   	push   cs
9f005e37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e3d:	61                   	popa   
9f005e3e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005e41:	04 00                	add    al,0x0
9f005e43:	00 28                	add    BYTE PTR [eax],ch
9f005e45:	00 00                	add    BYTE PTR [eax],al
9f005e47:	00 8c 0d 00 00 16 d0 	add    BYTE PTR [ebp+ecx*1-0x2fea0000],cl
9f005e4e:	ff                   	(bad)  
9f005e4f:	ff 26                	jmp    DWORD PTR [esi]
9f005e51:	02 00                	add    al,BYTE PTR [eax]
9f005e53:	00 00                	add    BYTE PTR [eax],al
9f005e55:	41                   	inc    ecx
9f005e56:	0e                   	push   cs
9f005e57:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e5d:	48                   	dec    eax
9f005e5e:	86 03                	xchg   BYTE PTR [ebx],al
9f005e60:	83 04 03 18          	add    DWORD PTR [ebx+eax*1],0x18
9f005e64:	02 c3                	add    al,bl
9f005e66:	41                   	inc    ecx
9f005e67:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005e6b:	04 04                	add    al,0x4
9f005e6d:	00 00                	add    BYTE PTR [eax],al
9f005e6f:	00 20                	add    BYTE PTR [eax],ah
9f005e71:	00 00                	add    BYTE PTR [eax],al
9f005e73:	00 b8 0d 00 00 10    	add    BYTE PTR [eax+0x1000000d],bh
9f005e79:	d2 ff                	sar    bh,cl
9f005e7b:	ff 5f 00             	call   FWORD PTR [edi+0x0]
9f005e7e:	00 00                	add    BYTE PTR [eax],al
9f005e80:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005e83:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005e89:	44                   	inc    esp
9f005e8a:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005e8d:	56                   	push   esi
9f005e8e:	c3                   	ret    
9f005e8f:	41                   	inc    ecx
9f005e90:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005e93:	04 28                	add    al,0x28
9f005e95:	00 00                	add    BYTE PTR [eax],al
9f005e97:	00 dc                	add    ah,bl
9f005e99:	0d 00 00 4b d2       	or     eax,0xd24b0000
9f005e9e:	ff                   	(bad)  
9f005e9f:	ff                   	(bad)  
9f005ea0:	3e 02 00             	add    al,BYTE PTR ds:[eax]
9f005ea3:	00 00                	add    BYTE PTR [eax],al
9f005ea5:	41                   	inc    ecx
9f005ea6:	0e                   	push   cs
9f005ea7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ead:	45                   	inc    ebp
9f005eae:	86 03                	xchg   BYTE PTR [ebx],al
9f005eb0:	83 04 03 33          	add    DWORD PTR [ebx+eax*1],0x33
9f005eb4:	02 c3                	add    al,bl
9f005eb6:	41                   	inc    ecx
9f005eb7:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005ebb:	04 04                	add    al,0x4
9f005ebd:	00 00                	add    BYTE PTR [eax],al
9f005ebf:	00 20                	add    BYTE PTR [eax],ah
9f005ec1:	00 00                	add    BYTE PTR [eax],al
9f005ec3:	00 08                	add    BYTE PTR [eax],cl
9f005ec5:	0e                   	push   cs
9f005ec6:	00 00                	add    BYTE PTR [eax],al
9f005ec8:	5d                   	pop    ebp
9f005ec9:	d4 ff                	aam    0xff
9f005ecb:	ff 48 04             	dec    DWORD PTR [eax+0x4]
9f005ece:	00 00                	add    BYTE PTR [eax],al
9f005ed0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005ed3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005ed9:	44                   	inc    esp
9f005eda:	83 03 03             	add    DWORD PTR [ebx],0x3
9f005edd:	40                   	inc    eax
9f005ede:	04 c5                	add    al,0xc5
9f005ee0:	c3                   	ret    
9f005ee1:	0c 04                	or     al,0x4
9f005ee3:	04 1c                	add    al,0x1c
9f005ee5:	00 00                	add    BYTE PTR [eax],al
9f005ee7:	00 2c 0e             	add    BYTE PTR [esi+ecx*1],ch
9f005eea:	00 00                	add    BYTE PTR [eax],al
9f005eec:	81 d8 ff ff 33 00    	sbb    eax,0x33ffff
9f005ef2:	00 00                	add    BYTE PTR [eax],al
9f005ef4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005ef7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005efd:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005efe:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005f01:	04 00                	add    al,0x0
9f005f03:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005f06:	00 00                	add    BYTE PTR [eax],al
9f005f08:	4c                   	dec    esp
9f005f09:	0e                   	push   cs
9f005f0a:	00 00                	add    BYTE PTR [eax],al
9f005f0c:	94                   	xchg   esp,eax
9f005f0d:	d8 ff                	fdivr  st,st(7)
9f005f0f:	ff 33                	push   DWORD PTR [ebx]
9f005f11:	00 00                	add    BYTE PTR [eax],al
9f005f13:	00 00                	add    BYTE PTR [eax],al
9f005f15:	41                   	inc    ecx
9f005f16:	0e                   	push   cs
9f005f17:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f1d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f005f1e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005f21:	04 00                	add    al,0x0
9f005f23:	00 20                	add    BYTE PTR [eax],ah
9f005f25:	00 00                	add    BYTE PTR [eax],al
9f005f27:	00 6c 0e 00          	add    BYTE PTR [esi+ecx*1+0x0],ch
9f005f2b:	00 a8 d8 ff ff 84    	add    BYTE PTR [eax-0x7b000028],ch
9f005f31:	00 00                	add    BYTE PTR [eax],al
9f005f33:	00 00                	add    BYTE PTR [eax],al
9f005f35:	41                   	inc    ecx
9f005f36:	0e                   	push   cs
9f005f37:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f3d:	44                   	inc    esp
9f005f3e:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005f41:	7c c5                	jl     9f005f08 <__x86.get_pc_thunk.cx+0xe52>
9f005f43:	c3                   	ret    
9f005f44:	0c 04                	or     al,0x4
9f005f46:	04 00                	add    al,0x0
9f005f48:	20 00                	and    BYTE PTR [eax],al
9f005f4a:	00 00                	add    BYTE PTR [eax],al
9f005f4c:	90                   	nop
9f005f4d:	0e                   	push   cs
9f005f4e:	00 00                	add    BYTE PTR [eax],al
9f005f50:	08 d9                	or     cl,bl
9f005f52:	ff                   	(bad)  
9f005f53:	ff                   	(bad)  
9f005f54:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f005f57:	00 00                	add    BYTE PTR [eax],al
9f005f59:	41                   	inc    ecx
9f005f5a:	0e                   	push   cs
9f005f5b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f61:	44                   	inc    esp
9f005f62:	83 03 76             	add    DWORD PTR [ebx],0x76
9f005f65:	c5 c3 0c             	(bad)  
9f005f68:	04 04                	add    al,0x4
9f005f6a:	00 00                	add    BYTE PTR [eax],al
9f005f6c:	20 00                	and    BYTE PTR [eax],al
9f005f6e:	00 00                	add    BYTE PTR [eax],al
9f005f70:	b4 0e                	mov    ah,0xe
9f005f72:	00 00                	add    BYTE PTR [eax],al
9f005f74:	22 d9                	and    bl,cl
9f005f76:	ff                   	(bad)  
9f005f77:	ff                   	(bad)  
9f005f78:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f005f7b:	00 00                	add    BYTE PTR [eax],al
9f005f7d:	41                   	inc    ecx
9f005f7e:	0e                   	push   cs
9f005f7f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005f85:	44                   	inc    esp
9f005f86:	83 03 76             	add    DWORD PTR [ebx],0x76
9f005f89:	c5 c3 0c             	(bad)  
9f005f8c:	04 04                	add    al,0x4
9f005f8e:	00 00                	add    BYTE PTR [eax],al
9f005f90:	20 00                	and    BYTE PTR [eax],al
9f005f92:	00 00                	add    BYTE PTR [eax],al
9f005f94:	d8 0e                	fmul   DWORD PTR [esi]
9f005f96:	00 00                	add    BYTE PTR [eax],al
9f005f98:	3c d9                	cmp    al,0xd9
9f005f9a:	ff                   	(bad)  
9f005f9b:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
9f005f9e:	00 00                	add    BYTE PTR [eax],al
9f005fa0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005fa3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005fa9:	44                   	inc    esp
9f005faa:	83 03 02             	add    DWORD PTR [ebx],0x2
9f005fad:	67 c5 c3 0c          	addr16 (bad) 
9f005fb1:	04 04                	add    al,0x4
9f005fb3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f005fb6:	00 00                	add    BYTE PTR [eax],al
9f005fb8:	fc                   	cld    
9f005fb9:	0e                   	push   cs
9f005fba:	00 00                	add    BYTE PTR [eax],al
9f005fbc:	87 d9                	xchg   ecx,ebx
9f005fbe:	ff                   	(bad)  
9f005fbf:	ff 26                	jmp    DWORD PTR [esi]
9f005fc1:	00 00                	add    BYTE PTR [eax],al
9f005fc3:	00 00                	add    BYTE PTR [eax],al
9f005fc5:	41                   	inc    ecx
9f005fc6:	0e                   	push   cs
9f005fc7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005fcd:	62                   	(bad)  
9f005fce:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f005fd1:	04 00                	add    al,0x0
9f005fd3:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f005fd6:	00 00                	add    BYTE PTR [eax],al
9f005fd8:	1c 0f                	sbb    al,0xf
9f005fda:	00 00                	add    BYTE PTR [eax],al
9f005fdc:	90                   	nop
9f005fdd:	d9 ff                	fcos   
9f005fdf:	ff 5e 00             	call   FWORD PTR [esi+0x0]
9f005fe2:	00 00                	add    BYTE PTR [eax],al
9f005fe4:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f005fe7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f005fed:	45                   	inc    ebp
9f005fee:	86 03                	xchg   BYTE PTR [ebx],al
9f005ff0:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
9f005ff4:	c3                   	ret    
9f005ff5:	41                   	inc    ecx
9f005ff6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f005ffa:	04 04                	add    al,0x4
9f005ffc:	1c 00                	sbb    al,0x0
9f005ffe:	00 00                	add    BYTE PTR [eax],al
9f006000:	44                   	inc    esp
9f006001:	0f 00 00             	sldt   WORD PTR [eax]
9f006004:	c6                   	(bad)  
9f006005:	d9 ff                	fcos   
9f006007:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f00600d:	41                   	inc    ecx
9f00600e:	0e                   	push   cs
9f00600f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006015:	59                   	pop    ecx
9f006016:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006019:	04 00                	add    al,0x0
9f00601b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00601e:	00 00                	add    BYTE PTR [eax],al
9f006020:	64 0f 00 00          	sldt   WORD PTR fs:[eax]
9f006024:	c4                   	(bad)  
9f006025:	d9 ff                	fcos   
9f006027:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f00602a:	00 00                	add    BYTE PTR [eax],al
9f00602c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00602f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006035:	7c c5                	jl     9f005ffc <__x86.get_pc_thunk.cx+0xf46>
9f006037:	0c 04                	or     al,0x4
9f006039:	04 00                	add    al,0x0
9f00603b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00603e:	00 00                	add    BYTE PTR [eax],al
9f006040:	84 0f                	test   BYTE PTR [edi],cl
9f006042:	00 00                	add    BYTE PTR [eax],al
9f006044:	e4 d9                	in     al,0xd9
9f006046:	ff                   	(bad)  
9f006047:	ff 40 00             	inc    DWORD PTR [eax+0x0]
9f00604a:	00 00                	add    BYTE PTR [eax],al
9f00604c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00604f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006055:	7c c5                	jl     9f00601c <__x86.get_pc_thunk.cx+0xf66>
9f006057:	0c 04                	or     al,0x4
9f006059:	04 00                	add    al,0x0
9f00605b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00605e:	00 00                	add    BYTE PTR [eax],al
9f006060:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006061:	0f 00 00             	sldt   WORD PTR [eax]
9f006064:	04 da                	add    al,0xda
9f006066:	ff                   	(bad)  
9f006067:	ff 47 00             	inc    DWORD PTR [edi+0x0]
9f00606a:	00 00                	add    BYTE PTR [eax],al
9f00606c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00606f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006075:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
9f006078:	0c 04                	or     al,0x4
9f00607a:	04 00                	add    al,0x0
9f00607c:	1c 00                	sbb    al,0x0
9f00607e:	00 00                	add    BYTE PTR [eax],al
9f006080:	c4 0f                	les    ecx,FWORD PTR [edi]
9f006082:	00 00                	add    BYTE PTR [eax],al
9f006084:	2c da                	sub    al,0xda
9f006086:	ff                   	(bad)  
9f006087:	ff 30                	push   DWORD PTR [eax]
9f006089:	00 00                	add    BYTE PTR [eax],al
9f00608b:	00 00                	add    BYTE PTR [eax],al
9f00608d:	41                   	inc    ecx
9f00608e:	0e                   	push   cs
9f00608f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006095:	6c                   	ins    BYTE PTR es:[edi],dx
9f006096:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006099:	04 00                	add    al,0x0
9f00609b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00609e:	00 00                	add    BYTE PTR [eax],al
9f0060a0:	e4 0f                	in     al,0xf
9f0060a2:	00 00                	add    BYTE PTR [eax],al
9f0060a4:	3c da                	cmp    al,0xda
9f0060a6:	ff                   	(bad)  
9f0060a7:	ff 59 00             	call   FWORD PTR [ecx+0x0]
9f0060aa:	00 00                	add    BYTE PTR [eax],al
9f0060ac:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0060af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0060b5:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
9f0060b8:	0c 04                	or     al,0x4
9f0060ba:	04 00                	add    al,0x0
9f0060bc:	1c 00                	sbb    al,0x0
9f0060be:	00 00                	add    BYTE PTR [eax],al
9f0060c0:	04 10                	add    al,0x10
9f0060c2:	00 00                	add    BYTE PTR [eax],al
9f0060c4:	78 da                	js     9f0060a0 <__x86.get_pc_thunk.cx+0xfea>
9f0060c6:	ff                   	(bad)  
9f0060c7:	ff 31                	push   DWORD PTR [ecx]
9f0060c9:	00 00                	add    BYTE PTR [eax],al
9f0060cb:	00 00                	add    BYTE PTR [eax],al
9f0060cd:	41                   	inc    ecx
9f0060ce:	0e                   	push   cs
9f0060cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0060d5:	6d                   	ins    DWORD PTR es:[edi],dx
9f0060d6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0060d9:	04 00                	add    al,0x0
9f0060db:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0060de:	00 00                	add    BYTE PTR [eax],al
9f0060e0:	24 10                	and    al,0x10
9f0060e2:	00 00                	add    BYTE PTR [eax],al
9f0060e4:	89 da                	mov    edx,ebx
9f0060e6:	ff                   	(bad)  
9f0060e7:	ff 1a                	call   FWORD PTR [edx]
9f0060e9:	00 00                	add    BYTE PTR [eax],al
9f0060eb:	00 00                	add    BYTE PTR [eax],al
9f0060ed:	41                   	inc    ecx
9f0060ee:	0e                   	push   cs
9f0060ef:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0060f5:	56                   	push   esi
9f0060f6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0060f9:	04 00                	add    al,0x0
9f0060fb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0060fe:	00 00                	add    BYTE PTR [eax],al
9f006100:	44                   	inc    esp
9f006101:	10 00                	adc    BYTE PTR [eax],al
9f006103:	00 83 da ff ff 39    	add    BYTE PTR [ebx+0x39ffffda],al
9f006109:	00 00                	add    BYTE PTR [eax],al
9f00610b:	00 00                	add    BYTE PTR [eax],al
9f00610d:	41                   	inc    ecx
9f00610e:	0e                   	push   cs
9f00610f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006115:	75 c5                	jne    9f0060dc <__x86.get_pc_thunk.cx+0x1026>
9f006117:	0c 04                	or     al,0x4
9f006119:	04 00                	add    al,0x0
9f00611b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00611e:	00 00                	add    BYTE PTR [eax],al
9f006120:	64 10 00             	adc    BYTE PTR fs:[eax],al
9f006123:	00 9c da ff ff 1e 00 	add    BYTE PTR [edx+ebx*8+0x1effff],bl
9f00612a:	00 00                	add    BYTE PTR [eax],al
9f00612c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00612f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006135:	5a                   	pop    edx
9f006136:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006139:	04 00                	add    al,0x0
9f00613b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f00613e:	00 00                	add    BYTE PTR [eax],al
9f006140:	84 10                	test   BYTE PTR [eax],dl
9f006142:	00 00                	add    BYTE PTR [eax],al
9f006144:	9c                   	pushf  
9f006145:	da ff                	(bad)  
9f006147:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f00614a:	00 00                	add    BYTE PTR [eax],al
9f00614c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00614f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006155:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f006158:	0c 04                	or     al,0x4
9f00615a:	04 00                	add    al,0x0
9f00615c:	1c 00                	sbb    al,0x0
9f00615e:	00 00                	add    BYTE PTR [eax],al
9f006160:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f006161:	10 00                	adc    BYTE PTR [eax],al
9f006163:	00 e3                	add    bl,ah
9f006165:	da ff                	(bad)  
9f006167:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
9f00616a:	00 00                	add    BYTE PTR [eax],al
9f00616c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00616f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006175:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
9f006178:	0c 04                	or     al,0x4
9f00617a:	04 00                	add    al,0x0
9f00617c:	1c 00                	sbb    al,0x0
9f00617e:	00 00                	add    BYTE PTR [eax],al
9f006180:	c4 10                	les    edx,FWORD PTR [eax]
9f006182:	00 00                	add    BYTE PTR [eax],al
9f006184:	2c db                	sub    al,0xdb
9f006186:	ff                   	(bad)  
9f006187:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
9f00618b:	00 00                	add    BYTE PTR [eax],al
9f00618d:	41                   	inc    ecx
9f00618e:	0e                   	push   cs
9f00618f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006195:	02 68 c5             	add    ch,BYTE PTR [eax-0x3b]
9f006198:	0c 04                	or     al,0x4
9f00619a:	04 00                	add    al,0x0
9f00619c:	1c 00                	sbb    al,0x0
9f00619e:	00 00                	add    BYTE PTR [eax],al
9f0061a0:	e4 10                	in     al,0x10
9f0061a2:	00 00                	add    BYTE PTR [eax],al
9f0061a4:	78 db                	js     9f006181 <__x86.get_pc_thunk.cx+0x10cb>
9f0061a6:	ff                   	(bad)  
9f0061a7:	ff 20                	jmp    DWORD PTR [eax]
9f0061a9:	00 00                	add    BYTE PTR [eax],al
9f0061ab:	00 00                	add    BYTE PTR [eax],al
9f0061ad:	41                   	inc    ecx
9f0061ae:	0e                   	push   cs
9f0061af:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0061b5:	5c                   	pop    esp
9f0061b6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0061b9:	04 00                	add    al,0x0
9f0061bb:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f0061be:	00 00                	add    BYTE PTR [eax],al
9f0061c0:	04 11                	add    al,0x11
9f0061c2:	00 00                	add    BYTE PTR [eax],al
9f0061c4:	78 db                	js     9f0061a1 <__x86.get_pc_thunk.cx+0x10eb>
9f0061c6:	ff                   	(bad)  
9f0061c7:	ff                   	(bad)  
9f0061c8:	7d 01                	jge    9f0061cb <__x86.get_pc_thunk.cx+0x1115>
9f0061ca:	00 00                	add    BYTE PTR [eax],al
9f0061cc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f0061cf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0061d5:	46                   	inc    esi
9f0061d6:	87 03                	xchg   DWORD PTR [ebx],eax
9f0061d8:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f0061db:	05 03 70 01 c3       	add    eax,0xc3017003
9f0061e0:	41                   	inc    ecx
9f0061e1:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f0061e5:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0061e8:	04 00                	add    al,0x0
9f0061ea:	00 00                	add    BYTE PTR [eax],al
9f0061ec:	1c 00                	sbb    al,0x0
9f0061ee:	00 00                	add    BYTE PTR [eax],al
9f0061f0:	34 11                	xor    al,0x11
9f0061f2:	00 00                	add    BYTE PTR [eax],al
9f0061f4:	c8 dc ff ff          	enter  0xffdc,0xff
9f0061f8:	1d 00 00 00 00       	sbb    eax,0x0
9f0061fd:	41                   	inc    ecx
9f0061fe:	0e                   	push   cs
9f0061ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006205:	59                   	pop    ecx
9f006206:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006209:	04 00                	add    al,0x0
9f00620b:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f00620e:	00 00                	add    BYTE PTR [eax],al
9f006210:	54                   	push   esp
9f006211:	11 00                	adc    DWORD PTR [eax],eax
9f006213:	00 c8                	add    al,cl
9f006215:	dc ff                	fdiv   st(7),st
9f006217:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
9f00621e:	0e                   	push   cs
9f00621f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006225:	46                   	inc    esi
9f006226:	87 03                	xchg   DWORD PTR [ebx],eax
9f006228:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00622b:	05 03 8f 01 c3       	add    eax,0xc3018f03
9f006230:	41                   	inc    ecx
9f006231:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f006235:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006238:	04 00                	add    al,0x0
9f00623a:	00 00                	add    BYTE PTR [eax],al
9f00623c:	20 00                	and    BYTE PTR [eax],al
9f00623e:	00 00                	add    BYTE PTR [eax],al
9f006240:	84 11                	test   BYTE PTR [ecx],dl
9f006242:	00 00                	add    BYTE PTR [eax],al
9f006244:	34 de                	xor    al,0xde
9f006246:	ff                   	(bad)  
9f006247:	ff 96 00 00 00 00    	call   DWORD PTR [esi+0x0]
9f00624d:	41                   	inc    ecx
9f00624e:	0e                   	push   cs
9f00624f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006255:	44                   	inc    esp
9f006256:	83 03 02             	add    DWORD PTR [ebx],0x2
9f006259:	8e c5                	mov    es,ebp
9f00625b:	c3                   	ret    
9f00625c:	0c 04                	or     al,0x4
9f00625e:	04 00                	add    al,0x0
9f006260:	1c 00                	sbb    al,0x0
9f006262:	00 00                	add    BYTE PTR [eax],al
9f006264:	a8 11                	test   al,0x11
9f006266:	00 00                	add    BYTE PTR [eax],al
9f006268:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
9f006269:	de ff                	fdivp  st(7),st
9f00626b:	ff 20                	jmp    DWORD PTR [eax]
9f00626d:	00 00                	add    BYTE PTR [eax],al
9f00626f:	00 00                	add    BYTE PTR [eax],al
9f006271:	41                   	inc    ecx
9f006272:	0e                   	push   cs
9f006273:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006279:	5c                   	pop    esp
9f00627a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f00627d:	04 00                	add    al,0x0
9f00627f:	00 28                	add    BYTE PTR [eax],ch
9f006281:	00 00                	add    BYTE PTR [eax],al
9f006283:	00 c8                	add    al,cl
9f006285:	11 00                	adc    DWORD PTR [eax],eax
9f006287:	00 a8 de ff ff 1e    	add    BYTE PTR [eax+0x1effffde],ch
9f00628d:	01 00                	add    DWORD PTR [eax],eax
9f00628f:	00 00                	add    BYTE PTR [eax],al
9f006291:	41                   	inc    ecx
9f006292:	0e                   	push   cs
9f006293:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006299:	45                   	inc    ebp
9f00629a:	86 03                	xchg   BYTE PTR [ebx],al
9f00629c:	83 04 03 13          	add    DWORD PTR [ebx+eax*1],0x13
9f0062a0:	01 c3                	add    ebx,eax
9f0062a2:	41                   	inc    ecx
9f0062a3:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0062a7:	04 04                	add    al,0x4
9f0062a9:	00 00                	add    BYTE PTR [eax],al
9f0062ab:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0062ae:	00 00                	add    BYTE PTR [eax],al
9f0062b0:	f4                   	hlt    
9f0062b1:	11 00                	adc    DWORD PTR [eax],eax
9f0062b3:	00 9a df ff ff 26    	add    BYTE PTR [edx+0x26ffffdf],bl
9f0062b9:	00 00                	add    BYTE PTR [eax],al
9f0062bb:	00 00                	add    BYTE PTR [eax],al
9f0062bd:	41                   	inc    ecx
9f0062be:	0e                   	push   cs
9f0062bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062c5:	62                   	(bad)  
9f0062c6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0062c9:	04 00                	add    al,0x0
9f0062cb:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f0062ce:	00 00                	add    BYTE PTR [eax],al
9f0062d0:	14 12                	adc    al,0x12
9f0062d2:	00 00                	add    BYTE PTR [eax],al
9f0062d4:	a0 df ff ff 9e       	mov    al,ds:0x9effffdf
9f0062d9:	00 00                	add    BYTE PTR [eax],al
9f0062db:	00 00                	add    BYTE PTR [eax],al
9f0062dd:	41                   	inc    ecx
9f0062de:	0e                   	push   cs
9f0062df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0062e5:	45                   	inc    ebp
9f0062e6:	86 03                	xchg   BYTE PTR [ebx],al
9f0062e8:	83 04 02 93          	add    DWORD PTR [edx+eax*1],0xffffff93
9f0062ec:	c3                   	ret    
9f0062ed:	41                   	inc    ecx
9f0062ee:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f0062f2:	04 04                	add    al,0x4
9f0062f4:	24 00                	and    al,0x0
9f0062f6:	00 00                	add    BYTE PTR [eax],al
9f0062f8:	3c 12                	cmp    al,0x12
9f0062fa:	00 00                	add    BYTE PTR [eax],al
9f0062fc:	16                   	push   ss
9f0062fd:	e0 ff                	loopne 9f0062fe <__x86.get_pc_thunk.cx+0x1248>
9f0062ff:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
9f006302:	00 00                	add    BYTE PTR [eax],al
9f006304:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006307:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00630d:	42                   	inc    edx
9f00630e:	86 03                	xchg   BYTE PTR [ebx],al
9f006310:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
9f006314:	c3                   	ret    
9f006315:	41                   	inc    ecx
9f006316:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f00631a:	04 04                	add    al,0x4
9f00631c:	1c 00                	sbb    al,0x0
9f00631e:	00 00                	add    BYTE PTR [eax],al
9f006320:	64 12 00             	adc    al,BYTE PTR fs:[eax]
9f006323:	00 5c e0 ff          	add    BYTE PTR [eax+eiz*8-0x1],bl
9f006327:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f00632d:	41                   	inc    ecx
9f00632e:	0e                   	push   cs
9f00632f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006335:	59                   	pop    ecx
9f006336:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006339:	04 00                	add    al,0x0
9f00633b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f00633e:	00 00                	add    BYTE PTR [eax],al
9f006340:	84 12                	test   BYTE PTR [edx],dl
9f006342:	00 00                	add    BYTE PTR [eax],al
9f006344:	5c                   	pop    esp
9f006345:	e0 ff                	loopne 9f006346 <__x86.get_pc_thunk.cx+0x1290>
9f006347:	ff 44 00 00          	inc    DWORD PTR [eax+eax*1+0x0]
9f00634b:	00 00                	add    BYTE PTR [eax],al
9f00634d:	41                   	inc    ecx
9f00634e:	0e                   	push   cs
9f00634f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006355:	45                   	inc    ebp
9f006356:	86 03                	xchg   BYTE PTR [ebx],al
9f006358:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
9f00635c:	41                   	inc    ecx
9f00635d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006361:	04 04                	add    al,0x4
9f006363:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
9f006366:	00 00                	add    BYTE PTR [eax],al
9f006368:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006369:	12 00                	adc    al,BYTE PTR [eax]
9f00636b:	00 78 e0             	add    BYTE PTR [eax-0x20],bh
9f00636e:	ff                   	(bad)  
9f00636f:	ff 19                	call   FWORD PTR [ecx]
9f006371:	03 00                	add    eax,DWORD PTR [eax]
9f006373:	00 00                	add    BYTE PTR [eax],al
9f006375:	41                   	inc    ecx
9f006376:	0e                   	push   cs
9f006377:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00637d:	44                   	inc    esp
9f00637e:	83 03 03             	add    DWORD PTR [ebx],0x3
9f006381:	10 03                	adc    BYTE PTR [ebx],al
9f006383:	c3                   	ret    
9f006384:	41                   	inc    ecx
9f006385:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006388:	04 00                	add    al,0x0
9f00638a:	00 00                	add    BYTE PTR [eax],al
9f00638c:	1c 00                	sbb    al,0x0
9f00638e:	00 00                	add    BYTE PTR [eax],al
9f006390:	d4 12                	aam    0x12
9f006392:	00 00                	add    BYTE PTR [eax],al
9f006394:	69 e3 ff ff 1d 00    	imul   esp,ebx,0x1dffff
9f00639a:	00 00                	add    BYTE PTR [eax],al
9f00639c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f00639f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063a5:	59                   	pop    ecx
9f0063a6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f0063a9:	04 00                	add    al,0x0
9f0063ab:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0063ae:	00 00                	add    BYTE PTR [eax],al
9f0063b0:	f4                   	hlt    
9f0063b1:	12 00                	adc    al,BYTE PTR [eax]
9f0063b3:	00 66 e3             	add    BYTE PTR [esi-0x1d],ah
9f0063b6:	ff                   	(bad)  
9f0063b7:	ff                   	(bad)  
9f0063b8:	3d 00 00 00 00       	cmp    eax,0x0
9f0063bd:	41                   	inc    ecx
9f0063be:	0e                   	push   cs
9f0063bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063c5:	79 c5                	jns    9f00638c <__x86.get_pc_thunk.cx+0x12d6>
9f0063c7:	0c 04                	or     al,0x4
9f0063c9:	04 00                	add    al,0x0
9f0063cb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0063ce:	00 00                	add    BYTE PTR [eax],al
9f0063d0:	14 13                	adc    al,0x13
9f0063d2:	00 00                	add    BYTE PTR [eax],al
9f0063d4:	83 e3 ff             	and    ebx,0xffffffff
9f0063d7:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
9f0063dd:	41                   	inc    ecx
9f0063de:	0e                   	push   cs
9f0063df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f0063e5:	71 c5                	jno    9f0063ac <__x86.get_pc_thunk.cx+0x12f6>
9f0063e7:	0c 04                	or     al,0x4
9f0063e9:	04 00                	add    al,0x0
9f0063eb:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f0063ee:	00 00                	add    BYTE PTR [eax],al
9f0063f0:	34 13                	xor    al,0x13
9f0063f2:	00 00                	add    BYTE PTR [eax],al
9f0063f4:	98                   	cwde   
9f0063f5:	e3 ff                	jecxz  9f0063f6 <__x86.get_pc_thunk.cx+0x1340>
9f0063f7:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
9f0063fd:	41                   	inc    ecx
9f0063fe:	0e                   	push   cs
9f0063ff:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006405:	59                   	pop    ecx
9f006406:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006409:	04 00                	add    al,0x0
9f00640b:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
9f00640e:	00 00                	add    BYTE PTR [eax],al
9f006410:	54                   	push   esp
9f006411:	13 00                	adc    eax,DWORD PTR [eax]
9f006413:	00 95 e3 ff ff 57    	add    BYTE PTR [ebp+0x57ffffe3],dl
9f006419:	08 00                	or     BYTE PTR [eax],al
9f00641b:	00 00                	add    BYTE PTR [eax],al
9f00641d:	41                   	inc    ecx
9f00641e:	0e                   	push   cs
9f00641f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006425:	46                   	inc    esi
9f006426:	87 03                	xchg   DWORD PTR [ebx],eax
9f006428:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
9f00642b:	05 03 4a 08 c3       	add    eax,0xc3084a03
9f006430:	41                   	inc    ecx
9f006431:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
9f006435:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
9f006438:	04 00                	add    al,0x0
9f00643a:	00 00                	add    BYTE PTR [eax],al
9f00643c:	24 00                	and    al,0x0
9f00643e:	00 00                	add    BYTE PTR [eax],al
9f006440:	84 13                	test   BYTE PTR [ebx],dl
9f006442:	00 00                	add    BYTE PTR [eax],al
9f006444:	bc eb ff ff 6d       	mov    esp,0x6dffffeb
9f006449:	00 00                	add    BYTE PTR [eax],al
9f00644b:	00 00                	add    BYTE PTR [eax],al
9f00644d:	41                   	inc    ecx
9f00644e:	0e                   	push   cs
9f00644f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f006455:	45                   	inc    ebp
9f006456:	86 03                	xchg   BYTE PTR [ebx],al
9f006458:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
9f00645c:	c3                   	ret    
9f00645d:	41                   	inc    ecx
9f00645e:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
9f006462:	04 04                	add    al,0x4
9f006464:	20 00                	and    BYTE PTR [eax],al
9f006466:	00 00                	add    BYTE PTR [eax],al
9f006468:	ac                   	lods   al,BYTE PTR ds:[esi]
9f006469:	13 00                	adc    eax,DWORD PTR [eax]
9f00646b:	00 01                	add    BYTE PTR [ecx],al
9f00646d:	ec                   	in     al,dx
9f00646e:	ff                   	(bad)  
9f00646f:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
9f006472:	00 00                	add    BYTE PTR [eax],al
9f006474:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
9f006477:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
9f00647d:	44                   	inc    esp
9f00647e:	83 03 79             	add    DWORD PTR [ebx],0x79
9f006481:	c5 c3 0c             	(bad)  
9f006484:	04 04                	add    al,0x4
9f006486:	00 00                	add    BYTE PTR [eax],al
9f006488:	10 00                	adc    BYTE PTR [eax],al
9f00648a:	00 00                	add    BYTE PTR [eax],al
9f00648c:	d0 13                	rcl    BYTE PTR [ebx],1
9f00648e:	00 00                	add    BYTE PTR [eax],al
9f006490:	26                   	es
9f006491:	ec                   	in     al,dx
9f006492:	ff                   	(bad)  
9f006493:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
9f006496:	00 00                	add    BYTE PTR [eax],al
9f006498:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

9f00649c <.dynsym>:
	...
9f0064ac:	cb                   	retf   
9f0064ad:	01 00                	add    DWORD PTR [eax],eax
9f0064af:	00 62 2e             	add    BYTE PTR [edx+0x2e],ah
9f0064b2:	00 9f 26 02 00 00    	add    BYTE PTR [edi+0x226],bl
9f0064b8:	12 00                	adc    al,BYTE PTR [eax]
9f0064ba:	01 00                	add    DWORD PTR [eax],eax
9f0064bc:	05 02 00 00 e8       	add    eax,0xe8000002
9f0064c1:	39 00                	cmp    DWORD PTR [eax],eax
9f0064c3:	9f                   	lahf   
9f0064c4:	40                   	inc    eax
9f0064c5:	00 00                	add    BYTE PTR [eax],al
9f0064c7:	00 12                	add    BYTE PTR [edx],dl
9f0064c9:	00 01                	add    BYTE PTR [ecx],al
9f0064cb:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
9f0064ce:	00 00                	add    BYTE PTR [eax],al
9f0064d0:	4f                   	dec    edi
9f0064d1:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0064d3:	9f                   	lahf   
9f0064d4:	1c 00                	sbb    al,0x0
9f0064d6:	00 00                	add    BYTE PTR [eax],al
9f0064d8:	12 00                	adc    al,BYTE PTR [eax]
9f0064da:	01 00                	add    DWORD PTR [eax],eax
9f0064dc:	e3 00                	jecxz  9f0064de <__x86.get_pc_thunk.cx+0x1428>
9f0064de:	00 00                	add    BYTE PTR [eax],al
9f0064e0:	4c                   	dec    esp
9f0064e1:	15 00 9f 59 00       	adc    eax,0x599f00
9f0064e6:	00 00                	add    BYTE PTR [eax],al
9f0064e8:	12 00                	adc    al,BYTE PTR [eax]
9f0064ea:	01 00                	add    DWORD PTR [eax],eax
9f0064ec:	df 01                	fild   WORD PTR [ecx]
9f0064ee:	00 00                	add    BYTE PTR [eax],al
9f0064f0:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0064f1:	15 00 9f 54 00       	adc    eax,0x549f00
9f0064f6:	00 00                	add    BYTE PTR [eax],al
9f0064f8:	12 00                	adc    al,BYTE PTR [eax]
9f0064fa:	01 00                	add    DWORD PTR [eax],eax
9f0064fc:	3d 00 00 00 c8       	cmp    eax,0xc8000000
9f006501:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f006506:	00 00                	add    BYTE PTR [eax],al
9f006508:	12 00                	adc    al,BYTE PTR [eax]
9f00650a:	01 00                	add    DWORD PTR [eax],eax
9f00650c:	14 02                	adc    al,0x2
9f00650e:	00 00                	add    BYTE PTR [eax],al
9f006510:	e0 3a                	loopne 9f00654c <__x86.get_pc_thunk.cx+0x1496>
9f006512:	00 9f 59 00 00 00    	add    BYTE PTR [edi+0x59],bl
9f006518:	12 00                	adc    al,BYTE PTR [eax]
9f00651a:	01 00                	add    DWORD PTR [eax],eax
9f00651c:	e6 01                	out    0x1,al
9f00651e:	00 00                	add    BYTE PTR [eax],al
9f006520:	d4 37                	aam    0x37
9f006522:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
9f006528:	12 00                	adc    al,BYTE PTR [eax]
9f00652a:	01 00                	add    DWORD PTR [eax],eax
9f00652c:	53                   	push   ebx
9f00652d:	00 00                	add    BYTE PTR [eax],al
9f00652f:	00 ce                	add    dh,cl
9f006531:	06                   	push   es
9f006532:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f006538:	12 00                	adc    al,BYTE PTR [eax]
9f00653a:	01 00                	add    DWORD PTR [eax],eax
9f00653c:	b7 01                	mov    bh,0x1
9f00653e:	00 00                	add    BYTE PTR [eax],al
9f006540:	95                   	xchg   ebp,eax
9f006541:	2a 00                	sub    al,BYTE PTR [eax]
9f006543:	9f                   	lahf   
9f006544:	2e 00 00             	add    BYTE PTR cs:[eax],al
9f006547:	00 12                	add    BYTE PTR [edx],dl
9f006549:	00 01                	add    BYTE PTR [ecx],al
9f00654b:	00 65 01             	add    BYTE PTR [ebp+0x1],ah
9f00654e:	00 00                	add    BYTE PTR [eax],al
9f006550:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006551:	20 00                	and    BYTE PTR [eax],al
9f006553:	9f                   	lahf   
9f006554:	20 00                	and    BYTE PTR [eax],al
9f006556:	00 00                	add    BYTE PTR [eax],al
9f006558:	12 00                	adc    al,BYTE PTR [eax]
9f00655a:	01 00                	add    DWORD PTR [eax],eax
9f00655c:	d4 00                	aam    0x0
9f00655e:	00 00                	add    BYTE PTR [eax],al
9f006560:	68 12 00 9f bd       	push   0xbd9f0012
9f006565:	00 00                	add    BYTE PTR [eax],al
9f006567:	00 12                	add    BYTE PTR [edx],dl
9f006569:	00 01                	add    BYTE PTR [ecx],al
9f00656b:	00 92 00 00 00 3a    	add    BYTE PTR [edx+0x3a000000],dl
9f006571:	0c 00                	or     al,0x0
9f006573:	9f                   	lahf   
9f006574:	29 03                	sub    DWORD PTR [ebx],eax
9f006576:	00 00                	add    BYTE PTR [eax],al
9f006578:	12 00                	adc    al,BYTE PTR [eax]
9f00657a:	01 00                	add    DWORD PTR [eax],eax
9f00657c:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f00657d:	01 00                	add    DWORD PTR [eax],eax
9f00657f:	00 63 29             	add    BYTE PTR [ebx+0x29],ah
9f006582:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f006588:	12 00                	adc    al,BYTE PTR [eax]
9f00658a:	01 00                	add    DWORD PTR [eax],eax
9f00658c:	40                   	inc    eax
9f00658d:	01 00                	add    DWORD PTR [eax],eax
9f00658f:	00 ef                	add    bh,ch
9f006591:	1c 00                	sbb    al,0x0
9f006593:	9f                   	lahf   
9f006594:	20 00                	and    BYTE PTR [eax],al
9f006596:	00 00                	add    BYTE PTR [eax],al
9f006598:	12 00                	adc    al,BYTE PTR [eax]
9f00659a:	01 00                	add    DWORD PTR [eax],eax
9f00659c:	b2 00                	mov    dl,0x0
9f00659e:	00 00                	add    BYTE PTR [eax],al
9f0065a0:	bc 11 00 9f 26       	mov    esp,0x269f0011
9f0065a5:	00 00                	add    BYTE PTR [eax],al
9f0065a7:	00 12                	add    BYTE PTR [edx],dl
9f0065a9:	00 01                	add    BYTE PTR [ecx],al
9f0065ab:	00 90 01 00 00 2d    	add    BYTE PTR [eax+0x2d000001],dl
9f0065b1:	26 00 9f 20 00 00 00 	add    BYTE PTR es:[edi+0x20],bl
9f0065b8:	12 00                	adc    al,BYTE PTR [eax]
9f0065ba:	01 00                	add    DWORD PTR [eax],eax
9f0065bc:	f8                   	clc    
9f0065bd:	00 00                	add    BYTE PTR [eax],al
9f0065bf:	00 77 17             	add    BYTE PTR [edi+0x17],dh
9f0065c2:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f0065c8:	12 00                	adc    al,BYTE PTR [eax]
9f0065ca:	01 00                	add    DWORD PTR [eax],eax
9f0065cc:	46                   	inc    esi
9f0065cd:	01 00                	add    DWORD PTR [eax],eax
9f0065cf:	00 0c 20             	add    BYTE PTR [eax+eiz*1],cl
9f0065d2:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f0065d8:	12 00                	adc    al,BYTE PTR [eax]
9f0065da:	01 00                	add    DWORD PTR [eax],eax
9f0065dc:	3c 02                	cmp    al,0x2
9f0065de:	00 00                	add    BYTE PTR [eax],al
9f0065e0:	3c 3d                	cmp    al,0x3d
9f0065e2:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
9f0065e8:	12 00                	adc    al,BYTE PTR [eax]
9f0065ea:	01 00                	add    DWORD PTR [eax],eax
9f0065ec:	17                   	pop    ss
9f0065ed:	00 00                	add    BYTE PTR [eax],al
9f0065ef:	00 c3                	add    bl,al
9f0065f1:	02 00                	add    al,BYTE PTR [eax]
9f0065f3:	9f                   	lahf   
9f0065f4:	bb 00 00 00 12       	mov    ebx,0x12000000
9f0065f9:	00 01                	add    BYTE PTR [ecx],al
9f0065fb:	00 5b 01             	add    BYTE PTR [ebx+0x1],bl
9f0065fe:	00 00                	add    BYTE PTR [eax],al
9f006600:	52                   	push   edx
9f006601:	20 00                	and    BYTE PTR [eax],al
9f006603:	9f                   	lahf   
9f006604:	1d 00 00 00 12       	sbb    eax,0x12000000
9f006609:	00 01                	add    BYTE PTR [ecx],al
9f00660b:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
9f00660e:	00 00                	add    BYTE PTR [eax],al
9f006610:	90                   	nop
9f006611:	20 00                	and    BYTE PTR [eax],al
9f006613:	9f                   	lahf   
9f006614:	73 00                	jae    9f006616 <__x86.get_pc_thunk.cx+0x1560>
9f006616:	00 00                	add    BYTE PTR [eax],al
9f006618:	12 00                	adc    al,BYTE PTR [eax]
9f00661a:	01 00                	add    DWORD PTR [eax],eax
9f00661c:	7d 02                	jge    9f006620 <__x86.get_pc_thunk.cx+0x156a>
9f00661e:	00 00                	add    BYTE PTR [eax],al
9f006620:	fd                   	std    
9f006621:	46                   	inc    esi
9f006622:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
9f006628:	12 00                	adc    al,BYTE PTR [eax]
9f00662a:	01 00                	add    DWORD PTR [eax],eax
9f00662c:	4c                   	dec    esp
9f00662d:	02 00                	add    al,BYTE PTR [eax]
9f00662f:	00 dc                	add    ah,bl
9f006631:	3e 00 9f 9c 01 00 00 	add    BYTE PTR ds:[edi+0x19c],bl
9f006638:	12 00                	adc    al,BYTE PTR [eax]
9f00663a:	01 00                	add    DWORD PTR [eax],eax
9f00663c:	d9 00                	fld    DWORD PTR [eax]
9f00663e:	00 00                	add    BYTE PTR [eax],al
9f006640:	5e                   	pop    esi
9f006641:	14 00                	adc    al,0x0
9f006643:	9f                   	lahf   
9f006644:	cb                   	retf   
9f006645:	00 00                	add    BYTE PTR [eax],al
9f006647:	00 12                	add    BYTE PTR [edx],dl
9f006649:	00 01                	add    BYTE PTR [ecx],al
9f00664b:	00 b2 01 00 00 6c    	add    BYTE PTR [edx+0x6c000001],dh
9f006651:	2a 00                	sub    al,BYTE PTR [eax]
9f006653:	9f                   	lahf   
9f006654:	29 00                	sub    DWORD PTR [eax],eax
9f006656:	00 00                	add    BYTE PTR [eax],al
9f006658:	12 00                	adc    al,BYTE PTR [eax]
9f00665a:	01 00                	add    DWORD PTR [eax],eax
9f00665c:	24 02                	and    al,0x2
9f00665e:	00 00                	add    BYTE PTR [eax],al
9f006660:	c0 3b 00             	sar    BYTE PTR [ebx],0x0
9f006663:	9f                   	lahf   
9f006664:	1e                   	push   ds
9f006665:	00 00                	add    BYTE PTR [eax],al
9f006667:	00 12                	add    BYTE PTR [edx],dl
9f006669:	00 01                	add    BYTE PTR [ecx],al
9f00666b:	00 20                	add    BYTE PTR [eax],ah
9f00666d:	01 00                	add    DWORD PTR [eax],eax
9f00666f:	00 0c 19             	add    BYTE PTR [ecx+ebx*1],cl
9f006672:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
9f006678:	12 00                	adc    al,BYTE PTR [eax]
9f00667a:	01 00                	add    DWORD PTR [eax],eax
9f00667c:	82                   	(bad)  
9f00667d:	00 00                	add    BYTE PTR [eax],al
9f00667f:	00 70 0b             	add    BYTE PTR [eax+0xb],dh
9f006682:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f006688:	12 00                	adc    al,BYTE PTR [eax]
9f00668a:	01 00                	add    DWORD PTR [eax],eax
9f00668c:	fe 00                	inc    BYTE PTR [eax]
9f00668e:	00 00                	add    BYTE PTR [eax],al
9f006690:	e7 17                	out    0x17,eax
9f006692:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
9f006698:	12 00                	adc    al,BYTE PTR [eax]
9f00669a:	01 00                	add    DWORD PTR [eax],eax
9f00669c:	ef                   	out    dx,eax
9f00669d:	01 00                	add    DWORD PTR [eax],eax
9f00669f:	00 58 38             	add    BYTE PTR [eax+0x38],bl
9f0066a2:	00 9f 3e 00 00 00    	add    BYTE PTR [edi+0x3e],bl
9f0066a8:	12 00                	adc    al,BYTE PTR [eax]
9f0066aa:	01 00                	add    DWORD PTR [eax],eax
9f0066ac:	74 02                	je     9f0066b0 <__x86.get_pc_thunk.cx+0x15fa>
9f0066ae:	00 00                	add    BYTE PTR [eax],al
9f0066b0:	a0 43 00 9f 44       	mov    al,ds:0x449f0043
9f0066b5:	00 00                	add    BYTE PTR [eax],al
9f0066b7:	00 12                	add    BYTE PTR [edx],dl
9f0066b9:	00 01                	add    BYTE PTR [ecx],al
9f0066bb:	00 9e 00 00 00 8c    	add    BYTE PTR [esi-0x74000000],bl
9f0066c1:	0f 00 9f 20 00 00 00 	ltr    WORD PTR [edi+0x20]
9f0066c8:	12 00                	adc    al,BYTE PTR [eax]
9f0066ca:	01 00                	add    DWORD PTR [eax],eax
9f0066cc:	88 01                	mov    BYTE PTR [ecx],al
9f0066ce:	00 00                	add    BYTE PTR [eax],al
9f0066d0:	0c 7e                	or     al,0x7e
9f0066d2:	00 9f 04 00 00 00    	add    BYTE PTR [edi+0x4],bl
9f0066d8:	11 00                	adc    DWORD PTR [eax],eax
9f0066da:	13 00                	adc    eax,DWORD PTR [eax]
9f0066dc:	1b 01                	sbb    eax,DWORD PTR [ecx]
9f0066de:	00 00                	add    BYTE PTR [eax],al
9f0066e0:	c0 18 00             	rcr    BYTE PTR [eax],0x0
9f0066e3:	9f                   	lahf   
9f0066e4:	4c                   	dec    esp
9f0066e5:	00 00                	add    BYTE PTR [eax],al
9f0066e7:	00 12                	add    BYTE PTR [edx],dl
9f0066e9:	00 01                	add    BYTE PTR [ecx],al
9f0066eb:	00 68 00             	add    BYTE PTR [eax+0x0],ch
9f0066ee:	00 00                	add    BYTE PTR [eax],al
9f0066f0:	35 09 00 9f 26       	xor    eax,0x269f0009
9f0066f5:	00 00                	add    BYTE PTR [eax],al
9f0066f7:	00 12                	add    BYTE PTR [edx],dl
9f0066f9:	00 01                	add    BYTE PTR [ecx],al
9f0066fb:	00 9c 02 00 00 a9 47 	add    BYTE PTR [edx+eax*1+0x47a90000],bl
9f006702:	00 9f 57 08 00 00    	add    BYTE PTR [edi+0x857],bl
9f006708:	12 00                	adc    al,BYTE PTR [eax]
9f00670a:	01 00                	add    DWORD PTR [eax],eax
9f00670c:	66                   	data16
9f00670d:	02 00                	add    al,BYTE PTR [eax]
9f00670f:	00 80 43 00 9f 1d    	add    BYTE PTR [eax+0x1d9f0043],al
9f006715:	00 00                	add    BYTE PTR [eax],al
9f006717:	00 12                	add    BYTE PTR [edx],dl
9f006719:	00 01                	add    BYTE PTR [ecx],al
9f00671b:	00 76 01             	add    BYTE PTR [esi+0x1],dh
9f00671e:	00 00                	add    BYTE PTR [eax],al
9f006720:	04 7e                	add    al,0x7e
9f006722:	00 9f 04 00 00 00    	add    BYTE PTR [edi+0x4],bl
9f006728:	11 00                	adc    DWORD PTR [eax],eax
9f00672a:	13 00                	adc    eax,DWORD PTR [eax]
9f00672c:	7d 00                	jge    9f00672e <__x86.get_pc_thunk.cx+0x1678>
9f00672e:	00 00                	add    BYTE PTR [eax],al
9f006730:	15 0b 00 9f 26       	adc    eax,0x269f000b
9f006735:	00 00                	add    BYTE PTR [eax],al
9f006737:	00 12                	add    BYTE PTR [edx],dl
9f006739:	00 01                	add    BYTE PTR [ecx],al
9f00673b:	00 7f 01             	add    BYTE PTR [edi+0x1],bh
9f00673e:	00 00                	add    BYTE PTR [eax],al
9f006740:	08 7e 00             	or     BYTE PTR [esi+0x0],bh
9f006743:	9f                   	lahf   
9f006744:	04 00                	add    al,0x0
9f006746:	00 00                	add    BYTE PTR [eax],al
9f006748:	11 00                	adc    DWORD PTR [eax],eax
9f00674a:	13 00                	adc    eax,DWORD PTR [eax]
9f00674c:	2c 02                	sub    al,0x2
9f00674e:	00 00                	add    BYTE PTR [eax],al
9f006750:	e0 3b                	loopne 9f00678d <__x86.get_pc_thunk.cx+0x16d7>
9f006752:	00 9f 67 00 00 00    	add    BYTE PTR [edi+0x67],bl
9f006758:	12 00                	adc    al,BYTE PTR [eax]
9f00675a:	01 00                	add    DWORD PTR [eax],eax
9f00675c:	34 02                	xor    al,0x2
9f00675e:	00 00                	add    BYTE PTR [eax],al
9f006760:	1c 3d                	sbb    al,0x3d
9f006762:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f006768:	12 00                	adc    al,BYTE PTR [eax]
9f00676a:	01 00                	add    DWORD PTR [eax],eax
9f00676c:	ab                   	stos   DWORD PTR es:[edi],eax
9f00676d:	00 00                	add    BYTE PTR [eax],al
9f00676f:	00 93 11 00 9f 29    	add    BYTE PTR [ebx+0x299f0011],dl
9f006775:	00 00                	add    BYTE PTR [eax],al
9f006777:	00 12                	add    BYTE PTR [edx],dl
9f006779:	00 01                	add    BYTE PTR [ecx],al
9f00677b:	00 5a 00             	add    BYTE PTR [edx+0x0],bl
9f00677e:	00 00                	add    BYTE PTR [eax],al
9f006780:	f1                   	icebp  
9f006781:	06                   	push   es
9f006782:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
9f006788:	12 00                	adc    al,BYTE PTR [eax]
9f00678a:	01 00                	add    DWORD PTR [eax],eax
9f00678c:	97                   	xchg   edi,eax
9f00678d:	01 00                	add    DWORD PTR [eax],eax
9f00678f:	00 50 27             	add    BYTE PTR [eax+0x27],dl
9f006792:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f006798:	12 00                	adc    al,BYTE PTR [eax]
9f00679a:	01 00                	add    DWORD PTR [eax],eax
9f00679c:	10 00                	adc    BYTE PTR [eax],al
9f00679e:	00 00                	add    BYTE PTR [eax],al
9f0067a0:	b3 01                	mov    bl,0x1
9f0067a2:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
9f0067a8:	12 00                	adc    al,BYTE PTR [eax]
9f0067aa:	01 00                	add    DWORD PTR [eax],eax
9f0067ac:	16                   	push   ss
9f0067ad:	01 00                	add    DWORD PTR [eax],eax
9f0067af:	00 9d 18 00 9f 23    	add    BYTE PTR [ebp+0x239f0018],bl
9f0067b5:	00 00                	add    BYTE PTR [eax],al
9f0067b7:	00 12                	add    BYTE PTR [edx],dl
9f0067b9:	00 01                	add    BYTE PTR [ecx],al
9f0067bb:	00 bc 01 00 00 3d 2e 	add    BYTE PTR [ecx+eax*1+0x2e3d0000],bh
9f0067c2:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
9f0067c8:	12 00                	adc    al,BYTE PTR [eax]
9f0067ca:	01 00                	add    DWORD PTR [eax],eax
9f0067cc:	f6 01 00             	test   BYTE PTR [ecx],0x0
9f0067cf:	00 43 39             	add    BYTE PTR [ebx+0x39],al
9f0067d2:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f0067d8:	12 00                	adc    al,BYTE PTR [eax]
9f0067da:	01 00                	add    DWORD PTR [eax],eax
9f0067dc:	b7 00                	mov    bh,0x0
9f0067de:	00 00                	add    BYTE PTR [eax],al
9f0067e0:	00 00                	add    BYTE PTR [eax],al
9f0067e2:	13 00                	adc    eax,DWORD PTR [eax]
9f0067e4:	00 00                	add    BYTE PTR [eax],al
9f0067e6:	00 00                	add    BYTE PTR [eax],al
9f0067e8:	10 00                	adc    BYTE PTR [eax],al
9f0067ea:	01 00                	add    DWORD PTR [eax],eax
9f0067ec:	39 01                	cmp    DWORD PTR [ecx],eax
9f0067ee:	00 00                	add    BYTE PTR [eax],al
9f0067f0:	8b 1b                	mov    ebx,DWORD PTR [ebx]
9f0067f2:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f0067f8:	12 00                	adc    al,BYTE PTR [eax]
9f0067fa:	01 00                	add    DWORD PTR [eax],eax
9f0067fc:	86 02                	xchg   BYTE PTR [edx],al
9f0067fe:	00 00                	add    BYTE PTR [eax],al
9f006800:	1a 47 00             	sbb    al,BYTE PTR [edi+0x0]
9f006803:	9f                   	lahf   
9f006804:	3d 00 00 00 12       	cmp    eax,0x12000000
9f006809:	00 01                	add    BYTE PTR [ecx],al
9f00680b:	00 ab 01 00 00 4b    	add    BYTE PTR [ebx+0x4b000001],ch
9f006811:	2a 00                	sub    al,BYTE PTR [eax]
9f006813:	9f                   	lahf   
9f006814:	20 00                	and    BYTE PTR [eax],al
9f006816:	00 00                	add    BYTE PTR [eax],al
9f006818:	12 00                	adc    al,BYTE PTR [eax]
9f00681a:	01 00                	add    DWORD PTR [eax],eax
9f00681c:	53                   	push   ebx
9f00681d:	02 00                	add    al,BYTE PTR [eax]
9f00681f:	00 0e                	add    BYTE PTR [esi],cl
9f006821:	41                   	inc    ecx
9f006822:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
9f006828:	12 00                	adc    al,BYTE PTR [eax]
9f00682a:	01 00                	add    DWORD PTR [eax],eax
9f00682c:	cc                   	int3   
9f00682d:	00 00                	add    BYTE PTR [eax],al
9f00682f:	00 25 12 00 9f 43    	add    BYTE PTR ds:0x439f0012,ah
9f006835:	00 00                	add    BYTE PTR [eax],al
9f006837:	00 12                	add    BYTE PTR [edx],dl
9f006839:	00 01                	add    BYTE PTR [ecx],al
9f00683b:	00 9e 02 00 00 6d    	add    BYTE PTR [esi+0x6d000002],bl
9f006841:	50                   	push   eax
9f006842:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
9f006848:	12 00                	adc    al,BYTE PTR [eax]
9f00684a:	01 00                	add    DWORD PTR [eax],eax
9f00684c:	88 00                	mov    BYTE PTR [eax],al
9f00684e:	00 00                	add    BYTE PTR [eax],al
9f006850:	c4 0b                	les    ecx,FWORD PTR [ebx]
9f006852:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f006858:	12 00                	adc    al,BYTE PTR [eax]
9f00685a:	01 00                	add    DWORD PTR [eax],eax
9f00685c:	c7 00 00 00 e2 11    	mov    DWORD PTR [eax],0x11e20000
9f006862:	00 9f 43 00 00 00    	add    BYTE PTR [edi+0x43],bl
9f006868:	12 00                	adc    al,BYTE PTR [eax]
9f00686a:	01 00                	add    DWORD PTR [eax],eax
9f00686c:	fe 01                	inc    BYTE PTR [ecx]
9f00686e:	00 00                	add    BYTE PTR [eax],al
9f006870:	ca 39 00             	retf   0x39
9f006873:	9f                   	lahf   
9f006874:	1d 00 00 00 12       	sbb    eax,0x12000000
9f006879:	00 01                	add    BYTE PTR [ecx],al
9f00687b:	00 61 00             	add    BYTE PTR [ecx+0x0],ah
9f00687e:	00 00                	add    BYTE PTR [eax],al
9f006880:	de 08                	fimul  WORD PTR [eax]
9f006882:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f006888:	12 00                	adc    al,BYTE PTR [eax]
9f00688a:	01 00                	add    DWORD PTR [eax],eax
9f00688c:	f0 00 00             	lock add BYTE PTR [eax],al
9f00688f:	00 ef                	add    bh,ch
9f006891:	16                   	push   ss
9f006892:	00 9f 88 00 00 00    	add    BYTE PTR [edi+0x88],bl
9f006898:	12 00                	adc    al,BYTE PTR [eax]
9f00689a:	01 00                	add    DWORD PTR [eax],eax
9f00689c:	de 01                	fiadd  WORD PTR [ecx]
9f00689e:	00 00                	add    BYTE PTR [eax],al
9f0068a0:	a0 37 00 9f 33       	mov    al,ds:0x339f0037
9f0068a5:	00 00                	add    BYTE PTR [eax],al
9f0068a7:	00 12                	add    BYTE PTR [edx],dl
9f0068a9:	00 01                	add    BYTE PTR [ecx],al
9f0068ab:	00 e9                	add    cl,ch
9f0068ad:	00 00                	add    BYTE PTR [eax],al
9f0068af:	00 81 16 00 9f 37    	add    BYTE PTR [ecx+0x379f0016],al
9f0068b5:	00 00                	add    BYTE PTR [eax],al
9f0068b7:	00 12                	add    BYTE PTR [edx],dl
9f0068b9:	00 01                	add    BYTE PTR [ecx],al
9f0068bb:	00 08                	add    BYTE PTR [eax],cl
9f0068bd:	00 00                	add    BYTE PTR [eax],al
9f0068bf:	00 70 00             	add    BYTE PTR [eax+0x0],dh
9f0068c2:	00 9f 55 00 00 00    	add    BYTE PTR [edi+0x55],bl
9f0068c8:	12 00                	adc    al,BYTE PTR [eax]
9f0068ca:	01 00                	add    DWORD PTR [eax],eax
9f0068cc:	0c 02                	or     al,0x2
9f0068ce:	00 00                	add    BYTE PTR [eax],al
9f0068d0:	68 3a 00 9f 47       	push   0x479f003a
9f0068d5:	00 00                	add    BYTE PTR [eax],al
9f0068d7:	00 12                	add    BYTE PTR [edx],dl
9f0068d9:	00 01                	add    BYTE PTR [ecx],al
9f0068db:	00 6d 02             	add    BYTE PTR [ebp+0x2],ch
9f0068de:	00 00                	add    BYTE PTR [eax],al
9f0068e0:	54                   	push   esp
9f0068e1:	7e 00                	jle    9f0068e3 <__x86.get_pc_thunk.cx+0x182d>
9f0068e3:	9f                   	lahf   
9f0068e4:	04 00                	add    al,0x0
9f0068e6:	00 00                	add    BYTE PTR [eax],al
9f0068e8:	11 00                	adc    DWORD PTR [eax],eax
9f0068ea:	13 00                	adc    eax,DWORD PTR [eax]
9f0068ec:	09 01                	or     DWORD PTR [ecx],eax
9f0068ee:	00 00                	add    BYTE PTR [eax],al
9f0068f0:	74 18                	je     9f00690a <__x86.get_pc_thunk.cx+0x1854>
9f0068f2:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
9f0068f8:	12 00                	adc    al,BYTE PTR [eax]
9f0068fa:	01 00                	add    DWORD PTR [eax],eax
9f0068fc:	90                   	nop
9f0068fd:	02 00                	add    al,BYTE PTR [eax]
9f0068ff:	00 8c 47 00 9f 1d 00 	add    BYTE PTR [edi+eax*2+0x1d9f00],cl
9f006906:	00 00                	add    BYTE PTR [eax],al
9f006908:	12 00                	adc    al,BYTE PTR [eax]
9f00690a:	01 00                	add    DWORD PTR [eax],eax
9f00690c:	8d 00                	lea    eax,[eax]
9f00690e:	00 00                	add    BYTE PTR [eax],al
9f006910:	17                   	pop    ss
9f006911:	0c 00                	or     al,0x0
9f006913:	9f                   	lahf   
9f006914:	23 00                	and    eax,DWORD PTR [eax]
9f006916:	00 00                	add    BYTE PTR [eax],al
9f006918:	12 00                	adc    al,BYTE PTR [eax]
9f00691a:	01 00                	add    DWORD PTR [eax],eax
9f00691c:	a3 02 00 00 00       	mov    ds:0x2,eax
9f006921:	50                   	push   eax
9f006922:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
9f006928:	12 00                	adc    al,BYTE PTR [eax]
9f00692a:	01 00                	add    DWORD PTR [eax],eax
9f00692c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00692d:	00 00                	add    BYTE PTR [eax],al
9f00692f:	00 03                	add    BYTE PTR [ebx],al
9f006931:	0a 00                	or     al,BYTE PTR [eax]
9f006933:	9f                   	lahf   
9f006934:	93                   	xchg   ebx,eax
9f006935:	00 00                	add    BYTE PTR [eax],al
9f006937:	00 12                	add    BYTE PTR [edx],dl
9f006939:	00 01                	add    BYTE PTR [ecx],al
9f00693b:	00 34 01             	add    BYTE PTR [ecx+eax*1],dh
9f00693e:	00 00                	add    BYTE PTR [eax],al
9f006940:	6b 1b 00             	imul   ebx,DWORD PTR [ebx],0x0
9f006943:	9f                   	lahf   
9f006944:	20 00                	and    BYTE PTR [eax],al
9f006946:	00 00                	add    BYTE PTR [eax],al
9f006948:	12 00                	adc    al,BYTE PTR [eax]
9f00694a:	01 00                	add    DWORD PTR [eax],eax
9f00694c:	1c 00                	sbb    al,0x0
9f00694e:	00 00                	add    BYTE PTR [eax],al
9f006950:	97                   	xchg   edi,eax
9f006951:	04 00                	add    al,0x0
9f006953:	9f                   	lahf   
9f006954:	1a 00                	sbb    al,BYTE PTR [eax]
9f006956:	00 00                	add    BYTE PTR [eax],al
9f006958:	12 00                	adc    al,BYTE PTR [eax]
9f00695a:	01 00                	add    DWORD PTR [eax],eax
9f00695c:	a3 00 00 00 6d       	mov    ds:0x6d000000,eax
9f006961:	11 00                	adc    DWORD PTR [eax],eax
9f006963:	9f                   	lahf   
9f006964:	26 00 00             	add    BYTE PTR es:[eax],al
9f006967:	00 12                	add    BYTE PTR [edx],dl
9f006969:	00 01                	add    BYTE PTR [ecx],al
9f00696b:	00 54 01 00          	add    BYTE PTR [ecx+eax*1+0x0],dl
9f00696f:	00 2f                	add    BYTE PTR [edi],ch
9f006971:	20 00                	and    BYTE PTR [eax],al
9f006973:	9f                   	lahf   
9f006974:	23 00                	and    eax,DWORD PTR [eax]
9f006976:	00 00                	add    BYTE PTR [eax],al
9f006978:	12 00                	adc    al,BYTE PTR [eax]
9f00697a:	01 00                	add    DWORD PTR [eax],eax
9f00697c:	1d 02 00 00 6d       	sbb    eax,0x6d000002
9f006981:	3b 00                	cmp    eax,DWORD PTR [eax]
9f006983:	9f                   	lahf   
9f006984:	1a 00                	sbb    al,BYTE PTR [eax]
9f006986:	00 00                	add    BYTE PTR [eax],al
9f006988:	12 00                	adc    al,BYTE PTR [eax]
9f00698a:	01 00                	add    DWORD PTR [eax],eax
9f00698c:	72 00                	jb     9f00698e <__x86.get_pc_thunk.cx+0x18d8>
9f00698e:	00 00                	add    BYTE PTR [eax],al
9f006990:	87 09                	xchg   DWORD PTR [ecx],ecx
9f006992:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
9f006998:	12 00                	adc    al,BYTE PTR [eax]
9f00699a:	01 00                	add    DWORD PTR [eax],eax
9f00699c:	2a 00                	sub    al,BYTE PTR [eax]
9f00699e:	00 00                	add    BYTE PTR [eax],al
9f0069a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0069a1:	05 00 9f 5a 00       	add    eax,0x5a9f00
9f0069a6:	00 00                	add    BYTE PTR [eax],al
9f0069a8:	12 00                	adc    al,BYTE PTR [eax]
9f0069aa:	01 00                	add    DWORD PTR [eax],eax
9f0069ac:	26 01 00             	add    DWORD PTR es:[eax],eax
9f0069af:	00 00                	add    BYTE PTR [eax],al
9f0069b1:	1b 00                	sbb    eax,DWORD PTR [eax]
9f0069b3:	9f                   	lahf   
9f0069b4:	4f                   	dec    edi
9f0069b5:	00 00                	add    BYTE PTR [eax],al
9f0069b7:	00 12                	add    BYTE PTR [edx],dl
9f0069b9:	00 01                	add    BYTE PTR [ecx],al
9f0069bb:	00 01                	add    BYTE PTR [ecx],al
9f0069bd:	00 00                	add    BYTE PTR [eax],al
9f0069bf:	00 00                	add    BYTE PTR [eax],al
9f0069c1:	00 00                	add    BYTE PTR [eax],al
9f0069c3:	9f                   	lahf   
9f0069c4:	38 00                	cmp    BYTE PTR [eax],al
9f0069c6:	00 00                	add    BYTE PTR [eax],al
9f0069c8:	12 00                	adc    al,BYTE PTR [eax]
9f0069ca:	01 00                	add    DWORD PTR [eax],eax
9f0069cc:	44                   	inc    esp
9f0069cd:	02 00                	add    al,BYTE PTR [eax]
9f0069cf:	00 bc 3e 00 9f 1d 00 	add    BYTE PTR [esi+edi*1+0x1d9f00],bh
9f0069d6:	00 00                	add    BYTE PTR [eax],al
9f0069d8:	12 00                	adc    al,BYTE PTR [eax]
9f0069da:	01 00                	add    DWORD PTR [eax],eax
9f0069dc:	5b                   	pop    ebx
9f0069dd:	02 00                	add    al,BYTE PTR [eax]
9f0069df:	00 4e 42             	add    BYTE PTR [esi+0x42],cl
9f0069e2:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
9f0069e8:	12 00                	adc    al,BYTE PTR [eax]
9f0069ea:	01 00                	add    DWORD PTR [eax],eax
9f0069ec:	77 00                	ja     9f0069ee <__x86.get_pc_thunk.cx+0x1938>
9f0069ee:	00 00                	add    BYTE PTR [eax],al
9f0069f0:	c0 0a 00             	ror    BYTE PTR [edx],0x0
9f0069f3:	9f                   	lahf   
9f0069f4:	20 00                	and    BYTE PTR [eax],al
9f0069f6:	00 00                	add    BYTE PTR [eax],al
9f0069f8:	12 00                	adc    al,BYTE PTR [eax]
9f0069fa:	01 00                	add    DWORD PTR [eax],eax
9f0069fc:	21 00                	and    DWORD PTR [eax],eax
9f0069fe:	00 00                	add    BYTE PTR [eax],al
9f006a00:	b4 04                	mov    ah,0x4
9f006a02:	00 9f ba 00 00 00    	add    BYTE PTR [edi+0xba],bl
9f006a08:	12 00                	adc    al,BYTE PTR [eax]
9f006a0a:	01 00                	add    DWORD PTR [eax],eax
9f006a0c:	9f                   	lahf   
9f006a0d:	01 00                	add    DWORD PTR [eax],eax
9f006a0f:	00 73 27             	add    BYTE PTR [ebx+0x27],dh
9f006a12:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
9f006a18:	12 00                	adc    al,BYTE PTR [eax]
9f006a1a:	01 00                	add    DWORD PTR [eax],eax

Disassembly of section .dynstr:

9f006a1c <.dynstr>:
9f006a1c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006a1f:	72 63                	jb     9f006a84 <__x86.get_pc_thunk.cx+0x19ce>
9f006a21:	68 72 00 73 74       	push   0x74730072
9f006a26:	72 63                	jb     9f006a8b <__x86.get_pc_thunk.cx+0x19d5>
9f006a28:	73 70                	jae    9f006a9a <__x86.get_pc_thunk.cx+0x19e4>
9f006a2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a2b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006a2e:	72 74                	jb     9f006aa4 <__x86.get_pc_thunk.cx+0x19ee>
9f006a30:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a31:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
9f006a34:	74 6f                	je     9f006aa5 <__x86.get_pc_thunk.cx+0x19ef>
9f006a36:	61                   	popa   
9f006a37:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
9f006a3a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a3b:	69 00 6d 6f 76 65    	imul   eax,DWORD PTR [eax],0x65766f6d
9f006a41:	54                   	push   esp
9f006a42:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a43:	58                   	pop    eax
9f006a44:	59                   	pop    ecx
9f006a45:	00 73 61             	add    BYTE PTR [ebx+0x61],dh
9f006a48:	76 65                	jbe    9f006aaf <__x86.get_pc_thunk.cx+0x19f9>
9f006a4a:	43                   	inc    ebx
9f006a4b:	75 72                	jne    9f006abf <__x86.get_pc_thunk.cx+0x1a09>
9f006a4d:	73 6f                	jae    9f006abe <__x86.get_pc_thunk.cx+0x1a08>
9f006a4f:	72 50                	jb     9f006aa1 <__x86.get_pc_thunk.cx+0x19eb>
9f006a51:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a52:	73 69                	jae    9f006abd <__x86.get_pc_thunk.cx+0x1a07>
9f006a54:	74 69                	je     9f006abf <__x86.get_pc_thunk.cx+0x1a09>
9f006a56:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a57:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a58:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006a5b:	73 74                	jae    9f006ad1 <__x86.get_pc_thunk.cx+0x1a1b>
9f006a5d:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a5e:	72 65                	jb     9f006ac5 <__x86.get_pc_thunk.cx+0x1a0f>
9f006a60:	43                   	inc    ebx
9f006a61:	75 72                	jne    9f006ad5 <__x86.get_pc_thunk.cx+0x1a1f>
9f006a63:	73 6f                	jae    9f006ad4 <__x86.get_pc_thunk.cx+0x1a1e>
9f006a65:	72 50                	jb     9f006ab7 <__x86.get_pc_thunk.cx+0x1a01>
9f006a67:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a68:	73 69                	jae    9f006ad3 <__x86.get_pc_thunk.cx+0x1a1d>
9f006a6a:	74 69                	je     9f006ad5 <__x86.get_pc_thunk.cx+0x1a1f>
9f006a6c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a6d:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a6e:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006a71:	74 65                	je     9f006ad8 <__x86.get_pc_thunk.cx+0x1a22>
9f006a73:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a74:	76 00                	jbe    9f006a76 <__x86.get_pc_thunk.cx+0x19c0>
9f006a76:	73 65                	jae    9f006add <__x86.get_pc_thunk.cx+0x1a27>
9f006a78:	74 65                	je     9f006adf <__x86.get_pc_thunk.cx+0x1a29>
9f006a7a:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a7b:	76 00                	jbe    9f006a7d <__x86.get_pc_thunk.cx+0x19c7>
9f006a7d:	67                   	addr16
9f006a7e:	65                   	gs
9f006a7f:	74 63                	je     9f006ae4 <__x86.get_pc_thunk.cx+0x1a2e>
9f006a81:	77 64                	ja     9f006ae7 <__x86.get_pc_thunk.cx+0x1a31>
9f006a83:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006a86:	74 64                	je     9f006aec <__x86.get_pc_thunk.cx+0x1a36>
9f006a88:	69 72 00 66 72 65 6f 	imul   esi,DWORD PTR [edx+0x0],0x6f657266
9f006a8f:	70 65                	jo     9f006af6 <__x86.get_pc_thunk.cx+0x1a40>
9f006a91:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006a92:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
9f006a95:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006a96:	73 65                	jae    9f006afd <__x86.get_pc_thunk.cx+0x1a47>
9f006a98:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006a9b:	61                   	popa   
9f006a9c:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
9f006aa0:	69 74 65 00 73 65 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x6b656573
9f006aa7:	6b 
9f006aa8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006aab:	61                   	popa   
9f006aac:	74 00                	je     9f006aae <__x86.get_pc_thunk.cx+0x19f8>
9f006aae:	72 65                	jb     9f006b15 <__x86.get_pc_thunk.cx+0x1a5f>
9f006ab0:	73 6f                	jae    9f006b21 <__x86.get_pc_thunk.cx+0x1a6b>
9f006ab2:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ab3:	76 65                	jbe    9f006b1a <__x86.get_pc_thunk.cx+0x1a64>
9f006ab5:	50                   	push   eax
9f006ab6:	61                   	popa   
9f006ab7:	74 68                	je     9f006b21 <__x86.get_pc_thunk.cx+0x1a6b>
9f006ab9:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
9f006abd:	6c                   	ins    BYTE PTR es:[edi],dx
9f006abe:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006ac1:	74 6c                	je     9f006b2f <__x86.get_pc_thunk.cx+0x1a79>
9f006ac3:	69 6e 65 00 75 6e 6c 	imul   ebp,DWORD PTR [esi+0x65],0x6c6e7500
9f006aca:	69 6e 6b 00 70 75 74 	imul   ebp,DWORD PTR [esi+0x6b],0x74757000
9f006ad1:	73 00                	jae    9f006ad3 <__x86.get_pc_thunk.cx+0x1a1d>
9f006ad3:	73 79                	jae    9f006b4e <__x86.get_pc_thunk.cx+0x1a98>
9f006ad5:	73 45                	jae    9f006b1c <__x86.get_pc_thunk.cx+0x1a66>
9f006ad7:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006ad8:	74 65                	je     9f006b3f <__x86.get_pc_thunk.cx+0x1a89>
9f006ada:	72 5f                	jb     9f006b3b <__x86.get_pc_thunk.cx+0x1a85>
9f006adc:	56                   	push   esi
9f006add:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
9f006ae2:	00 70 75             	add    BYTE PTR [eax+0x75],dh
9f006ae5:	74 63                	je     9f006b4a <__x86.get_pc_thunk.cx+0x1a94>
9f006ae7:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006aea:	74 63                	je     9f006b4f <__x86.get_pc_thunk.cx+0x1a99>
9f006aec:	68 61 72 00 67       	push   0x67007261
9f006af1:	65                   	gs
9f006af2:	74 73                	je     9f006b67 <__x86.get_pc_thunk.cx+0x1ab1>
9f006af4:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006af8:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f006afb:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006afc:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
9f006b03:	74 
9f006b04:	00 70 72             	add    BYTE PTR [eax+0x72],dh
9f006b07:	69 6e 74 64 00 73 6c 	imul   ebp,DWORD PTR [esi+0x74],0x6c730064
9f006b0e:	65                   	gs
9f006b0f:	65                   	gs
9f006b10:	70 4d                	jo     9f006b5f <__x86.get_pc_thunk.cx+0x1aa9>
9f006b12:	53                   	push   ebx
9f006b13:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
9f006b16:	65                   	gs
9f006b17:	65                   	gs
9f006b18:	70 00                	jo     9f006b1a <__x86.get_pc_thunk.cx+0x1a64>
9f006b1a:	73 6c                	jae    9f006b88 <__x86.get_pc_thunk.cx+0x1ad2>
9f006b1c:	65                   	gs
9f006b1d:	65                   	gs
9f006b1e:	70 54                	jo     9f006b74 <__x86.get_pc_thunk.cx+0x1abe>
9f006b20:	69 63 6b 73 00 6d 6f 	imul   esp,DWORD PTR [ebx+0x6b],0x6f6d0073
9f006b27:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
9f006b2e:	6e 
9f006b2f:	61                   	popa   
9f006b30:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b31:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
9f006b34:	72 6b                	jb     9f006ba1 <__x86.get_pc_thunk.cx+0x1aeb>
9f006b36:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
9f006b39:	65 63 00             	arpl   WORD PTR gs:[eax],ax
9f006b3c:	65                   	gs
9f006b3d:	78 65                	js     9f006ba4 <__x86.get_pc_thunk.cx+0x1aee>
9f006b3f:	63 62 00             	arpl   WORD PTR [edx+0x0],sp
9f006b42:	65                   	gs
9f006b43:	78 65                	js     9f006baa <__x86.get_pc_thunk.cx+0x1af4>
9f006b45:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
9f006b48:	77 61                	ja     9f006bab <__x86.get_pc_thunk.cx+0x1af5>
9f006b4a:	69 74 70 69 64 00 65 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x78650064
9f006b51:	78 
9f006b52:	69 74 00 73 65 74 63 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x77637465
9f006b59:	77 
9f006b5a:	64 00 73 70          	add    BYTE PTR fs:[ebx+0x70],dh
9f006b5e:	6c                   	ins    BYTE PTR es:[edi],dx
9f006b5f:	69 74 00 63 6d 64 6c 	imul   esi,DWORD PTR [eax+eax*1+0x63],0x696c646d
9f006b66:	69 
9f006b67:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006b68:	65                   	gs
9f006b69:	54                   	push   esp
9f006b6a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b6b:	41                   	inc    ecx
9f006b6c:	72 67                	jb     9f006bd5 <__x86.get_pc_thunk.cx+0x1b1f>
9f006b6e:	76 00                	jbe    9f006b70 <__x86.get_pc_thunk.cx+0x1aba>
9f006b70:	73 65                	jae    9f006bd7 <__x86.get_pc_thunk.cx+0x1b21>
9f006b72:	74 53                	je     9f006bc7 <__x86.get_pc_thunk.cx+0x1b11>
9f006b74:	54                   	push   esp
9f006b75:	44                   	inc    esp
9f006b76:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
9f006b7a:	65                   	gs
9f006b7b:	41                   	inc    ecx
9f006b7c:	44                   	inc    esp
9f006b7d:	75 6d                	jne    9f006bec <__x86.get_pc_thunk.cx+0x1b36>
9f006b7f:	70 00                	jo     9f006b81 <__x86.get_pc_thunk.cx+0x1acb>
9f006b81:	73 65                	jae    9f006be8 <__x86.get_pc_thunk.cx+0x1b32>
9f006b83:	74 70                	je     9f006bf5 <__x86.get_pc_thunk.cx+0x1b3f>
9f006b85:	72 69                	jb     9f006bf0 <__x86.get_pc_thunk.cx+0x1b3a>
9f006b87:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006b88:	72 69                	jb     9f006bf3 <__x86.get_pc_thunk.cx+0x1b3d>
9f006b8a:	74 79                	je     9f006c05 <__x86.get_pc_thunk.cx+0x1b4f>
9f006b8c:	00 6d 6d             	add    BYTE PTR [ebp+0x6d],ch
9f006b8f:	61                   	popa   
9f006b90:	70 00                	jo     9f006b92 <__x86.get_pc_thunk.cx+0x1adc>
9f006b92:	68 65 61 70 42       	push   0x42706165
9f006b97:	61                   	popa   
9f006b98:	73 65                	jae    9f006bff <__x86.get_pc_thunk.cx+0x1b49>
9f006b9a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
9f006b9d:	61                   	popa   
9f006b9e:	70 43                	jo     9f006be3 <__x86.get_pc_thunk.cx+0x1b2d>
9f006ba0:	75 72                	jne    9f006c14 <__x86.get_pc_thunk.cx+0x1b5e>
9f006ba2:	72 00                	jb     9f006ba4 <__x86.get_pc_thunk.cx+0x1aee>
9f006ba4:	68 65 61 70 45       	push   0x45706165
9f006ba9:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006baa:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
9f006bae:	6c                   	ins    BYTE PTR es:[edi],dx
9f006baf:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bb0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bb1:	63 00                	arpl   WORD PTR [eax],ax
9f006bb3:	72 65                	jb     9f006c1a <__x86.get_pc_thunk.cx+0x1b64>
9f006bb5:	61                   	popa   
9f006bb6:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bb7:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bb8:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bb9:	63 00                	arpl   WORD PTR [eax],ax
9f006bbb:	66                   	data16
9f006bbc:	72 65                	jb     9f006c23 <__x86.get_pc_thunk.cx+0x1b6d>
9f006bbe:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
9f006bc2:	6d                   	ins    DWORD PTR es:[edi],dx
9f006bc3:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f006bc6:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
9f006bc9:	6d                   	ins    DWORD PTR es:[edi],dx
9f006bca:	73 65                	jae    9f006c31 <__x86.get_pc_thunk.cx+0x1b7b>
9f006bcc:	74 00                	je     9f006bce <__x86.get_pc_thunk.cx+0x1b18>
9f006bce:	70 69                	jo     9f006c39 <__x86.get_pc_thunk.cx+0x1b83>
9f006bd0:	70 65                	jo     9f006c37 <__x86.get_pc_thunk.cx+0x1b81>
9f006bd2:	00 64 75 70          	add    BYTE PTR [ebp+esi*2+0x70],ah
9f006bd6:	33 00                	xor    eax,DWORD PTR [eax]
9f006bd8:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
9f006bdb:	6c                   	ins    BYTE PTR es:[edi],dx
9f006bdc:	64                   	fs
9f006bdd:	50                   	push   eax
9f006bde:	72 6f                	jb     9f006c4f <__x86.get_pc_thunk.cx+0x1b99>
9f006be0:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f006be3:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006be5:	54                   	push   esp
9f006be6:	00 62 75             	add    BYTE PTR [edx+0x75],ah
9f006be9:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
9f006bf0:	72 
9f006bf1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006bf2:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
9f006bf5:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f006bf7:	54                   	push   esp
9f006bf8:	73 00                	jae    9f006bfa <__x86.get_pc_thunk.cx+0x1b44>
9f006bfa:	73 70                	jae    9f006c6c <__x86.get_pc_thunk.cx+0x1bb6>
9f006bfc:	72 69                	jb     9f006c67 <__x86.get_pc_thunk.cx+0x1bb1>
9f006bfe:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f006bff:	74 66                	je     9f006c67 <__x86.get_pc_thunk.cx+0x1bb1>
9f006c01:	00 72 65             	add    BYTE PTR [edx+0x65],dh
9f006c04:	73 65                	jae    9f006c6b <__x86.get_pc_thunk.cx+0x1bb5>
9f006c06:	74 52                	je     9f006c5a <__x86.get_pc_thunk.cx+0x1ba4>
9f006c08:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c09:	77 00                	ja     9f006c0b <__x86.get_pc_thunk.cx+0x1b55>
9f006c0b:	73 74                	jae    9f006c81 <__x86.get_pc_thunk.cx+0x1bcb>
9f006c0d:	72 63                	jb     9f006c72 <__x86.get_pc_thunk.cx+0x1bbc>
9f006c0f:	61                   	popa   
9f006c10:	74 00                	je     9f006c12 <__x86.get_pc_thunk.cx+0x1b5c>
9f006c12:	73 74                	jae    9f006c88 <__x86.get_pc_thunk.cx+0x1bd2>
9f006c14:	72 6e                	jb     9f006c84 <__x86.get_pc_thunk.cx+0x1bce>
9f006c16:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
9f006c19:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c1c:	72 63                	jb     9f006c81 <__x86.get_pc_thunk.cx+0x1bcb>
9f006c1e:	6d                   	ins    DWORD PTR es:[edi],dx
9f006c1f:	70 00                	jo     9f006c21 <__x86.get_pc_thunk.cx+0x1b6b>
9f006c21:	73 74                	jae    9f006c97 <__x86.get_pc_thunk.cx+0x1be1>
9f006c23:	72 63                	jb     9f006c88 <__x86.get_pc_thunk.cx+0x1bd2>
9f006c25:	70 79                	jo     9f006ca0 <__x86.get_pc_thunk.cx+0x1bea>
9f006c27:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c2a:	72 63                	jb     9f006c8f <__x86.get_pc_thunk.cx+0x1bd9>
9f006c2c:	70 79                	jo     9f006ca7 <__x86.get_pc_thunk.cx+0x1bf1>
9f006c2e:	63 00                	arpl   WORD PTR [eax],ax
9f006c30:	73 74                	jae    9f006ca6 <__x86.get_pc_thunk.cx+0x1bf0>
9f006c32:	72 69                	jb     9f006c9d <__x86.get_pc_thunk.cx+0x1be7>
9f006c34:	73 6e                	jae    9f006ca4 <__x86.get_pc_thunk.cx+0x1bee>
9f006c36:	75 6d                	jne    9f006ca5 <__x86.get_pc_thunk.cx+0x1bef>
9f006c38:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c3b:	72 6c                	jb     9f006ca9 <__x86.get_pc_thunk.cx+0x1bf3>
9f006c3d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f006c3f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c42:	72 6e                	jb     9f006cb2 <__x86.get_pc_thunk.cx+0x1bfc>
9f006c44:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c45:	65 6e                	outs   dx,BYTE PTR gs:[esi]
9f006c47:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c4a:	72 6e                	jb     9f006cba <__x86.get_pc_thunk.cx+0x1c04>
9f006c4c:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
9f006c4f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c52:	72 6e                	jb     9f006cc2 <__x86.get_pc_thunk.cx+0x1c0c>
9f006c54:	63 70 79             	arpl   WORD PTR [eax+0x79],si
9f006c57:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c5a:	72 74                	jb     9f006cd0 <__x86.get_pc_thunk.cx+0x1c1a>
9f006c5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c5d:	75 6c                	jne    9f006ccb <__x86.get_pc_thunk.cx+0x1c15>
9f006c5f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c62:	72 6c                	jb     9f006cd0 <__x86.get_pc_thunk.cx+0x1c1a>
9f006c64:	65                   	gs
9f006c65:	66                   	data16
9f006c66:	74 00                	je     9f006c68 <__x86.get_pc_thunk.cx+0x1bb2>
9f006c68:	73 74                	jae    9f006cde <__x86.get_pc_thunk.cx+0x1c28>
9f006c6a:	72 74                	jb     9f006ce0 <__x86.get_pc_thunk.cx+0x1c2a>
9f006c6c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006c6d:	6c                   	ins    BYTE PTR es:[edi],dx
9f006c6e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c71:	72 74                	jb     9f006ce7 <__x86.get_pc_thunk.cx+0x1c31>
9f006c73:	72 69                	jb     9f006cde <__x86.get_pc_thunk.cx+0x1c28>
9f006c75:	6d                   	ins    DWORD PTR es:[edi],dx
9f006c76:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
9f006c79:	72 72                	jb     9f006ced <__x86.get_pc_thunk.cx+0x1c37>
9f006c7b:	65                   	gs
9f006c7c:	70 6c                	jo     9f006cea <__x86.get_pc_thunk.cx+0x1c34>
9f006c7e:	61                   	popa   
9f006c7f:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
9f006c82:	73 74                	jae    9f006cf8 <__x86.get_pc_thunk.cx+0x1c42>
9f006c84:	72 73                	jb     9f006cf9 <__x86.get_pc_thunk.cx+0x1c43>
9f006c86:	74 72                	je     9f006cfa <__x86.get_pc_thunk.cx+0x1c44>
9f006c88:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f006c8c:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
9f006c90:	67                   	addr16
9f006c91:	65                   	gs
9f006c92:	74 74                	je     9f006d08 <__x86.get_pc_thunk.cx+0x1c52>
9f006c94:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
9f006c9b:	74 69                	je     9f006d06 <__x86.get_pc_thunk.cx+0x1c50>
9f006c9d:	6d                   	ins    DWORD PTR es:[edi],dx
9f006c9e:	65                   	gs
9f006c9f:	5f                   	pop    edi
9f006ca0:	72 00                	jb     9f006ca2 <__x86.get_pc_thunk.cx+0x1bec>
9f006ca2:	6c                   	ins    BYTE PTR es:[edi],dx
9f006ca3:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f006ca4:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f006ca7:	74 69                	je     9f006d12 <__x86.get_pc_thunk.cx+0x1c5c>
9f006ca9:	6d                   	ins    DWORD PTR es:[edi],dx
9f006caa:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
9f006caf:	61                   	popa   
9f006cb0:	6c                   	ins    BYTE PTR es:[edi],dx
9f006cb1:	74 69                	je     9f006d1c <__x86.get_pc_thunk.cx+0x1c66>
9f006cb3:	6d                   	ins    DWORD PTR es:[edi],dx
9f006cb4:	65                   	gs
9f006cb5:	5f                   	pop    edi
9f006cb6:	72 00                	jb     9f006cb8 <__x86.get_pc_thunk.cx+0x1c02>
9f006cb8:	6d                   	ins    DWORD PTR es:[edi],dx
9f006cb9:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
9f006cbe:	00 67 65             	add    BYTE PTR [edi+0x65],ah
9f006cc1:	74 74                	je     9f006d37 <__x86.get_pc_thunk.cx+0x1c81>
9f006cc3:	69                   	.byte 0x69
9f006cc4:	6d                   	ins    DWORD PTR es:[edi],dx
9f006cc5:	65                   	gs
	...

Disassembly of section .hash:

9f006cc8 <.hash>:
9f006cc8:	43                   	inc    ebx
9f006cc9:	00 00                	add    BYTE PTR [eax],al
9f006ccb:	00 58 00             	add    BYTE PTR [eax+0x0],bl
	...
9f006cda:	00 00                	add    BYTE PTR [eax],al
9f006cdc:	21 00                	and    DWORD PTR [eax],eax
9f006cde:	00 00                	add    BYTE PTR [eax],al
9f006ce0:	52                   	push   edx
9f006ce1:	00 00                	add    BYTE PTR [eax],al
9f006ce3:	00 46 00             	add    BYTE PTR [esi+0x0],al
9f006ce6:	00 00                	add    BYTE PTR [eax],al
9f006ce8:	45                   	inc    ebp
9f006ce9:	00 00                	add    BYTE PTR [eax],al
9f006ceb:	00 1f                	add    BYTE PTR [edi],bl
9f006ced:	00 00                	add    BYTE PTR [eax],al
9f006cef:	00 18                	add    BYTE PTR [eax],bl
9f006cf1:	00 00                	add    BYTE PTR [eax],al
9f006cf3:	00 00                	add    BYTE PTR [eax],al
9f006cf5:	00 00                	add    BYTE PTR [eax],al
9f006cf7:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
9f006cfa:	00 00                	add    BYTE PTR [eax],al
9f006cfc:	2b 00                	sub    eax,DWORD PTR [eax]
9f006cfe:	00 00                	add    BYTE PTR [eax],al
9f006d00:	00 00                	add    BYTE PTR [eax],al
9f006d02:	00 00                	add    BYTE PTR [eax],al
9f006d04:	51                   	push   ecx
9f006d05:	00 00                	add    BYTE PTR [eax],al
9f006d07:	00 1d 00 00 00 3d    	add    BYTE PTR ds:0x3d000000,bl
9f006d0d:	00 00                	add    BYTE PTR [eax],al
9f006d0f:	00 00                	add    BYTE PTR [eax],al
9f006d11:	00 00                	add    BYTE PTR [eax],al
9f006d13:	00 2a                	add    BYTE PTR [edx],ch
9f006d15:	00 00                	add    BYTE PTR [eax],al
9f006d17:	00 3c 00             	add    BYTE PTR [eax+eax*1],bh
9f006d1a:	00 00                	add    BYTE PTR [eax],al
9f006d1c:	15 00 00 00 00       	adc    eax,0x0
9f006d21:	00 00                	add    BYTE PTR [eax],al
9f006d23:	00 3a                	add    BYTE PTR [edx],bh
9f006d25:	00 00                	add    BYTE PTR [eax],al
9f006d27:	00 4b 00             	add    BYTE PTR [ebx+0x0],cl
9f006d2a:	00 00                	add    BYTE PTR [eax],al
9f006d2c:	01 00                	add    DWORD PTR [eax],eax
9f006d2e:	00 00                	add    BYTE PTR [eax],al
9f006d30:	36 00 00             	add    BYTE PTR ss:[eax],al
9f006d33:	00 55 00             	add    BYTE PTR [ebp+0x0],dl
9f006d36:	00 00                	add    BYTE PTR [eax],al
9f006d38:	2d 00 00 00 00       	sub    eax,0x0
9f006d3d:	00 00                	add    BYTE PTR [eax],al
9f006d3f:	00 44 00 00          	add    BYTE PTR [eax+eax*1+0x0],al
9f006d43:	00 00                	add    BYTE PTR [eax],al
9f006d45:	00 00                	add    BYTE PTR [eax],al
9f006d47:	00 53 00             	add    BYTE PTR [ebx+0x0],dl
9f006d4a:	00 00                	add    BYTE PTR [eax],al
9f006d4c:	3f                   	aas    
9f006d4d:	00 00                	add    BYTE PTR [eax],al
9f006d4f:	00 1e                	add    BYTE PTR [esi],bl
9f006d51:	00 00                	add    BYTE PTR [eax],al
9f006d53:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
9f006d56:	00 00                	add    BYTE PTR [eax],al
9f006d58:	1a 00                	sbb    al,BYTE PTR [eax]
9f006d5a:	00 00                	add    BYTE PTR [eax],al
9f006d5c:	34 00                	xor    al,0x0
9f006d5e:	00 00                	add    BYTE PTR [eax],al
9f006d60:	00 00                	add    BYTE PTR [eax],al
9f006d62:	00 00                	add    BYTE PTR [eax],al
9f006d64:	42                   	inc    edx
9f006d65:	00 00                	add    BYTE PTR [eax],al
9f006d67:	00 47 00             	add    BYTE PTR [edi+0x0],al
9f006d6a:	00 00                	add    BYTE PTR [eax],al
9f006d6c:	30 00                	xor    BYTE PTR [eax],al
9f006d6e:	00 00                	add    BYTE PTR [eax],al
9f006d70:	43                   	inc    ebx
9f006d71:	00 00                	add    BYTE PTR [eax],al
9f006d73:	00 4f 00             	add    BYTE PTR [edi+0x0],cl
9f006d76:	00 00                	add    BYTE PTR [eax],al
9f006d78:	56                   	push   esi
9f006d79:	00 00                	add    BYTE PTR [eax],al
9f006d7b:	00 31                	add    BYTE PTR [ecx],dh
9f006d7d:	00 00                	add    BYTE PTR [eax],al
9f006d7f:	00 50 00             	add    BYTE PTR [eax+0x0],dl
9f006d82:	00 00                	add    BYTE PTR [eax],al
9f006d84:	4e                   	dec    esi
	...
9f006d99:	00 00                	add    BYTE PTR [eax],al
9f006d9b:	00 48 00             	add    BYTE PTR [eax+0x0],cl
	...
9f006da6:	00 00                	add    BYTE PTR [eax],al
9f006da8:	3e 00 00             	add    BYTE PTR ds:[eax],al
9f006dab:	00 00                	add    BYTE PTR [eax],al
9f006dad:	00 00                	add    BYTE PTR [eax],al
9f006daf:	00 0e                	add    BYTE PTR [esi],cl
9f006db1:	00 00                	add    BYTE PTR [eax],al
9f006db3:	00 38                	add    BYTE PTR [eax],bh
9f006db5:	00 00                	add    BYTE PTR [eax],al
9f006db7:	00 00                	add    BYTE PTR [eax],al
9f006db9:	00 00                	add    BYTE PTR [eax],al
9f006dbb:	00 4a 00             	add    BYTE PTR [edx+0x0],cl
9f006dbe:	00 00                	add    BYTE PTR [eax],al
9f006dc0:	22 00                	and    al,BYTE PTR [eax]
9f006dc2:	00 00                	add    BYTE PTR [eax],al
9f006dc4:	57                   	push   edi
9f006dc5:	00 00                	add    BYTE PTR [eax],al
9f006dc7:	00 11                	add    BYTE PTR [ecx],dl
9f006dc9:	00 00                	add    BYTE PTR [eax],al
9f006dcb:	00 39                	add    BYTE PTR [ecx],bh
9f006dcd:	00 00                	add    BYTE PTR [eax],al
9f006dcf:	00 17                	add    BYTE PTR [edi],dl
9f006dd1:	00 00                	add    BYTE PTR [eax],al
9f006dd3:	00 4c 00 00          	add    BYTE PTR [eax+eax*1+0x0],cl
9f006dd7:	00 0a                	add    BYTE PTR [edx],cl
	...
9f006e05:	00 00                	add    BYTE PTR [eax],al
9f006e07:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
9f006e0d:	00 00                	add    BYTE PTR [eax],al
9f006e0f:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
	...
9f006e26:	00 00                	add    BYTE PTR [eax],al
9f006e28:	02 00                	add    al,BYTE PTR [eax]
	...
9f006e32:	00 00                	add    BYTE PTR [eax],al
9f006e34:	09 00                	or     DWORD PTR [eax],eax
	...
9f006e42:	00 00                	add    BYTE PTR [eax],al
9f006e44:	10 00                	adc    BYTE PTR [eax],al
	...
9f006e4e:	00 00                	add    BYTE PTR [eax],al
9f006e50:	07                   	pop    es
9f006e51:	00 00                	add    BYTE PTR [eax],al
9f006e53:	00 00                	add    BYTE PTR [eax],al
9f006e55:	00 00                	add    BYTE PTR [eax],al
9f006e57:	00 0b                	add    BYTE PTR [ebx],cl
9f006e59:	00 00                	add    BYTE PTR [eax],al
9f006e5b:	00 00                	add    BYTE PTR [eax],al
9f006e5d:	00 00                	add    BYTE PTR [eax],al
9f006e5f:	00 06                	add    BYTE PTR [esi],al
	...
9f006e69:	00 00                	add    BYTE PTR [eax],al
9f006e6b:	00 0f                	add    BYTE PTR [edi],cl
9f006e6d:	00 00                	add    BYTE PTR [eax],al
9f006e6f:	00 1b                	add    BYTE PTR [ebx],bl
9f006e71:	00 00                	add    BYTE PTR [eax],al
9f006e73:	00 08                	add    BYTE PTR [eax],cl
9f006e75:	00 00                	add    BYTE PTR [eax],al
9f006e77:	00 00                	add    BYTE PTR [eax],al
9f006e79:	00 00                	add    BYTE PTR [eax],al
9f006e7b:	00 23                	add    BYTE PTR [ebx],ah
	...
9f006e85:	00 00                	add    BYTE PTR [eax],al
9f006e87:	00 0d 00 00 00 26    	add    BYTE PTR ds:0x26000000,cl
9f006e8d:	00 00                	add    BYTE PTR [eax],al
9f006e8f:	00 00                	add    BYTE PTR [eax],al
9f006e91:	00 00                	add    BYTE PTR [eax],al
9f006e93:	00 04 00             	add    BYTE PTR [eax+eax*1],al
9f006e96:	00 00                	add    BYTE PTR [eax],al
9f006e98:	00 00                	add    BYTE PTR [eax],al
9f006e9a:	00 00                	add    BYTE PTR [eax],al
9f006e9c:	2c 00                	sub    al,0x0
9f006e9e:	00 00                	add    BYTE PTR [eax],al
9f006ea0:	00 00                	add    BYTE PTR [eax],al
9f006ea2:	00 00                	add    BYTE PTR [eax],al
9f006ea4:	20 00                	and    BYTE PTR [eax],al
9f006ea6:	00 00                	add    BYTE PTR [eax],al
9f006ea8:	00 00                	add    BYTE PTR [eax],al
9f006eaa:	00 00                	add    BYTE PTR [eax],al
9f006eac:	2f                   	das    
	...
9f006eb5:	00 00                	add    BYTE PTR [eax],al
9f006eb7:	00 33                	add    BYTE PTR [ebx],dh
	...
9f006ec1:	00 00                	add    BYTE PTR [eax],al
9f006ec3:	00 28                	add    BYTE PTR [eax],ch
9f006ec5:	00 00                	add    BYTE PTR [eax],al
9f006ec7:	00 13                	add    BYTE PTR [ebx],dl
9f006ec9:	00 00                	add    BYTE PTR [eax],al
9f006ecb:	00 37                	add    BYTE PTR [edi],dh
9f006ecd:	00 00                	add    BYTE PTR [eax],al
9f006ecf:	00 2e                	add    BYTE PTR [esi],ch
9f006ed1:	00 00                	add    BYTE PTR [eax],al
9f006ed3:	00 00                	add    BYTE PTR [eax],al
9f006ed5:	00 00                	add    BYTE PTR [eax],al
9f006ed7:	00 35 00 00 00 00    	add    BYTE PTR ds:0x0,dh
9f006edd:	00 00                	add    BYTE PTR [eax],al
9f006edf:	00 3b                	add    BYTE PTR [ebx],bh
9f006ee1:	00 00                	add    BYTE PTR [eax],al
9f006ee3:	00 00                	add    BYTE PTR [eax],al
9f006ee5:	00 00                	add    BYTE PTR [eax],al
9f006ee7:	00 19                	add    BYTE PTR [ecx],bl
9f006ee9:	00 00                	add    BYTE PTR [eax],al
9f006eeb:	00 32                	add    BYTE PTR [edx],dh
9f006eed:	00 00                	add    BYTE PTR [eax],al
9f006eef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f006ef2:	00 00                	add    BYTE PTR [eax],al
9f006ef4:	41                   	inc    ecx
9f006ef5:	00 00                	add    BYTE PTR [eax],al
9f006ef7:	00 16                	add    BYTE PTR [esi],dl
	...
9f006f01:	00 00                	add    BYTE PTR [eax],al
9f006f03:	00 29                	add    BYTE PTR [ecx],ch
	...
9f006f0d:	00 00                	add    BYTE PTR [eax],al
9f006f0f:	00 25 00 00 00 24    	add    BYTE PTR ds:0x24000000,ah
9f006f15:	00 00                	add    BYTE PTR [eax],al
9f006f17:	00 00                	add    BYTE PTR [eax],al
9f006f19:	00 00                	add    BYTE PTR [eax],al
9f006f1b:	00 49 00             	add    BYTE PTR [ecx+0x0],cl
9f006f1e:	00 00                	add    BYTE PTR [eax],al
9f006f20:	03 00                	add    eax,DWORD PTR [eax]
9f006f22:	00 00                	add    BYTE PTR [eax],al
9f006f24:	27                   	daa    
9f006f25:	00 00                	add    BYTE PTR [eax],al
9f006f27:	00 40 00             	add    BYTE PTR [eax+0x0],al
9f006f2a:	00 00                	add    BYTE PTR [eax],al
9f006f2c:	00 00                	add    BYTE PTR [eax],al
9f006f2e:	00 00                	add    BYTE PTR [eax],al
9f006f30:	12 00                	adc    al,BYTE PTR [eax]
9f006f32:	00 00                	add    BYTE PTR [eax],al
9f006f34:	54                   	push   esp
9f006f35:	00 00                	add    BYTE PTR [eax],al
9f006f37:	00 00                	add    BYTE PTR [eax],al
9f006f39:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

9f006f3c <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
9f006f3c:	01 1b                	add    DWORD PTR [ebx],ebx
9f006f3e:	03 3b                	add    edi,DWORD PTR [ebx]
9f006f40:	7c e1                	jl     9f006f23 <__x86.get_pc_thunk.cx+0x1e6d>
9f006f42:	ff                   	(bad)  
9f006f43:	ff 91 00 00 00 c4    	call   DWORD PTR [ecx-0x3c000000]
9f006f49:	90                   	nop
9f006f4a:	ff                   	(bad)  
9f006f4b:	ff 98 e1 ff ff fc    	call   FWORD PTR [eax-0x300001f]
9f006f51:	90                   	nop
9f006f52:	ff                   	(bad)  
9f006f53:	ff                   	(bad)  
9f006f54:	b8 e1 ff ff 34       	mov    eax,0x34ffffe1
9f006f59:	91                   	xchg   ecx,eax
9f006f5a:	ff                   	(bad)  
9f006f5b:	ff ec                	jmp    <internal disassembler error>
9f006f5d:	e1 ff                	loope  9f006f5e <__GNU_EH_FRAME_HDR+0x22>
9f006f5f:	ff 89 91 ff ff 14    	dec    DWORD PTR [ecx+0x14ffff91]
9f006f65:	e2 ff                	loop   9f006f66 <__GNU_EH_FRAME_HDR+0x2a>
9f006f67:	ff e0                	jmp    eax
9f006f69:	91                   	xchg   ecx,eax
9f006f6a:	ff                   	(bad)  
9f006f6b:	ff                   	(bad)  
9f006f6c:	3c e2                	cmp    al,0xe2
9f006f6e:	ff                   	(bad)  
9f006f6f:	ff 77 92             	push   DWORD PTR [edi-0x6e]
9f006f72:	ff                   	(bad)  
9f006f73:	ff 64 e2 ff          	jmp    DWORD PTR [edx+eiz*8-0x1]
9f006f77:	ff 10                	call   DWORD PTR [eax]
9f006f79:	93                   	xchg   ebx,eax
9f006f7a:	ff                   	(bad)  
9f006f7b:	ff a0 e2 ff ff 87    	jmp    DWORD PTR [eax-0x7800001e]
9f006f81:	93                   	xchg   ebx,eax
9f006f82:	ff                   	(bad)  
9f006f83:	ff c4                	inc    esp
9f006f85:	e2 ff                	loop   9f006f86 <__GNU_EH_FRAME_HDR+0x4a>
9f006f87:	ff 42 94             	inc    DWORD PTR [edx-0x6c]
9f006f8a:	ff                   	(bad)  
9f006f8b:	ff e8                	jmp    <internal disassembler error>
9f006f8d:	e2 ff                	loop   9f006f8e <__GNU_EH_FRAME_HDR+0x52>
9f006f8f:	ff                   	(bad)  
9f006f90:	ff 94 ff ff 0c e3 ff 	call   DWORD PTR [edi+edi*8-0x1cf301]
9f006f97:	ff 5b 95             	call   FWORD PTR [ebx-0x6b]
9f006f9a:	ff                   	(bad)  
9f006f9b:	ff 2c e3             	jmp    FWORD PTR [ebx+eiz*8]
9f006f9e:	ff                   	(bad)  
9f006f9f:	ff                   	(bad)  
9f006fa0:	78 95                	js     9f006f37 <__x86.get_pc_thunk.cx+0x1e81>
9f006fa2:	ff                   	(bad)  
9f006fa3:	ff 4c e3 ff          	dec    DWORD PTR [ebx+eiz*8-0x1]
9f006fa7:	ff 32                	push   DWORD PTR [edx]
9f006fa9:	96                   	xchg   esi,eax
9f006faa:	ff                   	(bad)  
9f006fab:	ff 70 e3             	push   DWORD PTR [eax-0x1d]
9f006fae:	ff                   	(bad)  
9f006faf:	ff 8c 96 ff ff 94 e3 	dec    DWORD PTR [esi+edx*4-0x1c6b0001]
9f006fb6:	ff                   	(bad)  
9f006fb7:	ff e8                	jmp    <internal disassembler error>
9f006fb9:	96                   	xchg   esi,eax
9f006fba:	ff                   	(bad)  
9f006fbb:	ff                   	(bad)  
9f006fbc:	b8 e3 ff ff 92       	mov    eax,0x92ffffe3
9f006fc1:	97                   	xchg   edi,eax
9f006fc2:	ff                   	(bad)  
9f006fc3:	ff dc                	call   <internal disassembler error>
9f006fc5:	e3 ff                	jecxz  9f006fc6 <__GNU_EH_FRAME_HDR+0x8a>
9f006fc7:	ff b5 97 ff ff fc    	push   DWORD PTR [ebp-0x3000069]
9f006fcd:	e3 ff                	jecxz  9f006fce <__GNU_EH_FRAME_HDR+0x92>
9f006fcf:	ff 76 99             	push   DWORD PTR [esi-0x67]
9f006fd2:	ff                   	(bad)  
9f006fd3:	ff 20                	jmp    DWORD PTR [eax]
9f006fd5:	e4 ff                	in     al,0xff
9f006fd7:	ff a2 99 ff ff 44    	jmp    DWORD PTR [edx+0x44ffff99]
9f006fdd:	e4 ff                	in     al,0xff
9f006fdf:	ff c8                	dec    eax
9f006fe1:	99                   	cdq    
9f006fe2:	ff                   	(bad)  
9f006fe3:	ff 64 e4 ff          	jmp    DWORD PTR [esp+eiz*8-0x1]
9f006fe7:	ff                   	(bad)  
9f006fe8:	f9                   	stc    
9f006fe9:	99                   	cdq    
9f006fea:	ff                   	(bad)  
9f006feb:	ff 88 e4 ff ff 1f    	dec    DWORD PTR [eax+0x1fffffe4]
9f006ff1:	9a ff ff a8 e4 ff ff 	call   0xffff:0xe4a8ffff
9f006ff8:	4b                   	dec    ebx
9f006ff9:	9a ff ff cc e4 ff ff 	call   0xffff:0xe4ccffff
9f007000:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007001:	9a ff ff ec e4 ff ff 	call   0xffff:0xe4ecffff
9f007008:	c7                   	(bad)  
9f007009:	9a ff ff 10 e5 ff ff 	call   0xffff:0xe510ffff
9f007010:	5a                   	pop    edx
9f007011:	9b                   	fwait
9f007012:	ff                   	(bad)  
9f007013:	ff                   	(bad)  
9f007014:	38 e5                	cmp    ch,ah
9f007016:	ff                   	(bad)  
9f007017:	ff 84 9b ff ff 5c e5 	inc    DWORD PTR [ebx+ebx*4-0x1aa30001]
9f00701e:	ff                   	(bad)  
9f00701f:	ff a4 9b ff ff 7c e5 	jmp    DWORD PTR [ebx+ebx*4-0x1a830001]
9f007026:	ff                   	(bad)  
9f007027:	ff d9                	call   <internal disassembler error>
9f007029:	9b                   	fwait
9f00702a:	ff                   	(bad)  
9f00702b:	ff a4 e5 ff ff ff 9b 	jmp    DWORD PTR [ebp+eiz*8-0x64000001]
9f007032:	ff                   	(bad)  
9f007033:	ff c4                	inc    esp
9f007035:	e5 ff                	in     eax,0xff
9f007037:	ff 34 9c             	push   DWORD PTR [esp+ebx*4]
9f00703a:	ff                   	(bad)  
9f00703b:	ff ec                	jmp    <internal disassembler error>
9f00703d:	e5 ff                	in     eax,0xff
9f00703f:	ff 5a 9c             	call   FWORD PTR [edx-0x64]
9f007042:	ff                   	(bad)  
9f007043:	ff 0c e6             	dec    DWORD PTR [esi+eiz*8]
9f007046:	ff                   	(bad)  
9f007047:	ff 88 9c ff ff 30    	dec    DWORD PTR [eax+0x30ffff9c]
9f00704d:	e6 ff                	out    0xff,al
9f00704f:	ff ae 9c ff ff 50    	jmp    FWORD PTR [esi+0x50ffff9c]
9f007055:	e6 ff                	out    0xff,al
9f007057:	ff db                	call   <internal disassembler error>
9f007059:	9c                   	pushf  
9f00705a:	ff                   	(bad)  
9f00705b:	ff 74 e6 ff          	push   DWORD PTR [esi+eiz*8-0x1]
9f00705f:	ff                   	(bad)  
9f007060:	fe                   	(bad)  
9f007061:	9c                   	pushf  
9f007062:	ff                   	(bad)  
9f007063:	ff 94 e6 ff ff 27 a0 	call   DWORD PTR [esi+eiz*8-0x5fd80001]
9f00706a:	ff                   	(bad)  
9f00706b:	ff                   	(bad)  
9f00706c:	b8 e6 ff ff 50       	mov    eax,0x50ffffe6
9f007071:	a0 ff ff dc e6       	mov    al,ds:0xe6dcffff
9f007076:	ff                   	(bad)  
9f007077:	ff 70 a0             	push   DWORD PTR [eax-0x60]
9f00707a:	ff                   	(bad)  
9f00707b:	ff                   	(bad)  
9f00707c:	fc                   	cld    
9f00707d:	e6 ff                	out    0xff,al
9f00707f:	ff 31                	push   DWORD PTR [ecx]
9f007081:	a2 ff ff 20 e7       	mov    ds:0xe720ffff,al
9f007086:	ff                   	(bad)  
9f007087:	ff 57 a2             	call   DWORD PTR [edi-0x5e]
9f00708a:	ff                   	(bad)  
9f00708b:	ff 40 e7             	inc    DWORD PTR [eax-0x19]
9f00708e:	ff                   	(bad)  
9f00708f:	ff 80 a2 ff ff 64    	inc    DWORD PTR [eax+0x64ffffa2]
9f007095:	e7 ff                	out    0xff,eax
9f007097:	ff a6 a2 ff ff 88    	jmp    DWORD PTR [esi-0x7700005e]
9f00709d:	e7 ff                	out    0xff,eax
9f00709f:	ff e9                	jmp    <internal disassembler error>
9f0070a1:	a2 ff ff ac e7       	mov    ds:0xe7acffff,al
9f0070a6:	ff                   	(bad)  
9f0070a7:	ff 2c a3             	jmp    FWORD PTR [ebx+eiz*4]
9f0070aa:	ff                   	(bad)  
9f0070ab:	ff d0                	call   eax
9f0070ad:	e7 ff                	out    0xff,eax
9f0070af:	ff ec                	jmp    <internal disassembler error>
9f0070b1:	a3 ff ff f4 e7       	mov    ds:0xe7f4ffff,eax
9f0070b6:	ff                   	(bad)  
9f0070b7:	ff 26                	jmp    DWORD PTR [esi]
9f0070b9:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
9f0070ba:	ff                   	(bad)  
9f0070bb:	ff 1c e8             	call   FWORD PTR [eax+ebp*8]
9f0070be:	ff                   	(bad)  
9f0070bf:	ff 62 a4             	jmp    DWORD PTR [edx-0x5c]
9f0070c2:	ff                   	(bad)  
9f0070c3:	ff 44 e8 ff          	inc    DWORD PTR [eax+ebp*8-0x1]
9f0070c7:	ff a0 a4 ff ff 6c    	jmp    DWORD PTR [eax+0x6cffffa4]
9f0070cd:	e8 ff ff e0 a4       	call   43e170d1 <sysEnter_Vector+0x43ce70d1>
9f0070d2:	ff                   	(bad)  
9f0070d3:	ff 94 e8 ff ff 22 a5 	call   DWORD PTR [eax+ebp*8-0x5add0001]
9f0070da:	ff                   	(bad)  
9f0070db:	ff                   	(bad)  
9f0070dc:	bc e8 ff ff ed       	mov    esp,0xedffffe8
9f0070e1:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
9f0070e2:	ff                   	(bad)  
9f0070e3:	ff e0                	jmp    eax
9f0070e5:	e8 ff ff 10 a6       	call   451170e9 <sysEnter_Vector+0x44fe70e9>
9f0070ea:	ff                   	(bad)  
9f0070eb:	ff 04 e9             	inc    DWORD PTR [ecx+ebp*8]
9f0070ee:	ff                   	(bad)  
9f0070ef:	ff 69 a6             	jmp    FWORD PTR [ecx-0x5a]
9f0070f2:	ff                   	(bad)  
9f0070f3:	ff 28                	jmp    FWORD PTR [eax]
9f0070f5:	e9 ff ff bd a6       	jmp    45be70f9 <sysEnter_Vector+0x45ab70f9>
9f0070fa:	ff                   	(bad)  
9f0070fb:	ff 4c e9 ff          	dec    DWORD PTR [ecx+ebp*8-0x1]
9f0070ff:	ff 11                	call   DWORD PTR [ecx]
9f007101:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f007102:	ff                   	(bad)  
9f007103:	ff 70 e9             	push   DWORD PTR [eax-0x17]
9f007106:	ff                   	(bad)  
9f007107:	ff 45 a7             	inc    DWORD PTR [ebp-0x59]
9f00710a:	ff                   	(bad)  
9f00710b:	ff 90 e9 ff ff 7c    	call   DWORD PTR [eax+0x7cffffe9]
9f007111:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f007112:	ff                   	(bad)  
9f007113:	ff b0 e9 ff ff b3    	push   DWORD PTR [eax-0x4c000017]
9f007119:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
9f00711a:	ff                   	(bad)  
9f00711b:	ff d0                	call   eax
9f00711d:	e9 ff ff 3b a8       	jmp    473c7121 <sysEnter_Vector+0x47297121>
9f007122:	ff                   	(bad)  
9f007123:	ff                   	(bad)  
9f007124:	f8                   	clc    
9f007125:	e9 ff ff ab a8       	jmp    47ac7129 <sysEnter_Vector+0x47997129>
9f00712a:	ff                   	(bad)  
9f00712b:	ff 20                	jmp    DWORD PTR [eax]
9f00712d:	ea ff ff 1b a9 ff ff 	jmp    0xffff:0xa91bffff
9f007134:	48                   	dec    eax
9f007135:	ea ff ff 38 a9 ff ff 	jmp    0xffff:0xa938ffff
9f00713c:	68 ea ff ff 61       	push   0x61ffffea
9f007141:	a9 ff ff 88 ea       	test   eax,0xea88ffff
9f007146:	ff                   	(bad)  
9f007147:	ff 84 a9 ff ff a8 ea 	inc    DWORD PTR [ecx+ebp*4-0x15570001]
9f00714e:	ff                   	(bad)  
9f00714f:	ff d0                	call   eax
9f007151:	a9 ff ff c8 ea       	test   eax,0xeac8ffff
9f007156:	ff                   	(bad)  
9f007157:	ff c4                	inc    esp
9f007159:	ab                   	stos   DWORD PTR es:[edi],eax
9f00715a:	ff                   	(bad)  
9f00715b:	ff ec                	jmp    <internal disassembler error>
9f00715d:	ea ff ff 13 ac ff ff 	jmp    0xffff:0xac13ffff
9f007164:	0c eb                	or     al,0xeb
9f007166:	ff                   	(bad)  
9f007167:	ff 2f                	jmp    FWORD PTR [edi]
9f007169:	ac                   	lods   al,BYTE PTR ds:[esi]
9f00716a:	ff                   	(bad)  
9f00716b:	ff 2c eb             	jmp    FWORD PTR [ebx+ebp*8]
9f00716e:	ff                   	(bad)  
9f00716f:	ff 4f ac             	dec    DWORD PTR [edi-0x54]
9f007172:	ff                   	(bad)  
9f007173:	ff 4c eb ff          	dec    DWORD PTR [ebx+ebp*8-0x1]
9f007177:	ff 6f ac             	jmp    FWORD PTR [edi-0x54]
9f00717a:	ff                   	(bad)  
9f00717b:	ff 6c eb ff          	jmp    FWORD PTR [ebx+ebp*8-0x1]
9f00717f:	ff b3 ad ff ff 8c    	push   DWORD PTR [ebx-0x73000053]
9f007185:	eb ff                	jmp    9f007186 <__GNU_EH_FRAME_HDR+0x24a>
9f007187:	ff d3                	call   ebx
9f007189:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f00718a:	ff                   	(bad)  
9f00718b:	ff ac eb ff ff d0 b0 	jmp    FWORD PTR [ebx+ebp*8-0x4f2f0001]
9f007192:	ff                   	(bad)  
9f007193:	ff d8                	call   <internal disassembler error>
9f007195:	eb ff                	jmp    9f007196 <__GNU_EH_FRAME_HDR+0x25a>
9f007197:	ff f3                	push   ebx
9f007199:	b0 ff                	mov    al,0xff
9f00719b:	ff                   	(bad)  
9f00719c:	f8                   	clc    
9f00719d:	eb ff                	jmp    9f00719e <__GNU_EH_FRAME_HDR+0x262>
9f00719f:	ff 16                	call   DWORD PTR [esi]
9f0071a1:	b1 ff                	mov    cl,0xff
9f0071a3:	ff 18                	call   FWORD PTR [eax]
9f0071a5:	ec                   	in     al,dx
9f0071a6:	ff                   	(bad)  
9f0071a7:	ff 33                	push   DWORD PTR [ebx]
9f0071a9:	b1 ff                	mov    cl,0xff
9f0071ab:	ff                   	(bad)  
9f0071ac:	38 ec                	cmp    ah,ch
9f0071ae:	ff                   	(bad)  
9f0071af:	ff 54 b1 ff          	call   DWORD PTR [ecx+esi*4-0x1]
9f0071b3:	ff 58 ec             	call   FWORD PTR [eax-0x14]
9f0071b6:	ff                   	(bad)  
9f0071b7:	ff c8                	dec    eax
9f0071b9:	b1 ff                	mov    cl,0xff
9f0071bb:	ff                   	(bad)  
9f0071bc:	7c ec                	jl     9f0071aa <__GNU_EH_FRAME_HDR+0x26e>
9f0071be:	ff                   	(bad)  
9f0071bf:	ff 28                	jmp    FWORD PTR [eax]
9f0071c1:	b2 ff                	mov    dl,0xff
9f0071c3:	ff a0 ec ff ff af    	jmp    DWORD PTR [eax-0x50000014]
9f0071c9:	b2 ff                	mov    dl,0xff
9f0071cb:	ff c0                	inc    eax
9f0071cd:	ec                   	in     al,dx
9f0071ce:	ff                   	(bad)  
9f0071cf:	ff 22                	jmp    DWORD PTR [edx]
9f0071d1:	b3 ff                	mov    bl,0xff
9f0071d3:	ff e4                	jmp    esp
9f0071d5:	ec                   	in     al,dx
9f0071d6:	ff                   	(bad)  
9f0071d7:	ff a6 b3 ff ff 04    	jmp    DWORD PTR [esi+0x4ffffb3]
9f0071dd:	ed                   	in     eax,dx
9f0071de:	ff                   	(bad)  
9f0071df:	ff 31                	push   DWORD PTR [ecx]
9f0071e1:	b4 ff                	mov    ah,0xff
9f0071e3:	ff 28                	jmp    FWORD PTR [eax]
9f0071e5:	ed                   	in     eax,dx
9f0071e6:	ff                   	(bad)  
9f0071e7:	ff f1                	push   ecx
9f0071e9:	b6 ff                	mov    dh,0xff
9f0071eb:	ff 4c ed ff          	dec    DWORD PTR [ebp+ebp*8-0x1]
9f0071ef:	ff 11                	call   DWORD PTR [ecx]
9f0071f1:	b7 ff                	mov    bh,0xff
9f0071f3:	ff 6c ed ff          	jmp    FWORD PTR [ebp+ebp*8-0x1]
9f0071f7:	ff 14 b8             	call   DWORD PTR [eax+edi*4]
9f0071fa:	ff                   	(bad)  
9f0071fb:	ff 90 ed ff ff 37    	call   DWORD PTR [eax+0x37ffffed]
9f007201:	b8 ff ff b0 ed       	mov    eax,0xedb0ffff
9f007206:	ff                   	(bad)  
9f007207:	ff 58 b8             	call   FWORD PTR [eax-0x48]
9f00720a:	ff                   	(bad)  
9f00720b:	ff d0                	call   eax
9f00720d:	ed                   	in     eax,dx
9f00720e:	ff                   	(bad)  
9f00720f:	ff 8c b8 ff ff f4 ed 	dec    DWORD PTR [eax+edi*4-0x120b0001]
9f007216:	ff                   	(bad)  
9f007217:	ff 27                	jmp    DWORD PTR [edi]
9f007219:	ba ff ff 14 ee       	mov    edx,0xee14ffff
9f00721e:	ff                   	(bad)  
9f00721f:	ff 48 ba             	dec    DWORD PTR [eax-0x46]
9f007222:	ff                   	(bad)  
9f007223:	ff 34 ee             	push   DWORD PTR [esi+ebp*8]
9f007226:	ff                   	(bad)  
9f007227:	ff 0f                	dec    DWORD PTR [edi]
9f007229:	bb ff ff 54 ee       	mov    ebx,0xee54ffff
9f00722e:	ff                   	(bad)  
9f00722f:	ff 30                	push   DWORD PTR [eax]
9f007231:	bb ff ff 74 ee       	mov    ebx,0xee74ffff
9f007236:	ff                   	(bad)  
9f007237:	ff 59 bb             	call   FWORD PTR [ecx-0x45]
9f00723a:	ff                   	(bad)  
9f00723b:	ff 98 ee ff ff 88    	call   FWORD PTR [eax-0x77000012]
9f007241:	bb ff ff bc ee       	mov    ebx,0xeebcffff
9f007246:	ff                   	(bad)  
9f007247:	ff 01                	inc    DWORD PTR [ecx]
9f007249:	bf ff ff e8 ee       	mov    edi,0xeee8ffff
9f00724e:	ff                   	(bad)  
9f00724f:	ff 26                	jmp    DWORD PTR [esi]
9f007251:	bf ff ff 08 ef       	mov    edi,0xef08ffff
9f007256:	ff                   	(bad)  
9f007257:	ff 4c c1 ff          	dec    DWORD PTR [ecx+eax*8-0x1]
9f00725b:	ff 34 ef             	push   DWORD PTR [edi+ebp*8]
9f00725e:	ff                   	(bad)  
9f00725f:	ff ab c1 ff ff 58    	jmp    FWORD PTR [ebx+0x58ffffc1]
9f007265:	ef                   	out    dx,eax
9f007266:	ff                   	(bad)  
9f007267:	ff e9                	jmp    <internal disassembler error>
9f007269:	c3                   	ret    
9f00726a:	ff                   	(bad)  
9f00726b:	ff 84 ef ff ff 31 c8 	inc    DWORD PTR [edi+ebp*8-0x37ce0001]
9f007272:	ff                   	(bad)  
9f007273:	ff a8 ef ff ff 64    	jmp    FWORD PTR [eax+0x64ffffef]
9f007279:	c8 ff ff c8          	enter  0xffff,0xc8
9f00727d:	ef                   	out    dx,eax
9f00727e:	ff                   	(bad)  
9f00727f:	ff 98 c8 ff ff e8    	call   FWORD PTR [eax-0x17000038]
9f007285:	ef                   	out    dx,eax
9f007286:	ff                   	(bad)  
9f007287:	ff 1c c9             	call   FWORD PTR [ecx+ecx*8]
9f00728a:	ff                   	(bad)  
9f00728b:	ff 0c f0             	dec    DWORD PTR [eax+esi*8]
9f00728e:	ff                   	(bad)  
9f00728f:	ff 5a c9             	call   FWORD PTR [edx-0x37]
9f007292:	ff                   	(bad)  
9f007293:	ff 30                	push   DWORD PTR [eax]
9f007295:	f0 ff                	lock (bad) 
9f007297:	ff 98 c9 ff ff 54    	call   FWORD PTR [eax+0x54ffffc9]
9f00729d:	f0 ff                	lock (bad) 
9f00729f:	ff 07                	inc    DWORD PTR [edi]
9f0072a1:	ca ff ff             	retf   0xffff
9f0072a4:	78 f0                	js     9f007296 <__GNU_EH_FRAME_HDR+0x35a>
9f0072a6:	ff                   	(bad)  
9f0072a7:	ff 30                	push   DWORD PTR [eax]
9f0072a9:	ca ff ff             	retf   0xffff
9f0072ac:	98                   	cwde   
9f0072ad:	f0 ff                	lock (bad) 
9f0072af:	ff 8e ca ff ff c0    	dec    DWORD PTR [esi-0x3f000036]
9f0072b5:	f0 ff                	lock (bad) 
9f0072b7:	ff ac ca ff ff e0 f0 	jmp    FWORD PTR [edx+ecx*8-0xf1f0001]
9f0072be:	ff                   	(bad)  
9f0072bf:	ff ec                	jmp    <internal disassembler error>
9f0072c1:	ca ff ff             	retf   0xffff
9f0072c4:	00 f1                	add    cl,dh
9f0072c6:	ff                   	(bad)  
9f0072c7:	ff 2c cb             	jmp    FWORD PTR [ebx+ecx*8]
9f0072ca:	ff                   	(bad)  
9f0072cb:	ff 20                	jmp    DWORD PTR [eax]
9f0072cd:	f1                   	icebp  
9f0072ce:	ff                   	(bad)  
9f0072cf:	ff 74 cb ff          	push   DWORD PTR [ebx+ecx*8-0x1]
9f0072d3:	ff 40 f1             	inc    DWORD PTR [eax-0xf]
9f0072d6:	ff                   	(bad)  
9f0072d7:	ff a4 cb ff ff 60 f1 	jmp    DWORD PTR [ebx+ecx*8-0xe9f0001]
9f0072de:	ff                   	(bad)  
9f0072df:	ff 00                	inc    DWORD PTR [eax]
9f0072e1:	cc                   	int3   
9f0072e2:	ff                   	(bad)  
9f0072e3:	ff 80 f1 ff ff 31    	inc    DWORD PTR [eax+0x31fffff1]
9f0072e9:	cc                   	int3   
9f0072ea:	ff                   	(bad)  
9f0072eb:	ff a0 f1 ff ff 4b    	jmp    DWORD PTR [eax+0x4bfffff1]
9f0072f1:	cc                   	int3   
9f0072f2:	ff                   	(bad)  
9f0072f3:	ff c0                	inc    eax
9f0072f5:	f1                   	icebp  
9f0072f6:	ff                   	(bad)  
9f0072f7:	ff 84 cc ff ff e0 f1 	inc    DWORD PTR [esp+ecx*8-0xe1f0001]
9f0072fe:	ff                   	(bad)  
9f0072ff:	ff a4 cc ff ff 00 f2 	jmp    DWORD PTR [esp+ecx*8-0xdff0001]
9f007306:	ff                   	(bad)  
9f007307:	ff 0b                	dec    DWORD PTR [ebx]
9f007309:	cd ff                	int    0xff
9f00730b:	ff 20                	jmp    DWORD PTR [eax]
9f00730d:	f2 ff                	repnz (bad) 
9f00730f:	ff 74 cd ff          	push   DWORD PTR [ebp+ecx*8-0x1]
9f007313:	ff 40 f2             	inc    DWORD PTR [eax-0xe]
9f007316:	ff                   	(bad)  
9f007317:	ff e0                	jmp    eax
9f007319:	cd ff                	int    0xff
9f00731b:	ff 60 f2             	jmp    DWORD PTR [eax-0xe]
9f00731e:	ff                   	(bad)  
9f00731f:	ff 00                	inc    DWORD PTR [eax]
9f007321:	ce                   	into   
9f007322:	ff                   	(bad)  
9f007323:	ff 80 f2 ff ff 80    	inc    DWORD PTR [eax-0x7f00000e]
9f007329:	cf                   	iret   
9f00732a:	ff                   	(bad)  
9f00732b:	ff b0 f2 ff ff a0    	push   DWORD PTR [eax-0x5f00000e]
9f007331:	cf                   	iret   
9f007332:	ff                   	(bad)  
9f007333:	ff d0                	call   eax
9f007335:	f2 ff                	repnz (bad) 
9f007337:	ff                   	(bad)  
9f007338:	3c d1                	cmp    al,0xd1
9f00733a:	ff                   	(bad)  
9f00733b:	ff 00                	inc    DWORD PTR [eax]
9f00733d:	f3 ff                	repz (bad) 
9f00733f:	ff d2                	call   edx
9f007341:	d1 ff                	sar    edi,1
9f007343:	ff 24 f3             	jmp    DWORD PTR [ebx+esi*8]
9f007346:	ff                   	(bad)  
9f007347:	ff f4                	push   esp
9f007349:	d1 ff                	sar    edi,1
9f00734b:	ff 44 f3 ff          	inc    DWORD PTR [ebx+esi*8-0x1]
9f00734f:	ff 12                	call   DWORD PTR [edx]
9f007351:	d3 ff                	sar    edi,cl
9f007353:	ff 70 f3             	push   DWORD PTR [eax-0xd]
9f007356:	ff                   	(bad)  
9f007357:	ff                   	(bad)  
9f007358:	38 d3                	cmp    bl,dl
9f00735a:	ff                   	(bad)  
9f00735b:	ff 90 f3 ff ff d6    	call   DWORD PTR [eax-0x2900000d]
9f007361:	d3 ff                	sar    edi,cl
9f007363:	ff                   	(bad)  
9f007364:	b8 f3 ff ff 44       	mov    eax,0x44fffff3
9f007369:	d4 ff                	aam    0xff
9f00736b:	ff e0                	jmp    eax
9f00736d:	f3 ff                	repz (bad) 
9f00736f:	ff 64 d4 ff          	jmp    DWORD PTR [esp+edx*8-0x1]
9f007373:	ff 00                	inc    DWORD PTR [eax]
9f007375:	f4                   	hlt    
9f007376:	ff                   	(bad)  
9f007377:	ff a8 d4 ff ff 28    	jmp    FWORD PTR [eax+0x28ffffd4]
9f00737d:	f4                   	hlt    
9f00737e:	ff                   	(bad)  
9f00737f:	ff c1                	inc    ecx
9f007381:	d7                   	xlat   BYTE PTR ds:[ebx]
9f007382:	ff                   	(bad)  
9f007383:	ff 50 f4             	call   DWORD PTR [eax-0xc]
9f007386:	ff                   	(bad)  
9f007387:	ff de                	call   <internal disassembler error>
9f007389:	d7                   	xlat   BYTE PTR ds:[ebx]
9f00738a:	ff                   	(bad)  
9f00738b:	ff 70 f4             	push   DWORD PTR [eax-0xc]
9f00738e:	ff                   	(bad)  
9f00738f:	ff 1b                	call   FWORD PTR [ebx]
9f007391:	d8 ff                	fdivr  st,st(7)
9f007393:	ff 90 f4 ff ff 50    	call   DWORD PTR [eax+0x50fffff4]
9f007399:	d8 ff                	fdivr  st,st(7)
9f00739b:	ff b0 f4 ff ff 6d    	push   DWORD PTR [eax+0x6dfffff4]
9f0073a1:	d8 ff                	fdivr  st,st(7)
9f0073a3:	ff d0                	call   eax
9f0073a5:	f4                   	hlt    
9f0073a6:	ff                   	(bad)  
9f0073a7:	ff c4                	inc    esp
9f0073a9:	e0 ff                	loopne 9f0073aa <__GNU_EH_FRAME_HDR+0x46e>
9f0073ab:	ff 00                	inc    DWORD PTR [eax]
9f0073ad:	f5                   	cmc    
9f0073ae:	ff                   	(bad)  
9f0073af:	ff 31                	push   DWORD PTR [ecx]
9f0073b1:	e1 ff                	loope  9f0073b2 <__GNU_EH_FRAME_HDR+0x476>
9f0073b3:	ff 28                	jmp    FWORD PTR [eax]
9f0073b5:	f5                   	cmc    
9f0073b6:	ff                   	(bad)  
9f0073b7:	ff 72 e1             	push   DWORD PTR [edx-0x1f]
9f0073ba:	ff                   	(bad)  
9f0073bb:	ff d8                	call   <internal disassembler error>
9f0073bd:	e1 ff                	loope  9f0073be <__GNU_EH_FRAME_HDR+0x482>
9f0073bf:	ff 76 e1             	push   DWORD PTR [esi-0x1f]
9f0073c2:	ff                   	(bad)  
9f0073c3:	ff 8c e2 ff ff 7a e1 	dec    DWORD PTR [edx+eiz*8-0x1e850001]
9f0073ca:	ff                   	(bad)  
9f0073cb:	ff 4c f5 ff          	dec    DWORD PTR [ebp+esi*8-0x1]
9f0073cf:	ff                   	.byte 0xff

Disassembly of section .rodata:

9f0073e0 <ansiEscSeq>:
9f0073e0:	1b 5b 00             	sbb    ebx,DWORD PTR [ebx+0x0]
9f0073e3:	3b 00                	cmp    eax,DWORD PTR [eax]
9f0073e5:	48                   	dec    eax
9f0073e6:	00 25 73 00 73 00    	add    BYTE PTR ds:0x730073,ah
9f0073ec:	75 00                	jne    9f0073ee <ansiEscSeq+0xe>
9f0073ee:	3d 00 50 41 54       	cmp    eax,0x54415000
9f0073f3:	48                   	dec    eax
9f0073f4:	00 2f                	add    BYTE PTR [edi],ch
9f0073f6:	00 0a                	add    BYTE PTR [edx],cl
9f0073f8:	00 53 74             	add    BYTE PTR [ebx+0x74],dl
9f0073fb:	72 65                	jb     9f007462 <ansiEscSeq+0x82>
9f0073fd:	61                   	popa   
9f0073fe:	6d                   	ins    DWORD PTR es:[edi],dx
9f0073ff:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
9f007405:	74 20                	je     9f007427 <ansiEscSeq+0x47>
9f007407:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
9f00740e:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00740f:	74 65                	je     9f007476 <ansiEscSeq+0x96>
9f007411:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f007414:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007416:	2a 6c 69 62          	sub    ch,BYTE PTR [ecx+ebp*2+0x62]
9f00741a:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
9f00741d:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00741e:	69 74 20 63 61 6c 6c 	imul   esi,DWORD PTR [eax+eiz*1+0x63],0x656c6c61
9f007425:	65 
9f007426:	64 0a 2a             	or     ch,BYTE PTR fs:[edx]
9f007429:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00742b:	00 2a                	add    BYTE PTR [edx],ch
9f00742d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00742f:	6c                   	ins    BYTE PTR es:[edi],dx
9f007430:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f007437:	74 20                	je     9f007459 <ansiEscSeq+0x79>
9f007439:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f00743c:	70 6c                	jo     9f0074aa <ansiEscSeq+0xca>
9f00743e:	65                   	gs
9f00743f:	74 65                	je     9f0074a6 <ansiEscSeq+0xc6>
9f007441:	64 0a 00             	or     al,BYTE PTR fs:[eax]
9f007444:	6c                   	ins    BYTE PTR es:[edi],dx
9f007445:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
9f00744c:	74 20                	je     9f00746e <ansiEscSeq+0x8e>
9f00744e:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
9f007451:	6c                   	ins    BYTE PTR es:[edi],dx
9f007452:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
9f007457:	65                   	gs
9f007458:	76 69                	jbe    9f0074c3 <ansiEscSeq+0xe3>
9f00745a:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00745b:	75 73                	jne    9f0074d0 <ansiEscSeq+0xf0>
9f00745d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00745e:	79 2c                	jns    9f00748c <ansiEscSeq+0xac>
9f007460:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f007463:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x6c000a67
9f00746a:	6c 
9f00746b:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f007472:	65 63 20             	arpl   WORD PTR gs:[eax],sp
9f007475:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f007477:	72 20                	jb     9f007499 <ansiEscSeq+0xb9>
9f007479:	25 73 0a 00 20       	and    eax,0x20000a73
9f00747e:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f007482:	63 3a                	arpl   WORD PTR [edx],di
9f007484:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
9f007487:	65 63 62 20          	arpl   WORD PTR gs:[edx+0x20],sp
9f00748b:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f00748d:	72 20                	jb     9f0074af <ansiEscSeq+0xcf>
9f00748f:	25 73 0a 00 6c       	and    eax,0x6c000a73
9f007494:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
9f00749b:	65 63 61 20          	arpl   WORD PTR gs:[ecx+0x20],sp
9f00749f:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0074a1:	72 20                	jb     9f0074c3 <ansiEscSeq+0xe3>
9f0074a3:	25 73 0a 00 00       	and    eax,0xa73
9f0074a8:	68 65 61 70 42       	push   0x42706165
9f0074ad:	61                   	popa   
9f0074ae:	73 65                	jae    9f007515 <ansiEscSeq+0x135>
9f0074b0:	20 40 20             	and    BYTE PTR [eax+0x20],al
9f0074b3:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
9f0074b6:	30 38                	xor    BYTE PTR [eax],bh
9f0074b8:	58                   	pop    eax
9f0074b9:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
9f0074bf:	30 38                	xor    BYTE PTR [eax],bh
9f0074c1:	58                   	pop    eax
9f0074c2:	20 62 65             	and    BYTE PTR [edx+0x65],ah
9f0074c5:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0074c7:	72 65                	jb     9f00752e <ansiEscSeq+0x14e>
9f0074c9:	0a 00                	or     al,BYTE PTR [eax]
9f0074cb:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f0074ce:	6c                   	ins    BYTE PTR es:[edi],dx
9f0074cf:	6c                   	ins    BYTE PTR es:[edi],dx
9f0074d0:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0074d1:	63 3a                	arpl   WORD PTR [edx],di
9f0074d3:	20 6d 61             	and    BYTE PTR [ebp+0x61],ch
9f0074d6:	72 6b                	jb     9f007543 <ansiEscSeq+0x163>
9f0074d8:	65                   	gs
9f0074d9:	72 20                	jb     9f0074fb <ansiEscSeq+0x11b>
9f0074db:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0074dc:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0074dd:	74 20                	je     9f0074ff <ansiEscSeq+0x11f>
9f0074df:	66 6f                	outs   dx,WORD PTR ds:[esi]
9f0074e1:	75 6e                	jne    9f007551 <ansiEscSeq+0x171>
9f0074e3:	64 20 65 72          	and    BYTE PTR fs:[ebp+0x72],ah
9f0074e7:	72 6f                	jb     9f007558 <ansiEscSeq+0x178>
9f0074e9:	72 21                	jb     9f00750c <ansiEscSeq+0x12c>
9f0074eb:	21 21                	and    DWORD PTR [ecx],esp
9f0074ed:	0a 00                	or     al,BYTE PTR [eax]
9f0074ef:	00 0a                	add    BYTE PTR [edx],cl
9f0074f1:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0074f3:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0074f5:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0074f7:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0074f9:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0074fb:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0074fd:	2a 2a                	sub    ch,BYTE PTR [edx]
9f0074ff:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007501:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007503:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007505:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007507:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007509:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00750b:	6d                   	ins    DWORD PTR es:[edi],dx
9f00750c:	61                   	popa   
9f00750d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00750e:	6c                   	ins    BYTE PTR es:[edi],dx
9f00750f:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007510:	63 20                	arpl   WORD PTR [eax],sp
9f007512:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
9f007515:	65 20 65 72          	and    BYTE PTR gs:[ebp+0x72],ah
9f007519:	72 6f                	jb     9f00758a <ansiEscSeq+0x1aa>
9f00751b:	72 21                	jb     9f00753e <ansiEscSeq+0x15e>
9f00751d:	21 21                	and    DWORD PTR [ecx],esp
9f00751f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007521:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007523:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007525:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007527:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007529:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00752b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00752d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00752f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007531:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007533:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007535:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007537:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007539:	0a 00                	or     al,BYTE PTR [eax]
9f00753b:	00 0a                	add    BYTE PTR [edx],cl
9f00753d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00753f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007541:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007543:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007545:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007547:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007549:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00754b:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00754d:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00754f:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007551:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007553:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007555:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007557:	6d                   	ins    DWORD PTR es:[edi],dx
9f007558:	61                   	popa   
9f007559:	6c                   	ins    BYTE PTR es:[edi],dx
9f00755a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00755b:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00755c:	63 20                	arpl   WORD PTR [eax],sp
9f00755e:	70 6f                	jo     9f0075cf <ansiEscSeq+0x1ef>
9f007560:	69 6e 74 65 72 20 65 	imul   ebp,DWORD PTR [esi+0x74],0x65207265
9f007567:	72 72                	jb     9f0075db <ansiEscSeq+0x1fb>
9f007569:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00756a:	72 21                	jb     9f00758d <ansiEscSeq+0x1ad>
9f00756c:	21 21                	and    DWORD PTR [ecx],esp
9f00756e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007570:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007572:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007574:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007576:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007578:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00757a:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00757c:	2a 2a                	sub    ch,BYTE PTR [edx]
9f00757e:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007580:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007582:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007584:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007586:	2a 2a                	sub    ch,BYTE PTR [edx]
9f007588:	0a 00                	or     al,BYTE PTR [eax]
9f00758a:	00 00                	add    BYTE PTR [eax],al
9f00758c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00758d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f007594:	6c                   	ins    BYTE PTR es:[edi],dx
9f007595:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007596:	63 3a                	arpl   WORD PTR [edx],di
9f007598:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f00759b:	71 75                	jno    9f007612 <ansiEscSeq+0x232>
9f00759d:	65                   	gs
9f00759e:	73 74                	jae    9f007614 <ansiEscSeq+0x234>
9f0075a0:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f0075a3:	72 20                	jb     9f0075c5 <ansiEscSeq+0x1e5>
9f0075a5:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f0075a8:	30 38                	xor    BYTE PTR [eax],bh
9f0075aa:	78 20                	js     9f0075cc <ansiEscSeq+0x1ec>
9f0075ac:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f0075af:	65                   	gs
9f0075b0:	73 0a                	jae    9f0075bc <ansiEscSeq+0x1dc>
9f0075b2:	00 00                	add    BYTE PTR [eax],al
9f0075b4:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075b5:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0075bc:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075bd:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0075be:	63 3a                	arpl   WORD PTR [edx],di
9f0075c0:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f0075c3:	75 73                	jne    9f007638 <ansiEscSeq+0x258>
9f0075c5:	69 6e 67 20 68 65 61 	imul   ebp,DWORD PTR [esi+0x67],0x61656820
9f0075cc:	70 72                	jo     9f007640 <ansiEscSeq+0x260>
9f0075ce:	65 63 3d 30 78 25 30 	arpl   WORD PTR gs:0x30257830,di
9f0075d5:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f0075d8:	20 61 64             	and    BYTE PTR [ecx+0x64],ah
9f0075db:	64                   	fs
9f0075dc:	72 65                	jb     9f007643 <ansiEscSeq+0x263>
9f0075de:	73 73                	jae    9f007653 <ansiEscSeq+0x273>
9f0075e0:	3d 30 78 25 30       	cmp    eax,0x30257830
9f0075e5:	38 78 20             	cmp    BYTE PTR [eax+0x20],bh
9f0075e8:	28 75 73             	sub    BYTE PTR [ebp+0x73],dh
9f0075eb:	65                   	gs
9f0075ec:	73 3d                	jae    9f00762b <ansiEscSeq+0x24b>
9f0075ee:	25 75 29 00 6c       	and    eax,0x6c002975
9f0075f3:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0075fa:	6c                   	ins    BYTE PTR es:[edi],dx
9f0075fb:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0075fc:	63 3a                	arpl   WORD PTR [edx],di
9f0075fe:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f007601:	65                   	gs
9f007602:	64                   	fs
9f007603:	65                   	gs
9f007604:	64                   	fs
9f007605:	3d 30 78 25 30       	cmp    eax,0x30257830
9f00760a:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f00760d:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f007611:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f007614:	61                   	popa   
9f007615:	6c                   	ins    BYTE PTR es:[edi],dx
9f007616:	6c                   	ins    BYTE PTR es:[edi],dx
9f007617:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007618:	63 3a                	arpl   WORD PTR [edx],di
9f00761a:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f00761d:	61                   	popa   
9f00761e:	45                   	inc    ebp
9f00761f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007620:	64                   	fs
9f007621:	3d 30 78 25 30       	cmp    eax,0x30257830
9f007626:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f007629:	00 00                	add    BYTE PTR [eax],al
9f00762b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f00762f:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
9f007632:	61                   	popa   
9f007633:	6c                   	ins    BYTE PTR es:[edi],dx
9f007634:	6c                   	ins    BYTE PTR es:[edi],dx
9f007635:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007636:	63 3a                	arpl   WORD PTR [edx],di
9f007638:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f00763b:	71 20                	jno    9f00765d <ansiEscSeq+0x27d>
9f00763d:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f007640:	30 38                	xor    BYTE PTR [eax],bh
9f007642:	58                   	pop    eax
9f007643:	20 62 79             	and    BYTE PTR [edx+0x79],ah
9f007646:	74 65                	je     9f0076ad <ansiEscSeq+0x2cd>
9f007648:	73 2c                	jae    9f007676 <ansiEscSeq+0x296>
9f00764a:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f00764d:	74 20                	je     9f00766f <ansiEscSeq+0x28f>
9f00764f:	77 61                	ja     9f0076b2 <ansiEscSeq+0x2d2>
9f007651:	73 20                	jae    9f007673 <ansiEscSeq+0x293>
9f007653:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f007656:	30 38                	xor    BYTE PTR [eax],bh
9f007658:	58                   	pop    eax
9f007659:	2c 20                	sub    al,0x20
9f00765b:	68 65 61 70 45       	push   0x45706165
9f007660:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007661:	64                   	fs
9f007662:	3d 30 78 25 30       	cmp    eax,0x30257830
9f007667:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
9f00766a:	00 00                	add    BYTE PTR [eax],al
9f00766c:	6c                   	ins    BYTE PTR es:[edi],dx
9f00766d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f007674:	6c                   	ins    BYTE PTR es:[edi],dx
9f007675:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007676:	63 3a                	arpl   WORD PTR [edx],di
9f007678:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
9f00767b:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
9f007682:	65 
9f007683:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f007687:	61                   	popa   
9f007688:	70 43                	jo     9f0076cd <ansiEscSeq+0x2ed>
9f00768a:	75 72                	jne    9f0076fe <ansiEscSeq+0x31e>
9f00768c:	72 20                	jb     9f0076ae <ansiEscSeq+0x2ce>
9f00768e:	61                   	popa   
9f00768f:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f007690:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
9f007694:	61                   	popa   
9f007695:	70 42                	jo     9f0076d9 <ansiEscSeq+0x2f9>
9f007697:	61                   	popa   
9f007698:	73 65                	jae    9f0076ff <ansiEscSeq+0x31f>
9f00769a:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
9f00769e:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f0076a1:	30 38                	xor    BYTE PTR [eax],bh
9f0076a3:	58                   	pop    eax
9f0076a4:	0a 00                	or     al,BYTE PTR [eax]
9f0076a6:	00 00                	add    BYTE PTR [eax],al
9f0076a8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076a9:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0076b0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0076b2:	63 3a                	arpl   WORD PTR [edx],di
9f0076b4:	63 72 65             	arpl   WORD PTR [edx+0x65],si
9f0076b7:	61                   	popa   
9f0076b8:	74 69                	je     9f007723 <ansiEscSeq+0x343>
9f0076ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f0076bb:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
9f0076bf:	61                   	popa   
9f0076c0:	70 20                	jo     9f0076e2 <ansiEscSeq+0x302>
9f0076c2:	72 65                	jb     9f007729 <ansiEscSeq+0x349>
9f0076c4:	63 20                	arpl   WORD PTR [eax],sp
9f0076c6:	40                   	inc    eax
9f0076c7:	20 30                	and    BYTE PTR [eax],dh
9f0076c9:	78 25                	js     9f0076f0 <ansiEscSeq+0x310>
9f0076cb:	30 38                	xor    BYTE PTR [eax],bh
9f0076cd:	58                   	pop    eax
9f0076ce:	0a 00                	or     al,BYTE PTR [eax]
9f0076d0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076d1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
9f0076d8:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076d9:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0076da:	63 3a                	arpl   WORD PTR [edx],di
9f0076dc:	20 68 65             	and    BYTE PTR [eax+0x65],ch
9f0076df:	61                   	popa   
9f0076e0:	70 43                	jo     9f007725 <ansiEscSeq+0x345>
9f0076e2:	75 72                	jne    9f007756 <ansiEscSeq+0x376>
9f0076e4:	72 3d                	jb     9f007723 <ansiEscSeq+0x343>
9f0076e6:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
9f0076e9:	30 38                	xor    BYTE PTR [eax],bh
9f0076eb:	78 0a                	js     9f0076f7 <ansiEscSeq+0x317>
9f0076ed:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
9f0076f0:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076f1:	6c                   	ins    BYTE PTR es:[edi],dx
9f0076f2:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0076f3:	63 3a                	arpl   WORD PTR [edx],di
9f0076f5:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f0076f8:	74 75                	je     9f00776f <ansiEscSeq+0x38f>
9f0076fa:	72 6e                	jb     9f00776a <ansiEscSeq+0x38a>
9f0076fc:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
9f007703:	30 38                	xor    BYTE PTR [eax],bh
9f007705:	58                   	pop    eax
9f007706:	0a 00                	or     al,BYTE PTR [eax]
9f007708:	6c                   	ins    BYTE PTR es:[edi],dx
9f007709:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f007710:	6c                   	ins    BYTE PTR es:[edi],dx
9f007711:	6c                   	ins    BYTE PTR es:[edi],dx
9f007712:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007713:	63 3a                	arpl   WORD PTR [edx],di
9f007715:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f007718:	6c                   	ins    BYTE PTR es:[edi],dx
9f007719:	6c                   	ins    BYTE PTR es:[edi],dx
9f00771a:	65 64 20 66 6f       	gs and BYTE PTR fs:gs:[esi+0x6f],ah
9f00771f:	72 20                	jb     9f007741 <ansiEscSeq+0x361>
9f007721:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007722:	6c                   	ins    BYTE PTR es:[edi],dx
9f007723:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f007727:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f00772e:	78 25                	js     9f007755 <ansiEscSeq+0x375>
9f007730:	30 38                	xor    BYTE PTR [eax],bh
9f007732:	78 2c                	js     9f007760 <ansiEscSeq+0x380>
9f007734:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f007737:	77 20                	ja     9f007759 <ansiEscSeq+0x379>
9f007739:	73 69                	jae    9f0077a4 <ansiEscSeq+0x3c4>
9f00773b:	7a 65                	jp     9f0077a2 <ansiEscSeq+0x3c2>
9f00773d:	3d 30 78 25 30       	cmp    eax,0x30257830
9f007742:	38 78 00             	cmp    BYTE PTR [eax+0x0],bh
9f007745:	00 00                	add    BYTE PTR [eax],al
9f007747:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
9f00774b:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f00774e:	65                   	gs
9f00774f:	6c                   	ins    BYTE PTR es:[edi],dx
9f007750:	6c                   	ins    BYTE PTR es:[edi],dx
9f007751:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007752:	63 3a                	arpl   WORD PTR [edx],di
9f007754:	20 52 65             	and    BYTE PTR [edx+0x65],dl
9f007757:	71 75                	jno    9f0077ce <ansiEscSeq+0x3ee>
9f007759:	65                   	gs
9f00775a:	73 74                	jae    9f0077d0 <ansiEscSeq+0x3f0>
9f00775c:	20 66 6f             	and    BYTE PTR [esi+0x6f],ah
9f00775f:	72 20                	jb     9f007781 <ansiEscSeq+0x3a1>
9f007761:	30 20                	xor    BYTE PTR [eax],ah
9f007763:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
9f007766:	65                   	gs
9f007767:	73 2c                	jae    9f007795 <ansiEscSeq+0x3b5>
9f007769:	20 63 61             	and    BYTE PTR [ebx+0x61],ah
9f00776c:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00776d:	6e                   	outs   dx,BYTE PTR ds:[esi]
9f00776e:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00776f:	74 20                	je     9f007791 <ansiEscSeq+0x3b1>
9f007771:	66                   	data16
9f007772:	75 6c                	jne    9f0077e0 <ansiEscSeq+0x400>
9f007774:	66 69 6c 6c 0a 00 00 	imul   bp,WORD PTR [esp+ebp*2+0xa],0x0
9f00777b:	00 09                	add    BYTE PTR [ecx],cl
9f00777d:	6c                   	ins    BYTE PTR es:[edi],dx
9f00777e:	69 62 63 5f 72 65 61 	imul   esp,DWORD PTR [edx+0x63],0x6165725f
9f007785:	6c                   	ins    BYTE PTR es:[edi],dx
9f007786:	6c                   	ins    BYTE PTR es:[edi],dx
9f007787:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007788:	63 3a                	arpl   WORD PTR [edx],di
9f00778a:	20 72 65             	and    BYTE PTR [edx+0x65],dh
9f00778d:	63 65 69             	arpl   WORD PTR [ebp+0x69],sp
9f007790:	76 65                	jbe    9f0077f7 <ansiEscSeq+0x417>
9f007792:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f007796:	77 20                	ja     9f0077b8 <ansiEscSeq+0x3d8>
9f007798:	6d                   	ins    DWORD PTR es:[edi],dx
9f007799:	61                   	popa   
9f00779a:	6c                   	ins    BYTE PTR es:[edi],dx
9f00779b:	6c                   	ins    BYTE PTR es:[edi],dx
9f00779c:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f00779d:	63 20                	arpl   WORD PTR [eax],sp
9f00779f:	70 6f                	jo     9f007810 <ansiEscSeq+0x430>
9f0077a1:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f0077a8:	78 25                	js     9f0077cf <ansiEscSeq+0x3ef>
9f0077aa:	30 38                	xor    BYTE PTR [eax],bh
9f0077ac:	78 2c                	js     9f0077da <ansiEscSeq+0x3fa>
9f0077ae:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f0077b1:	64 20 73 69          	and    BYTE PTR fs:[ebx+0x69],dh
9f0077b5:	7a 65                	jp     9f00781c <ansiEscSeq+0x43c>
9f0077b7:	3d 30 78 25 30       	cmp    eax,0x30257830
9f0077bc:	38 78 2c             	cmp    BYTE PTR [eax+0x2c],bh
9f0077bf:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
9f0077c2:	77 20                	ja     9f0077e4 <ansiEscSeq+0x404>
9f0077c4:	73 69                	jae    9f00782f <ansiEscSeq+0x44f>
9f0077c6:	7a 65                	jp     9f00782d <ansiEscSeq+0x44d>
9f0077c8:	3d 30 78 25 30       	cmp    eax,0x30257830
9f0077cd:	38 78 0a             	cmp    BYTE PTR [eax+0xa],bh
9f0077d0:	00 00                	add    BYTE PTR [eax],al
9f0077d2:	00 00                	add    BYTE PTR [eax],al
9f0077d4:	09 6c 69 62          	or     DWORD PTR [ecx+ebp*2+0x62],ebp
9f0077d8:	63 5f 72             	arpl   WORD PTR [edi+0x72],bx
9f0077db:	65                   	gs
9f0077dc:	61                   	popa   
9f0077dd:	6c                   	ins    BYTE PTR es:[edi],dx
9f0077de:	6c                   	ins    BYTE PTR es:[edi],dx
9f0077df:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0077e0:	63 3a                	arpl   WORD PTR [edx],di
9f0077e2:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
9f0077e5:	64                   	fs
9f0077e6:	61                   	popa   
9f0077e7:	74 65                	je     9f00784e <ansiEscSeq+0x46e>
9f0077e9:	64 20 6e 65          	and    BYTE PTR fs:[esi+0x65],ch
9f0077ed:	77 20                	ja     9f00780f <ansiEscSeq+0x42f>
9f0077ef:	70 6f                	jo     9f007860 <ansiEscSeq+0x480>
9f0077f1:	69 6e 74 65 72 20 30 	imul   ebp,DWORD PTR [esi+0x74],0x30207265
9f0077f8:	78 25                	js     9f00781f <ansiEscSeq+0x43f>
9f0077fa:	30 38                	xor    BYTE PTR [eax],bh
9f0077fc:	78 20                	js     9f00781e <ansiEscSeq+0x43e>
9f0077fe:	77 69                	ja     9f007869 <ansiEscSeq+0x489>
9f007800:	74 68                	je     9f00786a <ansiEscSeq+0x48a>
9f007802:	20 6f 6c             	and    BYTE PTR [edi+0x6c],ch
9f007805:	64 20 70 6f          	and    BYTE PTR fs:[eax+0x6f],dh
9f007809:	69 6e 74 65 72 20 64 	imul   ebp,DWORD PTR [esi+0x74],0x64207265
9f007810:	61                   	popa   
9f007811:	74 61                	je     9f007874 <ansiEscSeq+0x494>
9f007813:	20 61 6e             	and    BYTE PTR [ecx+0x6e],ah
9f007816:	64 20 63 6c          	and    BYTE PTR fs:[ebx+0x6c],ah
9f00781a:	65                   	gs
9f00781b:	61                   	popa   
9f00781c:	72 65                	jb     9f007883 <ansiEscSeq+0x4a3>
9f00781e:	64 20 6f 75          	and    BYTE PTR fs:[edi+0x75],ch
9f007822:	74 20                	je     9f007844 <ansiEscSeq+0x464>
9f007824:	72 65                	jb     9f00788b <ansiEscSeq+0x4ab>
9f007826:	6d                   	ins    DWORD PTR es:[edi],dx
9f007827:	61                   	popa   
9f007828:	69 6e 67 20 69 66 20 	imul   ebp,DWORD PTR [esi+0x67],0x20666920
9f00782f:	61                   	popa   
9f007830:	70 70                	jo     9f0078a2 <ansiEscSeq+0x4c2>
9f007832:	6c                   	ins    BYTE PTR es:[edi],dx
9f007833:	69 63 61 62 6c 65 0a 	imul   esp,DWORD PTR [ebx+0x61],0xa656c62
9f00783a:	00 00                	add    BYTE PTR [eax],al
9f00783c:	00 00                	add    BYTE PTR [eax],al
9f00783e:	00 00                	add    BYTE PTR [eax],al
9f007840:	2d 00 00 28 00       	sub    eax,0x280000
9f007845:	29 00                	sub    DWORD PTR [eax],eax
9f007847:	25 2d 31 30 73       	and    eax,0x7330312d
9f00784c:	00 25 30 32 69 3a    	add    BYTE PTR ds:0x3a693230,ah
9f007852:	25 30 32 69 3a       	and    eax,0x3a693230
9f007857:	25 30 32 69 00       	and    eax,0x693230
9f00785c:	75 b0                	jne    9f00780e <ansiEscSeq+0x42e>
9f00785e:	ff                   	(bad)  
9f00785f:	ff c9                	dec    ecx
9f007861:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f007862:	ff                   	(bad)  
9f007863:	ff                   	(bad)  
9f007864:	b9 ae ff ff e7       	mov    ecx,0xe7ffffae
9f007869:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f00786a:	ff                   	(bad)  
9f00786b:	ff                   	(bad)  
9f00786c:	f8                   	clc    
9f00786d:	ad                   	lods   eax,DWORD PTR ds:[esi]
9f00786e:	ff                   	(bad)  
9f00786f:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f007872:	ff                   	(bad)  
9f007873:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f007876:	ff                   	(bad)  
9f007877:	ff 13                	call   DWORD PTR [ebx]
9f007879:	ae                   	scas   al,BYTE PTR es:[edi]
9f00787a:	ff                   	(bad)  
9f00787b:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f00787e:	ff                   	(bad)  
9f00787f:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f007882:	ff                   	(bad)  
9f007883:	ff 2e                	jmp    FWORD PTR [esi]
9f007885:	ae                   	scas   al,BYTE PTR es:[edi]
9f007886:	ff                   	(bad)  
9f007887:	ff 49 ae             	dec    DWORD PTR [ecx-0x52]
9f00788a:	ff                   	(bad)  
9f00788b:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f00788e:	ff                   	(bad)  
9f00788f:	ff 37                	push   DWORD PTR [edi]
9f007891:	af                   	scas   eax,DWORD PTR es:[edi]
9f007892:	ff                   	(bad)  
9f007893:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f007896:	ff                   	(bad)  
9f007897:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f00789a:	ff                   	(bad)  
9f00789b:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f00789e:	ff                   	(bad)  
9f00789f:	ff 64 ae ff          	jmp    DWORD PTR [esi+ebp*4-0x1]
9f0078a3:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f0078a6:	ff                   	(bad)  
9f0078a7:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f0078aa:	ff                   	(bad)  
9f0078ab:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f0078ae:	ff                   	(bad)  
9f0078af:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
9f0078b2:	ff                   	(bad)  
9f0078b3:	ff 46 b0             	inc    DWORD PTR [esi-0x50]
9f0078b6:	ff                   	(bad)  
9f0078b7:	ff 5e b0             	call   FWORD PTR [esi-0x50]
9f0078ba:	ff                   	(bad)  
9f0078bb:	ff 2f                	jmp    FWORD PTR [edi]
9f0078bd:	70 72                	jo     9f007931 <ansiEscSeq+0x551>
9f0078bf:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f0078c0:	63 2f                	arpl   WORD PTR [edi],bp
9f0078c2:	00 2f                	add    BYTE PTR [edi],ch
9f0078c4:	73 74                	jae    9f00793a <ansiEscSeq+0x55a>
9f0078c6:	61                   	popa   
9f0078c7:	74 00                	je     9f0078c9 <ansiEscSeq+0x4e9>
9f0078c9:	73 65                	jae    9f007930 <ansiEscSeq+0x550>
9f0078cb:	6c                   	ins    BYTE PTR es:[edi],dx
9f0078cc:	66                   	data16
9f0078cd:	00 72 00             	add    BYTE PTR [edx+0x0],dh
9f0078d0:	20 00                	and    BYTE PTR [eax],al
	...
9f0078de:	59                   	pop    ecx
9f0078df:	40                   	inc    eax
9f0078e0:	01 b6 ff ff 13 b6    	add    DWORD PTR [esi-0x49ec0001],esi
9f0078e6:	ff                   	(bad)  
9f0078e7:	ff 13                	call   DWORD PTR [ebx]
9f0078e9:	b6 ff                	mov    dh,0xff
9f0078eb:	ff 07                	inc    DWORD PTR [edi]
9f0078ed:	b6 ff                	mov    dh,0xff
9f0078ef:	ff 13                	call   DWORD PTR [ebx]
9f0078f1:	b6 ff                	mov    dh,0xff
9f0078f3:	ff 13                	call   DWORD PTR [ebx]
9f0078f5:	b6 ff                	mov    dh,0xff
9f0078f7:	ff 13                	call   DWORD PTR [ebx]
9f0078f9:	b6 ff                	mov    dh,0xff
9f0078fb:	ff 13                	call   DWORD PTR [ebx]
9f0078fd:	b6 ff                	mov    dh,0xff
9f0078ff:	ff 13                	call   DWORD PTR [ebx]
9f007901:	b6 ff                	mov    dh,0xff
9f007903:	ff 13                	call   DWORD PTR [ebx]
9f007905:	b6 ff                	mov    dh,0xff
9f007907:	ff 13                	call   DWORD PTR [ebx]
9f007909:	b6 ff                	mov    dh,0xff
9f00790b:	ff                   	(bad)  
9f00790c:	fb                   	sti    
9f00790d:	b5 ff                	mov    ch,0xff
9f00790f:	ff 13                	call   DWORD PTR [ebx]
9f007911:	b6 ff                	mov    dh,0xff
9f007913:	ff f5                	push   ebp
9f007915:	b5 ff                	mov    ch,0xff
9f007917:	ff 13                	call   DWORD PTR [ebx]
9f007919:	b6 ff                	mov    dh,0xff
9f00791b:	ff 13                	call   DWORD PTR [ebx]
9f00791d:	b6 ff                	mov    dh,0xff
9f00791f:	ff 0d b6 ff ff b2    	dec    DWORD PTR ds:0xb2ffffb6
9f007925:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f00792a:	ff                   	(bad)  
9f00792b:	ff df                	call   <internal disassembler error>
9f00792d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007932:	ff                   	(bad)  
9f007933:	ff df                	call   <internal disassembler error>
9f007935:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f00793a:	ff                   	(bad)  
9f00793b:	ff df                	call   <internal disassembler error>
9f00793d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007942:	ff                   	(bad)  
9f007943:	ff df                	call   <internal disassembler error>
9f007945:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f00794a:	ff                   	(bad)  
9f00794b:	ff df                	call   <internal disassembler error>
9f00794d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007952:	ff                   	(bad)  
9f007953:	ff df                	call   <internal disassembler error>
9f007955:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f00795a:	ff                   	(bad)  
9f00795b:	ff df                	call   <internal disassembler error>
9f00795d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007962:	ff                   	(bad)  
9f007963:	ff df                	call   <internal disassembler error>
9f007965:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f00796a:	ff                   	(bad)  
9f00796b:	ff df                	call   <internal disassembler error>
9f00796d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007972:	ff                   	(bad)  
9f007973:	ff df                	call   <internal disassembler error>
9f007975:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f00797a:	ff                   	(bad)  
9f00797b:	ff df                	call   <internal disassembler error>
9f00797d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007982:	ff                   	(bad)  
9f007983:	ff df                	call   <internal disassembler error>
9f007985:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f00798a:	ff                   	(bad)  
9f00798b:	ff df                	call   <internal disassembler error>
9f00798d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007992:	ff                   	(bad)  
9f007993:	ff df                	call   <internal disassembler error>
9f007995:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f00799a:	ff                   	(bad)  
9f00799b:	ff df                	call   <internal disassembler error>
9f00799d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079a2:	ff                   	(bad)  
9f0079a3:	ff df                	call   <internal disassembler error>
9f0079a5:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079aa:	ff                   	(bad)  
9f0079ab:	ff df                	call   <internal disassembler error>
9f0079ad:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079b2:	ff                   	(bad)  
9f0079b3:	ff df                	call   <internal disassembler error>
9f0079b5:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079ba:	ff                   	(bad)  
9f0079bb:	ff df                	call   <internal disassembler error>
9f0079bd:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079c2:	ff                   	(bad)  
9f0079c3:	ff df                	call   <internal disassembler error>
9f0079c5:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079ca:	ff                   	(bad)  
9f0079cb:	ff df                	call   <internal disassembler error>
9f0079cd:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079d2:	ff                   	(bad)  
9f0079d3:	ff df                	call   <internal disassembler error>
9f0079d5:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079da:	ff                   	(bad)  
9f0079db:	ff df                	call   <internal disassembler error>
9f0079dd:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079e2:	ff                   	(bad)  
9f0079e3:	ff df                	call   <internal disassembler error>
9f0079e5:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079ea:	ff                   	(bad)  
9f0079eb:	ff df                	call   <internal disassembler error>
9f0079ed:	b8 ff ff d0 b8       	mov    eax,0xb8d0ffff
9f0079f2:	ff                   	(bad)  
9f0079f3:	ff df                	call   <internal disassembler error>
9f0079f5:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f0079fa:	ff                   	(bad)  
9f0079fb:	ff df                	call   <internal disassembler error>
9f0079fd:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a02:	ff                   	(bad)  
9f007a03:	ff df                	call   <internal disassembler error>
9f007a05:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a0a:	ff                   	(bad)  
9f007a0b:	ff df                	call   <internal disassembler error>
9f007a0d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a12:	ff                   	(bad)  
9f007a13:	ff df                	call   <internal disassembler error>
9f007a15:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a1a:	ff                   	(bad)  
9f007a1b:	ff                   	(bad)  
9f007a1c:	38 b7 ff ff d9 b8    	cmp    BYTE PTR [edi-0x47260001],dh
9f007a22:	ff                   	(bad)  
9f007a23:	ff df                	call   <internal disassembler error>
9f007a25:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a2a:	ff                   	(bad)  
9f007a2b:	ff df                	call   <internal disassembler error>
9f007a2d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a32:	ff                   	(bad)  
9f007a33:	ff d9                	call   <internal disassembler error>
9f007a35:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a3a:	ff                   	(bad)  
9f007a3b:	ff df                	call   <internal disassembler error>
9f007a3d:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a42:	ff                   	(bad)  
9f007a43:	ff df                	call   <internal disassembler error>
9f007a45:	b8 ff ff 6c b8       	mov    eax,0xb86cffff
9f007a4a:	ff                   	(bad)  
9f007a4b:	ff c3                	inc    ebx
9f007a4d:	b8 ff ff 2e b8       	mov    eax,0xb82effff
9f007a52:	ff                   	(bad)  
9f007a53:	ff df                	call   <internal disassembler error>
9f007a55:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a5a:	ff                   	(bad)  
9f007a5b:	ff 8d b7 ff ff df    	dec    DWORD PTR [ebp-0x20000049]
9f007a61:	b8 ff ff 19 b9       	mov    eax,0xb919ffff
9f007a66:	ff                   	(bad)  
9f007a67:	ff df                	call   <internal disassembler error>
9f007a69:	b8 ff ff df b8       	mov    eax,0xb8dfffff
9f007a6e:	ff                   	(bad)  
9f007a6f:	ff cc                	dec    esp
9f007a71:	b8 ff ff 30 31       	mov    eax,0x3130ffff

9f007a74 <digits.1301>:
9f007a74:	30 31                	xor    BYTE PTR [ecx],dh
9f007a76:	32 33                	xor    dh,BYTE PTR [ebx]
9f007a78:	34 35                	xor    al,0x35
9f007a7a:	36                   	ss
9f007a7b:	37                   	aaa    
9f007a7c:	38 39                	cmp    BYTE PTR [ecx],bh
9f007a7e:	41                   	inc    ecx
9f007a7f:	42                   	inc    edx
9f007a80:	43                   	inc    ebx
9f007a81:	44                   	inc    esp
9f007a82:	45                   	inc    ebp
9f007a83:	46                   	inc    esi
	...
9f007aa0:	47                   	inc    edi
9f007aa1:	4d                   	dec    ebp
9f007aa2:	54                   	push   esp
	...

9f007ac0 <_ytab>:
9f007ac0:	1f                   	pop    ds
9f007ac1:	00 00                	add    BYTE PTR [eax],al
9f007ac3:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
9f007ac6:	00 00                	add    BYTE PTR [eax],al
9f007ac8:	1f                   	pop    ds
9f007ac9:	00 00                	add    BYTE PTR [eax],al
9f007acb:	00 1e                	add    BYTE PTR [esi],bl
9f007acd:	00 00                	add    BYTE PTR [eax],al
9f007acf:	00 1f                	add    BYTE PTR [edi],bl
9f007ad1:	00 00                	add    BYTE PTR [eax],al
9f007ad3:	00 1e                	add    BYTE PTR [esi],bl
9f007ad5:	00 00                	add    BYTE PTR [eax],al
9f007ad7:	00 1f                	add    BYTE PTR [edi],bl
9f007ad9:	00 00                	add    BYTE PTR [eax],al
9f007adb:	00 1f                	add    BYTE PTR [edi],bl
9f007add:	00 00                	add    BYTE PTR [eax],al
9f007adf:	00 1e                	add    BYTE PTR [esi],bl
9f007ae1:	00 00                	add    BYTE PTR [eax],al
9f007ae3:	00 1f                	add    BYTE PTR [edi],bl
9f007ae5:	00 00                	add    BYTE PTR [eax],al
9f007ae7:	00 1e                	add    BYTE PTR [esi],bl
9f007ae9:	00 00                	add    BYTE PTR [eax],al
9f007aeb:	00 1f                	add    BYTE PTR [edi],bl
9f007aed:	00 00                	add    BYTE PTR [eax],al
9f007aef:	00 1f                	add    BYTE PTR [edi],bl
9f007af1:	00 00                	add    BYTE PTR [eax],al
9f007af3:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
9f007af9:	00 00                	add    BYTE PTR [eax],al
9f007afb:	00 1e                	add    BYTE PTR [esi],bl
9f007afd:	00 00                	add    BYTE PTR [eax],al
9f007aff:	00 1f                	add    BYTE PTR [edi],bl
9f007b01:	00 00                	add    BYTE PTR [eax],al
9f007b03:	00 1e                	add    BYTE PTR [esi],bl
9f007b05:	00 00                	add    BYTE PTR [eax],al
9f007b07:	00 1f                	add    BYTE PTR [edi],bl
9f007b09:	00 00                	add    BYTE PTR [eax],al
9f007b0b:	00 1f                	add    BYTE PTR [edi],bl
9f007b0d:	00 00                	add    BYTE PTR [eax],al
9f007b0f:	00 1e                	add    BYTE PTR [esi],bl
9f007b11:	00 00                	add    BYTE PTR [eax],al
9f007b13:	00 1f                	add    BYTE PTR [edi],bl
9f007b15:	00 00                	add    BYTE PTR [eax],al
9f007b17:	00 1e                	add    BYTE PTR [esi],bl
9f007b19:	00 00                	add    BYTE PTR [eax],al
9f007b1b:	00 1f                	add    BYTE PTR [edi],bl
9f007b1d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

9f007b20 <.rel.dyn>:
9f007b20:	64                   	fs
9f007b21:	7d 00                	jge    9f007b23 <_ytab+0x63>
9f007b23:	9f                   	lahf   
9f007b24:	08 00                	or     BYTE PTR [eax],al
9f007b26:	00 00                	add    BYTE PTR [eax],al
9f007b28:	68 7d 00 9f 08       	push   0x89f007d
9f007b2d:	00 00                	add    BYTE PTR [eax],al
9f007b2f:	00 6c 7d 00          	add    BYTE PTR [ebp+edi*2+0x0],ch
9f007b33:	9f                   	lahf   
9f007b34:	08 00                	or     BYTE PTR [eax],al
9f007b36:	00 00                	add    BYTE PTR [eax],al
9f007b38:	70 7d                	jo     9f007bb7 <_ytab+0xf7>
9f007b3a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007b40:	74 7d                	je     9f007bbf <_ytab+0xff>
9f007b42:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007b48:	7c 7d                	jl     9f007bc7 <_ytab+0x107>
9f007b4a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007b50:	88 7d 00             	mov    BYTE PTR [ebp+0x0],bh
9f007b53:	9f                   	lahf   
9f007b54:	08 00                	or     BYTE PTR [eax],al
9f007b56:	00 00                	add    BYTE PTR [eax],al
9f007b58:	8c 7d 00             	mov    WORD PTR [ebp+0x0],?
9f007b5b:	9f                   	lahf   
9f007b5c:	08 00                	or     BYTE PTR [eax],al
9f007b5e:	00 00                	add    BYTE PTR [eax],al
9f007b60:	90                   	nop
9f007b61:	7d 00                	jge    9f007b63 <_ytab+0xa3>
9f007b63:	9f                   	lahf   
9f007b64:	08 00                	or     BYTE PTR [eax],al
9f007b66:	00 00                	add    BYTE PTR [eax],al
9f007b68:	98                   	cwde   
9f007b69:	7d 00                	jge    9f007b6b <_ytab+0xab>
9f007b6b:	9f                   	lahf   
9f007b6c:	08 00                	or     BYTE PTR [eax],al
9f007b6e:	00 00                	add    BYTE PTR [eax],al
9f007b70:	ac                   	lods   al,BYTE PTR ds:[esi]
9f007b71:	7d 00                	jge    9f007b73 <_ytab+0xb3>
9f007b73:	9f                   	lahf   
9f007b74:	08 00                	or     BYTE PTR [eax],al
9f007b76:	00 00                	add    BYTE PTR [eax],al
9f007b78:	b0 7d                	mov    al,0x7d
9f007b7a:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007b80:	b4 7d                	mov    ah,0x7d
9f007b82:	00 9f 08 00 00 00    	add    BYTE PTR [edi+0x8],bl
9f007b88:	da 11                	ficom  DWORD PTR [ecx]
9f007b8a:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007b90:	1a 12                	sbb    dl,BYTE PTR [edx]
9f007b92:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007b98:	43                   	inc    ebx
9f007b99:	12 00                	adc    al,BYTE PTR [eax]
9f007b9b:	9f                   	lahf   
9f007b9c:	02 34 00             	add    dh,BYTE PTR [eax+eax*1]
9f007b9f:	00 5c 12 00          	add    BYTE PTR [edx+edx*1+0x0],bl
9f007ba3:	9f                   	lahf   
9f007ba4:	02 34 00             	add    dh,BYTE PTR [eax+eax*1]
9f007ba7:	00 b7 12 00 9f 02    	add    BYTE PTR [edi+0x29f0012],dh
9f007bad:	34 00                	xor    al,0x0
9f007baf:	00 1a                	add    BYTE PTR [edx],bl
9f007bb1:	13 00                	adc    eax,DWORD PTR [eax]
9f007bb3:	9f                   	lahf   
9f007bb4:	02 34 00             	add    dh,BYTE PTR [eax+eax*1]
9f007bb7:	00 51 13             	add    BYTE PTR [ecx+0x13],dl
9f007bba:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007bc0:	8d 13                	lea    edx,[ebx]
9f007bc2:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007bc8:	cb                   	retf   
9f007bc9:	13 00                	adc    eax,DWORD PTR [eax]
9f007bcb:	9f                   	lahf   
9f007bcc:	02 34 00             	add    dh,BYTE PTR [eax+eax*1]
9f007bcf:	00 0b                	add    BYTE PTR [ebx],cl
9f007bd1:	14 00                	adc    al,0x0
9f007bd3:	9f                   	lahf   
9f007bd4:	02 34 00             	add    dh,BYTE PTR [eax+eax*1]
9f007bd7:	00 4d 14             	add    BYTE PTR [ebp+0x14],cl
9f007bda:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007be0:	39 17                	cmp    DWORD PTR [edi],edx
9f007be2:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007be8:	66 17                	popw   ss
9f007bea:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007bf0:	a9 17 00 9f 02       	test   eax,0x29f0017
9f007bf5:	34 00                	xor    al,0x0
9f007bf7:	00 d6                	add    dh,dl
9f007bf9:	17                   	pop    ss
9f007bfa:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007c00:	19 18                	sbb    DWORD PTR [eax],ebx
9f007c02:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007c08:	46                   	inc    esi
9f007c09:	18 00                	sbb    BYTE PTR [eax],al
9f007c0b:	9f                   	lahf   
9f007c0c:	02 34 00             	add    dh,BYTE PTR [eax+eax*1]
9f007c0f:	00 d3                	add    bl,dl
9f007c11:	43                   	inc    ebx
9f007c12:	00 9f 02 34 00 00    	add    BYTE PTR [edi+0x3402],bl
9f007c18:	39 50 00             	cmp    DWORD PTR [eax+0x0],edx
9f007c1b:	9f                   	lahf   
9f007c1c:	02 34 00             	add    dh,BYTE PTR [eax+eax*1]
9f007c1f:	00 78 7d             	add    BYTE PTR [eax+0x7d],bh
9f007c22:	00 9f 06 23 00 00    	add    BYTE PTR [edi+0x2306],bl
9f007c28:	80 7d 00 9f          	cmp    BYTE PTR [ebp+0x0],0x9f
9f007c2c:	06                   	push   es
9f007c2d:	28 00                	sub    BYTE PTR [eax],al
9f007c2f:	00 84 7d 00 9f 06 2a 	add    BYTE PTR [ebp+edi*2+0x2a069f00],al
9f007c36:	00 00                	add    BYTE PTR [eax],al
9f007c38:	94                   	xchg   esp,eax
9f007c39:	7d 00                	jge    9f007c3b <_ytab+0x17b>
9f007c3b:	9f                   	lahf   
9f007c3c:	06                   	push   es
9f007c3d:	44                   	inc    esp
9f007c3e:	00 00                	add    BYTE PTR [eax],al
9f007c40:	a8 7d                	test   al,0x7d
9f007c42:	00 9f 01 1a 00 00    	add    BYTE PTR [edi+0x1a01],bl

Disassembly of section .data:

9f007c60 <rcsid>:
9f007c60:	24 48                	and    al,0x48
9f007c62:	65                   	gs
9f007c63:	61                   	popa   
9f007c64:	64                   	fs
9f007c65:	65                   	gs
9f007c66:	72 3a                	jb     9f007ca2 <rcsid+0x42>
9f007c68:	20 2f                	and    BYTE PTR [edi],ch
9f007c6a:	75 73                	jne    9f007cdf <_DYNAMIC+0x13>
9f007c6c:	65                   	gs
9f007c6d:	72 36                	jb     9f007ca5 <rcsid+0x45>
9f007c6f:	2f                   	das    
9f007c70:	6f                   	outs   dx,DWORD PTR ds:[esi]
9f007c71:	75 73                	jne    9f007ce6 <_DYNAMIC+0x1a>
9f007c73:	74 65                	je     9f007cda <_DYNAMIC+0xe>
9f007c75:	72 2f                	jb     9f007ca6 <rcsid+0x46>
9f007c77:	74 63                	je     9f007cdc <_DYNAMIC+0x10>
9f007c79:	6c                   	ins    BYTE PTR es:[edi],dx
9f007c7a:	2f                   	das    
9f007c7b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
9f007c7e:	70 61                	jo     9f007ce1 <_DYNAMIC+0x15>
9f007c80:	74 2f                	je     9f007cb1 <rcsid+0x51>
9f007c82:	52                   	push   edx
9f007c83:	43                   	inc    ebx
9f007c84:	53                   	push   ebx
9f007c85:	2f                   	das    
9f007c86:	73 74                	jae    9f007cfc <_DYNAMIC+0x30>
9f007c88:	72 73                	jb     9f007cfd <_DYNAMIC+0x31>
9f007c8a:	74 72                	je     9f007cfe <_DYNAMIC+0x32>
9f007c8c:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
9f007c90:	20 31                	and    BYTE PTR [ecx],dh
9f007c92:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
9f007c95:	39 33                	cmp    DWORD PTR [ebx],esi
9f007c97:	2f                   	das    
9f007c98:	30 33                	xor    BYTE PTR [ebx],dh
9f007c9a:	2f                   	das    
9f007c9b:	31 39                	xor    DWORD PTR [ecx],edi
9f007c9d:	20 31                	and    BYTE PTR [ecx],dh
9f007c9f:	35 3a 32 35 3a       	xor    eax,0x3a35323a
9f007ca4:	34 30                	xor    al,0x30
9f007ca6:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
9f007ca9:	73 74                	jae    9f007d1f <_DYNAMIC+0x53>
9f007cab:	65                   	gs
9f007cac:	72 20                	jb     9f007cce <_DYNAMIC+0x2>
9f007cae:	45                   	inc    ebp
9f007caf:	78 70                	js     9f007d21 <_DYNAMIC+0x55>
9f007cb1:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
9f007cb4:	53                   	push   ebx
9f007cb5:	50                   	push   eax
9f007cb6:	52                   	push   edx
9f007cb7:	49                   	dec    ecx
9f007cb8:	54                   	push   esp
9f007cb9:	45                   	inc    ebp
9f007cba:	20 28                	and    BYTE PTR [eax],ch
9f007cbc:	42                   	inc    edx
9f007cbd:	65                   	gs
9f007cbe:	72 6b                	jb     9f007d2b <_DYNAMIC+0x5f>
9f007cc0:	65                   	gs
9f007cc1:	6c                   	ins    BYTE PTR es:[edi],dx
9f007cc2:	65                   	gs
9f007cc3:	79 29                	jns    9f007cee <_DYNAMIC+0x22>
9f007cc5:	00 00                	add    BYTE PTR [eax],al
	...

9f007cc8 <_daylight>:
9f007cc8:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

9f007ccc <_DYNAMIC>:
9f007ccc:	19 00                	sbb    DWORD PTR [eax],eax
9f007cce:	00 00                	add    BYTE PTR [eax],al
9f007cd0:	a8 7d                	test   al,0x7d
9f007cd2:	00 9f 1b 00 00 00    	add    BYTE PTR [edi+0x1b],bl
9f007cd8:	04 00                	add    al,0x0
9f007cda:	00 00                	add    BYTE PTR [eax],al
9f007cdc:	1a 00                	sbb    al,BYTE PTR [eax]
9f007cde:	00 00                	add    BYTE PTR [eax],al
9f007ce0:	ac                   	lods   al,BYTE PTR ds:[esi]
9f007ce1:	7d 00                	jge    9f007ce3 <_DYNAMIC+0x17>
9f007ce3:	9f                   	lahf   
9f007ce4:	1c 00                	sbb    al,0x0
9f007ce6:	00 00                	add    BYTE PTR [eax],al
9f007ce8:	04 00                	add    al,0x0
9f007cea:	00 00                	add    BYTE PTR [eax],al
9f007cec:	04 00                	add    al,0x0
9f007cee:	00 00                	add    BYTE PTR [eax],al
9f007cf0:	c8 6c 00 9f          	enter  0x6c,0x9f
9f007cf4:	05 00 00 00 1c       	add    eax,0x1c000000
9f007cf9:	6a 00                	push   0x0
9f007cfb:	9f                   	lahf   
9f007cfc:	06                   	push   es
9f007cfd:	00 00                	add    BYTE PTR [eax],al
9f007cff:	00 9c 64 00 9f 0a 00 	add    BYTE PTR [esp+eiz*2+0xa9f00],bl
9f007d06:	00 00                	add    BYTE PTR [eax],al
9f007d08:	ab                   	stos   DWORD PTR es:[edi],eax
9f007d09:	02 00                	add    al,BYTE PTR [eax]
9f007d0b:	00 0b                	add    BYTE PTR [ebx],cl
9f007d0d:	00 00                	add    BYTE PTR [eax],al
9f007d0f:	00 10                	add    BYTE PTR [eax],dl
9f007d11:	00 00                	add    BYTE PTR [eax],al
9f007d13:	00 11                	add    BYTE PTR [ecx],dl
9f007d15:	00 00                	add    BYTE PTR [eax],al
9f007d17:	00 20                	add    BYTE PTR [eax],ah
9f007d19:	7b 00                	jnp    9f007d1b <_DYNAMIC+0x4f>
9f007d1b:	9f                   	lahf   
9f007d1c:	12 00                	adc    al,BYTE PTR [eax]
9f007d1e:	00 00                	add    BYTE PTR [eax],al
9f007d20:	28 01                	sub    BYTE PTR [ecx],al
9f007d22:	00 00                	add    BYTE PTR [eax],al
9f007d24:	13 00                	adc    eax,DWORD PTR [eax]
9f007d26:	00 00                	add    BYTE PTR [eax],al
9f007d28:	08 00                	or     BYTE PTR [eax],al
9f007d2a:	00 00                	add    BYTE PTR [eax],al
9f007d2c:	16                   	push   ss
9f007d2d:	00 00                	add    BYTE PTR [eax],al
9f007d2f:	00 00                	add    BYTE PTR [eax],al
9f007d31:	00 00                	add    BYTE PTR [eax],al
9f007d33:	00 fa                	add    dl,bh
9f007d35:	ff                   	(bad)  
9f007d36:	ff 6f 0d             	jmp    FWORD PTR [edi+0xd]
	...

Disassembly of section .got:

9f007d64 <.got>:
9f007d64:	d4 7d                	aam    0x7d
9f007d66:	00 9f ec 7d 00 9f    	add    BYTE PTR [edi-0x60ff8214],bl
9f007d6c:	cc                   	int3   
9f007d6d:	7d 00                	jge    9f007d6f <_DYNAMIC+0xa3>
9f007d6f:	9f                   	lahf   
9f007d70:	d8 7d 00             	fdivr  DWORD PTR [ebp+0x0]
9f007d73:	9f                   	lahf   
9f007d74:	d0 7d 00             	sar    BYTE PTR [ebp+0x0],1
9f007d77:	9f                   	lahf   
9f007d78:	00 00                	add    BYTE PTR [eax],al
9f007d7a:	00 00                	add    BYTE PTR [eax],al
9f007d7c:	e8 7d 00 9f 00       	call   9f9f7dfe <tmbuf+0x9eff7e>
9f007d81:	00 00                	add    BYTE PTR [eax],al
9f007d83:	00 00                	add    BYTE PTR [eax],al
9f007d85:	00 00                	add    BYTE PTR [eax],al
9f007d87:	00 c0                	add    al,al
9f007d89:	7d 00                	jge    9f007d8b <_DYNAMIC+0xbf>
9f007d8b:	9f                   	lahf   
9f007d8c:	dc 7d 00             	fdivr  QWORD PTR [ebp+0x0]
9f007d8f:	9f                   	lahf   
9f007d90:	e0 7d                	loopne 9f007e0f <heapEnd+0x3>
9f007d92:	00 9f 00 00 00 00    	add    BYTE PTR [edi+0x0],bl
9f007d98:	80 7e 00 9f          	cmp    BYTE PTR [esi+0x0],0x9f

Disassembly of section .got.plt:

9f007d9c <_GLOBAL_OFFSET_TABLE_>:
9f007d9c:	cc                   	int3   
9f007d9d:	7c 00                	jl     9f007d9f <_GLOBAL_OFFSET_TABLE_+0x3>
9f007d9f:	9f                   	lahf   
	...

Disassembly of section .init_array:

9f007da8 <.init_array>:
9f007da8:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

9f007dac <.fini_array>:
9f007dac:	29                   	.byte 0x29
9f007dad:	15                   	.byte 0x15
9f007dae:	00                   	.byte 0x0
9f007daf:	9f                   	lahf   

Disassembly of section .data.rel.local:

9f007db0 <_tzname>:
9f007db0:	a0 7a 00 9f a0       	mov    al,ds:0xa09f007a
9f007db5:	7a 00                	jp     9f007db7 <_tzname+0x7>
9f007db7:	9f                   	lahf   

Disassembly of section .bss:

9f007dc0 <processEnvp>:
9f007dc0:	00 00                	add    BYTE PTR [eax],al
	...

9f007dc4 <lasts.1296>:
9f007dc4:	00 00                	add    BYTE PTR [eax],al
	...

9f007dc8 <lasts.1304>:
9f007dc8:	00 00                	add    BYTE PTR [eax],al
	...

9f007dcc <filesToCloseCount>:
9f007dcc:	00 00                	add    BYTE PTR [eax],al
	...

9f007dd0 <filesToClose>:
9f007dd0:	00 00                	add    BYTE PTR [eax],al
	...

9f007dd4 <resolvePath_envPath>:
9f007dd4:	00 00                	add    BYTE PTR [eax],al
	...

9f007dd8 <resolvePath_resPath>:
9f007dd8:	00 00                	add    BYTE PTR [eax],al
	...

9f007ddc <resolvePath_cwd>:
9f007ddc:	00 00                	add    BYTE PTR [eax],al
	...

9f007de0 <resolvePath_inPath>:
9f007de0:	00 00                	add    BYTE PTR [eax],al
	...

9f007de4 <libcInitialized>:
9f007de4:	00 00                	add    BYTE PTR [eax],al
	...

9f007de8 <printBuffer>:
9f007de8:	00 00                	add    BYTE PTR [eax],al
	...

9f007dec <params>:
	...

9f007e04 <heapBase>:
9f007e04:	00 00                	add    BYTE PTR [eax],al
	...

9f007e08 <heapCurr>:
9f007e08:	00 00                	add    BYTE PTR [eax],al
	...

9f007e0c <heapEnd>:
9f007e0c:	00 00                	add    BYTE PTR [eax],al
	...

9f007e10 <lastHRCreated.1277>:
	...

9f007e20 <tinfo.1481>:
	...

9f007e4c <dirEntries.1507>:
9f007e4c:	00 00                	add    BYTE PTR [eax],al
	...

9f007e50 <_dstbias>:
9f007e50:	00 00                	add    BYTE PTR [eax],al
	...

9f007e54 <libcTZ>:
	...

9f007e60 <ticksToWait>:
	...

9f007e80 <tmbuf>:
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	09 01                	or     DWORD PTR [ecx],eax
       2:	00 00                	add    BYTE PTR [eax],al
       4:	04 00                	add    al,0x0
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	c3                   	ret    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c 84             	add    BYTE PTR [esp+eax*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
      2c:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
      2f:	32 00                	xor    al,BYTE PTR [eax]
      31:	00 00                	add    BYTE PTR [eax],al
      33:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
      3a:	03 08                	add    ecx,DWORD PTR [eax]
      3c:	05 00 00 00 00       	add    eax,0x0
      41:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
      44:	ad                   	lods   eax,DWORD PTR ds:[esi]
      45:	00 00                	add    BYTE PTR [eax],al
      47:	00 03                	add    BYTE PTR [ebx],al
      49:	01 06                	add    DWORD PTR [esi],eax
      4b:	48                   	dec    eax
      4c:	00 00                	add    BYTE PTR [eax],al
      4e:	00 03                	add    BYTE PTR [ebx],al
      50:	01 08                	add    DWORD PTR [eax],ecx
      52:	3f                   	aas    
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 03                	add    BYTE PTR [ebx],al
      57:	02 07                	add    al,BYTE PTR [edi]
      59:	0e                   	push   cs
      5a:	00 00                	add    BYTE PTR [eax],al
      5c:	00 03                	add    BYTE PTR [ebx],al
      5e:	04 07                	add    al,0x7
      60:	2d 00 00 00 03       	sub    eax,0x3000000
      65:	01 06                	add    DWORD PTR [esi],eax
      67:	41                   	inc    ecx
      68:	00 00                	add    BYTE PTR [eax],al
      6a:	00 03                	add    BYTE PTR [ebx],al
      6c:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
      72:	03 08                	add    ecx,DWORD PTR [eax]
      74:	07                   	pop    es
      75:	28 00                	sub    BYTE PTR [eax],al
      77:	00 00                	add    BYTE PTR [eax],al
      79:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
      7c:	2a 01                	sub    al,BYTE PTR [ecx]
      7e:	00 00                	add    BYTE PTR [eax],al
      80:	04 04                	add    al,0x4
      82:	48                   	dec    eax
      83:	00 00                	add    BYTE PTR [eax],al
      85:	00 05 21 00 00 00    	add    BYTE PTR ds:0x21,al
      8b:	01 09                	add    DWORD PTR [ecx],ecx
      8d:	80 00 00             	add    BYTE PTR [eax],0x0
      90:	00 00                	add    BYTE PTR [eax],al
      92:	00 00                	add    BYTE PTR [eax],al
      94:	9f                   	lahf   
      95:	38 00                	cmp    BYTE PTR [eax],al
      97:	00 00                	add    BYTE PTR [eax],al
      99:	01 9c b8 00 00 00 06 	add    DWORD PTR [eax+edi*4+0x6000000],ebx
      a0:	73 00                	jae    a2 <sysEnter_Vector-0x12ff5e>
      a2:	01 09                	add    DWORD PTR [ecx],ecx
      a4:	b8 00 00 00 02       	mov    eax,0x2000000
      a9:	91                   	xchg   ecx,eax
      aa:	00 06                	add    BYTE PTR [esi],al
      ac:	63 00                	arpl   WORD PTR [eax],ax
      ae:	01 09                	add    DWORD PTR [ecx],ecx
      b0:	25 00 00 00 02       	and    eax,0x2000000
      b5:	91                   	xchg   ecx,eax
      b6:	04 00                	add    al,0x0
      b8:	04 04                	add    al,0x4
      ba:	be 00 00 00 07       	mov    esi,0x7000000
      bf:	48                   	dec    eax
      c0:	00 00                	add    BYTE PTR [eax],al
      c2:	00 05 70 00 00 00    	add    BYTE PTR ds:0x70,al
      c8:	01 11                	add    DWORD PTR [ecx],edx
      ca:	80 00 00             	add    BYTE PTR [eax],0x0
      cd:	00 38                	add    BYTE PTR [eax],bh
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	9f                   	lahf   
      d2:	38 00                	cmp    BYTE PTR [eax],al
      d4:	00 00                	add    BYTE PTR [eax],al
      d6:	01 9c f5 00 00 00 06 	add    DWORD PTR [ebp+esi*8+0x6000000],ebx
      dd:	73 00                	jae    df <sysEnter_Vector-0x12ff21>
      df:	01 11                	add    DWORD PTR [ecx],edx
      e1:	b8 00 00 00 02       	mov    eax,0x2000000
      e6:	91                   	xchg   ecx,eax
      e7:	00 06                	add    BYTE PTR [esi],al
      e9:	63 00                	arpl   WORD PTR [eax],ax
      eb:	01 11                	add    DWORD PTR [ecx],edx
      ed:	25 00 00 00 02       	and    eax,0x2000000
      f2:	91                   	xchg   ecx,eax
      f3:	04 00                	add    al,0x0
      f5:	08 78 00             	or     BYTE PTR [eax+0x0],bh
      f8:	00 00                	add    BYTE PTR [eax],al
      fa:	02 33                	add    dh,BYTE PTR [ebx]
      fc:	06                   	push   es
      fd:	01 00                	add    DWORD PTR [eax],eax
      ff:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
     105:	9f                   	lahf   
     106:	04 04                	add    al,0x4
     108:	80 00 00             	add    BYTE PTR [eax],0x0
     10b:	00 00                	add    BYTE PTR [eax],al
     10d:	48                   	dec    eax
     10e:	01 00                	add    DWORD PTR [eax],eax
     110:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     113:	76 00                	jbe    115 <sysEnter_Vector-0x12feeb>
     115:	00 00                	add    BYTE PTR [eax],al
     117:	04 01                	add    al,0x1
     119:	c3                   	ret    
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 0c 39             	add    BYTE PTR [ecx+edi*1],cl
     11f:	01 00                	add    DWORD PTR [eax],eax
     121:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     124:	00 00                	add    BYTE PTR [eax],al
     126:	70 00                	jo     128 <sysEnter_Vector-0x12fed8>
     128:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     12e:	79 00                	jns    130 <sysEnter_Vector-0x12fed0>
     130:	00 00                	add    BYTE PTR [eax],al
     132:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
     139:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     13c:	32 00                	xor    al,BYTE PTR [eax]
     13e:	00 00                	add    BYTE PTR [eax],al
     140:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     147:	03 08                	add    ecx,DWORD PTR [eax]
     149:	05 00 00 00 00       	add    eax,0x0
     14e:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     151:	ad                   	lods   eax,DWORD PTR ds:[esi]
     152:	00 00                	add    BYTE PTR [eax],al
     154:	00 03                	add    BYTE PTR [ebx],al
     156:	01 06                	add    DWORD PTR [esi],eax
     158:	48                   	dec    eax
     159:	00 00                	add    BYTE PTR [eax],al
     15b:	00 03                	add    BYTE PTR [ebx],al
     15d:	01 08                	add    DWORD PTR [eax],ecx
     15f:	3f                   	aas    
     160:	00 00                	add    BYTE PTR [eax],al
     162:	00 03                	add    BYTE PTR [ebx],al
     164:	02 07                	add    al,BYTE PTR [edi]
     166:	0e                   	push   cs
     167:	00 00                	add    BYTE PTR [eax],al
     169:	00 03                	add    BYTE PTR [ebx],al
     16b:	04 07                	add    al,0x7
     16d:	2d 00 00 00 03       	sub    eax,0x3000000
     172:	01 06                	add    DWORD PTR [esi],eax
     174:	41                   	inc    ecx
     175:	00 00                	add    BYTE PTR [eax],al
     177:	00 03                	add    BYTE PTR [ebx],al
     179:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     17f:	03 08                	add    ecx,DWORD PTR [eax]
     181:	07                   	pop    es
     182:	28 00                	sub    BYTE PTR [eax],al
     184:	00 00                	add    BYTE PTR [eax],al
     186:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     189:	2a 01                	sub    al,BYTE PTR [ecx]
     18b:	00 00                	add    BYTE PTR [eax],al
     18d:	04 04                	add    al,0x4
     18f:	48                   	dec    eax
     190:	00 00                	add    BYTE PTR [eax],al
     192:	00 05 63 01 00 00    	add    BYTE PTR ds:0x163,al
     198:	01 26                	add    DWORD PTR [esi],esp
     19a:	25 00 00 00 70       	and    eax,0x70000000
     19f:	00 00                	add    BYTE PTR [eax],al
     1a1:	9f                   	lahf   
     1a2:	55                   	push   ebp
     1a3:	00 00                	add    BYTE PTR [eax],al
     1a5:	00 01                	add    BYTE PTR [ecx],al
     1a7:	9c                   	pushf  
     1a8:	dd 00                	fld    QWORD PTR [eax]
     1aa:	00 00                	add    BYTE PTR [eax],al
     1ac:	06                   	push   es
     1ad:	d7                   	xlat   BYTE PTR ds:[ebx]
     1ae:	10 00                	adc    BYTE PTR [eax],al
     1b0:	00 01                	add    BYTE PTR [ecx],al
     1b2:	26 80 00 00          	add    BYTE PTR es:[eax],0x0
     1b6:	00 02                	add    BYTE PTR [edx],al
     1b8:	91                   	xchg   ecx,eax
     1b9:	00 06                	add    BYTE PTR [esi],al
     1bb:	33 01                	xor    eax,DWORD PTR [ecx]
     1bd:	00 00                	add    BYTE PTR [eax],al
     1bf:	01 26                	add    DWORD PTR [esi],esp
     1c1:	80 00 00             	add    BYTE PTR [eax],0x0
     1c4:	00 02                	add    BYTE PTR [edx],al
     1c6:	91                   	xchg   ecx,eax
     1c7:	04 07                	add    al,0x7
     1c9:	63 00                	arpl   WORD PTR [eax],ax
     1cb:	01 28                	add    DWORD PTR [eax],ebp
     1cd:	48                   	dec    eax
     1ce:	00 00                	add    BYTE PTR [eax],al
     1d0:	00 01                	add    BYTE PTR [ecx],al
     1d2:	51                   	push   ecx
     1d3:	07                   	pop    es
     1d4:	70 00                	jo     1d6 <sysEnter_Vector-0x12fe2a>
     1d6:	01 28                	add    DWORD PTR [eax],ebp
     1d8:	80 00 00             	add    BYTE PTR [eax],0x0
     1db:	00 01                	add    BYTE PTR [ecx],al
     1dd:	56                   	push   esi
     1de:	07                   	pop    es
     1df:	73 00                	jae    1e1 <sysEnter_Vector-0x12fe1f>
     1e1:	01 28                	add    DWORD PTR [eax],ebp
     1e3:	80 00 00             	add    BYTE PTR [eax],0x0
     1e6:	00 01                	add    BYTE PTR [ecx],al
     1e8:	53                   	push   ebx
     1e9:	00 05 6b 01 00 00    	add    BYTE PTR ds:0x16b,al
     1ef:	01 34 25 00 00 00 c5 	add    DWORD PTR [eiz*1-0x3b000000],esi
     1f6:	00 00                	add    BYTE PTR [eax],al
     1f8:	9f                   	lahf   
     1f9:	55                   	push   ebp
     1fa:	00 00                	add    BYTE PTR [eax],al
     1fc:	00 01                	add    BYTE PTR [ecx],al
     1fe:	9c                   	pushf  
     1ff:	34 01                	xor    al,0x1
     201:	00 00                	add    BYTE PTR [eax],al
     203:	06                   	push   es
     204:	d7                   	xlat   BYTE PTR ds:[ebx]
     205:	10 00                	adc    BYTE PTR [eax],al
     207:	00 01                	add    BYTE PTR [ecx],al
     209:	34 80                	xor    al,0x80
     20b:	00 00                	add    BYTE PTR [eax],al
     20d:	00 02                	add    BYTE PTR [edx],al
     20f:	91                   	xchg   ecx,eax
     210:	00 06                	add    BYTE PTR [esi],al
     212:	33 01                	xor    eax,DWORD PTR [ecx]
     214:	00 00                	add    BYTE PTR [eax],al
     216:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
     219:	00 00                	add    BYTE PTR [eax],al
     21b:	00 02                	add    BYTE PTR [edx],al
     21d:	91                   	xchg   ecx,eax
     21e:	04 07                	add    al,0x7
     220:	63 00                	arpl   WORD PTR [eax],ax
     222:	01 36                	add    DWORD PTR [esi],esi
     224:	48                   	dec    eax
     225:	00 00                	add    BYTE PTR [eax],al
     227:	00 01                	add    BYTE PTR [ecx],al
     229:	51                   	push   ecx
     22a:	07                   	pop    es
     22b:	70 00                	jo     22d <sysEnter_Vector-0x12fdd3>
     22d:	01 36                	add    DWORD PTR [esi],esi
     22f:	80 00 00             	add    BYTE PTR [eax],0x0
     232:	00 01                	add    BYTE PTR [ecx],al
     234:	56                   	push   esi
     235:	07                   	pop    es
     236:	73 00                	jae    238 <sysEnter_Vector-0x12fdc8>
     238:	01 36                	add    DWORD PTR [esi],esi
     23a:	80 00 00             	add    BYTE PTR [eax],0x0
     23d:	00 01                	add    BYTE PTR [ecx],al
     23f:	53                   	push   ebx
     240:	00 08                	add    BYTE PTR [eax],cl
     242:	78 00                	js     244 <sysEnter_Vector-0x12fdbc>
     244:	00 00                	add    BYTE PTR [eax],al
     246:	02 33                	add    dh,BYTE PTR [ebx]
     248:	45                   	inc    ebp
     249:	01 00                	add    DWORD PTR [eax],eax
     24b:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
     251:	9f                   	lahf   
     252:	04 04                	add    al,0x4
     254:	80 00 00             	add    BYTE PTR [eax],0x0
     257:	00 00                	add    BYTE PTR [eax],al
     259:	3c 01                	cmp    al,0x1
     25b:	00 00                	add    BYTE PTR [eax],al
     25d:	04 00                	add    al,0x0
     25f:	f4                   	hlt    
     260:	00 00                	add    BYTE PTR [eax],al
     262:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     265:	c3                   	ret    
     266:	00 00                	add    BYTE PTR [eax],al
     268:	00 0c 82             	add    BYTE PTR [edx+eax*4],cl
     26b:	01 00                	add    DWORD PTR [eax],eax
     26d:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     270:	00 00                	add    BYTE PTR [eax],al
     272:	1c 01                	sbb    al,0x1
     274:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
     27a:	23 01                	and    eax,DWORD PTR [ecx]
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
     285:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     288:	32 00                	xor    al,BYTE PTR [eax]
     28a:	00 00                	add    BYTE PTR [eax],al
     28c:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
     293:	03 08                	add    ecx,DWORD PTR [eax]
     295:	05 00 00 00 00       	add    eax,0x0
     29a:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
     29d:	ad                   	lods   eax,DWORD PTR ds:[esi]
     29e:	00 00                	add    BYTE PTR [eax],al
     2a0:	00 03                	add    BYTE PTR [ebx],al
     2a2:	01 06                	add    DWORD PTR [esi],eax
     2a4:	48                   	dec    eax
     2a5:	00 00                	add    BYTE PTR [eax],al
     2a7:	00 03                	add    BYTE PTR [ebx],al
     2a9:	01 08                	add    DWORD PTR [eax],ecx
     2ab:	3f                   	aas    
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	00 03                	add    BYTE PTR [ebx],al
     2b0:	02 07                	add    al,BYTE PTR [edi]
     2b2:	0e                   	push   cs
     2b3:	00 00                	add    BYTE PTR [eax],al
     2b5:	00 03                	add    BYTE PTR [ebx],al
     2b7:	04 07                	add    al,0x7
     2b9:	2d 00 00 00 03       	sub    eax,0x3000000
     2be:	01 06                	add    DWORD PTR [esi],eax
     2c0:	41                   	inc    ecx
     2c1:	00 00                	add    BYTE PTR [eax],al
     2c3:	00 03                	add    BYTE PTR [ebx],al
     2c5:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     2cb:	03 08                	add    ecx,DWORD PTR [eax]
     2cd:	07                   	pop    es
     2ce:	28 00                	sub    BYTE PTR [eax],al
     2d0:	00 00                	add    BYTE PTR [eax],al
     2d2:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
     2d5:	2a 01                	sub    al,BYTE PTR [ecx]
     2d7:	00 00                	add    BYTE PTR [eax],al
     2d9:	04 04                	add    al,0x4
     2db:	48                   	dec    eax
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	00 05 74 01 00 00    	add    BYTE PTR ds:0x174,al
     2e4:	01 2a                	add    DWORD PTR [edx],ebp
     2e6:	80 00 00             	add    BYTE PTR [eax],0x0
     2e9:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     2ec:	00 9f 97 00 00 00    	add    BYTE PTR [edi+0x97],bl
     2f2:	01 9c d7 00 00 00 06 	add    DWORD PTR [edi+edx*8+0x6000000],ebx
     2f9:	73 00                	jae    2fb <sysEnter_Vector-0x12fd05>
     2fb:	01 2a                	add    DWORD PTR [edx],ebp
     2fd:	80 00 00             	add    BYTE PTR [eax],0x0
     300:	00 02                	add    BYTE PTR [edx],al
     302:	91                   	xchg   ecx,eax
     303:	00 07                	add    BYTE PTR [edi],al
     305:	7c 01                	jl     308 <sysEnter_Vector-0x12fcf8>
     307:	00 00                	add    BYTE PTR [eax],al
     309:	01 2a                	add    DWORD PTR [edx],ebp
     30b:	80 00 00             	add    BYTE PTR [eax],0x0
     30e:	00 02                	add    BYTE PTR [edx],al
     310:	91                   	xchg   ecx,eax
     311:	04 08                	add    al,0x8
     313:	ab                   	stos   DWORD PTR es:[edi],eax
     314:	01 00                	add    DWORD PTR [eax],eax
     316:	00 01                	add    BYTE PTR [ecx],al
     318:	2c 80                	sub    al,0x80
     31a:	00 00                	add    BYTE PTR [eax],al
     31c:	00 05 03 c4 7d 00    	add    BYTE PTR ds:0x7dc403,al
     322:	9f                   	lahf   
     323:	09 63 68             	or     DWORD PTR [ebx+0x68],esp
     326:	00 01                	add    BYTE PTR [ecx],al
     328:	2d 25 00 00 00       	sub    eax,0x25
     32d:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     330:	05 b1 01 00 00       	add    eax,0x1b1
     335:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     338:	00 00                	add    BYTE PTR [eax],al
     33a:	00 b3 01 00 9f 97    	add    BYTE PTR [ebx-0x6860ffff],dh
     340:	00 00                	add    BYTE PTR [eax],al
     342:	00 01                	add    BYTE PTR [ecx],al
     344:	9c                   	pushf  
     345:	28 01                	sub    BYTE PTR [ecx],al
     347:	00 00                	add    BYTE PTR [eax],al
     349:	06                   	push   es
     34a:	73 00                	jae    34c <sysEnter_Vector-0x12fcb4>
     34c:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	00 02                	add    BYTE PTR [edx],al
     353:	91                   	xchg   ecx,eax
     354:	00 07                	add    BYTE PTR [edi],al
     356:	7c 01                	jl     359 <sysEnter_Vector-0x12fca7>
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	01 3c 80             	add    DWORD PTR [eax+eax*4],edi
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 02                	add    BYTE PTR [edx],al
     361:	91                   	xchg   ecx,eax
     362:	04 08                	add    al,0x8
     364:	ab                   	stos   DWORD PTR es:[edi],eax
     365:	01 00                	add    DWORD PTR [eax],eax
     367:	00 01                	add    BYTE PTR [ecx],al
     369:	3e 80 00 00          	add    BYTE PTR ds:[eax],0x0
     36d:	00 05 03 c8 7d 00    	add    BYTE PTR ds:0x7dc803,al
     373:	9f                   	lahf   
     374:	09 63 68             	or     DWORD PTR [ebx+0x68],esp
     377:	00 01                	add    BYTE PTR [ecx],al
     379:	3f                   	aas    
     37a:	25 00 00 00 01       	and    eax,0x1000000
     37f:	56                   	push   esi
     380:	00 0a                	add    BYTE PTR [edx],cl
     382:	78 00                	js     384 <sysEnter_Vector-0x12fc7c>
     384:	00 00                	add    BYTE PTR [eax],al
     386:	02 33                	add    dh,BYTE PTR [ebx]
     388:	39 01                	cmp    DWORD PTR [ecx],eax
     38a:	00 00                	add    BYTE PTR [eax],al
     38c:	05 03 c0 7d 00       	add    eax,0x7dc003
     391:	9f                   	lahf   
     392:	04 04                	add    al,0x4
     394:	80 00 00             	add    BYTE PTR [eax],0x0
     397:	00 00                	add    BYTE PTR [eax],al
     399:	e8 01 00 00 04       	call   400039f <sysEnter_Vector+0x3ed039f>
     39e:	00 90 01 00 00 04    	add    BYTE PTR [eax+0x4000001],dl
     3a4:	01 c3                	add    ebx,eax
     3a6:	00 00                	add    BYTE PTR [eax],al
     3a8:	00 0c d7             	add    BYTE PTR [edi+edx*8],cl
     3ab:	01 00                	add    DWORD PTR [eax],eax
     3ad:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     3b0:	00 00                	add    BYTE PTR [eax],al
     3b2:	4c                   	dec    esp
     3b3:	02 00                	add    al,BYTE PTR [eax]
     3b5:	9f                   	lahf   
     3b6:	65 02 00             	add    al,BYTE PTR gs:[eax]
     3b9:	00 ae 01 00 00 02    	add    BYTE PTR [esi+0x2000001],ch
     3bf:	01 08                	add    DWORD PTR [eax],ecx
     3c1:	3f                   	aas    
     3c2:	00 00                	add    BYTE PTR [eax],al
     3c4:	00 02                	add    BYTE PTR [edx],al
     3c6:	02 07                	add    al,BYTE PTR [edi]
     3c8:	0e                   	push   cs
     3c9:	00 00                	add    BYTE PTR [eax],al
     3cb:	00 02                	add    BYTE PTR [edx],al
     3cd:	04 07                	add    al,0x7
     3cf:	32 00                	xor    al,BYTE PTR [eax]
     3d1:	00 00                	add    BYTE PTR [eax],al
     3d3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     3d6:	2d 00 00 00 02       	sub    eax,0x2000000
     3db:	01 06                	add    DWORD PTR [esi],eax
     3dd:	41                   	inc    ecx
     3de:	00 00                	add    BYTE PTR [eax],al
     3e0:	00 02                	add    BYTE PTR [edx],al
     3e2:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     3e8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     3ef:	02 08                	add    cl,BYTE PTR [eax]
     3f1:	05 00 00 00 00       	add    eax,0x0
     3f6:	02 08                	add    cl,BYTE PTR [eax]
     3f8:	07                   	pop    es
     3f9:	28 00                	sub    BYTE PTR [eax],al
     3fb:	00 00                	add    BYTE PTR [eax],al
     3fd:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     404:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     407:	2a 01                	sub    al,BYTE PTR [ecx]
     409:	00 00                	add    BYTE PTR [eax],al
     40b:	04 04                	add    al,0x4
     40d:	78 00                	js     40f <sysEnter_Vector-0x12fbf1>
     40f:	00 00                	add    BYTE PTR [eax],al
     411:	02 01                	add    al,BYTE PTR [ecx]
     413:	06                   	push   es
     414:	48                   	dec    eax
     415:	00 00                	add    BYTE PTR [eax],al
     417:	00 02                	add    BYTE PTR [edx],al
     419:	0c 04                	or     al,0x4
     41b:	ad                   	lods   eax,DWORD PTR ds:[esi]
     41c:	00 00                	add    BYTE PTR [eax],al
     41e:	00 05 c9 01 00 00    	add    BYTE PTR ds:0x1c9,al
     424:	01 0a                	add    DWORD PTR [edx],ecx
     426:	4c                   	dec    esp
     427:	02 00                	add    al,BYTE PTR [eax]
     429:	9f                   	lahf   
     42a:	77 00                	ja     42c <sysEnter_Vector-0x12fbd4>
     42c:	00 00                	add    BYTE PTR [eax],al
     42e:	01 9c cc 00 00 00 06 	add    DWORD PTR [esp+ecx*8+0x6000000],ebx
     435:	73 00                	jae    437 <sysEnter_Vector-0x12fbc9>
     437:	01 0a                	add    DWORD PTR [edx],ecx
     439:	72 00                	jb     43b <sysEnter_Vector-0x12fbc5>
     43b:	00 00                	add    BYTE PTR [eax],al
     43d:	02 91 00 07 69 00    	add    dl,BYTE PTR [ecx+0x690700]
     443:	01 0c 4f             	add    DWORD PTR [edi+ecx*2],ecx
     446:	00 00                	add    BYTE PTR [eax],al
     448:	00 02                	add    BYTE PTR [edx],al
     44a:	91                   	xchg   ecx,eax
     44b:	6c                   	ins    BYTE PTR es:[edi],dx
     44c:	07                   	pop    es
     44d:	6a 00                	push   0x0
     44f:	01 0c 4f             	add    DWORD PTR [edi+ecx*2],ecx
     452:	00 00                	add    BYTE PTR [eax],al
     454:	00 02                	add    BYTE PTR [edx],al
     456:	91                   	xchg   ecx,eax
     457:	68 07 63 00 01       	push   0x1006307
     45c:	0d 78 00 00 00       	or     eax,0x78
     461:	02 91 67 00 05 b8    	add    dl,BYTE PTR [ecx-0x47faff99]
     467:	01 00                	add    DWORD PTR [eax],eax
     469:	00 01                	add    BYTE PTR [ecx],al
     46b:	16                   	push   ss
     46c:	c3                   	ret    
     46d:	02 00                	add    al,BYTE PTR [eax]
     46f:	9f                   	lahf   
     470:	bb 00 00 00 01       	mov    ebx,0x1000000
     475:	9c                   	pushf  
     476:	14 01                	adc    al,0x1
     478:	00 00                	add    BYTE PTR [eax],al
     47a:	06                   	push   es
     47b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     47c:	00 01                	add    BYTE PTR [ecx],al
     47e:	16                   	push   ss
     47f:	4f                   	dec    edi
     480:	00 00                	add    BYTE PTR [eax],al
     482:	00 02                	add    BYTE PTR [edx],al
     484:	91                   	xchg   ecx,eax
     485:	00 06                	add    BYTE PTR [esi],al
     487:	73 00                	jae    489 <sysEnter_Vector-0x12fb77>
     489:	01 16                	add    DWORD PTR [esi],edx
     48b:	72 00                	jb     48d <sysEnter_Vector-0x12fb73>
     48d:	00 00                	add    BYTE PTR [eax],al
     48f:	02 91 04 07 69 00    	add    dl,BYTE PTR [ecx+0x690704]
     495:	01 18                	add    DWORD PTR [eax],ebx
     497:	4f                   	dec    edi
     498:	00 00                	add    BYTE PTR [eax],al
     49a:	00 02                	add    BYTE PTR [edx],al
     49c:	91                   	xchg   ecx,eax
     49d:	6c                   	ins    BYTE PTR es:[edi],dx
     49e:	08 d2                	or     dl,dl
     4a0:	01 00                	add    DWORD PTR [eax],eax
     4a2:	00 01                	add    BYTE PTR [ecx],al
     4a4:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
     4a7:	00 00                	add    BYTE PTR [eax],al
     4a9:	02 91 68 00 09 bd    	add    dl,BYTE PTR [ecx-0x42f6ff98]
     4af:	01 00                	add    DWORD PTR [eax],eax
     4b1:	00 01                	add    BYTE PTR [ecx],al
     4b3:	26                   	es
     4b4:	72 00                	jb     4b6 <sysEnter_Vector-0x12fb4a>
     4b6:	00 00                	add    BYTE PTR [eax],al
     4b8:	7e 03                	jle    4bd <sysEnter_Vector-0x12fb43>
     4ba:	00 9f bd 00 00 00    	add    BYTE PTR [edi+0xbd],bl
     4c0:	01 9c 60 01 00 00 06 	add    DWORD PTR [eax+eiz*2+0x6000001],ebx
     4c7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     4c8:	00 01                	add    BYTE PTR [ecx],al
     4ca:	26                   	es
     4cb:	4f                   	dec    edi
     4cc:	00 00                	add    BYTE PTR [eax],al
     4ce:	00 02                	add    BYTE PTR [edx],al
     4d0:	91                   	xchg   ecx,eax
     4d1:	00 06                	add    BYTE PTR [esi],al
     4d3:	73 00                	jae    4d5 <sysEnter_Vector-0x12fb2b>
     4d5:	01 26                	add    DWORD PTR [esi],esp
     4d7:	72 00                	jb     4d9 <sysEnter_Vector-0x12fb27>
     4d9:	00 00                	add    BYTE PTR [eax],al
     4db:	02 91 04 07 69 00    	add    dl,BYTE PTR [ecx+0x690704]
     4e1:	01 28                	add    DWORD PTR [eax],ebp
     4e3:	4f                   	dec    edi
     4e4:	00 00                	add    BYTE PTR [eax],al
     4e6:	00 02                	add    BYTE PTR [edx],al
     4e8:	91                   	xchg   ecx,eax
     4e9:	6c                   	ins    BYTE PTR es:[edi],dx
     4ea:	08 d2                	or     dl,dl
     4ec:	01 00                	add    DWORD PTR [eax],eax
     4ee:	00 01                	add    BYTE PTR [ecx],al
     4f0:	28 4f 00             	sub    BYTE PTR [edi+0x0],cl
     4f3:	00 00                	add    BYTE PTR [eax],al
     4f5:	02 91 68 00 0a c3    	add    dl,BYTE PTR [ecx-0x3cf5ff98]
     4fb:	01 00                	add    DWORD PTR [eax],eax
     4fd:	00 01                	add    BYTE PTR [ecx],al
     4ff:	38 4f 00             	cmp    BYTE PTR [edi+0x0],cl
     502:	00 00                	add    BYTE PTR [eax],al
     504:	3b 04 00             	cmp    eax,DWORD PTR [eax+eax*1]
     507:	9f                   	lahf   
     508:	5c                   	pop    esp
     509:	00 00                	add    BYTE PTR [eax],al
     50b:	00 01                	add    BYTE PTR [ecx],al
     50d:	9c                   	pushf  
     50e:	ac                   	lods   al,BYTE PTR ds:[esi]
     50f:	01 00                	add    DWORD PTR [eax],eax
     511:	00 06                	add    BYTE PTR [esi],al
     513:	73 74                	jae    589 <sysEnter_Vector-0x12fa77>
     515:	72 00                	jb     517 <sysEnter_Vector-0x12fae9>
     517:	01 38                	add    DWORD PTR [eax],edi
     519:	72 00                	jb     51b <sysEnter_Vector-0x12fae5>
     51b:	00 00                	add    BYTE PTR [eax],al
     51d:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
     523:	73 00                	jae    525 <sysEnter_Vector-0x12fadb>
     525:	01 3a                	add    DWORD PTR [edx],edi
     527:	4f                   	dec    edi
     528:	00 00                	add    BYTE PTR [eax],al
     52a:	00 02                	add    BYTE PTR [edx],al
     52c:	91                   	xchg   ecx,eax
     52d:	74 0b                	je     53a <sysEnter_Vector-0x12fac6>
     52f:	52                   	push   edx
     530:	04 00                	add    al,0x0
     532:	9f                   	lahf   
     533:	40                   	inc    eax
     534:	00 00                	add    BYTE PTR [eax],al
     536:	00 07                	add    BYTE PTR [edi],al
     538:	69 00 01 3e 4f 00    	imul   eax,DWORD PTR [eax],0x4f3e01
     53e:	00 00                	add    BYTE PTR [eax],al
     540:	02 91 70 00 00 09    	add    dl,BYTE PTR [ecx+0x9000070]
     546:	1e                   	push   ds
     547:	0e                   	push   cs
     548:	00 00                	add    BYTE PTR [eax],al
     54a:	01 45 4f             	add    DWORD PTR [ebp+0x4f],eax
     54d:	00 00                	add    BYTE PTR [eax],al
     54f:	00 97 04 00 9f 1a    	add    BYTE PTR [edi+0x1a9f0004],dl
     555:	00 00                	add    BYTE PTR [eax],al
     557:	00 01                	add    BYTE PTR [ecx],al
     559:	9c                   	pushf  
     55a:	d4 01                	aam    0x1
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	06                   	push   es
     55f:	73 74                	jae    5d5 <sysEnter_Vector-0x12fa2b>
     561:	72 00                	jb     563 <sysEnter_Vector-0x12fa9d>
     563:	01 45 72             	add    DWORD PTR [ebp+0x72],eax
     566:	00 00                	add    BYTE PTR [eax],al
     568:	00 02                	add    BYTE PTR [edx],al
     56a:	91                   	xchg   ecx,eax
     56b:	00 00                	add    BYTE PTR [eax],al
     56d:	0c 78                	or     al,0x78
     56f:	00 00                	add    BYTE PTR [eax],al
     571:	00 02                	add    BYTE PTR [edx],al
     573:	33 e5                	xor    esp,ebp
     575:	01 00                	add    DWORD PTR [eax],eax
     577:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
     57d:	9f                   	lahf   
     57e:	04 04                	add    al,0x4
     580:	72 00                	jb     582 <sysEnter_Vector-0x12fa7e>
     582:	00 00                	add    BYTE PTR [eax],al
     584:	00 ae 01 00 00 04    	add    BYTE PTR [esi+0x4000001],ch
     58a:	00 5c 02 00          	add    BYTE PTR [edx+eax*1+0x0],bl
     58e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     591:	c3                   	ret    
     592:	00 00                	add    BYTE PTR [eax],al
     594:	00 0c 5c             	add    BYTE PTR [esp+ebx*2],cl
     597:	02 00                	add    al,BYTE PTR [eax]
     599:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     59c:	00 00                	add    BYTE PTR [eax],al
     59e:	b4 04                	mov    ah,0x4
     5a0:	00 9f 6e 01 00 00    	add    BYTE PTR [edi+0x16e],bl
     5a6:	69 02 00 00 02 01    	imul   eax,DWORD PTR [edx],0x1020000
     5ac:	06                   	push   es
     5ad:	41                   	inc    ecx
     5ae:	00 00                	add    BYTE PTR [eax],al
     5b0:	00 02                	add    BYTE PTR [edx],al
     5b2:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     5b8:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     5bf:	02 08                	add    cl,BYTE PTR [eax]
     5c1:	05 00 00 00 00       	add    eax,0x0
     5c6:	02 01                	add    al,BYTE PTR [ecx]
     5c8:	08 3f                	or     BYTE PTR [edi],bh
     5ca:	00 00                	add    BYTE PTR [eax],al
     5cc:	00 02                	add    BYTE PTR [edx],al
     5ce:	02 07                	add    al,BYTE PTR [edi]
     5d0:	0e                   	push   cs
     5d1:	00 00                	add    BYTE PTR [eax],al
     5d3:	00 04 45 02 00 00 02 	add    BYTE PTR [eax*2+0x2000002],al
     5da:	34 5a                	xor    al,0x5a
     5dc:	00 00                	add    BYTE PTR [eax],al
     5de:	00 02                	add    BYTE PTR [edx],al
     5e0:	04 07                	add    al,0x7
     5e2:	32 00                	xor    al,BYTE PTR [eax]
     5e4:	00 00                	add    BYTE PTR [eax],al
     5e6:	02 08                	add    cl,BYTE PTR [eax]
     5e8:	07                   	pop    es
     5e9:	28 00                	sub    BYTE PTR [eax],al
     5eb:	00 00                	add    BYTE PTR [eax],al
     5ed:	04 01                	add    al,0x1
     5ef:	02 00                	add    al,BYTE PTR [eax]
     5f1:	00 02                	add    BYTE PTR [edx],al
     5f3:	56                   	push   esi
     5f4:	5a                   	pop    edx
     5f5:	00 00                	add    BYTE PTR [eax],al
     5f7:	00 02                	add    BYTE PTR [edx],al
     5f9:	04 05                	add    al,0x5
     5fb:	05 00 00 00 02       	add    eax,0x2000000
     600:	0c 04                	or     al,0x4
     602:	ad                   	lods   eax,DWORD PTR ds:[esi]
     603:	00 00                	add    BYTE PTR [eax],al
     605:	00 02                	add    BYTE PTR [edx],al
     607:	04 07                	add    al,0x7
     609:	2a 01                	sub    al,BYTE PTR [ecx]
     60b:	00 00                	add    BYTE PTR [eax],al
     60d:	02 01                	add    al,BYTE PTR [ecx]
     60f:	06                   	push   es
     610:	48                   	dec    eax
     611:	00 00                	add    BYTE PTR [eax],al
     613:	00 02                	add    BYTE PTR [edx],al
     615:	04 07                	add    al,0x7
     617:	2d 00 00 00 05       	sub    eax,0x5000000
     61c:	04 88                	add    al,0x88
     61e:	00 00                	add    BYTE PTR [eax],al
     620:	00 06                	add    BYTE PTR [esi],al
     622:	4e                   	dec    esi
     623:	02 00                	add    al,BYTE PTR [eax]
     625:	00 01                	add    BYTE PTR [ecx],al
     627:	0f b4 04 00          	lfs    eax,FWORD PTR [eax+eax*1]
     62b:	9f                   	lahf   
     62c:	ba 00 00 00 01       	mov    edx,0x1000000
     631:	9c                   	pushf  
     632:	f4                   	hlt    
     633:	00 00                	add    BYTE PTR [eax],al
     635:	00 07                	add    BYTE PTR [edi],al
     637:	78 00                	js     639 <sysEnter_Vector-0x12f9c7>
     639:	01 0f                	add    DWORD PTR [edi],ecx
     63b:	33 00                	xor    eax,DWORD PTR [eax]
     63d:	00 00                	add    BYTE PTR [eax],al
     63f:	02 91 00 07 79 00    	add    dl,BYTE PTR [ecx+0x790700]
     645:	01 0f                	add    DWORD PTR [edi],ecx
     647:	33 00                	xor    eax,DWORD PTR [eax]
     649:	00 00                	add    BYTE PTR [eax],al
     64b:	02 91 04 08 63 6d    	add    dl,BYTE PTR [ecx+0x6d630804]
     651:	64 00 01             	add    BYTE PTR fs:[ecx],al
     654:	11 f4                	adc    esp,esi
     656:	00 00                	add    BYTE PTR [eax],al
     658:	00 02                	add    BYTE PTR [edx],al
     65a:	91                   	xchg   ecx,eax
     65b:	66 09 0b             	or     WORD PTR [ebx],cx
     65e:	02 00                	add    al,BYTE PTR [eax]
     660:	00 01                	add    BYTE PTR [ecx],al
     662:	12 04 01             	adc    al,BYTE PTR [ecx+eax*1]
     665:	00 00                	add    BYTE PTR [eax],al
     667:	02 91 63 09 57 02    	add    dl,BYTE PTR [ecx+0x2570963]
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	01 12                	add    DWORD PTR [edx],edx
     671:	04 01                	add    al,0x1
     673:	00 00                	add    BYTE PTR [eax],al
     675:	02 91 60 00 0a 88    	add    dl,BYTE PTR [ecx-0x77f5ffa0]
     67b:	00 00                	add    BYTE PTR [eax],al
     67d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     680:	00 00                	add    BYTE PTR [eax],al
     682:	0b 81 00 00 00 09    	or     eax,DWORD PTR [ecx+0x9000000]
     688:	00 0a                	add    BYTE PTR [edx],cl
     68a:	88 00                	mov    BYTE PTR [eax],al
     68c:	00 00                	add    BYTE PTR [eax],al
     68e:	14 01                	adc    al,0x1
     690:	00 00                	add    BYTE PTR [eax],al
     692:	0b 81 00 00 00 02    	or     eax,DWORD PTR [ecx+0x2000000]
     698:	00 0c ee             	add    BYTE PTR [esi+ebp*8],cl
     69b:	01 00                	add    DWORD PTR [eax],eax
     69d:	00 01                	add    BYTE PTR [ecx],al
     69f:	1f                   	pop    ds
     6a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6a1:	05 00 9f 5a 00       	add    eax,0x5a9f00
     6a6:	00 00                	add    BYTE PTR [eax],al
     6a8:	01 9c 38 01 00 00 08 	add    DWORD PTR [eax+edi*1+0x8000001],ebx
     6af:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     6b2:	00 01                	add    BYTE PTR [ecx],al
     6b4:	21 f4                	and    esp,esi
     6b6:	00 00                	add    BYTE PTR [eax],al
     6b8:	00 02                	add    BYTE PTR [edx],al
     6ba:	91                   	xchg   ecx,eax
     6bb:	66                   	data16
     6bc:	00 0c 1d 02 00 00 01 	add    BYTE PTR [ebx*1+0x1000002],cl
     6c3:	29 c8                	sub    eax,ecx
     6c5:	05 00 9f 5a 00       	add    eax,0x5a9f00
     6ca:	00 00                	add    BYTE PTR [eax],al
     6cc:	01 9c 5c 01 00 00 08 	add    DWORD PTR [esp+ebx*2+0x8000001],ebx
     6d3:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     6d6:	00 01                	add    BYTE PTR [ecx],al
     6d8:	2b f4                	sub    esi,esp
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	91                   	xchg   ecx,eax
     6df:	66                   	data16
     6e0:	00 0d 10 02 00 00    	add    BYTE PTR ds:0x210,cl
     6e6:	03 35 6d 01 00 00    	add    esi,DWORD PTR ds:0x16d
     6ec:	05 03 d0 7d 00       	add    eax,0x7dd003
     6f1:	9f                   	lahf   
     6f2:	05 04 68 00 00       	add    eax,0x6804
     6f7:	00 0d 33 02 00 00    	add    BYTE PTR ds:0x233,cl
     6fd:	03 36                	add    esi,DWORD PTR [esi]
     6ff:	4f                   	dec    edi
     700:	00 00                	add    BYTE PTR [eax],al
     702:	00 05 03 cc 7d 00    	add    BYTE PTR ds:0x7dcc03,al
     708:	9f                   	lahf   
     709:	0d 78 00 00 00       	or     eax,0x78
     70e:	04 33                	add    al,0x33
     710:	95                   	xchg   ebp,eax
     711:	01 00                	add    DWORD PTR [eax],eax
     713:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
     719:	9f                   	lahf   
     71a:	05 04 96 00 00       	add    eax,0x9604
     71f:	00 0d e3 01 00 00    	add    BYTE PTR ds:0x1e3,cl
     725:	01 0d ac 01 00 00    	add    DWORD PTR ds:0x1ac,ecx
     72b:	05 03 e0 73 00       	add    eax,0x73e003
     730:	9f                   	lahf   
     731:	0e                   	push   cs
     732:	04 01                	add    al,0x1
     734:	00 00                	add    BYTE PTR [eax],al
     736:	00 0e                	add    BYTE PTR [esi],cl
     738:	03 00                	add    eax,DWORD PTR [eax]
     73a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     73d:	25 03 00 00 04       	and    eax,0x4000003
     742:	01 c3                	add    ebx,eax
     744:	00 00                	add    BYTE PTR [eax],al
     746:	00 0c c7             	add    BYTE PTR [edi+eax*8],cl
     749:	02 00                	add    al,BYTE PTR [eax]
     74b:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
     74e:	00 00                	add    BYTE PTR [eax],al
     750:	24 06                	and    al,0x6
     752:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
     758:	35 03 00 00 02       	xor    eax,0x2000003
     75d:	01 08                	add    DWORD PTR [eax],ecx
     75f:	3f                   	aas    
     760:	00 00                	add    BYTE PTR [eax],al
     762:	00 02                	add    BYTE PTR [edx],al
     764:	02 07                	add    al,BYTE PTR [edi]
     766:	0e                   	push   cs
     767:	00 00                	add    BYTE PTR [eax],al
     769:	00 02                	add    BYTE PTR [edx],al
     76b:	04 07                	add    al,0x7
     76d:	32 00                	xor    al,BYTE PTR [eax]
     76f:	00 00                	add    BYTE PTR [eax],al
     771:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     774:	2d 00 00 00 02       	sub    eax,0x2000000
     779:	01 06                	add    DWORD PTR [esi],eax
     77b:	41                   	inc    ecx
     77c:	00 00                	add    BYTE PTR [eax],al
     77e:	00 02                	add    BYTE PTR [edx],al
     780:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     786:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     78d:	02 08                	add    cl,BYTE PTR [eax]
     78f:	05 00 00 00 00       	add    eax,0x0
     794:	02 08                	add    cl,BYTE PTR [eax]
     796:	07                   	pop    es
     797:	28 00                	sub    BYTE PTR [eax],al
     799:	00 00                	add    BYTE PTR [eax],al
     79b:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     7a2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     7a5:	2a 01                	sub    al,BYTE PTR [ecx]
     7a7:	00 00                	add    BYTE PTR [eax],al
     7a9:	04 04                	add    al,0x4
     7ab:	78 00                	js     7ad <sysEnter_Vector-0x12f853>
     7ad:	00 00                	add    BYTE PTR [eax],al
     7af:	02 01                	add    al,BYTE PTR [ecx]
     7b1:	06                   	push   es
     7b2:	48                   	dec    eax
     7b3:	00 00                	add    BYTE PTR [eax],al
     7b5:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
     7bb:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
     7be:	00 00                	add    BYTE PTR [eax],al
     7c0:	00 05 91 02 00 00    	add    BYTE PTR ds:0x291,al
     7c6:	03 d8                	add    ebx,eax
     7c8:	33 00                	xor    eax,DWORD PTR [eax]
     7ca:	00 00                	add    BYTE PTR [eax],al
     7cc:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     7cf:	ad                   	lods   eax,DWORD PTR ds:[esi]
     7d0:	00 00                	add    BYTE PTR [eax],al
     7d2:	00 06                	add    BYTE PTR [esi],al
     7d4:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
     7d7:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
     7da:	00 00                	add    BYTE PTR [eax],al
     7dc:	00 04 15 96 01 00 00 	add    BYTE PTR [edx*1+0x196],al
     7e3:	07                   	pop    es
     7e4:	fd                   	std    
     7e5:	03 00                	add    eax,DWORD PTR [eax]
     7e7:	00 00                	add    BYTE PTR [eax],al
     7e9:	07                   	pop    es
     7ea:	42                   	inc    edx
     7eb:	04 00                	add    al,0x0
     7ed:	00 01                	add    BYTE PTR [ecx],al
     7ef:	07                   	pop    es
     7f0:	84 02                	test   BYTE PTR [edx],al
     7f2:	00 00                	add    BYTE PTR [eax],al
     7f4:	02 07                	add    al,BYTE PTR [edi]
     7f6:	4e                   	dec    esi
     7f7:	03 00                	add    eax,DWORD PTR [eax]
     7f9:	00 03                	add    BYTE PTR [ebx],al
     7fb:	07                   	pop    es
     7fc:	6a 02                	push   0x2
     7fe:	00 00                	add    BYTE PTR [eax],al
     800:	04 07                	add    al,0x7
     802:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
     806:	05 07 24 04 00       	add    eax,0x42407
     80b:	00 0a                	add    BYTE PTR [edx],cl
     80d:	07                   	pop    es
     80e:	8f 03                	pop    DWORD PTR [ebx]
     810:	00 00                	add    BYTE PTR [eax],al
     812:	0b 07                	or     eax,DWORD PTR [edi]
     814:	d6                   	(bad)  
     815:	03 00                	add    eax,DWORD PTR [eax]
     817:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
     81a:	5c                   	pop    esp
     81b:	03 00                	add    eax,DWORD PTR [eax]
     81d:	00 0d 07 75 03 00    	add    BYTE PTR ds:0x37507,cl
     823:	00 0e                	add    BYTE PTR [esi],cl
     825:	07                   	pop    es
     826:	77 02                	ja     82a <sysEnter_Vector-0x12f7d6>
     828:	00 00                	add    BYTE PTR [eax],al
     82a:	0f 07                	sysret 
     82c:	b7 03                	mov    bh,0x3
     82e:	00 00                	add    BYTE PTR [eax],al
     830:	10 07                	adc    BYTE PTR [edi],al
     832:	a9 04 00 00 11       	test   eax,0x11000004
     837:	07                   	pop    es
     838:	87 04 00             	xchg   DWORD PTR [eax+eax*1],eax
     83b:	00 4f 07             	add    BYTE PTR [edi+0x7],cl
     83e:	5c                   	pop    esp
     83f:	04 00                	add    al,0x0
     841:	00 50 07             	add    BYTE PTR [eax+0x7],dl
     844:	f0 03 00             	lock add eax,DWORD PTR [eax]
     847:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
     84a:	96                   	xchg   esi,eax
     84b:	04 00                	add    al,0x0
     84d:	00 61 07             	add    BYTE PTR [ecx+0x7],ah
     850:	1b 03                	sbb    eax,DWORD PTR [ebx]
     852:	00 00                	add    BYTE PTR [eax],al
     854:	97                   	xchg   edi,eax
     855:	08 0d 04 00 00 63    	or     BYTE PTR ds:0x63000004,cl
     85b:	01 08                	add    DWORD PTR [eax],ecx
     85d:	e3 03                	jecxz  862 <sysEnter_Vector-0x12f79e>
     85f:	00 00                	add    BYTE PTR [eax],al
     861:	64 01 08             	add    DWORD PTR fs:[eax],ecx
     864:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
     868:	65 01 08             	add    DWORD PTR gs:[eax],ecx
     86b:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
     871:	08 d8                	or     al,bl
     873:	04 00                	add    al,0x0
     875:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     878:	08 82 03 00 00 68    	or     BYTE PTR [edx+0x68000003],al
     87e:	01 08                	add    DWORD PTR [eax],ecx
     880:	b8 02 00 00 69       	mov    eax,0x69000002
     885:	01 08                	add    DWORD PTR [eax],ecx
     887:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
     88a:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     88d:	08 0b                	or     BYTE PTR [ebx],cl
     88f:	03 00                	add    eax,DWORD PTR [eax]
     891:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     894:	08 79 04             	or     BYTE PTR [ecx+0x4],bh
     897:	00 00                	add    BYTE PTR [eax],al
     899:	00 03                	add    BYTE PTR [ebx],al
     89b:	08 9c 03 00 00 01 03 	or     BYTE PTR [ebx+eax*1+0x3010000],bl
     8a2:	08 ab 03 00 00 02    	or     BYTE PTR [ebx+0x2000003],ch
     8a8:	03 08                	add    ecx,DWORD PTR [eax]
     8aa:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
     8ad:	00 03                	add    BYTE PTR [ebx],al
     8af:	03 08                	add    ecx,DWORD PTR [eax]
     8b1:	98                   	cwde   
     8b2:	02 00                	add    al,BYTE PTR [eax]
     8b4:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     8b7:	08 e7                	or     bh,ah
     8b9:	02 00                	add    al,BYTE PTR [eax]
     8bb:	00 05 03 08 2f 03    	add    BYTE PTR ds:0x32f0803,al
     8c1:	00 00                	add    BYTE PTR [eax],al
     8c3:	06                   	push   es
     8c4:	03 08                	add    ecx,DWORD PTR [eax]
     8c6:	c4 03                	les    eax,FWORD PTR [ebx]
     8c8:	00 00                	add    BYTE PTR [eax],al
     8ca:	00 09                	add    BYTE PTR [ecx],cl
     8cc:	00 09                	add    BYTE PTR [ecx],cl
     8ce:	b6 04                	mov    dh,0x4
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	01 09                	add    DWORD PTR [ecx],ecx
     8d4:	4f                   	dec    edi
     8d5:	00 00                	add    BYTE PTR [eax],al
     8d7:	00 24 06             	add    BYTE PTR [esi+eax*1],ah
     8da:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
     8e0:	01 9c e4 01 00 00 0a 	add    DWORD PTR [esp+eiz*8+0xa000001],ebx
     8e7:	be 04 00 00 01       	mov    esi,0x1000004
     8ec:	09 72 00             	or     DWORD PTR [edx+0x0],esi
     8ef:	00 00                	add    BYTE PTR [eax],al
     8f1:	02 91 00 0a 05 03    	add    dl,BYTE PTR [ecx+0x3050a00]
     8f7:	00 00                	add    BYTE PTR [eax],al
     8f9:	01 09                	add    DWORD PTR [ecx],ecx
     8fb:	72 00                	jb     8fd <sysEnter_Vector-0x12f703>
     8fd:	00 00                	add    BYTE PTR [eax],al
     8ff:	02 91 04 0b 36 06    	add    dl,BYTE PTR [ecx+0x6360b04]
     905:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
     90b:	0c 63                	or     al,0x63
     90d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     90e:	74 00                	je     910 <sysEnter_Vector-0x12f6f0>
     910:	01 0b                	add    DWORD PTR [ebx],ecx
     912:	4f                   	dec    edi
     913:	00 00                	add    BYTE PTR [eax],al
     915:	00 02                	add    BYTE PTR [edx],al
     917:	91                   	xchg   ecx,eax
     918:	6c                   	ins    BYTE PTR es:[edi],dx
     919:	00 00                	add    BYTE PTR [eax],al
     91b:	09 a9 02 00 00 01    	or     DWORD PTR [ecx+0x1000002],ebp
     921:	14 4f                	adc    al,0x4f
     923:	00 00                	add    BYTE PTR [eax],al
     925:	00 ce                	add    dh,cl
     927:	06                   	push   es
     928:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
     92e:	01 9c 1a 02 00 00 0a 	add    DWORD PTR [edx+ebx*1+0xa000002],ebx
     935:	be 04 00 00 01       	mov    esi,0x1000004
     93a:	14 72                	adc    al,0x72
     93c:	00 00                	add    BYTE PTR [eax],al
     93e:	00 02                	add    BYTE PTR [edx],al
     940:	91                   	xchg   ecx,eax
     941:	00 0a                	add    BYTE PTR [edx],cl
     943:	05 03 00 00 01       	add    eax,0x1000003
     948:	14 72                	adc    al,0x72
     94a:	00 00                	add    BYTE PTR [eax],al
     94c:	00 02                	add    BYTE PTR [edx],al
     94e:	91                   	xchg   ecx,eax
     94f:	04 00                	add    al,0x0
     951:	0d 55 04 00 00       	or     eax,0x455
     956:	01 19                	add    DWORD PTR [ecx],ebx
     958:	f1                   	icebp  
     959:	06                   	push   es
     95a:	00 9f c1 01 00 00    	add    BYTE PTR [edi+0x1c1],bl
     960:	01 9c 8e 02 00 00 0a 	add    DWORD PTR [esi+ecx*4+0xa000002],ebx
     967:	be 04 00 00 01       	mov    esi,0x1000004
     96c:	19 72 00             	sbb    DWORD PTR [edx+0x0],esi
     96f:	00 00                	add    BYTE PTR [eax],al
     971:	02 91 00 0a 05 03    	add    dl,BYTE PTR [ecx+0x3050a00]
     977:	00 00                	add    BYTE PTR [eax],al
     979:	01 19                	add    DWORD PTR [ecx],ebx
     97b:	72 00                	jb     97d <sysEnter_Vector-0x12f683>
     97d:	00 00                	add    BYTE PTR [eax],al
     97f:	02 91 04 0e d9 02    	add    dl,BYTE PTR [ecx+0x2d90e04]
     985:	00 00                	add    BYTE PTR [eax],al
     987:	01 1b                	add    DWORD PTR [ebx],ebx
     989:	7f 00                	jg     98b <sysEnter_Vector-0x12f675>
     98b:	00 00                	add    BYTE PTR [eax],al
     98d:	02 91 6c 0f 0a 07    	add    dl,BYTE PTR [ecx+0x70a0f6c]
     993:	00 9f eb 00 00 00    	add    BYTE PTR [edi+0xeb],bl
     999:	75 02                	jne    99d <sysEnter_Vector-0x12f663>
     99b:	00 00                	add    BYTE PTR [eax],al
     99d:	0c 63                	or     al,0x63
     99f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9a0:	74 00                	je     9a2 <sysEnter_Vector-0x12f65e>
     9a2:	01 1d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebx
     9a8:	02 91 68 00 0b f5    	add    dl,BYTE PTR [ecx-0xaf4ff98]
     9ae:	07                   	pop    es
     9af:	00 9f b8 00 00 00    	add    BYTE PTR [edi+0xb8],bl
     9b5:	0c 63                	or     al,0x63
     9b7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9b8:	74 00                	je     9ba <sysEnter_Vector-0x12f646>
     9ba:	01 29                	add    DWORD PTR [ecx],ebp
     9bc:	4f                   	dec    edi
     9bd:	00 00                	add    BYTE PTR [eax],al
     9bf:	00 02                	add    BYTE PTR [edx],al
     9c1:	91                   	xchg   ecx,eax
     9c2:	64 00 00             	add    BYTE PTR fs:[eax],al
     9c5:	09 b0 02 00 00 01    	or     DWORD PTR [eax+0x1000002],esi
     9cb:	36                   	ss
     9cc:	72 00                	jb     9ce <sysEnter_Vector-0x12f632>
     9ce:	00 00                	add    BYTE PTR [eax],al
     9d0:	b2 08                	mov    dl,0x8
     9d2:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
     9d8:	01 9c c4 02 00 00 10 	add    DWORD PTR [esp+eax*8+0x10000002],ebx
     9df:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     9e2:	00 01                	add    BYTE PTR [ecx],al
     9e4:	36                   	ss
     9e5:	72 00                	jb     9e7 <sysEnter_Vector-0x12f619>
     9e7:	00 00                	add    BYTE PTR [eax],al
     9e9:	02 91 00 0a da 06    	add    dl,BYTE PTR [ecx+0x6da0a00]
     9ef:	00 00                	add    BYTE PTR [eax],al
     9f1:	01 36                	add    DWORD PTR [esi],esi
     9f3:	8a 00                	mov    al,BYTE PTR [eax]
     9f5:	00 00                	add    BYTE PTR [eax],al
     9f7:	02 91 04 00 09 ed    	add    dl,BYTE PTR [ecx-0x12f6fffc]
     9fd:	04 00                	add    al,0x0
     9ff:	00 01                	add    BYTE PTR [ecx],al
     a01:	3c 72                	cmp    al,0x72
     a03:	00 00                	add    BYTE PTR [eax],al
     a05:	00 de                	add    dh,bl
     a07:	08 00                	or     BYTE PTR [eax],al
     a09:	9f                   	lahf   
     a0a:	23 00                	and    eax,DWORD PTR [eax]
     a0c:	00 00                	add    BYTE PTR [eax],al
     a0e:	01 9c fa 02 00 00 10 	add    DWORD PTR [edx+edi*8+0x10000002],ebx
     a15:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     a18:	00 01                	add    BYTE PTR [ecx],al
     a1a:	3c 72                	cmp    al,0x72
     a1c:	00 00                	add    BYTE PTR [eax],al
     a1e:	00 02                	add    BYTE PTR [edx],al
     a20:	91                   	xchg   ecx,eax
     a21:	00 0a                	add    BYTE PTR [edx],cl
     a23:	da 06                	fiadd  DWORD PTR [esi]
     a25:	00 00                	add    BYTE PTR [eax],al
     a27:	01 3c 8a             	add    DWORD PTR [edx+ecx*4],edi
     a2a:	00 00                	add    BYTE PTR [eax],al
     a2c:	00 02                	add    BYTE PTR [edx],al
     a2e:	91                   	xchg   ecx,eax
     a2f:	04 00                	add    al,0x0
     a31:	11 78 00             	adc    DWORD PTR [eax+0x0],edi
     a34:	00 00                	add    BYTE PTR [eax],al
     a36:	05 33 0b 03 00       	add    eax,0x30b33
     a3b:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
     a41:	9f                   	lahf   
     a42:	04 04                	add    al,0x4
     a44:	72 00                	jb     a46 <sysEnter_Vector-0x12f5ba>
     a46:	00 00                	add    BYTE PTR [eax],al
     a48:	00 3d 09 00 00 04    	add    BYTE PTR ds:0x4000009,bh
     a4e:	00 1f                	add    BYTE PTR [edi],bl
     a50:	04 00                	add    al,0x0
     a52:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     a55:	c3                   	ret    
     a56:	00 00                	add    BYTE PTR [eax],al
     a58:	00 0c c4             	add    BYTE PTR [esp+eax*8],cl
     a5b:	06                   	push   es
     a5c:	00 00                	add    BYTE PTR [eax],al
     a5e:	4d                   	dec    ebp
     a5f:	00 00                	add    BYTE PTR [eax],al
     a61:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
     a64:	00 9f b8 08 00 00    	add    BYTE PTR [edi+0x8b8],bl
     a6a:	83 04 00 00          	add    DWORD PTR [eax+eax*1],0x0
     a6e:	02 01                	add    al,BYTE PTR [ecx]
     a70:	08 3f                	or     BYTE PTR [edi],bh
     a72:	00 00                	add    BYTE PTR [eax],al
     a74:	00 02                	add    BYTE PTR [edx],al
     a76:	02 07                	add    al,BYTE PTR [edi]
     a78:	0e                   	push   cs
     a79:	00 00                	add    BYTE PTR [eax],al
     a7b:	00 02                	add    BYTE PTR [edx],al
     a7d:	04 07                	add    al,0x7
     a7f:	32 00                	xor    al,BYTE PTR [eax]
     a81:	00 00                	add    BYTE PTR [eax],al
     a83:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     a86:	2d 00 00 00 02       	sub    eax,0x2000000
     a8b:	01 06                	add    DWORD PTR [esi],eax
     a8d:	41                   	inc    ecx
     a8e:	00 00                	add    BYTE PTR [eax],al
     a90:	00 02                	add    BYTE PTR [edx],al
     a92:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
     a98:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     a9f:	02 08                	add    cl,BYTE PTR [eax]
     aa1:	05 00 00 00 00       	add    eax,0x0
     aa6:	02 08                	add    cl,BYTE PTR [eax]
     aa8:	07                   	pop    es
     aa9:	28 00                	sub    BYTE PTR [eax],al
     aab:	00 00                	add    BYTE PTR [eax],al
     aad:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     ab4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     ab7:	2a 01                	sub    al,BYTE PTR [ecx]
     ab9:	00 00                	add    BYTE PTR [eax],al
     abb:	04 04                	add    al,0x4
     abd:	05 04 7a 00 00       	add    eax,0x7a04
     ac2:	00 02                	add    BYTE PTR [edx],al
     ac4:	01 06                	add    DWORD PTR [esi],eax
     ac6:	48                   	dec    eax
     ac7:	00 00                	add    BYTE PTR [eax],al
     ac9:	00 06                	add    BYTE PTR [esi],al
     acb:	cf                   	iret   
     acc:	06                   	push   es
     acd:	00 00                	add    BYTE PTR [eax],al
     acf:	02 2e                	add    ch,BYTE PTR [esi]
     ad1:	25 00 00 00 06       	and    eax,0x6000000
     ad6:	89 05 00 00 02 31    	mov    DWORD PTR ds:0x31020000,eax
     adc:	2c 00                	sub    al,0x0
     ade:	00 00                	add    BYTE PTR [eax],al
     ae0:	06                   	push   es
     ae1:	45                   	inc    ebp
     ae2:	02 00                	add    al,BYTE PTR [eax]
     ae4:	00 02                	add    BYTE PTR [edx],al
     ae6:	34 33                	xor    al,0x33
     ae8:	00 00                	add    BYTE PTR [eax],al
     aea:	00 06                	add    BYTE PTR [esi],al
     aec:	01 02                	add    DWORD PTR [edx],eax
     aee:	00 00                	add    BYTE PTR [eax],al
     af0:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
     af3:	00 00                	add    BYTE PTR [eax],al
     af5:	00 06                	add    BYTE PTR [esi],al
     af7:	91                   	xchg   ecx,eax
     af8:	02 00                	add    al,BYTE PTR [eax]
     afa:	00 03                	add    BYTE PTR [ebx],al
     afc:	d8 33                	fdiv   DWORD PTR [ebx]
     afe:	00 00                	add    BYTE PTR [eax],al
     b00:	00 02                	add    BYTE PTR [edx],al
     b02:	0c 04                	or     al,0x4
     b04:	ad                   	lods   eax,DWORD PTR ds:[esi]
     b05:	00 00                	add    BYTE PTR [eax],al
     b07:	00 07                	add    BYTE PTR [edi],al
     b09:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
     b0c:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
     b0f:	00 00                	add    BYTE PTR [eax],al
     b11:	00 06                	add    BYTE PTR [esi],al
     b13:	15 b9 01 00 00       	adc    eax,0x1b9
     b18:	08 fd                	or     ch,bh
     b1a:	03 00                	add    eax,DWORD PTR [eax]
     b1c:	00 00                	add    BYTE PTR [eax],al
     b1e:	08 42 04             	or     BYTE PTR [edx+0x4],al
     b21:	00 00                	add    BYTE PTR [eax],al
     b23:	01 08                	add    DWORD PTR [eax],ecx
     b25:	84 02                	test   BYTE PTR [edx],al
     b27:	00 00                	add    BYTE PTR [eax],al
     b29:	02 08                	add    cl,BYTE PTR [eax]
     b2b:	4e                   	dec    esi
     b2c:	03 00                	add    eax,DWORD PTR [eax]
     b2e:	00 03                	add    BYTE PTR [ebx],al
     b30:	08 6a 02             	or     BYTE PTR [edx+0x2],ch
     b33:	00 00                	add    BYTE PTR [eax],al
     b35:	04 08                	add    al,0x8
     b37:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
     b3b:	05 08 24 04 00       	add    eax,0x42408
     b40:	00 0a                	add    BYTE PTR [edx],cl
     b42:	08 8f 03 00 00 0b    	or     BYTE PTR [edi+0xb000003],cl
     b48:	08 d6                	or     dh,dl
     b4a:	03 00                	add    eax,DWORD PTR [eax]
     b4c:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
     b4f:	5c                   	pop    esp
     b50:	03 00                	add    eax,DWORD PTR [eax]
     b52:	00 0d 08 75 03 00    	add    BYTE PTR ds:0x37508,cl
     b58:	00 0e                	add    BYTE PTR [esi],cl
     b5a:	08 77 02             	or     BYTE PTR [edi+0x2],dh
     b5d:	00 00                	add    BYTE PTR [eax],al
     b5f:	0f 08                	invd   
     b61:	b7 03                	mov    bh,0x3
     b63:	00 00                	add    BYTE PTR [eax],al
     b65:	10 08                	adc    BYTE PTR [eax],cl
     b67:	a9 04 00 00 11       	test   eax,0x11000004
     b6c:	08 87 04 00 00 4f    	or     BYTE PTR [edi+0x4f000004],al
     b72:	08 5c 04 00          	or     BYTE PTR [esp+eax*1+0x0],bl
     b76:	00 50 08             	add    BYTE PTR [eax+0x8],dl
     b79:	f0 03 00             	lock add eax,DWORD PTR [eax]
     b7c:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     b7f:	96                   	xchg   esi,eax
     b80:	04 00                	add    al,0x0
     b82:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     b85:	1b 03                	sbb    eax,DWORD PTR [ebx]
     b87:	00 00                	add    BYTE PTR [eax],al
     b89:	97                   	xchg   edi,eax
     b8a:	09 0d 04 00 00 63    	or     DWORD PTR ds:0x63000004,ecx
     b90:	01 09                	add    DWORD PTR [ecx],ecx
     b92:	e3 03                	jecxz  b97 <sysEnter_Vector-0x12f469>
     b94:	00 00                	add    BYTE PTR [eax],al
     b96:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
     b99:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
     b9d:	65 01 09             	add    DWORD PTR gs:[ecx],ecx
     ba0:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
     ba6:	09 d8                	or     eax,ebx
     ba8:	04 00                	add    al,0x0
     baa:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     bad:	09 82 03 00 00 68    	or     DWORD PTR [edx+0x68000003],eax
     bb3:	01 09                	add    DWORD PTR [ecx],ecx
     bb5:	b8 02 00 00 69       	mov    eax,0x69000002
     bba:	01 09                	add    DWORD PTR [ecx],ecx
     bbc:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
     bbf:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     bc2:	09 0b                	or     DWORD PTR [ebx],ecx
     bc4:	03 00                	add    eax,DWORD PTR [eax]
     bc6:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
     bc9:	09 79 04             	or     DWORD PTR [ecx+0x4],edi
     bcc:	00 00                	add    BYTE PTR [eax],al
     bce:	00 03                	add    BYTE PTR [ebx],al
     bd0:	09 9c 03 00 00 01 03 	or     DWORD PTR [ebx+eax*1+0x3010000],ebx
     bd7:	09 ab 03 00 00 02    	or     DWORD PTR [ebx+0x2000003],ebp
     bdd:	03 09                	add    ecx,DWORD PTR [ecx]
     bdf:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
     be2:	00 03                	add    BYTE PTR [ebx],al
     be4:	03 09                	add    ecx,DWORD PTR [ecx]
     be6:	98                   	cwde   
     be7:	02 00                	add    al,BYTE PTR [eax]
     be9:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     bec:	09 e7                	or     edi,esp
     bee:	02 00                	add    al,BYTE PTR [eax]
     bf0:	00 05 03 09 2f 03    	add    BYTE PTR ds:0x32f0903,al
     bf6:	00 00                	add    BYTE PTR [eax],al
     bf8:	06                   	push   es
     bf9:	03 09                	add    ecx,DWORD PTR [ecx]
     bfb:	c4 03                	les    eax,FWORD PTR [ebx]
     bfd:	00 00                	add    BYTE PTR [eax],al
     bff:	00 09                	add    BYTE PTR [ecx],cl
     c01:	00 0a                	add    BYTE PTR [edx],cl
     c03:	78 06                	js     c0b <sysEnter_Vector-0x12f3f5>
     c05:	00 00                	add    BYTE PTR [eax],al
     c07:	17                   	pop    ss
     c08:	01 04 1f             	add    DWORD PTR [edi+ebx*1],eax
     c0b:	3b 02                	cmp    eax,DWORD PTR [edx]
     c0d:	00 00                	add    BYTE PTR [eax],al
     c0f:	0b 31                	or     esi,DWORD PTR [ecx]
     c11:	06                   	push   es
     c12:	00 00                	add    BYTE PTR [eax],al
     c14:	04 21                	add    al,0x21
     c16:	3b 02                	cmp    eax,DWORD PTR [edx]
     c18:	00 00                	add    BYTE PTR [eax],al
     c1a:	00 0c 4a             	add    BYTE PTR [edx+ecx*2],cl
     c1d:	06                   	push   es
     c1e:	00 00                	add    BYTE PTR [eax],al
     c20:	04 22                	add    al,0x22
     c22:	81 00 00 00 04 01    	add    DWORD PTR [eax],0x1040000
     c28:	0c 01                	or     al,0x1
     c2a:	06                   	push   es
     c2b:	00 00                	add    BYTE PTR [eax],al
     c2d:	04 23                	add    al,0x23
     c2f:	97                   	xchg   edi,eax
     c30:	00 00                	add    BYTE PTR [eax],al
     c32:	00 05 01 0c da 06    	add    BYTE PTR ds:0x6da0c01,al
     c38:	00 00                	add    BYTE PTR [eax],al
     c3a:	04 24                	add    al,0x24
     c3c:	97                   	xchg   edi,eax
     c3d:	00 00                	add    BYTE PTR [eax],al
     c3f:	00 09                	add    BYTE PTR [ecx],cl
     c41:	01 0c 09             	add    DWORD PTR [ecx+ecx*1],ecx
     c44:	06                   	push   es
     c45:	00 00                	add    BYTE PTR [eax],al
     c47:	04 25                	add    al,0x25
     c49:	8c 00                	mov    WORD PTR [eax],es
     c4b:	00 00                	add    BYTE PTR [eax],al
     c4d:	0d 01 0c 21 05       	or     eax,0x5210c01
     c52:	00 00                	add    BYTE PTR [eax],al
     c54:	04 26                	add    al,0x26
     c56:	8c 00                	mov    WORD PTR [eax],es
     c58:	00 00                	add    BYTE PTR [eax],al
     c5a:	0f 01 0c 92          	sidtd  [edx+edx*4]
     c5e:	05 00 00 04 27       	add    eax,0x27040000
     c63:	8c 00                	mov    WORD PTR [eax],es
     c65:	00 00                	add    BYTE PTR [eax],al
     c67:	11 01                	adc    DWORD PTR [ecx],eax
     c69:	0c 74                	or     al,0x74
     c6b:	05 00 00 04 28       	add    eax,0x28040000
     c70:	8c 00                	mov    WORD PTR [eax],es
     c72:	00 00                	add    BYTE PTR [eax],al
     c74:	13 01                	adc    eax,DWORD PTR [ecx]
     c76:	0c ab                	or     al,0xab
     c78:	06                   	push   es
     c79:	00 00                	add    BYTE PTR [eax],al
     c7b:	04 29                	add    al,0x29
     c7d:	8c 00                	mov    WORD PTR [eax],es
     c7f:	00 00                	add    BYTE PTR [eax],al
     c81:	15 01 00 0d 7a       	adc    eax,0x7a0d0001
     c86:	00 00                	add    BYTE PTR [eax],al
     c88:	00 4c 02 00          	add    BYTE PTR [edx+eax*1+0x0],cl
     c8c:	00 0e                	add    BYTE PTR [esi],cl
     c8e:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
     c91:	00 03                	add    BYTE PTR [ebx],al
     c93:	01 00                	add    DWORD PTR [eax],eax
     c95:	0f 15 06             	unpckhps xmm0,XMMWORD PTR [esi]
     c98:	00 00                	add    BYTE PTR [eax],al
     c9a:	08 04 2c             	or     BYTE PTR [esp+ebp*1],al
     c9d:	71 02                	jno    ca1 <sysEnter_Vector-0x12f35f>
     c9f:	00 00                	add    BYTE PTR [eax],al
     ca1:	0b d7                	or     edx,edi
     ca3:	06                   	push   es
     ca4:	00 00                	add    BYTE PTR [eax],al
     ca6:	04 2e                	add    al,0x2e
     ca8:	97                   	xchg   edi,eax
     ca9:	00 00                	add    BYTE PTR [eax],al
     cab:	00 00                	add    BYTE PTR [eax],al
     cad:	0b af 05 00 00 04    	or     ebp,DWORD PTR [edi+0x4000005]
     cb3:	2f                   	das    
     cb4:	97                   	xchg   edi,eax
     cb5:	00 00                	add    BYTE PTR [eax],al
     cb7:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     cba:	06                   	push   es
     cbb:	51                   	push   ecx
     cbc:	06                   	push   es
     cbd:	00 00                	add    BYTE PTR [eax],al
     cbf:	04 32                	add    al,0x32
     cc1:	b9 01 00 00 06       	mov    ecx,0x6000001
     cc6:	5c                   	pop    esp
     cc7:	06                   	push   es
     cc8:	00 00                	add    BYTE PTR [eax],al
     cca:	04 33                	add    al,0x33
     ccc:	4c                   	dec    esp
     ccd:	02 00                	add    al,BYTE PTR [eax]
     ccf:	00 05 04 8d 02 00    	add    BYTE PTR ds:0x28d04,al
     cd5:	00 10                	add    BYTE PTR [eax],dl
     cd7:	7a 00                	jp     cd9 <sysEnter_Vector-0x12f327>
     cd9:	00 00                	add    BYTE PTR [eax],al
     cdb:	02 01                	add    al,BYTE PTR [ecx]
     cdd:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
     ce0:	00 00                	add    BYTE PTR [eax],al
     ce2:	11 70 06             	adc    DWORD PTR [eax+0x6],esi
     ce5:	00 00                	add    BYTE PTR [eax],al
     ce7:	01 12                	add    DWORD PTR [edx],edx
     ce9:	4f                   	dec    edi
     cea:	00 00                	add    BYTE PTR [eax],al
     cec:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
     cef:	00 9f 31 00 00 00    	add    BYTE PTR [edi+0x31],bl
     cf5:	01 9c dd 02 00 00 12 	add    DWORD PTR [ebp+ebx*8+0x12000002],ebx
     cfc:	1c 05                	sbb    al,0x5
     cfe:	00 00                	add    BYTE PTR [eax],al
     d00:	01 12                	add    DWORD PTR [edx],edx
     d02:	74 00                	je     d04 <sysEnter_Vector-0x12f2fc>
     d04:	00 00                	add    BYTE PTR [eax],al
     d06:	02 91 00 12 29 06    	add    dl,BYTE PTR [ecx+0x6291200]
     d0c:	00 00                	add    BYTE PTR [eax],al
     d0e:	01 12                	add    DWORD PTR [edx],edx
     d10:	dd 02                	fld    QWORD PTR [edx]
     d12:	00 00                	add    BYTE PTR [eax],al
     d14:	02 91 04 12 37 07    	add    dl,BYTE PTR [ecx+0x7371204]
     d1a:	00 00                	add    BYTE PTR [eax],al
     d1c:	01 12                	add    DWORD PTR [edx],edx
     d1e:	4f                   	dec    edi
     d1f:	00 00                	add    BYTE PTR [eax],al
     d21:	00 02                	add    BYTE PTR [edx],al
     d23:	91                   	xchg   ecx,eax
     d24:	08 00                	or     BYTE PTR [eax],al
     d26:	05 04 71 02 00       	add    eax,0x27104
     d2b:	00 11                	add    BYTE PTR [ecx],dl
     d2d:	30 07                	xor    BYTE PTR [edi],al
     d2f:	00 00                	add    BYTE PTR [eax],al
     d31:	01 17                	add    DWORD PTR [edi],edx
     d33:	4f                   	dec    edi
     d34:	00 00                	add    BYTE PTR [eax],al
     d36:	00 35 09 00 9f 26    	add    BYTE PTR ds:0x269f0009,dh
     d3c:	00 00                	add    BYTE PTR [eax],al
     d3e:	00 01                	add    BYTE PTR [ecx],al
     d40:	9c                   	pushf  
     d41:	27                   	daa    
     d42:	03 00                	add    eax,DWORD PTR [eax]
     d44:	00 12                	add    BYTE PTR [edx],dl
     d46:	1c 05                	sbb    al,0x5
     d48:	00 00                	add    BYTE PTR [eax],al
     d4a:	01 17                	add    DWORD PTR [edi],edx
     d4c:	74 00                	je     d4e <sysEnter_Vector-0x12f2b2>
     d4e:	00 00                	add    BYTE PTR [eax],al
     d50:	02 91 00 12 29 06    	add    dl,BYTE PTR [ecx+0x6291200]
     d56:	00 00                	add    BYTE PTR [eax],al
     d58:	01 17                	add    DWORD PTR [edi],edx
     d5a:	dd 02                	fld    QWORD PTR [edx]
     d5c:	00 00                	add    BYTE PTR [eax],al
     d5e:	02 91 04 12 37 07    	add    dl,BYTE PTR [ecx+0x7371204]
     d64:	00 00                	add    BYTE PTR [eax],al
     d66:	01 17                	add    DWORD PTR [edi],edx
     d68:	4f                   	dec    edi
     d69:	00 00                	add    BYTE PTR [eax],al
     d6b:	00 02                	add    BYTE PTR [edx],al
     d6d:	91                   	xchg   ecx,eax
     d6e:	08 00                	or     BYTE PTR [eax],al
     d70:	11 9d 05 00 00 01    	adc    DWORD PTR [ebp+0x1000005],ebx
     d76:	1c 72                	sbb    al,0x72
     d78:	00 00                	add    BYTE PTR [eax],al
     d7a:	00 5b 09             	add    BYTE PTR [ebx+0x9],bl
     d7d:	00 9f 2c 00 00 00    	add    BYTE PTR [edi+0x2c],bl
     d83:	01 9c 5d 03 00 00 12 	add    DWORD PTR [ebp+ebx*2+0x12000003],ebx
     d8a:	1c 05                	sbb    al,0x5
     d8c:	00 00                	add    BYTE PTR [eax],al
     d8e:	01 1c 74             	add    DWORD PTR [esp+esi*2],ebx
     d91:	00 00                	add    BYTE PTR [eax],al
     d93:	00 02                	add    BYTE PTR [edx],al
     d95:	91                   	xchg   ecx,eax
     d96:	00 12                	add    BYTE PTR [edx],dl
     d98:	93                   	xchg   ebx,eax
     d99:	06                   	push   es
     d9a:	00 00                	add    BYTE PTR [eax],al
     d9c:	01 1c 87             	add    DWORD PTR [edi+eax*4],ebx
     d9f:	02 00                	add    al,BYTE PTR [eax]
     da1:	00 02                	add    BYTE PTR [edx],al
     da3:	91                   	xchg   ecx,eax
     da4:	04 00                	add    al,0x0
     da6:	11 ef                	adc    edi,ebp
     da8:	05 00 00 01 22       	add    eax,0x22010000
     dad:	72 00                	jb     daf <sysEnter_Vector-0x12f251>
     daf:	00 00                	add    BYTE PTR [eax],al
     db1:	87 09                	xchg   DWORD PTR [ecx],ecx
     db3:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
     db9:	01 9c 93 03 00 00 12 	add    DWORD PTR [ebx+edx*4+0x12000003],ebx
     dc0:	1c 05                	sbb    al,0x5
     dc2:	00 00                	add    BYTE PTR [eax],al
     dc4:	01 22                	add    DWORD PTR [edx],esp
     dc6:	74 00                	je     dc8 <sysEnter_Vector-0x12f238>
     dc8:	00 00                	add    BYTE PTR [eax],al
     dca:	02 91 00 12 93 06    	add    dl,BYTE PTR [ecx+0x6931200]
     dd0:	00 00                	add    BYTE PTR [eax],al
     dd2:	01 22                	add    DWORD PTR [edx],esp
     dd4:	87 02                	xchg   DWORD PTR [edx],eax
     dd6:	00 00                	add    BYTE PTR [eax],al
     dd8:	02 91 04 00 13 15    	add    dl,BYTE PTR [ecx+0x15130004]
     dde:	07                   	pop    es
     ddf:	00 00                	add    BYTE PTR [eax],al
     de1:	01 27                	add    DWORD PTR [edi],esp
     de3:	aa                   	stos   BYTE PTR es:[edi],al
     de4:	09 00                	or     DWORD PTR [eax],eax
     de6:	9f                   	lahf   
     de7:	59                   	pop    ecx
     de8:	00 00                	add    BYTE PTR [eax],al
     dea:	00 01                	add    BYTE PTR [ecx],al
     dec:	9c                   	pushf  
     ded:	11 ec                	adc    esp,ebp
     def:	05 00 00 01 2e       	add    eax,0x2e010000
     df4:	72 00                	jb     df6 <sysEnter_Vector-0x12f20a>
     df6:	00 00                	add    BYTE PTR [eax],al
     df8:	03 0a                	add    ecx,DWORD PTR [edx]
     dfa:	00 9f 93 00 00 00    	add    BYTE PTR [edi+0x93],bl
     e00:	01 9c f6 03 00 00 12 	add    DWORD PTR [esi+esi*8+0x12000003],ebx
     e07:	1c 05                	sbb    al,0x5
     e09:	00 00                	add    BYTE PTR [eax],al
     e0b:	01 2e                	add    DWORD PTR [esi],ebp
     e0d:	74 00                	je     e0f <sysEnter_Vector-0x12f1f1>
     e0f:	00 00                	add    BYTE PTR [eax],al
     e11:	02 91 00 12 93 06    	add    dl,BYTE PTR [ecx+0x6931200]
     e17:	00 00                	add    BYTE PTR [eax],al
     e19:	01 2e                	add    DWORD PTR [esi],ebp
     e1b:	87 02                	xchg   DWORD PTR [edx],eax
     e1d:	00 00                	add    BYTE PTR [eax],al
     e1f:	02 91 04 12 15 05    	add    dl,BYTE PTR [ecx+0x5151204]
     e25:	00 00                	add    BYTE PTR [eax],al
     e27:	01 2e                	add    DWORD PTR [esi],ebp
     e29:	72 00                	jb     e2b <sysEnter_Vector-0x12f1d5>
     e2b:	00 00                	add    BYTE PTR [eax],al
     e2d:	02 91 08 14 f4 04    	add    dl,BYTE PTR [ecx+0x4f41408]
     e33:	00 00                	add    BYTE PTR [eax],al
     e35:	01 30                	add    DWORD PTR [eax],esi
     e37:	72 00                	jb     e39 <sysEnter_Vector-0x12f1c7>
     e39:	00 00                	add    BYTE PTR [eax],al
     e3b:	02 91 6c 00 15 b7    	add    dl,BYTE PTR [ecx-0x48eaff94]
     e41:	06                   	push   es
     e42:	00 00                	add    BYTE PTR [eax],al
     e44:	01 3c 96             	add    DWORD PTR [esi+edx*4],edi
     e47:	0a 00                	or     al,BYTE PTR [eax]
     e49:	9f                   	lahf   
     e4a:	2a 00                	sub    al,BYTE PTR [eax]
     e4c:	00 00                	add    BYTE PTR [eax],al
     e4e:	01 9c 1a 04 00 00 12 	add    DWORD PTR [edx+ebx*1+0x12000004],ebx
     e55:	ef                   	out    dx,eax
     e56:	06                   	push   es
     e57:	00 00                	add    BYTE PTR [eax],al
     e59:	01 3c 72             	add    DWORD PTR [edx+esi*2],edi
     e5c:	00 00                	add    BYTE PTR [eax],al
     e5e:	00 02                	add    BYTE PTR [edx],al
     e60:	91                   	xchg   ecx,eax
     e61:	00 00                	add    BYTE PTR [eax],al
     e63:	15 fb 04 00 00       	adc    eax,0x4fb
     e68:	01 41 c0             	add    DWORD PTR [ecx-0x40],eax
     e6b:	0a 00                	or     al,BYTE PTR [eax]
     e6d:	9f                   	lahf   
     e6e:	20 00                	and    BYTE PTR [eax],al
     e70:	00 00                	add    BYTE PTR [eax],al
     e72:	01 9c 3e 04 00 00 12 	add    DWORD PTR [esi+edi*1+0x12000004],ebx
     e79:	ef                   	out    dx,eax
     e7a:	06                   	push   es
     e7b:	00 00                	add    BYTE PTR [eax],al
     e7d:	01 41 72             	add    DWORD PTR [ecx+0x72],eax
     e80:	00 00                	add    BYTE PTR [eax],al
     e82:	00 02                	add    BYTE PTR [edx],al
     e84:	91                   	xchg   ecx,eax
     e85:	00 00                	add    BYTE PTR [eax],al
     e87:	11 81 06 00 00 01    	adc    DWORD PTR [ecx+0x1000006],eax
     e8d:	46                   	inc    esi
     e8e:	4f                   	dec    edi
     e8f:	00 00                	add    BYTE PTR [eax],al
     e91:	00 e0                	add    al,ah
     e93:	0a 00                	or     al,BYTE PTR [eax]
     e95:	9f                   	lahf   
     e96:	35 00 00 00 01       	xor    eax,0x1000000
     e9b:	9c                   	pushf  
     e9c:	90                   	nop
     e9d:	04 00                	add    al,0x0
     e9f:	00 12                	add    BYTE PTR [edx],dl
     ea1:	ef                   	out    dx,eax
     ea2:	06                   	push   es
     ea3:	00 00                	add    BYTE PTR [eax],al
     ea5:	01 46 72             	add    DWORD PTR [esi+0x72],eax
     ea8:	00 00                	add    BYTE PTR [eax],al
     eaa:	00 02                	add    BYTE PTR [edx],al
     eac:	91                   	xchg   ecx,eax
     ead:	00 12                	add    BYTE PTR [edx],dl
     eaf:	98                   	cwde   
     eb0:	06                   	push   es
     eb1:	00 00                	add    BYTE PTR [eax],al
     eb3:	01 46 72             	add    DWORD PTR [esi+0x72],eax
     eb6:	00 00                	add    BYTE PTR [eax],al
     eb8:	00 02                	add    BYTE PTR [edx],al
     eba:	91                   	xchg   ecx,eax
     ebb:	04 12                	add    al,0x12
     ebd:	da 06                	fiadd  DWORD PTR [esi]
     ebf:	00 00                	add    BYTE PTR [eax],al
     ec1:	01 46 4f             	add    DWORD PTR [esi+0x4f],eax
     ec4:	00 00                	add    BYTE PTR [eax],al
     ec6:	00 02                	add    BYTE PTR [edx],al
     ec8:	91                   	xchg   ecx,eax
     ec9:	08 12                	or     BYTE PTR [edx],dl
     ecb:	87 06                	xchg   DWORD PTR [esi],eax
     ecd:	00 00                	add    BYTE PTR [eax],al
     ecf:	01 46 4f             	add    DWORD PTR [esi+0x4f],eax
     ed2:	00 00                	add    BYTE PTR [eax],al
     ed4:	00 02                	add    BYTE PTR [edx],al
     ed6:	91                   	xchg   ecx,eax
     ed7:	0c 00                	or     al,0x0
     ed9:	11 8e 06 00 00 01    	adc    DWORD PTR [esi+0x1000006],ecx
     edf:	4b                   	dec    ebx
     ee0:	4f                   	dec    edi
     ee1:	00 00                	add    BYTE PTR [eax],al
     ee3:	00 15 0b 00 9f 26    	add    BYTE PTR ds:0x269f000b,dl
     ee9:	00 00                	add    BYTE PTR [eax],al
     eeb:	00 01                	add    BYTE PTR [ecx],al
     eed:	9c                   	pushf  
     eee:	e2 04                	loop   ef4 <sysEnter_Vector-0x12f10c>
     ef0:	00 00                	add    BYTE PTR [eax],al
     ef2:	12 ef                	adc    ch,bh
     ef4:	06                   	push   es
     ef5:	00 00                	add    BYTE PTR [eax],al
     ef7:	01 4b 72             	add    DWORD PTR [ebx+0x72],ecx
     efa:	00 00                	add    BYTE PTR [eax],al
     efc:	00 02                	add    BYTE PTR [edx],al
     efe:	91                   	xchg   ecx,eax
     eff:	00 12                	add    BYTE PTR [edx],dl
     f01:	98                   	cwde   
     f02:	06                   	push   es
     f03:	00 00                	add    BYTE PTR [eax],al
     f05:	01 4b 72             	add    DWORD PTR [ebx+0x72],ecx
     f08:	00 00                	add    BYTE PTR [eax],al
     f0a:	00 02                	add    BYTE PTR [edx],al
     f0c:	91                   	xchg   ecx,eax
     f0d:	04 12                	add    al,0x12
     f0f:	da 06                	fiadd  DWORD PTR [esi]
     f11:	00 00                	add    BYTE PTR [eax],al
     f13:	01 4b 4f             	add    DWORD PTR [ebx+0x4f],ecx
     f16:	00 00                	add    BYTE PTR [eax],al
     f18:	00 02                	add    BYTE PTR [edx],al
     f1a:	91                   	xchg   ecx,eax
     f1b:	08 12                	or     BYTE PTR [edx],dl
     f1d:	87 06                	xchg   DWORD PTR [esi],eax
     f1f:	00 00                	add    BYTE PTR [eax],al
     f21:	01 4b 4f             	add    DWORD PTR [ebx+0x4f],ecx
     f24:	00 00                	add    BYTE PTR [eax],al
     f26:	00 02                	add    BYTE PTR [edx],al
     f28:	91                   	xchg   ecx,eax
     f29:	0c 00                	or     al,0x0
     f2b:	11 c3                	adc    ebx,eax
     f2d:	05 00 00 01 4f       	add    eax,0x4f010000
     f32:	4f                   	dec    edi
     f33:	00 00                	add    BYTE PTR [eax],al
     f35:	00 3b                	add    BYTE PTR [ebx],bh
     f37:	0b 00                	or     eax,DWORD PTR [eax]
     f39:	9f                   	lahf   
     f3a:	35 00 00 00 01       	xor    eax,0x1000000
     f3f:	9c                   	pushf  
     f40:	34 05                	xor    al,0x5
     f42:	00 00                	add    BYTE PTR [eax],al
     f44:	12 ef                	adc    ch,bh
     f46:	06                   	push   es
     f47:	00 00                	add    BYTE PTR [eax],al
     f49:	01 4f 72             	add    DWORD PTR [edi+0x72],ecx
     f4c:	00 00                	add    BYTE PTR [eax],al
     f4e:	00 02                	add    BYTE PTR [edx],al
     f50:	91                   	xchg   ecx,eax
     f51:	00 12                	add    BYTE PTR [edx],dl
     f53:	98                   	cwde   
     f54:	06                   	push   es
     f55:	00 00                	add    BYTE PTR [eax],al
     f57:	01 4f 72             	add    DWORD PTR [edi+0x72],ecx
     f5a:	00 00                	add    BYTE PTR [eax],al
     f5c:	00 02                	add    BYTE PTR [edx],al
     f5e:	91                   	xchg   ecx,eax
     f5f:	04 12                	add    al,0x12
     f61:	da 06                	fiadd  DWORD PTR [esi]
     f63:	00 00                	add    BYTE PTR [eax],al
     f65:	01 4f 4f             	add    DWORD PTR [edi+0x4f],ecx
     f68:	00 00                	add    BYTE PTR [eax],al
     f6a:	00 02                	add    BYTE PTR [edx],al
     f6c:	91                   	xchg   ecx,eax
     f6d:	08 12                	or     BYTE PTR [edx],dl
     f6f:	87 06                	xchg   DWORD PTR [esi],eax
     f71:	00 00                	add    BYTE PTR [eax],al
     f73:	01 4f 4f             	add    DWORD PTR [edi+0x4f],ecx
     f76:	00 00                	add    BYTE PTR [eax],al
     f78:	00 02                	add    BYTE PTR [edx],al
     f7a:	91                   	xchg   ecx,eax
     f7b:	0c 00                	or     al,0x0
     f7d:	11 1c 06             	adc    DWORD PTR [esi+eax*1],ebx
     f80:	00 00                	add    BYTE PTR [eax],al
     f82:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
     f86:	00 00                	add    BYTE PTR [eax],al
     f88:	70 0b                	jo     f95 <sysEnter_Vector-0x12f06b>
     f8a:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
     f90:	01 9c 86 05 00 00 12 	add    DWORD PTR [esi+eax*4+0x12000005],ebx
     f97:	ef                   	out    dx,eax
     f98:	06                   	push   es
     f99:	00 00                	add    BYTE PTR [eax],al
     f9b:	01 54 72 00          	add    DWORD PTR [edx+esi*2+0x0],edx
     f9f:	00 00                	add    BYTE PTR [eax],al
     fa1:	02 91 00 12 98 06    	add    dl,BYTE PTR [ecx+0x6981200]
     fa7:	00 00                	add    BYTE PTR [eax],al
     fa9:	01 54 72 00          	add    DWORD PTR [edx+esi*2+0x0],edx
     fad:	00 00                	add    BYTE PTR [eax],al
     faf:	02 91 04 12 da 06    	add    dl,BYTE PTR [ecx+0x6da1204]
     fb5:	00 00                	add    BYTE PTR [eax],al
     fb7:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
     fbb:	00 00                	add    BYTE PTR [eax],al
     fbd:	02 91 08 12 87 06    	add    dl,BYTE PTR [ecx+0x6871208]
     fc3:	00 00                	add    BYTE PTR [eax],al
     fc5:	01 54 4f 00          	add    DWORD PTR [edi+ecx*2+0x0],edx
     fc9:	00 00                	add    BYTE PTR [eax],al
     fcb:	02 91 0c 00 11 be    	add    dl,BYTE PTR [ecx-0x41eefff4]
     fd1:	06                   	push   es
     fd2:	00 00                	add    BYTE PTR [eax],al
     fd4:	01 59 4f             	add    DWORD PTR [ecx+0x4f],ebx
     fd7:	00 00                	add    BYTE PTR [eax],al
     fd9:	00 96 0b 00 9f 2e    	add    BYTE PTR [esi+0x2e9f000b],dl
     fdf:	00 00                	add    BYTE PTR [eax],al
     fe1:	00 01                	add    BYTE PTR [ecx],al
     fe3:	9c                   	pushf  
     fe4:	ca 05 00             	retf   0x5
     fe7:	00 12                	add    BYTE PTR [edx],dl
     fe9:	ef                   	out    dx,eax
     fea:	06                   	push   es
     feb:	00 00                	add    BYTE PTR [eax],al
     fed:	01 59 72             	add    DWORD PTR [ecx+0x72],ebx
     ff0:	00 00                	add    BYTE PTR [eax],al
     ff2:	00 02                	add    BYTE PTR [edx],al
     ff4:	91                   	xchg   ecx,eax
     ff5:	00 12                	add    BYTE PTR [edx],dl
     ff7:	ba 05 00 00 01       	mov    edx,0x1000005
     ffc:	59                   	pop    ecx
     ffd:	64 00 00             	add    BYTE PTR fs:[eax],al
    1000:	00 02                	add    BYTE PTR [edx],al
    1002:	91                   	xchg   ecx,eax
    1003:	04 12                	add    al,0x12
    1005:	cf                   	iret   
    1006:	05 00 00 01 59       	add    eax,0x59010000
    100b:	4f                   	dec    edi
    100c:	00 00                	add    BYTE PTR [eax],al
    100e:	00 02                	add    BYTE PTR [edx],al
    1010:	91                   	xchg   ecx,eax
    1011:	08 00                	or     BYTE PTR [eax],al
    1013:	11 ca                	adc    edx,ecx
    1015:	05 00 00 01 5e       	add    eax,0x5e010000
    101a:	4f                   	dec    edi
    101b:	00 00                	add    BYTE PTR [eax],al
    101d:	00 c4                	add    ah,al
    101f:	0b 00                	or     eax,DWORD PTR [eax]
    1021:	9f                   	lahf   
    1022:	26 00 00             	add    BYTE PTR es:[eax],al
    1025:	00 01                	add    BYTE PTR [ecx],al
    1027:	9c                   	pushf  
    1028:	0e                   	push   cs
    1029:	06                   	push   es
    102a:	00 00                	add    BYTE PTR [eax],al
    102c:	12 ef                	adc    ch,bh
    102e:	06                   	push   es
    102f:	00 00                	add    BYTE PTR [eax],al
    1031:	01 5e 72             	add    DWORD PTR [esi+0x72],ebx
    1034:	00 00                	add    BYTE PTR [eax],al
    1036:	00 02                	add    BYTE PTR [edx],al
    1038:	91                   	xchg   ecx,eax
    1039:	00 12                	add    BYTE PTR [edx],dl
    103b:	ba 05 00 00 01       	mov    edx,0x1000005
    1040:	5e                   	pop    esi
    1041:	64 00 00             	add    BYTE PTR fs:[eax],al
    1044:	00 02                	add    BYTE PTR [edx],al
    1046:	91                   	xchg   ecx,eax
    1047:	04 12                	add    al,0x12
    1049:	cf                   	iret   
    104a:	05 00 00 01 5e       	add    eax,0x5e010000
    104f:	4f                   	dec    edi
    1050:	00 00                	add    BYTE PTR [eax],al
    1052:	00 02                	add    BYTE PTR [edx],al
    1054:	91                   	xchg   ecx,eax
    1055:	08 00                	or     BYTE PTR [eax],al
    1057:	11 3f                	adc    DWORD PTR [edi],edi
    1059:	05 00 00 01 62       	add    eax,0x62010000
    105e:	4f                   	dec    edi
    105f:	00 00                	add    BYTE PTR [eax],al
    1061:	00 ea                	add    dl,ch
    1063:	0b 00                	or     eax,DWORD PTR [eax]
    1065:	9f                   	lahf   
    1066:	2d 00 00 00 01       	sub    eax,0x1000000
    106b:	9c                   	pushf  
    106c:	44                   	inc    esp
    106d:	06                   	push   es
    106e:	00 00                	add    BYTE PTR [eax],al
    1070:	12 1c 05 00 00 01 62 	adc    bl,BYTE PTR [eax*1+0x62010000]
    1077:	74 00                	je     1079 <sysEnter_Vector-0x12ef87>
    1079:	00 00                	add    BYTE PTR [eax],al
    107b:	02 91 00 12 17 06    	add    dl,BYTE PTR [ecx+0x6171200]
    1081:	00 00                	add    BYTE PTR [eax],al
    1083:	01 62 44             	add    DWORD PTR [edx+0x44],esp
    1086:	06                   	push   es
    1087:	00 00                	add    BYTE PTR [eax],al
    1089:	02 91 04 00 05 04    	add    dl,BYTE PTR [ecx+0x4050004]
    108f:	7c 02                	jl     1093 <sysEnter_Vector-0x12ef6d>
    1091:	00 00                	add    BYTE PTR [eax],al
    1093:	11 17                	adc    DWORD PTR [edi],edx
    1095:	06                   	push   es
    1096:	00 00                	add    BYTE PTR [eax],al
    1098:	01 67 4f             	add    DWORD PTR [edi+0x4f],esp
    109b:	00 00                	add    BYTE PTR [eax],al
    109d:	00 17                	add    BYTE PTR [edi],dl
    109f:	0c 00                	or     al,0x0
    10a1:	9f                   	lahf   
    10a2:	23 00                	and    eax,DWORD PTR [eax]
    10a4:	00 00                	add    BYTE PTR [eax],al
    10a6:	01 9c 80 06 00 00 12 	add    DWORD PTR [eax+eax*4+0x12000006],ebx
    10ad:	1c 05                	sbb    al,0x5
    10af:	00 00                	add    BYTE PTR [eax],al
    10b1:	01 67 74             	add    DWORD PTR [edi+0x74],esp
    10b4:	00 00                	add    BYTE PTR [eax],al
    10b6:	00 02                	add    BYTE PTR [edx],al
    10b8:	91                   	xchg   ecx,eax
    10b9:	00 12                	add    BYTE PTR [edx],dl
    10bb:	17                   	pop    ss
    10bc:	06                   	push   es
    10bd:	00 00                	add    BYTE PTR [eax],al
    10bf:	01 67 44             	add    DWORD PTR [edi+0x44],esp
    10c2:	06                   	push   es
    10c3:	00 00                	add    BYTE PTR [eax],al
    10c5:	02 91 04 00 11 a3    	add    dl,BYTE PTR [ecx-0x5ceefffc]
    10cb:	05 00 00 01 6c       	add    eax,0x6c010000
    10d0:	4f                   	dec    edi
    10d1:	00 00                	add    BYTE PTR [eax],al
    10d3:	00 3a                	add    BYTE PTR [edx],bh
    10d5:	0c 00                	or     al,0x0
    10d7:	9f                   	lahf   
    10d8:	29 03                	sub    DWORD PTR [ebx],eax
    10da:	00 00                	add    BYTE PTR [eax],al
    10dc:	01 9c 30 07 00 00 12 	add    DWORD PTR [eax+esi*1+0x12000007],ebx
    10e3:	02 07                	add    al,BYTE PTR [edi]
    10e5:	00 00                	add    BYTE PTR [eax],al
    10e7:	01 6c 87 02          	add    DWORD PTR [edi+eax*4+0x2],ebp
    10eb:	00 00                	add    BYTE PTR [eax],al
    10ed:	02 91 00 12 3a 06    	add    dl,BYTE PTR [ecx+0x63a1200]
    10f3:	00 00                	add    BYTE PTR [eax],al
    10f5:	01 6c 74 00          	add    DWORD PTR [esp+esi*2+0x0],ebp
    10f9:	00 00                	add    BYTE PTR [eax],al
    10fb:	02 91 04 12 4b 05    	add    dl,BYTE PTR [ecx+0x54b1204]
    1101:	00 00                	add    BYTE PTR [eax],al
    1103:	01 6c 92 02          	add    DWORD PTR [edx+edx*4+0x2],ebp
    1107:	00 00                	add    BYTE PTR [eax],al
    1109:	02 91 4c 14 7c 01    	add    dl,BYTE PTR [ecx+0x17c144c]
    110f:	00 00                	add    BYTE PTR [eax],al
    1111:	01 6e 30             	add    DWORD PTR [esi+0x30],ebp
    1114:	07                   	pop    es
    1115:	00 00                	add    BYTE PTR [eax],al
    1117:	02 91 5e 14 64 06    	add    dl,BYTE PTR [ecx+0x664145e]
    111d:	00 00                	add    BYTE PTR [eax],al
    111f:	01 6f 74             	add    DWORD PTR [edi+0x74],ebp
    1122:	00 00                	add    BYTE PTR [eax],al
    1124:	00 02                	add    BYTE PTR [edx],al
    1126:	91                   	xchg   ecx,eax
    1127:	6c                   	ins    BYTE PTR es:[edi],dx
    1128:	14 f4                	adc    al,0xf4
    112a:	04 00                	add    al,0x0
    112c:	00 01                	add    BYTE PTR [ecx],al
    112e:	70 4f                	jo     117f <sysEnter_Vector-0x12ee81>
    1130:	00 00                	add    BYTE PTR [eax],al
    1132:	00 02                	add    BYTE PTR [edx],al
    1134:	91                   	xchg   ecx,eax
    1135:	68 14 16 06 00       	push   0x61614
    113a:	00 01                	add    BYTE PTR [ecx],al
    113c:	71 7c                	jno    11ba <sysEnter_Vector-0x12ee46>
    113e:	02 00                	add    al,BYTE PTR [eax]
    1140:	00 02                	add    BYTE PTR [edx],al
    1142:	91                   	xchg   ecx,eax
    1143:	54                   	push   esp
    1144:	16                   	push   ss
    1145:	fc                   	cld    
    1146:	0d 00 9f bd 00       	or     eax,0xbd9f00
    114b:	00 00                	add    BYTE PTR [eax],al
    114d:	17                   	pop    ss
    114e:	07                   	pop    es
    114f:	00 00                	add    BYTE PTR [eax],al
    1151:	17                   	pop    ss
    1152:	72 65                	jb     11b9 <sysEnter_Vector-0x12ee47>
    1154:	73 00                	jae    1156 <sysEnter_Vector-0x12eeaa>
    1156:	01 9d 4f 00 00 00    	add    DWORD PTR [ebp+0x4f],ebx
    115c:	02 91 64 00 18 cd    	add    dl,BYTE PTR [ecx-0x32e7ff9c]
    1162:	0e                   	push   cs
    1163:	00 9f 8e 00 00 00    	add    BYTE PTR [edi+0x8e],bl
    1169:	17                   	pop    ss
    116a:	72 65                	jb     11d1 <sysEnter_Vector-0x12ee2f>
    116c:	73 00                	jae    116e <sysEnter_Vector-0x12ee92>
    116e:	01 ac 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebp
    1175:	91                   	xchg   ecx,eax
    1176:	60                   	pusha  
    1177:	00 00                	add    BYTE PTR [eax],al
    1179:	0d 7a 00 00 00       	or     eax,0x7a
    117e:	40                   	inc    eax
    117f:	07                   	pop    es
    1180:	00 00                	add    BYTE PTR [eax],al
    1182:	19 6b 00             	sbb    DWORD PTR [ebx+0x0],ebp
    1185:	00 00                	add    BYTE PTR [eax],al
    1187:	01 00                	add    DWORD PTR [eax],eax
    1189:	11 2c 05 00 00 01 b8 	adc    DWORD PTR [eax*1-0x47ff0000],ebp
    1190:	64 00 00             	add    BYTE PTR fs:[eax],al
    1193:	00 63 0f             	add    BYTE PTR [ebx+0xf],ah
    1196:	00 9f 29 00 00 00    	add    BYTE PTR [edi+0x29],bl
    119c:	01 9c 68 07 00 00 12 	add    DWORD PTR [eax+ebp*2+0x12000007],ebx
    11a3:	15 05 00 00 01       	adc    eax,0x1000005
    11a8:	b8 72 00 00 00       	mov    eax,0x72
    11ad:	02 91 00 00 11 6f    	add    dl,BYTE PTR [ecx+0x6f110000]
    11b3:	05 00 00 01 bd       	add    eax,0xbd010000
    11b8:	64 00 00             	add    BYTE PTR fs:[eax],al
    11bb:	00 8c 0f 00 9f 20 00 	add    BYTE PTR [edi+ecx*1+0x209f00],cl
    11c2:	00 00                	add    BYTE PTR [eax],al
    11c4:	01 9c 90 07 00 00 12 	add    DWORD PTR [eax+edx*4+0x12000007],ebx
    11cb:	15 05 00 00 01       	adc    eax,0x1000005
    11d0:	bd 72 00 00 00       	mov    ebp,0x72
    11d5:	02 91 00 00 11 80    	add    dl,BYTE PTR [ecx-0x7fef0000]
    11db:	05 00 00 01 c2       	add    eax,0xc2010000
    11e0:	ad                   	lods   eax,DWORD PTR ds:[esi]
    11e1:	00 00                	add    BYTE PTR [eax],al
    11e3:	00 ac 0f 00 9f c1 01 	add    BYTE PTR [edi+ecx*1+0x1c19f00],ch
    11ea:	00 00                	add    BYTE PTR [eax],al
    11ec:	01 9c 4d 08 00 00 12 	add    DWORD PTR [ebp+ecx*2+0x12000008],ebx
    11f3:	42                   	inc    edx
    11f4:	06                   	push   es
    11f5:	00 00                	add    BYTE PTR [eax],al
    11f7:	01 c2                	add    edx,eax
    11f9:	4d                   	dec    ebp
    11fa:	08 00                	or     BYTE PTR [eax],al
    11fc:	00 02                	add    BYTE PTR [edx],al
    11fe:	91                   	xchg   ecx,eax
    11ff:	00 1a                	add    BYTE PTR [edx],bl
    1201:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1202:	00 01                	add    BYTE PTR [ecx],al
    1204:	c2 53 08             	ret    0x853
    1207:	00 00                	add    BYTE PTR [eax],al
    1209:	02 91 04 12 15 05    	add    dl,BYTE PTR [ecx+0x5151204]
    120f:	00 00                	add    BYTE PTR [eax],al
    1211:	01 c2                	add    edx,eax
    1213:	72 00                	jb     1215 <sysEnter_Vector-0x12edeb>
    1215:	00 00                	add    BYTE PTR [eax],al
    1217:	02 91 08 14 98 06    	add    dl,BYTE PTR [ecx+0x6981408]
    121d:	00 00                	add    BYTE PTR [eax],al
    121f:	01 c4                	add    esp,eax
    1221:	74 00                	je     1223 <sysEnter_Vector-0x12eddd>
    1223:	00 00                	add    BYTE PTR [eax],al
    1225:	02 91 54 14 22 07    	add    dl,BYTE PTR [ecx+0x7221454]
    122b:	00 00                	add    BYTE PTR [eax],al
    122d:	01 c5                	add    ebp,eax
    122f:	4f                   	dec    edi
    1230:	00 00                	add    BYTE PTR [eax],al
    1232:	00 02                	add    BYTE PTR [edx],al
    1234:	91                   	xchg   ecx,eax
    1235:	60                   	pusha  
    1236:	14 9f                	adc    al,0x9f
    1238:	06                   	push   es
    1239:	00 00                	add    BYTE PTR [eax],al
    123b:	01 c6                	add    esi,eax
    123d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    123e:	00 00                	add    BYTE PTR [eax],al
    1240:	00 02                	add    BYTE PTR [edx],al
    1242:	91                   	xchg   ecx,eax
    1243:	6c                   	ins    BYTE PTR es:[edi],dx
    1244:	14 45                	adc    al,0x45
    1246:	05 00 00 01 c7       	add    eax,0xc7010000
    124b:	74 00                	je     124d <sysEnter_Vector-0x12edb3>
    124d:	00 00                	add    BYTE PTR [eax],al
    124f:	02 91 5c 14 f4 05    	add    dl,BYTE PTR [ecx+0x5f4145c]
    1255:	00 00                	add    BYTE PTR [eax],al
    1257:	01 c8                	add    eax,ecx
    1259:	74 00                	je     125b <sysEnter_Vector-0x12eda5>
    125b:	00 00                	add    BYTE PTR [eax],al
    125d:	02 91 50 14 09 07    	add    dl,BYTE PTR [ecx+0x7091450]
    1263:	00 00                	add    BYTE PTR [eax],al
    1265:	01 c9                	add    ecx,ecx
    1267:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1268:	00 00                	add    BYTE PTR [eax],al
    126a:	00 02                	add    BYTE PTR [edx],al
    126c:	91                   	xchg   ecx,eax
    126d:	68 14 32 05 00       	push   0x53214
    1272:	00 01                	add    BYTE PTR [ecx],al
    1274:	ca 4f 00             	retf   0x4f
    1277:	00 00                	add    BYTE PTR [eax],al
    1279:	02 91 58 14 f4 04    	add    dl,BYTE PTR [ecx+0x4f41458]
    127f:	00 00                	add    BYTE PTR [eax],al
    1281:	01 cb                	add    ebx,ecx
    1283:	4f                   	dec    edi
    1284:	00 00                	add    BYTE PTR [eax],al
    1286:	00 02                	add    BYTE PTR [edx],al
    1288:	91                   	xchg   ecx,eax
    1289:	64                   	fs
    128a:	1b de                	sbb    ebx,esi
    128c:	05 00 00 01 e8       	add    eax,0xe8010000
    1291:	57                   	push   edi
    1292:	11 00                	adc    DWORD PTR [eax],eax
    1294:	9f                   	lahf   
    1295:	00 05 04 74 00 00    	add    BYTE PTR ds:0x7404,al
    129b:	00 05 04 ad 00 00    	add    BYTE PTR ds:0xad04,al
    12a1:	00 11                	add    BYTE PTR [ecx],dl
    12a3:	d6                   	(bad)  
    12a4:	05 00 00 01 ed       	add    eax,0xed010000
    12a9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    12aa:	00 00                	add    BYTE PTR [eax],al
    12ac:	00 6d 11             	add    BYTE PTR [ebp+0x11],ch
    12af:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    12b5:	01 9c 9b 08 00 00 12 	add    DWORD PTR [ebx+ebx*4+0x12000008],ebx
    12bc:	42                   	inc    edx
    12bd:	06                   	push   es
    12be:	00 00                	add    BYTE PTR [eax],al
    12c0:	01 ed                	add    ebp,ebp
    12c2:	4d                   	dec    ebp
    12c3:	08 00                	or     BYTE PTR [eax],al
    12c5:	00 02                	add    BYTE PTR [edx],al
    12c7:	91                   	xchg   ecx,eax
    12c8:	00 1a                	add    BYTE PTR [edx],bl
    12ca:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12cb:	00 01                	add    BYTE PTR [ecx],al
    12cd:	ed                   	in     eax,dx
    12ce:	53                   	push   ebx
    12cf:	08 00                	or     BYTE PTR [eax],al
    12d1:	00 02                	add    BYTE PTR [edx],al
    12d3:	91                   	xchg   ecx,eax
    12d4:	04 12                	add    al,0x12
    12d6:	15 05 00 00 01       	adc    eax,0x1000005
    12db:	ed                   	in     eax,dx
    12dc:	72 00                	jb     12de <sysEnter_Vector-0x12ed22>
    12de:	00 00                	add    BYTE PTR [eax],al
    12e0:	02 91 08 00 11 22    	add    dl,BYTE PTR [ecx+0x22110008]
    12e6:	06                   	push   es
    12e7:	00 00                	add    BYTE PTR [eax],al
    12e9:	01 f2                	add    edx,esi
    12eb:	4f                   	dec    edi
    12ec:	00 00                	add    BYTE PTR [eax],al
    12ee:	00 93 11 00 9f 29    	add    BYTE PTR [ebx+0x299f0011],dl
    12f4:	00 00                	add    BYTE PTR [eax],al
    12f6:	00 01                	add    BYTE PTR [ecx],al
    12f8:	9c                   	pushf  
    12f9:	c3                   	ret    
    12fa:	08 00                	or     BYTE PTR [eax],al
    12fc:	00 12                	add    BYTE PTR [edx],dl
    12fe:	31 06                	xor    DWORD PTR [esi],eax
    1300:	00 00                	add    BYTE PTR [eax],al
    1302:	01 f2                	add    edx,esi
    1304:	74 00                	je     1306 <sysEnter_Vector-0x12ecfa>
    1306:	00 00                	add    BYTE PTR [eax],al
    1308:	02 91 00 00 1c 78    	add    dl,BYTE PTR [ecx+0x781c0000]
    130e:	00 00                	add    BYTE PTR [eax],al
    1310:	00 05 33 4d 08 00    	add    BYTE PTR ds:0x84d33,al
    1316:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
    131c:	9f                   	lahf   
    131d:	1c 10                	sbb    al,0x10
    131f:	02 00                	add    al,BYTE PTR [eax]
    1321:	00 04 35 e5 08 00 00 	add    BYTE PTR [esi*1+0x8e5],al
    1328:	05 03 d0 7d 00       	add    eax,0x7dd003
    132d:	9f                   	lahf   
    132e:	05 04 a2 00 00       	add    eax,0xa204
    1333:	00 1c 33             	add    BYTE PTR [ebx+esi*1],bl
    1336:	02 00                	add    al,BYTE PTR [eax]
    1338:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    133b:	97                   	xchg   edi,eax
    133c:	00 00                	add    BYTE PTR [eax],al
    133e:	00 05 03 cc 7d 00    	add    BYTE PTR ds:0x7dcc03,al
    1344:	9f                   	lahf   
    1345:	1c 01                	sbb    al,0x1
    1347:	05 00 00 01 0d       	add    eax,0xd010000
    134c:	74 00                	je     134e <sysEnter_Vector-0x12ecb2>
    134e:	00 00                	add    BYTE PTR [eax],al
    1350:	05 03 d4 7d 00       	add    eax,0x7dd403
    1355:	9f                   	lahf   
    1356:	1c f6                	sbb    al,0xf6
    1358:	06                   	push   es
    1359:	00 00                	add    BYTE PTR [eax],al
    135b:	01 0e                	add    DWORD PTR [esi],ecx
    135d:	74 00                	je     135f <sysEnter_Vector-0x12eca1>
    135f:	00 00                	add    BYTE PTR [eax],al
    1361:	05 03 e0 7d 00       	add    eax,0x7de003
    1366:	9f                   	lahf   
    1367:	1c 5b                	sbb    al,0x5b
    1369:	05 00 00 01 0f       	add    eax,0xf010000
    136e:	74 00                	je     1370 <sysEnter_Vector-0x12ec90>
    1370:	00 00                	add    BYTE PTR [eax],al
    1372:	05 03 d8 7d 00       	add    eax,0x7dd803
    1377:	9f                   	lahf   
    1378:	1c df                	sbb    al,0xdf
    137a:	06                   	push   es
    137b:	00 00                	add    BYTE PTR [eax],al
    137d:	01 10                	add    DWORD PTR [eax],edx
    137f:	74 00                	je     1381 <sysEnter_Vector-0x12ec7f>
    1381:	00 00                	add    BYTE PTR [eax],al
    1383:	05 03 dc 7d 00       	add    eax,0x7ddc03
    1388:	9f                   	lahf   
    1389:	00 97 02 00 00 04    	add    BYTE PTR [edi+0x4000002],dl
    138f:	00 a1 05 00 00 04    	add    BYTE PTR [ecx+0x4000005],ah
    1395:	01 c3                	add    ebx,eax
    1397:	00 00                	add    BYTE PTR [eax],al
    1399:	00 0c 68             	add    BYTE PTR [eax+ebp*2],cl
    139c:	07                   	pop    es
    139d:	00 00                	add    BYTE PTR [eax],al
    139f:	4d                   	dec    ebp
    13a0:	00 00                	add    BYTE PTR [eax],al
    13a2:	00 bc 11 00 9f 69 01 	add    BYTE PTR [ecx+edx*1+0x1699f00],bh
    13a9:	00 00                	add    BYTE PTR [eax],al
    13ab:	4f                   	dec    edi
    13ac:	06                   	push   es
    13ad:	00 00                	add    BYTE PTR [eax],al
    13af:	02 01                	add    al,BYTE PTR [ecx]
    13b1:	08 3f                	or     BYTE PTR [edi],bh
    13b3:	00 00                	add    BYTE PTR [eax],al
    13b5:	00 02                	add    BYTE PTR [edx],al
    13b7:	02 07                	add    al,BYTE PTR [edi]
    13b9:	0e                   	push   cs
    13ba:	00 00                	add    BYTE PTR [eax],al
    13bc:	00 02                	add    BYTE PTR [edx],al
    13be:	04 07                	add    al,0x7
    13c0:	32 00                	xor    al,BYTE PTR [eax]
    13c2:	00 00                	add    BYTE PTR [eax],al
    13c4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    13c7:	2d 00 00 00 02       	sub    eax,0x2000000
    13cc:	01 06                	add    DWORD PTR [esi],eax
    13ce:	41                   	inc    ecx
    13cf:	00 00                	add    BYTE PTR [eax],al
    13d1:	00 02                	add    BYTE PTR [edx],al
    13d3:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    13d9:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    13e0:	02 08                	add    cl,BYTE PTR [eax]
    13e2:	05 00 00 00 00       	add    eax,0x0
    13e7:	02 08                	add    cl,BYTE PTR [eax]
    13e9:	07                   	pop    es
    13ea:	28 00                	sub    BYTE PTR [eax],al
    13ec:	00 00                	add    BYTE PTR [eax],al
    13ee:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    13f5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    13f8:	2a 01                	sub    al,BYTE PTR [ecx]
    13fa:	00 00                	add    BYTE PTR [eax],al
    13fc:	04 04                	add    al,0x4
    13fe:	78 00                	js     1400 <sysEnter_Vector-0x12ec00>
    1400:	00 00                	add    BYTE PTR [eax],al
    1402:	02 01                	add    al,BYTE PTR [ecx]
    1404:	06                   	push   es
    1405:	48                   	dec    eax
    1406:	00 00                	add    BYTE PTR [eax],al
    1408:	00 02                	add    BYTE PTR [edx],al
    140a:	0c 04                	or     al,0x4
    140c:	ad                   	lods   eax,DWORD PTR ds:[esi]
    140d:	00 00                	add    BYTE PTR [eax],al
    140f:	00 05 6b 03 00 00    	add    BYTE PTR ds:0x36b,al
    1415:	04 33                	add    al,0x33
    1417:	00 00                	add    BYTE PTR [eax],al
    1419:	00 02                	add    BYTE PTR [edx],al
    141b:	15 80 01 00 00       	adc    eax,0x180
    1420:	06                   	push   es
    1421:	fd                   	std    
    1422:	03 00                	add    eax,DWORD PTR [eax]
    1424:	00 00                	add    BYTE PTR [eax],al
    1426:	06                   	push   es
    1427:	42                   	inc    edx
    1428:	04 00                	add    al,0x0
    142a:	00 01                	add    BYTE PTR [ecx],al
    142c:	06                   	push   es
    142d:	84 02                	test   BYTE PTR [edx],al
    142f:	00 00                	add    BYTE PTR [eax],al
    1431:	02 06                	add    al,BYTE PTR [esi]
    1433:	4e                   	dec    esi
    1434:	03 00                	add    eax,DWORD PTR [eax]
    1436:	00 03                	add    BYTE PTR [ebx],al
    1438:	06                   	push   es
    1439:	6a 02                	push   0x2
    143b:	00 00                	add    BYTE PTR [eax],al
    143d:	04 06                	add    al,0x6
    143f:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    1443:	05 06 24 04 00       	add    eax,0x42406
    1448:	00 0a                	add    BYTE PTR [edx],cl
    144a:	06                   	push   es
    144b:	8f 03                	pop    DWORD PTR [ebx]
    144d:	00 00                	add    BYTE PTR [eax],al
    144f:	0b 06                	or     eax,DWORD PTR [esi]
    1451:	d6                   	(bad)  
    1452:	03 00                	add    eax,DWORD PTR [eax]
    1454:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    1457:	5c                   	pop    esp
    1458:	03 00                	add    eax,DWORD PTR [eax]
    145a:	00 0d 06 75 03 00    	add    BYTE PTR ds:0x37506,cl
    1460:	00 0e                	add    BYTE PTR [esi],cl
    1462:	06                   	push   es
    1463:	77 02                	ja     1467 <sysEnter_Vector-0x12eb99>
    1465:	00 00                	add    BYTE PTR [eax],al
    1467:	0f 06                	clts   
    1469:	b7 03                	mov    bh,0x3
    146b:	00 00                	add    BYTE PTR [eax],al
    146d:	10 06                	adc    BYTE PTR [esi],al
    146f:	a9 04 00 00 11       	test   eax,0x11000004
    1474:	06                   	push   es
    1475:	87 04 00             	xchg   DWORD PTR [eax+eax*1],eax
    1478:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    147b:	5c                   	pop    esp
    147c:	04 00                	add    al,0x0
    147e:	00 50 06             	add    BYTE PTR [eax+0x6],dl
    1481:	f0 03 00             	lock add eax,DWORD PTR [eax]
    1484:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1487:	96                   	xchg   esi,eax
    1488:	04 00                	add    al,0x0
    148a:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    148d:	1b 03                	sbb    eax,DWORD PTR [ebx]
    148f:	00 00                	add    BYTE PTR [eax],al
    1491:	97                   	xchg   edi,eax
    1492:	07                   	pop    es
    1493:	0d 04 00 00 63       	or     eax,0x63000004
    1498:	01 07                	add    DWORD PTR [edi],eax
    149a:	e3 03                	jecxz  149f <sysEnter_Vector-0x12eb61>
    149c:	00 00                	add    BYTE PTR [eax],al
    149e:	64 01 07             	add    DWORD PTR fs:[edi],eax
    14a1:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    14a5:	65 01 07             	add    DWORD PTR gs:[edi],eax
    14a8:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
    14ae:	07                   	pop    es
    14af:	d8 04 00             	fadd   DWORD PTR [eax+eax*1]
    14b2:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    14b5:	07                   	pop    es
    14b6:	82                   	(bad)  
    14b7:	03 00                	add    eax,DWORD PTR [eax]
    14b9:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    14bc:	07                   	pop    es
    14bd:	b8 02 00 00 69       	mov    eax,0x69000002
    14c2:	01 07                	add    DWORD PTR [edi],eax
    14c4:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    14c7:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    14ca:	07                   	pop    es
    14cb:	0b 03                	or     eax,DWORD PTR [ebx]
    14cd:	00 00                	add    BYTE PTR [eax],al
    14cf:	71 01                	jno    14d2 <sysEnter_Vector-0x12eb2e>
    14d1:	07                   	pop    es
    14d2:	79 04                	jns    14d8 <sysEnter_Vector-0x12eb28>
    14d4:	00 00                	add    BYTE PTR [eax],al
    14d6:	00 03                	add    BYTE PTR [ebx],al
    14d8:	07                   	pop    es
    14d9:	9c                   	pushf  
    14da:	03 00                	add    eax,DWORD PTR [eax]
    14dc:	00 01                	add    BYTE PTR [ecx],al
    14de:	03 07                	add    eax,DWORD PTR [edi]
    14e0:	ab                   	stos   DWORD PTR es:[edi],eax
    14e1:	03 00                	add    eax,DWORD PTR [eax]
    14e3:	00 02                	add    BYTE PTR [edx],al
    14e5:	03 07                	add    eax,DWORD PTR [edi]
    14e7:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
    14ea:	00 03                	add    BYTE PTR [ebx],al
    14ec:	03 07                	add    eax,DWORD PTR [edi]
    14ee:	98                   	cwde   
    14ef:	02 00                	add    al,BYTE PTR [eax]
    14f1:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    14f4:	07                   	pop    es
    14f5:	e7 02                	out    0x2,eax
    14f7:	00 00                	add    BYTE PTR [eax],al
    14f9:	05 03 07 2f 03       	add    eax,0x32f0703
    14fe:	00 00                	add    BYTE PTR [eax],al
    1500:	06                   	push   es
    1501:	03 07                	add    eax,DWORD PTR [edi]
    1503:	c4 03                	les    eax,FWORD PTR [ebx]
    1505:	00 00                	add    BYTE PTR [eax],al
    1507:	00 09                	add    BYTE PTR [ecx],cl
    1509:	00 08                	add    BYTE PTR [eax],cl
    150b:	55                   	push   ebp
    150c:	07                   	pop    es
    150d:	00 00                	add    BYTE PTR [eax],al
    150f:	01 0f                	add    DWORD PTR [edi],ecx
    1511:	bc 11 00 9f 26       	mov    esp,0x269f0011
    1516:	00 00                	add    BYTE PTR [eax],al
    1518:	00 01                	add    BYTE PTR [ecx],al
    151a:	9c                   	pushf  
    151b:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    151c:	01 00                	add    DWORD PTR [eax],eax
    151e:	00 09                	add    BYTE PTR [ecx],cl
    1520:	98                   	cwde   
    1521:	06                   	push   es
    1522:	00 00                	add    BYTE PTR [eax],al
    1524:	01 0f                	add    DWORD PTR [edi],ecx
    1526:	72 00                	jb     1528 <sysEnter_Vector-0x12ead8>
    1528:	00 00                	add    BYTE PTR [eax],al
    152a:	02 91 00 00 08 50    	add    dl,BYTE PTR [ecx+0x50080000]
    1530:	07                   	pop    es
    1531:	00 00                	add    BYTE PTR [eax],al
    1533:	01 14 e2             	add    DWORD PTR [edx+eiz*8],edx
    1536:	11 00                	adc    DWORD PTR [eax],eax
    1538:	9f                   	lahf   
    1539:	43                   	inc    ebx
    153a:	00 00                	add    BYTE PTR [eax],al
    153c:	00 01                	add    BYTE PTR [ecx],al
    153e:	9c                   	pushf  
    153f:	d4 01                	aam    0x1
    1541:	00 00                	add    BYTE PTR [eax],al
    1543:	0a 63 00             	or     ah,BYTE PTR [ebx+0x0]
    1546:	01 14 78             	add    DWORD PTR [eax+edi*2],edx
    1549:	00 00                	add    BYTE PTR [eax],al
    154b:	00 02                	add    BYTE PTR [edx],al
    154d:	91                   	xchg   ecx,eax
    154e:	60                   	pusha  
    154f:	0b 98 06 00 00 01    	or     ebx,DWORD PTR [eax+0x1000006]
    1555:	16                   	push   ss
    1556:	d4 01                	aam    0x1
    1558:	00 00                	add    BYTE PTR [eax],al
    155a:	02 91 72 00 0c 78    	add    dl,BYTE PTR [ecx+0x780c0072]
    1560:	00 00                	add    BYTE PTR [eax],al
    1562:	00 e4                	add    ah,ah
    1564:	01 00                	add    DWORD PTR [eax],eax
    1566:	00 0d 6b 00 00 00    	add    BYTE PTR ds:0x6b,cl
    156c:	01 00                	add    DWORD PTR [eax],eax
    156e:	0e                   	push   cs
    156f:	43                   	inc    ebx
    1570:	07                   	pop    es
    1571:	00 00                	add    BYTE PTR [eax],al
    1573:	01 1f                	add    DWORD PTR [edi],ebx
    1575:	78 00                	js     1577 <sysEnter_Vector-0x12ea89>
    1577:	00 00                	add    BYTE PTR [eax],al
    1579:	25 12 00 9f 43       	and    eax,0x439f0012
    157e:	00 00                	add    BYTE PTR [eax],al
    1580:	00 01                	add    BYTE PTR [ecx],al
    1582:	9c                   	pushf  
    1583:	0a 02                	or     al,BYTE PTR [edx]
    1585:	00 00                	add    BYTE PTR [eax],al
    1587:	0f 63 00             	packsswb mm0,QWORD PTR [eax]
    158a:	01 21                	add    DWORD PTR [ecx],esp
    158c:	78 00                	js     158e <sysEnter_Vector-0x12ea72>
    158e:	00 00                	add    BYTE PTR [eax],al
    1590:	02 91 73 00 10 4b    	add    dl,BYTE PTR [ecx+0x4b100073]
    1596:	07                   	pop    es
    1597:	00 00                	add    BYTE PTR [eax],al
    1599:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    159f:	68 12 00 9f bd       	push   0xbd9f0012
    15a4:	00 00                	add    BYTE PTR [eax],al
    15a6:	00 01                	add    BYTE PTR [ecx],al
    15a8:	9c                   	pushf  
    15a9:	83 02 00             	add    DWORD PTR [edx],0x0
    15ac:	00 09                	add    BYTE PTR [ecx],cl
    15ae:	98                   	cwde   
    15af:	06                   	push   es
    15b0:	00 00                	add    BYTE PTR [eax],al
    15b2:	01 2d 72 00 00 00    	add    DWORD PTR ds:0x72,ebp
    15b8:	02 91 00 09 5a 07    	add    dl,BYTE PTR [ecx+0x75a0900]
    15be:	00 00                	add    BYTE PTR [eax],al
    15c0:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    15c6:	02 91 04 09 15 05    	add    dl,BYTE PTR [ecx+0x5150904]
    15cc:	00 00                	add    BYTE PTR [eax],al
    15ce:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    15d4:	02 91 08 0b 61 07    	add    dl,BYTE PTR [ecx+0x7610b08]
    15da:	00 00                	add    BYTE PTR [eax],al
    15dc:	01 2f                	add    DWORD PTR [edi],ebp
    15de:	78 00                	js     15e0 <sysEnter_Vector-0x12ea20>
    15e0:	00 00                	add    BYTE PTR [eax],al
    15e2:	02 91 6b 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f6b]
    15e8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    15e9:	00 01                	add    BYTE PTR [ecx],al
    15eb:	30 4f 00             	xor    BYTE PTR [edi+0x0],cl
    15ee:	00 00                	add    BYTE PTR [eax],al
    15f0:	02 91 6c 0b 84 07    	add    dl,BYTE PTR [ecx+0x7840b6c]
    15f6:	00 00                	add    BYTE PTR [eax],al
    15f8:	01 31                	add    DWORD PTR [ecx],esi
    15fa:	d4 01                	aam    0x1
    15fc:	00 00                	add    BYTE PTR [eax],al
    15fe:	02 91 69 11 7a 07    	add    dl,BYTE PTR [ecx+0x77a1169]
    1604:	00 00                	add    BYTE PTR [eax],al
    1606:	01 37                	add    DWORD PTR [edi],esi
    1608:	a8 12                	test   al,0x12
    160a:	00 9f 00 12 78 00    	add    BYTE PTR [edi+0x781200],bl
    1610:	00 00                	add    BYTE PTR [eax],al
    1612:	03 33                	add    esi,DWORD PTR [ebx]
    1614:	94                   	xchg   esp,eax
    1615:	02 00                	add    al,BYTE PTR [eax]
    1617:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
    161d:	9f                   	lahf   
    161e:	04 04                	add    al,0x4
    1620:	72 00                	jb     1622 <sysEnter_Vector-0x12e9de>
    1622:	00 00                	add    BYTE PTR [eax],al
    1624:	00 c1                	add    cl,al
    1626:	0b 00                	or     eax,DWORD PTR [eax]
    1628:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    162b:	b3 06                	mov    bl,0x6
    162d:	00 00                	add    BYTE PTR [eax],al
    162f:	04 01                	add    al,0x1
    1631:	c3                   	ret    
    1632:	00 00                	add    BYTE PTR [eax],al
    1634:	00 0c 4f             	add    BYTE PTR [edi+ecx*2],cl
    1637:	09 00                	or     DWORD PTR [eax],eax
    1639:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    163c:	00 00                	add    BYTE PTR [eax],al
    163e:	28 13                	sub    BYTE PTR [ebx],dl
    1640:	00 9f 67 0d 00 00    	add    BYTE PTR [edi+0xd67],bl
    1646:	1f                   	pop    ds
    1647:	07                   	pop    es
    1648:	00 00                	add    BYTE PTR [eax],al
    164a:	02 01                	add    al,BYTE PTR [ecx]
    164c:	08 3f                	or     BYTE PTR [edi],bh
    164e:	00 00                	add    BYTE PTR [eax],al
    1650:	00 02                	add    BYTE PTR [edx],al
    1652:	02 07                	add    al,BYTE PTR [edi]
    1654:	0e                   	push   cs
    1655:	00 00                	add    BYTE PTR [eax],al
    1657:	00 02                	add    BYTE PTR [edx],al
    1659:	04 07                	add    al,0x7
    165b:	32 00                	xor    al,BYTE PTR [eax]
    165d:	00 00                	add    BYTE PTR [eax],al
    165f:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1662:	2d 00 00 00 02       	sub    eax,0x2000000
    1667:	01 06                	add    DWORD PTR [esi],eax
    1669:	41                   	inc    ecx
    166a:	00 00                	add    BYTE PTR [eax],al
    166c:	00 02                	add    BYTE PTR [edx],al
    166e:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    1674:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    167b:	02 08                	add    cl,BYTE PTR [eax]
    167d:	05 00 00 00 00       	add    eax,0x0
    1682:	02 08                	add    cl,BYTE PTR [eax]
    1684:	07                   	pop    es
    1685:	28 00                	sub    BYTE PTR [eax],al
    1687:	00 00                	add    BYTE PTR [eax],al
    1689:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1690:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1693:	2a 01                	sub    al,BYTE PTR [ecx]
    1695:	00 00                	add    BYTE PTR [eax],al
    1697:	04 04                	add    al,0x4
    1699:	05 04 7a 00 00       	add    eax,0x7a04
    169e:	00 02                	add    BYTE PTR [edx],al
    16a0:	01 06                	add    DWORD PTR [esi],eax
    16a2:	48                   	dec    eax
    16a3:	00 00                	add    BYTE PTR [eax],al
    16a5:	00 06                	add    BYTE PTR [esi],al
    16a7:	bb 08 00 00 02       	mov    ebx,0x2000008
    16ac:	28 8c 00 00 00 07 04 	sub    BYTE PTR [eax+eax*1+0x4070000],cl
    16b3:	de 07                	fiadd  WORD PTR [edi]
    16b5:	00 00                	add    BYTE PTR [eax],al
    16b7:	7a 00                	jp     16b9 <sysEnter_Vector-0x12e947>
    16b9:	00 00                	add    BYTE PTR [eax],al
    16bb:	06                   	push   es
    16bc:	c2 08 00             	ret    0x8
    16bf:	00 02                	add    BYTE PTR [edx],al
    16c1:	62 81 00 00 00 06    	bound  eax,QWORD PTR [ecx+0x6000000]
    16c7:	45                   	inc    ebp
    16c8:	02 00                	add    al,BYTE PTR [eax]
    16ca:	00 03                	add    BYTE PTR [ebx],al
    16cc:	34 33                	xor    al,0x33
    16ce:	00 00                	add    BYTE PTR [eax],al
    16d0:	00 06                	add    BYTE PTR [esi],al
    16d2:	01 02                	add    DWORD PTR [edx],eax
    16d4:	00 00                	add    BYTE PTR [eax],al
    16d6:	03 56 33             	add    edx,DWORD PTR [esi+0x33]
    16d9:	00 00                	add    BYTE PTR [eax],al
    16db:	00 06                	add    BYTE PTR [esi],al
    16dd:	91                   	xchg   ecx,eax
    16de:	02 00                	add    al,BYTE PTR [eax]
    16e0:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
    16e3:	33 00                	xor    eax,DWORD PTR [eax]
    16e5:	00 00                	add    BYTE PTR [eax],al
    16e7:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    16ea:	ad                   	lods   eax,DWORD PTR ds:[esi]
    16eb:	00 00                	add    BYTE PTR [eax],al
    16ed:	00 08                	add    BYTE PTR [eax],cl
    16ef:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    16f2:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    16f5:	00 00                	add    BYTE PTR [eax],al
    16f7:	00 05 15 c3 01 00    	add    BYTE PTR ds:0x1c315,al
    16fd:	00 09                	add    BYTE PTR [ecx],cl
    16ff:	fd                   	std    
    1700:	03 00                	add    eax,DWORD PTR [eax]
    1702:	00 00                	add    BYTE PTR [eax],al
    1704:	09 42 04             	or     DWORD PTR [edx+0x4],eax
    1707:	00 00                	add    BYTE PTR [eax],al
    1709:	01 09                	add    DWORD PTR [ecx],ecx
    170b:	84 02                	test   BYTE PTR [edx],al
    170d:	00 00                	add    BYTE PTR [eax],al
    170f:	02 09                	add    cl,BYTE PTR [ecx]
    1711:	4e                   	dec    esi
    1712:	03 00                	add    eax,DWORD PTR [eax]
    1714:	00 03                	add    BYTE PTR [ebx],al
    1716:	09 6a 02             	or     DWORD PTR [edx+0x2],ebp
    1719:	00 00                	add    BYTE PTR [eax],al
    171b:	04 09                	add    al,0x9
    171d:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    1721:	05 09 24 04 00       	add    eax,0x42409
    1726:	00 0a                	add    BYTE PTR [edx],cl
    1728:	09 8f 03 00 00 0b    	or     DWORD PTR [edi+0xb000003],ecx
    172e:	09 d6                	or     esi,edx
    1730:	03 00                	add    eax,DWORD PTR [eax]
    1732:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    1735:	5c                   	pop    esp
    1736:	03 00                	add    eax,DWORD PTR [eax]
    1738:	00 0d 09 75 03 00    	add    BYTE PTR ds:0x37509,cl
    173e:	00 0e                	add    BYTE PTR [esi],cl
    1740:	09 77 02             	or     DWORD PTR [edi+0x2],esi
    1743:	00 00                	add    BYTE PTR [eax],al
    1745:	0f 09                	wbinvd 
    1747:	b7 03                	mov    bh,0x3
    1749:	00 00                	add    BYTE PTR [eax],al
    174b:	10 09                	adc    BYTE PTR [ecx],cl
    174d:	a9 04 00 00 11       	test   eax,0x11000004
    1752:	09 87 04 00 00 4f    	or     DWORD PTR [edi+0x4f000004],eax
    1758:	09 5c 04 00          	or     DWORD PTR [esp+eax*1+0x0],ebx
    175c:	00 50 09             	add    BYTE PTR [eax+0x9],dl
    175f:	f0 03 00             	lock add eax,DWORD PTR [eax]
    1762:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
    1765:	96                   	xchg   esi,eax
    1766:	04 00                	add    al,0x0
    1768:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
    176b:	1b 03                	sbb    eax,DWORD PTR [ebx]
    176d:	00 00                	add    BYTE PTR [eax],al
    176f:	97                   	xchg   edi,eax
    1770:	0a 0d 04 00 00 63    	or     cl,BYTE PTR ds:0x63000004
    1776:	01 0a                	add    DWORD PTR [edx],ecx
    1778:	e3 03                	jecxz  177d <sysEnter_Vector-0x12e883>
    177a:	00 00                	add    BYTE PTR [eax],al
    177c:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
    177f:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    1783:	65 01 0a             	add    DWORD PTR gs:[edx],ecx
    1786:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
    178c:	0a d8                	or     bl,al
    178e:	04 00                	add    al,0x0
    1790:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1793:	0a 82 03 00 00 68    	or     al,BYTE PTR [edx+0x68000003]
    1799:	01 0a                	add    DWORD PTR [edx],ecx
    179b:	b8 02 00 00 69       	mov    eax,0x69000002
    17a0:	01 0a                	add    DWORD PTR [edx],ecx
    17a2:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    17a5:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    17a8:	0a 0b                	or     cl,BYTE PTR [ebx]
    17aa:	03 00                	add    eax,DWORD PTR [eax]
    17ac:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    17af:	0a 79 04             	or     bh,BYTE PTR [ecx+0x4]
    17b2:	00 00                	add    BYTE PTR [eax],al
    17b4:	00 03                	add    BYTE PTR [ebx],al
    17b6:	0a 9c 03 00 00 01 03 	or     bl,BYTE PTR [ebx+eax*1+0x3010000]
    17bd:	0a ab 03 00 00 02    	or     ch,BYTE PTR [ebx+0x2000003]
    17c3:	03 0a                	add    ecx,DWORD PTR [edx]
    17c5:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
    17c8:	00 03                	add    BYTE PTR [ebx],al
    17ca:	03 0a                	add    ecx,DWORD PTR [edx]
    17cc:	98                   	cwde   
    17cd:	02 00                	add    al,BYTE PTR [eax]
    17cf:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    17d2:	0a e7                	or     ah,bh
    17d4:	02 00                	add    al,BYTE PTR [eax]
    17d6:	00 05 03 0a 2f 03    	add    BYTE PTR ds:0x32f0a03,al
    17dc:	00 00                	add    BYTE PTR [eax],al
    17de:	06                   	push   es
    17df:	03 0a                	add    ecx,DWORD PTR [edx]
    17e1:	c4 03                	les    eax,FWORD PTR [ebx]
    17e3:	00 00                	add    BYTE PTR [eax],al
    17e5:	00 09                	add    BYTE PTR [ecx],cl
    17e7:	00 05 04 c9 01 00    	add    BYTE PTR ds:0x1c904,al
    17ed:	00 0b                	add    BYTE PTR [ebx],cl
    17ef:	7a 00                	jp     17f1 <sysEnter_Vector-0x12e80f>
    17f1:	00 00                	add    BYTE PTR [eax],al
    17f3:	02 01                	add    al,BYTE PTR [ecx]
    17f5:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    17f8:	00 00                	add    BYTE PTR [eax],al
    17fa:	02 08                	add    cl,BYTE PTR [eax]
    17fc:	04 b2                	add    al,0xb2
    17fe:	00 00                	add    BYTE PTR [eax],al
    1800:	00 0c 7a             	add    BYTE PTR [edx+edi*2],cl
    1803:	08 00                	or     BYTE PTR [eax],al
    1805:	00 01                	add    BYTE PTR [ecx],al
    1807:	11 4f 00             	adc    DWORD PTR [edi+0x0],ecx
    180a:	00 00                	add    BYTE PTR [eax],al
    180c:	28 13                	sub    BYTE PTR [ebx],dl
    180e:	00 9f 3a 00 00 00    	add    BYTE PTR [edi+0x3a],bl
    1814:	01 9c 4a 02 00 00 0d 	add    DWORD PTR [edx+ecx*2+0xd000002],ebx
    181b:	30 08                	xor    BYTE PTR [eax],cl
    181d:	00 00                	add    BYTE PTR [eax],al
    181f:	01 11                	add    DWORD PTR [ecx],edx
    1821:	4f                   	dec    edi
    1822:	00 00                	add    BYTE PTR [eax],al
    1824:	00 02                	add    BYTE PTR [edx],al
    1826:	91                   	xchg   ecx,eax
    1827:	00 0d d7 08 00 00    	add    BYTE PTR ds:0x8d7,cl
    182d:	01 11                	add    DWORD PTR [ecx],edx
    182f:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1834:	91                   	xchg   ecx,eax
    1835:	04 0d                	add    al,0xd
    1837:	de 08                	fimul  WORD PTR [eax]
    1839:	00 00                	add    BYTE PTR [eax],al
    183b:	01 11                	add    DWORD PTR [ecx],edx
    183d:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1842:	91                   	xchg   ecx,eax
    1843:	08 0d e5 08 00 00    	or     BYTE PTR ds:0x8e5,cl
    1849:	01 11                	add    DWORD PTR [ecx],edx
    184b:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1850:	91                   	xchg   ecx,eax
    1851:	0c 0d                	or     al,0xd
    1853:	ec                   	in     al,dx
    1854:	08 00                	or     BYTE PTR [eax],al
    1856:	00 01                	add    BYTE PTR [ecx],al
    1858:	11 a1 00 00 00 02    	adc    DWORD PTR [ecx+0x2000000],esp
    185e:	91                   	xchg   ecx,eax
    185f:	10 0e                	adc    BYTE PTR [esi],cl
    1861:	f4                   	hlt    
    1862:	04 00                	add    al,0x0
    1864:	00 01                	add    BYTE PTR [ecx],al
    1866:	13 4f 00             	adc    ecx,DWORD PTR [edi+0x0]
    1869:	00 00                	add    BYTE PTR [eax],al
    186b:	02 91 6c 00 0c 6e    	add    dl,BYTE PTR [ecx+0x6e0c006c]
    1871:	08 00                	or     BYTE PTR [eax],al
    1873:	00 01                	add    BYTE PTR [ecx],al
    1875:	18 4f 00             	sbb    BYTE PTR [edi+0x0],cl
    1878:	00 00                	add    BYTE PTR [eax],al
    187a:	62 13                	bound  edx,QWORD PTR [ebx]
    187c:	00 9f 3c 00 00 00    	add    BYTE PTR [edi+0x3c],bl
    1882:	01 9c aa 02 00 00 0d 	add    DWORD PTR [edx+ebp*4+0xd000002],ebx
    1889:	30 08                	xor    BYTE PTR [eax],cl
    188b:	00 00                	add    BYTE PTR [eax],al
    188d:	01 18                	add    DWORD PTR [eax],ebx
    188f:	4f                   	dec    edi
    1890:	00 00                	add    BYTE PTR [eax],al
    1892:	00 02                	add    BYTE PTR [edx],al
    1894:	91                   	xchg   ecx,eax
    1895:	00 0d d7 08 00 00    	add    BYTE PTR ds:0x8d7,cl
    189b:	01 18                	add    DWORD PTR [eax],ebx
    189d:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    18a2:	91                   	xchg   ecx,eax
    18a3:	04 0d                	add    al,0xd
    18a5:	de 08                	fimul  WORD PTR [eax]
    18a7:	00 00                	add    BYTE PTR [eax],al
    18a9:	01 18                	add    DWORD PTR [eax],ebx
    18ab:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    18b0:	91                   	xchg   ecx,eax
    18b1:	08 0d e5 08 00 00    	or     BYTE PTR ds:0x8e5,cl
    18b7:	01 18                	add    DWORD PTR [eax],ebx
    18b9:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    18be:	91                   	xchg   ecx,eax
    18bf:	0c 0e                	or     al,0xe
    18c1:	f4                   	hlt    
    18c2:	04 00                	add    al,0x0
    18c4:	00 01                	add    BYTE PTR [ecx],al
    18c6:	1a 4f 00             	sbb    cl,BYTE PTR [edi+0x0]
    18c9:	00 00                	add    BYTE PTR [eax],al
    18cb:	02 91 6c 00 0c 62    	add    dl,BYTE PTR [ecx+0x620c006c]
    18d1:	08 00                	or     BYTE PTR [eax],al
    18d3:	00 01                	add    BYTE PTR [ecx],al
    18d5:	1f                   	pop    ds
    18d6:	4f                   	dec    edi
    18d7:	00 00                	add    BYTE PTR [eax],al
    18d9:	00 9e 13 00 9f 3e    	add    BYTE PTR [esi+0x3e9f0013],bl
    18df:	00 00                	add    BYTE PTR [eax],al
    18e1:	00 01                	add    BYTE PTR [ecx],al
    18e3:	9c                   	pushf  
    18e4:	fc                   	cld    
    18e5:	02 00                	add    al,BYTE PTR [eax]
    18e7:	00 0d 30 08 00 00    	add    BYTE PTR ds:0x830,cl
    18ed:	01 1f                	add    DWORD PTR [edi],ebx
    18ef:	4f                   	dec    edi
    18f0:	00 00                	add    BYTE PTR [eax],al
    18f2:	00 02                	add    BYTE PTR [edx],al
    18f4:	91                   	xchg   ecx,eax
    18f5:	00 0d d7 08 00 00    	add    BYTE PTR ds:0x8d7,cl
    18fb:	01 1f                	add    DWORD PTR [edi],ebx
    18fd:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1902:	91                   	xchg   ecx,eax
    1903:	04 0d                	add    al,0xd
    1905:	de 08                	fimul  WORD PTR [eax]
    1907:	00 00                	add    BYTE PTR [eax],al
    1909:	01 1f                	add    DWORD PTR [edi],ebx
    190b:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1910:	91                   	xchg   ecx,eax
    1911:	08 0e                	or     BYTE PTR [esi],cl
    1913:	f4                   	hlt    
    1914:	04 00                	add    al,0x0
    1916:	00 01                	add    BYTE PTR [ecx],al
    1918:	21 4f 00             	and    DWORD PTR [edi+0x0],ecx
    191b:	00 00                	add    BYTE PTR [eax],al
    191d:	02 91 6c 00 0c 56    	add    dl,BYTE PTR [ecx+0x560c006c]
    1923:	08 00                	or     BYTE PTR [eax],al
    1925:	00 01                	add    BYTE PTR [ecx],al
    1927:	26                   	es
    1928:	4f                   	dec    edi
    1929:	00 00                	add    BYTE PTR [eax],al
    192b:	00 dc                	add    ah,bl
    192d:	13 00                	adc    eax,DWORD PTR [eax]
    192f:	9f                   	lahf   
    1930:	40                   	inc    eax
    1931:	00 00                	add    BYTE PTR [eax],al
    1933:	00 01                	add    BYTE PTR [ecx],al
    1935:	9c                   	pushf  
    1936:	40                   	inc    eax
    1937:	03 00                	add    eax,DWORD PTR [eax]
    1939:	00 0d 30 08 00 00    	add    BYTE PTR ds:0x830,cl
    193f:	01 26                	add    DWORD PTR [esi],esp
    1941:	4f                   	dec    edi
    1942:	00 00                	add    BYTE PTR [eax],al
    1944:	00 02                	add    BYTE PTR [edx],al
    1946:	91                   	xchg   ecx,eax
    1947:	00 0d d7 08 00 00    	add    BYTE PTR ds:0x8d7,cl
    194d:	01 26                	add    DWORD PTR [esi],esp
    194f:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1954:	91                   	xchg   ecx,eax
    1955:	04 0e                	add    al,0xe
    1957:	f4                   	hlt    
    1958:	04 00                	add    al,0x0
    195a:	00 01                	add    BYTE PTR [ecx],al
    195c:	28 4f 00             	sub    BYTE PTR [edi+0x0],cl
    195f:	00 00                	add    BYTE PTR [eax],al
    1961:	02 91 6c 00 0c 6d    	add    dl,BYTE PTR [ecx+0x6d0c006c]
    1967:	09 00                	or     DWORD PTR [eax],eax
    1969:	00 01                	add    BYTE PTR [ecx],al
    196b:	2d 4f 00 00 00       	sub    eax,0x4f
    1970:	1c 14                	sbb    al,0x14
    1972:	00 9f 42 00 00 00    	add    BYTE PTR [edi+0x42],bl
    1978:	01 9c 76 03 00 00 0d 	add    DWORD PTR [esi+esi*2+0xd000003],ebx
    197f:	30 08                	xor    BYTE PTR [eax],cl
    1981:	00 00                	add    BYTE PTR [eax],al
    1983:	01 2d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ebp
    1989:	02 91 00 0e f4 04    	add    dl,BYTE PTR [ecx+0x4f40e00]
    198f:	00 00                	add    BYTE PTR [eax],al
    1991:	01 2f                	add    DWORD PTR [edi],ebp
    1993:	4f                   	dec    edi
    1994:	00 00                	add    BYTE PTR [eax],al
    1996:	00 02                	add    BYTE PTR [edx],al
    1998:	91                   	xchg   ecx,eax
    1999:	6c                   	ins    BYTE PTR es:[edi],dx
    199a:	00 0f                	add    BYTE PTR [edi],cl
    199c:	ce                   	into   
    199d:	07                   	pop    es
    199e:	00 00                	add    BYTE PTR [eax],al
    19a0:	01 34 5e             	add    DWORD PTR [esi+ebx*2],esi
    19a3:	14 00                	adc    al,0x0
    19a5:	9f                   	lahf   
    19a6:	cb                   	retf   
    19a7:	00 00                	add    BYTE PTR [eax],al
    19a9:	00 01                	add    BYTE PTR [ecx],al
    19ab:	9c                   	pushf  
    19ac:	10 8c 09 00 00 01 48 	adc    BYTE PTR [ecx+ecx*1+0x48010000],cl
    19b3:	29 15 00 9f 23 00    	sub    DWORD PTR ds:0x239f00,edx
    19b9:	00 00                	add    BYTE PTR [eax],al
    19bb:	01 9c 11 89 07 00 00 	add    DWORD PTR [ecx+edx*1+0x789],ebx
    19c2:	01 4e 4f             	add    DWORD PTR [esi+0x4f],ecx
    19c5:	00 00                	add    BYTE PTR [eax],al
    19c7:	00 4c 15 00          	add    BYTE PTR [ebp+edx*1+0x0],cl
    19cb:	9f                   	lahf   
    19cc:	59                   	pop    ecx
    19cd:	00 00                	add    BYTE PTR [eax],al
    19cf:	00 01                	add    BYTE PTR [ecx],al
    19d1:	9c                   	pushf  
    19d2:	dd 03                	fld    QWORD PTR [ebx]
    19d4:	00 00                	add    BYTE PTR [eax],al
    19d6:	0d 10 09 00 00       	or     eax,0x910
    19db:	01 4e c3             	add    DWORD PTR [esi-0x3d],ecx
    19de:	01 00                	add    DWORD PTR [eax],eax
    19e0:	00 02                	add    BYTE PTR [edx],al
    19e2:	91                   	xchg   ecx,eax
    19e3:	00 12                	add    BYTE PTR [edx],dl
    19e5:	0e                   	push   cs
    19e6:	e1 09                	loope  19f1 <sysEnter_Vector-0x12e60f>
    19e8:	00 00                	add    BYTE PTR [eax],al
    19ea:	01 50 96             	add    DWORD PTR [eax-0x6a],edx
    19ed:	00 00                	add    BYTE PTR [eax],al
    19ef:	00 02                	add    BYTE PTR [edx],al
    19f1:	91                   	xchg   ecx,eax
    19f2:	68 0e da 06 00       	push   0x6da0e
    19f7:	00 01                	add    BYTE PTR [ecx],al
    19f9:	53                   	push   ebx
    19fa:	4f                   	dec    edi
    19fb:	00 00                	add    BYTE PTR [eax],al
    19fd:	00 02                	add    BYTE PTR [edx],al
    19ff:	91                   	xchg   ecx,eax
    1a00:	6c                   	ins    BYTE PTR es:[edi],dx
    1a01:	00 11                	add    BYTE PTR [ecx],dl
    1a03:	08 0e                	or     BYTE PTR [esi],cl
    1a05:	00 00                	add    BYTE PTR [eax],al
    1a07:	01 58 4f             	add    DWORD PTR [eax+0x4f],ebx
    1a0a:	00 00                	add    BYTE PTR [eax],al
    1a0c:	00 a5 15 00 9f 54    	add    BYTE PTR [ebp+0x549f0015],ah
    1a12:	00 00                	add    BYTE PTR [eax],al
    1a14:	00 01                	add    BYTE PTR [ecx],al
    1a16:	9c                   	pushf  
    1a17:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    1a1a:	00 0d 10 09 00 00    	add    BYTE PTR ds:0x910,cl
    1a20:	01 58 c3             	add    DWORD PTR [eax-0x3d],ebx
    1a23:	01 00                	add    DWORD PTR [eax],eax
    1a25:	00 02                	add    BYTE PTR [edx],al
    1a27:	91                   	xchg   ecx,eax
    1a28:	00 12                	add    BYTE PTR [edx],dl
    1a2a:	0e                   	push   cs
    1a2b:	e1 09                	loope  1a36 <sysEnter_Vector-0x12e5ca>
    1a2d:	00 00                	add    BYTE PTR [eax],al
    1a2f:	01 5a 96             	add    DWORD PTR [edx-0x6a],ebx
    1a32:	00 00                	add    BYTE PTR [eax],al
    1a34:	00 02                	add    BYTE PTR [edx],al
    1a36:	91                   	xchg   ecx,eax
    1a37:	68 0e da 06 00       	push   0x6da0e
    1a3c:	00 01                	add    BYTE PTR [ecx],al
    1a3e:	5d                   	pop    ebp
    1a3f:	4f                   	dec    edi
    1a40:	00 00                	add    BYTE PTR [eax],al
    1a42:	00 02                	add    BYTE PTR [edx],al
    1a44:	91                   	xchg   ecx,eax
    1a45:	6c                   	ins    BYTE PTR es:[edi],dx
    1a46:	00 11                	add    BYTE PTR [ecx],dl
    1a48:	24 0e                	and    al,0xe
    1a4a:	00 00                	add    BYTE PTR [eax],al
    1a4c:	01 61 4f             	add    DWORD PTR [ecx+0x4f],esp
    1a4f:	00 00                	add    BYTE PTR [eax],al
    1a51:	00 f9                	add    cl,bh
    1a53:	15 00 9f 54 00       	adc    eax,0x549f00
    1a58:	00 00                	add    BYTE PTR [eax],al
    1a5a:	01 9c 67 04 00 00 0d 	add    DWORD PTR [edi+eiz*2+0xd000004],ebx
    1a61:	10 09                	adc    BYTE PTR [ecx],cl
    1a63:	00 00                	add    BYTE PTR [eax],al
    1a65:	01 61 c3             	add    DWORD PTR [ecx-0x3d],esp
    1a68:	01 00                	add    DWORD PTR [eax],eax
    1a6a:	00 02                	add    BYTE PTR [edx],al
    1a6c:	91                   	xchg   ecx,eax
    1a6d:	00 12                	add    BYTE PTR [edx],dl
    1a6f:	0e                   	push   cs
    1a70:	e1 09                	loope  1a7b <sysEnter_Vector-0x12e585>
    1a72:	00 00                	add    BYTE PTR [eax],al
    1a74:	01 63 96             	add    DWORD PTR [ebx-0x6a],esp
    1a77:	00 00                	add    BYTE PTR [eax],al
    1a79:	00 02                	add    BYTE PTR [edx],al
    1a7b:	91                   	xchg   ecx,eax
    1a7c:	68 0e da 06 00       	push   0x6da0e
    1a81:	00 01                	add    BYTE PTR [ecx],al
    1a83:	66 4f                	dec    di
    1a85:	00 00                	add    BYTE PTR [eax],al
    1a87:	00 02                	add    BYTE PTR [edx],al
    1a89:	91                   	xchg   ecx,eax
    1a8a:	6c                   	ins    BYTE PTR es:[edi],dx
    1a8b:	00 11                	add    BYTE PTR [ecx],dl
    1a8d:	e6 09                	out    0x9,al
    1a8f:	00 00                	add    BYTE PTR [eax],al
    1a91:	01 6a 4f             	add    DWORD PTR [edx+0x4f],ebp
    1a94:	00 00                	add    BYTE PTR [eax],al
    1a96:	00 4d 16             	add    BYTE PTR [ebp+0x16],cl
    1a99:	00 9f 34 00 00 00    	add    BYTE PTR [edi+0x34],bl
    1a9f:	01 9c 9e 04 00 00 0d 	add    DWORD PTR [esi+ebx*4+0xd000004],ebx
    1aa6:	10 09                	adc    BYTE PTR [ecx],cl
    1aa8:	00 00                	add    BYTE PTR [eax],al
    1aaa:	01 6a c3             	add    DWORD PTR [edx-0x3d],ebp
    1aad:	01 00                	add    DWORD PTR [eax],eax
    1aaf:	00 02                	add    BYTE PTR [edx],al
    1ab1:	91                   	xchg   ecx,eax
    1ab2:	00 12                	add    BYTE PTR [edx],dl
    1ab4:	0e                   	push   cs
    1ab5:	e1 09                	loope  1ac0 <sysEnter_Vector-0x12e540>
    1ab7:	00 00                	add    BYTE PTR [eax],al
    1ab9:	01 6c 96 00          	add    DWORD PTR [esi+edx*4+0x0],ebp
    1abd:	00 00                	add    BYTE PTR [eax],al
    1abf:	02 91 74 00 11 f2    	add    dl,BYTE PTR [ecx-0xdeeff8c]
    1ac5:	09 00                	or     DWORD PTR [eax],eax
    1ac7:	00 01                	add    BYTE PTR [ecx],al
    1ac9:	72 4f                	jb     1b1a <sysEnter_Vector-0x12e4e6>
    1acb:	00 00                	add    BYTE PTR [eax],al
    1acd:	00 81 16 00 9f 37    	add    BYTE PTR [ecx+0x379f0016],al
    1ad3:	00 00                	add    BYTE PTR [eax],al
    1ad5:	00 01                	add    BYTE PTR [ecx],al
    1ad7:	9c                   	pushf  
    1ad8:	e3 04                	jecxz  1ade <sysEnter_Vector-0x12e522>
    1ada:	00 00                	add    BYTE PTR [eax],al
    1adc:	0d 1f 08 00 00       	or     eax,0x81f
    1ae1:	01 72 a1             	add    DWORD PTR [edx-0x5f],esi
    1ae4:	00 00                	add    BYTE PTR [eax],al
    1ae6:	00 02                	add    BYTE PTR [edx],al
    1ae8:	91                   	xchg   ecx,eax
    1ae9:	00 0d 10 09 00 00    	add    BYTE PTR ds:0x910,cl
    1aef:	01 72 c3             	add    DWORD PTR [edx-0x3d],esi
    1af2:	01 00                	add    DWORD PTR [eax],eax
    1af4:	00 02                	add    BYTE PTR [edx],al
    1af6:	91                   	xchg   ecx,eax
    1af7:	04 12                	add    al,0x12
    1af9:	0e                   	push   cs
    1afa:	e1 09                	loope  1b05 <sysEnter_Vector-0x12e4fb>
    1afc:	00 00                	add    BYTE PTR [eax],al
    1afe:	01 74 96 00          	add    DWORD PTR [esi+edx*4+0x0],esi
    1b02:	00 00                	add    BYTE PTR [eax],al
    1b04:	02 91 74 00 11 cf    	add    dl,BYTE PTR [ecx-0x30eeff8c]
    1b0a:	08 00                	or     BYTE PTR [eax],al
    1b0c:	00 01                	add    BYTE PTR [ecx],al
    1b0e:	7c 4f                	jl     1b5f <sysEnter_Vector-0x12e4a1>
    1b10:	00 00                	add    BYTE PTR [eax],al
    1b12:	00 b8 16 00 9f 37    	add    BYTE PTR [eax+0x379f0016],bh
    1b18:	00 00                	add    BYTE PTR [eax],al
    1b1a:	00 01                	add    BYTE PTR [ecx],al
    1b1c:	9c                   	pushf  
    1b1d:	28 05 00 00 0d 1f    	sub    BYTE PTR ds:0x1f0d0000,al
    1b23:	08 00                	or     BYTE PTR [eax],al
    1b25:	00 01                	add    BYTE PTR [ecx],al
    1b27:	7c a1                	jl     1aca <sysEnter_Vector-0x12e536>
    1b29:	00 00                	add    BYTE PTR [eax],al
    1b2b:	00 02                	add    BYTE PTR [edx],al
    1b2d:	91                   	xchg   ecx,eax
    1b2e:	00 0d 10 09 00 00    	add    BYTE PTR ds:0x910,cl
    1b34:	01 7c c3 01          	add    DWORD PTR [ebx+eax*8+0x1],edi
    1b38:	00 00                	add    BYTE PTR [eax],al
    1b3a:	02 91 04 12 0e e1    	add    dl,BYTE PTR [ecx-0x1ef1edfc]
    1b40:	09 00                	or     DWORD PTR [eax],eax
    1b42:	00 01                	add    BYTE PTR [ecx],al
    1b44:	7e 96                	jle    1adc <sysEnter_Vector-0x12e524>
    1b46:	00 00                	add    BYTE PTR [eax],al
    1b48:	00 02                	add    BYTE PTR [edx],al
    1b4a:	91                   	xchg   ecx,eax
    1b4b:	74 00                	je     1b4d <sysEnter_Vector-0x12e4b3>
    1b4d:	0c 08                	or     al,0x8
    1b4f:	09 00                	or     DWORD PTR [eax],eax
    1b51:	00 01                	add    BYTE PTR [ecx],al
    1b53:	86 33                	xchg   BYTE PTR [ebx],dh
    1b55:	00 00                	add    BYTE PTR [eax],al
    1b57:	00 ef                	add    bh,ch
    1b59:	16                   	push   ss
    1b5a:	00 9f 88 00 00 00    	add    BYTE PTR [edi+0x88],bl
    1b60:	01 9c 81 05 00 00 0d 	add    DWORD PTR [ecx+eax*4+0xd000005],ebx
    1b67:	86 08                	xchg   BYTE PTR [eax],cl
    1b69:	00 00                	add    BYTE PTR [eax],al
    1b6b:	01 86 33 00 00 00    	add    DWORD PTR [esi+0x33],eax
    1b71:	02 91 00 13 6d 73    	add    dl,BYTE PTR [ecx+0x736d1300]
    1b77:	00 01                	add    BYTE PTR [ecx],al
    1b79:	88 4f 00             	mov    BYTE PTR [edi+0x0],cl
    1b7c:	00 00                	add    BYTE PTR [eax],al
    1b7e:	02 91 6c 14 19 17    	add    dl,BYTE PTR [ecx+0x1719146c]
    1b84:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1b8a:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1b8d:	00 01                	add    BYTE PTR [ecx],al
    1b8f:	89 a1 00 00 00 02    	mov    DWORD PTR [ecx+0x2000000],esp
    1b95:	91                   	xchg   ecx,eax
    1b96:	68 13 63 74 00       	push   0x746313
    1b9b:	01 89 a1 00 00 00    	add    DWORD PTR [ecx+0xa1],ecx
    1ba1:	02 91 64 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000064]
    1ba7:	41                   	inc    ecx
    1ba8:	08 00                	or     BYTE PTR [eax],al
    1baa:	00 01                	add    BYTE PTR [ecx],al
    1bac:	8c 33                	mov    WORD PTR [ebx],?
    1bae:	00 00                	add    BYTE PTR [eax],al
    1bb0:	00 77 17             	add    BYTE PTR [edi+0x17],dh
    1bb3:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1bb9:	01 9c cd 05 00 00 0d 	add    DWORD PTR [ebp+ecx*8+0xd000005],ebx
    1bc0:	2f                   	das    
    1bc1:	09 00                	or     DWORD PTR [eax],eax
    1bc3:	00 01                	add    BYTE PTR [ecx],al
    1bc5:	8c 33                	mov    WORD PTR [ebx],?
    1bc7:	00 00                	add    BYTE PTR [eax],al
    1bc9:	00 02                	add    BYTE PTR [edx],al
    1bcb:	91                   	xchg   ecx,eax
    1bcc:	00 14 89             	add    BYTE PTR [ecx+ecx*4],dl
    1bcf:	17                   	pop    ss
    1bd0:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1bd6:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1bd9:	00 01                	add    BYTE PTR [ecx],al
    1bdb:	8e a1 00 00 00 02    	mov    fs,WORD PTR [ecx+0x2000000]
    1be1:	91                   	xchg   ecx,eax
    1be2:	6c                   	ins    BYTE PTR es:[edi],dx
    1be3:	13 63 74             	adc    esp,DWORD PTR [ebx+0x74]
    1be6:	00 01                	add    BYTE PTR [ecx],al
    1be8:	8e a1 00 00 00 02    	mov    fs,WORD PTR [ecx+0x2000000]
    1bee:	91                   	xchg   ecx,eax
    1bef:	68 00 00 0c a4       	push   0xa40c0000
    1bf4:	07                   	pop    es
    1bf5:	00 00                	add    BYTE PTR [eax],al
    1bf7:	01 91 33 00 00 00    	add    DWORD PTR [ecx+0x33],edx
    1bfd:	e7 17                	out    0x17,eax
    1bff:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
    1c05:	01 9c 19 06 00 00 0d 	add    DWORD PTR [ecx+ebx*1+0xd000006],ebx
    1c0c:	bc 09 00 00 01       	mov    esp,0x1000009
    1c11:	91                   	xchg   ecx,eax
    1c12:	33 00                	xor    eax,DWORD PTR [eax]
    1c14:	00 00                	add    BYTE PTR [eax],al
    1c16:	02 91 00 14 f9 17    	add    dl,BYTE PTR [ecx+0x17f91400]
    1c1c:	00 9f 57 00 00 00    	add    BYTE PTR [edi+0x57],bl
    1c22:	13 73 32             	adc    esi,DWORD PTR [ebx+0x32]
    1c25:	00 01                	add    BYTE PTR [ecx],al
    1c27:	93                   	xchg   ebx,eax
    1c28:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1c2d:	91                   	xchg   ecx,eax
    1c2e:	6c                   	ins    BYTE PTR es:[edi],dx
    1c2f:	13 63 74             	adc    esp,DWORD PTR [ebx+0x74]
    1c32:	00 01                	add    BYTE PTR [ecx],al
    1c34:	93                   	xchg   ebx,eax
    1c35:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1c3a:	91                   	xchg   ecx,eax
    1c3b:	68 00 00 0f ed       	push   0xed0f0000
    1c40:	09 00                	or     DWORD PTR [eax],eax
    1c42:	00 01                	add    BYTE PTR [ecx],al
    1c44:	97                   	xchg   edi,eax
    1c45:	57                   	push   edi
    1c46:	18 00                	sbb    BYTE PTR [eax],al
    1c48:	9f                   	lahf   
    1c49:	1d 00 00 00 01       	sbb    eax,0x1000000
    1c4e:	9c                   	pushf  
    1c4f:	15 d4 09 00 00       	adc    eax,0x9d4
    1c54:	01 9c 74 18 00 9f 29 	add    DWORD PTR [esp+esi*2+0x299f0018],ebx
    1c5b:	00 00                	add    BYTE PTR [eax],al
    1c5d:	00 01                	add    BYTE PTR [ecx],al
    1c5f:	9c                   	pushf  
    1c60:	6a 06                	push   0x6
    1c62:	00 00                	add    BYTE PTR [eax],al
    1c64:	0d 23 09 00 00       	or     eax,0x923
    1c69:	01 9c 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebx
    1c70:	91                   	xchg   ecx,eax
    1c71:	00 0d b1 09 00 00    	add    BYTE PTR ds:0x9b1,cl
    1c77:	01 9c 72 00 00 00 02 	add    DWORD PTR [edx+esi*2+0x2000000],ebx
    1c7e:	91                   	xchg   ecx,eax
    1c7f:	04 0d                	add    al,0xd
    1c81:	9c                   	pushf  
    1c82:	07                   	pop    es
    1c83:	00 00                	add    BYTE PTR [eax],al
    1c85:	01 9c 4f 00 00 00 02 	add    DWORD PTR [edi+ecx*2+0x2000000],ebx
    1c8c:	91                   	xchg   ecx,eax
    1c8d:	08 00                	or     BYTE PTR [eax],al
    1c8f:	16                   	push   ss
    1c90:	f6 07 00             	test   BYTE PTR [edi],0x0
    1c93:	00 01                	add    BYTE PTR [ecx],al
    1c95:	a1 4f 00 00 00       	mov    eax,ds:0x4f
    1c9a:	9d                   	popf   
    1c9b:	18 00                	sbb    BYTE PTR [eax],al
    1c9d:	9f                   	lahf   
    1c9e:	23 00                	and    eax,DWORD PTR [eax]
    1ca0:	00 00                	add    BYTE PTR [eax],al
    1ca2:	01 9c 92 06 00 00 0e 	add    DWORD PTR [edx+edx*4+0xe000006],ebx
    1ca9:	f4                   	hlt    
    1caa:	04 00                	add    al,0x0
    1cac:	00 01                	add    BYTE PTR [ecx],al
    1cae:	a3 a1 00 00 00       	mov    ds:0xa1,eax
    1cb3:	02 91 74 00 11 2a    	add    dl,BYTE PTR [ecx+0x2a110074]
    1cb9:	09 00                	or     DWORD PTR [eax],eax
    1cbb:	00 01                	add    BYTE PTR [ecx],al
    1cbd:	aa                   	stos   BYTE PTR es:[edi],al
    1cbe:	4f                   	dec    edi
    1cbf:	00 00                	add    BYTE PTR [eax],al
    1cc1:	00 c0                	add    al,al
    1cc3:	18 00                	sbb    BYTE PTR [eax],al
    1cc5:	9f                   	lahf   
    1cc6:	4c                   	dec    esp
    1cc7:	00 00                	add    BYTE PTR [eax],al
    1cc9:	00 01                	add    BYTE PTR [ecx],al
    1ccb:	9c                   	pushf  
    1ccc:	e4 06                	in     al,0x6
    1cce:	00 00                	add    BYTE PTR [eax],al
    1cd0:	0d 1c 05 00 00       	or     eax,0x51c
    1cd5:	01 aa 74 00 00 00    	add    DWORD PTR [edx+0x74],ebp
    1cdb:	02 91 00 0d 60 09    	add    dl,BYTE PTR [ecx+0x9600d00]
    1ce1:	00 00                	add    BYTE PTR [eax],al
    1ce3:	01 aa 4f 00 00 00    	add    DWORD PTR [edx+0x4f],ebp
    1ce9:	02 91 04 0d 99 09    	add    dl,BYTE PTR [ecx+0x9990d04]
    1cef:	00 00                	add    BYTE PTR [eax],al
    1cf1:	01 aa e4 06 00 00    	add    DWORD PTR [edx+0x6e4],ebp
    1cf7:	02 91 08 13 70 69    	add    dl,BYTE PTR [ecx+0x69701308]
    1cfd:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1d00:	ac                   	lods   al,BYTE PTR ds:[esi]
    1d01:	4f                   	dec    edi
    1d02:	00 00                	add    BYTE PTR [eax],al
    1d04:	00 02                	add    BYTE PTR [edx],al
    1d06:	91                   	xchg   ecx,eax
    1d07:	74 00                	je     1d09 <sysEnter_Vector-0x12e2f7>
    1d09:	05 04 74 00 00       	add    eax,0x7404
    1d0e:	00 11                	add    BYTE PTR [ecx],dl
    1d10:	2a 08                	sub    cl,BYTE PTR [eax]
    1d12:	00 00                	add    BYTE PTR [eax],al
    1d14:	01 b2 4f 00 00 00    	add    DWORD PTR [edx+0x4f],esi
    1d1a:	0c 19                	or     al,0x19
    1d1c:	00 9f f4 01 00 00    	add    BYTE PTR [edi+0x1f4],bl
    1d22:	01 9c 8c 07 00 00 0d 	add    DWORD PTR [esp+ecx*4+0xd000007],ebx
    1d29:	1c 05                	sbb    al,0x5
    1d2b:	00 00                	add    BYTE PTR [eax],al
    1d2d:	01 b2 74 00 00 00    	add    DWORD PTR [edx+0x74],esi
    1d33:	02 91 00 13 70 69    	add    dl,BYTE PTR [ecx+0x69701300]
    1d39:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1d3c:	b4 4f                	mov    ah,0x4f
    1d3e:	00 00                	add    BYTE PTR [eax],al
    1d40:	00 02                	add    BYTE PTR [edx],al
    1d42:	91                   	xchg   ecx,eax
    1d43:	58                   	pop    eax
    1d44:	0e                   	push   cs
    1d45:	60                   	pusha  
    1d46:	09 00                	or     DWORD PTR [eax],eax
    1d48:	00 01                	add    BYTE PTR [ecx],al
    1d4a:	b4 4f                	mov    ah,0x4f
    1d4c:	00 00                	add    BYTE PTR [eax],al
    1d4e:	00 02                	add    BYTE PTR [edx],al
    1d50:	91                   	xchg   ecx,eax
    1d51:	6c                   	ins    BYTE PTR es:[edi],dx
    1d52:	0e                   	push   cs
    1d53:	99                   	cdq    
    1d54:	09 00                	or     DWORD PTR [eax],eax
    1d56:	00 01                	add    BYTE PTR [ecx],al
    1d58:	b5 e4                	mov    ch,0xe4
    1d5a:	06                   	push   es
    1d5b:	00 00                	add    BYTE PTR [eax],al
    1d5d:	02 91 50 0e fb 07    	add    dl,BYTE PTR [ecx+0x7fb0e50]
    1d63:	00 00                	add    BYTE PTR [eax],al
    1d65:	01 b6 74 00 00 00    	add    DWORD PTR [esi+0x74],esi
    1d6b:	02 91 68 0e 8f 07    	add    dl,BYTE PTR [ecx+0x78f0e68]
    1d71:	00 00                	add    BYTE PTR [eax],al
    1d73:	01 b6 74 00 00 00    	add    DWORD PTR [esi+0x74],esi
    1d79:	02 91 64 0e fa 08    	add    dl,BYTE PTR [ecx+0x8fa0e64]
    1d7f:	00 00                	add    BYTE PTR [eax],al
    1d81:	01 b7 74 00 00 00    	add    DWORD PTR [edi+0x74],esi
    1d87:	02 91 54 0e b8 07    	add    dl,BYTE PTR [ecx+0x7b80e54]
    1d8d:	00 00                	add    BYTE PTR [eax],al
    1d8f:	01 c8                	add    eax,ecx
    1d91:	4f                   	dec    edi
    1d92:	00 00                	add    BYTE PTR [eax],al
    1d94:	00 02                	add    BYTE PTR [edx],al
    1d96:	91                   	xchg   ecx,eax
    1d97:	60                   	pusha  
    1d98:	14 e2                	adc    al,0xe2
    1d9a:	19 00                	sbb    DWORD PTR [eax],eax
    1d9c:	9f                   	lahf   
    1d9d:	e0 00                	loopne 1d9f <sysEnter_Vector-0x12e261>
    1d9f:	00 00                	add    BYTE PTR [eax],al
    1da1:	13 63 6e             	adc    esp,DWORD PTR [ebx+0x6e]
    1da4:	74 00                	je     1da6 <sysEnter_Vector-0x12e25a>
    1da6:	01 ca                	add    edx,ecx
    1da8:	4f                   	dec    edi
    1da9:	00 00                	add    BYTE PTR [eax],al
    1dab:	00 02                	add    BYTE PTR [edx],al
    1dad:	91                   	xchg   ecx,eax
    1dae:	5c                   	pop    esp
    1daf:	00 00                	add    BYTE PTR [eax],al
    1db1:	11 02                	adc    DWORD PTR [edx],eax
    1db3:	09 00                	or     DWORD PTR [eax],eax
    1db5:	00 01                	add    BYTE PTR [ecx],al
    1db7:	e0 4f                	loopne 1e08 <sysEnter_Vector-0x12e1f8>
    1db9:	00 00                	add    BYTE PTR [eax],al
    1dbb:	00 00                	add    BYTE PTR [eax],al
    1dbd:	1b 00                	sbb    eax,DWORD PTR [eax]
    1dbf:	9f                   	lahf   
    1dc0:	4f                   	dec    edi
    1dc1:	00 00                	add    BYTE PTR [eax],al
    1dc3:	00 01                	add    BYTE PTR [ecx],al
    1dc5:	9c                   	pushf  
    1dc6:	de 07                	fiadd  WORD PTR [edi]
    1dc8:	00 00                	add    BYTE PTR [eax],al
    1dca:	0d 1c 05 00 00       	or     eax,0x51c
    1dcf:	01 e0                	add    eax,esp
    1dd1:	74 00                	je     1dd3 <sysEnter_Vector-0x12e22d>
    1dd3:	00 00                	add    BYTE PTR [eax],al
    1dd5:	02 91 00 0d 60 09    	add    dl,BYTE PTR [ecx+0x9600d00]
    1ddb:	00 00                	add    BYTE PTR [eax],al
    1ddd:	01 e0                	add    eax,esp
    1ddf:	4f                   	dec    edi
    1de0:	00 00                	add    BYTE PTR [eax],al
    1de2:	00 02                	add    BYTE PTR [edx],al
    1de4:	91                   	xchg   ecx,eax
    1de5:	04 0d                	add    al,0xd
    1de7:	99                   	cdq    
    1de8:	09 00                	or     DWORD PTR [eax],eax
    1dea:	00 01                	add    BYTE PTR [ecx],al
    1dec:	e0 e4                	loopne 1dd2 <sysEnter_Vector-0x12e22e>
    1dee:	06                   	push   es
    1def:	00 00                	add    BYTE PTR [eax],al
    1df1:	02 91 08 13 70 69    	add    dl,BYTE PTR [ecx+0x69701308]
    1df7:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1dfa:	e2 4f                	loop   1e4b <sysEnter_Vector-0x12e1b5>
    1dfc:	00 00                	add    BYTE PTR [eax],al
    1dfe:	00 02                	add    BYTE PTR [edx],al
    1e00:	91                   	xchg   ecx,eax
    1e01:	74 00                	je     1e03 <sysEnter_Vector-0x12e1fd>
    1e03:	11 17                	adc    DWORD PTR [edi],edx
    1e05:	08 00                	or     BYTE PTR [eax],al
    1e07:	00 01                	add    BYTE PTR [ecx],al
    1e09:	e8 4f 00 00 00       	call   1e5d <sysEnter_Vector-0x12e1a3>
    1e0e:	4f                   	dec    edi
    1e0f:	1b 00                	sbb    eax,DWORD PTR [eax]
    1e11:	9f                   	lahf   
    1e12:	1c 00                	sbb    al,0x0
    1e14:	00 00                	add    BYTE PTR [eax],al
    1e16:	01 9c 06 08 00 00 17 	add    DWORD PTR [esi+eax*1+0x17000008],ebx
    1e1d:	70 69                	jo     1e88 <sysEnter_Vector-0x12e178>
    1e1f:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1e22:	e8 a1 00 00 00       	call   1ec8 <sysEnter_Vector-0x12e138>
    1e27:	02 91 00 00 15 9e    	add    dl,BYTE PTR [ecx-0x61eb0000]
    1e2d:	09 00                	or     DWORD PTR [eax],eax
    1e2f:	00 01                	add    BYTE PTR [ecx],al
    1e31:	ee                   	out    dx,al
    1e32:	6b 1b 00             	imul   ebx,DWORD PTR [ebx],0x0
    1e35:	9f                   	lahf   
    1e36:	20 00                	and    BYTE PTR [eax],al
    1e38:	00 00                	add    BYTE PTR [eax],al
    1e3a:	01 9c 2a 08 00 00 0d 	add    DWORD PTR [edx+ebp*1+0xd000008],ebx
    1e41:	a3 09 00 00 01       	mov    ds:0x1000009,eax
    1e46:	ee                   	out    dx,al
    1e47:	4f                   	dec    edi
    1e48:	00 00                	add    BYTE PTR [eax],al
    1e4a:	00 02                	add    BYTE PTR [edx],al
    1e4c:	91                   	xchg   ecx,eax
    1e4d:	00 00                	add    BYTE PTR [eax],al
    1e4f:	11 f3                	adc    ebx,esi
    1e51:	08 00                	or     BYTE PTR [eax],al
    1e53:	00 01                	add    BYTE PTR [ecx],al
    1e55:	f3 74 00             	repz je 1e58 <sysEnter_Vector-0x12e1a8>
    1e58:	00 00                	add    BYTE PTR [eax],al
    1e5a:	8b 1b                	mov    ebx,DWORD PTR [ebx]
    1e5c:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    1e62:	01 9c 60 08 00 00 17 	add    DWORD PTR [eax+eiz*2+0x17000008],ebx
    1e69:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    1e6c:	00 01                	add    BYTE PTR [ecx],al
    1e6e:	f3 74 00             	repz je 1e71 <sysEnter_Vector-0x12e18f>
    1e71:	00 00                	add    BYTE PTR [eax],al
    1e73:	02 91 00 0d da 06    	add    dl,BYTE PTR [ecx+0x6da0d00]
    1e79:	00 00                	add    BYTE PTR [eax],al
    1e7b:	01 f3                	add    ebx,esi
    1e7d:	b7 00                	mov    bh,0x0
    1e7f:	00 00                	add    BYTE PTR [eax],al
    1e81:	02 91 04 00 0c 79    	add    dl,BYTE PTR [ecx+0x790c0004]
    1e87:	09 00                	or     DWORD PTR [eax],eax
    1e89:	00 01                	add    BYTE PTR [ecx],al
    1e8b:	f8                   	clc    
    1e8c:	b7 00                	mov    bh,0x0
    1e8e:	00 00                	add    BYTE PTR [eax],al
    1e90:	ab                   	stos   DWORD PTR es:[edi],eax
    1e91:	1b 00                	sbb    eax,DWORD PTR [eax]
    1e93:	9f                   	lahf   
    1e94:	44                   	inc    esp
    1e95:	01 00                	add    DWORD PTR [eax],eax
    1e97:	00 01                	add    BYTE PTR [ecx],al
    1e99:	9c                   	pushf  
    1e9a:	3f                   	aas    
    1e9b:	09 00                	or     DWORD PTR [eax],eax
    1e9d:	00 0d 98 06 00 00    	add    BYTE PTR ds:0x698,cl
    1ea3:	01 f8                	add    eax,edi
    1ea5:	74 00                	je     1ea7 <sysEnter_Vector-0x12e159>
    1ea7:	00 00                	add    BYTE PTR [eax],al
    1ea9:	02 91 00 0d 99 09    	add    dl,BYTE PTR [ecx+0x9990d00]
    1eaf:	00 00                	add    BYTE PTR [eax],al
    1eb1:	01 f8                	add    eax,edi
    1eb3:	e4 06                	in     al,0x6
    1eb5:	00 00                	add    BYTE PTR [eax],al
    1eb7:	02 91 04 0d 93 08    	add    dl,BYTE PTR [ecx+0x8930d04]
    1ebd:	00 00                	add    BYTE PTR [eax],al
    1ebf:	01 f8                	add    eax,edi
    1ec1:	b7 00                	mov    bh,0x0
    1ec3:	00 00                	add    BYTE PTR [eax],al
    1ec5:	02 91 08 13 70 00    	add    dl,BYTE PTR [ecx+0x701308]
    1ecb:	01 fa                	add    edx,edi
    1ecd:	74 00                	je     1ecf <sysEnter_Vector-0x12e131>
    1ecf:	00 00                	add    BYTE PTR [eax],al
    1ed1:	02 91 74 0e c0 07    	add    dl,BYTE PTR [ecx+0x7c00e74]
    1ed7:	00 00                	add    BYTE PTR [eax],al
    1ed9:	01 fa                	add    edx,edi
    1edb:	74 00                	je     1edd <sysEnter_Vector-0x12e123>
    1edd:	00 00                	add    BYTE PTR [eax],al
    1edf:	02 91 70 13 63 00    	add    dl,BYTE PTR [ecx+0x631370]
    1ee5:	01 fb                	add    ebx,edi
    1ee7:	4f                   	dec    edi
    1ee8:	00 00                	add    BYTE PTR [eax],al
    1eea:	00 02                	add    BYTE PTR [edx],al
    1eec:	91                   	xchg   ecx,eax
    1eed:	64 08 3e             	or     BYTE PTR fs:[esi],bh
    1ef0:	09 00                	or     DWORD PTR [eax],eax
    1ef2:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    1ef5:	00 00                	add    BYTE PTR [eax],al
    1ef7:	00 01                	add    BYTE PTR [ecx],al
    1ef9:	fc                   	cld    
    1efa:	ec                   	in     al,dx
    1efb:	08 00                	or     BYTE PTR [eax],al
    1efd:	00 09                	add    BYTE PTR [ecx],cl
    1eff:	39 09                	cmp    DWORD PTR [ecx],ecx
    1f01:	00 00                	add    BYTE PTR [eax],al
    1f03:	00 09                	add    BYTE PTR [ecx],cl
    1f05:	8b 08                	mov    ecx,DWORD PTR [eax]
    1f07:	00 00                	add    BYTE PTR [eax],al
    1f09:	01 09                	add    DWORD PTR [ecx],ecx
    1f0b:	45                   	inc    ebp
    1f0c:	09 00                	or     DWORD PTR [eax],eax
    1f0e:	00 02                	add    BYTE PTR [edx],al
    1f10:	00 0e                	add    BYTE PTR [esi],cl
    1f12:	d8 07                	fadd   DWORD PTR [edi]
    1f14:	00 00                	add    BYTE PTR [eax],al
    1f16:	01 fc                	add    esp,edi
    1f18:	c9                   	leave  
    1f19:	08 00                	or     BYTE PTR [eax],al
    1f1b:	00 02                	add    BYTE PTR [edx],al
    1f1d:	91                   	xchg   ecx,eax
    1f1e:	6c                   	ins    BYTE PTR es:[edi],dx
    1f1f:	0e                   	push   cs
    1f20:	60                   	pusha  
    1f21:	09 00                	or     DWORD PTR [eax],eax
    1f23:	00 01                	add    BYTE PTR [ecx],al
    1f25:	fd                   	std    
    1f26:	b7 00                	mov    bh,0x0
    1f28:	00 00                	add    BYTE PTR [eax],al
    1f2a:	02 91 68 18 f7 1b    	add    dl,BYTE PTR [ecx+0x1bf71868]
    1f30:	00 9f 0e 00 00 00    	add    BYTE PTR [edi+0xe],bl
    1f36:	25 09 00 00 19       	and    eax,0x19000009
    1f3b:	b3 08                	mov    bl,0x8
    1f3d:	00 00                	add    BYTE PTR [eax],al
    1f3f:	01 03                	add    DWORD PTR [ebx],eax
    1f41:	01 ce                	add    esi,ecx
    1f43:	01 00                	add    DWORD PTR [eax],eax
    1f45:	00 02                	add    BYTE PTR [edx],al
    1f47:	91                   	xchg   ecx,eax
    1f48:	63 00                	arpl   WORD PTR [eax],ax
    1f4a:	14 66                	adc    al,0x66
    1f4c:	1c 00                	sbb    al,0x0
    1f4e:	9f                   	lahf   
    1f4f:	0e                   	push   cs
    1f50:	00 00                	add    BYTE PTR [eax],al
    1f52:	00 19                	add    BYTE PTR [ecx],bl
    1f54:	b3 08                	mov    bl,0x8
    1f56:	00 00                	add    BYTE PTR [eax],al
    1f58:	01 19                	add    DWORD PTR [ecx],ebx
    1f5a:	01 ce                	add    esi,ecx
    1f5c:	01 00                	add    DWORD PTR [eax],eax
    1f5e:	00 02                	add    BYTE PTR [edx],al
    1f60:	91                   	xchg   ecx,eax
    1f61:	62 00                	bound  eax,QWORD PTR [eax]
    1f63:	00 1a                	add    BYTE PTR [edx],bl
    1f65:	f0 07                	lock pop es
    1f67:	00 00                	add    BYTE PTR [eax],al
    1f69:	01 28                	add    DWORD PTR [eax],ebp
    1f6b:	01 b7 00 00 00 ef    	add    DWORD PTR [edi-0x11000000],esi
    1f71:	1c 00                	sbb    al,0x0
    1f73:	9f                   	lahf   
    1f74:	20 00                	and    BYTE PTR [eax],al
    1f76:	00 00                	add    BYTE PTR [eax],al
    1f78:	01 9c 87 09 00 00 1b 	add    DWORD PTR [edi+eax*4+0x1b000009],ebx
    1f7f:	98                   	cwde   
    1f80:	06                   	push   es
    1f81:	00 00                	add    BYTE PTR [eax],al
    1f83:	01 28                	add    DWORD PTR [eax],ebp
    1f85:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    1f89:	00 02                	add    BYTE PTR [edx],al
    1f8b:	91                   	xchg   ecx,eax
    1f8c:	00 1b                	add    BYTE PTR [ebx],bl
    1f8e:	99                   	cdq    
    1f8f:	09 00                	or     DWORD PTR [eax],eax
    1f91:	00 01                	add    BYTE PTR [ecx],al
    1f93:	28 01                	sub    BYTE PTR [ecx],al
    1f95:	e4 06                	in     al,0x6
    1f97:	00 00                	add    BYTE PTR [eax],al
    1f99:	02 91 04 1b 93 08    	add    dl,BYTE PTR [ecx+0x8931b04]
    1f9f:	00 00                	add    BYTE PTR [eax],al
    1fa1:	01 28                	add    DWORD PTR [eax],ebp
    1fa3:	01 b7 00 00 00 02    	add    DWORD PTR [edi+0x2000000],esi
    1fa9:	91                   	xchg   ecx,eax
    1faa:	08 00                	or     BYTE PTR [eax],al
    1fac:	1a 47 08             	sbb    al,BYTE PTR [edi+0x8]
    1faf:	00 00                	add    BYTE PTR [eax],al
    1fb1:	01 2d 01 e4 06 00    	add    DWORD PTR ds:0x6e401,ebp
    1fb7:	00 0f                	add    BYTE PTR [edi],cl
    1fb9:	1d 00 9f fd 02       	sbb    eax,0x2fd9f00
    1fbe:	00 00                	add    BYTE PTR [eax],al
    1fc0:	01 9c 76 0a 00 00 1b 	add    DWORD PTR [esi+esi*2+0x1b00000a],ebx
    1fc7:	65 09 00             	or     DWORD PTR gs:[eax],eax
    1fca:	00 01                	add    BYTE PTR [ecx],al
    1fcc:	2d 01 c3 01 00       	sub    eax,0x1c301
    1fd1:	00 02                	add    BYTE PTR [edx],al
    1fd3:	91                   	xchg   ecx,eax
    1fd4:	00 1b                	add    BYTE PTR [ebx],bl
    1fd6:	60                   	pusha  
    1fd7:	09 00                	or     DWORD PTR [eax],eax
    1fd9:	00 01                	add    BYTE PTR [ecx],al
    1fdb:	2d 01 76 0a 00       	sub    eax,0xa7601
    1fe0:	00 02                	add    BYTE PTR [edx],al
    1fe2:	91                   	xchg   ecx,eax
    1fe3:	04 19                	add    al,0x19
    1fe5:	99                   	cdq    
    1fe6:	09 00                	or     DWORD PTR [eax],eax
    1fe8:	00 01                	add    BYTE PTR [ecx],al
    1fea:	2f                   	das    
    1feb:	01 e4                	add    esp,esp
    1fed:	06                   	push   es
    1fee:	00 00                	add    BYTE PTR [eax],al
    1ff0:	02 91 54 1c 63 6d    	add    dl,BYTE PTR [ecx+0x6d631c54]
    1ff6:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1ff9:	30 01                	xor    BYTE PTR [ecx],al
    1ffb:	7c 0a                	jl     2007 <sysEnter_Vector-0x12dff9>
    1ffd:	00 00                	add    BYTE PTR [eax],al
    1fff:	03 91 d0 77 19 fb    	add    edx,DWORD PTR [ecx-0x4e68830]
    2005:	07                   	pop    es
    2006:	00 00                	add    BYTE PTR [eax],al
    2008:	01 31                	add    DWORD PTR [ecx],esi
    200a:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    200e:	00 02                	add    BYTE PTR [edx],al
    2010:	91                   	xchg   ecx,eax
    2011:	6c                   	ins    BYTE PTR es:[edi],dx
    2012:	19 8f 07 00 00 01    	sbb    DWORD PTR [edi+0x1000007],ecx
    2018:	31 01                	xor    DWORD PTR [ecx],eax
    201a:	74 00                	je     201c <sysEnter_Vector-0x12dfe4>
    201c:	00 00                	add    BYTE PTR [eax],al
    201e:	02 91 68 19 af 07    	add    dl,BYTE PTR [ecx+0x7af1968]
    2024:	00 00                	add    BYTE PTR [eax],al
    2026:	01 31                	add    DWORD PTR [ecx],esi
    2028:	01 74 00 00          	add    DWORD PTR [eax+eax*1+0x0],esi
    202c:	00 02                	add    BYTE PTR [edx],al
    202e:	91                   	xchg   ecx,eax
    202f:	5c                   	pop    esp
    2030:	19 38                	sbb    DWORD PTR [eax],edi
    2032:	08 00                	or     BYTE PTR [eax],al
    2034:	00 01                	add    BYTE PTR [ecx],al
    2036:	32 01                	xor    al,BYTE PTR [ecx]
    2038:	8d 0a                	lea    ecx,[edx]
    203a:	00 00                	add    BYTE PTR [eax],al
    203c:	03 91 ce 77 19 b8    	add    edx,DWORD PTR [ecx-0x47e68832]
    2042:	07                   	pop    es
    2043:	00 00                	add    BYTE PTR [eax],al
    2045:	01 4b 01             	add    DWORD PTR [ebx+0x1],ecx
    2048:	4f                   	dec    edi
    2049:	00 00                	add    BYTE PTR [eax],al
    204b:	00 02                	add    BYTE PTR [edx],al
    204d:	91                   	xchg   ecx,eax
    204e:	64                   	fs
    204f:	18 c6                	sbb    dh,al
    2051:	1d 00 9f 40 00       	sbb    eax,0x409f00
    2056:	00 00                	add    BYTE PTR [eax],al
    2058:	47                   	inc    edi
    2059:	0a 00                	or     al,BYTE PTR [eax]
    205b:	00 19                	add    BYTE PTR [ecx],bl
    205d:	04 08                	add    al,0x8
    205f:	00 00                	add    BYTE PTR [eax],al
    2061:	01 3d 01 74 00 00    	add    DWORD PTR ds:0x7401,edi
    2067:	00 02                	add    BYTE PTR [edx],al
    2069:	91                   	xchg   ecx,eax
    206a:	58                   	pop    eax
    206b:	00 14 76             	add    BYTE PTR [esi+esi*2],dl
    206e:	1e                   	push   ds
    206f:	00 9f 8c 01 00 00    	add    BYTE PTR [edi+0x18c],bl
    2075:	1c 63                	sbb    al,0x63
    2077:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2078:	74 00                	je     207a <sysEnter_Vector-0x12df86>
    207a:	01 4d 01             	add    DWORD PTR [ebp+0x1],ecx
    207d:	4f                   	dec    edi
    207e:	00 00                	add    BYTE PTR [eax],al
    2080:	00 02                	add    BYTE PTR [edx],al
    2082:	91                   	xchg   ecx,eax
    2083:	60                   	pusha  
    2084:	1d 00 00 00 00       	sbb    eax,0x0
    2089:	19 04 08             	sbb    DWORD PTR [eax+ecx*1],eax
    208c:	00 00                	add    BYTE PTR [eax],al
    208e:	01 53 01             	add    DWORD PTR [ebx+0x1],edx
    2091:	74 00                	je     2093 <sysEnter_Vector-0x12df6d>
    2093:	00 00                	add    BYTE PTR [eax],al
    2095:	02 91 50 00 00 00    	add    dl,BYTE PTR [ecx+0x50]
    209b:	05 04 4f 00 00       	add    eax,0x4f04
    20a0:	00 1e                	add    BYTE PTR [esi],bl
    20a2:	7a 00                	jp     20a4 <sysEnter_Vector-0x12df5c>
    20a4:	00 00                	add    BYTE PTR [eax],al
    20a6:	8d 0a                	lea    ecx,[edx]
    20a8:	00 00                	add    BYTE PTR [eax],al
    20aa:	1f                   	pop    ds
    20ab:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    20ae:	00 ff                	add    bh,bh
    20b0:	03 00                	add    eax,DWORD PTR [eax]
    20b2:	1e                   	push   ds
    20b3:	7a 00                	jp     20b5 <sysEnter_Vector-0x12df4b>
    20b5:	00 00                	add    BYTE PTR [eax],al
    20b7:	9d                   	popf   
    20b8:	0a 00                	or     al,BYTE PTR [eax]
    20ba:	00 20                	add    BYTE PTR [eax],ah
    20bc:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    20bf:	00 01                	add    BYTE PTR [ecx],al
    20c1:	00 1a                	add    BYTE PTR [edx],bl
    20c3:	09 08                	or     DWORD PTR [eax],ecx
    20c5:	00 00                	add    BYTE PTR [eax],al
    20c7:	01 6b 01             	add    DWORD PTR [ebx+0x1],ebp
    20ca:	e4 06                	in     al,0x6
    20cc:	00 00                	add    BYTE PTR [eax],al
    20ce:	0c 20                	or     al,0x20
    20d0:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    20d6:	01 9c d6 0a 00 00 1b 	add    DWORD PTR [esi+edx*8+0x1b00000a],ebx
    20dd:	65 09 00             	or     DWORD PTR gs:[eax],eax
    20e0:	00 01                	add    BYTE PTR [ecx],al
    20e2:	6b 01 74             	imul   eax,DWORD PTR [ecx],0x74
    20e5:	00 00                	add    BYTE PTR [eax],al
    20e7:	00 02                	add    BYTE PTR [edx],al
    20e9:	91                   	xchg   ecx,eax
    20ea:	00 1b                	add    BYTE PTR [ebx],bl
    20ec:	60                   	pusha  
    20ed:	09 00                	or     DWORD PTR [eax],eax
    20ef:	00 01                	add    BYTE PTR [ecx],al
    20f1:	6b 01 76             	imul   eax,DWORD PTR [ecx],0x76
    20f4:	0a 00                	or     al,BYTE PTR [eax]
    20f6:	00 02                	add    BYTE PTR [edx],al
    20f8:	91                   	xchg   ecx,eax
    20f9:	04 00                	add    al,0x0
    20fb:	1a aa 09 00 00 01    	sbb    ch,BYTE PTR [edx+0x1000009]
    2101:	70 01                	jo     2104 <sysEnter_Vector-0x12defc>
    2103:	4f                   	dec    edi
    2104:	00 00                	add    BYTE PTR [eax],al
    2106:	00 2f                	add    BYTE PTR [edi],ch
    2108:	20 00                	and    BYTE PTR [eax],al
    210a:	9f                   	lahf   
    210b:	23 00                	and    eax,DWORD PTR [eax]
    210d:	00 00                	add    BYTE PTR [eax],al
    210f:	01 9c 0f 0b 00 00 21 	add    DWORD PTR [edi+ecx*1+0x2100000b],ebx
    2116:	73 74                	jae    218c <sysEnter_Vector-0x12de74>
    2118:	64 00 01             	add    BYTE PTR fs:[ecx],al
    211b:	70 01                	jo     211e <sysEnter_Vector-0x12dee2>
    211d:	4f                   	dec    edi
    211e:	00 00                	add    BYTE PTR [eax],al
    2120:	00 02                	add    BYTE PTR [edx],al
    2122:	91                   	xchg   ecx,eax
    2123:	00 1b                	add    BYTE PTR [ebx],bl
    2125:	ce                   	into   
    2126:	09 00                	or     DWORD PTR [eax],eax
    2128:	00 01                	add    BYTE PTR [ecx],al
    212a:	70 01                	jo     212d <sysEnter_Vector-0x12ded3>
    212c:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    2131:	91                   	xchg   ecx,eax
    2132:	04 00                	add    al,0x0
    2134:	22 c4                	and    al,ah
    2136:	09 00                	or     DWORD PTR [eax],eax
    2138:	00 01                	add    BYTE PTR [ecx],al
    213a:	75 01                	jne    213d <sysEnter_Vector-0x12dec3>
    213c:	52                   	push   edx
    213d:	20 00                	and    BYTE PTR [eax],al
    213f:	9f                   	lahf   
    2140:	1d 00 00 00 01       	sbb    eax,0x1000000
    2145:	9c                   	pushf  
    2146:	1a 80 09 00 00 01    	sbb    al,BYTE PTR [eax+0x1000009]
    214c:	7a 01                	jp     214f <sysEnter_Vector-0x12deb1>
    214e:	4f                   	dec    edi
    214f:	00 00                	add    BYTE PTR [eax],al
    2151:	00 6f 20             	add    BYTE PTR [edi+0x20],ch
    2154:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    215a:	01 9c 69 0b 00 00 1b 	add    DWORD PTR [ecx+ebp*2+0x1b00000b],ebx
    2161:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2162:	08 00                	or     BYTE PTR [eax],al
    2164:	00 01                	add    BYTE PTR [ecx],al
    2166:	7a 01                	jp     2169 <sysEnter_Vector-0x12de97>
    2168:	4f                   	dec    edi
    2169:	00 00                	add    BYTE PTR [eax],al
    216b:	00 02                	add    BYTE PTR [edx],al
    216d:	91                   	xchg   ecx,eax
    216e:	00 21                	add    BYTE PTR [ecx],ah
    2170:	77 68                	ja     21da <sysEnter_Vector-0x12de26>
    2172:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2173:	00 01                	add    BYTE PTR [ecx],al
    2175:	7a 01                	jp     2178 <sysEnter_Vector-0x12de88>
    2177:	4f                   	dec    edi
    2178:	00 00                	add    BYTE PTR [eax],al
    217a:	00 02                	add    BYTE PTR [edx],al
    217c:	91                   	xchg   ecx,eax
    217d:	04 1b                	add    al,0x1b
    217f:	ca 08 00             	retf   0x8
    2182:	00 01                	add    BYTE PTR [ecx],al
    2184:	7a 01                	jp     2187 <sysEnter_Vector-0x12de79>
    2186:	4f                   	dec    edi
    2187:	00 00                	add    BYTE PTR [eax],al
    2189:	00 02                	add    BYTE PTR [edx],al
    218b:	91                   	xchg   ecx,eax
    218c:	08 00                	or     BYTE PTR [eax],al
    218e:	23 78 00             	and    edi,DWORD PTR [eax+0x0]
    2191:	00 00                	add    BYTE PTR [eax],al
    2193:	06                   	push   es
    2194:	33 e4                	xor    esp,esp
    2196:	06                   	push   es
    2197:	00 00                	add    BYTE PTR [eax],al
    2199:	05 03 c0 7d 00       	add    eax,0x7dc003
    219e:	9f                   	lahf   
    219f:	23 10                	and    edx,DWORD PTR [eax]
    21a1:	02 00                	add    al,BYTE PTR [eax]
    21a3:	00 07                	add    BYTE PTR [edi],al
    21a5:	35 8b 0b 00 00       	xor    eax,0xb8b
    21aa:	05 03 d0 7d 00       	add    eax,0x7dd003
    21af:	9f                   	lahf   
    21b0:	05 04 ac 00 00       	add    eax,0xac04
    21b5:	00 23                	add    BYTE PTR [ebx],ah
    21b7:	33 02                	xor    eax,DWORD PTR [edx]
    21b9:	00 00                	add    BYTE PTR [eax],al
    21bb:	07                   	pop    es
    21bc:	36 a1 00 00 00 05    	mov    eax,ss:0x5000000
    21c2:	03 cc                	add    ecx,esp
    21c4:	7d 00                	jge    21c6 <sysEnter_Vector-0x12de3a>
    21c6:	9f                   	lahf   
    21c7:	23 9d 08 00 00 01    	and    ebx,DWORD PTR [ebp+0x1000008]
    21cd:	0d ce 01 00 00       	or     eax,0x1ce
    21d2:	05 03 e4 7d 00       	add    eax,0x7de403
    21d7:	9f                   	lahf   
    21d8:	23 17                	and    edx,DWORD PTR [edi]
    21da:	09 00                	or     DWORD PTR [eax],eax
    21dc:	00 01                	add    BYTE PTR [ecx],al
    21de:	0e                   	push   cs
    21df:	74 00                	je     21e1 <sysEnter_Vector-0x12de1f>
    21e1:	00 00                	add    BYTE PTR [eax],al
    21e3:	05 03 e8 7d 00       	add    eax,0x7de803
    21e8:	9f                   	lahf   
    21e9:	00 94 02 00 00 04 00 	add    BYTE PTR [edx+eax*1+0x40000],dl
    21f0:	bf 08 00 00 04       	mov    edi,0x4000008
    21f5:	01 c3                	add    ebx,eax
    21f7:	00 00                	add    BYTE PTR [eax],al
    21f9:	00 0c 1e             	add    BYTE PTR [esi+ebx*1],cl
    21fc:	0a 00                	or     al,BYTE PTR [eax]
    21fe:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2201:	00 00                	add    BYTE PTR [eax],al
    2203:	90                   	nop
    2204:	20 00                	and    BYTE PTR [eax],al
    2206:	9f                   	lahf   
    2207:	73 00                	jae    2209 <sysEnter_Vector-0x12ddf7>
    2209:	00 00                	add    BYTE PTR [eax],al
    220b:	d0 09                	ror    BYTE PTR [ecx],1
    220d:	00 00                	add    BYTE PTR [eax],al
    220f:	02 01                	add    al,BYTE PTR [ecx]
    2211:	08 3f                	or     BYTE PTR [edi],bh
    2213:	00 00                	add    BYTE PTR [eax],al
    2215:	00 02                	add    BYTE PTR [edx],al
    2217:	02 07                	add    al,BYTE PTR [edi]
    2219:	0e                   	push   cs
    221a:	00 00                	add    BYTE PTR [eax],al
    221c:	00 02                	add    BYTE PTR [edx],al
    221e:	04 07                	add    al,0x7
    2220:	32 00                	xor    al,BYTE PTR [eax]
    2222:	00 00                	add    BYTE PTR [eax],al
    2224:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2227:	2d 00 00 00 02       	sub    eax,0x2000000
    222c:	01 06                	add    DWORD PTR [esi],eax
    222e:	41                   	inc    ecx
    222f:	00 00                	add    BYTE PTR [eax],al
    2231:	00 02                	add    BYTE PTR [edx],al
    2233:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2239:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2240:	02 08                	add    cl,BYTE PTR [eax]
    2242:	05 00 00 00 00       	add    eax,0x0
    2247:	02 08                	add    cl,BYTE PTR [eax]
    2249:	07                   	pop    es
    224a:	28 00                	sub    BYTE PTR [eax],al
    224c:	00 00                	add    BYTE PTR [eax],al
    224e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2255:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2258:	2a 01                	sub    al,BYTE PTR [ecx]
    225a:	00 00                	add    BYTE PTR [eax],al
    225c:	04 04                	add    al,0x4
    225e:	05 04 7a 00 00       	add    eax,0x7a04
    2263:	00 02                	add    BYTE PTR [edx],al
    2265:	01 06                	add    DWORD PTR [esi],eax
    2267:	48                   	dec    eax
    2268:	00 00                	add    BYTE PTR [eax],al
    226a:	00 06                	add    BYTE PTR [esi],al
    226c:	45                   	inc    ebp
    226d:	02 00                	add    al,BYTE PTR [eax]
    226f:	00 02                	add    BYTE PTR [edx],al
    2271:	34 33                	xor    al,0x33
    2273:	00 00                	add    BYTE PTR [eax],al
    2275:	00 06                	add    BYTE PTR [esi],al
    2277:	91                   	xchg   ecx,eax
    2278:	02 00                	add    al,BYTE PTR [eax]
    227a:	00 03                	add    BYTE PTR [ebx],al
    227c:	d8 33                	fdiv   DWORD PTR [ebx]
    227e:	00 00                	add    BYTE PTR [eax],al
    2280:	00 02                	add    BYTE PTR [edx],al
    2282:	0c 04                	or     al,0x4
    2284:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2285:	00 00                	add    BYTE PTR [eax],al
    2287:	00 07                	add    BYTE PTR [edi],al
    2289:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    228c:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    228f:	00 00                	add    BYTE PTR [eax],al
    2291:	00 04 15 98 01 00 00 	add    BYTE PTR [edx*1+0x198],al
    2298:	08 fd                	or     ch,bh
    229a:	03 00                	add    eax,DWORD PTR [eax]
    229c:	00 00                	add    BYTE PTR [eax],al
    229e:	08 42 04             	or     BYTE PTR [edx+0x4],al
    22a1:	00 00                	add    BYTE PTR [eax],al
    22a3:	01 08                	add    DWORD PTR [eax],ecx
    22a5:	84 02                	test   BYTE PTR [edx],al
    22a7:	00 00                	add    BYTE PTR [eax],al
    22a9:	02 08                	add    cl,BYTE PTR [eax]
    22ab:	4e                   	dec    esi
    22ac:	03 00                	add    eax,DWORD PTR [eax]
    22ae:	00 03                	add    BYTE PTR [ebx],al
    22b0:	08 6a 02             	or     BYTE PTR [edx+0x2],ch
    22b3:	00 00                	add    BYTE PTR [eax],al
    22b5:	04 08                	add    al,0x8
    22b7:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    22bb:	05 08 24 04 00       	add    eax,0x42408
    22c0:	00 0a                	add    BYTE PTR [edx],cl
    22c2:	08 8f 03 00 00 0b    	or     BYTE PTR [edi+0xb000003],cl
    22c8:	08 d6                	or     dh,dl
    22ca:	03 00                	add    eax,DWORD PTR [eax]
    22cc:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
    22cf:	5c                   	pop    esp
    22d0:	03 00                	add    eax,DWORD PTR [eax]
    22d2:	00 0d 08 75 03 00    	add    BYTE PTR ds:0x37508,cl
    22d8:	00 0e                	add    BYTE PTR [esi],cl
    22da:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    22dd:	00 00                	add    BYTE PTR [eax],al
    22df:	0f 08                	invd   
    22e1:	b7 03                	mov    bh,0x3
    22e3:	00 00                	add    BYTE PTR [eax],al
    22e5:	10 08                	adc    BYTE PTR [eax],cl
    22e7:	a9 04 00 00 11       	test   eax,0x11000004
    22ec:	08 87 04 00 00 4f    	or     BYTE PTR [edi+0x4f000004],al
    22f2:	08 5c 04 00          	or     BYTE PTR [esp+eax*1+0x0],bl
    22f6:	00 50 08             	add    BYTE PTR [eax+0x8],dl
    22f9:	f0 03 00             	lock add eax,DWORD PTR [eax]
    22fc:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
    22ff:	96                   	xchg   esi,eax
    2300:	04 00                	add    al,0x0
    2302:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
    2305:	1b 03                	sbb    eax,DWORD PTR [ebx]
    2307:	00 00                	add    BYTE PTR [eax],al
    2309:	97                   	xchg   edi,eax
    230a:	09 0d 04 00 00 63    	or     DWORD PTR ds:0x63000004,ecx
    2310:	01 09                	add    DWORD PTR [ecx],ecx
    2312:	e3 03                	jecxz  2317 <sysEnter_Vector-0x12dce9>
    2314:	00 00                	add    BYTE PTR [eax],al
    2316:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
    2319:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    231d:	65 01 09             	add    DWORD PTR gs:[ecx],ecx
    2320:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
    2326:	09 d8                	or     eax,ebx
    2328:	04 00                	add    al,0x0
    232a:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    232d:	09 82 03 00 00 68    	or     DWORD PTR [edx+0x68000003],eax
    2333:	01 09                	add    DWORD PTR [ecx],ecx
    2335:	b8 02 00 00 69       	mov    eax,0x69000002
    233a:	01 09                	add    DWORD PTR [ecx],ecx
    233c:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    233f:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2342:	09 0b                	or     DWORD PTR [ebx],ecx
    2344:	03 00                	add    eax,DWORD PTR [eax]
    2346:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    2349:	09 79 04             	or     DWORD PTR [ecx+0x4],edi
    234c:	00 00                	add    BYTE PTR [eax],al
    234e:	00 03                	add    BYTE PTR [ebx],al
    2350:	09 9c 03 00 00 01 03 	or     DWORD PTR [ebx+eax*1+0x3010000],ebx
    2357:	09 ab 03 00 00 02    	or     DWORD PTR [ebx+0x2000003],ebp
    235d:	03 09                	add    ecx,DWORD PTR [ecx]
    235f:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
    2362:	00 03                	add    BYTE PTR [ebx],al
    2364:	03 09                	add    ecx,DWORD PTR [ecx]
    2366:	98                   	cwde   
    2367:	02 00                	add    al,BYTE PTR [eax]
    2369:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    236c:	09 e7                	or     edi,esp
    236e:	02 00                	add    al,BYTE PTR [eax]
    2370:	00 05 03 09 2f 03    	add    BYTE PTR ds:0x32f0903,al
    2376:	00 00                	add    BYTE PTR [eax],al
    2378:	06                   	push   es
    2379:	03 09                	add    ecx,DWORD PTR [ecx]
    237b:	c4 03                	les    eax,FWORD PTR [ebx]
    237d:	00 00                	add    BYTE PTR [eax],al
    237f:	00 09                	add    BYTE PTR [ecx],cl
    2381:	00 0a                	add    BYTE PTR [edx],cl
    2383:	fe 09                	dec    BYTE PTR [ecx]
    2385:	00 00                	add    BYTE PTR [eax],al
    2387:	18 04 3d ec 01 00 00 	sbb    BYTE PTR [edi*1+0x1ec],al
    238e:	0b f9                	or     edi,ecx
    2390:	09 00                	or     DWORD PTR [eax],eax
    2392:	00 04 3f             	add    BYTE PTR [edi+edi*1],al
    2395:	72 00                	jb     2397 <sysEnter_Vector-0x12dc69>
    2397:	00 00                	add    BYTE PTR [eax],al
    2399:	00 0c 6c             	add    BYTE PTR [esp+ebp*2],cl
    239c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    239e:	00 04 40             	add    BYTE PTR [eax+eax*2],al
    23a1:	4f                   	dec    edi
    23a2:	00 00                	add    BYTE PTR [eax],al
    23a4:	00 04 0b             	add    BYTE PTR [ebx+ecx*1],al
    23a7:	2d 0a 00 00 04       	sub    eax,0x400000a
    23ac:	41                   	inc    ecx
    23ad:	4f                   	dec    edi
    23ae:	00 00                	add    BYTE PTR [eax],al
    23b0:	00 08                	add    BYTE PTR [eax],cl
    23b2:	0b 18                	or     ebx,DWORD PTR [eax]
    23b4:	0a 00                	or     al,BYTE PTR [eax]
    23b6:	00 04 42             	add    BYTE PTR [edx+eax*2],al
    23b9:	4f                   	dec    edi
    23ba:	00 00                	add    BYTE PTR [eax],al
    23bc:	00 0c 0c             	add    BYTE PTR [esp+ecx*1],cl
    23bf:	66                   	data16
    23c0:	64 00 04 43          	add    BYTE PTR fs:[ebx+eax*2],al
    23c4:	4f                   	dec    edi
    23c5:	00 00                	add    BYTE PTR [eax],al
    23c7:	00 10                	add    BYTE PTR [eax],dl
    23c9:	0b 79 10             	or     edi,DWORD PTR [ecx+0x10]
    23cc:	00 00                	add    BYTE PTR [eax],al
    23ce:	04 44                	add    al,0x44
    23d0:	4f                   	dec    edi
    23d1:	00 00                	add    BYTE PTR [eax],al
    23d3:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
    23d6:	06                   	push   es
    23d7:	37                   	aaa    
    23d8:	0a 00                	or     al,BYTE PTR [eax]
    23da:	00 04 45 98 01 00 00 	add    BYTE PTR [eax*2+0x198],al
    23e1:	06                   	push   es
    23e2:	0b 0a                	or     ecx,DWORD PTR [edx]
    23e4:	00 00                	add    BYTE PTR [eax],al
    23e6:	05 15 64 00 00       	add    eax,0x6415
    23eb:	00 0d 32 0a 00 00    	add    BYTE PTR ds:0xa32,cl
    23f1:	01 0d 72 00 00 00    	add    DWORD PTR ds:0x72,ecx
    23f7:	90                   	nop
    23f8:	20 00                	and    BYTE PTR [eax],al
    23fa:	9f                   	lahf   
    23fb:	73 00                	jae    23fd <sysEnter_Vector-0x12dc03>
    23fd:	00 00                	add    BYTE PTR [eax],al
    23ff:	01 9c 6f 02 00 00 0e 	add    DWORD PTR [edi+ebp*2+0xe000002],ebx
    2406:	f9                   	stc    
    2407:	09 00                	or     DWORD PTR [eax],eax
    2409:	00 01                	add    BYTE PTR [ecx],al
    240b:	0d 72 00 00 00       	or     eax,0x72
    2410:	02 91 00 0f 6c 65    	add    dl,BYTE PTR [ecx+0x656c0f00]
    2416:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2417:	00 01                	add    BYTE PTR [ecx],al
    2419:	0d 8c 00 00 00       	or     eax,0x8c
    241e:	02 91 04 0e 2d 0a    	add    dl,BYTE PTR [ecx+0xa2d0e04]
    2424:	00 00                	add    BYTE PTR [eax],al
    2426:	01 0d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ecx
    242c:	02 91 08 0e 18 0a    	add    dl,BYTE PTR [ecx+0xa180e08]
    2432:	00 00                	add    BYTE PTR [eax],al
    2434:	01 0d 4f 00 00 00    	add    DWORD PTR ds:0x4f,ecx
    243a:	02 91 0c 0f 66 64    	add    dl,BYTE PTR [ecx+0x64660f0c]
    2440:	00 01                	add    BYTE PTR [ecx],al
    2442:	0d 4f 00 00 00       	or     eax,0x4f
    2447:	02 91 10 0e 79 10    	add    dl,BYTE PTR [ecx+0x10790e10]
    244d:	00 00                	add    BYTE PTR [eax],al
    244f:	01 0d f7 01 00 00    	add    DWORD PTR ds:0x1f7,ecx
    2455:	02 91 14 00 10 78    	add    dl,BYTE PTR [ecx+0x78100014]
    245b:	00 00                	add    BYTE PTR [eax],al
    245d:	00 06                	add    BYTE PTR [esi],al
    245f:	33 80 02 00 00 05    	xor    eax,DWORD PTR [eax+0x5000002]
    2465:	03 c0                	add    eax,eax
    2467:	7d 00                	jge    2469 <sysEnter_Vector-0x12db97>
    2469:	9f                   	lahf   
    246a:	05 04 74 00 00       	add    eax,0x7404
    246f:	00 10                	add    BYTE PTR [eax],dl
    2471:	11 0a                	adc    DWORD PTR [edx],ecx
    2473:	00 00                	add    BYTE PTR [eax],al
    2475:	01 0b                	add    DWORD PTR [ebx],ecx
    2477:	ec                   	in     al,dx
    2478:	01 00                	add    DWORD PTR [eax],eax
    247a:	00 05 03 ec 7d 00    	add    BYTE PTR ds:0x7dec03,al
    2480:	9f                   	lahf   
    2481:	00 04 05 00 00 04 00 	add    BYTE PTR [eax*1+0x40000],al
    2488:	a1 09 00 00 04       	mov    eax,ds:0x4000009
    248d:	01 c3                	add    ebx,eax
    248f:	00 00                	add    BYTE PTR [eax],al
    2491:	00 0c 3d 0b 00 00 4d 	add    BYTE PTR [edi*1+0x4d00000b],cl
    2498:	00 00                	add    BYTE PTR [eax],al
    249a:	00 04 21             	add    BYTE PTR [ecx+eiz*1],al
    249d:	00 9f c2 06 00 00    	add    BYTE PTR [edi+0x6c2],bl
    24a3:	cb                   	retf   
    24a4:	0a 00                	or     al,BYTE PTR [eax]
    24a6:	00 02                	add    BYTE PTR [edx],al
    24a8:	01 06                	add    DWORD PTR [esi],eax
    24aa:	41                   	inc    ecx
    24ab:	00 00                	add    BYTE PTR [eax],al
    24ad:	00 02                	add    BYTE PTR [edx],al
    24af:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    24b5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    24bc:	02 08                	add    cl,BYTE PTR [eax]
    24be:	05 00 00 00 00       	add    eax,0x0
    24c3:	04 cf                	add    al,0xcf
    24c5:	06                   	push   es
    24c6:	00 00                	add    BYTE PTR [eax],al
    24c8:	02 2e                	add    ch,BYTE PTR [esi]
    24ca:	4c                   	dec    esp
    24cb:	00 00                	add    BYTE PTR [eax],al
    24cd:	00 02                	add    BYTE PTR [edx],al
    24cf:	01 08                	add    DWORD PTR [eax],ecx
    24d1:	3f                   	aas    
    24d2:	00 00                	add    BYTE PTR [eax],al
    24d4:	00 04 89             	add    BYTE PTR [ecx+ecx*4],al
    24d7:	05 00 00 02 31       	add    eax,0x31020000
    24dc:	5e                   	pop    esi
    24dd:	00 00                	add    BYTE PTR [eax],al
    24df:	00 02                	add    BYTE PTR [edx],al
    24e1:	02 07                	add    al,BYTE PTR [edi]
    24e3:	0e                   	push   cs
    24e4:	00 00                	add    BYTE PTR [eax],al
    24e6:	00 04 45 02 00 00 02 	add    BYTE PTR [eax*2+0x2000002],al
    24ed:	34 70                	xor    al,0x70
    24ef:	00 00                	add    BYTE PTR [eax],al
    24f1:	00 02                	add    BYTE PTR [edx],al
    24f3:	04 07                	add    al,0x7
    24f5:	32 00                	xor    al,BYTE PTR [eax]
    24f7:	00 00                	add    BYTE PTR [eax],al
    24f9:	02 08                	add    cl,BYTE PTR [eax]
    24fb:	07                   	pop    es
    24fc:	28 00                	sub    BYTE PTR [eax],al
    24fe:	00 00                	add    BYTE PTR [eax],al
    2500:	04 01                	add    al,0x1
    2502:	02 00                	add    al,BYTE PTR [eax]
    2504:	00 02                	add    BYTE PTR [edx],al
    2506:	56                   	push   esi
    2507:	70 00                	jo     2509 <sysEnter_Vector-0x12daf7>
    2509:	00 00                	add    BYTE PTR [eax],al
    250b:	04 91                	add    al,0x91
    250d:	02 00                	add    al,BYTE PTR [eax]
    250f:	00 03                	add    BYTE PTR [ebx],al
    2511:	d8 70 00             	fdiv   DWORD PTR [eax+0x0]
    2514:	00 00                	add    BYTE PTR [eax],al
    2516:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    251d:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2520:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2521:	00 00                	add    BYTE PTR [eax],al
    2523:	00 02                	add    BYTE PTR [edx],al
    2525:	01 06                	add    DWORD PTR [esi],eax
    2527:	48                   	dec    eax
    2528:	00 00                	add    BYTE PTR [eax],al
    252a:	00 05 bc 0a 00 00    	add    BYTE PTR ds:0xabc,al
    2530:	18 04 33             	sbb    BYTE PTR [ebx+esi*1],al
    2533:	0a 01                	or     al,BYTE PTR [ecx]
    2535:	00 00                	add    BYTE PTR [eax],al
    2537:	06                   	push   es
    2538:	88 0a                	mov    BYTE PTR [edx],cl
    253a:	00 00                	add    BYTE PTR [eax],al
    253c:	04 35                	add    al,0x35
    253e:	65 00 00             	add    BYTE PTR gs:[eax],al
    2541:	00 00                	add    BYTE PTR [eax],al
    2543:	07                   	pop    es
    2544:	6c                   	ins    BYTE PTR es:[edi],dx
    2545:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2547:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    254a:	65 00 00             	add    BYTE PTR gs:[eax],al
    254d:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    2550:	b6 0a                	mov    dh,0xa
    2552:	00 00                	add    BYTE PTR [eax],al
    2554:	04 37                	add    al,0x37
    2556:	0a 01                	or     al,BYTE PTR [ecx]
    2558:	00 00                	add    BYTE PTR [eax],al
    255a:	08 06                	or     BYTE PTR [esi],al
    255c:	28 0b                	sub    BYTE PTR [ebx],cl
    255e:	00 00                	add    BYTE PTR [eax],al
    2560:	04 38                	add    al,0x38
    2562:	53                   	push   ebx
    2563:	00 00                	add    BYTE PTR [eax],al
    2565:	00 0a                	add    BYTE PTR [edx],cl
    2567:	06                   	push   es
    2568:	af                   	scas   eax,DWORD PTR es:[edi]
    2569:	0a 00                	or     al,BYTE PTR [eax]
    256b:	00 04 39             	add    BYTE PTR [ecx+edi*1],al
    256e:	41                   	inc    ecx
    256f:	00 00                	add    BYTE PTR [eax],al
    2571:	00 0c 06             	add    BYTE PTR [esi+eax*1],cl
    2574:	4e                   	dec    esi
    2575:	0a 00                	or     al,BYTE PTR [eax]
    2577:	00 04 3a             	add    BYTE PTR [edx+edi*1],al
    257a:	11 01                	adc    DWORD PTR [ecx],eax
    257c:	00 00                	add    BYTE PTR [eax],al
    257e:	10 06                	adc    BYTE PTR [esi],al
    2580:	6a 0a                	push   0xa
    2582:	00 00                	add    BYTE PTR [eax],al
    2584:	04 3a                	add    al,0x3a
    2586:	11 01                	adc    DWORD PTR [ecx],eax
    2588:	00 00                	add    BYTE PTR [eax],al
    258a:	14 00                	adc    al,0x0
    258c:	02 01                	add    al,BYTE PTR [ecx]
    258e:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    2591:	00 00                	add    BYTE PTR [eax],al
    2593:	08 04 a9             	or     BYTE PTR [ecx+ebp*4],al
    2596:	00 00                	add    BYTE PTR [eax],al
    2598:	00 04 6f             	add    BYTE PTR [edi+ebp*2],al
    259b:	0a 00                	or     al,BYTE PTR [eax]
    259d:	00 04 3b             	add    BYTE PTR [ebx+edi*1],al
    25a0:	a9 00 00 00 02       	test   eax,0x2000000
    25a5:	04 07                	add    al,0x7
    25a7:	2d 00 00 00 02       	sub    eax,0x2000000
    25ac:	04 07                	add    al,0x7
    25ae:	2a 01                	sub    al,BYTE PTR [ecx]
    25b0:	00 00                	add    BYTE PTR [eax],al
    25b2:	09 04 08             	or     DWORD PTR [eax+ecx*1],eax
    25b5:	04 a2                	add    al,0xa2
    25b7:	00 00                	add    BYTE PTR [eax],al
    25b9:	00 0a                	add    BYTE PTR [edx],cl
    25bb:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    25be:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    25c1:	00 00                	add    BYTE PTR [eax],al
    25c3:	00 06                	add    BYTE PTR [esi],al
    25c5:	15 32 02 00 00       	adc    eax,0x232
    25ca:	0b fd                	or     edi,ebp
    25cc:	03 00                	add    eax,DWORD PTR [eax]
    25ce:	00 00                	add    BYTE PTR [eax],al
    25d0:	0b 42 04             	or     eax,DWORD PTR [edx+0x4]
    25d3:	00 00                	add    BYTE PTR [eax],al
    25d5:	01 0b                	add    DWORD PTR [ebx],ecx
    25d7:	84 02                	test   BYTE PTR [edx],al
    25d9:	00 00                	add    BYTE PTR [eax],al
    25db:	02 0b                	add    cl,BYTE PTR [ebx]
    25dd:	4e                   	dec    esi
    25de:	03 00                	add    eax,DWORD PTR [eax]
    25e0:	00 03                	add    BYTE PTR [ebx],al
    25e2:	0b 6a 02             	or     ebp,DWORD PTR [edx+0x2]
    25e5:	00 00                	add    BYTE PTR [eax],al
    25e7:	04 0b                	add    al,0xb
    25e9:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    25ed:	05 0b 24 04 00       	add    eax,0x4240b
    25f2:	00 0a                	add    BYTE PTR [edx],cl
    25f4:	0b 8f 03 00 00 0b    	or     ecx,DWORD PTR [edi+0xb000003]
    25fa:	0b d6                	or     edx,esi
    25fc:	03 00                	add    eax,DWORD PTR [eax]
    25fe:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
    2601:	5c                   	pop    esp
    2602:	03 00                	add    eax,DWORD PTR [eax]
    2604:	00 0d 0b 75 03 00    	add    BYTE PTR ds:0x3750b,cl
    260a:	00 0e                	add    BYTE PTR [esi],cl
    260c:	0b 77 02             	or     esi,DWORD PTR [edi+0x2]
    260f:	00 00                	add    BYTE PTR [eax],al
    2611:	0f 0b                	ud2    
    2613:	b7 03                	mov    bh,0x3
    2615:	00 00                	add    BYTE PTR [eax],al
    2617:	10 0b                	adc    BYTE PTR [ebx],cl
    2619:	a9 04 00 00 11       	test   eax,0x11000004
    261e:	0b 87 04 00 00 4f    	or     eax,DWORD PTR [edi+0x4f000004]
    2624:	0b 5c 04 00          	or     ebx,DWORD PTR [esp+eax*1+0x0]
    2628:	00 50 0b             	add    BYTE PTR [eax+0xb],dl
    262b:	f0 03 00             	lock add eax,DWORD PTR [eax]
    262e:	00 59 0b             	add    BYTE PTR [ecx+0xb],bl
    2631:	96                   	xchg   esi,eax
    2632:	04 00                	add    al,0x0
    2634:	00 61 0b             	add    BYTE PTR [ecx+0xb],ah
    2637:	1b 03                	sbb    eax,DWORD PTR [ebx]
    2639:	00 00                	add    BYTE PTR [eax],al
    263b:	97                   	xchg   edi,eax
    263c:	0c 0d                	or     al,0xd
    263e:	04 00                	add    al,0x0
    2640:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    2643:	0c e3                	or     al,0xe3
    2645:	03 00                	add    eax,DWORD PTR [eax]
    2647:	00 64 01 0c          	add    BYTE PTR [ecx+eax*1+0xc],ah
    264b:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    264f:	65 01 0c f7          	add    DWORD PTR gs:[edi+esi*8],ecx
    2653:	02 00                	add    al,BYTE PTR [eax]
    2655:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    2658:	0c d8                	or     al,0xd8
    265a:	04 00                	add    al,0x0
    265c:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    265f:	0c 82                	or     al,0x82
    2661:	03 00                	add    eax,DWORD PTR [eax]
    2663:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    2666:	0c b8                	or     al,0xb8
    2668:	02 00                	add    al,BYTE PTR [eax]
    266a:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    266d:	0c 31                	or     al,0x31
    266f:	04 00                	add    al,0x0
    2671:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2674:	0c 0b                	or     al,0xb
    2676:	03 00                	add    eax,DWORD PTR [eax]
    2678:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    267b:	0c 79                	or     al,0x79
    267d:	04 00                	add    al,0x0
    267f:	00 00                	add    BYTE PTR [eax],al
    2681:	03 0c 9c             	add    ecx,DWORD PTR [esp+ebx*4]
    2684:	03 00                	add    eax,DWORD PTR [eax]
    2686:	00 01                	add    BYTE PTR [ecx],al
    2688:	03 0c ab             	add    ecx,DWORD PTR [ebx+ebp*4]
    268b:	03 00                	add    eax,DWORD PTR [eax]
    268d:	00 02                	add    BYTE PTR [edx],al
    268f:	03 0c 3e             	add    ecx,DWORD PTR [esi+edi*1]
    2692:	03 00                	add    eax,DWORD PTR [eax]
    2694:	00 03                	add    BYTE PTR [ebx],al
    2696:	03 0c 98             	add    ecx,DWORD PTR [eax+ebx*4]
    2699:	02 00                	add    al,BYTE PTR [eax]
    269b:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    269e:	0c e7                	or     al,0xe7
    26a0:	02 00                	add    al,BYTE PTR [eax]
    26a2:	00 05 03 0c 2f 03    	add    BYTE PTR ds:0x32f0c03,al
    26a8:	00 00                	add    BYTE PTR [eax],al
    26aa:	06                   	push   es
    26ab:	03 0c c4             	add    ecx,DWORD PTR [esp+eax*8]
    26ae:	03 00                	add    eax,DWORD PTR [eax]
    26b0:	00 00                	add    BYTE PTR [eax],al
    26b2:	09 00                	or     DWORD PTR [eax],eax
    26b4:	0d c2 0a 00 00       	or     eax,0xac2
    26b9:	01 15 04 21 00 9f    	add    DWORD PTR ds:0x9f002104,edx
    26bf:	60                   	pusha  
    26c0:	00 00                	add    BYTE PTR [eax],al
    26c2:	00 01                	add    BYTE PTR [ecx],al
    26c4:	9c                   	pushf  
    26c5:	0e                   	push   cs
    26c6:	8f 0a                	(bad)  
    26c8:	00 00                	add    BYTE PTR [eax],al
    26ca:	01 1e                	add    DWORD PTR [esi],ebx
    26cc:	65 00 00             	add    BYTE PTR gs:[eax],al
    26cf:	00 64 21 00          	add    BYTE PTR [ecx+eiz*1+0x0],ah
    26d3:	9f                   	lahf   
    26d4:	87 00                	xchg   DWORD PTR [eax],eax
    26d6:	00 00                	add    BYTE PTR [eax],al
    26d8:	01 9c 79 02 00 00 0f 	add    DWORD PTR [ecx+edi*2+0xf000002],ebx
    26df:	da 06                	fiadd  DWORD PTR [esi]
    26e1:	00 00                	add    BYTE PTR [eax],al
    26e3:	01 1e                	add    DWORD PTR [esi],ebx
    26e5:	89 00                	mov    DWORD PTR [eax],eax
    26e7:	00 00                	add    BYTE PTR [eax],al
    26e9:	02 91 00 10 07 0b    	add    dl,BYTE PTR [ecx+0xb071000]
    26ef:	00 00                	add    BYTE PTR [eax],al
    26f1:	01 22                	add    DWORD PTR [edx],esp
    26f3:	65 00 00             	add    BYTE PTR gs:[eax],al
    26f6:	00 02                	add    BYTE PTR [edx],al
    26f8:	91                   	xchg   ecx,eax
    26f9:	74 00                	je     26fb <sysEnter_Vector-0x12d905>
    26fb:	11 82 0a 00 00 01    	adc    DWORD PTR [edx+0x100000a],eax
    2701:	36                   	ss
    2702:	eb 21                	jmp    2725 <sysEnter_Vector-0x12d8db>
    2704:	00 9f 73 00 00 00    	add    BYTE PTR [edi+0x73],bl
    270a:	01 9c aa 02 00 00 0f 	add    DWORD PTR [edx+ebp*4+0xf000002],ebx
    2711:	5f                   	pop    edi
    2712:	0b 00                	or     eax,DWORD PTR [eax]
    2714:	00 01                	add    BYTE PTR [ecx],al
    2716:	36 30 01             	xor    BYTE PTR ss:[ecx],al
    2719:	00 00                	add    BYTE PTR [eax],al
    271b:	02 91 00 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d1200]
    2721:	00 01                	add    BYTE PTR [ecx],al
    2723:	38 aa 02 00 00 02    	cmp    BYTE PTR [edx+0x2000002],ch
    2729:	91                   	xchg   ecx,eax
    272a:	6c                   	ins    BYTE PTR es:[edi],dx
    272b:	00 08                	add    BYTE PTR [eax],cl
    272d:	04 17                	add    al,0x17
    272f:	01 00                	add    DWORD PTR [eax],eax
    2731:	00 0e                	add    BYTE PTR [esi],cl
    2733:	74 0b                	je     2740 <sysEnter_Vector-0x12d8c0>
    2735:	00 00                	add    BYTE PTR [eax],al
    2737:	01 4e aa             	add    DWORD PTR [esi-0x56],ecx
    273a:	02 00                	add    al,BYTE PTR [eax]
    273c:	00 5e 22             	add    BYTE PTR [esi+0x22],bl
    273f:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    2745:	01 9c e6 02 00 00 0f 	add    DWORD PTR [esi+eiz*8+0xf000002],ebx
    274c:	da 06                	fiadd  DWORD PTR [esi]
    274e:	00 00                	add    BYTE PTR [eax],al
    2750:	01 4e 89             	add    DWORD PTR [esi-0x77],ecx
    2753:	00 00                	add    BYTE PTR [eax],al
    2755:	00 02                	add    BYTE PTR [edx],al
    2757:	91                   	xchg   ecx,eax
    2758:	00 10                	add    BYTE PTR [eax],dl
    275a:	4a                   	dec    edx
    275b:	0b 00                	or     eax,DWORD PTR [eax]
    275d:	00 01                	add    BYTE PTR [ecx],al
    275f:	50                   	push   eax
    2760:	aa                   	stos   BYTE PTR es:[edi],al
    2761:	02 00                	add    al,BYTE PTR [eax]
    2763:	00 02                	add    BYTE PTR [edx],al
    2765:	91                   	xchg   ecx,eax
    2766:	74 00                	je     2768 <sysEnter_Vector-0x12d898>
    2768:	11 9e 0b 00 00 01    	adc    DWORD PTR [esi+0x100000b],ebx
    276e:	5e                   	pop    esi
    276f:	e2 22                	loop   2793 <sysEnter_Vector-0x12d86d>
    2771:	00 9f 8b 00 00 00    	add    BYTE PTR [edi+0x8b],bl
    2777:	01 9c 2e 03 00 00 0f 	add    DWORD PTR [esi+ebp*1+0xf000003],ebx
    277e:	2d 0b 00 00 01       	sub    eax,0x100000b
    2783:	5e                   	pop    esi
    2784:	aa                   	stos   BYTE PTR es:[edi],al
    2785:	02 00                	add    al,BYTE PTR [eax]
    2787:	00 02                	add    BYTE PTR [edx],al
    2789:	91                   	xchg   ecx,eax
    278a:	00 10                	add    BYTE PTR [eax],dl
    278c:	4a                   	dec    edx
    278d:	0b 00                	or     eax,DWORD PTR [eax]
    278f:	00 01                	add    BYTE PTR [ecx],al
    2791:	61                   	popa   
    2792:	aa                   	stos   BYTE PTR es:[edi],al
    2793:	02 00                	add    al,BYTE PTR [eax]
    2795:	00 02                	add    BYTE PTR [edx],al
    2797:	91                   	xchg   ecx,eax
    2798:	6c                   	ins    BYTE PTR es:[edi],dx
    2799:	13 68 0b             	adc    ebp,DWORD PTR [eax+0xb]
    279c:	00 00                	add    BYTE PTR [eax],al
    279e:	01 67 21             	add    DWORD PTR [edi+0x21],esp
    27a1:	23 00                	and    eax,DWORD PTR [eax]
    27a3:	9f                   	lahf   
    27a4:	13 fc                	adc    edi,esp
    27a6:	0a 00                	or     al,BYTE PTR [eax]
    27a8:	00 01                	add    BYTE PTR [ecx],al
    27aa:	6d                   	ins    DWORD PTR es:[edi],dx
    27ab:	44                   	inc    esp
    27ac:	23 00                	and    eax,DWORD PTR [eax]
    27ae:	9f                   	lahf   
    27af:	00 14 46             	add    BYTE PTR [esi+eax*2],dl
    27b2:	0a 00                	or     al,BYTE PTR [eax]
    27b4:	00 01                	add    BYTE PTR [ecx],al
    27b6:	75 30                	jne    27e8 <sysEnter_Vector-0x12d818>
    27b8:	01 00                	add    DWORD PTR [eax],eax
    27ba:	00 6d 23             	add    BYTE PTR [ebp+0x23],ch
    27bd:	00 9f c0 02 00 00    	add    BYTE PTR [edi+0x2c0],bl
    27c3:	01 9c c5 03 00 00 0f 	add    DWORD PTR [ebp+eax*8+0xf000003],ebx
    27ca:	da 06                	fiadd  DWORD PTR [esi]
    27cc:	00 00                	add    BYTE PTR [eax],al
    27ce:	01 75 89             	add    DWORD PTR [ebp-0x77],esi
    27d1:	00 00                	add    BYTE PTR [eax],al
    27d3:	00 02                	add    BYTE PTR [edx],al
    27d5:	91                   	xchg   ecx,eax
    27d6:	00 10                	add    BYTE PTR [eax],dl
    27d8:	f4                   	hlt    
    27d9:	04 00                	add    al,0x0
    27db:	00 01                	add    BYTE PTR [ecx],al
    27dd:	77 30                	ja     280f <sysEnter_Vector-0x12d7f1>
    27df:	01 00                	add    DWORD PTR [eax],eax
    27e1:	00 02                	add    BYTE PTR [edx],al
    27e3:	91                   	xchg   ecx,eax
    27e4:	58                   	pop    eax
    27e5:	10 18                	adc    BYTE PTR [eax],bl
    27e7:	0b 00                	or     eax,DWORD PTR [eax]
    27e9:	00 01                	add    BYTE PTR [ecx],al
    27eb:	79 65                	jns    2852 <sysEnter_Vector-0x12d7ae>
    27ed:	00 00                	add    BYTE PTR [eax],al
    27ef:	00 02                	add    BYTE PTR [edx],al
    27f1:	91                   	xchg   ecx,eax
    27f2:	60                   	pusha  
    27f3:	10 e8                	adc    al,ch
    27f5:	0a 00                	or     al,BYTE PTR [eax]
    27f7:	00 01                	add    BYTE PTR [ecx],al
    27f9:	7a 65                	jp     2860 <sysEnter_Vector-0x12d7a0>
    27fb:	00 00                	add    BYTE PTR [eax],al
    27fd:	00 02                	add    BYTE PTR [edx],al
    27ff:	91                   	xchg   ecx,eax
    2800:	5c                   	pop    esp
    2801:	10 4a 0b             	adc    BYTE PTR [edx+0xb],cl
    2804:	00 00                	add    BYTE PTR [eax],al
    2806:	01 7b aa             	add    DWORD PTR [ebx-0x56],edi
    2809:	02 00                	add    al,BYTE PTR [eax]
    280b:	00 02                	add    BYTE PTR [edx],al
    280d:	91                   	xchg   ecx,eax
    280e:	68 10 cd 0a 00       	push   0xacd10
    2813:	00 01                	add    BYTE PTR [ecx],al
    2815:	7c 89                	jl     27a0 <sysEnter_Vector-0x12d860>
    2817:	00 00                	add    BYTE PTR [eax],al
    2819:	00 02                	add    BYTE PTR [edx],al
    281b:	91                   	xchg   ecx,eax
    281c:	6c                   	ins    BYTE PTR es:[edi],dx
    281d:	10 53 0a             	adc    BYTE PTR [ebx+0xa],dl
    2820:	00 00                	add    BYTE PTR [eax],al
    2822:	01 7d aa             	add    DWORD PTR [ebp-0x56],edi
    2825:	02 00                	add    al,BYTE PTR [eax]
    2827:	00 05 03 10 7e 00    	add    BYTE PTR ds:0x7e1003,al
    282d:	9f                   	lahf   
    282e:	15 f8 23 00 9f       	adc    eax,0x9f0023f8
    2833:	11 00                	adc    DWORD PTR [eax],eax
    2835:	00 00                	add    BYTE PTR [eax],al
    2837:	12 70 74             	adc    dh,BYTE PTR [eax+0x74]
    283a:	72 00                	jb     283c <sysEnter_Vector-0x12d7c4>
    283c:	01 89 30 01 00 00    	add    DWORD PTR [ecx+0x130],ecx
    2842:	02 91 64 00 00 14    	add    dl,BYTE PTR [ecx+0x14000064]
    2848:	c6                   	(bad)  
    2849:	0a 00                	or     al,BYTE PTR [eax]
    284b:	00 01                	add    BYTE PTR [ecx],al
    284d:	b5 30                	mov    ch,0x30
    284f:	01 00                	add    DWORD PTR [eax],eax
    2851:	00 2d 26 00 9f 20    	add    BYTE PTR ds:0x209f0026,ch
    2857:	00 00                	add    BYTE PTR [eax],al
    2859:	00 01                	add    BYTE PTR [ecx],al
    285b:	9c                   	pushf  
    285c:	ed                   	in     eax,dx
    285d:	03 00                	add    eax,DWORD PTR [eax]
    285f:	00 0f                	add    BYTE PTR [edi],cl
    2861:	da 06                	fiadd  DWORD PTR [esi]
    2863:	00 00                	add    BYTE PTR [eax],al
    2865:	01 b5 89 00 00 00    	add    DWORD PTR [ebp+0x89],esi
    286b:	02 91 00 00 14 1f    	add    dl,BYTE PTR [ecx+0x1f140000]
    2871:	0b 00                	or     eax,DWORD PTR [eax]
    2873:	00 01                	add    BYTE PTR [ecx],al
    2875:	ba 30 01 00 00       	mov    edx,0x130
    287a:	4d                   	dec    ebp
    287b:	26 00 9f 03 01 00 00 	add    BYTE PTR es:[edi+0x103],bl
    2882:	01 9c 4c 04 00 00 0f 	add    DWORD PTR [esp+ecx*2+0xf000004],ebx
    2889:	52                   	push   edx
    288a:	0b 00                	or     eax,DWORD PTR [eax]
    288c:	00 01                	add    BYTE PTR [ecx],al
    288e:	ba 30 01 00 00       	mov    edx,0x130
    2893:	02 91 00 0f f5 0a    	add    dl,BYTE PTR [ecx+0xaf50f00]
    2899:	00 00                	add    BYTE PTR [eax],al
    289b:	01 ba 65 00 00 00    	add    DWORD PTR [edx+0x65],edi
    28a1:	02 91 04 10 0f 0b    	add    dl,BYTE PTR [ecx+0xb0f1004]
    28a7:	00 00                	add    BYTE PTR [eax],al
    28a9:	01 c0                	add    eax,eax
    28ab:	65 00 00             	add    BYTE PTR gs:[eax],al
    28ae:	00 02                	add    BYTE PTR [edx],al
    28b0:	91                   	xchg   ecx,eax
    28b1:	6c                   	ins    BYTE PTR es:[edi],dx
    28b2:	12 6d 70             	adc    ch,BYTE PTR [ebp+0x70]
    28b5:	00 01                	add    BYTE PTR [ecx],al
    28b7:	c1 aa 02 00 00 02 91 	shr    DWORD PTR [edx+0x2000002],0x91
    28be:	68 10 35 0b 00       	push   0xb3510
    28c3:	00 01                	add    BYTE PTR [ecx],al
    28c5:	cd 4c                	int    0x4c
    28c7:	04 00                	add    al,0x0
    28c9:	00 02                	add    BYTE PTR [edx],al
    28cb:	91                   	xchg   ecx,eax
    28cc:	64 00 08             	add    BYTE PTR fs:[eax],cl
    28cf:	04 7e                	add    al,0x7e
    28d1:	00 00                	add    BYTE PTR [eax],al
    28d3:	00 14 8e             	add    BYTE PTR [esi+ecx*4],dl
    28d6:	0b 00                	or     eax,DWORD PTR [eax]
    28d8:	00 01                	add    BYTE PTR [ecx],al
    28da:	db 30                	(bad)  [eax]
    28dc:	01 00                	add    DWORD PTR [eax],eax
    28de:	00 50 27             	add    BYTE PTR [eax+0x27],dl
    28e1:	00 9f 23 00 00 00    	add    BYTE PTR [edi+0x23],bl
    28e7:	01 9c 88 04 00 00 0f 	add    DWORD PTR [eax+ecx*4+0xf000004],ebx
    28ee:	52                   	push   edx
    28ef:	0b 00                	or     eax,DWORD PTR [eax]
    28f1:	00 01                	add    BYTE PTR [ecx],al
    28f3:	db 30                	(bad)  [eax]
    28f5:	01 00                	add    DWORD PTR [eax],eax
    28f7:	00 02                	add    BYTE PTR [edx],al
    28f9:	91                   	xchg   ecx,eax
    28fa:	00 0f                	add    BYTE PTR [edi],cl
    28fc:	f5                   	cmc    
    28fd:	0a 00                	or     al,BYTE PTR [eax]
    28ff:	00 01                	add    BYTE PTR [ecx],al
    2901:	db 65 00             	(bad)  [ebp+0x0]
    2904:	00 00                	add    BYTE PTR [eax],al
    2906:	02 91 04 00 11 5a    	add    dl,BYTE PTR [ecx+0x5a110004]
    290c:	0b 00                	or     eax,DWORD PTR [eax]
    290e:	00 01                	add    BYTE PTR [ecx],al
    2910:	e0 73                	loopne 2985 <sysEnter_Vector-0x12d67b>
    2912:	27                   	daa    
    2913:	00 9f 21 00 00 00    	add    BYTE PTR [edi+0x21],bl
    2919:	01 9c ac 04 00 00 0f 	add    DWORD PTR [esp+ebp*4+0xf000004],ebx
    2920:	5f                   	pop    edi
    2921:	0b 00                	or     eax,DWORD PTR [eax]
    2923:	00 01                	add    BYTE PTR [ecx],al
    2925:	e0 30                	loopne 2957 <sysEnter_Vector-0x12d6a9>
    2927:	01 00                	add    DWORD PTR [eax],eax
    2929:	00 02                	add    BYTE PTR [edx],al
    292b:	91                   	xchg   ecx,eax
    292c:	00 00                	add    BYTE PTR [eax],al
    292e:	0d d9 0a 00 00       	or     eax,0xad9
    2933:	01 e5                	add    ebp,esp
    2935:	94                   	xchg   esp,eax
    2936:	27                   	daa    
    2937:	00 9f 32 00 00 00    	add    BYTE PTR [edi+0x32],bl
    293d:	01 9c 16 78 00 00 00 	add    DWORD PTR [esi+edx*1+0x78],ebx
    2944:	05 33 ce 04 00       	add    eax,0x4ce33
    2949:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
    294f:	9f                   	lahf   
    2950:	08 04 32             	or     BYTE PTR [edx+esi*1],al
    2953:	01 00                	add    DWORD PTR [eax],eax
    2955:	00 16                	add    BYTE PTR [esi],dl
    2957:	79 0a                	jns    2963 <sysEnter_Vector-0x12d69d>
    2959:	00 00                	add    BYTE PTR [eax],al
    295b:	01 11                	add    DWORD PTR [ecx],edx
    295d:	65 00 00             	add    BYTE PTR gs:[eax],al
    2960:	00 05 03 04 7e 00    	add    BYTE PTR ds:0x7e0403,al
    2966:	9f                   	lahf   
    2967:	16                   	push   ss
    2968:	61                   	popa   
    2969:	0a 00                	or     al,BYTE PTR [eax]
    296b:	00 01                	add    BYTE PTR [ecx],al
    296d:	12 65 00             	adc    ah,BYTE PTR [ebp+0x0]
    2970:	00 00                	add    BYTE PTR [eax],al
    2972:	05 03 08 7e 00       	add    eax,0x7e0803
    2977:	9f                   	lahf   
    2978:	16                   	push   ss
    2979:	96                   	xchg   esi,eax
    297a:	0b 00                	or     eax,DWORD PTR [eax]
    297c:	00 01                	add    BYTE PTR [ecx],al
    297e:	13 65 00             	adc    esp,DWORD PTR [ebp+0x0]
    2981:	00 00                	add    BYTE PTR [eax],al
    2983:	05 03 0c 7e 00       	add    eax,0x7e0c03
    2988:	9f                   	lahf   
    2989:	00 e8                	add    al,ch
    298b:	01 00                	add    DWORD PTR [eax],eax
    298d:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2990:	f4                   	hlt    
    2991:	0a 00                	or     al,BYTE PTR [eax]
    2993:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2996:	c3                   	ret    
    2997:	00 00                	add    BYTE PTR [eax],al
    2999:	00 0c c4             	add    BYTE PTR [esp+eax*8],cl
    299c:	0b 00                	or     eax,DWORD PTR [eax]
    299e:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    29a1:	00 00                	add    BYTE PTR [eax],al
    29a3:	c8 27 00 9f          	enter  0x27,0x9f
    29a7:	bb 01 00 00 a1       	mov    ebx,0xa1000001
    29ac:	0c 00                	or     al,0x0
    29ae:	00 02                	add    BYTE PTR [edx],al
    29b0:	01 08                	add    DWORD PTR [eax],ecx
    29b2:	3f                   	aas    
    29b3:	00 00                	add    BYTE PTR [eax],al
    29b5:	00 02                	add    BYTE PTR [edx],al
    29b7:	02 07                	add    al,BYTE PTR [edi]
    29b9:	0e                   	push   cs
    29ba:	00 00                	add    BYTE PTR [eax],al
    29bc:	00 02                	add    BYTE PTR [edx],al
    29be:	04 07                	add    al,0x7
    29c0:	32 00                	xor    al,BYTE PTR [eax]
    29c2:	00 00                	add    BYTE PTR [eax],al
    29c4:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    29c7:	2d 00 00 00 02       	sub    eax,0x2000000
    29cc:	01 06                	add    DWORD PTR [esi],eax
    29ce:	41                   	inc    ecx
    29cf:	00 00                	add    BYTE PTR [eax],al
    29d1:	00 02                	add    BYTE PTR [edx],al
    29d3:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    29d9:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    29e0:	02 08                	add    cl,BYTE PTR [eax]
    29e2:	05 00 00 00 00       	add    eax,0x0
    29e7:	02 08                	add    cl,BYTE PTR [eax]
    29e9:	07                   	pop    es
    29ea:	28 00                	sub    BYTE PTR [eax],al
    29ec:	00 00                	add    BYTE PTR [eax],al
    29ee:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    29f5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    29f8:	2a 01                	sub    al,BYTE PTR [ecx]
    29fa:	00 00                	add    BYTE PTR [eax],al
    29fc:	04 04                	add    al,0x4
    29fe:	05 04 7a 00 00       	add    eax,0x7a04
    2a03:	00 02                	add    BYTE PTR [edx],al
    2a05:	01 06                	add    DWORD PTR [esi],eax
    2a07:	48                   	dec    eax
    2a08:	00 00                	add    BYTE PTR [eax],al
    2a0a:	00 06                	add    BYTE PTR [esi],al
    2a0c:	45                   	inc    ebp
    2a0d:	02 00                	add    al,BYTE PTR [eax]
    2a0f:	00 02                	add    BYTE PTR [edx],al
    2a11:	34 33                	xor    al,0x33
    2a13:	00 00                	add    BYTE PTR [eax],al
    2a15:	00 05 04 92 00 00    	add    BYTE PTR ds:0x9204,al
    2a1b:	00 07                	add    BYTE PTR [edi],al
    2a1d:	7a 00                	jp     2a1f <sysEnter_Vector-0x12d5e1>
    2a1f:	00 00                	add    BYTE PTR [eax],al
    2a21:	06                   	push   es
    2a22:	91                   	xchg   ecx,eax
    2a23:	02 00                	add    al,BYTE PTR [eax]
    2a25:	00 03                	add    BYTE PTR [ebx],al
    2a27:	d8 33                	fdiv   DWORD PTR [ebx]
    2a29:	00 00                	add    BYTE PTR [eax],al
    2a2b:	00 02                	add    BYTE PTR [edx],al
    2a2d:	0c 04                	or     al,0x4
    2a2f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2a30:	00 00                	add    BYTE PTR [eax],al
    2a32:	00 08                	add    BYTE PTR [eax],cl
    2a34:	b0 0b                	mov    al,0xb
    2a36:	00 00                	add    BYTE PTR [eax],al
    2a38:	01 0b                	add    DWORD PTR [ebx],ecx
    2a3a:	72 00                	jb     2a3c <sysEnter_Vector-0x12d5c4>
    2a3c:	00 00                	add    BYTE PTR [eax],al
    2a3e:	c8 27 00 9f          	enter  0x27,0x9f
    2a42:	9b                   	fwait
    2a43:	01 00                	add    DWORD PTR [eax],eax
    2a45:	00 01                	add    BYTE PTR [ecx],al
    2a47:	9c                   	pushf  
    2a48:	73 01                	jae    2a4b <sysEnter_Vector-0x12d5b5>
    2a4a:	00 00                	add    BYTE PTR [eax],al
    2a4c:	09 b8 0b 00 00 01    	or     DWORD PTR [eax+0x100000b],edi
    2a52:	0b 72 00             	or     esi,DWORD PTR [edx+0x0]
    2a55:	00 00                	add    BYTE PTR [eax],al
    2a57:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2a5d:	63 00                	arpl   WORD PTR [eax],ax
    2a5f:	01 0b                	add    DWORD PTR [ebx],ecx
    2a61:	73 01                	jae    2a64 <sysEnter_Vector-0x12d59c>
    2a63:	00 00                	add    BYTE PTR [eax],al
    2a65:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    2a6b:	01 0b                	add    DWORD PTR [ebx],ecx
    2a6d:	97                   	xchg   edi,eax
    2a6e:	00 00                	add    BYTE PTR [eax],al
    2a70:	00 02                	add    BYTE PTR [edx],al
    2a72:	91                   	xchg   ecx,eax
    2a73:	08 0b                	or     BYTE PTR [ebx],cl
    2a75:	64                   	fs
    2a76:	77 00                	ja     2a78 <sysEnter_Vector-0x12d588>
    2a78:	01 0d 7a 01 00 00    	add    DWORD PTR ds:0x17a,ecx
    2a7e:	02 91 5e 0b 64 64    	add    dl,BYTE PTR [ecx+0x64640b5e]
    2a84:	00 01                	add    BYTE PTR [ecx],al
    2a86:	0d 7a 01 00 00       	or     eax,0x17a
    2a8b:	02 91 5f 0c fa 27    	add    dl,BYTE PTR [ecx+0x27fa0c5f]
    2a91:	00 9f 7d 00 00 00    	add    BYTE PTR [edi+0x7d],bl
    2a97:	2a 01                	sub    al,BYTE PTR [ecx]
    2a99:	00 00                	add    BYTE PTR [eax],al
    2a9b:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    2a9e:	01 14 81             	add    DWORD PTR [ecx+eax*4],edx
    2aa1:	01 00                	add    DWORD PTR [eax],eax
    2aa3:	00 02                	add    BYTE PTR [edx],al
    2aa5:	91                   	xchg   ecx,eax
    2aa6:	74 0b                	je     2ab3 <sysEnter_Vector-0x12d54d>
    2aa8:	74 00                	je     2aaa <sysEnter_Vector-0x12d556>
    2aaa:	01 15 8c 01 00 00    	add    DWORD PTR ds:0x18c,edx
    2ab0:	02 91 70 00 0c 7d    	add    dl,BYTE PTR [ecx+0x7d0c0070]
    2ab6:	28 00                	sub    BYTE PTR [eax],al
    2ab8:	9f                   	lahf   
    2ab9:	79 00                	jns    2abb <sysEnter_Vector-0x12d545>
    2abb:	00 00                	add    BYTE PTR [eax],al
    2abd:	50                   	push   eax
    2abe:	01 00                	add    DWORD PTR [eax],eax
    2ac0:	00 0b                	add    BYTE PTR [ebx],cl
    2ac2:	66                   	data16
    2ac3:	00 01                	add    BYTE PTR [ecx],al
    2ac5:	24 81                	and    al,0x81
    2ac7:	01 00                	add    DWORD PTR [eax],eax
    2ac9:	00 02                	add    BYTE PTR [edx],al
    2acb:	91                   	xchg   ecx,eax
    2acc:	6c                   	ins    BYTE PTR es:[edi],dx
    2acd:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    2ad1:	25 8c 01 00 00       	and    eax,0x18c
    2ad6:	02 91 68 00 0d f6    	add    dl,BYTE PTR [ecx-0x9f2ff98]
    2adc:	28 00                	sub    BYTE PTR [eax],al
    2ade:	9f                   	lahf   
    2adf:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    2ae2:	00 0b                	add    BYTE PTR [ebx],cl
    2ae4:	66                   	data16
    2ae5:	00 01                	add    BYTE PTR [ecx],al
    2ae7:	33 8c 00 00 00 02 91 	xor    ecx,DWORD PTR [eax+eax*1-0x6efe0000]
    2aee:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    2af3:	34 74                	xor    al,0x74
    2af5:	00 00                	add    BYTE PTR [eax],al
    2af7:	00 02                	add    BYTE PTR [edx],al
    2af9:	91                   	xchg   ecx,eax
    2afa:	60                   	pusha  
    2afb:	00 00                	add    BYTE PTR [eax],al
    2afd:	05 04 79 01 00       	add    eax,0x17904
    2b02:	00 0e                	add    BYTE PTR [esi],cl
    2b04:	02 01                	add    al,BYTE PTR [ecx]
    2b06:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    2b09:	00 00                	add    BYTE PTR [eax],al
    2b0b:	05 04 87 01 00       	add    eax,0x18704
    2b10:	00 07                	add    BYTE PTR [edi],al
    2b12:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    2b18:	81 00 00 00 0f bd    	add    DWORD PTR [eax],0xbd0f0000
    2b1e:	0b 00                	or     eax,DWORD PTR [eax]
    2b20:	00 01                	add    BYTE PTR [ecx],al
    2b22:	42                   	inc    edx
    2b23:	72 00                	jb     2b25 <sysEnter_Vector-0x12d4db>
    2b25:	00 00                	add    BYTE PTR [eax],al
    2b27:	63 29                	arpl   WORD PTR [ecx],bp
    2b29:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    2b2f:	01 9c d4 01 00 00 09 	add    DWORD PTR [esp+edx*8+0x9000001],ebx
    2b36:	b8 0b 00 00 01       	mov    eax,0x100000b
    2b3b:	42                   	inc    edx
    2b3c:	72 00                	jb     2b3e <sysEnter_Vector-0x12d4c2>
    2b3e:	00 00                	add    BYTE PTR [eax],al
    2b40:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    2b46:	63 00                	arpl   WORD PTR [eax],ax
    2b48:	01 42 73             	add    DWORD PTR [edx+0x73],eax
    2b4b:	01 00                	add    DWORD PTR [eax],eax
    2b4d:	00 02                	add    BYTE PTR [edx],al
    2b4f:	91                   	xchg   ecx,eax
    2b50:	04 0a                	add    al,0xa
    2b52:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2b53:	00 01                	add    BYTE PTR [ecx],al
    2b55:	42                   	inc    edx
    2b56:	97                   	xchg   edi,eax
    2b57:	00 00                	add    BYTE PTR [eax],al
    2b59:	00 02                	add    BYTE PTR [edx],al
    2b5b:	91                   	xchg   ecx,eax
    2b5c:	08 00                	or     BYTE PTR [eax],al
    2b5e:	10 78 00             	adc    BYTE PTR [eax+0x0],bh
    2b61:	00 00                	add    BYTE PTR [eax],al
    2b63:	04 33                	add    al,0x33
    2b65:	e5 01                	in     eax,0x1
    2b67:	00 00                	add    BYTE PTR [eax],al
    2b69:	05 03 c0 7d 00       	add    eax,0x7dc003
    2b6e:	9f                   	lahf   
    2b6f:	05 04 74 00 00       	add    eax,0x7404
    2b74:	00 00                	add    BYTE PTR [eax],al
    2b76:	a0 01 00 00 04       	mov    al,ds:0x4000001
    2b7b:	00 d1                	add    cl,dl
    2b7d:	0b 00                	or     eax,DWORD PTR [eax]
    2b7f:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2b82:	c3                   	ret    
    2b83:	00 00                	add    BYTE PTR [eax],al
    2b85:	00 0c d1             	add    BYTE PTR [ecx+edx*8],cl
    2b88:	0b 00                	or     eax,DWORD PTR [eax]
    2b8a:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2b8d:	00 00                	add    BYTE PTR [eax],al
    2b8f:	84 29                	test   BYTE PTR [ecx],ch
    2b91:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
    2b97:	7c 0d                	jl     2ba6 <sysEnter_Vector-0x12d45a>
    2b99:	00 00                	add    BYTE PTR [eax],al
    2b9b:	02 01                	add    al,BYTE PTR [ecx]
    2b9d:	08 3f                	or     BYTE PTR [edi],bh
    2b9f:	00 00                	add    BYTE PTR [eax],al
    2ba1:	00 02                	add    BYTE PTR [edx],al
    2ba3:	02 07                	add    al,BYTE PTR [edi]
    2ba5:	0e                   	push   cs
    2ba6:	00 00                	add    BYTE PTR [eax],al
    2ba8:	00 02                	add    BYTE PTR [edx],al
    2baa:	04 07                	add    al,0x7
    2bac:	32 00                	xor    al,BYTE PTR [eax]
    2bae:	00 00                	add    BYTE PTR [eax],al
    2bb0:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2bb3:	2d 00 00 00 02       	sub    eax,0x2000000
    2bb8:	01 06                	add    DWORD PTR [esi],eax
    2bba:	41                   	inc    ecx
    2bbb:	00 00                	add    BYTE PTR [eax],al
    2bbd:	00 02                	add    BYTE PTR [edx],al
    2bbf:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2bc5:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2bcc:	02 08                	add    cl,BYTE PTR [eax]
    2bce:	05 00 00 00 00       	add    eax,0x0
    2bd3:	02 08                	add    cl,BYTE PTR [eax]
    2bd5:	07                   	pop    es
    2bd6:	28 00                	sub    BYTE PTR [eax],al
    2bd8:	00 00                	add    BYTE PTR [eax],al
    2bda:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2be1:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2be4:	2a 01                	sub    al,BYTE PTR [ecx]
    2be6:	00 00                	add    BYTE PTR [eax],al
    2be8:	04 04                	add    al,0x4
    2bea:	05 04 7a 00 00       	add    eax,0x7a04
    2bef:	00 02                	add    BYTE PTR [edx],al
    2bf1:	01 06                	add    DWORD PTR [esi],eax
    2bf3:	48                   	dec    eax
    2bf4:	00 00                	add    BYTE PTR [eax],al
    2bf6:	00 06                	add    BYTE PTR [esi],al
    2bf8:	cf                   	iret   
    2bf9:	06                   	push   es
    2bfa:	00 00                	add    BYTE PTR [eax],al
    2bfc:	02 2e                	add    ch,BYTE PTR [esi]
    2bfe:	25 00 00 00 06       	and    eax,0x6000000
    2c03:	89 05 00 00 02 31    	mov    DWORD PTR ds:0x31020000,eax
    2c09:	2c 00                	sub    al,0x0
    2c0b:	00 00                	add    BYTE PTR [eax],al
    2c0d:	06                   	push   es
    2c0e:	45                   	inc    ebp
    2c0f:	02 00                	add    al,BYTE PTR [eax]
    2c11:	00 02                	add    BYTE PTR [edx],al
    2c13:	34 33                	xor    al,0x33
    2c15:	00 00                	add    BYTE PTR [eax],al
    2c17:	00 06                	add    BYTE PTR [esi],al
    2c19:	91                   	xchg   ecx,eax
    2c1a:	02 00                	add    al,BYTE PTR [eax]
    2c1c:	00 03                	add    BYTE PTR [ebx],al
    2c1e:	d8 33                	fdiv   DWORD PTR [ebx]
    2c20:	00 00                	add    BYTE PTR [eax],al
    2c22:	00 02                	add    BYTE PTR [edx],al
    2c24:	0c 04                	or     al,0x4
    2c26:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2c27:	00 00                	add    BYTE PTR [eax],al
    2c29:	00 07                	add    BYTE PTR [edi],al
    2c2b:	e5 0b                	in     eax,0xb
    2c2d:	00 00                	add    BYTE PTR [eax],al
    2c2f:	01 08                	add    DWORD PTR [eax],ecx
    2c31:	72 00                	jb     2c33 <sysEnter_Vector-0x12d3cd>
    2c33:	00 00                	add    BYTE PTR [eax],al
    2c35:	84 29                	test   BYTE PTR [ecx],ch
    2c37:	00 9f c7 00 00 00    	add    BYTE PTR [edi+0xc7],bl
    2c3d:	01 9c 37 01 00 00 08 	add    DWORD PTR [edi+esi*1+0x8000001],ebx
    2c44:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2c47:	01 08                	add    DWORD PTR [eax],ecx
    2c49:	72 00                	jb     2c4b <sysEnter_Vector-0x12d3b5>
    2c4b:	00 00                	add    BYTE PTR [eax],al
    2c4d:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2c53:	6c                   	ins    BYTE PTR es:[edi],dx
    2c54:	00 01                	add    BYTE PTR [ecx],al
    2c56:	08 4f 00             	or     BYTE PTR [edi+0x0],cl
    2c59:	00 00                	add    BYTE PTR [eax],al
    2c5b:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    2c61:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c62:	00 01                	add    BYTE PTR [ecx],al
    2c64:	08 a2 00 00 00 02    	or     BYTE PTR [edx+0x2000000],ah
    2c6a:	91                   	xchg   ecx,eax
    2c6b:	08 09                	or     BYTE PTR [ecx],cl
    2c6d:	64 00 01             	add    BYTE PTR fs:[ecx],al
    2c70:	0a 37                	or     dh,BYTE PTR [edi]
    2c72:	01 00                	add    DWORD PTR [eax],eax
    2c74:	00 02                	add    BYTE PTR [edx],al
    2c76:	91                   	xchg   ecx,eax
    2c77:	74 09                	je     2c82 <sysEnter_Vector-0x12d37e>
    2c79:	65 00 01             	add    BYTE PTR gs:[ecx],al
    2c7c:	0b 3d 01 00 00 02    	or     edi,DWORD PTR ds:0x2000001
    2c82:	91                   	xchg   ecx,eax
    2c83:	70 0a                	jo     2c8f <sysEnter_Vector-0x12d371>
    2c85:	ed                   	in     eax,dx
    2c86:	0b 00                	or     eax,DWORD PTR [eax]
    2c88:	00 01                	add    BYTE PTR [ecx],al
    2c8a:	0c 8c                	or     al,0x8c
    2c8c:	00 00                	add    BYTE PTR [eax],al
    2c8e:	00 02                	add    BYTE PTR [edx],al
    2c90:	91                   	xchg   ecx,eax
    2c91:	6a 09                	push   0x9
    2c93:	66                   	data16
    2c94:	00 01                	add    BYTE PTR [ecx],al
    2c96:	0d 43 01 00 00       	or     eax,0x143
    2c9b:	02 91 6c 0a f2 0b    	add    dl,BYTE PTR [ecx+0xbf20a6c]
    2ca1:	00 00                	add    BYTE PTR [eax],al
    2ca3:	01 0e                	add    DWORD PTR [esi],ecx
    2ca5:	97                   	xchg   edi,eax
    2ca6:	00 00                	add    BYTE PTR [eax],al
    2ca8:	00 02                	add    BYTE PTR [edx],al
    2caa:	91                   	xchg   ecx,eax
    2cab:	64 00 05 04 81 00 00 	add    BYTE PTR fs:0x8104,al
    2cb2:	00 05 04 8c 00 00    	add    BYTE PTR ds:0x8c04,al
    2cb8:	00 05 04 97 00 00    	add    BYTE PTR ds:0x9704,al
    2cbe:	00 0b                	add    BYTE PTR [ebx],cl
    2cc0:	de 0b                	fimul  WORD PTR [ebx]
    2cc2:	00 00                	add    BYTE PTR [eax],al
    2cc4:	01 1f                	add    DWORD PTR [edi],ebx
    2cc6:	72 00                	jb     2cc8 <sysEnter_Vector-0x12d338>
    2cc8:	00 00                	add    BYTE PTR [eax],al
    2cca:	4b                   	dec    ebx
    2ccb:	2a 00                	sub    al,BYTE PTR [eax]
    2ccd:	9f                   	lahf   
    2cce:	20 00                	and    BYTE PTR [eax],al
    2cd0:	00 00                	add    BYTE PTR [eax],al
    2cd2:	01 9c 8c 01 00 00 08 	add    DWORD PTR [esp+ecx*4+0x8000001],ebx
    2cd9:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    2cdc:	01 1f                	add    DWORD PTR [edi],ebx
    2cde:	72 00                	jb     2ce0 <sysEnter_Vector-0x12d320>
    2ce0:	00 00                	add    BYTE PTR [eax],al
    2ce2:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    2ce8:	6c                   	ins    BYTE PTR es:[edi],dx
    2ce9:	00 01                	add    BYTE PTR [ecx],al
    2ceb:	1f                   	pop    ds
    2cec:	4f                   	dec    edi
    2ced:	00 00                	add    BYTE PTR [eax],al
    2cef:	00 02                	add    BYTE PTR [edx],al
    2cf1:	91                   	xchg   ecx,eax
    2cf2:	04 08                	add    al,0x8
    2cf4:	6c                   	ins    BYTE PTR es:[edi],dx
    2cf5:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    2cf7:	00 01                	add    BYTE PTR [ecx],al
    2cf9:	1f                   	pop    ds
    2cfa:	a2 00 00 00 02       	mov    ds:0x2000000,al
    2cff:	91                   	xchg   ecx,eax
    2d00:	08 00                	or     BYTE PTR [eax],al
    2d02:	0c 78                	or     al,0x78
    2d04:	00 00                	add    BYTE PTR [eax],al
    2d06:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    2d09:	9d                   	popf   
    2d0a:	01 00                	add    DWORD PTR [eax],eax
    2d0c:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
    2d12:	9f                   	lahf   
    2d13:	05 04 74 00 00       	add    eax,0x7404
    2d18:	00 00                	add    BYTE PTR [eax],al
    2d1a:	11 02                	adc    DWORD PTR [edx],eax
    2d1c:	00 00                	add    BYTE PTR [eax],al
    2d1e:	04 00                	add    al,0x0
    2d20:	8e 0c 00             	mov    cs,WORD PTR [eax+eax*1]
    2d23:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2d26:	c3                   	ret    
    2d27:	00 00                	add    BYTE PTR [eax],al
    2d29:	00 0c 0d 0c 00 00 4d 	add    BYTE PTR [ecx*1+0x4d00000c],cl
    2d30:	00 00                	add    BYTE PTR [eax],al
    2d32:	00 6c 2a 00          	add    BYTE PTR [edx+ebp*1+0x0],ch
    2d36:	9f                   	lahf   
    2d37:	57                   	push   edi
    2d38:	00 00                	add    BYTE PTR [eax],al
    2d3a:	00 3a                	add    BYTE PTR [edx],bh
    2d3c:	0e                   	push   cs
    2d3d:	00 00                	add    BYTE PTR [eax],al
    2d3f:	02 01                	add    al,BYTE PTR [ecx]
    2d41:	08 3f                	or     BYTE PTR [edi],bh
    2d43:	00 00                	add    BYTE PTR [eax],al
    2d45:	00 02                	add    BYTE PTR [edx],al
    2d47:	02 07                	add    al,BYTE PTR [edi]
    2d49:	0e                   	push   cs
    2d4a:	00 00                	add    BYTE PTR [eax],al
    2d4c:	00 02                	add    BYTE PTR [edx],al
    2d4e:	04 07                	add    al,0x7
    2d50:	32 00                	xor    al,BYTE PTR [eax]
    2d52:	00 00                	add    BYTE PTR [eax],al
    2d54:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2d57:	2d 00 00 00 02       	sub    eax,0x2000000
    2d5c:	01 06                	add    DWORD PTR [esi],eax
    2d5e:	41                   	inc    ecx
    2d5f:	00 00                	add    BYTE PTR [eax],al
    2d61:	00 02                	add    BYTE PTR [edx],al
    2d63:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    2d69:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2d70:	02 08                	add    cl,BYTE PTR [eax]
    2d72:	05 00 00 00 00       	add    eax,0x0
    2d77:	02 08                	add    cl,BYTE PTR [eax]
    2d79:	07                   	pop    es
    2d7a:	28 00                	sub    BYTE PTR [eax],al
    2d7c:	00 00                	add    BYTE PTR [eax],al
    2d7e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2d85:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2d88:	2a 01                	sub    al,BYTE PTR [ecx]
    2d8a:	00 00                	add    BYTE PTR [eax],al
    2d8c:	04 04                	add    al,0x4
    2d8e:	78 00                	js     2d90 <sysEnter_Vector-0x12d270>
    2d90:	00 00                	add    BYTE PTR [eax],al
    2d92:	02 01                	add    al,BYTE PTR [ecx]
    2d94:	06                   	push   es
    2d95:	48                   	dec    eax
    2d96:	00 00                	add    BYTE PTR [eax],al
    2d98:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    2d9e:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    2da1:	00 00                	add    BYTE PTR [eax],al
    2da3:	00 02                	add    BYTE PTR [edx],al
    2da5:	0c 04                	or     al,0x4
    2da7:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2da8:	00 00                	add    BYTE PTR [eax],al
    2daa:	00 06                	add    BYTE PTR [esi],al
    2dac:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    2daf:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    2db2:	00 00                	add    BYTE PTR [eax],al
    2db4:	00 03                	add    BYTE PTR [ebx],al
    2db6:	15 8b 01 00 00       	adc    eax,0x18b
    2dbb:	07                   	pop    es
    2dbc:	fd                   	std    
    2dbd:	03 00                	add    eax,DWORD PTR [eax]
    2dbf:	00 00                	add    BYTE PTR [eax],al
    2dc1:	07                   	pop    es
    2dc2:	42                   	inc    edx
    2dc3:	04 00                	add    al,0x0
    2dc5:	00 01                	add    BYTE PTR [ecx],al
    2dc7:	07                   	pop    es
    2dc8:	84 02                	test   BYTE PTR [edx],al
    2dca:	00 00                	add    BYTE PTR [eax],al
    2dcc:	02 07                	add    al,BYTE PTR [edi]
    2dce:	4e                   	dec    esi
    2dcf:	03 00                	add    eax,DWORD PTR [eax]
    2dd1:	00 03                	add    BYTE PTR [ebx],al
    2dd3:	07                   	pop    es
    2dd4:	6a 02                	push   0x2
    2dd6:	00 00                	add    BYTE PTR [eax],al
    2dd8:	04 07                	add    al,0x7
    2dda:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    2dde:	05 07 24 04 00       	add    eax,0x42407
    2de3:	00 0a                	add    BYTE PTR [edx],cl
    2de5:	07                   	pop    es
    2de6:	8f 03                	pop    DWORD PTR [ebx]
    2de8:	00 00                	add    BYTE PTR [eax],al
    2dea:	0b 07                	or     eax,DWORD PTR [edi]
    2dec:	d6                   	(bad)  
    2ded:	03 00                	add    eax,DWORD PTR [eax]
    2def:	00 0c 07             	add    BYTE PTR [edi+eax*1],cl
    2df2:	5c                   	pop    esp
    2df3:	03 00                	add    eax,DWORD PTR [eax]
    2df5:	00 0d 07 75 03 00    	add    BYTE PTR ds:0x37507,cl
    2dfb:	00 0e                	add    BYTE PTR [esi],cl
    2dfd:	07                   	pop    es
    2dfe:	77 02                	ja     2e02 <sysEnter_Vector-0x12d1fe>
    2e00:	00 00                	add    BYTE PTR [eax],al
    2e02:	0f 07                	sysret 
    2e04:	b7 03                	mov    bh,0x3
    2e06:	00 00                	add    BYTE PTR [eax],al
    2e08:	10 07                	adc    BYTE PTR [edi],al
    2e0a:	a9 04 00 00 11       	test   eax,0x11000004
    2e0f:	07                   	pop    es
    2e10:	87 04 00             	xchg   DWORD PTR [eax+eax*1],eax
    2e13:	00 4f 07             	add    BYTE PTR [edi+0x7],cl
    2e16:	5c                   	pop    esp
    2e17:	04 00                	add    al,0x0
    2e19:	00 50 07             	add    BYTE PTR [eax+0x7],dl
    2e1c:	f0 03 00             	lock add eax,DWORD PTR [eax]
    2e1f:	00 59 07             	add    BYTE PTR [ecx+0x7],bl
    2e22:	96                   	xchg   esi,eax
    2e23:	04 00                	add    al,0x0
    2e25:	00 61 07             	add    BYTE PTR [ecx+0x7],ah
    2e28:	1b 03                	sbb    eax,DWORD PTR [ebx]
    2e2a:	00 00                	add    BYTE PTR [eax],al
    2e2c:	97                   	xchg   edi,eax
    2e2d:	08 0d 04 00 00 63    	or     BYTE PTR ds:0x63000004,cl
    2e33:	01 08                	add    DWORD PTR [eax],ecx
    2e35:	e3 03                	jecxz  2e3a <sysEnter_Vector-0x12d1c6>
    2e37:	00 00                	add    BYTE PTR [eax],al
    2e39:	64 01 08             	add    DWORD PTR fs:[eax],ecx
    2e3c:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    2e40:	65 01 08             	add    DWORD PTR gs:[eax],ecx
    2e43:	f7 02 00 00 66 01    	test   DWORD PTR [edx],0x1660000
    2e49:	08 d8                	or     al,bl
    2e4b:	04 00                	add    al,0x0
    2e4d:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    2e50:	08 82 03 00 00 68    	or     BYTE PTR [edx+0x68000003],al
    2e56:	01 08                	add    DWORD PTR [eax],ecx
    2e58:	b8 02 00 00 69       	mov    eax,0x69000002
    2e5d:	01 08                	add    DWORD PTR [eax],ecx
    2e5f:	31 04 00             	xor    DWORD PTR [eax+eax*1],eax
    2e62:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    2e65:	08 0b                	or     BYTE PTR [ebx],cl
    2e67:	03 00                	add    eax,DWORD PTR [eax]
    2e69:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    2e6c:	08 79 04             	or     BYTE PTR [ecx+0x4],bh
    2e6f:	00 00                	add    BYTE PTR [eax],al
    2e71:	00 03                	add    BYTE PTR [ebx],al
    2e73:	08 9c 03 00 00 01 03 	or     BYTE PTR [ebx+eax*1+0x3010000],bl
    2e7a:	08 ab 03 00 00 02    	or     BYTE PTR [ebx+0x2000003],ch
    2e80:	03 08                	add    ecx,DWORD PTR [eax]
    2e82:	3e 03 00             	add    eax,DWORD PTR ds:[eax]
    2e85:	00 03                	add    BYTE PTR [ebx],al
    2e87:	03 08                	add    ecx,DWORD PTR [eax]
    2e89:	98                   	cwde   
    2e8a:	02 00                	add    al,BYTE PTR [eax]
    2e8c:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    2e8f:	08 e7                	or     bh,ah
    2e91:	02 00                	add    al,BYTE PTR [eax]
    2e93:	00 05 03 08 2f 03    	add    BYTE PTR ds:0x32f0803,al
    2e99:	00 00                	add    BYTE PTR [eax],al
    2e9b:	06                   	push   es
    2e9c:	03 08                	add    ecx,DWORD PTR [eax]
    2e9e:	c4 03                	les    eax,FWORD PTR [ebx]
    2ea0:	00 00                	add    BYTE PTR [eax],al
    2ea2:	00 09                	add    BYTE PTR [ecx],cl
    2ea4:	00 09                	add    BYTE PTR [ecx],cl
    2ea6:	08 0c 00             	or     BYTE PTR [eax+eax*1],cl
    2ea9:	00 01                	add    BYTE PTR [ecx],al
    2eab:	0a 4f 00             	or     cl,BYTE PTR [edi+0x0]
    2eae:	00 00                	add    BYTE PTR [eax],al
    2eb0:	6c                   	ins    BYTE PTR es:[edi],dx
    2eb1:	2a 00                	sub    al,BYTE PTR [eax]
    2eb3:	9f                   	lahf   
    2eb4:	29 00                	sub    DWORD PTR [eax],eax
    2eb6:	00 00                	add    BYTE PTR [eax],al
    2eb8:	01 9c b3 01 00 00 0a 	add    DWORD PTR [ebx+esi*4+0xa000001],ebx
    2ebf:	1c 0c                	sbb    al,0xc
    2ec1:	00 00                	add    BYTE PTR [eax],al
    2ec3:	01 0a                	add    DWORD PTR [edx],ecx
    2ec5:	b3 01                	mov    bl,0x1
    2ec7:	00 00                	add    BYTE PTR [eax],al
    2ec9:	02 91 00 00 04 04    	add    dl,BYTE PTR [ecx+0x4040000]
    2ecf:	4f                   	dec    edi
    2ed0:	00 00                	add    BYTE PTR [eax],al
    2ed2:	00 09                	add    BYTE PTR [ecx],cl
    2ed4:	fd                   	std    
    2ed5:	0b 00                	or     eax,DWORD PTR [eax]
    2ed7:	00 01                	add    BYTE PTR [ecx],al
    2ed9:	0f 4f 00             	cmovg  eax,DWORD PTR [eax]
    2edc:	00 00                	add    BYTE PTR [eax],al
    2ede:	95                   	xchg   ebp,eax
    2edf:	2a 00                	sub    al,BYTE PTR [eax]
    2ee1:	9f                   	lahf   
    2ee2:	2e 00 00             	add    BYTE PTR cs:[eax],al
    2ee5:	00 01                	add    BYTE PTR [ecx],al
    2ee7:	9c                   	pushf  
    2ee8:	fd                   	std    
    2ee9:	01 00                	add    DWORD PTR [eax],eax
    2eeb:	00 0a                	add    BYTE PTR [edx],cl
    2eed:	f7                   	(bad)  
    2eee:	0b 00                	or     eax,DWORD PTR [eax]
    2ef0:	00 01                	add    BYTE PTR [ecx],al
    2ef2:	0f 4f 00             	cmovg  eax,DWORD PTR [eax]
    2ef5:	00 00                	add    BYTE PTR [eax],al
    2ef7:	02 91 00 0a 02 0c    	add    dl,BYTE PTR [ecx+0xc020a00]
    2efd:	00 00                	add    BYTE PTR [eax],al
    2eff:	01 0f                	add    DWORD PTR [edi],ecx
    2f01:	4f                   	dec    edi
    2f02:	00 00                	add    BYTE PTR [eax],al
    2f04:	00 02                	add    BYTE PTR [edx],al
    2f06:	91                   	xchg   ecx,eax
    2f07:	04 0a                	add    al,0xa
    2f09:	18 0a                	sbb    BYTE PTR [edx],cl
    2f0b:	00 00                	add    BYTE PTR [eax],al
    2f0d:	01 0f                	add    DWORD PTR [edi],ecx
    2f0f:	4f                   	dec    edi
    2f10:	00 00                	add    BYTE PTR [eax],al
    2f12:	00 02                	add    BYTE PTR [edx],al
    2f14:	91                   	xchg   ecx,eax
    2f15:	08 00                	or     BYTE PTR [eax],al
    2f17:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    2f1a:	00 00                	add    BYTE PTR [eax],al
    2f1c:	04 33                	add    al,0x33
    2f1e:	0e                   	push   cs
    2f1f:	02 00                	add    al,BYTE PTR [eax]
    2f21:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
    2f27:	9f                   	lahf   
    2f28:	04 04                	add    al,0x4
    2f2a:	72 00                	jb     2f2c <sysEnter_Vector-0x12d0d4>
    2f2c:	00 00                	add    BYTE PTR [eax],al
    2f2e:	00 89 05 00 00 04    	add    BYTE PTR [ecx+0x4000005],cl
    2f34:	00 2d 0d 00 00 04    	add    BYTE PTR ds:0x400000d,ch
    2f3a:	01 c3                	add    ebx,eax
    2f3c:	00 00                	add    BYTE PTR [eax],al
    2f3e:	00 0c 23             	add    BYTE PTR [ebx+eiz*1],cl
    2f41:	0c 00                	or     al,0x0
    2f43:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    2f46:	00 00                	add    BYTE PTR [eax],al
    2f48:	c4 2a                	les    ebp,FWORD PTR [edx]
    2f4a:	00 9f c4 05 00 00    	add    BYTE PTR [edi+0x5c4],bl
    2f50:	1d 0f 00 00 02       	sbb    eax,0x200000f
    2f55:	87 0d 00 00 02 19    	xchg   DWORD PTR ds:0x19020000,ecx
    2f5b:	30 00                	xor    BYTE PTR [eax],al
    2f5d:	00 00                	add    BYTE PTR [eax],al
    2f5f:	03 7d 0d             	add    edi,DWORD PTR [ebp+0xd]
    2f62:	00 00                	add    BYTE PTR [eax],al
    2f64:	8c 02                	mov    WORD PTR [edx],es
    2f66:	1b fd                	sbb    edi,ebp
    2f68:	00 00                	add    BYTE PTR [eax],al
    2f6a:	00 04 70             	add    BYTE PTR [eax+esi*2],al
    2f6d:	69 64 00 02 1d fd 00 	imul   esp,DWORD PTR [eax+eax*1+0x2],0xfd1d
    2f74:	00 
    2f75:	00 00                	add    BYTE PTR [eax],al
    2f77:	05 35 06 00 00       	add    eax,0x635
    2f7c:	02 1e                	add    bl,BYTE PTR [esi]
    2f7e:	04 01                	add    al,0x1
    2f80:	00 00                	add    BYTE PTR [eax],al
    2f82:	04 05                	add    al,0x5
    2f84:	a3 09 00 00 02       	mov    ds:0x2000009,eax
    2f89:	1f                   	pop    ds
    2f8a:	1b 01                	sbb    eax,DWORD PTR [ecx]
    2f8c:	00 00                	add    BYTE PTR [eax],al
    2f8e:	2c 05                	sub    al,0x5
    2f90:	cc                   	int3   
    2f91:	0d 00 00 02 20       	or     eax,0x20020000
    2f96:	fd                   	std    
    2f97:	00 00                	add    BYTE PTR [eax],al
    2f99:	00 30                	add    BYTE PTR [eax],dh
    2f9b:	04 74                	add    al,0x74
    2f9d:	74 79                	je     3018 <sysEnter_Vector-0x12cfe8>
    2f9f:	00 02                	add    BYTE PTR [edx],al
    2fa1:	21 fd                	and    ebp,edi
    2fa3:	00 00                	add    BYTE PTR [eax],al
    2fa5:	00 34 05 c0 0d 00 00 	add    BYTE PTR [eax*1+0xdc0],dh
    2fac:	02 22                	add    ah,BYTE PTR [edx]
    2fae:	fd                   	std    
    2faf:	00 00                	add    BYTE PTR [eax],al
    2fb1:	00 38                	add    BYTE PTR [eax],bh
    2fb3:	05 22 0d 00 00       	add    eax,0xd22
    2fb8:	02 23                	add    ah,BYTE PTR [ebx]
    2fba:	fd                   	std    
    2fbb:	00 00                	add    BYTE PTR [eax],al
    2fbd:	00 3c 05 be 09 00 00 	add    BYTE PTR [eax*1+0x9be],bh
    2fc4:	02 24 fd 00 00 00 40 	add    ah,BYTE PTR [edi*8+0x40000000]
    2fcb:	05 2e 0d 00 00       	add    eax,0xd2e
    2fd0:	02 24 fd 00 00 00 44 	add    ah,BYTE PTR [edi*8+0x44000000]
    2fd7:	05 fe 0c 00 00       	add    eax,0xcfe
    2fdc:	02 24 fd 00 00 00 48 	add    ah,BYTE PTR [edi*8+0x48000000]
    2fe3:	04 63                	add    al,0x63
    2fe5:	70 75                	jo     305c <sysEnter_Vector-0x12cfa4>
    2fe7:	00 02                	add    BYTE PTR [edx],al
    2fe9:	25 22 01 00 00       	and    eax,0x122
    2fee:	4c                   	dec    esp
    2fef:	05 83 09 00 00       	add    eax,0x983
    2ff4:	02 26                	add    ah,BYTE PTR [esi]
    2ff6:	fd                   	std    
    2ff7:	00 00                	add    BYTE PTR [eax],al
    2ff9:	00 54 05 de          	add    BYTE PTR [ebp+eax*1-0x22],dl
    2ffd:	0c 00                	or     al,0x0
    2fff:	00 02                	add    BYTE PTR [edx],al
    3001:	27                   	daa    
    3002:	fd                   	std    
    3003:	00 00                	add    BYTE PTR [eax],al
    3005:	00 58 05             	add    BYTE PTR [eax+0x5],bl
    3008:	ea 0c 00 00 02 28 fd 	jmp    0xfd28:0x200000c
    300f:	00 00                	add    BYTE PTR [eax],al
    3011:	00 5c 05 5a          	add    BYTE PTR [ebp+eax*1+0x5a],bl
    3015:	0c 00                	or     al,0x0
    3017:	00 02                	add    BYTE PTR [edx],al
    3019:	29 fd                	sub    ebp,edi
    301b:	00 00                	add    BYTE PTR [eax],al
    301d:	00 60 05             	add    BYTE PTR [eax+0x5],ah
    3020:	b2 06                	mov    dl,0x6
    3022:	00 00                	add    BYTE PTR [eax],al
    3024:	02 2a                	add    ch,BYTE PTR [edx]
    3026:	04 01                	add    al,0x1
    3028:	00 00                	add    BYTE PTR [eax],al
    302a:	64 00 06             	add    BYTE PTR fs:[esi],al
    302d:	04 05                	add    al,0x5
    302f:	69 6e 74 00 07 1b 01 	imul   ebp,DWORD PTR [esi+0x74],0x11b0700
    3036:	00 00                	add    BYTE PTR [eax],al
    3038:	14 01                	adc    al,0x1
    303a:	00 00                	add    BYTE PTR [eax],al
    303c:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    303f:	00 00                	add    BYTE PTR [eax],al
    3041:	27                   	daa    
    3042:	00 09                	add    BYTE PTR [ecx],cl
    3044:	04 07                	add    al,0x7
    3046:	2a 01                	sub    al,BYTE PTR [ecx]
    3048:	00 00                	add    BYTE PTR [eax],al
    304a:	09 01                	or     DWORD PTR [ecx],eax
    304c:	06                   	push   es
    304d:	48                   	dec    eax
    304e:	00 00                	add    BYTE PTR [eax],al
    3050:	00 09                	add    BYTE PTR [ecx],cl
    3052:	08 04 b2             	or     BYTE PTR [edx+esi*4],al
    3055:	00 00                	add    BYTE PTR [eax],al
    3057:	00 09                	add    BYTE PTR [ecx],cl
    3059:	01 08                	add    DWORD PTR [eax],ecx
    305b:	3f                   	aas    
    305c:	00 00                	add    BYTE PTR [eax],al
    305e:	00 09                	add    BYTE PTR [ecx],cl
    3060:	02 07                	add    al,BYTE PTR [edi]
    3062:	0e                   	push   cs
    3063:	00 00                	add    BYTE PTR [eax],al
    3065:	00 09                	add    BYTE PTR [ecx],cl
    3067:	04 07                	add    al,0x7
    3069:	32 00                	xor    al,BYTE PTR [eax]
    306b:	00 00                	add    BYTE PTR [eax],al
    306d:	09 04 07             	or     DWORD PTR [edi+eax*1],eax
    3070:	2d 00 00 00 09       	sub    eax,0x9000000
    3075:	01 06                	add    DWORD PTR [esi],eax
    3077:	41                   	inc    ecx
    3078:	00 00                	add    BYTE PTR [eax],al
    307a:	00 09                	add    BYTE PTR [ecx],cl
    307c:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3082:	09 08                	or     DWORD PTR [eax],ecx
    3084:	05 00 00 00 00       	add    eax,0x0
    3089:	09 08                	or     DWORD PTR [eax],ecx
    308b:	07                   	pop    es
    308c:	28 00                	sub    BYTE PTR [eax],al
    308e:	00 00                	add    BYTE PTR [eax],al
    3090:	09 04 05 05 00 00 00 	or     DWORD PTR [eax*1+0x5],eax
    3097:	0a 04 1b             	or     al,BYTE PTR [ebx+ebx*1]
    309a:	01 00                	add    DWORD PTR [eax],eax
    309c:	00 02                	add    BYTE PTR [edx],al
    309e:	cf                   	iret   
    309f:	06                   	push   es
    30a0:	00 00                	add    BYTE PTR [eax],al
    30a2:	03 2e                	add    ebp,DWORD PTR [esi]
    30a4:	29 01                	sub    DWORD PTR [ecx],eax
    30a6:	00 00                	add    BYTE PTR [eax],al
    30a8:	02 89 05 00 00 03    	add    cl,BYTE PTR [ecx+0x3000005]
    30ae:	31 30                	xor    DWORD PTR [eax],esi
    30b0:	01 00                	add    DWORD PTR [eax],eax
    30b2:	00 02                	add    BYTE PTR [edx],al
    30b4:	45                   	inc    ebp
    30b5:	02 00                	add    al,BYTE PTR [eax]
    30b7:	00 03                	add    BYTE PTR [ebx],al
    30b9:	34 37                	xor    al,0x37
    30bb:	01 00                	add    DWORD PTR [eax],eax
    30bd:	00 02                	add    BYTE PTR [edx],al
    30bf:	01 02                	add    DWORD PTR [edx],eax
    30c1:	00 00                	add    BYTE PTR [eax],al
    30c3:	03 56 37             	add    edx,DWORD PTR [esi+0x37]
    30c6:	01 00                	add    DWORD PTR [eax],eax
    30c8:	00 09                	add    BYTE PTR [ecx],cl
    30ca:	0c 04                	or     al,0x4
    30cc:	ad                   	lods   eax,DWORD PTR ds:[esi]
    30cd:	00 00                	add    BYTE PTR [eax],al
    30cf:	00 02                	add    BYTE PTR [edx],al
    30d1:	38 0d 00 00 04 2a    	cmp    BYTE PTR ds:0x2a040000,cl
    30d7:	61                   	popa   
    30d8:	01 00                	add    DWORD PTR [eax],eax
    30da:	00 0b                	add    BYTE PTR [ebx],cl
    30dc:	74 6d                	je     314b <sysEnter_Vector-0x12ceb5>
    30de:	00 2c 04             	add    BYTE PTR [esp+eax*1],ch
    30e1:	2c 3c                	sub    al,0x3c
    30e3:	02 00                	add    al,BYTE PTR [eax]
    30e5:	00 05 b9 0d 00 00    	add    BYTE PTR ds:0xdb9,al
    30eb:	04 2e                	add    al,0x2e
    30ed:	fd                   	std    
    30ee:	00 00                	add    BYTE PTR [eax],al
    30f0:	00 00                	add    BYTE PTR [eax],al
    30f2:	05 13 0d 00 00       	add    eax,0xd13
    30f7:	04 2f                	add    al,0x2f
    30f9:	fd                   	std    
    30fa:	00 00                	add    BYTE PTR [eax],al
    30fc:	00 04 05 32 0c 00 00 	add    BYTE PTR [eax*1+0xc32],al
    3103:	04 30                	add    al,0x30
    3105:	fd                   	std    
    3106:	00 00                	add    BYTE PTR [eax],al
    3108:	00 08                	add    BYTE PTR [eax],cl
    310a:	05 9a 0d 00 00       	add    eax,0xd9a
    310f:	04 31                	add    al,0x31
    3111:	fd                   	std    
    3112:	00 00                	add    BYTE PTR [eax],al
    3114:	00 0c 05 88 0c 00 00 	add    BYTE PTR [eax*1+0xc88],cl
    311b:	04 32                	add    al,0x32
    311d:	fd                   	std    
    311e:	00 00                	add    BYTE PTR [eax],al
    3120:	00 10                	add    BYTE PTR [eax],dl
    3122:	05 a2 0c 00 00       	add    eax,0xca2
    3127:	04 33                	add    al,0x33
    3129:	fd                   	std    
    312a:	00 00                	add    BYTE PTR [eax],al
    312c:	00 14 05 92 0d 00 00 	add    BYTE PTR [eax*1+0xd92],dl
    3133:	04 34                	add    al,0x34
    3135:	fd                   	std    
    3136:	00 00                	add    BYTE PTR [eax],al
    3138:	00 18                	add    BYTE PTR [eax],bl
    313a:	05 1a 0d 00 00       	add    eax,0xd1a
    313f:	04 35                	add    al,0x35
    3141:	fd                   	std    
    3142:	00 00                	add    BYTE PTR [eax],al
    3144:	00 1c 05 d5 0c 00 00 	add    BYTE PTR [eax*1+0xcd5],bl
    314b:	04 36                	add    al,0x36
    314d:	fd                   	std    
    314e:	00 00                	add    BYTE PTR [eax],al
    3150:	00 20                	add    BYTE PTR [eax],ah
    3152:	05 59 0d 00 00       	add    eax,0xd59
    3157:	04 37                	add    al,0x37
    3159:	61                   	popa   
    315a:	01 00                	add    DWORD PTR [eax],eax
    315c:	00 24 05 47 0c 00 00 	add    BYTE PTR [eax*1+0xc47],ah
    3163:	04 38                	add    al,0x38
    3165:	3c 02                	cmp    al,0x2
    3167:	00 00                	add    BYTE PTR [eax],al
    3169:	28 00                	sub    BYTE PTR [eax],al
    316b:	0a 04 42             	or     al,BYTE PTR [edx+eax*2]
    316e:	02 00                	add    al,BYTE PTR [eax]
    3170:	00 0c 1b             	add    BYTE PTR [ebx+ebx*1],cl
    3173:	01 00                	add    DWORD PTR [eax],eax
    3175:	00 0d 78 06 00 00    	add    BYTE PTR ds:0x678,cl
    317b:	17                   	pop    ss
    317c:	01 05 1f c9 02 00    	add    DWORD PTR ds:0x2c91f,eax
    3182:	00 05 31 06 00 00    	add    BYTE PTR ds:0x631,al
    3188:	05 21 c9 02 00       	add    eax,0x2c921
    318d:	00 00                	add    BYTE PTR [eax],al
    318f:	0e                   	push   cs
    3190:	4a                   	dec    edx
    3191:	06                   	push   es
    3192:	00 00                	add    BYTE PTR [eax],al
    3194:	05 22 6e 01 00       	add    eax,0x16e22
    3199:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    319c:	0e                   	push   cs
    319d:	01 06                	add    DWORD PTR [esi],eax
    319f:	00 00                	add    BYTE PTR [eax],al
    31a1:	05 23 84 01 00       	add    eax,0x18423
    31a6:	00 05 01 0e da 06    	add    BYTE PTR ds:0x6da0e01,al
    31ac:	00 00                	add    BYTE PTR [eax],al
    31ae:	05 24 84 01 00       	add    eax,0x18424
    31b3:	00 09                	add    BYTE PTR [ecx],cl
    31b5:	01 0e                	add    DWORD PTR [esi],ecx
    31b7:	09 06                	or     DWORD PTR [esi],eax
    31b9:	00 00                	add    BYTE PTR [eax],al
    31bb:	05 25 79 01 00       	add    eax,0x17925
    31c0:	00 0d 01 0e 21 05    	add    BYTE PTR ds:0x5210e01,cl
    31c6:	00 00                	add    BYTE PTR [eax],al
    31c8:	05 26 79 01 00       	add    eax,0x17926
    31cd:	00 0f                	add    BYTE PTR [edi],cl
    31cf:	01 0e                	add    DWORD PTR [esi],ecx
    31d1:	92                   	xchg   edx,eax
    31d2:	05 00 00 05 27       	add    eax,0x27050000
    31d7:	79 01                	jns    31da <sysEnter_Vector-0x12ce26>
    31d9:	00 00                	add    BYTE PTR [eax],al
    31db:	11 01                	adc    DWORD PTR [ecx],eax
    31dd:	0e                   	push   cs
    31de:	74 05                	je     31e5 <sysEnter_Vector-0x12ce1b>
    31e0:	00 00                	add    BYTE PTR [eax],al
    31e2:	05 28 79 01 00       	add    eax,0x17928
    31e7:	00 13                	add    BYTE PTR [ebx],dl
    31e9:	01 0e                	add    DWORD PTR [esi],ecx
    31eb:	ab                   	stos   DWORD PTR es:[edi],eax
    31ec:	06                   	push   es
    31ed:	00 00                	add    BYTE PTR [eax],al
    31ef:	05 29 79 01 00       	add    eax,0x17929
    31f4:	00 15 01 00 07 1b    	add    BYTE PTR ds:0x1b070001,dl
    31fa:	01 00                	add    DWORD PTR [eax],eax
    31fc:	00 da                	add    dl,bl
    31fe:	02 00                	add    al,BYTE PTR [eax]
    3200:	00 0f                	add    BYTE PTR [edi],cl
    3202:	14 01                	adc    al,0x1
    3204:	00 00                	add    BYTE PTR [eax],al
    3206:	03 01                	add    eax,DWORD PTR [ecx]
    3208:	00 02                	add    BYTE PTR [edx],al
    320a:	51                   	push   ecx
    320b:	06                   	push   es
    320c:	00 00                	add    BYTE PTR [eax],al
    320e:	05 32 47 02 00       	add    eax,0x24732
    3213:	00 09                	add    BYTE PTR [ecx],cl
    3215:	01 02                	add    DWORD PTR [edx],eax
    3217:	6a 06                	push   0x6
    3219:	00 00                	add    BYTE PTR [eax],al
    321b:	10 c5                	adc    ch,al
    321d:	0c 00                	or     al,0x0
    321f:	00 01                	add    BYTE PTR [ecx],al
    3221:	10 bf 03 00 00 c4    	adc    BYTE PTR [edi-0x3bfffffd],bh
    3227:	2a 00                	sub    al,BYTE PTR [eax]
    3229:	9f                   	lahf   
    322a:	79 03                	jns    322f <sysEnter_Vector-0x12cdd1>
    322c:	00 00                	add    BYTE PTR [eax],al
    322e:	01 9c bf 03 00 00 11 	add    DWORD PTR [edi+edi*4+0x11000003],ebx
    3235:	f5                   	cmc    
    3236:	0c 00                	or     al,0x0
    3238:	00 01                	add    BYTE PTR [ecx],al
    323a:	10 bf 03 00 00 02    	adc    BYTE PTR [edi+0x2000003],bh
    3240:	91                   	xchg   ecx,eax
    3241:	00 11                	add    BYTE PTR [ecx],dl
    3243:	b4 0c                	mov    ah,0xc
    3245:	00 00                	add    BYTE PTR [eax],al
    3247:	01 10                	add    DWORD PTR [eax],edx
    3249:	68 01 00 00 02       	push   0x2000001
    324e:	91                   	xchg   ecx,eax
    324f:	04 11                	add    al,0x11
    3251:	a2 0d 00 00 01       	mov    ds:0x100000d,al
    3256:	10 fd                	adc    ch,bh
    3258:	00 00                	add    BYTE PTR [eax],al
    325a:	00 02                	add    BYTE PTR [edx],al
    325c:	91                   	xchg   ecx,eax
    325d:	08 12                	or     BYTE PTR [edx],dl
    325f:	7c 01                	jl     3262 <sysEnter_Vector-0x12cd9e>
    3261:	00 00                	add    BYTE PTR [eax],al
    3263:	01 12                	add    DWORD PTR [edx],edx
    3265:	c5 03                	lds    eax,FWORD PTR [ebx]
    3267:	00 00                	add    BYTE PTR [eax],al
    3269:	02 91 60 12 64 06    	add    dl,BYTE PTR [ecx+0x6641260]
    326f:	00 00                	add    BYTE PTR [eax],al
    3271:	01 13                	add    DWORD PTR [ebx],edx
    3273:	68 01 00 00 02       	push   0x2000001
    3278:	91                   	xchg   ecx,eax
    3279:	6c                   	ins    BYTE PTR es:[edi],dx
    327a:	12 63 0d             	adc    ah,BYTE PTR [ebx+0xd]
    327d:	00 00                	add    BYTE PTR [eax],al
    327f:	01 14 fd 00 00 00 02 	add    DWORD PTR [edi*8+0x2000000],edx
    3286:	91                   	xchg   ecx,eax
    3287:	68 13 70 69 64       	push   0x64697013
    328c:	00 01                	add    BYTE PTR [ecx],al
    328e:	15 fd 00 00 00       	adc    eax,0xfd
    3293:	02 91 64 12 35 06    	add    dl,BYTE PTR [ecx+0x6351264]
    3299:	00 00                	add    BYTE PTR [eax],al
    329b:	01 16                	add    DWORD PTR [esi],edx
    329d:	d5 03                	aad    0x3
    329f:	00 00                	add    BYTE PTR [eax],al
    32a1:	03 91 fc 7e 12 3f    	add    edx,DWORD PTR [ecx+0x3f127efc]
    32a7:	0d 00 00 01 16       	or     eax,0x16010000
    32ac:	d5 03                	aad    0x3
    32ae:	00 00                	add    BYTE PTR [eax],al
    32b0:	03 91 98 7e 12 45    	add    edx,DWORD PTR [ecx+0x45127e98]
    32b6:	0d 00 00 01 16       	or     eax,0x16010000
    32bb:	d5 03                	aad    0x3
    32bd:	00 00                	add    BYTE PTR [eax],al
    32bf:	03 91 b4 7d 12 b7    	add    edx,DWORD PTR [ecx-0x48ed824c]
    32c5:	0c 00                	or     al,0x0
    32c7:	00 01                	add    BYTE PTR [ecx],al
    32c9:	17                   	pop    ss
    32ca:	ac                   	lods   al,BYTE PTR ds:[esi]
    32cb:	01 00                	add    DWORD PTR [eax],eax
    32cd:	00 05 03 20 7e 00    	add    BYTE PTR ds:0x7e2003,al
    32d3:	9f                   	lahf   
    32d4:	14 65                	adc    al,0x65
    32d6:	2b 00                	sub    eax,DWORD PTR [eax]
    32d8:	9f                   	lahf   
    32d9:	ac                   	lods   al,BYTE PTR ds:[esi]
    32da:	02 00                	add    al,BYTE PTR [eax]
    32dc:	00 12                	add    BYTE PTR [edx],dl
    32de:	3a 0c 00             	cmp    cl,BYTE PTR [eax+eax*1]
    32e1:	00 01                	add    BYTE PTR [ecx],al
    32e3:	45                   	inc    ebp
    32e4:	a1 01 00 00 03       	mov    eax,ds:0x3000001
    32e9:	91                   	xchg   ecx,eax
    32ea:	b0 7d                	mov    al,0x7d
    32ec:	00 00                	add    BYTE PTR [eax],al
    32ee:	0a 04 25 00 00 00 07 	or     al,BYTE PTR [eiz*1+0x7000000]
    32f5:	1b 01                	sbb    eax,DWORD PTR [ecx]
    32f7:	00 00                	add    BYTE PTR [eax],al
    32f9:	d5 03                	aad    0x3
    32fb:	00 00                	add    BYTE PTR [eax],al
    32fd:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    3300:	00 00                	add    BYTE PTR [eax],al
    3302:	03 00                	add    eax,DWORD PTR [eax]
    3304:	07                   	pop    es
    3305:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3307:	00 00                	add    BYTE PTR [eax],al
    3309:	e5 03                	in     eax,0x3
    330b:	00 00                	add    BYTE PTR [eax],al
    330d:	08 14 01             	or     BYTE PTR [ecx+eax*1],dl
    3310:	00 00                	add    BYTE PTR [eax],al
    3312:	63 00                	arpl   WORD PTR [eax],ax
    3314:	10 79 0c             	adc    BYTE PTR [ecx+0xc],bh
    3317:	00 00                	add    BYTE PTR [eax],al
    3319:	01 5e bf             	add    DWORD PTR [esi-0x41],ebx
    331c:	03 00                	add    eax,DWORD PTR [eax]
    331e:	00 3d 2e 00 9f 25    	add    BYTE PTR ds:0x259f002e,bh
    3324:	00 00                	add    BYTE PTR [eax],al
    3326:	00 01                	add    BYTE PTR [ecx],al
    3328:	9c                   	pushf  
    3329:	1b 04 00             	sbb    eax,DWORD PTR [eax+eax*1]
    332c:	00 11                	add    BYTE PTR [ecx],dl
    332e:	f5                   	cmc    
    332f:	0c 00                	or     al,0x0
    3331:	00 01                	add    BYTE PTR [ecx],al
    3333:	5e                   	pop    esi
    3334:	bf 03 00 00 02       	mov    edi,0x2000003
    3339:	91                   	xchg   ecx,eax
    333a:	00 11                	add    BYTE PTR [ecx],dl
    333c:	b4 0c                	mov    ah,0xc
    333e:	00 00                	add    BYTE PTR [eax],al
    3340:	01 5e 68             	add    DWORD PTR [esi+0x68],ebx
    3343:	01 00                	add    DWORD PTR [eax],eax
    3345:	00 02                	add    BYTE PTR [edx],al
    3347:	91                   	xchg   ecx,eax
    3348:	04 00                	add    al,0x0
    334a:	15 8f 0c 00 00       	adc    eax,0xc8f
    334f:	01 63 62             	add    DWORD PTR [ebx+0x62],esp
    3352:	2e 00 9f 26 02 00 00 	add    BYTE PTR cs:[edi+0x226],bl
    3359:	01 9c 0b 05 00 00 11 	add    DWORD PTR [ebx+ecx*1+0x11000005],ebx
    3360:	bd 0c 00 00 01       	mov    ebp,0x100000c
    3365:	63 0b                	arpl   WORD PTR [ebx],cx
    3367:	05 00 00 02 91       	add    eax,0x91020000
    336c:	00 11                	add    BYTE PTR [ecx],dl
    336e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    336f:	0d 00 00 01 63       	or     eax,0x63010000
    3374:	fd                   	std    
    3375:	00 00                	add    BYTE PTR [eax],al
    3377:	00 02                	add    BYTE PTR [edx],al
    3379:	91                   	xchg   ecx,eax
    337a:	04 11                	add    al,0x11
    337c:	aa                   	stos   BYTE PTR es:[edi],al
    337d:	0c 00                	or     al,0x0
    337f:	00 01                	add    BYTE PTR [ecx],al
    3381:	63 fd                	arpl   bp,di
    3383:	00 00                	add    BYTE PTR [eax],al
    3385:	00 02                	add    BYTE PTR [edx],al
    3387:	91                   	xchg   ecx,eax
    3388:	08 12                	or     BYTE PTR [edx],dl
    338a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    338b:	0c 00                	or     al,0x0
    338d:	00 01                	add    BYTE PTR [ecx],al
    338f:	65 11 05 00 00 05 03 	adc    DWORD PTR gs:0x3050000,eax
    3396:	4c                   	dec    esp
    3397:	7e 00                	jle    3399 <sysEnter_Vector-0x12cc67>
    3399:	9f                   	lahf   
    339a:	12 1c 05 00 00 01 6a 	adc    bl,BYTE PTR [eax*1+0x6a010000]
    33a1:	17                   	pop    ss
    33a2:	05 00 00 03 91       	add    eax,0x91030000
    33a7:	d8 7e 12             	fdivr  DWORD PTR [esi+0x12]
    33aa:	09 0d 00 00 01 6b    	or     DWORD PTR ds:0x6b010000,ecx
    33b0:	fd                   	std    
    33b1:	00 00                	add    BYTE PTR [eax],al
    33b3:	00 02                	add    BYTE PTR [edx],al
    33b5:	91                   	xchg   ecx,eax
    33b6:	68 12 4f 0c 00       	push   0xc4f12
    33bb:	00 01                	add    BYTE PTR [ecx],al
    33bd:	6c                   	ins    BYTE PTR es:[edi],dx
    33be:	27                   	daa    
    33bf:	05 00 00 03 91       	add    eax,0x91030000
    33c4:	d8 7c 12 4b          	fdivr  DWORD PTR [edx+edx*1+0x4b]
    33c8:	0d 00 00 01 6d       	or     eax,0x6d010000
    33cd:	bf 03 00 00 02       	mov    edi,0x2000003
    33d2:	91                   	xchg   ecx,eax
    33d3:	58                   	pop    eax
    33d4:	14 b9                	adc    al,0xb9
    33d6:	2e 00 9f c7 01 00 00 	add    BYTE PTR cs:[edi+0x1c7],bl
    33dd:	13 63 6e             	adc    esp,DWORD PTR [ebx+0x6e]
    33e0:	74 00                	je     33e2 <sysEnter_Vector-0x12cc1e>
    33e2:	01 6f fd             	add    DWORD PTR [edi-0x3],ebp
    33e5:	00 00                	add    BYTE PTR [eax],al
    33e7:	00 02                	add    BYTE PTR [edx],al
    33e9:	91                   	xchg   ecx,eax
    33ea:	6c                   	ins    BYTE PTR es:[edi],dx
    33eb:	14 e5                	adc    al,0xe5
    33ed:	2e 00 9f 8b 01 00 00 	add    BYTE PTR cs:[edi+0x18b],bl
    33f4:	12 ef                	adc    ch,bh
    33f6:	06                   	push   es
    33f7:	00 00                	add    BYTE PTR [eax],al
    33f9:	01 78 37             	add    DWORD PTR [eax+0x37],edi
    33fc:	05 00 00 02 91       	add    eax,0x91020000
    3401:	64                   	fs
    3402:	14 82                	adc    al,0x82
    3404:	2f                   	das    
    3405:	00 9f ed 00 00 00    	add    BYTE PTR [edi+0xed],bl
    340b:	12 b5 08 00 00 01    	adc    dh,BYTE PTR [ebp+0x1000008]
    3411:	7e 68                	jle    347b <sysEnter_Vector-0x12cb85>
    3413:	01 00                	add    DWORD PTR [eax],eax
    3415:	00 02                	add    BYTE PTR [edx],al
    3417:	91                   	xchg   ecx,eax
    3418:	60                   	pusha  
    3419:	13 70 69             	adc    esi,DWORD PTR [eax+0x69]
    341c:	64 00 01             	add    BYTE PTR fs:[ecx],al
    341f:	7f 3d                	jg     345e <sysEnter_Vector-0x12cba2>
    3421:	05 00 00 03 91       	add    eax,0x91030000
    3426:	d0 7c 12 54          	sar    BYTE PTR [edx+edx*1+0x54],1
    342a:	0d 00 00 01 81       	or     eax,0x81010000
    342f:	fd                   	std    
    3430:	00 00                	add    BYTE PTR [eax],al
    3432:	00 02                	add    BYTE PTR [edx],al
    3434:	91                   	xchg   ecx,eax
    3435:	5c                   	pop    esp
    3436:	00 00                	add    BYTE PTR [eax],al
    3438:	00 00                	add    BYTE PTR [eax],al
    343a:	0a 04 bf             	or     al,BYTE PTR [edi+edi*4]
    343d:	03 00                	add    eax,DWORD PTR [eax]
    343f:	00 0a                	add    BYTE PTR [edx],cl
    3441:	04 da                	add    al,0xda
    3443:	02 00                	add    al,BYTE PTR [eax]
    3445:	00 07                	add    BYTE PTR [edi],al
    3447:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3449:	00 00                	add    BYTE PTR [eax],al
    344b:	27                   	daa    
    344c:	05 00 00 08 14       	add    eax,0x14080000
    3451:	01 00                	add    DWORD PTR [eax],eax
    3453:	00 7f 00             	add    BYTE PTR [edi+0x0],bh
    3456:	07                   	pop    es
    3457:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3459:	00 00                	add    BYTE PTR [eax],al
    345b:	37                   	aaa    
    345c:	05 00 00 08 14       	add    eax,0x14080000
    3461:	01 00                	add    DWORD PTR [eax],eax
    3463:	00 ff                	add    bh,bh
    3465:	00 0a                	add    BYTE PTR [edx],cl
    3467:	04 fd                	add    al,0xfd
    3469:	00 00                	add    BYTE PTR [eax],al
    346b:	00 07                	add    BYTE PTR [edi],al
    346d:	1b 01                	sbb    eax,DWORD PTR [ecx]
    346f:	00 00                	add    BYTE PTR [eax],al
    3471:	4d                   	dec    ebp
    3472:	05 00 00 08 14       	add    eax,0x14080000
    3477:	01 00                	add    DWORD PTR [eax],eax
    3479:	00 07                	add    BYTE PTR [edi],al
    347b:	00 16                	add    BYTE PTR [esi],dl
    347d:	78 00                	js     347f <sysEnter_Vector-0x12cb81>
    347f:	00 00                	add    BYTE PTR [eax],al
    3481:	06                   	push   es
    3482:	33 5e 05             	xor    ebx,DWORD PTR [esi+0x5]
    3485:	00 00                	add    BYTE PTR [eax],al
    3487:	05 03 c0 7d 00       	add    eax,0x7dc003
    348c:	9f                   	lahf   
    348d:	0a 04 68             	or     al,BYTE PTR [eax+ebp*2]
    3490:	01 00                	add    DWORD PTR [eax],eax
    3492:	00 16                	add    BYTE PTR [esi],dl
    3494:	10 02                	adc    BYTE PTR [edx],al
    3496:	00 00                	add    BYTE PTR [eax],al
    3498:	05 35 75 05 00       	add    eax,0x57535
    349d:	00 05 03 d0 7d 00    	add    BYTE PTR ds:0x7dd003,al
    34a3:	9f                   	lahf   
    34a4:	0a 04 8f             	or     al,BYTE PTR [edi+ecx*4]
    34a7:	01 00                	add    DWORD PTR [eax],eax
    34a9:	00 16                	add    BYTE PTR [esi],dl
    34ab:	33 02                	xor    eax,DWORD PTR [edx]
    34ad:	00 00                	add    BYTE PTR [eax],al
    34af:	05 36 84 01 00       	add    eax,0x18436
    34b4:	00 05 03 cc 7d 00    	add    BYTE PTR ds:0x7dcc03,al
    34ba:	9f                   	lahf   
    34bb:	00 bd 03 00 00 04    	add    BYTE PTR [ebp+0x4000003],bh
    34c1:	00 66 0e             	add    BYTE PTR [esi+0xe],ah
    34c4:	00 00                	add    BYTE PTR [eax],al
    34c6:	04 01                	add    al,0x1
    34c8:	c3                   	ret    
    34c9:	00 00                	add    BYTE PTR [eax],al
    34cb:	00 0c f1             	add    BYTE PTR [ecx+esi*8],cl
    34ce:	0d 00 00 4d 00       	or     eax,0x4d0000
    34d3:	00 00                	add    BYTE PTR [eax],al
    34d5:	88 30                	mov    BYTE PTR [eax],dh
    34d7:	00 9f 4b 07 00 00    	add    BYTE PTR [edi+0x74b],bl
    34dd:	75 10                	jne    34ef <sysEnter_Vector-0x12cb11>
    34df:	00 00                	add    BYTE PTR [eax],al
    34e1:	02 bb 08 00 00 02    	add    bh,BYTE PTR [ebx+0x2000008]
    34e7:	28 30                	sub    BYTE PTR [eax],dh
    34e9:	00 00                	add    BYTE PTR [eax],al
    34eb:	00 03                	add    BYTE PTR [ebx],al
    34ed:	04 de                	add    al,0xde
    34ef:	07                   	pop    es
    34f0:	00 00                	add    BYTE PTR [eax],al
    34f2:	3a 00                	cmp    al,BYTE PTR [eax]
    34f4:	00 00                	add    BYTE PTR [eax],al
    34f6:	04 01                	add    al,0x1
    34f8:	06                   	push   es
    34f9:	48                   	dec    eax
    34fa:	00 00                	add    BYTE PTR [eax],al
    34fc:	00 02                	add    BYTE PTR [edx],al
    34fe:	c2 08 00             	ret    0x8
    3501:	00 02                	add    BYTE PTR [edx],al
    3503:	62 25 00 00 00 04    	bound  esp,QWORD PTR ds:0x4000000
    3509:	01 08                	add    DWORD PTR [eax],ecx
    350b:	3f                   	aas    
    350c:	00 00                	add    BYTE PTR [eax],al
    350e:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    3511:	07                   	pop    es
    3512:	0e                   	push   cs
    3513:	00 00                	add    BYTE PTR [eax],al
    3515:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3518:	07                   	pop    es
    3519:	32 00                	xor    al,BYTE PTR [eax]
    351b:	00 00                	add    BYTE PTR [eax],al
    351d:	04 04                	add    al,0x4
    351f:	07                   	pop    es
    3520:	2d 00 00 00 04       	sub    eax,0x4000000
    3525:	01 06                	add    DWORD PTR [esi],eax
    3527:	41                   	inc    ecx
    3528:	00 00                	add    BYTE PTR [eax],al
    352a:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    352d:	05 b9 00 00 00       	add    eax,0xb9
    3532:	05 04 05 69 6e       	add    eax,0x6e690504
    3537:	74 00                	je     3539 <sysEnter_Vector-0x12cac7>
    3539:	04 08                	add    al,0x8
    353b:	05 00 00 00 00       	add    eax,0x0
    3540:	04 08                	add    al,0x8
    3542:	07                   	pop    es
    3543:	28 00                	sub    BYTE PTR [eax],al
    3545:	00 00                	add    BYTE PTR [eax],al
    3547:	04 04                	add    al,0x4
    3549:	05 05 00 00 00       	add    eax,0x5
    354e:	04 04                	add    al,0x4
    3550:	07                   	pop    es
    3551:	2a 01                	sub    al,BYTE PTR [ecx]
    3553:	00 00                	add    BYTE PTR [eax],al
    3555:	06                   	push   es
    3556:	04 3a                	add    al,0x3a
    3558:	00 00                	add    BYTE PTR [eax],al
    355a:	00 04 0c             	add    BYTE PTR [esp+ecx*1],al
    355d:	04 ad                	add    al,0xad
    355f:	00 00                	add    BYTE PTR [eax],al
    3561:	00 07                	add    BYTE PTR [edi],al
    3563:	19 0e                	sbb    DWORD PTR [esi],ecx
    3565:	00 00                	add    BYTE PTR [eax],al
    3567:	01 0b                	add    DWORD PTR [ebx],ecx
    3569:	76 00                	jbe    356b <sysEnter_Vector-0x12ca95>
    356b:	00 00                	add    BYTE PTR [eax],al
    356d:	88 30                	mov    BYTE PTR [eax],dh
    356f:	00 9f 5f 00 00 00    	add    BYTE PTR [edi+0x5f],bl
    3575:	01 9c d8 00 00 00 08 	add    DWORD PTR [eax+ebx*8+0x8000000],ebx
    357c:	73 00                	jae    357e <sysEnter_Vector-0x12ca82>
    357e:	01 0b                	add    DWORD PTR [ebx],ecx
    3580:	d8 00                	fadd   DWORD PTR [eax]
    3582:	00 00                	add    BYTE PTR [eax],al
    3584:	02 91 00 09 69 00    	add    dl,BYTE PTR [ecx+0x690900]
    358a:	01 0d 76 00 00 00    	add    DWORD PTR ds:0x76,ecx
    3590:	02 91 70 00 06 04    	add    dl,BYTE PTR [ecx+0x4060070]
    3596:	de 00                	fiadd  WORD PTR [eax]
    3598:	00 00                	add    BYTE PTR [eax],al
    359a:	06                   	push   es
    359b:	04 e4                	add    al,0xe4
    359d:	00 00                	add    BYTE PTR [eax],al
    359f:	00 0a                	add    BYTE PTR [edx],cl
    35a1:	3a 00                	cmp    al,BYTE PTR [eax]
    35a3:	00 00                	add    BYTE PTR [eax],al
    35a5:	07                   	pop    es
    35a6:	2c 0e                	sub    al,0xe
    35a8:	00 00                	add    BYTE PTR [eax],al
    35aa:	01 22                	add    DWORD PTR [edx],esp
    35ac:	99                   	cdq    
    35ad:	00 00                	add    BYTE PTR [eax],al
    35af:	00 e7                	add    bh,ah
    35b1:	30 00                	xor    BYTE PTR [eax],al
    35b3:	9f                   	lahf   
    35b4:	3e 02 00             	add    al,BYTE PTR ds:[eax]
    35b7:	00 01                	add    BYTE PTR [ecx],al
    35b9:	9c                   	pushf  
    35ba:	c3                   	ret    
    35bb:	01 00                	add    DWORD PTR [eax],eax
    35bd:	00 08                	add    BYTE PTR [eax],cl
    35bf:	73 74                	jae    3635 <sysEnter_Vector-0x12c9cb>
    35c1:	72 00                	jb     35c3 <sysEnter_Vector-0x12ca3d>
    35c3:	01 22                	add    DWORD PTR [edx],esp
    35c5:	99                   	cdq    
    35c6:	00 00                	add    BYTE PTR [eax],al
    35c8:	00 02                	add    BYTE PTR [edx],al
    35ca:	91                   	xchg   ecx,eax
    35cb:	00 08                	add    BYTE PTR [eax],cl
    35cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    35ce:	75 6d                	jne    363d <sysEnter_Vector-0x12c9c3>
    35d0:	00 01                	add    BYTE PTR [ecx],al
    35d2:	22 8b 00 00 00 02    	and    cl,BYTE PTR [ebx+0x2000000]
    35d8:	91                   	xchg   ecx,eax
    35d9:	04 0b                	add    al,0xb
    35db:	33 0e                	xor    ecx,DWORD PTR [esi]
    35dd:	00 00                	add    BYTE PTR [eax],al
    35df:	01 22                	add    DWORD PTR [edx],esp
    35e1:	76 00                	jbe    35e3 <sysEnter_Vector-0x12ca1d>
    35e3:	00 00                	add    BYTE PTR [eax],al
    35e5:	02 91 08 0b da 06    	add    dl,BYTE PTR [ecx+0x6da0b08]
    35eb:	00 00                	add    BYTE PTR [eax],al
    35ed:	01 22                	add    DWORD PTR [edx],esp
    35ef:	76 00                	jbe    35f1 <sysEnter_Vector-0x12ca0f>
    35f1:	00 00                	add    BYTE PTR [eax],al
    35f3:	02 91 0c 0b 38 0e    	add    dl,BYTE PTR [ecx+0xe380b0c]
    35f9:	00 00                	add    BYTE PTR [eax],al
    35fb:	01 22                	add    DWORD PTR [edx],esp
    35fd:	76 00                	jbe    35ff <sysEnter_Vector-0x12ca01>
    35ff:	00 00                	add    BYTE PTR [eax],al
    3601:	02 91 10 0b 2e 01    	add    dl,BYTE PTR [ecx+0x12e0b10]
    3607:	00 00                	add    BYTE PTR [eax],al
    3609:	01 23                	add    DWORD PTR [ebx],esp
    360b:	76 00                	jbe    360d <sysEnter_Vector-0x12c9f3>
    360d:	00 00                	add    BYTE PTR [eax],al
    360f:	02 91 14 0c ff 0d    	add    dl,BYTE PTR [ecx+0xdff0c14]
    3615:	00 00                	add    BYTE PTR [eax],al
    3617:	01 26                	add    DWORD PTR [esi],esp
    3619:	d3 01                	rol    DWORD PTR [ecx],cl
    361b:	00 00                	add    BYTE PTR [eax],al
    361d:	05 03 74 7a 00       	add    eax,0x7a7403
    3622:	9f                   	lahf   
    3623:	09 74 6d 70          	or     DWORD PTR [ebp+ebp*2+0x70],esi
    3627:	00 01                	add    BYTE PTR [ecx],al
    3629:	28 d8                	sub    al,bl
    362b:	01 00                	add    DWORD PTR [eax],eax
    362d:	00 03                	add    BYTE PTR [ebx],al
    362f:	91                   	xchg   ecx,eax
    3630:	9e                   	sahf   
    3631:	7f 09                	jg     363c <sysEnter_Vector-0x12c9c4>
    3633:	63 00                	arpl   WORD PTR [eax],ax
    3635:	01 29                	add    DWORD PTR [ecx],ebp
    3637:	3a 00                	cmp    al,BYTE PTR [eax]
    3639:	00 00                	add    BYTE PTR [eax],al
    363b:	02 91 66 0c d2 01    	add    dl,BYTE PTR [ecx+0x1d20c66]
    3641:	00 00                	add    BYTE PTR [eax],al
    3643:	01 29                	add    DWORD PTR [ecx],ebp
    3645:	3a 00                	cmp    al,BYTE PTR [eax]
    3647:	00 00                	add    BYTE PTR [eax],al
    3649:	02 91 6f 0c e4 0d    	add    dl,BYTE PTR [ecx+0xde40c6f]
    364f:	00 00                	add    BYTE PTR [eax],al
    3651:	01 29                	add    DWORD PTR [ecx],ebp
    3653:	3a 00                	cmp    al,BYTE PTR [eax]
    3655:	00 00                	add    BYTE PTR [eax],al
    3657:	02 91 67 09 69 00    	add    dl,BYTE PTR [ecx+0x690967]
    365d:	01 2a                	add    DWORD PTR [edx],ebp
    365f:	76 00                	jbe    3661 <sysEnter_Vector-0x12c99f>
    3661:	00 00                	add    BYTE PTR [eax],al
    3663:	02 91 68 0d cd 31    	add    dl,BYTE PTR [ecx+0x31cd0d68]
    3669:	00 9f 25 00 00 00    	add    BYTE PTR [edi+0x25],bl
    366f:	0c eb                	or     al,0xeb
    3671:	0d 00 00 01 4d       	or     eax,0x4d010000
    3676:	76 00                	jbe    3678 <sysEnter_Vector-0x12c988>
    3678:	00 00                	add    BYTE PTR [eax],al
    367a:	02 91 60 00 00 0e    	add    dl,BYTE PTR [ecx+0xe000060]
    3680:	3a 00                	cmp    al,BYTE PTR [eax]
    3682:	00 00                	add    BYTE PTR [eax],al
    3684:	d3 01                	rol    DWORD PTR [ecx],cl
    3686:	00 00                	add    BYTE PTR [eax],al
    3688:	0f 92 00             	setb   BYTE PTR [eax]
    368b:	00 00                	add    BYTE PTR [eax],al
    368d:	0f 00 0a             	str    WORD PTR [edx]
    3690:	c3                   	ret    
    3691:	01 00                	add    DWORD PTR [eax],eax
    3693:	00 0e                	add    BYTE PTR [esi],cl
    3695:	3a 00                	cmp    al,BYTE PTR [eax]
    3697:	00 00                	add    BYTE PTR [eax],al
    3699:	e8 01 00 00 0f       	call   f00369f <sysEnter_Vector+0xeed369f>
    369e:	92                   	xchg   edx,eax
    369f:	00 00                	add    BYTE PTR [eax],al
    36a1:	00 41 00             	add    BYTE PTR [ecx+0x0],al
    36a4:	10 06                	adc    BYTE PTR [esi],al
    36a6:	0e                   	push   cs
    36a7:	00 00                	add    BYTE PTR [eax],al
    36a9:	01 69 76             	add    DWORD PTR [ecx+0x76],ebp
    36ac:	00 00                	add    BYTE PTR [eax],al
    36ae:	00 25 33 00 9f 48    	add    BYTE PTR ds:0x489f0033,ah
    36b4:	04 00                	add    al,0x0
    36b6:	00 01                	add    BYTE PTR [ecx],al
    36b8:	9c                   	pushf  
    36b9:	f1                   	icebp  
    36ba:	02 00                	add    al,BYTE PTR [eax]
    36bc:	00 08                	add    BYTE PTR [eax],cl
    36be:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    36c1:	00 01                	add    BYTE PTR [ecx],al
    36c3:	69 99 00 00 00 02 91 	imul   ebx,DWORD PTR [ecx+0x2000000],0x66080091
    36ca:	00 08 66 
    36cd:	6d                   	ins    DWORD PTR es:[edi],dx
    36ce:	74 00                	je     36d0 <sysEnter_Vector-0x12c930>
    36d0:	01 69 de             	add    DWORD PTR [ecx-0x22],ebp
    36d3:	00 00                	add    BYTE PTR [eax],al
    36d5:	00 02                	add    BYTE PTR [edx],al
    36d7:	91                   	xchg   ecx,eax
    36d8:	04 0b                	add    al,0xb
    36da:	e1 09                	loope  36e5 <sysEnter_Vector-0x12c91b>
    36dc:	00 00                	add    BYTE PTR [eax],al
    36de:	01 69 41             	add    DWORD PTR [ecx+0x41],ebp
    36e1:	00 00                	add    BYTE PTR [eax],al
    36e3:	00 02                	add    BYTE PTR [edx],al
    36e5:	91                   	xchg   ecx,eax
    36e6:	08 09                	or     BYTE PTR [ecx],cl
    36e8:	6c                   	ins    BYTE PTR es:[edi],dx
    36e9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    36eb:	00 01                	add    BYTE PTR [ecx],al
    36ed:	6b 76 00 00          	imul   esi,DWORD PTR [esi+0x0],0x0
    36f1:	00 02                	add    BYTE PTR [edx],al
    36f3:	91                   	xchg   ecx,eax
    36f4:	6c                   	ins    BYTE PTR es:[edi],dx
    36f5:	09 6e 75             	or     DWORD PTR [esi+0x75],ebp
    36f8:	6d                   	ins    DWORD PTR es:[edi],dx
    36f9:	00 01                	add    BYTE PTR [ecx],al
    36fb:	6c                   	ins    BYTE PTR es:[edi],dx
    36fc:	61                   	popa   
    36fd:	00 00                	add    BYTE PTR [eax],al
    36ff:	00 02                	add    BYTE PTR [edx],al
    3701:	91                   	xchg   ecx,eax
    3702:	68 09 69 00 01       	push   0x1006909
    3707:	6d                   	ins    DWORD PTR es:[edi],dx
    3708:	76 00                	jbe    370a <sysEnter_Vector-0x12c8f6>
    370a:	00 00                	add    BYTE PTR [eax],al
    370c:	02 91 64 0c 33 0e    	add    dl,BYTE PTR [ecx+0xe330c64]
    3712:	00 00                	add    BYTE PTR [eax],al
    3714:	01 6d 76             	add    DWORD PTR [ebp+0x76],ebp
    3717:	00 00                	add    BYTE PTR [eax],al
    3719:	00 02                	add    BYTE PTR [edx],al
    371b:	91                   	xchg   ecx,eax
    371c:	60                   	pusha  
    371d:	09 73 74             	or     DWORD PTR [ebx+0x74],esi
    3720:	72 00                	jb     3722 <sysEnter_Vector-0x12c8de>
    3722:	01 6e 99             	add    DWORD PTR [esi-0x67],ebp
    3725:	00 00                	add    BYTE PTR [eax],al
    3727:	00 02                	add    BYTE PTR [edx],al
    3729:	91                   	xchg   ecx,eax
    372a:	5c                   	pop    esp
    372b:	09 73 00             	or     DWORD PTR [ebx+0x0],esi
    372e:	01 6f de             	add    DWORD PTR [edi-0x22],ebp
    3731:	00 00                	add    BYTE PTR [eax],al
    3733:	00 02                	add    BYTE PTR [edx],al
    3735:	91                   	xchg   ecx,eax
    3736:	58                   	pop    eax
    3737:	0c 18                	or     al,0x18
    3739:	0a 00                	or     al,BYTE PTR [eax]
    373b:	00 01                	add    BYTE PTR [ecx],al
    373d:	71 76                	jno    37b5 <sysEnter_Vector-0x12c84b>
    373f:	00 00                	add    BYTE PTR [eax],al
    3741:	00 02                	add    BYTE PTR [edx],al
    3743:	91                   	xchg   ecx,eax
    3744:	54                   	push   esp
    3745:	0c d1                	or     al,0xd1
    3747:	0d 00 00 01 73       	or     eax,0x73010000
    374c:	76 00                	jbe    374e <sysEnter_Vector-0x12c8b2>
    374e:	00 00                	add    BYTE PTR [eax],al
    3750:	02 91 50 0c 38 0e    	add    dl,BYTE PTR [ecx+0xe380c50]
    3756:	00 00                	add    BYTE PTR [eax],al
    3758:	01 74 76 00          	add    DWORD PTR [esi+esi*2+0x0],esi
    375c:	00 00                	add    BYTE PTR [eax],al
    375e:	02 91 4c 0c 0f 0e    	add    dl,BYTE PTR [ecx+0xe0f0c4c]
    3764:	00 00                	add    BYTE PTR [eax],al
    3766:	01 76 76             	add    DWORD PTR [esi+0x76],esi
    3769:	00 00                	add    BYTE PTR [eax],al
    376b:	00 02                	add    BYTE PTR [edx],al
    376d:	91                   	xchg   ecx,eax
    376e:	48                   	dec    eax
    376f:	11 dd                	adc    ebp,ebx
    3771:	0d 00 00 01 80       	or     eax,0x80010000
    3776:	69 33 00 9f 12 0e    	imul   esi,DWORD PTR [ebx],0xe129f00
    377c:	36 00 9f 1b 00 00 00 	add    BYTE PTR ss:[edi+0x1b],bl
    3783:	d9 02                	fld    DWORD PTR [edx]
    3785:	00 00                	add    BYTE PTR [eax],al
    3787:	09 69 70             	or     DWORD PTR [ecx+0x70],ebp
    378a:	00 01                	add    BYTE PTR [ecx],al
    378c:	e1 f1                	loope  377f <sysEnter_Vector-0x12c881>
    378e:	02 00                	add    al,BYTE PTR [eax]
    3790:	00 02                	add    BYTE PTR [edx],al
    3792:	91                   	xchg   ecx,eax
    3793:	44                   	inc    esp
    3794:	00 0d 2e 36 00 9f    	add    BYTE PTR ds:0x9f00362e,cl
    379a:	1b 00                	sbb    eax,DWORD PTR [eax]
    379c:	00 00                	add    BYTE PTR [eax],al
    379e:	09 69 70             	or     DWORD PTR [ecx+0x70],ebp
    37a1:	00 01                	add    BYTE PTR [ecx],al
    37a3:	e4 f7                	in     al,0xf7
    37a5:	02 00                	add    al,BYTE PTR [eax]
    37a7:	00 02                	add    BYTE PTR [edx],al
    37a9:	91                   	xchg   ecx,eax
    37aa:	40                   	inc    eax
    37ab:	00 00                	add    BYTE PTR [eax],al
    37ad:	06                   	push   es
    37ae:	04 8b                	add    al,0x8b
    37b0:	00 00                	add    BYTE PTR [eax],al
    37b2:	00 06                	add    BYTE PTR [esi],al
    37b4:	04 76                	add    al,0x76
    37b6:	00 00                	add    BYTE PTR [eax],al
    37b8:	00 13                	add    BYTE PTR [ebx],dl
    37ba:	23 0e                	and    ecx,DWORD PTR [esi]
    37bc:	00 00                	add    BYTE PTR [eax],al
    37be:	01 16                	add    DWORD PTR [esi],edx
    37c0:	01 76 00             	add    DWORD PTR [esi+0x0],esi
    37c3:	00 00                	add    BYTE PTR [eax],al
    37c5:	6d                   	ins    DWORD PTR es:[edi],dx
    37c6:	37                   	aaa    
    37c7:	00 9f 33 00 00 00    	add    BYTE PTR [edi+0x33],bl
    37cd:	01 9c 53 03 00 00 14 	add    DWORD PTR [ebx+edx*2+0x14000003],ebx
    37d4:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    37d7:	00 01                	add    BYTE PTR [ecx],al
    37d9:	16                   	push   ss
    37da:	01 99 00 00 00 02    	add    DWORD PTR [ecx+0x2000000],ebx
    37e0:	91                   	xchg   ecx,eax
    37e1:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    37e4:	6d                   	ins    DWORD PTR es:[edi],dx
    37e5:	74 00                	je     37e7 <sysEnter_Vector-0x12c819>
    37e7:	01 16                	add    DWORD PTR [esi],edx
    37e9:	01 de                	add    esi,ebx
    37eb:	00 00                	add    BYTE PTR [eax],al
    37ed:	00 02                	add    BYTE PTR [edx],al
    37ef:	91                   	xchg   ecx,eax
    37f0:	04 15                	add    al,0x15
    37f2:	16                   	push   ss
    37f3:	e1 09                	loope  37fe <sysEnter_Vector-0x12c802>
    37f5:	00 00                	add    BYTE PTR [eax],al
    37f7:	01 18                	add    DWORD PTR [eax],ebx
    37f9:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    37fc:	00 00                	add    BYTE PTR [eax],al
    37fe:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    3804:	01 19                	add    DWORD PTR [ecx],ebx
    3806:	01 76 00             	add    DWORD PTR [esi+0x0],esi
    3809:	00 00                	add    BYTE PTR [eax],al
    380b:	02 91 6c 00 13 07    	add    dl,BYTE PTR [ecx+0x713006c]
    3811:	0e                   	push   cs
    3812:	00 00                	add    BYTE PTR [eax],al
    3814:	01 21                	add    DWORD PTR [ecx],esp
    3816:	01 76 00             	add    DWORD PTR [esi+0x0],esi
    3819:	00 00                	add    BYTE PTR [eax],al
    381b:	a0 37 00 9f 33       	mov    al,ds:0x339f0037
    3820:	00 00                	add    BYTE PTR [eax],al
    3822:	00 01                	add    BYTE PTR [ecx],al
    3824:	9c                   	pushf  
    3825:	a9 03 00 00 14       	test   eax,0x14000003
    382a:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    382d:	00 01                	add    BYTE PTR [ecx],al
    382f:	21 01                	and    DWORD PTR [ecx],eax
    3831:	99                   	cdq    
    3832:	00 00                	add    BYTE PTR [eax],al
    3834:	00 02                	add    BYTE PTR [edx],al
    3836:	91                   	xchg   ecx,eax
    3837:	00 14 66             	add    BYTE PTR [esi+eiz*2],dl
    383a:	6d                   	ins    DWORD PTR es:[edi],dx
    383b:	74 00                	je     383d <sysEnter_Vector-0x12c7c3>
    383d:	01 21                	add    DWORD PTR [ecx],esp
    383f:	01 de                	add    esi,ebx
    3841:	00 00                	add    BYTE PTR [eax],al
    3843:	00 02                	add    BYTE PTR [edx],al
    3845:	91                   	xchg   ecx,eax
    3846:	04 15                	add    al,0x15
    3848:	16                   	push   ss
    3849:	e1 09                	loope  3854 <sysEnter_Vector-0x12c7ac>
    384b:	00 00                	add    BYTE PTR [eax],al
    384d:	01 23                	add    DWORD PTR [ebx],esp
    384f:	01 41 00             	add    DWORD PTR [ecx+0x0],eax
    3852:	00 00                	add    BYTE PTR [eax],al
    3854:	02 91 68 17 69 00    	add    dl,BYTE PTR [ecx+0x691768]
    385a:	01 24 01             	add    DWORD PTR [ecx+eax*1],esp
    385d:	76 00                	jbe    385f <sysEnter_Vector-0x12c7a1>
    385f:	00 00                	add    BYTE PTR [eax],al
    3861:	02 91 6c 00 18 78    	add    dl,BYTE PTR [ecx+0x7818006c]
    3867:	00 00                	add    BYTE PTR [eax],al
    3869:	00 03                	add    BYTE PTR [ebx],al
    386b:	33 ba 03 00 00 05    	xor    edi,DWORD PTR [edx+0x5000003]
    3871:	03 c0                	add    eax,eax
    3873:	7d 00                	jge    3875 <sysEnter_Vector-0x12c78b>
    3875:	9f                   	lahf   
    3876:	06                   	push   es
    3877:	04 99                	add    al,0x99
    3879:	00 00                	add    BYTE PTR [eax],al
    387b:	00 00                	add    BYTE PTR [eax],al
    387d:	dc 00                	fadd   QWORD PTR [eax]
    387f:	00 00                	add    BYTE PTR [eax],al
    3881:	04 00                	add    al,0x0
    3883:	bc 0f 00 00 04       	mov    esp,0x400000f
    3888:	01 c3                	add    ebx,eax
    388a:	00 00                	add    BYTE PTR [eax],al
    388c:	00 0c 4a             	add    BYTE PTR [edx+ecx*2],cl
    388f:	0e                   	push   cs
    3890:	00 00                	add    BYTE PTR [eax],al
    3892:	4d                   	dec    ebp
    3893:	00 00                	add    BYTE PTR [eax],al
    3895:	00 d4                	add    ah,dl
    3897:	37                   	aaa    
    3898:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    389e:	3d 12 00 00 02       	cmp    eax,0x2000012
    38a3:	01 08                	add    DWORD PTR [eax],ecx
    38a5:	3f                   	aas    
    38a6:	00 00                	add    BYTE PTR [eax],al
    38a8:	00 02                	add    BYTE PTR [edx],al
    38aa:	02 07                	add    al,BYTE PTR [edi]
    38ac:	0e                   	push   cs
    38ad:	00 00                	add    BYTE PTR [eax],al
    38af:	00 02                	add    BYTE PTR [edx],al
    38b1:	04 07                	add    al,0x7
    38b3:	32 00                	xor    al,BYTE PTR [eax]
    38b5:	00 00                	add    BYTE PTR [eax],al
    38b7:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    38ba:	2d 00 00 00 02       	sub    eax,0x2000000
    38bf:	01 06                	add    DWORD PTR [esi],eax
    38c1:	41                   	inc    ecx
    38c2:	00 00                	add    BYTE PTR [eax],al
    38c4:	00 02                	add    BYTE PTR [edx],al
    38c6:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    38cc:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    38d3:	02 08                	add    cl,BYTE PTR [eax]
    38d5:	05 00 00 00 00       	add    eax,0x0
    38da:	02 08                	add    cl,BYTE PTR [eax]
    38dc:	07                   	pop    es
    38dd:	28 00                	sub    BYTE PTR [eax],al
    38df:	00 00                	add    BYTE PTR [eax],al
    38e1:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    38e8:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    38eb:	2a 01                	sub    al,BYTE PTR [ecx]
    38ed:	00 00                	add    BYTE PTR [eax],al
    38ef:	04 04                	add    al,0x4
    38f1:	78 00                	js     38f3 <sysEnter_Vector-0x12c70d>
    38f3:	00 00                	add    BYTE PTR [eax],al
    38f5:	02 01                	add    al,BYTE PTR [ecx]
    38f7:	06                   	push   es
    38f8:	48                   	dec    eax
    38f9:	00 00                	add    BYTE PTR [eax],al
    38fb:	00 02                	add    BYTE PTR [edx],al
    38fd:	0c 04                	or     al,0x4
    38ff:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3900:	00 00                	add    BYTE PTR [eax],al
    3902:	00 05 56 0e 00 00    	add    BYTE PTR ds:0xe56,al
    3908:	01 11                	add    DWORD PTR [ecx],edx
    390a:	d4 37                	aam    0x37
    390c:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
    3912:	01 9c b8 00 00 00 06 	add    DWORD PTR [eax+edi*4+0x6000000],ebx
    3919:	5f                   	pop    edi
    391a:	0e                   	push   cs
    391b:	00 00                	add    BYTE PTR [eax],al
    391d:	01 13                	add    DWORD PTR [ebx],edx
    391f:	b8 00 00 00 02       	mov    eax,0x2000000
    3924:	91                   	xchg   ecx,eax
    3925:	67 06                	addr16 push es
    3927:	42                   	inc    edx
    3928:	0e                   	push   cs
    3929:	00 00                	add    BYTE PTR [eax],al
    392b:	01 14 4f             	add    DWORD PTR [edi+ecx*2],edx
    392e:	00 00                	add    BYTE PTR [eax],al
    3930:	00 02                	add    BYTE PTR [edx],al
    3932:	91                   	xchg   ecx,eax
    3933:	6c                   	ins    BYTE PTR es:[edi],dx
    3934:	00 07                	add    BYTE PTR [edi],al
    3936:	78 00                	js     3938 <sysEnter_Vector-0x12c6c8>
    3938:	00 00                	add    BYTE PTR [eax],al
    393a:	c8 00 00 00          	enter  0x0,0x0
    393e:	08 6b 00             	or     BYTE PTR [ebx+0x0],ch
    3941:	00 00                	add    BYTE PTR [eax],al
    3943:	04 00                	add    al,0x0
    3945:	09 78 00             	or     DWORD PTR [eax+0x0],edi
    3948:	00 00                	add    BYTE PTR [eax],al
    394a:	02 33                	add    dh,BYTE PTR [ebx]
    394c:	d9 00                	fld    DWORD PTR [eax]
    394e:	00 00                	add    BYTE PTR [eax],al
    3950:	05 03 c0 7d 00       	add    eax,0x7dc003
    3955:	9f                   	lahf   
    3956:	04 04                	add    al,0x4
    3958:	72 00                	jb     395a <sysEnter_Vector-0x12c6a6>
    395a:	00 00                	add    BYTE PTR [eax],al
    395c:	00 bc 01 00 00 04 00 	add    BYTE PTR [ecx+eax*1+0x40000],bh
    3963:	39 10                	cmp    DWORD PTR [eax],edx
    3965:	00 00                	add    BYTE PTR [eax],al
    3967:	04 01                	add    al,0x1
    3969:	c3                   	ret    
    396a:	00 00                	add    BYTE PTR [eax],al
    396c:	00 0c 8d 0e 00 00 4d 	add    BYTE PTR [ecx*4+0x4d00000e],cl
    3973:	00 00                	add    BYTE PTR [eax],al
    3975:	00 58 38             	add    BYTE PTR [eax+0x38],bl
    3978:	00 9f 11 01 00 00    	add    BYTE PTR [edi+0x111],bl
    397e:	98                   	cwde   
    397f:	12 00                	adc    al,BYTE PTR [eax]
    3981:	00 02                	add    BYTE PTR [edx],al
    3983:	04 05                	add    al,0x5
    3985:	69 6e 74 00 03 91 02 	imul   ebp,DWORD PTR [esi+0x74],0x2910300
    398c:	00 00                	add    BYTE PTR [eax],al
    398e:	02 d8                	add    bl,al
    3990:	37                   	aaa    
    3991:	00 00                	add    BYTE PTR [eax],al
    3993:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3996:	07                   	pop    es
    3997:	32 00                	xor    al,BYTE PTR [eax]
    3999:	00 00                	add    BYTE PTR [eax],al
    399b:	04 04                	add    al,0x4
    399d:	05 05 00 00 00       	add    eax,0x5
    39a2:	04 08                	add    al,0x8
    39a4:	05 00 00 00 00       	add    eax,0x0
    39a9:	04 0c                	add    al,0xc
    39ab:	04 ad                	add    al,0xad
    39ad:	00 00                	add    BYTE PTR [eax],al
    39af:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    39b2:	06                   	push   es
    39b3:	48                   	dec    eax
    39b4:	00 00                	add    BYTE PTR [eax],al
    39b6:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    39b9:	08 3f                	or     BYTE PTR [edi],bh
    39bb:	00 00                	add    BYTE PTR [eax],al
    39bd:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    39c0:	07                   	pop    es
    39c1:	0e                   	push   cs
    39c2:	00 00                	add    BYTE PTR [eax],al
    39c4:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    39c7:	07                   	pop    es
    39c8:	2d 00 00 00 04       	sub    eax,0x4000000
    39cd:	01 06                	add    DWORD PTR [esi],eax
    39cf:	41                   	inc    ecx
    39d0:	00 00                	add    BYTE PTR [eax],al
    39d2:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    39d5:	05 b9 00 00 00       	add    eax,0xb9
    39da:	04 08                	add    al,0x8
    39dc:	07                   	pop    es
    39dd:	28 00                	sub    BYTE PTR [eax],al
    39df:	00 00                	add    BYTE PTR [eax],al
    39e1:	04 04                	add    al,0x4
    39e3:	07                   	pop    es
    39e4:	2a 01                	sub    al,BYTE PTR [ecx]
    39e6:	00 00                	add    BYTE PTR [eax],al
    39e8:	05 04 53 00 00       	add    eax,0x5304
    39ed:	00 06                	add    BYTE PTR [esi],al
    39ef:	86 0e                	xchg   BYTE PTR [esi],cl
    39f1:	00 00                	add    BYTE PTR [eax],al
    39f3:	01 1e                	add    DWORD PTR [esi],ebx
    39f5:	8b 00                	mov    eax,DWORD PTR [eax]
    39f7:	00 00                	add    BYTE PTR [eax],al
    39f9:	58                   	pop    eax
    39fa:	38 00                	cmp    BYTE PTR [eax],al
    39fc:	9f                   	lahf   
    39fd:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3a00:	00 01                	add    BYTE PTR [ecx],al
    3a02:	9c                   	pushf  
    3a03:	c7 00 00 00 07 b8    	mov    DWORD PTR [eax],0xb8070000
    3a09:	0b 00                	or     eax,DWORD PTR [eax]
    3a0b:	00 01                	add    BYTE PTR [ecx],al
    3a0d:	1e                   	push   ds
    3a0e:	8b 00                	mov    eax,DWORD PTR [eax]
    3a10:	00 00                	add    BYTE PTR [eax],al
    3a12:	02 91 00 08 73 72    	add    dl,BYTE PTR [ecx+0x72730800]
    3a18:	63 00                	arpl   WORD PTR [eax],ax
    3a1a:	01 1e                	add    DWORD PTR [esi],ebx
    3a1c:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    3a22:	04 00                	add    al,0x0
    3a24:	05 04 cd 00 00       	add    eax,0xcd04
    3a29:	00 09                	add    BYTE PTR [ecx],cl
    3a2b:	53                   	push   ebx
    3a2c:	00 00                	add    BYTE PTR [eax],al
    3a2e:	00 06                	add    BYTE PTR [esi],al
    3a30:	aa                   	stos   BYTE PTR es:[edi],al
    3a31:	0e                   	push   cs
    3a32:	00 00                	add    BYTE PTR [eax],al
    3a34:	01 24 8b             	add    DWORD PTR [ebx+ecx*4],esp
    3a37:	00 00                	add    BYTE PTR [eax],al
    3a39:	00 96 38 00 9f 3e    	add    BYTE PTR [esi+0x3e9f0038],dl
    3a3f:	00 00                	add    BYTE PTR [eax],al
    3a41:	00 01                	add    BYTE PTR [ecx],al
    3a43:	9c                   	pushf  
    3a44:	08 01                	or     BYTE PTR [ecx],al
    3a46:	00 00                	add    BYTE PTR [eax],al
    3a48:	07                   	pop    es
    3a49:	b8 0b 00 00 01       	mov    eax,0x100000b
    3a4e:	24 8b                	and    al,0x8b
    3a50:	00 00                	add    BYTE PTR [eax],al
    3a52:	00 02                	add    BYTE PTR [edx],al
    3a54:	91                   	xchg   ecx,eax
    3a55:	00 08                	add    BYTE PTR [eax],cl
    3a57:	73 72                	jae    3acb <sysEnter_Vector-0x12c535>
    3a59:	63 00                	arpl   WORD PTR [eax],ax
    3a5b:	01 24 c7             	add    DWORD PTR [edi+eax*8],esp
    3a5e:	00 00                	add    BYTE PTR [eax],al
    3a60:	00 02                	add    BYTE PTR [edx],al
    3a62:	91                   	xchg   ecx,eax
    3a63:	04 00                	add    al,0x0
    3a65:	06                   	push   es
    3a66:	70 0e                	jo     3a76 <sysEnter_Vector-0x12c58a>
    3a68:	00 00                	add    BYTE PTR [eax],al
    3a6a:	01 2a                	add    DWORD PTR [edx],ebp
    3a6c:	8b 00                	mov    eax,DWORD PTR [eax]
    3a6e:	00 00                	add    BYTE PTR [eax],al
    3a70:	d4 38                	aam    0x38
    3a72:	00 9f 6f 00 00 00    	add    BYTE PTR [edi+0x6f],bl
    3a78:	01 9c 66 01 00 00 07 	add    DWORD PTR [esi+eiz*2+0x7000001],ebx
    3a7f:	b8 0b 00 00 01       	mov    eax,0x100000b
    3a84:	2a 8b 00 00 00 02    	sub    cl,BYTE PTR [ebx+0x2000000]
    3a8a:	91                   	xchg   ecx,eax
    3a8b:	00 08                	add    BYTE PTR [eax],cl
    3a8d:	73 72                	jae    3b01 <sysEnter_Vector-0x12c4ff>
    3a8f:	63 00                	arpl   WORD PTR [eax],ax
    3a91:	01 2a                	add    DWORD PTR [edx],ebp
    3a93:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    3a99:	04 08                	add    al,0x8
    3a9b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3a9c:	00 01                	add    BYTE PTR [ecx],al
    3a9e:	2a 2c 00             	sub    ch,BYTE PTR [eax+eax*1]
    3aa1:	00 00                	add    BYTE PTR [eax],al
    3aa3:	02 91 08 0a 64 0e    	add    dl,BYTE PTR [ecx+0xe640a08]
    3aa9:	00 00                	add    BYTE PTR [eax],al
    3aab:	01 2c 2c             	add    DWORD PTR [esp+ebp*1],ebp
    3aae:	00 00                	add    BYTE PTR [eax],al
    3ab0:	00 02                	add    BYTE PTR [edx],al
    3ab2:	91                   	xchg   ecx,eax
    3ab3:	6c                   	ins    BYTE PTR es:[edi],dx
    3ab4:	0a 79 0e             	or     bh,BYTE PTR [ecx+0xe]
    3ab7:	00 00                	add    BYTE PTR [eax],al
    3ab9:	01 2d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebp
    3abf:	02 91 68 00 06 a2    	add    dl,BYTE PTR [ecx-0x5df9ff98]
    3ac5:	0e                   	push   cs
    3ac6:	00 00                	add    BYTE PTR [eax],al
    3ac8:	01 38                	add    DWORD PTR [eax],edi
    3aca:	8b 00                	mov    eax,DWORD PTR [eax]
    3acc:	00 00                	add    BYTE PTR [eax],al
    3ace:	43                   	inc    ebx
    3acf:	39 00                	cmp    DWORD PTR [eax],eax
    3ad1:	9f                   	lahf   
    3ad2:	26 00 00             	add    BYTE PTR es:[eax],al
    3ad5:	00 01                	add    BYTE PTR [ecx],al
    3ad7:	9c                   	pushf  
    3ad8:	a8 01                	test   al,0x1
    3ada:	00 00                	add    BYTE PTR [eax],al
    3adc:	07                   	pop    es
    3add:	b8 0b 00 00 01       	mov    eax,0x100000b
    3ae2:	38 8b 00 00 00 02    	cmp    BYTE PTR [ebx+0x2000000],cl
    3ae8:	91                   	xchg   ecx,eax
    3ae9:	00 08                	add    BYTE PTR [eax],cl
    3aeb:	73 72                	jae    3b5f <sysEnter_Vector-0x12c4a1>
    3aed:	63 00                	arpl   WORD PTR [eax],ax
    3aef:	01 38                	add    DWORD PTR [eax],edi
    3af1:	c7 00 00 00 02 91    	mov    DWORD PTR [eax],0x91020000
    3af7:	04 08                	add    al,0x8
    3af9:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3afa:	00 01                	add    BYTE PTR [ecx],al
    3afc:	38 2c 00             	cmp    BYTE PTR [eax+eax*1],ch
    3aff:	00 00                	add    BYTE PTR [eax],al
    3b01:	02 91 08 00 0b 78    	add    dl,BYTE PTR [ecx+0x780b0008]
    3b07:	00 00                	add    BYTE PTR [eax],al
    3b09:	00 03                	add    BYTE PTR [ebx],al
    3b0b:	33 b9 01 00 00 05    	xor    edi,DWORD PTR [ecx+0x5000001]
    3b11:	03 c0                	add    eax,eax
    3b13:	7d 00                	jge    3b15 <sysEnter_Vector-0x12c4eb>
    3b15:	9f                   	lahf   
    3b16:	05 04 8b 00 00       	add    eax,0x8b04
    3b1b:	00 00                	add    BYTE PTR [eax],al
    3b1d:	96                   	xchg   esi,eax
    3b1e:	01 00                	add    DWORD PTR [eax],eax
    3b20:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3b23:	da 10                	ficom  DWORD PTR [eax]
    3b25:	00 00                	add    BYTE PTR [eax],al
    3b27:	04 01                	add    al,0x1
    3b29:	c3                   	ret    
    3b2a:	00 00                	add    BYTE PTR [eax],al
    3b2c:	00 0c c1             	add    BYTE PTR [ecx+eax*8],cl
    3b2f:	0e                   	push   cs
    3b30:	00 00                	add    BYTE PTR [eax],al
    3b32:	4d                   	dec    ebp
    3b33:	00 00                	add    BYTE PTR [eax],al
    3b35:	00 6c 39 00          	add    BYTE PTR [ecx+edi*1+0x0],ch
    3b39:	9f                   	lahf   
    3b3a:	7b 00                	jnp    3b3c <sysEnter_Vector-0x12c4c4>
    3b3c:	00 00                	add    BYTE PTR [eax],al
    3b3e:	57                   	push   edi
    3b3f:	13 00                	adc    eax,DWORD PTR [eax]
    3b41:	00 02                	add    BYTE PTR [edx],al
    3b43:	01 08                	add    DWORD PTR [eax],ecx
    3b45:	3f                   	aas    
    3b46:	00 00                	add    BYTE PTR [eax],al
    3b48:	00 02                	add    BYTE PTR [edx],al
    3b4a:	02 07                	add    al,BYTE PTR [edi]
    3b4c:	0e                   	push   cs
    3b4d:	00 00                	add    BYTE PTR [eax],al
    3b4f:	00 02                	add    BYTE PTR [edx],al
    3b51:	04 07                	add    al,0x7
    3b53:	32 00                	xor    al,BYTE PTR [eax]
    3b55:	00 00                	add    BYTE PTR [eax],al
    3b57:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3b5a:	2d 00 00 00 02       	sub    eax,0x2000000
    3b5f:	01 06                	add    DWORD PTR [esi],eax
    3b61:	41                   	inc    ecx
    3b62:	00 00                	add    BYTE PTR [eax],al
    3b64:	00 02                	add    BYTE PTR [edx],al
    3b66:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3b6c:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3b73:	02 08                	add    cl,BYTE PTR [eax]
    3b75:	05 00 00 00 00       	add    eax,0x0
    3b7a:	02 08                	add    cl,BYTE PTR [eax]
    3b7c:	07                   	pop    es
    3b7d:	28 00                	sub    BYTE PTR [eax],al
    3b7f:	00 00                	add    BYTE PTR [eax],al
    3b81:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3b88:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3b8b:	2a 01                	sub    al,BYTE PTR [ecx]
    3b8d:	00 00                	add    BYTE PTR [eax],al
    3b8f:	04 04                	add    al,0x4
    3b91:	78 00                	js     3b93 <sysEnter_Vector-0x12c46d>
    3b93:	00 00                	add    BYTE PTR [eax],al
    3b95:	02 01                	add    al,BYTE PTR [ecx]
    3b97:	06                   	push   es
    3b98:	48                   	dec    eax
    3b99:	00 00                	add    BYTE PTR [eax],al
    3b9b:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    3ba1:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    3ba4:	00 00                	add    BYTE PTR [eax],al
    3ba6:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    3bac:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    3baf:	00 00                	add    BYTE PTR [eax],al
    3bb1:	00 02                	add    BYTE PTR [edx],al
    3bb3:	0c 04                	or     al,0x4
    3bb5:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3bb6:	00 00                	add    BYTE PTR [eax],al
    3bb8:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3bbb:	a2 00 00 00 06       	mov    ds:0x6000000,al
    3bc0:	78 00                	js     3bc2 <sysEnter_Vector-0x12c43e>
    3bc2:	00 00                	add    BYTE PTR [eax],al
    3bc4:	02 01                	add    al,BYTE PTR [ecx]
    3bc6:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    3bc9:	00 00                	add    BYTE PTR [eax],al
    3bcb:	02 08                	add    cl,BYTE PTR [eax]
    3bcd:	04 b2                	add    al,0xb2
    3bcf:	00 00                	add    BYTE PTR [eax],al
    3bd1:	00 07                	add    BYTE PTR [edi],al
    3bd3:	b2 0e                	mov    dl,0xe
    3bd5:	00 00                	add    BYTE PTR [eax],al
    3bd7:	01 1a                	add    DWORD PTR [edx],ebx
    3bd9:	4f                   	dec    edi
    3bda:	00 00                	add    BYTE PTR [eax],al
    3bdc:	00 6c 39 00          	add    BYTE PTR [ecx+edi*1+0x0],ch
    3be0:	9f                   	lahf   
    3be1:	5e                   	pop    esi
    3be2:	00 00                	add    BYTE PTR [eax],al
    3be4:	00 01                	add    BYTE PTR [ecx],al
    3be6:	9c                   	pushf  
    3be7:	1b 01                	sbb    eax,DWORD PTR [ecx]
    3be9:	00 00                	add    BYTE PTR [eax],al
    3beb:	08 70 31             	or     BYTE PTR [eax+0x31],dh
    3bee:	00 01                	add    BYTE PTR [ecx],al
    3bf0:	1a 9c 00 00 00 02 91 	sbb    bl,BYTE PTR [eax+eax*1-0x6efe0000]
    3bf7:	00 08                	add    BYTE PTR [eax],cl
    3bf9:	70 32                	jo     3c2d <sysEnter_Vector-0x12c3d3>
    3bfb:	00 01                	add    BYTE PTR [ecx],al
    3bfd:	1a 9c 00 00 00 02 91 	sbb    bl,BYTE PTR [eax+eax*1-0x6efe0000]
    3c04:	04 09                	add    al,0x9
    3c06:	73 31                	jae    3c39 <sysEnter_Vector-0x12c3c7>
    3c08:	00 01                	add    BYTE PTR [ecx],al
    3c0a:	1c 1b                	sbb    al,0x1b
    3c0c:	01 00                	add    DWORD PTR [eax],eax
    3c0e:	00 01                	add    BYTE PTR [ecx],al
    3c10:	53                   	push   ebx
    3c11:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    3c14:	00 01                	add    BYTE PTR [ecx],al
    3c16:	1d 1b 01 00 00       	sbb    eax,0x11b
    3c1b:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    3c1e:	63 31                	arpl   WORD PTR [ecx],si
    3c20:	00 01                	add    BYTE PTR [ecx],al
    3c22:	1e                   	push   ds
    3c23:	25 00 00 00 02       	and    eax,0x2000000
    3c28:	91                   	xchg   ecx,eax
    3c29:	6f                   	outs   dx,DWORD PTR ds:[esi]
    3c2a:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    3c2d:	00 01                	add    BYTE PTR [ecx],al
    3c2f:	1e                   	push   ds
    3c30:	25 00 00 00 02       	and    eax,0x2000000
    3c35:	91                   	xchg   ecx,eax
    3c36:	6e                   	outs   dx,BYTE PTR ds:[esi]
    3c37:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3c3a:	21 01                	and    DWORD PTR [ecx],eax
    3c3c:	00 00                	add    BYTE PTR [eax],al
    3c3e:	06                   	push   es
    3c3f:	25 00 00 00 0a       	and    eax,0xa000000
    3c44:	ba 0e 00 00 01       	mov    edx,0x100000e
    3c49:	2c 4f                	sub    al,0x4f
    3c4b:	00 00                	add    BYTE PTR [eax],al
    3c4d:	00 ca                	add    dl,cl
    3c4f:	39 00                	cmp    DWORD PTR [eax],eax
    3c51:	9f                   	lahf   
    3c52:	1d 00 00 00 01       	sbb    eax,0x1000000
    3c57:	9c                   	pushf  
    3c58:	5a                   	pop    edx
    3c59:	01 00                	add    DWORD PTR [eax],eax
    3c5b:	00 08                	add    BYTE PTR [eax],cl
    3c5d:	70 31                	jo     3c90 <sysEnter_Vector-0x12c370>
    3c5f:	00 01                	add    BYTE PTR [ecx],al
    3c61:	2c 9c                	sub    al,0x9c
    3c63:	00 00                	add    BYTE PTR [eax],al
    3c65:	00 02                	add    BYTE PTR [edx],al
    3c67:	91                   	xchg   ecx,eax
    3c68:	00 08                	add    BYTE PTR [eax],cl
    3c6a:	70 32                	jo     3c9e <sysEnter_Vector-0x12c362>
    3c6c:	00 01                	add    BYTE PTR [ecx],al
    3c6e:	2c 9c                	sub    al,0x9c
    3c70:	00 00                	add    BYTE PTR [eax],al
    3c72:	00 02                	add    BYTE PTR [edx],al
    3c74:	91                   	xchg   ecx,eax
    3c75:	04 00                	add    al,0x0
    3c77:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    3c7a:	00 00                	add    BYTE PTR [eax],al
    3c7c:	03 33                	add    esi,DWORD PTR [ebx]
    3c7e:	6b 01 00             	imul   eax,DWORD PTR [ecx],0x0
    3c81:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
    3c87:	9f                   	lahf   
    3c88:	04 04                	add    al,0x4
    3c8a:	72 00                	jb     3c8c <sysEnter_Vector-0x12c374>
    3c8c:	00 00                	add    BYTE PTR [eax],al
    3c8e:	0b 10                	or     edx,DWORD PTR [eax]
    3c90:	02 00                	add    al,BYTE PTR [eax]
    3c92:	00 04 35 82 01 00 00 	add    BYTE PTR [esi*1+0x182],al
    3c99:	05 03 d0 7d 00       	add    eax,0x7dd003
    3c9e:	9f                   	lahf   
    3c9f:	04 04                	add    al,0x4
    3ca1:	8a 00                	mov    al,BYTE PTR [eax]
    3ca3:	00 00                	add    BYTE PTR [eax],al
    3ca5:	0b 33                	or     esi,DWORD PTR [ebx]
    3ca7:	02 00                	add    al,BYTE PTR [eax]
    3ca9:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    3cac:	7f 00                	jg     3cae <sysEnter_Vector-0x12c352>
    3cae:	00 00                	add    BYTE PTR [eax],al
    3cb0:	05 03 cc 7d 00       	add    eax,0x7dcc03
    3cb5:	9f                   	lahf   
    3cb6:	00 27                	add    BYTE PTR [edi],ah
    3cb8:	01 00                	add    DWORD PTR [eax],eax
    3cba:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3cbd:	88 11                	mov    BYTE PTR [ecx],dl
    3cbf:	00 00                	add    BYTE PTR [eax],al
    3cc1:	04 01                	add    al,0x1
    3cc3:	c3                   	ret    
    3cc4:	00 00                	add    BYTE PTR [eax],al
    3cc6:	00 0c f3             	add    BYTE PTR [ebx+esi*8],cl
    3cc9:	0e                   	push   cs
    3cca:	00 00                	add    BYTE PTR [eax],al
    3ccc:	4d                   	dec    ebp
    3ccd:	00 00                	add    BYTE PTR [eax],al
    3ccf:	00 e8                	add    al,ch
    3cd1:	39 00                	cmp    DWORD PTR [eax],eax
    3cd3:	9f                   	lahf   
    3cd4:	c7 00 00 00 13 14    	mov    DWORD PTR [eax],0x14130000
    3cda:	00 00                	add    BYTE PTR [eax],al
    3cdc:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    3ce3:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    3ce6:	32 00                	xor    al,BYTE PTR [eax]
    3ce8:	00 00                	add    BYTE PTR [eax],al
    3cea:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    3cf1:	03 08                	add    ecx,DWORD PTR [eax]
    3cf3:	05 00 00 00 00       	add    eax,0x0
    3cf8:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    3cfb:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3cfc:	00 00                	add    BYTE PTR [eax],al
    3cfe:	00 03                	add    BYTE PTR [ebx],al
    3d00:	01 06                	add    DWORD PTR [esi],eax
    3d02:	48                   	dec    eax
    3d03:	00 00                	add    BYTE PTR [eax],al
    3d05:	00 04 d6             	add    BYTE PTR [esi+edx*8],al
    3d08:	0e                   	push   cs
    3d09:	00 00                	add    BYTE PTR [eax],al
    3d0b:	01 04 8f             	add    DWORD PTR [edi+ecx*4],eax
    3d0e:	00 00                	add    BYTE PTR [eax],al
    3d10:	00 e8                	add    al,ch
    3d12:	39 00                	cmp    DWORD PTR [eax],eax
    3d14:	9f                   	lahf   
    3d15:	40                   	inc    eax
    3d16:	00 00                	add    BYTE PTR [eax],al
    3d18:	00 01                	add    BYTE PTR [ecx],al
    3d1a:	9c                   	pushf  
    3d1b:	8f 00                	pop    DWORD PTR [eax]
    3d1d:	00 00                	add    BYTE PTR [eax],al
    3d1f:	05 73 31 00 01       	add    eax,0x1003173
    3d24:	04 8f                	add    al,0x8f
    3d26:	00 00                	add    BYTE PTR [eax],al
    3d28:	00 02                	add    BYTE PTR [edx],al
    3d2a:	91                   	xchg   ecx,eax
    3d2b:	00 05 73 32 00 01    	add    BYTE PTR ds:0x1003273,al
    3d31:	04 95                	add    al,0x95
    3d33:	00 00                	add    BYTE PTR [eax],al
    3d35:	00 02                	add    BYTE PTR [edx],al
    3d37:	91                   	xchg   ecx,eax
    3d38:	04 06                	add    al,0x6
    3d3a:	73 00                	jae    3d3c <sysEnter_Vector-0x12c2c4>
    3d3c:	01 06                	add    DWORD PTR [esi],eax
    3d3e:	8f 00                	pop    DWORD PTR [eax]
    3d40:	00 00                	add    BYTE PTR [eax],al
    3d42:	02 91 74 00 07 04    	add    dl,BYTE PTR [ecx+0x4070074]
    3d48:	48                   	dec    eax
    3d49:	00 00                	add    BYTE PTR [eax],al
    3d4b:	00 07                	add    BYTE PTR [edi],al
    3d4d:	04 9b                	add    al,0x9b
    3d4f:	00 00                	add    BYTE PTR [eax],al
    3d51:	00 08                	add    BYTE PTR [eax],cl
    3d53:	48                   	dec    eax
    3d54:	00 00                	add    BYTE PTR [eax],al
    3d56:	00 04 eb             	add    BYTE PTR [ebx+ebp*8],al
    3d59:	0e                   	push   cs
    3d5a:	00 00                	add    BYTE PTR [eax],al
    3d5c:	01 0e                	add    DWORD PTR [esi],ecx
    3d5e:	8f 00                	pop    DWORD PTR [eax]
    3d60:	00 00                	add    BYTE PTR [eax],al
    3d62:	28 3a                	sub    BYTE PTR [edx],bh
    3d64:	00 9f 40 00 00 00    	add    BYTE PTR [edi+0x40],bl
    3d6a:	01 9c e0 00 00 00 05 	add    DWORD PTR [eax+eiz*8+0x5000000],ebx
    3d71:	73 31                	jae    3da4 <sysEnter_Vector-0x12c25c>
    3d73:	00 01                	add    BYTE PTR [ecx],al
    3d75:	0e                   	push   cs
    3d76:	8f 00                	pop    DWORD PTR [eax]
    3d78:	00 00                	add    BYTE PTR [eax],al
    3d7a:	02 91 00 05 73 32    	add    dl,BYTE PTR [ecx+0x32730500]
    3d80:	00 01                	add    BYTE PTR [ecx],al
    3d82:	0e                   	push   cs
    3d83:	95                   	xchg   ebp,eax
    3d84:	00 00                	add    BYTE PTR [eax],al
    3d86:	00 02                	add    BYTE PTR [edx],al
    3d88:	91                   	xchg   ecx,eax
    3d89:	04 06                	add    al,0x6
    3d8b:	73 00                	jae    3d8d <sysEnter_Vector-0x12c273>
    3d8d:	01 10                	add    DWORD PTR [eax],edx
    3d8f:	8f 00                	pop    DWORD PTR [eax]
    3d91:	00 00                	add    BYTE PTR [eax],al
    3d93:	02 91 74 00 09 e3    	add    dl,BYTE PTR [ecx-0x1cf6ff8c]
    3d99:	0e                   	push   cs
    3d9a:	00 00                	add    BYTE PTR [eax],al
    3d9c:	01 18                	add    DWORD PTR [eax],ebx
    3d9e:	8f 00                	pop    DWORD PTR [eax]
    3da0:	00 00                	add    BYTE PTR [eax],al
    3da2:	68 3a 00 9f 47       	push   0x479f003a
    3da7:	00 00                	add    BYTE PTR [eax],al
    3da9:	00 01                	add    BYTE PTR [ecx],al
    3dab:	9c                   	pushf  
    3dac:	05 73 31 00 01       	add    eax,0x1003173
    3db1:	18 8f 00 00 00 02    	sbb    BYTE PTR [edi+0x2000000],cl
    3db7:	91                   	xchg   ecx,eax
    3db8:	00 05 73 32 00 01    	add    BYTE PTR ds:0x1003273,al
    3dbe:	18 95 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],dl
    3dc4:	91                   	xchg   ecx,eax
    3dc5:	04 0a                	add    al,0xa
    3dc7:	dd 0e                	fisttp QWORD PTR [esi]
    3dc9:	00 00                	add    BYTE PTR [eax],al
    3dcb:	01 18                	add    DWORD PTR [eax],ebx
    3dcd:	2c 00                	sub    al,0x0
    3dcf:	00 00                	add    BYTE PTR [eax],al
    3dd1:	02 91 08 06 73 00    	add    dl,BYTE PTR [ecx+0x730608]
    3dd7:	01 1a                	add    DWORD PTR [edx],ebx
    3dd9:	8f 00                	pop    DWORD PTR [eax]
    3ddb:	00 00                	add    BYTE PTR [eax],al
    3ddd:	02 91 74 00 00 42    	add    dl,BYTE PTR [ecx+0x42000074]
    3de3:	01 00                	add    DWORD PTR [eax],eax
    3de5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3de8:	25 12 00 00 04       	and    eax,0x4000012
    3ded:	01 c3                	add    ebx,eax
    3def:	00 00                	add    BYTE PTR [eax],al
    3df1:	00 0c 11             	add    BYTE PTR [ecx+edx*1],cl
    3df4:	0f 00 00             	sldt   WORD PTR [eax]
    3df7:	4d                   	dec    ebp
    3df8:	00 00                	add    BYTE PTR [eax],al
    3dfa:	00 b0 3a 00 9f 89    	add    BYTE PTR [eax-0x7660ffc6],dh
    3e00:	00 00                	add    BYTE PTR [eax],al
    3e02:	00 82 14 00 00 02    	add    BYTE PTR [edx+0x2000014],al
    3e08:	01 08                	add    DWORD PTR [eax],ecx
    3e0a:	3f                   	aas    
    3e0b:	00 00                	add    BYTE PTR [eax],al
    3e0d:	00 02                	add    BYTE PTR [edx],al
    3e0f:	02 07                	add    al,BYTE PTR [edi]
    3e11:	0e                   	push   cs
    3e12:	00 00                	add    BYTE PTR [eax],al
    3e14:	00 02                	add    BYTE PTR [edx],al
    3e16:	04 07                	add    al,0x7
    3e18:	32 00                	xor    al,BYTE PTR [eax]
    3e1a:	00 00                	add    BYTE PTR [eax],al
    3e1c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3e1f:	2d 00 00 00 02       	sub    eax,0x2000000
    3e24:	01 06                	add    DWORD PTR [esi],eax
    3e26:	41                   	inc    ecx
    3e27:	00 00                	add    BYTE PTR [eax],al
    3e29:	00 02                	add    BYTE PTR [edx],al
    3e2b:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3e31:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3e38:	02 08                	add    cl,BYTE PTR [eax]
    3e3a:	05 00 00 00 00       	add    eax,0x0
    3e3f:	02 08                	add    cl,BYTE PTR [eax]
    3e41:	07                   	pop    es
    3e42:	28 00                	sub    BYTE PTR [eax],al
    3e44:	00 00                	add    BYTE PTR [eax],al
    3e46:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3e4d:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3e50:	2a 01                	sub    al,BYTE PTR [ecx]
    3e52:	00 00                	add    BYTE PTR [eax],al
    3e54:	04 04                	add    al,0x4
    3e56:	78 00                	js     3e58 <sysEnter_Vector-0x12c1a8>
    3e58:	00 00                	add    BYTE PTR [eax],al
    3e5a:	02 01                	add    al,BYTE PTR [ecx]
    3e5c:	06                   	push   es
    3e5d:	48                   	dec    eax
    3e5e:	00 00                	add    BYTE PTR [eax],al
    3e60:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    3e66:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    3e69:	00 00                	add    BYTE PTR [eax],al
    3e6b:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    3e71:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    3e74:	00 00                	add    BYTE PTR [eax],al
    3e76:	00 02                	add    BYTE PTR [edx],al
    3e78:	0c 04                	or     al,0x4
    3e7a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3e7b:	00 00                	add    BYTE PTR [eax],al
    3e7d:	00 02                	add    BYTE PTR [edx],al
    3e7f:	01 02                	add    DWORD PTR [edx],eax
    3e81:	6a 06                	push   0x6
    3e83:	00 00                	add    BYTE PTR [eax],al
    3e85:	02 08                	add    cl,BYTE PTR [eax]
    3e87:	04 b2                	add    al,0xb2
    3e89:	00 00                	add    BYTE PTR [eax],al
    3e8b:	00 06                	add    BYTE PTR [esi],al
    3e8d:	28 0f                	sub    BYTE PTR [edi],cl
    3e8f:	00 00                	add    BYTE PTR [eax],al
    3e91:	01 09                	add    DWORD PTR [ecx],ecx
    3e93:	9c                   	pushf  
    3e94:	00 00                	add    BYTE PTR [eax],al
    3e96:	00 b0 3a 00 9f 30    	add    BYTE PTR [eax+0x309f003a],dh
    3e9c:	00 00                	add    BYTE PTR [eax],al
    3e9e:	00 01                	add    BYTE PTR [ecx],al
    3ea0:	9c                   	pushf  
    3ea1:	d0 00                	rol    BYTE PTR [eax],1
    3ea3:	00 00                	add    BYTE PTR [eax],al
    3ea5:	07                   	pop    es
    3ea6:	63 00                	arpl   WORD PTR [eax],ax
    3ea8:	01 09                	add    DWORD PTR [ecx],ecx
    3eaa:	78 00                	js     3eac <sysEnter_Vector-0x12c154>
    3eac:	00 00                	add    BYTE PTR [eax],al
    3eae:	02 91 74 00 08 08    	add    dl,BYTE PTR [ecx+0x8080074]
    3eb4:	0f 00 00             	sldt   WORD PTR [eax]
    3eb7:	01 0e                	add    DWORD PTR [esi],ecx
    3eb9:	9c                   	pushf  
    3eba:	00 00                	add    BYTE PTR [eax],al
    3ebc:	00 e0                	add    al,ah
    3ebe:	3a 00                	cmp    al,BYTE PTR [eax]
    3ec0:	9f                   	lahf   
    3ec1:	59                   	pop    ecx
    3ec2:	00 00                	add    BYTE PTR [eax],al
    3ec4:	00 01                	add    BYTE PTR [ecx],al
    3ec6:	9c                   	pushf  
    3ec7:	06                   	push   es
    3ec8:	01 00                	add    DWORD PTR [eax],eax
    3eca:	00 07                	add    BYTE PTR [edi],al
    3ecc:	73 74                	jae    3f42 <sysEnter_Vector-0x12c0be>
    3ece:	72 00                	jb     3ed0 <sysEnter_Vector-0x12c130>
    3ed0:	01 0e                	add    DWORD PTR [esi],ecx
    3ed2:	72 00                	jb     3ed4 <sysEnter_Vector-0x12c12c>
    3ed4:	00 00                	add    BYTE PTR [eax],al
    3ed6:	02 91 00 09 63 6e    	add    dl,BYTE PTR [ecx+0x6e630900]
    3edc:	74 00                	je     3ede <sysEnter_Vector-0x12c122>
    3ede:	01 10                	add    DWORD PTR [eax],edx
    3ee0:	4f                   	dec    edi
    3ee1:	00 00                	add    BYTE PTR [eax],al
    3ee3:	00 02                	add    BYTE PTR [edx],al
    3ee5:	91                   	xchg   ecx,eax
    3ee6:	74 00                	je     3ee8 <sysEnter_Vector-0x12c118>
    3ee8:	0a 78 00             	or     bh,BYTE PTR [eax+0x0]
    3eeb:	00 00                	add    BYTE PTR [eax],al
    3eed:	03 33                	add    esi,DWORD PTR [ebx]
    3eef:	17                   	pop    ss
    3ef0:	01 00                	add    DWORD PTR [eax],eax
    3ef2:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
    3ef8:	9f                   	lahf   
    3ef9:	04 04                	add    al,0x4
    3efb:	72 00                	jb     3efd <sysEnter_Vector-0x12c103>
    3efd:	00 00                	add    BYTE PTR [eax],al
    3eff:	0a 10                	or     dl,BYTE PTR [eax]
    3f01:	02 00                	add    al,BYTE PTR [eax]
    3f03:	00 04 35 2e 01 00 00 	add    BYTE PTR [esi*1+0x12e],al
    3f0a:	05 03 d0 7d 00       	add    eax,0x7dd003
    3f0f:	9f                   	lahf   
    3f10:	04 04                	add    al,0x4
    3f12:	8a 00                	mov    al,BYTE PTR [eax]
    3f14:	00 00                	add    BYTE PTR [eax],al
    3f16:	0a 33                	or     dh,BYTE PTR [ebx]
    3f18:	02 00                	add    al,BYTE PTR [eax]
    3f1a:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    3f1d:	7f 00                	jg     3f1f <sysEnter_Vector-0x12c0e1>
    3f1f:	00 00                	add    BYTE PTR [eax],al
    3f21:	05 03 cc 7d 00       	add    eax,0x7dcc03
    3f26:	9f                   	lahf   
    3f27:	00 d4                	add    ah,dl
    3f29:	01 00                	add    DWORD PTR [eax],eax
    3f2b:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    3f2e:	cc                   	int3   
    3f2f:	12 00                	adc    al,BYTE PTR [eax]
    3f31:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    3f34:	c3                   	ret    
    3f35:	00 00                	add    BYTE PTR [eax],al
    3f37:	00 0c 54             	add    BYTE PTR [esp+edx*2],cl
    3f3a:	0f 00 00             	sldt   WORD PTR [eax]
    3f3d:	4d                   	dec    ebp
    3f3e:	00 00                	add    BYTE PTR [eax],al
    3f40:	00 3c 3b             	add    BYTE PTR [ebx+edi*1],bh
    3f43:	00 9f a2 00 00 00    	add    BYTE PTR [edi+0xa2],bl
    3f49:	4b                   	dec    ebx
    3f4a:	15 00 00 02 01       	adc    eax,0x1020000
    3f4f:	08 3f                	or     BYTE PTR [edi],bh
    3f51:	00 00                	add    BYTE PTR [eax],al
    3f53:	00 02                	add    BYTE PTR [edx],al
    3f55:	02 07                	add    al,BYTE PTR [edi]
    3f57:	0e                   	push   cs
    3f58:	00 00                	add    BYTE PTR [eax],al
    3f5a:	00 02                	add    BYTE PTR [edx],al
    3f5c:	04 07                	add    al,0x7
    3f5e:	32 00                	xor    al,BYTE PTR [eax]
    3f60:	00 00                	add    BYTE PTR [eax],al
    3f62:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3f65:	2d 00 00 00 02       	sub    eax,0x2000000
    3f6a:	01 06                	add    DWORD PTR [esi],eax
    3f6c:	41                   	inc    ecx
    3f6d:	00 00                	add    BYTE PTR [eax],al
    3f6f:	00 02                	add    BYTE PTR [edx],al
    3f71:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    3f77:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3f7e:	02 08                	add    cl,BYTE PTR [eax]
    3f80:	05 00 00 00 00       	add    eax,0x0
    3f85:	02 08                	add    cl,BYTE PTR [eax]
    3f87:	07                   	pop    es
    3f88:	28 00                	sub    BYTE PTR [eax],al
    3f8a:	00 00                	add    BYTE PTR [eax],al
    3f8c:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3f93:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    3f96:	2a 01                	sub    al,BYTE PTR [ecx]
    3f98:	00 00                	add    BYTE PTR [eax],al
    3f9a:	04 04                	add    al,0x4
    3f9c:	78 00                	js     3f9e <sysEnter_Vector-0x12c062>
    3f9e:	00 00                	add    BYTE PTR [eax],al
    3fa0:	02 01                	add    al,BYTE PTR [ecx]
    3fa2:	06                   	push   es
    3fa3:	48                   	dec    eax
    3fa4:	00 00                	add    BYTE PTR [eax],al
    3fa6:	00 05 45 02 00 00    	add    BYTE PTR ds:0x245,al
    3fac:	02 34 33             	add    dh,BYTE PTR [ebx+esi*1]
    3faf:	00 00                	add    BYTE PTR [eax],al
    3fb1:	00 05 01 02 00 00    	add    BYTE PTR ds:0x201,al
    3fb7:	02 56 33             	add    dl,BYTE PTR [esi+0x33]
    3fba:	00 00                	add    BYTE PTR [eax],al
    3fbc:	00 05 91 02 00 00    	add    BYTE PTR ds:0x291,al
    3fc2:	03 d8                	add    ebx,eax
    3fc4:	33 00                	xor    eax,DWORD PTR [eax]
    3fc6:	00 00                	add    BYTE PTR [eax],al
    3fc8:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    3fcb:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3fcc:	00 00                	add    BYTE PTR [eax],al
    3fce:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    3fd1:	ad                   	lods   eax,DWORD PTR ds:[esi]
    3fd2:	00 00                	add    BYTE PTR [eax],al
    3fd4:	00 06                	add    BYTE PTR [esi],al
    3fd6:	78 00                	js     3fd8 <sysEnter_Vector-0x12c028>
    3fd8:	00 00                	add    BYTE PTR [eax],al
    3fda:	02 01                	add    al,BYTE PTR [ecx]
    3fdc:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    3fdf:	00 00                	add    BYTE PTR [eax],al
    3fe1:	02 08                	add    cl,BYTE PTR [eax]
    3fe3:	04 b2                	add    al,0xb2
    3fe5:	00 00                	add    BYTE PTR [eax],al
    3fe7:	00 07                	add    BYTE PTR [edi],al
    3fe9:	34 0f                	xor    al,0xf
    3feb:	00 00                	add    BYTE PTR [eax],al
    3fed:	01 04 95 00 00 00 3c 	add    DWORD PTR [edx*4+0x3c000000],eax
    3ff4:	3b 00                	cmp    eax,DWORD PTR [eax]
    3ff6:	9f                   	lahf   
    3ff7:	31 00                	xor    DWORD PTR [eax],eax
    3ff9:	00 00                	add    BYTE PTR [eax],al
    3ffb:	01 9c f6 00 00 00 08 	add    DWORD PTR [esi+esi*8+0x8000000],ebx
    4002:	73 74                	jae    4078 <sysEnter_Vector-0x12bf88>
    4004:	72 00                	jb     4006 <sysEnter_Vector-0x12bffa>
    4006:	01 04 a7             	add    DWORD PTR [edi+eiz*4],eax
    4009:	00 00                	add    BYTE PTR [eax],al
    400b:	00 02                	add    BYTE PTR [edx],al
    400d:	91                   	xchg   ecx,eax
    400e:	00 09                	add    BYTE PTR [ecx],cl
    4010:	72 65                	jb     4077 <sysEnter_Vector-0x12bf89>
    4012:	74 00                	je     4014 <sysEnter_Vector-0x12bfec>
    4014:	01 05 95 00 00 00    	add    DWORD PTR ds:0x95,eax
    401a:	02 91 74 00 0a 3c    	add    dl,BYTE PTR [ecx+0x3c0a0074]
    4020:	0f 00 00             	sldt   WORD PTR [eax]
    4023:	01 0b                	add    DWORD PTR [ebx],ecx
    4025:	95                   	xchg   ebp,eax
    4026:	00 00                	add    BYTE PTR [eax],al
    4028:	00 6d 3b             	add    BYTE PTR [ebp+0x3b],ch
    402b:	00 9f 1a 00 00 00    	add    BYTE PTR [edi+0x1a],bl
    4031:	01 9c 1e 01 00 00 08 	add    DWORD PTR [esi+ebx*1+0x8000001],ebx
    4038:	73 74                	jae    40ae <sysEnter_Vector-0x12bf52>
    403a:	72 00                	jb     403c <sysEnter_Vector-0x12bfc4>
    403c:	01 0b                	add    DWORD PTR [ebx],ecx
    403e:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    403f:	00 00                	add    BYTE PTR [eax],al
    4041:	00 02                	add    BYTE PTR [edx],al
    4043:	91                   	xchg   ecx,eax
    4044:	00 00                	add    BYTE PTR [eax],al
    4046:	07                   	pop    es
    4047:	43                   	inc    ebx
    4048:	0f 00 00             	sldt   WORD PTR [eax]
    404b:	01 10                	add    DWORD PTR [eax],edx
    404d:	95                   	xchg   ebp,eax
    404e:	00 00                	add    BYTE PTR [eax],al
    4050:	00 87 3b 00 9f 39    	add    BYTE PTR [edi+0x399f003b],al
    4056:	00 00                	add    BYTE PTR [eax],al
    4058:	00 01                	add    BYTE PTR [ecx],al
    405a:	9c                   	pushf  
    405b:	62 01                	bound  eax,QWORD PTR [ecx]
    405d:	00 00                	add    BYTE PTR [eax],al
    405f:	08 73 74             	or     BYTE PTR [ebx+0x74],dh
    4062:	72 00                	jb     4064 <sysEnter_Vector-0x12bf9c>
    4064:	01 10                	add    DWORD PTR [eax],edx
    4066:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4067:	00 00                	add    BYTE PTR [eax],al
    4069:	00 02                	add    BYTE PTR [edx],al
    406b:	91                   	xchg   ecx,eax
    406c:	00 0b                	add    BYTE PTR [ebx],cl
    406e:	5a                   	pop    edx
    406f:	07                   	pop    es
    4070:	00 00                	add    BYTE PTR [eax],al
    4072:	01 10                	add    DWORD PTR [eax],edx
    4074:	95                   	xchg   ebp,eax
    4075:	00 00                	add    BYTE PTR [eax],al
    4077:	00 02                	add    BYTE PTR [edx],al
    4079:	91                   	xchg   ecx,eax
    407a:	04 09                	add    al,0x9
    407c:	72 65                	jb     40e3 <sysEnter_Vector-0x12bf1d>
    407e:	74 00                	je     4080 <sysEnter_Vector-0x12bf80>
    4080:	01 12                	add    DWORD PTR [edx],edx
    4082:	95                   	xchg   ebp,eax
    4083:	00 00                	add    BYTE PTR [eax],al
    4085:	00 02                	add    BYTE PTR [edx],al
    4087:	91                   	xchg   ecx,eax
    4088:	74 00                	je     408a <sysEnter_Vector-0x12bf76>
    408a:	0a 4c 0f 00          	or     cl,BYTE PTR [edi+ecx*1+0x0]
    408e:	00 01                	add    BYTE PTR [ecx],al
    4090:	18 95 00 00 00 c0    	sbb    BYTE PTR [ebp-0x40000000],dl
    4096:	3b 00                	cmp    eax,DWORD PTR [eax]
    4098:	9f                   	lahf   
    4099:	1e                   	push   ds
    409a:	00 00                	add    BYTE PTR [eax],al
    409c:	00 01                	add    BYTE PTR [ecx],al
    409e:	9c                   	pushf  
    409f:	98                   	cwde   
    40a0:	01 00                	add    DWORD PTR [eax],eax
    40a2:	00 08                	add    BYTE PTR [eax],cl
    40a4:	73 74                	jae    411a <sysEnter_Vector-0x12bee6>
    40a6:	72 00                	jb     40a8 <sysEnter_Vector-0x12bf58>
    40a8:	01 18                	add    DWORD PTR [eax],ebx
    40aa:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    40ab:	00 00                	add    BYTE PTR [eax],al
    40ad:	00 02                	add    BYTE PTR [edx],al
    40af:	91                   	xchg   ecx,eax
    40b0:	00 0b                	add    BYTE PTR [ebx],cl
    40b2:	5a                   	pop    edx
    40b3:	07                   	pop    es
    40b4:	00 00                	add    BYTE PTR [eax],al
    40b6:	01 18                	add    DWORD PTR [eax],ebx
    40b8:	4f                   	dec    edi
    40b9:	00 00                	add    BYTE PTR [eax],al
    40bb:	00 02                	add    BYTE PTR [edx],al
    40bd:	91                   	xchg   ecx,eax
    40be:	04 00                	add    al,0x0
    40c0:	0c 78                	or     al,0x78
    40c2:	00 00                	add    BYTE PTR [eax],al
    40c4:	00 04 33             	add    BYTE PTR [ebx+esi*1],al
    40c7:	a9 01 00 00 05       	test   eax,0x5000001
    40cc:	03 c0                	add    eax,eax
    40ce:	7d 00                	jge    40d0 <sysEnter_Vector-0x12bf30>
    40d0:	9f                   	lahf   
    40d1:	04 04                	add    al,0x4
    40d3:	72 00                	jb     40d5 <sysEnter_Vector-0x12bf2b>
    40d5:	00 00                	add    BYTE PTR [eax],al
    40d7:	0c 10                	or     al,0x10
    40d9:	02 00                	add    al,BYTE PTR [eax]
    40db:	00 05 35 c0 01 00    	add    BYTE PTR ds:0x1c035,al
    40e1:	00 05 03 d0 7d 00    	add    BYTE PTR ds:0x7dd003,al
    40e7:	9f                   	lahf   
    40e8:	04 04                	add    al,0x4
    40ea:	8a 00                	mov    al,BYTE PTR [eax]
    40ec:	00 00                	add    BYTE PTR [eax],al
    40ee:	0c 33                	or     al,0x33
    40f0:	02 00                	add    al,BYTE PTR [eax]
    40f2:	00 05 36 7f 00 00    	add    BYTE PTR ds:0x7f36,al
    40f8:	00 05 03 cc 7d 00    	add    BYTE PTR ds:0x7dcc03,al
    40fe:	9f                   	lahf   
    40ff:	00 de                	add    dh,bl
    4101:	00 00                	add    BYTE PTR [eax],al
    4103:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4106:	89 13                	mov    DWORD PTR [ebx],edx
    4108:	00 00                	add    BYTE PTR [eax],al
    410a:	04 01                	add    al,0x1
    410c:	c3                   	ret    
    410d:	00 00                	add    BYTE PTR [eax],al
    410f:	00 0c 7a             	add    BYTE PTR [edx+edi*2],cl
    4112:	0f 00 00             	sldt   WORD PTR [eax]
    4115:	4d                   	dec    ebp
    4116:	00 00                	add    BYTE PTR [eax],al
    4118:	00 e0                	add    al,ah
    411a:	3b 00                	cmp    eax,DWORD PTR [eax]
    411c:	9f                   	lahf   
    411d:	ce                   	into   
    411e:	00 00                	add    BYTE PTR [eax],al
    4120:	00 1e                	add    BYTE PTR [esi],bl
    4122:	16                   	push   ss
    4123:	00 00                	add    BYTE PTR [eax],al
    4125:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    412c:	03 91 02 00 00 02    	add    edx,DWORD PTR [ecx+0x2000002]
    4132:	d8 37                	fdiv   DWORD PTR [edi]
    4134:	00 00                	add    BYTE PTR [eax],al
    4136:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4139:	07                   	pop    es
    413a:	32 00                	xor    al,BYTE PTR [eax]
    413c:	00 00                	add    BYTE PTR [eax],al
    413e:	04 04                	add    al,0x4
    4140:	05 05 00 00 00       	add    eax,0x5
    4145:	04 08                	add    al,0x8
    4147:	05 00 00 00 00       	add    eax,0x0
    414c:	04 0c                	add    al,0xc
    414e:	04 ad                	add    al,0xad
    4150:	00 00                	add    BYTE PTR [eax],al
    4152:	00 05 72 0f 00 00    	add    BYTE PTR ds:0xf72,al
    4158:	01 0c 25 00 00 00 e0 	add    DWORD PTR [eiz*1-0x20000000],ecx
    415f:	3b 00                	cmp    eax,DWORD PTR [eax]
    4161:	9f                   	lahf   
    4162:	67 00 00             	add    BYTE PTR [bx+si],al
    4165:	00 01                	add    BYTE PTR [ecx],al
    4167:	9c                   	pushf  
    4168:	93                   	xchg   ebx,eax
    4169:	00 00                	add    BYTE PTR [eax],al
    416b:	00 06                	add    BYTE PTR [esi],al
    416d:	73 31                	jae    41a0 <sysEnter_Vector-0x12be60>
    416f:	00 01                	add    BYTE PTR [ecx],al
    4171:	0c 93                	or     al,0x93
    4173:	00 00                	add    BYTE PTR [eax],al
    4175:	00 02                	add    BYTE PTR [edx],al
    4177:	91                   	xchg   ecx,eax
    4178:	00 06                	add    BYTE PTR [esi],al
    417a:	73 32                	jae    41ae <sysEnter_Vector-0x12be52>
    417c:	00 01                	add    BYTE PTR [ecx],al
    417e:	0c 93                	or     al,0x93
    4180:	00 00                	add    BYTE PTR [eax],al
    4182:	00 02                	add    BYTE PTR [edx],al
    4184:	91                   	xchg   ecx,eax
    4185:	04 06                	add    al,0x6
    4187:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4188:	00 01                	add    BYTE PTR [ecx],al
    418a:	0c 2c                	or     al,0x2c
    418c:	00 00                	add    BYTE PTR [eax],al
    418e:	00 02                	add    BYTE PTR [edx],al
    4190:	91                   	xchg   ecx,eax
    4191:	08 00                	or     BYTE PTR [eax],al
    4193:	07                   	pop    es
    4194:	04 a0                	add    al,0xa0
    4196:	00 00                	add    BYTE PTR [eax],al
    4198:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    419b:	06                   	push   es
    419c:	48                   	dec    eax
    419d:	00 00                	add    BYTE PTR [eax],al
    419f:	00 08                	add    BYTE PTR [eax],cl
    41a1:	99                   	cdq    
    41a2:	00 00                	add    BYTE PTR [eax],al
    41a4:	00 09                	add    BYTE PTR [ecx],cl
    41a6:	69 0f 00 00 01 16    	imul   ecx,DWORD PTR [edi],0x16010000
    41ac:	25 00 00 00 47       	and    eax,0x47000000
    41b1:	3c 00                	cmp    al,0x0
    41b3:	9f                   	lahf   
    41b4:	67 00 00             	add    BYTE PTR [bx+si],al
    41b7:	00 01                	add    BYTE PTR [ecx],al
    41b9:	9c                   	pushf  
    41ba:	06                   	push   es
    41bb:	73 31                	jae    41ee <sysEnter_Vector-0x12be12>
    41bd:	00 01                	add    BYTE PTR [ecx],al
    41bf:	16                   	push   ss
    41c0:	93                   	xchg   ebx,eax
    41c1:	00 00                	add    BYTE PTR [eax],al
    41c3:	00 02                	add    BYTE PTR [edx],al
    41c5:	91                   	xchg   ecx,eax
    41c6:	00 06                	add    BYTE PTR [esi],al
    41c8:	73 32                	jae    41fc <sysEnter_Vector-0x12be04>
    41ca:	00 01                	add    BYTE PTR [ecx],al
    41cc:	16                   	push   ss
    41cd:	93                   	xchg   ebx,eax
    41ce:	00 00                	add    BYTE PTR [eax],al
    41d0:	00 02                	add    BYTE PTR [edx],al
    41d2:	91                   	xchg   ecx,eax
    41d3:	04 06                	add    al,0x6
    41d5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    41d6:	00 01                	add    BYTE PTR [ecx],al
    41d8:	16                   	push   ss
    41d9:	2c 00                	sub    al,0x0
    41db:	00 00                	add    BYTE PTR [eax],al
    41dd:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    41e3:	00 00                	add    BYTE PTR [eax],al
    41e5:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    41e8:	15 14 00 00 04       	adc    eax,0x4000014
    41ed:	01 c3                	add    ebx,eax
    41ef:	00 00                	add    BYTE PTR [eax],al
    41f1:	00 0c 90             	add    BYTE PTR [eax+edx*4],cl
    41f4:	0f 00 00             	sldt   WORD PTR [eax]
    41f7:	4d                   	dec    ebp
    41f8:	00 00                	add    BYTE PTR [eax],al
    41fa:	00 b0 3c 00 9f 8c    	add    BYTE PTR [eax-0x7360ffc4],dh
    4200:	00 00                	add    BYTE PTR [eax],al
    4202:	00 e3                	add    bl,ah
    4204:	16                   	push   ss
    4205:	00 00                	add    BYTE PTR [eax],al
    4207:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    420e:	03 91 02 00 00 02    	add    edx,DWORD PTR [ecx+0x2000002]
    4214:	d8 37                	fdiv   DWORD PTR [edi]
    4216:	00 00                	add    BYTE PTR [eax],al
    4218:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    421b:	07                   	pop    es
    421c:	32 00                	xor    al,BYTE PTR [eax]
    421e:	00 00                	add    BYTE PTR [eax],al
    4220:	04 04                	add    al,0x4
    4222:	05 05 00 00 00       	add    eax,0x5
    4227:	04 08                	add    al,0x8
    4229:	05 00 00 00 00       	add    eax,0x0
    422e:	04 0c                	add    al,0xc
    4230:	04 ad                	add    al,0xad
    4232:	00 00                	add    BYTE PTR [eax],al
    4234:	00 05 a6 0f 00 00    	add    BYTE PTR ds:0xfa6,al
    423a:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    4240:	b0 3c                	mov    al,0x3c
    4242:	00 9f 6c 00 00 00    	add    BYTE PTR [edi+0x6c],bl
    4248:	01 9c 9f 00 00 00 06 	add    DWORD PTR [edi+ebx*4+0x6000000],ebx
    424f:	73 31                	jae    4282 <sysEnter_Vector-0x12bd7e>
    4251:	00 01                	add    BYTE PTR [ecx],al
    4253:	0d 9f 00 00 00       	or     eax,0x9f
    4258:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    425e:	00 01                	add    BYTE PTR [ecx],al
    4260:	0d ac 00 00 00       	or     eax,0xac
    4265:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    426b:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    4271:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    4277:	01 0f                	add    DWORD PTR [edi],ecx
    4279:	9f                   	lahf   
    427a:	00 00                	add    BYTE PTR [eax],al
    427c:	00 02                	add    BYTE PTR [edx],al
    427e:	91                   	xchg   ecx,eax
    427f:	74 00                	je     4281 <sysEnter_Vector-0x12bd7f>
    4281:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    4288:	01 06                	add    DWORD PTR [esi],eax
    428a:	48                   	dec    eax
    428b:	00 00                	add    BYTE PTR [eax],al
    428d:	00 08                	add    BYTE PTR [eax],cl
    428f:	04 b2                	add    al,0xb2
    4291:	00 00                	add    BYTE PTR [eax],al
    4293:	00 09                	add    BYTE PTR [ecx],cl
    4295:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    4296:	00 00                	add    BYTE PTR [eax],al
    4298:	00 0a                	add    BYTE PTR [edx],cl
    429a:	af                   	scas   eax,DWORD PTR es:[edi]
    429b:	0f 00 00             	sldt   WORD PTR [eax]
    429e:	01 1d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ebx
    42a4:	1c 3d                	sbb    al,0x3d
    42a6:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    42ac:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    42b3:	1d 9f 00 00 00       	sbb    eax,0x9f
    42b8:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    42be:	00 01                	add    BYTE PTR [ecx],al
    42c0:	1d ac 00 00 00       	sbb    eax,0xac
    42c5:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    42cb:	01 1d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ebx
    42d1:	02 91 08 00 00 01    	add    dl,BYTE PTR [ecx+0x1000008]
    42d7:	01 00                	add    DWORD PTR [eax],eax
    42d9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    42dc:	b0 14                	mov    al,0x14
    42de:	00 00                	add    BYTE PTR [eax],al
    42e0:	04 01                	add    al,0x1
    42e2:	c3                   	ret    
    42e3:	00 00                	add    BYTE PTR [eax],al
    42e5:	00 0c ca             	add    BYTE PTR [edx+ecx*8],cl
    42e8:	0f 00 00             	sldt   WORD PTR [eax]
    42eb:	4d                   	dec    ebp
    42ec:	00 00                	add    BYTE PTR [eax],al
    42ee:	00 3c 3d 00 9f 7d 01 	add    BYTE PTR [edi*1+0x17d9f00],bh
    42f5:	00 00                	add    BYTE PTR [eax],al
    42f7:	8a 17                	mov    dl,BYTE PTR [edi]
    42f9:	00 00                	add    BYTE PTR [eax],al
    42fb:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    4302:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    4305:	32 00                	xor    al,BYTE PTR [eax]
    4307:	00 00                	add    BYTE PTR [eax],al
    4309:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4310:	03 08                	add    ecx,DWORD PTR [eax]
    4312:	05 00 00 00 00       	add    eax,0x0
    4317:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    431a:	ad                   	lods   eax,DWORD PTR ds:[esi]
    431b:	00 00                	add    BYTE PTR [eax],al
    431d:	00 03                	add    BYTE PTR [ebx],al
    431f:	01 06                	add    DWORD PTR [esi],eax
    4321:	48                   	dec    eax
    4322:	00 00                	add    BYTE PTR [eax],al
    4324:	00 04 df             	add    BYTE PTR [edi+ebx*8],al
    4327:	0f 00 00             	sldt   WORD PTR [eax]
    432a:	01 3b                	add    DWORD PTR [ebx],edi
    432c:	e6 00                	out    0x0,al
    432e:	00 00                	add    BYTE PTR [eax],al
    4330:	3c 3d                	cmp    al,0x3d
    4332:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
    4338:	01 9c e6 00 00 00 05 	add    DWORD PTR [esi+eiz*8+0x5000000],ebx
    433f:	b7 0f                	mov    bh,0xf
    4341:	00 00                	add    BYTE PTR [eax],al
    4343:	01 3b                	add    DWORD PTR [ebx],edi
    4345:	ed                   	in     eax,dx
    4346:	00 00                	add    BYTE PTR [eax],al
    4348:	00 02                	add    BYTE PTR [edx],al
    434a:	91                   	xchg   ecx,eax
    434b:	00 05 e7 0f 00 00    	add    BYTE PTR ds:0xfe7,al
    4351:	01 3b                	add    DWORD PTR [ebx],edi
    4353:	f8                   	clc    
    4354:	00 00                	add    BYTE PTR [eax],al
    4356:	00 02                	add    BYTE PTR [edx],al
    4358:	91                   	xchg   ecx,eax
    4359:	04 05                	add    al,0x5
    435b:	33 0e                	xor    ecx,DWORD PTR [esi]
    435d:	00 00                	add    BYTE PTR [eax],al
    435f:	01 3b                	add    DWORD PTR [ebx],edi
    4361:	25 00 00 00 02       	and    eax,0x2000000
    4366:	91                   	xchg   ecx,eax
    4367:	08 06                	or     BYTE PTR [esi],al
    4369:	73 00                	jae    436b <sysEnter_Vector-0x12bc95>
    436b:	01 3d ed 00 00 00    	add    DWORD PTR ds:0xed,edi
    4371:	01 56 06             	add    DWORD PTR [esi+0x6],edx
    4374:	61                   	popa   
    4375:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    4378:	01 3e                	add    DWORD PTR [esi],edi
    437a:	e6 00                	out    0x0,al
    437c:	00 00                	add    BYTE PTR [eax],al
    437e:	01 57 06             	add    DWORD PTR [edi+0x6],edx
    4381:	63 00                	arpl   WORD PTR [eax],ax
    4383:	01 3f                	add    DWORD PTR [edi],edi
    4385:	25 00 00 00 01       	and    eax,0x1000000
    438a:	53                   	push   ebx
    438b:	07                   	pop    es
    438c:	bc 0f 00 00 01       	mov    esp,0x100000f
    4391:	40                   	inc    eax
    4392:	e6 00                	out    0x0,al
    4394:	00 00                	add    BYTE PTR [eax],al
    4396:	08 6e 65             	or     BYTE PTR [esi+0x65],ch
    4399:	67 00 01             	add    BYTE PTR [bx+di],al
    439c:	41                   	inc    ecx
    439d:	25 00 00 00 06       	and    eax,0x6000000
    43a2:	61                   	popa   
    43a3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    43a4:	79 00                	jns    43a6 <sysEnter_Vector-0x12bc5a>
    43a6:	01 41 25             	add    DWORD PTR [ecx+0x25],eax
    43a9:	00 00                	add    BYTE PTR [eax],al
    43ab:	00 01                	add    BYTE PTR [ecx],al
    43ad:	51                   	push   ecx
    43ae:	09 c3                	or     ebx,eax
    43b0:	0f 00 00             	sldt   WORD PTR [eax]
    43b3:	01 41 25             	add    DWORD PTR [ecx+0x25],eax
    43b6:	00 00                	add    BYTE PTR [eax],al
    43b8:	00 01                	add    BYTE PTR [ecx],al
    43ba:	52                   	push   edx
    43bb:	00 03                	add    BYTE PTR [ebx],al
    43bd:	04 07                	add    al,0x7
    43bf:	2d 00 00 00 0a       	sub    eax,0xa000000
    43c4:	04 f3                	add    al,0xf3
    43c6:	00 00                	add    BYTE PTR [eax],al
    43c8:	00 0b                	add    BYTE PTR [ebx],cl
    43ca:	48                   	dec    eax
    43cb:	00 00                	add    BYTE PTR [eax],al
    43cd:	00 0a                	add    BYTE PTR [edx],cl
    43cf:	04 fe                	add    al,0xfe
    43d1:	00 00                	add    BYTE PTR [eax],al
    43d3:	00 0a                	add    BYTE PTR [edx],cl
    43d5:	04 48                	add    al,0x48
    43d7:	00 00                	add    BYTE PTR [eax],al
    43d9:	00 00                	add    BYTE PTR [eax],al
    43db:	6c                   	ins    BYTE PTR es:[edi],dx
    43dc:	00 00                	add    BYTE PTR [eax],al
    43de:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    43e1:	4d                   	dec    ebp
    43e2:	15 00 00 04 01       	adc    eax,0x1040000
    43e7:	c3                   	ret    
    43e8:	00 00                	add    BYTE PTR [eax],al
    43ea:	00 0c ee             	add    BYTE PTR [esi+ebp*8],cl
    43ed:	0f 00 00             	sldt   WORD PTR [eax]
    43f0:	4d                   	dec    ebp
    43f1:	00 00                	add    BYTE PTR [eax],al
    43f3:	00 bc 3e 00 9f 1d 00 	add    BYTE PTR [esi+edi*1+0x1d9f00],bh
    43fa:	00 00                	add    BYTE PTR [eax],al
    43fc:	66                   	data16
    43fd:	18 00                	sbb    BYTE PTR [eax],al
    43ff:	00 02                	add    BYTE PTR [edx],al
    4401:	05 10 00 00 01       	add    eax,0x1000010
    4406:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    4409:	00 00                	add    BYTE PTR [eax],al
    440b:	bc 3e 00 9f 1d       	mov    esp,0x1d9f003e
    4410:	00 00                	add    BYTE PTR [eax],al
    4412:	00 01                	add    BYTE PTR [ecx],al
    4414:	9c                   	pushf  
    4415:	5b                   	pop    ebx
    4416:	00 00                	add    BYTE PTR [eax],al
    4418:	00 03                	add    BYTE PTR [ebx],al
    441a:	76 61                	jbe    447d <sysEnter_Vector-0x12bb83>
    441c:	6c                   	ins    BYTE PTR es:[edi],dx
    441d:	00 01                	add    BYTE PTR [ecx],al
    441f:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    4422:	00 00                	add    BYTE PTR [eax],al
    4424:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    442a:	74 00                	je     442c <sysEnter_Vector-0x12bbd4>
    442c:	01 01                	add    DWORD PTR [ecx],eax
    442e:	68 00 00 00 02       	push   0x2000000
    4433:	91                   	xchg   ecx,eax
    4434:	04 00                	add    al,0x0
    4436:	04 04                	add    al,0x4
    4438:	61                   	popa   
    4439:	00 00                	add    BYTE PTR [eax],al
    443b:	00 05 01 06 48 00    	add    BYTE PTR ds:0x480601,al
    4441:	00 00                	add    BYTE PTR [eax],al
    4443:	06                   	push   es
    4444:	04 05                	add    al,0x5
    4446:	69 6e 74 00 00 ff 00 	imul   ebp,DWORD PTR [esi+0x74],0xff0000
    444d:	00 00                	add    BYTE PTR [eax],al
    444f:	04 00                	add    al,0x0
    4451:	ab                   	stos   DWORD PTR es:[edi],eax
    4452:	15 00 00 04 01       	adc    eax,0x1040000
    4457:	c3                   	ret    
    4458:	00 00                	add    BYTE PTR [eax],al
    445a:	00 0c 14             	add    BYTE PTR [esp+edx*1],cl
    445d:	10 00                	adc    BYTE PTR [eax],al
    445f:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4462:	00 00                	add    BYTE PTR [eax],al
    4464:	dc 3e                	fdivr  QWORD PTR [esi]
    4466:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
    446c:	ad                   	lods   eax,DWORD PTR ds:[esi]
    446d:	18 00                	sbb    BYTE PTR [eax],al
    446f:	00 02                	add    BYTE PTR [edx],al
    4471:	04 05                	add    al,0x5
    4473:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
    447a:	32 00                	xor    al,BYTE PTR [eax]
    447c:	00 00                	add    BYTE PTR [eax],al
    447e:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4485:	03 08                	add    ecx,DWORD PTR [eax]
    4487:	05 00 00 00 00       	add    eax,0x0
    448c:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    448f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4490:	00 00                	add    BYTE PTR [eax],al
    4492:	00 03                	add    BYTE PTR [ebx],al
    4494:	01 06                	add    DWORD PTR [esi],eax
    4496:	48                   	dec    eax
    4497:	00 00                	add    BYTE PTR [eax],al
    4499:	00 04 0d 10 00 00 01 	add    BYTE PTR [ecx*1+0x1000010],al
    44a0:	57                   	push   edi
    44a1:	33 00                	xor    eax,DWORD PTR [eax]
    44a3:	00 00                	add    BYTE PTR [eax],al
    44a5:	dc 3e                	fdivr  QWORD PTR [esi]
    44a7:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
    44ad:	01 9c e4 00 00 00 05 	add    DWORD PTR [esp+eiz*8+0x5000000],ebx
    44b4:	b7 0f                	mov    bh,0xf
    44b6:	00 00                	add    BYTE PTR [eax],al
    44b8:	01 57 e4             	add    DWORD PTR [edi-0x1c],edx
    44bb:	00 00                	add    BYTE PTR [eax],al
    44bd:	00 02                	add    BYTE PTR [edx],al
    44bf:	91                   	xchg   ecx,eax
    44c0:	00 05 e7 0f 00 00    	add    BYTE PTR ds:0xfe7,al
    44c6:	01 57 ef             	add    DWORD PTR [edi-0x11],edx
    44c9:	00 00                	add    BYTE PTR [eax],al
    44cb:	00 02                	add    BYTE PTR [edx],al
    44cd:	91                   	xchg   ecx,eax
    44ce:	04 05                	add    al,0x5
    44d0:	33 0e                	xor    ecx,DWORD PTR [esi]
    44d2:	00 00                	add    BYTE PTR [eax],al
    44d4:	01 57 25             	add    DWORD PTR [edi+0x25],edx
    44d7:	00 00                	add    BYTE PTR [eax],al
    44d9:	00 02                	add    BYTE PTR [edx],al
    44db:	91                   	xchg   ecx,eax
    44dc:	08 06                	or     BYTE PTR [esi],al
    44de:	73 00                	jae    44e0 <sysEnter_Vector-0x12bb20>
    44e0:	01 59 e4             	add    DWORD PTR [ecx-0x1c],ebx
    44e3:	00 00                	add    BYTE PTR [eax],al
    44e5:	00 01                	add    BYTE PTR [ecx],al
    44e7:	56                   	push   esi
    44e8:	06                   	push   es
    44e9:	61                   	popa   
    44ea:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    44ed:	01 5a fb             	add    DWORD PTR [edx-0x5],ebx
    44f0:	00 00                	add    BYTE PTR [eax],al
    44f2:	00 01                	add    BYTE PTR [ecx],al
    44f4:	57                   	push   edi
    44f5:	06                   	push   es
    44f6:	63 00                	arpl   WORD PTR [eax],ax
    44f8:	01 5b 25             	add    DWORD PTR [ebx+0x25],ebx
    44fb:	00 00                	add    BYTE PTR [eax],al
    44fd:	00 01                	add    BYTE PTR [ecx],al
    44ff:	53                   	push   ebx
    4500:	07                   	pop    es
    4501:	bc 0f 00 00 01       	mov    esp,0x100000f
    4506:	5c                   	pop    esp
    4507:	fb                   	sti    
    4508:	00 00                	add    BYTE PTR [eax],al
    450a:	00 08                	add    BYTE PTR [eax],cl
    450c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    450d:	65 67 00 01          	add    BYTE PTR gs:[bx+di],al
    4511:	5d                   	pop    ebp
    4512:	25 00 00 00 06       	and    eax,0x6000000
    4517:	61                   	popa   
    4518:	6e                   	outs   dx,BYTE PTR ds:[esi]
    4519:	79 00                	jns    451b <sysEnter_Vector-0x12bae5>
    451b:	01 5d 25             	add    DWORD PTR [ebp+0x25],ebx
    451e:	00 00                	add    BYTE PTR [eax],al
    4520:	00 01                	add    BYTE PTR [ecx],al
    4522:	51                   	push   ecx
    4523:	07                   	pop    es
    4524:	c3                   	ret    
    4525:	0f 00 00             	sldt   WORD PTR [eax]
    4528:	01 5d 25             	add    DWORD PTR [ebp+0x25],ebx
    452b:	00 00                	add    BYTE PTR [eax],al
    452d:	00 00                	add    BYTE PTR [eax],al
    452f:	09 04 ea             	or     DWORD PTR [edx+ebp*8],eax
    4532:	00 00                	add    BYTE PTR [eax],al
    4534:	00 0a                	add    BYTE PTR [edx],cl
    4536:	48                   	dec    eax
    4537:	00 00                	add    BYTE PTR [eax],al
    4539:	00 09                	add    BYTE PTR [ecx],cl
    453b:	04 f5                	add    al,0xf5
    453d:	00 00                	add    BYTE PTR [eax],al
    453f:	00 09                	add    BYTE PTR [ecx],cl
    4541:	04 48                	add    al,0x48
    4543:	00 00                	add    BYTE PTR [eax],al
    4545:	00 03                	add    BYTE PTR [ebx],al
    4547:	04 07                	add    al,0x7
    4549:	2d 00 00 00 00       	sub    eax,0x0
    454e:	c0 00 00             	rol    BYTE PTR [eax],0x0
    4551:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4554:	39 16                	cmp    DWORD PTR [esi],edx
    4556:	00 00                	add    BYTE PTR [eax],al
    4558:	04 01                	add    al,0x1
    455a:	c3                   	ret    
    455b:	00 00                	add    BYTE PTR [eax],al
    455d:	00 0c 2f             	add    BYTE PTR [edi+ebp*1],cl
    4560:	10 00                	adc    BYTE PTR [eax],al
    4562:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4565:	00 00                	add    BYTE PTR [eax],al
    4567:	78 40                	js     45a9 <sysEnter_Vector-0x12ba57>
    4569:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
    456f:	b5 19                	mov    ch,0x19
    4571:	00 00                	add    BYTE PTR [eax],al
    4573:	02 04 05 69 6e 74 00 	add    al,BYTE PTR [eax*1+0x746e69]
    457a:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    457d:	32 00                	xor    al,BYTE PTR [eax]
    457f:	00 00                	add    BYTE PTR [eax],al
    4581:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4588:	03 08                	add    ecx,DWORD PTR [eax]
    458a:	05 00 00 00 00       	add    eax,0x0
    458f:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4592:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4593:	00 00                	add    BYTE PTR [eax],al
    4595:	00 03                	add    BYTE PTR [ebx],al
    4597:	01 06                	add    DWORD PTR [esi],eax
    4599:	48                   	dec    eax
    459a:	00 00                	add    BYTE PTR [eax],al
    459c:	00 04 4d 10 00 00 01 	add    BYTE PTR [ecx*2+0x1000010],al
    45a3:	03 78 40             	add    edi,DWORD PTR [eax+0x40]
    45a6:	00 9f 96 00 00 00    	add    BYTE PTR [edi+0x96],bl
    45ac:	01 9c 9d 00 00 00 05 	add    DWORD PTR [ebp+ebx*4+0x5000000],ebx
    45b3:	29 10                	sub    DWORD PTR [eax],edx
    45b5:	00 00                	add    BYTE PTR [eax],al
    45b7:	01 03                	add    DWORD PTR [ebx],eax
    45b9:	9d                   	popf   
    45ba:	00 00                	add    BYTE PTR [eax],al
    45bc:	00 02                	add    BYTE PTR [edx],al
    45be:	91                   	xchg   ecx,eax
    45bf:	00 06                	add    BYTE PTR [esi],al
    45c1:	64                   	fs
    45c2:	73 74                	jae    4638 <sysEnter_Vector-0x12b9c8>
    45c4:	00 01                	add    BYTE PTR [ecx],al
    45c6:	05 9d 00 00 00       	add    eax,0x9d
    45cb:	02 91 6c 06 73 72    	add    dl,BYTE PTR [ecx+0x7273066c]
    45d1:	63 00                	arpl   WORD PTR [eax],ax
    45d3:	01 05 9d 00 00 00    	add    DWORD PTR ds:0x9d,eax
    45d9:	02 91 68 06 65 6e    	add    dl,BYTE PTR [ecx+0x6e650668]
    45df:	64 00 01             	add    BYTE PTR fs:[ecx],al
    45e2:	06                   	push   es
    45e3:	9d                   	popf   
    45e4:	00 00                	add    BYTE PTR [eax],al
    45e6:	00 02                	add    BYTE PTR [edx],al
    45e8:	91                   	xchg   ecx,eax
    45e9:	64 00 07             	add    BYTE PTR fs:[edi],al
    45ec:	04 48                	add    al,0x48
    45ee:	00 00                	add    BYTE PTR [eax],al
    45f0:	00 08                	add    BYTE PTR [eax],cl
    45f2:	45                   	inc    ebp
    45f3:	10 00                	adc    BYTE PTR [eax],al
    45f5:	00 01                	add    BYTE PTR [ecx],al
    45f7:	1f                   	pop    ds
    45f8:	0e                   	push   cs
    45f9:	41                   	inc    ecx
    45fa:	00 9f 20 00 00 00    	add    BYTE PTR [edi+0x20],bl
    4600:	01 9c 05 29 10 00 00 	add    DWORD PTR [ebp+eax*1+0x1029],ebx
    4607:	01 1f                	add    DWORD PTR [edi],ebx
    4609:	9d                   	popf   
    460a:	00 00                	add    BYTE PTR [eax],al
    460c:	00 02                	add    BYTE PTR [edx],al
    460e:	91                   	xchg   ecx,eax
    460f:	00 00                	add    BYTE PTR [eax],al
    4611:	00 c6                	add    dh,al
    4613:	01 00                	add    DWORD PTR [eax],eax
    4615:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    4618:	bc 16 00 00 04       	mov    esp,0x4000016
    461d:	01 c3                	add    ebx,eax
    461f:	00 00                	add    BYTE PTR [eax],al
    4621:	00 0c 5e             	add    BYTE PTR [esi+ebx*2],cl
    4624:	10 00                	adc    BYTE PTR [eax],al
    4626:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    4629:	00 00                	add    BYTE PTR [eax],al
    462b:	30 41 00             	xor    BYTE PTR [ecx+0x0],al
    462e:	9f                   	lahf   
    462f:	44                   	inc    esp
    4630:	01 00                	add    DWORD PTR [eax],eax
    4632:	00 17                	add    BYTE PTR [edi],dl
    4634:	1a 00                	sbb    al,BYTE PTR [eax]
    4636:	00 02                	add    BYTE PTR [edx],al
    4638:	04 05                	add    al,0x5
    463a:	69 6e 74 00 03 91 02 	imul   ebp,DWORD PTR [esi+0x74],0x2910300
    4641:	00 00                	add    BYTE PTR [eax],al
    4643:	02 d8                	add    bl,al
    4645:	37                   	aaa    
    4646:	00 00                	add    BYTE PTR [eax],al
    4648:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    464b:	07                   	pop    es
    464c:	32 00                	xor    al,BYTE PTR [eax]
    464e:	00 00                	add    BYTE PTR [eax],al
    4650:	04 04                	add    al,0x4
    4652:	05 05 00 00 00       	add    eax,0x5
    4657:	04 08                	add    al,0x8
    4659:	05 00 00 00 00       	add    eax,0x0
    465e:	04 0c                	add    al,0xc
    4660:	04 ad                	add    al,0xad
    4662:	00 00                	add    BYTE PTR [eax],al
    4664:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    4667:	06                   	push   es
    4668:	48                   	dec    eax
    4669:	00 00                	add    BYTE PTR [eax],al
    466b:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    466e:	08 3f                	or     BYTE PTR [edi],bh
    4670:	00 00                	add    BYTE PTR [eax],al
    4672:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    4675:	07                   	pop    es
    4676:	0e                   	push   cs
    4677:	00 00                	add    BYTE PTR [eax],al
    4679:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    467c:	07                   	pop    es
    467d:	2d 00 00 00 04       	sub    eax,0x4000000
    4682:	01 06                	add    DWORD PTR [esi],eax
    4684:	41                   	inc    ecx
    4685:	00 00                	add    BYTE PTR [eax],al
    4687:	00 04 02             	add    BYTE PTR [edx+eax*1],al
    468a:	05 b9 00 00 00       	add    eax,0xb9
    468f:	04 08                	add    al,0x8
    4691:	07                   	pop    es
    4692:	28 00                	sub    BYTE PTR [eax],al
    4694:	00 00                	add    BYTE PTR [eax],al
    4696:	04 04                	add    al,0x4
    4698:	07                   	pop    es
    4699:	2a 01                	sub    al,BYTE PTR [ecx]
    469b:	00 00                	add    BYTE PTR [eax],al
    469d:	05 04 53 00 00       	add    eax,0x5304
    46a2:	00 03                	add    BYTE PTR [ebx],al
    46a4:	45                   	inc    ebp
    46a5:	02 00                	add    al,BYTE PTR [eax]
    46a7:	00 03                	add    BYTE PTR [ebx],al
    46a9:	34 37                	xor    al,0x37
    46ab:	00 00                	add    BYTE PTR [eax],al
    46ad:	00 03                	add    BYTE PTR [ebx],al
    46af:	01 02                	add    DWORD PTR [edx],eax
    46b1:	00 00                	add    BYTE PTR [eax],al
    46b3:	03 56 37             	add    edx,DWORD PTR [esi+0x37]
    46b6:	00 00                	add    BYTE PTR [eax],al
    46b8:	00 05 04 ad 00 00    	add    BYTE PTR ds:0xad04,al
    46be:	00 06                	add    BYTE PTR [esi],al
    46c0:	53                   	push   ebx
    46c1:	00 00                	add    BYTE PTR [eax],al
    46c3:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    46c6:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    46c9:	00 00                	add    BYTE PTR [eax],al
    46cb:	04 08                	add    al,0x8
    46cd:	04 b2                	add    al,0xb2
    46cf:	00 00                	add    BYTE PTR [eax],al
    46d1:	00 07                	add    BYTE PTR [edi],al
    46d3:	93                   	xchg   ebx,eax
    46d4:	10 00                	adc    BYTE PTR [eax],al
    46d6:	00 01                	add    BYTE PTR [ecx],al
    46d8:	0d 8b 00 00 00       	or     eax,0x8b
    46dd:	30 41 00             	xor    BYTE PTR [ecx+0x0],al
    46e0:	9f                   	lahf   
    46e1:	1e                   	push   ds
    46e2:	01 00                	add    DWORD PTR [eax],eax
    46e4:	00 01                	add    BYTE PTR [ecx],al
    46e6:	9c                   	pushf  
    46e7:	3a 01                	cmp    al,BYTE PTR [ecx]
    46e9:	00 00                	add    BYTE PTR [eax],al
    46eb:	08 69 6e             	or     BYTE PTR [ecx+0x6e],ch
    46ee:	00 01                	add    BYTE PTR [ecx],al
    46f0:	0d a7 00 00 00       	or     eax,0xa7
    46f5:	02 91 00 09 8b 10    	add    dl,BYTE PTR [ecx+0x108b0900]
    46fb:	00 00                	add    BYTE PTR [eax],al
    46fd:	01 0d a7 00 00 00    	add    DWORD PTR ds:0xa7,ecx
    4703:	02 91 04 08 62 79    	add    dl,BYTE PTR [ecx+0x79620804]
    4709:	00 01                	add    BYTE PTR [ecx],al
    470b:	0d a7 00 00 00       	or     eax,0xa7
    4710:	02 91 08 09 9f 10    	add    dl,BYTE PTR [ecx+0x109f0908]
    4716:	00 00                	add    BYTE PTR [eax],al
    4718:	01 0d 8b 00 00 00    	add    DWORD PTR ds:0x8b,ecx
    471e:	02 91 0c 0a 56 10    	add    dl,BYTE PTR [ecx+0x10560a0c]
    4724:	00 00                	add    BYTE PTR [eax],al
    4726:	01 0f                	add    DWORD PTR [edi],ecx
    4728:	2c 00                	sub    al,0x0
    472a:	00 00                	add    BYTE PTR [eax],al
    472c:	02 91 6c 0a 76 10    	add    dl,BYTE PTR [ecx+0x10760a6c]
    4732:	00 00                	add    BYTE PTR [eax],al
    4734:	01 12                	add    DWORD PTR [edx],edx
    4736:	2c 00                	sub    al,0x0
    4738:	00 00                	add    BYTE PTR [eax],al
    473a:	02 91 68 0a 6f 10    	add    dl,BYTE PTR [ecx+0x106f0a68]
    4740:	00 00                	add    BYTE PTR [eax],al
    4742:	01 13                	add    DWORD PTR [ebx],edx
    4744:	8b 00                	mov    eax,DWORD PTR [eax]
    4746:	00 00                	add    BYTE PTR [eax],al
    4748:	02 91 64 00 07 80    	add    dl,BYTE PTR [ecx-0x7ff8ff9c]
    474e:	10 00                	adc    BYTE PTR [eax],al
    4750:	00 01                	add    BYTE PTR [ecx],al
    4752:	2a 8b 00 00 00 4e    	sub    cl,BYTE PTR [ebx+0x4e000000]
    4758:	42                   	inc    edx
    4759:	00 9f 26 00 00 00    	add    BYTE PTR [edi+0x26],bl
    475f:	01 9c 8a 01 00 00 08 	add    DWORD PTR [edx+ecx*4+0x8000001],ebx
    4766:	69 6e 00 01 2a a7 00 	imul   ebp,DWORD PTR [esi+0x0],0xa72a01
    476d:	00 00                	add    BYTE PTR [eax],al
    476f:	02 91 00 09 8b 10    	add    dl,BYTE PTR [ecx+0x108b0900]
    4775:	00 00                	add    BYTE PTR [eax],al
    4777:	01 2a                	add    DWORD PTR [edx],ebp
    4779:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    477a:	00 00                	add    BYTE PTR [eax],al
    477c:	00 02                	add    BYTE PTR [edx],al
    477e:	91                   	xchg   ecx,eax
    477f:	04 08                	add    al,0x8
    4781:	62 79 00             	bound  edi,QWORD PTR [ecx+0x0]
    4784:	01 2a                	add    DWORD PTR [edx],ebp
    4786:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    4787:	00 00                	add    BYTE PTR [eax],al
    4789:	00 02                	add    BYTE PTR [edx],al
    478b:	91                   	xchg   ecx,eax
    478c:	08 09                	or     BYTE PTR [ecx],cl
    478e:	9f                   	lahf   
    478f:	10 00                	adc    BYTE PTR [eax],al
    4791:	00 01                	add    BYTE PTR [ecx],al
    4793:	2a 8b 00 00 00 02    	sub    cl,BYTE PTR [ebx+0x2000000]
    4799:	91                   	xchg   ecx,eax
    479a:	0c 00                	or     al,0x0
    479c:	0b 78 00             	or     edi,DWORD PTR [eax+0x0]
    479f:	00 00                	add    BYTE PTR [eax],al
    47a1:	04 33                	add    al,0x33
    47a3:	9b                   	fwait
    47a4:	01 00                	add    DWORD PTR [eax],eax
    47a6:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
    47ac:	9f                   	lahf   
    47ad:	05 04 8b 00 00       	add    eax,0x8b04
    47b2:	00 0b                	add    BYTE PTR [ebx],cl
    47b4:	10 02                	adc    BYTE PTR [edx],al
    47b6:	00 00                	add    BYTE PTR [eax],al
    47b8:	05 35 b2 01 00       	add    eax,0x1b235
    47bd:	00 05 03 d0 7d 00    	add    BYTE PTR ds:0x7dd003,al
    47c3:	9f                   	lahf   
    47c4:	05 04 9c 00 00       	add    eax,0x9c04
    47c9:	00 0b                	add    BYTE PTR [ebx],cl
    47cb:	33 02                	xor    eax,DWORD PTR [edx]
    47cd:	00 00                	add    BYTE PTR [eax],al
    47cf:	05 36 91 00 00       	add    eax,0x9136
    47d4:	00 05 03 cc 7d 00    	add    BYTE PTR ds:0x7dcc03,al
    47da:	9f                   	lahf   
    47db:	00 b0 01 00 00 04    	add    BYTE PTR [eax+0x4000001],dh
    47e1:	00 5d 17             	add    BYTE PTR [ebp+0x17],bl
    47e4:	00 00                	add    BYTE PTR [eax],al
    47e6:	04 01                	add    al,0x1
    47e8:	c3                   	ret    
    47e9:	00 00                	add    BYTE PTR [eax],al
    47eb:	00 0c b1             	add    BYTE PTR [ecx+esi*4],cl
    47ee:	10 00                	adc    BYTE PTR [eax],al
    47f0:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    47f3:	00 00                	add    BYTE PTR [eax],al
    47f5:	74 42                	je     4839 <sysEnter_Vector-0x12b7c7>
    47f7:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
    47fd:	ef                   	out    dx,eax
    47fe:	1a 00                	sbb    al,BYTE PTR [eax]
    4800:	00 02                	add    BYTE PTR [edx],al
    4802:	04 05                	add    al,0x5
    4804:	69 6e 74 00 03 04 07 	imul   ebp,DWORD PTR [esi+0x74],0x7040300
    480b:	32 00                	xor    al,BYTE PTR [eax]
    480d:	00 00                	add    BYTE PTR [eax],al
    480f:	03 04 05 05 00 00 00 	add    eax,DWORD PTR [eax*1+0x5]
    4816:	03 08                	add    ecx,DWORD PTR [eax]
    4818:	05 00 00 00 00       	add    eax,0x0
    481d:	03 0c 04             	add    ecx,DWORD PTR [esp+eax*1]
    4820:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4821:	00 00                	add    BYTE PTR [eax],al
    4823:	00 03                	add    BYTE PTR [ebx],al
    4825:	01 06                	add    DWORD PTR [esi],eax
    4827:	48                   	dec    eax
    4828:	00 00                	add    BYTE PTR [eax],al
    482a:	00 03                	add    BYTE PTR [ebx],al
    482c:	01 08                	add    DWORD PTR [eax],ecx
    482e:	3f                   	aas    
    482f:	00 00                	add    BYTE PTR [eax],al
    4831:	00 03                	add    BYTE PTR [ebx],al
    4833:	02 07                	add    al,BYTE PTR [edi]
    4835:	0e                   	push   cs
    4836:	00 00                	add    BYTE PTR [eax],al
    4838:	00 03                	add    BYTE PTR [ebx],al
    483a:	04 07                	add    al,0x7
    483c:	2d 00 00 00 03       	sub    eax,0x3000000
    4841:	01 06                	add    DWORD PTR [esi],eax
    4843:	41                   	inc    ecx
    4844:	00 00                	add    BYTE PTR [eax],al
    4846:	00 03                	add    BYTE PTR [ebx],al
    4848:	02 05 b9 00 00 00    	add    al,BYTE PTR ds:0xb9
    484e:	03 08                	add    ecx,DWORD PTR [eax]
    4850:	07                   	pop    es
    4851:	28 00                	sub    BYTE PTR [eax],al
    4853:	00 00                	add    BYTE PTR [eax],al
    4855:	03 04 07             	add    eax,DWORD PTR [edi+eax*1]
    4858:	2a 01                	sub    al,BYTE PTR [ecx]
    485a:	00 00                	add    BYTE PTR [eax],al
    485c:	04 04                	add    al,0x4
    485e:	48                   	dec    eax
    485f:	00 00                	add    BYTE PTR [eax],al
    4861:	00 05 c5 10 00 00    	add    BYTE PTR ds:0x10c5,al
    4867:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
    486a:	00 00                	add    BYTE PTR [eax],al
    486c:	00 74 42 00          	add    BYTE PTR [edx+eax*2+0x0],dh
    4870:	9f                   	lahf   
    4871:	9e                   	sahf   
    4872:	00 00                	add    BYTE PTR [eax],al
    4874:	00 01                	add    BYTE PTR [ecx],al
    4876:	9c                   	pushf  
    4877:	ee                   	out    dx,al
    4878:	00 00                	add    BYTE PTR [eax],al
    487a:	00 06                	add    BYTE PTR [esi],al
    487c:	d7                   	xlat   BYTE PTR ds:[ebx]
    487d:	10 00                	adc    BYTE PTR [eax],al
    487f:	00 01                	add    BYTE PTR [ecx],al
    4881:	34 80                	xor    al,0x80
    4883:	00 00                	add    BYTE PTR [eax],al
    4885:	00 02                	add    BYTE PTR [edx],al
    4887:	91                   	xchg   ecx,eax
    4888:	00 06                	add    BYTE PTR [esi],al
    488a:	d4 10                	aam    0x10
    488c:	00 00                	add    BYTE PTR [eax],al
    488e:	01 34 80             	add    DWORD PTR [eax+eax*4],esi
    4891:	00 00                	add    BYTE PTR [eax],al
    4893:	00 02                	add    BYTE PTR [edx],al
    4895:	91                   	xchg   ecx,eax
    4896:	04 06                	add    al,0x6
    4898:	87 06                	xchg   DWORD PTR [esi],eax
    489a:	00 00                	add    BYTE PTR [eax],al
    489c:	01 34 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],esi
    48a3:	91                   	xchg   ecx,eax
    48a4:	08 07                	or     BYTE PTR [edi],al
    48a6:	61                   	popa   
    48a7:	00 01                	add    BYTE PTR [ecx],al
    48a9:	36 80 00 00          	add    BYTE PTR ss:[eax],0x0
    48ad:	00 01                	add    BYTE PTR [ecx],al
    48af:	56                   	push   esi
    48b0:	07                   	pop    es
    48b1:	62 00                	bound  eax,QWORD PTR [eax]
    48b3:	01 36                	add    DWORD PTR [esi],esi
    48b5:	80 00 00             	add    BYTE PTR [eax],0x0
    48b8:	00 01                	add    BYTE PTR [ecx],al
    48ba:	53                   	push   ebx
    48bb:	07                   	pop    es
    48bc:	6c                   	ins    BYTE PTR es:[edi],dx
    48bd:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    48bf:	00 01                	add    BYTE PTR [ecx],al
    48c1:	3c 25                	cmp    al,0x25
    48c3:	00 00                	add    BYTE PTR [eax],al
    48c5:	00 02                	add    BYTE PTR [edx],al
    48c7:	91                   	xchg   ecx,eax
    48c8:	6c                   	ins    BYTE PTR es:[edi],dx
    48c9:	00 05 a9 10 00 00    	add    BYTE PTR ds:0x10a9,al
    48cf:	01 58 80             	add    DWORD PTR [eax-0x80],ebx
    48d2:	00 00                	add    BYTE PTR [eax],al
    48d4:	00 12                	add    BYTE PTR [edx],dl
    48d6:	43                   	inc    ebx
    48d7:	00 9f 6e 00 00 00    	add    BYTE PTR [edi+0x6e],bl
    48dd:	01 9c 3a 01 00 00 06 	add    DWORD PTR [edx+edi*1+0x6000001],ebx
    48e4:	d7                   	xlat   BYTE PTR ds:[ebx]
    48e5:	10 00                	adc    BYTE PTR [eax],al
    48e7:	00 01                	add    BYTE PTR [ecx],al
    48e9:	58                   	pop    eax
    48ea:	3a 01                	cmp    al,BYTE PTR [ecx]
    48ec:	00 00                	add    BYTE PTR [eax],al
    48ee:	02 91 00 06 d4 10    	add    dl,BYTE PTR [ecx+0x10d40600]
    48f4:	00 00                	add    BYTE PTR [eax],al
    48f6:	01 58 3a             	add    DWORD PTR [eax+0x3a],ebx
    48f9:	01 00                	add    DWORD PTR [eax],eax
    48fb:	00 02                	add    BYTE PTR [edx],al
    48fd:	91                   	xchg   ecx,eax
    48fe:	04 07                	add    al,0x7
    4900:	61                   	popa   
    4901:	00 01                	add    BYTE PTR [ecx],al
    4903:	5a                   	pop    edx
    4904:	80 00 00             	add    BYTE PTR [eax],0x0
    4907:	00 01                	add    BYTE PTR [ecx],al
    4909:	56                   	push   esi
    490a:	07                   	pop    es
    490b:	62 00                	bound  eax,QWORD PTR [eax]
    490d:	01 5a 80             	add    DWORD PTR [edx-0x80],ebx
    4910:	00 00                	add    BYTE PTR [eax],al
    4912:	00 01                	add    BYTE PTR [ecx],al
    4914:	53                   	push   ebx
    4915:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    4918:	40                   	inc    eax
    4919:	01 00                	add    DWORD PTR [eax],eax
    491b:	00 08                	add    BYTE PTR [eax],cl
    491d:	48                   	dec    eax
    491e:	00 00                	add    BYTE PTR [eax],al
    4920:	00 09                	add    BYTE PTR [ecx],cl
    4922:	be 10 00 00 01       	mov    esi,0x1000010
    4927:	77 80                	ja     48a9 <sysEnter_Vector-0x12b757>
    4929:	00 00                	add    BYTE PTR [eax],al
    492b:	00 80 43 00 9f 1d    	add    BYTE PTR [eax+0x1d9f0043],al
    4931:	00 00                	add    BYTE PTR [eax],al
    4933:	00 01                	add    BYTE PTR [ecx],al
    4935:	9c                   	pushf  
    4936:	7b 01                	jnp    4939 <sysEnter_Vector-0x12b6c7>
    4938:	00 00                	add    BYTE PTR [eax],al
    493a:	06                   	push   es
    493b:	d7                   	xlat   BYTE PTR ds:[ebx]
    493c:	10 00                	adc    BYTE PTR [eax],al
    493e:	00 01                	add    BYTE PTR [ecx],al
    4940:	77 3a                	ja     497c <sysEnter_Vector-0x12b684>
    4942:	01 00                	add    DWORD PTR [eax],eax
    4944:	00 02                	add    BYTE PTR [edx],al
    4946:	91                   	xchg   ecx,eax
    4947:	00 06                	add    BYTE PTR [esi],al
    4949:	d4 10                	aam    0x10
    494b:	00 00                	add    BYTE PTR [eax],al
    494d:	01 77 3a             	add    DWORD PTR [edi+0x3a],esi
    4950:	01 00                	add    DWORD PTR [eax],eax
    4952:	00 02                	add    BYTE PTR [edx],al
    4954:	91                   	xchg   ecx,eax
    4955:	04 00                	add    al,0x0
    4957:	0a 48 00             	or     cl,BYTE PTR [eax+0x0]
    495a:	00 00                	add    BYTE PTR [eax],al
    495c:	8b 01                	mov    eax,DWORD PTR [ecx]
    495e:	00 00                	add    BYTE PTR [eax],al
    4960:	0b 79 00             	or     edi,DWORD PTR [ecx+0x0]
    4963:	00 00                	add    BYTE PTR [eax],al
    4965:	65 00 0c ce          	add    BYTE PTR gs:[esi+ecx*8],cl
    4969:	10 00                	adc    BYTE PTR [eax],al
    496b:	00 01                	add    BYTE PTR [ecx],al
    496d:	19 7b 01             	sbb    DWORD PTR [ebx+0x1],edi
    4970:	00 00                	add    BYTE PTR [eax],al
    4972:	05 03 60 7c 00       	add    eax,0x7c6003
    4977:	9f                   	lahf   
    4978:	0d 78 00 00 00       	or     eax,0x78
    497d:	02 33                	add    dh,BYTE PTR [ebx]
    497f:	ad                   	lods   eax,DWORD PTR ds:[esi]
    4980:	01 00                	add    DWORD PTR [eax],eax
    4982:	00 05 03 c0 7d 00    	add    BYTE PTR ds:0x7dc003,al
    4988:	9f                   	lahf   
    4989:	04 04                	add    al,0x4
    498b:	80 00 00             	add    BYTE PTR [eax],0x0
    498e:	00 00                	add    BYTE PTR [eax],al
    4990:	8f 05 00 00 04 00    	pop    DWORD PTR ds:0x40000
    4996:	1f                   	pop    ds
    4997:	18 00                	sbb    BYTE PTR [eax],al
    4999:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    499c:	c3                   	ret    
    499d:	00 00                	add    BYTE PTR [eax],al
    499f:	00 0c de             	add    BYTE PTR [esi+ebx*8],cl
    49a2:	10 00                	adc    BYTE PTR [eax],al
    49a4:	00 4d 00             	add    BYTE PTR [ebp+0x0],cl
    49a7:	00 00                	add    BYTE PTR [eax],al
    49a9:	a0 43 00 9f 0e       	mov    al,ds:0xe9f0043
    49ae:	0d 00 00 7f 1b       	or     eax,0x1b7f0000
    49b3:	00 00                	add    BYTE PTR [eax],al
    49b5:	02 6b 03             	add    ch,BYTE PTR [ebx+0x3]
    49b8:	00 00                	add    BYTE PTR [eax],al
    49ba:	04 1f                	add    al,0x1f
    49bc:	01 00                	add    DWORD PTR [eax],eax
    49be:	00 05 15 1f 01 00    	add    BYTE PTR ds:0x11f15,al
    49c4:	00 03                	add    BYTE PTR [ebx],al
    49c6:	fd                   	std    
    49c7:	03 00                	add    eax,DWORD PTR [eax]
    49c9:	00 00                	add    BYTE PTR [eax],al
    49cb:	03 42 04             	add    eax,DWORD PTR [edx+0x4]
    49ce:	00 00                	add    BYTE PTR [eax],al
    49d0:	01 03                	add    DWORD PTR [ebx],eax
    49d2:	84 02                	test   BYTE PTR [edx],al
    49d4:	00 00                	add    BYTE PTR [eax],al
    49d6:	02 03                	add    al,BYTE PTR [ebx]
    49d8:	4e                   	dec    esi
    49d9:	03 00                	add    eax,DWORD PTR [eax]
    49db:	00 03                	add    BYTE PTR [ebx],al
    49dd:	03 6a 02             	add    ebp,DWORD PTR [edx+0x2]
    49e0:	00 00                	add    BYTE PTR [eax],al
    49e2:	04 03                	add    al,0x3
    49e4:	6b 04 00 00          	imul   eax,DWORD PTR [eax+eax*1],0x0
    49e8:	05 03 24 04 00       	add    eax,0x42403
    49ed:	00 0a                	add    BYTE PTR [edx],cl
    49ef:	03 8f 03 00 00 0b    	add    ecx,DWORD PTR [edi+0xb000003]
    49f5:	03 d6                	add    edx,esi
    49f7:	03 00                	add    eax,DWORD PTR [eax]
    49f9:	00 0c 03             	add    BYTE PTR [ebx+eax*1],cl
    49fc:	5c                   	pop    esp
    49fd:	03 00                	add    eax,DWORD PTR [eax]
    49ff:	00 0d 03 75 03 00    	add    BYTE PTR ds:0x37503,cl
    4a05:	00 0e                	add    BYTE PTR [esi],cl
    4a07:	03 77 02             	add    esi,DWORD PTR [edi+0x2]
    4a0a:	00 00                	add    BYTE PTR [eax],al
    4a0c:	0f 03 b7 03 00 00 10 	lsl    esi,WORD PTR [edi+0x10000003]
    4a13:	03 a9 04 00 00 11    	add    ebp,DWORD PTR [ecx+0x11000004]
    4a19:	03 87 04 00 00 4f    	add    eax,DWORD PTR [edi+0x4f000004]
    4a1f:	03 5c 04 00          	add    ebx,DWORD PTR [esp+eax*1+0x0]
    4a23:	00 50 03             	add    BYTE PTR [eax+0x3],dl
    4a26:	f0 03 00             	lock add eax,DWORD PTR [eax]
    4a29:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    4a2c:	96                   	xchg   esi,eax
    4a2d:	04 00                	add    al,0x0
    4a2f:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    4a32:	1b 03                	sbb    eax,DWORD PTR [ebx]
    4a34:	00 00                	add    BYTE PTR [eax],al
    4a36:	97                   	xchg   edi,eax
    4a37:	04 0d                	add    al,0xd
    4a39:	04 00                	add    al,0x0
    4a3b:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    4a3e:	04 e3                	add    al,0xe3
    4a40:	03 00                	add    eax,DWORD PTR [eax]
    4a42:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    4a46:	c6 04 00 00          	mov    BYTE PTR [eax+eax*1],0x0
    4a4a:	65 01 04 f7          	add    DWORD PTR gs:[edi+esi*8],eax
    4a4e:	02 00                	add    al,BYTE PTR [eax]
    4a50:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    4a53:	04 d8                	add    al,0xd8
    4a55:	04 00                	add    al,0x0
    4a57:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    4a5a:	04 82                	add    al,0x82
    4a5c:	03 00                	add    eax,DWORD PTR [eax]
    4a5e:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    4a61:	04 b8                	add    al,0xb8
    4a63:	02 00                	add    al,BYTE PTR [eax]
    4a65:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    4a68:	04 31                	add    al,0x31
    4a6a:	04 00                	add    al,0x0
    4a6c:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    4a6f:	04 0b                	add    al,0xb
    4a71:	03 00                	add    eax,DWORD PTR [eax]
    4a73:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    4a76:	04 79                	add    al,0x79
    4a78:	04 00                	add    al,0x0
    4a7a:	00 00                	add    BYTE PTR [eax],al
    4a7c:	03 04 9c             	add    eax,DWORD PTR [esp+ebx*4]
    4a7f:	03 00                	add    eax,DWORD PTR [eax]
    4a81:	00 01                	add    BYTE PTR [ecx],al
    4a83:	03 04 ab             	add    eax,DWORD PTR [ebx+ebp*4]
    4a86:	03 00                	add    eax,DWORD PTR [eax]
    4a88:	00 02                	add    BYTE PTR [edx],al
    4a8a:	03 04 3e             	add    eax,DWORD PTR [esi+edi*1]
    4a8d:	03 00                	add    eax,DWORD PTR [eax]
    4a8f:	00 03                	add    BYTE PTR [ebx],al
    4a91:	03 04 98             	add    eax,DWORD PTR [eax+ebx*4]
    4a94:	02 00                	add    al,BYTE PTR [eax]
    4a96:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    4a99:	04 e7                	add    al,0xe7
    4a9b:	02 00                	add    al,BYTE PTR [eax]
    4a9d:	00 05 03 04 2f 03    	add    BYTE PTR ds:0x32f0403,al
    4aa3:	00 00                	add    BYTE PTR [eax],al
    4aa5:	06                   	push   es
    4aa6:	03 04 c4             	add    eax,DWORD PTR [esp+eax*8]
    4aa9:	03 00                	add    eax,DWORD PTR [eax]
    4aab:	00 00                	add    BYTE PTR [eax],al
    4aad:	09 00                	or     DWORD PTR [eax],eax
    4aaf:	05 04 07 32 00       	add    eax,0x320704
    4ab4:	00 00                	add    BYTE PTR [eax],al
    4ab6:	06                   	push   es
    4ab7:	04 05                	add    al,0x5
    4ab9:	69 6e 74 00 05 01 08 	imul   ebp,DWORD PTR [esi+0x74],0x8010500
    4ac0:	3f                   	aas    
    4ac1:	00 00                	add    BYTE PTR [eax],al
    4ac3:	00 05 02 07 0e 00    	add    BYTE PTR ds:0xe0702,al
    4ac9:	00 00                	add    BYTE PTR [eax],al
    4acb:	05 04 07 2d 00       	add    eax,0x2d0704
    4ad0:	00 00                	add    BYTE PTR [eax],al
    4ad2:	05 01 06 41 00       	add    eax,0x410601
    4ad7:	00 00                	add    BYTE PTR [eax],al
    4ad9:	05 02 05 b9 00       	add    eax,0xb90502
    4ade:	00 00                	add    BYTE PTR [eax],al
    4ae0:	05 08 05 00 00       	add    eax,0x508
    4ae5:	00 00                	add    BYTE PTR [eax],al
    4ae7:	05 08 07 28 00       	add    eax,0x280708
    4aec:	00 00                	add    BYTE PTR [eax],al
    4aee:	05 04 05 05 00       	add    eax,0x50504
    4af3:	00 00                	add    BYTE PTR [eax],al
    4af5:	05 04 07 2a 01       	add    eax,0x12a0704
    4afa:	00 00                	add    BYTE PTR [eax],al
    4afc:	07                   	pop    es
    4afd:	04 72                	add    al,0x72
    4aff:	01 00                	add    DWORD PTR [eax],eax
    4b01:	00 05 01 06 48 00    	add    BYTE PTR ds:0x480601,al
    4b07:	00 00                	add    BYTE PTR [eax],al
    4b09:	08 45 02             	or     BYTE PTR [ebp+0x2],al
    4b0c:	00 00                	add    BYTE PTR [eax],al
    4b0e:	02 34 1f             	add    dh,BYTE PTR [edi+ebx*1]
    4b11:	01 00                	add    DWORD PTR [eax],eax
    4b13:	00 05 0c 04 ad 00    	add    BYTE PTR ds:0xad040c,al
    4b19:	00 00                	add    BYTE PTR [eax],al
    4b1b:	08 38                	or     BYTE PTR [eax],bh
    4b1d:	0d 00 00 03 2a       	or     eax,0x2a030000
    4b22:	5e                   	pop    esi
    4b23:	01 00                	add    DWORD PTR [eax],eax
    4b25:	00 09                	add    BYTE PTR [ecx],cl
    4b27:	74 6d                	je     4b96 <sysEnter_Vector-0x12b46a>
    4b29:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    4b2c:	2c 26                	sub    al,0x26
    4b2e:	02 00                	add    al,BYTE PTR [eax]
    4b30:	00 0a                	add    BYTE PTR [edx],cl
    4b32:	b9 0d 00 00 03       	mov    ecx,0x300000d
    4b37:	2e 26 01 00          	cs add DWORD PTR cs:es:[eax],eax
    4b3b:	00 00                	add    BYTE PTR [eax],al
    4b3d:	0a 13                	or     dl,BYTE PTR [ebx]
    4b3f:	0d 00 00 03 2f       	or     eax,0x2f030000
    4b44:	26 01 00             	add    DWORD PTR es:[eax],eax
    4b47:	00 04 0a             	add    BYTE PTR [edx+ecx*1],al
    4b4a:	32 0c 00             	xor    cl,BYTE PTR [eax+eax*1]
    4b4d:	00 03                	add    BYTE PTR [ebx],al
    4b4f:	30 26                	xor    BYTE PTR [esi],ah
    4b51:	01 00                	add    DWORD PTR [eax],eax
    4b53:	00 08                	add    BYTE PTR [eax],cl
    4b55:	0a 9a 0d 00 00 03    	or     bl,BYTE PTR [edx+0x300000d]
    4b5b:	31 26                	xor    DWORD PTR [esi],esp
    4b5d:	01 00                	add    DWORD PTR [eax],eax
    4b5f:	00 0c 0a             	add    BYTE PTR [edx+ecx*1],cl
    4b62:	88 0c 00             	mov    BYTE PTR [eax+eax*1],cl
    4b65:	00 03                	add    BYTE PTR [ebx],al
    4b67:	32 26                	xor    ah,BYTE PTR [esi]
    4b69:	01 00                	add    DWORD PTR [eax],eax
    4b6b:	00 10                	add    BYTE PTR [eax],dl
    4b6d:	0a a2 0c 00 00 03    	or     ah,BYTE PTR [edx+0x300000c]
    4b73:	33 26                	xor    esp,DWORD PTR [esi]
    4b75:	01 00                	add    DWORD PTR [eax],eax
    4b77:	00 14 0a             	add    BYTE PTR [edx+ecx*1],dl
    4b7a:	92                   	xchg   edx,eax
    4b7b:	0d 00 00 03 34       	or     eax,0x34030000
    4b80:	26 01 00             	add    DWORD PTR es:[eax],eax
    4b83:	00 18                	add    BYTE PTR [eax],bl
    4b85:	0a 1a                	or     bl,BYTE PTR [edx]
    4b87:	0d 00 00 03 35       	or     eax,0x35030000
    4b8c:	26 01 00             	add    DWORD PTR es:[eax],eax
    4b8f:	00 1c 0a             	add    BYTE PTR [edx+ecx*1],bl
    4b92:	d5 0c                	aad    0xc
    4b94:	00 00                	add    BYTE PTR [eax],al
    4b96:	03 36                	add    esi,DWORD PTR [esi]
    4b98:	26 01 00             	add    DWORD PTR es:[eax],eax
    4b9b:	00 20                	add    BYTE PTR [eax],ah
    4b9d:	0a 59 0d             	or     bl,BYTE PTR [ecx+0xd]
    4ba0:	00 00                	add    BYTE PTR [eax],al
    4ba2:	03 37                	add    esi,DWORD PTR [edi]
    4ba4:	5e                   	pop    esi
    4ba5:	01 00                	add    DWORD PTR [eax],eax
    4ba7:	00 24 0a             	add    BYTE PTR [edx+ecx*1],ah
    4baa:	47                   	inc    edi
    4bab:	0c 00                	or     al,0x0
    4bad:	00 03                	add    BYTE PTR [ebx],al
    4baf:	38 26                	cmp    BYTE PTR [esi],ah
    4bb1:	02 00                	add    al,BYTE PTR [eax]
    4bb3:	00 28                	add    BYTE PTR [eax],ch
    4bb5:	00 07                	add    BYTE PTR [edi],al
    4bb7:	04 2c                	add    al,0x2c
    4bb9:	02 00                	add    al,BYTE PTR [eax]
    4bbb:	00 0b                	add    BYTE PTR [ebx],cl
    4bbd:	72 01                	jb     4bc0 <sysEnter_Vector-0x12b440>
    4bbf:	00 00                	add    BYTE PTR [eax],al
    4bc1:	0c f3                	or     al,0xf3
    4bc3:	10 00                	adc    BYTE PTR [eax],al
    4bc5:	00 01                	add    BYTE PTR [ecx],al
    4bc7:	1a 8b 01 00 00 a0    	sbb    cl,BYTE PTR [ebx-0x5fffffff]
    4bcd:	43                   	inc    ebx
    4bce:	00 9f 44 00 00 00    	add    BYTE PTR [edi+0x44],bl
    4bd4:	01 9c 59 02 00 00 0d 	add    DWORD PTR [ecx+ebx*2+0xd000002],ebx
    4bdb:	f4                   	hlt    
    4bdc:	04 00                	add    al,0x0
    4bde:	00 01                	add    BYTE PTR [ecx],al
    4be0:	1c 79                	sbb    al,0x79
    4be2:	01 00                	add    DWORD PTR [eax],eax
    4be4:	00 02                	add    BYTE PTR [edx],al
    4be6:	91                   	xchg   ecx,eax
    4be7:	6c                   	ins    BYTE PTR es:[edi],dx
    4be8:	00 0e                	add    BYTE PTR [esi],cl
    4bea:	3e 11 00             	adc    DWORD PTR ds:[eax],eax
    4bed:	00 01                	add    BYTE PTR [ecx],al
    4bef:	22 c7                	and    al,bh
    4bf1:	02 00                	add    al,BYTE PTR [eax]
    4bf3:	00 e4                	add    ah,ah
    4bf5:	43                   	inc    ebx
    4bf6:	00 9f 19 03 00 00    	add    BYTE PTR [edi+0x319],bl
    4bfc:	01 9c c7 02 00 00 0f 	add    DWORD PTR [edi+eax*8+0xf000002],ebx
    4c03:	7a 11                	jp     4c16 <sysEnter_Vector-0x12b3ea>
    4c05:	00 00                	add    BYTE PTR [eax],al
    4c07:	01 22                	add    DWORD PTR [edx],esp
    4c09:	cd 02                	int    0x2
    4c0b:	00 00                	add    BYTE PTR [eax],al
    4c0d:	02 91 00 0f 52 11    	add    dl,BYTE PTR [ecx+0x11520f00]
    4c13:	00 00                	add    BYTE PTR [eax],al
    4c15:	01 22                	add    DWORD PTR [edx],esp
    4c17:	c7 02 00 00 02 91    	mov    DWORD PTR [edx],0x91020000
    4c1d:	04 0d                	add    al,0xd
    4c1f:	b2 06                	mov    dl,0x6
    4c21:	00 00                	add    BYTE PTR [eax],al
    4c23:	01 24 8b             	add    DWORD PTR [ebx+ecx*4],esp
    4c26:	01 00                	add    DWORD PTR [eax],eax
    4c28:	00 02                	add    BYTE PTR [edx],al
    4c2a:	91                   	xchg   ecx,eax
    4c2b:	68 0d 64 11 00       	push   0x11640d
    4c30:	00 01                	add    BYTE PTR [ecx],al
    4c32:	25 3b 01 00 00       	and    eax,0x13b
    4c37:	02 91 64 0d 38 11    	add    dl,BYTE PTR [ecx+0x11380d64]
    4c3d:	00 00                	add    BYTE PTR [eax],al
    4c3f:	01 25 3b 01 00 00    	add    DWORD PTR ds:0x13b,esp
    4c45:	02 91 70 0d a5 0c    	add    dl,BYTE PTR [ecx+0xca50d70]
    4c4b:	00 00                	add    BYTE PTR [eax],al
    4c4d:	01 26                	add    DWORD PTR [esi],esp
    4c4f:	26 01 00             	add    DWORD PTR es:[eax],eax
    4c52:	00 02                	add    BYTE PTR [edx],al
    4c54:	91                   	xchg   ecx,eax
    4c55:	6c                   	ins    BYTE PTR es:[edi],dx
    4c56:	00 07                	add    BYTE PTR [edi],al
    4c58:	04 96                	add    al,0x96
    4c5a:	01 00                	add    DWORD PTR [eax],eax
    4c5c:	00 07                	add    BYTE PTR [edi],al
    4c5e:	04 d3                	add    al,0xd3
    4c60:	02 00                	add    al,BYTE PTR [eax]
    4c62:	00 0b                	add    BYTE PTR [ebx],cl
    4c64:	8b 01                	mov    eax,DWORD PTR [ecx]
    4c66:	00 00                	add    BYTE PTR [eax],al
    4c68:	10 15 11 00 00 01    	adc    BYTE PTR ds:0x1000011,dl
    4c6e:	3f                   	aas    
    4c6f:	c7 02 00 00 fd 46    	mov    DWORD PTR [edx],0x46fd0000
    4c75:	00 9f 1d 00 00 00    	add    BYTE PTR [edi+0x1d],bl
    4c7b:	01 9c 0e 03 00 00 0f 	add    DWORD PTR [esi+ecx*1+0xf000003],ebx
    4c82:	7a 11                	jp     4c95 <sysEnter_Vector-0x12b36b>
    4c84:	00 00                	add    BYTE PTR [eax],al
    4c86:	01 3f                	add    DWORD PTR [edi],edi
    4c88:	cd 02                	int    0x2
    4c8a:	00 00                	add    BYTE PTR [eax],al
    4c8c:	02 91 00 0f 52 11    	add    dl,BYTE PTR [ecx+0x11520f00]
    4c92:	00 00                	add    BYTE PTR [eax],al
    4c94:	01 3f                	add    DWORD PTR [edi],edi
    4c96:	c7 02 00 00 02 91    	mov    DWORD PTR [edx],0x91020000
    4c9c:	04 00                	add    al,0x0
    4c9e:	10 e9                	adc    cl,ch
    4ca0:	10 00                	adc    BYTE PTR [eax],al
    4ca2:	00 01                	add    BYTE PTR [ecx],al
    4ca4:	44                   	inc    esp
    4ca5:	c7 02 00 00 1a 47    	mov    DWORD PTR [edx],0x471a0000
    4cab:	00 9f 3d 00 00 00    	add    BYTE PTR [edi+0x3d],bl
    4cb1:	01 9c 42 03 00 00 0f 	add    DWORD PTR [edx+eax*2+0xf000003],ebx
    4cb8:	7a 11                	jp     4ccb <sysEnter_Vector-0x12b335>
    4cba:	00 00                	add    BYTE PTR [eax],al
    4cbc:	01 44 cd 02          	add    DWORD PTR [ebp+ecx*8+0x2],eax
    4cc0:	00 00                	add    BYTE PTR [eax],al
    4cc2:	02 91 00 11 74 00    	add    dl,BYTE PTR [ecx+0x741100]
    4cc8:	01 45 8b             	add    DWORD PTR [ebp-0x75],eax
    4ccb:	01 00                	add    DWORD PTR [eax],eax
    4ccd:	00 02                	add    BYTE PTR [edx],al
    4ccf:	91                   	xchg   ecx,eax
    4cd0:	74 00                	je     4cd2 <sysEnter_Vector-0x12b32e>
    4cd2:	10 80 11 00 00 01    	adc    BYTE PTR [eax+0x1000011],al
    4cd8:	4b                   	dec    ebx
    4cd9:	c7 02 00 00 57 47    	mov    DWORD PTR [edx],0x47570000
    4cdf:	00 9f 35 00 00 00    	add    BYTE PTR [edi+0x35],bl
    4ce5:	01 9c 84 03 00 00 0f 	add    DWORD PTR [esp+eax*4+0xf000003],ebx
    4cec:	7a 11                	jp     4cff <sysEnter_Vector-0x12b301>
    4cee:	00 00                	add    BYTE PTR [eax],al
    4cf0:	01 4b cd             	add    DWORD PTR [ebx-0x33],ecx
    4cf3:	02 00                	add    al,BYTE PTR [eax]
    4cf5:	00 02                	add    BYTE PTR [edx],al
    4cf7:	91                   	xchg   ecx,eax
    4cf8:	00 0f                	add    BYTE PTR [edi],cl
    4cfa:	52                   	push   edx
    4cfb:	11 00                	adc    DWORD PTR [eax],eax
    4cfd:	00 01                	add    BYTE PTR [ecx],al
    4cff:	4b                   	dec    ebx
    4d00:	c7 02 00 00 02 91    	mov    DWORD PTR [edx],0x91020000
    4d06:	04 11                	add    al,0x11
    4d08:	74 00                	je     4d0a <sysEnter_Vector-0x12b2f6>
    4d0a:	01 4d 8b             	add    DWORD PTR [ebp-0x75],ecx
    4d0d:	01 00                	add    DWORD PTR [eax],eax
    4d0f:	00 02                	add    BYTE PTR [edx],al
    4d11:	91                   	xchg   ecx,eax
    4d12:	74 00                	je     4d14 <sysEnter_Vector-0x12b2ec>
    4d14:	10 58 11             	adc    BYTE PTR [eax+0x11],bl
    4d17:	00 00                	add    BYTE PTR [eax],al
    4d19:	01 53 c7             	add    DWORD PTR [ebx-0x39],edx
    4d1c:	02 00                	add    al,BYTE PTR [eax]
    4d1e:	00 8c 47 00 9f 1d 00 	add    BYTE PTR [edi+eax*2+0x1d9f00],cl
    4d25:	00 00                	add    BYTE PTR [eax],al
    4d27:	01 9c ba 03 00 00 0f 	add    DWORD PTR [edx+edi*4+0xf000003],ebx
    4d2e:	7a 11                	jp     4d41 <sysEnter_Vector-0x12b2bf>
    4d30:	00 00                	add    BYTE PTR [eax],al
    4d32:	01 53 cd             	add    DWORD PTR [ebx-0x33],edx
    4d35:	02 00                	add    al,BYTE PTR [eax]
    4d37:	00 02                	add    BYTE PTR [edx],al
    4d39:	91                   	xchg   ecx,eax
    4d3a:	00 0f                	add    BYTE PTR [edi],cl
    4d3c:	52                   	push   edx
    4d3d:	11 00                	adc    DWORD PTR [eax],eax
    4d3f:	00 01                	add    BYTE PTR [ecx],al
    4d41:	53                   	push   ebx
    4d42:	c7 02 00 00 02 91    	mov    DWORD PTR [edx],0x91020000
    4d48:	04 00                	add    al,0x0
    4d4a:	0e                   	push   cs
    4d4b:	6d                   	ins    DWORD PTR es:[edi],dx
    4d4c:	11 00                	adc    DWORD PTR [eax],eax
    4d4e:	00 01                	add    BYTE PTR [ecx],al
    4d50:	57                   	push   edi
    4d51:	8b 01                	mov    eax,DWORD PTR [ecx]
    4d53:	00 00                	add    BYTE PTR [eax],al
    4d55:	a9 47 00 9f 57       	test   eax,0x579f0047
    4d5a:	08 00                	or     BYTE PTR [eax],al
    4d5c:	00 01                	add    BYTE PTR [ecx],al
    4d5e:	9c                   	pushf  
    4d5f:	52                   	push   edx
    4d60:	04 00                	add    al,0x0
    4d62:	00 0f                	add    BYTE PTR [edi],cl
    4d64:	52                   	push   edx
    4d65:	11 00                	adc    DWORD PTR [eax],eax
    4d67:	00 01                	add    BYTE PTR [ecx],al
    4d69:	57                   	push   edi
    4d6a:	c7 02 00 00 02 91    	mov    DWORD PTR [edx],0x91020000
    4d70:	00 11                	add    BYTE PTR [ecx],dl
    4d72:	64                   	fs
    4d73:	61                   	popa   
    4d74:	79 00                	jns    4d76 <sysEnter_Vector-0x12b28a>
    4d76:	01 58 5e             	add    DWORD PTR [eax+0x5e],ebx
    4d79:	01 00                	add    DWORD PTR [eax],eax
    4d7b:	00 02                	add    BYTE PTR [edx],al
    4d7d:	91                   	xchg   ecx,eax
    4d7e:	68 0d a5 0c 00       	push   0xca50d
    4d83:	00 01                	add    BYTE PTR [ecx],al
    4d85:	58                   	pop    eax
    4d86:	5e                   	pop    esi
    4d87:	01 00                	add    DWORD PTR [eax],eax
    4d89:	00 02                	add    BYTE PTR [edx],al
    4d8b:	91                   	xchg   ecx,eax
    4d8c:	54                   	push   esp
    4d8d:	0d a2 0c 00 00       	or     eax,0xca2
    4d92:	01 59 26             	add    DWORD PTR [ecx+0x26],ebx
    4d95:	01 00                	add    DWORD PTR [eax],eax
    4d97:	00 02                	add    BYTE PTR [edx],al
    4d99:	91                   	xchg   ecx,eax
    4d9a:	4c                   	dec    esp
    4d9b:	0d 1d 0d 00 00       	or     eax,0xd1d
    4da0:	01 5a 26             	add    DWORD PTR [edx+0x26],ebx
    4da3:	01 00                	add    DWORD PTR [eax],eax
    4da5:	00 02                	add    BYTE PTR [edx],al
    4da7:	91                   	xchg   ecx,eax
    4da8:	64                   	fs
    4da9:	0d 2a 11 00 00       	or     eax,0x112a
    4dae:	01 5a 26             	add    DWORD PTR [edx+0x26],ebx
    4db1:	01 00                	add    DWORD PTR [eax],eax
    4db3:	00 02                	add    BYTE PTR [edx],al
    4db5:	91                   	xchg   ecx,eax
    4db6:	60                   	pusha  
    4db7:	0d 31 09 00 00       	or     eax,0x931
    4dbc:	01 5b 5e             	add    DWORD PTR [ebx+0x5e],ebx
    4dbf:	01 00                	add    DWORD PTR [eax],eax
    4dc1:	00 02                	add    BYTE PTR [edx],al
    4dc3:	91                   	xchg   ecx,eax
    4dc4:	50                   	push   eax
    4dc5:	0d 9d 11 00 00       	or     eax,0x119d
    4dca:	01 5c 26 01          	add    DWORD PTR [esi+eiz*1+0x1],ebx
    4dce:	00 00                	add    BYTE PTR [eax],al
    4dd0:	02 91 5c 11 64 73    	add    dl,BYTE PTR [ecx+0x7364115c]
    4dd6:	74 00                	je     4dd8 <sysEnter_Vector-0x12b228>
    4dd8:	01 5d 5e             	add    DWORD PTR [ebp+0x5e],ebx
    4ddb:	01 00                	add    DWORD PTR [eax],eax
    4ddd:	00 02                	add    BYTE PTR [edx],al
    4ddf:	91                   	xchg   ecx,eax
    4de0:	58                   	pop    eax
    4de1:	00 10                	add    BYTE PTR [eax],dl
    4de3:	30 11                	xor    BYTE PTR [ecx],dl
    4de5:	00 00                	add    BYTE PTR [eax],al
    4de7:	01 c2                	add    edx,eax
    4de9:	c7 02 00 00 00 50    	mov    DWORD PTR [edx],0x50000000
    4def:	00 9f 6d 00 00 00    	add    BYTE PTR [edi+0x6d],bl
    4df5:	01 9c 96 04 00 00 0f 	add    DWORD PTR [esi+edx*4+0xf000004],ebx
    4dfc:	b2 06                	mov    dl,0x6
    4dfe:	00 00                	add    BYTE PTR [eax],al
    4e00:	01 c2                	add    edx,eax
    4e02:	c7 02 00 00 02 91    	mov    DWORD PTR [edx],0x91020000
    4e08:	00 0f                	add    BYTE PTR [edi],cl
    4e0a:	48                   	dec    eax
    4e0b:	11 00                	adc    DWORD PTR [eax],eax
    4e0d:	00 01                	add    BYTE PTR [ecx],al
    4e0f:	c2 96 04             	ret    0x496
    4e12:	00 00                	add    BYTE PTR [eax],al
    4e14:	02 91 5c 0d be 09    	add    dl,BYTE PTR [ecx+0x9be0d5c]
    4e1a:	00 00                	add    BYTE PTR [eax],al
    4e1c:	01 c4                	add    esp,eax
    4e1e:	8b 01                	mov    eax,DWORD PTR [ecx]
    4e20:	00 00                	add    BYTE PTR [eax],al
    4e22:	02 91 6c 00 05 01    	add    dl,BYTE PTR [ecx+0x105006c]
    4e28:	02 6a 06             	add    ch,BYTE PTR [edx+0x6]
    4e2b:	00 00                	add    BYTE PTR [eax],al
    4e2d:	10 b2 06 00 00 01    	adc    BYTE PTR [edx+0x1000006],dh
    4e33:	cd 8b                	int    0x8b
    4e35:	01 00                	add    DWORD PTR [eax],eax
    4e37:	00 6d 50             	add    BYTE PTR [ebp+0x50],ch
    4e3a:	00 9f 41 00 00 00    	add    BYTE PTR [edi+0x41],bl
    4e40:	01 9c d3 04 00 00 0f 	add    DWORD PTR [ebx+edx*8+0xf000004],ebx
    4e47:	96                   	xchg   esi,eax
    4e48:	11 00                	adc    DWORD PTR [eax],eax
    4e4a:	00 01                	add    BYTE PTR [ecx],al
    4e4c:	cd d3                	int    0xd3
    4e4e:	04 00                	add    al,0x0
    4e50:	00 02                	add    BYTE PTR [edx],al
    4e52:	91                   	xchg   ecx,eax
    4e53:	00 0d be 09 00 00    	add    BYTE PTR ds:0x9be,cl
    4e59:	01 cf                	add    edi,ecx
    4e5b:	79 01                	jns    4e5e <sysEnter_Vector-0x12b1a2>
    4e5d:	00 00                	add    BYTE PTR [eax],al
    4e5f:	02 91 6c 00 07 04    	add    dl,BYTE PTR [ecx+0x407006c]
    4e65:	8b 01                	mov    eax,DWORD PTR [ecx]
    4e67:	00 00                	add    BYTE PTR [eax],al
    4e69:	12 78 00             	adc    bh,BYTE PTR [eax+0x0]
    4e6c:	00 00                	add    BYTE PTR [eax],al
    4e6e:	04 33                	add    al,0x33
    4e70:	ea 04 00 00 05 03 c0 	jmp    0xc003:0x5000004
    4e77:	7d 00                	jge    4e79 <sysEnter_Vector-0x12b187>
    4e79:	9f                   	lahf   
    4e7a:	07                   	pop    es
    4e7b:	04 6c                	add    al,0x6c
    4e7d:	01 00                	add    DWORD PTR [eax],eax
    4e7f:	00 12                	add    BYTE PTR [edx],dl
    4e81:	fc                   	cld    
    4e82:	10 00                	adc    BYTE PTR [eax],al
    4e84:	00 01                	add    BYTE PTR [ecx],al
    4e86:	0d 26 01 00 00       	or     eax,0x126
    4e8b:	05 03 c8 7c 00       	add    eax,0x7cc803
    4e90:	9f                   	lahf   
    4e91:	12 8d 11 00 00 01    	adc    cl,BYTE PTR [ebp+0x1000011]
    4e97:	0e                   	push   cs
    4e98:	5e                   	pop    esi
    4e99:	01 00                	add    DWORD PTR [eax],eax
    4e9b:	00 05 03 50 7e 00    	add    BYTE PTR ds:0x7e5003,al
    4ea1:	9f                   	lahf   
    4ea2:	13 6c 01 00          	adc    ebp,DWORD PTR [ecx+eax*1+0x0]
    4ea6:	00 22                	add    BYTE PTR [edx],ah
    4ea8:	05 00 00 14 65       	add    eax,0x65140000
    4ead:	01 00                	add    DWORD PTR [eax],eax
    4eaf:	00 01                	add    BYTE PTR [ecx],al
    4eb1:	00 12                	add    BYTE PTR [edx],dl
    4eb3:	0d 11 00 00 01       	or     eax,0x1000011
    4eb8:	0f 12 05 00 00 05 03 	movlps xmm0,QWORD PTR ds:0x3050000
    4ebf:	b0 7d                	mov    al,0x7d
    4ec1:	00 9f 12 1e 11 00    	add    BYTE PTR [edi+0x111e12],bl
    4ec7:	00 01                	add    BYTE PTR [ecx],al
    4ec9:	10 26                	adc    BYTE PTR [esi],ah
    4ecb:	01 00                	add    DWORD PTR [eax],eax
    4ecd:	00 05 03 60 7e 00    	add    BYTE PTR ds:0x7e6003,al
    4ed3:	9f                   	lahf   
    4ed4:	12 52 11             	adc    dl,BYTE PTR [edx+0x11]
    4ed7:	00 00                	add    BYTE PTR [eax],al
    4ed9:	01 11                	add    DWORD PTR [ecx],edx
    4edb:	96                   	xchg   esi,eax
    4edc:	01 00                	add    DWORD PTR [eax],eax
    4ede:	00 05 03 80 7e 00    	add    BYTE PTR ds:0x7e8003,al
    4ee4:	9f                   	lahf   
    4ee5:	12 06                	adc    al,BYTE PTR [esi]
    4ee7:	11 00                	adc    DWORD PTR [eax],eax
    4ee9:	00 01                	add    BYTE PTR [ecx],al
    4eeb:	13 5e 01             	adc    ebx,DWORD PTR [esi+0x1]
    4eee:	00 00                	add    BYTE PTR [eax],al
    4ef0:	05 03 54 7e 00       	add    eax,0x7e5403
    4ef5:	9f                   	lahf   
    4ef6:	13 26                	adc    esp,DWORD PTR [esi]
    4ef8:	01 00                	add    DWORD PTR [eax],eax
    4efa:	00 7c 05 00          	add    BYTE PTR [ebp+eax*1+0x0],bh
    4efe:	00 14 65 01 00 00 01 	add    BYTE PTR [eiz*2+0x1000001],dl
    4f05:	14 65                	adc    al,0x65
    4f07:	01 00                	add    DWORD PTR [eax],eax
    4f09:	00 0b                	add    BYTE PTR [ebx],cl
    4f0b:	00 12                	add    BYTE PTR [edx],dl
    4f0d:	74 11                	je     4f20 <sysEnter_Vector-0x12b0e0>
    4f0f:	00 00                	add    BYTE PTR [eax],al
    4f11:	01 15 8d 05 00 00    	add    DWORD PTR ds:0x58d,edx
    4f17:	05 03 c0 7a 00       	add    eax,0x7ac003
    4f1c:	9f                   	lahf   
    4f1d:	0b 66 05             	or     esp,DWORD PTR [esi+0x5]
    4f20:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	08 00                	or     BYTE PTR [eax],al
      1d:	00 03                	add    BYTE PTR [ebx],al
      1f:	24 00                	and    al,0x0
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	0e                   	push   cs
      27:	00 00                	add    BYTE PTR [eax],al
      29:	04 0f                	add    al,0xf
      2b:	00 0b                	add    BYTE PTR [ebx],cl
      2d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      30:	00 00                	add    BYTE PTR [eax],al
      32:	05 2e 01 3f 19       	add    eax,0x193f012e
      37:	03 0e                	add    ecx,DWORD PTR [esi]
      39:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      3b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      3d:	27                   	daa    
      3e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      41:	11 01                	adc    DWORD PTR [ecx],eax
      43:	12 06                	adc    al,BYTE PTR [esi]
      45:	40                   	inc    eax
      46:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      4c:	00 00                	add    BYTE PTR [eax],al
      4e:	06                   	push   es
      4f:	05 00 03 08 3a       	add    eax,0x3a080300
      54:	0b 3b                	or     edi,DWORD PTR [ebx]
      56:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      59:	02 18                	add    bl,BYTE PTR [eax]
      5b:	00 00                	add    BYTE PTR [eax],al
      5d:	07                   	pop    es
      5e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      62:	00 00                	add    BYTE PTR [eax],al
      64:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      67:	03 0e                	add    ecx,DWORD PTR [esi]
      69:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      6b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      6d:	49                   	dec    ecx
      6e:	13 3f                	adc    edi,DWORD PTR [edi]
      70:	19 02                	sbb    DWORD PTR [edx],eax
      72:	18 00                	sbb    BYTE PTR [eax],al
      74:	00 00                	add    BYTE PTR [eax],al
      76:	01 11                	add    DWORD PTR [ecx],edx
      78:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      7e:	0e                   	push   cs
      7f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      81:	11 01                	adc    DWORD PTR [ecx],eax
      83:	12 06                	adc    al,BYTE PTR [esi]
      85:	10 17                	adc    BYTE PTR [edi],dl
      87:	00 00                	add    BYTE PTR [eax],al
      89:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      8c:	0b 0b                	or     ecx,DWORD PTR [ebx]
      8e:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      91:	08 00                	or     BYTE PTR [eax],al
      93:	00 03                	add    BYTE PTR [ebx],al
      95:	24 00                	and    al,0x0
      97:	0b 0b                	or     ecx,DWORD PTR [ebx]
      99:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9c:	0e                   	push   cs
      9d:	00 00                	add    BYTE PTR [eax],al
      9f:	04 0f                	add    al,0xf
      a1:	00 0b                	add    BYTE PTR [ebx],cl
      a3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	05 2e 01 3f 19       	add    eax,0x193f012e
      ad:	03 0e                	add    ecx,DWORD PTR [esi]
      af:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b3:	27                   	daa    
      b4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      b7:	11 01                	adc    DWORD PTR [ecx],eax
      b9:	12 06                	adc    al,BYTE PTR [esi]
      bb:	40                   	inc    eax
      bc:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      c2:	00 00                	add    BYTE PTR [eax],al
      c4:	06                   	push   es
      c5:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      ca:	0b 3b                	or     edi,DWORD PTR [ebx]
      cc:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      cf:	02 18                	add    bl,BYTE PTR [eax]
      d1:	00 00                	add    BYTE PTR [eax],al
      d3:	07                   	pop    es
      d4:	34 00                	xor    al,0x0
      d6:	03 08                	add    ecx,DWORD PTR [eax]
      d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      dc:	49                   	dec    ecx
      dd:	13 02                	adc    eax,DWORD PTR [edx]
      df:	18 00                	sbb    BYTE PTR [eax],al
      e1:	00 08                	add    BYTE PTR [eax],cl
      e3:	34 00                	xor    al,0x0
      e5:	03 0e                	add    ecx,DWORD PTR [esi]
      e7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      e9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      eb:	49                   	dec    ecx
      ec:	13 3f                	adc    edi,DWORD PTR [edi]
      ee:	19 02                	sbb    DWORD PTR [edx],eax
      f0:	18 00                	sbb    BYTE PTR [eax],al
      f2:	00 00                	add    BYTE PTR [eax],al
      f4:	01 11                	add    DWORD PTR [ecx],edx
      f6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      fc:	0e                   	push   cs
      fd:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      ff:	11 01                	adc    DWORD PTR [ecx],eax
     101:	12 06                	adc    al,BYTE PTR [esi]
     103:	10 17                	adc    BYTE PTR [edi],dl
     105:	00 00                	add    BYTE PTR [eax],al
     107:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     10a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     10c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     10f:	08 00                	or     BYTE PTR [eax],al
     111:	00 03                	add    BYTE PTR [ebx],al
     113:	24 00                	and    al,0x0
     115:	0b 0b                	or     ecx,DWORD PTR [ebx]
     117:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     11a:	0e                   	push   cs
     11b:	00 00                	add    BYTE PTR [eax],al
     11d:	04 0f                	add    al,0xf
     11f:	00 0b                	add    BYTE PTR [ebx],cl
     121:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     124:	00 00                	add    BYTE PTR [eax],al
     126:	05 2e 01 3f 19       	add    eax,0x193f012e
     12b:	03 0e                	add    ecx,DWORD PTR [esi]
     12d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     12f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     131:	27                   	daa    
     132:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     135:	11 01                	adc    DWORD PTR [ecx],eax
     137:	12 06                	adc    al,BYTE PTR [esi]
     139:	40                   	inc    eax
     13a:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     140:	00 00                	add    BYTE PTR [eax],al
     142:	06                   	push   es
     143:	05 00 03 08 3a       	add    eax,0x3a080300
     148:	0b 3b                	or     edi,DWORD PTR [ebx]
     14a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     14d:	02 18                	add    bl,BYTE PTR [eax]
     14f:	00 00                	add    BYTE PTR [eax],al
     151:	07                   	pop    es
     152:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     157:	0b 3b                	or     edi,DWORD PTR [ebx]
     159:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     15c:	02 18                	add    bl,BYTE PTR [eax]
     15e:	00 00                	add    BYTE PTR [eax],al
     160:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     163:	03 0e                	add    ecx,DWORD PTR [esi]
     165:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     167:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     169:	49                   	dec    ecx
     16a:	13 02                	adc    eax,DWORD PTR [edx]
     16c:	18 00                	sbb    BYTE PTR [eax],al
     16e:	00 09                	add    BYTE PTR [ecx],cl
     170:	34 00                	xor    al,0x0
     172:	03 08                	add    ecx,DWORD PTR [eax]
     174:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     176:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     178:	49                   	dec    ecx
     179:	13 02                	adc    eax,DWORD PTR [edx]
     17b:	18 00                	sbb    BYTE PTR [eax],al
     17d:	00 0a                	add    BYTE PTR [edx],cl
     17f:	34 00                	xor    al,0x0
     181:	03 0e                	add    ecx,DWORD PTR [esi]
     183:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     185:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     187:	49                   	dec    ecx
     188:	13 3f                	adc    edi,DWORD PTR [edi]
     18a:	19 02                	sbb    DWORD PTR [edx],eax
     18c:	18 00                	sbb    BYTE PTR [eax],al
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	01 11                	add    DWORD PTR [ecx],edx
     192:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     198:	0e                   	push   cs
     199:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     19b:	11 01                	adc    DWORD PTR [ecx],eax
     19d:	12 06                	adc    al,BYTE PTR [esi]
     19f:	10 17                	adc    BYTE PTR [edi],dl
     1a1:	00 00                	add    BYTE PTR [eax],al
     1a3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1a6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1a8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1ab:	0e                   	push   cs
     1ac:	00 00                	add    BYTE PTR [eax],al
     1ae:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1b1:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1b3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1b6:	08 00                	or     BYTE PTR [eax],al
     1b8:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     1bb:	00 0b                	add    BYTE PTR [ebx],cl
     1bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1c0:	00 00                	add    BYTE PTR [eax],al
     1c2:	05 2e 01 3f 19       	add    eax,0x193f012e
     1c7:	03 0e                	add    ecx,DWORD PTR [esi]
     1c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1cd:	27                   	daa    
     1ce:	19 11                	sbb    DWORD PTR [ecx],edx
     1d0:	01 12                	add    DWORD PTR [edx],edx
     1d2:	06                   	push   es
     1d3:	40                   	inc    eax
     1d4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     1da:	00 00                	add    BYTE PTR [eax],al
     1dc:	06                   	push   es
     1dd:	05 00 03 08 3a       	add    eax,0x3a080300
     1e2:	0b 3b                	or     edi,DWORD PTR [ebx]
     1e4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     1e7:	02 18                	add    bl,BYTE PTR [eax]
     1e9:	00 00                	add    BYTE PTR [eax],al
     1eb:	07                   	pop    es
     1ec:	34 00                	xor    al,0x0
     1ee:	03 08                	add    ecx,DWORD PTR [eax]
     1f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1f4:	49                   	dec    ecx
     1f5:	13 02                	adc    eax,DWORD PTR [edx]
     1f7:	18 00                	sbb    BYTE PTR [eax],al
     1f9:	00 08                	add    BYTE PTR [eax],cl
     1fb:	34 00                	xor    al,0x0
     1fd:	03 0e                	add    ecx,DWORD PTR [esi]
     1ff:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     201:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     203:	49                   	dec    ecx
     204:	13 02                	adc    eax,DWORD PTR [edx]
     206:	18 00                	sbb    BYTE PTR [eax],al
     208:	00 09                	add    BYTE PTR [ecx],cl
     20a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     20d:	19 03                	sbb    DWORD PTR [ebx],eax
     20f:	0e                   	push   cs
     210:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     212:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     214:	27                   	daa    
     215:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     218:	11 01                	adc    DWORD PTR [ecx],eax
     21a:	12 06                	adc    al,BYTE PTR [esi]
     21c:	40                   	inc    eax
     21d:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     223:	00 00                	add    BYTE PTR [eax],al
     225:	0a 2e                	or     ch,BYTE PTR [esi]
     227:	01 3f                	add    DWORD PTR [edi],edi
     229:	19 03                	sbb    DWORD PTR [ebx],eax
     22b:	0e                   	push   cs
     22c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     22e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     230:	27                   	daa    
     231:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     234:	11 01                	adc    DWORD PTR [ecx],eax
     236:	12 06                	adc    al,BYTE PTR [esi]
     238:	40                   	inc    eax
     239:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     23f:	00 00                	add    BYTE PTR [eax],al
     241:	0b 0b                	or     ecx,DWORD PTR [ebx]
     243:	01 11                	add    DWORD PTR [ecx],edx
     245:	01 12                	add    DWORD PTR [edx],edx
     247:	06                   	push   es
     248:	00 00                	add    BYTE PTR [eax],al
     24a:	0c 34                	or     al,0x34
     24c:	00 03                	add    BYTE PTR [ebx],al
     24e:	0e                   	push   cs
     24f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     251:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     253:	49                   	dec    ecx
     254:	13 3f                	adc    edi,DWORD PTR [edi]
     256:	19 02                	sbb    DWORD PTR [edx],eax
     258:	18 00                	sbb    BYTE PTR [eax],al
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	01 11                	add    DWORD PTR [ecx],edx
     25e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     264:	0e                   	push   cs
     265:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     267:	11 01                	adc    DWORD PTR [ecx],eax
     269:	12 06                	adc    al,BYTE PTR [esi]
     26b:	10 17                	adc    BYTE PTR [edi],dl
     26d:	00 00                	add    BYTE PTR [eax],al
     26f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     272:	0b 0b                	or     ecx,DWORD PTR [ebx]
     274:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     277:	0e                   	push   cs
     278:	00 00                	add    BYTE PTR [eax],al
     27a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     27d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     27f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     282:	08 00                	or     BYTE PTR [eax],al
     284:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     287:	00 03                	add    BYTE PTR [ebx],al
     289:	0e                   	push   cs
     28a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     28c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     28e:	49                   	dec    ecx
     28f:	13 00                	adc    eax,DWORD PTR [eax]
     291:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     297:	49                   	dec    ecx
     298:	13 00                	adc    eax,DWORD PTR [eax]
     29a:	00 06                	add    BYTE PTR [esi],al
     29c:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     29f:	19 03                	sbb    DWORD PTR [ebx],eax
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	27                   	daa    
     2a7:	19 11                	sbb    DWORD PTR [ecx],edx
     2a9:	01 12                	add    DWORD PTR [edx],edx
     2ab:	06                   	push   es
     2ac:	40                   	inc    eax
     2ad:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2b3:	00 00                	add    BYTE PTR [eax],al
     2b5:	07                   	pop    es
     2b6:	05 00 03 08 3a       	add    eax,0x3a080300
     2bb:	0b 3b                	or     edi,DWORD PTR [ebx]
     2bd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2c0:	02 18                	add    bl,BYTE PTR [eax]
     2c2:	00 00                	add    BYTE PTR [eax],al
     2c4:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     2c7:	03 08                	add    ecx,DWORD PTR [eax]
     2c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2cd:	49                   	dec    ecx
     2ce:	13 02                	adc    eax,DWORD PTR [edx]
     2d0:	18 00                	sbb    BYTE PTR [eax],al
     2d2:	00 09                	add    BYTE PTR [ecx],cl
     2d4:	34 00                	xor    al,0x0
     2d6:	03 0e                	add    ecx,DWORD PTR [esi]
     2d8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2da:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2dc:	49                   	dec    ecx
     2dd:	13 02                	adc    eax,DWORD PTR [edx]
     2df:	18 00                	sbb    BYTE PTR [eax],al
     2e1:	00 0a                	add    BYTE PTR [edx],cl
     2e3:	01 01                	add    DWORD PTR [ecx],eax
     2e5:	49                   	dec    ecx
     2e6:	13 01                	adc    eax,DWORD PTR [ecx]
     2e8:	13 00                	adc    eax,DWORD PTR [eax]
     2ea:	00 0b                	add    BYTE PTR [ebx],cl
     2ec:	21 00                	and    DWORD PTR [eax],eax
     2ee:	49                   	dec    ecx
     2ef:	13 2f                	adc    ebp,DWORD PTR [edi]
     2f1:	0b 00                	or     eax,DWORD PTR [eax]
     2f3:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     2f6:	01 3f                	add    DWORD PTR [edi],edi
     2f8:	19 03                	sbb    DWORD PTR [ebx],eax
     2fa:	0e                   	push   cs
     2fb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2fd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2ff:	11 01                	adc    DWORD PTR [ecx],eax
     301:	12 06                	adc    al,BYTE PTR [esi]
     303:	40                   	inc    eax
     304:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30a:	00 00                	add    BYTE PTR [eax],al
     30c:	0d 34 00 03 0e       	or     eax,0xe030034
     311:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     313:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     315:	49                   	dec    ecx
     316:	13 3f                	adc    edi,DWORD PTR [edi]
     318:	19 02                	sbb    DWORD PTR [edx],eax
     31a:	18 00                	sbb    BYTE PTR [eax],al
     31c:	00 0e                	add    BYTE PTR [esi],cl
     31e:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     322:	00 00                	add    BYTE PTR [eax],al
     324:	00 01                	add    BYTE PTR [ecx],al
     326:	11 01                	adc    DWORD PTR [ecx],eax
     328:	25 0e 13 0b 03       	and    eax,0x30b130e
     32d:	0e                   	push   cs
     32e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     330:	11 01                	adc    DWORD PTR [ecx],eax
     332:	12 06                	adc    al,BYTE PTR [esi]
     334:	10 17                	adc    BYTE PTR [edi],dl
     336:	00 00                	add    BYTE PTR [eax],al
     338:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     33b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     33d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     340:	0e                   	push   cs
     341:	00 00                	add    BYTE PTR [eax],al
     343:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     346:	0b 0b                	or     ecx,DWORD PTR [ebx]
     348:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     34b:	08 00                	or     BYTE PTR [eax],al
     34d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     350:	00 0b                	add    BYTE PTR [ebx],cl
     352:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     355:	00 00                	add    BYTE PTR [eax],al
     357:	05 16 00 03 0e       	add    eax,0xe030016
     35c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     35e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     360:	49                   	dec    ecx
     361:	13 00                	adc    eax,DWORD PTR [eax]
     363:	00 06                	add    BYTE PTR [esi],al
     365:	04 01                	add    al,0x1
     367:	03 0e                	add    ecx,DWORD PTR [esi]
     369:	0b 0b                	or     ecx,DWORD PTR [ebx]
     36b:	49                   	dec    ecx
     36c:	13 3a                	adc    edi,DWORD PTR [edx]
     36e:	0b 3b                	or     edi,DWORD PTR [ebx]
     370:	0b 01                	or     eax,DWORD PTR [ecx]
     372:	13 00                	adc    eax,DWORD PTR [eax]
     374:	00 07                	add    BYTE PTR [edi],al
     376:	28 00                	sub    BYTE PTR [eax],al
     378:	03 0e                	add    ecx,DWORD PTR [esi]
     37a:	1c 0b                	sbb    al,0xb
     37c:	00 00                	add    BYTE PTR [eax],al
     37e:	08 28                	or     BYTE PTR [eax],ch
     380:	00 03                	add    BYTE PTR [ebx],al
     382:	0e                   	push   cs
     383:	1c 05                	sbb    al,0x5
     385:	00 00                	add    BYTE PTR [eax],al
     387:	09 2e                	or     DWORD PTR [esi],ebp
     389:	01 3f                	add    DWORD PTR [edi],edi
     38b:	19 03                	sbb    DWORD PTR [ebx],eax
     38d:	0e                   	push   cs
     38e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     390:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     392:	27                   	daa    
     393:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     396:	11 01                	adc    DWORD PTR [ecx],eax
     398:	12 06                	adc    al,BYTE PTR [esi]
     39a:	40                   	inc    eax
     39b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3a1:	00 00                	add    BYTE PTR [eax],al
     3a3:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     3a9:	0b 3b                	or     edi,DWORD PTR [ebx]
     3ab:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3ae:	02 18                	add    bl,BYTE PTR [eax]
     3b0:	00 00                	add    BYTE PTR [eax],al
     3b2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     3b4:	01 11                	add    DWORD PTR [ecx],edx
     3b6:	01 12                	add    DWORD PTR [edx],edx
     3b8:	06                   	push   es
     3b9:	00 00                	add    BYTE PTR [eax],al
     3bb:	0c 34                	or     al,0x34
     3bd:	00 03                	add    BYTE PTR [ebx],al
     3bf:	08 3a                	or     BYTE PTR [edx],bh
     3c1:	0b 3b                	or     edi,DWORD PTR [ebx]
     3c3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     3c6:	02 18                	add    bl,BYTE PTR [eax]
     3c8:	00 00                	add    BYTE PTR [eax],al
     3ca:	0d 2e 01 3f 19       	or     eax,0x193f012e
     3cf:	03 0e                	add    ecx,DWORD PTR [esi]
     3d1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3d3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d5:	27                   	daa    
     3d6:	19 11                	sbb    DWORD PTR [ecx],edx
     3d8:	01 12                	add    DWORD PTR [edx],edx
     3da:	06                   	push   es
     3db:	40                   	inc    eax
     3dc:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3e2:	00 00                	add    BYTE PTR [eax],al
     3e4:	0e                   	push   cs
     3e5:	34 00                	xor    al,0x0
     3e7:	03 0e                	add    ecx,DWORD PTR [esi]
     3e9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3eb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3ed:	49                   	dec    ecx
     3ee:	13 02                	adc    eax,DWORD PTR [edx]
     3f0:	18 00                	sbb    BYTE PTR [eax],al
     3f2:	00 0f                	add    BYTE PTR [edi],cl
     3f4:	0b 01                	or     eax,DWORD PTR [ecx]
     3f6:	11 01                	adc    DWORD PTR [ecx],eax
     3f8:	12 06                	adc    al,BYTE PTR [esi]
     3fa:	01 13                	add    DWORD PTR [ebx],edx
     3fc:	00 00                	add    BYTE PTR [eax],al
     3fe:	10 05 00 03 08 3a    	adc    BYTE PTR ds:0x3a080300,al
     404:	0b 3b                	or     edi,DWORD PTR [ebx]
     406:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     409:	02 18                	add    bl,BYTE PTR [eax]
     40b:	00 00                	add    BYTE PTR [eax],al
     40d:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
     410:	03 0e                	add    ecx,DWORD PTR [esi]
     412:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     414:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     416:	49                   	dec    ecx
     417:	13 3f                	adc    edi,DWORD PTR [edi]
     419:	19 02                	sbb    DWORD PTR [edx],eax
     41b:	18 00                	sbb    BYTE PTR [eax],al
     41d:	00 00                	add    BYTE PTR [eax],al
     41f:	01 11                	add    DWORD PTR [ecx],edx
     421:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     427:	0e                   	push   cs
     428:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     42a:	11 01                	adc    DWORD PTR [ecx],eax
     42c:	12 06                	adc    al,BYTE PTR [esi]
     42e:	10 17                	adc    BYTE PTR [edi],dl
     430:	00 00                	add    BYTE PTR [eax],al
     432:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     435:	0b 0b                	or     ecx,DWORD PTR [ebx]
     437:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     43a:	0e                   	push   cs
     43b:	00 00                	add    BYTE PTR [eax],al
     43d:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     440:	0b 0b                	or     ecx,DWORD PTR [ebx]
     442:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     445:	08 00                	or     BYTE PTR [eax],al
     447:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     44a:	00 0b                	add    BYTE PTR [ebx],cl
     44c:	0b 00                	or     eax,DWORD PTR [eax]
     44e:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     454:	49                   	dec    ecx
     455:	13 00                	adc    eax,DWORD PTR [eax]
     457:	00 06                	add    BYTE PTR [esi],al
     459:	16                   	push   ss
     45a:	00 03                	add    BYTE PTR [ebx],al
     45c:	0e                   	push   cs
     45d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     45f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     461:	49                   	dec    ecx
     462:	13 00                	adc    eax,DWORD PTR [eax]
     464:	00 07                	add    BYTE PTR [edi],al
     466:	04 01                	add    al,0x1
     468:	03 0e                	add    ecx,DWORD PTR [esi]
     46a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     46c:	49                   	dec    ecx
     46d:	13 3a                	adc    edi,DWORD PTR [edx]
     46f:	0b 3b                	or     edi,DWORD PTR [ebx]
     471:	0b 01                	or     eax,DWORD PTR [ecx]
     473:	13 00                	adc    eax,DWORD PTR [eax]
     475:	00 08                	add    BYTE PTR [eax],cl
     477:	28 00                	sub    BYTE PTR [eax],al
     479:	03 0e                	add    ecx,DWORD PTR [esi]
     47b:	1c 0b                	sbb    al,0xb
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	09 28                	or     DWORD PTR [eax],ebp
     481:	00 03                	add    BYTE PTR [ebx],al
     483:	0e                   	push   cs
     484:	1c 05                	sbb    al,0x5
     486:	00 00                	add    BYTE PTR [eax],al
     488:	0a 13                	or     dl,BYTE PTR [ebx]
     48a:	01 03                	add    DWORD PTR [ebx],eax
     48c:	0e                   	push   cs
     48d:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     493:	01 13                	add    DWORD PTR [ebx],edx
     495:	00 00                	add    BYTE PTR [eax],al
     497:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     49d:	0b 3b                	or     edi,DWORD PTR [ebx]
     49f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     4a2:	38 0b                	cmp    BYTE PTR [ebx],cl
     4a4:	00 00                	add    BYTE PTR [eax],al
     4a6:	0c 0d                	or     al,0xd
     4a8:	00 03                	add    BYTE PTR [ebx],al
     4aa:	0e                   	push   cs
     4ab:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4ad:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4af:	49                   	dec    ecx
     4b0:	13 38                	adc    edi,DWORD PTR [eax]
     4b2:	05 00 00 0d 01       	add    eax,0x10d0000
     4b7:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     4ba:	01 13                	add    DWORD PTR [ebx],edx
     4bc:	00 00                	add    BYTE PTR [eax],al
     4be:	0e                   	push   cs
     4bf:	21 00                	and    DWORD PTR [eax],eax
     4c1:	49                   	dec    ecx
     4c2:	13 2f                	adc    ebp,DWORD PTR [edi]
     4c4:	05 00 00 0f 13       	add    eax,0x130f0000
     4c9:	01 03                	add    DWORD PTR [ebx],eax
     4cb:	0e                   	push   cs
     4cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     4ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4d2:	01 13                	add    DWORD PTR [ebx],edx
     4d4:	00 00                	add    BYTE PTR [eax],al
     4d6:	10 26                	adc    BYTE PTR [esi],ah
     4d8:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     4db:	00 00                	add    BYTE PTR [eax],al
     4dd:	11 2e                	adc    DWORD PTR [esi],ebp
     4df:	01 3f                	add    DWORD PTR [edi],edi
     4e1:	19 03                	sbb    DWORD PTR [ebx],eax
     4e3:	0e                   	push   cs
     4e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e8:	27                   	daa    
     4e9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4ec:	11 01                	adc    DWORD PTR [ecx],eax
     4ee:	12 06                	adc    al,BYTE PTR [esi]
     4f0:	40                   	inc    eax
     4f1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     4f7:	00 00                	add    BYTE PTR [eax],al
     4f9:	12 05 00 03 0e 3a    	adc    al,BYTE PTR ds:0x3a0e0300
     4ff:	0b 3b                	or     edi,DWORD PTR [ebx]
     501:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     504:	02 18                	add    bl,BYTE PTR [eax]
     506:	00 00                	add    BYTE PTR [eax],al
     508:	13 2e                	adc    ebp,DWORD PTR [esi]
     50a:	00 3f                	add    BYTE PTR [edi],bh
     50c:	19 03                	sbb    DWORD PTR [ebx],eax
     50e:	0e                   	push   cs
     50f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     511:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     513:	11 01                	adc    DWORD PTR [ecx],eax
     515:	12 06                	adc    al,BYTE PTR [esi]
     517:	40                   	inc    eax
     518:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     51e:	14 34                	adc    al,0x34
     520:	00 03                	add    BYTE PTR [ebx],al
     522:	0e                   	push   cs
     523:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     525:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     527:	49                   	dec    ecx
     528:	13 02                	adc    eax,DWORD PTR [edx]
     52a:	18 00                	sbb    BYTE PTR [eax],al
     52c:	00 15 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,dl
     532:	03 0e                	add    ecx,DWORD PTR [esi]
     534:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     536:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     538:	27                   	daa    
     539:	19 11                	sbb    DWORD PTR [ecx],edx
     53b:	01 12                	add    DWORD PTR [edx],edx
     53d:	06                   	push   es
     53e:	40                   	inc    eax
     53f:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     545:	00 00                	add    BYTE PTR [eax],al
     547:	16                   	push   ss
     548:	0b 01                	or     eax,DWORD PTR [ecx]
     54a:	11 01                	adc    DWORD PTR [ecx],eax
     54c:	12 06                	adc    al,BYTE PTR [esi]
     54e:	01 13                	add    DWORD PTR [ebx],edx
     550:	00 00                	add    BYTE PTR [eax],al
     552:	17                   	pop    ss
     553:	34 00                	xor    al,0x0
     555:	03 08                	add    ecx,DWORD PTR [eax]
     557:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     559:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     55b:	49                   	dec    ecx
     55c:	13 02                	adc    eax,DWORD PTR [edx]
     55e:	18 00                	sbb    BYTE PTR [eax],al
     560:	00 18                	add    BYTE PTR [eax],bl
     562:	0b 01                	or     eax,DWORD PTR [ecx]
     564:	11 01                	adc    DWORD PTR [ecx],eax
     566:	12 06                	adc    al,BYTE PTR [esi]
     568:	00 00                	add    BYTE PTR [eax],al
     56a:	19 21                	sbb    DWORD PTR [ecx],esp
     56c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     56f:	2f                   	das    
     570:	0b 00                	or     eax,DWORD PTR [eax]
     572:	00 1a                	add    BYTE PTR [edx],bl
     574:	05 00 03 08 3a       	add    eax,0x3a080300
     579:	0b 3b                	or     edi,DWORD PTR [ebx]
     57b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     57e:	02 18                	add    bl,BYTE PTR [eax]
     580:	00 00                	add    BYTE PTR [eax],al
     582:	1b 0a                	sbb    ecx,DWORD PTR [edx]
     584:	00 03                	add    BYTE PTR [ebx],al
     586:	0e                   	push   cs
     587:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     589:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     58b:	11 01                	adc    DWORD PTR [ecx],eax
     58d:	00 00                	add    BYTE PTR [eax],al
     58f:	1c 34                	sbb    al,0x34
     591:	00 03                	add    BYTE PTR [ebx],al
     593:	0e                   	push   cs
     594:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     596:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     598:	49                   	dec    ecx
     599:	13 3f                	adc    edi,DWORD PTR [edi]
     59b:	19 02                	sbb    DWORD PTR [edx],eax
     59d:	18 00                	sbb    BYTE PTR [eax],al
     59f:	00 00                	add    BYTE PTR [eax],al
     5a1:	01 11                	add    DWORD PTR [ecx],edx
     5a3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     5a9:	0e                   	push   cs
     5aa:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     5ac:	11 01                	adc    DWORD PTR [ecx],eax
     5ae:	12 06                	adc    al,BYTE PTR [esi]
     5b0:	10 17                	adc    BYTE PTR [edi],dl
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     5b7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5b9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5bc:	0e                   	push   cs
     5bd:	00 00                	add    BYTE PTR [eax],al
     5bf:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     5c2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5c4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     5c7:	08 00                	or     BYTE PTR [eax],al
     5c9:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     5cc:	00 0b                	add    BYTE PTR [ebx],cl
     5ce:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     5d1:	00 00                	add    BYTE PTR [eax],al
     5d3:	05 04 01 03 0e       	add    eax,0xe030104
     5d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     5da:	49                   	dec    ecx
     5db:	13 3a                	adc    edi,DWORD PTR [edx]
     5dd:	0b 3b                	or     edi,DWORD PTR [ebx]
     5df:	0b 01                	or     eax,DWORD PTR [ecx]
     5e1:	13 00                	adc    eax,DWORD PTR [eax]
     5e3:	00 06                	add    BYTE PTR [esi],al
     5e5:	28 00                	sub    BYTE PTR [eax],al
     5e7:	03 0e                	add    ecx,DWORD PTR [esi]
     5e9:	1c 0b                	sbb    al,0xb
     5eb:	00 00                	add    BYTE PTR [eax],al
     5ed:	07                   	pop    es
     5ee:	28 00                	sub    BYTE PTR [eax],al
     5f0:	03 0e                	add    ecx,DWORD PTR [esi]
     5f2:	1c 05                	sbb    al,0x5
     5f4:	00 00                	add    BYTE PTR [eax],al
     5f6:	08 2e                	or     BYTE PTR [esi],ch
     5f8:	01 3f                	add    DWORD PTR [edi],edi
     5fa:	19 03                	sbb    DWORD PTR [ebx],eax
     5fc:	0e                   	push   cs
     5fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     601:	27                   	daa    
     602:	19 11                	sbb    DWORD PTR [ecx],edx
     604:	01 12                	add    DWORD PTR [edx],edx
     606:	06                   	push   es
     607:	40                   	inc    eax
     608:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     60e:	00 00                	add    BYTE PTR [eax],al
     610:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     616:	0b 3b                	or     edi,DWORD PTR [ebx]
     618:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     61b:	02 18                	add    bl,BYTE PTR [eax]
     61d:	00 00                	add    BYTE PTR [eax],al
     61f:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     625:	0b 3b                	or     edi,DWORD PTR [ebx]
     627:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     62a:	02 18                	add    bl,BYTE PTR [eax]
     62c:	00 00                	add    BYTE PTR [eax],al
     62e:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     631:	03 0e                	add    ecx,DWORD PTR [esi]
     633:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     635:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     637:	49                   	dec    ecx
     638:	13 02                	adc    eax,DWORD PTR [edx]
     63a:	18 00                	sbb    BYTE PTR [eax],al
     63c:	00 0c 01             	add    BYTE PTR [ecx+eax*1],cl
     63f:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
     642:	01 13                	add    DWORD PTR [ebx],edx
     644:	00 00                	add    BYTE PTR [eax],al
     646:	0d 21 00 49 13       	or     eax,0x13490021
     64b:	2f                   	das    
     64c:	0b 00                	or     eax,DWORD PTR [eax]
     64e:	00 0e                	add    BYTE PTR [esi],cl
     650:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     653:	19 03                	sbb    DWORD PTR [ebx],eax
     655:	0e                   	push   cs
     656:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     658:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     65a:	49                   	dec    ecx
     65b:	13 11                	adc    edx,DWORD PTR [ecx]
     65d:	01 12                	add    DWORD PTR [edx],edx
     65f:	06                   	push   es
     660:	40                   	inc    eax
     661:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     667:	00 00                	add    BYTE PTR [eax],al
     669:	0f 34                	sysenter 
     66b:	00 03                	add    BYTE PTR [ebx],al
     66d:	08 3a                	or     BYTE PTR [edx],bh
     66f:	0b 3b                	or     edi,DWORD PTR [ebx]
     671:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     674:	02 18                	add    bl,BYTE PTR [eax]
     676:	00 00                	add    BYTE PTR [eax],al
     678:	10 2e                	adc    BYTE PTR [esi],ch
     67a:	01 3f                	add    DWORD PTR [edi],edi
     67c:	19 03                	sbb    DWORD PTR [ebx],eax
     67e:	0e                   	push   cs
     67f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     681:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     683:	27                   	daa    
     684:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     687:	11 01                	adc    DWORD PTR [ecx],eax
     689:	12 06                	adc    al,BYTE PTR [esi]
     68b:	40                   	inc    eax
     68c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     692:	00 00                	add    BYTE PTR [eax],al
     694:	11 0a                	adc    DWORD PTR [edx],ecx
     696:	00 03                	add    BYTE PTR [ebx],al
     698:	0e                   	push   cs
     699:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     69b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     69d:	11 01                	adc    DWORD PTR [ecx],eax
     69f:	00 00                	add    BYTE PTR [eax],al
     6a1:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     6a4:	03 0e                	add    ecx,DWORD PTR [esi]
     6a6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6a8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6aa:	49                   	dec    ecx
     6ab:	13 3f                	adc    edi,DWORD PTR [edi]
     6ad:	19 02                	sbb    DWORD PTR [edx],eax
     6af:	18 00                	sbb    BYTE PTR [eax],al
     6b1:	00 00                	add    BYTE PTR [eax],al
     6b3:	01 11                	add    DWORD PTR [ecx],edx
     6b5:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     6bb:	0e                   	push   cs
     6bc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     6be:	11 01                	adc    DWORD PTR [ecx],eax
     6c0:	12 06                	adc    al,BYTE PTR [esi]
     6c2:	10 17                	adc    BYTE PTR [edi],dl
     6c4:	00 00                	add    BYTE PTR [eax],al
     6c6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6c9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6cb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6ce:	0e                   	push   cs
     6cf:	00 00                	add    BYTE PTR [eax],al
     6d1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6d4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6d6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6d9:	08 00                	or     BYTE PTR [eax],al
     6db:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     6de:	00 0b                	add    BYTE PTR [ebx],cl
     6e0:	0b 00                	or     eax,DWORD PTR [eax]
     6e2:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     6e8:	49                   	dec    ecx
     6e9:	13 00                	adc    eax,DWORD PTR [eax]
     6eb:	00 06                	add    BYTE PTR [esi],al
     6ed:	16                   	push   ss
     6ee:	00 03                	add    BYTE PTR [ebx],al
     6f0:	0e                   	push   cs
     6f1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6f3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6f5:	49                   	dec    ecx
     6f6:	13 00                	adc    eax,DWORD PTR [eax]
     6f8:	00 07                	add    BYTE PTR [edi],al
     6fa:	0f 00 0b             	str    WORD PTR [ebx]
     6fd:	0b 03                	or     eax,DWORD PTR [ebx]
     6ff:	0e                   	push   cs
     700:	49                   	dec    ecx
     701:	13 00                	adc    eax,DWORD PTR [eax]
     703:	00 08                	add    BYTE PTR [eax],cl
     705:	04 01                	add    al,0x1
     707:	03 0e                	add    ecx,DWORD PTR [esi]
     709:	0b 0b                	or     ecx,DWORD PTR [ebx]
     70b:	49                   	dec    ecx
     70c:	13 3a                	adc    edi,DWORD PTR [edx]
     70e:	0b 3b                	or     edi,DWORD PTR [ebx]
     710:	0b 01                	or     eax,DWORD PTR [ecx]
     712:	13 00                	adc    eax,DWORD PTR [eax]
     714:	00 09                	add    BYTE PTR [ecx],cl
     716:	28 00                	sub    BYTE PTR [eax],al
     718:	03 0e                	add    ecx,DWORD PTR [esi]
     71a:	1c 0b                	sbb    al,0xb
     71c:	00 00                	add    BYTE PTR [eax],al
     71e:	0a 28                	or     ch,BYTE PTR [eax]
     720:	00 03                	add    BYTE PTR [ebx],al
     722:	0e                   	push   cs
     723:	1c 05                	sbb    al,0x5
     725:	00 00                	add    BYTE PTR [eax],al
     727:	0b 26                	or     esp,DWORD PTR [esi]
     729:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     72c:	00 00                	add    BYTE PTR [eax],al
     72e:	0c 2e                	or     al,0x2e
     730:	01 3f                	add    DWORD PTR [edi],edi
     732:	19 03                	sbb    DWORD PTR [ebx],eax
     734:	0e                   	push   cs
     735:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     737:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     739:	27                   	daa    
     73a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     73d:	11 01                	adc    DWORD PTR [ecx],eax
     73f:	12 06                	adc    al,BYTE PTR [esi]
     741:	40                   	inc    eax
     742:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     748:	00 00                	add    BYTE PTR [eax],al
     74a:	0d 05 00 03 0e       	or     eax,0xe030005
     74f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     751:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     753:	49                   	dec    ecx
     754:	13 02                	adc    eax,DWORD PTR [edx]
     756:	18 00                	sbb    BYTE PTR [eax],al
     758:	00 0e                	add    BYTE PTR [esi],cl
     75a:	34 00                	xor    al,0x0
     75c:	03 0e                	add    ecx,DWORD PTR [esi]
     75e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     760:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     762:	49                   	dec    ecx
     763:	13 02                	adc    eax,DWORD PTR [edx]
     765:	18 00                	sbb    BYTE PTR [eax],al
     767:	00 0f                	add    BYTE PTR [edi],cl
     769:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     76c:	19 03                	sbb    DWORD PTR [ebx],eax
     76e:	0e                   	push   cs
     76f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     771:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     773:	11 01                	adc    DWORD PTR [ecx],eax
     775:	12 06                	adc    al,BYTE PTR [esi]
     777:	40                   	inc    eax
     778:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     77e:	10 2e                	adc    BYTE PTR [esi],ch
     780:	00 3f                	add    BYTE PTR [edi],bh
     782:	19 03                	sbb    DWORD PTR [ebx],eax
     784:	0e                   	push   cs
     785:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     787:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     789:	27                   	daa    
     78a:	19 11                	sbb    DWORD PTR [ecx],edx
     78c:	01 12                	add    DWORD PTR [edx],edx
     78e:	06                   	push   es
     78f:	40                   	inc    eax
     790:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     796:	11 2e                	adc    DWORD PTR [esi],ebp
     798:	01 3f                	add    DWORD PTR [edi],edi
     79a:	19 03                	sbb    DWORD PTR [ebx],eax
     79c:	0e                   	push   cs
     79d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     79f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a1:	27                   	daa    
     7a2:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7a5:	11 01                	adc    DWORD PTR [ecx],eax
     7a7:	12 06                	adc    al,BYTE PTR [esi]
     7a9:	40                   	inc    eax
     7aa:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7b0:	00 00                	add    BYTE PTR [eax],al
     7b2:	12 18                	adc    bl,BYTE PTR [eax]
     7b4:	00 00                	add    BYTE PTR [eax],al
     7b6:	00 13                	add    BYTE PTR [ebx],dl
     7b8:	34 00                	xor    al,0x0
     7ba:	03 08                	add    ecx,DWORD PTR [eax]
     7bc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7be:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7c0:	49                   	dec    ecx
     7c1:	13 02                	adc    eax,DWORD PTR [edx]
     7c3:	18 00                	sbb    BYTE PTR [eax],al
     7c5:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     7c8:	01 11                	add    DWORD PTR [ecx],edx
     7ca:	01 12                	add    DWORD PTR [edx],edx
     7cc:	06                   	push   es
     7cd:	00 00                	add    BYTE PTR [eax],al
     7cf:	15 2e 01 3f 19       	adc    eax,0x193f012e
     7d4:	03 0e                	add    ecx,DWORD PTR [esi]
     7d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7da:	27                   	daa    
     7db:	19 11                	sbb    DWORD PTR [ecx],edx
     7dd:	01 12                	add    DWORD PTR [edx],edx
     7df:	06                   	push   es
     7e0:	40                   	inc    eax
     7e1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7e7:	00 00                	add    BYTE PTR [eax],al
     7e9:	16                   	push   ss
     7ea:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     7ed:	19 03                	sbb    DWORD PTR [ebx],eax
     7ef:	0e                   	push   cs
     7f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7f4:	49                   	dec    ecx
     7f5:	13 11                	adc    edx,DWORD PTR [ecx]
     7f7:	01 12                	add    DWORD PTR [edx],edx
     7f9:	06                   	push   es
     7fa:	40                   	inc    eax
     7fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     801:	00 00                	add    BYTE PTR [eax],al
     803:	17                   	pop    ss
     804:	05 00 03 08 3a       	add    eax,0x3a080300
     809:	0b 3b                	or     edi,DWORD PTR [ebx]
     80b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     80e:	02 18                	add    bl,BYTE PTR [eax]
     810:	00 00                	add    BYTE PTR [eax],al
     812:	18 0b                	sbb    BYTE PTR [ebx],cl
     814:	01 11                	add    DWORD PTR [ecx],edx
     816:	01 12                	add    DWORD PTR [edx],edx
     818:	06                   	push   es
     819:	01 13                	add    DWORD PTR [ebx],edx
     81b:	00 00                	add    BYTE PTR [eax],al
     81d:	19 34 00             	sbb    DWORD PTR [eax+eax*1],esi
     820:	03 0e                	add    ecx,DWORD PTR [esi]
     822:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     824:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     82a:	00 00                	add    BYTE PTR [eax],al
     82c:	1a 2e                	sbb    ch,BYTE PTR [esi]
     82e:	01 3f                	add    DWORD PTR [edi],edi
     830:	19 03                	sbb    DWORD PTR [ebx],eax
     832:	0e                   	push   cs
     833:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     835:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     83b:	11 01                	adc    DWORD PTR [ecx],eax
     83d:	12 06                	adc    al,BYTE PTR [esi]
     83f:	40                   	inc    eax
     840:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     846:	00 00                	add    BYTE PTR [eax],al
     848:	1b 05 00 03 0e 3a    	sbb    eax,DWORD PTR ds:0x3a0e0300
     84e:	0b 3b                	or     edi,DWORD PTR [ebx]
     850:	05 49 13 02 18       	add    eax,0x18021349
     855:	00 00                	add    BYTE PTR [eax],al
     857:	1c 34                	sbb    al,0x34
     859:	00 03                	add    BYTE PTR [ebx],al
     85b:	08 3a                	or     BYTE PTR [edx],bh
     85d:	0b 3b                	or     edi,DWORD PTR [ebx]
     85f:	05 49 13 02 18       	add    eax,0x18021349
     864:	00 00                	add    BYTE PTR [eax],al
     866:	1d 0b 01 55 17       	sbb    eax,0x1755010b
     86b:	00 00                	add    BYTE PTR [eax],al
     86d:	1e                   	push   ds
     86e:	01 01                	add    DWORD PTR [ecx],eax
     870:	49                   	dec    ecx
     871:	13 01                	adc    eax,DWORD PTR [ecx]
     873:	13 00                	adc    eax,DWORD PTR [eax]
     875:	00 1f                	add    BYTE PTR [edi],bl
     877:	21 00                	and    DWORD PTR [eax],eax
     879:	49                   	dec    ecx
     87a:	13 2f                	adc    ebp,DWORD PTR [edi]
     87c:	05 00 00 20 21       	add    eax,0x21200000
     881:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     884:	2f                   	das    
     885:	0b 00                	or     eax,DWORD PTR [eax]
     887:	00 21                	add    BYTE PTR [ecx],ah
     889:	05 00 03 08 3a       	add    eax,0x3a080300
     88e:	0b 3b                	or     edi,DWORD PTR [ebx]
     890:	05 49 13 02 18       	add    eax,0x18021349
     895:	00 00                	add    BYTE PTR [eax],al
     897:	22 2e                	and    ch,BYTE PTR [esi]
     899:	00 3f                	add    BYTE PTR [edi],bh
     89b:	19 03                	sbb    DWORD PTR [ebx],eax
     89d:	0e                   	push   cs
     89e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8a0:	3b 05 11 01 12 06    	cmp    eax,DWORD PTR ds:0x6120111
     8a6:	40                   	inc    eax
     8a7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     8ad:	23 34 00             	and    esi,DWORD PTR [eax+eax*1]
     8b0:	03 0e                	add    ecx,DWORD PTR [esi]
     8b2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8b4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8b6:	49                   	dec    ecx
     8b7:	13 3f                	adc    edi,DWORD PTR [edi]
     8b9:	19 02                	sbb    DWORD PTR [edx],eax
     8bb:	18 00                	sbb    BYTE PTR [eax],al
     8bd:	00 00                	add    BYTE PTR [eax],al
     8bf:	01 11                	add    DWORD PTR [ecx],edx
     8c1:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8c7:	0e                   	push   cs
     8c8:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8ca:	11 01                	adc    DWORD PTR [ecx],eax
     8cc:	12 06                	adc    al,BYTE PTR [esi]
     8ce:	10 17                	adc    BYTE PTR [edi],dl
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8d5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8d7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8da:	0e                   	push   cs
     8db:	00 00                	add    BYTE PTR [eax],al
     8dd:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8e0:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8e2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8e5:	08 00                	or     BYTE PTR [eax],al
     8e7:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     8ea:	00 0b                	add    BYTE PTR [ebx],cl
     8ec:	0b 00                	or     eax,DWORD PTR [eax]
     8ee:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     8f4:	49                   	dec    ecx
     8f5:	13 00                	adc    eax,DWORD PTR [eax]
     8f7:	00 06                	add    BYTE PTR [esi],al
     8f9:	16                   	push   ss
     8fa:	00 03                	add    BYTE PTR [ebx],al
     8fc:	0e                   	push   cs
     8fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     901:	49                   	dec    ecx
     902:	13 00                	adc    eax,DWORD PTR [eax]
     904:	00 07                	add    BYTE PTR [edi],al
     906:	04 01                	add    al,0x1
     908:	03 0e                	add    ecx,DWORD PTR [esi]
     90a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     90c:	49                   	dec    ecx
     90d:	13 3a                	adc    edi,DWORD PTR [edx]
     90f:	0b 3b                	or     edi,DWORD PTR [ebx]
     911:	0b 01                	or     eax,DWORD PTR [ecx]
     913:	13 00                	adc    eax,DWORD PTR [eax]
     915:	00 08                	add    BYTE PTR [eax],cl
     917:	28 00                	sub    BYTE PTR [eax],al
     919:	03 0e                	add    ecx,DWORD PTR [esi]
     91b:	1c 0b                	sbb    al,0xb
     91d:	00 00                	add    BYTE PTR [eax],al
     91f:	09 28                	or     DWORD PTR [eax],ebp
     921:	00 03                	add    BYTE PTR [ebx],al
     923:	0e                   	push   cs
     924:	1c 05                	sbb    al,0x5
     926:	00 00                	add    BYTE PTR [eax],al
     928:	0a 13                	or     dl,BYTE PTR [ebx]
     92a:	01 03                	add    DWORD PTR [ebx],eax
     92c:	0e                   	push   cs
     92d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     92f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     931:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     933:	01 13                	add    DWORD PTR [ebx],edx
     935:	00 00                	add    BYTE PTR [eax],al
     937:	0b 0d 00 03 0e 3a    	or     ecx,DWORD PTR ds:0x3a0e0300
     93d:	0b 3b                	or     edi,DWORD PTR [ebx]
     93f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     942:	38 0b                	cmp    BYTE PTR [ebx],cl
     944:	00 00                	add    BYTE PTR [eax],al
     946:	0c 0d                	or     al,0xd
     948:	00 03                	add    BYTE PTR [ebx],al
     94a:	08 3a                	or     BYTE PTR [edx],bh
     94c:	0b 3b                	or     edi,DWORD PTR [ebx]
     94e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     951:	38 0b                	cmp    BYTE PTR [ebx],cl
     953:	00 00                	add    BYTE PTR [eax],al
     955:	0d 2e 01 3f 19       	or     eax,0x193f012e
     95a:	03 0e                	add    ecx,DWORD PTR [esi]
     95c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     95e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     960:	27                   	daa    
     961:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     964:	11 01                	adc    DWORD PTR [ecx],eax
     966:	12 06                	adc    al,BYTE PTR [esi]
     968:	40                   	inc    eax
     969:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     96f:	00 00                	add    BYTE PTR [eax],al
     971:	0e                   	push   cs
     972:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     977:	0b 3b                	or     edi,DWORD PTR [ebx]
     979:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     97c:	02 18                	add    bl,BYTE PTR [eax]
     97e:	00 00                	add    BYTE PTR [eax],al
     980:	0f 05                	syscall 
     982:	00 03                	add    BYTE PTR [ebx],al
     984:	08 3a                	or     BYTE PTR [edx],bh
     986:	0b 3b                	or     edi,DWORD PTR [ebx]
     988:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     98b:	02 18                	add    bl,BYTE PTR [eax]
     98d:	00 00                	add    BYTE PTR [eax],al
     98f:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     992:	03 0e                	add    ecx,DWORD PTR [esi]
     994:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     996:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     998:	49                   	dec    ecx
     999:	13 3f                	adc    edi,DWORD PTR [edi]
     99b:	19 02                	sbb    DWORD PTR [edx],eax
     99d:	18 00                	sbb    BYTE PTR [eax],al
     99f:	00 00                	add    BYTE PTR [eax],al
     9a1:	01 11                	add    DWORD PTR [ecx],edx
     9a3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     9a9:	0e                   	push   cs
     9aa:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     9ac:	11 01                	adc    DWORD PTR [ecx],eax
     9ae:	12 06                	adc    al,BYTE PTR [esi]
     9b0:	10 17                	adc    BYTE PTR [edi],dl
     9b2:	00 00                	add    BYTE PTR [eax],al
     9b4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     9b7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9b9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9bc:	0e                   	push   cs
     9bd:	00 00                	add    BYTE PTR [eax],al
     9bf:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     9c2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9c4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     9c7:	08 00                	or     BYTE PTR [eax],al
     9c9:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     9cc:	00 03                	add    BYTE PTR [ebx],al
     9ce:	0e                   	push   cs
     9cf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9d1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9d3:	49                   	dec    ecx
     9d4:	13 00                	adc    eax,DWORD PTR [eax]
     9d6:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     9dc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     9de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9e2:	01 13                	add    DWORD PTR [ebx],edx
     9e4:	00 00                	add    BYTE PTR [eax],al
     9e6:	06                   	push   es
     9e7:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     9ec:	0b 3b                	or     edi,DWORD PTR [ebx]
     9ee:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9f1:	38 0b                	cmp    BYTE PTR [ebx],cl
     9f3:	00 00                	add    BYTE PTR [eax],al
     9f5:	07                   	pop    es
     9f6:	0d 00 03 08 3a       	or     eax,0x3a080300
     9fb:	0b 3b                	or     edi,DWORD PTR [ebx]
     9fd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a00:	38 0b                	cmp    BYTE PTR [ebx],cl
     a02:	00 00                	add    BYTE PTR [eax],al
     a04:	08 0f                	or     BYTE PTR [edi],cl
     a06:	00 0b                	add    BYTE PTR [ebx],cl
     a08:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a0b:	00 00                	add    BYTE PTR [eax],al
     a0d:	09 0f                	or     DWORD PTR [edi],ecx
     a0f:	00 0b                	add    BYTE PTR [ebx],cl
     a11:	0b 00                	or     eax,DWORD PTR [eax]
     a13:	00 0a                	add    BYTE PTR [edx],cl
     a15:	04 01                	add    al,0x1
     a17:	03 0e                	add    ecx,DWORD PTR [esi]
     a19:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a1b:	49                   	dec    ecx
     a1c:	13 3a                	adc    edi,DWORD PTR [edx]
     a1e:	0b 3b                	or     edi,DWORD PTR [ebx]
     a20:	0b 01                	or     eax,DWORD PTR [ecx]
     a22:	13 00                	adc    eax,DWORD PTR [eax]
     a24:	00 0b                	add    BYTE PTR [ebx],cl
     a26:	28 00                	sub    BYTE PTR [eax],al
     a28:	03 0e                	add    ecx,DWORD PTR [esi]
     a2a:	1c 0b                	sbb    al,0xb
     a2c:	00 00                	add    BYTE PTR [eax],al
     a2e:	0c 28                	or     al,0x28
     a30:	00 03                	add    BYTE PTR [ebx],al
     a32:	0e                   	push   cs
     a33:	1c 05                	sbb    al,0x5
     a35:	00 00                	add    BYTE PTR [eax],al
     a37:	0d 2e 00 3f 19       	or     eax,0x193f002e
     a3c:	03 0e                	add    ecx,DWORD PTR [esi]
     a3e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a40:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a42:	11 01                	adc    DWORD PTR [ecx],eax
     a44:	12 06                	adc    al,BYTE PTR [esi]
     a46:	40                   	inc    eax
     a47:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     a4d:	0e                   	push   cs
     a4e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     a51:	19 03                	sbb    DWORD PTR [ebx],eax
     a53:	0e                   	push   cs
     a54:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a56:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a58:	27                   	daa    
     a59:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a5c:	11 01                	adc    DWORD PTR [ecx],eax
     a5e:	12 06                	adc    al,BYTE PTR [esi]
     a60:	40                   	inc    eax
     a61:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     a67:	00 00                	add    BYTE PTR [eax],al
     a69:	0f 05                	syscall 
     a6b:	00 03                	add    BYTE PTR [ebx],al
     a6d:	0e                   	push   cs
     a6e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a70:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a72:	49                   	dec    ecx
     a73:	13 02                	adc    eax,DWORD PTR [edx]
     a75:	18 00                	sbb    BYTE PTR [eax],al
     a77:	00 10                	add    BYTE PTR [eax],dl
     a79:	34 00                	xor    al,0x0
     a7b:	03 0e                	add    ecx,DWORD PTR [esi]
     a7d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a7f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a81:	49                   	dec    ecx
     a82:	13 02                	adc    eax,DWORD PTR [edx]
     a84:	18 00                	sbb    BYTE PTR [eax],al
     a86:	00 11                	add    BYTE PTR [ecx],dl
     a88:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     a8b:	19 03                	sbb    DWORD PTR [ebx],eax
     a8d:	0e                   	push   cs
     a8e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a90:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a92:	27                   	daa    
     a93:	19 11                	sbb    DWORD PTR [ecx],edx
     a95:	01 12                	add    DWORD PTR [edx],edx
     a97:	06                   	push   es
     a98:	40                   	inc    eax
     a99:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a9f:	00 00                	add    BYTE PTR [eax],al
     aa1:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     aa4:	03 08                	add    ecx,DWORD PTR [eax]
     aa6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     aa8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aaa:	49                   	dec    ecx
     aab:	13 02                	adc    eax,DWORD PTR [edx]
     aad:	18 00                	sbb    BYTE PTR [eax],al
     aaf:	00 13                	add    BYTE PTR [ebx],dl
     ab1:	0a 00                	or     al,BYTE PTR [eax]
     ab3:	03 0e                	add    ecx,DWORD PTR [esi]
     ab5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ab7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ab9:	11 01                	adc    DWORD PTR [ecx],eax
     abb:	00 00                	add    BYTE PTR [eax],al
     abd:	14 2e                	adc    al,0x2e
     abf:	01 3f                	add    DWORD PTR [edi],edi
     ac1:	19 03                	sbb    DWORD PTR [ebx],eax
     ac3:	0e                   	push   cs
     ac4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ac6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ac8:	27                   	daa    
     ac9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     acc:	11 01                	adc    DWORD PTR [ecx],eax
     ace:	12 06                	adc    al,BYTE PTR [esi]
     ad0:	40                   	inc    eax
     ad1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     ad7:	00 00                	add    BYTE PTR [eax],al
     ad9:	15 0b 01 11 01       	adc    eax,0x111010b
     ade:	12 06                	adc    al,BYTE PTR [esi]
     ae0:	00 00                	add    BYTE PTR [eax],al
     ae2:	16                   	push   ss
     ae3:	34 00                	xor    al,0x0
     ae5:	03 0e                	add    ecx,DWORD PTR [esi]
     ae7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ae9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     aeb:	49                   	dec    ecx
     aec:	13 3f                	adc    edi,DWORD PTR [edi]
     aee:	19 02                	sbb    DWORD PTR [edx],eax
     af0:	18 00                	sbb    BYTE PTR [eax],al
     af2:	00 00                	add    BYTE PTR [eax],al
     af4:	01 11                	add    DWORD PTR [ecx],edx
     af6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     afc:	0e                   	push   cs
     afd:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     aff:	11 01                	adc    DWORD PTR [ecx],eax
     b01:	12 06                	adc    al,BYTE PTR [esi]
     b03:	10 17                	adc    BYTE PTR [edi],dl
     b05:	00 00                	add    BYTE PTR [eax],al
     b07:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b0a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b0c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b0f:	0e                   	push   cs
     b10:	00 00                	add    BYTE PTR [eax],al
     b12:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b15:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b17:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b1a:	08 00                	or     BYTE PTR [eax],al
     b1c:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     b1f:	00 0b                	add    BYTE PTR [ebx],cl
     b21:	0b 00                	or     eax,DWORD PTR [eax]
     b23:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     b29:	49                   	dec    ecx
     b2a:	13 00                	adc    eax,DWORD PTR [eax]
     b2c:	00 06                	add    BYTE PTR [esi],al
     b2e:	16                   	push   ss
     b2f:	00 03                	add    BYTE PTR [ebx],al
     b31:	0e                   	push   cs
     b32:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b34:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b36:	49                   	dec    ecx
     b37:	13 00                	adc    eax,DWORD PTR [eax]
     b39:	00 07                	add    BYTE PTR [edi],al
     b3b:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     b3f:	00 00                	add    BYTE PTR [eax],al
     b41:	08 2e                	or     BYTE PTR [esi],ch
     b43:	01 3f                	add    DWORD PTR [edi],edi
     b45:	19 03                	sbb    DWORD PTR [ebx],eax
     b47:	0e                   	push   cs
     b48:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b4a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b4c:	27                   	daa    
     b4d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     b50:	11 01                	adc    DWORD PTR [ecx],eax
     b52:	12 06                	adc    al,BYTE PTR [esi]
     b54:	40                   	inc    eax
     b55:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     b5b:	00 00                	add    BYTE PTR [eax],al
     b5d:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     b63:	0b 3b                	or     edi,DWORD PTR [ebx]
     b65:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b68:	02 18                	add    bl,BYTE PTR [eax]
     b6a:	00 00                	add    BYTE PTR [eax],al
     b6c:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     b72:	0b 3b                	or     edi,DWORD PTR [ebx]
     b74:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b77:	02 18                	add    bl,BYTE PTR [eax]
     b79:	00 00                	add    BYTE PTR [eax],al
     b7b:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     b7e:	03 08                	add    ecx,DWORD PTR [eax]
     b80:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b82:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b84:	49                   	dec    ecx
     b85:	13 02                	adc    eax,DWORD PTR [edx]
     b87:	18 00                	sbb    BYTE PTR [eax],al
     b89:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     b8c:	01 11                	add    DWORD PTR [ecx],edx
     b8e:	01 12                	add    DWORD PTR [edx],edx
     b90:	06                   	push   es
     b91:	01 13                	add    DWORD PTR [ebx],edx
     b93:	00 00                	add    BYTE PTR [eax],al
     b95:	0d 0b 01 11 01       	or     eax,0x111010b
     b9a:	12 06                	adc    al,BYTE PTR [esi]
     b9c:	00 00                	add    BYTE PTR [eax],al
     b9e:	0e                   	push   cs
     b9f:	26 00 00             	add    BYTE PTR es:[eax],al
     ba2:	00 0f                	add    BYTE PTR [edi],cl
     ba4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     ba7:	19 03                	sbb    DWORD PTR [ebx],eax
     ba9:	0e                   	push   cs
     baa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bae:	27                   	daa    
     baf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bb2:	11 01                	adc    DWORD PTR [ecx],eax
     bb4:	12 06                	adc    al,BYTE PTR [esi]
     bb6:	40                   	inc    eax
     bb7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bbd:	00 00                	add    BYTE PTR [eax],al
     bbf:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     bc2:	03 0e                	add    ecx,DWORD PTR [esi]
     bc4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bc6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bc8:	49                   	dec    ecx
     bc9:	13 3f                	adc    edi,DWORD PTR [edi]
     bcb:	19 02                	sbb    DWORD PTR [edx],eax
     bcd:	18 00                	sbb    BYTE PTR [eax],al
     bcf:	00 00                	add    BYTE PTR [eax],al
     bd1:	01 11                	add    DWORD PTR [ecx],edx
     bd3:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     bd9:	0e                   	push   cs
     bda:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     bdc:	11 01                	adc    DWORD PTR [ecx],eax
     bde:	12 06                	adc    al,BYTE PTR [esi]
     be0:	10 17                	adc    BYTE PTR [edi],dl
     be2:	00 00                	add    BYTE PTR [eax],al
     be4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     be7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     be9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bec:	0e                   	push   cs
     bed:	00 00                	add    BYTE PTR [eax],al
     bef:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     bf2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     bf4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     bf7:	08 00                	or     BYTE PTR [eax],al
     bf9:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     bfc:	00 0b                	add    BYTE PTR [ebx],cl
     bfe:	0b 00                	or     eax,DWORD PTR [eax]
     c00:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c06:	49                   	dec    ecx
     c07:	13 00                	adc    eax,DWORD PTR [eax]
     c09:	00 06                	add    BYTE PTR [esi],al
     c0b:	16                   	push   ss
     c0c:	00 03                	add    BYTE PTR [ebx],al
     c0e:	0e                   	push   cs
     c0f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c11:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c13:	49                   	dec    ecx
     c14:	13 00                	adc    eax,DWORD PTR [eax]
     c16:	00 07                	add    BYTE PTR [edi],al
     c18:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c1b:	19 03                	sbb    DWORD PTR [ebx],eax
     c1d:	0e                   	push   cs
     c1e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c20:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c22:	27                   	daa    
     c23:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c26:	11 01                	adc    DWORD PTR [ecx],eax
     c28:	12 06                	adc    al,BYTE PTR [esi]
     c2a:	40                   	inc    eax
     c2b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c31:	00 00                	add    BYTE PTR [eax],al
     c33:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c39:	0b 3b                	or     edi,DWORD PTR [ebx]
     c3b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c3e:	02 18                	add    bl,BYTE PTR [eax]
     c40:	00 00                	add    BYTE PTR [eax],al
     c42:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c45:	03 08                	add    ecx,DWORD PTR [eax]
     c47:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c49:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c4b:	49                   	dec    ecx
     c4c:	13 02                	adc    eax,DWORD PTR [edx]
     c4e:	18 00                	sbb    BYTE PTR [eax],al
     c50:	00 0a                	add    BYTE PTR [edx],cl
     c52:	34 00                	xor    al,0x0
     c54:	03 0e                	add    ecx,DWORD PTR [esi]
     c56:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c58:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c5a:	49                   	dec    ecx
     c5b:	13 02                	adc    eax,DWORD PTR [edx]
     c5d:	18 00                	sbb    BYTE PTR [eax],al
     c5f:	00 0b                	add    BYTE PTR [ebx],cl
     c61:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c64:	19 03                	sbb    DWORD PTR [ebx],eax
     c66:	0e                   	push   cs
     c67:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c69:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c6b:	27                   	daa    
     c6c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c6f:	11 01                	adc    DWORD PTR [ecx],eax
     c71:	12 06                	adc    al,BYTE PTR [esi]
     c73:	40                   	inc    eax
     c74:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     c7a:	00 00                	add    BYTE PTR [eax],al
     c7c:	0c 34                	or     al,0x34
     c7e:	00 03                	add    BYTE PTR [ebx],al
     c80:	0e                   	push   cs
     c81:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c83:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c85:	49                   	dec    ecx
     c86:	13 3f                	adc    edi,DWORD PTR [edi]
     c88:	19 02                	sbb    DWORD PTR [edx],eax
     c8a:	18 00                	sbb    BYTE PTR [eax],al
     c8c:	00 00                	add    BYTE PTR [eax],al
     c8e:	01 11                	add    DWORD PTR [ecx],edx
     c90:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c96:	0e                   	push   cs
     c97:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c99:	11 01                	adc    DWORD PTR [ecx],eax
     c9b:	12 06                	adc    al,BYTE PTR [esi]
     c9d:	10 17                	adc    BYTE PTR [edi],dl
     c9f:	00 00                	add    BYTE PTR [eax],al
     ca1:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ca4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ca6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ca9:	0e                   	push   cs
     caa:	00 00                	add    BYTE PTR [eax],al
     cac:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     caf:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cb1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cb4:	08 00                	or     BYTE PTR [eax],al
     cb6:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     cb9:	00 0b                	add    BYTE PTR [ebx],cl
     cbb:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     cbe:	00 00                	add    BYTE PTR [eax],al
     cc0:	05 16 00 03 0e       	add    eax,0xe030016
     cc5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cc7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cc9:	49                   	dec    ecx
     cca:	13 00                	adc    eax,DWORD PTR [eax]
     ccc:	00 06                	add    BYTE PTR [esi],al
     cce:	04 01                	add    al,0x1
     cd0:	03 0e                	add    ecx,DWORD PTR [esi]
     cd2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cd4:	49                   	dec    ecx
     cd5:	13 3a                	adc    edi,DWORD PTR [edx]
     cd7:	0b 3b                	or     edi,DWORD PTR [ebx]
     cd9:	0b 01                	or     eax,DWORD PTR [ecx]
     cdb:	13 00                	adc    eax,DWORD PTR [eax]
     cdd:	00 07                	add    BYTE PTR [edi],al
     cdf:	28 00                	sub    BYTE PTR [eax],al
     ce1:	03 0e                	add    ecx,DWORD PTR [esi]
     ce3:	1c 0b                	sbb    al,0xb
     ce5:	00 00                	add    BYTE PTR [eax],al
     ce7:	08 28                	or     BYTE PTR [eax],ch
     ce9:	00 03                	add    BYTE PTR [ebx],al
     ceb:	0e                   	push   cs
     cec:	1c 05                	sbb    al,0x5
     cee:	00 00                	add    BYTE PTR [eax],al
     cf0:	09 2e                	or     DWORD PTR [esi],ebp
     cf2:	01 3f                	add    DWORD PTR [edi],edi
     cf4:	19 03                	sbb    DWORD PTR [ebx],eax
     cf6:	0e                   	push   cs
     cf7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cf9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cfb:	27                   	daa    
     cfc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     cff:	11 01                	adc    DWORD PTR [ecx],eax
     d01:	12 06                	adc    al,BYTE PTR [esi]
     d03:	40                   	inc    eax
     d04:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     d0a:	00 00                	add    BYTE PTR [eax],al
     d0c:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     d12:	0b 3b                	or     edi,DWORD PTR [ebx]
     d14:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d17:	02 18                	add    bl,BYTE PTR [eax]
     d19:	00 00                	add    BYTE PTR [eax],al
     d1b:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d1e:	03 0e                	add    ecx,DWORD PTR [esi]
     d20:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d22:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d24:	49                   	dec    ecx
     d25:	13 3f                	adc    edi,DWORD PTR [edi]
     d27:	19 02                	sbb    DWORD PTR [edx],eax
     d29:	18 00                	sbb    BYTE PTR [eax],al
     d2b:	00 00                	add    BYTE PTR [eax],al
     d2d:	01 11                	add    DWORD PTR [ecx],edx
     d2f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d35:	0e                   	push   cs
     d36:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d38:	11 01                	adc    DWORD PTR [ecx],eax
     d3a:	12 06                	adc    al,BYTE PTR [esi]
     d3c:	10 17                	adc    BYTE PTR [edi],dl
     d3e:	00 00                	add    BYTE PTR [eax],al
     d40:	02 16                	add    dl,BYTE PTR [esi]
     d42:	00 03                	add    BYTE PTR [ebx],al
     d44:	0e                   	push   cs
     d45:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d47:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d49:	49                   	dec    ecx
     d4a:	13 00                	adc    eax,DWORD PTR [eax]
     d4c:	00 03                	add    BYTE PTR [ebx],al
     d4e:	13 01                	adc    eax,DWORD PTR [ecx]
     d50:	03 0e                	add    ecx,DWORD PTR [esi]
     d52:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d54:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d56:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d58:	01 13                	add    DWORD PTR [ebx],edx
     d5a:	00 00                	add    BYTE PTR [eax],al
     d5c:	04 0d                	add    al,0xd
     d5e:	00 03                	add    BYTE PTR [ebx],al
     d60:	08 3a                	or     BYTE PTR [edx],bh
     d62:	0b 3b                	or     edi,DWORD PTR [ebx]
     d64:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d67:	38 0b                	cmp    BYTE PTR [ebx],cl
     d69:	00 00                	add    BYTE PTR [eax],al
     d6b:	05 0d 00 03 0e       	add    eax,0xe03000d
     d70:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d72:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d74:	49                   	dec    ecx
     d75:	13 38                	adc    edi,DWORD PTR [eax]
     d77:	0b 00                	or     eax,DWORD PTR [eax]
     d79:	00 06                	add    BYTE PTR [esi],al
     d7b:	24 00                	and    al,0x0
     d7d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d7f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d82:	08 00                	or     BYTE PTR [eax],al
     d84:	00 07                	add    BYTE PTR [edi],al
     d86:	01 01                	add    DWORD PTR [ecx],eax
     d88:	49                   	dec    ecx
     d89:	13 01                	adc    eax,DWORD PTR [ecx]
     d8b:	13 00                	adc    eax,DWORD PTR [eax]
     d8d:	00 08                	add    BYTE PTR [eax],cl
     d8f:	21 00                	and    DWORD PTR [eax],eax
     d91:	49                   	dec    ecx
     d92:	13 2f                	adc    ebp,DWORD PTR [edi]
     d94:	0b 00                	or     eax,DWORD PTR [eax]
     d96:	00 09                	add    BYTE PTR [ecx],cl
     d98:	24 00                	and    al,0x0
     d9a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d9c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d9f:	0e                   	push   cs
     da0:	00 00                	add    BYTE PTR [eax],al
     da2:	0a 0f                	or     cl,BYTE PTR [edi]
     da4:	00 0b                	add    BYTE PTR [ebx],cl
     da6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     da9:	00 00                	add    BYTE PTR [eax],al
     dab:	0b 13                	or     edx,DWORD PTR [ebx]
     dad:	01 03                	add    DWORD PTR [ebx],eax
     daf:	08 0b                	or     BYTE PTR [ebx],cl
     db1:	0b 3a                	or     edi,DWORD PTR [edx]
     db3:	0b 3b                	or     edi,DWORD PTR [ebx]
     db5:	0b 01                	or     eax,DWORD PTR [ecx]
     db7:	13 00                	adc    eax,DWORD PTR [eax]
     db9:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
     dbc:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     dbf:	00 00                	add    BYTE PTR [eax],al
     dc1:	0d 13 01 03 0e       	or     eax,0xe030113
     dc6:	0b 05 3a 0b 3b 0b    	or     eax,DWORD PTR ds:0xb3b0b3a
     dcc:	01 13                	add    DWORD PTR [ebx],edx
     dce:	00 00                	add    BYTE PTR [eax],al
     dd0:	0e                   	push   cs
     dd1:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     dd6:	0b 3b                	or     edi,DWORD PTR [ebx]
     dd8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ddb:	38 05 00 00 0f 21    	cmp    BYTE PTR ds:0x210f0000,al
     de1:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     de4:	2f                   	das    
     de5:	05 00 00 10 2e       	add    eax,0x2e100000
     dea:	01 3f                	add    DWORD PTR [edi],edi
     dec:	19 03                	sbb    DWORD PTR [ebx],eax
     dee:	0e                   	push   cs
     def:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     df1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     df3:	27                   	daa    
     df4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     df7:	11 01                	adc    DWORD PTR [ecx],eax
     df9:	12 06                	adc    al,BYTE PTR [esi]
     dfb:	40                   	inc    eax
     dfc:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e02:	00 00                	add    BYTE PTR [eax],al
     e04:	11 05 00 03 0e 3a    	adc    DWORD PTR ds:0x3a0e0300,eax
     e0a:	0b 3b                	or     edi,DWORD PTR [ebx]
     e0c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e0f:	02 18                	add    bl,BYTE PTR [eax]
     e11:	00 00                	add    BYTE PTR [eax],al
     e13:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     e16:	03 0e                	add    ecx,DWORD PTR [esi]
     e18:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e1a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e1c:	49                   	dec    ecx
     e1d:	13 02                	adc    eax,DWORD PTR [edx]
     e1f:	18 00                	sbb    BYTE PTR [eax],al
     e21:	00 13                	add    BYTE PTR [ebx],dl
     e23:	34 00                	xor    al,0x0
     e25:	03 08                	add    ecx,DWORD PTR [eax]
     e27:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e29:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e2b:	49                   	dec    ecx
     e2c:	13 02                	adc    eax,DWORD PTR [edx]
     e2e:	18 00                	sbb    BYTE PTR [eax],al
     e30:	00 14 0b             	add    BYTE PTR [ebx+ecx*1],dl
     e33:	01 11                	add    DWORD PTR [ecx],edx
     e35:	01 12                	add    DWORD PTR [edx],edx
     e37:	06                   	push   es
     e38:	00 00                	add    BYTE PTR [eax],al
     e3a:	15 2e 01 3f 19       	adc    eax,0x193f012e
     e3f:	03 0e                	add    ecx,DWORD PTR [esi]
     e41:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e43:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e45:	27                   	daa    
     e46:	19 11                	sbb    DWORD PTR [ecx],edx
     e48:	01 12                	add    DWORD PTR [edx],edx
     e4a:	06                   	push   es
     e4b:	40                   	inc    eax
     e4c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     e52:	00 00                	add    BYTE PTR [eax],al
     e54:	16                   	push   ss
     e55:	34 00                	xor    al,0x0
     e57:	03 0e                	add    ecx,DWORD PTR [esi]
     e59:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e5b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e5d:	49                   	dec    ecx
     e5e:	13 3f                	adc    edi,DWORD PTR [edi]
     e60:	19 02                	sbb    DWORD PTR [edx],eax
     e62:	18 00                	sbb    BYTE PTR [eax],al
     e64:	00 00                	add    BYTE PTR [eax],al
     e66:	01 11                	add    DWORD PTR [ecx],edx
     e68:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e6e:	0e                   	push   cs
     e6f:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e71:	11 01                	adc    DWORD PTR [ecx],eax
     e73:	12 06                	adc    al,BYTE PTR [esi]
     e75:	10 17                	adc    BYTE PTR [edi],dl
     e77:	00 00                	add    BYTE PTR [eax],al
     e79:	02 16                	add    dl,BYTE PTR [esi]
     e7b:	00 03                	add    BYTE PTR [ebx],al
     e7d:	0e                   	push   cs
     e7e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e80:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e82:	49                   	dec    ecx
     e83:	13 00                	adc    eax,DWORD PTR [eax]
     e85:	00 03                	add    BYTE PTR [ebx],al
     e87:	0f 00 0b             	str    WORD PTR [ebx]
     e8a:	0b 03                	or     eax,DWORD PTR [ebx]
     e8c:	0e                   	push   cs
     e8d:	49                   	dec    ecx
     e8e:	13 00                	adc    eax,DWORD PTR [eax]
     e90:	00 04 24             	add    BYTE PTR [esp],al
     e93:	00 0b                	add    BYTE PTR [ebx],cl
     e95:	0b 3e                	or     edi,DWORD PTR [esi]
     e97:	0b 03                	or     eax,DWORD PTR [ebx]
     e99:	0e                   	push   cs
     e9a:	00 00                	add    BYTE PTR [eax],al
     e9c:	05 24 00 0b 0b       	add    eax,0xb0b0024
     ea1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     ea4:	08 00                	or     BYTE PTR [eax],al
     ea6:	00 06                	add    BYTE PTR [esi],al
     ea8:	0f 00 0b             	str    WORD PTR [ebx]
     eab:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     eae:	00 00                	add    BYTE PTR [eax],al
     eb0:	07                   	pop    es
     eb1:	2e 01 03             	add    DWORD PTR cs:[ebx],eax
     eb4:	0e                   	push   cs
     eb5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     eb7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     eb9:	27                   	daa    
     eba:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ebd:	11 01                	adc    DWORD PTR [ecx],eax
     ebf:	12 06                	adc    al,BYTE PTR [esi]
     ec1:	40                   	inc    eax
     ec2:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     ec8:	00 00                	add    BYTE PTR [eax],al
     eca:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     ed0:	0b 3b                	or     edi,DWORD PTR [ebx]
     ed2:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ed5:	02 18                	add    bl,BYTE PTR [eax]
     ed7:	00 00                	add    BYTE PTR [eax],al
     ed9:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     edc:	03 08                	add    ecx,DWORD PTR [eax]
     ede:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ee0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ee2:	49                   	dec    ecx
     ee3:	13 02                	adc    eax,DWORD PTR [edx]
     ee5:	18 00                	sbb    BYTE PTR [eax],al
     ee7:	00 0a                	add    BYTE PTR [edx],cl
     ee9:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     eed:	00 00                	add    BYTE PTR [eax],al
     eef:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
     ef5:	0b 3b                	or     edi,DWORD PTR [ebx]
     ef7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     efa:	02 18                	add    bl,BYTE PTR [eax]
     efc:	00 00                	add    BYTE PTR [eax],al
     efe:	0c 34                	or     al,0x34
     f00:	00 03                	add    BYTE PTR [ebx],al
     f02:	0e                   	push   cs
     f03:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f05:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f07:	49                   	dec    ecx
     f08:	13 02                	adc    eax,DWORD PTR [edx]
     f0a:	18 00                	sbb    BYTE PTR [eax],al
     f0c:	00 0d 0b 01 11 01    	add    BYTE PTR ds:0x111010b,cl
     f12:	12 06                	adc    al,BYTE PTR [esi]
     f14:	00 00                	add    BYTE PTR [eax],al
     f16:	0e                   	push   cs
     f17:	01 01                	add    DWORD PTR [ecx],eax
     f19:	49                   	dec    ecx
     f1a:	13 01                	adc    eax,DWORD PTR [ecx]
     f1c:	13 00                	adc    eax,DWORD PTR [eax]
     f1e:	00 0f                	add    BYTE PTR [edi],cl
     f20:	21 00                	and    DWORD PTR [eax],eax
     f22:	49                   	dec    ecx
     f23:	13 2f                	adc    ebp,DWORD PTR [edi]
     f25:	0b 00                	or     eax,DWORD PTR [eax]
     f27:	00 10                	add    BYTE PTR [eax],dl
     f29:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     f2c:	19 03                	sbb    DWORD PTR [ebx],eax
     f2e:	0e                   	push   cs
     f2f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f31:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f33:	27                   	daa    
     f34:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f37:	11 01                	adc    DWORD PTR [ecx],eax
     f39:	12 06                	adc    al,BYTE PTR [esi]
     f3b:	40                   	inc    eax
     f3c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f42:	00 00                	add    BYTE PTR [eax],al
     f44:	11 0a                	adc    DWORD PTR [edx],ecx
     f46:	00 03                	add    BYTE PTR [ebx],al
     f48:	0e                   	push   cs
     f49:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f4b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f4d:	11 01                	adc    DWORD PTR [ecx],eax
     f4f:	00 00                	add    BYTE PTR [eax],al
     f51:	12 0b                	adc    cl,BYTE PTR [ebx]
     f53:	01 11                	add    DWORD PTR [ecx],edx
     f55:	01 12                	add    DWORD PTR [edx],edx
     f57:	06                   	push   es
     f58:	01 13                	add    DWORD PTR [ebx],edx
     f5a:	00 00                	add    BYTE PTR [eax],al
     f5c:	13 2e                	adc    ebp,DWORD PTR [esi]
     f5e:	01 3f                	add    DWORD PTR [edi],edi
     f60:	19 03                	sbb    DWORD PTR [ebx],eax
     f62:	0e                   	push   cs
     f63:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f65:	3b 05 27 19 49 13    	cmp    eax,DWORD PTR ds:0x13491927
     f6b:	11 01                	adc    DWORD PTR [ecx],eax
     f6d:	12 06                	adc    al,BYTE PTR [esi]
     f6f:	40                   	inc    eax
     f70:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     f76:	00 00                	add    BYTE PTR [eax],al
     f78:	14 05                	adc    al,0x5
     f7a:	00 03                	add    BYTE PTR [ebx],al
     f7c:	08 3a                	or     BYTE PTR [edx],bh
     f7e:	0b 3b                	or     edi,DWORD PTR [ebx]
     f80:	05 49 13 02 18       	add    eax,0x18021349
     f85:	00 00                	add    BYTE PTR [eax],al
     f87:	15 18 00 00 00       	adc    eax,0x18
     f8c:	16                   	push   ss
     f8d:	34 00                	xor    al,0x0
     f8f:	03 0e                	add    ecx,DWORD PTR [esi]
     f91:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f93:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     f99:	00 00                	add    BYTE PTR [eax],al
     f9b:	17                   	pop    ss
     f9c:	34 00                	xor    al,0x0
     f9e:	03 08                	add    ecx,DWORD PTR [eax]
     fa0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fa2:	3b 05 49 13 02 18    	cmp    eax,DWORD PTR ds:0x18021349
     fa8:	00 00                	add    BYTE PTR [eax],al
     faa:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     fad:	03 0e                	add    ecx,DWORD PTR [esi]
     faf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fb3:	49                   	dec    ecx
     fb4:	13 3f                	adc    edi,DWORD PTR [edi]
     fb6:	19 02                	sbb    DWORD PTR [edx],eax
     fb8:	18 00                	sbb    BYTE PTR [eax],al
     fba:	00 00                	add    BYTE PTR [eax],al
     fbc:	01 11                	add    DWORD PTR [ecx],edx
     fbe:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     fc4:	0e                   	push   cs
     fc5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fc7:	11 01                	adc    DWORD PTR [ecx],eax
     fc9:	12 06                	adc    al,BYTE PTR [esi]
     fcb:	10 17                	adc    BYTE PTR [edi],dl
     fcd:	00 00                	add    BYTE PTR [eax],al
     fcf:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fd2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fd4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fd7:	0e                   	push   cs
     fd8:	00 00                	add    BYTE PTR [eax],al
     fda:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     fdd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fdf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fe2:	08 00                	or     BYTE PTR [eax],al
     fe4:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     fe7:	00 0b                	add    BYTE PTR [ebx],cl
     fe9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     fec:	00 00                	add    BYTE PTR [eax],al
     fee:	05 2e 01 3f 19       	add    eax,0x193f012e
     ff3:	03 0e                	add    ecx,DWORD PTR [esi]
     ff5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff9:	11 01                	adc    DWORD PTR [ecx],eax
     ffb:	12 06                	adc    al,BYTE PTR [esi]
     ffd:	40                   	inc    eax
     ffe:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1004:	00 00                	add    BYTE PTR [eax],al
    1006:	06                   	push   es
    1007:	34 00                	xor    al,0x0
    1009:	03 0e                	add    ecx,DWORD PTR [esi]
    100b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    100d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    100f:	49                   	dec    ecx
    1010:	13 02                	adc    eax,DWORD PTR [edx]
    1012:	18 00                	sbb    BYTE PTR [eax],al
    1014:	00 07                	add    BYTE PTR [edi],al
    1016:	01 01                	add    DWORD PTR [ecx],eax
    1018:	49                   	dec    ecx
    1019:	13 01                	adc    eax,DWORD PTR [ecx]
    101b:	13 00                	adc    eax,DWORD PTR [eax]
    101d:	00 08                	add    BYTE PTR [eax],cl
    101f:	21 00                	and    DWORD PTR [eax],eax
    1021:	49                   	dec    ecx
    1022:	13 2f                	adc    ebp,DWORD PTR [edi]
    1024:	0b 00                	or     eax,DWORD PTR [eax]
    1026:	00 09                	add    BYTE PTR [ecx],cl
    1028:	34 00                	xor    al,0x0
    102a:	03 0e                	add    ecx,DWORD PTR [esi]
    102c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    102e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1030:	49                   	dec    ecx
    1031:	13 3f                	adc    edi,DWORD PTR [edi]
    1033:	19 02                	sbb    DWORD PTR [edx],eax
    1035:	18 00                	sbb    BYTE PTR [eax],al
    1037:	00 00                	add    BYTE PTR [eax],al
    1039:	01 11                	add    DWORD PTR [ecx],edx
    103b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1041:	0e                   	push   cs
    1042:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1044:	11 01                	adc    DWORD PTR [ecx],eax
    1046:	12 06                	adc    al,BYTE PTR [esi]
    1048:	10 17                	adc    BYTE PTR [edi],dl
    104a:	00 00                	add    BYTE PTR [eax],al
    104c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    104f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1051:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1054:	08 00                	or     BYTE PTR [eax],al
    1056:	00 03                	add    BYTE PTR [ebx],al
    1058:	16                   	push   ss
    1059:	00 03                	add    BYTE PTR [ebx],al
    105b:	0e                   	push   cs
    105c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    105e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1060:	49                   	dec    ecx
    1061:	13 00                	adc    eax,DWORD PTR [eax]
    1063:	00 04 24             	add    BYTE PTR [esp],al
    1066:	00 0b                	add    BYTE PTR [ebx],cl
    1068:	0b 3e                	or     edi,DWORD PTR [esi]
    106a:	0b 03                	or     eax,DWORD PTR [ebx]
    106c:	0e                   	push   cs
    106d:	00 00                	add    BYTE PTR [eax],al
    106f:	05 0f 00 0b 0b       	add    eax,0xb0b000f
    1074:	49                   	dec    ecx
    1075:	13 00                	adc    eax,DWORD PTR [eax]
    1077:	00 06                	add    BYTE PTR [esi],al
    1079:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    107c:	19 03                	sbb    DWORD PTR [ebx],eax
    107e:	0e                   	push   cs
    107f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1081:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1083:	27                   	daa    
    1084:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1087:	11 01                	adc    DWORD PTR [ecx],eax
    1089:	12 06                	adc    al,BYTE PTR [esi]
    108b:	40                   	inc    eax
    108c:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1092:	00 00                	add    BYTE PTR [eax],al
    1094:	07                   	pop    es
    1095:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    109a:	0b 3b                	or     edi,DWORD PTR [ebx]
    109c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    109f:	02 18                	add    bl,BYTE PTR [eax]
    10a1:	00 00                	add    BYTE PTR [eax],al
    10a3:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    10a9:	0b 3b                	or     edi,DWORD PTR [ebx]
    10ab:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10ae:	02 18                	add    bl,BYTE PTR [eax]
    10b0:	00 00                	add    BYTE PTR [eax],al
    10b2:	09 26                	or     DWORD PTR [esi],esp
    10b4:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    10b7:	00 00                	add    BYTE PTR [eax],al
    10b9:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    10bc:	03 0e                	add    ecx,DWORD PTR [esi]
    10be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10c2:	49                   	dec    ecx
    10c3:	13 02                	adc    eax,DWORD PTR [edx]
    10c5:	18 00                	sbb    BYTE PTR [eax],al
    10c7:	00 0b                	add    BYTE PTR [ebx],cl
    10c9:	34 00                	xor    al,0x0
    10cb:	03 0e                	add    ecx,DWORD PTR [esi]
    10cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    10cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    10d1:	49                   	dec    ecx
    10d2:	13 3f                	adc    edi,DWORD PTR [edi]
    10d4:	19 02                	sbb    DWORD PTR [edx],eax
    10d6:	18 00                	sbb    BYTE PTR [eax],al
    10d8:	00 00                	add    BYTE PTR [eax],al
    10da:	01 11                	add    DWORD PTR [ecx],edx
    10dc:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10e2:	0e                   	push   cs
    10e3:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10e5:	11 01                	adc    DWORD PTR [ecx],eax
    10e7:	12 06                	adc    al,BYTE PTR [esi]
    10e9:	10 17                	adc    BYTE PTR [edi],dl
    10eb:	00 00                	add    BYTE PTR [eax],al
    10ed:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10f0:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10f2:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10f5:	0e                   	push   cs
    10f6:	00 00                	add    BYTE PTR [eax],al
    10f8:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    10fb:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10fd:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1100:	08 00                	or     BYTE PTR [eax],al
    1102:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1105:	00 0b                	add    BYTE PTR [ebx],cl
    1107:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    110a:	00 00                	add    BYTE PTR [eax],al
    110c:	05 16 00 03 0e       	add    eax,0xe030016
    1111:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1113:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1115:	49                   	dec    ecx
    1116:	13 00                	adc    eax,DWORD PTR [eax]
    1118:	00 06                	add    BYTE PTR [esi],al
    111a:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    111e:	00 00                	add    BYTE PTR [eax],al
    1120:	07                   	pop    es
    1121:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1124:	19 03                	sbb    DWORD PTR [ebx],eax
    1126:	0e                   	push   cs
    1127:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1129:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    112b:	27                   	daa    
    112c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    112f:	11 01                	adc    DWORD PTR [ecx],eax
    1131:	12 06                	adc    al,BYTE PTR [esi]
    1133:	40                   	inc    eax
    1134:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    113a:	00 00                	add    BYTE PTR [eax],al
    113c:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1142:	0b 3b                	or     edi,DWORD PTR [ebx]
    1144:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1147:	02 18                	add    bl,BYTE PTR [eax]
    1149:	00 00                	add    BYTE PTR [eax],al
    114b:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    114e:	03 08                	add    ecx,DWORD PTR [eax]
    1150:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1152:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1154:	49                   	dec    ecx
    1155:	13 02                	adc    eax,DWORD PTR [edx]
    1157:	18 00                	sbb    BYTE PTR [eax],al
    1159:	00 0a                	add    BYTE PTR [edx],cl
    115b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    115e:	19 03                	sbb    DWORD PTR [ebx],eax
    1160:	0e                   	push   cs
    1161:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1163:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1165:	27                   	daa    
    1166:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1169:	11 01                	adc    DWORD PTR [ecx],eax
    116b:	12 06                	adc    al,BYTE PTR [esi]
    116d:	40                   	inc    eax
    116e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1174:	00 00                	add    BYTE PTR [eax],al
    1176:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
    1179:	03 0e                	add    ecx,DWORD PTR [esi]
    117b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    117d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    117f:	49                   	dec    ecx
    1180:	13 3f                	adc    edi,DWORD PTR [edi]
    1182:	19 02                	sbb    DWORD PTR [edx],eax
    1184:	18 00                	sbb    BYTE PTR [eax],al
    1186:	00 00                	add    BYTE PTR [eax],al
    1188:	01 11                	add    DWORD PTR [ecx],edx
    118a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1190:	0e                   	push   cs
    1191:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1193:	11 01                	adc    DWORD PTR [ecx],eax
    1195:	12 06                	adc    al,BYTE PTR [esi]
    1197:	10 17                	adc    BYTE PTR [edi],dl
    1199:	00 00                	add    BYTE PTR [eax],al
    119b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    119e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11a0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11a3:	08 00                	or     BYTE PTR [eax],al
    11a5:	00 03                	add    BYTE PTR [ebx],al
    11a7:	24 00                	and    al,0x0
    11a9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11ab:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11ae:	0e                   	push   cs
    11af:	00 00                	add    BYTE PTR [eax],al
    11b1:	04 2e                	add    al,0x2e
    11b3:	01 3f                	add    DWORD PTR [edi],edi
    11b5:	19 03                	sbb    DWORD PTR [ebx],eax
    11b7:	0e                   	push   cs
    11b8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11ba:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11bc:	27                   	daa    
    11bd:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    11c0:	11 01                	adc    DWORD PTR [ecx],eax
    11c2:	12 06                	adc    al,BYTE PTR [esi]
    11c4:	40                   	inc    eax
    11c5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    11cb:	00 00                	add    BYTE PTR [eax],al
    11cd:	05 05 00 03 08       	add    eax,0x8030005
    11d2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11d4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11d6:	49                   	dec    ecx
    11d7:	13 02                	adc    eax,DWORD PTR [edx]
    11d9:	18 00                	sbb    BYTE PTR [eax],al
    11db:	00 06                	add    BYTE PTR [esi],al
    11dd:	34 00                	xor    al,0x0
    11df:	03 08                	add    ecx,DWORD PTR [eax]
    11e1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11e3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11e5:	49                   	dec    ecx
    11e6:	13 02                	adc    eax,DWORD PTR [edx]
    11e8:	18 00                	sbb    BYTE PTR [eax],al
    11ea:	00 07                	add    BYTE PTR [edi],al
    11ec:	0f 00 0b             	str    WORD PTR [ebx]
    11ef:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11f2:	00 00                	add    BYTE PTR [eax],al
    11f4:	08 26                	or     BYTE PTR [esi],ah
    11f6:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    11f9:	00 00                	add    BYTE PTR [eax],al
    11fb:	09 2e                	or     DWORD PTR [esi],ebp
    11fd:	01 3f                	add    DWORD PTR [edi],edi
    11ff:	19 03                	sbb    DWORD PTR [ebx],eax
    1201:	0e                   	push   cs
    1202:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1204:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1206:	27                   	daa    
    1207:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    120a:	11 01                	adc    DWORD PTR [ecx],eax
    120c:	12 06                	adc    al,BYTE PTR [esi]
    120e:	40                   	inc    eax
    120f:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1215:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
    121b:	0b 3b                	or     edi,DWORD PTR [ebx]
    121d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1220:	02 18                	add    bl,BYTE PTR [eax]
    1222:	00 00                	add    BYTE PTR [eax],al
    1224:	00 01                	add    BYTE PTR [ecx],al
    1226:	11 01                	adc    DWORD PTR [ecx],eax
    1228:	25 0e 13 0b 03       	and    eax,0x30b130e
    122d:	0e                   	push   cs
    122e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1230:	11 01                	adc    DWORD PTR [ecx],eax
    1232:	12 06                	adc    al,BYTE PTR [esi]
    1234:	10 17                	adc    BYTE PTR [edi],dl
    1236:	00 00                	add    BYTE PTR [eax],al
    1238:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    123b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    123d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1240:	0e                   	push   cs
    1241:	00 00                	add    BYTE PTR [eax],al
    1243:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1246:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1248:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    124b:	08 00                	or     BYTE PTR [eax],al
    124d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1250:	00 0b                	add    BYTE PTR [ebx],cl
    1252:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1255:	00 00                	add    BYTE PTR [eax],al
    1257:	05 16 00 03 0e       	add    eax,0xe030016
    125c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    125e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1260:	49                   	dec    ecx
    1261:	13 00                	adc    eax,DWORD PTR [eax]
    1263:	00 06                	add    BYTE PTR [esi],al
    1265:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1268:	19 03                	sbb    DWORD PTR [ebx],eax
    126a:	0e                   	push   cs
    126b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    126d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    126f:	27                   	daa    
    1270:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1273:	11 01                	adc    DWORD PTR [ecx],eax
    1275:	12 06                	adc    al,BYTE PTR [esi]
    1277:	40                   	inc    eax
    1278:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    127e:	00 00                	add    BYTE PTR [eax],al
    1280:	07                   	pop    es
    1281:	05 00 03 08 3a       	add    eax,0x3a080300
    1286:	0b 3b                	or     edi,DWORD PTR [ebx]
    1288:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    128b:	02 18                	add    bl,BYTE PTR [eax]
    128d:	00 00                	add    BYTE PTR [eax],al
    128f:	08 2e                	or     BYTE PTR [esi],ch
    1291:	01 3f                	add    DWORD PTR [edi],edi
    1293:	19 03                	sbb    DWORD PTR [ebx],eax
    1295:	0e                   	push   cs
    1296:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1298:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    129a:	27                   	daa    
    129b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    129e:	11 01                	adc    DWORD PTR [ecx],eax
    12a0:	12 06                	adc    al,BYTE PTR [esi]
    12a2:	40                   	inc    eax
    12a3:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12a9:	00 00                	add    BYTE PTR [eax],al
    12ab:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    12ae:	03 08                	add    ecx,DWORD PTR [eax]
    12b0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12b2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12b4:	49                   	dec    ecx
    12b5:	13 02                	adc    eax,DWORD PTR [edx]
    12b7:	18 00                	sbb    BYTE PTR [eax],al
    12b9:	00 0a                	add    BYTE PTR [edx],cl
    12bb:	34 00                	xor    al,0x0
    12bd:	03 0e                	add    ecx,DWORD PTR [esi]
    12bf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12c1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12c3:	49                   	dec    ecx
    12c4:	13 3f                	adc    edi,DWORD PTR [edi]
    12c6:	19 02                	sbb    DWORD PTR [edx],eax
    12c8:	18 00                	sbb    BYTE PTR [eax],al
    12ca:	00 00                	add    BYTE PTR [eax],al
    12cc:	01 11                	add    DWORD PTR [ecx],edx
    12ce:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12d4:	0e                   	push   cs
    12d5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12d7:	11 01                	adc    DWORD PTR [ecx],eax
    12d9:	12 06                	adc    al,BYTE PTR [esi]
    12db:	10 17                	adc    BYTE PTR [edi],dl
    12dd:	00 00                	add    BYTE PTR [eax],al
    12df:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    12e2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12e4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12e7:	0e                   	push   cs
    12e8:	00 00                	add    BYTE PTR [eax],al
    12ea:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    12ed:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12ef:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    12f2:	08 00                	or     BYTE PTR [eax],al
    12f4:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    12f7:	00 0b                	add    BYTE PTR [ebx],cl
    12f9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    12fc:	00 00                	add    BYTE PTR [eax],al
    12fe:	05 16 00 03 0e       	add    eax,0xe030016
    1303:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1305:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1307:	49                   	dec    ecx
    1308:	13 00                	adc    eax,DWORD PTR [eax]
    130a:	00 06                	add    BYTE PTR [esi],al
    130c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1310:	00 00                	add    BYTE PTR [eax],al
    1312:	07                   	pop    es
    1313:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1316:	19 03                	sbb    DWORD PTR [ebx],eax
    1318:	0e                   	push   cs
    1319:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    131b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    131d:	27                   	daa    
    131e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1321:	11 01                	adc    DWORD PTR [ecx],eax
    1323:	12 06                	adc    al,BYTE PTR [esi]
    1325:	40                   	inc    eax
    1326:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    132c:	00 00                	add    BYTE PTR [eax],al
    132e:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1334:	0b 3b                	or     edi,DWORD PTR [ebx]
    1336:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1339:	02 18                	add    bl,BYTE PTR [eax]
    133b:	00 00                	add    BYTE PTR [eax],al
    133d:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1340:	03 08                	add    ecx,DWORD PTR [eax]
    1342:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1344:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1346:	49                   	dec    ecx
    1347:	13 02                	adc    eax,DWORD PTR [edx]
    1349:	18 00                	sbb    BYTE PTR [eax],al
    134b:	00 0a                	add    BYTE PTR [edx],cl
    134d:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1350:	19 03                	sbb    DWORD PTR [ebx],eax
    1352:	0e                   	push   cs
    1353:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1355:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1357:	27                   	daa    
    1358:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    135b:	11 01                	adc    DWORD PTR [ecx],eax
    135d:	12 06                	adc    al,BYTE PTR [esi]
    135f:	40                   	inc    eax
    1360:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1366:	00 00                	add    BYTE PTR [eax],al
    1368:	0b 05 00 03 0e 3a    	or     eax,DWORD PTR ds:0x3a0e0300
    136e:	0b 3b                	or     edi,DWORD PTR [ebx]
    1370:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1373:	02 18                	add    bl,BYTE PTR [eax]
    1375:	00 00                	add    BYTE PTR [eax],al
    1377:	0c 34                	or     al,0x34
    1379:	00 03                	add    BYTE PTR [ebx],al
    137b:	0e                   	push   cs
    137c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    137e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1380:	49                   	dec    ecx
    1381:	13 3f                	adc    edi,DWORD PTR [edi]
    1383:	19 02                	sbb    DWORD PTR [edx],eax
    1385:	18 00                	sbb    BYTE PTR [eax],al
    1387:	00 00                	add    BYTE PTR [eax],al
    1389:	01 11                	add    DWORD PTR [ecx],edx
    138b:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1391:	0e                   	push   cs
    1392:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1394:	11 01                	adc    DWORD PTR [ecx],eax
    1396:	12 06                	adc    al,BYTE PTR [esi]
    1398:	10 17                	adc    BYTE PTR [edi],dl
    139a:	00 00                	add    BYTE PTR [eax],al
    139c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    139f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    13a1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    13a4:	08 00                	or     BYTE PTR [eax],al
    13a6:	00 03                	add    BYTE PTR [ebx],al
    13a8:	16                   	push   ss
    13a9:	00 03                	add    BYTE PTR [ebx],al
    13ab:	0e                   	push   cs
    13ac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13ae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13b0:	49                   	dec    ecx
    13b1:	13 00                	adc    eax,DWORD PTR [eax]
    13b3:	00 04 24             	add    BYTE PTR [esp],al
    13b6:	00 0b                	add    BYTE PTR [ebx],cl
    13b8:	0b 3e                	or     edi,DWORD PTR [esi]
    13ba:	0b 03                	or     eax,DWORD PTR [ebx]
    13bc:	0e                   	push   cs
    13bd:	00 00                	add    BYTE PTR [eax],al
    13bf:	05 2e 01 3f 19       	add    eax,0x193f012e
    13c4:	03 0e                	add    ecx,DWORD PTR [esi]
    13c6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13c8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13ca:	27                   	daa    
    13cb:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13ce:	11 01                	adc    DWORD PTR [ecx],eax
    13d0:	12 06                	adc    al,BYTE PTR [esi]
    13d2:	40                   	inc    eax
    13d3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13d9:	00 00                	add    BYTE PTR [eax],al
    13db:	06                   	push   es
    13dc:	05 00 03 08 3a       	add    eax,0x3a080300
    13e1:	0b 3b                	or     edi,DWORD PTR [ebx]
    13e3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13e6:	02 18                	add    bl,BYTE PTR [eax]
    13e8:	00 00                	add    BYTE PTR [eax],al
    13ea:	07                   	pop    es
    13eb:	0f 00 0b             	str    WORD PTR [ebx]
    13ee:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    13f1:	00 00                	add    BYTE PTR [eax],al
    13f3:	08 26                	or     BYTE PTR [esi],ah
    13f5:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    13f8:	00 00                	add    BYTE PTR [eax],al
    13fa:	09 2e                	or     DWORD PTR [esi],ebp
    13fc:	01 3f                	add    DWORD PTR [edi],edi
    13fe:	19 03                	sbb    DWORD PTR [ebx],eax
    1400:	0e                   	push   cs
    1401:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1403:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1405:	27                   	daa    
    1406:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1409:	11 01                	adc    DWORD PTR [ecx],eax
    140b:	12 06                	adc    al,BYTE PTR [esi]
    140d:	40                   	inc    eax
    140e:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
    1414:	00 01                	add    BYTE PTR [ecx],al
    1416:	11 01                	adc    DWORD PTR [ecx],eax
    1418:	25 0e 13 0b 03       	and    eax,0x30b130e
    141d:	0e                   	push   cs
    141e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1420:	11 01                	adc    DWORD PTR [ecx],eax
    1422:	12 06                	adc    al,BYTE PTR [esi]
    1424:	10 17                	adc    BYTE PTR [edi],dl
    1426:	00 00                	add    BYTE PTR [eax],al
    1428:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    142b:	0b 0b                	or     ecx,DWORD PTR [ebx]
    142d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1430:	08 00                	or     BYTE PTR [eax],al
    1432:	00 03                	add    BYTE PTR [ebx],al
    1434:	16                   	push   ss
    1435:	00 03                	add    BYTE PTR [ebx],al
    1437:	0e                   	push   cs
    1438:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    143a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    143c:	49                   	dec    ecx
    143d:	13 00                	adc    eax,DWORD PTR [eax]
    143f:	00 04 24             	add    BYTE PTR [esp],al
    1442:	00 0b                	add    BYTE PTR [ebx],cl
    1444:	0b 3e                	or     edi,DWORD PTR [esi]
    1446:	0b 03                	or     eax,DWORD PTR [ebx]
    1448:	0e                   	push   cs
    1449:	00 00                	add    BYTE PTR [eax],al
    144b:	05 2e 01 3f 19       	add    eax,0x193f012e
    1450:	03 0e                	add    ecx,DWORD PTR [esi]
    1452:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1454:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1456:	27                   	daa    
    1457:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    145a:	11 01                	adc    DWORD PTR [ecx],eax
    145c:	12 06                	adc    al,BYTE PTR [esi]
    145e:	40                   	inc    eax
    145f:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1465:	00 00                	add    BYTE PTR [eax],al
    1467:	06                   	push   es
    1468:	05 00 03 08 3a       	add    eax,0x3a080300
    146d:	0b 3b                	or     edi,DWORD PTR [ebx]
    146f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1472:	02 18                	add    bl,BYTE PTR [eax]
    1474:	00 00                	add    BYTE PTR [eax],al
    1476:	07                   	pop    es
    1477:	34 00                	xor    al,0x0
    1479:	03 08                	add    ecx,DWORD PTR [eax]
    147b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    147d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    147f:	49                   	dec    ecx
    1480:	13 02                	adc    eax,DWORD PTR [edx]
    1482:	18 00                	sbb    BYTE PTR [eax],al
    1484:	00 08                	add    BYTE PTR [eax],cl
    1486:	0f 00 0b             	str    WORD PTR [ebx]
    1489:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    148c:	00 00                	add    BYTE PTR [eax],al
    148e:	09 26                	or     DWORD PTR [esi],esp
    1490:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1493:	00 00                	add    BYTE PTR [eax],al
    1495:	0a 2e                	or     ch,BYTE PTR [esi]
    1497:	01 3f                	add    DWORD PTR [edi],edi
    1499:	19 03                	sbb    DWORD PTR [ebx],eax
    149b:	0e                   	push   cs
    149c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    149e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14a0:	27                   	daa    
    14a1:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    14a4:	11 01                	adc    DWORD PTR [ecx],eax
    14a6:	12 06                	adc    al,BYTE PTR [esi]
    14a8:	40                   	inc    eax
    14a9:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    14af:	00 01                	add    BYTE PTR [ecx],al
    14b1:	11 01                	adc    DWORD PTR [ecx],eax
    14b3:	25 0e 13 0b 03       	and    eax,0x30b130e
    14b8:	0e                   	push   cs
    14b9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    14bb:	11 01                	adc    DWORD PTR [ecx],eax
    14bd:	12 06                	adc    al,BYTE PTR [esi]
    14bf:	10 17                	adc    BYTE PTR [edi],dl
    14c1:	00 00                	add    BYTE PTR [eax],al
    14c3:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    14c6:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14c8:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14cb:	08 00                	or     BYTE PTR [eax],al
    14cd:	00 03                	add    BYTE PTR [ebx],al
    14cf:	24 00                	and    al,0x0
    14d1:	0b 0b                	or     ecx,DWORD PTR [ebx]
    14d3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    14d6:	0e                   	push   cs
    14d7:	00 00                	add    BYTE PTR [eax],al
    14d9:	04 2e                	add    al,0x2e
    14db:	01 3f                	add    DWORD PTR [edi],edi
    14dd:	19 03                	sbb    DWORD PTR [ebx],eax
    14df:	0e                   	push   cs
    14e0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14e2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14e4:	27                   	daa    
    14e5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    14e8:	11 01                	adc    DWORD PTR [ecx],eax
    14ea:	12 06                	adc    al,BYTE PTR [esi]
    14ec:	40                   	inc    eax
    14ed:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    14f3:	00 00                	add    BYTE PTR [eax],al
    14f5:	05 05 00 03 0e       	add    eax,0xe030005
    14fa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    14fc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    14fe:	49                   	dec    ecx
    14ff:	13 02                	adc    eax,DWORD PTR [edx]
    1501:	18 00                	sbb    BYTE PTR [eax],al
    1503:	00 06                	add    BYTE PTR [esi],al
    1505:	34 00                	xor    al,0x0
    1507:	03 08                	add    ecx,DWORD PTR [eax]
    1509:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    150b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    150d:	49                   	dec    ecx
    150e:	13 02                	adc    eax,DWORD PTR [edx]
    1510:	18 00                	sbb    BYTE PTR [eax],al
    1512:	00 07                	add    BYTE PTR [edi],al
    1514:	34 00                	xor    al,0x0
    1516:	03 0e                	add    ecx,DWORD PTR [esi]
    1518:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    151a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    151c:	49                   	dec    ecx
    151d:	13 00                	adc    eax,DWORD PTR [eax]
    151f:	00 08                	add    BYTE PTR [eax],cl
    1521:	34 00                	xor    al,0x0
    1523:	03 08                	add    ecx,DWORD PTR [eax]
    1525:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1527:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1529:	49                   	dec    ecx
    152a:	13 00                	adc    eax,DWORD PTR [eax]
    152c:	00 09                	add    BYTE PTR [ecx],cl
    152e:	34 00                	xor    al,0x0
    1530:	03 0e                	add    ecx,DWORD PTR [esi]
    1532:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1534:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1536:	49                   	dec    ecx
    1537:	13 02                	adc    eax,DWORD PTR [edx]
    1539:	18 00                	sbb    BYTE PTR [eax],al
    153b:	00 0a                	add    BYTE PTR [edx],cl
    153d:	0f 00 0b             	str    WORD PTR [ebx]
    1540:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1543:	00 00                	add    BYTE PTR [eax],al
    1545:	0b 26                	or     esp,DWORD PTR [esi]
    1547:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    154a:	00 00                	add    BYTE PTR [eax],al
    154c:	00 01                	add    BYTE PTR [ecx],al
    154e:	11 01                	adc    DWORD PTR [ecx],eax
    1550:	25 0e 13 0b 03       	and    eax,0x30b130e
    1555:	0e                   	push   cs
    1556:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1558:	11 01                	adc    DWORD PTR [ecx],eax
    155a:	12 06                	adc    al,BYTE PTR [esi]
    155c:	10 17                	adc    BYTE PTR [edi],dl
    155e:	00 00                	add    BYTE PTR [eax],al
    1560:	02 2e                	add    ch,BYTE PTR [esi]
    1562:	01 3f                	add    DWORD PTR [edi],edi
    1564:	19 03                	sbb    DWORD PTR [ebx],eax
    1566:	0e                   	push   cs
    1567:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1569:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    156b:	27                   	daa    
    156c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    156f:	11 01                	adc    DWORD PTR [ecx],eax
    1571:	12 06                	adc    al,BYTE PTR [esi]
    1573:	40                   	inc    eax
    1574:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    157a:	00 00                	add    BYTE PTR [eax],al
    157c:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    1582:	0b 3b                	or     edi,DWORD PTR [ebx]
    1584:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1587:	02 18                	add    bl,BYTE PTR [eax]
    1589:	00 00                	add    BYTE PTR [eax],al
    158b:	04 0f                	add    al,0xf
    158d:	00 0b                	add    BYTE PTR [ebx],cl
    158f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1592:	00 00                	add    BYTE PTR [eax],al
    1594:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1599:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    159c:	0e                   	push   cs
    159d:	00 00                	add    BYTE PTR [eax],al
    159f:	06                   	push   es
    15a0:	24 00                	and    al,0x0
    15a2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15a4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15a7:	08 00                	or     BYTE PTR [eax],al
    15a9:	00 00                	add    BYTE PTR [eax],al
    15ab:	01 11                	add    DWORD PTR [ecx],edx
    15ad:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    15b3:	0e                   	push   cs
    15b4:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    15b6:	11 01                	adc    DWORD PTR [ecx],eax
    15b8:	12 06                	adc    al,BYTE PTR [esi]
    15ba:	10 17                	adc    BYTE PTR [edi],dl
    15bc:	00 00                	add    BYTE PTR [eax],al
    15be:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    15c1:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15c3:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15c6:	08 00                	or     BYTE PTR [eax],al
    15c8:	00 03                	add    BYTE PTR [ebx],al
    15ca:	24 00                	and    al,0x0
    15cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
    15ce:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    15d1:	0e                   	push   cs
    15d2:	00 00                	add    BYTE PTR [eax],al
    15d4:	04 2e                	add    al,0x2e
    15d6:	01 3f                	add    DWORD PTR [edi],edi
    15d8:	19 03                	sbb    DWORD PTR [ebx],eax
    15da:	0e                   	push   cs
    15db:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15dd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15df:	27                   	daa    
    15e0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    15e3:	11 01                	adc    DWORD PTR [ecx],eax
    15e5:	12 06                	adc    al,BYTE PTR [esi]
    15e7:	40                   	inc    eax
    15e8:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    15ee:	00 00                	add    BYTE PTR [eax],al
    15f0:	05 05 00 03 0e       	add    eax,0xe030005
    15f5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    15f7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    15f9:	49                   	dec    ecx
    15fa:	13 02                	adc    eax,DWORD PTR [edx]
    15fc:	18 00                	sbb    BYTE PTR [eax],al
    15fe:	00 06                	add    BYTE PTR [esi],al
    1600:	34 00                	xor    al,0x0
    1602:	03 08                	add    ecx,DWORD PTR [eax]
    1604:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1606:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1608:	49                   	dec    ecx
    1609:	13 02                	adc    eax,DWORD PTR [edx]
    160b:	18 00                	sbb    BYTE PTR [eax],al
    160d:	00 07                	add    BYTE PTR [edi],al
    160f:	34 00                	xor    al,0x0
    1611:	03 0e                	add    ecx,DWORD PTR [esi]
    1613:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1615:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1617:	49                   	dec    ecx
    1618:	13 00                	adc    eax,DWORD PTR [eax]
    161a:	00 08                	add    BYTE PTR [eax],cl
    161c:	34 00                	xor    al,0x0
    161e:	03 08                	add    ecx,DWORD PTR [eax]
    1620:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1622:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1624:	49                   	dec    ecx
    1625:	13 00                	adc    eax,DWORD PTR [eax]
    1627:	00 09                	add    BYTE PTR [ecx],cl
    1629:	0f 00 0b             	str    WORD PTR [ebx]
    162c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    162f:	00 00                	add    BYTE PTR [eax],al
    1631:	0a 26                	or     ah,BYTE PTR [esi]
    1633:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1636:	00 00                	add    BYTE PTR [eax],al
    1638:	00 01                	add    BYTE PTR [ecx],al
    163a:	11 01                	adc    DWORD PTR [ecx],eax
    163c:	25 0e 13 0b 03       	and    eax,0x30b130e
    1641:	0e                   	push   cs
    1642:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1644:	11 01                	adc    DWORD PTR [ecx],eax
    1646:	12 06                	adc    al,BYTE PTR [esi]
    1648:	10 17                	adc    BYTE PTR [edi],dl
    164a:	00 00                	add    BYTE PTR [eax],al
    164c:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    164f:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1651:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1654:	08 00                	or     BYTE PTR [eax],al
    1656:	00 03                	add    BYTE PTR [ebx],al
    1658:	24 00                	and    al,0x0
    165a:	0b 0b                	or     ecx,DWORD PTR [ebx]
    165c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    165f:	0e                   	push   cs
    1660:	00 00                	add    BYTE PTR [eax],al
    1662:	04 2e                	add    al,0x2e
    1664:	01 3f                	add    DWORD PTR [edi],edi
    1666:	19 03                	sbb    DWORD PTR [ebx],eax
    1668:	0e                   	push   cs
    1669:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    166b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    166d:	27                   	daa    
    166e:	19 11                	sbb    DWORD PTR [ecx],edx
    1670:	01 12                	add    DWORD PTR [edx],edx
    1672:	06                   	push   es
    1673:	40                   	inc    eax
    1674:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    167a:	00 00                	add    BYTE PTR [eax],al
    167c:	05 05 00 03 0e       	add    eax,0xe030005
    1681:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1683:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1685:	49                   	dec    ecx
    1686:	13 02                	adc    eax,DWORD PTR [edx]
    1688:	18 00                	sbb    BYTE PTR [eax],al
    168a:	00 06                	add    BYTE PTR [esi],al
    168c:	34 00                	xor    al,0x0
    168e:	03 08                	add    ecx,DWORD PTR [eax]
    1690:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1692:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1694:	49                   	dec    ecx
    1695:	13 02                	adc    eax,DWORD PTR [edx]
    1697:	18 00                	sbb    BYTE PTR [eax],al
    1699:	00 07                	add    BYTE PTR [edi],al
    169b:	0f 00 0b             	str    WORD PTR [ebx]
    169e:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    16a1:	00 00                	add    BYTE PTR [eax],al
    16a3:	08 2e                	or     BYTE PTR [esi],ch
    16a5:	01 3f                	add    DWORD PTR [edi],edi
    16a7:	19 03                	sbb    DWORD PTR [ebx],eax
    16a9:	0e                   	push   cs
    16aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16ae:	27                   	daa    
    16af:	19 11                	sbb    DWORD PTR [ecx],edx
    16b1:	01 12                	add    DWORD PTR [edx],edx
    16b3:	06                   	push   es
    16b4:	40                   	inc    eax
    16b5:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
    16bb:	00 01                	add    BYTE PTR [ecx],al
    16bd:	11 01                	adc    DWORD PTR [ecx],eax
    16bf:	25 0e 13 0b 03       	and    eax,0x30b130e
    16c4:	0e                   	push   cs
    16c5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    16c7:	11 01                	adc    DWORD PTR [ecx],eax
    16c9:	12 06                	adc    al,BYTE PTR [esi]
    16cb:	10 17                	adc    BYTE PTR [edi],dl
    16cd:	00 00                	add    BYTE PTR [eax],al
    16cf:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    16d2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    16d4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    16d7:	08 00                	or     BYTE PTR [eax],al
    16d9:	00 03                	add    BYTE PTR [ebx],al
    16db:	16                   	push   ss
    16dc:	00 03                	add    BYTE PTR [ebx],al
    16de:	0e                   	push   cs
    16df:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    16e1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    16e3:	49                   	dec    ecx
    16e4:	13 00                	adc    eax,DWORD PTR [eax]
    16e6:	00 04 24             	add    BYTE PTR [esp],al
    16e9:	00 0b                	add    BYTE PTR [ebx],cl
    16eb:	0b 3e                	or     edi,DWORD PTR [esi]
    16ed:	0b 03                	or     eax,DWORD PTR [ebx]
    16ef:	0e                   	push   cs
    16f0:	00 00                	add    BYTE PTR [eax],al
    16f2:	05 0f 00 0b 0b       	add    eax,0xb0b000f
    16f7:	49                   	dec    ecx
    16f8:	13 00                	adc    eax,DWORD PTR [eax]
    16fa:	00 06                	add    BYTE PTR [esi],al
    16fc:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1700:	00 00                	add    BYTE PTR [eax],al
    1702:	07                   	pop    es
    1703:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1706:	19 03                	sbb    DWORD PTR [ebx],eax
    1708:	0e                   	push   cs
    1709:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    170b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    170d:	27                   	daa    
    170e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1711:	11 01                	adc    DWORD PTR [ecx],eax
    1713:	12 06                	adc    al,BYTE PTR [esi]
    1715:	40                   	inc    eax
    1716:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    171c:	00 00                	add    BYTE PTR [eax],al
    171e:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
    1724:	0b 3b                	or     edi,DWORD PTR [ebx]
    1726:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1729:	02 18                	add    bl,BYTE PTR [eax]
    172b:	00 00                	add    BYTE PTR [eax],al
    172d:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
    1733:	0b 3b                	or     edi,DWORD PTR [ebx]
    1735:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1738:	02 18                	add    bl,BYTE PTR [eax]
    173a:	00 00                	add    BYTE PTR [eax],al
    173c:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
    173f:	03 0e                	add    ecx,DWORD PTR [esi]
    1741:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1743:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1745:	49                   	dec    ecx
    1746:	13 02                	adc    eax,DWORD PTR [edx]
    1748:	18 00                	sbb    BYTE PTR [eax],al
    174a:	00 0b                	add    BYTE PTR [ebx],cl
    174c:	34 00                	xor    al,0x0
    174e:	03 0e                	add    ecx,DWORD PTR [esi]
    1750:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1752:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1754:	49                   	dec    ecx
    1755:	13 3f                	adc    edi,DWORD PTR [edi]
    1757:	19 02                	sbb    DWORD PTR [edx],eax
    1759:	18 00                	sbb    BYTE PTR [eax],al
    175b:	00 00                	add    BYTE PTR [eax],al
    175d:	01 11                	add    DWORD PTR [ecx],edx
    175f:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1765:	0e                   	push   cs
    1766:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1768:	11 01                	adc    DWORD PTR [ecx],eax
    176a:	12 06                	adc    al,BYTE PTR [esi]
    176c:	10 17                	adc    BYTE PTR [edi],dl
    176e:	00 00                	add    BYTE PTR [eax],al
    1770:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1773:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1775:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1778:	08 00                	or     BYTE PTR [eax],al
    177a:	00 03                	add    BYTE PTR [ebx],al
    177c:	24 00                	and    al,0x0
    177e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1780:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1783:	0e                   	push   cs
    1784:	00 00                	add    BYTE PTR [eax],al
    1786:	04 0f                	add    al,0xf
    1788:	00 0b                	add    BYTE PTR [ebx],cl
    178a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    178d:	00 00                	add    BYTE PTR [eax],al
    178f:	05 2e 01 3f 19       	add    eax,0x193f012e
    1794:	03 0e                	add    ecx,DWORD PTR [esi]
    1796:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1798:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    179a:	27                   	daa    
    179b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    179e:	11 01                	adc    DWORD PTR [ecx],eax
    17a0:	12 06                	adc    al,BYTE PTR [esi]
    17a2:	40                   	inc    eax
    17a3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    17a9:	00 00                	add    BYTE PTR [eax],al
    17ab:	06                   	push   es
    17ac:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    17b1:	0b 3b                	or     edi,DWORD PTR [ebx]
    17b3:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    17b6:	02 18                	add    bl,BYTE PTR [eax]
    17b8:	00 00                	add    BYTE PTR [eax],al
    17ba:	07                   	pop    es
    17bb:	34 00                	xor    al,0x0
    17bd:	03 08                	add    ecx,DWORD PTR [eax]
    17bf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17c1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17c3:	49                   	dec    ecx
    17c4:	13 02                	adc    eax,DWORD PTR [edx]
    17c6:	18 00                	sbb    BYTE PTR [eax],al
    17c8:	00 08                	add    BYTE PTR [eax],cl
    17ca:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    17ce:	00 00                	add    BYTE PTR [eax],al
    17d0:	09 2e                	or     DWORD PTR [esi],ebp
    17d2:	01 3f                	add    DWORD PTR [edi],edi
    17d4:	19 03                	sbb    DWORD PTR [ebx],eax
    17d6:	0e                   	push   cs
    17d7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    17d9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    17db:	27                   	daa    
    17dc:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    17df:	11 01                	adc    DWORD PTR [ecx],eax
    17e1:	12 06                	adc    al,BYTE PTR [esi]
    17e3:	40                   	inc    eax
    17e4:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    17ea:	00 00                	add    BYTE PTR [eax],al
    17ec:	0a 01                	or     al,BYTE PTR [ecx]
    17ee:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    17f1:	01 13                	add    DWORD PTR [ebx],edx
    17f3:	00 00                	add    BYTE PTR [eax],al
    17f5:	0b 21                	or     esp,DWORD PTR [ecx]
    17f7:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    17fa:	2f                   	das    
    17fb:	0b 00                	or     eax,DWORD PTR [eax]
    17fd:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1800:	00 03                	add    BYTE PTR [ebx],al
    1802:	0e                   	push   cs
    1803:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1805:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1807:	49                   	dec    ecx
    1808:	13 02                	adc    eax,DWORD PTR [edx]
    180a:	18 00                	sbb    BYTE PTR [eax],al
    180c:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1812:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1814:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1816:	49                   	dec    ecx
    1817:	13 3f                	adc    edi,DWORD PTR [edi]
    1819:	19 02                	sbb    DWORD PTR [edx],eax
    181b:	18 00                	sbb    BYTE PTR [eax],al
    181d:	00 00                	add    BYTE PTR [eax],al
    181f:	01 11                	add    DWORD PTR [ecx],edx
    1821:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1827:	0e                   	push   cs
    1828:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    182a:	11 01                	adc    DWORD PTR [ecx],eax
    182c:	12 06                	adc    al,BYTE PTR [esi]
    182e:	10 17                	adc    BYTE PTR [edi],dl
    1830:	00 00                	add    BYTE PTR [eax],al
    1832:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1835:	03 0e                	add    ecx,DWORD PTR [esi]
    1837:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1839:	49                   	dec    ecx
    183a:	13 3a                	adc    edi,DWORD PTR [edx]
    183c:	0b 3b                	or     edi,DWORD PTR [ebx]
    183e:	0b 01                	or     eax,DWORD PTR [ecx]
    1840:	13 00                	adc    eax,DWORD PTR [eax]
    1842:	00 03                	add    BYTE PTR [ebx],al
    1844:	28 00                	sub    BYTE PTR [eax],al
    1846:	03 0e                	add    ecx,DWORD PTR [esi]
    1848:	1c 0b                	sbb    al,0xb
    184a:	00 00                	add    BYTE PTR [eax],al
    184c:	04 28                	add    al,0x28
    184e:	00 03                	add    BYTE PTR [ebx],al
    1850:	0e                   	push   cs
    1851:	1c 05                	sbb    al,0x5
    1853:	00 00                	add    BYTE PTR [eax],al
    1855:	05 24 00 0b 0b       	add    eax,0xb0b0024
    185a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    185d:	0e                   	push   cs
    185e:	00 00                	add    BYTE PTR [eax],al
    1860:	06                   	push   es
    1861:	24 00                	and    al,0x0
    1863:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1865:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1868:	08 00                	or     BYTE PTR [eax],al
    186a:	00 07                	add    BYTE PTR [edi],al
    186c:	0f 00 0b             	str    WORD PTR [ebx]
    186f:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1872:	00 00                	add    BYTE PTR [eax],al
    1874:	08 16                	or     BYTE PTR [esi],dl
    1876:	00 03                	add    BYTE PTR [ebx],al
    1878:	0e                   	push   cs
    1879:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    187b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    187d:	49                   	dec    ecx
    187e:	13 00                	adc    eax,DWORD PTR [eax]
    1880:	00 09                	add    BYTE PTR [ecx],cl
    1882:	13 01                	adc    eax,DWORD PTR [ecx]
    1884:	03 08                	add    ecx,DWORD PTR [eax]
    1886:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1888:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    188a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    188c:	01 13                	add    DWORD PTR [ebx],edx
    188e:	00 00                	add    BYTE PTR [eax],al
    1890:	0a 0d 00 03 0e 3a    	or     cl,BYTE PTR ds:0x3a0e0300
    1896:	0b 3b                	or     edi,DWORD PTR [ebx]
    1898:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    189b:	38 0b                	cmp    BYTE PTR [ebx],cl
    189d:	00 00                	add    BYTE PTR [eax],al
    189f:	0b 26                	or     esp,DWORD PTR [esi]
    18a1:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    18a4:	00 00                	add    BYTE PTR [eax],al
    18a6:	0c 2e                	or     al,0x2e
    18a8:	01 3f                	add    DWORD PTR [edi],edi
    18aa:	19 03                	sbb    DWORD PTR [ebx],eax
    18ac:	0e                   	push   cs
    18ad:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18af:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18b1:	49                   	dec    ecx
    18b2:	13 11                	adc    edx,DWORD PTR [ecx]
    18b4:	01 12                	add    DWORD PTR [edx],edx
    18b6:	06                   	push   es
    18b7:	40                   	inc    eax
    18b8:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    18be:	00 00                	add    BYTE PTR [eax],al
    18c0:	0d 34 00 03 0e       	or     eax,0xe030034
    18c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18c9:	49                   	dec    ecx
    18ca:	13 02                	adc    eax,DWORD PTR [edx]
    18cc:	18 00                	sbb    BYTE PTR [eax],al
    18ce:	00 0e                	add    BYTE PTR [esi],cl
    18d0:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    18d3:	19 03                	sbb    DWORD PTR [ebx],eax
    18d5:	0e                   	push   cs
    18d6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18d8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18da:	27                   	daa    
    18db:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    18de:	11 01                	adc    DWORD PTR [ecx],eax
    18e0:	12 06                	adc    al,BYTE PTR [esi]
    18e2:	40                   	inc    eax
    18e3:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    18e9:	00 00                	add    BYTE PTR [eax],al
    18eb:	0f 05                	syscall 
    18ed:	00 03                	add    BYTE PTR [ebx],al
    18ef:	0e                   	push   cs
    18f0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    18f2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    18f4:	49                   	dec    ecx
    18f5:	13 02                	adc    eax,DWORD PTR [edx]
    18f7:	18 00                	sbb    BYTE PTR [eax],al
    18f9:	00 10                	add    BYTE PTR [eax],dl
    18fb:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    18fe:	19 03                	sbb    DWORD PTR [ebx],eax
    1900:	0e                   	push   cs
    1901:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1903:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1905:	27                   	daa    
    1906:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1909:	11 01                	adc    DWORD PTR [ecx],eax
    190b:	12 06                	adc    al,BYTE PTR [esi]
    190d:	40                   	inc    eax
    190e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    1914:	00 00                	add    BYTE PTR [eax],al
    1916:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    1919:	03 08                	add    ecx,DWORD PTR [eax]
    191b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    191d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    191f:	49                   	dec    ecx
    1920:	13 02                	adc    eax,DWORD PTR [edx]
    1922:	18 00                	sbb    BYTE PTR [eax],al
    1924:	00 12                	add    BYTE PTR [edx],dl
    1926:	34 00                	xor    al,0x0
    1928:	03 0e                	add    ecx,DWORD PTR [esi]
    192a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    192c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    192e:	49                   	dec    ecx
    192f:	13 3f                	adc    edi,DWORD PTR [edi]
    1931:	19 02                	sbb    DWORD PTR [edx],eax
    1933:	18 00                	sbb    BYTE PTR [eax],al
    1935:	00 13                	add    BYTE PTR [ebx],dl
    1937:	01 01                	add    DWORD PTR [ecx],eax
    1939:	49                   	dec    ecx
    193a:	13 01                	adc    eax,DWORD PTR [ecx]
    193c:	13 00                	adc    eax,DWORD PTR [eax]
    193e:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    1941:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    1944:	2f                   	das    
    1945:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 9f 70 00 00 00    	add    BYTE PTR [edi+0x70],bl
	...
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	0d 01 00 00 04       	or     eax,0x4000001
  2b:	00 00                	add    BYTE PTR [eax],al
  2d:	00 00                	add    BYTE PTR [eax],al
  2f:	00 70 00             	add    BYTE PTR [eax+0x0],dh
  32:	00 9f aa 00 00 00    	add    BYTE PTR [edi+0xaa],bl
	...
  40:	1c 00                	sbb    al,0x0
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	59                   	pop    ecx
  47:	02 00                	add    al,BYTE PTR [eax]
  49:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  4c:	00 00                	add    BYTE PTR [eax],al
  4e:	00 00                	add    BYTE PTR [eax],al
  50:	1c 01                	sbb    al,0x1
  52:	00 9f 2e 01 00 00    	add    BYTE PTR [edi+0x12e],bl
	...
  60:	1c 00                	sbb    al,0x0
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	99                   	cdq    
  67:	03 00                	add    eax,DWORD PTR [eax]
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	4c                   	dec    esp
  71:	02 00                	add    al,BYTE PTR [eax]
  73:	9f                   	lahf   
  74:	65 02 00             	add    al,BYTE PTR gs:[eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	85 05 00 00 04 00    	test   DWORD PTR ds:0x40000,eax
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	b4 04                	mov    ah,0x4
  92:	00 9f 6e 01 00 00    	add    BYTE PTR [edi+0x16e],bl
	...
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	37                   	aaa    
  a7:	07                   	pop    es
  a8:	00 00                	add    BYTE PTR [eax],al
  aa:	04 00                	add    al,0x0
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	24 06                	and    al,0x6
  b2:	00 9f dd 02 00 00    	add    BYTE PTR [edi+0x2dd],bl
	...
  c0:	1c 00                	sbb    al,0x0
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	49                   	dec    ecx
  c7:	0a 00                	or     al,BYTE PTR [eax]
  c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	04 09                	add    al,0x9
  d2:	00 9f b8 08 00 00    	add    BYTE PTR [edi+0x8b8],bl
	...
  e0:	1c 00                	sbb    al,0x0
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	8a 13                	mov    dl,BYTE PTR [ebx]
  e8:	00 00                	add    BYTE PTR [eax],al
  ea:	04 00                	add    al,0x0
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	bc 11 00 9f 69       	mov    esp,0x699f0011
  f5:	01 00                	add    DWORD PTR [eax],eax
	...
  ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	25 16 00 00 04       	and    eax,0x4000016
 10b:	00 00                	add    BYTE PTR [eax],al
 10d:	00 00                	add    BYTE PTR [eax],al
 10f:	00 28                	add    BYTE PTR [eax],ch
 111:	13 00                	adc    eax,DWORD PTR [eax]
 113:	9f                   	lahf   
 114:	67 0d 00 00 00 00    	addr16 or eax,0x0
 11a:	00 00                	add    BYTE PTR [eax],al
 11c:	00 00                	add    BYTE PTR [eax],al
 11e:	00 00                	add    BYTE PTR [eax],al
 120:	1c 00                	sbb    al,0x0
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	ea 21 00 00 04 00 00 	jmp    0x0:0x4000021
 12d:	00 00                	add    BYTE PTR [eax],al
 12f:	00 90 20 00 9f 73    	add    BYTE PTR [eax+0x739f0020],dl
	...
 13d:	00 00                	add    BYTE PTR [eax],al
 13f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	82                   	(bad)  
 147:	24 00                	and    al,0x0
 149:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	04 21                	add    al,0x21
 152:	00 9f c2 06 00 00    	add    BYTE PTR [edi+0x6c2],bl
	...
 160:	1c 00                	sbb    al,0x0
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	8a 29                	mov    ch,BYTE PTR [ecx]
 168:	00 00                	add    BYTE PTR [eax],al
 16a:	04 00                	add    al,0x0
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	c8 27 00 9f          	enter  0x27,0x9f
 174:	bb 01 00 00 00       	mov    ebx,0x1
 179:	00 00                	add    BYTE PTR [eax],al
 17b:	00 00                	add    BYTE PTR [eax],al
 17d:	00 00                	add    BYTE PTR [eax],al
 17f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	76 2b                	jbe    1b3 <sysEnter_Vector-0x12fe4d>
 188:	00 00                	add    BYTE PTR [eax],al
 18a:	04 00                	add    al,0x0
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	84 29                	test   BYTE PTR [ecx],ch
 192:	00 9f e7 00 00 00    	add    BYTE PTR [edi+0xe7],bl
	...
 1a0:	1c 00                	sbb    al,0x0
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	1a 2d 00 00 04 00    	sbb    ch,BYTE PTR ds:0x40000
 1ac:	00 00                	add    BYTE PTR [eax],al
 1ae:	00 00                	add    BYTE PTR [eax],al
 1b0:	6c                   	ins    BYTE PTR es:[edi],dx
 1b1:	2a 00                	sub    al,BYTE PTR [eax]
 1b3:	9f                   	lahf   
 1b4:	57                   	push   edi
	...
 1bd:	00 00                	add    BYTE PTR [eax],al
 1bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	2f                   	das    
 1c7:	2f                   	das    
 1c8:	00 00                	add    BYTE PTR [eax],al
 1ca:	04 00                	add    al,0x0
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	c4 2a                	les    ebp,FWORD PTR [edx]
 1d2:	00 9f c4 05 00 00    	add    BYTE PTR [edi+0x5c4],bl
	...
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	bc 34 00 00 04       	mov    esp,0x4000034
 1eb:	00 00                	add    BYTE PTR [eax],al
 1ed:	00 00                	add    BYTE PTR [eax],al
 1ef:	00 88 30 00 9f 4b    	add    BYTE PTR [eax+0x4b9f0030],cl
 1f5:	07                   	pop    es
	...
 1fe:	00 00                	add    BYTE PTR [eax],al
 200:	1c 00                	sbb    al,0x0
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	7d 38                	jge    240 <sysEnter_Vector-0x12fdc0>
 208:	00 00                	add    BYTE PTR [eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	d4 37                	aam    0x37
 212:	00 9f 84 00 00 00    	add    BYTE PTR [edi+0x84],bl
	...
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	5d                   	pop    ebp
 227:	39 00                	cmp    DWORD PTR [eax],eax
 229:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	58                   	pop    eax
 231:	38 00                	cmp    BYTE PTR [eax],al
 233:	9f                   	lahf   
 234:	11 01                	adc    DWORD PTR [ecx],eax
	...
 23e:	00 00                	add    BYTE PTR [eax],al
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	1d 3b 00 00 04       	sbb    eax,0x400003b
 24b:	00 00                	add    BYTE PTR [eax],al
 24d:	00 00                	add    BYTE PTR [eax],al
 24f:	00 6c 39 00          	add    BYTE PTR [ecx+edi*1+0x0],ch
 253:	9f                   	lahf   
 254:	7b 00                	jnp    256 <sysEnter_Vector-0x12fdaa>
	...
 25e:	00 00                	add    BYTE PTR [eax],al
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	b7 3c                	mov    bh,0x3c
 268:	00 00                	add    BYTE PTR [eax],al
 26a:	04 00                	add    al,0x0
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	e8 39 00 9f c7       	call   c79f02ae <tmbuf+0x289e842e>
	...
 27d:	00 00                	add    BYTE PTR [eax],al
 27f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	e2 3d                	loop   2c5 <sysEnter_Vector-0x12fd3b>
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	b0 3a                	mov    al,0x3a
 292:	00 9f 89 00 00 00    	add    BYTE PTR [edi+0x89],bl
	...
 2a0:	1c 00                	sbb    al,0x0
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	28 3f                	sub    BYTE PTR [edi],bh
 2a8:	00 00                	add    BYTE PTR [eax],al
 2aa:	04 00                	add    al,0x0
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	3c 3b                	cmp    al,0x3b
 2b2:	00 9f a2 00 00 00    	add    BYTE PTR [edi+0xa2],bl
	...
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	00 41 00             	add    BYTE PTR [ecx+0x0],al
 2c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2cc:	00 00                	add    BYTE PTR [eax],al
 2ce:	00 00                	add    BYTE PTR [eax],al
 2d0:	e0 3b                	loopne 30d <sysEnter_Vector-0x12fcf3>
 2d2:	00 9f ce 00 00 00    	add    BYTE PTR [edi+0xce],bl
	...
 2e0:	1c 00                	sbb    al,0x0
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	e2 41                	loop   329 <sysEnter_Vector-0x12fcd7>
 2e8:	00 00                	add    BYTE PTR [eax],al
 2ea:	04 00                	add    al,0x0
 2ec:	00 00                	add    BYTE PTR [eax],al
 2ee:	00 00                	add    BYTE PTR [eax],al
 2f0:	b0 3c                	mov    al,0x3c
 2f2:	00 9f 8c 00 00 00    	add    BYTE PTR [edi+0x8c],bl
	...
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	d6                   	(bad)  
 307:	42                   	inc    edx
 308:	00 00                	add    BYTE PTR [eax],al
 30a:	04 00                	add    al,0x0
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	3c 3d                	cmp    al,0x3d
 312:	00 9f 7d 01 00 00    	add    BYTE PTR [edi+0x17d],bl
	...
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	db 43 00             	fild   DWORD PTR [ebx+0x0]
 329:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	bc 3e 00 9f 1d       	mov    esp,0x1d9f003e
	...
 33d:	00 00                	add    BYTE PTR [eax],al
 33f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	4b                   	dec    ebx
 347:	44                   	inc    esp
 348:	00 00                	add    BYTE PTR [eax],al
 34a:	04 00                	add    al,0x0
 34c:	00 00                	add    BYTE PTR [eax],al
 34e:	00 00                	add    BYTE PTR [eax],al
 350:	dc 3e                	fdivr  QWORD PTR [esi]
 352:	00 9f 9c 01 00 00    	add    BYTE PTR [edi+0x19c],bl
	...
 360:	1c 00                	sbb    al,0x0
 362:	00 00                	add    BYTE PTR [eax],al
 364:	02 00                	add    al,BYTE PTR [eax]
 366:	4e                   	dec    esi
 367:	45                   	inc    ebp
 368:	00 00                	add    BYTE PTR [eax],al
 36a:	04 00                	add    al,0x0
 36c:	00 00                	add    BYTE PTR [eax],al
 36e:	00 00                	add    BYTE PTR [eax],al
 370:	78 40                	js     3b2 <sysEnter_Vector-0x12fc4e>
 372:	00 9f b6 00 00 00    	add    BYTE PTR [edi+0xb6],bl
	...
 380:	1c 00                	sbb    al,0x0
 382:	00 00                	add    BYTE PTR [eax],al
 384:	02 00                	add    al,BYTE PTR [eax]
 386:	12 46 00             	adc    al,BYTE PTR [esi+0x0]
 389:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 38c:	00 00                	add    BYTE PTR [eax],al
 38e:	00 00                	add    BYTE PTR [eax],al
 390:	30 41 00             	xor    BYTE PTR [ecx+0x0],al
 393:	9f                   	lahf   
 394:	44                   	inc    esp
 395:	01 00                	add    DWORD PTR [eax],eax
	...
 39f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 3a2:	00 00                	add    BYTE PTR [eax],al
 3a4:	02 00                	add    al,BYTE PTR [eax]
 3a6:	dc 47 00             	fadd   QWORD PTR [edi+0x0]
 3a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 3ac:	00 00                	add    BYTE PTR [eax],al
 3ae:	00 00                	add    BYTE PTR [eax],al
 3b0:	74 42                	je     3f4 <sysEnter_Vector-0x12fc0c>
 3b2:	00 9f 29 01 00 00    	add    BYTE PTR [edi+0x129],bl
	...
 3c0:	1c 00                	sbb    al,0x0
 3c2:	00 00                	add    BYTE PTR [eax],al
 3c4:	02 00                	add    al,BYTE PTR [eax]
 3c6:	90                   	nop
 3c7:	49                   	dec    ecx
 3c8:	00 00                	add    BYTE PTR [eax],al
 3ca:	04 00                	add    al,0x0
 3cc:	00 00                	add    BYTE PTR [eax],al
 3ce:	00 00                	add    BYTE PTR [eax],al
 3d0:	a0 43 00 9f 0e       	mov    al,ds:0xe9f0043
 3d5:	0d 00 00 00 00       	or     eax,0x0
 3da:	00 00                	add    BYTE PTR [eax],al
 3dc:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	75 00                	jne    2 <sysEnter_Vector-0x12fffe>
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	53                   	push   ebx
       7:	00 00                	add    BYTE PTR [eax],al
       9:	00 01                	add    BYTE PTR [ecx],al
       b:	01 fb                	add    ebx,edi
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 00                	add    BYTE PTR [eax],al
      44:	73 74                	jae    ba <sysEnter_Vector-0x12ff46>
      46:	72 63                	jb     ab <sysEnter_Vector-0x12ff55>
      48:	68 72 2e 63 00       	push   0x632e72
      4d:	01 00                	add    DWORD PTR [eax],eax
      4f:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
      52:	6d                   	ins    DWORD PTR es:[edi],dx
      53:	6d                   	ins    DWORD PTR es:[edi],dx
      54:	6f                   	outs   dx,DWORD PTR ds:[esi]
      55:	6e                   	outs   dx,BYTE PTR ds:[esi]
      56:	2e                   	cs
      57:	68 00 02 00 00       	push   0x200
      5c:	00 00                	add    BYTE PTR [eax],al
      5e:	05 02 00 00 00       	add    eax,0x2
      63:	9f                   	lahf   
      64:	03 09                	add    ecx,DWORD PTR [ecx]
      66:	01 c9                	add    ecx,ecx
      68:	2f                   	das    
      69:	f3 72 cb             	repz jb 37 <sysEnter_Vector-0x12ffc9>
      6c:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      71:	72 cb                	jb     3e <sysEnter_Vector-0x12ffc2>
      73:	3d 02 02 00 01       	cmp    eax,0x1000202
      78:	01 a6 00 00 00 02    	add    DWORD PTR [esi+0x2000000],esp
      7e:	00 54 00 00          	add    BYTE PTR [eax+eax*1+0x0],dl
      82:	00 01                	add    BYTE PTR [ecx],al
      84:	01 fb                	add    ebx,edi
      86:	0e                   	push   cs
      87:	0d 00 01 01 01       	or     eax,0x1010100
      8c:	01 00                	add    DWORD PTR [eax],eax
      8e:	00 00                	add    BYTE PTR [eax],al
      90:	01 00                	add    DWORD PTR [eax],eax
      92:	00 01                	add    BYTE PTR [ecx],al
      94:	2e                   	cs
      95:	2e                   	cs
      96:	2f                   	das    
      97:	2e                   	cs
      98:	2e                   	cs
      99:	2f                   	das    
      9a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      9e:	6a 2f                	push   0x2f
      a0:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      a3:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      aa:	63 2f                	arpl   WORD PTR [edi],bp
      ac:	73 74                	jae    122 <sysEnter_Vector-0x12fede>
      ae:	72 69                	jb     119 <sysEnter_Vector-0x12fee7>
      b0:	6e                   	outs   dx,BYTE PTR ds:[esi]
      b1:	67 73 00             	addr16 jae b4 <sysEnter_Vector-0x12ff4c>
      b4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      bb:	00 00                	add    BYTE PTR [eax],al
      bd:	73 74                	jae    133 <sysEnter_Vector-0x12fecd>
      bf:	72 63                	jb     124 <sysEnter_Vector-0x12fedc>
      c1:	73 70                	jae    133 <sysEnter_Vector-0x12fecd>
      c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
      c4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
      c7:	01 00                	add    DWORD PTR [eax],eax
      c9:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
      cc:	6d                   	ins    DWORD PTR es:[edi],dx
      cd:	6d                   	ins    DWORD PTR es:[edi],dx
      ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
      cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
      d0:	2e                   	cs
      d1:	68 00 02 00 00       	push   0x200
      d6:	00 00                	add    BYTE PTR [eax],al
      d8:	05 02 70 00 00       	add    eax,0x7002
      dd:	9f                   	lahf   
      de:	03 26                	add    esp,DWORD PTR [esi]
      e0:	01 e7                	add    edi,esp
      e2:	9f                   	lahf   
      e3:	59                   	pop    ecx
      e4:	75 00                	jne    e6 <sysEnter_Vector-0x12ff1a>
      e6:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
      e9:	aa                   	stos   BYTE PTR es:[edi],al
      ea:	00 02                	add    BYTE PTR [edx],al
      ec:	04 01                	add    al,0x1
      ee:	06                   	push   es
      ef:	3c 00                	cmp    al,0x0
      f1:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
      f4:	06                   	push   es
      f5:	73 00                	jae    f7 <sysEnter_Vector-0x12ff09>
      f7:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
      fa:	06                   	push   es
      fb:	82                   	(bad)  
      fc:	06                   	push   es
      fd:	6d                   	ins    DWORD PTR es:[edi],dx
      fe:	91                   	xchg   ecx,eax
      ff:	4d                   	dec    ebp
     100:	e7 9f                	out    0x9f,eax
     102:	59                   	pop    ecx
     103:	75 00                	jne    105 <sysEnter_Vector-0x12fefb>
     105:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     108:	aa                   	stos   BYTE PTR es:[edi],al
     109:	00 02                	add    BYTE PTR [edx],al
     10b:	04 01                	add    al,0x1
     10d:	06                   	push   es
     10e:	3c 00                	cmp    al,0x0
     110:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     113:	06                   	push   es
     114:	73 00                	jae    116 <sysEnter_Vector-0x12feea>
     116:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     119:	06                   	push   es
     11a:	82                   	(bad)  
     11b:	06                   	push   es
     11c:	6d                   	ins    DWORD PTR es:[edi],dx
     11d:	91                   	xchg   ecx,eax
     11e:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     121:	01 01                	add    DWORD PTR [ecx],eax
     123:	87 00                	xchg   DWORD PTR [eax],eax
     125:	00 00                	add    BYTE PTR [eax],al
     127:	02 00                	add    al,BYTE PTR [eax]
     129:	53                   	push   ebx
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	00 01                	add    BYTE PTR [ecx],al
     12e:	01 fb                	add    ebx,edi
     130:	0e                   	push   cs
     131:	0d 00 01 01 01       	or     eax,0x1010100
     136:	01 00                	add    DWORD PTR [eax],eax
     138:	00 00                	add    BYTE PTR [eax],al
     13a:	01 00                	add    DWORD PTR [eax],eax
     13c:	00 01                	add    BYTE PTR [ecx],al
     13e:	2e                   	cs
     13f:	2e                   	cs
     140:	2f                   	das    
     141:	2e                   	cs
     142:	2e                   	cs
     143:	2f                   	das    
     144:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     148:	6a 2f                	push   0x2f
     14a:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     14d:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     154:	63 2f                	arpl   WORD PTR [edi],bp
     156:	73 74                	jae    1cc <sysEnter_Vector-0x12fe34>
     158:	72 69                	jb     1c3 <sysEnter_Vector-0x12fe3d>
     15a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15b:	67 73 00             	addr16 jae 15e <sysEnter_Vector-0x12fea2>
     15e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     165:	00 00                	add    BYTE PTR [eax],al
     167:	73 74                	jae    1dd <sysEnter_Vector-0x12fe23>
     169:	72 74                	jb     1df <sysEnter_Vector-0x12fe21>
     16b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     16c:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     16f:	00 01                	add    BYTE PTR [ecx],al
     171:	00 00                	add    BYTE PTR [eax],al
     173:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     176:	6d                   	ins    DWORD PTR es:[edi],dx
     177:	6f                   	outs   dx,DWORD PTR ds:[esi]
     178:	6e                   	outs   dx,BYTE PTR ds:[esi]
     179:	2e                   	cs
     17a:	68 00 02 00 00       	push   0x200
     17f:	00 00                	add    BYTE PTR [eax],al
     181:	05 02 1c 01 00       	add    eax,0x11c02
     186:	9f                   	lahf   
     187:	03 2a                	add    ebp,DWORD PTR [edx]
     189:	01 f6                	add    esi,esi
     18b:	67 92                	addr16 xchg edx,eax
     18d:	08 2f                	or     BYTE PTR [edi],ch
     18f:	75 08                	jne    199 <sysEnter_Vector-0x12fe67>
     191:	2f                   	das    
     192:	4b                   	dec    ebx
     193:	08 c9                	or     cl,cl
     195:	c9                   	leave  
     196:	08 21                	or     BYTE PTR [ecx],ah
     198:	3d 77 f6 67 92       	cmp    eax,0x9267f677
     19d:	08 2f                	or     BYTE PTR [edi],ch
     19f:	75 08                	jne    1a9 <sysEnter_Vector-0x12fe57>
     1a1:	2f                   	das    
     1a2:	4b                   	dec    ebx
     1a3:	08 c9                	or     cl,cl
     1a5:	c9                   	leave  
     1a6:	08 21                	or     BYTE PTR [ecx],ah
     1a8:	3d 02 07 00 01       	cmp    eax,0x1000702
     1ad:	01 b7 00 00 00 02    	add    DWORD PTR [edi+0x2000000],esi
     1b3:	00 36                	add    BYTE PTR [esi],dh
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	00 01                	add    BYTE PTR [ecx],al
     1b9:	01 fb                	add    ebx,edi
     1bb:	0e                   	push   cs
     1bc:	0d 00 01 01 01       	or     eax,0x1010100
     1c1:	01 00                	add    DWORD PTR [eax],eax
     1c3:	00 00                	add    BYTE PTR [eax],al
     1c5:	01 00                	add    DWORD PTR [eax],eax
     1c7:	00 01                	add    BYTE PTR [ecx],al
     1c9:	73 72                	jae    23d <sysEnter_Vector-0x12fdc3>
     1cb:	63 00                	arpl   WORD PTR [eax],ax
     1cd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     1d4:	00 00                	add    BYTE PTR [eax],al
     1d6:	61                   	popa   
     1d7:	73 63                	jae    23c <sysEnter_Vector-0x12fdc4>
     1d9:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     1e0:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     1e3:	6d                   	ins    DWORD PTR es:[edi],dx
     1e4:	6d                   	ins    DWORD PTR es:[edi],dx
     1e5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     1e7:	2e                   	cs
     1e8:	68 00 02 00 00       	push   0x200
     1ed:	00 00                	add    BYTE PTR [eax],al
     1ef:	05 02 4c 02 00       	add    eax,0x24c02
     1f4:	9f                   	lahf   
     1f5:	03 0a                	add    ecx,DWORD PTR [edx]
     1f7:	01 08                	add    DWORD PTR [eax],ecx
     1f9:	16                   	push   ss
     1fa:	00 02                	add    BYTE PTR [edx],al
     1fc:	04 03                	add    al,0x3
     1fe:	08 d7                	or     bh,dl
     200:	00 02                	add    BYTE PTR [edx],al
     202:	04 03                	add    al,0x3
     204:	d7                   	xlat   BYTE PTR ds:[ebx]
     205:	00 02                	add    BYTE PTR [edx],al
     207:	04 03                	add    al,0x3
     209:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     20c:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     20f:	d3 00                	rol    DWORD PTR [eax],cl
     211:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     214:	06                   	push   es
     215:	82                   	(bad)  
     216:	06                   	push   es
     217:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     21a:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     21f:	04 01                	add    al,0x1
     221:	76 00                	jbe    223 <sysEnter_Vector-0x12fddd>
     223:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     226:	02 3b                	add    bh,BYTE PTR [ebx]
     228:	13 08                	adc    ecx,DWORD PTR [eax]
     22a:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     22e:	ad                   	lods   eax,DWORD PTR ds:[esi]
     22f:	d7                   	xlat   BYTE PTR ds:[ebx]
     230:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     236:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     239:	76 00                	jbe    23b <sysEnter_Vector-0x12fdc5>
     23b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     23e:	02 3b                	add    bh,BYTE PTR [ebx]
     240:	13 08                	adc    ecx,DWORD PTR [eax]
     242:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     246:	ad                   	lods   eax,DWORD PTR ds:[esi]
     247:	d7                   	xlat   BYTE PTR ds:[ebx]
     248:	3d 5c f3 78 00       	cmp    eax,0x78f35c
     24d:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     250:	91                   	xchg   ecx,eax
     251:	00 02                	add    BYTE PTR [edx],al
     253:	04 03                	add    al,0x3
     255:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     258:	00 02                	add    BYTE PTR [edx],al
     25a:	04 01                	add    al,0x1
     25c:	06                   	push   es
     25d:	4a                   	dec    edx
     25e:	06                   	push   es
     25f:	e8 3d 31 c9 ad       	call   adc933a1 <tmbuf+0xec8b521>
     264:	02 02                	add    al,BYTE PTR [edx]
     266:	00 01                	add    BYTE PTR [ecx],al
     268:	01 c8                	add    eax,ecx
     26a:	00 00                	add    BYTE PTR [eax],al
     26c:	00 02                	add    BYTE PTR [edx],al
     26e:	00 8f 00 00 00 01    	add    BYTE PTR [edi+0x1000000],cl
     274:	01 fb                	add    ebx,edi
     276:	0e                   	push   cs
     277:	0d 00 01 01 01       	or     eax,0x1010100
     27c:	01 00                	add    DWORD PTR [eax],eax
     27e:	00 00                	add    BYTE PTR [eax],al
     280:	01 00                	add    DWORD PTR [eax],eax
     282:	00 01                	add    BYTE PTR [ecx],al
     284:	73 72                	jae    2f8 <sysEnter_Vector-0x12fd08>
     286:	63 00                	arpl   WORD PTR [eax],ax
     288:	2f                   	das    
     289:	68 6f 6d 65 2f       	push   0x2f656d6f
     28e:	79 6f                	jns    2ff <sysEnter_Vector-0x12fd01>
     290:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     297:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     29a:	73 73                	jae    30f <sysEnter_Vector-0x12fcf1>
     29c:	2f                   	das    
     29d:	6c                   	ins    BYTE PTR es:[edi],dx
     29e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2a5:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2ab:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     2b1:	78 2d                	js     2e0 <sysEnter_Vector-0x12fd20>
     2b3:	67 6e                	outs   dx,BYTE PTR ds:[si]
     2b5:	75 2f                	jne    2e6 <sysEnter_Vector-0x12fd1a>
     2b7:	35 2e 33 2e 30       	xor    eax,0x302e332e
     2bc:	2f                   	das    
     2bd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2c4:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     2c7:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     2cb:	65 00 00             	add    BYTE PTR gs:[eax],al
     2ce:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     2d1:	73 6f                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d3:	6c                   	ins    BYTE PTR es:[edi],dx
     2d4:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     2d8:	01 00                	add    DWORD PTR [eax],eax
     2da:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     2dd:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     2e4:	63 
     2e5:	2e                   	cs
     2e6:	68 00 02 00 00       	push   0x200
     2eb:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     2f2:	03 00                	add    eax,DWORD PTR [eax]
     2f4:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     2f7:	6d                   	ins    DWORD PTR es:[edi],dx
     2f8:	6d                   	ins    DWORD PTR es:[edi],dx
     2f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2fa:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2fb:	2e                   	cs
     2fc:	68 00 03 00 00       	push   0x300
     301:	00 00                	add    BYTE PTR [eax],al
     303:	05 02 b4 04 00       	add    eax,0x4b402
     308:	9f                   	lahf   
     309:	03 0f                	add    ecx,DWORD PTR [edi]
     30b:	01 08                	add    DWORD PTR [eax],ecx
     30d:	24 08                	and    al,0x8
     30f:	59                   	pop    ecx
     310:	08 21                	or     BYTE PTR [ecx],ah
     312:	08 2f                	or     BYTE PTR [edi],ch
     314:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     317:	21 08                	and    DWORD PTR [eax],ecx
     319:	2f                   	das    
     31a:	08 5a 08             	or     BYTE PTR [edx+0x8],bl
     31d:	59                   	pop    ecx
     31e:	69 08 23 08 59 08    	imul   ecx,DWORD PTR [eax],0x8590823
     324:	5a                   	pop    edx
     325:	08 59 69             	or     BYTE PTR [ecx+0x69],bl
     328:	08 23                	or     BYTE PTR [ebx],ah
     32a:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     32d:	5a                   	pop    edx
     32e:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     331:	06                   	push   es
     332:	00 01                	add    BYTE PTR [ecx],al
     334:	01 4a 01             	add    DWORD PTR [edx+0x1],ecx
     337:	00 00                	add    BYTE PTR [eax],al
     339:	02 00                	add    al,BYTE PTR [eax]
     33b:	d0 00                	rol    BYTE PTR [eax],1
     33d:	00 00                	add    BYTE PTR [eax],al
     33f:	01 01                	add    DWORD PTR [ecx],eax
     341:	fb                   	sti    
     342:	0e                   	push   cs
     343:	0d 00 01 01 01       	or     eax,0x1010100
     348:	01 00                	add    DWORD PTR [eax],eax
     34a:	00 00                	add    BYTE PTR [eax],al
     34c:	01 00                	add    DWORD PTR [eax],eax
     34e:	00 01                	add    BYTE PTR [ecx],al
     350:	73 72                	jae    3c4 <sysEnter_Vector-0x12fc3c>
     352:	63 00                	arpl   WORD PTR [eax],ax
     354:	2f                   	das    
     355:	68 6f 6d 65 2f       	push   0x2f656d6f
     35a:	79 6f                	jns    3cb <sysEnter_Vector-0x12fc35>
     35c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     363:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     366:	73 73                	jae    3db <sysEnter_Vector-0x12fc25>
     368:	2f                   	das    
     369:	6c                   	ins    BYTE PTR es:[edi],dx
     36a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     371:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     377:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     37d:	78 2d                	js     3ac <sysEnter_Vector-0x12fc54>
     37f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     381:	75 2f                	jne    3b2 <sysEnter_Vector-0x12fc4e>
     383:	35 2e 33 2e 30       	xor    eax,0x302e332e
     388:	2f                   	das    
     389:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     390:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     393:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     397:	65                   	gs
     398:	2f                   	das    
     399:	2e                   	cs
     39a:	2e                   	cs
     39b:	2f                   	das    
     39c:	2e                   	cs
     39d:	2e                   	cs
     39e:	2f                   	das    
     39f:	2e                   	cs
     3a0:	2e                   	cs
     3a1:	2f                   	das    
     3a2:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     3a6:	6a 2f                	push   0x2f
     3a8:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     3ab:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     3b2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     3b3:	65                   	gs
     3b4:	6c                   	ins    BYTE PTR es:[edi],dx
     3b5:	2f                   	das    
     3b6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3bd:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     3c0:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     3c4:	65 00 00             	add    BYTE PTR gs:[eax],al
     3c7:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     3c9:	76 69                	jbe    434 <sysEnter_Vector-0x12fbcc>
     3cb:	72 6f                	jb     43c <sysEnter_Vector-0x12fbc4>
     3cd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     3ce:	6d                   	ins    DWORD PTR es:[edi],dx
     3cf:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     3d1:	74 2e                	je     401 <sysEnter_Vector-0x12fbff>
     3d3:	63 00                	arpl   WORD PTR [eax],ax
     3d5:	01 00                	add    DWORD PTR [eax],eax
     3d7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     3da:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     3e1:	63 
     3e2:	2e                   	cs
     3e3:	68 00 02 00 00       	push   0x200
     3e8:	73 74                	jae    45e <sysEnter_Vector-0x12fba2>
     3ea:	64                   	fs
     3eb:	64                   	fs
     3ec:	65                   	gs
     3ed:	66                   	data16
     3ee:	2e                   	cs
     3ef:	68 00 02 00 00       	push   0x200
     3f4:	73 79                	jae    46f <sysEnter_Vector-0x12fb91>
     3f6:	73 63                	jae    45b <sysEnter_Vector-0x12fba5>
     3f8:	61                   	popa   
     3f9:	6c                   	ins    BYTE PTR es:[edi],dx
     3fa:	6c                   	ins    BYTE PTR es:[edi],dx
     3fb:	73 2e                	jae    42b <sysEnter_Vector-0x12fbd5>
     3fd:	68 00 03 00 00       	push   0x300
     402:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     405:	6d                   	ins    DWORD PTR es:[edi],dx
     406:	6f                   	outs   dx,DWORD PTR ds:[esi]
     407:	6e                   	outs   dx,BYTE PTR ds:[esi]
     408:	2e                   	cs
     409:	68 00 04 00 00       	push   0x400
     40e:	00 00                	add    BYTE PTR [eax],al
     410:	05 02 24 06 00       	add    eax,0x62402
     415:	9f                   	lahf   
     416:	03 09                	add    ecx,DWORD PTR [ecx]
     418:	01 08                	add    DWORD PTR [eax],ecx
     41a:	21 91 02 36 14 02    	and    DWORD PTR [ecx+0x2143602],edx
     420:	39 13                	cmp    DWORD PTR [ebx],edx
     422:	00 02                	add    BYTE PTR [edx],al
     424:	04 02                	add    al,0x2
     426:	7e 00                	jle    428 <sysEnter_Vector-0x12fbd8>
     428:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     42b:	06                   	push   es
     42c:	4a                   	dec    edx
     42d:	06                   	push   es
     42e:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     42f:	59                   	pop    ecx
     430:	5b                   	pop    ebx
     431:	f3 08 13             	repz or BYTE PTR [ebx],dl
     434:	31 08                	xor    DWORD PTR [eax],ecx
     436:	21 76 bb             	and    DWORD PTR [esi-0x45],esi
     439:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     43f:	14 08                	adc    al,0x8
     441:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     448:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     44b:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     44e:	00 02                	add    BYTE PTR [edx],al
     450:	04 01                	add    al,0x1
     452:	06                   	push   es
     453:	4a                   	dec    edx
     454:	06                   	push   es
     455:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     458:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     45d:	08 f3                	or     bl,dh
     45f:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     465:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     468:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     46b:	00 02                	add    BYTE PTR [edx],al
     46d:	04 01                	add    al,0x1
     46f:	06                   	push   es
     470:	4a                   	dec    edx
     471:	06                   	push   es
     472:	03 0b                	add    ecx,DWORD PTR [ebx]
     474:	9e                   	sahf   
     475:	5b                   	pop    ebx
     476:	08 13                	or     BYTE PTR [ebx],dl
     478:	08 5a 5b             	or     BYTE PTR [edx+0x5b],bl
     47b:	f3 08 13             	repz or BYTE PTR [ebx],dl
     47e:	02 02                	add    al,BYTE PTR [edx]
     480:	00 01                	add    BYTE PTR [ecx],al
     482:	01 c8                	add    eax,ecx
     484:	01 00                	add    DWORD PTR [eax],eax
     486:	00 02                	add    BYTE PTR [edx],al
     488:	00 d3                	add    bl,dl
     48a:	00 00                	add    BYTE PTR [eax],al
     48c:	00 01                	add    BYTE PTR [ecx],al
     48e:	01 fb                	add    ebx,edi
     490:	0e                   	push   cs
     491:	0d 00 01 01 01       	or     eax,0x1010100
     496:	01 00                	add    DWORD PTR [eax],eax
     498:	00 00                	add    BYTE PTR [eax],al
     49a:	01 00                	add    DWORD PTR [eax],eax
     49c:	00 01                	add    BYTE PTR [ecx],al
     49e:	73 72                	jae    512 <sysEnter_Vector-0x12faee>
     4a0:	63 00                	arpl   WORD PTR [eax],ax
     4a2:	2f                   	das    
     4a3:	68 6f 6d 65 2f       	push   0x2f656d6f
     4a8:	79 6f                	jns    519 <sysEnter_Vector-0x12fae7>
     4aa:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     4b1:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     4b4:	73 73                	jae    529 <sysEnter_Vector-0x12fad7>
     4b6:	2f                   	das    
     4b7:	6c                   	ins    BYTE PTR es:[edi],dx
     4b8:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     4bf:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     4c5:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     4cb:	78 2d                	js     4fa <sysEnter_Vector-0x12fb06>
     4cd:	67 6e                	outs   dx,BYTE PTR ds:[si]
     4cf:	75 2f                	jne    500 <sysEnter_Vector-0x12fb00>
     4d1:	35 2e 33 2e 30       	xor    eax,0x302e332e
     4d6:	2f                   	das    
     4d7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4de:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     4e1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     4e5:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     4e9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     4ed:	65                   	gs
     4ee:	2f                   	das    
     4ef:	2e                   	cs
     4f0:	2e                   	cs
     4f1:	2f                   	das    
     4f2:	2e                   	cs
     4f3:	2e                   	cs
     4f4:	2f                   	das    
     4f5:	2e                   	cs
     4f6:	2e                   	cs
     4f7:	2f                   	das    
     4f8:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     4fc:	6a 2f                	push   0x2f
     4fe:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     501:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     508:	6e                   	outs   dx,BYTE PTR ds:[esi]
     509:	65                   	gs
     50a:	6c                   	ins    BYTE PTR es:[edi],dx
     50b:	2f                   	das    
     50c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     513:	00 00                	add    BYTE PTR [eax],al
     515:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     51c:	01 00                	add    DWORD PTR [eax],eax
     51e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     521:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     528:	63 
     529:	2e                   	cs
     52a:	68 00 02 00 00       	push   0x200
     52f:	73 74                	jae    5a5 <sysEnter_Vector-0x12fa5b>
     531:	64                   	fs
     532:	64                   	fs
     533:	65                   	gs
     534:	66                   	data16
     535:	2e                   	cs
     536:	68 00 02 00 00       	push   0x200
     53b:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     542:	03 00                	add    eax,DWORD PTR [eax]
     544:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     547:	6d                   	ins    DWORD PTR es:[edi],dx
     548:	6d                   	ins    DWORD PTR es:[edi],dx
     549:	6f                   	outs   dx,DWORD PTR ds:[esi]
     54a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     54b:	2e                   	cs
     54c:	68 00 03 00 00       	push   0x300
     551:	73 79                	jae    5cc <sysEnter_Vector-0x12fa34>
     553:	73 63                	jae    5b8 <sysEnter_Vector-0x12fa48>
     555:	61                   	popa   
     556:	6c                   	ins    BYTE PTR es:[edi],dx
     557:	6c                   	ins    BYTE PTR es:[edi],dx
     558:	73 2e                	jae    588 <sysEnter_Vector-0x12fa78>
     55a:	68 00 04 00 00       	push   0x400
     55f:	00 00                	add    BYTE PTR [eax],al
     561:	05 02 04 09 00       	add    eax,0x90402
     566:	9f                   	lahf   
     567:	03 12                	add    edx,DWORD PTR [edx]
     569:	01 08                	add    DWORD PTR [eax],ecx
     56b:	13 08                	adc    ecx,DWORD PTR [eax]
     56d:	a0 5a f3 08 3d       	mov    al,ds:0x3d08f35a
     572:	31 08                	xor    DWORD PTR [eax],ecx
     574:	14 08                	adc    al,0x8
     576:	59                   	pop    ecx
     577:	5b                   	pop    ebx
     578:	f3 08 13             	repz or BYTE PTR [ebx],dl
     57b:	31 08                	xor    DWORD PTR [eax],ecx
     57d:	21 2f                	and    DWORD PTR [edi],ebp
     57f:	08 d5                	or     ch,dl
     581:	bc 08 3d 69 08       	mov    esp,0x8693d08
     586:	2f                   	das    
     587:	75 08                	jne    591 <sysEnter_Vector-0x12fa6f>
     589:	83 67 75 bc          	and    DWORD PTR [edi+0x75],0xffffffbc
     58d:	08 68 02             	or     BYTE PTR [eax+0x2],ch
     590:	26 13 3d 77 08 13 08 	adc    edi,DWORD PTR es:0x8130877
     597:	2f                   	das    
     598:	69 f3 d7 31 e5 08    	imul   esi,ebx,0x8e531d7
     59e:	d7                   	xlat   BYTE PTR ds:[ebx]
     59f:	77 f3                	ja     594 <sysEnter_Vector-0x12fa6c>
     5a1:	08 3d 30 e5 08 d7    	or     BYTE PTR ds:0xd708e530,bh
     5a7:	77 f3                	ja     59c <sysEnter_Vector-0x12fa64>
     5a9:	08 3d 31 08 13 08    	or     BYTE PTR ds:0x8130831,bh
     5af:	75 5b                	jne    60c <sysEnter_Vector-0x12f9f4>
     5b1:	f3 08 3d 30 08 13 08 	repz or BYTE PTR ds:0x8130830,bh
     5b8:	67 5b                	addr16 pop ebx
     5ba:	f3 08 13             	repz or BYTE PTR [ebx],dl
     5bd:	31 08                	xor    DWORD PTR [eax],ecx
     5bf:	75 68                	jne    629 <sysEnter_Vector-0x12f9d7>
     5c1:	77 bb                	ja     57e <sysEnter_Vector-0x12fa82>
     5c3:	08 91 bb 08 91 bb    	or     BYTE PTR [ecx-0x446ef745],dl
     5c9:	08 91 bb 08 95 67    	or     BYTE PTR [ecx+0x679508bb],dl
     5cf:	08 bc ae 08 84 08 84 	or     BYTE PTR [esi+ebp*4-0x7bf77bf8],bh
     5d6:	a0 08 67 08 4c       	mov    al,ds:0x4c086708
     5db:	08 13                	or     BYTE PTR [ebx],dl
     5dd:	be 08 67 e5 08       	mov    esi,0x8e56708
     5e2:	e6 75                	out    0x75,al
     5e4:	5a                   	pop    edx
     5e5:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     5e8:	d7                   	xlat   BYTE PTR ds:[ebx]
     5e9:	08 9f 08 67 08 9f    	or     BYTE PTR [edi-0x60f798f8],bl
     5ef:	68 08 67 75 30       	push   0x30756708
     5f4:	03 73 08             	add    esi,DWORD PTR [ebx+0x8]
     5f7:	3c 03                	cmp    al,0x3
     5f9:	10 9e a0 08 bb 08    	adc    BYTE PTR [esi+0x8bb08a0],bl
     5ff:	9f                   	lahf   
     600:	08 67 08             	or     BYTE PTR [edi+0x8],ah
     603:	9f                   	lahf   
     604:	68 08 67 79 3d       	push   0x3d796708
     609:	5b                   	pop    ebx
     60a:	08 13                	or     BYTE PTR [ebx],dl
     60c:	08 2f                	or     BYTE PTR [edi],ch
     60e:	5b                   	pop    ebx
     60f:	f3 d7                	repz xlat BYTE PTR ds:[ebx]
     611:	31 08                	xor    DWORD PTR [eax],ecx
     613:	22 75 75             	and    dh,BYTE PTR [ebp+0x75]
     616:	75 83                	jne    59b <sysEnter_Vector-0x12fa65>
     618:	83 08 13             	or     DWORD PTR [eax],0x13
     61b:	76 08                	jbe    625 <sysEnter_Vector-0x12f9db>
     61d:	30 5a 08             	xor    BYTE PTR [edx+0x8],bl
     620:	ca 08 91             	retf   0x9108
     623:	08 d7                	or     bh,dl
     625:	08 91 08 f3 08 d7    	or     BYTE PTR [ecx-0x28f70cf8],dl
     62b:	c9                   	leave  
     62c:	08 83 83 67 67 32    	or     BYTE PTR [ebx+0x32676783],al
     632:	67 67 08 21          	addr32 or BYTE PTR [bx+di],ah
     636:	03 6b 08             	add    ebp,DWORD PTR [ebx+0x8]
     639:	66 03 1a             	add    bx,WORD PTR [edx]
     63c:	02 22                	add    ah,BYTE PTR [edx]
     63e:	01 d7                	add    edi,edx
     640:	3d 5b f3 08 3d       	cmp    eax,0x3d08f35b
     645:	31 08                	xor    DWORD PTR [eax],ecx
     647:	13 08                	adc    ecx,DWORD PTR [eax]
     649:	2f                   	das    
     64a:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
     650:	00 00                	add    BYTE PTR [eax],al
     652:	00 02                	add    BYTE PTR [edx],al
     654:	00 77 00             	add    BYTE PTR [edi+0x0],dh
     657:	00 00                	add    BYTE PTR [eax],al
     659:	01 01                	add    DWORD PTR [ecx],eax
     65b:	fb                   	sti    
     65c:	0e                   	push   cs
     65d:	0d 00 01 01 01       	or     eax,0x1010100
     662:	01 00                	add    DWORD PTR [eax],eax
     664:	00 00                	add    BYTE PTR [eax],al
     666:	01 00                	add    DWORD PTR [eax],eax
     668:	00 01                	add    BYTE PTR [ecx],al
     66a:	73 72                	jae    6de <sysEnter_Vector-0x12f922>
     66c:	63 2f                	arpl   WORD PTR [edi],bp
     66e:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     675:	6e                   	outs   dx,BYTE PTR ds:[esi]
     676:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     67a:	65                   	gs
     67b:	2f                   	das    
     67c:	2e                   	cs
     67d:	2e                   	cs
     67e:	2f                   	das    
     67f:	2e                   	cs
     680:	2e                   	cs
     681:	2f                   	das    
     682:	2e                   	cs
     683:	2e                   	cs
     684:	2f                   	das    
     685:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     689:	6a 2f                	push   0x2f
     68b:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     68e:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     695:	6e                   	outs   dx,BYTE PTR ds:[esi]
     696:	65                   	gs
     697:	6c                   	ins    BYTE PTR es:[edi],dx
     698:	2f                   	das    
     699:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     6a0:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     6a3:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     6a7:	65 00 00             	add    BYTE PTR gs:[eax],al
     6aa:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     6b1:	00 01                	add    BYTE PTR [ecx],al
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	73 79                	jae    730 <sysEnter_Vector-0x12f8d0>
     6b7:	73 63                	jae    71c <sysEnter_Vector-0x12f8e4>
     6b9:	61                   	popa   
     6ba:	6c                   	ins    BYTE PTR es:[edi],dx
     6bb:	6c                   	ins    BYTE PTR es:[edi],dx
     6bc:	73 2e                	jae    6ec <sysEnter_Vector-0x12f914>
     6be:	68 00 02 00 00       	push   0x200
     6c3:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     6c6:	6d                   	ins    DWORD PTR es:[edi],dx
     6c7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6c8:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6c9:	2e                   	cs
     6ca:	68 00 03 00 00       	push   0x300
     6cf:	00 00                	add    BYTE PTR [eax],al
     6d1:	05 02 bc 11 00       	add    eax,0x11bc02
     6d6:	9f                   	lahf   
     6d7:	03 0f                	add    ecx,DWORD PTR [edi]
     6d9:	01 d7                	add    edi,edx
     6db:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6e1:	75 4b                	jne    72e <sysEnter_Vector-0x12f8d2>
     6e3:	08 3d 79 08 16 08    	or     BYTE PTR ds:0x8160879,bh
     6e9:	3d 67 67 9f 30       	cmp    eax,0x309f6767
     6ee:	6a 08                	push   0x8
     6f0:	14 77                	adc    al,0x77
     6f2:	ad                   	lods   eax,DWORD PTR ds:[esi]
     6f3:	68 00 02 04 01       	push   0x1040200
     6f8:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     6fb:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     701:	06                   	push   es
     702:	66 06                	pushw  es
     704:	68 ad 68 68 76       	push   0x766868ad
     709:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     70c:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     70f:	06                   	push   es
     710:	ac                   	lods   al,BYTE PTR ds:[esi]
     711:	06                   	push   es
     712:	68 5b 00 02 04       	push   0x402005b
     717:	02 a3 2f 02 05 00    	add    ah,BYTE PTR [ebx+0x5022f]
     71d:	01 01                	add    DWORD PTR [ecx],eax
     71f:	ad                   	lods   eax,DWORD PTR ds:[esi]
     720:	02 00                	add    al,BYTE PTR [eax]
     722:	00 02                	add    BYTE PTR [edx],al
     724:	00 e5                	add    ch,ah
     726:	00 00                	add    BYTE PTR [eax],al
     728:	00 01                	add    BYTE PTR [ecx],al
     72a:	01 fb                	add    ebx,edi
     72c:	0e                   	push   cs
     72d:	0d 00 01 01 01       	or     eax,0x1010100
     732:	01 00                	add    DWORD PTR [eax],eax
     734:	00 00                	add    BYTE PTR [eax],al
     736:	01 00                	add    DWORD PTR [eax],eax
     738:	00 01                	add    BYTE PTR [ecx],al
     73a:	73 72                	jae    7ae <sysEnter_Vector-0x12f852>
     73c:	63 00                	arpl   WORD PTR [eax],ax
     73e:	2f                   	das    
     73f:	68 6f 6d 65 2f       	push   0x2f656d6f
     744:	79 6f                	jns    7b5 <sysEnter_Vector-0x12f84b>
     746:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     74d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     750:	73 73                	jae    7c5 <sysEnter_Vector-0x12f83b>
     752:	2f                   	das    
     753:	6c                   	ins    BYTE PTR es:[edi],dx
     754:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     75b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     761:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     767:	78 2d                	js     796 <sysEnter_Vector-0x12f86a>
     769:	67 6e                	outs   dx,BYTE PTR ds:[si]
     76b:	75 2f                	jne    79c <sysEnter_Vector-0x12f864>
     76d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     772:	2f                   	das    
     773:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     77a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     77d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     781:	65                   	gs
     782:	2f                   	das    
     783:	2e                   	cs
     784:	2e                   	cs
     785:	2f                   	das    
     786:	2e                   	cs
     787:	2e                   	cs
     788:	2f                   	das    
     789:	2e                   	cs
     78a:	2e                   	cs
     78b:	2f                   	das    
     78c:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     790:	6a 2f                	push   0x2f
     792:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     795:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     79c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     79d:	65                   	gs
     79e:	6c                   	ins    BYTE PTR es:[edi],dx
     79f:	2f                   	das    
     7a0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     7a7:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     7aa:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     7ae:	65 00 00             	add    BYTE PTR gs:[eax],al
     7b1:	6c                   	ins    BYTE PTR es:[edi],dx
     7b2:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7b9:	4f                   	dec    edi
     7ba:	53                   	push   ebx
     7bb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     7be:	01 00                	add    DWORD PTR [eax],eax
     7c0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     7c3:	64                   	fs
     7c4:	61                   	popa   
     7c5:	72 67                	jb     82e <sysEnter_Vector-0x12f7d2>
     7c7:	2e                   	cs
     7c8:	68 00 02 00 00       	push   0x200
     7cd:	73 74                	jae    843 <sysEnter_Vector-0x12f7bd>
     7cf:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7d6:	63 
     7d7:	2e                   	cs
     7d8:	68 00 02 00 00       	push   0x200
     7dd:	73 74                	jae    853 <sysEnter_Vector-0x12f7ad>
     7df:	64                   	fs
     7e0:	64                   	fs
     7e1:	65                   	gs
     7e2:	66                   	data16
     7e3:	2e                   	cs
     7e4:	68 00 02 00 00       	push   0x200
     7e9:	73 79                	jae    864 <sysEnter_Vector-0x12f79c>
     7eb:	73 63                	jae    850 <sysEnter_Vector-0x12f7b0>
     7ed:	61                   	popa   
     7ee:	6c                   	ins    BYTE PTR es:[edi],dx
     7ef:	6c                   	ins    BYTE PTR es:[edi],dx
     7f0:	73 2e                	jae    820 <sysEnter_Vector-0x12f7e0>
     7f2:	68 00 03 00 00       	push   0x300
     7f7:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     7fa:	6d                   	ins    DWORD PTR es:[edi],dx
     7fb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7fc:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7fd:	2e                   	cs
     7fe:	68 00 04 00 00       	push   0x400
     803:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     80a:	04 00                	add    al,0x0
     80c:	00 00                	add    BYTE PTR [eax],al
     80e:	00 05 02 28 13 00    	add    BYTE PTR ds:0x132802,al
     814:	9f                   	lahf   
     815:	03 11                	add    edx,DWORD PTR [ecx]
     817:	01 08                	add    DWORD PTR [eax],ecx
     819:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
     81c:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     822:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     828:	75 08                	jne    832 <sysEnter_Vector-0x12f7ce>
     82a:	9f                   	lahf   
     82b:	3d 77 08 21 75       	cmp    eax,0x75210877
     830:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     836:	75 08                	jne    840 <sysEnter_Vector-0x12f7c0>
     838:	d7                   	xlat   BYTE PTR ds:[ebx]
     839:	3d 77 08 21 08       	cmp    eax,0x8210877
     83e:	67 d8 59 bd          	fcomp  DWORD PTR [bx+di-0x43]
     842:	c9                   	leave  
     843:	c9                   	leave  
     844:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     847:	08 91 08 6a 2d 08    	or     BYTE PTR [ecx+0x82d6a08],dl
     84d:	21 69 08             	and    DWORD PTR [ecx+0x8],ebp
     850:	21 59 59             	and    DWORD PTR [ecx+0x59],ebx
     853:	77 08                	ja     85d <sysEnter_Vector-0x12f7a3>
     855:	22 68 08             	and    ch,BYTE PTR [eax+0x8]
     858:	c9                   	leave  
     859:	08 83 59 5b 08 22    	or     BYTE PTR [ebx+0x22085b59],al
     85f:	68 08 c9 08 83       	push   0x8308c908
     864:	5b                   	pop    ebx
     865:	08 22                	or     BYTE PTR [edx],ah
     867:	68 08 c9 08 83       	push   0x8308c908
     86c:	5b                   	pop    ebx
     86d:	f4                   	hlt    
     86e:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     872:	31 f4                	xor    esp,esi
     874:	68 08 91 5a 31       	push   0x315a9108
     879:	f4                   	hlt    
     87a:	68 08 91 5a 31       	push   0x315a9108
     87f:	08 21                	or     BYTE PTR [ecx],ah
     881:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
     884:	57                   	push   edi
     885:	13 77 08             	adc    esi,DWORD PTR [edi+0x8]
     888:	21 02                	and    DWORD PTR [edx],eax
     88a:	57                   	push   edi
     88b:	13 77 08             	adc    esi,DWORD PTR [edi+0x8]
     88e:	21 02                	and    DWORD PTR [edx],eax
     890:	57                   	push   edi
     891:	14 77                	adc    al,0x77
     893:	c9                   	leave  
     894:	c9                   	leave  
     895:	3f                   	aas    
     896:	c9                   	leave  
     897:	08 83 3f f3 76 a1    	or     BYTE PTR [ebx-0x5e890cc1],al
     89d:	31 f3                	xor    ebx,esi
     89f:	75 08                	jne    8a9 <sysEnter_Vector-0x12f757>
     8a1:	67 08 83 3d 31       	or     BYTE PTR [bp+di+0x313d],al
     8a6:	08 21                	or     BYTE PTR [ecx],ah
     8a8:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     8af:	67 02 22             	add    ah,BYTE PTR [bp+si]
     8b2:	14 08                	adc    al,0x8
     8b4:	ae                   	scas   al,BYTE PTR es:[edi]
     8b5:	4c                   	dec    esp
     8b6:	ca 08 4b             	retf   0x4b08
     8b9:	91                   	xchg   ecx,eax
     8ba:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     8c0:	67 02 2f             	add    ch,BYTE PTR [bx]
     8c3:	14 00                	adc    al,0x0
     8c5:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8c8:	02 31                	add    dh,BYTE PTR [ecx]
     8ca:	13 00                	adc    eax,DWORD PTR [eax]
     8cc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     8cf:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     8d5:	bb 00 02 04 02       	mov    ebx,0x2040200
     8da:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     8dd:	00 02                	add    BYTE PTR [edx],al
     8df:	04 01                	add    al,0x1
     8e1:	06                   	push   es
     8e2:	4a                   	dec    edx
     8e3:	06                   	push   es
     8e4:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     8e7:	08 91 08 b0 3f 5b    	or     BYTE PTR [ecx+0x5b3fb008],dl
     8ed:	f3 75 08             	repz jne 8f8 <sysEnter_Vector-0x12f708>
     8f0:	67 08 ad 3d 31       	or     BYTE PTR [di+0x313d],ch
     8f5:	c9                   	leave  
     8f6:	c9                   	leave  
     8f7:	32 c9                	xor    cl,cl
     8f9:	f3 3f                	repz aas 
     8fb:	c9                   	leave  
     8fc:	08 13                	or     BYTE PTR [ebx],dl
     8fe:	31 f5                	xor    ebp,esi
     900:	75 76                	jne    978 <sysEnter_Vector-0x12f688>
     902:	ad                   	lods   eax,DWORD PTR ds:[esi]
     903:	bb 08 68 08 5c       	mov    ebx,0x5c086808
     908:	67 75 91             	addr16 jne 89c <sysEnter_Vector-0x12f764>
     90b:	5a                   	pop    edx
     90c:	75 67                	jne    975 <sysEnter_Vector-0x12f68b>
     90e:	31 67 67             	xor    DWORD PTR [edi+0x67],esp
     911:	08 91 76 31 08 21    	or     BYTE PTR [ecx+0x21083176],dl
     917:	67 08 91 76 03       	or     BYTE PTR [bx+di+0x376],dl
     91c:	66 2e 03 12          	add    dx,WORD PTR cs:[edx]
     920:	3c 44                	cmp    al,0x44
     922:	00 02                	add    BYTE PTR [edx],al
     924:	04 02                	add    al,0x2
     926:	03 61 20             	add    esp,DWORD PTR [ecx+0x20]
     929:	00 02                	add    BYTE PTR [edx],al
     92b:	04 01                	add    al,0x1
     92d:	06                   	push   es
     92e:	4a                   	dec    edx
     92f:	00 02                	add    BYTE PTR [edx],al
     931:	04 03                	add    al,0x3
     933:	82                   	(bad)  
     934:	06                   	push   es
     935:	03 23                	add    esp,DWORD PTR [ebx]
     937:	d6                   	(bad)  
     938:	00 02                	add    BYTE PTR [edx],al
     93a:	04 01                	add    al,0x1
     93c:	06                   	push   es
     93d:	66 06                	pushw  es
     93f:	83 08 92             	or     DWORD PTR [eax],0xffffff92
     942:	3d 31 c9 08 13       	cmp    eax,0x1308c931
     947:	31 08                	xor    DWORD PTR [eax],ecx
     949:	5b                   	pop    ebx
     94a:	08 9f d7 92 08 91    	or     BYTE PTR [edi-0x6ef76d29],bl
     950:	08 23                	or     BYTE PTR [ebx],ah
     952:	08 bb 08 75 00 02    	or     BYTE PTR [ebx+0x2007508],bh
     958:	04 01                	add    al,0x1
     95a:	06                   	push   es
     95b:	66 06                	pushw  es
     95d:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     960:	f3 c9                	repz leave 
     962:	84 4c c9 00          	test   BYTE PTR [ecx+ecx*8+0x0],cl
     966:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     969:	06                   	push   es
     96a:	66 06                	pushw  es
     96c:	9f                   	lahf   
     96d:	4c                   	dec    esp
     96e:	00 02                	add    BYTE PTR [edx],al
     970:	04 01                	add    al,0x1
     972:	06                   	push   es
     973:	66 06                	pushw  es
     975:	d8 02                	fadd   DWORD PTR [edx]
     977:	27                   	daa    
     978:	13 ad 91 bc 08 83    	adc    ebp,DWORD PTR [ebp-0x7cf7436f]
     97e:	08 bb 00 02 04 01    	or     BYTE PTR [ebx+0x1040200],bh
     984:	06                   	push   es
     985:	9e                   	sahf   
     986:	06                   	push   es
     987:	84 67 08             	test   BYTE PTR [edi+0x8],ah
     98a:	f3 c9                	repz leave 
     98c:	62 5f 03             	bound  ebx,QWORD PTR [edi+0x3]
     98f:	79 02                	jns    993 <sysEnter_Vector-0x12f66d>
     991:	34 01                	xor    al,0x1
     993:	03 0c 58             	add    ecx,DWORD PTR [eax+ebx*2]
     996:	08 75 67             	or     BYTE PTR [ebp+0x67],dh
     999:	02 2f                	add    ch,BYTE PTR [edi]
     99b:	14 02                	adc    al,0x2
     99d:	31 13                	xor    DWORD PTR [ebx],edx
     99f:	00 02                	add    BYTE PTR [edx],al
     9a1:	04 02                	add    al,0x2
     9a3:	08 bc 00 02 04 02 bb 	or     BYTE PTR [eax+eax*1-0x44fdfbfe],bh
     9aa:	00 02                	add    BYTE PTR [edx],al
     9ac:	04 02                	add    al,0x2
     9ae:	03 67 74             	add    esp,DWORD PTR [edi+0x74]
     9b1:	00 02                	add    BYTE PTR [edx],al
     9b3:	04 01                	add    al,0x1
     9b5:	06                   	push   es
     9b6:	4a                   	dec    edx
     9b7:	06                   	push   es
     9b8:	03 1b                	add    ebx,DWORD PTR [ebx]
     9ba:	d6                   	(bad)  
     9bb:	3d 77 f3 08 13       	cmp    eax,0x1308f377
     9c0:	31 c9                	xor    ecx,ecx
     9c2:	08 3d 31 c9 c9 3f    	or     BYTE PTR ds:0x3fc9c931,bh
     9c8:	c9                   	leave  
     9c9:	08 13                	or     BYTE PTR [ebx],dl
     9cb:	02 02                	add    al,BYTE PTR [edx]
     9cd:	00 01                	add    BYTE PTR [ecx],al
     9cf:	01 f7                	add    edi,esi
     9d1:	00 00                	add    BYTE PTR [eax],al
     9d3:	00 02                	add    BYTE PTR [edx],al
     9d5:	00 d8                	add    al,bl
     9d7:	00 00                	add    BYTE PTR [eax],al
     9d9:	00 01                	add    BYTE PTR [ecx],al
     9db:	01 fb                	add    ebx,edi
     9dd:	0e                   	push   cs
     9de:	0d 00 01 01 01       	or     eax,0x1010100
     9e3:	01 00                	add    DWORD PTR [eax],eax
     9e5:	00 00                	add    BYTE PTR [eax],al
     9e7:	01 00                	add    DWORD PTR [eax],eax
     9e9:	00 01                	add    BYTE PTR [ecx],al
     9eb:	73 72                	jae    a5f <sysEnter_Vector-0x12f5a1>
     9ed:	63 00                	arpl   WORD PTR [eax],ax
     9ef:	2f                   	das    
     9f0:	68 6f 6d 65 2f       	push   0x2f656d6f
     9f5:	79 6f                	jns    a66 <sysEnter_Vector-0x12f59a>
     9f7:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     9fe:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a01:	73 73                	jae    a76 <sysEnter_Vector-0x12f58a>
     a03:	2f                   	das    
     a04:	6c                   	ins    BYTE PTR es:[edi],dx
     a05:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a0c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a12:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     a18:	78 2d                	js     a47 <sysEnter_Vector-0x12f5b9>
     a1a:	67 6e                	outs   dx,BYTE PTR ds:[si]
     a1c:	75 2f                	jne    a4d <sysEnter_Vector-0x12f5b3>
     a1e:	35 2e 33 2e 30       	xor    eax,0x302e332e
     a23:	2f                   	das    
     a24:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a2b:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a2e:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a32:	65                   	gs
     a33:	2f                   	das    
     a34:	2e                   	cs
     a35:	2e                   	cs
     a36:	2f                   	das    
     a37:	2e                   	cs
     a38:	2e                   	cs
     a39:	2f                   	das    
     a3a:	2e                   	cs
     a3b:	2e                   	cs
     a3c:	2f                   	das    
     a3d:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     a41:	6a 2f                	push   0x2f
     a43:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     a46:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     a4d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a4e:	65                   	gs
     a4f:	6c                   	ins    BYTE PTR es:[edi],dx
     a50:	2f                   	das    
     a51:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a58:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a5b:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a5f:	65 00 00             	add    BYTE PTR gs:[eax],al
     a62:	6c                   	ins    BYTE PTR es:[edi],dx
     a63:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     a6a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a6d:	01 00                	add    DWORD PTR [eax],eax
     a6f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     a72:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a79:	63 
     a7a:	2e                   	cs
     a7b:	68 00 02 00 00       	push   0x200
     a80:	73 74                	jae    af6 <sysEnter_Vector-0x12f50a>
     a82:	64                   	fs
     a83:	64                   	fs
     a84:	65                   	gs
     a85:	66                   	data16
     a86:	2e                   	cs
     a87:	68 00 02 00 00       	push   0x200
     a8c:	73 79                	jae    b07 <sysEnter_Vector-0x12f4f9>
     a8e:	73 63                	jae    af3 <sysEnter_Vector-0x12f50d>
     a90:	61                   	popa   
     a91:	6c                   	ins    BYTE PTR es:[edi],dx
     a92:	6c                   	ins    BYTE PTR es:[edi],dx
     a93:	73 2e                	jae    ac3 <sysEnter_Vector-0x12f53d>
     a95:	68 00 03 00 00       	push   0x300
     a9a:	74 79                	je     b15 <sysEnter_Vector-0x12f4eb>
     a9c:	70 65                	jo     b03 <sysEnter_Vector-0x12f4fd>
     a9e:	73 2e                	jae    ace <sysEnter_Vector-0x12f532>
     aa0:	68 00 04 00 00       	push   0x400
     aa5:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     aa8:	6d                   	ins    DWORD PTR es:[edi],dx
     aa9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     aaa:	6e                   	outs   dx,BYTE PTR ds:[esi]
     aab:	2e                   	cs
     aac:	68 00 04 00 00       	push   0x400
     ab1:	00 00                	add    BYTE PTR [eax],al
     ab3:	05 02 90 20 00       	add    eax,0x209002
     ab8:	9f                   	lahf   
     ab9:	03 0d 01 08 14 ad    	add    ecx,DWORD PTR ds:0xad140801
     abf:	bb bb bb bb bc       	mov    ebx,0xbcbbbbbb
     ac4:	08 59 02             	or     BYTE PTR [ecx+0x2],bl
     ac7:	05 00 01 01 d2       	add    eax,0xd2010100
     acc:	01 00                	add    DWORD PTR [eax],eax
     ace:	00 02                	add    BYTE PTR [edx],al
     ad0:	00 d7                	add    bh,dl
     ad2:	00 00                	add    BYTE PTR [eax],al
     ad4:	00 01                	add    BYTE PTR [ecx],al
     ad6:	01 fb                	add    ebx,edi
     ad8:	0e                   	push   cs
     ad9:	0d 00 01 01 01       	or     eax,0x1010100
     ade:	01 00                	add    DWORD PTR [eax],eax
     ae0:	00 00                	add    BYTE PTR [eax],al
     ae2:	01 00                	add    DWORD PTR [eax],eax
     ae4:	00 01                	add    BYTE PTR [ecx],al
     ae6:	73 72                	jae    b5a <sysEnter_Vector-0x12f4a6>
     ae8:	63 00                	arpl   WORD PTR [eax],ax
     aea:	2f                   	das    
     aeb:	68 6f 6d 65 2f       	push   0x2f656d6f
     af0:	79 6f                	jns    b61 <sysEnter_Vector-0x12f49f>
     af2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     af9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     afc:	73 73                	jae    b71 <sysEnter_Vector-0x12f48f>
     afe:	2f                   	das    
     aff:	6c                   	ins    BYTE PTR es:[edi],dx
     b00:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b07:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b0d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b13:	78 2d                	js     b42 <sysEnter_Vector-0x12f4be>
     b15:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b17:	75 2f                	jne    b48 <sysEnter_Vector-0x12f4b8>
     b19:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b1e:	2f                   	das    
     b1f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b26:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b29:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b2d:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     b31:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b35:	65                   	gs
     b36:	2f                   	das    
     b37:	2e                   	cs
     b38:	2e                   	cs
     b39:	2f                   	das    
     b3a:	2e                   	cs
     b3b:	2e                   	cs
     b3c:	2f                   	das    
     b3d:	2e                   	cs
     b3e:	2e                   	cs
     b3f:	2f                   	das    
     b40:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     b44:	6a 2f                	push   0x2f
     b46:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     b49:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     b50:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b51:	65                   	gs
     b52:	6c                   	ins    BYTE PTR es:[edi],dx
     b53:	2f                   	das    
     b54:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b5b:	00 00                	add    BYTE PTR [eax],al
     b5d:	6d                   	ins    DWORD PTR es:[edi],dx
     b5e:	61                   	popa   
     b5f:	6c                   	ins    BYTE PTR es:[edi],dx
     b60:	6c                   	ins    BYTE PTR es:[edi],dx
     b61:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b62:	63 2e                	arpl   WORD PTR [esi],bp
     b64:	63 00                	arpl   WORD PTR [eax],ax
     b66:	01 00                	add    DWORD PTR [eax],eax
     b68:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b6b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b72:	63 
     b73:	2e                   	cs
     b74:	68 00 02 00 00       	push   0x200
     b79:	73 74                	jae    bef <sysEnter_Vector-0x12f411>
     b7b:	64                   	fs
     b7c:	64                   	fs
     b7d:	65                   	gs
     b7e:	66                   	data16
     b7f:	2e                   	cs
     b80:	68 00 02 00 00       	push   0x200
     b85:	6d                   	ins    DWORD PTR es:[edi],dx
     b86:	61                   	popa   
     b87:	6c                   	ins    BYTE PTR es:[edi],dx
     b88:	6c                   	ins    BYTE PTR es:[edi],dx
     b89:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b8a:	63 2e                	arpl   WORD PTR [esi],bp
     b8c:	68 00 03 00 00       	push   0x300
     b91:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     b94:	6d                   	ins    DWORD PTR es:[edi],dx
     b95:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b96:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b97:	2e                   	cs
     b98:	68 00 03 00 00       	push   0x300
     b9d:	73 79                	jae    c18 <sysEnter_Vector-0x12f3e8>
     b9f:	73 63                	jae    c04 <sysEnter_Vector-0x12f3fc>
     ba1:	61                   	popa   
     ba2:	6c                   	ins    BYTE PTR es:[edi],dx
     ba3:	6c                   	ins    BYTE PTR es:[edi],dx
     ba4:	73 2e                	jae    bd4 <sysEnter_Vector-0x12f42c>
     ba6:	68 00 04 00 00       	push   0x400
     bab:	00 00                	add    BYTE PTR [eax],al
     bad:	05 02 04 21 00       	add    eax,0x210402
     bb2:	9f                   	lahf   
     bb3:	03 15 01 08 21 02    	add    edx,DWORD PTR ds:0x2210801
     bb9:	24 13                	and    al,0x13
     bbb:	bb bb bc 69 f5       	mov    ebx,0xf569bcbb
     bc0:	92                   	xchg   edx,eax
     bc1:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     bc7:	04 01                	add    al,0x1
     bc9:	06                   	push   es
     bca:	66 06                	pushw  es
     bcc:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     bd1:	59                   	pop    ecx
     bd2:	31 08                	xor    DWORD PTR [eax],ecx
     bd4:	15 00 02 04 01       	adc    eax,0x1040200
     bd9:	06                   	push   es
     bda:	e4 06                	in     al,0x6
     bdc:	e7 68                	out    0x68,eax
     bde:	93                   	xchg   ebx,eax
     bdf:	ca 08 3d             	retf   0x3d08
     be2:	30 03                	xor    BYTE PTR [ebx],al
     be4:	74 90                	je     b76 <sysEnter_Vector-0x12f48a>
     be6:	3f                   	aas    
     be7:	03 0e                	add    ecx,DWORD PTR [esi]
     be9:	20 5b f3             	and    BYTE PTR [ebx-0xd],bl
     bec:	af                   	scas   eax,DWORD PTR es:[edi]
     bed:	00 02                	add    BYTE PTR [edx],al
     bef:	04 01                	add    al,0x1
     bf1:	06                   	push   es
     bf2:	d6                   	(bad)  
     bf3:	00 02                	add    BYTE PTR [edx],al
     bf5:	04 02                	add    al,0x2
     bf7:	ac                   	lods   al,BYTE PTR ds:[esi]
     bf8:	06                   	push   es
     bf9:	c9                   	leave  
     bfa:	59                   	pop    ecx
     bfb:	9f                   	lahf   
     bfc:	93                   	xchg   ebx,eax
     bfd:	00 02                	add    BYTE PTR [edx],al
     bff:	04 01                	add    al,0x1
     c01:	06                   	push   es
     c02:	c8 00 02 04          	enter  0x200,0x4
     c06:	02 9e 06 ca 59 31    	add    bl,BYTE PTR [esi+0x3159ca06]
     c0c:	08 14 67             	or     BYTE PTR [edi+eiz*2],dl
     c0f:	30 08                	xor    BYTE PTR [eax],cl
     c11:	22 00                	and    al,BYTE PTR [eax]
     c13:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     c16:	08 3e                	or     BYTE PTR [esi],bh
     c18:	30 ca                	xor    dl,cl
     c1a:	00 02                	add    BYTE PTR [edx],al
     c1c:	04 02                	add    al,0x2
     c1e:	08 3e                	or     BYTE PTR [esi],bh
     c20:	30 03                	xor    BYTE PTR [ebx],al
     c22:	72 90                	jb     bb4 <sysEnter_Vector-0x12f44c>
     c24:	00 02                	add    BYTE PTR [edx],al
     c26:	04 01                	add    al,0x1
     c28:	06                   	push   es
     c29:	c8 06 03 11          	enter  0x306,0x11
     c2d:	ac                   	lods   al,BYTE PTR ds:[esi]
     c2e:	69 08 25 75 69 67    	imul   ecx,DWORD PTR [eax],0x67697525
     c34:	75 08                	jne    c3e <sysEnter_Vector-0x12f3c2>
     c36:	91                   	xchg   ecx,eax
     c37:	bc 08 13 68 75       	mov    esp,0x75681308
     c3c:	08 13                	or     BYTE PTR [ebx],dl
     c3e:	02 37                	add    dh,BYTE PTR [edi]
     c40:	13 b0 08 13 08 91    	adc    esi,DWORD PTR [eax-0x6ef7ecf8]
     c46:	a0 bb 08 67 08       	mov    al,ds:0x86708bb
     c4b:	5a                   	pop    edx
     c4c:	08 3d 08 e5 f3 02    	or     BYTE PTR ds:0x2f3e508,bh
     c52:	26 13 bc ad ad 08 e7 	adc    edi,DWORD PTR es:[ebp+ebp*4+0x8e708ad]
     c59:	08 
     c5a:	e5 ad                	in     eax,0xad
     c5c:	91                   	xchg   ecx,eax
     c5d:	91                   	xchg   ecx,eax
     c5e:	75 08                	jne    c68 <sysEnter_Vector-0x12f398>
     c60:	13 a0 bb bd 08 e5    	adc    esp,DWORD PTR [eax-0x1af74245]
     c66:	91                   	xchg   ecx,eax
     c67:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     c6a:	91                   	xchg   ecx,eax
     c6b:	91                   	xchg   ecx,eax
     c6c:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     c71:	08 22                	or     BYTE PTR [edx],ah
     c73:	08 93 68 92 67 08    	or     BYTE PTR [ebx+0x8679268],dl
     c79:	67 00 02             	add    BYTE PTR [bp+si],al
     c7c:	04 01                	add    al,0x1
     c7e:	06                   	push   es
     c7f:	66 06                	pushw  es
     c81:	ad                   	lods   eax,DWORD PTR ds:[esi]
     c82:	84 67 77             	test   BYTE PTR [edi+0x77],ah
     c85:	08 13                	or     BYTE PTR [ebx],dl
     c87:	02 24 17             	add    ah,BYTE PTR [edi+edx*1]
     c8a:	08 e5                	or     ch,ah
     c8c:	08 93 d7 3d 5b f3    	or     BYTE PTR [ebx-0xca4c229],dl
     c92:	08 13                	or     BYTE PTR [ebx],dl
     c94:	31 f3                	xor    ebx,esi
     c96:	d7                   	xlat   BYTE PTR ds:[ebx]
     c97:	3f                   	aas    
     c98:	08 13                	or     BYTE PTR [ebx],dl
     c9a:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     ca0:	01 d7                	add    edi,edx
     ca2:	00 00                	add    BYTE PTR [eax],al
     ca4:	00 02                	add    BYTE PTR [edx],al
     ca6:	00 90 00 00 00 01    	add    BYTE PTR [eax+0x1000000],dl
     cac:	01 fb                	add    ebx,edi
     cae:	0e                   	push   cs
     caf:	0d 00 01 01 01       	or     eax,0x1010100
     cb4:	01 00                	add    DWORD PTR [eax],eax
     cb6:	00 00                	add    BYTE PTR [eax],al
     cb8:	01 00                	add    DWORD PTR [eax],eax
     cba:	00 01                	add    BYTE PTR [ecx],al
     cbc:	73 72                	jae    d30 <sysEnter_Vector-0x12f2d0>
     cbe:	63 00                	arpl   WORD PTR [eax],ax
     cc0:	2f                   	das    
     cc1:	68 6f 6d 65 2f       	push   0x2f656d6f
     cc6:	79 6f                	jns    d37 <sysEnter_Vector-0x12f2c9>
     cc8:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ccf:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     cd2:	73 73                	jae    d47 <sysEnter_Vector-0x12f2b9>
     cd4:	2f                   	das    
     cd5:	6c                   	ins    BYTE PTR es:[edi],dx
     cd6:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     cdd:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     ce3:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     ce9:	78 2d                	js     d18 <sysEnter_Vector-0x12f2e8>
     ceb:	67 6e                	outs   dx,BYTE PTR ds:[si]
     ced:	75 2f                	jne    d1e <sysEnter_Vector-0x12f2e2>
     cef:	35 2e 33 2e 30       	xor    eax,0x302e332e
     cf4:	2f                   	das    
     cf5:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cfc:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     cff:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     d03:	65 00 00             	add    BYTE PTR gs:[eax],al
     d06:	6d                   	ins    DWORD PTR es:[edi],dx
     d07:	65                   	gs
     d08:	6d                   	ins    DWORD PTR es:[edi],dx
     d09:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     d0c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d0f:	01 00                	add    DWORD PTR [eax],eax
     d11:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d14:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d1b:	63 
     d1c:	2e                   	cs
     d1d:	68 00 02 00 00       	push   0x200
     d22:	73 74                	jae    d98 <sysEnter_Vector-0x12f268>
     d24:	64                   	fs
     d25:	64                   	fs
     d26:	65                   	gs
     d27:	66                   	data16
     d28:	2e                   	cs
     d29:	68 00 02 00 00       	push   0x200
     d2e:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     d31:	6d                   	ins    DWORD PTR es:[edi],dx
     d32:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d33:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d34:	2e                   	cs
     d35:	68 00 03 00 00       	push   0x300
     d3a:	00 00                	add    BYTE PTR [eax],al
     d3c:	05 02 c8 27 00       	add    eax,0x27c802
     d41:	9f                   	lahf   
     d42:	03 0b                	add    ecx,DWORD PTR [ebx]
     d44:	01 f5                	add    ebp,esi
     d46:	d7                   	xlat   BYTE PTR ds:[ebx]
     d47:	d7                   	xlat   BYTE PTR ds:[ebx]
     d48:	68 91 67 68 83       	push   0x83686791
     d4d:	91                   	xchg   ecx,eax
     d4e:	91                   	xchg   ecx,eax
     d4f:	2f                   	das    
     d50:	08 1f                	or     BYTE PTR [edi],bl
     d52:	e8 08 57 ca 84       	call   84ca645f <sysEnter_Vector+0x84b7645f>
     d57:	68 83 67 68 83       	push   0x83686783
     d5c:	91                   	xchg   ecx,eax
     d5d:	91                   	xchg   ecx,eax
     d5e:	2f                   	das    
     d5f:	08 1f                	or     BYTE PTR [edi],bl
     d61:	e8 08 57 ca 5c       	call   5cca646e <sysEnter_Vector+0x5cb7646e>
     d66:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     d6c:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     d72:	3e                   	ds
     d73:	31 c9                	xor    ecx,ecx
     d75:	08 13                	or     BYTE PTR [ebx],dl
     d77:	02 02                	add    al,BYTE PTR [edx]
     d79:	00 01                	add    BYTE PTR [ecx],al
     d7b:	01 ba 00 00 00 02    	add    DWORD PTR [edx+0x2000000],edi
     d81:	00 90 00 00 00 01    	add    BYTE PTR [eax+0x1000000],dl
     d87:	01 fb                	add    ebx,edi
     d89:	0e                   	push   cs
     d8a:	0d 00 01 01 01       	or     eax,0x1010100
     d8f:	01 00                	add    DWORD PTR [eax],eax
     d91:	00 00                	add    BYTE PTR [eax],al
     d93:	01 00                	add    DWORD PTR [eax],eax
     d95:	00 01                	add    BYTE PTR [ecx],al
     d97:	73 72                	jae    e0b <sysEnter_Vector-0x12f1f5>
     d99:	63 00                	arpl   WORD PTR [eax],ax
     d9b:	2f                   	das    
     d9c:	68 6f 6d 65 2f       	push   0x2f656d6f
     da1:	79 6f                	jns    e12 <sysEnter_Vector-0x12f1ee>
     da3:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     daa:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     dad:	73 73                	jae    e22 <sysEnter_Vector-0x12f1de>
     daf:	2f                   	das    
     db0:	6c                   	ins    BYTE PTR es:[edi],dx
     db1:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     db8:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     dbe:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     dc4:	78 2d                	js     df3 <sysEnter_Vector-0x12f20d>
     dc6:	67 6e                	outs   dx,BYTE PTR ds:[si]
     dc8:	75 2f                	jne    df9 <sysEnter_Vector-0x12f207>
     dca:	35 2e 33 2e 30       	xor    eax,0x302e332e
     dcf:	2f                   	das    
     dd0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     dd7:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     dda:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     dde:	65 00 00             	add    BYTE PTR gs:[eax],al
     de1:	6d                   	ins    DWORD PTR es:[edi],dx
     de2:	65                   	gs
     de3:	6d                   	ins    DWORD PTR es:[edi],dx
     de4:	73 65                	jae    e4b <sysEnter_Vector-0x12f1b5>
     de6:	74 2e                	je     e16 <sysEnter_Vector-0x12f1ea>
     de8:	63 00                	arpl   WORD PTR [eax],ax
     dea:	01 00                	add    DWORD PTR [eax],eax
     dec:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     def:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     df6:	63 
     df7:	2e                   	cs
     df8:	68 00 02 00 00       	push   0x200
     dfd:	73 74                	jae    e73 <sysEnter_Vector-0x12f18d>
     dff:	64                   	fs
     e00:	64                   	fs
     e01:	65                   	gs
     e02:	66                   	data16
     e03:	2e                   	cs
     e04:	68 00 02 00 00       	push   0x200
     e09:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     e0c:	6d                   	ins    DWORD PTR es:[edi],dx
     e0d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e0e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e0f:	2e                   	cs
     e10:	68 00 03 00 00       	push   0x300
     e15:	00 00                	add    BYTE PTR [eax],al
     e17:	05 02 84 29 00       	add    eax,0x298402
     e1c:	9f                   	lahf   
     e1d:	1a f3                	sbb    dh,bl
     e1f:	67 67 08 83 67 08    	addr32 or BYTE PTR [bp+di+0x867],al
     e25:	ca 9f 2f             	retf   0x2f9f
     e28:	d5 bd                	aad    0xbd
     e2a:	9f                   	lahf   
     e2b:	2f                   	das    
     e2c:	f1                   	icebp  
     e2d:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     e32:	c9                   	leave  
     e33:	08 13                	or     BYTE PTR [ebx],dl
     e35:	02 02                	add    al,BYTE PTR [edx]
     e37:	00 01                	add    BYTE PTR [ecx],al
     e39:	01 df                	add    edi,ebx
     e3b:	00 00                	add    BYTE PTR [eax],al
     e3d:	00 02                	add    BYTE PTR [edx],al
     e3f:	00 c1                	add    cl,al
     e41:	00 00                	add    BYTE PTR [eax],al
     e43:	00 01                	add    BYTE PTR [ecx],al
     e45:	01 fb                	add    ebx,edi
     e47:	0e                   	push   cs
     e48:	0d 00 01 01 01       	or     eax,0x1010100
     e4d:	01 00                	add    DWORD PTR [eax],eax
     e4f:	00 00                	add    BYTE PTR [eax],al
     e51:	01 00                	add    DWORD PTR [eax],eax
     e53:	00 01                	add    BYTE PTR [ecx],al
     e55:	73 72                	jae    ec9 <sysEnter_Vector-0x12f137>
     e57:	63 00                	arpl   WORD PTR [eax],ax
     e59:	2f                   	das    
     e5a:	68 6f 6d 65 2f       	push   0x2f656d6f
     e5f:	79 6f                	jns    ed0 <sysEnter_Vector-0x12f130>
     e61:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e68:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     e6b:	73 73                	jae    ee0 <sysEnter_Vector-0x12f120>
     e6d:	2f                   	das    
     e6e:	6c                   	ins    BYTE PTR es:[edi],dx
     e6f:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     e76:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     e7c:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     e82:	78 2d                	js     eb1 <sysEnter_Vector-0x12f14f>
     e84:	67 6e                	outs   dx,BYTE PTR ds:[si]
     e86:	75 2f                	jne    eb7 <sysEnter_Vector-0x12f149>
     e88:	35 2e 33 2e 30       	xor    eax,0x302e332e
     e8d:	2f                   	das    
     e8e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e95:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     e98:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     e9c:	65                   	gs
     e9d:	2f                   	das    
     e9e:	2e                   	cs
     e9f:	2e                   	cs
     ea0:	2f                   	das    
     ea1:	2e                   	cs
     ea2:	2e                   	cs
     ea3:	2f                   	das    
     ea4:	2e                   	cs
     ea5:	2e                   	cs
     ea6:	2f                   	das    
     ea7:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     eab:	6a 2f                	push   0x2f
     ead:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     eb0:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     eb7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     eb8:	65                   	gs
     eb9:	6c                   	ins    BYTE PTR es:[edi],dx
     eba:	2f                   	das    
     ebb:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ec2:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     ec5:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ec9:	65 00 00             	add    BYTE PTR gs:[eax],al
     ecc:	70 69                	jo     f37 <sysEnter_Vector-0x12f0c9>
     ece:	70 65                	jo     f35 <sysEnter_Vector-0x12f0cb>
     ed0:	5f                   	pop    edi
     ed1:	6c                   	ins    BYTE PTR es:[edi],dx
     ed2:	69 62 2e 63 00 01 00 	imul   esp,DWORD PTR [edx+0x2e],0x10063
     ed9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     edc:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     ee3:	63 
     ee4:	2e                   	cs
     ee5:	68 00 02 00 00       	push   0x200
     eea:	73 79                	jae    f65 <sysEnter_Vector-0x12f09b>
     eec:	73 63                	jae    f51 <sysEnter_Vector-0x12f0af>
     eee:	61                   	popa   
     eef:	6c                   	ins    BYTE PTR es:[edi],dx
     ef0:	6c                   	ins    BYTE PTR es:[edi],dx
     ef1:	73 2e                	jae    f21 <sysEnter_Vector-0x12f0df>
     ef3:	68 00 03 00 00       	push   0x300
     ef8:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
     efb:	6d                   	ins    DWORD PTR es:[edi],dx
     efc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     efd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     efe:	2e                   	cs
     eff:	68 00 04 00 00       	push   0x400
     f04:	00 00                	add    BYTE PTR [eax],al
     f06:	05 02 6c 2a 00       	add    eax,0x2a6c02
     f0b:	9f                   	lahf   
     f0c:	03 0a                	add    ecx,DWORD PTR [edx]
     f0e:	01 08                	add    DWORD PTR [eax],ecx
     f10:	13 08                	adc    ecx,DWORD PTR [eax]
     f12:	2f                   	das    
     f13:	5b                   	pop    ebx
     f14:	08 13                	or     BYTE PTR [ebx],dl
     f16:	08 75 02             	or     BYTE PTR [ebp+0x2],dh
     f19:	05 00 01 01 54       	add    eax,0x54010100
     f1e:	01 00                	add    DWORD PTR [eax],eax
     f20:	00 02                	add    BYTE PTR [edx],al
     f22:	00 a8 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ch
     f28:	01 fb                	add    ebx,edi
     f2a:	0e                   	push   cs
     f2b:	0d 00 01 01 01       	or     eax,0x1010100
     f30:	01 00                	add    DWORD PTR [eax],eax
     f32:	00 00                	add    BYTE PTR [eax],al
     f34:	01 00                	add    DWORD PTR [eax],eax
     f36:	00 01                	add    BYTE PTR [ecx],al
     f38:	73 72                	jae    fac <sysEnter_Vector-0x12f054>
     f3a:	63 00                	arpl   WORD PTR [eax],ax
     f3c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f43:	00 2f                	add    BYTE PTR [edi],ch
     f45:	68 6f 6d 65 2f       	push   0x2f656d6f
     f4a:	79 6f                	jns    fbb <sysEnter_Vector-0x12f045>
     f4c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f53:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f56:	73 73                	jae    fcb <sysEnter_Vector-0x12f035>
     f58:	2f                   	das    
     f59:	6c                   	ins    BYTE PTR es:[edi],dx
     f5a:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f61:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f67:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f6d:	78 2d                	js     f9c <sysEnter_Vector-0x12f064>
     f6f:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f71:	75 2f                	jne    fa2 <sysEnter_Vector-0x12f05e>
     f73:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f78:	2f                   	das    
     f79:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f80:	00 00                	add    BYTE PTR [eax],al
     f82:	70 72                	jo     ff6 <sysEnter_Vector-0x12f00a>
     f84:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f85:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     f88:	66 6f                	outs   dx,WORD PTR ds:[esi]
     f8a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f8d:	01 00                	add    DWORD PTR [eax],eax
     f8f:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     f92:	6f                   	outs   dx,DWORD PTR ds:[esi]
     f93:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     f96:	66 6f                	outs   dx,WORD PTR ds:[esi]
     f98:	2e                   	cs
     f99:	68 00 02 00 00       	push   0x200
     f9e:	73 74                	jae    1014 <sysEnter_Vector-0x12efec>
     fa0:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     fa7:	63 
     fa8:	2e                   	cs
     fa9:	68 00 03 00 00       	push   0x300
     fae:	74 69                	je     1019 <sysEnter_Vector-0x12efe7>
     fb0:	6d                   	ins    DWORD PTR es:[edi],dx
     fb1:	65                   	gs
     fb2:	2e                   	cs
     fb3:	68 00 02 00 00       	push   0x200
     fb8:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
     fbf:	02 00                	add    al,BYTE PTR [eax]
     fc1:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     fc4:	6d                   	ins    DWORD PTR es:[edi],dx
     fc5:	6d                   	ins    DWORD PTR es:[edi],dx
     fc6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fc7:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fc8:	2e                   	cs
     fc9:	68 00 02 00 00       	push   0x200
     fce:	00 00                	add    BYTE PTR [eax],al
     fd0:	05 02 c4 2a 00       	add    eax,0x2ac402
     fd5:	9f                   	lahf   
     fd6:	03 10                	add    edx,DWORD PTR [eax]
     fd8:	01 08                	add    DWORD PTR [eax],ecx
     fda:	59                   	pop    ecx
     fdb:	f4                   	hlt    
     fdc:	79 08                	jns    fe6 <sysEnter_Vector-0x12f01a>
     fde:	2f                   	das    
     fdf:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
     fe2:	5a                   	pop    edx
     fe3:	08 4b 5a             	or     BYTE PTR [ebx+0x5a],cl
     fe6:	08 a1 08 13 84 5a    	or     BYTE PTR [ecx+0x5a841308],ah
     fec:	bb 5a 08 59 5a       	mov    ebx,0x5a59085a
     ff1:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
     ff4:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
     ff7:	08 59 5a             	or     BYTE PTR [ecx+0x5a],bl
     ffa:	08 83 08 af 57 08    	or     BYTE PTR [ebx+0x857af08],al
    1000:	59                   	pop    ecx
    1001:	5a                   	pop    edx
    1002:	08 bb 08 f3 08 e5    	or     BYTE PTR [ebx-0x1af70cf8],bh
    1008:	08 9f 5a 08 59 08    	or     BYTE PTR [edi+0x859085a],bl
    100e:	c9                   	leave  
    100f:	08 f4                	or     ah,dh
    1011:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    1014:	83 08 59             	or     DWORD PTR [eax],0x59
    1017:	02 2e                	add    ch,BYTE PTR [esi]
    1019:	13 02                	adc    eax,DWORD PTR [edx]
    101b:	39 13                	cmp    DWORD PTR [ebx],edx
    101d:	bd 30 08 59 30       	mov    ebp,0x30590830
    1022:	08 59 22             	or     BYTE PTR [ecx+0x22],bl
    1025:	4b                   	dec    ebx
    1026:	03 46 08             	add    eax,DWORD PTR [esi+0x8]
    1029:	3c 03                	cmp    al,0x3
    102b:	3c 9e                	cmp    al,0x9e
    102d:	3e                   	ds
    102e:	77 f3                	ja     1023 <sysEnter_Vector-0x12efdd>
    1030:	08 2f                	or     BYTE PTR [edi],ch
    1032:	31 08                	xor    DWORD PTR [eax],ecx
    1034:	5b                   	pop    ebx
    1035:	9f                   	lahf   
    1036:	08 5b 08             	or     BYTE PTR [ebx+0x8],bl
    1039:	f6 bc 08 e6 08 83 02 	idiv   BYTE PTR [eax+ecx*1+0x28308e6]
    1040:	24 13                	and    al,0x13
    1042:	08 83 08 f4 08 ad    	or     BYTE PTR [ebx-0x52f70bf8],al
    1048:	a0 08 83 d8 08       	mov    al,ds:0x8d88308
    104d:	ae                   	scas   al,BYTE PTR es:[edi]
    104e:	02 27                	add    ah,BYTE PTR [edi]
    1050:	13 08                	adc    ecx,DWORD PTR [eax]
    1052:	4b                   	dec    ebx
    1053:	08 4b 02             	or     BYTE PTR [ebx+0x2],cl
    1056:	22 13                	and    dl,BYTE PTR [ebx]
    1058:	08 3d 08 75 03 71    	or     BYTE PTR ds:0x71037508,bh
    105e:	ac                   	lods   al,BYTE PTR ds:[esi]
    105f:	00 02                	add    BYTE PTR [edx],al
    1061:	04 02                	add    al,0x2
    1063:	03 78 20             	add    edi,DWORD PTR [eax+0x20]
    1066:	00 02                	add    BYTE PTR [edx],al
    1068:	04 01                	add    al,0x1
    106a:	06                   	push   es
    106b:	4a                   	dec    edx
    106c:	06                   	push   es
    106d:	03 1d ba 02 08 00    	add    ebx,DWORD PTR ds:0x802ba
    1073:	01 01                	add    DWORD PTR [ecx],eax
    1075:	c4 01                	les    eax,FWORD PTR [ecx]
    1077:	00 00                	add    BYTE PTR [eax],al
    1079:	02 00                	add    al,BYTE PTR [eax]
    107b:	81 00 00 00 01 01    	add    DWORD PTR [eax],0x1010000
    1081:	fb                   	sti    
    1082:	0e                   	push   cs
    1083:	0d 00 01 01 01       	or     eax,0x1010100
    1088:	01 00                	add    DWORD PTR [eax],eax
    108a:	00 00                	add    BYTE PTR [eax],al
    108c:	01 00                	add    DWORD PTR [eax],eax
    108e:	00 01                	add    BYTE PTR [ecx],al
    1090:	73 72                	jae    1104 <sysEnter_Vector-0x12eefc>
    1092:	63 00                	arpl   WORD PTR [eax],ax
    1094:	2f                   	das    
    1095:	68 6f 6d 65 2f       	push   0x2f656d6f
    109a:	79 6f                	jns    110b <sysEnter_Vector-0x12eef5>
    109c:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    10a3:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    10a6:	73 73                	jae    111b <sysEnter_Vector-0x12eee5>
    10a8:	2f                   	das    
    10a9:	6c                   	ins    BYTE PTR es:[edi],dx
    10aa:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    10b1:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    10b7:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    10bd:	78 2d                	js     10ec <sysEnter_Vector-0x12ef14>
    10bf:	67 6e                	outs   dx,BYTE PTR ds:[si]
    10c1:	75 2f                	jne    10f2 <sysEnter_Vector-0x12ef0e>
    10c3:	35 2e 33 2e 30       	xor    eax,0x302e332e
    10c8:	2f                   	das    
    10c9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10d0:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    10d3:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    10d7:	65 00 00             	add    BYTE PTR gs:[eax],al
    10da:	73 70                	jae    114c <sysEnter_Vector-0x12eeb4>
    10dc:	72 69                	jb     1147 <sysEnter_Vector-0x12eeb9>
    10de:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10df:	74 66                	je     1147 <sysEnter_Vector-0x12eeb9>
    10e1:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10e4:	01 00                	add    DWORD PTR [eax],eax
    10e6:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10e9:	64                   	fs
    10ea:	61                   	popa   
    10eb:	72 67                	jb     1154 <sysEnter_Vector-0x12eeac>
    10ed:	2e                   	cs
    10ee:	68 00 02 00 00       	push   0x200
    10f3:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    10f6:	6d                   	ins    DWORD PTR es:[edi],dx
    10f7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    10f8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10f9:	2e                   	cs
    10fa:	68 00 03 00 00       	push   0x300
    10ff:	00 00                	add    BYTE PTR [eax],al
    1101:	05 02 88 30 00       	add    eax,0x308802
    1106:	9f                   	lahf   
    1107:	03 0b                	add    ecx,DWORD PTR [ebx]
    1109:	01 08                	add    DWORD PTR [eax],ecx
    110b:	13 76 2f             	adc    esi,DWORD PTR [esi+0x2f]
    110e:	02 29                	add    ch,BYTE PTR [ecx]
    1110:	11 08                	adc    DWORD PTR [eax],ecx
    1112:	30 3d 03 12 66 03    	xor    BYTE PTR ds:0x3661203,bh
    1118:	0a 08                	or     cl,BYTE PTR [eax]
    111a:	2e                   	cs
    111b:	91                   	xchg   ecx,eax
    111c:	9f                   	lahf   
    111d:	4b                   	dec    ebx
    111e:	00 02                	add    BYTE PTR [edx],al
    1120:	04 01                	add    al,0x1
    1122:	06                   	push   es
    1123:	66 06                	pushw  es
    1125:	67 9f                	addr16 lahf 
    1127:	00 02                	add    BYTE PTR [edx],al
    1129:	04 01                	add    al,0x1
    112b:	06                   	push   es
    112c:	9e                   	sahf   
    112d:	00 02                	add    BYTE PTR [edx],al
    112f:	04 02                	add    al,0x2
    1131:	74 00                	je     1133 <sysEnter_Vector-0x12eecd>
    1133:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1136:	58                   	pop    eax
    1137:	00 02                	add    BYTE PTR [edx],al
    1139:	04 04                	add    al,0x4
    113b:	06                   	push   es
    113c:	3d 00 02 04 04       	cmp    eax,0x4040200
    1141:	4b                   	dec    ebx
    1142:	9f                   	lahf   
    1143:	67 4b                	addr16 dec ebx
    1145:	3d 67 9f 4b 67       	cmp    eax,0x674b9f67
    114a:	9f                   	lahf   
    114b:	4b                   	dec    ebx
    114c:	4d                   	dec    ebp
    114d:	9f                   	lahf   
    114e:	67 67 67 4c          	addr32 addr32 addr16 dec esp
    1152:	75 67                	jne    11bb <sysEnter_Vector-0x12ee45>
    1154:	f5                   	cmc    
    1155:	02 3d 11 68 83 67    	add    bh,BYTE PTR ds:0x67836811
    115b:	67 9f                	addr16 lahf 
    115d:	2f                   	das    
    115e:	b9 ca 67 e5 9f       	mov    ecx,0x9fe567ca
    1163:	67 d7                	xlat   BYTE PTR ds:[bx]
    1165:	67 bb 08 23 9f 2f    	addr16 mov ebx,0x2f9f2308
    116b:	e3 ca                	jecxz  1137 <sysEnter_Vector-0x12eec9>
    116d:	2f                   	das    
    116e:	b9 d8 2f 08 57       	mov    ecx,0x57082fd8
    1173:	ca 2f b9             	retf   0xb92f
    1176:	ca 00 02             	retf   0x200
    1179:	04 01                	add    al,0x1
    117b:	3d 76 03 0e 08       	cmp    eax,0x80e0376
    1180:	20 ad 9f 08 13 5c    	and    BYTE PTR [ebp+0x5c13089f],ch
    1186:	76 91                	jbe    1119 <sysEnter_Vector-0x12eee7>
    1188:	08 d8                	or     al,bl
    118a:	4b                   	dec    ebx
    118b:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    118e:	4b                   	dec    ebx
    118f:	30 4b 30             	xor    BYTE PTR [ebx+0x30],cl
    1192:	4b                   	dec    ebx
    1193:	32 75 08             	xor    dh,BYTE PTR [ebp+0x8]
    1196:	13 08                	adc    ecx,DWORD PTR [eax]
    1198:	13 9f 92 d7 67 3d    	adc    ebx,DWORD PTR [edi+0x3d67d792]
    119e:	4f                   	dec    edi
    119f:	75 9f                	jne    1140 <sysEnter_Vector-0x12eec0>
    11a1:	91                   	xchg   ecx,eax
    11a2:	08 13                	or     BYTE PTR [ebx],dl
    11a4:	08 13                	or     BYTE PTR [ebx],dl
    11a6:	9f                   	lahf   
    11a7:	92                   	xchg   edx,eax
    11a8:	d8 67 78             	fsub   DWORD PTR [edi+0x78]
    11ab:	75 00                	jne    11ad <sysEnter_Vector-0x12ee53>
    11ad:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11b0:	06                   	push   es
    11b1:	9e                   	sahf   
    11b2:	00 02                	add    BYTE PTR [edx],al
    11b4:	04 02                	add    al,0x2
    11b6:	9e                   	sahf   
    11b7:	06                   	push   es
    11b8:	9f                   	lahf   
    11b9:	bb 94 76 02 23       	mov    ebx,0x23027694
    11be:	14 9f                	adc    al,0x9f
    11c0:	2f                   	das    
    11c1:	b9 a0 08 59 2f       	mov    ecx,0x2f5908a0
    11c6:	b9 a0 5b d7 67       	mov    ecx,0x67d75ba0
    11cb:	08 30                	or     BYTE PTR [eax],dh
    11cd:	76 9f                	jbe    116e <sysEnter_Vector-0x12ee92>
    11cf:	2f                   	das    
    11d0:	b9 d8 00 02 04       	mov    ecx,0x40200d8
    11d5:	03 91 00 02 04 03    	add    edx,DWORD PTR [ecx+0x3040200]
    11db:	08 65 00             	or     BYTE PTR [ebp+0x0],ah
    11de:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    11e1:	06                   	push   es
    11e2:	4a                   	dec    edx
    11e3:	06                   	push   es
    11e4:	84 2f                	test   BYTE PTR [edi],ch
    11e6:	b9 d8 5b 67 75       	mov    ecx,0x75675bd8
    11eb:	4d                   	dec    ebp
    11ec:	ab                   	stos   DWORD PTR es:[edi],eax
    11ed:	08 bd 5b 67 d7 cd    	or     BYTE PTR [ebp-0x322898a5],bh
    11f3:	55                   	push   ebp
    11f4:	d7                   	xlat   BYTE PTR ds:[ebx]
    11f5:	ca 5b bb             	retf   0xbb5b
    11f8:	5c                   	pop    esp
    11f9:	75 31                	jne    122c <sysEnter_Vector-0x12edd4>
    11fb:	4c                   	dec    esp
    11fc:	75 32                	jne    1230 <sysEnter_Vector-0x12edd0>
    11fe:	4c                   	dec    esp
    11ff:	31 bb 9f 08 15 57    	xor    DWORD PTR [ebx+0x5715089f],edi
    1205:	91                   	xchg   ecx,eax
    1206:	03 78 58             	add    edi,DWORD PTR [eax+0x58]
    1209:	03 0a                	add    ecx,DWORD PTR [edx]
    120b:	20 67 f3             	and    BYTE PTR [edi-0xd],ah
    120e:	67 08 2f             	or     BYTE PTR [bx],ch
    1211:	9f                   	lahf   
    1212:	91                   	xchg   ecx,eax
    1213:	9f                   	lahf   
    1214:	f4                   	hlt    
    1215:	d7                   	xlat   BYTE PTR ds:[ebx]
    1216:	00 02                	add    BYTE PTR [edx],al
    1218:	04 02                	add    al,0x2
    121a:	03 e8                	add    ebp,eax
    121c:	7e 08                	jle    1226 <sysEnter_Vector-0x12edda>
    121e:	f2 00 02             	repnz add BYTE PTR [edx],al
    1221:	04 01                	add    al,0x1
    1223:	06                   	push   es
    1224:	90                   	nop
    1225:	06                   	push   es
    1226:	03 9a 01 d6 67 9f    	add    ebx,DWORD PTR [edx-0x609829ff]
    122c:	5b                   	pop    ebx
    122d:	f6 67 08             	mul    BYTE PTR [edi+0x8]
    1230:	76 3d                	jbe    126f <sysEnter_Vector-0x12ed91>
    1232:	31 f6                	xor    esi,esi
    1234:	67 08 76 3d          	or     BYTE PTR [bp+0x3d],dh
    1238:	02 02                	add    al,BYTE PTR [edx]
    123a:	00 01                	add    BYTE PTR [ecx],al
    123c:	01 57 00             	add    DWORD PTR [edi+0x0],edx
    123f:	00 00                	add    BYTE PTR [eax],al
    1241:	02 00                	add    al,BYTE PTR [eax]
    1243:	36 00 00             	add    BYTE PTR ss:[eax],al
    1246:	00 01                	add    BYTE PTR [ecx],al
    1248:	01 fb                	add    ebx,edi
    124a:	0e                   	push   cs
    124b:	0d 00 01 01 01       	or     eax,0x1010100
    1250:	01 00                	add    DWORD PTR [eax],eax
    1252:	00 00                	add    BYTE PTR [eax],al
    1254:	01 00                	add    DWORD PTR [eax],eax
    1256:	00 01                	add    BYTE PTR [ecx],al
    1258:	73 72                	jae    12cc <sysEnter_Vector-0x12ed34>
    125a:	63 00                	arpl   WORD PTR [eax],ax
    125c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1263:	00 00                	add    BYTE PTR [eax],al
    1265:	73 74                	jae    12db <sysEnter_Vector-0x12ed25>
    1267:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
    126e:	00 
    126f:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1272:	6d                   	ins    DWORD PTR es:[edi],dx
    1273:	6d                   	ins    DWORD PTR es:[edi],dx
    1274:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1275:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1276:	2e                   	cs
    1277:	68 00 02 00 00       	push   0x200
    127c:	00 00                	add    BYTE PTR [eax],al
    127e:	05 02 d4 37 00       	add    eax,0x37d402
    1283:	9f                   	lahf   
    1284:	03 11                	add    edx,DWORD PTR [ecx]
    1286:	01 08                	add    DWORD PTR [eax],ecx
    1288:	22 76 08             	and    dh,BYTE PTR [esi+0x8]
    128b:	31 d7                	xor    edi,edx
    128d:	d7                   	xlat   BYTE PTR ds:[ebx]
    128e:	d7                   	xlat   BYTE PTR ds:[ebx]
    128f:	d7                   	xlat   BYTE PTR ds:[ebx]
    1290:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1291:	e6 21                	out    0x21,al
    1293:	02 05 00 01 01 bb    	add    al,BYTE PTR ds:0xbb010100
    1299:	00 00                	add    BYTE PTR [eax],al
    129b:	00 02                	add    BYTE PTR [edx],al
    129d:	00 88 00 00 00 01    	add    BYTE PTR [eax+0x1000000],cl
    12a3:	01 fb                	add    ebx,edi
    12a5:	0e                   	push   cs
    12a6:	0d 00 01 01 01       	or     eax,0x1010100
    12ab:	01 00                	add    DWORD PTR [eax],eax
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	01 00                	add    DWORD PTR [eax],eax
    12b1:	00 01                	add    BYTE PTR [ecx],al
    12b3:	73 72                	jae    1327 <sysEnter_Vector-0x12ecd9>
    12b5:	63 2f                	arpl   WORD PTR [edi],bp
    12b7:	73 74                	jae    132d <sysEnter_Vector-0x12ecd3>
    12b9:	72 69                	jb     1324 <sysEnter_Vector-0x12ecdc>
    12bb:	6e                   	outs   dx,BYTE PTR ds:[esi]
    12bc:	67 73 00             	addr16 jae 12bf <sysEnter_Vector-0x12ed41>
    12bf:	2f                   	das    
    12c0:	68 6f 6d 65 2f       	push   0x2f656d6f
    12c5:	79 6f                	jns    1336 <sysEnter_Vector-0x12ecca>
    12c7:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    12ce:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    12d1:	73 73                	jae    1346 <sysEnter_Vector-0x12ecba>
    12d3:	2f                   	das    
    12d4:	6c                   	ins    BYTE PTR es:[edi],dx
    12d5:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    12dc:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    12e2:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    12e8:	78 2d                	js     1317 <sysEnter_Vector-0x12ece9>
    12ea:	67 6e                	outs   dx,BYTE PTR ds:[si]
    12ec:	75 2f                	jne    131d <sysEnter_Vector-0x12ece3>
    12ee:	35 2e 33 2e 30       	xor    eax,0x302e332e
    12f3:	2f                   	das    
    12f4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    12fb:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    12fe:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1302:	65 00 00             	add    BYTE PTR gs:[eax],al
    1305:	73 74                	jae    137b <sysEnter_Vector-0x12ec85>
    1307:	72 63                	jb     136c <sysEnter_Vector-0x12ec94>
    1309:	61                   	popa   
    130a:	74 2e                	je     133a <sysEnter_Vector-0x12ecc6>
    130c:	63 00                	arpl   WORD PTR [eax],ax
    130e:	01 00                	add    DWORD PTR [eax],eax
    1310:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1313:	64                   	fs
    1314:	64                   	fs
    1315:	65                   	gs
    1316:	66                   	data16
    1317:	2e                   	cs
    1318:	68 00 02 00 00       	push   0x200
    131d:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1320:	6d                   	ins    DWORD PTR es:[edi],dx
    1321:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1322:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1323:	2e                   	cs
    1324:	68 00 03 00 00       	push   0x300
    1329:	00 00                	add    BYTE PTR [eax],al
    132b:	05 02 58 38 00       	add    eax,0x385802
    1330:	9f                   	lahf   
    1331:	03 1e                	add    ebx,DWORD PTR [esi]
    1333:	01 08                	add    DWORD PTR [eax],ecx
    1335:	21 02                	and    DWORD PTR [edx],eax
    1337:	24 13                	and    al,0x13
    1339:	3d 5b 08 21 02       	cmp    eax,0x221085b
    133e:	24 13                	and    al,0x13
    1340:	3d 5b 08 21 75       	cmp    eax,0x7521085b
    1345:	08 14 83             	or     BYTE PTR [ebx+eax*4],dl
    1348:	84 68 02             	test   BYTE PTR [eax+0x2],ch
    134b:	27                   	daa    
    134c:	13 3d 5b f3 08 3d    	adc    edi,DWORD PTR ds:0x3d08f35b
    1352:	02 02                	add    al,BYTE PTR [edx]
    1354:	00 01                	add    BYTE PTR [ecx],al
    1356:	01 b8 00 00 00 02    	add    DWORD PTR [eax+0x2000000],edi
    135c:	00 96 00 00 00 01    	add    BYTE PTR [esi+0x1000000],dl
    1362:	01 fb                	add    ebx,edi
    1364:	0e                   	push   cs
    1365:	0d 00 01 01 01       	or     eax,0x1010100
    136a:	01 00                	add    DWORD PTR [eax],eax
    136c:	00 00                	add    BYTE PTR [eax],al
    136e:	01 00                	add    DWORD PTR [eax],eax
    1370:	00 01                	add    BYTE PTR [ecx],al
    1372:	73 72                	jae    13e6 <sysEnter_Vector-0x12ec1a>
    1374:	63 2f                	arpl   WORD PTR [edi],bp
    1376:	73 74                	jae    13ec <sysEnter_Vector-0x12ec14>
    1378:	72 69                	jb     13e3 <sysEnter_Vector-0x12ec1d>
    137a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    137b:	67 73 00             	addr16 jae 137e <sysEnter_Vector-0x12ec82>
    137e:	2f                   	das    
    137f:	68 6f 6d 65 2f       	push   0x2f656d6f
    1384:	79 6f                	jns    13f5 <sysEnter_Vector-0x12ec0b>
    1386:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    138d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1390:	73 73                	jae    1405 <sysEnter_Vector-0x12ebfb>
    1392:	2f                   	das    
    1393:	6c                   	ins    BYTE PTR es:[edi],dx
    1394:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    139b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    13a1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    13a7:	78 2d                	js     13d6 <sysEnter_Vector-0x12ec2a>
    13a9:	67 6e                	outs   dx,BYTE PTR ds:[si]
    13ab:	75 2f                	jne    13dc <sysEnter_Vector-0x12ec24>
    13ad:	35 2e 33 2e 30       	xor    eax,0x302e332e
    13b2:	2f                   	das    
    13b3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13ba:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    13bd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    13c1:	65 00 00             	add    BYTE PTR gs:[eax],al
    13c4:	73 74                	jae    143a <sysEnter_Vector-0x12ebc6>
    13c6:	72 63                	jb     142b <sysEnter_Vector-0x12ebd5>
    13c8:	6d                   	ins    DWORD PTR es:[edi],dx
    13c9:	70 2e                	jo     13f9 <sysEnter_Vector-0x12ec07>
    13cb:	63 00                	arpl   WORD PTR [eax],ax
    13cd:	01 00                	add    DWORD PTR [eax],eax
    13cf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    13d2:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    13d9:	63 
    13da:	2e                   	cs
    13db:	68 00 02 00 00       	push   0x200
    13e0:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    13e3:	6d                   	ins    DWORD PTR es:[edi],dx
    13e4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    13e5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13e6:	2e                   	cs
    13e7:	68 00 03 00 00       	push   0x300
    13ec:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    13f3:	03 00                	add    eax,DWORD PTR [eax]
    13f5:	00 00                	add    BYTE PTR [eax],al
    13f7:	00 05 02 6c 39 00    	add    BYTE PTR ds:0x396c02,al
    13fd:	9f                   	lahf   
    13fe:	03 1a                	add    ebx,DWORD PTR [edx]
    1400:	01 08                	add    DWORD PTR [eax],ecx
    1402:	21 3d 41 ad ad 67    	and    DWORD PTR ds:0x67adad41,edi
    1408:	d8 92 bb 77 c9 d7    	fcom   DWORD PTR [edx-0x28368845]
    140e:	02 02                	add    al,BYTE PTR [edx]
    1410:	00 01                	add    BYTE PTR [ecx],al
    1412:	01 6b 00             	add    DWORD PTR [ebx+0x0],ebp
    1415:	00 00                	add    BYTE PTR [eax],al
    1417:	02 00                	add    al,BYTE PTR [eax]
    1419:	2b 00                	sub    eax,DWORD PTR [eax]
    141b:	00 00                	add    BYTE PTR [eax],al
    141d:	01 01                	add    DWORD PTR [ecx],eax
    141f:	fb                   	sti    
    1420:	0e                   	push   cs
    1421:	0d 00 01 01 01       	or     eax,0x1010100
    1426:	01 00                	add    DWORD PTR [eax],eax
    1428:	00 00                	add    BYTE PTR [eax],al
    142a:	01 00                	add    DWORD PTR [eax],eax
    142c:	00 01                	add    BYTE PTR [ecx],al
    142e:	73 72                	jae    14a2 <sysEnter_Vector-0x12eb5e>
    1430:	63 2f                	arpl   WORD PTR [edi],bp
    1432:	73 74                	jae    14a8 <sysEnter_Vector-0x12eb58>
    1434:	72 69                	jb     149f <sysEnter_Vector-0x12eb61>
    1436:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1437:	67 73 00             	addr16 jae 143a <sysEnter_Vector-0x12ebc6>
    143a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    143d:	72 63                	jb     14a2 <sysEnter_Vector-0x12eb5e>
    143f:	70 79                	jo     14ba <sysEnter_Vector-0x12eb46>
    1441:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1444:	01 00                	add    DWORD PTR [eax],eax
    1446:	00 00                	add    BYTE PTR [eax],al
    1448:	00 05 02 e8 39 00    	add    BYTE PTR ds:0x39e802,al
    144e:	9f                   	lahf   
    144f:	16                   	push   ss
    1450:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    1454:	04 01                	add    al,0x1
    1456:	06                   	push   es
    1457:	20 06                	and    BYTE PTR [esi],al
    1459:	08 ca                	or     dl,cl
    145b:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    1461:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1464:	06                   	push   es
    1465:	20 06                	and    BYTE PTR [esi],al
    1467:	08 ca                	or     dl,cl
    1469:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    146f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    1472:	06                   	push   es
    1473:	20 00                	and    BYTE PTR [eax],al
    1475:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1478:	08 c8                	or     al,cl
    147a:	06                   	push   es
    147b:	ca 3d 02             	retf   0x23d
    147e:	02 00                	add    al,BYTE PTR [eax]
    1480:	01 01                	add    DWORD PTR [ecx],eax
    1482:	c5 00                	lds    eax,FWORD PTR [eax]
    1484:	00 00                	add    BYTE PTR [eax],al
    1486:	02 00                	add    al,BYTE PTR [eax]
    1488:	98                   	cwde   
    1489:	00 00                	add    BYTE PTR [eax],al
    148b:	00 01                	add    BYTE PTR [ecx],al
    148d:	01 fb                	add    ebx,edi
    148f:	0e                   	push   cs
    1490:	0d 00 01 01 01       	or     eax,0x1010100
    1495:	01 00                	add    DWORD PTR [eax],eax
    1497:	00 00                	add    BYTE PTR [eax],al
    1499:	01 00                	add    DWORD PTR [eax],eax
    149b:	00 01                	add    BYTE PTR [ecx],al
    149d:	73 72                	jae    1511 <sysEnter_Vector-0x12eaef>
    149f:	63 2f                	arpl   WORD PTR [edi],bp
    14a1:	73 74                	jae    1517 <sysEnter_Vector-0x12eae9>
    14a3:	72 69                	jb     150e <sysEnter_Vector-0x12eaf2>
    14a5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    14a6:	67 73 00             	addr16 jae 14a9 <sysEnter_Vector-0x12eb57>
    14a9:	2f                   	das    
    14aa:	68 6f 6d 65 2f       	push   0x2f656d6f
    14af:	79 6f                	jns    1520 <sysEnter_Vector-0x12eae0>
    14b1:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    14b8:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    14bb:	73 73                	jae    1530 <sysEnter_Vector-0x12ead0>
    14bd:	2f                   	das    
    14be:	6c                   	ins    BYTE PTR es:[edi],dx
    14bf:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    14c6:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    14cc:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    14d2:	78 2d                	js     1501 <sysEnter_Vector-0x12eaff>
    14d4:	67 6e                	outs   dx,BYTE PTR ds:[si]
    14d6:	75 2f                	jne    1507 <sysEnter_Vector-0x12eaf9>
    14d8:	35 2e 33 2e 30       	xor    eax,0x302e332e
    14dd:	2f                   	das    
    14de:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    14e5:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    14e8:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    14ec:	65 00 00             	add    BYTE PTR gs:[eax],al
    14ef:	73 74                	jae    1565 <sysEnter_Vector-0x12ea9b>
    14f1:	72 69                	jb     155c <sysEnter_Vector-0x12eaa4>
    14f3:	73 6e                	jae    1563 <sysEnter_Vector-0x12ea9d>
    14f5:	75 6d                	jne    1564 <sysEnter_Vector-0x12ea9c>
    14f7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    14fa:	01 00                	add    DWORD PTR [eax],eax
    14fc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    14ff:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1506:	63 
    1507:	2e                   	cs
    1508:	68 00 02 00 00       	push   0x200
    150d:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1510:	6d                   	ins    DWORD PTR es:[edi],dx
    1511:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1512:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1513:	2e                   	cs
    1514:	68 00 03 00 00       	push   0x300
    1519:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1520:	03 00                	add    eax,DWORD PTR [eax]
    1522:	00 00                	add    BYTE PTR [eax],al
    1524:	00 05 02 b0 3a 00    	add    BYTE PTR ds:0x3ab002,al
    152a:	9f                   	lahf   
    152b:	1a 08                	sbb    cl,BYTE PTR [eax]
    152d:	59                   	pop    ecx
    152e:	00 02                	add    BYTE PTR [edx],al
    1530:	04 01                	add    al,0x1
    1532:	06                   	push   es
    1533:	66                   	data16
    1534:	00 02                	add    BYTE PTR [edx],al
    1536:	04 02                	add    al,0x2
    1538:	66 06                	pushw  es
    153a:	75 59                	jne    1595 <sysEnter_Vector-0x12ea6b>
    153c:	31 f3                	xor    ebx,esi
    153e:	76 2f                	jbe    156f <sysEnter_Vector-0x12ea91>
    1540:	08 e5                	or     ch,ah
    1542:	72 08                	jb     154c <sysEnter_Vector-0x12eab4>
    1544:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    1547:	02 00                	add    al,BYTE PTR [eax]
    1549:	01 01                	add    DWORD PTR [ecx],eax
    154b:	cf                   	iret   
    154c:	00 00                	add    BYTE PTR [eax],al
    154e:	00 02                	add    BYTE PTR [edx],al
    1550:	00 a2 00 00 00 01    	add    BYTE PTR [edx+0x1000000],ah
    1556:	01 fb                	add    ebx,edi
    1558:	0e                   	push   cs
    1559:	0d 00 01 01 01       	or     eax,0x1010100
    155e:	01 00                	add    DWORD PTR [eax],eax
    1560:	00 00                	add    BYTE PTR [eax],al
    1562:	01 00                	add    DWORD PTR [eax],eax
    1564:	00 01                	add    BYTE PTR [ecx],al
    1566:	73 72                	jae    15da <sysEnter_Vector-0x12ea26>
    1568:	63 2f                	arpl   WORD PTR [edi],bp
    156a:	73 74                	jae    15e0 <sysEnter_Vector-0x12ea20>
    156c:	72 69                	jb     15d7 <sysEnter_Vector-0x12ea29>
    156e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    156f:	67 73 00             	addr16 jae 1572 <sysEnter_Vector-0x12ea8e>
    1572:	2f                   	das    
    1573:	68 6f 6d 65 2f       	push   0x2f656d6f
    1578:	79 6f                	jns    15e9 <sysEnter_Vector-0x12ea17>
    157a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1581:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1584:	73 73                	jae    15f9 <sysEnter_Vector-0x12ea07>
    1586:	2f                   	das    
    1587:	6c                   	ins    BYTE PTR es:[edi],dx
    1588:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    158f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1595:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    159b:	78 2d                	js     15ca <sysEnter_Vector-0x12ea36>
    159d:	67 6e                	outs   dx,BYTE PTR ds:[si]
    159f:	75 2f                	jne    15d0 <sysEnter_Vector-0x12ea30>
    15a1:	35 2e 33 2e 30       	xor    eax,0x302e332e
    15a6:	2f                   	das    
    15a7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    15ae:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    15b1:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    15b5:	65 00 00             	add    BYTE PTR gs:[eax],al
    15b8:	73 74                	jae    162e <sysEnter_Vector-0x12e9d2>
    15ba:	72 6c                	jb     1628 <sysEnter_Vector-0x12e9d8>
    15bc:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    15be:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15c1:	01 00                	add    DWORD PTR [eax],eax
    15c3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    15c6:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15cd:	63 
    15ce:	2e                   	cs
    15cf:	68 00 02 00 00       	push   0x200
    15d4:	73 74                	jae    164a <sysEnter_Vector-0x12e9b6>
    15d6:	64                   	fs
    15d7:	64                   	fs
    15d8:	65                   	gs
    15d9:	66                   	data16
    15da:	2e                   	cs
    15db:	68 00 02 00 00       	push   0x200
    15e0:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    15e3:	6d                   	ins    DWORD PTR es:[edi],dx
    15e4:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15e5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    15e6:	2e                   	cs
    15e7:	68 00 03 00 00       	push   0x300
    15ec:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    15f3:	03 00                	add    eax,DWORD PTR [eax]
    15f5:	00 00                	add    BYTE PTR [eax],al
    15f7:	00 05 02 3c 3b 00    	add    BYTE PTR ds:0x3b3c02,al
    15fd:	9f                   	lahf   
    15fe:	15 f3 75 2f 49       	adc    eax,0x492f75f3
    1603:	e6 3d                	out    0x3d,al
    1605:	31 c9                	xor    ecx,ecx
    1607:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1608:	31 f3                	xor    ebx,esi
    160a:	75 2f                	jne    163b <sysEnter_Vector-0x12e9c5>
    160c:	49                   	dec    ecx
    160d:	00 02                	add    BYTE PTR [edx],al
    160f:	04 01                	add    al,0x1
    1611:	06                   	push   es
    1612:	e4 06                	in     al,0x6
    1614:	84 3d 31 c9 e5 02    	test   BYTE PTR ds:0x2e5c931,bh
    161a:	02 00                	add    al,BYTE PTR [eax]
    161c:	01 01                	add    DWORD PTR [ecx],eax
    161e:	c1 00 00             	rol    DWORD PTR [eax],0x0
    1621:	00 02                	add    BYTE PTR [edx],al
    1623:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1626:	00 00                	add    BYTE PTR [eax],al
    1628:	01 01                	add    DWORD PTR [ecx],eax
    162a:	fb                   	sti    
    162b:	0e                   	push   cs
    162c:	0d 00 01 01 01       	or     eax,0x1010100
    1631:	01 00                	add    DWORD PTR [eax],eax
    1633:	00 00                	add    BYTE PTR [eax],al
    1635:	01 00                	add    DWORD PTR [eax],eax
    1637:	00 01                	add    BYTE PTR [ecx],al
    1639:	73 72                	jae    16ad <sysEnter_Vector-0x12e953>
    163b:	63 2f                	arpl   WORD PTR [edi],bp
    163d:	73 74                	jae    16b3 <sysEnter_Vector-0x12e94d>
    163f:	72 69                	jb     16aa <sysEnter_Vector-0x12e956>
    1641:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1642:	67 73 00             	addr16 jae 1645 <sysEnter_Vector-0x12e9bb>
    1645:	2f                   	das    
    1646:	68 6f 6d 65 2f       	push   0x2f656d6f
    164b:	79 6f                	jns    16bc <sysEnter_Vector-0x12e944>
    164d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1654:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1657:	73 73                	jae    16cc <sysEnter_Vector-0x12e934>
    1659:	2f                   	das    
    165a:	6c                   	ins    BYTE PTR es:[edi],dx
    165b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1662:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1668:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    166e:	78 2d                	js     169d <sysEnter_Vector-0x12e963>
    1670:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1672:	75 2f                	jne    16a3 <sysEnter_Vector-0x12e95d>
    1674:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1679:	2f                   	das    
    167a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1681:	00 00                	add    BYTE PTR [eax],al
    1683:	73 74                	jae    16f9 <sysEnter_Vector-0x12e907>
    1685:	72 6e                	jb     16f5 <sysEnter_Vector-0x12e90b>
    1687:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    168a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    168d:	01 00                	add    DWORD PTR [eax],eax
    168f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1692:	64                   	fs
    1693:	64                   	fs
    1694:	65                   	gs
    1695:	66                   	data16
    1696:	2e                   	cs
    1697:	68 00 02 00 00       	push   0x200
    169c:	00 00                	add    BYTE PTR [eax],al
    169e:	05 02 e0 3b 00       	add    eax,0x3be002
    16a3:	9f                   	lahf   
    16a4:	03 0c 01             	add    ecx,DWORD PTR [ecx+eax*1]
    16a7:	c9                   	leave  
    16a8:	2f                   	das    
    16a9:	f3 00 02             	repz add BYTE PTR [edx],al
    16ac:	04 01                	add    al,0x1
    16ae:	06                   	push   es
    16af:	f2 00 02             	repnz add BYTE PTR [edx],al
    16b2:	04 02                	add    al,0x2
    16b4:	74 06                	je     16bc <sysEnter_Vector-0x12e944>
    16b6:	75 9f                	jne    1657 <sysEnter_Vector-0x12e9a9>
    16b8:	70 00                	jo     16ba <sysEnter_Vector-0x12e946>
    16ba:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16bd:	06                   	push   es
    16be:	ba 06 6b 59 31       	mov    edx,0x31596b06
    16c3:	c9                   	leave  
    16c4:	2f                   	das    
    16c5:	f3 00 02             	repz add BYTE PTR [edx],al
    16c8:	04 01                	add    al,0x1
    16ca:	06                   	push   es
    16cb:	f2 00 02             	repnz add BYTE PTR [edx],al
    16ce:	04 02                	add    al,0x2
    16d0:	74 06                	je     16d8 <sysEnter_Vector-0x12e928>
    16d2:	75 9f                	jne    1673 <sysEnter_Vector-0x12e98d>
    16d4:	70 00                	jo     16d6 <sysEnter_Vector-0x12e92a>
    16d6:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    16d9:	06                   	push   es
    16da:	ba 06 6b 59 02       	mov    edx,0x2596b06
    16df:	02 00                	add    al,BYTE PTR [eax]
    16e1:	01 01                	add    DWORD PTR [ecx],eax
    16e3:	a3 00 00 00 02       	mov    ds:0x2000000,eax
    16e8:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    16eb:	00 00                	add    BYTE PTR [eax],al
    16ed:	01 01                	add    DWORD PTR [ecx],eax
    16ef:	fb                   	sti    
    16f0:	0e                   	push   cs
    16f1:	0d 00 01 01 01       	or     eax,0x1010100
    16f6:	01 00                	add    DWORD PTR [eax],eax
    16f8:	00 00                	add    BYTE PTR [eax],al
    16fa:	01 00                	add    DWORD PTR [eax],eax
    16fc:	00 01                	add    BYTE PTR [ecx],al
    16fe:	73 72                	jae    1772 <sysEnter_Vector-0x12e88e>
    1700:	63 2f                	arpl   WORD PTR [edi],bp
    1702:	73 74                	jae    1778 <sysEnter_Vector-0x12e888>
    1704:	72 69                	jb     176f <sysEnter_Vector-0x12e891>
    1706:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1707:	67 73 00             	addr16 jae 170a <sysEnter_Vector-0x12e8f6>
    170a:	2f                   	das    
    170b:	68 6f 6d 65 2f       	push   0x2f656d6f
    1710:	79 6f                	jns    1781 <sysEnter_Vector-0x12e87f>
    1712:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1719:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    171c:	73 73                	jae    1791 <sysEnter_Vector-0x12e86f>
    171e:	2f                   	das    
    171f:	6c                   	ins    BYTE PTR es:[edi],dx
    1720:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1727:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    172d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1733:	78 2d                	js     1762 <sysEnter_Vector-0x12e89e>
    1735:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1737:	75 2f                	jne    1768 <sysEnter_Vector-0x12e898>
    1739:	35 2e 33 2e 30       	xor    eax,0x302e332e
    173e:	2f                   	das    
    173f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1746:	00 00                	add    BYTE PTR [eax],al
    1748:	73 74                	jae    17be <sysEnter_Vector-0x12e842>
    174a:	72 6e                	jb     17ba <sysEnter_Vector-0x12e846>
    174c:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    174f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1752:	01 00                	add    DWORD PTR [eax],eax
    1754:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1757:	64                   	fs
    1758:	64                   	fs
    1759:	65                   	gs
    175a:	66                   	data16
    175b:	2e                   	cs
    175c:	68 00 02 00 00       	push   0x200
    1761:	00 00                	add    BYTE PTR [eax],al
    1763:	05 02 b0 3c 00       	add    eax,0x3cb002
    1768:	9f                   	lahf   
    1769:	03 0d 01 f3 67 2f    	add    ecx,DWORD PTR ds:0x2f67f301
    176f:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    1772:	00 02                	add    BYTE PTR [edx],al
    1774:	04 01                	add    al,0x1
    1776:	06                   	push   es
    1777:	66 06                	pushw  es
    1779:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    177e:	67 67 3d 31 c9 08 13 	addr32 addr16 cmp eax,0x1308c931
    1785:	02 02                	add    al,BYTE PTR [edx]
    1787:	00 01                	add    BYTE PTR [ecx],al
    1789:	01 d8                	add    eax,ebx
    178b:	00 00                	add    BYTE PTR [eax],al
    178d:	00 02                	add    BYTE PTR [edx],al
    178f:	00 2b                	add    BYTE PTR [ebx],ch
    1791:	00 00                	add    BYTE PTR [eax],al
    1793:	00 01                	add    BYTE PTR [ecx],al
    1795:	01 fb                	add    ebx,edi
    1797:	0e                   	push   cs
    1798:	0d 00 01 01 01       	or     eax,0x1010100
    179d:	01 00                	add    DWORD PTR [eax],eax
    179f:	00 00                	add    BYTE PTR [eax],al
    17a1:	01 00                	add    DWORD PTR [eax],eax
    17a3:	00 01                	add    BYTE PTR [ecx],al
    17a5:	73 72                	jae    1819 <sysEnter_Vector-0x12e7e7>
    17a7:	63 2f                	arpl   WORD PTR [edi],bp
    17a9:	73 74                	jae    181f <sysEnter_Vector-0x12e7e1>
    17ab:	72 69                	jb     1816 <sysEnter_Vector-0x12e7ea>
    17ad:	6e                   	outs   dx,BYTE PTR ds:[esi]
    17ae:	67 73 00             	addr16 jae 17b1 <sysEnter_Vector-0x12e84f>
    17b1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    17b4:	72 6f                	jb     1825 <sysEnter_Vector-0x12e7db>
    17b6:	75 6c                	jne    1824 <sysEnter_Vector-0x12e7dc>
    17b8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    17bb:	01 00                	add    DWORD PTR [eax],eax
    17bd:	00 00                	add    BYTE PTR [eax],al
    17bf:	00 05 02 3c 3d 00    	add    BYTE PTR ds:0x3d3c02,al
    17c5:	9f                   	lahf   
    17c6:	03 3b                	add    edi,DWORD PTR [ebx]
    17c8:	01 08                	add    DWORD PTR [eax],ecx
    17ca:	2f                   	das    
    17cb:	40                   	inc    eax
    17cc:	00 02                	add    BYTE PTR [edx],al
    17ce:	04 01                	add    al,0x1
    17d0:	7a 00                	jp     17d2 <sysEnter_Vector-0x12e82e>
    17d2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    17d5:	ad                   	lods   eax,DWORD PTR ds:[esi]
    17d6:	59                   	pop    ecx
    17d7:	59                   	pop    ecx
    17d8:	75 c9                	jne    17a3 <sysEnter_Vector-0x12e85d>
    17da:	59                   	pop    ecx
    17db:	ad                   	lods   eax,DWORD PTR ds:[esi]
    17dc:	00 02                	add    BYTE PTR [edx],al
    17de:	04 02                	add    al,0x2
    17e0:	06                   	push   es
    17e1:	66                   	data16
    17e2:	00 02                	add    BYTE PTR [edx],al
    17e4:	04 03                	add    al,0x3
    17e6:	66 06                	pushw  es
    17e8:	59                   	pop    ecx
    17e9:	00 02                	add    BYTE PTR [edx],al
    17eb:	04 01                	add    al,0x1
    17ed:	06                   	push   es
    17ee:	74 06                	je     17f6 <sysEnter_Vector-0x12e80a>
    17f0:	75 91                	jne    1783 <sysEnter_Vector-0x12e87d>
    17f2:	3d 76 67 00 02       	cmp    eax,0x2006776
    17f7:	04 01                	add    al,0x1
    17f9:	06                   	push   es
    17fa:	58                   	pop    eax
    17fb:	00 02                	add    BYTE PTR [edx],al
    17fd:	04 02                	add    al,0x2
    17ff:	74 00                	je     1801 <sysEnter_Vector-0x12e7ff>
    1801:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1804:	58                   	pop    eax
    1805:	06                   	push   es
    1806:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    180b:	9f                   	lahf   
    180c:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1810:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1813:	06                   	push   es
    1814:	58                   	pop    eax
    1815:	00 02                	add    BYTE PTR [edx],al
    1817:	04 03                	add    al,0x3
    1819:	58                   	pop    eax
    181a:	00 02                	add    BYTE PTR [edx],al
    181c:	04 04                	add    al,0x4
    181e:	74 00                	je     1820 <sysEnter_Vector-0x12e7e0>
    1820:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1823:	58                   	pop    eax
    1824:	06                   	push   es
    1825:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1828:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    182b:	06                   	push   es
    182c:	66                   	data16
    182d:	00 02                	add    BYTE PTR [edx],al
    182f:	04 02                	add    al,0x2
    1831:	58                   	pop    eax
    1832:	00 02                	add    BYTE PTR [edx],al
    1834:	04 03                	add    al,0x3
    1836:	58                   	pop    eax
    1837:	06                   	push   es
    1838:	67 76 59             	addr16 jbe 1894 <sysEnter_Vector-0x12e76c>
    183b:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    183f:	03 10                	add    edx,DWORD PTR [eax]
    1841:	ac                   	lods   al,BYTE PTR ds:[esi]
    1842:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1845:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1848:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    184b:	67 2f                	addr16 das 
    184d:	67 00 02             	add    BYTE PTR [bp+si],al
    1850:	04 01                	add    al,0x1
    1852:	06                   	push   es
    1853:	66                   	data16
    1854:	00 02                	add    BYTE PTR [edx],al
    1856:	04 02                	add    al,0x2
    1858:	58                   	pop    eax
    1859:	00 02                	add    BYTE PTR [edx],al
    185b:	04 04                	add    al,0x4
    185d:	3c 06                	cmp    al,0x6
    185f:	59                   	pop    ecx
    1860:	2f                   	das    
    1861:	02 08                	add    cl,BYTE PTR [eax]
    1863:	00 01                	add    BYTE PTR [ecx],al
    1865:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    1868:	00 00                	add    BYTE PTR [eax],al
    186a:	02 00                	add    al,BYTE PTR [eax]
    186c:	2d 00 00 00 01       	sub    eax,0x1000000
    1871:	01 fb                	add    ebx,edi
    1873:	0e                   	push   cs
    1874:	0d 00 01 01 01       	or     eax,0x1010100
    1879:	01 00                	add    DWORD PTR [eax],eax
    187b:	00 00                	add    BYTE PTR [eax],al
    187d:	01 00                	add    DWORD PTR [eax],eax
    187f:	00 01                	add    BYTE PTR [ecx],al
    1881:	73 72                	jae    18f5 <sysEnter_Vector-0x12e70b>
    1883:	63 2f                	arpl   WORD PTR [edi],bp
    1885:	73 74                	jae    18fb <sysEnter_Vector-0x12e705>
    1887:	72 69                	jb     18f2 <sysEnter_Vector-0x12e70e>
    1889:	6e                   	outs   dx,BYTE PTR ds:[esi]
    188a:	67 73 00             	addr16 jae 188d <sysEnter_Vector-0x12e773>
    188d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1890:	72 70                	jb     1902 <sysEnter_Vector-0x12e6fe>
    1892:	61                   	popa   
    1893:	72 74                	jb     1909 <sysEnter_Vector-0x12e6f7>
    1895:	73 2e                	jae    18c5 <sysEnter_Vector-0x12e73b>
    1897:	63 00                	arpl   WORD PTR [eax],ax
    1899:	01 00                	add    DWORD PTR [eax],eax
    189b:	00 00                	add    BYTE PTR [eax],al
    189d:	00 05 02 bc 3e 00    	add    BYTE PTR ds:0x3ebc02,al
    18a3:	9f                   	lahf   
    18a4:	13 c9                	adc    ecx,ecx
    18a6:	ad                   	lods   eax,DWORD PTR ds:[esi]
    18a7:	3d 02 02 00 01       	cmp    eax,0x1000202
    18ac:	01 04 01             	add    DWORD PTR [ecx+eax*1],eax
    18af:	00 00                	add    BYTE PTR [eax],al
    18b1:	02 00                	add    al,BYTE PTR [eax]
    18b3:	2b 00                	sub    eax,DWORD PTR [eax]
    18b5:	00 00                	add    BYTE PTR [eax],al
    18b7:	01 01                	add    DWORD PTR [ecx],eax
    18b9:	fb                   	sti    
    18ba:	0e                   	push   cs
    18bb:	0d 00 01 01 01       	or     eax,0x1010100
    18c0:	01 00                	add    DWORD PTR [eax],eax
    18c2:	00 00                	add    BYTE PTR [eax],al
    18c4:	01 00                	add    DWORD PTR [eax],eax
    18c6:	00 01                	add    BYTE PTR [ecx],al
    18c8:	73 72                	jae    193c <sysEnter_Vector-0x12e6c4>
    18ca:	63 2f                	arpl   WORD PTR [edi],bp
    18cc:	73 74                	jae    1942 <sysEnter_Vector-0x12e6be>
    18ce:	72 69                	jb     1939 <sysEnter_Vector-0x12e6c7>
    18d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18d1:	67 73 00             	addr16 jae 18d4 <sysEnter_Vector-0x12e72c>
    18d4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    18d7:	72 74                	jb     194d <sysEnter_Vector-0x12e6b3>
    18d9:	6f                   	outs   dx,DWORD PTR ds:[esi]
    18da:	6c                   	ins    BYTE PTR es:[edi],dx
    18db:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    18de:	01 00                	add    DWORD PTR [eax],eax
    18e0:	00 00                	add    BYTE PTR [eax],al
    18e2:	00 05 02 dc 3e 00    	add    BYTE PTR ds:0x3edc02,al
    18e8:	9f                   	lahf   
    18e9:	03 d7                	add    edx,edi
    18eb:	00 01                	add    BYTE PTR [ecx],al
    18ed:	08 2f                	or     BYTE PTR [edi],ch
    18ef:	40                   	inc    eax
    18f0:	00 02                	add    BYTE PTR [edx],al
    18f2:	04 01                	add    al,0x1
    18f4:	7c 00                	jl     18f6 <sysEnter_Vector-0x12e70a>
    18f6:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    18f9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    18fa:	59                   	pop    ecx
    18fb:	59                   	pop    ecx
    18fc:	75 c9                	jne    18c7 <sysEnter_Vector-0x12e739>
    18fe:	59                   	pop    ecx
    18ff:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1900:	00 02                	add    BYTE PTR [edx],al
    1902:	04 02                	add    al,0x2
    1904:	06                   	push   es
    1905:	66                   	data16
    1906:	00 02                	add    BYTE PTR [edx],al
    1908:	04 03                	add    al,0x3
    190a:	66 06                	pushw  es
    190c:	59                   	pop    ecx
    190d:	00 02                	add    BYTE PTR [edx],al
    190f:	04 01                	add    al,0x1
    1911:	06                   	push   es
    1912:	74 06                	je     191a <sysEnter_Vector-0x12e6e6>
    1914:	75 91                	jne    18a7 <sysEnter_Vector-0x12e759>
    1916:	3d 76 67 00 02       	cmp    eax,0x2006776
    191b:	04 01                	add    al,0x1
    191d:	06                   	push   es
    191e:	58                   	pop    eax
    191f:	00 02                	add    BYTE PTR [edx],al
    1921:	04 02                	add    al,0x2
    1923:	74 00                	je     1925 <sysEnter_Vector-0x12e6db>
    1925:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1928:	58                   	pop    eax
    1929:	06                   	push   es
    192a:	03 13                	add    edx,DWORD PTR [ebx]
    192c:	3c 00                	cmp    al,0x0
    192e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1931:	06                   	push   es
    1932:	66                   	data16
    1933:	00 02                	add    BYTE PTR [edx],al
    1935:	04 02                	add    al,0x2
    1937:	74 00                	je     1939 <sysEnter_Vector-0x12e6c7>
    1939:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    193c:	06                   	push   es
    193d:	59                   	pop    ecx
    193e:	00 02                	add    BYTE PTR [edx],al
    1940:	04 04                	add    al,0x4
    1942:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1948:	f3 9f                	repz lahf 
    194a:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    194e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1951:	06                   	push   es
    1952:	58                   	pop    eax
    1953:	00 02                	add    BYTE PTR [edx],al
    1955:	04 03                	add    al,0x3
    1957:	58                   	pop    eax
    1958:	00 02                	add    BYTE PTR [edx],al
    195a:	04 04                	add    al,0x4
    195c:	74 00                	je     195e <sysEnter_Vector-0x12e6a2>
    195e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1961:	58                   	pop    eax
    1962:	06                   	push   es
    1963:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    1966:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1969:	06                   	push   es
    196a:	66                   	data16
    196b:	00 02                	add    BYTE PTR [edx],al
    196d:	04 02                	add    al,0x2
    196f:	58                   	pop    eax
    1970:	00 02                	add    BYTE PTR [edx],al
    1972:	04 03                	add    al,0x3
    1974:	58                   	pop    eax
    1975:	06                   	push   es
    1976:	59                   	pop    ecx
    1977:	76 59                	jbe    19d2 <sysEnter_Vector-0x12e62e>
    1979:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    197d:	03 10                	add    edx,DWORD PTR [eax]
    197f:	ac                   	lods   al,BYTE PTR ds:[esi]
    1980:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    1983:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    1986:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1989:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    198c:	06                   	push   es
    198d:	66                   	data16
    198e:	00 02                	add    BYTE PTR [edx],al
    1990:	04 02                	add    al,0x2
    1992:	74 00                	je     1994 <sysEnter_Vector-0x12e66c>
    1994:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1997:	58                   	pop    eax
    1998:	06                   	push   es
    1999:	4b                   	dec    ebx
    199a:	67 2f                	addr16 das 
    199c:	67 00 02             	add    BYTE PTR [bp+si],al
    199f:	04 01                	add    al,0x1
    19a1:	06                   	push   es
    19a2:	66                   	data16
    19a3:	00 02                	add    BYTE PTR [edx],al
    19a5:	04 02                	add    al,0x2
    19a7:	58                   	pop    eax
    19a8:	00 02                	add    BYTE PTR [edx],al
    19aa:	04 04                	add    al,0x4
    19ac:	3c 06                	cmp    al,0x6
    19ae:	59                   	pop    ecx
    19af:	2f                   	das    
    19b0:	02 08                	add    cl,BYTE PTR [eax]
    19b2:	00 01                	add    BYTE PTR [ecx],al
    19b4:	01 5e 00             	add    DWORD PTR [esi+0x0],ebx
    19b7:	00 00                	add    BYTE PTR [eax],al
    19b9:	02 00                	add    al,BYTE PTR [eax]
    19bb:	2c 00                	sub    al,0x0
    19bd:	00 00                	add    BYTE PTR [eax],al
    19bf:	01 01                	add    DWORD PTR [ecx],eax
    19c1:	fb                   	sti    
    19c2:	0e                   	push   cs
    19c3:	0d 00 01 01 01       	or     eax,0x1010100
    19c8:	01 00                	add    DWORD PTR [eax],eax
    19ca:	00 00                	add    BYTE PTR [eax],al
    19cc:	01 00                	add    DWORD PTR [eax],eax
    19ce:	00 01                	add    BYTE PTR [ecx],al
    19d0:	73 72                	jae    1a44 <sysEnter_Vector-0x12e5bc>
    19d2:	63 2f                	arpl   WORD PTR [edi],bp
    19d4:	73 74                	jae    1a4a <sysEnter_Vector-0x12e5b6>
    19d6:	72 69                	jb     1a41 <sysEnter_Vector-0x12e5bf>
    19d8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    19d9:	67 73 00             	addr16 jae 19dc <sysEnter_Vector-0x12e624>
    19dc:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    19df:	72 74                	jb     1a55 <sysEnter_Vector-0x12e5ab>
    19e1:	72 69                	jb     1a4c <sysEnter_Vector-0x12e5b4>
    19e3:	6d                   	ins    DWORD PTR es:[edi],dx
    19e4:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    19e7:	01 00                	add    DWORD PTR [eax],eax
    19e9:	00 00                	add    BYTE PTR [eax],al
    19eb:	00 05 02 78 40 00    	add    BYTE PTR ds:0x407802,al
    19f1:	9f                   	lahf   
    19f2:	15 08 13 bf 30       	adc    eax,0x30bf1308
    19f7:	48                   	dec    eax
    19f8:	b3 08                	mov    bl,0x8
    19fa:	9f                   	lahf   
    19fb:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    1a01:	06                   	push   es
    1a02:	82                   	(bad)  
    1a03:	06                   	push   es
    1a04:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1a05:	84 00                	test   BYTE PTR [eax],al
    1a07:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1a0a:	06                   	push   es
    1a0b:	20 06                	and    BYTE PTR [esi],al
    1a0d:	08 ca                	or     dl,cl
    1a0f:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    1a15:	01 01                	add    DWORD PTR [ecx],eax
    1a17:	d4 00                	aam    0x0
    1a19:	00 00                	add    BYTE PTR [eax],al
    1a1b:	02 00                	add    al,BYTE PTR [eax]
    1a1d:	9e                   	sahf   
    1a1e:	00 00                	add    BYTE PTR [eax],al
    1a20:	00 01                	add    BYTE PTR [ecx],al
    1a22:	01 fb                	add    ebx,edi
    1a24:	0e                   	push   cs
    1a25:	0d 00 01 01 01       	or     eax,0x1010100
    1a2a:	01 00                	add    DWORD PTR [eax],eax
    1a2c:	00 00                	add    BYTE PTR [eax],al
    1a2e:	01 00                	add    DWORD PTR [eax],eax
    1a30:	00 01                	add    BYTE PTR [ecx],al
    1a32:	73 72                	jae    1aa6 <sysEnter_Vector-0x12e55a>
    1a34:	63 00                	arpl   WORD PTR [eax],ax
    1a36:	2f                   	das    
    1a37:	68 6f 6d 65 2f       	push   0x2f656d6f
    1a3c:	79 6f                	jns    1aad <sysEnter_Vector-0x12e553>
    1a3e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1a45:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1a48:	73 73                	jae    1abd <sysEnter_Vector-0x12e543>
    1a4a:	2f                   	das    
    1a4b:	6c                   	ins    BYTE PTR es:[edi],dx
    1a4c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1a53:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1a59:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1a5f:	78 2d                	js     1a8e <sysEnter_Vector-0x12e572>
    1a61:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1a63:	75 2f                	jne    1a94 <sysEnter_Vector-0x12e56c>
    1a65:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1a6a:	2f                   	das    
    1a6b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1a72:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1a75:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1a79:	65 00 00             	add    BYTE PTR gs:[eax],al
    1a7c:	73 74                	jae    1af2 <sysEnter_Vector-0x12e50e>
    1a7e:	72 72                	jb     1af2 <sysEnter_Vector-0x12e50e>
    1a80:	65                   	gs
    1a81:	70 6c                	jo     1aef <sysEnter_Vector-0x12e511>
    1a83:	61                   	popa   
    1a84:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    1a87:	63 00                	arpl   WORD PTR [eax],ax
    1a89:	01 00                	add    DWORD PTR [eax],eax
    1a8b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1a8e:	64                   	fs
    1a8f:	64                   	fs
    1a90:	65                   	gs
    1a91:	66                   	data16
    1a92:	2e                   	cs
    1a93:	68 00 02 00 00       	push   0x200
    1a98:	73 74                	jae    1b0e <sysEnter_Vector-0x12e4f2>
    1a9a:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1aa1:	63 
    1aa2:	2e                   	cs
    1aa3:	68 00 02 00 00       	push   0x200
    1aa8:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1aab:	6d                   	ins    DWORD PTR es:[edi],dx
    1aac:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1aad:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1aae:	2e                   	cs
    1aaf:	68 00 03 00 00       	push   0x300
    1ab4:	66 69 6c 65 2e 68 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x68
    1abb:	03 00                	add    eax,DWORD PTR [eax]
    1abd:	00 00                	add    BYTE PTR [eax],al
    1abf:	00 05 02 30 41 00    	add    BYTE PTR ds:0x413002,al
    1ac5:	9f                   	lahf   
    1ac6:	03 0d 01 08 2f 08    	add    ecx,DWORD PTR ds:0x82f0801
    1acc:	3f                   	aas    
    1acd:	76 5a                	jbe    1b29 <sysEnter_Vector-0x12e4d7>
    1acf:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
    1ad2:	cb                   	retf   
    1ad3:	08 77 02             	or     BYTE PTR [edi+0x2],dh
    1ad6:	2a 15 02 28 13 03    	sub    dl,BYTE PTR ds:0x3132802
    1adc:	73 08                	jae    1ae6 <sysEnter_Vector-0x12e51a>
    1ade:	12 03                	adc    al,BYTE PTR [ebx]
    1ae0:	11 08                	adc    DWORD PTR [eax],ecx
    1ae2:	c8 08 68 3d          	enter  0x6808,0x3d
    1ae6:	77 f3                	ja     1adb <sysEnter_Vector-0x12e525>
    1ae8:	08 3d 02 02 00 01    	or     BYTE PTR ds:0x1000202,bh
    1aee:	01 8c 00 00 00 02 00 	add    DWORD PTR [eax+eax*1+0x20000],ecx
    1af5:	37                   	aaa    
    1af6:	00 00                	add    BYTE PTR [eax],al
    1af8:	00 01                	add    BYTE PTR [ecx],al
    1afa:	01 fb                	add    ebx,edi
    1afc:	0e                   	push   cs
    1afd:	0d 00 01 01 01       	or     eax,0x1010100
    1b02:	01 00                	add    DWORD PTR [eax],eax
    1b04:	00 00                	add    BYTE PTR [eax],al
    1b06:	01 00                	add    DWORD PTR [eax],eax
    1b08:	00 01                	add    BYTE PTR [ecx],al
    1b0a:	73 72                	jae    1b7e <sysEnter_Vector-0x12e482>
    1b0c:	63 00                	arpl   WORD PTR [eax],ax
    1b0e:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1b15:	00 00                	add    BYTE PTR [eax],al
    1b17:	73 74                	jae    1b8d <sysEnter_Vector-0x12e473>
    1b19:	72 73                	jb     1b8e <sysEnter_Vector-0x12e472>
    1b1b:	74 72                	je     1b8f <sysEnter_Vector-0x12e471>
    1b1d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1b20:	01 00                	add    DWORD PTR [eax],eax
    1b22:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
    1b25:	6d                   	ins    DWORD PTR es:[edi],dx
    1b26:	6d                   	ins    DWORD PTR es:[edi],dx
    1b27:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1b28:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b29:	2e                   	cs
    1b2a:	68 00 02 00 00       	push   0x200
    1b2f:	00 00                	add    BYTE PTR [eax],al
    1b31:	05 02 74 42 00       	add    eax,0x427402
    1b36:	9f                   	lahf   
    1b37:	03 34 01             	add    esi,DWORD PTR [ecx+eax*1]
    1b3a:	08 27                	or     BYTE PTR [edi],ah
    1b3c:	68 3d 75 5b c9       	push   0xc95b753d
    1b41:	c9                   	leave  
    1b42:	5b                   	pop    ebx
    1b43:	3e                   	ds
    1b44:	75 5a                	jne    1ba0 <sysEnter_Vector-0x12e460>
    1b46:	c9                   	leave  
    1b47:	59                   	pop    ecx
    1b48:	08 3f                	or     BYTE PTR [edi],bh
    1b4a:	2c 23                	sub    al,0x23
    1b4c:	03 73 58             	add    esi,DWORD PTR [ebx+0x58]
    1b4f:	1c 00                	sbb    al,0x0
    1b51:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b54:	06                   	push   es
    1b55:	4a                   	dec    edx
    1b56:	06                   	push   es
    1b57:	03 13                	add    edx,DWORD PTR [ebx]
    1b59:	9e                   	sahf   
    1b5a:	59                   	pop    ecx
    1b5b:	77 ec                	ja     1b49 <sysEnter_Vector-0x12e4b7>
    1b5d:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    1b62:	75 5a                	jne    1bbe <sysEnter_Vector-0x12e442>
    1b64:	08 3f                	or     BYTE PTR [edi],bh
    1b66:	2c 23                	sub    al,0x23
    1b68:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1b6b:	1e                   	push   ds
    1b6c:	00 02                	add    BYTE PTR [edx],al
    1b6e:	04 01                	add    al,0x1
    1b70:	06                   	push   es
    1b71:	4a                   	dec    edx
    1b72:	06                   	push   es
    1b73:	03 0f                	add    ecx,DWORD PTR [edi]
    1b75:	9e                   	sahf   
    1b76:	59                   	pop    ecx
    1b77:	4d                   	dec    ebp
    1b78:	c9                   	leave  
    1b79:	d7                   	xlat   BYTE PTR ds:[ebx]
    1b7a:	02 02                	add    al,BYTE PTR [edx]
    1b7c:	00 01                	add    BYTE PTR [ecx],al
    1b7e:	01 32                	add    DWORD PTR [edx],esi
    1b80:	03 00                	add    eax,DWORD PTR [eax]
    1b82:	00 02                	add    BYTE PTR [edx],al
    1b84:	00 bc 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bh
    1b8b:	fb                   	sti    
    1b8c:	0e                   	push   cs
    1b8d:	0d 00 01 01 01       	or     eax,0x1010100
    1b92:	01 00                	add    DWORD PTR [eax],eax
    1b94:	00 00                	add    BYTE PTR [eax],al
    1b96:	01 00                	add    DWORD PTR [eax],eax
    1b98:	00 01                	add    BYTE PTR [ecx],al
    1b9a:	73 72                	jae    1c0e <sysEnter_Vector-0x12e3f2>
    1b9c:	63 00                	arpl   WORD PTR [eax],ax
    1b9e:	2f                   	das    
    1b9f:	68 6f 6d 65 2f       	push   0x2f656d6f
    1ba4:	79 6f                	jns    1c15 <sysEnter_Vector-0x12e3eb>
    1ba6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1bad:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1bb0:	73 73                	jae    1c25 <sysEnter_Vector-0x12e3db>
    1bb2:	2f                   	das    
    1bb3:	6c                   	ins    BYTE PTR es:[edi],dx
    1bb4:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1bbb:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1bc1:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1bc7:	78 2d                	js     1bf6 <sysEnter_Vector-0x12e40a>
    1bc9:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1bcb:	75 2f                	jne    1bfc <sysEnter_Vector-0x12e404>
    1bcd:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1bd2:	2f                   	das    
    1bd3:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1bda:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    1bdd:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    1be1:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    1be4:	2e                   	cs
    1be5:	2f                   	das    
    1be6:	2e                   	cs
    1be7:	2e                   	cs
    1be8:	2f                   	das    
    1be9:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    1bed:	6a 2f                	push   0x2f
    1bef:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    1bf2:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    1bf9:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1bfa:	65                   	gs
    1bfb:	6c                   	ins    BYTE PTR es:[edi],dx
    1bfc:	2f                   	das    
    1bfd:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1c04:	00 00                	add    BYTE PTR [eax],al
    1c06:	74 69                	je     1c71 <sysEnter_Vector-0x12e38f>
    1c08:	6d                   	ins    DWORD PTR es:[edi],dx
    1c09:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    1c0d:	01 00                	add    DWORD PTR [eax],eax
    1c0f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1c12:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1c19:	63 
    1c1a:	2e                   	cs
    1c1b:	68 00 02 00 00       	push   0x200
    1c20:	74 69                	je     1c8b <sysEnter_Vector-0x12e375>
    1c22:	6d                   	ins    DWORD PTR es:[edi],dx
    1c23:	65                   	gs
    1c24:	2e                   	cs
    1c25:	68 00 03 00 00       	push   0x300
    1c2a:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
    1c2d:	6d                   	ins    DWORD PTR es:[edi],dx
    1c2e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1c2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1c30:	2e                   	cs
    1c31:	68 00 03 00 00       	push   0x300
    1c36:	73 79                	jae    1cb1 <sysEnter_Vector-0x12e34f>
    1c38:	73 63                	jae    1c9d <sysEnter_Vector-0x12e363>
    1c3a:	61                   	popa   
    1c3b:	6c                   	ins    BYTE PTR es:[edi],dx
    1c3c:	6c                   	ins    BYTE PTR es:[edi],dx
    1c3d:	73 2e                	jae    1c6d <sysEnter_Vector-0x12e393>
    1c3f:	68 00 04 00 00       	push   0x400
    1c44:	00 00                	add    BYTE PTR [eax],al
    1c46:	05 02 a0 43 00       	add    eax,0x43a002
    1c4b:	9f                   	lahf   
    1c4c:	03 1a                	add    ebx,DWORD PTR [edx]
    1c4e:	01 08                	add    DWORD PTR [eax],ecx
    1c50:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    1c53:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1c59:	76 02                	jbe    1c5d <sysEnter_Vector-0x12e3a3>
    1c5b:	24 13                	and    al,0x13
    1c5d:	08 22                	or     BYTE PTR [edx],ah
    1c5f:	02 2e                	add    ch,BYTE PTR [esi]
    1c61:	13 02                	adc    eax,DWORD PTR [edx]
    1c63:	2f                   	das    
    1c64:	13 08                	adc    ecx,DWORD PTR [eax]
    1c66:	67 02 2d             	add    ch,BYTE PTR [di]
    1c69:	13 2f                	adc    ebp,DWORD PTR [edi]
    1c6b:	00 02                	add    BYTE PTR [edx],al
    1c6d:	04 01                	add    al,0x1
    1c6f:	06                   	push   es
    1c70:	9e                   	sahf   
    1c71:	00 02                	add    BYTE PTR [edx],al
    1c73:	04 04                	add    al,0x4
    1c75:	02 23                	add    ah,BYTE PTR [ebx]
    1c77:	12 00                	adc    al,BYTE PTR [eax]
    1c79:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1c80:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1c83:	74 00                	je     1c85 <sysEnter_Vector-0x12e37b>
    1c85:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1c88:	58                   	pop    eax
    1c89:	00 02                	add    BYTE PTR [edx],al
    1c8b:	04 08                	add    al,0x8
    1c8d:	06                   	push   es
    1c8e:	3d 48 00 02 04       	cmp    eax,0x4020048
    1c93:	01 06                	add    DWORD PTR [esi],eax
    1c95:	9e                   	sahf   
    1c96:	00 02                	add    BYTE PTR [edx],al
    1c98:	04 04                	add    al,0x4
    1c9a:	02 23                	add    ah,BYTE PTR [ebx]
    1c9c:	12 00                	adc    al,BYTE PTR [eax]
    1c9e:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1ca5:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ca8:	74 00                	je     1caa <sysEnter_Vector-0x12e356>
    1caa:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1cad:	58                   	pop    eax
    1cae:	06                   	push   es
    1caf:	94                   	xchg   esp,eax
    1cb0:	e5 91                	in     eax,0x91
    1cb2:	9f                   	lahf   
    1cb3:	59                   	pop    ecx
    1cb4:	00 02                	add    BYTE PTR [edx],al
    1cb6:	04 01                	add    al,0x1
    1cb8:	06                   	push   es
    1cb9:	9e                   	sahf   
    1cba:	00 02                	add    BYTE PTR [edx],al
    1cbc:	04 04                	add    al,0x4
    1cbe:	02 23                	add    ah,BYTE PTR [ebx]
    1cc0:	12 00                	adc    al,BYTE PTR [eax]
    1cc2:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1cc9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1ccc:	74 00                	je     1cce <sysEnter_Vector-0x12e332>
    1cce:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1cd1:	58                   	pop    eax
    1cd2:	00 02                	add    BYTE PTR [edx],al
    1cd4:	04 08                	add    al,0x8
    1cd6:	06                   	push   es
    1cd7:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    1cdd:	01 06                	add    DWORD PTR [esi],eax
    1cdf:	9e                   	sahf   
    1ce0:	00 02                	add    BYTE PTR [edx],al
    1ce2:	04 04                	add    al,0x4
    1ce4:	02 23                	add    ah,BYTE PTR [ebx]
    1ce6:	12 00                	adc    al,BYTE PTR [eax]
    1ce8:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1cef:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1cf2:	74 00                	je     1cf4 <sysEnter_Vector-0x12e30c>
    1cf4:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1cf7:	58                   	pop    eax
    1cf8:	06                   	push   es
    1cf9:	08 f6                	or     dh,dh
    1cfb:	d7                   	xlat   BYTE PTR ds:[ebx]
    1cfc:	9f                   	lahf   
    1cfd:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    1d02:	f5                   	cmc    
    1d03:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
    1d06:	2f                   	das    
    1d07:	31 f5                	xor    ebp,esi
    1d09:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    1d0f:	30 08                	xor    BYTE PTR [eax],cl
    1d11:	44                   	inc    esp
    1d12:	02 2e                	add    ch,BYTE PTR [esi]
    1d14:	13 02                	adc    eax,DWORD PTR [edx]
    1d16:	3a 13                	cmp    dl,BYTE PTR [ebx]
    1d18:	91                   	xchg   ecx,eax
    1d19:	c9                   	leave  
    1d1a:	e6 02                	out    0x2,al
    1d1c:	2f                   	das    
    1d1d:	13 02                	adc    eax,DWORD PTR [edx]
    1d1f:	3c 13                	cmp    al,0x13
    1d21:	9f                   	lahf   
    1d22:	e5 e6                	in     eax,0xe6
    1d24:	08 c9                	or     cl,cl
    1d26:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1d29:	9f                   	lahf   
    1d2a:	e5 4c                	in     eax,0x4c
    1d2c:	02 29                	add    ch,BYTE PTR [ecx]
    1d2e:	13 02                	adc    eax,DWORD PTR [edx]
    1d30:	2b 13                	sub    edx,DWORD PTR [ebx]
    1d32:	9f                   	lahf   
    1d33:	e5 e6                	in     eax,0xe6
    1d35:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1d3a:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1d3f:	06                   	push   es
    1d40:	c8 00 02 04          	enter  0x200,0x4
    1d44:	04 02                	add    al,0x2
    1d46:	2c 12                	sub    al,0x12
    1d48:	00 02                	add    BYTE PTR [edx],al
    1d4a:	04 05                	add    al,0x5
    1d4c:	02 2f                	add    ch,BYTE PTR [edi]
    1d4e:	12 00                	adc    al,BYTE PTR [eax]
    1d50:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d53:	74 00                	je     1d55 <sysEnter_Vector-0x12e2ab>
    1d55:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1d58:	58                   	pop    eax
    1d59:	06                   	push   es
    1d5a:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1d60:	04 01                	add    al,0x1
    1d62:	06                   	push   es
    1d63:	c8 00 02 04          	enter  0x200,0x4
    1d67:	04 02                	add    al,0x2
    1d69:	2c 12                	sub    al,0x12
    1d6b:	00 02                	add    BYTE PTR [edx],al
    1d6d:	04 05                	add    al,0x5
    1d6f:	02 2f                	add    ch,BYTE PTR [edi]
    1d71:	12 00                	adc    al,BYTE PTR [eax]
    1d73:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d76:	74 00                	je     1d78 <sysEnter_Vector-0x12e288>
    1d78:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1d7b:	58                   	pop    eax
    1d7c:	00 02                	add    BYTE PTR [edx],al
    1d7e:	04 08                	add    al,0x8
    1d80:	06                   	push   es
    1d81:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1d87:	00 02                	add    BYTE PTR [edx],al
    1d89:	04 01                	add    al,0x1
    1d8b:	06                   	push   es
    1d8c:	c8 00 02 04          	enter  0x200,0x4
    1d90:	04 02                	add    al,0x2
    1d92:	2c 12                	sub    al,0x12
    1d94:	00 02                	add    BYTE PTR [edx],al
    1d96:	04 05                	add    al,0x5
    1d98:	02 2f                	add    ch,BYTE PTR [edi]
    1d9a:	12 00                	adc    al,BYTE PTR [eax]
    1d9c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1d9f:	74 00                	je     1da1 <sysEnter_Vector-0x12e25f>
    1da1:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1da4:	58                   	pop    eax
    1da5:	06                   	push   es
    1da6:	08 f9                	or     cl,bh
    1da8:	bb 75 00 02 04       	mov    ebx,0x4020075
    1dad:	01 06                	add    DWORD PTR [esi],eax
    1daf:	08 2e                	or     BYTE PTR [esi],ch
    1db1:	06                   	push   es
    1db2:	9f                   	lahf   
    1db3:	75 75                	jne    1e2a <sysEnter_Vector-0x12e1d6>
    1db5:	7b d8                	jnp    1d8f <sysEnter_Vector-0x12e271>
    1db7:	00 02                	add    BYTE PTR [edx],al
    1db9:	04 01                	add    al,0x1
    1dbb:	06                   	push   es
    1dbc:	c8 06 75 e5          	enter  0x7506,0xe5
    1dc0:	00 02                	add    BYTE PTR [edx],al
    1dc2:	04 01                	add    al,0x1
    1dc4:	06                   	push   es
    1dc5:	02 22                	add    ah,BYTE PTR [edx]
    1dc7:	12 06                	adc    al,BYTE PTR [esi]
    1dc9:	4b                   	dec    ebx
    1dca:	00 02                	add    BYTE PTR [edx],al
    1dcc:	04 01                	add    al,0x1
    1dce:	06                   	push   es
    1dcf:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1dd5:	02 22                	add    ah,BYTE PTR [edx]
    1dd7:	12 00                	adc    al,BYTE PTR [eax]
    1dd9:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1ddc:	74 00                	je     1dde <sysEnter_Vector-0x12e222>
    1dde:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1de1:	58                   	pop    eax
    1de2:	00 02                	add    BYTE PTR [edx],al
    1de4:	04 06                	add    al,0x6
    1de6:	06                   	push   es
    1de7:	59                   	pop    ecx
    1de8:	00 02                	add    BYTE PTR [edx],al
    1dea:	04 01                	add    al,0x1
    1dec:	06                   	push   es
    1ded:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1df0:	00 02                	add    BYTE PTR [edx],al
    1df2:	04 03                	add    al,0x3
    1df4:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1df7:	00 02                	add    BYTE PTR [edx],al
    1df9:	04 04                	add    al,0x4
    1dfb:	74 00                	je     1dfd <sysEnter_Vector-0x12e203>
    1dfd:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1e00:	58                   	pop    eax
    1e01:	00 02                	add    BYTE PTR [edx],al
    1e03:	04 06                	add    al,0x6
    1e05:	06                   	push   es
    1e06:	59                   	pop    ecx
    1e07:	00 02                	add    BYTE PTR [edx],al
    1e09:	04 01                	add    al,0x1
    1e0b:	06                   	push   es
    1e0c:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1e0f:	00 02                	add    BYTE PTR [edx],al
    1e11:	04 03                	add    al,0x3
    1e13:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1e16:	00 02                	add    BYTE PTR [edx],al
    1e18:	04 04                	add    al,0x4
    1e1a:	74 00                	je     1e1c <sysEnter_Vector-0x12e1e4>
    1e1c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1e1f:	58                   	pop    eax
    1e20:	00 02                	add    BYTE PTR [edx],al
    1e22:	04 06                	add    al,0x6
    1e24:	06                   	push   es
    1e25:	5a                   	pop    edx
    1e26:	00 02                	add    BYTE PTR [edx],al
    1e28:	04 06                	add    al,0x6
    1e2a:	c9                   	leave  
    1e2b:	2f                   	das    
    1e2c:	00 02                	add    BYTE PTR [edx],al
    1e2e:	04 01                	add    al,0x1
    1e30:	06                   	push   es
    1e31:	9e                   	sahf   
    1e32:	00 02                	add    BYTE PTR [edx],al
    1e34:	04 04                	add    al,0x4
    1e36:	02 23                	add    ah,BYTE PTR [ebx]
    1e38:	12 00                	adc    al,BYTE PTR [eax]
    1e3a:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1e41:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1e44:	74 00                	je     1e46 <sysEnter_Vector-0x12e1ba>
    1e46:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1e49:	58                   	pop    eax
    1e4a:	00 02                	add    BYTE PTR [edx],al
    1e4c:	04 08                	add    al,0x8
    1e4e:	06                   	push   es
    1e4f:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1e52:	e8 bb 00 02 04       	call   4021f12 <sysEnter_Vector+0x3ef1f12>
    1e57:	01 06                	add    DWORD PTR [esi],eax
    1e59:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1e5e:	02 31                	add    dh,BYTE PTR [ecx]
    1e60:	14 02                	adc    al,0x2
    1e62:	2c 14                	sub    al,0x14
    1e64:	00 02                	add    BYTE PTR [edx],al
    1e66:	04 01                	add    al,0x1
    1e68:	06                   	push   es
    1e69:	02 29                	add    ch,BYTE PTR [ecx]
    1e6b:	12 06                	adc    al,BYTE PTR [esi]
    1e6d:	4b                   	dec    ebx
    1e6e:	bd 00 02 04 01       	mov    ebp,0x1040200
    1e73:	06                   	push   es
    1e74:	ba 00 02 04 03       	mov    edx,0x3040200
    1e79:	06                   	push   es
    1e7a:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1e7d:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
    1e80:	81 4b e5 4c ae 9f ae 	or     DWORD PTR [ebx-0x1b],0xae9fae4c
    1e87:	77 00                	ja     1e89 <sysEnter_Vector-0x12e177>
    1e89:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1e8c:	06                   	push   es
    1e8d:	82                   	(bad)  
    1e8e:	06                   	push   es
    1e8f:	4b                   	dec    ebx
    1e90:	68 00 02 04 01       	push   0x1040200
    1e95:	06                   	push   es
    1e96:	66 06                	pushw  es
    1e98:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    1e9e:	08 f3                	or     bl,dh
    1ea0:	67 08 14             	or     BYTE PTR [si],dl
    1ea3:	00 02                	add    BYTE PTR [edx],al
    1ea5:	04 01                	add    al,0x1
    1ea7:	e5 77                	in     eax,0x77
    1ea9:	08 21                	or     BYTE PTR [ecx],ah
    1eab:	08 2f                	or     BYTE PTR [edi],ch
    1ead:	08 3d 3d 02 05 00    	or     BYTE PTR ds:0x5023d,bh
    1eb3:	01 01                	add    DWORD PTR [ecx],eax

Disassembly of section .debug_str:

00000000 <.debug_str>:
       0:	6c                   	ins    BYTE PTR es:[edi],dx
       1:	6f                   	outs   dx,DWORD PTR ds:[esi]
       2:	6e                   	outs   dx,BYTE PTR ds:[esi]
       3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
       7:	6e                   	outs   dx,BYTE PTR ds:[esi]
       8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
       c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
       e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
      10:	6f                   	outs   dx,DWORD PTR ds:[esi]
      11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
      13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
      16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
      18:	67 6e                	outs   dx,BYTE PTR ds:[si]
      1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
      1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
      21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
      23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
      25:	68 72 00 6c 6f       	push   0x6f6c0072
      2a:	6e                   	outs   dx,BYTE PTR ds:[esi]
      2b:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
      2f:	6e                   	outs   dx,BYTE PTR ds:[esi]
      30:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
      34:	73 69                	jae    9f <sysEnter_Vector-0x12ff61>
      36:	67 6e                	outs   dx,BYTE PTR ds:[si]
      38:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
      3d:	74 00                	je     3f <sysEnter_Vector-0x12ffc1>
      3f:	75 6e                	jne    af <sysEnter_Vector-0x12ff51>
      41:	73 69                	jae    ac <sysEnter_Vector-0x12ff54>
      43:	67 6e                	outs   dx,BYTE PTR ds:[si]
      45:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
      4a:	61                   	popa   
      4b:	72 00                	jb     4d <sysEnter_Vector-0x12ffb3>
      4d:	2f                   	das    
      4e:	68 6f 6d 65 2f       	push   0x2f656d6f
      53:	79 6f                	jns    c4 <sysEnter_Vector-0x12ff3c>
      55:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
      5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
      5d:	73 2f                	jae    8e <sysEnter_Vector-0x12ff72>
      5f:	61                   	popa   
      60:	70 72                	jo     d4 <sysEnter_Vector-0x12ff2c>
      62:	6f                   	outs   dx,DWORD PTR ds:[esi]
      63:	6a 2f                	push   0x2f
      65:	6c                   	ins    BYTE PTR es:[edi],dx
      66:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      6d:	4f                   	dec    edi
      6e:	53                   	push   ebx
      6f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
      72:	72 63                	jb     d7 <sysEnter_Vector-0x12ff29>
      74:	68 72 49 00 70       	push   0x70004972
      79:	72 6f                	jb     ea <sysEnter_Vector-0x12ff16>
      7b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
      7e:	73 45                	jae    c5 <sysEnter_Vector-0x12ff3b>
      80:	6e                   	outs   dx,BYTE PTR ds:[esi]
      81:	76 70                	jbe    f3 <sysEnter_Vector-0x12ff0d>
      83:	00 2e                	add    BYTE PTR [esi],ch
      85:	2e                   	cs
      86:	2f                   	das    
      87:	2e                   	cs
      88:	2e                   	cs
      89:	2f                   	das    
      8a:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      8e:	6a 2f                	push   0x2f
      90:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      93:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      9a:	63 2f                	arpl   WORD PTR [edi],bp
      9c:	73 74                	jae    112 <sysEnter_Vector-0x12feee>
      9e:	72 69                	jb     109 <sysEnter_Vector-0x12fef7>
      a0:	6e                   	outs   dx,BYTE PTR ds:[esi]
      a1:	67 73 2f             	addr16 jae d3 <sysEnter_Vector-0x12ff2d>
      a4:	73 74                	jae    11a <sysEnter_Vector-0x12fee6>
      a6:	72 63                	jb     10b <sysEnter_Vector-0x12fef5>
      a8:	68 72 2e 63 00       	push   0x632e72
      ad:	6c                   	ins    BYTE PTR es:[edi],dx
      ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
      af:	6e                   	outs   dx,BYTE PTR ds:[esi]
      b0:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
      b4:	75 62                	jne    118 <sysEnter_Vector-0x12fee8>
      b6:	6c                   	ins    BYTE PTR es:[edi],dx
      b7:	65 00 73 68          	add    BYTE PTR gs:[ebx+0x68],dh
      bb:	6f                   	outs   dx,DWORD PTR ds:[esi]
      bc:	72 74                	jb     132 <sysEnter_Vector-0x12fece>
      be:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
      c1:	74 00                	je     c3 <sysEnter_Vector-0x12ff3d>
      c3:	47                   	inc    edi
      c4:	4e                   	dec    esi
      c5:	55                   	push   ebp
      c6:	20 43 31             	and    BYTE PTR [ebx+0x31],al
      c9:	31 20                	xor    DWORD PTR [eax],esp
      cb:	35 2e 33 2e 30       	xor    eax,0x302e332e
      d0:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
      d6:	3d 69 6e 74 65       	cmp    eax,0x65746e69
      db:	6c                   	ins    BYTE PTR es:[edi],dx
      dc:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
      e2:	65                   	gs
      e3:	3d 67 65 6e 65       	cmp    eax,0x656e6567
      e8:	72 69                	jb     153 <sysEnter_Vector-0x12fead>
      ea:	63 20                	arpl   WORD PTR [eax],sp
      ec:	2d 6d 61 72 63       	sub    eax,0x6372616d
      f1:	68 3d 70 65 6e       	push   0x6e65703d
      f6:	74 69                	je     161 <sysEnter_Vector-0x12fe9f>
      f8:	75 6d                	jne    167 <sysEnter_Vector-0x12fe99>
      fa:	70 72                	jo     16e <sysEnter_Vector-0x12fe92>
      fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
      fd:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
     103:	66                   	data16
     104:	72 65                	jb     16b <sysEnter_Vector-0x12fe95>
     106:	65                   	gs
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	61                   	popa   
     10a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10b:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
     112:	76 
     113:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
     11a:	74 79                	je     195 <sysEnter_Vector-0x12fe6b>
     11c:	3d 68 69 64 64       	cmp    eax,0x64646968
     121:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     123:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
     129:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     12c:	7a 65                	jp     193 <sysEnter_Vector-0x12fe6d>
     12e:	74 79                	je     1a9 <sysEnter_Vector-0x12fe57>
     130:	70 65                	jo     197 <sysEnter_Vector-0x12fe69>
     132:	00 63 68             	add    BYTE PTR [ebx+0x68],ah
     135:	61                   	popa   
     136:	72 73                	jb     1ab <sysEnter_Vector-0x12fe55>
     138:	00 2e                	add    BYTE PTR [esi],ch
     13a:	2e                   	cs
     13b:	2f                   	das    
     13c:	2e                   	cs
     13d:	2e                   	cs
     13e:	2f                   	das    
     13f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     143:	6a 2f                	push   0x2f
     145:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     148:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     14f:	63 2f                	arpl   WORD PTR [edi],bp
     151:	73 74                	jae    1c7 <sysEnter_Vector-0x12fe39>
     153:	72 69                	jb     1be <sysEnter_Vector-0x12fe42>
     155:	6e                   	outs   dx,BYTE PTR ds:[esi]
     156:	67 73 2f             	addr16 jae 188 <sysEnter_Vector-0x12fe78>
     159:	73 74                	jae    1cf <sysEnter_Vector-0x12fe31>
     15b:	72 63                	jb     1c0 <sysEnter_Vector-0x12fe40>
     15d:	73 70                	jae    1cf <sysEnter_Vector-0x12fe31>
     15f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     160:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     163:	73 74                	jae    1d9 <sysEnter_Vector-0x12fe27>
     165:	72 63                	jb     1ca <sysEnter_Vector-0x12fe36>
     167:	73 70                	jae    1d9 <sysEnter_Vector-0x12fe27>
     169:	6e                   	outs   dx,BYTE PTR ds:[esi]
     16a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     16d:	72 63                	jb     1d2 <sysEnter_Vector-0x12fe2e>
     16f:	73 70                	jae    1e1 <sysEnter_Vector-0x12fe1f>
     171:	6e                   	outs   dx,BYTE PTR ds:[esi]
     172:	49                   	dec    ecx
     173:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     176:	72 74                	jb     1ec <sysEnter_Vector-0x12fe14>
     178:	6f                   	outs   dx,DWORD PTR ds:[esi]
     179:	6b 49 00 64          	imul   ecx,DWORD PTR [ecx+0x0],0x64
     17d:	65                   	gs
     17e:	6c                   	ins    BYTE PTR es:[edi],dx
     17f:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
     186:	2e                   	cs
     187:	2f                   	das    
     188:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     18c:	6a 2f                	push   0x2f
     18e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     191:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     198:	63 2f                	arpl   WORD PTR [edi],bp
     19a:	73 74                	jae    210 <sysEnter_Vector-0x12fdf0>
     19c:	72 69                	jb     207 <sysEnter_Vector-0x12fdf9>
     19e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     19f:	67 73 2f             	addr16 jae 1d1 <sysEnter_Vector-0x12fe2f>
     1a2:	73 74                	jae    218 <sysEnter_Vector-0x12fde8>
     1a4:	72 74                	jb     21a <sysEnter_Vector-0x12fde6>
     1a6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1a7:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     1aa:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     1ae:	74 73                	je     223 <sysEnter_Vector-0x12fddd>
     1b0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     1b3:	72 74                	jb     229 <sysEnter_Vector-0x12fdd7>
     1b5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1b6:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
     1b9:	74 6f                	je     22a <sysEnter_Vector-0x12fdd6>
     1bb:	61                   	popa   
     1bc:	00 69 74             	add    BYTE PTR [ecx+0x74],ch
     1bf:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1c0:	61                   	popa   
     1c1:	49                   	dec    ecx
     1c2:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
     1c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1c6:	69 49 00 72 65 76 65 	imul   ecx,DWORD PTR [ecx+0x0],0x65766572
     1cd:	72 73                	jb     242 <sysEnter_Vector-0x12fdbe>
     1cf:	65                   	gs
     1d0:	49                   	dec    ecx
     1d1:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     1d4:	67 6e                	outs   dx,BYTE PTR ds:[si]
     1d6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     1d9:	63 2f                	arpl   WORD PTR [edi],bp
     1db:	61                   	popa   
     1dc:	73 63                	jae    241 <sysEnter_Vector-0x12fdbf>
     1de:	69 69 2e 63 00 61 6e 	imul   ebp,DWORD PTR [ecx+0x2e],0x6e610063
     1e5:	73 69                	jae    250 <sysEnter_Vector-0x12fdb0>
     1e7:	45                   	inc    ebp
     1e8:	73 63                	jae    24d <sysEnter_Vector-0x12fdb3>
     1ea:	53                   	push   ebx
     1eb:	65                   	gs
     1ec:	71 00                	jno    1ee <sysEnter_Vector-0x12fe12>
     1ee:	73 61                	jae    251 <sysEnter_Vector-0x12fdaf>
     1f0:	76 65                	jbe    257 <sysEnter_Vector-0x12fda9>
     1f2:	43                   	inc    ebx
     1f3:	75 72                	jne    267 <sysEnter_Vector-0x12fd99>
     1f5:	73 6f                	jae    266 <sysEnter_Vector-0x12fd9a>
     1f7:	72 50                	jb     249 <sysEnter_Vector-0x12fdb7>
     1f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1fa:	73 69                	jae    265 <sysEnter_Vector-0x12fd9b>
     1fc:	74 69                	je     267 <sysEnter_Vector-0x12fd99>
     1fe:	6f                   	outs   dx,DWORD PTR ds:[esi]
     1ff:	6e                   	outs   dx,BYTE PTR ds:[esi]
     200:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
     203:	6e                   	outs   dx,BYTE PTR ds:[esi]
     204:	74 70                	je     276 <sysEnter_Vector-0x12fd8a>
     206:	74 72                	je     27a <sysEnter_Vector-0x12fd86>
     208:	5f                   	pop    edi
     209:	74 00                	je     20b <sysEnter_Vector-0x12fdf5>
     20b:	78 73                	js     280 <sysEnter_Vector-0x12fd80>
     20d:	74 72                	je     281 <sysEnter_Vector-0x12fd7f>
     20f:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     212:	6c                   	ins    BYTE PTR es:[edi],dx
     213:	65                   	gs
     214:	73 54                	jae    26a <sysEnter_Vector-0x12fd96>
     216:	6f                   	outs   dx,DWORD PTR ds:[esi]
     217:	43                   	inc    ebx
     218:	6c                   	ins    BYTE PTR es:[edi],dx
     219:	6f                   	outs   dx,DWORD PTR ds:[esi]
     21a:	73 65                	jae    281 <sysEnter_Vector-0x12fd7f>
     21c:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     21f:	73 74                	jae    295 <sysEnter_Vector-0x12fd6b>
     221:	6f                   	outs   dx,DWORD PTR ds:[esi]
     222:	72 65                	jb     289 <sysEnter_Vector-0x12fd77>
     224:	43                   	inc    ebx
     225:	75 72                	jne    299 <sysEnter_Vector-0x12fd67>
     227:	73 6f                	jae    298 <sysEnter_Vector-0x12fd68>
     229:	72 50                	jb     27b <sysEnter_Vector-0x12fd85>
     22b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     22c:	73 69                	jae    297 <sysEnter_Vector-0x12fd69>
     22e:	74 69                	je     299 <sysEnter_Vector-0x12fd67>
     230:	6f                   	outs   dx,DWORD PTR ds:[esi]
     231:	6e                   	outs   dx,BYTE PTR ds:[esi]
     232:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     235:	6c                   	ins    BYTE PTR es:[edi],dx
     236:	65                   	gs
     237:	73 54                	jae    28d <sysEnter_Vector-0x12fd73>
     239:	6f                   	outs   dx,DWORD PTR ds:[esi]
     23a:	43                   	inc    ebx
     23b:	6c                   	ins    BYTE PTR es:[edi],dx
     23c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     23d:	73 65                	jae    2a4 <sysEnter_Vector-0x12fd5c>
     23f:	43                   	inc    ebx
     240:	6f                   	outs   dx,DWORD PTR ds:[esi]
     241:	75 6e                	jne    2b1 <sysEnter_Vector-0x12fd4f>
     243:	74 00                	je     245 <sysEnter_Vector-0x12fdbb>
     245:	75 69                	jne    2b0 <sysEnter_Vector-0x12fd50>
     247:	6e                   	outs   dx,BYTE PTR ds:[esi]
     248:	74 33                	je     27d <sysEnter_Vector-0x12fd83>
     24a:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
     24d:	00 6d 6f             	add    BYTE PTR [ebp+0x6f],ch
     250:	76 65                	jbe    2b7 <sysEnter_Vector-0x12fd49>
     252:	54                   	push   esp
     253:	6f                   	outs   dx,DWORD PTR ds:[esi]
     254:	58                   	pop    eax
     255:	59                   	pop    ecx
     256:	00 79 73             	add    BYTE PTR [ecx+0x73],bh
     259:	74 72                	je     2cd <sysEnter_Vector-0x12fd33>
     25b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     25e:	63 2f                	arpl   WORD PTR [edi],bp
     260:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     263:	73 6f                	jae    2d4 <sysEnter_Vector-0x12fd2c>
     265:	6c                   	ins    BYTE PTR es:[edi],dx
     266:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
     26a:	53                   	push   ebx
     26b:	59                   	pop    ecx
     26c:	53                   	push   ebx
     26d:	43                   	inc    ebx
     26e:	41                   	inc    ecx
     26f:	4c                   	dec    esp
     270:	4c                   	dec    esp
     271:	5f                   	pop    edi
     272:	52                   	push   edx
     273:	45                   	inc    ebp
     274:	41                   	inc    ecx
     275:	44                   	inc    esp
     276:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     279:	53                   	push   ebx
     27a:	43                   	inc    ebx
     27b:	41                   	inc    ecx
     27c:	4c                   	dec    esp
     27d:	4c                   	dec    esp
     27e:	5f                   	pop    edi
     27f:	50                   	push   eax
     280:	49                   	dec    ecx
     281:	50                   	push   eax
     282:	45                   	inc    ebp
     283:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     286:	53                   	push   ebx
     287:	43                   	inc    ebx
     288:	41                   	inc    ecx
     289:	4c                   	dec    esp
     28a:	4c                   	dec    esp
     28b:	5f                   	pop    edi
     28c:	4f                   	dec    edi
     28d:	50                   	push   eax
     28e:	45                   	inc    ebp
     28f:	4e                   	dec    esi
     290:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     293:	7a 65                	jp     2fa <sysEnter_Vector-0x12fd06>
     295:	5f                   	pop    edi
     296:	74 00                	je     298 <sysEnter_Vector-0x12fd68>
     298:	53                   	push   ebx
     299:	59                   	pop    ecx
     29a:	53                   	push   ebx
     29b:	43                   	inc    ebx
     29c:	41                   	inc    ecx
     29d:	4c                   	dec    esp
     29e:	4c                   	dec    esp
     29f:	5f                   	pop    edi
     2a0:	47                   	inc    edi
     2a1:	45                   	inc    ebp
     2a2:	54                   	push   esp
     2a3:	44                   	inc    esp
     2a4:	45                   	inc    ebp
     2a5:	4e                   	dec    esi
     2a6:	54                   	push   esp
     2a7:	53                   	push   ebx
     2a8:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     2ab:	74 65                	je     312 <sysEnter_Vector-0x12fcee>
     2ad:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2ae:	76 00                	jbe    2b0 <sysEnter_Vector-0x12fd50>
     2b0:	67                   	addr16
     2b1:	65                   	gs
     2b2:	74 63                	je     317 <sysEnter_Vector-0x12fce9>
     2b4:	77 64                	ja     31a <sysEnter_Vector-0x12fce6>
     2b6:	49                   	dec    ecx
     2b7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     2ba:	53                   	push   ebx
     2bb:	43                   	inc    ebx
     2bc:	41                   	inc    ecx
     2bd:	4c                   	dec    esp
     2be:	4c                   	dec    esp
     2bf:	5f                   	pop    edi
     2c0:	52                   	push   edx
     2c1:	45                   	inc    ebp
     2c2:	42                   	inc    edx
     2c3:	4f                   	dec    edi
     2c4:	4f                   	dec    edi
     2c5:	54                   	push   esp
     2c6:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     2c9:	63 2f                	arpl   WORD PTR [edi],bp
     2cb:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     2cd:	76 69                	jbe    338 <sysEnter_Vector-0x12fcc8>
     2cf:	72 6f                	jb     340 <sysEnter_Vector-0x12fcc0>
     2d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     2d2:	6d                   	ins    DWORD PTR es:[edi],dx
     2d3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     2d5:	74 2e                	je     305 <sysEnter_Vector-0x12fcfb>
     2d7:	63 00                	arpl   WORD PTR [eax],ax
     2d9:	6c                   	ins    BYTE PTR es:[edi],dx
     2da:	61                   	popa   
     2db:	73 74                	jae    351 <sysEnter_Vector-0x12fcaf>
     2dd:	50                   	push   eax
     2de:	6f                   	outs   dx,DWORD PTR ds:[esi]
     2df:	70 75                	jo     356 <sysEnter_Vector-0x12fcaa>
     2e1:	6c                   	ins    BYTE PTR es:[edi],dx
     2e2:	61                   	popa   
     2e3:	74 65                	je     34a <sysEnter_Vector-0x12fcb6>
     2e5:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
     2e9:	53                   	push   ebx
     2ea:	43                   	inc    ebx
     2eb:	41                   	inc    ecx
     2ec:	4c                   	dec    esp
     2ed:	4c                   	dec    esp
     2ee:	5f                   	pop    edi
     2ef:	45                   	inc    ebp
     2f0:	58                   	pop    eax
     2f1:	45                   	inc    ebp
     2f2:	43                   	inc    ebx
     2f3:	4e                   	dec    esi
     2f4:	45                   	inc    ebp
     2f5:	57                   	push   edi
     2f6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     2f9:	53                   	push   ebx
     2fa:	43                   	inc    ebx
     2fb:	41                   	inc    ecx
     2fc:	4c                   	dec    esp
     2fd:	4c                   	dec    esp
     2fe:	5f                   	pop    edi
     2ff:	53                   	push   ebx
     300:	4c                   	dec    esp
     301:	45                   	inc    ebp
     302:	45                   	inc    ebp
     303:	50                   	push   eax
     304:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     307:	6c                   	ins    BYTE PTR es:[edi],dx
     308:	75 65                	jne    36f <sysEnter_Vector-0x12fc91>
     30a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     30d:	53                   	push   ebx
     30e:	43                   	inc    ebx
     30f:	41                   	inc    ecx
     310:	4c                   	dec    esp
     311:	4c                   	dec    esp
     312:	5f                   	pop    edi
     313:	47                   	inc    edi
     314:	45                   	inc    ebp
     315:	54                   	push   esp
     316:	54                   	push   esp
     317:	49                   	dec    ecx
     318:	4d                   	dec    ebp
     319:	45                   	inc    ebp
     31a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     31d:	53                   	push   ebx
     31e:	43                   	inc    ebx
     31f:	41                   	inc    ecx
     320:	4c                   	dec    esp
     321:	4c                   	dec    esp
     322:	5f                   	pop    edi
     323:	53                   	push   ebx
     324:	45                   	inc    ebp
     325:	54                   	push   esp
     326:	50                   	push   eax
     327:	52                   	push   edx
     328:	49                   	dec    ecx
     329:	4f                   	dec    edi
     32a:	52                   	push   edx
     32b:	49                   	dec    ecx
     32c:	54                   	push   esp
     32d:	59                   	pop    ecx
     32e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     331:	53                   	push   ebx
     332:	43                   	inc    ebx
     333:	41                   	inc    ecx
     334:	4c                   	dec    esp
     335:	4c                   	dec    esp
     336:	5f                   	pop    edi
     337:	53                   	push   ebx
     338:	45                   	inc    ebp
     339:	54                   	push   esp
     33a:	53                   	push   ebx
     33b:	54                   	push   esp
     33c:	44                   	inc    esp
     33d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     340:	53                   	push   ebx
     341:	43                   	inc    ebx
     342:	41                   	inc    ecx
     343:	4c                   	dec    esp
     344:	4c                   	dec    esp
     345:	5f                   	pop    edi
     346:	4d                   	dec    ebp
     347:	41                   	inc    ecx
     348:	53                   	push   ebx
     349:	4b                   	dec    ebx
     34a:	53                   	push   ebx
     34b:	49                   	dec    ecx
     34c:	47                   	inc    edi
     34d:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     350:	53                   	push   ebx
     351:	43                   	inc    ebx
     352:	41                   	inc    ecx
     353:	4c                   	dec    esp
     354:	4c                   	dec    esp
     355:	5f                   	pop    edi
     356:	43                   	inc    ebx
     357:	4c                   	dec    esp
     358:	4f                   	dec    edi
     359:	53                   	push   ebx
     35a:	45                   	inc    ebp
     35b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     35e:	53                   	push   ebx
     35f:	43                   	inc    ebx
     360:	41                   	inc    ecx
     361:	4c                   	dec    esp
     362:	4c                   	dec    esp
     363:	5f                   	pop    edi
     364:	55                   	push   ebp
     365:	4e                   	dec    esi
     366:	4c                   	dec    esp
     367:	49                   	dec    ecx
     368:	4e                   	dec    esi
     369:	4b                   	dec    ebx
     36a:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
     36d:	79 73                	jns    3e2 <sysEnter_Vector-0x12fc1e>
     36f:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     372:	6c                   	ins    BYTE PTR es:[edi],dx
     373:	73 00                	jae    375 <sysEnter_Vector-0x12fc8b>
     375:	53                   	push   ebx
     376:	59                   	pop    ecx
     377:	53                   	push   ebx
     378:	43                   	inc    ebx
     379:	41                   	inc    ecx
     37a:	4c                   	dec    esp
     37b:	4c                   	dec    esp
     37c:	5f                   	pop    edi
     37d:	46                   	inc    esi
     37e:	4f                   	dec    edi
     37f:	52                   	push   edx
     380:	4b                   	dec    ebx
     381:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     384:	53                   	push   ebx
     385:	43                   	inc    ebx
     386:	41                   	inc    ecx
     387:	4c                   	dec    esp
     388:	4c                   	dec    esp
     389:	5f                   	pop    edi
     38a:	53                   	push   ebx
     38b:	54                   	push   esp
     38c:	4f                   	dec    edi
     38d:	50                   	push   eax
     38e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     391:	53                   	push   ebx
     392:	43                   	inc    ebx
     393:	41                   	inc    ecx
     394:	4c                   	dec    esp
     395:	4c                   	dec    esp
     396:	5f                   	pop    edi
     397:	53                   	push   ebx
     398:	45                   	inc    ebp
     399:	45                   	inc    ebp
     39a:	4b                   	dec    ebx
     39b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     39e:	53                   	push   ebx
     39f:	43                   	inc    ebx
     3a0:	41                   	inc    ecx
     3a1:	4c                   	dec    esp
     3a2:	4c                   	dec    esp
     3a3:	5f                   	pop    edi
     3a4:	50                   	push   eax
     3a5:	52                   	push   edx
     3a6:	49                   	dec    ecx
     3a7:	4e                   	dec    esi
     3a8:	54                   	push   esp
     3a9:	44                   	inc    esp
     3aa:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3ad:	53                   	push   ebx
     3ae:	43                   	inc    ebx
     3af:	41                   	inc    ecx
     3b0:	4c                   	dec    esp
     3b1:	4c                   	dec    esp
     3b2:	5f                   	pop    edi
     3b3:	48                   	dec    eax
     3b4:	4c                   	dec    esp
     3b5:	54                   	push   esp
     3b6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3b9:	53                   	push   ebx
     3ba:	43                   	inc    ebx
     3bb:	41                   	inc    ecx
     3bc:	4c                   	dec    esp
     3bd:	4c                   	dec    esp
     3be:	5f                   	pop    edi
     3bf:	44                   	inc    esp
     3c0:	55                   	push   ebp
     3c1:	50                   	push   eax
     3c2:	33 00                	xor    eax,DWORD PTR [eax]
     3c4:	53                   	push   ebx
     3c5:	59                   	pop    ecx
     3c6:	53                   	push   ebx
     3c7:	43                   	inc    ebx
     3c8:	41                   	inc    ecx
     3c9:	4c                   	dec    esp
     3ca:	4c                   	dec    esp
     3cb:	5f                   	pop    edi
     3cc:	54                   	push   esp
     3cd:	41                   	inc    ecx
     3ce:	4b                   	dec    ebx
     3cf:	45                   	inc    ebp
     3d0:	41                   	inc    ecx
     3d1:	44                   	inc    esp
     3d2:	55                   	push   ebp
     3d3:	4d                   	dec    ebp
     3d4:	50                   	push   eax
     3d5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3d8:	53                   	push   ebx
     3d9:	43                   	inc    ebx
     3da:	41                   	inc    ecx
     3db:	4c                   	dec    esp
     3dc:	4c                   	dec    esp
     3dd:	5f                   	pop    edi
     3de:	54                   	push   esp
     3df:	45                   	inc    ebp
     3e0:	4c                   	dec    esp
     3e1:	4c                   	dec    esp
     3e2:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3e5:	53                   	push   ebx
     3e6:	43                   	inc    ebx
     3e7:	41                   	inc    ecx
     3e8:	4c                   	dec    esp
     3e9:	4c                   	dec    esp
     3ea:	5f                   	pop    edi
     3eb:	46                   	inc    esi
     3ec:	52                   	push   edx
     3ed:	45                   	inc    ebp
     3ee:	45                   	inc    ebp
     3ef:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3f2:	53                   	push   ebx
     3f3:	43                   	inc    ebx
     3f4:	41                   	inc    ecx
     3f5:	4c                   	dec    esp
     3f6:	4c                   	dec    esp
     3f7:	5f                   	pop    edi
     3f8:	45                   	inc    ebp
     3f9:	58                   	pop    eax
     3fa:	45                   	inc    ebp
     3fb:	43                   	inc    ebx
     3fc:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     3ff:	53                   	push   ebx
     400:	43                   	inc    ebx
     401:	41                   	inc    ecx
     402:	4c                   	dec    esp
     403:	4c                   	dec    esp
     404:	5f                   	pop    edi
     405:	49                   	dec    ecx
     406:	4e                   	dec    esi
     407:	56                   	push   esi
     408:	41                   	inc    ecx
     409:	4c                   	dec    esp
     40a:	49                   	dec    ecx
     40b:	44                   	inc    esp
     40c:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     40f:	53                   	push   ebx
     410:	43                   	inc    ebx
     411:	41                   	inc    ecx
     412:	4c                   	dec    esp
     413:	4c                   	dec    esp
     414:	5f                   	pop    edi
     415:	52                   	push   edx
     416:	45                   	inc    ebp
     417:	47                   	inc    edi
     418:	45                   	inc    ebp
     419:	58                   	pop    eax
     41a:	49                   	dec    ecx
     41b:	54                   	push   esp
     41c:	48                   	dec    eax
     41d:	41                   	inc    ecx
     41e:	4e                   	dec    esi
     41f:	44                   	inc    esp
     420:	4c                   	dec    esp
     421:	45                   	inc    ebp
     422:	52                   	push   edx
     423:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     426:	53                   	push   ebx
     427:	43                   	inc    ebx
     428:	41                   	inc    ecx
     429:	4c                   	dec    esp
     42a:	4c                   	dec    esp
     42b:	5f                   	pop    edi
     42c:	53                   	push   ebx
     42d:	54                   	push   esp
     42e:	41                   	inc    ecx
     42f:	54                   	push   esp
     430:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     433:	53                   	push   ebx
     434:	43                   	inc    ebx
     435:	41                   	inc    ecx
     436:	4c                   	dec    esp
     437:	4c                   	dec    esp
     438:	5f                   	pop    edi
     439:	47                   	inc    edi
     43a:	45                   	inc    ebp
     43b:	54                   	push   esp
     43c:	54                   	push   esp
     43d:	49                   	dec    ecx
     43e:	43                   	inc    ebx
     43f:	4b                   	dec    ebx
     440:	53                   	push   ebx
     441:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     444:	53                   	push   ebx
     445:	43                   	inc    ebx
     446:	41                   	inc    ecx
     447:	4c                   	dec    esp
     448:	4c                   	dec    esp
     449:	5f                   	pop    edi
     44a:	45                   	inc    ebp
     44b:	4e                   	dec    esi
     44c:	44                   	inc    esp
     44d:	50                   	push   eax
     44e:	52                   	push   edx
     44f:	4f                   	dec    edi
     450:	43                   	inc    ebx
     451:	45                   	inc    ebp
     452:	53                   	push   ebx
     453:	53                   	push   ebx
     454:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     457:	74 65                	je     4be <sysEnter_Vector-0x12fb42>
     459:	6e                   	outs   dx,BYTE PTR ds:[esi]
     45a:	76 00                	jbe    45c <sysEnter_Vector-0x12fba4>
     45c:	53                   	push   ebx
     45d:	59                   	pop    ecx
     45e:	53                   	push   ebx
     45f:	43                   	inc    ebx
     460:	41                   	inc    ecx
     461:	4c                   	dec    esp
     462:	4c                   	dec    esp
     463:	5f                   	pop    edi
     464:	53                   	push   ebx
     465:	45                   	inc    ebp
     466:	54                   	push   esp
     467:	43                   	inc    ebx
     468:	57                   	push   edi
     469:	44                   	inc    esp
     46a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     46d:	53                   	push   ebx
     46e:	43                   	inc    ebx
     46f:	41                   	inc    ecx
     470:	4c                   	dec    esp
     471:	4c                   	dec    esp
     472:	5f                   	pop    edi
     473:	57                   	push   edi
     474:	52                   	push   edx
     475:	49                   	dec    ecx
     476:	54                   	push   esp
     477:	45                   	inc    ebp
     478:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     47b:	53                   	push   ebx
     47c:	43                   	inc    ebx
     47d:	41                   	inc    ecx
     47e:	4c                   	dec    esp
     47f:	4c                   	dec    esp
     480:	5f                   	pop    edi
     481:	50                   	push   eax
     482:	52                   	push   edx
     483:	49                   	dec    ecx
     484:	4e                   	dec    esi
     485:	54                   	push   esp
     486:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     489:	53                   	push   ebx
     48a:	43                   	inc    ebx
     48b:	41                   	inc    ecx
     48c:	4c                   	dec    esp
     48d:	4c                   	dec    esp
     48e:	5f                   	pop    edi
     48f:	47                   	inc    edi
     490:	45                   	inc    ebp
     491:	54                   	push   esp
     492:	43                   	inc    ebx
     493:	57                   	push   edi
     494:	44                   	inc    esp
     495:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     498:	53                   	push   ebx
     499:	43                   	inc    ebx
     49a:	41                   	inc    ecx
     49b:	4c                   	dec    esp
     49c:	4c                   	dec    esp
     49d:	5f                   	pop    edi
     49e:	57                   	push   edi
     49f:	41                   	inc    ecx
     4a0:	49                   	dec    ecx
     4a1:	54                   	push   esp
     4a2:	46                   	inc    esi
     4a3:	4f                   	dec    edi
     4a4:	52                   	push   edx
     4a5:	50                   	push   eax
     4a6:	49                   	dec    ecx
     4a7:	44                   	inc    esp
     4a8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4ab:	53                   	push   ebx
     4ac:	43                   	inc    ebx
     4ad:	41                   	inc    ecx
     4ae:	4c                   	dec    esp
     4af:	4c                   	dec    esp
     4b0:	5f                   	pop    edi
     4b1:	4d                   	dec    ebp
     4b2:	4d                   	dec    ebp
     4b3:	41                   	inc    ecx
     4b4:	50                   	push   eax
     4b5:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     4b8:	74 65                	je     51f <sysEnter_Vector-0x12fae1>
     4ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
     4bb:	76 49                	jbe    506 <sysEnter_Vector-0x12fafa>
     4bd:	00 76 61             	add    BYTE PTR [esi+0x61],dh
     4c0:	72 6e                	jb     530 <sysEnter_Vector-0x12fad0>
     4c2:	61                   	popa   
     4c3:	6d                   	ins    DWORD PTR es:[edi],dx
     4c4:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
     4c8:	53                   	push   ebx
     4c9:	43                   	inc    ebx
     4ca:	41                   	inc    ecx
     4cb:	4c                   	dec    esp
     4cc:	4c                   	dec    esp
     4cd:	5f                   	pop    edi
     4ce:	41                   	inc    ecx
     4cf:	4c                   	dec    esp
     4d0:	4c                   	dec    esp
     4d1:	4f                   	dec    edi
     4d2:	43                   	inc    ebx
     4d3:	48                   	dec    eax
     4d4:	45                   	inc    ebp
     4d5:	41                   	inc    ecx
     4d6:	50                   	push   eax
     4d7:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
     4da:	53                   	push   ebx
     4db:	43                   	inc    ebx
     4dc:	41                   	inc    ecx
     4dd:	4c                   	dec    esp
     4de:	4c                   	dec    esp
     4df:	5f                   	pop    edi
     4e0:	53                   	push   ebx
     4e1:	45                   	inc    ebp
     4e2:	54                   	push   esp
     4e3:	53                   	push   ebx
     4e4:	49                   	dec    ecx
     4e5:	47                   	inc    edi
     4e6:	41                   	inc    ecx
     4e7:	43                   	inc    ebx
     4e8:	54                   	push   esp
     4e9:	49                   	dec    ecx
     4ea:	4f                   	dec    edi
     4eb:	4e                   	dec    esi
     4ec:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     4ef:	74 63                	je     554 <sysEnter_Vector-0x12faac>
     4f1:	77 64                	ja     557 <sysEnter_Vector-0x12faa9>
     4f3:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     4f6:	74 56                	je     54e <sysEnter_Vector-0x12fab2>
     4f8:	61                   	popa   
     4f9:	6c                   	ins    BYTE PTR es:[edi],dx
     4fa:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
     4fd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     4fe:	73 65                	jae    565 <sysEnter_Vector-0x12fa9b>
     500:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     503:	73 6f                	jae    574 <sysEnter_Vector-0x12fa8c>
     505:	6c                   	ins    BYTE PTR es:[edi],dx
     506:	76 65                	jbe    56d <sysEnter_Vector-0x12fa93>
     508:	50                   	push   eax
     509:	61                   	popa   
     50a:	74 68                	je     574 <sysEnter_Vector-0x12fa8c>
     50c:	5f                   	pop    edi
     50d:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     50f:	76 50                	jbe    561 <sysEnter_Vector-0x12fa9f>
     511:	61                   	popa   
     512:	74 68                	je     57c <sysEnter_Vector-0x12fa84>
     514:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     517:	72 65                	jb     57e <sysEnter_Vector-0x12fa82>
     519:	61                   	popa   
     51a:	6d                   	ins    DWORD PTR es:[edi],dx
     51b:	00 70 61             	add    BYTE PTR [eax+0x61],dh
     51e:	74 68                	je     588 <sysEnter_Vector-0x12fa78>
     520:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     523:	69 74 65 5f 74 69 6d 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x656d6974
     52a:	65 
     52b:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     52f:	6c                   	ins    BYTE PTR es:[edi],dx
     530:	49                   	dec    ecx
     531:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     534:	61                   	popa   
     535:	72 74                	jb     5ab <sysEnter_Vector-0x12fa55>
     537:	46                   	inc    esi
     538:	69 6c 65 50 6f 73 00 	imul   ebp,DWORD PTR [ebp+eiz*2+0x50],0x7300736f
     53f:	73 
     540:	74 61                	je     5a3 <sysEnter_Vector-0x12fa5d>
     542:	74 49                	je     58d <sysEnter_Vector-0x12fa73>
     544:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     547:	50                   	push   eax
     548:	74 72                	je     5bc <sysEnter_Vector-0x12fa44>
     54a:	00 75 73             	add    BYTE PTR [ebp+0x73],dh
     54d:	65                   	gs
     54e:	50                   	push   eax
     54f:	61                   	popa   
     550:	74 68                	je     5ba <sysEnter_Vector-0x12fa46>
     552:	56                   	push   esi
     553:	61                   	popa   
     554:	72 69                	jb     5bf <sysEnter_Vector-0x12fa41>
     556:	61                   	popa   
     557:	62 6c 65 00          	bound  ebp,QWORD PTR [ebp+eiz*2+0x0]
     55b:	72 65                	jb     5c2 <sysEnter_Vector-0x12fa3e>
     55d:	73 6f                	jae    5ce <sysEnter_Vector-0x12fa32>
     55f:	6c                   	ins    BYTE PTR es:[edi],dx
     560:	76 65                	jbe    5c7 <sysEnter_Vector-0x12fa39>
     562:	50                   	push   eax
     563:	61                   	popa   
     564:	74 68                	je     5ce <sysEnter_Vector-0x12fa32>
     566:	5f                   	pop    edi
     567:	72 65                	jb     5ce <sysEnter_Vector-0x12fa32>
     569:	73 50                	jae    5bb <sysEnter_Vector-0x12fa45>
     56b:	61                   	popa   
     56c:	74 68                	je     5d6 <sysEnter_Vector-0x12fa2a>
     56e:	00 74 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],dh
     572:	6c                   	ins    BYTE PTR es:[edi],dx
     573:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
     576:	65                   	gs
     577:	61                   	popa   
     578:	74 65                	je     5df <sysEnter_Vector-0x12fa21>
     57a:	5f                   	pop    edi
     57b:	64                   	fs
     57c:	61                   	popa   
     57d:	74 65                	je     5e4 <sysEnter_Vector-0x12fa1c>
     57f:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     582:	74 6c                	je     5f0 <sysEnter_Vector-0x12fa10>
     584:	69 6e 65 49 00 75 69 	imul   ebp,DWORD PTR [esi+0x65],0x69750049
     58b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     58c:	74 31                	je     5bf <sysEnter_Vector-0x12fa41>
     58e:	36                   	ss
     58f:	5f                   	pop    edi
     590:	74 00                	je     592 <sysEnter_Vector-0x12fa6e>
     592:	77 72                	ja     606 <sysEnter_Vector-0x12f9fa>
     594:	69 74 65 5f 64 61 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x5f],0x65746164
     59b:	65 
     59c:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
     59f:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     5a1:	49                   	dec    ecx
     5a2:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     5a5:	73 6f                	jae    616 <sysEnter_Vector-0x12f9ea>
     5a7:	6c                   	ins    BYTE PTR es:[edi],dx
     5a8:	76 65                	jbe    60f <sysEnter_Vector-0x12f9f1>
     5aa:	50                   	push   eax
     5ab:	61                   	popa   
     5ac:	74 68                	je     616 <sysEnter_Vector-0x12f9ea>
     5ae:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     5b1:	5f                   	pop    edi
     5b2:	6c                   	ins    BYTE PTR es:[edi],dx
     5b3:	61                   	popa   
     5b4:	73 74                	jae    62a <sysEnter_Vector-0x12f9d6>
     5b6:	6d                   	ins    DWORD PTR es:[edi],dx
     5b7:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5b8:	64 00 70 6f          	add    BYTE PTR fs:[eax+0x6f],dh
     5bc:	73 69                	jae    627 <sysEnter_Vector-0x12f9d9>
     5be:	74 69                	je     629 <sysEnter_Vector-0x12f9d7>
     5c0:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5c1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5c2:	00 77 72             	add    BYTE PTR [edi+0x72],dh
     5c5:	69 74 65 49 00 73 65 	imul   esi,DWORD PTR [ebp+eiz*2+0x49],0x65657300
     5cc:	65 
     5cd:	6b 00 77             	imul   eax,DWORD PTR [eax],0x77
     5d0:	68 65 6e 63 65       	push   0x65636e65
     5d5:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     5d8:	74 6c                	je     646 <sysEnter_Vector-0x12f9ba>
     5da:	69 6e 65 00 67 65 74 	imul   ebp,DWORD PTR [esi+0x65],0x74656700
     5e1:	6c                   	ins    BYTE PTR es:[edi],dx
     5e2:	69 6e 65 52 65 74 75 	imul   ebp,DWORD PTR [esi+0x65],0x75746552
     5e9:	72 6e                	jb     659 <sysEnter_Vector-0x12f9a7>
     5eb:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     5ee:	65 6f                	outs   dx,DWORD PTR gs:[esi]
     5f0:	70 65                	jo     657 <sysEnter_Vector-0x12f9a9>
     5f2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5f3:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     5f7:	65                   	gs
     5f8:	54                   	push   esp
     5f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     5fa:	4f                   	dec    edi
     5fb:	75 74                	jne    671 <sysEnter_Vector-0x12f98f>
     5fd:	70 75                	jo     674 <sysEnter_Vector-0x12f98c>
     5ff:	74 00                	je     601 <sysEnter_Vector-0x12f9ff>
     601:	63 6c 75 73          	arpl   WORD PTR [ebp+esi*2+0x73],bp
     605:	74 65                	je     66c <sysEnter_Vector-0x12f994>
     607:	72 00                	jb     609 <sysEnter_Vector-0x12f9f7>
     609:	61                   	popa   
     60a:	63 63 65             	arpl   WORD PTR [ebx+0x65],sp
     60d:	73 73                	jae    682 <sysEnter_Vector-0x12f97e>
     60f:	5f                   	pop    edi
     610:	64                   	fs
     611:	61                   	popa   
     612:	74 65                	je     679 <sysEnter_Vector-0x12f987>
     614:	00 73 66             	add    BYTE PTR [ebx+0x66],dh
     617:	73 74                	jae    68d <sysEnter_Vector-0x12f973>
     619:	61                   	popa   
     61a:	74 00                	je     61c <sysEnter_Vector-0x12f9e4>
     61c:	77 72                	ja     690 <sysEnter_Vector-0x12f970>
     61e:	69 74 65 00 75 6e 6c 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x696c6e75
     625:	69 
     626:	6e                   	outs   dx,BYTE PTR ds:[esi]
     627:	6b 00 65             	imul   eax,DWORD PTR [eax],0x65
     62a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     62b:	74 72                	je     69f <sysEnter_Vector-0x12f961>
     62d:	69 65 73 00 66 69 6c 	imul   esp,DWORD PTR [ebp+0x73],0x6c696600
     634:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     636:	61                   	popa   
     637:	6d                   	ins    DWORD PTR es:[edi],dx
     638:	65 00 6f 75          	add    BYTE PTR gs:[edi+0x75],ch
     63c:	74 50                	je     68e <sysEnter_Vector-0x12f972>
     63e:	61                   	popa   
     63f:	74 68                	je     6a9 <sysEnter_Vector-0x12f957>
     641:	00 6c 69 6e          	add    BYTE PTR [ecx+ebp*2+0x6e],ch
     645:	65                   	gs
     646:	70 74                	jo     6bc <sysEnter_Vector-0x12f944>
     648:	72 00                	jb     64a <sysEnter_Vector-0x12f9b6>
     64a:	69 73 5f 64 69 72 00 	imul   esi,DWORD PTR [ebx+0x5f],0x726964
     651:	64 69 72 65 6e 74 72 	imul   esi,DWORD PTR fs:[edx+0x65],0x7972746e
     658:	79 
     659:	5f                   	pop    edi
     65a:	74 00                	je     65c <sysEnter_Vector-0x12f9a4>
     65c:	66                   	data16
     65d:	73 74                	jae    6d3 <sysEnter_Vector-0x12f92d>
     65f:	61                   	popa   
     660:	74 5f                	je     6c1 <sysEnter_Vector-0x12f93f>
     662:	74 00                	je     664 <sysEnter_Vector-0x12f99c>
     664:	74 6f                	je     6d5 <sysEnter_Vector-0x12f92b>
     666:	6b 65 6e 00          	imul   esp,DWORD PTR [ebp+0x6e],0x0
     66a:	5f                   	pop    edi
     66b:	42                   	inc    edx
     66c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     66d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     66e:	6c                   	ins    BYTE PTR es:[edi],dx
     66f:	00 67 65             	add    BYTE PTR [edi+0x65],ah
     672:	74 64                	je     6d8 <sysEnter_Vector-0x12f928>
     674:	69 72 49 00 64 69 72 	imul   esi,DWORD PTR [edx+0x49],0x72696400
     67b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     67d:	74 72                	je     6f1 <sysEnter_Vector-0x12f90f>
     67f:	79 00                	jns    681 <sysEnter_Vector-0x12f97f>
     681:	72 65                	jb     6e8 <sysEnter_Vector-0x12f918>
     683:	61                   	popa   
     684:	64                   	fs
     685:	49                   	dec    ecx
     686:	00 6c 65 6e          	add    BYTE PTR [ebp+eiz*2+0x6e],ch
     68a:	67 74 68             	addr16 je 6f5 <sysEnter_Vector-0x12f90b>
     68d:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     690:	61                   	popa   
     691:	64 00 6d 6f          	add    BYTE PTR fs:[ebp+0x6f],ch
     695:	64 65 00 62 75       	fs add BYTE PTR fs:gs:[edx+0x75],ah
     69a:	66                   	data16
     69b:	66                   	data16
     69c:	65                   	gs
     69d:	72 00                	jb     69f <sysEnter_Vector-0x12f961>
     69f:	62 79 74             	bound  edi,QWORD PTR [ecx+0x74]
     6a2:	65                   	gs
     6a3:	73 50                	jae    6f5 <sysEnter_Vector-0x12f90b>
     6a5:	61                   	popa   
     6a6:	72 73                	jb     71b <sysEnter_Vector-0x12f8e5>
     6a8:	65 64 00 63 72       	gs add BYTE PTR fs:gs:[ebx+0x72],ah
     6ad:	65                   	gs
     6ae:	61                   	popa   
     6af:	74 65                	je     716 <sysEnter_Vector-0x12f8ea>
     6b1:	5f                   	pop    edi
     6b2:	74 69                	je     71d <sysEnter_Vector-0x12f8e3>
     6b4:	6d                   	ins    DWORD PTR es:[edi],dx
     6b5:	65 00 63 6c          	add    BYTE PTR gs:[ebx+0x6c],ah
     6b9:	6f                   	outs   dx,DWORD PTR ds:[esi]
     6ba:	73 65                	jae    721 <sysEnter_Vector-0x12f8df>
     6bc:	49                   	dec    ecx
     6bd:	00 73 65             	add    BYTE PTR [ebx+0x65],dh
     6c0:	65 6b 49 00 73       	imul   ecx,DWORD PTR gs:[ecx+0x0],0x73
     6c5:	72 63                	jb     72a <sysEnter_Vector-0x12f8d6>
     6c7:	2f                   	das    
     6c8:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     6cf:	75 69                	jne    73a <sysEnter_Vector-0x12f8c6>
     6d1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6d2:	74 38                	je     70c <sysEnter_Vector-0x12f8f4>
     6d4:	5f                   	pop    edi
     6d5:	74 00                	je     6d7 <sysEnter_Vector-0x12f929>
     6d7:	73 74                	jae    74d <sysEnter_Vector-0x12f8b3>
     6d9:	5f                   	pop    edi
     6da:	73 69                	jae    745 <sysEnter_Vector-0x12f8bb>
     6dc:	7a 65                	jp     743 <sysEnter_Vector-0x12f8bd>
     6de:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     6e1:	73 6f                	jae    752 <sysEnter_Vector-0x12f8ae>
     6e3:	6c                   	ins    BYTE PTR es:[edi],dx
     6e4:	76 65                	jbe    74b <sysEnter_Vector-0x12f8b5>
     6e6:	50                   	push   eax
     6e7:	61                   	popa   
     6e8:	74 68                	je     752 <sysEnter_Vector-0x12f8ae>
     6ea:	5f                   	pop    edi
     6eb:	63 77 64             	arpl   WORD PTR [edi+0x64],si
     6ee:	00 68 61             	add    BYTE PTR [eax+0x61],ch
     6f1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     6f2:	64                   	fs
     6f3:	6c                   	ins    BYTE PTR es:[edi],dx
     6f4:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
     6f8:	73 6f                	jae    769 <sysEnter_Vector-0x12f897>
     6fa:	6c                   	ins    BYTE PTR es:[edi],dx
     6fb:	76 65                	jbe    762 <sysEnter_Vector-0x12f89e>
     6fd:	50                   	push   eax
     6fe:	61                   	popa   
     6ff:	74 68                	je     769 <sysEnter_Vector-0x12f897>
     701:	5f                   	pop    edi
     702:	69 6e 50 61 74 68 00 	imul   ebp,DWORD PTR [esi+0x50],0x687461
     709:	6c                   	ins    BYTE PTR es:[edi],dx
     70a:	4c                   	dec    esp
     70b:	69 6e 65 50 74 72 4c 	imul   ebp,DWORD PTR [esi+0x65],0x4c727450
     712:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     714:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     717:	6c                   	ins    BYTE PTR es:[edi],dx
     718:	65                   	gs
     719:	5f                   	pop    edi
     71a:	63 6c 65 61          	arpl   WORD PTR [ebp+eiz*2+0x61],bp
     71e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     71f:	75 70                	jne    791 <sysEnter_Vector-0x12f86f>
     721:	00 62 79             	add    BYTE PTR [edx+0x79],ah
     724:	74 65                	je     78b <sysEnter_Vector-0x12f875>
     726:	73 52                	jae    77a <sysEnter_Vector-0x12f886>
     728:	65                   	gs
     729:	74 75                	je     7a0 <sysEnter_Vector-0x12f860>
     72b:	72 6e                	jb     79b <sysEnter_Vector-0x12f865>
     72d:	65 64 00 67 65       	gs add BYTE PTR fs:gs:[edi+0x65],ah
     732:	74 64                	je     798 <sysEnter_Vector-0x12f868>
     734:	69 72 00 62 75 66 66 	imul   esi,DWORD PTR [edx+0x0],0x66667562
     73b:	65                   	gs
     73c:	72 43                	jb     781 <sysEnter_Vector-0x12f87f>
     73e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     73f:	75 6e                	jne    7af <sysEnter_Vector-0x12f851>
     741:	74 00                	je     743 <sysEnter_Vector-0x12f8bd>
     743:	67                   	addr16
     744:	65                   	gs
     745:	74 63                	je     7aa <sysEnter_Vector-0x12f856>
     747:	68 61 72 00 67       	push   0x67007261
     74c:	65                   	gs
     74d:	74 73                	je     7c2 <sysEnter_Vector-0x12f83e>
     74f:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     752:	74 63                	je     7b7 <sysEnter_Vector-0x12f849>
     754:	00 70 75             	add    BYTE PTR [eax+0x75],dh
     757:	74 73                	je     7cc <sysEnter_Vector-0x12f834>
     759:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     75c:	78 6c                	js     7ca <sysEnter_Vector-0x12f836>
     75e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     760:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     763:	63 68 61             	arpl   WORD PTR [eax+0x61],bp
     766:	72 00                	jb     768 <sysEnter_Vector-0x12f898>
     768:	73 72                	jae    7dc <sysEnter_Vector-0x12f824>
     76a:	63 2f                	arpl   WORD PTR [edi],bp
     76c:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
     773:	6e                   	outs   dx,BYTE PTR ds:[esi]
     774:	70 75                	jo     7eb <sysEnter_Vector-0x12f815>
     776:	74 2e                	je     7a6 <sysEnter_Vector-0x12f85a>
     778:	63 00                	arpl   WORD PTR [eax],ax
     77a:	67                   	addr16
     77b:	65                   	gs
     77c:	74 73                	je     7f1 <sysEnter_Vector-0x12f80f>
     77e:	45                   	inc    ebp
     77f:	72 72                	jb     7f3 <sysEnter_Vector-0x12f80d>
     781:	6f                   	outs   dx,DWORD PTR ds:[esi]
     782:	72 00                	jb     784 <sysEnter_Vector-0x12f87c>
     784:	6c                   	ins    BYTE PTR es:[edi],dx
     785:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     788:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     78b:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
     792:	74 53                	je     7e7 <sysEnter_Vector-0x12f819>
     794:	70 61                	jo     7f7 <sysEnter_Vector-0x12f809>
     796:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     799:	74 72                	je     80d <sysEnter_Vector-0x12f7f3>
     79b:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     79e:	67 44                	addr16 inc esp
     7a0:	61                   	popa   
     7a1:	74 61                	je     804 <sysEnter_Vector-0x12f7fc>
     7a3:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     7a6:	65                   	gs
     7a7:	65                   	gs
     7a8:	70 54                	jo     7fe <sysEnter_Vector-0x12f802>
     7aa:	69 63 6b 73 00 71 75 	imul   esp,DWORD PTR [ebx+0x6b],0x75710073
     7b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7b2:	74 65                	je     819 <sysEnter_Vector-0x12f7e7>
     7b4:	50                   	push   eax
     7b5:	74 72                	je     829 <sysEnter_Vector-0x12f7d7>
     7b7:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     7ba:	67 76 50             	addr16 jbe 80d <sysEnter_Vector-0x12f7f3>
     7bd:	74 72                	je     831 <sysEnter_Vector-0x12f7cf>
     7bf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     7c2:	61                   	popa   
     7c3:	72 74                	jb     839 <sysEnter_Vector-0x12f7c7>
     7c5:	5f                   	pop    edi
     7c6:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7c7:	66 5f                	pop    di
     7c9:	77 6f                	ja     83a <sysEnter_Vector-0x12f7c6>
     7cb:	72 64                	jb     831 <sysEnter_Vector-0x12f7cf>
     7cd:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     7d1:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
     7d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7d5:	69 74 00 73 74 61 74 	imul   esi,DWORD PTR [eax+eax*1+0x73],0x65746174
     7dc:	65 
     7dd:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
     7e0:	62 75 69             	bound  esi,QWORD PTR [ebp+0x69]
     7e3:	6c                   	ins    BYTE PTR es:[edi],dx
     7e4:	74 69                	je     84f <sysEnter_Vector-0x12f7b1>
     7e6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     7e7:	5f                   	pop    edi
     7e8:	76 61                	jbe    84b <sysEnter_Vector-0x12f7b5>
     7ea:	5f                   	pop    edi
     7eb:	6c                   	ins    BYTE PTR es:[edi],dx
     7ec:	69 73 74 00 73 70 6c 	imul   esi,DWORD PTR [ebx+0x74],0x6c707300
     7f3:	69 74 00 66 6f 72 6b 	imul   esi,DWORD PTR [eax+eax*1+0x66],0x6b726f
     7fa:	00 
     7fb:	73 70                	jae    86d <sysEnter_Vector-0x12f793>
     7fd:	61                   	popa   
     7fe:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
     801:	74 72                	je     875 <sysEnter_Vector-0x12f78b>
     803:	00 74 65 6d          	add    BYTE PTR [ebp+eiz*2+0x6d],dh
     807:	70 00                	jo     809 <sysEnter_Vector-0x12f7f7>
     809:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     80c:	6c                   	ins    BYTE PTR es:[edi],dx
     80d:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     814:	67 76 00             	addr16 jbe 817 <sysEnter_Vector-0x12f7e9>
     817:	77 61                	ja     87a <sysEnter_Vector-0x12f786>
     819:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
     820:	65 
     821:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
     824:	4c                   	dec    esp
     825:	65                   	gs
     826:	76 65                	jbe    88d <sysEnter_Vector-0x12f773>
     828:	6c                   	ins    BYTE PTR es:[edi],dx
     829:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     82c:	65 63 62 00          	arpl   WORD PTR gs:[edx+0x0],sp
     830:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     833:	6c                   	ins    BYTE PTR es:[edi],dx
     834:	6e                   	outs   dx,BYTE PTR ds:[esi]
     835:	75 6d                	jne    8a4 <sysEnter_Vector-0x12f75c>
     837:	00 64 62 6c          	add    BYTE PTR [edx+eiz*2+0x6c],ah
     83b:	71 75                	jno    8b2 <sysEnter_Vector-0x12f74e>
     83d:	6f                   	outs   dx,DWORD PTR ds:[esi]
     83e:	74 65                	je     8a5 <sysEnter_Vector-0x12f75b>
     840:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
     843:	65                   	gs
     844:	65                   	gs
     845:	70 00                	jo     847 <sysEnter_Vector-0x12f7b9>
     847:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     84a:	6c                   	ins    BYTE PTR es:[edi],dx
     84b:	69 6e 65 54 6f 41 72 	imul   ebp,DWORD PTR [esi+0x65],0x72416f54
     852:	67 76 49             	addr16 jbe 89e <sysEnter_Vector-0x12f762>
     855:	00 64 6f 5f          	add    BYTE PTR [edi+ebp*2+0x5f],ah
     859:	73 79                	jae    8d4 <sysEnter_Vector-0x12f72c>
     85b:	73 63                	jae    8c0 <sysEnter_Vector-0x12f740>
     85d:	61                   	popa   
     85e:	6c                   	ins    BYTE PTR es:[edi],dx
     85f:	6c                   	ins    BYTE PTR es:[edi],dx
     860:	31 00                	xor    DWORD PTR [eax],eax
     862:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     864:	5f                   	pop    edi
     865:	73 79                	jae    8e0 <sysEnter_Vector-0x12f720>
     867:	73 63                	jae    8cc <sysEnter_Vector-0x12f734>
     869:	61                   	popa   
     86a:	6c                   	ins    BYTE PTR es:[edi],dx
     86b:	6c                   	ins    BYTE PTR es:[edi],dx
     86c:	32 00                	xor    al,BYTE PTR [eax]
     86e:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     870:	5f                   	pop    edi
     871:	73 79                	jae    8ec <sysEnter_Vector-0x12f714>
     873:	73 63                	jae    8d8 <sysEnter_Vector-0x12f728>
     875:	61                   	popa   
     876:	6c                   	ins    BYTE PTR es:[edi],dx
     877:	6c                   	ins    BYTE PTR es:[edi],dx
     878:	33 00                	xor    eax,DWORD PTR [eax]
     87a:	64 6f                	outs   dx,DWORD PTR fs:[esi]
     87c:	5f                   	pop    edi
     87d:	73 79                	jae    8f8 <sysEnter_Vector-0x12f708>
     87f:	73 63                	jae    8e4 <sysEnter_Vector-0x12f71c>
     881:	61                   	popa   
     882:	6c                   	ins    BYTE PTR es:[edi],dx
     883:	6c                   	ins    BYTE PTR es:[edi],dx
     884:	34 00                	xor    al,0x0
     886:	5f                   	pop    edi
     887:	5f                   	pop    edi
     888:	6d                   	ins    DWORD PTR es:[edi],dx
     889:	73 00                	jae    88b <sysEnter_Vector-0x12f775>
     88b:	49                   	dec    ecx
     88c:	4e                   	dec    esi
     88d:	5f                   	pop    edi
     88e:	57                   	push   edi
     88f:	4f                   	dec    edi
     890:	52                   	push   edx
     891:	44                   	inc    esp
     892:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     895:	67 76 5f             	addr16 jbe 8f7 <sysEnter_Vector-0x12f709>
     898:	73 69                	jae    903 <sysEnter_Vector-0x12f6fd>
     89a:	7a 65                	jp     901 <sysEnter_Vector-0x12f6ff>
     89c:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     8a0:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     8a3:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
     8aa:	65 
     8ab:	64 00 77 68          	add    BYTE PTR fs:[edi+0x68],dh
     8af:	69 63 68 00 69 73 73 	imul   esp,DWORD PTR [ebx+0x68],0x73736900
     8b6:	70 61                	jo     919 <sysEnter_Vector-0x12f6e7>
     8b8:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
     8bb:	5f                   	pop    edi
     8bc:	5f                   	pop    edi
     8bd:	67 6e                	outs   dx,BYTE PTR ds:[si]
     8bf:	75 63                	jne    924 <sysEnter_Vector-0x12f6dc>
     8c1:	5f                   	pop    edi
     8c2:	76 61                	jbe    925 <sysEnter_Vector-0x12f6db>
     8c4:	5f                   	pop    edi
     8c5:	6c                   	ins    BYTE PTR es:[edi],dx
     8c6:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
     8cd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8ce:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     8d1:	69 6e 74 64 49 00 70 	imul   ebp,DWORD PTR [esi+0x74],0x70004964
     8d8:	61                   	popa   
     8d9:	72 61                	jb     93c <sysEnter_Vector-0x12f6c4>
     8db:	6d                   	ins    DWORD PTR es:[edi],dx
     8dc:	31 00                	xor    DWORD PTR [eax],eax
     8de:	70 61                	jo     941 <sysEnter_Vector-0x12f6bf>
     8e0:	72 61                	jb     943 <sysEnter_Vector-0x12f6bd>
     8e2:	6d                   	ins    DWORD PTR es:[edi],dx
     8e3:	32 00                	xor    al,BYTE PTR [eax]
     8e5:	70 61                	jo     948 <sysEnter_Vector-0x12f6b8>
     8e7:	72 61                	jb     94a <sysEnter_Vector-0x12f6b6>
     8e9:	6d                   	ins    DWORD PTR es:[edi],dx
     8ea:	33 00                	xor    eax,DWORD PTR [eax]
     8ec:	70 61                	jo     94f <sysEnter_Vector-0x12f6b1>
     8ee:	72 61                	jb     951 <sysEnter_Vector-0x12f6af>
     8f0:	6d                   	ins    DWORD PTR es:[edi],dx
     8f1:	34 00                	xor    al,0x0
     8f3:	73 65                	jae    95a <sysEnter_Vector-0x12f6a6>
     8f5:	74 63                	je     95a <sysEnter_Vector-0x12f6a6>
     8f7:	77 64                	ja     95d <sysEnter_Vector-0x12f6a3>
     8f9:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     8fc:	6f                   	outs   dx,DWORD PTR ds:[esi]
     8fd:	67 72 61             	addr16 jb 961 <sysEnter_Vector-0x12f69f>
     900:	6d                   	ins    DWORD PTR es:[edi],dx
     901:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     904:	65 63 61 00          	arpl   WORD PTR gs:[ecx+0x0],sp
     908:	73 6c                	jae    976 <sysEnter_Vector-0x12f68a>
     90a:	65                   	gs
     90b:	65                   	gs
     90c:	70 4d                	jo     95b <sysEnter_Vector-0x12f6a5>
     90e:	53                   	push   ebx
     90f:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     912:	72 6d                	jb     981 <sysEnter_Vector-0x12f67f>
     914:	61                   	popa   
     915:	74 00                	je     917 <sysEnter_Vector-0x12f6e9>
     917:	70 72                	jo     98b <sysEnter_Vector-0x12f675>
     919:	69 6e 74 42 75 66 66 	imul   ebp,DWORD PTR [esi+0x74],0x66667542
     920:	65                   	gs
     921:	72 00                	jb     923 <sysEnter_Vector-0x12f6dd>
     923:	73 69                	jae    98e <sysEnter_Vector-0x12f672>
     925:	67 6e                	outs   dx,BYTE PTR ds:[si]
     927:	61                   	popa   
     928:	6c                   	ins    BYTE PTR es:[edi],dx
     929:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
     92c:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     92f:	5f                   	pop    edi
     930:	5f                   	pop    edi
     931:	73 65                	jae    998 <sysEnter_Vector-0x12f668>
     933:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
     936:	64                   	fs
     937:	73 00                	jae    939 <sysEnter_Vector-0x12f6c7>
     939:	44                   	inc    esp
     93a:	55                   	push   ebp
     93b:	4c                   	dec    esp
     93c:	4c                   	dec    esp
     93d:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     940:	61                   	popa   
     941:	74 65                	je     9a8 <sysEnter_Vector-0x12f658>
     943:	73 00                	jae    945 <sysEnter_Vector-0x12f6bb>
     945:	49                   	dec    ecx
     946:	4e                   	dec    esi
     947:	5f                   	pop    edi
     948:	53                   	push   ebx
     949:	54                   	push   esp
     94a:	52                   	push   edx
     94b:	49                   	dec    ecx
     94c:	4e                   	dec    esi
     94d:	47                   	inc    edi
     94e:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     951:	63 2f                	arpl   WORD PTR [edi],bp
     953:	6c                   	ins    BYTE PTR es:[edi],dx
     954:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     95b:	4f                   	dec    edi
     95c:	53                   	push   ebx
     95d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     960:	61                   	popa   
     961:	72 67                	jb     9ca <sysEnter_Vector-0x12f636>
     963:	63 00                	arpl   WORD PTR [eax],ax
     965:	63 6d 64             	arpl   WORD PTR [ebp+0x64],bp
     968:	6c                   	ins    BYTE PTR es:[edi],dx
     969:	69 6e 65 00 64 6f 5f 	imul   ebp,DWORD PTR [esi+0x65],0x5f6f6400
     970:	73 79                	jae    9eb <sysEnter_Vector-0x12f615>
     972:	73 63                	jae    9d7 <sysEnter_Vector-0x12f629>
     974:	61                   	popa   
     975:	6c                   	ins    BYTE PTR es:[edi],dx
     976:	6c                   	ins    BYTE PTR es:[edi],dx
     977:	30 00                	xor    BYTE PTR [eax],al
     979:	73 70                	jae    9eb <sysEnter_Vector-0x12f615>
     97b:	6c                   	ins    BYTE PTR es:[edi],dx
     97c:	69 74 49 00 73 65 74 	imul   esi,DWORD PTR [ecx+ecx*2+0x0],0x70746573
     983:	70 
     984:	72 69                	jb     9ef <sysEnter_Vector-0x12f611>
     986:	6f                   	outs   dx,DWORD PTR ds:[esi]
     987:	72 69                	jb     9f2 <sysEnter_Vector-0x12f60e>
     989:	74 79                	je     a04 <sysEnter_Vector-0x12f5fc>
     98b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
     98f:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
     992:	6c                   	ins    BYTE PTR es:[edi],dx
     993:	65                   	gs
     994:	61                   	popa   
     995:	6e                   	outs   dx,BYTE PTR ds:[esi]
     996:	75 70                	jne    a08 <sysEnter_Vector-0x12f5f8>
     998:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     99b:	67 76 00             	addr16 jbe 99e <sysEnter_Vector-0x12f662>
     99e:	65                   	gs
     99f:	78 69                	js     a0a <sysEnter_Vector-0x12f5f6>
     9a1:	74 00                	je     9a3 <sysEnter_Vector-0x12f65d>
     9a3:	73 74                	jae    a19 <sysEnter_Vector-0x12f5e7>
     9a5:	61                   	popa   
     9a6:	74 75                	je     a1d <sysEnter_Vector-0x12f5e3>
     9a8:	73 00                	jae    9aa <sysEnter_Vector-0x12f656>
     9aa:	73 65                	jae    a11 <sysEnter_Vector-0x12f5ef>
     9ac:	74 53                	je     a01 <sysEnter_Vector-0x12f5ff>
     9ae:	54                   	push   esp
     9af:	44                   	inc    esp
     9b0:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
     9b3:	67 48                	addr16 dec eax
     9b5:	61                   	popa   
     9b6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     9b7:	64                   	fs
     9b8:	6c                   	ins    BYTE PTR es:[edi],dx
     9b9:	65                   	gs
     9ba:	72 00                	jb     9bc <sysEnter_Vector-0x12f644>
     9bc:	5f                   	pop    edi
     9bd:	5f                   	pop    edi
     9be:	74 69                	je     a29 <sysEnter_Vector-0x12f5d7>
     9c0:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     9c3:	00 74 61 6b          	add    BYTE PTR [ecx+eiz*2+0x6b],dh
     9c7:	65                   	gs
     9c8:	41                   	inc    ecx
     9c9:	44                   	inc    esp
     9ca:	75 6d                	jne    a39 <sysEnter_Vector-0x12f5c7>
     9cc:	70 00                	jo     9ce <sysEnter_Vector-0x12f632>
     9ce:	66 69 6c 65 64 00 6d 	imul   bp,WORD PTR [ebp+eiz*2+0x64],0x6d00
     9d5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9d6:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
     9dd:	6e 
     9de:	61                   	popa   
     9df:	6c                   	ins    BYTE PTR es:[edi],dx
     9e0:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
     9e3:	67 73 00             	addr16 jae 9e6 <sysEnter_Vector-0x12f61a>
     9e6:	70 72                	jo     a5a <sysEnter_Vector-0x12f5a6>
     9e8:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
     9ef:	6f                   	outs   dx,DWORD PTR ds:[esi]
     9f0:	70 00                	jo     9f2 <sysEnter_Vector-0x12f60e>
     9f2:	70 72                	jo     a66 <sysEnter_Vector-0x12f59a>
     9f4:	69 6e 74 64 00 61 64 	imul   ebp,DWORD PTR [esi+0x74],0x64610064
     9fb:	64                   	fs
     9fc:	72 00                	jb     9fe <sysEnter_Vector-0x12f602>
     9fe:	73 4d                	jae    a4d <sysEnter_Vector-0x12f5b3>
     a00:	4d                   	dec    ebp
     a01:	61                   	popa   
     a02:	70 53                	jo     a57 <sysEnter_Vector-0x12f5a9>
     a04:	79 73                	jns    a79 <sysEnter_Vector-0x12f587>
     a06:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
     a09:	6c                   	ins    BYTE PTR es:[edi],dx
     a0a:	00 6f 66             	add    BYTE PTR [edi+0x66],ch
     a0d:	66 5f                	pop    di
     a0f:	74 00                	je     a11 <sysEnter_Vector-0x12f5ef>
     a11:	70 61                	jo     a74 <sysEnter_Vector-0x12f58c>
     a13:	72 61                	jb     a76 <sysEnter_Vector-0x12f58a>
     a15:	6d                   	ins    DWORD PTR es:[edi],dx
     a16:	73 00                	jae    a18 <sysEnter_Vector-0x12f5e8>
     a18:	66                   	data16
     a19:	6c                   	ins    BYTE PTR es:[edi],dx
     a1a:	61                   	popa   
     a1b:	67 73 00             	addr16 jae a1e <sysEnter_Vector-0x12f5e2>
     a1e:	73 72                	jae    a92 <sysEnter_Vector-0x12f56e>
     a20:	63 2f                	arpl   WORD PTR [edi],bp
     a22:	6c                   	ins    BYTE PTR es:[edi],dx
     a23:	69 62 63 6d 6d 61 70 	imul   esp,DWORD PTR [edx+0x63],0x70616d6d
     a2a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a2d:	70 72                	jo     aa1 <sysEnter_Vector-0x12f55f>
     a2f:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a30:	74 00                	je     a32 <sysEnter_Vector-0x12f5ce>
     a32:	6d                   	ins    DWORD PTR es:[edi],dx
     a33:	6d                   	ins    DWORD PTR es:[edi],dx
     a34:	61                   	popa   
     a35:	70 00                	jo     a37 <sysEnter_Vector-0x12f5c9>
     a37:	73 79                	jae    ab2 <sysEnter_Vector-0x12f54e>
     a39:	73 63                	jae    a9e <sysEnter_Vector-0x12f562>
     a3b:	61                   	popa   
     a3c:	6c                   	ins    BYTE PTR es:[edi],dx
     a3d:	6c                   	ins    BYTE PTR es:[edi],dx
     a3e:	5f                   	pop    edi
     a3f:	6d                   	ins    DWORD PTR es:[edi],dx
     a40:	6d                   	ins    DWORD PTR es:[edi],dx
     a41:	61                   	popa   
     a42:	70 5f                	jo     aa3 <sysEnter_Vector-0x12f55d>
     a44:	74 00                	je     a46 <sysEnter_Vector-0x12f5ba>
     a46:	6d                   	ins    DWORD PTR es:[edi],dx
     a47:	61                   	popa   
     a48:	6c                   	ins    BYTE PTR es:[edi],dx
     a49:	6c                   	ins    BYTE PTR es:[edi],dx
     a4a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a4b:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     a4e:	70 72                	jo     ac2 <sysEnter_Vector-0x12f53e>
     a50:	65                   	gs
     a51:	76 00                	jbe    a53 <sysEnter_Vector-0x12f5ad>
     a53:	6c                   	ins    BYTE PTR es:[edi],dx
     a54:	61                   	popa   
     a55:	73 74                	jae    acb <sysEnter_Vector-0x12f535>
     a57:	48                   	dec    eax
     a58:	52                   	push   edx
     a59:	43                   	inc    ebx
     a5a:	72 65                	jb     ac1 <sysEnter_Vector-0x12f53f>
     a5c:	61                   	popa   
     a5d:	74 65                	je     ac4 <sysEnter_Vector-0x12f53c>
     a5f:	64 00 68 65          	add    BYTE PTR fs:[eax+0x65],ch
     a63:	61                   	popa   
     a64:	70 43                	jo     aa9 <sysEnter_Vector-0x12f557>
     a66:	75 72                	jne    ada <sysEnter_Vector-0x12f526>
     a68:	72 00                	jb     a6a <sysEnter_Vector-0x12f596>
     a6a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a6b:	65                   	gs
     a6c:	78 74                	js     ae2 <sysEnter_Vector-0x12f51e>
     a6e:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     a71:	61                   	popa   
     a72:	70 72                	jo     ae6 <sysEnter_Vector-0x12f51a>
     a74:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
     a78:	00 68 65             	add    BYTE PTR [eax+0x65],ch
     a7b:	61                   	popa   
     a7c:	70 42                	jo     ac0 <sysEnter_Vector-0x12f540>
     a7e:	61                   	popa   
     a7f:	73 65                	jae    ae6 <sysEnter_Vector-0x12f51a>
     a81:	00 66 72             	add    BYTE PTR [esi+0x72],ah
     a84:	65                   	gs
     a85:	65                   	gs
     a86:	49                   	dec    ecx
     a87:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     a8a:	72 6b                	jb     af7 <sysEnter_Vector-0x12f509>
     a8c:	65                   	gs
     a8d:	72 00                	jb     a8f <sysEnter_Vector-0x12f571>
     a8f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     a90:	65                   	gs
     a91:	77 48                	ja     adb <sysEnter_Vector-0x12f525>
     a93:	65                   	gs
     a94:	61                   	popa   
     a95:	70 52                	jo     ae9 <sysEnter_Vector-0x12f517>
     a97:	65                   	gs
     a98:	71 75                	jno    b0f <sysEnter_Vector-0x12f4f1>
     a9a:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
     aa1:	75 6c                	jne    b0f <sysEnter_Vector-0x12f4f1>
     aa3:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
     aaa:	75 65                	jne    b11 <sysEnter_Vector-0x12f4ef>
     aac:	73 74                	jae    b22 <sysEnter_Vector-0x12f4de>
     aae:	00 66 69             	add    BYTE PTR [esi+0x69],ah
     ab1:	6c                   	ins    BYTE PTR es:[edi],dx
     ab2:	6c                   	ins    BYTE PTR es:[edi],dx
     ab3:	65                   	gs
     ab4:	72 00                	jb     ab6 <sysEnter_Vector-0x12f54a>
     ab6:	69 6e 55 73 65 00 73 	imul   ebp,DWORD PTR [esi+0x55],0x73006573
     abd:	68 65 61 70 00       	push   0x706165
     ac2:	69 6e 69 74 6d 61 6c 	imul   ebp,DWORD PTR [esi+0x69],0x6c616d74
     ac9:	6c                   	ins    BYTE PTR es:[edi],dx
     aca:	6f                   	outs   dx,DWORD PTR ds:[esi]
     acb:	63 00                	arpl   WORD PTR [eax],ax
     acd:	72 65                	jb     b34 <sysEnter_Vector-0x12f4cc>
     acf:	71 75                	jno    b46 <sysEnter_Vector-0x12f4ba>
     ad1:	65                   	gs
     ad2:	73 74                	jae    b48 <sysEnter_Vector-0x12f4b8>
     ad4:	53                   	push   ebx
     ad5:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
     adc:	6c                   	ins    BYTE PTR es:[edi],dx
     add:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ade:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
     ae1:	6c                   	ins    BYTE PTR es:[edi],dx
     ae2:	65                   	gs
     ae3:	61                   	popa   
     ae4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ae5:	75 70                	jne    b57 <sysEnter_Vector-0x12f4a9>
     ae7:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
     aea:	6c                   	ins    BYTE PTR es:[edi],dx
     aeb:	6f                   	outs   dx,DWORD PTR ds:[esi]
     aec:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     aef:	65                   	gs
     af0:	64                   	fs
     af1:	50                   	push   eax
     af2:	74 72                	je     b66 <sysEnter_Vector-0x12f49a>
     af4:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
     af7:	77 6c                	ja     b65 <sysEnter_Vector-0x12f49b>
     af9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     afb:	00 53 61             	add    BYTE PTR [ebx+0x61],dl
     afe:	6e                   	outs   dx,BYTE PTR ds:[esi]
     aff:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x706f6f
     b06:	00 
     b07:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b08:	65                   	gs
     b09:	77 53                	ja     b5e <sysEnter_Vector-0x12f4a2>
     b0b:	69 7a 65 00 72 65 61 	imul   edi,DWORD PTR [edx+0x65],0x61657200
     b12:	6c                   	ins    BYTE PTR es:[edi],dx
     b13:	53                   	push   ebx
     b14:	69 7a 65 00 6e 65 65 	imul   edi,DWORD PTR [edx+0x65],0x65656e00
     b1b:	64 65 64 00 72 65    	fs gs add BYTE PTR fs:gs:[edx+0x65],dh
     b21:	61                   	popa   
     b22:	6c                   	ins    BYTE PTR es:[edi],dx
     b23:	6c                   	ins    BYTE PTR es:[edi],dx
     b24:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b25:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
     b28:	75 73                	jne    b9d <sysEnter_Vector-0x12f463>
     b2a:	65                   	gs
     b2b:	73 00                	jae    b2d <sysEnter_Vector-0x12f4d3>
     b2d:	68 65 61 70 72       	push   0x72706165
     b32:	65 63 00             	arpl   WORD PTR gs:[eax],ax
     b35:	66                   	data16
     b36:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b37:	65                   	gs
     b38:	77 70                	ja     baa <sysEnter_Vector-0x12f456>
     b3a:	74 72                	je     bae <sysEnter_Vector-0x12f452>
     b3c:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     b3f:	63 2f                	arpl   WORD PTR [edi],bp
     b41:	6d                   	ins    DWORD PTR es:[edi],dx
     b42:	61                   	popa   
     b43:	6c                   	ins    BYTE PTR es:[edi],dx
     b44:	6c                   	ins    BYTE PTR es:[edi],dx
     b45:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b46:	63 2e                	arpl   WORD PTR [esi],bp
     b48:	63 00                	arpl   WORD PTR [eax],ax
     b4a:	68 65 61 70 50       	push   0x50706165
     b4f:	74 72                	je     bc3 <sysEnter_Vector-0x12f43d>
     b51:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
     b54:	6c                   	ins    BYTE PTR es:[edi],dx
     b55:	64                   	fs
     b56:	70 74                	jo     bcc <sysEnter_Vector-0x12f434>
     b58:	72 00                	jb     b5a <sysEnter_Vector-0x12f4a6>
     b5a:	66                   	data16
     b5b:	72 65                	jb     bc2 <sysEnter_Vector-0x12f43e>
     b5d:	65 00 66 70          	add    BYTE PTR gs:[esi+0x70],ah
     b61:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b62:	69 6e 74 65 72 00 53 	imul   ebp,DWORD PTR [esi+0x74],0x53007265
     b69:	61                   	popa   
     b6a:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b6b:	69 74 79 4c 6f 6f 70 	imul   esi,DWORD PTR [ecx+edi*2+0x4c],0x32706f6f
     b72:	32 
     b73:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     b76:	6c                   	ins    BYTE PTR es:[edi],dx
     b77:	6c                   	ins    BYTE PTR es:[edi],dx
     b78:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b79:	63 46 69             	arpl   WORD PTR [esi+0x69],ax
     b7c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b7d:	64                   	fs
     b7e:	41                   	inc    ecx
     b7f:	76 61                	jbe    be2 <sysEnter_Vector-0x12f41e>
     b81:	69 6c 61 62 6c 65 4d 	imul   ebp,DWORD PTR [ecx+eiz*2+0x62],0x654d656c
     b88:	65 
     b89:	6d                   	ins    DWORD PTR es:[edi],dx
     b8a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b8b:	72 79                	jb     c06 <sysEnter_Vector-0x12f3fa>
     b8d:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     b90:	61                   	popa   
     b91:	6c                   	ins    BYTE PTR es:[edi],dx
     b92:	6c                   	ins    BYTE PTR es:[edi],dx
     b93:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b94:	63 00                	arpl   WORD PTR [eax],ax
     b96:	68 65 61 70 45       	push   0x45706165
     b9b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     b9c:	64 00 6d 61          	add    BYTE PTR fs:[ebp+0x61],ch
     ba0:	6c                   	ins    BYTE PTR es:[edi],dx
     ba1:	6c                   	ins    BYTE PTR es:[edi],dx
     ba2:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ba3:	63 53 61             	arpl   WORD PTR [ebx+0x61],dx
     ba6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ba7:	69 74 79 43 68 65 63 	imul   esi,DWORD PTR [ecx+edi*2+0x43],0x6b636568
     bae:	6b 
     baf:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
     bb2:	6d                   	ins    DWORD PTR es:[edi],dx
     bb3:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     bb6:	49                   	dec    ecx
     bb7:	00 64 65 73          	add    BYTE PTR [ebp+eiz*2+0x73],ah
     bbb:	74 00                	je     bbd <sysEnter_Vector-0x12f443>
     bbd:	6d                   	ins    DWORD PTR es:[edi],dx
     bbe:	65                   	gs
     bbf:	6d                   	ins    DWORD PTR es:[edi],dx
     bc0:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     bc3:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     bc6:	63 2f                	arpl   WORD PTR [edi],bp
     bc8:	6d                   	ins    DWORD PTR es:[edi],dx
     bc9:	65                   	gs
     bca:	6d                   	ins    DWORD PTR es:[edi],dx
     bcb:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     bce:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     bd1:	73 72                	jae    c45 <sysEnter_Vector-0x12f3bb>
     bd3:	63 2f                	arpl   WORD PTR [edi],bp
     bd5:	6d                   	ins    DWORD PTR es:[edi],dx
     bd6:	65                   	gs
     bd7:	6d                   	ins    DWORD PTR es:[edi],dx
     bd8:	73 65                	jae    c3f <sysEnter_Vector-0x12f3c1>
     bda:	74 2e                	je     c0a <sysEnter_Vector-0x12f3f6>
     bdc:	63 00                	arpl   WORD PTR [eax],ax
     bde:	6d                   	ins    DWORD PTR es:[edi],dx
     bdf:	65                   	gs
     be0:	6d                   	ins    DWORD PTR es:[edi],dx
     be1:	73 65                	jae    c48 <sysEnter_Vector-0x12f3b8>
     be3:	74 00                	je     be5 <sysEnter_Vector-0x12f41b>
     be5:	6d                   	ins    DWORD PTR es:[edi],dx
     be6:	65                   	gs
     be7:	6d                   	ins    DWORD PTR es:[edi],dx
     be8:	73 65                	jae    c4f <sysEnter_Vector-0x12f3b1>
     bea:	74 49                	je     c35 <sysEnter_Vector-0x12f3cb>
     bec:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
     bef:	61                   	popa   
     bf0:	6c                   	ins    BYTE PTR es:[edi],dx
     bf1:	00 66 56             	add    BYTE PTR [esi+0x56],ah
     bf4:	61                   	popa   
     bf5:	6c                   	ins    BYTE PTR es:[edi],dx
     bf6:	00 6f 6c             	add    BYTE PTR [edi+0x6c],ch
     bf9:	64                   	fs
     bfa:	66                   	data16
     bfb:	64 00 64 75 70       	add    BYTE PTR fs:[ebp+esi*2+0x70],ah
     c00:	33 00                	xor    eax,DWORD PTR [eax]
     c02:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c03:	65                   	gs
     c04:	77 66                	ja     c6c <sysEnter_Vector-0x12f394>
     c06:	64 00 70 69          	add    BYTE PTR fs:[eax+0x69],dh
     c0a:	70 65                	jo     c71 <sysEnter_Vector-0x12f38f>
     c0c:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     c0f:	63 2f                	arpl   WORD PTR [edi],bp
     c11:	70 69                	jo     c7c <sysEnter_Vector-0x12f384>
     c13:	70 65                	jo     c7a <sysEnter_Vector-0x12f386>
     c15:	5f                   	pop    edi
     c16:	6c                   	ins    BYTE PTR es:[edi],dx
     c17:	69 62 2e 63 00 70 69 	imul   esp,DWORD PTR [edx+0x2e],0x69700063
     c1e:	70 65                	jo     c85 <sysEnter_Vector-0x12f37b>
     c20:	66                   	data16
     c21:	64 00 73 72          	add    BYTE PTR fs:[ebx+0x72],dh
     c25:	63 2f                	arpl   WORD PTR [edi],bp
     c27:	70 72                	jo     c9b <sysEnter_Vector-0x12f365>
     c29:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c2a:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     c2d:	66 6f                	outs   dx,WORD PTR ds:[esi]
     c2f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     c32:	74 6d                	je     ca1 <sysEnter_Vector-0x12f35f>
     c34:	5f                   	pop    edi
     c35:	68 6f 75 72 00       	push   0x72756f
     c3a:	72 75                	jb     cb1 <sysEnter_Vector-0x12f34f>
     c3c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c3d:	74 69                	je     ca8 <sysEnter_Vector-0x12f358>
     c3f:	6d                   	ins    DWORD PTR es:[edi],dx
     c40:	65                   	gs
     c41:	5f                   	pop    edi
     c42:	73 65                	jae    ca9 <sysEnter_Vector-0x12f357>
     c44:	63 73 00             	arpl   WORD PTR [ebx+0x0],si
     c47:	74 6d                	je     cb6 <sysEnter_Vector-0x12f34a>
     c49:	5f                   	pop    edi
     c4a:	7a 6f                	jp     cbb <sysEnter_Vector-0x12f345>
     c4c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c4d:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
     c51:	61                   	popa   
     c52:	74 42                	je     c96 <sysEnter_Vector-0x12f36a>
     c54:	75 66                	jne    cbc <sysEnter_Vector-0x12f344>
     c56:	66                   	data16
     c57:	65                   	gs
     c58:	72 00                	jb     c5a <sysEnter_Vector-0x12f3a6>
     c5a:	6c                   	ins    BYTE PTR es:[edi],dx
     c5b:	61                   	popa   
     c5c:	73 74                	jae    cd2 <sysEnter_Vector-0x12f32e>
     c5e:	55                   	push   ebp
     c5f:	70 64                	jo     cc5 <sysEnter_Vector-0x12f33b>
     c61:	61                   	popa   
     c62:	74 65                	je     cc9 <sysEnter_Vector-0x12f337>
     c64:	49                   	dec    ecx
     c65:	74 65                	je     ccc <sysEnter_Vector-0x12f334>
     c67:	72 61                	jb     cca <sysEnter_Vector-0x12f336>
     c69:	74 69                	je     cd4 <sysEnter_Vector-0x12f32c>
     c6b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c6c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c6d:	00 64 69 72          	add    BYTE PTR [ecx+ebp*2+0x72],ah
     c71:	45                   	inc    ebp
     c72:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c73:	74 72                	je     ce7 <sysEnter_Vector-0x12f319>
     c75:	69 65 73 00 62 75 69 	imul   esp,DWORD PTR [ebp+0x73],0x69756200
     c7c:	6c                   	ins    BYTE PTR es:[edi],dx
     c7d:	64                   	fs
     c7e:	50                   	push   eax
     c7f:	72 6f                	jb     cf0 <sysEnter_Vector-0x12f310>
     c81:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     c84:	66 6f                	outs   dx,WORD PTR ds:[esi]
     c86:	54                   	push   esp
     c87:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     c8b:	6d                   	ins    DWORD PTR es:[edi],dx
     c8c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c8d:	6e                   	outs   dx,BYTE PTR ds:[esi]
     c8e:	00 62 75             	add    BYTE PTR [edx+0x75],ah
     c91:	69 6c 64 41 6c 6c 50 	imul   ebp,DWORD PTR [esp+eiz*2+0x41],0x72506c6c
     c98:	72 
     c99:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c9a:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     c9d:	66 6f                	outs   dx,WORD PTR ds:[esi]
     c9f:	54                   	push   esp
     ca0:	73 00                	jae    ca2 <sysEnter_Vector-0x12f35e>
     ca2:	74 6d                	je     d11 <sysEnter_Vector-0x12f2ef>
     ca4:	5f                   	pop    edi
     ca5:	79 65                	jns    d0c <sysEnter_Vector-0x12f2f4>
     ca7:	61                   	popa   
     ca8:	72 00                	jb     caa <sysEnter_Vector-0x12f356>
     caa:	69 74 65 72 61 74 69 	imul   esi,DWORD PTR [ebp+eiz*2+0x72],0x6f697461
     cb1:	6f 
     cb2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cb3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     cb6:	61                   	popa   
     cb7:	74 69                	je     d22 <sysEnter_Vector-0x12f2de>
     cb9:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cba:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cbc:	00 74 6f 70          	add    BYTE PTR [edi+ebp*2+0x70],dh
     cc0:	69 6e 66 6f 00 62 75 	imul   ebp,DWORD PTR [esi+0x66],0x7562006f
     cc7:	69 6c 64 50 72 6f 63 	imul   ebp,DWORD PTR [esp+eiz*2+0x50],0x49636f72
     cce:	49 
     ccf:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cd0:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cd2:	54                   	push   esp
     cd3:	49                   	dec    ecx
     cd4:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     cd8:	69 73 64 73 74 00 76 	imul   esi,DWORD PTR [ebx+0x64],0x76007473
     cdf:	69 72 74 75 61 6c 53 	imul   esi,DWORD PTR [edx+0x74],0x536c6175
     ce6:	69 7a 65 00 6d 65 6d 	imul   edi,DWORD PTR [edx+0x65],0x6d656d00
     ced:	6f                   	outs   dx,DWORD PTR ds:[esi]
     cee:	72 79                	jb     d69 <sysEnter_Vector-0x12f297>
     cf0:	53                   	push   ebx
     cf1:	69 7a 65 00 70 72 6f 	imul   edi,DWORD PTR [edx+0x65],0x6f727000
     cf8:	63 69 6e             	arpl   WORD PTR [ecx+0x6e],bp
     cfb:	66 6f                	outs   dx,WORD PTR ds:[esi]
     cfd:	00 74 6f 74          	add    BYTE PTR [edi+ebp*2+0x74],dh
     d01:	61                   	popa   
     d02:	6c                   	ins    BYTE PTR es:[edi],dx
     d03:	54                   	push   esp
     d04:	69 63 6b 73 00 70 72 	imul   esp,DWORD PTR [ebx+0x6b],0x72700073
     d0b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d0c:	63 43 6f             	arpl   WORD PTR [ebx+0x6f],ax
     d0f:	75 6e                	jne    d7f <sysEnter_Vector-0x12f281>
     d11:	74 00                	je     d13 <sysEnter_Vector-0x12f2ed>
     d13:	74 6d                	je     d82 <sysEnter_Vector-0x12f27e>
     d15:	5f                   	pop    edi
     d16:	6d                   	ins    DWORD PTR es:[edi],dx
     d17:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
     d1e:	64                   	fs
     d1f:	61                   	popa   
     d20:	79 00                	jns    d22 <sysEnter_Vector-0x12f2de>
     d22:	6d                   	ins    DWORD PTR es:[edi],dx
     d23:	61                   	popa   
     d24:	6a 6f                	push   0x6f
     d26:	72 46                	jb     d6e <sysEnter_Vector-0x12f292>
     d28:	61                   	popa   
     d29:	75 6c                	jne    d97 <sysEnter_Vector-0x12f269>
     d2b:	74 73                	je     da0 <sysEnter_Vector-0x12f260>
     d2d:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
     d31:	74 54                	je     d87 <sysEnter_Vector-0x12f279>
     d33:	69 63 6b 73 00 74 69 	imul   esp,DWORD PTR [ebx+0x6b],0x69740073
     d3a:	6d                   	ins    DWORD PTR es:[edi],dx
     d3b:	65                   	gs
     d3c:	5f                   	pop    edi
     d3d:	74 00                	je     d3f <sysEnter_Vector-0x12f2c1>
     d3f:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d40:	61                   	popa   
     d41:	6d                   	ins    DWORD PTR es:[edi],dx
     d42:	65 32 00             	xor    al,BYTE PTR gs:[eax]
     d45:	6e                   	outs   dx,BYTE PTR ds:[esi]
     d46:	61                   	popa   
     d47:	6d                   	ins    DWORD PTR es:[edi],dx
     d48:	65 33 00             	xor    eax,DWORD PTR gs:[eax]
     d4b:	63 75 72             	arpl   WORD PTR [ebp+0x72],si
     d4e:	72 50                	jb     da0 <sysEnter_Vector-0x12f260>
     d50:	72 6f                	jb     dc1 <sysEnter_Vector-0x12f23f>
     d52:	63 00                	arpl   WORD PTR [eax],ax
     d54:	69 70 69 64 00 74 6d 	imul   esi,DWORD PTR [eax+0x69],0x6d740064
     d5b:	5f                   	pop    edi
     d5c:	67 6d                	ins    DWORD PTR es:[di],dx
     d5e:	74 6f                	je     dcf <sysEnter_Vector-0x12f231>
     d60:	66                   	data16
     d61:	66                   	data16
     d62:	00 74 6f 6b          	add    BYTE PTR [edi+ebp*2+0x6b],dh
     d66:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d68:	4e                   	dec    esi
     d69:	75 6d                	jne    dd8 <sysEnter_Vector-0x12f228>
     d6b:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     d6e:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     d71:	74 65                	je     dd8 <sysEnter_Vector-0x12f228>
     d73:	72 76                	jb     deb <sysEnter_Vector-0x12f215>
     d75:	61                   	popa   
     d76:	6c                   	ins    BYTE PTR es:[edi],dx
     d77:	54                   	push   esp
     d78:	69 63 6b 73 00 73 50 	imul   esp,DWORD PTR [ebx+0x6b],0x50730073
     d7f:	72 6f                	jb     df0 <sysEnter_Vector-0x12f210>
     d81:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     d84:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d86:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     d89:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d8a:	63 49 6e             	arpl   WORD PTR [ecx+0x6e],cx
     d8d:	66 6f                	outs   dx,WORD PTR ds:[esi]
     d8f:	5f                   	pop    edi
     d90:	74 00                	je     d92 <sysEnter_Vector-0x12f26e>
     d92:	74 6d                	je     e01 <sysEnter_Vector-0x12f1ff>
     d94:	5f                   	pop    edi
     d95:	77 64                	ja     dfb <sysEnter_Vector-0x12f205>
     d97:	61                   	popa   
     d98:	79 00                	jns    d9a <sysEnter_Vector-0x12f266>
     d9a:	74 6d                	je     e09 <sysEnter_Vector-0x12f1f7>
     d9c:	5f                   	pop    edi
     d9d:	6d                   	ins    DWORD PTR es:[edi],dx
     d9e:	64                   	fs
     d9f:	61                   	popa   
     da0:	79 00                	jns    da2 <sysEnter_Vector-0x12f25e>
     da2:	74 69                	je     e0d <sysEnter_Vector-0x12f1f3>
     da4:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
     da7:	50                   	push   eax
     da8:	65                   	gs
     da9:	72 55                	jb     e00 <sysEnter_Vector-0x12f200>
     dab:	70 64                	jo     e11 <sysEnter_Vector-0x12f1ef>
     dad:	61                   	popa   
     dae:	74 65                	je     e15 <sysEnter_Vector-0x12f1eb>
     db0:	49                   	dec    ecx
     db1:	6e                   	outs   dx,BYTE PTR ds:[esi]
     db2:	74 65                	je     e19 <sysEnter_Vector-0x12f1e7>
     db4:	72 76                	jb     e2c <sysEnter_Vector-0x12f1d4>
     db6:	61                   	popa   
     db7:	6c                   	ins    BYTE PTR es:[edi],dx
     db8:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
     dbc:	73 65                	jae    e23 <sysEnter_Vector-0x12f1dd>
     dbe:	63 00                	arpl   WORD PTR [eax],ax
     dc0:	6d                   	ins    DWORD PTR es:[edi],dx
     dc1:	69 6e 6f 72 46 61 75 	imul   ebp,DWORD PTR [esi+0x6f],0x75614672
     dc8:	6c                   	ins    BYTE PTR es:[edi],dx
     dc9:	74 73                	je     e3e <sysEnter_Vector-0x12f1c2>
     dcb:	00 70 70             	add    BYTE PTR [eax+0x70],dh
     dce:	69 64 00 66 69 65 6c 	imul   esp,DWORD PTR [eax+eax*1+0x66],0x646c6569
     dd5:	64 
     dd6:	5f                   	pop    edi
     dd7:	77 69                	ja     e42 <sysEnter_Vector-0x12f1be>
     dd9:	64                   	fs
     dda:	74 68                	je     e44 <sysEnter_Vector-0x12f1bc>
     ddc:	00 72 65             	add    BYTE PTR [edx+0x65],dh
     ddf:	70 65                	jo     e46 <sysEnter_Vector-0x12f1ba>
     de1:	61                   	popa   
     de2:	74 00                	je     de4 <sysEnter_Vector-0x12f21c>
     de4:	6c                   	ins    BYTE PTR es:[edi],dx
     de5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     de6:	63 61 73             	arpl   WORD PTR [ecx+0x73],sp
     de9:	65 00 5f 5f          	add    BYTE PTR gs:[edi+0x5f],bl
     ded:	72 65                	jb     e54 <sysEnter_Vector-0x12f1ac>
     def:	73 00                	jae    df1 <sysEnter_Vector-0x12f20f>
     df1:	73 72                	jae    e65 <sysEnter_Vector-0x12f19b>
     df3:	63 2f                	arpl   WORD PTR [edi],bp
     df5:	73 70                	jae    e67 <sysEnter_Vector-0x12f199>
     df7:	72 69                	jb     e62 <sysEnter_Vector-0x12f19e>
     df9:	6e                   	outs   dx,BYTE PTR ds:[esi]
     dfa:	74 66                	je     e62 <sysEnter_Vector-0x12f19e>
     dfc:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     dff:	64 69 67 69 74 73 00 	imul   esp,DWORD PTR fs:[edi+0x69],0x76007374
     e06:	76 
     e07:	73 70                	jae    e79 <sysEnter_Vector-0x12f187>
     e09:	72 69                	jb     e74 <sysEnter_Vector-0x12f18c>
     e0b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e0c:	74 66                	je     e74 <sysEnter_Vector-0x12f18c>
     e0e:	00 71 75             	add    BYTE PTR [ecx+0x75],dh
     e11:	61                   	popa   
     e12:	6c                   	ins    BYTE PTR es:[edi],dx
     e13:	69 66 69 65 72 00 73 	imul   esp,DWORD PTR [esi+0x69],0x73007265
     e1a:	6b 69 70 5f          	imul   ebp,DWORD PTR [ecx+0x70],0x5f
     e1e:	61                   	popa   
     e1f:	74 6f                	je     e90 <sysEnter_Vector-0x12f170>
     e21:	69 00 73 70 72 69    	imul   eax,DWORD PTR [eax],0x69727073
     e27:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e28:	74 66                	je     e90 <sysEnter_Vector-0x12f170>
     e2a:	49                   	dec    ecx
     e2b:	00 6e 75             	add    BYTE PTR [esi+0x75],ch
     e2e:	6d                   	ins    DWORD PTR es:[edi],dx
     e2f:	62 65 72             	bound  esp,QWORD PTR [ebp+0x72]
     e32:	00 62 61             	add    BYTE PTR [edx+0x61],ah
     e35:	73 65                	jae    e9c <sysEnter_Vector-0x12f164>
     e37:	00 70 72             	add    BYTE PTR [eax+0x72],dh
     e3a:	65 63 69 73          	arpl   WORD PTR gs:[ecx+0x73],bp
     e3e:	69 6f 6e 00 62 75 66 	imul   ebp,DWORD PTR [edi+0x6e],0x66756200
     e45:	66 50                	push   ax
     e47:	74 72                	je     ebb <sysEnter_Vector-0x12f145>
     e49:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     e4c:	63 2f                	arpl   WORD PTR [edi],bp
     e4e:	73 74                	jae    ec4 <sysEnter_Vector-0x12f13c>
     e50:	64 69 6f 2e 63 00 72 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65720063
     e57:	65 
     e58:	73 65                	jae    ebf <sysEnter_Vector-0x12f141>
     e5a:	74 52                	je     eae <sysEnter_Vector-0x12f152>
     e5c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e5d:	77 00                	ja     e5f <sysEnter_Vector-0x12f1a1>
     e5f:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
     e62:	66                   	data16
     e63:	00 62 79             	add    BYTE PTR [edx+0x79],ah
     e66:	74 65                	je     ecd <sysEnter_Vector-0x12f133>
     e68:	73 54                	jae    ebe <sysEnter_Vector-0x12f142>
     e6a:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e6b:	43                   	inc    ebx
     e6c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e6d:	70 79                	jo     ee8 <sysEnter_Vector-0x12f118>
     e6f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e72:	72 6e                	jb     ee2 <sysEnter_Vector-0x12f11e>
     e74:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     e77:	49                   	dec    ecx
     e78:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     e7b:	63 53 74             	arpl   WORD PTR [ebx+0x74],dx
     e7e:	72 69                	jb     ee9 <sysEnter_Vector-0x12f117>
     e80:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e81:	67 4c                	addr16 dec esp
     e83:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     e85:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     e88:	72 63                	jb     eed <sysEnter_Vector-0x12f113>
     e8a:	61                   	popa   
     e8b:	74 00                	je     e8d <sysEnter_Vector-0x12f173>
     e8d:	73 72                	jae    f01 <sysEnter_Vector-0x12f0ff>
     e8f:	63 2f                	arpl   WORD PTR [edi],bp
     e91:	73 74                	jae    f07 <sysEnter_Vector-0x12f0f9>
     e93:	72 69                	jb     efe <sysEnter_Vector-0x12f102>
     e95:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e96:	67 73 2f             	addr16 jae ec8 <sysEnter_Vector-0x12f138>
     e99:	73 74                	jae    f0f <sysEnter_Vector-0x12f0f1>
     e9b:	72 63                	jb     f00 <sysEnter_Vector-0x12f100>
     e9d:	61                   	popa   
     e9e:	74 2e                	je     ece <sysEnter_Vector-0x12f132>
     ea0:	63 00                	arpl   WORD PTR [eax],ax
     ea2:	73 74                	jae    f18 <sysEnter_Vector-0x12f0e8>
     ea4:	72 6e                	jb     f14 <sysEnter_Vector-0x12f0ec>
     ea6:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
     ea9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     eac:	72 63                	jb     f11 <sysEnter_Vector-0x12f0ef>
     eae:	61                   	popa   
     eaf:	74 49                	je     efa <sysEnter_Vector-0x12f106>
     eb1:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     eb4:	72 63                	jb     f19 <sysEnter_Vector-0x12f0e7>
     eb6:	6d                   	ins    DWORD PTR es:[edi],dx
     eb7:	70 49                	jo     f02 <sysEnter_Vector-0x12f0fe>
     eb9:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     ebc:	72 63                	jb     f21 <sysEnter_Vector-0x12f0df>
     ebe:	6d                   	ins    DWORD PTR es:[edi],dx
     ebf:	70 00                	jo     ec1 <sysEnter_Vector-0x12f13f>
     ec1:	73 72                	jae    f35 <sysEnter_Vector-0x12f0cb>
     ec3:	63 2f                	arpl   WORD PTR [edi],bp
     ec5:	73 74                	jae    f3b <sysEnter_Vector-0x12f0c5>
     ec7:	72 69                	jb     f32 <sysEnter_Vector-0x12f0ce>
     ec9:	6e                   	outs   dx,BYTE PTR ds:[esi]
     eca:	67 73 2f             	addr16 jae efc <sysEnter_Vector-0x12f104>
     ecd:	73 74                	jae    f43 <sysEnter_Vector-0x12f0bd>
     ecf:	72 63                	jb     f34 <sysEnter_Vector-0x12f0cc>
     ed1:	6d                   	ins    DWORD PTR es:[edi],dx
     ed2:	70 2e                	jo     f02 <sysEnter_Vector-0x12f0fe>
     ed4:	63 00                	arpl   WORD PTR [eax],ax
     ed6:	73 74                	jae    f4c <sysEnter_Vector-0x12f0b4>
     ed8:	72 63                	jb     f3d <sysEnter_Vector-0x12f0c3>
     eda:	70 79                	jo     f55 <sysEnter_Vector-0x12f0ab>
     edc:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
     edf:	75 6e                	jne    f4f <sysEnter_Vector-0x12f0b1>
     ee1:	74 00                	je     ee3 <sysEnter_Vector-0x12f11d>
     ee3:	73 74                	jae    f59 <sysEnter_Vector-0x12f0a7>
     ee5:	72 63                	jb     f4a <sysEnter_Vector-0x12f0b6>
     ee7:	70 79                	jo     f62 <sysEnter_Vector-0x12f09e>
     ee9:	63 00                	arpl   WORD PTR [eax],ax
     eeb:	73 74                	jae    f61 <sysEnter_Vector-0x12f09f>
     eed:	72 63                	jb     f52 <sysEnter_Vector-0x12f0ae>
     eef:	70 79                	jo     f6a <sysEnter_Vector-0x12f096>
     ef1:	49                   	dec    ecx
     ef2:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     ef5:	63 2f                	arpl   WORD PTR [edi],bp
     ef7:	73 74                	jae    f6d <sysEnter_Vector-0x12f093>
     ef9:	72 69                	jb     f64 <sysEnter_Vector-0x12f09c>
     efb:	6e                   	outs   dx,BYTE PTR ds:[esi]
     efc:	67 73 2f             	addr16 jae f2e <sysEnter_Vector-0x12f0d2>
     eff:	73 74                	jae    f75 <sysEnter_Vector-0x12f08b>
     f01:	72 63                	jb     f66 <sysEnter_Vector-0x12f09a>
     f03:	70 79                	jo     f7e <sysEnter_Vector-0x12f082>
     f05:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f08:	73 74                	jae    f7e <sysEnter_Vector-0x12f082>
     f0a:	72 69                	jb     f75 <sysEnter_Vector-0x12f08b>
     f0c:	73 6e                	jae    f7c <sysEnter_Vector-0x12f084>
     f0e:	75 6d                	jne    f7d <sysEnter_Vector-0x12f083>
     f10:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     f13:	63 2f                	arpl   WORD PTR [edi],bp
     f15:	73 74                	jae    f8b <sysEnter_Vector-0x12f075>
     f17:	72 69                	jb     f82 <sysEnter_Vector-0x12f07e>
     f19:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f1a:	67 73 2f             	addr16 jae f4c <sysEnter_Vector-0x12f0b4>
     f1d:	73 74                	jae    f93 <sysEnter_Vector-0x12f06d>
     f1f:	72 69                	jb     f8a <sysEnter_Vector-0x12f076>
     f21:	73 6e                	jae    f91 <sysEnter_Vector-0x12f06f>
     f23:	75 6d                	jne    f92 <sysEnter_Vector-0x12f06e>
     f25:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f28:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
     f2b:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
     f2e:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
     f35:	74 
     f36:	72 6c                	jb     fa4 <sysEnter_Vector-0x12f05c>
     f38:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f3a:	49                   	dec    ecx
     f3b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f3e:	72 6c                	jb     fac <sysEnter_Vector-0x12f054>
     f40:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f42:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f45:	72 6e                	jb     fb5 <sysEnter_Vector-0x12f04b>
     f47:	6c                   	ins    BYTE PTR es:[edi],dx
     f48:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f4a:	49                   	dec    ecx
     f4b:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f4e:	72 6e                	jb     fbe <sysEnter_Vector-0x12f042>
     f50:	6c                   	ins    BYTE PTR es:[edi],dx
     f51:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f53:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     f56:	63 2f                	arpl   WORD PTR [edi],bp
     f58:	73 74                	jae    fce <sysEnter_Vector-0x12f032>
     f5a:	72 69                	jb     fc5 <sysEnter_Vector-0x12f03b>
     f5c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f5d:	67 73 2f             	addr16 jae f8f <sysEnter_Vector-0x12f071>
     f60:	73 74                	jae    fd6 <sysEnter_Vector-0x12f02a>
     f62:	72 6c                	jb     fd0 <sysEnter_Vector-0x12f030>
     f64:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     f66:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f69:	73 74                	jae    fdf <sysEnter_Vector-0x12f021>
     f6b:	72 6e                	jb     fdb <sysEnter_Vector-0x12f025>
     f6d:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
     f70:	49                   	dec    ecx
     f71:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     f74:	72 6e                	jb     fe4 <sysEnter_Vector-0x12f01c>
     f76:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
     f79:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
     f7c:	63 2f                	arpl   WORD PTR [edi],bp
     f7e:	73 74                	jae    ff4 <sysEnter_Vector-0x12f00c>
     f80:	72 69                	jb     feb <sysEnter_Vector-0x12f015>
     f82:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f83:	67 73 2f             	addr16 jae fb5 <sysEnter_Vector-0x12f04b>
     f86:	73 74                	jae    ffc <sysEnter_Vector-0x12f004>
     f88:	72 6e                	jb     ff8 <sysEnter_Vector-0x12f008>
     f8a:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
     f8d:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     f90:	73 72                	jae    1004 <sysEnter_Vector-0x12effc>
     f92:	63 2f                	arpl   WORD PTR [edi],bp
     f94:	73 74                	jae    100a <sysEnter_Vector-0x12eff6>
     f96:	72 69                	jb     1001 <sysEnter_Vector-0x12efff>
     f98:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f99:	67 73 2f             	addr16 jae fcb <sysEnter_Vector-0x12f035>
     f9c:	73 74                	jae    1012 <sysEnter_Vector-0x12efee>
     f9e:	72 6e                	jb     100e <sysEnter_Vector-0x12eff2>
     fa0:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     fa3:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     fa6:	73 74                	jae    101c <sysEnter_Vector-0x12efe4>
     fa8:	72 6e                	jb     1018 <sysEnter_Vector-0x12efe8>
     faa:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     fad:	49                   	dec    ecx
     fae:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     fb1:	72 6e                	jb     1021 <sysEnter_Vector-0x12efdf>
     fb3:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     fb6:	00 6e 70             	add    BYTE PTR [esi+0x70],ch
     fb9:	74 72                	je     102d <sysEnter_Vector-0x12efd3>
     fbb:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
     fbe:	74 6f                	je     102f <sysEnter_Vector-0x12efd1>
     fc0:	66                   	data16
     fc1:	66                   	data16
     fc2:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
     fc5:	74 6c                	je     1033 <sysEnter_Vector-0x12efcd>
     fc7:	69 6d 00 73 72 63 2f 	imul   ebp,DWORD PTR [ebp+0x0],0x2f637273
     fce:	73 74                	jae    1044 <sysEnter_Vector-0x12efbc>
     fd0:	72 69                	jb     103b <sysEnter_Vector-0x12efc5>
     fd2:	6e                   	outs   dx,BYTE PTR ds:[esi]
     fd3:	67 73 2f             	addr16 jae 1005 <sysEnter_Vector-0x12effb>
     fd6:	73 74                	jae    104c <sysEnter_Vector-0x12efb4>
     fd8:	72 6f                	jb     1049 <sysEnter_Vector-0x12efb7>
     fda:	75 6c                	jne    1048 <sysEnter_Vector-0x12efb8>
     fdc:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     fdf:	73 74                	jae    1055 <sysEnter_Vector-0x12efab>
     fe1:	72 74                	jb     1057 <sysEnter_Vector-0x12efa9>
     fe3:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fe4:	75 6c                	jne    1052 <sysEnter_Vector-0x12efae>
     fe6:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
     fe9:	64                   	fs
     fea:	70 74                	jo     1060 <sysEnter_Vector-0x12efa0>
     fec:	72 00                	jb     fee <sysEnter_Vector-0x12f012>
     fee:	73 72                	jae    1062 <sysEnter_Vector-0x12ef9e>
     ff0:	63 2f                	arpl   WORD PTR [edi],bp
     ff2:	73 74                	jae    1068 <sysEnter_Vector-0x12ef98>
     ff4:	72 69                	jb     105f <sysEnter_Vector-0x12efa1>
     ff6:	6e                   	outs   dx,BYTE PTR ds:[esi]
     ff7:	67 73 2f             	addr16 jae 1029 <sysEnter_Vector-0x12efd7>
     ffa:	73 74                	jae    1070 <sysEnter_Vector-0x12ef90>
     ffc:	72 70                	jb     106e <sysEnter_Vector-0x12ef92>
     ffe:	61                   	popa   
     fff:	72 74                	jb     1075 <sysEnter_Vector-0x12ef8b>
    1001:	73 2e                	jae    1031 <sysEnter_Vector-0x12efcf>
    1003:	63 00                	arpl   WORD PTR [eax],ax
    1005:	73 74                	jae    107b <sysEnter_Vector-0x12ef85>
    1007:	72 6c                	jb     1075 <sysEnter_Vector-0x12ef8b>
    1009:	65                   	gs
    100a:	66                   	data16
    100b:	74 00                	je     100d <sysEnter_Vector-0x12eff3>
    100d:	73 74                	jae    1083 <sysEnter_Vector-0x12ef7d>
    100f:	72 74                	jb     1085 <sysEnter_Vector-0x12ef7b>
    1011:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1012:	6c                   	ins    BYTE PTR es:[edi],dx
    1013:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    1016:	63 2f                	arpl   WORD PTR [edi],bp
    1018:	73 74                	jae    108e <sysEnter_Vector-0x12ef72>
    101a:	72 69                	jb     1085 <sysEnter_Vector-0x12ef7b>
    101c:	6e                   	outs   dx,BYTE PTR ds:[esi]
    101d:	67 73 2f             	addr16 jae 104f <sysEnter_Vector-0x12efb1>
    1020:	73 74                	jae    1096 <sysEnter_Vector-0x12ef6a>
    1022:	72 74                	jb     1098 <sysEnter_Vector-0x12ef68>
    1024:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1025:	6c                   	ins    BYTE PTR es:[edi],dx
    1026:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1029:	69 6e 70 75 74 00 73 	imul   ebp,DWORD PTR [esi+0x70],0x73007475
    1030:	72 63                	jb     1095 <sysEnter_Vector-0x12ef6b>
    1032:	2f                   	das    
    1033:	73 74                	jae    10a9 <sysEnter_Vector-0x12ef57>
    1035:	72 69                	jb     10a0 <sysEnter_Vector-0x12ef60>
    1037:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1038:	67 73 2f             	addr16 jae 106a <sysEnter_Vector-0x12ef96>
    103b:	73 74                	jae    10b1 <sysEnter_Vector-0x12ef4f>
    103d:	72 74                	jb     10b3 <sysEnter_Vector-0x12ef4d>
    103f:	72 69                	jb     10aa <sysEnter_Vector-0x12ef56>
    1041:	6d                   	ins    DWORD PTR es:[edi],dx
    1042:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1045:	73 74                	jae    10bb <sysEnter_Vector-0x12ef45>
    1047:	72 74                	jb     10bd <sysEnter_Vector-0x12ef43>
    1049:	72 69                	jb     10b4 <sysEnter_Vector-0x12ef4c>
    104b:	6d                   	ins    DWORD PTR es:[edi],dx
    104c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    104f:	72 74                	jb     10c5 <sysEnter_Vector-0x12ef3b>
    1051:	72 69                	jb     10bc <sysEnter_Vector-0x12ef44>
    1053:	6d                   	ins    DWORD PTR es:[edi],dx
    1054:	49                   	dec    ecx
    1055:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    1058:	74 73                	je     10cd <sysEnter_Vector-0x12ef33>
    105a:	69 7a 65 00 73 72 63 	imul   edi,DWORD PTR [edx+0x65],0x63727300
    1061:	2f                   	das    
    1062:	73 74                	jae    10d8 <sysEnter_Vector-0x12ef28>
    1064:	72 72                	jb     10d8 <sysEnter_Vector-0x12ef28>
    1066:	65                   	gs
    1067:	70 6c                	jo     10d5 <sysEnter_Vector-0x12ef2b>
    1069:	61                   	popa   
    106a:	63 65 2e             	arpl   WORD PTR [ebp+0x2e],sp
    106d:	63 00                	arpl   WORD PTR [eax],ax
    106f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1070:	65                   	gs
    1071:	65                   	gs
    1072:	64                   	fs
    1073:	6c                   	ins    BYTE PTR es:[edi],dx
    1074:	65 00 72 65          	add    BYTE PTR gs:[edx+0x65],dh
    1078:	73 6f                	jae    10e9 <sysEnter_Vector-0x12ef17>
    107a:	66                   	data16
    107b:	66                   	data16
    107c:	73 65                	jae    10e3 <sysEnter_Vector-0x12ef1d>
    107e:	74 00                	je     1080 <sysEnter_Vector-0x12ef80>
    1080:	73 74                	jae    10f6 <sysEnter_Vector-0x12ef0a>
    1082:	72 72                	jb     10f6 <sysEnter_Vector-0x12ef0a>
    1084:	65                   	gs
    1085:	70 6c                	jo     10f3 <sysEnter_Vector-0x12ef0d>
    1087:	61                   	popa   
    1088:	63 65 00             	arpl   WORD PTR [ebp+0x0],sp
    108b:	70 61                	jo     10ee <sysEnter_Vector-0x12ef12>
    108d:	74 74                	je     1103 <sysEnter_Vector-0x12eefd>
    108f:	65                   	gs
    1090:	72 6e                	jb     1100 <sysEnter_Vector-0x12ef00>
    1092:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1095:	72 72                	jb     1109 <sysEnter_Vector-0x12eef7>
    1097:	65                   	gs
    1098:	70 6c                	jo     1106 <sysEnter_Vector-0x12eefa>
    109a:	61                   	popa   
    109b:	63 65 49             	arpl   WORD PTR [ebp+0x49],sp
    109e:	00 6f 75             	add    BYTE PTR [edi+0x75],ch
    10a1:	74 53                	je     10f6 <sysEnter_Vector-0x12ef0a>
    10a3:	74 72                	je     1117 <sysEnter_Vector-0x12eee9>
    10a5:	69 6e 67 00 73 74 72 	imul   ebp,DWORD PTR [esi+0x67],0x72747300
    10ac:	73 74                	jae    1122 <sysEnter_Vector-0x12eede>
    10ae:	72 49                	jb     10f9 <sysEnter_Vector-0x12ef07>
    10b0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
    10b3:	63 2f                	arpl   WORD PTR [edi],bp
    10b5:	73 74                	jae    112b <sysEnter_Vector-0x12eed5>
    10b7:	72 73                	jb     112c <sysEnter_Vector-0x12eed4>
    10b9:	74 72                	je     112d <sysEnter_Vector-0x12eed3>
    10bb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    10be:	73 74                	jae    1134 <sysEnter_Vector-0x12eecc>
    10c0:	72 73                	jb     1135 <sysEnter_Vector-0x12eecb>
    10c2:	74 72                	je     1136 <sysEnter_Vector-0x12eeca>
    10c4:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    10c7:	72 6e                	jb     1137 <sysEnter_Vector-0x12eec9>
    10c9:	73 74                	jae    113f <sysEnter_Vector-0x12eec1>
    10cb:	72 49                	jb     1116 <sysEnter_Vector-0x12eeea>
    10cd:	00 72 63             	add    BYTE PTR [edx+0x63],dh
    10d0:	73 69                	jae    113b <sysEnter_Vector-0x12eec5>
    10d2:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
    10d6:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
    10d9:	72 69                	jb     1144 <sysEnter_Vector-0x12eebc>
    10db:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10dc:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
    10e0:	63 2f                	arpl   WORD PTR [edi],bp
    10e2:	74 69                	je     114d <sysEnter_Vector-0x12eeb3>
    10e4:	6d                   	ins    DWORD PTR es:[edi],dx
    10e5:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    10e9:	6c                   	ins    BYTE PTR es:[edi],dx
    10ea:	6f                   	outs   dx,DWORD PTR ds:[esi]
    10eb:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    10ee:	74 69                	je     1159 <sysEnter_Vector-0x12eea7>
    10f0:	6d                   	ins    DWORD PTR es:[edi],dx
    10f1:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
    10f5:	74 74                	je     116b <sysEnter_Vector-0x12ee95>
    10f7:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
    10fe:	61                   	popa   
    10ff:	79 6c                	jns    116d <sysEnter_Vector-0x12ee93>
    1101:	69 67 68 74 00 6c 69 	imul   esp,DWORD PTR [edi+0x68],0x696c0074
    1108:	62 63 54             	bound  esp,QWORD PTR [ebx+0x54]
    110b:	5a                   	pop    edx
    110c:	00 5f 74             	add    BYTE PTR [edi+0x74],bl
    110f:	7a 6e                	jp     117f <sysEnter_Vector-0x12ee81>
    1111:	61                   	popa   
    1112:	6d                   	ins    DWORD PTR es:[edi],dx
    1113:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
    1117:	74 69                	je     1182 <sysEnter_Vector-0x12ee7e>
    1119:	6d                   	ins    DWORD PTR es:[edi],dx
    111a:	65                   	gs
    111b:	5f                   	pop    edi
    111c:	72 00                	jb     111e <sysEnter_Vector-0x12eee2>
    111e:	74 69                	je     1189 <sysEnter_Vector-0x12ee77>
    1120:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
    1123:	54                   	push   esp
    1124:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1125:	57                   	push   edi
    1126:	61                   	popa   
    1127:	69 74 00 6d 6f 6e 74 	imul   esi,DWORD PTR [eax+eax*1+0x6d],0x68746e6f
    112e:	68 
    112f:	00 67 65             	add    BYTE PTR [edi+0x65],ah
    1132:	74 74                	je     11a8 <sysEnter_Vector-0x12ee58>
    1134:	69 6d 65 00 64 61 79 	imul   ebp,DWORD PTR [ebp+0x65],0x79616400
    113b:	6e                   	outs   dx,BYTE PTR ds:[esi]
    113c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    113d:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
    1140:	74 69                	je     11ab <sysEnter_Vector-0x12ee55>
    1142:	6d                   	ins    DWORD PTR es:[edi],dx
    1143:	65                   	gs
    1144:	5f                   	pop    edi
    1145:	72 49                	jb     1190 <sysEnter_Vector-0x12ee70>
    1147:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    114b:	61                   	popa   
    114c:	6c                   	ins    BYTE PTR es:[edi],dx
    114d:	54                   	push   esp
    114e:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
    1155:	75 66                	jne    11bd <sysEnter_Vector-0x12ee43>
    1157:	00 6c 6f 63          	add    BYTE PTR [edi+ebp*2+0x63],ch
    115b:	61                   	popa   
    115c:	6c                   	ins    BYTE PTR es:[edi],dx
    115d:	74 69                	je     11c8 <sysEnter_Vector-0x12ee38>
    115f:	6d                   	ins    DWORD PTR es:[edi],dx
    1160:	65                   	gs
    1161:	5f                   	pop    edi
    1162:	72 00                	jb     1164 <sysEnter_Vector-0x12ee9c>
    1164:	64                   	fs
    1165:	61                   	popa   
    1166:	79 63                	jns    11cb <sysEnter_Vector-0x12ee35>
    1168:	6c                   	ins    BYTE PTR es:[edi],dx
    1169:	6f                   	outs   dx,DWORD PTR ds:[esi]
    116a:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
    116d:	6d                   	ins    DWORD PTR es:[edi],dx
    116e:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
    1173:	00 5f 79             	add    BYTE PTR [edi+0x79],bl
    1176:	74 61                	je     11d9 <sysEnter_Vector-0x12ee27>
    1178:	62 00                	bound  eax,QWORD PTR [eax]
    117a:	74 69                	je     11e5 <sysEnter_Vector-0x12ee1b>
    117c:	6d                   	ins    DWORD PTR es:[edi],dx
    117d:	65                   	gs
    117e:	72 00                	jb     1180 <sysEnter_Vector-0x12ee80>
    1180:	6c                   	ins    BYTE PTR es:[edi],dx
    1181:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1182:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
    1185:	74 69                	je     11f0 <sysEnter_Vector-0x12ee10>
    1187:	6d                   	ins    DWORD PTR es:[edi],dx
    1188:	65                   	gs
    1189:	5f                   	pop    edi
    118a:	72 49                	jb     11d5 <sysEnter_Vector-0x12ee2b>
    118c:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
    118f:	73 74                	jae    1205 <sysEnter_Vector-0x12edfb>
    1191:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
    1194:	73 00                	jae    1196 <sysEnter_Vector-0x12ee6a>
    1196:	72 65                	jb     11fd <sysEnter_Vector-0x12ee03>
    1198:	73 75                	jae    120f <sysEnter_Vector-0x12edf1>
    119a:	6c                   	ins    BYTE PTR es:[edi],dx
    119b:	74 00                	je     119d <sysEnter_Vector-0x12ee63>
    119d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    119e:	76 65                	jbe    1205 <sysEnter_Vector-0x12edfb>
    11a0:	72 66                	jb     1208 <sysEnter_Vector-0x12edf8>
    11a2:	6c                   	ins    BYTE PTR es:[edi],dx
    11a3:	6f                   	outs   dx,DWORD PTR ds:[esi]
    11a4:	77 00                	ja     11a6 <sysEnter_Vector-0x12ee5a>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...

Disassembly of section .debug_ranges:

00000000 <.debug_ranges>:
   0:	a2 0b 00 00 dc       	mov    ds:0xdc00000b,al
   5:	0b 00                	or     eax,DWORD PTR [eax]
   7:	00 e1                	add    cl,ah
   9:	0b 00                	or     eax,DWORD PTR [eax]
   b:	00 15 0c 00 00 00    	add    BYTE PTR ds:0xc,dl
  11:	00 00                	add    BYTE PTR [eax],al
  13:	00 00                	add    BYTE PTR [eax],al
  15:	00 00                	add    BYTE PTR [eax],al
	...
