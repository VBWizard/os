
Debug/GNU-Linux/libc.so:     file format elf32-i386


Disassembly of section .text:

30000000 <strchr>:
strchr():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:9
 * and open the template in the editor.
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
30000000:	55                   	push   ebp
30000001:	89 e5                	mov    ebp,esp
30000003:	e8 d7 2a 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000008:	05 b0 44 00 00       	add    eax,0x44b0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
    while (*s != (char)c)
3000000d:	eb 17                	jmp    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:11
        if (!*s++)
3000000f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000012:	8d 50 01             	lea    edx,[eax+0x1]
30000015:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000018:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000001b:	84 c0                	test   al,al
3000001d:	75 07                	jne    30000026 <strchr+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:12
            return 0;
3000001f:	b8 00 00 00 00       	mov    eax,0x0
30000024:	eb 10                	jmp    30000036 <strchr+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:10
 */
#include "strings.h"

VISIBLE char *strchr(const char *s, int c)
{
    while (*s != (char)c)
30000026:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000002c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000002f:	38 d0                	cmp    al,dl
30000031:	75 dc                	jne    3000000f <strchr+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:13
        if (!*s++)
            return 0;
    return (char *)s;
30000033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:14
}
30000036:	5d                   	pop    ebp
30000037:	c3                   	ret    

30000038 <strchrI>:
strchrI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:17

char *strchrI(const char *s, int c)
{
30000038:	55                   	push   ebp
30000039:	89 e5                	mov    ebp,esp
3000003b:	e8 9f 2a 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000040:	05 78 44 00 00       	add    eax,0x4478
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    while (*s != (char)c)
30000045:	eb 17                	jmp    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:19
        if (!*s++)
30000047:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000004a:	8d 50 01             	lea    edx,[eax+0x1]
3000004d:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000050:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000053:	84 c0                	test   al,al
30000055:	75 07                	jne    3000005e <strchrI+0x26>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:20
            return 0;
30000057:	b8 00 00 00 00       	mov    eax,0x0
3000005c:	eb 10                	jmp    3000006e <strchrI+0x36>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:18
    return (char *)s;
}

char *strchrI(const char *s, int c)
{
    while (*s != (char)c)
3000005e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000061:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000064:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000067:	38 d0                	cmp    al,dl
30000069:	75 dc                	jne    30000047 <strchrI+0xf>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:21
        if (!*s++)
            return 0;
    return (char *)s;
3000006b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strchr.c:22
}
3000006e:	5d                   	pop    ebp
3000006f:	c3                   	ret    

30000070 <strcspn>:
strcspn():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:38
 */

#include "strings.h"

VISIBLE int strcspn(char* string, char* chars)
{
30000070:	55                   	push   ebp
30000071:	89 e5                	mov    ebp,esp
30000073:	56                   	push   esi
30000074:	53                   	push   ebx
30000075:	e8 65 2a 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
3000007a:	05 3e 44 00 00       	add    eax,0x443e
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
3000007f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000082:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000085:	89 c1                	mov    ecx,eax
30000087:	eb 29                	jmp    300000b2 <strcspn+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42
	for (p = chars; *p != 0; p++) {
30000089:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
3000008c:	eb 15                	jmp    300000a3 <strcspn+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:43
	    if (c == *p) {
3000008e:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30000091:	38 c8                	cmp    al,cl
30000093:	75 0b                	jne    300000a0 <strcspn+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:44
		return s-string;
30000095:	89 da                	mov    edx,ebx
30000097:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000009a:	29 c2                	sub    edx,eax
3000009c:	89 d0                	mov    eax,edx
3000009e:	eb 21                	jmp    300000c1 <strcspn+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 2)
VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000a0:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:42 (discriminator 1)
300000a3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000a6:	84 c0                	test   al,al
300000a8:	75 e4                	jne    3000008e <strcspn+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 2)

VISIBLE int strcspn(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000aa:	83 c3 01             	add    ebx,0x1
300000ad:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000b0:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:41 (discriminator 1)
300000b2:	89 c8                	mov    eax,ecx
300000b4:	84 c0                	test   al,al
300000b6:	75 d1                	jne    30000089 <strcspn+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:48
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
300000b8:	89 da                	mov    edx,ebx
300000ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000bd:	29 c2                	sub    edx,eax
300000bf:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:49
}
300000c1:	5b                   	pop    ebx
300000c2:	5e                   	pop    esi
300000c3:	5d                   	pop    ebp
300000c4:	c3                   	ret    

300000c5 <strcspnI>:
strcspnI():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:52

int strcspnI(char* string, char* chars)
{
300000c5:	55                   	push   ebp
300000c6:	89 e5                	mov    ebp,esp
300000c8:	56                   	push   esi
300000c9:	53                   	push   ebx
300000ca:	e8 10 2a 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300000cf:	05 e9 43 00 00       	add    eax,0x43e9
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000d4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
300000d7:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
300000da:	89 c1                	mov    ecx,eax
300000dc:	eb 29                	jmp    30000107 <strcspnI+0x42>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56
	for (p = chars; *p != 0; p++) {
300000de:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
300000e1:	eb 15                	jmp    300000f8 <strcspnI+0x33>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:57
	    if (c == *p) {
300000e3:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000e6:	38 c8                	cmp    al,cl
300000e8:	75 0b                	jne    300000f5 <strcspnI+0x30>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:58
		return s-string;
300000ea:	89 da                	mov    edx,ebx
300000ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300000ef:	29 c2                	sub    edx,eax
300000f1:	89 d0                	mov    eax,edx
300000f3:	eb 21                	jmp    30000116 <strcspnI+0x51>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 2)
int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
	for (p = chars; *p != 0; p++) {
300000f5:	83 c6 01             	add    esi,0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:56 (discriminator 1)
300000f8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
300000fb:	84 c0                	test   al,al
300000fd:	75 e4                	jne    300000e3 <strcspnI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 2)

int strcspnI(char* string, char* chars)
{
    register char c, *p, *s;

    for (s = string, c = *s; c != 0; s++, c = *s) {
300000ff:	83 c3 01             	add    ebx,0x1
30000102:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30000105:	89 c1                	mov    ecx,eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:55 (discriminator 1)
30000107:	89 c8                	mov    eax,ecx
30000109:	84 c0                	test   al,al
3000010b:	75 d1                	jne    300000de <strcspnI+0x19>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:62
	    if (c == *p) {
		return s-string;
	    }
	}
    }
    return s-string;
3000010d:	89 da                	mov    edx,ebx
3000010f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000112:	29 c2                	sub    edx,eax
30000114:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strcspn.c:63
}
30000116:	5b                   	pop    ebx
30000117:	5e                   	pop    esi
30000118:	5d                   	pop    ebp
30000119:	c3                   	ret    
3000011a:	66 90                	xchg   ax,ax

3000011c <strtok>:
strtok():
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:41
#include "strings.h"
int strcspnI(char* string, char* chars);
char *strchrI(const char *s, int c);

VISIBLE char * strtok(char* s, /*const*/ char* delim)
{
3000011c:	55                   	push   ebp
3000011d:	89 e5                	mov    ebp,esp
3000011f:	56                   	push   esi
30000120:	53                   	push   ebx
30000121:	e8 ea 29 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
30000126:	81 c3 92 43 00 00    	add    ebx,0x4392
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:45
    static char *lasts;
    register int ch;

    if (s == 0)
3000012c:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000130:	75 09                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:46
	s = lasts;
30000132:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000138:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:48
    do {
	if ((ch = *s++) == '\0')
3000013b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000013e:	8d 50 01             	lea    edx,[eax+0x1]
30000141:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
30000144:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000147:	0f be f0             	movsx  esi,al
3000014a:	85 f6                	test   esi,esi
3000014c:	75 07                	jne    30000155 <strtok+0x39>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:49
	    return 0;
3000014e:	b8 00 00 00 00       	mov    eax,0x0
30000153:	eb 57                	jmp    300001ac <strtok+0x90>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:50
    } while (strchrI(delim, ch));
30000155:	83 ec 08             	sub    esp,0x8
30000158:	56                   	push   esi
30000159:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000015c:	e8 d7 fe ff ff       	call   30000038 <strchrI>
30000161:	83 c4 10             	add    esp,0x10
30000164:	85 c0                	test   eax,eax
30000166:	75 d3                	jne    3000013b <strtok+0x1f>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:51
    --s;
30000168:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:52
    lasts = s + strcspnI(s, delim);
3000016c:	83 ec 08             	sub    esp,0x8
3000016f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000172:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000175:	e8 4b ff ff ff       	call   300000c5 <strcspnI>
3000017a:	83 c4 10             	add    esp,0x10
3000017d:	89 c2                	mov    edx,eax
3000017f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000182:	01 d0                	add    eax,edx
30000184:	89 83 34 00 00 00    	mov    DWORD PTR [ebx+0x34],eax
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:53
    if (*lasts != 0)
3000018a:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
30000190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000193:	84 c0                	test   al,al
30000195:	74 12                	je     300001a9 <strtok+0x8d>
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:54
	*lasts++ = 0;
30000197:	8b 83 34 00 00 00    	mov    eax,DWORD PTR [ebx+0x34]
3000019d:	8d 50 01             	lea    edx,[eax+0x1]
300001a0:	89 93 34 00 00 00    	mov    DWORD PTR [ebx+0x34],edx
300001a6:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:55
    return s;
300001a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/../../kproj/chrisOS/src/strings/strtok.c:56
}
300001ac:	8d 65 f8             	lea    esp,[ebp-0x8]
300001af:	5b                   	pop    ebx
300001b0:	5e                   	pop    esi
300001b1:	5d                   	pop    ebp
300001b2:	c3                   	ret    
300001b3:	90                   	nop

300001b4 <reverseI>:
reverseI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:10
 */

#include "libChrisOS.h"

void reverseI(char s[])
 {
300001b4:	55                   	push   ebp
300001b5:	89 e5                	mov    ebp,esp
300001b7:	53                   	push   ebx
300001b8:	83 ec 14             	sub    esp,0x14
300001bb:	e8 1f 29 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300001c0:	05 f8 42 00 00       	add    eax,0x42f8
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
300001c5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
300001cc:	83 ec 0c             	sub    esp,0xc
300001cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300001d2:	89 c3                	mov    ebx,eax
300001d4:	e8 48 16 00 00       	call   30001821 <strlenI>
300001d9:	83 c4 10             	add    esp,0x10
300001dc:	83 e8 01             	sub    eax,0x1
300001df:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300001e2:	eb 39                	jmp    3000021d <reverseI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:15 (discriminator 3)
         c = s[i];
300001e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001ea:	01 d0                	add    eax,edx
300001ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300001ef:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:16 (discriminator 3)
         s[i] = s[j];
300001f2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300001f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300001f8:	01 c2                	add    edx,eax
300001fa:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
300001fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000200:	01 c8                	add    eax,ecx
30000202:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30000205:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:17 (discriminator 3)
         s[j] = c;
30000207:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000020a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000020d:	01 c2                	add    edx,eax
3000020f:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
30000213:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 3)
void reverseI(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlenI(s)-1; i<j; i++, j--) {
30000215:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
30000219:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:14 (discriminator 1)
3000021d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000220:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30000223:	7c bf                	jl     300001e4 <reverseI+0x30>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:19
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
30000225:	90                   	nop
30000226:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000229:	c9                   	leave  
3000022a:	c3                   	ret    

3000022b <itoa>:
itoa():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:22

VISIBLE void itoa(int n, char s[])
 {
3000022b:	55                   	push   ebp
3000022c:	89 e5                	mov    ebp,esp
3000022e:	53                   	push   ebx
3000022f:	83 ec 14             	sub    esp,0x14
30000232:	e8 a8 28 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000237:	05 81 42 00 00       	add    eax,0x4281
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:25
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
3000023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000023f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000242:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000246:	79 03                	jns    3000024b <itoa+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:26
         n = -n;          /* make n positive */
30000248:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:27
     i = 0;
3000024b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:29 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
30000252:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000255:	8d 50 01             	lea    edx,[eax+0x1]
30000258:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000025b:	89 c2                	mov    edx,eax
3000025d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000260:	8d 1c 02             	lea    ebx,[edx+eax*1]
30000263:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000266:	ba 67 66 66 66       	mov    edx,0x66666667
3000026b:	89 c8                	mov    eax,ecx
3000026d:	f7 ea                	imul   edx
3000026f:	c1 fa 02             	sar    edx,0x2
30000272:	89 c8                	mov    eax,ecx
30000274:	c1 f8 1f             	sar    eax,0x1f
30000277:	29 c2                	sub    edx,eax
30000279:	89 d0                	mov    eax,edx
3000027b:	c1 e0 02             	shl    eax,0x2
3000027e:	01 d0                	add    eax,edx
30000280:	01 c0                	add    eax,eax
30000282:	29 c1                	sub    ecx,eax
30000284:	89 ca                	mov    edx,ecx
30000286:	89 d0                	mov    eax,edx
30000288:	83 c0 30             	add    eax,0x30
3000028b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:30 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
3000028d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000290:	ba 67 66 66 66       	mov    edx,0x66666667
30000295:	89 c8                	mov    eax,ecx
30000297:	f7 ea                	imul   edx
30000299:	c1 fa 02             	sar    edx,0x2
3000029c:	89 c8                	mov    eax,ecx
3000029e:	c1 f8 1f             	sar    eax,0x1f
300002a1:	29 c2                	sub    edx,eax
300002a3:	89 d0                	mov    eax,edx
300002a5:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
300002a8:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
300002ac:	7f a4                	jg     30000252 <itoa+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:31
     if (sign < 0)
300002ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
300002b2:	79 13                	jns    300002c7 <itoa+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:32
         s[i++] = '-';
300002b4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300002b7:	8d 50 01             	lea    edx,[eax+0x1]
300002ba:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
300002bd:	89 c2                	mov    edx,eax
300002bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002c2:	01 d0                	add    eax,edx
300002c4:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:33
     s[i] = '\0';
300002c7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300002ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300002cd:	01 d0                	add    eax,edx
300002cf:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:34
     reverseI(s);
300002d2:	83 ec 0c             	sub    esp,0xc
300002d5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300002d8:	e8 d7 fe ff ff       	call   300001b4 <reverseI>
300002dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:35
 }
300002e0:	90                   	nop
300002e1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300002e4:	c9                   	leave  
300002e5:	c3                   	ret    

300002e6 <itoaI>:
itoaI():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:38

 void itoaI(int n, char s[])
 {
300002e6:	55                   	push   ebp
300002e7:	89 e5                	mov    ebp,esp
300002e9:	53                   	push   ebx
300002ea:	83 ec 14             	sub    esp,0x14
300002ed:	e8 ed 27 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300002f2:	05 c6 41 00 00       	add    eax,0x41c6
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:41
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
300002f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300002fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
300002fd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000301:	79 03                	jns    30000306 <itoaI+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:42
         n = -n;          /* make n positive */
30000303:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:43
     i = 0;
30000306:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:45 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
3000030d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000310:	8d 50 01             	lea    edx,[eax+0x1]
30000313:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000316:	89 c2                	mov    edx,eax
30000318:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000031b:	8d 1c 02             	lea    ebx,[edx+eax*1]
3000031e:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
30000321:	ba 67 66 66 66       	mov    edx,0x66666667
30000326:	89 c8                	mov    eax,ecx
30000328:	f7 ea                	imul   edx
3000032a:	c1 fa 02             	sar    edx,0x2
3000032d:	89 c8                	mov    eax,ecx
3000032f:	c1 f8 1f             	sar    eax,0x1f
30000332:	29 c2                	sub    edx,eax
30000334:	89 d0                	mov    eax,edx
30000336:	c1 e0 02             	shl    eax,0x2
30000339:	01 d0                	add    eax,edx
3000033b:	01 c0                	add    eax,eax
3000033d:	29 c1                	sub    ecx,eax
3000033f:	89 ca                	mov    edx,ecx
30000341:	89 d0                	mov    eax,edx
30000343:	83 c0 30             	add    eax,0x30
30000346:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:46 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
30000348:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
3000034b:	ba 67 66 66 66       	mov    edx,0x66666667
30000350:	89 c8                	mov    eax,ecx
30000352:	f7 ea                	imul   edx
30000354:	c1 fa 02             	sar    edx,0x2
30000357:	89 c8                	mov    eax,ecx
30000359:	c1 f8 1f             	sar    eax,0x1f
3000035c:	29 c2                	sub    edx,eax
3000035e:	89 d0                	mov    eax,edx
30000360:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000363:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000367:	7f a4                	jg     3000030d <itoaI+0x27>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:47
     if (sign < 0)
30000369:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000036d:	79 13                	jns    30000382 <itoaI+0x9c>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:48
         s[i++] = '-';
3000036f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000372:	8d 50 01             	lea    edx,[eax+0x1]
30000375:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30000378:	89 c2                	mov    edx,eax
3000037a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000037d:	01 d0                	add    eax,edx
3000037f:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:49
     s[i] = '\0';
30000382:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000385:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000388:	01 d0                	add    eax,edx
3000038a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:50
     reverseI(s);
3000038d:	83 ec 0c             	sub    esp,0xc
30000390:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000393:	e8 1c fe ff ff       	call   300001b4 <reverseI>
30000398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:51
 }
3000039b:	90                   	nop
3000039c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000039f:	c9                   	leave  
300003a0:	c3                   	ret    

300003a1 <atoi>:
atoi():
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:55

  // A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
VISIBLE int atoi(char *str)
{
300003a1:	55                   	push   ebp
300003a2:	89 e5                	mov    ebp,esp
300003a4:	83 ec 10             	sub    esp,0x10
300003a7:	e8 33 27 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300003ac:	05 0c 41 00 00       	add    eax,0x410c
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:56
    int res = 0; // Initialize result
300003b1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003b8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
300003bf:	eb 28                	jmp    300003e9 <atoi+0x48>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:61 (discriminator 3)
        res = res*10 + str[i] - '0';
300003c1:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300003c4:	89 d0                	mov    eax,edx
300003c6:	c1 e0 02             	shl    eax,0x2
300003c9:	01 d0                	add    eax,edx
300003cb:	01 c0                	add    eax,eax
300003cd:	89 c1                	mov    ecx,eax
300003cf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003d5:	01 d0                	add    eax,edx
300003d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003da:	0f be c0             	movsx  eax,al
300003dd:	01 c8                	add    eax,ecx
300003df:	83 e8 30             	sub    eax,0x30
300003e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
300003e5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:60 (discriminator 1)
300003e9:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
300003ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300003ef:	01 d0                	add    eax,edx
300003f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300003f4:	84 c0                	test   al,al
300003f6:	75 c9                	jne    300003c1 <atoi+0x20>
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:64
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
300003f8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/ascii.c:65
300003fb:	c9                   	leave  
300003fc:	c3                   	ret    
300003fd:	66 90                	xchg   ax,ax
300003ff:	90                   	nop

30000400 <getenv>:
getenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:10
 */
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
30000400:	55                   	push   ebp
30000401:	89 e5                	mov    ebp,esp
30000403:	53                   	push   ebx
30000404:	83 ec 14             	sub    esp,0x14
30000407:	e8 04 27 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
3000040c:	81 c3 ac 40 00 00    	add    ebx,0x40ac
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11
    for (int cnt=0;cnt<100;cnt++)
30000412:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
30000419:	eb 7b                	jmp    30000496 <getenv+0x96>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:12
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
3000041b:	83 ec 0c             	sub    esp,0xc
3000041e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000421:	e8 fb 13 00 00       	call   30001821 <strlenI>
30000426:	83 c4 10             	add    esp,0x10
30000429:	89 c1                	mov    ecx,eax
3000042b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000431:	8b 00                	mov    eax,DWORD PTR [eax]
30000433:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000436:	c1 e2 02             	shl    edx,0x2
30000439:	01 d0                	add    eax,edx
3000043b:	8b 00                	mov    eax,DWORD PTR [eax]
3000043d:	83 ec 04             	sub    esp,0x4
30000440:	51                   	push   ecx
30000441:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000444:	50                   	push   eax
30000445:	e8 71 14 00 00       	call   300018bb <strncmpI>
3000044a:	83 c4 10             	add    esp,0x10
3000044d:	85 c0                	test   eax,eax
3000044f:	75 41                	jne    30000492 <getenv+0x92>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:14
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
30000451:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000457:	8b 00                	mov    eax,DWORD PTR [eax]
30000459:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000045c:	c1 e2 02             	shl    edx,0x2
3000045f:	01 d0                	add    eax,edx
30000461:	8b 00                	mov    eax,DWORD PTR [eax]
30000463:	83 ec 08             	sub    esp,0x8
30000466:	8d 93 28 fb ff ff    	lea    edx,[ebx-0x4d8]
3000046c:	52                   	push   edx
3000046d:	50                   	push   eax
3000046e:	e8 25 19 00 00       	call   30001d98 <strstrI>
30000473:	83 c4 10             	add    esp,0x10
30000476:	83 c0 01             	add    eax,0x1
30000479:	83 ec 04             	sub    esp,0x4
3000047c:	6a 32                	push   0x32
3000047e:	50                   	push   eax
3000047f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000482:	e8 9d 14 00 00       	call   30001924 <strncpyI>
30000487:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:15
            return cnt+1;
3000048a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000048d:	83 c0 01             	add    eax,0x1
30000490:	eb 13                	jmp    300004a5 <getenv+0xa5>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 2)
#include "libChrisOS.h"
#include "strings.h"

VISIBLE int getenv(char *varname, char *value)
{
    for (int cnt=0;cnt<100;cnt++)
30000492:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:11 (discriminator 1)
30000496:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
3000049a:	0f 8e 7b ff ff ff    	jle    3000041b <getenv+0x1b>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:17
        if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
        {
            strncpyI(value, strstrI(processEnvp[cnt],"=")+1,50);
            return cnt+1;
        }
    return 0;
300004a0:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:18
}
300004a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300004a8:	c9                   	leave  
300004a9:	c3                   	ret    

300004aa <setenv>:
setenv():
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:21

VISIBLE void  setenv(char *varname, char *value)
{
300004aa:	55                   	push   ebp
300004ab:	89 e5                	mov    ebp,esp
300004ad:	53                   	push   ebx
300004ae:	83 ec 14             	sub    esp,0x14
300004b1:	e8 5a 26 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
300004b6:	81 c3 02 40 00 00    	add    ebx,0x4002
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:22
    uint32_t lastPopulated = 0;
300004bc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24
    
    for (int cnt=0;cnt<100;cnt++)
300004c3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
300004ca:	e9 d5 00 00 00       	jmp    300005a4 <setenv+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:25
        if (processEnvp[cnt]!=0)
300004cf:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004d5:	8b 00                	mov    eax,DWORD PTR [eax]
300004d7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004da:	c1 e2 02             	shl    edx,0x2
300004dd:	01 d0                	add    eax,edx
300004df:	8b 00                	mov    eax,DWORD PTR [eax]
300004e1:	85 c0                	test   eax,eax
300004e3:	0f 84 b7 00 00 00    	je     300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:27
        {
            lastPopulated = (uint32_t)processEnvp[cnt];
300004e9:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300004ef:	8b 00                	mov    eax,DWORD PTR [eax]
300004f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300004f4:	c1 e2 02             	shl    edx,0x2
300004f7:	01 d0                	add    eax,edx
300004f9:	8b 00                	mov    eax,DWORD PTR [eax]
300004fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:28
            if (strncmpI(processEnvp[cnt],varname, strlenI(varname))==0)
300004fe:	83 ec 0c             	sub    esp,0xc
30000501:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000504:	e8 18 13 00 00       	call   30001821 <strlenI>
30000509:	83 c4 10             	add    esp,0x10
3000050c:	89 c1                	mov    ecx,eax
3000050e:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000514:	8b 00                	mov    eax,DWORD PTR [eax]
30000516:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000519:	c1 e2 02             	shl    edx,0x2
3000051c:	01 d0                	add    eax,edx
3000051e:	8b 00                	mov    eax,DWORD PTR [eax]
30000520:	83 ec 04             	sub    esp,0x4
30000523:	51                   	push   ecx
30000524:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000527:	50                   	push   eax
30000528:	e8 8e 13 00 00       	call   300018bb <strncmpI>
3000052d:	83 c4 10             	add    esp,0x10
30000530:	85 c0                	test   eax,eax
30000532:	75 6c                	jne    300005a0 <setenv+0xf6>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:30
            {
                strcpyI(processEnvp[cnt],varname);
30000534:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000053a:	8b 00                	mov    eax,DWORD PTR [eax]
3000053c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000053f:	c1 e2 02             	shl    edx,0x2
30000542:	01 d0                	add    eax,edx
30000544:	8b 00                	mov    eax,DWORD PTR [eax]
30000546:	83 ec 08             	sub    esp,0x8
30000549:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000054c:	50                   	push   eax
3000054d:	e8 8a 11 00 00       	call   300016dc <strcpyI>
30000552:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:31
                strcatI(processEnvp[cnt],"=");
30000555:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000055b:	8b 00                	mov    eax,DWORD PTR [eax]
3000055d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000560:	c1 e2 02             	shl    edx,0x2
30000563:	01 d0                	add    eax,edx
30000565:	8b 00                	mov    eax,DWORD PTR [eax]
30000567:	83 ec 08             	sub    esp,0x8
3000056a:	8d 93 28 fb ff ff    	lea    edx,[ebx-0x4d8]
30000570:	52                   	push   edx
30000571:	50                   	push   eax
30000572:	e8 17 10 00 00       	call   3000158e <strcatI>
30000577:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:32
                strcatI(processEnvp[cnt],value);
3000057a:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000580:	8b 00                	mov    eax,DWORD PTR [eax]
30000582:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000585:	c1 e2 02             	shl    edx,0x2
30000588:	01 d0                	add    eax,edx
3000058a:	8b 00                	mov    eax,DWORD PTR [eax]
3000058c:	83 ec 08             	sub    esp,0x8
3000058f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000592:	50                   	push   eax
30000593:	e8 f6 0f 00 00       	call   3000158e <strcatI>
30000598:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:33
                return;
3000059b:	e9 c6 00 00 00       	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 2)

VISIBLE void  setenv(char *varname, char *value)
{
    uint32_t lastPopulated = 0;
    
    for (int cnt=0;cnt<100;cnt++)
300005a0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:24 (discriminator 1)
300005a4:	83 7d f0 63          	cmp    DWORD PTR [ebp-0x10],0x63
300005a8:	0f 8e 21 ff ff ff    	jle    300004cf <setenv+0x25>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
300005ae:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
300005b5:	e9 a2 00 00 00       	jmp    3000065c <setenv+0x1b2>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:37
        if (processEnvp[cnt]==0)
300005ba:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005c0:	8b 00                	mov    eax,DWORD PTR [eax]
300005c2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005c5:	c1 e2 02             	shl    edx,0x2
300005c8:	01 d0                	add    eax,edx
300005ca:	8b 00                	mov    eax,DWORD PTR [eax]
300005cc:	85 c0                	test   eax,eax
300005ce:	0f 85 84 00 00 00    	jne    30000658 <setenv+0x1ae>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:39
        {
            processEnvp[cnt]=(char*)lastPopulated+512;
300005d4:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005da:	8b 00                	mov    eax,DWORD PTR [eax]
300005dc:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005df:	c1 e2 02             	shl    edx,0x2
300005e2:	01 d0                	add    eax,edx
300005e4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
300005e7:	81 c2 00 02 00 00    	add    edx,0x200
300005ed:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:40
            strcpyI(processEnvp[cnt],varname);
300005ef:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
300005f5:	8b 00                	mov    eax,DWORD PTR [eax]
300005f7:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
300005fa:	c1 e2 02             	shl    edx,0x2
300005fd:	01 d0                	add    eax,edx
300005ff:	8b 00                	mov    eax,DWORD PTR [eax]
30000601:	83 ec 08             	sub    esp,0x8
30000604:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000607:	50                   	push   eax
30000608:	e8 cf 10 00 00       	call   300016dc <strcpyI>
3000060d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:41
            strcatI(processEnvp[cnt],"=");
30000610:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000616:	8b 00                	mov    eax,DWORD PTR [eax]
30000618:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000061b:	c1 e2 02             	shl    edx,0x2
3000061e:	01 d0                	add    eax,edx
30000620:	8b 00                	mov    eax,DWORD PTR [eax]
30000622:	83 ec 08             	sub    esp,0x8
30000625:	8d 93 28 fb ff ff    	lea    edx,[ebx-0x4d8]
3000062b:	52                   	push   edx
3000062c:	50                   	push   eax
3000062d:	e8 5c 0f 00 00       	call   3000158e <strcatI>
30000632:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:42
            strcatI(processEnvp[cnt],value);
30000635:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
3000063b:	8b 00                	mov    eax,DWORD PTR [eax]
3000063d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30000640:	c1 e2 02             	shl    edx,0x2
30000643:	01 d0                	add    eax,edx
30000645:	8b 00                	mov    eax,DWORD PTR [eax]
30000647:	83 ec 08             	sub    esp,0x8
3000064a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000064d:	50                   	push   eax
3000064e:	e8 3b 0f 00 00       	call   3000158e <strcatI>
30000653:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:43
            return;
30000656:	eb 0e                	jmp    30000666 <setenv+0x1bc>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 2)
                strcatI(processEnvp[cnt],"=");
                strcatI(processEnvp[cnt],value);
                return;
            }
        }
    for (int cnt=0;cnt<100;cnt++)
30000658:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:36 (discriminator 1)
3000065c:	83 7d ec 63          	cmp    DWORD PTR [ebp-0x14],0x63
30000660:	0f 8e 54 ff ff ff    	jle    300005ba <setenv+0x110>
/home/yogi/src/os/aproj/libChrisOS/src/environment.c:47
            strcatI(processEnvp[cnt],value);
            return;
        }            
    //NOTE: if we get here, the value is thrown away!        
    
}
30000666:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000669:	c9                   	leave  
3000066a:	c3                   	ret    
3000066b:	90                   	nop

3000066c <open>:
open():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:10
 */

#include "libChrisOS.h"

VISIBLE void* open(char* path, const char* mode)
{
3000066c:	55                   	push   ebp
3000066d:	89 e5                	mov    ebp,esp
3000066f:	53                   	push   ebx
30000670:	83 ec 04             	sub    esp,0x4
30000673:	e8 67 24 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000678:	05 40 3e 00 00       	add    eax,0x3e40
/home/yogi/src/os/aproj/libChrisOS/src/file.c:11
    return (void*)do_syscall2(SYSCALL_OPEN, (uint32_t)path, (uint32_t)mode);
3000067d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000680:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000683:	83 ec 04             	sub    esp,0x4
30000686:	51                   	push   ecx
30000687:	52                   	push   edx
30000688:	6a 02                	push   0x2
3000068a:	89 c3                	mov    ebx,eax
3000068c:	e8 99 02 00 00       	call   3000092a <do_syscall2>
30000691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:12
}
30000694:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000697:	c9                   	leave  
30000698:	c3                   	ret    

30000699 <close>:
close():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:15

VISIBLE void close(void* handle)
{
30000699:	55                   	push   ebp
3000069a:	89 e5                	mov    ebp,esp
3000069c:	53                   	push   ebx
3000069d:	83 ec 04             	sub    esp,0x4
300006a0:	e8 3a 24 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300006a5:	05 13 3e 00 00       	add    eax,0x3e13
/home/yogi/src/os/aproj/libChrisOS/src/file.c:16
    do_syscall1(SYSCALL_CLOSE, (uint32_t)handle);
300006aa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006ad:	83 ec 08             	sub    esp,0x8
300006b0:	52                   	push   edx
300006b1:	6a 03                	push   0x3
300006b3:	89 c3                	mov    ebx,eax
300006b5:	e8 ae 02 00 00       	call   30000968 <do_syscall1>
300006ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:17
}
300006bd:	90                   	nop
300006be:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300006c1:	c9                   	leave  
300006c2:	c3                   	ret    

300006c3 <read>:
read():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:20

VISIBLE int read(void* handle, void *buffer, int size, int length)
{
300006c3:	55                   	push   ebp
300006c4:	89 e5                	mov    ebp,esp
300006c6:	56                   	push   esi
300006c7:	53                   	push   ebx
300006c8:	e8 12 24 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300006cd:	05 eb 3d 00 00       	add    eax,0x3deb
/home/yogi/src/os/aproj/libChrisOS/src/file.c:21
    return do_syscall4(SYSCALL_READ, (uint32_t)handle, (uint32_t)buffer, size, length);
300006d2:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
300006d5:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
300006d8:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
300006db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300006de:	83 ec 0c             	sub    esp,0xc
300006e1:	56                   	push   esi
300006e2:	53                   	push   ebx
300006e3:	51                   	push   ecx
300006e4:	52                   	push   edx
300006e5:	6a 04                	push   0x4
300006e7:	89 c3                	mov    ebx,eax
300006e9:	e8 c6 01 00 00       	call   300008b4 <do_syscall4>
300006ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:22
}
300006f1:	8d 65 f8             	lea    esp,[ebp-0x8]
300006f4:	5b                   	pop    ebx
300006f5:	5e                   	pop    esi
300006f6:	5d                   	pop    ebp
300006f7:	c3                   	ret    

300006f8 <write>:
write():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:25

VISIBLE int write(void* handle, void *buffer, int size, int length)
{
300006f8:	55                   	push   ebp
300006f9:	89 e5                	mov    ebp,esp
300006fb:	56                   	push   esi
300006fc:	53                   	push   ebx
300006fd:	e8 dd 23 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000702:	05 b6 3d 00 00       	add    eax,0x3db6
/home/yogi/src/os/aproj/libChrisOS/src/file.c:26
    return do_syscall4(SYSCALL_WRITE, (uint32_t)handle, (uint32_t)buffer, size, length);
30000707:	8b 75 14             	mov    esi,DWORD PTR [ebp+0x14]
3000070a:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
3000070d:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000710:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000713:	83 ec 0c             	sub    esp,0xc
30000716:	56                   	push   esi
30000717:	53                   	push   ebx
30000718:	51                   	push   ecx
30000719:	52                   	push   edx
3000071a:	6a 05                	push   0x5
3000071c:	89 c3                	mov    ebx,eax
3000071e:	e8 91 01 00 00       	call   300008b4 <do_syscall4>
30000723:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/file.c:27
}
30000726:	8d 65 f8             	lea    esp,[ebp-0x8]
30000729:	5b                   	pop    ebx
3000072a:	5e                   	pop    esi
3000072b:	5d                   	pop    ebp
3000072c:	c3                   	ret    

3000072d <getdir>:
getdir():
/home/yogi/src/os/aproj/libChrisOS/src/file.c:31


VISIBLE int getdir(char* path, char *buffer, int bufferCount)
{
3000072d:	55                   	push   ebp
3000072e:	89 e5                	mov    ebp,esp
30000730:	53                   	push   ebx
30000731:	83 ec 04             	sub    esp,0x4
30000734:	e8 a6 23 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000739:	05 7f 3d 00 00       	add    eax,0x3d7f
/home/yogi/src/os/aproj/libChrisOS/src/file.c:32
    return do_syscall3(SYSCALL_GETDENTS, (uint32_t)path, (uint32_t)buffer, bufferCount);
3000073e:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
30000741:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
30000744:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000747:	53                   	push   ebx
30000748:	51                   	push   ecx
30000749:	52                   	push   edx
3000074a:	68 04 03 00 00       	push   0x304
3000074f:	89 c3                	mov    ebx,eax
30000751:	e8 98 01 00 00       	call   300008ee <do_syscall3>
30000756:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/file.c:33
}
30000759:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000075c:	c9                   	leave  
3000075d:	c3                   	ret    
3000075e:	66 90                	xchg   ax,ax

30000760 <puts>:
puts():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:16
#define PUTSTRING(c) {asm("call sysEnter_Vector\n"::"a" (SYSCALL_WRITE), "b" (STDOUT_FILE), "c" (c));}

extern int printI(const char *format, ...);

VISIBLE void puts(char* buffer)
{
30000760:	55                   	push   ebp
30000761:	89 e5                	mov    ebp,esp
30000763:	53                   	push   ebx
30000764:	e8 76 23 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000769:	05 4f 3d 00 00       	add    eax,0x3d4f
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:17
    PUTSTRING(buffer)
3000076e:	b8 05 00 00 00       	mov    eax,0x5
30000773:	bb 01 00 00 00       	mov    ebx,0x1
30000778:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000077b:	89 d1                	mov    ecx,edx
3000077d:	e8 fc ff ff ff       	call   3000077e <puts+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:18
}
30000782:	90                   	nop
30000783:	5b                   	pop    ebx
30000784:	5d                   	pop    ebp
30000785:	c3                   	ret    

30000786 <putc>:
putc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:21

VISIBLE void putc(char c)
{
30000786:	55                   	push   ebp
30000787:	89 e5                	mov    ebp,esp
30000789:	53                   	push   ebx
3000078a:	83 ec 14             	sub    esp,0x14
3000078d:	e8 4d 23 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000792:	05 26 3d 00 00       	add    eax,0x3d26
30000797:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000079a:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:22
    char buffer[2]={0};
3000079d:	66 c7 45 fa 00 00    	mov    WORD PTR [ebp-0x6],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:24
    
    buffer[0]=c;
300007a3:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
300007a7:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:25
    buffer[1]=0;
300007aa:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:26
    PUTSTRING(&buffer);
300007ae:	b8 05 00 00 00       	mov    eax,0x5
300007b3:	bb 01 00 00 00       	mov    ebx,0x1
300007b8:	8d 55 fa             	lea    edx,[ebp-0x6]
300007bb:	89 d1                	mov    ecx,edx
300007bd:	e8 fc ff ff ff       	call   300007be <putc+0x38>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:27
}
300007c2:	90                   	nop
300007c3:	83 c4 14             	add    esp,0x14
300007c6:	5b                   	pop    ebx
300007c7:	5d                   	pop    ebp
300007c8:	c3                   	ret    

300007c9 <getc>:
getc():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:30

VISIBLE char getc()
{
300007c9:	55                   	push   ebp
300007ca:	89 e5                	mov    ebp,esp
300007cc:	53                   	push   ebx
300007cd:	83 ec 10             	sub    esp,0x10
300007d0:	e8 0a 23 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300007d5:	05 e3 3c 00 00       	add    eax,0x3ce3
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:32
    char c;
    READCHAR(c)
300007da:	b8 04 00 00 00       	mov    eax,0x4
300007df:	ba 00 00 00 00       	mov    edx,0x0
300007e4:	89 d3                	mov    ebx,edx
300007e6:	e8 fc ff ff ff       	call   300007e7 <getc+0x1e>
300007eb:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:33
    return c;
300007ee:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:34
}
300007f2:	83 c4 10             	add    esp,0x10
300007f5:	5b                   	pop    ebx
300007f6:	5d                   	pop    ebp
300007f7:	c3                   	ret    

300007f8 <gets>:
gets():
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:38

//Get a string of {maxlen} characters, returning when the # of characters is reached or enter is pressed
VISIBLE int gets(char* buffer, int maxlen, int stream)
{
300007f8:	55                   	push   ebp
300007f9:	89 e5                	mov    ebp,esp
300007fb:	53                   	push   ebx
300007fc:	83 ec 14             	sub    esp,0x14
300007ff:	e8 db 22 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000804:	05 b4 3c 00 00       	add    eax,0x3cb4
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:40
    char inchar;
    int len=0;
30000809:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:41
    char lbuf[2]={0,0};
30000810:	c6 45 f1 00          	mov    BYTE PTR [ebp-0xf],0x0
30000814:	c6 45 f2 00          	mov    BYTE PTR [ebp-0xe],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:43
    
    if (stream!=1)
30000818:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
3000081c:	74 19                	je     30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:45
    {
        printI("Stream %u not implemented\n",stream);
3000081e:	83 ec 08             	sub    esp,0x8
30000821:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30000824:	8d 90 2a fb ff ff    	lea    edx,[eax-0x4d6]
3000082a:	52                   	push   edx
3000082b:	89 c3                	mov    ebx,eax
3000082d:	e8 b0 02 00 00       	call   30000ae2 <printI>
30000832:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:46 (discriminator 1)
        getsError: goto getsError;
30000835:	eb fe                	jmp    30000835 <gets+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:51
    }
    
    while (1==1)
    {
        READCHAR(inchar)
30000837:	b8 04 00 00 00       	mov    eax,0x4
3000083c:	ba 00 00 00 00       	mov    edx,0x0
30000841:	89 d3                	mov    ebx,edx
30000843:	e8 fc ff ff ff       	call   30000844 <gets+0x4c>
30000848:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52
        if (inchar=='\b' && len>0)
3000084b:	80 7d f3 08          	cmp    BYTE PTR [ebp-0xd],0x8
3000084f:	75 17                	jne    30000868 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:52 (discriminator 1)
30000851:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000855:	7e 11                	jle    30000868 <gets+0x70>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:54
        {
            buffer[len]=0;
30000857:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000085a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000085d:	01 d0                	add    eax,edx
3000085f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:55
            len--;
30000862:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
30000866:	eb 43                	jmp    300008ab <gets+0xb3>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:57
        }
        else if (inchar!=0)
30000868:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
3000086c:	74 33                	je     300008a1 <gets+0xa9>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:59
        {
            lbuf[0]=inchar;
3000086e:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000872:	88 45 f1             	mov    BYTE PTR [ebp-0xf],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:61
            //PUTSTRING(&lbuf);
            buffer[len++]=inchar;
30000875:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000878:	8d 50 01             	lea    edx,[eax+0x1]
3000087b:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000087e:	89 c2                	mov    edx,eax
30000880:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000883:	01 c2                	add    edx,eax
30000885:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
30000889:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63
            //Note: Written this way so that gets an be used as a getc which waits for the key
            if ((len+1>=maxlen) || (inchar==0x0a)) //-1 because we need to leave the terminator (0x0) at the end of the string
3000088b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000088e:	83 c0 01             	add    eax,0x1
30000891:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
30000894:	7d 06                	jge    3000089c <gets+0xa4>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:63 (discriminator 1)
30000896:	80 7d f3 0a          	cmp    BYTE PTR [ebp-0xd],0xa
3000089a:	75 9b                	jne    30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:65
            
                return len;
3000089c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000089f:	eb 0c                	jmp    300008ad <gets+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:68
        }
        else
            asm("call sysEnter_Vector\n"::"a" (0x302)); //hlt
300008a1:	b8 02 03 00 00       	mov    eax,0x302
300008a6:	e8 fc ff ff ff       	call   300008a7 <gets+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:70 (discriminator 2)

    }
300008ab:	eb 8a                	jmp    30000837 <gets+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/input/input.c:71
}
300008ad:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300008b0:	c9                   	leave  
300008b1:	c3                   	ret    
300008b2:	66 90                	xchg   ax,ax

300008b4 <do_syscall4>:
do_syscall4():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:17
extern void sysEnter_Vector();
bool libcInitialized = false;


int do_syscall4(int callnum, uint32_t param1, uint32_t param2, uint32_t param3, uint32_t param4)
{
300008b4:	55                   	push   ebp
300008b5:	89 e5                	mov    ebp,esp
300008b7:	56                   	push   esi
300008b8:	53                   	push   ebx
300008b9:	83 ec 10             	sub    esp,0x10
300008bc:	e8 1e 22 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300008c1:	05 f7 3b 00 00       	add    eax,0x3bf7
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:18
    int retVal=0;
300008c6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:19
    SYSCALL4(callnum, param1, param2, param3, param4, retVal);
300008cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300008d0:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
300008d3:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
300008d6:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
300008d9:	8b 75 18             	mov    esi,DWORD PTR [ebp+0x18]
300008dc:	e8 fc ff ff ff       	call   300008dd <do_syscall4+0x29>
300008e1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:20
    return retVal;
300008e4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:21
}
300008e7:	83 c4 10             	add    esp,0x10
300008ea:	5b                   	pop    ebx
300008eb:	5e                   	pop    esi
300008ec:	5d                   	pop    ebp
300008ed:	c3                   	ret    

300008ee <do_syscall3>:
do_syscall3():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:24

int do_syscall3(int callnum, uint32_t param1, uint32_t param2, uint32_t param3)
{
300008ee:	55                   	push   ebp
300008ef:	89 e5                	mov    ebp,esp
300008f1:	56                   	push   esi
300008f2:	53                   	push   ebx
300008f3:	83 ec 10             	sub    esp,0x10
300008f6:	e8 e4 21 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300008fb:	05 bd 3b 00 00       	add    eax,0x3bbd
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:25
    int retVal=0;
30000900:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:26
    SYSCALL3(callnum, param1, param2, param3, retVal);
30000907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000090a:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
3000090d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000910:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
30000913:	be 00 00 00 00       	mov    esi,0x0
30000918:	e8 fc ff ff ff       	call   30000919 <do_syscall3+0x2b>
3000091d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:27
    return retVal;
30000920:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:28
}
30000923:	83 c4 10             	add    esp,0x10
30000926:	5b                   	pop    ebx
30000927:	5e                   	pop    esi
30000928:	5d                   	pop    ebp
30000929:	c3                   	ret    

3000092a <do_syscall2>:
do_syscall2():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:31

int do_syscall2(int callnum, uint32_t param1, uint32_t param2)
{
3000092a:	55                   	push   ebp
3000092b:	89 e5                	mov    ebp,esp
3000092d:	56                   	push   esi
3000092e:	53                   	push   ebx
3000092f:	83 ec 10             	sub    esp,0x10
30000932:	e8 a8 21 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000937:	05 81 3b 00 00       	add    eax,0x3b81
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:32
    int retVal=0;
3000093c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:33
    SYSCALL2(callnum, param1, param2, retVal);
30000943:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000946:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000949:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
3000094c:	ba 00 00 00 00       	mov    edx,0x0
30000951:	be 00 00 00 00       	mov    esi,0x0
30000956:	e8 fc ff ff ff       	call   30000957 <do_syscall2+0x2d>
3000095b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:34
    return retVal;
3000095e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:35
}
30000961:	83 c4 10             	add    esp,0x10
30000964:	5b                   	pop    ebx
30000965:	5e                   	pop    esi
30000966:	5d                   	pop    ebp
30000967:	c3                   	ret    

30000968 <do_syscall1>:
do_syscall1():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:38

int do_syscall1(int callnum, uint32_t param1)
{
30000968:	55                   	push   ebp
30000969:	89 e5                	mov    ebp,esp
3000096b:	56                   	push   esi
3000096c:	53                   	push   ebx
3000096d:	83 ec 10             	sub    esp,0x10
30000970:	e8 6a 21 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000975:	05 43 3b 00 00       	add    eax,0x3b43
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:39
    int retVal=0;
3000097a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:40
    SYSCALL1(callnum, param1, retVal);
30000981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000984:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30000987:	b9 00 00 00 00       	mov    ecx,0x0
3000098c:	ba 00 00 00 00       	mov    edx,0x0
30000991:	be 00 00 00 00       	mov    esi,0x0
30000996:	e8 fc ff ff ff       	call   30000997 <do_syscall1+0x2f>
3000099b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:41
    return retVal;
3000099e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:42
}
300009a1:	83 c4 10             	add    esp,0x10
300009a4:	5b                   	pop    ebx
300009a5:	5e                   	pop    esi
300009a6:	5d                   	pop    ebp
300009a7:	c3                   	ret    

300009a8 <do_syscall0>:
do_syscall0():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:45

int do_syscall0(int callnum)
{
300009a8:	55                   	push   ebp
300009a9:	89 e5                	mov    ebp,esp
300009ab:	56                   	push   esi
300009ac:	53                   	push   ebx
300009ad:	83 ec 10             	sub    esp,0x10
300009b0:	e8 2a 21 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300009b5:	05 03 3b 00 00       	add    eax,0x3b03
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:46
    int retVal=0;
300009ba:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:47
    SYSCALL0(callnum, retVal);
300009c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300009c4:	bb 00 00 00 00       	mov    ebx,0x0
300009c9:	b9 00 00 00 00       	mov    ecx,0x0
300009ce:	ba 00 00 00 00       	mov    edx,0x0
300009d3:	be 00 00 00 00       	mov    esi,0x0
300009d8:	e8 fc ff ff ff       	call   300009d9 <do_syscall0+0x31>
300009dd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:48
    return retVal;
300009e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:49
}
300009e3:	83 c4 10             	add    esp,0x10
300009e6:	5b                   	pop    ebx
300009e7:	5e                   	pop    esi
300009e8:	5d                   	pop    ebp
300009e9:	c3                   	ret    

300009ea <libc_init>:
libc_init():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:52

VISIBLE void __attribute__((constructor)) libc_init()
{
300009ea:	55                   	push   ebp
300009eb:	89 e5                	mov    ebp,esp
300009ed:	53                   	push   ebx
300009ee:	83 ec 04             	sub    esp,0x4
300009f1:	e8 1a 21 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
300009f6:	81 c3 c2 3a 00 00    	add    ebx,0x3ac2
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:53
    printdI(DEBUG_LIBC,"***libc_init called\n***");
300009fc:	83 ec 08             	sub    esp,0x8
300009ff:	8d 83 48 fb ff ff    	lea    eax,[ebx-0x4b8]
30000a05:	50                   	push   eax
30000a06:	68 00 00 00 02       	push   0x2000000
30000a0b:	e8 06 01 00 00       	call   30000b16 <printdI>
30000a10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:54
    if (!libcInitialized)
30000a13:	0f b6 83 38 00 00 00 	movzx  eax,BYTE PTR [ebx+0x38]
30000a1a:	83 f0 01             	xor    eax,0x1
30000a1d:	84 c0                	test   al,al
30000a1f:	74 56                	je     30000a77 <libc_init+0x8d>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:56
    {
        initmalloc();
30000a21:	e8 72 04 00 00       	call   30000e98 <initmalloc>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:58
        //processEnvp = envp;
        __asm__("mov %0,[ebp+52]\n":"=a" (processEnvp));
30000a26:	8b 45 34             	mov    eax,DWORD PTR [ebp+0x34]
30000a29:	89 c2                	mov    edx,eax
30000a2b:	8b 83 f8 ff ff ff    	mov    eax,DWORD PTR [ebx-0x8]
30000a31:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:59
        do_syscall0(SYSCALL_INVALID);
30000a33:	83 ec 0c             	sub    esp,0xc
30000a36:	6a 00                	push   0x0
30000a38:	e8 6b ff ff ff       	call   300009a8 <do_syscall0>
30000a3d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:60
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
30000a40:	8d 83 d7 c5 ff ff    	lea    eax,[ebx-0x3a29]
30000a46:	83 ec 08             	sub    esp,0x8
30000a49:	50                   	push   eax
30000a4a:	68 63 01 00 00       	push   0x163
30000a4f:	e8 14 ff ff ff       	call   30000968 <do_syscall1>
30000a54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:61
        libcInitialized = true;
30000a57:	c6 83 38 00 00 00 01 	mov    BYTE PTR [ebx+0x38],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:62
        printdI(DEBUG_LIBC,"***libc_init completed\n");
30000a5e:	83 ec 08             	sub    esp,0x8
30000a61:	8d 83 60 fb ff ff    	lea    eax,[ebx-0x4a0]
30000a67:	50                   	push   eax
30000a68:	68 00 00 00 02       	push   0x2000000
30000a6d:	e8 a4 00 00 00       	call   30000b16 <printdI>
30000a72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
    }
    else
        printI("libc_init called previously, exiting\n");
}
30000a75:	eb 12                	jmp    30000a89 <libc_init+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:65
        do_syscall1(SYSCALL_REGEXITHANDLER,(uint32_t)&libc_cleanup);
        libcInitialized = true;
        printdI(DEBUG_LIBC,"***libc_init completed\n");
    }
    else
        printI("libc_init called previously, exiting\n");
30000a77:	83 ec 0c             	sub    esp,0xc
30000a7a:	8d 83 78 fb ff ff    	lea    eax,[ebx-0x488]
30000a80:	50                   	push   eax
30000a81:	e8 5c 00 00 00       	call   30000ae2 <printI>
30000a86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:66
}
30000a89:	90                   	nop
30000a8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000a8d:	c9                   	leave  
30000a8e:	c3                   	ret    

30000a8f <libc_cleanup>:
libc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:69

void __attribute__((destructor)) libc_cleanup(void)
{
30000a8f:	55                   	push   ebp
30000a90:	89 e5                	mov    ebp,esp
30000a92:	53                   	push   ebx
30000a93:	83 ec 04             	sub    esp,0x4
30000a96:	e8 44 20 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000a9b:	05 1d 3a 00 00       	add    eax,0x3a1d
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:70
    malloc_cleanup();
30000aa0:	89 c3                	mov    ebx,eax
30000aa2:	e8 2c 07 00 00       	call   300011d3 <malloc_cleanup>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:71
}
30000aa7:	90                   	nop
30000aa8:	83 c4 04             	add    esp,0x4
30000aab:	5b                   	pop    ebx
30000aac:	5d                   	pop    ebp
30000aad:	c3                   	ret    

30000aae <print>:
print():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:74

VISIBLE int print(const char *format, ...)
{
30000aae:	55                   	push   ebp
30000aaf:	89 e5                	mov    ebp,esp
30000ab1:	83 ec 10             	sub    esp,0x10
30000ab4:	e8 26 20 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000ab9:	05 ff 39 00 00       	add    eax,0x39ff
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:76
    va_list args;
    va_start( args, format );
30000abe:	8d 45 0c             	lea    eax,[ebp+0xc]
30000ac1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:77
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000ac4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000ac7:	89 c2                	mov    edx,eax
30000ac9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000acc:	52                   	push   edx
30000acd:	50                   	push   eax
30000ace:	68 00 03 00 00       	push   0x300
30000ad3:	e8 52 fe ff ff       	call   3000092a <do_syscall2>
30000ad8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:78
    return 0;
30000adb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:79
}
30000ae0:	c9                   	leave  
30000ae1:	c3                   	ret    

30000ae2 <printI>:
printI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:82

int printI(const char *format, ...)
{
30000ae2:	55                   	push   ebp
30000ae3:	89 e5                	mov    ebp,esp
30000ae5:	83 ec 10             	sub    esp,0x10
30000ae8:	e8 f2 1f 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000aed:	05 cb 39 00 00       	add    eax,0x39cb
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:84
    va_list args;
    va_start( args, format );
30000af2:	8d 45 0c             	lea    eax,[ebp+0xc]
30000af5:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:85
    do_syscall2(SYSCALL_PRINT,(uint32_t)format,(uint32_t)args);
30000af8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000afb:	89 c2                	mov    edx,eax
30000afd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b00:	52                   	push   edx
30000b01:	50                   	push   eax
30000b02:	68 00 03 00 00       	push   0x300
30000b07:	e8 1e fe ff ff       	call   3000092a <do_syscall2>
30000b0c:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:86
    return 0;
30000b0f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:87
}
30000b14:	c9                   	leave  
30000b15:	c3                   	ret    

30000b16 <printdI>:
printdI():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:90

int printdI(uint32_t DebugLevel, const char *format, ...)
{
30000b16:	55                   	push   ebp
30000b17:	89 e5                	mov    ebp,esp
30000b19:	83 ec 10             	sub    esp,0x10
30000b1c:	e8 be 1f 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000b21:	05 97 39 00 00       	add    eax,0x3997
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:92
    va_list args;
    va_start( args, format );
30000b26:	8d 45 10             	lea    eax,[ebp+0x10]
30000b29:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:94
    
    do_syscall3(SYSCALL_PRINTD, DebugLevel, (uint32_t)format, (uint32_t)args);
30000b2c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000b2f:	89 c2                	mov    edx,eax
30000b31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30000b34:	52                   	push   edx
30000b35:	50                   	push   eax
30000b36:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000b39:	68 01 03 00 00       	push   0x301
30000b3e:	e8 ab fd ff ff       	call   300008ee <do_syscall3>
30000b43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:95
    return 0;
30000b46:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:97
    va_end(args);
}
30000b4b:	c9                   	leave  
30000b4c:	c3                   	ret    

30000b4d <sleep>:
sleep():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:100

VISIBLE unsigned int sleep (unsigned int __seconds)
{
30000b4d:	55                   	push   ebp
30000b4e:	89 e5                	mov    ebp,esp
30000b50:	56                   	push   esi
30000b51:	53                   	push   ebx
30000b52:	83 ec 10             	sub    esp,0x10
30000b55:	e8 85 1f 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000b5a:	05 5e 39 00 00       	add    eax,0x395e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:101
    SLEEP_SECONDS(__seconds)
30000b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b62:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
30000b65:	b8 70 01 00 00       	mov    eax,0x170
30000b6a:	bb 00 00 00 00       	mov    ebx,0x0
30000b6f:	b9 00 00 00 00       	mov    ecx,0x0
30000b74:	ba 00 00 00 00       	mov    edx,0x0
30000b79:	be 00 00 00 00       	mov    esi,0x0
30000b7e:	e8 fc ff ff ff       	call   30000b7f <sleep+0x32>
30000b83:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000b86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000b89:	6b d0 64             	imul   edx,eax,0x64
30000b8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000b8f:	01 d0                	add    eax,edx
30000b91:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
30000b94:	b8 66 01 00 00       	mov    eax,0x166
30000b99:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
30000b9c:	b9 00 00 00 00       	mov    ecx,0x0
30000ba1:	ba 00 00 00 00       	mov    edx,0x0
30000ba6:	be 00 00 00 00       	mov    esi,0x0
30000bab:	e8 fc ff ff ff       	call   30000bac <sleep+0x5f>
30000bb0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:102
    return 0;
30000bb3:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:103
}
30000bb8:	83 c4 10             	add    esp,0x10
30000bbb:	5b                   	pop    ebx
30000bbc:	5e                   	pop    esi
30000bbd:	5d                   	pop    ebp
30000bbe:	c3                   	ret    

30000bbf <stop>:
stop():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:106

void stop()
{
30000bbf:	55                   	push   ebp
30000bc0:	89 e5                	mov    ebp,esp
30000bc2:	e8 18 1f 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000bc7:	05 f1 38 00 00       	add    eax,0x38f1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:107
    do_syscall0(SYSCALL_STOP);
30000bcc:	68 68 01 00 00       	push   0x168
30000bd1:	e8 d2 fd ff ff       	call   300009a8 <do_syscall0>
30000bd6:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:108
}
30000bd9:	90                   	nop
30000bda:	c9                   	leave  
30000bdb:	c3                   	ret    

30000bdc <modifySignal>:
modifySignal():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:111

VISIBLE void modifySignal(int signal, void* sigHandler, int sigData)
{
30000bdc:	55                   	push   ebp
30000bdd:	89 e5                	mov    ebp,esp
30000bdf:	e8 fb 1e 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000be4:	05 d4 38 00 00       	add    eax,0x38d4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:112
    do_syscall3(SYSCALL_SETSIGACTION,signal,(uint32_t)sigHandler,sigData);
30000be9:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000bec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000bf2:	51                   	push   ecx
30000bf3:	52                   	push   edx
30000bf4:	50                   	push   eax
30000bf5:	68 67 01 00 00       	push   0x167
30000bfa:	e8 ef fc ff ff       	call   300008ee <do_syscall3>
30000bff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:113
}
30000c02:	90                   	nop
30000c03:	c9                   	leave  
30000c04:	c3                   	ret    

30000c05 <fork>:
fork():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:116

VISIBLE int fork()
{
30000c05:	55                   	push   ebp
30000c06:	89 e5                	mov    ebp,esp
30000c08:	e8 d2 1e 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000c0d:	05 ab 38 00 00       	add    eax,0x38ab
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:117
    return do_syscall0(SYSCALL_FORK);
30000c12:	6a 06                	push   0x6
30000c14:	e8 8f fd ff ff       	call   300009a8 <do_syscall0>
30000c19:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:118
}
30000c1c:	c9                   	leave  
30000c1d:	c3                   	ret    

30000c1e <exec>:
exec():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:121

VISIBLE int exec(char* path)
{
30000c1e:	55                   	push   ebp
30000c1f:	89 e5                	mov    ebp,esp
30000c21:	53                   	push   ebx
30000c22:	83 ec 24             	sub    esp,0x24
30000c25:	e8 e6 1e 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
30000c2a:	81 c3 8e 38 00 00    	add    ebx,0x388e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:122
    int pid=0, argc=0;
30000c30:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
30000c37:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:124
    char** argv;
    char* spacePtr=path, *lastSpacePtr=path;
30000c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c41:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
30000c44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000c47:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:126
    char* program;
    program=mallocI(512);
30000c4a:	83 ec 0c             	sub    esp,0xc
30000c4d:	68 00 02 00 00       	push   0x200
30000c52:	e8 6d 03 00 00       	call   30000fc4 <mallocI>
30000c57:	83 c4 10             	add    esp,0x10
30000c5a:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:129
    do
    {
        spacePtr=strstrI(spacePtr," ");
30000c5d:	83 ec 08             	sub    esp,0x8
30000c60:	8d 83 9e fb ff ff    	lea    eax,[ebx-0x462]
30000c66:	50                   	push   eax
30000c67:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000c6a:	e8 29 11 00 00       	call   30001d98 <strstrI>
30000c6f:	83 c4 10             	add    esp,0x10
30000c72:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:130
        if (argc==0)
30000c75:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
30000c79:	75 44                	jne    30000cbf <exec+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:132
        {
            if (spacePtr==0)
30000c7b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000c7f:	75 22                	jne    30000ca3 <exec+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:133
                strncpyI(program, path, strlenI(path));
30000c81:	83 ec 0c             	sub    esp,0xc
30000c84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c87:	e8 95 0b 00 00       	call   30001821 <strlenI>
30000c8c:	83 c4 10             	add    esp,0x10
30000c8f:	83 ec 04             	sub    esp,0x4
30000c92:	50                   	push   eax
30000c93:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000c96:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000c99:	e8 86 0c 00 00       	call   30001924 <strncpyI>
30000c9e:	83 c4 10             	add    esp,0x10
30000ca1:	eb 1c                	jmp    30000cbf <exec+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:135
            else
                strncpyI(program, path, spacePtr-path);
30000ca3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000ca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000ca9:	29 c2                	sub    edx,eax
30000cab:	89 d0                	mov    eax,edx
30000cad:	83 ec 04             	sub    esp,0x4
30000cb0:	50                   	push   eax
30000cb1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000cb4:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
30000cb7:	e8 68 0c 00 00       	call   30001924 <strncpyI>
30000cbc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:137
        }
        argc++;
30000cbf:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:139
            
    } while (spacePtr++);
30000cc3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000cc6:	8d 50 01             	lea    edx,[eax+0x1]
30000cc9:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000ccc:	85 c0                	test   eax,eax
30000cce:	75 8d                	jne    30000c5d <exec+0x3f>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:141
    
    argv=mallocI((argc*50)+(argc*4));
30000cd0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000cd3:	6b c0 36             	imul   eax,eax,0x36
30000cd6:	83 ec 0c             	sub    esp,0xc
30000cd9:	50                   	push   eax
30000cda:	e8 e5 02 00 00       	call   30000fc4 <mallocI>
30000cdf:	83 c4 10             	add    esp,0x10
30000ce2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:142
    int argvPtr=4*argc;
30000ce5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30000ce8:	c1 e0 02             	shl    eax,0x2
30000ceb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:143
    spacePtr=path;
30000cee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000cf1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:144
    for (int cnt=0;cnt<argc; cnt++)
30000cf4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
30000cfb:	e9 c8 00 00 00       	jmp    30000dc8 <exec+0x1aa>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:146
    {
        argv[cnt]=(char*)argv+argvPtr;
30000d00:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d03:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d0a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d0d:	01 d0                	add    eax,edx
30000d0f:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
30000d12:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30000d15:	01 ca                	add    edx,ecx
30000d17:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:147
        spacePtr=strstrI(spacePtr," ");
30000d19:	83 ec 08             	sub    esp,0x8
30000d1c:	8d 83 9e fb ff ff    	lea    eax,[ebx-0x462]
30000d22:	50                   	push   eax
30000d23:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30000d26:	e8 6d 10 00 00       	call   30001d98 <strstrI>
30000d2b:	83 c4 10             	add    esp,0x10
30000d2e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:148
        if (spacePtr)
30000d31:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30000d35:	74 2f                	je     30000d66 <exec+0x148>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:149
            strncpyI(argv[cnt],lastSpacePtr,spacePtr-lastSpacePtr);
30000d37:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30000d3a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30000d3d:	29 c2                	sub    edx,eax
30000d3f:	89 d0                	mov    eax,edx
30000d41:	89 c1                	mov    ecx,eax
30000d43:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d46:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000d4d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d50:	01 d0                	add    eax,edx
30000d52:	8b 00                	mov    eax,DWORD PTR [eax]
30000d54:	83 ec 04             	sub    esp,0x4
30000d57:	51                   	push   ecx
30000d58:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d5b:	50                   	push   eax
30000d5c:	e8 c3 0b 00 00       	call   30001924 <strncpyI>
30000d61:	83 c4 10             	add    esp,0x10
30000d64:	eb 31                	jmp    30000d97 <exec+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:151
        else
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
30000d66:	83 ec 0c             	sub    esp,0xc
30000d69:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d6c:	e8 b0 0a 00 00       	call   30001821 <strlenI>
30000d71:	83 c4 10             	add    esp,0x10
30000d74:	89 c2                	mov    edx,eax
30000d76:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d79:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
30000d80:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000d83:	01 c8                	add    eax,ecx
30000d85:	8b 00                	mov    eax,DWORD PTR [eax]
30000d87:	83 ec 04             	sub    esp,0x4
30000d8a:	52                   	push   edx
30000d8b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
30000d8e:	50                   	push   eax
30000d8f:	e8 90 0b 00 00       	call   30001924 <strncpyI>
30000d94:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:152 (discriminator 2)
        strtrimI(argv[cnt]);
30000d97:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000d9a:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
30000da1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30000da4:	01 d0                	add    eax,edx
30000da6:	8b 00                	mov    eax,DWORD PTR [eax]
30000da8:	83 ec 0c             	sub    esp,0xc
30000dab:	50                   	push   eax
30000dac:	e8 2f 0f 00 00       	call   30001ce0 <strtrimI>
30000db1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:153 (discriminator 2)
        lastSpacePtr=spacePtr++;
30000db4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30000db7:	8d 50 01             	lea    edx,[eax+0x1]
30000dba:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30000dbd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:154 (discriminator 2)
        argvPtr+=50;
30000dc0:	83 45 e8 32          	add    DWORD PTR [ebp-0x18],0x32
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:144 (discriminator 2)
    } while (spacePtr++);
    
    argv=mallocI((argc*50)+(argc*4));
    int argvPtr=4*argc;
    spacePtr=path;
    for (int cnt=0;cnt<argc; cnt++)
30000dc4:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:144 (discriminator 1)
30000dc8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30000dcb:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30000dce:	0f 8c 2c ff ff ff    	jl     30000d00 <exec+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:156
            strncpyI(argv[cnt],lastSpacePtr,strlenI(lastSpacePtr));
        strtrimI(argv[cnt]);
        lastSpacePtr=spacePtr++;
        argvPtr+=50;
    }
    printdI(DEBUG_LIBC,"libc: executing for %s\n",path);;
30000dd4:	83 ec 04             	sub    esp,0x4
30000dd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000dda:	8d 83 a0 fb ff ff    	lea    eax,[ebx-0x460]
30000de0:	50                   	push   eax
30000de1:	68 00 00 00 02       	push   0x2000000
30000de6:	e8 2b fd ff ff       	call   30000b16 <printdI>
30000deb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:157
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)program, argc, (uintptr_t)argv);
30000dee:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
30000df1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
30000df4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
30000df7:	51                   	push   ecx
30000df8:	52                   	push   edx
30000df9:	50                   	push   eax
30000dfa:	6a 59                	push   0x59
30000dfc:	e8 ed fa ff ff       	call   300008ee <do_syscall3>
30000e01:	83 c4 10             	add    esp,0x10
30000e04:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:161
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (program),"c" (argc),"d" (argv));*/
    return pid;
30000e07:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:164
    freeI(argv);
    freeI(program);
}
30000e0a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000e0d:	c9                   	leave  
30000e0e:	c3                   	ret    

30000e0f <execa>:
execa():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:167

VISIBLE int execa(char* path, int argc, char** argv)
{
30000e0f:	55                   	push   ebp
30000e10:	89 e5                	mov    ebp,esp
30000e12:	83 ec 10             	sub    esp,0x10
30000e15:	e8 c5 1c 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000e1a:	05 9e 36 00 00       	add    eax,0x369e
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:168
    int pid=0;
30000e1f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:171
    //Using the syscall is breaking the stack
//    SYSCALL3(SYSCALL_EXEC,path,argc,argv);
    printdI(DEBUG_LIBC,"libc: exec for %s\n",path);;
30000e26:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000e29:	8d 80 b8 fb ff ff    	lea    eax,[eax-0x448]
30000e2f:	50                   	push   eax
30000e30:	68 00 00 00 02       	push   0x2000000
30000e35:	e8 dc fc ff ff       	call   30000b16 <printdI>
30000e3a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:172
    pid = do_syscall3(SYSCALL_EXEC, (uintptr_t)path, argc, (uintptr_t)argv);
30000e3d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30000e40:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30000e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000e46:	51                   	push   ecx
30000e47:	52                   	push   edx
30000e48:	50                   	push   eax
30000e49:	6a 59                	push   0x59
30000e4b:	e8 9e fa ff ff       	call   300008ee <do_syscall3>
30000e50:	83 c4 10             	add    esp,0x10
30000e53:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:176
/*    __asm__("push ds\nint 0x80\npop ds\n"
            :"=a" (pid)
            :"a" (0x59),"b" (path),"c" (argc),"d" (argv));*/
    return pid;
30000e56:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:177
}
30000e59:	c9                   	leave  
30000e5a:	c3                   	ret    

30000e5b <waitpid>:
waitpid():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:180

VISIBLE int waitpid(uint32_t pid)
{
30000e5b:	55                   	push   ebp
30000e5c:	89 e5                	mov    ebp,esp
30000e5e:	e8 7c 1c 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000e63:	05 55 36 00 00       	add    eax,0x3655
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:181
    return do_syscall1(SYSCALL_WAITFORPID,pid);
30000e68:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000e6b:	6a 61                	push   0x61
30000e6d:	e8 f6 fa ff ff       	call   30000968 <do_syscall1>
30000e72:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:182
}
30000e75:	c9                   	leave  
30000e76:	c3                   	ret    

30000e77 <getcwd>:
getcwd():
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:185

VISIBLE char* getcwd(char* buf, size_t size)
{
30000e77:	55                   	push   ebp
30000e78:	89 e5                	mov    ebp,esp
30000e7a:	e8 60 1c 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000e7f:	05 39 36 00 00       	add    eax,0x3639
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:186
    return (char*)do_syscall2(SYSCALL_GETCWD,(uint32_t)buf,size);
30000e84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000e87:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30000e8a:	50                   	push   eax
30000e8b:	6a 4f                	push   0x4f
30000e8d:	e8 98 fa ff ff       	call   3000092a <do_syscall2>
30000e92:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/libChrisOS.c:187
}
30000e95:	c9                   	leave  
30000e96:	c3                   	ret    
30000e97:	90                   	nop

30000e98 <initmalloc>:
initmalloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:13
#include "libChrisOS.h"

#define HEAP_GET_NEXT(s,t) {t=(uint8_t*)s+s->len+sizeof(heaprec_t);}
#define HEAP_CURR(s,t) {t=((heaprec_t*)s)-1;}
void initmalloc()
{
30000e98:	55                   	push   ebp
30000e99:	89 e5                	mov    ebp,esp
30000e9b:	53                   	push   ebx
30000e9c:	83 ec 04             	sub    esp,0x4
30000e9f:	e8 6c 1c 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
30000ea4:	81 c3 14 36 00 00    	add    ebx,0x3614
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:14
    printdI(DEBUG_MALLOC,"heapBase @ 0X%08X = 0x%08X before\n", &heapBase, heapBase);
30000eaa:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000eb0:	8b 00                	mov    eax,DWORD PTR [eax]
30000eb2:	50                   	push   eax
30000eb3:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000eb9:	50                   	push   eax
30000eba:	8d 83 cc fb ff ff    	lea    eax,[ebx-0x434]
30000ec0:	50                   	push   eax
30000ec1:	68 00 00 00 01       	push   0x1000000
30000ec6:	e8 4b fc ff ff       	call   30000b16 <printdI>
30000ecb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:15
    heapBase=0;
30000ece:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30000ed4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:16
    heapCurr=0;
30000eda:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30000ee0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:17
    heapEnd=0;
30000ee6:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30000eec:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:18
    libcTZ=-5;
30000ef2:	8b 83 fc ff ff ff    	mov    eax,DWORD PTR [ebx-0x4]
30000ef8:	c7 00 fb ff ff ff    	mov    DWORD PTR [eax],0xfffffffb
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:20

}
30000efe:	90                   	nop
30000eff:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30000f02:	c9                   	leave  
30000f03:	c3                   	ret    

30000f04 <newHeapRequiredToFulfillRequest>:
newHeapRequiredToFulfillRequest():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:23

uint32_t newHeapRequiredToFulfillRequest(size_t size)
{
30000f04:	55                   	push   ebp
30000f05:	89 e5                	mov    ebp,esp
30000f07:	83 ec 10             	sub    esp,0x10
30000f0a:	e8 d0 1b 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000f0f:	05 a9 35 00 00       	add    eax,0x35a9
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:26
    //CLR 12/28/2018: Need to add 2 heap records instead of just 1, because in malloc we'll set the ->prev 
    //value of the heap record following ours before returning
    uint32_t newSize=size+(sizeof(heaprec_t)*2);
30000f14:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30000f17:	83 c2 20             	add    edx,0x20
30000f1a:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:28
    //printDebug(DEBUG_MALLOC,"size=0x%08X, heapEnd=0x%08X, heapCurr=0x%08X\n",newSize, heapEnd, heapCurr);
    if (heapCurr+newSize > heapEnd)
30000f1d:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000f23:	8b 0a                	mov    ecx,DWORD PTR [edx]
30000f25:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30000f28:	01 d1                	add    ecx,edx
30000f2a:	8b 90 ec ff ff ff    	mov    edx,DWORD PTR [eax-0x14]
30000f30:	8b 12                	mov    edx,DWORD PTR [edx]
30000f32:	39 d1                	cmp    ecx,edx
30000f34:	76 4e                	jbe    30000f84 <newHeapRequiredToFulfillRequest+0x80>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:31
    {
        //printDebug(DEBUG_MALLOC,"Heap requested 0x%08X, heap available 0x%08X\n",newSize, heapEnd-heapCurr);
        newSize -=(heapEnd-heapCurr);
30000f36:	8b 90 f4 ff ff ff    	mov    edx,DWORD PTR [eax-0xc]
30000f3c:	8b 12                	mov    edx,DWORD PTR [edx]
30000f3e:	8b 80 ec ff ff ff    	mov    eax,DWORD PTR [eax-0x14]
30000f44:	8b 00                	mov    eax,DWORD PTR [eax]
30000f46:	29 c2                	sub    edx,eax
30000f48:	89 d0                	mov    eax,edx
30000f4a:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32
        if (newSize== 0 || newSize%PAGE_SIZE)
30000f4d:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
30000f51:	74 0c                	je     30000f5f <newHeapRequiredToFulfillRequest+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:32 (discriminator 1)
30000f53:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f56:	25 ff 0f 00 00       	and    eax,0xfff
30000f5b:	85 c0                	test   eax,eax
30000f5d:	74 10                	je     30000f6f <newHeapRequiredToFulfillRequest+0x6b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:34
       {
           newSize+=(PAGE_SIZE-(newSize % PAGE_SIZE));
30000f5f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f62:	25 00 f0 ff ff       	and    eax,0xfffff000
30000f67:	05 00 10 00 00       	add    eax,0x1000
30000f6c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:37
           //printDebug(DEBUG_MALLOC,"libcnewHeapRequiredToFulfillRequest: Size adjusted from %u to %u\n",size,newSize);
       }
        if (newSize < ALLOC_REQUEST_SIZE)
30000f6f:	81 7d fc ff 1f 03 00 	cmp    DWORD PTR [ebp-0x4],0x31fff
30000f76:	77 07                	ja     30000f7f <newHeapRequiredToFulfillRequest+0x7b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:38
            return ALLOC_REQUEST_SIZE;
30000f78:	b8 00 20 03 00       	mov    eax,0x32000
30000f7d:	eb 0a                	jmp    30000f89 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:40
        else
            return newSize;
30000f7f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000f82:	eb 05                	jmp    30000f89 <newHeapRequiredToFulfillRequest+0x85>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:43
    }
    else
        return 0;
30000f84:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:44
}
30000f89:	c9                   	leave  
30000f8a:	c3                   	ret    

30000f8b <freeI>:
freeI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:47

void freeI(void* fpointer)
{
30000f8b:	55                   	push   ebp
30000f8c:	89 e5                	mov    ebp,esp
30000f8e:	83 ec 10             	sub    esp,0x10
30000f91:	e8 49 1b 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30000f96:	05 22 35 00 00       	add    eax,0x3522
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:50
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
30000f9b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
30000f9f:	74 20                	je     30000fc1 <freeI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:52
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
    HEAP_CURR(fpointer,mp);
30000fa1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30000fa4:	83 e8 10             	sub    eax,0x10
30000fa7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:55
    
    //printDebug(DEBUG_MALLOC,"libc_free: Freeing heap @ fp=0x%08X (mp=0x%08X)\n",fpointer,mp);
    if (mp->marker!=ALLOC_MARKER_VALUE)
30000faa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fad:	8b 00                	mov    eax,DWORD PTR [eax]
30000faf:	3d d0 00 0f b0       	cmp    eax,0xb00f00d0
30000fb4:	74 02                	je     30000fb8 <freeI+0x2d>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:59 (discriminator 2)
    {
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
30000fb6:	eb fe                	jmp    30000fb6 <freeI+0x2b>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:61
    }
    mp->inUse=false;
30000fb8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30000fbb:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
30000fbf:	eb 01                	jmp    30000fc2 <freeI+0x37>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:51
void freeI(void* fpointer)
{
    heaprec_t* mp;;  //-1 means back up to the heaprec_t struct
    
    if (fpointer==NULL)
        return;             //CLR 04/20/2017: If pointer to be freed is NULL, don't do anything
30000fc1:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:62
        //print("malloc: marker not found error!!!\n");
gotoHere:
        goto gotoHere;
    }
    mp->inUse=false;
}
30000fc2:	c9                   	leave  
30000fc3:	c3                   	ret    

30000fc4 <mallocI>:
mallocI():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:65

void*  mallocI(size_t size)
{
30000fc4:	55                   	push   ebp
30000fc5:	89 e5                	mov    ebp,esp
30000fc7:	53                   	push   ebx
30000fc8:	83 ec 24             	sub    esp,0x24
30000fcb:	e8 40 1b 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
30000fd0:	81 c3 e8 34 00 00    	add    ebx,0x34e8
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:72

    uint32_t needed;
    uint32_t allocatedPtr;
    heaprec_t* heapPtr;
    uint8_t* heapPtrNext;
    printdI(DEBUG_MALLOC,"malloc(0x%08X)\n",size);
30000fd6:	83 ec 04             	sub    esp,0x4
30000fd9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000fdc:	8d 83 ef fb ff ff    	lea    eax,[ebx-0x411]
30000fe2:	50                   	push   eax
30000fe3:	68 00 00 00 01       	push   0x1000000
30000fe8:	e8 29 fb ff ff       	call   30000b16 <printdI>
30000fed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:73
    needed = newHeapRequiredToFulfillRequest(size);
30000ff0:	83 ec 0c             	sub    esp,0xc
30000ff3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30000ff6:	e8 09 ff ff ff       	call   30000f04 <newHeapRequiredToFulfillRequest>
30000ffb:	83 c4 10             	add    esp,0x10
30000ffe:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:74
    printdI(DEBUG_MALLOC,"libc_malloc: needed=0x%08X\n",needed);
30001001:	83 ec 04             	sub    esp,0x4
30001004:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
30001007:	8d 83 ff fb ff ff    	lea    eax,[ebx-0x401]
3000100d:	50                   	push   eax
3000100e:	68 00 00 00 01       	push   0x1000000
30001013:	e8 fe fa ff ff       	call   30000b16 <printdI>
30001018:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:75
    if (needed!=0)      //New heap required
3000101b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
3000101f:	0f 84 ae 00 00 00    	je     300010d3 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:77
    {
        allocatedPtr = do_syscall1(SYSCALL_ALLOC, needed);
30001025:	83 ec 08             	sub    esp,0x8
30001028:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
3000102b:	68 65 01 00 00       	push   0x165
30001030:	e8 33 f9 ff ff       	call   30000968 <do_syscall1>
30001035:	83 c4 10             	add    esp,0x10
30001038:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:79
        //This is needed to keep in sync with what the kernel thinks
        printdI(DEBUG_MALLOC,"libc_malloc: heaEnd=0x%08X\n",heapEnd);
3000103b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001041:	8b 00                	mov    eax,DWORD PTR [eax]
30001043:	83 ec 04             	sub    esp,0x4
30001046:	50                   	push   eax
30001047:	8d 83 1b fc ff ff    	lea    eax,[ebx-0x3e5]
3000104d:	50                   	push   eax
3000104e:	68 00 00 00 01       	push   0x1000000
30001053:	e8 be fa ff ff       	call   30000b16 <printdI>
30001058:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:80
        heapEnd=allocatedPtr+needed;
3000105b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
3000105e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001061:	01 c2                	add    edx,eax
30001063:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001069:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:81
        printdI(DEBUG_MALLOC,"libc_malloc: Req 0x%08X bytes, ret was 0x%08X, heapEnd=0x%08X\n",needed,allocatedPtr,heapEnd);
3000106b:	8b 83 ec ff ff ff    	mov    eax,DWORD PTR [ebx-0x14]
30001071:	8b 00                	mov    eax,DWORD PTR [eax]
30001073:	83 ec 0c             	sub    esp,0xc
30001076:	50                   	push   eax
30001077:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
3000107a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
3000107d:	8d 83 38 fc ff ff    	lea    eax,[ebx-0x3c8]
30001083:	50                   	push   eax
30001084:	68 00 00 00 01       	push   0x1000000
30001089:	e8 88 fa ff ff       	call   30000b16 <printdI>
3000108e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:82
        if (heapBase==0)    //Hasn't been initialized yet!
30001091:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
30001097:	8b 00                	mov    eax,DWORD PTR [eax]
30001099:	85 c0                	test   eax,eax
3000109b:	75 36                	jne    300010d3 <mallocI+0x10f>
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:84
        {
            heapCurr=allocatedPtr;
3000109d:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010a3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300010a6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:85
            heapBase=allocatedPtr;
300010a8:	8b 83 f0 ff ff ff    	mov    eax,DWORD PTR [ebx-0x10]
300010ae:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
300010b1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:86
            printdI(DEBUG_MALLOC,"libc_malloc: Initialized heapCurr and heapBase to 0x%08X\n",heapCurr);
300010b3:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010b9:	8b 00                	mov    eax,DWORD PTR [eax]
300010bb:	83 ec 04             	sub    esp,0x4
300010be:	50                   	push   eax
300010bf:	8d 83 78 fc ff ff    	lea    eax,[ebx-0x388]
300010c5:	50                   	push   eax
300010c6:	68 00 00 00 01       	push   0x1000000
300010cb:	e8 46 fa ff ff       	call   30000b16 <printdI>
300010d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:89
        }
    }
    printdI(DEBUG_MALLOC,"libc_malloc:creating heap rec @ 0x%08X\n",heapCurr);
300010d3:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010d9:	8b 00                	mov    eax,DWORD PTR [eax]
300010db:	83 ec 04             	sub    esp,0x4
300010de:	50                   	push   eax
300010df:	8d 83 b4 fc ff ff    	lea    eax,[ebx-0x34c]
300010e5:	50                   	push   eax
300010e6:	68 00 00 00 01       	push   0x1000000
300010eb:	e8 26 fa ff ff       	call   30000b16 <printdI>
300010f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:90
    heapPtr = (heaprec_t*)heapCurr;
300010f3:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
300010f9:	8b 00                	mov    eax,DWORD PTR [eax]
300010fb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:91
    heapPtr->marker=ALLOC_MARKER_VALUE;
300010fe:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001101:	c7 00 d0 00 0f b0    	mov    DWORD PTR [eax],0xb00f00d0
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:92
    heapPtr->len=size;
30001107:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
3000110a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000110d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:93
    heapPtr->inUse=true;
30001110:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001113:	c6 40 08 01          	mov    BYTE PTR [eax+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:94
    printdI(DEBUG_MALLOC,"libc_malloc: heapCurr=0x%08X, sizeof(heaprec_t)=0x%08X\n",heapCurr,sizeof(heaprec_t));
30001117:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000111d:	8b 00                	mov    eax,DWORD PTR [eax]
3000111f:	6a 10                	push   0x10
30001121:	50                   	push   eax
30001122:	8d 83 dc fc ff ff    	lea    eax,[ebx-0x324]
30001128:	50                   	push   eax
30001129:	68 00 00 00 01       	push   0x1000000
3000112e:	e8 e3 f9 ff ff       	call   30000b16 <printdI>
30001133:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:95
    retVal=(void*)(heapCurr+sizeof(heaprec_t));
30001136:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
3000113c:	8b 00                	mov    eax,DWORD PTR [eax]
3000113e:	83 c0 10             	add    eax,0x10
30001141:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:96
    HEAP_GET_NEXT(heapPtr,heapPtrNext);
30001144:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001147:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
3000114a:	8d 50 10             	lea    edx,[eax+0x10]
3000114d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001150:	01 d0                	add    eax,edx
30001152:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:97
    ((heaprec_t*)heapPtrNext)->prev=heapPtr;
30001155:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30001158:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000115b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:98
    heapCurr+=size+(sizeof(heaprec_t));
3000115e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001164:	8b 10                	mov    edx,DWORD PTR [eax]
30001166:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001169:	01 d0                	add    eax,edx
3000116b:	8d 50 10             	lea    edx,[eax+0x10]
3000116e:	8b 83 f4 ff ff ff    	mov    eax,DWORD PTR [ebx-0xc]
30001174:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:99
    printdI(DEBUG_MALLOC,"malloc: returning 0x%08X\n",retVal);
30001176:	83 ec 04             	sub    esp,0x4
30001179:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
3000117c:	8d 83 14 fd ff ff    	lea    eax,[ebx-0x2ec]
30001182:	50                   	push   eax
30001183:	68 00 00 00 01       	push   0x1000000
30001188:	e8 89 f9 ff ff       	call   30000b16 <printdI>
3000118d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:100
    return retVal;
30001190:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:101
}
30001193:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001196:	c9                   	leave  
30001197:	c3                   	ret    

30001198 <malloc>:
malloc():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:104

__attribute__((visibility("default"))) void*  malloc(size_t size)
{
30001198:	55                   	push   ebp
30001199:	89 e5                	mov    ebp,esp
3000119b:	83 ec 08             	sub    esp,0x8
3000119e:	e8 3c 19 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300011a3:	05 15 33 00 00       	add    eax,0x3315
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:105
    return mallocI(size);
300011a8:	83 ec 0c             	sub    esp,0xc
300011ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300011ae:	e8 11 fe ff ff       	call   30000fc4 <mallocI>
300011b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:106
}
300011b6:	c9                   	leave  
300011b7:	c3                   	ret    

300011b8 <free>:
free():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:109

__attribute__((visibility("default"))) void free(void* fpointer)
{
300011b8:	55                   	push   ebp
300011b9:	89 e5                	mov    ebp,esp
300011bb:	e8 1f 19 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300011c0:	05 f8 32 00 00       	add    eax,0x32f8
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:110
    freeI(fpointer);
300011c5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300011c8:	e8 be fd ff ff       	call   30000f8b <freeI>
300011cd:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:111
}
300011d0:	90                   	nop
300011d1:	c9                   	leave  
300011d2:	c3                   	ret    

300011d3 <malloc_cleanup>:
malloc_cleanup():
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:114

void malloc_cleanup()
{
300011d3:	55                   	push   ebp
300011d4:	89 e5                	mov    ebp,esp
300011d6:	53                   	push   ebx
300011d7:	83 ec 04             	sub    esp,0x4
300011da:	e8 00 19 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300011df:	05 d9 32 00 00       	add    eax,0x32d9
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:115
    do_syscall1(SYSCALL_FREE, heapBase);
300011e4:	8b 90 f0 ff ff ff    	mov    edx,DWORD PTR [eax-0x10]
300011ea:	8b 12                	mov    edx,DWORD PTR [edx]
300011ec:	83 ec 08             	sub    esp,0x8
300011ef:	52                   	push   edx
300011f0:	68 64 01 00 00       	push   0x164
300011f5:	89 c3                	mov    ebx,eax
300011f7:	e8 6c f7 ff ff       	call   30000968 <do_syscall1>
300011fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/malloc.c:116
300011ff:	90                   	nop
30001200:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001203:	c9                   	leave  
30001204:	c3                   	ret    
30001205:	66 90                	xchg   ax,ax
30001207:	90                   	nop

30001208 <memcpy>:
memcpy():
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:11
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
VISIBLE void * memcpy(void *dest, const void *src, size_t n)
{
30001208:	55                   	push   ebp
30001209:	89 e5                	mov    ebp,esp
3000120b:	83 ec 20             	sub    esp,0x20
3000120e:	e8 cc 18 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001213:	05 a5 32 00 00       	add    eax,0x32a5
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:14
    bool dw,dd;
    
    dd=n%4==0;
30001218:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000121b:	83 e0 03             	and    eax,0x3
3000121e:	85 c0                	test   eax,eax
30001220:	0f 94 c0             	sete   al
30001223:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:15
    dw=n%2==0;
30001226:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001229:	83 e0 01             	and    eax,0x1
3000122c:	85 c0                	test   eax,eax
3000122e:	0f 94 c0             	sete   al
30001231:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:16
    if (dd)
30001234:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
30001238:	74 7d                	je     300012b7 <memcpy+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:18
    {
        n /=4;
3000123a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000123d:	c1 e8 02             	shr    eax,0x2
30001240:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:19
        const uint32_t *f = src;
30001243:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001246:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:20
        uint32_t *t = dest;
30001249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000124c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:22

        if (f < t) {
3000124f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001252:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
30001255:	73 4b                	jae    300012a2 <memcpy+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:23
                f += n;
30001257:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000125a:	c1 e0 02             	shl    eax,0x2
3000125d:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:24
                t += n;
30001260:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001263:	c1 e0 02             	shl    eax,0x2
30001266:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
                while ( (n)-- > 0)
30001269:	eb 12                	jmp    3000127d <memcpy+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:26
                        *--t = *--f;
3000126b:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
3000126f:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
30001273:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001276:	8b 10                	mov    edx,DWORD PTR [eax]
30001278:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000127b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:25
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
3000127d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001280:	8d 50 ff             	lea    edx,[eax-0x1]
30001283:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001286:	85 c0                	test   eax,eax
30001288:	75 e1                	jne    3000126b <memcpy+0x63>
3000128a:	eb 23                	jmp    300012af <memcpy+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:29
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
3000128c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
3000128f:	8d 50 04             	lea    edx,[eax+0x4]
30001292:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30001295:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001298:	8d 4a 04             	lea    ecx,[edx+0x4]
3000129b:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
3000129e:	8b 12                	mov    edx,DWORD PTR [edx]
300012a0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:28
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
300012a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012a5:	8d 50 ff             	lea    edx,[eax-0x1]
300012a8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
300012ab:	85 c0                	test   eax,eax
300012ad:	75 dd                	jne    3000128c <memcpy+0x84>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:30
                        *t++ = *f++;
        return dest;
300012af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012b2:	e9 ea 00 00 00       	jmp    300013a1 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:32
    }
    else if (dw)
300012b7:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
300012bb:	74 79                	je     30001336 <memcpy+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:34
    {
        n /=2;
300012bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012c0:	d1 e8                	shr    eax,1
300012c2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:35
        const uint32_t *f = src;
300012c5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300012c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:36
        uint32_t *t = dest;
300012cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300012ce:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:38

        if (f < t) {
300012d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300012d4:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
300012d7:	73 4b                	jae    30001324 <memcpy+0x11c>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:39
                f += n;
300012d9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012dc:	c1 e0 02             	shl    eax,0x2
300012df:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:40
                t += n;
300012e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
300012e5:	c1 e0 02             	shl    eax,0x2
300012e8:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
                while ( (n)-- > 0)
300012eb:	eb 12                	jmp    300012ff <memcpy+0xf7>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:42
                        *--t = *--f;
300012ed:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
300012f1:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
300012f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300012f8:	8b 10                	mov    edx,DWORD PTR [eax]
300012fa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300012fd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:41
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
300012ff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001302:	8d 50 ff             	lea    edx,[eax-0x1]
30001305:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001308:	85 c0                	test   eax,eax
3000130a:	75 e1                	jne    300012ed <memcpy+0xe5>
3000130c:	eb 23                	jmp    30001331 <memcpy+0x129>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:45
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
3000130e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001311:	8d 50 04             	lea    edx,[eax+0x4]
30001314:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
30001317:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
3000131a:	8d 4a 04             	lea    ecx,[edx+0x4]
3000131d:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
30001320:	8b 12                	mov    edx,DWORD PTR [edx]
30001322:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:44
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
30001324:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001327:	8d 50 ff             	lea    edx,[eax-0x1]
3000132a:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000132d:	85 c0                	test   eax,eax
3000132f:	75 dd                	jne    3000130e <memcpy+0x106>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:46
                        *t++ = *f++;
        return dest;
30001331:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001334:	eb 6b                	jmp    300013a1 <memcpy+0x199>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:50
    }
    else
    {
        const char *f = src;
30001336:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001339:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:51
        char *t = dest;
3000133c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000133f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:53

        if (f < t) {
30001342:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001345:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
30001348:	73 47                	jae    30001391 <memcpy+0x189>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:54
                f += n;
3000134a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000134d:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:55
                t += n;
30001350:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001353:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
                while (n-- > 0)
30001356:	eb 13                	jmp    3000136b <memcpy+0x163>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:57
                        *--t = *--f;
30001358:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
3000135c:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
30001360:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001363:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001366:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
30001369:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:56
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
3000136b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000136e:	8d 50 ff             	lea    edx,[eax-0x1]
30001371:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001374:	85 c0                	test   eax,eax
30001376:	75 e0                	jne    30001358 <memcpy+0x150>
30001378:	eb 24                	jmp    3000139e <memcpy+0x196>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:60
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
3000137a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
3000137d:	8d 50 01             	lea    edx,[eax+0x1]
30001380:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
30001383:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30001386:	8d 4a 01             	lea    ecx,[edx+0x1]
30001389:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
3000138c:	0f b6 12             	movzx  edx,BYTE PTR [edx]
3000138f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:59
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
30001391:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001394:	8d 50 ff             	lea    edx,[eax-0x1]
30001397:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000139a:	85 c0                	test   eax,eax
3000139c:	75 dc                	jne    3000137a <memcpy+0x172>
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:61
                        *t++ = *f++;
        return dest;
3000139e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memcpy.c:63
    }
}
300013a1:	c9                   	leave  
300013a2:	c3                   	ret    
300013a3:	90                   	nop

300013a4 <memsetI>:
memsetI():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"

void *memsetI(void *d1, int val, size_t len)
{
300013a4:	55                   	push   ebp
300013a5:	89 e5                	mov    ebp,esp
300013a7:	83 ec 20             	sub    esp,0x20
300013aa:	e8 30 17 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300013af:	05 09 31 00 00       	add    eax,0x3109
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:10
    uint8_t *d = d1;
300013b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013b7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:11
    uint16_t*e = d1;
300013ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013bd:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:12
    uint16_t eVal=(val << 16) | (val << 8) | val;
300013c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013c3:	c1 e0 10             	shl    eax,0x10
300013c6:	89 c2                	mov    edx,eax
300013c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013cb:	c1 e0 08             	shl    eax,0x8
300013ce:	09 c2                	or     edx,eax
300013d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013d3:	09 d0                	or     eax,edx
300013d5:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:13
    uint32_t*f = d1;
300013d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300013dc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:14
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
300013df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013e2:	c1 e0 18             	shl    eax,0x18
300013e5:	89 c2                	mov    edx,eax
300013e7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013ea:	c1 e0 10             	shl    eax,0x10
300013ed:	09 c2                	or     edx,eax
300013ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300013f2:	c1 e0 08             	shl    eax,0x8
300013f5:	09 d0                	or     eax,edx
300013f7:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
300013fa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:16
    
    if ((len%4)==0)
300013fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001400:	83 e0 03             	and    eax,0x3
30001403:	85 c0                	test   eax,eax
30001405:	75 1c                	jne    30001423 <memsetI+0x7f>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    while (len-=4) {
30001407:	eb 0e                	jmp    30001417 <memsetI+0x73>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:18
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
30001409:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000140c:	8d 50 04             	lea    edx,[eax+0x4]
3000140f:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001412:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
30001415:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:17
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
30001417:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
3000141b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000141f:	75 e8                	jne    30001409 <memsetI+0x65>
30001421:	eb 43                	jmp    30001466 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:20
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
30001423:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001426:	83 e0 01             	and    eax,0x1
30001429:	85 c0                	test   eax,eax
3000142b:	75 2c                	jne    30001459 <memsetI+0xb5>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    while (len-=2) {
3000142d:	eb 10                	jmp    3000143f <memsetI+0x9b>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:22
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
3000142f:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001432:	8d 50 02             	lea    edx,[eax+0x2]
30001435:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
30001438:	0f b7 55 f2          	movzx  edx,WORD PTR [ebp-0xe]
3000143c:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:21
    if ((len%4)==0)
    while (len-=4) {
        *f++ = fVal;        //CLR 03/11/2017: Changed pointer from d to f
    }
    else if (((len%2)==0))
    while (len-=2) {
3000143f:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
30001443:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001447:	75 e6                	jne    3000142f <memsetI+0x8b>
30001449:	eb 1b                	jmp    30001466 <memsetI+0xc2>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:26
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
        *d++ = val;
3000144b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000144e:	8d 50 01             	lea    edx,[eax+0x1]
30001451:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001454:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001457:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:25
    else if (((len%2)==0))
    while (len-=2) {
        *e++ = eVal;        //CLR 03/11/2017: Changed pointer from d to e
    }
    else
    while (len--) {
30001459:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
3000145c:	8d 50 ff             	lea    edx,[eax-0x1]
3000145f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
30001462:	85 c0                	test   eax,eax
30001464:	75 e5                	jne    3000144b <memsetI+0xa7>
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:28
        *d++ = val;
    }
    return d1;
30001466:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:29
}
30001469:	c9                   	leave  
3000146a:	c3                   	ret    

3000146b <memset>:
memset():
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:32

VISIBLE void *memset(void *d1, int val, size_t len)
{
3000146b:	55                   	push   ebp
3000146c:	89 e5                	mov    ebp,esp
3000146e:	e8 6c 16 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001473:	05 45 30 00 00       	add    eax,0x3045
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:33
    return memsetI(d1, val, len);
30001478:	ff 75 10             	push   DWORD PTR [ebp+0x10]
3000147b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000147e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001481:	e8 1e ff ff ff       	call   300013a4 <memsetI>
30001486:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/memset.c:34
}
30001489:	c9                   	leave  
3000148a:	c3                   	ret    
3000148b:	90                   	nop

3000148c <mmap>:
mmap():
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:10
 */
#include "libChrisOS.h"
#include "types.h"

VISIBLE void* mmap (void *addr,size_t len,int prot,int flags,int fd,off_t offset) //memory map pages either to a file or anonymously
{
3000148c:	55                   	push   ebp
3000148d:	89 e5                	mov    ebp,esp
3000148f:	e8 4b 16 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001494:	05 24 30 00 00       	add    eax,0x3024
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:11
    return NULL;
30001499:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/mmap.c:12
}
3000149e:	5d                   	pop    ebp
3000149f:	c3                   	ret    

300014a0 <pipe>:
pipe():
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:11

#include "libChrisOS.h"
#include "pipe.h"

VISIBLE int pipe(int pipefd[2])
{
300014a0:	55                   	push   ebp
300014a1:	89 e5                	mov    ebp,esp
300014a3:	53                   	push   ebx
300014a4:	83 ec 04             	sub    esp,0x4
300014a7:	e8 33 16 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300014ac:	05 0c 30 00 00       	add    eax,0x300c
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:12
    return do_syscall1(SYSCALL_PIPE, (uintptr_t)pipefd);
300014b1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300014b4:	83 ec 08             	sub    esp,0x8
300014b7:	52                   	push   edx
300014b8:	6a 07                	push   0x7
300014ba:	89 c3                	mov    ebx,eax
300014bc:	e8 a7 f4 ff ff       	call   30000968 <do_syscall1>
300014c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/pipe.c:13
300014c4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300014c7:	c9                   	leave  
300014c8:	c3                   	ret    
300014c9:	66 90                	xchg   ax,ax
300014cb:	90                   	nop

300014cc <resetRow>:
resetRow():
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:68
    return;
}
*/
//Clears the current console row, setting the cursor to column 0
VISIBLE void resetRow()
{
300014cc:	55                   	push   ebp
300014cd:	89 e5                	mov    ebp,esp
300014cf:	53                   	push   ebx
300014d0:	83 ec 14             	sub    esp,0x14
300014d3:	e8 38 16 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
300014d8:	81 c3 e0 2f 00 00    	add    ebx,0x2fe0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:70
    char buff[5];
    int buffPtr=0;
300014de:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:72

    memsetI(buff,0,10);
300014e5:	83 ec 04             	sub    esp,0x4
300014e8:	6a 0a                	push   0xa
300014ea:	6a 00                	push   0x0
300014ec:	8d 45 ef             	lea    eax,[ebp-0x11]
300014ef:	50                   	push   eax
300014f0:	e8 af fe ff ff       	call   300013a4 <memsetI>
300014f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:75
    
    //Send the ansi escape sequence CSI characters
    buff[buffPtr++] = '\033';
300014f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300014fb:	8d 50 01             	lea    edx,[eax+0x1]
300014fe:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001501:	c6 44 05 ef 1b       	mov    BYTE PTR [ebp+eax*1-0x11],0x1b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:76
    buff[buffPtr++] = '[';
30001506:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001509:	8d 50 01             	lea    edx,[eax+0x1]
3000150c:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000150f:	c6 44 05 ef 5b       	mov    BYTE PTR [ebp+eax*1-0x11],0x5b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:77
    buff[buffPtr++] = '0';
30001514:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001517:	8d 50 01             	lea    edx,[eax+0x1]
3000151a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000151d:	c6 44 05 ef 30       	mov    BYTE PTR [ebp+eax*1-0x11],0x30
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:78
    buff[buffPtr++] = 'K';
30001522:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001525:	8d 50 01             	lea    edx,[eax+0x1]
30001528:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
3000152b:	c6 44 05 ef 4b       	mov    BYTE PTR [ebp+eax*1-0x11],0x4b
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:79
    buff[buffPtr] = '\0';
30001530:	8d 55 ef             	lea    edx,[ebp-0x11]
30001533:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001536:	01 d0                	add    eax,edx
30001538:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:80
    printI(buff);
3000153b:	83 ec 0c             	sub    esp,0xc
3000153e:	8d 45 ef             	lea    eax,[ebp-0x11]
30001541:	50                   	push   eax
30001542:	e8 9b f5 ff ff       	call   30000ae2 <printI>
30001547:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:82
    
    return;
3000154a:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/stdio.c:83
}
3000154b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000154e:	c9                   	leave  
3000154f:	c3                   	ret    

30001550 <strcat>:
strcat():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   __attribute__((visibility("default"))) char *
   STRCAT (char *dest, const char *src)
   {
30001550:	55                   	push   ebp
30001551:	89 e5                	mov    ebp,esp
30001553:	53                   	push   ebx
30001554:	83 ec 04             	sub    esp,0x4
30001557:	e8 b4 15 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
3000155c:	81 c3 5c 2f 00 00    	add    ebx,0x2f5c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:31
     strcpyI (dest + strlenI (dest), src);
30001562:	83 ec 0c             	sub    esp,0xc
30001565:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001568:	e8 b4 02 00 00       	call   30001821 <strlenI>
3000156d:	83 c4 10             	add    esp,0x10
30001570:	89 c2                	mov    edx,eax
30001572:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001575:	01 d0                	add    eax,edx
30001577:	83 ec 08             	sub    esp,0x8
3000157a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
3000157d:	50                   	push   eax
3000157e:	e8 59 01 00 00       	call   300016dc <strcpyI>
30001583:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:32
     return dest;
30001586:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:33
   }
30001589:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
3000158c:	c9                   	leave  
3000158d:	c3                   	ret    

3000158e <strcatI>:
strcatI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:36

   char* strcatI (char *dest, const char *src)
   {
3000158e:	55                   	push   ebp
3000158f:	89 e5                	mov    ebp,esp
30001591:	53                   	push   ebx
30001592:	83 ec 04             	sub    esp,0x4
30001595:	e8 76 15 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
3000159a:	81 c3 1e 2f 00 00    	add    ebx,0x2f1e
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:37
     strcpyI (dest + strlenI (dest), src);
300015a0:	83 ec 0c             	sub    esp,0xc
300015a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
300015a6:	e8 76 02 00 00       	call   30001821 <strlenI>
300015ab:	83 c4 10             	add    esp,0x10
300015ae:	89 c2                	mov    edx,eax
300015b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300015b3:	01 d0                	add    eax,edx
300015b5:	83 ec 08             	sub    esp,0x8
300015b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
300015bb:	50                   	push   eax
300015bc:	e8 1b 01 00 00       	call   300016dc <strcpyI>
300015c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:38
     return dest;
300015c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:39
   }
300015c7:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300015ca:	c9                   	leave  
300015cb:	c3                   	ret    

300015cc <concatenate>:
concatenate():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:41
   
   void concatenate(char p[], char q[]) {
300015cc:	55                   	push   ebp
300015cd:	89 e5                	mov    ebp,esp
300015cf:	83 ec 10             	sub    esp,0x10
300015d2:	e8 08 15 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300015d7:	05 e1 2e 00 00       	add    eax,0x2ee1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:44
   int c, d;
 
   c = 0;
300015dc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
 
   while (p[c] != '\0') {
300015e3:	eb 04                	jmp    300015e9 <concatenate+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:47
      c++;  	
300015e5:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:46
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
300015e9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
300015ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300015ef:	01 d0                	add    eax,edx
300015f1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300015f4:	84 c0                	test   al,al
300015f6:	75 ed                	jne    300015e5 <concatenate+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:50
      c++;  	
   }
 
   d = 0;
300015f8:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
 
   while (q[d] != '\0') {
300015ff:	eb 1d                	jmp    3000161e <concatenate+0x52>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:53
      p[c] = q[d];
30001601:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001607:	01 c2                	add    edx,eax
30001609:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
3000160c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000160f:	01 c8                	add    eax,ecx
30001611:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001614:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:54
      d++;
30001616:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:55
      c++;	
3000161a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:52
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
3000161e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30001621:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001624:	01 d0                	add    eax,edx
30001626:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001629:	84 c0                	test   al,al
3000162b:	75 d4                	jne    30001601 <concatenate+0x35>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:58
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
3000162d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
30001630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001633:	01 d0                	add    eax,edx
30001635:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcat.c:59
30001638:	90                   	nop
30001639:	c9                   	leave  
3000163a:	c3                   	ret    
3000163b:	90                   	nop

3000163c <strcmp>:
strcmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
VISIBLE int strcmp (const char *p1, const char *p2)
{
3000163c:	55                   	push   ebp
3000163d:	89 e5                	mov    ebp,esp
3000163f:	56                   	push   esi
30001640:	53                   	push   ebx
30001641:	83 ec 10             	sub    esp,0x10
30001644:	e8 96 14 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001649:	05 6f 2e 00 00       	add    eax,0x2e6f
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
3000164e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
30001651:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
30001654:	89 d8                	mov    eax,ebx
30001656:	8d 58 01             	lea    ebx,[eax+0x1]
30001659:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000165c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
3000165f:	89 f0                	mov    eax,esi
30001661:	8d 70 01             	lea    esi,[eax+0x1]
30001664:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001667:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
3000166a:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
3000166e:	75 0e                	jne    3000167e <strcmp+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:35
	return c1 - c2;
30001670:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
30001674:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
30001678:	29 c2                	sub    edx,eax
3000167a:	89 d0                	mov    eax,edx
3000167c:	eb 15                	jmp    30001693 <strcmp+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
3000167e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
30001682:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
30001685:	74 cd                	je     30001654 <strcmp+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:39

  return c1 - c2;
30001687:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
3000168b:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
3000168f:	29 c2                	sub    edx,eax
30001691:	89 d0                	mov    eax,edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcmp.c:40
}
30001693:	83 c4 10             	add    esp,0x10
30001696:	5b                   	pop    ebx
30001697:	5e                   	pop    esi
30001698:	5d                   	pop    ebp
30001699:	c3                   	ret    
3000169a:	66 90                	xchg   ax,ax

3000169c <strcpy>:
strcpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:5
#include "strings.h"

__attribute__((visibility("default"))) char *
strcpy(char *s1, const char *s2)
{
3000169c:	55                   	push   ebp
3000169d:	89 e5                	mov    ebp,esp
3000169f:	83 ec 10             	sub    esp,0x10
300016a2:	e8 38 14 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300016a7:	05 11 2e 00 00       	add    eax,0x2e11
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:6
    char *s = s1;
300016ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016af:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
300016b2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:7 (discriminator 1)
300016b3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016b6:	8d 50 01             	lea    edx,[eax+0x1]
300016b9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300016bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300016bf:	8d 4a 01             	lea    ecx,[edx+0x1]
300016c2:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
300016c5:	0f b6 12             	movzx  edx,BYTE PTR [edx]
300016c8:	88 10                	mov    BYTE PTR [eax],dl
300016ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300016cd:	84 c0                	test   al,al
300016cf:	75 e2                	jne    300016b3 <strcpy+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:9
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
300016d1:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016d4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:10
    return (s1);
300016d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:11
}
300016da:	c9                   	leave  
300016db:	c3                   	ret    

300016dc <strcpyI>:
strcpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:15

char *
strcpyI(char *s1, const char *s2)
{
300016dc:	55                   	push   ebp
300016dd:	89 e5                	mov    ebp,esp
300016df:	83 ec 10             	sub    esp,0x10
300016e2:	e8 f8 13 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300016e7:	05 d1 2d 00 00       	add    eax,0x2dd1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:16
    char *s = s1;
300016ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300016ef:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17
    while ((*s++ = *s2++) != 0)
300016f2:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:17 (discriminator 1)
300016f3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300016f6:	8d 50 01             	lea    edx,[eax+0x1]
300016f9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
300016fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
300016ff:	8d 4a 01             	lea    ecx,[edx+0x1]
30001702:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001705:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001708:	88 10                	mov    BYTE PTR [eax],dl
3000170a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000170d:	84 c0                	test   al,al
3000170f:	75 e2                	jne    300016f3 <strcpyI+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:19
	;
    *s=0;       //CLR 04/20/2017: Added terminating null character to returned string
30001711:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001714:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:20
    return (s1);
30001717:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:21
}
3000171a:	c9                   	leave  
3000171b:	c3                   	ret    

3000171c <strcpyc>:
strcpyc():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:25

__attribute__((visibility("default"))) char *
strcpyc(char *s1, const char *s2, unsigned count)
{
3000171c:	55                   	push   ebp
3000171d:	89 e5                	mov    ebp,esp
3000171f:	83 ec 10             	sub    esp,0x10
30001722:	e8 b8 13 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001727:	05 91 2d 00 00       	add    eax,0x2d91
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:26
    char *s = s1;
3000172c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000172f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27
    while ((*s++ = *s2++) != 0 && count-->0)
30001732:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 2)
30001733:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001736:	8d 50 01             	lea    edx,[eax+0x1]
30001739:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
3000173c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
3000173f:	8d 4a 01             	lea    ecx,[edx+0x1]
30001742:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
30001745:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001748:	88 10                	mov    BYTE PTR [eax],dl
3000174a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000174d:	84 c0                	test   al,al
3000174f:	74 0d                	je     3000175e <strcpyc+0x42>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:27 (discriminator 1)
30001751:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001754:	8d 50 ff             	lea    edx,[eax-0x1]
30001757:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
3000175a:	85 c0                	test   eax,eax
3000175c:	75 d5                	jne    30001733 <strcpyc+0x17>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:29
	;
    return (s1);
3000175e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strcpy.c:30
}
30001761:	c9                   	leave  
30001762:	c3                   	ret    
30001763:	90                   	nop

30001764 <check_digit>:
check_digit():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:9
 * and open the template in the editor.
 */
#include "libChrisOS.h"
#include <stdbool.h>

bool check_digit (char c) {
30001764:	55                   	push   ebp
30001765:	89 e5                	mov    ebp,esp
30001767:	83 ec 04             	sub    esp,0x4
3000176a:	e8 70 13 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
3000176f:	05 49 2d 00 00       	add    eax,0x2d49
30001774:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001777:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10
    if ((c>='0') && (c<='9')) return 1;
3000177a:	80 7d fc 2f          	cmp    BYTE PTR [ebp-0x4],0x2f
3000177e:	7e 0d                	jle    3000178d <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 1)
30001780:	80 7d fc 39          	cmp    BYTE PTR [ebp-0x4],0x39
30001784:	7f 07                	jg     3000178d <check_digit+0x29>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:10 (discriminator 2)
30001786:	b8 01 00 00 00       	mov    eax,0x1
3000178b:	eb 05                	jmp    30001792 <check_digit+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:11
    return 0;
3000178d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:12
}
30001792:	c9                   	leave  
30001793:	c3                   	ret    

30001794 <strisnum>:
strisnum():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:15

VISIBLE bool strisnum(char* str)
{
30001794:	55                   	push   ebp
30001795:	89 e5                	mov    ebp,esp
30001797:	83 ec 10             	sub    esp,0x10
3000179a:	e8 40 13 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
3000179f:	05 19 2d 00 00       	add    eax,0x2d19
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:16
    int cnt=0;
300017a4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18
    
    while (*str+cnt)
300017ab:	eb 27                	jmp    300017d4 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:19
        if (!check_digit(*str+cnt))
300017ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017b0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017b3:	89 c2                	mov    edx,eax
300017b5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017b8:	01 d0                	add    eax,edx
300017ba:	0f be c0             	movsx  eax,al
300017bd:	50                   	push   eax
300017be:	e8 a1 ff ff ff       	call   30001764 <check_digit>
300017c3:	83 c4 04             	add    esp,0x4
300017c6:	83 f0 01             	xor    eax,0x1
300017c9:	84 c0                	test   al,al
300017cb:	74 07                	je     300017d4 <strisnum+0x40>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:20
            return false;
300017cd:	b8 00 00 00 00       	mov    eax,0x0
300017d2:	eb 17                	jmp    300017eb <strisnum+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:18

VISIBLE bool strisnum(char* str)
{
    int cnt=0;
    
    while (*str+cnt)
300017d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300017d7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300017da:	0f be d0             	movsx  edx,al
300017dd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
300017e0:	01 d0                	add    eax,edx
300017e2:	85 c0                	test   eax,eax
300017e4:	75 c7                	jne    300017ad <strisnum+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:21
        if (!check_digit(*str+cnt))
            return false;
    return true;
300017e6:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strisnum.c:23
    
300017eb:	c9                   	leave  
300017ec:	c3                   	ret    
300017ed:	66 90                	xchg   ax,ax
300017ef:	90                   	nop

300017f0 <strlen>:
strlen():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:3
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
300017f0:	55                   	push   ebp
300017f1:	89 e5                	mov    ebp,esp
300017f3:	83 ec 10             	sub    esp,0x10
300017f6:	e8 e4 12 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300017fb:	05 bd 2c 00 00       	add    eax,0x2cbd
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:4
          size_t ret = 0;
30001800:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
30001807:	eb 04                	jmp    3000180d <strlen+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:6
                ret++;
30001809:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:5
#include <stddef.h>

__attribute__((visibility("default"))) size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
3000180d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001810:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001813:	01 d0                	add    eax,edx
30001815:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001818:	84 c0                	test   al,al
3000181a:	75 ed                	jne    30001809 <strlen+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
3000181c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:8
}
3000181f:	c9                   	leave  
30001820:	c3                   	ret    

30001821 <strlenI>:
strlenI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:10

size_t strlenI(const char* str) {
30001821:	55                   	push   ebp
30001822:	89 e5                	mov    ebp,esp
30001824:	83 ec 10             	sub    esp,0x10
30001827:	e8 b3 12 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
3000182c:	05 8c 2c 00 00       	add    eax,0x2c8c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:11
          size_t ret = 0;
30001831:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        while ( str[ret] != 0 )
30001838:	eb 04                	jmp    3000183e <strlenI+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:13
                ret++;
3000183a:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:12
        return ret;
}

size_t strlenI(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
3000183e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001841:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
30001844:	01 d0                	add    eax,edx
30001846:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001849:	84 c0                	test   al,al
3000184b:	75 ed                	jne    3000183a <strlenI+0x19>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:14
                ret++;
        return ret;
3000184d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strlen.c:15
}
30001850:	c9                   	leave  
30001851:	c3                   	ret    
30001852:	66 90                	xchg   ax,ax

30001854 <strncmp>:
strncmp():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
30001854:	55                   	push   ebp
30001855:	89 e5                	mov    ebp,esp
30001857:	e8 83 12 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
3000185c:	05 5c 2c 00 00       	add    eax,0x2c5c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
30001861:	eb 4b                	jmp    300018ae <strncmp+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
30001863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001866:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001869:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000186c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000186f:	38 c2                	cmp    dl,al
30001871:	74 1e                	je     30001891 <strncmp+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
30001873:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001876:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001879:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000187c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
3000187f:	38 c2                	cmp    dl,al
30001881:	73 07                	jae    3000188a <strncmp+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 1)
30001883:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001888:	eb 2f                	jmp    300018b9 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:16 (discriminator 2)
3000188a:	b8 01 00 00 00       	mov    eax,0x1
3000188f:	eb 28                	jmp    300018b9 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
30001891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001894:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001897:	84 c0                	test   al,al
30001899:	75 07                	jne    300018a2 <strncmp+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:18
	    return 0;
3000189b:	b8 00 00 00 00       	mov    eax,0x0
300018a0:	eb 17                	jmp    300018b9 <strncmp+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

__attribute__((visibility("default"))) int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
300018a2:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
300018a6:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
300018aa:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:14 (discriminator 1)
300018ae:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300018b2:	75 af                	jne    30001863 <strncmp+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
300018b4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:20
}
300018b9:	5d                   	pop    ebp
300018ba:	c3                   	ret    

300018bb <strncmpI>:
strncmpI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:23

int strncmpI(const char *s1, const char *s2, size_t n)
{
300018bb:	55                   	push   ebp
300018bc:	89 e5                	mov    ebp,esp
300018be:	e8 1c 12 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300018c3:	05 f5 2b 00 00       	add    eax,0x2bf5
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    for ( ; n > 0; s1++, s2++, --n)
300018c8:	eb 4b                	jmp    30001915 <strncmpI+0x5a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:25
	if (*s1 != *s2)
300018ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018cd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300018d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300018d3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018d6:	38 c2                	cmp    dl,al
300018d8:	74 1e                	je     300018f8 <strncmpI+0x3d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
300018da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018dd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
300018e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300018e3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018e6:	38 c2                	cmp    dl,al
300018e8:	73 07                	jae    300018f1 <strncmpI+0x36>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 1)
300018ea:	b8 ff ff ff ff       	mov    eax,0xffffffff
300018ef:	eb 2f                	jmp    30001920 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:26 (discriminator 2)
300018f1:	b8 01 00 00 00       	mov    eax,0x1
300018f6:	eb 28                	jmp    30001920 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:27
	else if (*s1 == '\0')
300018f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300018fb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300018fe:	84 c0                	test   al,al
30001900:	75 07                	jne    30001909 <strncmpI+0x4e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:28
	    return 0;
30001902:	b8 00 00 00 00       	mov    eax,0x0
30001907:	eb 17                	jmp    30001920 <strncmpI+0x65>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24
    return 0;
}

int strncmpI(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
30001909:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
3000190d:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
30001911:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:24 (discriminator 1)
30001915:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001919:	75 af                	jne    300018ca <strncmpI+0xf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:29
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
3000191b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncmp.c:30
}
30001920:	5d                   	pop    ebp
30001921:	c3                   	ret    
30001922:	66 90                	xchg   ax,ax

30001924 <strncpyI>:
strncpyI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
30001924:	55                   	push   ebp
30001925:	89 e5                	mov    ebp,esp
30001927:	83 ec 10             	sub    esp,0x10
3000192a:	e8 b0 11 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
3000192f:	05 89 2b 00 00       	add    eax,0x2b89
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:15
    char *s = s1;
30001934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001937:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
3000193a:	eb 1b                	jmp    30001957 <strncpyI+0x33>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
3000193c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000193f:	8d 50 01             	lea    edx,[eax+0x1]
30001942:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001945:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001948:	8d 4a 01             	lea    ecx,[edx+0x1]
3000194b:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
3000194e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001951:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:18
	--n;
30001953:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char *strncpyI(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
30001957:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000195b:	74 1c                	je     30001979 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:16 (discriminator 1)
3000195d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001960:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001963:	84 c0                	test   al,al
30001965:	75 d5                	jne    3000193c <strncpyI+0x18>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001967:	eb 10                	jmp    30001979 <strncpyI+0x55>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
30001969:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
3000196c:	8d 50 01             	lea    edx,[eax+0x1]
3000196f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
30001972:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:22
	--n;
30001975:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
30001979:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
3000197d:	75 ea                	jne    30001969 <strncpyI+0x45>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
3000197f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:25
}
30001982:	c9                   	leave  
30001983:	c3                   	ret    

30001984 <strncpy>:
strncpy():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:28

__attribute__((visibility("default"))) char * strncpy(char *s1, const char *s2, size_t n)
{
30001984:	55                   	push   ebp
30001985:	89 e5                	mov    ebp,esp
30001987:	e8 53 11 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
3000198c:	05 2c 2b 00 00       	add    eax,0x2b2c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:29
    return strncpyI(s1, s2, n);
30001991:	ff 75 10             	push   DWORD PTR [ebp+0x10]
30001994:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001997:	ff 75 08             	push   DWORD PTR [ebp+0x8]
3000199a:	e8 85 ff ff ff       	call   30001924 <strncpyI>
3000199f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strncpy.c:30
}
300019a2:	c9                   	leave  
300019a3:	c3                   	ret    

300019a4 <strtoul>:
strtoul():
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
__attribute__((visibility("default"))) strtoul(const char *nptr, char **endptr, register int base)
{
300019a4:	55                   	push   ebp
300019a5:	89 e5                	mov    ebp,esp
300019a7:	57                   	push   edi
300019a8:	56                   	push   esi
300019a9:	53                   	push   ebx
300019aa:	83 ec 08             	sub    esp,0x8
300019ad:	e8 2d 11 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300019b2:	05 06 2b 00 00       	add    eax,0x2b06
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
300019b7:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
300019ba:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
300019c1:	89 f0                	mov    eax,esi
300019c3:	8d 70 01             	lea    esi,[eax+0x1]
300019c6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019c9:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
300019cc:	83 fb 20             	cmp    ebx,0x20
300019cf:	74 f0                	je     300019c1 <strtoul+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:73
	if (c == '-') {
300019d1:	83 fb 2d             	cmp    ebx,0x2d
300019d4:	75 14                	jne    300019ea <strtoul+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:74
		neg = 1;
300019d6:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:75
		c = *s++;
300019dd:	89 f0                	mov    eax,esi
300019df:	8d 70 01             	lea    esi,[eax+0x1]
300019e2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019e5:	0f be d8             	movsx  ebx,al
300019e8:	eb 10                	jmp    300019fa <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:76
	} else if (c == '+')
300019ea:	83 fb 2b             	cmp    ebx,0x2b
300019ed:	75 0b                	jne    300019fa <strtoul+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:77
		c = *s++;
300019ef:	89 f0                	mov    eax,esi
300019f1:	8d 70 01             	lea    esi,[eax+0x1]
300019f4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
300019f7:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
300019fa:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
300019fe:	74 06                	je     30001a06 <strtoul+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 2)
30001a00:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001a04:	75 26                	jne    30001a2c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:78 (discriminator 3)
30001a06:	83 fb 30             	cmp    ebx,0x30
30001a09:	75 21                	jne    30001a2c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001a0b:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001a0e:	3c 78                	cmp    al,0x78
30001a10:	74 07                	je     30001a19 <strtoul+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:79 (discriminator 1)
30001a12:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001a15:	3c 58                	cmp    al,0x58
30001a17:	75 13                	jne    30001a2c <strtoul+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:80
		c = s[1];
30001a19:	8d 46 01             	lea    eax,[esi+0x1]
30001a1c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001a1f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:81
		s += 2;
30001a22:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:82
		base = 16;
30001a25:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
30001a2c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001a30:	75 14                	jne    30001a46 <strtoul+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
30001a32:	83 fb 30             	cmp    ebx,0x30
30001a35:	75 07                	jne    30001a3e <strtoul+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 1)
30001a37:	b8 08 00 00 00       	mov    eax,0x8
30001a3c:	eb 05                	jmp    30001a43 <strtoul+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 2)
30001a3e:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:85 (discriminator 4)
30001a43:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
30001a46:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001a49:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001a4e:	ba 00 00 00 00       	mov    edx,0x0
30001a53:	f7 f1                	div    ecx
30001a55:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
30001a58:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001a5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
30001a60:	ba 00 00 00 00       	mov    edx,0x0
30001a65:	f7 f1                	div    ecx
30001a67:	89 d0                	mov    eax,edx
30001a69:	89 c2                	mov    edx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
30001a6b:	bf 00 00 00 00       	mov    edi,0x0
30001a70:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
30001a75:	8d 43 d0             	lea    eax,[ebx-0x30]
30001a78:	83 f8 09             	cmp    eax,0x9
30001a7b:	77 05                	ja     30001a82 <strtoul+0xde>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:90
			c -= '0';
30001a7d:	83 eb 30             	sub    ebx,0x30
30001a80:	eb 25                	jmp    30001aa7 <strtoul+0x103>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
30001a82:	89 d8                	mov    eax,ebx
30001a84:	83 c8 20             	or     eax,0x20
30001a87:	83 e8 61             	sub    eax,0x61
30001a8a:	83 f8 19             	cmp    eax,0x19
30001a8d:	77 56                	ja     30001ae5 <strtoul+0x141>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001a8f:	83 fb 40             	cmp    ebx,0x40
30001a92:	7e 0c                	jle    30001aa0 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 1)
30001a94:	83 fb 5a             	cmp    ebx,0x5a
30001a97:	7f 07                	jg     30001aa0 <strtoul+0xfc>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 3)
30001a99:	b8 37 00 00 00       	mov    eax,0x37
30001a9e:	eb 05                	jmp    30001aa5 <strtoul+0x101>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 4)
30001aa0:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:92 (discriminator 6)
30001aa5:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
30001aa7:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001aaa:	7d 3c                	jge    30001ae8 <strtoul+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001aac:	89 c8                	mov    eax,ecx
30001aae:	85 c0                	test   eax,eax
30001ab0:	78 10                	js     30001ac2 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 1)
30001ab2:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001ab5:	77 0b                	ja     30001ac2 <strtoul+0x11e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 2)
30001ab7:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001aba:	75 0d                	jne    30001ac9 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:97 (discriminator 3)
30001abc:	89 d0                	mov    eax,edx
30001abe:	39 c3                	cmp    ebx,eax
30001ac0:	7e 07                	jle    30001ac9 <strtoul+0x125>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:98
			any = -1;
30001ac2:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001ac7:	eb 0f                	jmp    30001ad8 <strtoul+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:100
		else {
			any = 1;
30001ac9:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:101
			acc *= base;
30001ace:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001ad1:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:102
			acc += c;
30001ad4:	89 d8                	mov    eax,ebx
30001ad6:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001ad8:	89 f0                	mov    eax,esi
30001ada:	8d 70 01             	lea    esi,[eax+0x1]
30001add:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001ae0:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001ae3:	eb 90                	jmp    30001a75 <strtoul+0xd1>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001ae5:	90                   	nop
30001ae6:	eb 01                	jmp    30001ae9 <strtoul+0x145>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
30001ae8:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001ae9:	89 c8                	mov    eax,ecx
30001aeb:	85 c0                	test   eax,eax
30001aed:	79 07                	jns    30001af6 <strtoul+0x152>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
30001aef:	bf ff ff ff ff       	mov    edi,0xffffffff
30001af4:	eb 08                	jmp    30001afe <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:107
	} else if (neg)
30001af6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001afa:	74 02                	je     30001afe <strtoul+0x15a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:108
		acc = -acc;
30001afc:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:109
	if (endptr != 0)
30001afe:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001b02:	74 13                	je     30001b17 <strtoul+0x173>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
30001b04:	89 c8                	mov    eax,ecx
30001b06:	85 c0                	test   eax,eax
30001b08:	74 05                	je     30001b0f <strtoul+0x16b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 1)
30001b0a:	8d 46 ff             	lea    eax,[esi-0x1]
30001b0d:	eb 03                	jmp    30001b12 <strtoul+0x16e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 2)
30001b0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:110 (discriminator 4)
30001b12:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001b15:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:111
	return (acc);
30001b17:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/stroul.c:112
}
30001b19:	83 c4 08             	add    esp,0x8
30001b1c:	5b                   	pop    ebx
30001b1d:	5e                   	pop    esi
30001b1e:	5f                   	pop    edi
30001b1f:	5d                   	pop    ebp
30001b20:	c3                   	ret    
30001b21:	66 90                	xchg   ax,ax
30001b23:	90                   	nop

30001b24 <strleft>:
strleft():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:2
__attribute__((visibility("default"))) char* strleft(char* val, int cnt)
{
30001b24:	55                   	push   ebp
30001b25:	89 e5                	mov    ebp,esp
30001b27:	e8 b3 0f 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001b2c:	05 8c 29 00 00       	add    eax,0x298c
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
30001b31:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001b34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001b37:	01 d0                	add    eax,edx
30001b39:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:4
    return val;
30001b3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strparts.c:5
}
30001b3f:	5d                   	pop    ebp
30001b40:	c3                   	ret    
30001b41:	66 90                	xchg   ax,ax
30001b43:	90                   	nop

30001b44 <strtol>:
strtol():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
__attribute__((visibility("default"))) long
strtol(const char *nptr, char **endptr, register int base)
{
30001b44:	55                   	push   ebp
30001b45:	89 e5                	mov    ebp,esp
30001b47:	57                   	push   edi
30001b48:	56                   	push   esi
30001b49:	53                   	push   ebx
30001b4a:	83 ec 0c             	sub    esp,0xc
30001b4d:	e8 8d 0f 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001b52:	05 66 29 00 00       	add    eax,0x2966
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
30001b57:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
30001b5a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
30001b61:	89 f0                	mov    eax,esi
30001b63:	8d 70 01             	lea    esi,[eax+0x1]
30001b66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b69:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
30001b6c:	83 fb 20             	cmp    ebx,0x20
30001b6f:	74 f0                	je     30001b61 <strtol+0x1d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:103
	if (c == '-') {
30001b71:	83 fb 2d             	cmp    ebx,0x2d
30001b74:	75 14                	jne    30001b8a <strtol+0x46>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:104
		neg = 1;
30001b76:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:105
		c = *s++;
30001b7d:	89 f0                	mov    eax,esi
30001b7f:	8d 70 01             	lea    esi,[eax+0x1]
30001b82:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b85:	0f be d8             	movsx  ebx,al
30001b88:	eb 10                	jmp    30001b9a <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:106
	} else if (c == '+')
30001b8a:	83 fb 2b             	cmp    ebx,0x2b
30001b8d:	75 0b                	jne    30001b9a <strtol+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:107
		c = *s++;
30001b8f:	89 f0                	mov    eax,esi
30001b91:	8d 70 01             	lea    esi,[eax+0x1]
30001b94:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001b97:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
30001b9a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001b9e:	74 06                	je     30001ba6 <strtol+0x62>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 2)
30001ba0:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
30001ba4:	75 26                	jne    30001bcc <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:108 (discriminator 3)
30001ba6:	83 fb 30             	cmp    ebx,0x30
30001ba9:	75 21                	jne    30001bcc <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
30001bab:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001bae:	3c 78                	cmp    al,0x78
30001bb0:	74 07                	je     30001bb9 <strtol+0x75>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:109 (discriminator 1)
30001bb2:	0f b6 06             	movzx  eax,BYTE PTR [esi]
30001bb5:	3c 58                	cmp    al,0x58
30001bb7:	75 13                	jne    30001bcc <strtol+0x88>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:110
		c = s[1];
30001bb9:	8d 46 01             	lea    eax,[esi+0x1]
30001bbc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001bbf:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:111
		s += 2;
30001bc2:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:112
		base = 16;
30001bc5:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
30001bcc:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
30001bd0:	75 14                	jne    30001be6 <strtol+0xa2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
30001bd2:	83 fb 30             	cmp    ebx,0x30
30001bd5:	75 07                	jne    30001bde <strtol+0x9a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 1)
30001bd7:	b8 08 00 00 00       	mov    eax,0x8
30001bdc:	eb 05                	jmp    30001be3 <strtol+0x9f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 2)
30001bde:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:115 (discriminator 4)
30001be3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
30001be6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001bea:	74 07                	je     30001bf3 <strtol+0xaf>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 1)
30001bec:	b8 00 00 00 80       	mov    eax,0x80000000
30001bf1:	eb 05                	jmp    30001bf8 <strtol+0xb4>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:134 (discriminator 2)
30001bf3:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
30001bf8:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
30001bfb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001bfe:	ba 00 00 00 00       	mov    edx,0x0
30001c03:	f7 f1                	div    ecx
30001c05:	89 d1                	mov    ecx,edx
30001c07:	89 c8                	mov    eax,ecx
30001c09:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
30001c0c:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
30001c0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001c12:	ba 00 00 00 00       	mov    edx,0x0
30001c17:	f7 f7                	div    edi
30001c19:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
30001c1c:	bf 00 00 00 00       	mov    edi,0x0
30001c21:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
30001c26:	8d 43 d0             	lea    eax,[ebx-0x30]
30001c29:	83 f8 09             	cmp    eax,0x9
30001c2c:	77 05                	ja     30001c33 <strtol+0xef>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:139
			c -= '0';
30001c2e:	83 eb 30             	sub    ebx,0x30
30001c31:	eb 25                	jmp    30001c58 <strtol+0x114>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
30001c33:	89 d8                	mov    eax,ebx
30001c35:	83 c8 20             	or     eax,0x20
30001c38:	83 e8 61             	sub    eax,0x61
30001c3b:	83 f8 19             	cmp    eax,0x19
30001c3e:	77 55                	ja     30001c95 <strtol+0x151>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
30001c40:	83 fb 40             	cmp    ebx,0x40
30001c43:	7e 0c                	jle    30001c51 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 1)
30001c45:	83 fb 5a             	cmp    ebx,0x5a
30001c48:	7f 07                	jg     30001c51 <strtol+0x10d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 3)
30001c4a:	b8 37 00 00 00       	mov    eax,0x37
30001c4f:	eb 05                	jmp    30001c56 <strtol+0x112>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 4)
30001c51:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:141 (discriminator 6)
30001c56:	29 c3                	sub    ebx,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
30001c58:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
30001c5b:	7d 3b                	jge    30001c98 <strtol+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
30001c5d:	89 c8                	mov    eax,ecx
30001c5f:	85 c0                	test   eax,eax
30001c61:	78 0f                	js     30001c72 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 1)
30001c63:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001c66:	77 0a                	ja     30001c72 <strtol+0x12e>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 2)
30001c68:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
30001c6b:	75 0c                	jne    30001c79 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:146 (discriminator 3)
30001c6d:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
30001c70:	7e 07                	jle    30001c79 <strtol+0x135>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:147
			any = -1;
30001c72:	b9 ff ff ff ff       	mov    ecx,0xffffffff
30001c77:	eb 0f                	jmp    30001c88 <strtol+0x144>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:149
		else {
			any = 1;
30001c79:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:150
			acc *= base;
30001c7e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
30001c81:	0f af f8             	imul   edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:151
			acc += c;
30001c84:	89 d8                	mov    eax,ebx
30001c86:	01 c7                	add    edi,eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
30001c88:	89 f0                	mov    eax,esi
30001c8a:	8d 70 01             	lea    esi,[eax+0x1]
30001c8d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001c90:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
30001c93:	eb 91                	jmp    30001c26 <strtol+0xe2>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
30001c95:	90                   	nop
30001c96:	eb 01                	jmp    30001c99 <strtol+0x155>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
30001c98:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
30001c99:	89 c8                	mov    eax,ecx
30001c9b:	85 c0                	test   eax,eax
30001c9d:	79 16                	jns    30001cb5 <strtol+0x171>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
30001c9f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001ca3:	74 07                	je     30001cac <strtol+0x168>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 1)
30001ca5:	b8 00 00 00 80       	mov    eax,0x80000000
30001caa:	eb 05                	jmp    30001cb1 <strtol+0x16d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 2)
30001cac:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:155 (discriminator 4)
30001cb1:	89 c7                	mov    edi,eax
30001cb3:	eb 08                	jmp    30001cbd <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:156
	} else if (neg)
30001cb5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
30001cb9:	74 02                	je     30001cbd <strtol+0x179>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:157
		acc = -acc;
30001cbb:	f7 df                	neg    edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:158
	if (endptr != 0)
30001cbd:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
30001cc1:	74 13                	je     30001cd6 <strtol+0x192>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
30001cc3:	89 c8                	mov    eax,ecx
30001cc5:	85 c0                	test   eax,eax
30001cc7:	74 05                	je     30001cce <strtol+0x18a>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 1)
30001cc9:	8d 46 ff             	lea    eax,[esi-0x1]
30001ccc:	eb 03                	jmp    30001cd1 <strtol+0x18d>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 2)
30001cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:159 (discriminator 4)
30001cd1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
30001cd4:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:160
	return (acc);
30001cd6:	89 f8                	mov    eax,edi
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtol.c:161
}
30001cd8:	83 c4 0c             	add    esp,0xc
30001cdb:	5b                   	pop    ebx
30001cdc:	5e                   	pop    esi
30001cdd:	5f                   	pop    edi
30001cde:	5d                   	pop    ebp
30001cdf:	c3                   	ret    

30001ce0 <strtrimI>:
strtrimI():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:4
#include "strings.h"

void strtrimI(char *input)
{
30001ce0:	55                   	push   ebp
30001ce1:	89 e5                	mov    ebp,esp
30001ce3:	53                   	push   ebx
30001ce4:	83 ec 14             	sub    esp,0x14
30001ce7:	e8 f3 0d 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001cec:	05 cc 27 00 00       	add    eax,0x27cc
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:5
   char *dst = input, *src = input;
30001cf1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001cf4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001cf7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
30001cfa:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001cfd:	eb 04                	jmp    30001d03 <strtrimI+0x23>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:12
   {
      ++src;
30001cff:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:10
   char *dst = input, *src = input;
   char *end;

   // Skip whitespace at front...
   //
   while (*src==' ')
30001d03:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001d06:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001d09:	80 fa 20             	cmp    dl,0x20
30001d0c:	74 f1                	je     30001cff <strtrimI+0x1f>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:17
      ++src;
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
30001d0e:	83 ec 0c             	sub    esp,0xc
30001d11:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
30001d14:	89 c3                	mov    ebx,eax
30001d16:	e8 06 fb ff ff       	call   30001821 <strlenI>
30001d1b:	83 c4 10             	add    esp,0x10
30001d1e:	8d 50 ff             	lea    edx,[eax-0x1]
30001d21:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001d24:	01 d0                	add    eax,edx
30001d26:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   while (end > src && *end==' ')
30001d29:	eb 0c                	jmp    30001d37 <strtrimI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:20
   {
      *end-- = 0;
30001d2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001d2e:	8d 50 ff             	lea    edx,[eax-0x1]
30001d31:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
30001d34:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18
   }

   // Trim at end...
   //
   end = src + strlenI(src) - 1;
   while (end > src && *end==' ')
30001d37:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001d3a:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
30001d3d:	76 0a                	jbe    30001d49 <strtrimI+0x69>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:18 (discriminator 1)
30001d3f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001d42:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d45:	3c 20                	cmp    al,0x20
30001d47:	74 e2                	je     30001d2b <strtrimI+0x4b>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:25
      *end-- = 0;
   }

   // Move if needed.
   //
   if (src != dst)
30001d49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001d4c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
30001d4f:	74 1f                	je     30001d70 <strtrimI+0x90>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27
   {
      while ((*dst++ = *src++));
30001d51:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:27 (discriminator 1)
30001d52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001d55:	8d 50 01             	lea    edx,[eax+0x1]
30001d58:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
30001d5b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30001d5e:	8d 4a 01             	lea    ecx,[edx+0x1]
30001d61:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
30001d64:	0f b6 12             	movzx  edx,BYTE PTR [edx]
30001d67:	88 10                	mov    BYTE PTR [eax],dl
30001d69:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001d6c:	84 c0                	test   al,al
30001d6e:	75 e2                	jne    30001d52 <strtrimI+0x72>
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:29
   }
}
30001d70:	90                   	nop
30001d71:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
30001d74:	c9                   	leave  
30001d75:	c3                   	ret    

30001d76 <strtrim>:
strtrim():
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:32

__attribute__((visibility("default"))) void strtrim(char *input)
{
30001d76:	55                   	push   ebp
30001d77:	89 e5                	mov    ebp,esp
30001d79:	83 ec 08             	sub    esp,0x8
30001d7c:	e8 5e 0d 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001d81:	05 37 27 00 00       	add    eax,0x2737
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:33
    return strtrimI(input);
30001d86:	83 ec 0c             	sub    esp,0xc
30001d89:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001d8c:	e8 4f ff ff ff       	call   30001ce0 <strtrimI>
30001d91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/strings/strtrim.c:34
}
30001d94:	c9                   	leave  
30001d95:	c3                   	ret    
30001d96:	66 90                	xchg   ax,ax

30001d98 <strstrI>:
strstrI():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:52
 */

#include "strings.h"

char* strstrI(char* string, char* substring)
{
30001d98:	55                   	push   ebp
30001d99:	89 e5                	mov    ebp,esp
30001d9b:	56                   	push   esi
30001d9c:	53                   	push   ebx
30001d9d:	e8 3d 0d 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001da2:	05 16 27 00 00       	add    eax,0x2716
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:60
    /* First scan quickly through the two strings looking for a
     * single-character match.  When it's found, then compare the
     * rest of the substring.
     */

    b = substring;
30001da7:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:61
    if (*b == 0) {
30001daa:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001dad:	84 c0                	test   al,al
30001daf:	75 42                	jne    30001df3 <strstrI+0x5b>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:62
	return string;
30001db1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001db4:	eb 4c                	jmp    30001e02 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:65
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
30001db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001db9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001dbc:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001dbf:	38 c2                	cmp    dl,al
30001dc1:	75 2b                	jne    30001dee <strstrI+0x56>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:68
	    continue;
	}
	a = string;
30001dc3:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:70
	while (1) {
	    if (*b == 0) {
30001dc6:	0f b6 03             	movzx  eax,BYTE PTR [ebx]
30001dc9:	84 c0                	test   al,al
30001dcb:	75 05                	jne    30001dd2 <strstrI+0x3a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:71
		return string;
30001dcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001dd0:	eb 30                	jmp    30001e02 <strstrI+0x6a>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:73
	    }
	    if (*a++ != *b++) {
30001dd2:	89 f0                	mov    eax,esi
30001dd4:	8d 70 01             	lea    esi,[eax+0x1]
30001dd7:	0f b6 10             	movzx  edx,BYTE PTR [eax]
30001dda:	89 d8                	mov    eax,ebx
30001ddc:	8d 58 01             	lea    ebx,[eax+0x1]
30001ddf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001de2:	38 c2                	cmp    dl,al
30001de4:	75 02                	jne    30001de8 <strstrI+0x50>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:76
		break;
	    }
	}
30001de6:	eb de                	jmp    30001dc6 <strstrI+0x2e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:74
	while (1) {
	    if (*b == 0) {
		return string;
	    }
	    if (*a++ != *b++) {
		break;
30001de8:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:77
	    }
	}
	b = substring;
30001de9:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
30001dec:	eb 01                	jmp    30001def <strstrI+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:66
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
	if (*string != *b) {
	    continue;
30001dee:	90                   	nop
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64

    b = substring;
    if (*b == 0) {
	return string;
    }
    for ( ; *string != 0; string += 1) {
30001def:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:64 (discriminator 1)
30001df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001df6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
30001df9:	84 c0                	test   al,al
30001dfb:	75 b9                	jne    30001db6 <strstrI+0x1e>
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:79
		break;
	    }
	}
	b = substring;
    }
    return (char *) 0;
30001dfd:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:80
}
30001e02:	5b                   	pop    ebx
30001e03:	5e                   	pop    esi
30001e04:	5d                   	pop    ebp
30001e05:	c3                   	ret    

30001e06 <strstr>:
strstr():
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:83

VISIBLE char* strstr(char* string, char* substring)
{
30001e06:	55                   	push   ebp
30001e07:	89 e5                	mov    ebp,esp
30001e09:	e8 d1 0c 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001e0e:	05 aa 26 00 00       	add    eax,0x26aa
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:84
    return strstrI(string, substring);
30001e13:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30001e16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30001e19:	e8 7a ff ff ff       	call   30001d98 <strstrI>
30001e1e:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/strstr.c:85
30001e21:	c9                   	leave  
30001e22:	c3                   	ret    
30001e23:	90                   	nop

30001e24 <getticks>:
getticks():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:23
  {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31},
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

VISIBLE time_t getticks(/*time_t* arg*/)
{
30001e24:	55                   	push   ebp
30001e25:	89 e5                	mov    ebp,esp
30001e27:	56                   	push   esi
30001e28:	53                   	push   ebx
30001e29:	83 ec 10             	sub    esp,0x10
30001e2c:	e8 ae 0c 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30001e31:	05 87 26 00 00       	add    eax,0x2687
/home/yogi/src/os/aproj/libChrisOS/src/time.c:24
    uint32_t retVal=0;
30001e36:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:25
    GET_TICKS(retVal);
30001e3d:	b8 70 01 00 00       	mov    eax,0x170
30001e42:	bb 00 00 00 00       	mov    ebx,0x0
30001e47:	b9 00 00 00 00       	mov    ecx,0x0
30001e4c:	ba 00 00 00 00       	mov    edx,0x0
30001e51:	be 00 00 00 00       	mov    esi,0x0
30001e56:	e8 fc ff ff ff       	call   30001e57 <getticks+0x33>
30001e5b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:26
    return (time_t)retVal;
30001e5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:27
}
30001e61:	83 c4 10             	add    esp,0x10
30001e64:	5b                   	pop    ebx
30001e65:	5e                   	pop    esi
30001e66:	5d                   	pop    ebp
30001e67:	c3                   	ret    

30001e68 <gmtime_rI>:
gmtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:31


struct tm *gmtime_rI(const time_t *timer, struct tm *tmbuf) 
{
30001e68:	55                   	push   ebp
30001e69:	89 e5                	mov    ebp,esp
30001e6b:	53                   	push   ebx
30001e6c:	83 ec 10             	sub    esp,0x10
30001e6f:	e8 9c 0c 00 00       	call   30002b10 <__x86.get_pc_thunk.bx>
30001e74:	81 c3 44 26 00 00    	add    ebx,0x2644
/home/yogi/src/os/aproj/libChrisOS/src/time.c:32
  time_t time = *timer;
30001e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30001e7d:	8b 00                	mov    eax,DWORD PTR [eax]
30001e7f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:34
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
30001e82:	c7 45 f4 b2 07 00 00 	mov    DWORD PTR [ebp-0xc],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:36

  dayclock = (unsigned long) time % SECS_DAY;
30001e89:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
30001e8c:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001e91:	89 c8                	mov    eax,ecx
30001e93:	f7 e2                	mul    edx
30001e95:	89 d0                	mov    eax,edx
30001e97:	c1 e8 10             	shr    eax,0x10
30001e9a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
30001e9d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001ea0:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
30001ea6:	29 c1                	sub    ecx,eax
30001ea8:	89 c8                	mov    eax,ecx
30001eaa:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:37
  dayno = (unsigned long) time / SECS_DAY;
30001ead:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30001eb0:	ba 07 45 2e c2       	mov    edx,0xc22e4507
30001eb5:	f7 e2                	mul    edx
30001eb7:	89 d0                	mov    eax,edx
30001eb9:	c1 e8 10             	shr    eax,0x10
30001ebc:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:39

  tmbuf->tm_sec = dayclock % 60;
30001ebf:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001ec2:	ba 89 88 88 88       	mov    edx,0x88888889
30001ec7:	89 c8                	mov    eax,ecx
30001ec9:	f7 e2                	mul    edx
30001ecb:	89 d0                	mov    eax,edx
30001ecd:	c1 e8 05             	shr    eax,0x5
30001ed0:	89 c2                	mov    edx,eax
30001ed2:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
30001ed9:	89 c2                	mov    edx,eax
30001edb:	89 d0                	mov    eax,edx
30001edd:	c1 e0 04             	shl    eax,0x4
30001ee0:	29 d0                	sub    eax,edx
30001ee2:	29 c1                	sub    ecx,eax
30001ee4:	89 c8                	mov    eax,ecx
30001ee6:	89 c2                	mov    edx,eax
30001ee8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001eeb:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:40
  tmbuf->tm_min = (dayclock % 3600) / 60;
30001eed:	8b 4d ec             	mov    ecx,DWORD PTR [ebp-0x14]
30001ef0:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001ef5:	89 c8                	mov    eax,ecx
30001ef7:	f7 e2                	mul    edx
30001ef9:	89 d0                	mov    eax,edx
30001efb:	c1 e8 0b             	shr    eax,0xb
30001efe:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
30001f04:	29 c1                	sub    ecx,eax
30001f06:	89 c8                	mov    eax,ecx
30001f08:	ba 89 88 88 88       	mov    edx,0x88888889
30001f0d:	f7 e2                	mul    edx
30001f0f:	89 d0                	mov    eax,edx
30001f11:	c1 e8 05             	shr    eax,0x5
30001f14:	89 c2                	mov    edx,eax
30001f16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001f19:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:41
  tmbuf->tm_hour = dayclock / 3600;
30001f1c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30001f1f:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
30001f24:	f7 e2                	mul    edx
30001f26:	89 d0                	mov    eax,edx
30001f28:	c1 e8 0b             	shr    eax,0xb
30001f2b:	89 c2                	mov    edx,eax
30001f2d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001f30:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:42
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
30001f33:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30001f36:	8d 48 04             	lea    ecx,[eax+0x4]
30001f39:	ba 25 49 92 24       	mov    edx,0x24924925
30001f3e:	89 c8                	mov    eax,ecx
30001f40:	f7 e2                	mul    edx
30001f42:	89 c8                	mov    eax,ecx
30001f44:	29 d0                	sub    eax,edx
30001f46:	d1 e8                	shr    eax,1
30001f48:	01 d0                	add    eax,edx
30001f4a:	c1 e8 02             	shr    eax,0x2
30001f4d:	89 c2                	mov    edx,eax
30001f4f:	c1 e2 03             	shl    edx,0x3
30001f52:	29 c2                	sub    edx,eax
30001f54:	89 c8                	mov    eax,ecx
30001f56:	29 d0                	sub    eax,edx
30001f58:	89 c2                	mov    edx,eax
30001f5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30001f5d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30001f60:	eb 66                	jmp    30001fc8 <gmtime_rI+0x160>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44
    dayno -= YEARSIZE(year);
30001f62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001f65:	83 e0 03             	and    eax,0x3
30001f68:	85 c0                	test   eax,eax
30001f6a:	75 50                	jne    30001fbc <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 1)
30001f6c:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f6f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f74:	89 c8                	mov    eax,ecx
30001f76:	f7 ea                	imul   edx
30001f78:	c1 fa 05             	sar    edx,0x5
30001f7b:	89 c8                	mov    eax,ecx
30001f7d:	c1 f8 1f             	sar    eax,0x1f
30001f80:	29 c2                	sub    edx,eax
30001f82:	89 d0                	mov    eax,edx
30001f84:	6b c0 64             	imul   eax,eax,0x64
30001f87:	29 c1                	sub    ecx,eax
30001f89:	89 c8                	mov    eax,ecx
30001f8b:	85 c0                	test   eax,eax
30001f8d:	75 26                	jne    30001fb5 <gmtime_rI+0x14d>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 4)
30001f8f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001f92:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001f97:	89 c8                	mov    eax,ecx
30001f99:	f7 ea                	imul   edx
30001f9b:	c1 fa 07             	sar    edx,0x7
30001f9e:	89 c8                	mov    eax,ecx
30001fa0:	c1 f8 1f             	sar    eax,0x1f
30001fa3:	29 c2                	sub    edx,eax
30001fa5:	89 d0                	mov    eax,edx
30001fa7:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30001fad:	29 c1                	sub    ecx,eax
30001faf:	89 c8                	mov    eax,ecx
30001fb1:	85 c0                	test   eax,eax
30001fb3:	75 07                	jne    30001fbc <gmtime_rI+0x154>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 5)
30001fb5:	b8 6e 01 00 00       	mov    eax,0x16e
30001fba:	eb 05                	jmp    30001fc1 <gmtime_rI+0x159>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 6)
30001fbc:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:44 (discriminator 8)
30001fc1:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:45 (discriminator 8)
    year++;
30001fc4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
30001fc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30001fcb:	83 e0 03             	and    eax,0x3
30001fce:	85 c0                	test   eax,eax
30001fd0:	75 50                	jne    30002022 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 1)
30001fd2:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001fd5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001fda:	89 c8                	mov    eax,ecx
30001fdc:	f7 ea                	imul   edx
30001fde:	c1 fa 05             	sar    edx,0x5
30001fe1:	89 c8                	mov    eax,ecx
30001fe3:	c1 f8 1f             	sar    eax,0x1f
30001fe6:	29 c2                	sub    edx,eax
30001fe8:	89 d0                	mov    eax,edx
30001fea:	6b c0 64             	imul   eax,eax,0x64
30001fed:	29 c1                	sub    ecx,eax
30001fef:	89 c8                	mov    eax,ecx
30001ff1:	85 c0                	test   eax,eax
30001ff3:	75 26                	jne    3000201b <gmtime_rI+0x1b3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 4)
30001ff5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30001ff8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30001ffd:	89 c8                	mov    eax,ecx
30001fff:	f7 ea                	imul   edx
30002001:	c1 fa 07             	sar    edx,0x7
30002004:	89 c8                	mov    eax,ecx
30002006:	c1 f8 1f             	sar    eax,0x1f
30002009:	29 c2                	sub    edx,eax
3000200b:	89 d0                	mov    eax,edx
3000200d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002013:	29 c1                	sub    ecx,eax
30002015:	89 c8                	mov    eax,ecx
30002017:	85 c0                	test   eax,eax
30002019:	75 07                	jne    30002022 <gmtime_rI+0x1ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 5)
3000201b:	b8 6e 01 00 00       	mov    eax,0x16e
30002020:	eb 05                	jmp    30002027 <gmtime_rI+0x1bf>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 6)
30002022:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/aproj/libChrisOS/src/time.c:43 (discriminator 8)
30002027:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
3000202a:	0f 86 32 ff ff ff    	jbe    30001f62 <gmtime_rI+0xfa>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:47
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
30002030:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
30002033:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
30002039:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000203c:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:48
  tmbuf->tm_yday = dayno;
3000203f:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
30002042:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002045:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:49
  tmbuf->tm_mon = 0;
30002048:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000204b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
30002052:	e9 89 00 00 00       	jmp    300020e0 <gmtime_rI+0x278>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
30002057:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
3000205a:	83 e0 03             	and    eax,0x3
3000205d:	85 c0                	test   eax,eax
3000205f:	75 50                	jne    300020b1 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 1)
30002061:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002064:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002069:	89 c8                	mov    eax,ecx
3000206b:	f7 ea                	imul   edx
3000206d:	c1 fa 05             	sar    edx,0x5
30002070:	89 c8                	mov    eax,ecx
30002072:	c1 f8 1f             	sar    eax,0x1f
30002075:	29 c2                	sub    edx,eax
30002077:	89 d0                	mov    eax,edx
30002079:	6b c0 64             	imul   eax,eax,0x64
3000207c:	29 c1                	sub    ecx,eax
3000207e:	89 c8                	mov    eax,ecx
30002080:	85 c0                	test   eax,eax
30002082:	75 26                	jne    300020aa <gmtime_rI+0x242>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 4)
30002084:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002087:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000208c:	89 c8                	mov    eax,ecx
3000208e:	f7 ea                	imul   edx
30002090:	c1 fa 07             	sar    edx,0x7
30002093:	89 c8                	mov    eax,ecx
30002095:	c1 f8 1f             	sar    eax,0x1f
30002098:	29 c2                	sub    edx,eax
3000209a:	89 d0                	mov    eax,edx
3000209c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300020a2:	29 c1                	sub    ecx,eax
300020a4:	89 c8                	mov    eax,ecx
300020a6:	85 c0                	test   eax,eax
300020a8:	75 07                	jne    300020b1 <gmtime_rI+0x249>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 5)
300020aa:	ba 01 00 00 00       	mov    edx,0x1
300020af:	eb 05                	jmp    300020b6 <gmtime_rI+0x24e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 6)
300020b1:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:51 (discriminator 8)
300020b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020b9:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
300020bc:	89 d0                	mov    eax,edx
300020be:	01 c0                	add    eax,eax
300020c0:	01 d0                	add    eax,edx
300020c2:	c1 e0 02             	shl    eax,0x2
300020c5:	01 c8                	add    eax,ecx
300020c7:	8b 84 83 68 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x298]
300020ce:	29 45 f8             	sub    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:52 (discriminator 8)
    tmbuf->tm_mon++;
300020d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020d4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300020d7:	8d 50 01             	lea    edx,[eax+0x1]
300020da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
300020dd:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
300020e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
300020e3:	83 e0 03             	and    eax,0x3
300020e6:	85 c0                	test   eax,eax
300020e8:	75 50                	jne    3000213a <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 1)
300020ea:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
300020ed:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300020f2:	89 c8                	mov    eax,ecx
300020f4:	f7 ea                	imul   edx
300020f6:	c1 fa 05             	sar    edx,0x5
300020f9:	89 c8                	mov    eax,ecx
300020fb:	c1 f8 1f             	sar    eax,0x1f
300020fe:	29 c2                	sub    edx,eax
30002100:	89 d0                	mov    eax,edx
30002102:	6b c0 64             	imul   eax,eax,0x64
30002105:	29 c1                	sub    ecx,eax
30002107:	89 c8                	mov    eax,ecx
30002109:	85 c0                	test   eax,eax
3000210b:	75 26                	jne    30002133 <gmtime_rI+0x2cb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 4)
3000210d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
30002110:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002115:	89 c8                	mov    eax,ecx
30002117:	f7 ea                	imul   edx
30002119:	c1 fa 07             	sar    edx,0x7
3000211c:	89 c8                	mov    eax,ecx
3000211e:	c1 f8 1f             	sar    eax,0x1f
30002121:	29 c2                	sub    edx,eax
30002123:	89 d0                	mov    eax,edx
30002125:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000212b:	29 c1                	sub    ecx,eax
3000212d:	89 c8                	mov    eax,ecx
3000212f:	85 c0                	test   eax,eax
30002131:	75 07                	jne    3000213a <gmtime_rI+0x2d2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 5)
30002133:	ba 01 00 00 00       	mov    edx,0x1
30002138:	eb 05                	jmp    3000213f <gmtime_rI+0x2d7>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 6)
3000213a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:50 (discriminator 8)
3000213f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002142:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
30002145:	89 d0                	mov    eax,edx
30002147:	01 c0                	add    eax,eax
30002149:	01 d0                	add    eax,edx
3000214b:	c1 e0 02             	shl    eax,0x2
3000214e:	01 c8                	add    eax,ecx
30002150:	8b 84 83 68 fd ff ff 	mov    eax,DWORD PTR [ebx+eax*4-0x298]
30002157:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
3000215a:	0f 86 f7 fe ff ff    	jbe    30002057 <gmtime_rI+0x1ef>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:54
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
30002160:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
30002163:	83 c0 01             	add    eax,0x1
30002166:	89 c2                	mov    edx,eax
30002168:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
3000216b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:55
  tmbuf->tm_isdst = 0;
3000216e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002171:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:56
  return tmbuf;
30002178:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:57
}
3000217b:	83 c4 10             	add    esp,0x10
3000217e:	5b                   	pop    ebx
3000217f:	5d                   	pop    ebp
30002180:	c3                   	ret    

30002181 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:60

VISIBLE struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) 
{
30002181:	55                   	push   ebp
30002182:	89 e5                	mov    ebp,esp
30002184:	e8 56 09 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30002189:	05 2f 23 00 00       	add    eax,0x232f
/home/yogi/src/os/aproj/libChrisOS/src/time.c:61
    return gmtime_rI(timer, tmbuf);
3000218e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002191:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002194:	e8 cf fc ff ff       	call   30001e68 <gmtime_rI>
30002199:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:62
}
3000219c:	c9                   	leave  
3000219d:	c3                   	ret    

3000219e <localtime>:
localtime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:64

VISIBLE struct tm *localtime(const time_t *timer) {
3000219e:	55                   	push   ebp
3000219f:	89 e5                	mov    ebp,esp
300021a1:	53                   	push   ebx
300021a2:	83 ec 34             	sub    esp,0x34
300021a5:	e8 35 09 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300021aa:	05 0e 23 00 00       	add    eax,0x230e
/home/yogi/src/os/aproj/libChrisOS/src/time.c:68
  time_t t;
  struct tm tmbuf;
  
  t = *timer - libcTZ;
300021af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300021b2:	8b 12                	mov    edx,DWORD PTR [edx]
300021b4:	89 d1                	mov    ecx,edx
300021b6:	8b 90 fc ff ff ff    	mov    edx,DWORD PTR [eax-0x4]
300021bc:	8b 12                	mov    edx,DWORD PTR [edx]
300021be:	29 d1                	sub    ecx,edx
300021c0:	89 ca                	mov    edx,ecx
300021c2:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:69
  return gmtime_r(&t, &tmbuf);
300021c5:	83 ec 08             	sub    esp,0x8
300021c8:	8d 55 c8             	lea    edx,[ebp-0x38]
300021cb:	52                   	push   edx
300021cc:	8d 55 f4             	lea    edx,[ebp-0xc]
300021cf:	52                   	push   edx
300021d0:	89 c3                	mov    ebx,eax
300021d2:	e8 29 09 00 00       	call   30002b00 <__x86.get_pc_thunk.ax+0x21>
300021d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:70
}
300021da:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
300021dd:	c9                   	leave  
300021de:	c3                   	ret    

300021df <localtime_rI>:
localtime_rI():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:73

struct tm *localtime_rI(const time_t *timer, struct tm *tmbuf) 
{
300021df:	55                   	push   ebp
300021e0:	89 e5                	mov    ebp,esp
300021e2:	83 ec 10             	sub    esp,0x10
300021e5:	e8 f5 08 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
300021ea:	05 ce 22 00 00       	add    eax,0x22ce
/home/yogi/src/os/aproj/libChrisOS/src/time.c:76
  time_t t;

  t = *timer - libcTZ;
300021ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300021f2:	8b 12                	mov    edx,DWORD PTR [edx]
300021f4:	8b 80 fc ff ff ff    	mov    eax,DWORD PTR [eax-0x4]
300021fa:	8b 00                	mov    eax,DWORD PTR [eax]
300021fc:	29 c2                	sub    edx,eax
300021fe:	89 d0                	mov    eax,edx
30002200:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:77
  return gmtime_rI(&t, tmbuf);
30002203:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002206:	8d 45 fc             	lea    eax,[ebp-0x4]
30002209:	50                   	push   eax
3000220a:	e8 59 fc ff ff       	call   30001e68 <gmtime_rI>
3000220f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:78
}
30002212:	c9                   	leave  
30002213:	c3                   	ret    

30002214 <localtime_r>:
localtime_r():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:80

VISIBLE struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
30002214:	55                   	push   ebp
30002215:	89 e5                	mov    ebp,esp
30002217:	e8 c3 08 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
3000221c:	05 9c 22 00 00       	add    eax,0x229c
/home/yogi/src/os/aproj/libChrisOS/src/time.c:81
    return localtime_rI(timer, tmbuf);
30002221:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
30002224:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002227:	e8 b3 ff ff ff       	call   300021df <localtime_rI>
3000222c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:82
}
3000222f:	c9                   	leave  
30002230:	c3                   	ret    

30002231 <mktime>:
mktime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:84

VISIBLE time_t mktime(struct tm *tmbuf) {
30002231:	55                   	push   ebp
30002232:	89 e5                	mov    ebp,esp
30002234:	57                   	push   edi
30002235:	56                   	push   esi
30002236:	53                   	push   ebx
30002237:	83 ec 20             	sub    esp,0x20
3000223a:	e8 d5 08 00 00       	call   30002b14 <__x86.get_pc_thunk.cx>
3000223f:	81 c1 79 22 00 00    	add    ecx,0x2279
/home/yogi/src/os/aproj/libChrisOS/src/time.c:92
  int yday, month;
  long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
30002245:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002248:	8b 70 04             	mov    esi,DWORD PTR [eax+0x4]
3000224b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000224e:	8b 18                	mov    ebx,DWORD PTR [eax]
30002250:	ba 89 88 88 88       	mov    edx,0x88888889
30002255:	89 d8                	mov    eax,ebx
30002257:	f7 ea                	imul   edx
30002259:	8d 04 1a             	lea    eax,[edx+ebx*1]
3000225c:	c1 f8 05             	sar    eax,0x5
3000225f:	89 c2                	mov    edx,eax
30002261:	89 d8                	mov    eax,ebx
30002263:	c1 f8 1f             	sar    eax,0x1f
30002266:	29 c2                	sub    edx,eax
30002268:	89 d0                	mov    eax,edx
3000226a:	8d 14 06             	lea    edx,[esi+eax*1]
3000226d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002270:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:93
  tmbuf->tm_sec %= 60;
30002273:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002276:	8b 18                	mov    ebx,DWORD PTR [eax]
30002278:	ba 89 88 88 88       	mov    edx,0x88888889
3000227d:	89 d8                	mov    eax,ebx
3000227f:	f7 ea                	imul   edx
30002281:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002284:	c1 f8 05             	sar    eax,0x5
30002287:	89 c2                	mov    edx,eax
30002289:	89 d8                	mov    eax,ebx
3000228b:	c1 f8 1f             	sar    eax,0x1f
3000228e:	29 c2                	sub    edx,eax
30002290:	89 d0                	mov    eax,edx
30002292:	89 c2                	mov    edx,eax
30002294:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
3000229b:	89 c2                	mov    edx,eax
3000229d:	89 d0                	mov    eax,edx
3000229f:	c1 e0 04             	shl    eax,0x4
300022a2:	29 d0                	sub    eax,edx
300022a4:	29 c3                	sub    ebx,eax
300022a6:	89 d8                	mov    eax,ebx
300022a8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
300022ab:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:94
  if (tmbuf->tm_sec < 0) {
300022ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022b0:	8b 00                	mov    eax,DWORD PTR [eax]
300022b2:	85 c0                	test   eax,eax
300022b4:	79 1c                	jns    300022d2 <mktime+0xa1>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:95
    tmbuf->tm_sec += 60;
300022b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022b9:	8b 00                	mov    eax,DWORD PTR [eax]
300022bb:	8d 50 3c             	lea    edx,[eax+0x3c]
300022be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022c1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:96
    tmbuf->tm_min--;
300022c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022c6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300022c9:	8d 50 ff             	lea    edx,[eax-0x1]
300022cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022cf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:98
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
300022d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022d5:	8b 70 08             	mov    esi,DWORD PTR [eax+0x8]
300022d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022db:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
300022de:	ba 89 88 88 88       	mov    edx,0x88888889
300022e3:	89 d8                	mov    eax,ebx
300022e5:	f7 ea                	imul   edx
300022e7:	8d 04 1a             	lea    eax,[edx+ebx*1]
300022ea:	c1 f8 05             	sar    eax,0x5
300022ed:	89 c2                	mov    edx,eax
300022ef:	89 d8                	mov    eax,ebx
300022f1:	c1 f8 1f             	sar    eax,0x1f
300022f4:	29 c2                	sub    edx,eax
300022f6:	89 d0                	mov    eax,edx
300022f8:	8d 14 06             	lea    edx,[esi+eax*1]
300022fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300022fe:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:99
  tmbuf->tm_min = tmbuf->tm_min % 60;
30002301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002304:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
30002307:	ba 89 88 88 88       	mov    edx,0x88888889
3000230c:	89 d8                	mov    eax,ebx
3000230e:	f7 ea                	imul   edx
30002310:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002313:	c1 f8 05             	sar    eax,0x5
30002316:	89 c2                	mov    edx,eax
30002318:	89 d8                	mov    eax,ebx
3000231a:	c1 f8 1f             	sar    eax,0x1f
3000231d:	29 c2                	sub    edx,eax
3000231f:	89 d0                	mov    eax,edx
30002321:	89 c2                	mov    edx,eax
30002323:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
3000232a:	89 c2                	mov    edx,eax
3000232c:	89 d0                	mov    eax,edx
3000232e:	c1 e0 04             	shl    eax,0x4
30002331:	29 d0                	sub    eax,edx
30002333:	29 c3                	sub    ebx,eax
30002335:	89 d8                	mov    eax,ebx
30002337:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000233a:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:100
  if (tmbuf->tm_min < 0) {
3000233d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002340:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
30002343:	85 c0                	test   eax,eax
30002345:	79 1e                	jns    30002365 <mktime+0x134>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:101
    tmbuf->tm_min += 60;
30002347:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000234a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
3000234d:	8d 50 3c             	lea    edx,[eax+0x3c]
30002350:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002353:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:102
    tmbuf->tm_hour--;
30002356:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002359:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
3000235c:	8d 50 ff             	lea    edx,[eax-0x1]
3000235f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002362:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:104
  }
  day = tmbuf->tm_hour / 24;
30002365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002368:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
3000236b:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002370:	89 d8                	mov    eax,ebx
30002372:	f7 ea                	imul   edx
30002374:	c1 fa 02             	sar    edx,0x2
30002377:	89 d8                	mov    eax,ebx
30002379:	c1 f8 1f             	sar    eax,0x1f
3000237c:	29 c2                	sub    edx,eax
3000237e:	89 d0                	mov    eax,edx
30002380:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:105
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
30002383:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002386:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
30002389:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
3000238e:	89 d8                	mov    eax,ebx
30002390:	f7 ea                	imul   edx
30002392:	c1 fa 02             	sar    edx,0x2
30002395:	89 d8                	mov    eax,ebx
30002397:	c1 f8 1f             	sar    eax,0x1f
3000239a:	29 c2                	sub    edx,eax
3000239c:	89 d0                	mov    eax,edx
3000239e:	01 c0                	add    eax,eax
300023a0:	01 d0                	add    eax,edx
300023a2:	c1 e0 03             	shl    eax,0x3
300023a5:	29 c3                	sub    ebx,eax
300023a7:	89 da                	mov    edx,ebx
300023a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023ac:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:106
  if (tmbuf->tm_hour < 0) {
300023af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300023b5:	85 c0                	test   eax,eax
300023b7:	79 13                	jns    300023cc <mktime+0x19b>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:107
    tmbuf->tm_hour += 24;
300023b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023bc:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
300023bf:	8d 50 18             	lea    edx,[eax+0x18]
300023c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023c5:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:108
    day--;
300023c8:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:110
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
300023cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023cf:	8b 70 14             	mov    esi,DWORD PTR [eax+0x14]
300023d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023d5:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300023d8:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
300023dd:	89 d8                	mov    eax,ebx
300023df:	f7 ea                	imul   edx
300023e1:	d1 fa                	sar    edx,1
300023e3:	89 d8                	mov    eax,ebx
300023e5:	c1 f8 1f             	sar    eax,0x1f
300023e8:	29 c2                	sub    edx,eax
300023ea:	89 d0                	mov    eax,edx
300023ec:	8d 14 06             	lea    edx,[esi+eax*1]
300023ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023f2:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:111
  tmbuf->tm_mon %= 12;
300023f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300023f8:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300023fb:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
30002400:	89 d8                	mov    eax,ebx
30002402:	f7 ea                	imul   edx
30002404:	d1 fa                	sar    edx,1
30002406:	89 d8                	mov    eax,ebx
30002408:	c1 f8 1f             	sar    eax,0x1f
3000240b:	29 c2                	sub    edx,eax
3000240d:	89 d0                	mov    eax,edx
3000240f:	01 c0                	add    eax,eax
30002411:	01 d0                	add    eax,edx
30002413:	c1 e0 02             	shl    eax,0x2
30002416:	29 c3                	sub    ebx,eax
30002418:	89 da                	mov    edx,ebx
3000241a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000241d:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:112
  if (tmbuf->tm_mon < 0) {
30002420:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002423:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002426:	85 c0                	test   eax,eax
30002428:	79 1e                	jns    30002448 <mktime+0x217>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:113
    tmbuf->tm_mon += 12;
3000242a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000242d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
30002430:	8d 50 0c             	lea    edx,[eax+0xc]
30002433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002436:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:114
    tmbuf->tm_year--;
30002439:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000243c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000243f:	8d 50 ff             	lea    edx,[eax-0x1]
30002442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002445:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:116
  }
  day += (tmbuf->tm_mday - 1);
30002448:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000244b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
3000244e:	83 e8 01             	sub    eax,0x1
30002451:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  while (day < 0) {
30002454:	e9 c1 00 00 00       	jmp    3000251a <mktime+0x2e9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:118
    if(--tmbuf->tm_mon < 0) {
30002459:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000245c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000245f:	8d 50 ff             	lea    edx,[eax-0x1]
30002462:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002465:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
30002468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000246b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000246e:	85 c0                	test   eax,eax
30002470:	79 19                	jns    3000248b <mktime+0x25a>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:119
      tmbuf->tm_year--;
30002472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002475:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002478:	8d 50 ff             	lea    edx,[eax-0x1]
3000247b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000247e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:120
      tmbuf->tm_mon = 11;
30002481:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002484:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
3000248b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000248e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002491:	83 e0 03             	and    eax,0x3
30002494:	85 c0                	test   eax,eax
30002496:	75 62                	jne    300024fa <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 1)
30002498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000249b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000249e:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300024a4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300024a9:	89 d8                	mov    eax,ebx
300024ab:	f7 ea                	imul   edx
300024ad:	c1 fa 05             	sar    edx,0x5
300024b0:	89 d8                	mov    eax,ebx
300024b2:	c1 f8 1f             	sar    eax,0x1f
300024b5:	29 c2                	sub    edx,eax
300024b7:	89 d0                	mov    eax,edx
300024b9:	6b c0 64             	imul   eax,eax,0x64
300024bc:	29 c3                	sub    ebx,eax
300024be:	89 d8                	mov    eax,ebx
300024c0:	85 c0                	test   eax,eax
300024c2:	75 2f                	jne    300024f3 <mktime+0x2c2>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 4)
300024c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300024c7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300024ca:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
300024d0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300024d5:	89 d8                	mov    eax,ebx
300024d7:	f7 ea                	imul   edx
300024d9:	c1 fa 07             	sar    edx,0x7
300024dc:	89 d8                	mov    eax,ebx
300024de:	c1 f8 1f             	sar    eax,0x1f
300024e1:	29 c2                	sub    edx,eax
300024e3:	89 d0                	mov    eax,edx
300024e5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300024eb:	29 c3                	sub    ebx,eax
300024ed:	89 d8                	mov    eax,ebx
300024ef:	85 c0                	test   eax,eax
300024f1:	75 07                	jne    300024fa <mktime+0x2c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 5)
300024f3:	ba 01 00 00 00       	mov    edx,0x1
300024f8:	eb 05                	jmp    300024ff <mktime+0x2ce>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 6)
300024fa:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:122 (discriminator 8)
300024ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002502:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002505:	89 d0                	mov    eax,edx
30002507:	01 c0                	add    eax,eax
30002509:	01 d0                	add    eax,edx
3000250b:	c1 e0 02             	shl    eax,0x2
3000250e:	01 d8                	add    eax,ebx
30002510:	8b 84 81 68 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x298]
30002517:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:117
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
3000251a:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
3000251e:	0f 88 35 ff ff ff    	js     30002459 <mktime+0x228>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
30002524:	e9 c2 00 00 00       	jmp    300025eb <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
30002529:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
3000252c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000252f:	83 e0 03             	and    eax,0x3
30002532:	85 c0                	test   eax,eax
30002534:	75 62                	jne    30002598 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 1)
30002536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002539:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000253c:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002542:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002547:	89 d8                	mov    eax,ebx
30002549:	f7 ea                	imul   edx
3000254b:	c1 fa 05             	sar    edx,0x5
3000254e:	89 d8                	mov    eax,ebx
30002550:	c1 f8 1f             	sar    eax,0x1f
30002553:	29 c2                	sub    edx,eax
30002555:	89 d0                	mov    eax,edx
30002557:	6b c0 64             	imul   eax,eax,0x64
3000255a:	29 c3                	sub    ebx,eax
3000255c:	89 d8                	mov    eax,ebx
3000255e:	85 c0                	test   eax,eax
30002560:	75 2f                	jne    30002591 <mktime+0x360>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 4)
30002562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002565:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002568:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
3000256e:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002573:	89 d8                	mov    eax,ebx
30002575:	f7 ea                	imul   edx
30002577:	c1 fa 07             	sar    edx,0x7
3000257a:	89 d8                	mov    eax,ebx
3000257c:	c1 f8 1f             	sar    eax,0x1f
3000257f:	29 c2                	sub    edx,eax
30002581:	89 d0                	mov    eax,edx
30002583:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002589:	29 c3                	sub    ebx,eax
3000258b:	89 d8                	mov    eax,ebx
3000258d:	85 c0                	test   eax,eax
3000258f:	75 07                	jne    30002598 <mktime+0x367>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 5)
30002591:	ba 01 00 00 00       	mov    edx,0x1
30002596:	eb 05                	jmp    3000259d <mktime+0x36c>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 6)
30002598:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:125 (discriminator 8)
3000259d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025a0:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
300025a3:	89 d0                	mov    eax,edx
300025a5:	01 c0                	add    eax,eax
300025a7:	01 d0                	add    eax,edx
300025a9:	c1 e0 02             	shl    eax,0x2
300025ac:	01 d8                	add    eax,ebx
300025ae:	8b 84 81 68 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x298]
300025b5:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:126 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
300025b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300025be:	8d 50 01             	lea    edx,[eax+0x1]
300025c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025c4:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
300025c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
300025cd:	83 f8 0c             	cmp    eax,0xc
300025d0:	75 19                	jne    300025eb <mktime+0x3ba>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:127
      tmbuf->tm_mon = 0;
300025d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025d5:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:128
      tmbuf->tm_year++;
300025dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025df:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300025e2:	8d 50 01             	lea    edx,[eax+0x1]
300025e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025e8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
300025eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025ee:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300025f1:	83 e0 03             	and    eax,0x3
300025f4:	85 c0                	test   eax,eax
300025f6:	75 62                	jne    3000265a <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 1)
300025f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300025fb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300025fe:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002604:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002609:	89 d8                	mov    eax,ebx
3000260b:	f7 ea                	imul   edx
3000260d:	c1 fa 05             	sar    edx,0x5
30002610:	89 d8                	mov    eax,ebx
30002612:	c1 f8 1f             	sar    eax,0x1f
30002615:	29 c2                	sub    edx,eax
30002617:	89 d0                	mov    eax,edx
30002619:	6b c0 64             	imul   eax,eax,0x64
3000261c:	29 c3                	sub    ebx,eax
3000261e:	89 d8                	mov    eax,ebx
30002620:	85 c0                	test   eax,eax
30002622:	75 2f                	jne    30002653 <mktime+0x422>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 4)
30002624:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002627:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
3000262a:	8d 98 6c 07 00 00    	lea    ebx,[eax+0x76c]
30002630:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002635:	89 d8                	mov    eax,ebx
30002637:	f7 ea                	imul   edx
30002639:	c1 fa 07             	sar    edx,0x7
3000263c:	89 d8                	mov    eax,ebx
3000263e:	c1 f8 1f             	sar    eax,0x1f
30002641:	29 c2                	sub    edx,eax
30002643:	89 d0                	mov    eax,edx
30002645:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000264b:	29 c3                	sub    ebx,eax
3000264d:	89 d8                	mov    eax,ebx
3000264f:	85 c0                	test   eax,eax
30002651:	75 07                	jne    3000265a <mktime+0x429>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 5)
30002653:	ba 01 00 00 00       	mov    edx,0x1
30002658:	eb 05                	jmp    3000265f <mktime+0x42e>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 6)
3000265a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:124 (discriminator 8)
3000265f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002662:	8b 58 10             	mov    ebx,DWORD PTR [eax+0x10]
30002665:	89 d0                	mov    eax,edx
30002667:	01 c0                	add    eax,eax
30002669:	01 d0                	add    eax,edx
3000266b:	c1 e0 02             	shl    eax,0x2
3000266e:	01 d8                	add    eax,ebx
30002670:	8b 84 81 68 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x298]
30002677:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
3000267a:	0f 8e a9 fe ff ff    	jle    30002529 <mktime+0x2f8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:131
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
30002680:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002683:	8d 50 01             	lea    edx,[eax+0x1]
30002686:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002689:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:132
  year = EPOCH_YR;
3000268c:	c7 45 dc b2 07 00 00 	mov    DWORD PTR [ebp-0x24],0x7b2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
30002693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002696:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
30002699:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
3000269c:	81 ea 6c 07 00 00    	sub    edx,0x76c
300026a2:	39 d0                	cmp    eax,edx
300026a4:	7d 0a                	jge    300026b0 <mktime+0x47f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:133 (discriminator 1)
300026a6:	b8 19 fc ff ff       	mov    eax,0xfffffc19
300026ab:	e9 ba 03 00 00       	jmp    30002a6a <mktime+0x839>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:134
  seconds = 0;
300026b0:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:135
  day = 0;                      // Means days since day 0 now
300026b7:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:136
  overflow = 0;
300026be:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:143
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
300026c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300026c8:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
300026cb:	05 6c 07 00 00       	add    eax,0x76c
300026d0:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
300026d3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026d6:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300026d9:	3d 7c c6 59 00       	cmp    eax,0x59c67c
300026de:	7e 07                	jle    300026e7 <mktime+0x4b6>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:145 (discriminator 1)
300026e0:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:146
  day = (tm_year - year) * 365;
300026e7:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300026ea:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
300026ed:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
300026f3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
300026f6:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
300026fb:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
300026fe:	89 c2                	mov    edx,eax
30002700:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002703:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002706:	8d 58 03             	lea    ebx,[eax+0x3]
30002709:	85 c0                	test   eax,eax
3000270b:	0f 48 c3             	cmovs  eax,ebx
3000270e:	c1 f8 02             	sar    eax,0x2
30002711:	83 c0 01             	add    eax,0x1
30002714:	39 c2                	cmp    edx,eax
30002716:	7d 04                	jge    3000271c <mktime+0x4eb>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:147 (discriminator 1)
30002718:	83 4d e4 02          	or     DWORD PTR [ebp-0x1c],0x2
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
3000271c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000271f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002722:	8d 50 03             	lea    edx,[eax+0x3]
30002725:	85 c0                	test   eax,eax
30002727:	0f 48 c2             	cmovs  eax,edx
3000272a:	c1 f8 02             	sar    eax,0x2
3000272d:	89 c3                	mov    ebx,eax
3000272f:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002732:	83 e0 03             	and    eax,0x3
30002735:	85 c0                	test   eax,eax
30002737:	74 29                	je     30002762 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 1)
30002739:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000273c:	99                   	cdq    
3000273d:	c1 ea 1e             	shr    edx,0x1e
30002740:	01 d0                	add    eax,edx
30002742:	83 e0 03             	and    eax,0x3
30002745:	29 d0                	sub    eax,edx
30002747:	89 c6                	mov    esi,eax
30002749:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
3000274c:	99                   	cdq    
3000274d:	c1 ea 1e             	shr    edx,0x1e
30002750:	01 d0                	add    eax,edx
30002752:	83 e0 03             	and    eax,0x3
30002755:	29 d0                	sub    eax,edx
30002757:	39 c6                	cmp    esi,eax
30002759:	7d 07                	jge    30002762 <mktime+0x531>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 3)
3000275b:	b8 01 00 00 00       	mov    eax,0x1
30002760:	eb 05                	jmp    30002767 <mktime+0x536>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 4)
30002762:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:148 (discriminator 6)
30002767:	01 d8                	add    eax,ebx
30002769:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
3000276c:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
3000276f:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002772:	89 c3                	mov    ebx,eax
30002774:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002779:	89 d8                	mov    eax,ebx
3000277b:	f7 ea                	imul   edx
3000277d:	c1 fa 05             	sar    edx,0x5
30002780:	89 d8                	mov    eax,ebx
30002782:	c1 f8 1f             	sar    eax,0x1f
30002785:	89 d7                	mov    edi,edx
30002787:	29 c7                	sub    edi,eax
30002789:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
3000278c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002791:	89 d8                	mov    eax,ebx
30002793:	f7 ea                	imul   edx
30002795:	c1 fa 05             	sar    edx,0x5
30002798:	89 d8                	mov    eax,ebx
3000279a:	c1 f8 1f             	sar    eax,0x1f
3000279d:	29 c2                	sub    edx,eax
3000279f:	89 d0                	mov    eax,edx
300027a1:	6b c0 64             	imul   eax,eax,0x64
300027a4:	29 c3                	sub    ebx,eax
300027a6:	89 d8                	mov    eax,ebx
300027a8:	85 c0                	test   eax,eax
300027aa:	74 49                	je     300027f5 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 1)
300027ac:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300027af:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027b4:	89 d8                	mov    eax,ebx
300027b6:	f7 ea                	imul   edx
300027b8:	c1 fa 05             	sar    edx,0x5
300027bb:	89 d8                	mov    eax,ebx
300027bd:	c1 f8 1f             	sar    eax,0x1f
300027c0:	89 d6                	mov    esi,edx
300027c2:	29 c6                	sub    esi,eax
300027c4:	6b c6 64             	imul   eax,esi,0x64
300027c7:	89 de                	mov    esi,ebx
300027c9:	29 c6                	sub    esi,eax
300027cb:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
300027ce:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300027d3:	89 d8                	mov    eax,ebx
300027d5:	f7 ea                	imul   edx
300027d7:	c1 fa 05             	sar    edx,0x5
300027da:	89 d8                	mov    eax,ebx
300027dc:	c1 f8 1f             	sar    eax,0x1f
300027df:	29 c2                	sub    edx,eax
300027e1:	89 d0                	mov    eax,edx
300027e3:	6b c0 64             	imul   eax,eax,0x64
300027e6:	29 c3                	sub    ebx,eax
300027e8:	89 d8                	mov    eax,ebx
300027ea:	39 c6                	cmp    esi,eax
300027ec:	7d 07                	jge    300027f5 <mktime+0x5c4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 3)
300027ee:	b8 01 00 00 00       	mov    eax,0x1
300027f3:	eb 05                	jmp    300027fa <mktime+0x5c9>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 4)
300027f5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:149 (discriminator 6)
300027fa:	01 f8                	add    eax,edi
300027fc:	29 45 f0             	sub    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
300027ff:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
30002802:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
30002805:	89 c3                	mov    ebx,eax
30002807:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000280c:	89 d8                	mov    eax,ebx
3000280e:	f7 ea                	imul   edx
30002810:	c1 fa 07             	sar    edx,0x7
30002813:	89 d8                	mov    eax,ebx
30002815:	c1 f8 1f             	sar    eax,0x1f
30002818:	89 d7                	mov    edi,edx
3000281a:	29 c7                	sub    edi,eax
3000281c:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
3000281f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
30002824:	89 d8                	mov    eax,ebx
30002826:	f7 ea                	imul   edx
30002828:	c1 fa 07             	sar    edx,0x7
3000282b:	89 d8                	mov    eax,ebx
3000282d:	c1 f8 1f             	sar    eax,0x1f
30002830:	29 c2                	sub    edx,eax
30002832:	89 d0                	mov    eax,edx
30002834:	69 c0 90 01 00 00    	imul   eax,eax,0x190
3000283a:	29 c3                	sub    ebx,eax
3000283c:	89 d8                	mov    eax,ebx
3000283e:	85 c0                	test   eax,eax
30002840:	74 4f                	je     30002891 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 1)
30002842:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
30002845:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000284a:	89 d8                	mov    eax,ebx
3000284c:	f7 ea                	imul   edx
3000284e:	c1 fa 07             	sar    edx,0x7
30002851:	89 d8                	mov    eax,ebx
30002853:	c1 f8 1f             	sar    eax,0x1f
30002856:	89 d6                	mov    esi,edx
30002858:	29 c6                	sub    esi,eax
3000285a:	69 c6 90 01 00 00    	imul   eax,esi,0x190
30002860:	89 de                	mov    esi,ebx
30002862:	29 c6                	sub    esi,eax
30002864:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
30002867:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
3000286c:	89 d8                	mov    eax,ebx
3000286e:	f7 ea                	imul   edx
30002870:	c1 fa 07             	sar    edx,0x7
30002873:	89 d8                	mov    eax,ebx
30002875:	c1 f8 1f             	sar    eax,0x1f
30002878:	29 c2                	sub    edx,eax
3000287a:	89 d0                	mov    eax,edx
3000287c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
30002882:	29 c3                	sub    ebx,eax
30002884:	89 d8                	mov    eax,ebx
30002886:	39 c6                	cmp    esi,eax
30002888:	7d 07                	jge    30002891 <mktime+0x660>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 3)
3000288a:	b8 01 00 00 00       	mov    eax,0x1
3000288f:	eb 05                	jmp    30002896 <mktime+0x665>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 4)
30002891:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:150 (discriminator 6)
30002896:	01 f8                	add    eax,edi
30002898:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:152 (discriminator 6)

  yday = month = 0;
3000289b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
300028a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
300028a5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153 (discriminator 6)
  while (month < tmbuf->tm_mon) {
300028a8:	eb 7b                	jmp    30002925 <mktime+0x6f4>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154
    yday += _ytab[LEAPYEAR(tm_year)][month];
300028aa:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
300028ad:	83 e0 03             	and    eax,0x3
300028b0:	85 c0                	test   eax,eax
300028b2:	75 50                	jne    30002904 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 1)
300028b4:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300028b7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300028bc:	89 d8                	mov    eax,ebx
300028be:	f7 ea                	imul   edx
300028c0:	c1 fa 05             	sar    edx,0x5
300028c3:	89 d8                	mov    eax,ebx
300028c5:	c1 f8 1f             	sar    eax,0x1f
300028c8:	29 c2                	sub    edx,eax
300028ca:	89 d0                	mov    eax,edx
300028cc:	6b c0 64             	imul   eax,eax,0x64
300028cf:	29 c3                	sub    ebx,eax
300028d1:	89 d8                	mov    eax,ebx
300028d3:	85 c0                	test   eax,eax
300028d5:	75 26                	jne    300028fd <mktime+0x6cc>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 4)
300028d7:	8b 5d d4             	mov    ebx,DWORD PTR [ebp-0x2c]
300028da:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
300028df:	89 d8                	mov    eax,ebx
300028e1:	f7 ea                	imul   edx
300028e3:	c1 fa 07             	sar    edx,0x7
300028e6:	89 d8                	mov    eax,ebx
300028e8:	c1 f8 1f             	sar    eax,0x1f
300028eb:	29 c2                	sub    edx,eax
300028ed:	89 d0                	mov    eax,edx
300028ef:	69 c0 90 01 00 00    	imul   eax,eax,0x190
300028f5:	29 c3                	sub    ebx,eax
300028f7:	89 d8                	mov    eax,ebx
300028f9:	85 c0                	test   eax,eax
300028fb:	75 07                	jne    30002904 <mktime+0x6d3>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 5)
300028fd:	ba 01 00 00 00       	mov    edx,0x1
30002902:	eb 05                	jmp    30002909 <mktime+0x6d8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 6)
30002904:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:154 (discriminator 8)
30002909:	89 d0                	mov    eax,edx
3000290b:	01 c0                	add    eax,eax
3000290d:	01 d0                	add    eax,edx
3000290f:	c1 e0 02             	shl    eax,0x2
30002912:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
30002915:	01 d0                	add    eax,edx
30002917:	8b 84 81 68 fd ff ff 	mov    eax,DWORD PTR [ecx+eax*4-0x298]
3000291e:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:155 (discriminator 8)
    month++;
30002921:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/aproj/libChrisOS/src/time.c:153
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
30002925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002928:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
3000292b:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
3000292e:	0f 8f 76 ff ff ff    	jg     300028aa <mktime+0x679>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:157
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
30002934:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002937:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
3000293a:	83 e8 01             	sub    eax,0x1
3000293d:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158
  if (day + yday < 0) overflow|=4;
30002940:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
30002943:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002946:	01 d0                	add    eax,edx
30002948:	85 c0                	test   eax,eax
3000294a:	79 04                	jns    30002950 <mktime+0x71f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:158 (discriminator 1)
3000294c:	83 4d e4 04          	or     DWORD PTR [ebp-0x1c],0x4
/home/yogi/src/os/aproj/libChrisOS/src/time.c:159
  day += yday;
30002950:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
30002953:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:161

  tmbuf->tm_yday = yday;
30002956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002959:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
3000295c:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/aproj/libChrisOS/src/time.c:162
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
3000295f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
30002962:	8d 58 04             	lea    ebx,[eax+0x4]
30002965:	ba 93 24 49 92       	mov    edx,0x92492493
3000296a:	89 d8                	mov    eax,ebx
3000296c:	f7 ea                	imul   edx
3000296e:	8d 04 1a             	lea    eax,[edx+ebx*1]
30002971:	c1 f8 02             	sar    eax,0x2
30002974:	89 c2                	mov    edx,eax
30002976:	89 d8                	mov    eax,ebx
30002978:	c1 f8 1f             	sar    eax,0x1f
3000297b:	29 c2                	sub    edx,eax
3000297d:	89 d0                	mov    eax,edx
3000297f:	89 c2                	mov    edx,eax
30002981:	c1 e2 03             	shl    edx,0x3
30002984:	29 c2                	sub    edx,eax
30002986:	89 d8                	mov    eax,ebx
30002988:	29 d0                	sub    eax,edx
3000298a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
3000298d:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:164

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
30002990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002993:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
30002996:	c1 e0 02             	shl    eax,0x2
30002999:	89 c2                	mov    edx,eax
3000299b:	c1 e2 04             	shl    edx,0x4
3000299e:	29 c2                	sub    edx,eax
300029a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029a3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
300029a6:	01 d0                	add    eax,edx
300029a8:	c1 e0 02             	shl    eax,0x2
300029ab:	89 c2                	mov    edx,eax
300029ad:	c1 e2 04             	shl    edx,0x4
300029b0:	29 c2                	sub    edx,eax
300029b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
300029b5:	8b 00                	mov    eax,DWORD PTR [eax]
300029b7:	01 d0                	add    eax,edx
300029b9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
300029bc:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
300029c1:	2b 45 d8             	sub    eax,DWORD PTR [ebp-0x28]
300029c4:	89 c3                	mov    ebx,eax
300029c6:	ba 07 45 2e c2       	mov    edx,0xc22e4507
300029cb:	89 d8                	mov    eax,ebx
300029cd:	f7 ea                	imul   edx
300029cf:	8d 04 1a             	lea    eax,[edx+ebx*1]
300029d2:	c1 f8 10             	sar    eax,0x10
300029d5:	89 c2                	mov    edx,eax
300029d7:	89 d8                	mov    eax,ebx
300029d9:	c1 f8 1f             	sar    eax,0x1f
300029dc:	29 c2                	sub    edx,eax
300029de:	89 d0                	mov    eax,edx
300029e0:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
300029e3:	7d 04                	jge    300029e9 <mktime+0x7b8>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:166 (discriminator 1)
300029e5:	83 4d e4 08          	or     DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:167
  seconds += day * SECS_DAY;
300029e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
300029ec:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
300029f2:	01 45 d8             	add    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170

  // Now adjust according to timezone and daylight saving time
  if (((libcTZ > 0) && (TIME_MAX - libcTZ < seconds)) || 
300029f5:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
300029fb:	8b 00                	mov    eax,DWORD PTR [eax]
300029fd:	85 c0                	test   eax,eax
300029ff:	74 1a                	je     30002a1b <mktime+0x7ea>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:170 (discriminator 1)
30002a01:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002a07:	8b 00                	mov    eax,DWORD PTR [eax]
30002a09:	ba ff ff ff 7f       	mov    edx,0x7fffffff
30002a0e:	29 c2                	sub    edx,eax
30002a10:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
30002a13:	39 c2                	cmp    edx,eax
30002a15:	73 04                	jae    30002a1b <mktime+0x7ea>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:172
      ((libcTZ < 0) && (seconds < -libcTZ))) {
          overflow|=16;
30002a17:	83 4d e4 10          	or     DWORD PTR [ebp-0x1c],0x10
/home/yogi/src/os/aproj/libChrisOS/src/time.c:174
  }
  seconds += libcTZ;
30002a1b:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
30002a1e:	8b 81 fc ff ff ff    	mov    eax,DWORD PTR [ecx-0x4]
30002a24:	8b 00                	mov    eax,DWORD PTR [eax]
30002a26:	01 d0                	add    eax,edx
30002a28:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:176

  if (tmbuf->tm_isdst) {
30002a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
30002a2e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
30002a31:	85 c0                	test   eax,eax
30002a33:	74 0b                	je     30002a40 <mktime+0x80f>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:177
    dst = _dstbias;
30002a35:	8b 81 54 00 00 00    	mov    eax,DWORD PTR [ecx+0x54]
30002a3b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
30002a3e:	eb 07                	jmp    30002a47 <mktime+0x816>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:179
  } else {
    dst = 0;
30002a40:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
30002a47:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002a4a:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
30002a4d:	7e 04                	jle    30002a53 <mktime+0x822>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:182 (discriminator 1)
30002a4f:	83 4d e4 20          	or     DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/aproj/libChrisOS/src/time.c:183
  seconds -= dst;
30002a53:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
30002a56:	29 45 d8             	sub    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185

  if (overflow) return (time_t) overflow-2;
30002a59:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
30002a5d:	74 08                	je     30002a67 <mktime+0x836>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:185 (discriminator 1)
30002a5f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
30002a62:	83 e8 02             	sub    eax,0x2
30002a65:	eb 03                	jmp    30002a6a <mktime+0x839>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:188

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
30002a67:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/aproj/libChrisOS/src/time.c:189
}
30002a6a:	83 c4 20             	add    esp,0x20
30002a6d:	5b                   	pop    ebx
30002a6e:	5e                   	pop    esi
30002a6f:	5f                   	pop    edi
30002a70:	5d                   	pop    ebp
30002a71:	c3                   	ret    

30002a72 <gettime>:
gettime():
/home/yogi/src/os/aproj/libChrisOS/src/time.c:192

VISIBLE struct tm* gettime(struct tm *time, bool localTime)
{
30002a72:	55                   	push   ebp
30002a73:	89 e5                	mov    ebp,esp
30002a75:	56                   	push   esi
30002a76:	53                   	push   ebx
30002a77:	83 ec 14             	sub    esp,0x14
30002a7a:	e8 60 00 00 00       	call   30002adf <__x86.get_pc_thunk.ax>
30002a7f:	05 39 1a 00 00       	add    eax,0x1a39
30002a84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
30002a87:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/aproj/libChrisOS/src/time.c:193
    time_t ticks=0;
30002a8a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/aproj/libChrisOS/src/time.c:195
    
    SYSCALL0(SYSCALL_GETTIME, ticks);
30002a91:	b8 71 01 00 00       	mov    eax,0x171
30002a96:	bb 00 00 00 00       	mov    ebx,0x0
30002a9b:	b9 00 00 00 00       	mov    ecx,0x0
30002aa0:	ba 00 00 00 00       	mov    edx,0x0
30002aa5:	be 00 00 00 00       	mov    esi,0x0
30002aaa:	e8 fc ff ff ff       	call   30002aab <gettime+0x39>
30002aaf:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/aproj/libChrisOS/src/time.c:196
    if (localTime)
30002ab2:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
30002ab6:	74 11                	je     30002ac9 <gettime+0x57>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:197
        return localtime_rI(&ticks,time);
30002ab8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002abb:	8d 45 f4             	lea    eax,[ebp-0xc]
30002abe:	50                   	push   eax
30002abf:	e8 1b f7 ff ff       	call   300021df <localtime_rI>
30002ac4:	83 c4 08             	add    esp,0x8
30002ac7:	eb 0f                	jmp    30002ad8 <gettime+0x66>
/home/yogi/src/os/aproj/libChrisOS/src/time.c:199
    else
        return gmtime_rI((time_t*)&ticks,time);
30002ac9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
30002acc:	8d 45 f4             	lea    eax,[ebp-0xc]
30002acf:	50                   	push   eax
30002ad0:	e8 93 f3 ff ff       	call   30001e68 <gmtime_rI>
30002ad5:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/aproj/libChrisOS/src/time.c:200 (discriminator 1)
}
30002ad8:	8d 65 f8             	lea    esp,[ebp-0x8]
30002adb:	5b                   	pop    ebx
30002adc:	5e                   	pop    esi
30002add:	5d                   	pop    ebp
30002ade:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.ax:

30002adf <__x86.get_pc_thunk.ax>:
__x86.get_pc_thunk.ax():
30002adf:	8b 04 24             	mov    eax,DWORD PTR [esp]
30002ae2:	c3                   	ret    

Disassembly of section .plt:

30002af0 <.plt>:
30002af0:	ff b3 04 00 00 00    	push   DWORD PTR [ebx+0x4]
30002af6:	ff a3 08 00 00 00    	jmp    DWORD PTR [ebx+0x8]
30002afc:	00 00                	add    BYTE PTR [eax],al
30002afe:	00 00                	add    BYTE PTR [eax],al
30002b00:	ff a3 0c 00 00 00    	jmp    DWORD PTR [ebx+0xc]
30002b06:	68 00 00 00 00       	push   0x0
30002b0b:	e9 e0 ff ff ff       	jmp    30002af0 <__x86.get_pc_thunk.ax+0x11>

Disassembly of section .text.__x86.get_pc_thunk.bx:

30002b10 <__x86.get_pc_thunk.bx>:
__x86.get_pc_thunk.bx():
30002b10:	8b 1c 24             	mov    ebx,DWORD PTR [esp]
30002b13:	c3                   	ret    

Disassembly of section .text.__x86.get_pc_thunk.cx:

30002b14 <__x86.get_pc_thunk.cx>:
__x86.get_pc_thunk.cx():
30002b14:	8b 0c 24             	mov    ecx,DWORD PTR [esp]
30002b17:	c3                   	ret    

Disassembly of section .eh_frame:

30002b18 <.eh_frame>:
30002b18:	14 00                	adc    al,0x0
30002b1a:	00 00                	add    BYTE PTR [eax],al
30002b1c:	00 00                	add    BYTE PTR [eax],al
30002b1e:	00 00                	add    BYTE PTR [eax],al
30002b20:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30002b23:	00 01                	add    BYTE PTR [ecx],al
30002b25:	7c 08                	jl     30002b2f <__x86.get_pc_thunk.cx+0x1b>
30002b27:	01 1b                	add    DWORD PTR [ebx],ebx
30002b29:	0c 04                	or     al,0x4
30002b2b:	04 88                	add    al,0x88
30002b2d:	01 00                	add    DWORD PTR [eax],eax
30002b2f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002b32:	00 00                	add    BYTE PTR [eax],al
30002b34:	1c 00                	sbb    al,0x0
30002b36:	00 00                	add    BYTE PTR [eax],al
30002b38:	c8 d4 ff ff          	enter  0xffd4,0xff
30002b3c:	38 00                	cmp    BYTE PTR [eax],al
30002b3e:	00 00                	add    BYTE PTR [eax],al
30002b40:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002b43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b49:	74 c5                	je     30002b10 <__x86.get_pc_thunk.bx>
30002b4b:	0c 04                	or     al,0x4
30002b4d:	04 00                	add    al,0x0
30002b4f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002b52:	00 00                	add    BYTE PTR [eax],al
30002b54:	3c 00                	cmp    al,0x0
30002b56:	00 00                	add    BYTE PTR [eax],al
30002b58:	e0 d4                	loopne 30002b2e <__x86.get_pc_thunk.cx+0x1a>
30002b5a:	ff                   	(bad)  
30002b5b:	ff                   	(bad)  
30002b5c:	38 00                	cmp    BYTE PTR [eax],al
30002b5e:	00 00                	add    BYTE PTR [eax],al
30002b60:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002b63:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b69:	74 c5                	je     30002b30 <__x86.get_pc_thunk.cx+0x1c>
30002b6b:	0c 04                	or     al,0x4
30002b6d:	04 00                	add    al,0x0
30002b6f:	00 10                	add    BYTE PTR [eax],dl
30002b71:	00 00                	add    BYTE PTR [eax],al
30002b73:	00 5c 00 00          	add    BYTE PTR [eax+eax*1+0x0],bl
30002b77:	00 67 ff             	add    BYTE PTR [edi-0x1],ah
30002b7a:	ff                   	(bad)  
30002b7b:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002b7e:	00 00                	add    BYTE PTR [eax],al
30002b80:	00 00                	add    BYTE PTR [eax],al
30002b82:	00 00                	add    BYTE PTR [eax],al
30002b84:	24 00                	and    al,0x0
30002b86:	00 00                	add    BYTE PTR [eax],al
30002b88:	70 00                	jo     30002b8a <__x86.get_pc_thunk.cx+0x76>
30002b8a:	00 00                	add    BYTE PTR [eax],al
30002b8c:	e4 d4                	in     al,0xd4
30002b8e:	ff                   	(bad)  
30002b8f:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002b92:	00 00                	add    BYTE PTR [eax],al
30002b94:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002b97:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002b9d:	42                   	inc    edx
30002b9e:	86 03                	xchg   BYTE PTR [ebx],al
30002ba0:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002ba4:	c3                   	ret    
30002ba5:	41                   	inc    ecx
30002ba6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002baa:	04 04                	add    al,0x4
30002bac:	24 00                	and    al,0x0
30002bae:	00 00                	add    BYTE PTR [eax],al
30002bb0:	98                   	cwde   
30002bb1:	00 00                	add    BYTE PTR [eax],al
30002bb3:	00 11                	add    BYTE PTR [ecx],dl
30002bb5:	d5 ff                	aad    0xff
30002bb7:	ff 55 00             	call   DWORD PTR [ebp+0x0]
30002bba:	00 00                	add    BYTE PTR [eax],al
30002bbc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002bbf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bc5:	42                   	inc    edx
30002bc6:	86 03                	xchg   BYTE PTR [ebx],al
30002bc8:	83 04 02 4d          	add    DWORD PTR [edx+eax*1],0x4d
30002bcc:	c3                   	ret    
30002bcd:	41                   	inc    ecx
30002bce:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002bd2:	04 04                	add    al,0x4
30002bd4:	24 00                	and    al,0x0
30002bd6:	00 00                	add    BYTE PTR [eax],al
30002bd8:	c0 00 00             	rol    BYTE PTR [eax],0x0
30002bdb:	00 40 d5             	add    BYTE PTR [eax-0x2b],al
30002bde:	ff                   	(bad)  
30002bdf:	ff 97 00 00 00 00    	call   DWORD PTR [edi+0x0]
30002be5:	41                   	inc    ecx
30002be6:	0e                   	push   cs
30002be7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002bed:	42                   	inc    edx
30002bee:	86 03                	xchg   BYTE PTR [ebx],al
30002bf0:	83 04 02 8f          	add    DWORD PTR [edx+eax*1],0xffffff8f
30002bf4:	c3                   	ret    
30002bf5:	41                   	inc    ecx
30002bf6:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002bfa:	04 04                	add    al,0x4
30002bfc:	10 00                	adc    BYTE PTR [eax],al
30002bfe:	00 00                	add    BYTE PTR [eax],al
30002c00:	e8 00 00 00 0c       	call   3c002c05 <ticksToWait+0xbffe6f5>
30002c05:	ff                   	(bad)  
30002c06:	ff                   	(bad)  
30002c07:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30002c0a:	00 00                	add    BYTE PTR [eax],al
30002c0c:	00 00                	add    BYTE PTR [eax],al
30002c0e:	00 00                	add    BYTE PTR [eax],al
30002c10:	20 00                	and    BYTE PTR [eax],al
30002c12:	00 00                	add    BYTE PTR [eax],al
30002c14:	fc                   	cld    
30002c15:	00 00                	add    BYTE PTR [eax],al
30002c17:	00 9c d5 ff ff 77 00 	add    BYTE PTR [ebp+edx*8+0x77ffff],bl
30002c1e:	00 00                	add    BYTE PTR [eax],al
30002c20:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002c23:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c29:	44                   	inc    esp
30002c2a:	83 03 02             	add    DWORD PTR [ebx],0x2
30002c2d:	6f                   	outs   dx,DWORD PTR ds:[esi]
30002c2e:	c5 c3 0c             	(bad)  
30002c31:	04 04                	add    al,0x4
30002c33:	00 20                	add    BYTE PTR [eax],ah
30002c35:	00 00                	add    BYTE PTR [eax],al
30002c37:	00 20                	add    BYTE PTR [eax],ah
30002c39:	01 00                	add    DWORD PTR [eax],eax
30002c3b:	00 ef                	add    bh,ch
30002c3d:	d5 ff                	aad    0xff
30002c3f:	ff                   	(bad)  
30002c40:	bb 00 00 00 00       	mov    ebx,0x0
30002c45:	41                   	inc    ecx
30002c46:	0e                   	push   cs
30002c47:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c4d:	44                   	inc    esp
30002c4e:	83 03 02             	add    DWORD PTR [ebx],0x2
30002c51:	b3 c5                	mov    bl,0xc5
30002c53:	c3                   	ret    
30002c54:	0c 04                	or     al,0x4
30002c56:	04 00                	add    al,0x0
30002c58:	20 00                	and    BYTE PTR [eax],al
30002c5a:	00 00                	add    BYTE PTR [eax],al
30002c5c:	44                   	inc    esp
30002c5d:	01 00                	add    DWORD PTR [eax],eax
30002c5f:	00 86 d6 ff ff bb    	add    BYTE PTR [esi-0x4400002a],al
30002c65:	00 00                	add    BYTE PTR [eax],al
30002c67:	00 00                	add    BYTE PTR [eax],al
30002c69:	41                   	inc    ecx
30002c6a:	0e                   	push   cs
30002c6b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c71:	44                   	inc    esp
30002c72:	83 03 02             	add    DWORD PTR [ebx],0x2
30002c75:	b3 c5                	mov    bl,0xc5
30002c77:	c3                   	ret    
30002c78:	0c 04                	or     al,0x4
30002c7a:	04 00                	add    al,0x0
30002c7c:	1c 00                	sbb    al,0x0
30002c7e:	00 00                	add    BYTE PTR [eax],al
30002c80:	68 01 00 00 1d       	push   0x1d000001
30002c85:	d7                   	xlat   BYTE PTR ds:[ebx]
30002c86:	ff                   	(bad)  
30002c87:	ff 5c 00 00          	call   FWORD PTR [eax+eax*1+0x0]
30002c8b:	00 00                	add    BYTE PTR [eax],al
30002c8d:	41                   	inc    ecx
30002c8e:	0e                   	push   cs
30002c8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002c95:	02 58 c5             	add    bl,BYTE PTR [eax-0x3b]
30002c98:	0c 04                	or     al,0x4
30002c9a:	04 00                	add    al,0x0
30002c9c:	20 00                	and    BYTE PTR [eax],al
30002c9e:	00 00                	add    BYTE PTR [eax],al
30002ca0:	88 01                	mov    BYTE PTR [ecx],al
30002ca2:	00 00                	add    BYTE PTR [eax],al
30002ca4:	5c                   	pop    esp
30002ca5:	d7                   	xlat   BYTE PTR ds:[ebx]
30002ca6:	ff                   	(bad)  
30002ca7:	ff aa 00 00 00 00    	jmp    FWORD PTR [edx+0x0]
30002cad:	41                   	inc    ecx
30002cae:	0e                   	push   cs
30002caf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cb5:	44                   	inc    esp
30002cb6:	83 03 02             	add    DWORD PTR [ebx],0x2
30002cb9:	a2 c5 c3 0c 04       	mov    ds:0x40cc3c5,al
30002cbe:	04 00                	add    al,0x0
30002cc0:	20 00                	and    BYTE PTR [eax],al
30002cc2:	00 00                	add    BYTE PTR [eax],al
30002cc4:	ac                   	lods   al,BYTE PTR ds:[esi]
30002cc5:	01 00                	add    DWORD PTR [eax],eax
30002cc7:	00 e2                	add    dl,ah
30002cc9:	d7                   	xlat   BYTE PTR ds:[ebx]
30002cca:	ff                   	(bad)  
30002ccb:	ff c1                	inc    ecx
30002ccd:	01 00                	add    DWORD PTR [eax],eax
30002ccf:	00 00                	add    BYTE PTR [eax],al
30002cd1:	41                   	inc    ecx
30002cd2:	0e                   	push   cs
30002cd3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cd9:	44                   	inc    esp
30002cda:	83 03 03             	add    DWORD PTR [ebx],0x3
30002cdd:	b9 01 c5 c3 0c       	mov    ecx,0xcc3c501
30002ce2:	04 04                	add    al,0x4
30002ce4:	20 00                	and    BYTE PTR [eax],al
30002ce6:	00 00                	add    BYTE PTR [eax],al
30002ce8:	d0 01                	rol    BYTE PTR [ecx],1
30002cea:	00 00                	add    BYTE PTR [eax],al
30002cec:	80 d9 ff             	sbb    cl,0xff
30002cef:	ff 2d 00 00 00 00    	jmp    FWORD PTR ds:0x0
30002cf5:	41                   	inc    ecx
30002cf6:	0e                   	push   cs
30002cf7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002cfd:	44                   	inc    esp
30002cfe:	83 03 65             	add    DWORD PTR [ebx],0x65
30002d01:	c5 c3 0c             	(bad)  
30002d04:	04 04                	add    al,0x4
30002d06:	00 00                	add    BYTE PTR [eax],al
30002d08:	20 00                	and    BYTE PTR [eax],al
30002d0a:	00 00                	add    BYTE PTR [eax],al
30002d0c:	f4                   	hlt    
30002d0d:	01 00                	add    DWORD PTR [eax],eax
30002d0f:	00 89 d9 ff ff 2a    	add    BYTE PTR [ecx+0x2affffd9],cl
30002d15:	00 00                	add    BYTE PTR [eax],al
30002d17:	00 00                	add    BYTE PTR [eax],al
30002d19:	41                   	inc    ecx
30002d1a:	0e                   	push   cs
30002d1b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d21:	44                   	inc    esp
30002d22:	83 03 62             	add    DWORD PTR [ebx],0x62
30002d25:	c5 c3 0c             	(bad)  
30002d28:	04 04                	add    al,0x4
30002d2a:	00 00                	add    BYTE PTR [eax],al
30002d2c:	24 00                	and    al,0x0
30002d2e:	00 00                	add    BYTE PTR [eax],al
30002d30:	18 02                	sbb    BYTE PTR [edx],al
30002d32:	00 00                	add    BYTE PTR [eax],al
30002d34:	8f                   	(bad)  
30002d35:	d9 ff                	fcos   
30002d37:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30002d3d:	41                   	inc    ecx
30002d3e:	0e                   	push   cs
30002d3f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d45:	42                   	inc    edx
30002d46:	86 03                	xchg   BYTE PTR [ebx],al
30002d48:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30002d4f:	c5 
30002d50:	0c 04                	or     al,0x4
30002d52:	04 00                	add    al,0x0
30002d54:	24 00                	and    al,0x0
30002d56:	00 00                	add    BYTE PTR [eax],al
30002d58:	40                   	inc    eax
30002d59:	02 00                	add    al,BYTE PTR [eax]
30002d5b:	00 9c d9 ff ff 35 00 	add    BYTE PTR [ecx+ebx*8+0x35ffff],bl
30002d62:	00 00                	add    BYTE PTR [eax],al
30002d64:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002d67:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d6d:	42                   	inc    edx
30002d6e:	86 03                	xchg   BYTE PTR [ebx],al
30002d70:	83 04 6d c3 41 c6 41 	add    DWORD PTR [ebp*2+0x41c641c3],0xffffffc5
30002d77:	c5 
30002d78:	0c 04                	or     al,0x4
30002d7a:	04 00                	add    al,0x0
30002d7c:	20 00                	and    BYTE PTR [eax],al
30002d7e:	00 00                	add    BYTE PTR [eax],al
30002d80:	68 02 00 00 a9       	push   0xa9000002
30002d85:	d9 ff                	fcos   
30002d87:	ff 31                	push   DWORD PTR [ecx]
30002d89:	00 00                	add    BYTE PTR [eax],al
30002d8b:	00 00                	add    BYTE PTR [eax],al
30002d8d:	41                   	inc    ecx
30002d8e:	0e                   	push   cs
30002d8f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002d95:	44                   	inc    esp
30002d96:	83 03 69             	add    DWORD PTR [ebx],0x69
30002d99:	c5 c3 0c             	(bad)  
30002d9c:	04 04                	add    al,0x4
30002d9e:	00 00                	add    BYTE PTR [eax],al
30002da0:	20 00                	and    BYTE PTR [eax],al
30002da2:	00 00                	add    BYTE PTR [eax],al
30002da4:	8c 02                	mov    WORD PTR [edx],es
30002da6:	00 00                	add    BYTE PTR [eax],al
30002da8:	b8 d9 ff ff 26       	mov    eax,0x26ffffd9
30002dad:	00 00                	add    BYTE PTR [eax],al
30002daf:	00 00                	add    BYTE PTR [eax],al
30002db1:	41                   	inc    ecx
30002db2:	0e                   	push   cs
30002db3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002db9:	41                   	inc    ecx
30002dba:	83 03 60             	add    DWORD PTR [ebx],0x60
30002dbd:	c3                   	ret    
30002dbe:	41                   	inc    ecx
30002dbf:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002dc2:	04 00                	add    al,0x0
30002dc4:	20 00                	and    BYTE PTR [eax],al
30002dc6:	00 00                	add    BYTE PTR [eax],al
30002dc8:	b0 02                	mov    al,0x2
30002dca:	00 00                	add    BYTE PTR [eax],al
30002dcc:	ba d9 ff ff 43       	mov    edx,0x43ffffd9
30002dd1:	00 00                	add    BYTE PTR [eax],al
30002dd3:	00 00                	add    BYTE PTR [eax],al
30002dd5:	41                   	inc    ecx
30002dd6:	0e                   	push   cs
30002dd7:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ddd:	44                   	inc    esp
30002dde:	83 03 7a             	add    DWORD PTR [ebx],0x7a
30002de1:	c3                   	ret    
30002de2:	41                   	inc    ecx
30002de3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002de6:	04 00                	add    al,0x0
30002de8:	20 00                	and    BYTE PTR [eax],al
30002dea:	00 00                	add    BYTE PTR [eax],al
30002dec:	d4 02                	aam    0x2
30002dee:	00 00                	add    BYTE PTR [eax],al
30002df0:	d9 d9                	(bad)  
30002df2:	ff                   	(bad)  
30002df3:	ff 2f                	jmp    FWORD PTR [edi]
30002df5:	00 00                	add    BYTE PTR [eax],al
30002df7:	00 00                	add    BYTE PTR [eax],al
30002df9:	41                   	inc    ecx
30002dfa:	0e                   	push   cs
30002dfb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e01:	44                   	inc    esp
30002e02:	83 03 66             	add    DWORD PTR [ebx],0x66
30002e05:	c3                   	ret    
30002e06:	41                   	inc    ecx
30002e07:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002e0a:	04 00                	add    al,0x0
30002e0c:	20 00                	and    BYTE PTR [eax],al
30002e0e:	00 00                	add    BYTE PTR [eax],al
30002e10:	f8                   	clc    
30002e11:	02 00                	add    al,BYTE PTR [eax]
30002e13:	00 e4                	add    ah,ah
30002e15:	d9 ff                	fcos   
30002e17:	ff                   	(bad)  
30002e18:	ba 00 00 00 00       	mov    edx,0x0
30002e1d:	41                   	inc    ecx
30002e1e:	0e                   	push   cs
30002e1f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e25:	44                   	inc    esp
30002e26:	83 03 02             	add    DWORD PTR [ebx],0x2
30002e29:	b2 c5                	mov    dl,0xc5
30002e2b:	c3                   	ret    
30002e2c:	0c 04                	or     al,0x4
30002e2e:	04 00                	add    al,0x0
30002e30:	24 00                	and    al,0x0
30002e32:	00 00                	add    BYTE PTR [eax],al
30002e34:	1c 03                	sbb    al,0x3
30002e36:	00 00                	add    BYTE PTR [eax],al
30002e38:	7c da                	jl     30002e14 <__x86.get_pc_thunk.cx+0x300>
30002e3a:	ff                   	(bad)  
30002e3b:	ff                   	(bad)  
30002e3c:	3a 00                	cmp    al,BYTE PTR [eax]
30002e3e:	00 00                	add    BYTE PTR [eax],al
30002e40:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002e43:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e49:	45                   	inc    ebp
30002e4a:	86 03                	xchg   BYTE PTR [ebx],al
30002e4c:	83 04 6f c3          	add    DWORD PTR [edi+ebp*2],0xffffffc3
30002e50:	41                   	inc    ecx
30002e51:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002e55:	04 04                	add    al,0x4
30002e57:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002e5a:	00 00                	add    BYTE PTR [eax],al
30002e5c:	44                   	inc    esp
30002e5d:	03 00                	add    eax,DWORD PTR [eax]
30002e5f:	00 8e da ff ff 3c    	add    BYTE PTR [esi+0x3cffffda],cl
30002e65:	00 00                	add    BYTE PTR [eax],al
30002e67:	00 00                	add    BYTE PTR [eax],al
30002e69:	41                   	inc    ecx
30002e6a:	0e                   	push   cs
30002e6b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e71:	45                   	inc    ebp
30002e72:	86 03                	xchg   BYTE PTR [ebx],al
30002e74:	83 04 71 c3          	add    DWORD PTR [ecx+esi*2],0xffffffc3
30002e78:	41                   	inc    ecx
30002e79:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002e7d:	04 04                	add    al,0x4
30002e7f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002e82:	00 00                	add    BYTE PTR [eax],al
30002e84:	6c                   	ins    BYTE PTR es:[edi],dx
30002e85:	03 00                	add    eax,DWORD PTR [eax]
30002e87:	00 a2 da ff ff 3e    	add    BYTE PTR [edx+0x3effffda],ah
30002e8d:	00 00                	add    BYTE PTR [eax],al
30002e8f:	00 00                	add    BYTE PTR [eax],al
30002e91:	41                   	inc    ecx
30002e92:	0e                   	push   cs
30002e93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002e99:	45                   	inc    ebp
30002e9a:	86 03                	xchg   BYTE PTR [ebx],al
30002e9c:	83 04 73 c3          	add    DWORD PTR [ebx+esi*2],0xffffffc3
30002ea0:	41                   	inc    ecx
30002ea1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002ea5:	04 04                	add    al,0x4
30002ea7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002eaa:	00 00                	add    BYTE PTR [eax],al
30002eac:	94                   	xchg   esp,eax
30002ead:	03 00                	add    eax,DWORD PTR [eax]
30002eaf:	00 b8 da ff ff 40    	add    BYTE PTR [eax+0x40ffffda],bh
30002eb5:	00 00                	add    BYTE PTR [eax],al
30002eb7:	00 00                	add    BYTE PTR [eax],al
30002eb9:	41                   	inc    ecx
30002eba:	0e                   	push   cs
30002ebb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ec1:	45                   	inc    ebp
30002ec2:	86 03                	xchg   BYTE PTR [ebx],al
30002ec4:	83 04 75 c3 41 c6 41 	add    DWORD PTR [esi*2+0x41c641c3],0xffffffc5
30002ecb:	c5 
30002ecc:	0c 04                	or     al,0x4
30002ece:	04 00                	add    al,0x0
30002ed0:	24 00                	and    al,0x0
30002ed2:	00 00                	add    BYTE PTR [eax],al
30002ed4:	bc 03 00 00 d0       	mov    esp,0xd0000003
30002ed9:	da ff                	(bad)  
30002edb:	ff 42 00             	inc    DWORD PTR [edx+0x0]
30002ede:	00 00                	add    BYTE PTR [eax],al
30002ee0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002ee3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002ee9:	45                   	inc    ebp
30002eea:	86 03                	xchg   BYTE PTR [ebx],al
30002eec:	83 04 77 c3          	add    DWORD PTR [edi+esi*2],0xffffffc3
30002ef0:	41                   	inc    ecx
30002ef1:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002ef5:	04 04                	add    al,0x4
30002ef7:	00 20                	add    BYTE PTR [eax],ah
30002ef9:	00 00                	add    BYTE PTR [eax],al
30002efb:	00 e4                	add    ah,ah
30002efd:	03 00                	add    eax,DWORD PTR [eax]
30002eff:	00 ea                	add    dl,ch
30002f01:	da ff                	(bad)  
30002f03:	ff a5 00 00 00 00    	jmp    DWORD PTR [ebp+0x0]
30002f09:	41                   	inc    ecx
30002f0a:	0e                   	push   cs
30002f0b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f11:	44                   	inc    esp
30002f12:	83 03 02             	add    DWORD PTR [ebx],0x2
30002f15:	9d                   	popf   
30002f16:	c5 c3 0c             	(bad)  
30002f19:	04 04                	add    al,0x4
30002f1b:	00 20                	add    BYTE PTR [eax],ah
30002f1d:	00 00                	add    BYTE PTR [eax],al
30002f1f:	00 08                	add    BYTE PTR [eax],cl
30002f21:	04 00                	add    al,0x0
30002f23:	00 6b db             	add    BYTE PTR [ebx-0x25],ch
30002f26:	ff                   	(bad)  
30002f27:	ff 1f                	call   FWORD PTR [edi]
30002f29:	00 00                	add    BYTE PTR [eax],al
30002f2b:	00 00                	add    BYTE PTR [eax],al
30002f2d:	41                   	inc    ecx
30002f2e:	0e                   	push   cs
30002f2f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f35:	44                   	inc    esp
30002f36:	83 03 56             	add    DWORD PTR [ebx],0x56
30002f39:	c3                   	ret    
30002f3a:	41                   	inc    ecx
30002f3b:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002f3e:	04 00                	add    al,0x0
30002f40:	1c 00                	sbb    al,0x0
30002f42:	00 00                	add    BYTE PTR [eax],al
30002f44:	2c 04                	sub    al,0x4
30002f46:	00 00                	add    BYTE PTR [eax],al
30002f48:	66                   	data16
30002f49:	db ff                	(bad)  
30002f4b:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002f4e:	00 00                	add    BYTE PTR [eax],al
30002f50:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f53:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f59:	70 c5                	jo     30002f20 <__x86.get_pc_thunk.cx+0x40c>
30002f5b:	0c 04                	or     al,0x4
30002f5d:	04 00                	add    al,0x0
30002f5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f62:	00 00                	add    BYTE PTR [eax],al
30002f64:	4c                   	dec    esp
30002f65:	04 00                	add    al,0x0
30002f67:	00 7a db             	add    BYTE PTR [edx-0x25],bh
30002f6a:	ff                   	(bad)  
30002f6b:	ff 34 00             	push   DWORD PTR [eax+eax*1]
30002f6e:	00 00                	add    BYTE PTR [eax],al
30002f70:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30002f73:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f79:	70 c5                	jo     30002f40 <__x86.get_pc_thunk.cx+0x42c>
30002f7b:	0c 04                	or     al,0x4
30002f7d:	04 00                	add    al,0x0
30002f7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002f82:	00 00                	add    BYTE PTR [eax],al
30002f84:	6c                   	ins    BYTE PTR es:[edi],dx
30002f85:	04 00                	add    al,0x0
30002f87:	00 8e db ff ff 37    	add    BYTE PTR [esi+0x37ffffdb],cl
30002f8d:	00 00                	add    BYTE PTR [eax],al
30002f8f:	00 00                	add    BYTE PTR [eax],al
30002f91:	41                   	inc    ecx
30002f92:	0e                   	push   cs
30002f93:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002f99:	73 c5                	jae    30002f60 <__x86.get_pc_thunk.cx+0x44c>
30002f9b:	0c 04                	or     al,0x4
30002f9d:	04 00                	add    al,0x0
30002f9f:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30002fa2:	00 00                	add    BYTE PTR [eax],al
30002fa4:	8c 04 00             	mov    WORD PTR [eax+eax*1],es
30002fa7:	00 a5 db ff ff 72    	add    BYTE PTR [ebp+0x72ffffdb],ah
30002fad:	00 00                	add    BYTE PTR [eax],al
30002faf:	00 00                	add    BYTE PTR [eax],al
30002fb1:	41                   	inc    ecx
30002fb2:	0e                   	push   cs
30002fb3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fb9:	45                   	inc    ebp
30002fba:	86 03                	xchg   BYTE PTR [ebx],al
30002fbc:	83 04 02 67          	add    DWORD PTR [edx+eax*1],0x67
30002fc0:	c3                   	ret    
30002fc1:	41                   	inc    ecx
30002fc2:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30002fc6:	04 04                	add    al,0x4
30002fc8:	1c 00                	sbb    al,0x0
30002fca:	00 00                	add    BYTE PTR [eax],al
30002fcc:	b4 04                	mov    ah,0x4
30002fce:	00 00                	add    BYTE PTR [eax],al
30002fd0:	ef                   	out    dx,eax
30002fd1:	db ff                	(bad)  
30002fd3:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30002fd9:	41                   	inc    ecx
30002fda:	0e                   	push   cs
30002fdb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30002fe1:	59                   	pop    ecx
30002fe2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30002fe5:	04 00                	add    al,0x0
30002fe7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30002fea:	00 00                	add    BYTE PTR [eax],al
30002fec:	d4 04                	aam    0x4
30002fee:	00 00                	add    BYTE PTR [eax],al
30002ff0:	ec                   	in     al,dx
30002ff1:	db ff                	(bad)  
30002ff3:	ff 29                	jmp    FWORD PTR [ecx]
30002ff5:	00 00                	add    BYTE PTR [eax],al
30002ff7:	00 00                	add    BYTE PTR [eax],al
30002ff9:	41                   	inc    ecx
30002ffa:	0e                   	push   cs
30002ffb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003001:	65 c5 0c 04          	lds    ecx,FWORD PTR gs:[esp+eax*1]
30003005:	04 00                	add    al,0x0
30003007:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000300a:	00 00                	add    BYTE PTR [eax],al
3000300c:	f4                   	hlt    
3000300d:	04 00                	add    al,0x0
3000300f:	00 f5                	add    ch,dh
30003011:	db ff                	(bad)  
30003013:	ff 19                	call   FWORD PTR [ecx]
30003015:	00 00                	add    BYTE PTR [eax],al
30003017:	00 00                	add    BYTE PTR [eax],al
30003019:	41                   	inc    ecx
3000301a:	0e                   	push   cs
3000301b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003021:	55                   	push   ebp
30003022:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003025:	04 00                	add    al,0x0
30003027:	00 20                	add    BYTE PTR [eax],ah
30003029:	00 00                	add    BYTE PTR [eax],al
3000302b:	00 14 05 00 00 ee db 	add    BYTE PTR [eax*1-0x24120000],dl
30003032:	ff                   	(bad)  
30003033:	ff f1                	push   ecx
30003035:	01 00                	add    DWORD PTR [eax],eax
30003037:	00 00                	add    BYTE PTR [eax],al
30003039:	41                   	inc    ecx
3000303a:	0e                   	push   cs
3000303b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003041:	44                   	inc    esp
30003042:	83 03 03             	add    DWORD PTR [ebx],0x3
30003045:	e9 01 c5 c3 0c       	jmp    3cc3f54b <ticksToWait+0xcc3b03b>
3000304a:	04 04                	add    al,0x4
3000304c:	1c 00                	sbb    al,0x0
3000304e:	00 00                	add    BYTE PTR [eax],al
30003050:	38 05 00 00 bb dd    	cmp    BYTE PTR ds:0xddbb0000,al
30003056:	ff                   	(bad)  
30003057:	ff 4c 00 00          	dec    DWORD PTR [eax+eax*1+0x0]
3000305b:	00 00                	add    BYTE PTR [eax],al
3000305d:	41                   	inc    ecx
3000305e:	0e                   	push   cs
3000305f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003065:	02 48 c5             	add    cl,BYTE PTR [eax-0x3b]
30003068:	0c 04                	or     al,0x4
3000306a:	04 00                	add    al,0x0
3000306c:	1c 00                	sbb    al,0x0
3000306e:	00 00                	add    BYTE PTR [eax],al
30003070:	58                   	pop    eax
30003071:	05 00 00 e7 dd       	add    eax,0xdde70000
30003076:	ff                   	(bad)  
30003077:	ff 1c 00             	call   FWORD PTR [eax+eax*1]
3000307a:	00 00                	add    BYTE PTR [eax],al
3000307c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000307f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003085:	58                   	pop    eax
30003086:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003089:	04 00                	add    al,0x0
3000308b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000308e:	00 00                	add    BYTE PTR [eax],al
30003090:	78 05                	js     30003097 <__x86.get_pc_thunk.cx+0x583>
30003092:	00 00                	add    BYTE PTR [eax],al
30003094:	e3 dd                	jecxz  30003073 <__x86.get_pc_thunk.cx+0x55f>
30003096:	ff                   	(bad)  
30003097:	ff 20                	jmp    DWORD PTR [eax]
30003099:	00 00                	add    BYTE PTR [eax],al
3000309b:	00 00                	add    BYTE PTR [eax],al
3000309d:	41                   	inc    ecx
3000309e:	0e                   	push   cs
3000309f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030a5:	5c                   	pop    esp
300030a6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300030a9:	04 00                	add    al,0x0
300030ab:	00 20                	add    BYTE PTR [eax],ah
300030ad:	00 00                	add    BYTE PTR [eax],al
300030af:	00 98 05 00 00 e4    	add    BYTE PTR [eax-0x1bfffffb],bl
300030b5:	dd ff                	(bad)  
300030b7:	ff 6c 00 00          	jmp    FWORD PTR [eax+eax*1+0x0]
300030bb:	00 00                	add    BYTE PTR [eax],al
300030bd:	41                   	inc    ecx
300030be:	0e                   	push   cs
300030bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030c5:	44                   	inc    esp
300030c6:	83 03 02             	add    DWORD PTR [ebx],0x2
300030c9:	64                   	fs
300030ca:	c5 c3 0c             	(bad)  
300030cd:	04 04                	add    al,0x4
300030cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300030d2:	00 00                	add    BYTE PTR [eax],al
300030d4:	bc 05 00 00 2c       	mov    esp,0x2c000005
300030d9:	de ff                	fdivp  st(7),st
300030db:	ff 87 00 00 00 00    	inc    DWORD PTR [edi+0x0]
300030e1:	41                   	inc    ecx
300030e2:	0e                   	push   cs
300030e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300030e9:	02 83 c5 0c 04 04    	add    al,BYTE PTR [ebx+0x4040cc5]
300030ef:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300030f2:	00 00                	add    BYTE PTR [eax],al
300030f4:	dc 05 00 00 93 de    	fadd   QWORD PTR ds:0xde930000
300030fa:	ff                   	(bad)  
300030fb:	ff                   	(bad)  
300030fc:	39 00                	cmp    DWORD PTR [eax],eax
300030fe:	00 00                	add    BYTE PTR [eax],al
30003100:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003103:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003109:	75 c5                	jne    300030d0 <__x86.get_pc_thunk.cx+0x5bc>
3000310b:	0c 04                	or     al,0x4
3000310d:	04 00                	add    al,0x0
3000310f:	00 20                	add    BYTE PTR [eax],ah
30003111:	00 00                	add    BYTE PTR [eax],al
30003113:	00 fc                	add    ah,bh
30003115:	05 00 00 ac de       	add    eax,0xdeac0000
3000311a:	ff                   	(bad)  
3000311b:	ff d4                	call   esp
3000311d:	01 00                	add    DWORD PTR [eax],eax
3000311f:	00 00                	add    BYTE PTR [eax],al
30003121:	41                   	inc    ecx
30003122:	0e                   	push   cs
30003123:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003129:	44                   	inc    esp
3000312a:	83 03 03             	add    DWORD PTR [ebx],0x3
3000312d:	cc                   	int3   
3000312e:	01 c5                	add    ebp,eax
30003130:	c3                   	ret    
30003131:	0c 04                	or     al,0x4
30003133:	04 1c                	add    al,0x1c
30003135:	00 00                	add    BYTE PTR [eax],al
30003137:	00 20                	add    BYTE PTR [eax],ah
30003139:	06                   	push   es
3000313a:	00 00                	add    BYTE PTR [eax],al
3000313c:	5c                   	pop    esp
3000313d:	e0 ff                	loopne 3000313e <__x86.get_pc_thunk.cx+0x62a>
3000313f:	ff 20                	jmp    DWORD PTR [eax]
30003141:	00 00                	add    BYTE PTR [eax],al
30003143:	00 00                	add    BYTE PTR [eax],al
30003145:	41                   	inc    ecx
30003146:	0e                   	push   cs
30003147:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000314d:	5c                   	pop    esp
3000314e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003151:	04 00                	add    al,0x0
30003153:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003156:	00 00                	add    BYTE PTR [eax],al
30003158:	40                   	inc    eax
30003159:	06                   	push   es
3000315a:	00 00                	add    BYTE PTR [eax],al
3000315c:	5c                   	pop    esp
3000315d:	e0 ff                	loopne 3000315e <__x86.get_pc_thunk.cx+0x64a>
3000315f:	ff 1b                	call   FWORD PTR [ebx]
30003161:	00 00                	add    BYTE PTR [eax],al
30003163:	00 00                	add    BYTE PTR [eax],al
30003165:	41                   	inc    ecx
30003166:	0e                   	push   cs
30003167:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000316d:	57                   	push   edi
3000316e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003171:	04 00                	add    al,0x0
30003173:	00 20                	add    BYTE PTR [eax],ah
30003175:	00 00                	add    BYTE PTR [eax],al
30003177:	00 60 06             	add    BYTE PTR [eax+0x6],ah
3000317a:	00 00                	add    BYTE PTR [eax],al
3000317c:	57                   	push   edi
3000317d:	e0 ff                	loopne 3000317e <__x86.get_pc_thunk.cx+0x66a>
3000317f:	ff 32                	push   DWORD PTR [edx]
30003181:	00 00                	add    BYTE PTR [eax],al
30003183:	00 00                	add    BYTE PTR [eax],al
30003185:	41                   	inc    ecx
30003186:	0e                   	push   cs
30003187:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000318d:	44                   	inc    esp
3000318e:	83 03 6a             	add    DWORD PTR [ebx],0x6a
30003191:	c5 c3 0c             	(bad)  
30003194:	04 04                	add    al,0x4
30003196:	00 00                	add    BYTE PTR [eax],al
30003198:	1c 00                	sbb    al,0x0
3000319a:	00 00                	add    BYTE PTR [eax],al
3000319c:	84 06                	test   BYTE PTR [esi],al
3000319e:	00 00                	add    BYTE PTR [eax],al
300031a0:	68 e0 ff ff 9b       	push   0x9bffffe0
300031a5:	01 00                	add    DWORD PTR [eax],eax
300031a7:	00 00                	add    BYTE PTR [eax],al
300031a9:	41                   	inc    ecx
300031aa:	0e                   	push   cs
300031ab:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031b1:	03 97 01 c5 0c 04    	add    edx,DWORD PTR [edi+0x40cc501]
300031b7:	04 1c                	add    al,0x1c
300031b9:	00 00                	add    BYTE PTR [eax],al
300031bb:	00 a4 06 00 00 e4 e1 	add    BYTE PTR [esi+eax*1-0x1e1c0000],ah
300031c2:	ff                   	(bad)  
300031c3:	ff c7                	inc    edi
300031c5:	00 00                	add    BYTE PTR [eax],al
300031c7:	00 00                	add    BYTE PTR [eax],al
300031c9:	41                   	inc    ecx
300031ca:	0e                   	push   cs
300031cb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031d1:	02 c3                	add    al,bl
300031d3:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300031d6:	04 00                	add    al,0x0
300031d8:	1c 00                	sbb    al,0x0
300031da:	00 00                	add    BYTE PTR [eax],al
300031dc:	c4 06                	les    eax,FWORD PTR [esi]
300031de:	00 00                	add    BYTE PTR [eax],al
300031e0:	8b e2                	mov    esp,edx
300031e2:	ff                   	(bad)  
300031e3:	ff 20                	jmp    DWORD PTR [eax]
300031e5:	00 00                	add    BYTE PTR [eax],al
300031e7:	00 00                	add    BYTE PTR [eax],al
300031e9:	41                   	inc    ecx
300031ea:	0e                   	push   cs
300031eb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300031f1:	5c                   	pop    esp
300031f2:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300031f5:	04 00                	add    al,0x0
300031f7:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300031fa:	00 00                	add    BYTE PTR [eax],al
300031fc:	e4 06                	in     al,0x6
300031fe:	00 00                	add    BYTE PTR [eax],al
30003200:	8c e2                	mov    edx,fs
30003202:	ff                   	(bad)  
30003203:	ff 14 00             	call   DWORD PTR [eax+eax*1]
30003206:	00 00                	add    BYTE PTR [eax],al
30003208:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000320b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003211:	50                   	push   eax
30003212:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003215:	04 00                	add    al,0x0
30003217:	00 20                	add    BYTE PTR [eax],ah
30003219:	00 00                	add    BYTE PTR [eax],al
3000321b:	00 04 07             	add    BYTE PTR [edi+eax*1],al
3000321e:	00 00                	add    BYTE PTR [eax],al
30003220:	80 e2 ff             	and    dl,0xff
30003223:	ff 29                	jmp    FWORD PTR [ecx]
30003225:	00 00                	add    BYTE PTR [eax],al
30003227:	00 00                	add    BYTE PTR [eax],al
30003229:	41                   	inc    ecx
3000322a:	0e                   	push   cs
3000322b:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003231:	44                   	inc    esp
30003232:	83 03 61             	add    DWORD PTR [ebx],0x61
30003235:	c5 c3 0c             	(bad)  
30003238:	04 04                	add    al,0x4
3000323a:	00 00                	add    BYTE PTR [eax],al
3000323c:	20 00                	and    BYTE PTR [eax],al
3000323e:	00 00                	add    BYTE PTR [eax],al
30003240:	28 07                	sub    BYTE PTR [edi],al
30003242:	00 00                	add    BYTE PTR [eax],al
30003244:	88 e2                	mov    dl,ah
30003246:	ff                   	(bad)  
30003247:	ff 84 00 00 00 00 41 	inc    DWORD PTR [eax+eax*1+0x41000000]
3000324e:	0e                   	push   cs
3000324f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003255:	44                   	inc    esp
30003256:	83 03 02             	add    DWORD PTR [ebx],0x2
30003259:	7c c5                	jl     30003220 <__x86.get_pc_thunk.cx+0x70c>
3000325b:	c3                   	ret    
3000325c:	0c 04                	or     al,0x4
3000325e:	04 00                	add    al,0x0
30003260:	20 00                	and    BYTE PTR [eax],al
30003262:	00 00                	add    BYTE PTR [eax],al
30003264:	4c                   	dec    esp
30003265:	07                   	pop    es
30003266:	00 00                	add    BYTE PTR [eax],al
30003268:	e8 e2 ff ff 3e       	call   6f00324f <ticksToWait+0x3effed3f>
3000326d:	00 00                	add    BYTE PTR [eax],al
3000326f:	00 00                	add    BYTE PTR [eax],al
30003271:	41                   	inc    ecx
30003272:	0e                   	push   cs
30003273:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003279:	44                   	inc    esp
3000327a:	83 03 76             	add    DWORD PTR [ebx],0x76
3000327d:	c5 c3 0c             	(bad)  
30003280:	04 04                	add    al,0x4
30003282:	00 00                	add    BYTE PTR [eax],al
30003284:	20 00                	and    BYTE PTR [eax],al
30003286:	00 00                	add    BYTE PTR [eax],al
30003288:	70 07                	jo     30003291 <__x86.get_pc_thunk.cx+0x77d>
3000328a:	00 00                	add    BYTE PTR [eax],al
3000328c:	02 e3                	add    ah,bl
3000328e:	ff                   	(bad)  
3000328f:	ff                   	(bad)  
30003290:	3e 00 00             	add    BYTE PTR ds:[eax],al
30003293:	00 00                	add    BYTE PTR [eax],al
30003295:	41                   	inc    ecx
30003296:	0e                   	push   cs
30003297:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000329d:	44                   	inc    esp
3000329e:	83 03 76             	add    DWORD PTR [ebx],0x76
300032a1:	c5 c3 0c             	(bad)  
300032a4:	04 04                	add    al,0x4
300032a6:	00 00                	add    BYTE PTR [eax],al
300032a8:	1c 00                	sbb    al,0x0
300032aa:	00 00                	add    BYTE PTR [eax],al
300032ac:	94                   	xchg   esp,eax
300032ad:	07                   	pop    es
300032ae:	00 00                	add    BYTE PTR [eax],al
300032b0:	1c e3                	sbb    al,0xe3
300032b2:	ff                   	(bad)  
300032b3:	ff 6f 00             	jmp    FWORD PTR [edi+0x0]
300032b6:	00 00                	add    BYTE PTR [eax],al
300032b8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300032bb:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032c1:	02 6b c5             	add    ch,BYTE PTR [ebx-0x3b]
300032c4:	0c 04                	or     al,0x4
300032c6:	04 00                	add    al,0x0
300032c8:	24 00                	and    al,0x0
300032ca:	00 00                	add    BYTE PTR [eax],al
300032cc:	b4 07                	mov    ah,0x7
300032ce:	00 00                	add    BYTE PTR [eax],al
300032d0:	6c                   	ins    BYTE PTR es:[edi],dx
300032d1:	e3 ff                	jecxz  300032d2 <__x86.get_pc_thunk.cx+0x7be>
300032d3:	ff 5e 00             	call   FWORD PTR [esi+0x0]
300032d6:	00 00                	add    BYTE PTR [eax],al
300032d8:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300032db:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300032e1:	45                   	inc    ebp
300032e2:	86 03                	xchg   BYTE PTR [ebx],al
300032e4:	83 04 02 53          	add    DWORD PTR [edx+eax*1],0x53
300032e8:	c3                   	ret    
300032e9:	41                   	inc    ecx
300032ea:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
300032ee:	04 04                	add    al,0x4
300032f0:	1c 00                	sbb    al,0x0
300032f2:	00 00                	add    BYTE PTR [eax],al
300032f4:	dc 07                	fadd   QWORD PTR [edi]
300032f6:	00 00                	add    BYTE PTR [eax],al
300032f8:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
300032f9:	e3 ff                	jecxz  300032fa <__x86.get_pc_thunk.cx+0x7e6>
300032fb:	ff 40 00             	inc    DWORD PTR [eax+0x0]
300032fe:	00 00                	add    BYTE PTR [eax],al
30003300:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003303:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003309:	7c c5                	jl     300032d0 <__x86.get_pc_thunk.cx+0x7bc>
3000330b:	0c 04                	or     al,0x4
3000330d:	04 00                	add    al,0x0
3000330f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003312:	00 00                	add    BYTE PTR [eax],al
30003314:	fc                   	cld    
30003315:	07                   	pop    es
30003316:	00 00                	add    BYTE PTR [eax],al
30003318:	c4 e3 ff ff          	(bad)  
3000331c:	40                   	inc    eax
3000331d:	00 00                	add    BYTE PTR [eax],al
3000331f:	00 00                	add    BYTE PTR [eax],al
30003321:	41                   	inc    ecx
30003322:	0e                   	push   cs
30003323:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003329:	7c c5                	jl     300032f0 <__x86.get_pc_thunk.cx+0x7dc>
3000332b:	0c 04                	or     al,0x4
3000332d:	04 00                	add    al,0x0
3000332f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003332:	00 00                	add    BYTE PTR [eax],al
30003334:	1c 08                	sbb    al,0x8
30003336:	00 00                	add    BYTE PTR [eax],al
30003338:	e4 e3                	in     al,0xe3
3000333a:	ff                   	(bad)  
3000333b:	ff 47 00             	inc    DWORD PTR [edi+0x0]
3000333e:	00 00                	add    BYTE PTR [eax],al
30003340:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003343:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003349:	02 43 c5             	add    al,BYTE PTR [ebx-0x3b]
3000334c:	0c 04                	or     al,0x4
3000334e:	04 00                	add    al,0x0
30003350:	1c 00                	sbb    al,0x0
30003352:	00 00                	add    BYTE PTR [eax],al
30003354:	3c 08                	cmp    al,0x8
30003356:	00 00                	add    BYTE PTR [eax],al
30003358:	0c e4                	or     al,0xe4
3000335a:	ff                   	(bad)  
3000335b:	ff 30                	push   DWORD PTR [eax]
3000335d:	00 00                	add    BYTE PTR [eax],al
3000335f:	00 00                	add    BYTE PTR [eax],al
30003361:	41                   	inc    ecx
30003362:	0e                   	push   cs
30003363:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003369:	6c                   	ins    BYTE PTR es:[edi],dx
3000336a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000336d:	04 00                	add    al,0x0
3000336f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003372:	00 00                	add    BYTE PTR [eax],al
30003374:	5c                   	pop    esp
30003375:	08 00                	or     BYTE PTR [eax],al
30003377:	00 1c e4             	add    BYTE PTR [esp+eiz*8],bl
3000337a:	ff                   	(bad)  
3000337b:	ff 59 00             	call   FWORD PTR [ecx+0x0]
3000337e:	00 00                	add    BYTE PTR [eax],al
30003380:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003383:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003389:	02 55 c5             	add    dl,BYTE PTR [ebp-0x3b]
3000338c:	0c 04                	or     al,0x4
3000338e:	04 00                	add    al,0x0
30003390:	1c 00                	sbb    al,0x0
30003392:	00 00                	add    BYTE PTR [eax],al
30003394:	7c 08                	jl     3000339e <__x86.get_pc_thunk.cx+0x88a>
30003396:	00 00                	add    BYTE PTR [eax],al
30003398:	58                   	pop    eax
30003399:	e4 ff                	in     al,0xff
3000339b:	ff 31                	push   DWORD PTR [ecx]
3000339d:	00 00                	add    BYTE PTR [eax],al
3000339f:	00 00                	add    BYTE PTR [eax],al
300033a1:	41                   	inc    ecx
300033a2:	0e                   	push   cs
300033a3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033a9:	6d                   	ins    DWORD PTR es:[edi],dx
300033aa:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033ad:	04 00                	add    al,0x0
300033af:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300033b2:	00 00                	add    BYTE PTR [eax],al
300033b4:	9c                   	pushf  
300033b5:	08 00                	or     BYTE PTR [eax],al
300033b7:	00 69 e4             	add    BYTE PTR [ecx-0x1c],ch
300033ba:	ff                   	(bad)  
300033bb:	ff 31                	push   DWORD PTR [ecx]
300033bd:	00 00                	add    BYTE PTR [eax],al
300033bf:	00 00                	add    BYTE PTR [eax],al
300033c1:	41                   	inc    ecx
300033c2:	0e                   	push   cs
300033c3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033c9:	6d                   	ins    DWORD PTR es:[edi],dx
300033ca:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300033cd:	04 00                	add    al,0x0
300033cf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
300033d2:	00 00                	add    BYTE PTR [eax],al
300033d4:	bc 08 00 00 7c       	mov    esp,0x7c000008
300033d9:	e4 ff                	in     al,0xff
300033db:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
300033de:	00 00                	add    BYTE PTR [eax],al
300033e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300033e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300033e9:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
300033ec:	0c 04                	or     al,0x4
300033ee:	04 00                	add    al,0x0
300033f0:	1c 00                	sbb    al,0x0
300033f2:	00 00                	add    BYTE PTR [eax],al
300033f4:	dc 08                	fmul   QWORD PTR [eax]
300033f6:	00 00                	add    BYTE PTR [eax],al
300033f8:	c3                   	ret    
300033f9:	e4 ff                	in     al,0xff
300033fb:	ff 67 00             	jmp    DWORD PTR [edi+0x0]
300033fe:	00 00                	add    BYTE PTR [eax],al
30003400:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003403:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003409:	02 63 c5             	add    ah,BYTE PTR [ebx-0x3b]
3000340c:	0c 04                	or     al,0x4
3000340e:	04 00                	add    al,0x0
30003410:	1c 00                	sbb    al,0x0
30003412:	00 00                	add    BYTE PTR [eax],al
30003414:	fc                   	cld    
30003415:	08 00                	or     BYTE PTR [eax],al
30003417:	00 0c e5 ff ff 60 00 	add    BYTE PTR [eiz*8+0x60ffff],cl
3000341e:	00 00                	add    BYTE PTR [eax],al
30003420:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003423:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003429:	02 5c c5 0c          	add    bl,BYTE PTR [ebp+eax*8+0xc]
3000342d:	04 04                	add    al,0x4
3000342f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003432:	00 00                	add    BYTE PTR [eax],al
30003434:	1c 09                	sbb    al,0x9
30003436:	00 00                	add    BYTE PTR [eax],al
30003438:	4c                   	dec    esp
30003439:	e5 ff                	in     eax,0xff
3000343b:	ff 20                	jmp    DWORD PTR [eax]
3000343d:	00 00                	add    BYTE PTR [eax],al
3000343f:	00 00                	add    BYTE PTR [eax],al
30003441:	41                   	inc    ecx
30003442:	0e                   	push   cs
30003443:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003449:	5c                   	pop    esp
3000344a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000344d:	04 00                	add    al,0x0
3000344f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003452:	00 00                	add    BYTE PTR [eax],al
30003454:	3c 09                	cmp    al,0x9
30003456:	00 00                	add    BYTE PTR [eax],al
30003458:	4c                   	dec    esp
30003459:	e5 ff                	in     eax,0xff
3000345b:	ff                   	(bad)  
3000345c:	7d 01                	jge    3000345f <__x86.get_pc_thunk.cx+0x94b>
3000345e:	00 00                	add    BYTE PTR [eax],al
30003460:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003463:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003469:	46                   	inc    esi
3000346a:	87 03                	xchg   DWORD PTR [ebx],eax
3000346c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
3000346f:	05 03 70 01 c3       	add    eax,0xc3017003
30003474:	41                   	inc    ecx
30003475:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003479:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000347c:	04 00                	add    al,0x0
3000347e:	00 00                	add    BYTE PTR [eax],al
30003480:	1c 00                	sbb    al,0x0
30003482:	00 00                	add    BYTE PTR [eax],al
30003484:	6c                   	ins    BYTE PTR es:[edi],dx
30003485:	09 00                	or     DWORD PTR [eax],eax
30003487:	00 9c e6 ff ff 1d 00 	add    BYTE PTR [esi+eiz*8+0x1dffff],bl
3000348e:	00 00                	add    BYTE PTR [eax],al
30003490:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003493:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003499:	59                   	pop    ecx
3000349a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000349d:	04 00                	add    al,0x0
3000349f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
300034a2:	00 00                	add    BYTE PTR [eax],al
300034a4:	8c 09                	mov    WORD PTR [ecx],cs
300034a6:	00 00                	add    BYTE PTR [eax],al
300034a8:	9c                   	pushf  
300034a9:	e6 ff                	out    0xff,al
300034ab:	ff 9c 01 00 00 00 41 	call   FWORD PTR [ecx+eax*1+0x41000000]
300034b2:	0e                   	push   cs
300034b3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034b9:	46                   	inc    esi
300034ba:	87 03                	xchg   DWORD PTR [ebx],eax
300034bc:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
300034bf:	05 03 8f 01 c3       	add    eax,0xc3018f03
300034c4:	41                   	inc    ecx
300034c5:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
300034c9:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300034cc:	04 00                	add    al,0x0
300034ce:	00 00                	add    BYTE PTR [eax],al
300034d0:	20 00                	and    BYTE PTR [eax],al
300034d2:	00 00                	add    BYTE PTR [eax],al
300034d4:	bc 09 00 00 08       	mov    esp,0x8000009
300034d9:	e8 ff ff 96 00       	call   309734dd <ticksToWait+0x96efcd>
300034de:	00 00                	add    BYTE PTR [eax],al
300034e0:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300034e3:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300034e9:	44                   	inc    esp
300034ea:	83 03 02             	add    DWORD PTR [ebx],0x2
300034ed:	8e c5                	mov    es,ebp
300034ef:	c3                   	ret    
300034f0:	0c 04                	or     al,0x4
300034f2:	04 00                	add    al,0x0
300034f4:	1c 00                	sbb    al,0x0
300034f6:	00 00                	add    BYTE PTR [eax],al
300034f8:	e0 09                	loopne 30003503 <__x86.get_pc_thunk.cx+0x9ef>
300034fa:	00 00                	add    BYTE PTR [eax],al
300034fc:	7a e8                	jp     300034e6 <__x86.get_pc_thunk.cx+0x9d2>
300034fe:	ff                   	(bad)  
300034ff:	ff 20                	jmp    DWORD PTR [eax]
30003501:	00 00                	add    BYTE PTR [eax],al
30003503:	00 00                	add    BYTE PTR [eax],al
30003505:	41                   	inc    ecx
30003506:	0e                   	push   cs
30003507:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000350d:	5c                   	pop    esp
3000350e:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003511:	04 00                	add    al,0x0
30003513:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003516:	00 00                	add    BYTE PTR [eax],al
30003518:	00 0a                	add    BYTE PTR [edx],cl
3000351a:	00 00                	add    BYTE PTR [eax],al
3000351c:	7c e8                	jl     30003506 <__x86.get_pc_thunk.cx+0x9f2>
3000351e:	ff                   	(bad)  
3000351f:	ff 6e 00             	jmp    FWORD PTR [esi+0x0]
30003522:	00 00                	add    BYTE PTR [eax],al
30003524:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003527:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000352d:	42                   	inc    edx
3000352e:	86 03                	xchg   BYTE PTR [ebx],al
30003530:	83 04 02 66          	add    DWORD PTR [edx+eax*1],0x66
30003534:	c3                   	ret    
30003535:	41                   	inc    ecx
30003536:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
3000353a:	04 04                	add    al,0x4
3000353c:	1c 00                	sbb    al,0x0
3000353e:	00 00                	add    BYTE PTR [eax],al
30003540:	28 0a                	sub    BYTE PTR [edx],cl
30003542:	00 00                	add    BYTE PTR [eax],al
30003544:	c2 e8 ff             	ret    0xffe8
30003547:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
3000354d:	41                   	inc    ecx
3000354e:	0e                   	push   cs
3000354f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003555:	59                   	pop    ecx
30003556:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
30003559:	04 00                	add    al,0x0
3000355b:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
3000355e:	00 00                	add    BYTE PTR [eax],al
30003560:	48                   	dec    eax
30003561:	0a 00                	or     al,BYTE PTR [eax]
30003563:	00 c0                	add    al,al
30003565:	e8 ff ff 44 00       	call   30453569 <ticksToWait+0x44f059>
3000356a:	00 00                	add    BYTE PTR [eax],al
3000356c:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
3000356f:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003575:	45                   	inc    ebp
30003576:	86 03                	xchg   BYTE PTR [ebx],al
30003578:	83 04 79 c3          	add    DWORD PTR [ecx+edi*2],0xffffffc3
3000357c:	41                   	inc    ecx
3000357d:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003581:	04 04                	add    al,0x4
30003583:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003586:	00 00                	add    BYTE PTR [eax],al
30003588:	70 0a                	jo     30003594 <__x86.get_pc_thunk.cx+0xa80>
3000358a:	00 00                	add    BYTE PTR [eax],al
3000358c:	dc e8                	fsub   st(0),st
3000358e:	ff                   	(bad)  
3000358f:	ff 19                	call   FWORD PTR [ecx]
30003591:	03 00                	add    eax,DWORD PTR [eax]
30003593:	00 00                	add    BYTE PTR [eax],al
30003595:	41                   	inc    ecx
30003596:	0e                   	push   cs
30003597:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
3000359d:	44                   	inc    esp
3000359e:	83 03 03             	add    DWORD PTR [ebx],0x3
300035a1:	10 03                	adc    BYTE PTR [ebx],al
300035a3:	c3                   	ret    
300035a4:	41                   	inc    ecx
300035a5:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300035a8:	04 00                	add    al,0x0
300035aa:	00 00                	add    BYTE PTR [eax],al
300035ac:	1c 00                	sbb    al,0x0
300035ae:	00 00                	add    BYTE PTR [eax],al
300035b0:	98                   	cwde   
300035b1:	0a 00                	or     al,BYTE PTR [eax]
300035b3:	00 cd                	add    ch,cl
300035b5:	eb ff                	jmp    300035b6 <__x86.get_pc_thunk.cx+0xaa2>
300035b7:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
300035bd:	41                   	inc    ecx
300035be:	0e                   	push   cs
300035bf:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035c5:	59                   	pop    ecx
300035c6:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
300035c9:	04 00                	add    al,0x0
300035cb:	00 20                	add    BYTE PTR [eax],ah
300035cd:	00 00                	add    BYTE PTR [eax],al
300035cf:	00 b8 0a 00 00 ca    	add    BYTE PTR [eax-0x35fffff6],bh
300035d5:	eb ff                	jmp    300035d6 <__x86.get_pc_thunk.cx+0xac2>
300035d7:	ff 41 00             	inc    DWORD PTR [ecx+0x0]
300035da:	00 00                	add    BYTE PTR [eax],al
300035dc:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
300035df:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
300035e5:	44                   	inc    esp
300035e6:	83 03 79             	add    DWORD PTR [ebx],0x79
300035e9:	c5 c3 0c             	(bad)  
300035ec:	04 04                	add    al,0x4
300035ee:	00 00                	add    BYTE PTR [eax],al
300035f0:	1c 00                	sbb    al,0x0
300035f2:	00 00                	add    BYTE PTR [eax],al
300035f4:	dc 0a                	fmul   QWORD PTR [edx]
300035f6:	00 00                	add    BYTE PTR [eax],al
300035f8:	e7 eb                	out    0xeb,eax
300035fa:	ff                   	(bad)  
300035fb:	ff 35 00 00 00 00    	push   DWORD PTR ds:0x0
30003601:	41                   	inc    ecx
30003602:	0e                   	push   cs
30003603:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003609:	71 c5                	jno    300035d0 <__x86.get_pc_thunk.cx+0xabc>
3000360b:	0c 04                	or     al,0x4
3000360d:	04 00                	add    al,0x0
3000360f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003612:	00 00                	add    BYTE PTR [eax],al
30003614:	fc                   	cld    
30003615:	0a 00                	or     al,BYTE PTR [eax]
30003617:	00 fc                	add    ah,bh
30003619:	eb ff                	jmp    3000361a <__x86.get_pc_thunk.cx+0xb06>
3000361b:	ff 1d 00 00 00 00    	call   FWORD PTR ds:0x0
30003621:	41                   	inc    ecx
30003622:	0e                   	push   cs
30003623:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003629:	59                   	pop    ecx
3000362a:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000362d:	04 00                	add    al,0x0
3000362f:	00 2c 00             	add    BYTE PTR [eax+eax*1],ch
30003632:	00 00                	add    BYTE PTR [eax],al
30003634:	1c 0b                	sbb    al,0xb
30003636:	00 00                	add    BYTE PTR [eax],al
30003638:	f9                   	stc    
30003639:	eb ff                	jmp    3000363a <__x86.get_pc_thunk.cx+0xb26>
3000363b:	ff 41 08             	inc    DWORD PTR [ecx+0x8]
3000363e:	00 00                	add    BYTE PTR [eax],al
30003640:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003643:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003649:	46                   	inc    esi
3000364a:	87 03                	xchg   DWORD PTR [ebx],eax
3000364c:	86 04 83             	xchg   BYTE PTR [ebx+eax*4],al
3000364f:	05 03 34 08 c3       	add    eax,0xc3083403
30003654:	41                   	inc    ecx
30003655:	c6 41 c7 41          	mov    BYTE PTR [ecx-0x39],0x41
30003659:	c5 0c 04             	lds    ecx,FWORD PTR [esp+eax*1]
3000365c:	04 00                	add    al,0x0
3000365e:	00 00                	add    BYTE PTR [eax],al
30003660:	24 00                	and    al,0x0
30003662:	00 00                	add    BYTE PTR [eax],al
30003664:	4c                   	dec    esp
30003665:	0b 00                	or     eax,DWORD PTR [eax]
30003667:	00 0a                	add    BYTE PTR [edx],cl
30003669:	f4                   	hlt    
3000366a:	ff                   	(bad)  
3000366b:	ff 6d 00             	jmp    FWORD PTR [ebp+0x0]
3000366e:	00 00                	add    BYTE PTR [eax],al
30003670:	00 41 0e             	add    BYTE PTR [ecx+0xe],al
30003673:	08 85 02 42 0d 05    	or     BYTE PTR [ebp+0x50d4202],al
30003679:	45                   	inc    ebp
3000367a:	86 03                	xchg   BYTE PTR [ebx],al
3000367c:	83 04 02 62          	add    DWORD PTR [edx+eax*1],0x62
30003680:	c3                   	ret    
30003681:	41                   	inc    ecx
30003682:	c6 41 c5 0c          	mov    BYTE PTR [ecx-0x3b],0xc
30003686:	04 04                	add    al,0x4
30003688:	10 00                	adc    BYTE PTR [eax],al
3000368a:	00 00                	add    BYTE PTR [eax],al
3000368c:	74 0b                	je     30003699 <__x86.get_pc_thunk.cx+0xb85>
3000368e:	00 00                	add    BYTE PTR [eax],al
30003690:	84 f4                	test   ah,dh
30003692:	ff                   	(bad)  
30003693:	ff 04 00             	inc    DWORD PTR [eax+eax*1]
30003696:	00 00                	add    BYTE PTR [eax],al
30003698:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .dynsym:

3000369c <.dynsym>:
	...
300036ac:	ed                   	in     eax,dx
300036ad:	00 00                	add    BYTE PTR [eax],al
300036af:	00 9c 16 00 30 40 00 	add    BYTE PTR [esi+edx*1+0x403000],bl
300036b6:	00 00                	add    BYTE PTR [eax],al
300036b8:	12 00                	adc    al,BYTE PTR [eax]
300036ba:	01 00                	add    DWORD PTR [eax],eax
300036bc:	a3 00 00 00 5b       	mov    ds:0x5b000000,eax
300036c1:	0e                   	push   cs
300036c2:	00 30                	add    BYTE PTR [eax],dh
300036c4:	1c 00                	sbb    al,0x0
300036c6:	00 00                	add    BYTE PTR [eax],al
300036c8:	12 00                	adc    al,BYTE PTR [eax]
300036ca:	01 00                	add    DWORD PTR [eax],eax
300036cc:	7a 00                	jp     300036ce <__x86.get_pc_thunk.cx+0xbba>
300036ce:	00 00                	add    BYTE PTR [eax],al
300036d0:	ae                   	scas   al,BYTE PTR es:[edi]
300036d1:	0a 00                	or     al,BYTE PTR [eax]
300036d3:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
300036d6:	00 00                	add    BYTE PTR [eax],al
300036d8:	12 00                	adc    al,BYTE PTR [eax]
300036da:	01 00                	add    DWORD PTR [eax],eax
300036dc:	fc                   	cld    
300036dd:	00 00                	add    BYTE PTR [eax],al
300036df:	00 94 17 00 30 59 00 	add    BYTE PTR [edi+edx*1+0x593000],dl
300036e6:	00 00                	add    BYTE PTR [eax],al
300036e8:	12 00                	adc    al,BYTE PTR [eax]
300036ea:	01 00                	add    DWORD PTR [eax],eax
300036ec:	d6                   	(bad)  
300036ed:	00 00                	add    BYTE PTR [eax],al
300036ef:	00 cc                	add    ah,cl
300036f1:	14 00                	adc    al,0x0
300036f3:	30 84 00 00 00 12 00 	xor    BYTE PTR [eax+eax*1+0x120000],al
300036fa:	01 00                	add    DWORD PTR [eax],eax
300036fc:	21 00                	and    DWORD PTR [eax],eax
300036fe:	00 00                	add    BYTE PTR [eax],al
30003700:	00 04 00             	add    BYTE PTR [eax+eax*1],al
30003703:	30 aa 00 00 00 12    	xor    BYTE PTR [edx+0x12000000],ch
30003709:	00 01                	add    BYTE PTR [ecx],al
3000370b:	00 6b 00             	add    BYTE PTR [ebx+0x0],ch
3000370e:	00 00                	add    BYTE PTR [eax],al
30003710:	f8                   	clc    
30003711:	07                   	pop    es
30003712:	00 30                	add    BYTE PTR [eax],dh
30003714:	ba 00 00 00 12       	mov    edx,0x12000000
30003719:	00 01                	add    BYTE PTR [ecx],al
3000371b:	00 66 00             	add    BYTE PTR [esi+0x0],ah
3000371e:	00 00                	add    BYTE PTR [eax],al
30003720:	c9                   	leave  
30003721:	07                   	pop    es
30003722:	00 30                	add    BYTE PTR [eax],dh
30003724:	2f                   	das    
30003725:	00 00                	add    BYTE PTR [eax],al
30003727:	00 12                	add    BYTE PTR [edx],dl
30003729:	00 01                	add    BYTE PTR [ecx],al
3000372b:	00 be 00 00 00 08    	add    BYTE PTR [esi+0x8000000],bh
30003731:	12 00                	adc    al,BYTE PTR [eax]
30003733:	30 9b 01 00 00 12    	xor    BYTE PTR [ebx+0x12000001],bl
30003739:	00 01                	add    BYTE PTR [ecx],al
3000373b:	00 4c 00 00          	add    BYTE PTR [eax+eax*1+0x0],cl
3000373f:	00 60 07             	add    BYTE PTR [eax+0x7],ah
30003742:	00 30                	add    BYTE PTR [eax],dh
30003744:	26 00 00             	add    BYTE PTR es:[eax],al
30003747:	00 12                	add    BYTE PTR [edx],dl
30003749:	00 01                	add    BYTE PTR [ecx],al
3000374b:	00 b2 00 00 00 98    	add    BYTE PTR [edx-0x68000000],dh
30003751:	11 00                	adc    DWORD PTR [eax],eax
30003753:	30 20                	xor    BYTE PTR [eax],ah
30003755:	00 00                	add    BYTE PTR [eax],al
30003757:	00 12                	add    BYTE PTR [edx],dl
30003759:	00 01                	add    BYTE PTR [ecx],al
3000375b:	00 80 00 00 00 4d    	add    BYTE PTR [eax+0x4d000000],al
30003761:	0b 00                	or     eax,DWORD PTR [eax]
30003763:	30 72 00             	xor    BYTE PTR [edx+0x0],dh
30003766:	00 00                	add    BYTE PTR [eax],al
30003768:	12 00                	adc    al,BYTE PTR [eax]
3000376a:	01 00                	add    DWORD PTR [eax],eax
3000376c:	1c 01                	sbb    al,0x1
3000376e:	00 00                	add    BYTE PTR [eax],al
30003770:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
30003771:	19 00                	sbb    DWORD PTR [eax],eax
30003773:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
30003776:	00 00                	add    BYTE PTR [eax],al
30003778:	12 00                	adc    al,BYTE PTR [eax]
3000377a:	01 00                	add    DWORD PTR [eax],eax
3000377c:	17                   	pop    ss
3000377d:	00 00                	add    BYTE PTR [eax],al
3000377f:	00 2b                	add    BYTE PTR [ebx],ch
30003781:	02 00                	add    al,BYTE PTR [eax]
30003783:	30 bb 00 00 00 12    	xor    BYTE PTR [ebx+0x12000000],bh
30003789:	00 01                	add    BYTE PTR [ecx],al
3000378b:	00 cc                	add    ah,cl
3000378d:	00 00                	add    BYTE PTR [eax],al
3000378f:	00 8c 14 00 30 14 00 	add    BYTE PTR [esp+edx*1+0x143000],cl
30003796:	00 00                	add    BYTE PTR [eax],al
30003798:	12 00                	adc    al,BYTE PTR [eax]
3000379a:	01 00                	add    DWORD PTR [eax],eax
3000379c:	4b                   	dec    ebx
3000379d:	01 00                	add    DWORD PTR [eax],eax
3000379f:	00 81 21 00 30 1d    	add    BYTE PTR [ecx+0x1d300021],al
300037a5:	00 00                	add    BYTE PTR [eax],al
300037a7:	00 12                	add    BYTE PTR [edx],dl
300037a9:	00 01                	add    BYTE PTR [ecx],al
300037ab:	00 2c 01             	add    BYTE PTR [ecx+eax*1],ch
300037ae:	00 00                	add    BYTE PTR [eax],al
300037b0:	44                   	inc    esp
300037b1:	1b 00                	sbb    eax,DWORD PTR [eax]
300037b3:	30 9c 01 00 00 12 00 	xor    BYTE PTR [ecx+eax*1+0x120000],bl
300037ba:	01 00                	add    DWORD PTR [eax],eax
300037bc:	70 00                	jo     300037be <__x86.get_pc_thunk.cx+0xcaa>
300037be:	00 00                	add    BYTE PTR [eax],al
300037c0:	ea 09 00 30 a5 00 00 	jmp    0x0:0xa5300009
300037c7:	00 12                	add    BYTE PTR [edx],dl
300037c9:	00 01                	add    BYTE PTR [ecx],al
300037cb:	00 d1                	add    cl,dl
300037cd:	00 00                	add    BYTE PTR [eax],al
300037cf:	00 a0 14 00 30 29    	add    BYTE PTR [eax+0x29300014],ah
300037d5:	00 00                	add    BYTE PTR [eax],al
300037d7:	00 12                	add    BYTE PTR [edx],dl
300037d9:	00 01                	add    BYTE PTR [ecx],al
300037db:	00 3f                	add    BYTE PTR [edi],bh
300037dd:	00 00                	add    BYTE PTR [eax],al
300037df:	00 f8                	add    al,bh
300037e1:	06                   	push   es
300037e2:	00 30                	add    BYTE PTR [eax],dh
300037e4:	35 00 00 00 12       	xor    eax,0x12000000
300037e9:	00 01                	add    BYTE PTR [ecx],al
300037eb:	00 df                	add    bh,bl
300037ed:	00 00                	add    BYTE PTR [eax],al
300037ef:	00 50 15             	add    BYTE PTR [eax+0x15],dl
300037f2:	00 30                	add    BYTE PTR [eax],dh
300037f4:	3e 00 00             	add    BYTE PTR ds:[eax],al
300037f7:	00 12                	add    BYTE PTR [edx],dl
300037f9:	00 01                	add    BYTE PTR [ecx],al
300037fb:	00 42 01             	add    BYTE PTR [edx+0x1],al
300037fe:	00 00                	add    BYTE PTR [eax],al
30003800:	24 1e                	and    al,0x1e
30003802:	00 30                	add    BYTE PTR [eax],dh
30003804:	44                   	inc    esp
30003805:	00 00                	add    BYTE PTR [eax],al
30003807:	00 12                	add    BYTE PTR [edx],dl
30003809:	00 01                	add    BYTE PTR [ecx],al
3000380b:	00 98 00 00 00 1e    	add    BYTE PTR [eax+0x1e000000],bl
30003811:	0c 00                	or     al,0x0
30003813:	30 f1                	xor    cl,dh
30003815:	01 00                	add    DWORD PTR [eax],eax
30003817:	00 12                	add    BYTE PTR [edx],dl
30003819:	00 01                	add    BYTE PTR [ecx],al
3000381b:	00 45 00             	add    BYTE PTR [ebp+0x0],al
3000381e:	00 00                	add    BYTE PTR [eax],al
30003820:	2d 07 00 30 31       	sub    eax,0x31300007
30003825:	00 00                	add    BYTE PTR [eax],al
30003827:	00 12                	add    BYTE PTR [edx],dl
30003829:	00 01                	add    BYTE PTR [ecx],al
3000382b:	00 6a 01             	add    BYTE PTR [edx+0x1],ch
3000382e:	00 00                	add    BYTE PTR [eax],al
30003830:	31 22                	xor    DWORD PTR [edx],esp
30003832:	00 30                	add    BYTE PTR [eax],dh
30003834:	41                   	inc    ecx
30003835:	08 00                	or     BYTE PTR [eax],al
30003837:	00 12                	add    BYTE PTR [edx],dl
30003839:	00 01                	add    BYTE PTR [ecx],al
3000383b:	00 3b                	add    BYTE PTR [ebx],bh
3000383d:	01 00                	add    DWORD PTR [eax],eax
3000383f:	00 06                	add    BYTE PTR [esi],al
30003841:	1e                   	push   ds
30003842:	00 30                	add    BYTE PTR [eax],dh
30003844:	1d 00 00 00 12       	sbb    eax,0x12000000
30003849:	00 01                	add    BYTE PTR [ecx],al
3000384b:	00 3a                	add    BYTE PTR [edx],bh
3000384d:	00 00                	add    BYTE PTR [eax],al
3000384f:	00 c3                	add    bl,al
30003851:	06                   	push   es
30003852:	00 30                	add    BYTE PTR [eax],dh
30003854:	35 00 00 00 12       	xor    eax,0x12000000
30003859:	00 01                	add    BYTE PTR [ecx],al
3000385b:	00 0c 01             	add    BYTE PTR [ecx+eax*1],cl
3000385e:	00 00                	add    BYTE PTR [eax],al
30003860:	54                   	push   esp
30003861:	18 00                	sbb    BYTE PTR [eax],al
30003863:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
30003866:	00 00                	add    BYTE PTR [eax],al
30003868:	12 00                	adc    al,BYTE PTR [eax]
3000386a:	01 00                	add    DWORD PTR [eax],eax
3000386c:	14 01                	adc    al,0x1
3000386e:	00 00                	add    BYTE PTR [eax],al
30003870:	84 19                	test   BYTE PTR [ecx],bl
30003872:	00 30                	add    BYTE PTR [eax],dh
30003874:	20 00                	and    BYTE PTR [eax],al
30003876:	00 00                	add    BYTE PTR [eax],al
30003878:	12 00                	adc    al,BYTE PTR [eax]
3000387a:	01 00                	add    DWORD PTR [eax],eax
3000387c:	28 00                	sub    BYTE PTR [eax],al
3000387e:	00 00                	add    BYTE PTR [eax],al
30003880:	aa                   	stos   BYTE PTR es:[edi],al
30003881:	04 00                	add    al,0x0
30003883:	30 c1                	xor    cl,al
30003885:	01 00                	add    DWORD PTR [eax],eax
30003887:	00 12                	add    BYTE PTR [edx],dl
30003889:	00 01                	add    BYTE PTR [ecx],al
3000388b:	00 10                	add    BYTE PTR [eax],dl
3000388d:	00 00                	add    BYTE PTR [eax],al
3000388f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
30003892:	00 30                	add    BYTE PTR [eax],dh
30003894:	97                   	xchg   edi,eax
30003895:	00 00                	add    BYTE PTR [eax],al
30003897:	00 12                	add    BYTE PTR [edx],dl
30003899:	00 01                	add    BYTE PTR [ecx],al
3000389b:	00 93 00 00 00 05    	add    BYTE PTR [ebx+0x5000000],dl
300038a1:	0c 00                	or     al,0x0
300038a3:	30 19                	xor    BYTE PTR [ecx],bl
300038a5:	00 00                	add    BYTE PTR [eax],al
300038a7:	00 12                	add    BYTE PTR [edx],dl
300038a9:	00 01                	add    BYTE PTR [ecx],al
300038ab:	00 51 00             	add    BYTE PTR [ecx+0x0],dl
300038ae:	00 00                	add    BYTE PTR [eax],al
300038b0:	00 00                	add    BYTE PTR [eax],al
300038b2:	13 00                	adc    eax,DWORD PTR [eax]
300038b4:	00 00                	add    BYTE PTR [eax],al
300038b6:	00 00                	add    BYTE PTR [eax],al
300038b8:	10 00                	adc    BYTE PTR [eax],al
300038ba:	01 00                	add    DWORD PTR [eax],eax
300038bc:	54                   	push   esp
300038bd:	01 00                	add    DWORD PTR [eax],eax
300038bf:	00 9e 21 00 30 41    	add    BYTE PTR [esi+0x41300021],bl
300038c5:	00 00                	add    BYTE PTR [eax],al
300038c7:	00 12                	add    BYTE PTR [edx],dl
300038c9:	00 01                	add    BYTE PTR [ecx],al
300038cb:	00 c5                	add    ch,al
300038cd:	00 00                	add    BYTE PTR [eax],al
300038cf:	00 6b 14             	add    BYTE PTR [ebx+0x14],ch
300038d2:	00 30                	add    BYTE PTR [eax],dh
300038d4:	20 00                	and    BYTE PTR [eax],al
300038d6:	00 00                	add    BYTE PTR [eax],al
300038d8:	12 00                	adc    al,BYTE PTR [eax]
300038da:	01 00                	add    DWORD PTR [eax],eax
300038dc:	33 01                	xor    eax,DWORD PTR [ecx]
300038de:	00 00                	add    BYTE PTR [eax],al
300038e0:	76 1d                	jbe    300038ff <__x86.get_pc_thunk.cx+0xdeb>
300038e2:	00 30                	add    BYTE PTR [eax],dh
300038e4:	20 00                	and    BYTE PTR [eax],al
300038e6:	00 00                	add    BYTE PTR [eax],al
300038e8:	12 00                	adc    al,BYTE PTR [eax]
300038ea:	01 00                	add    DWORD PTR [eax],eax
300038ec:	61                   	popa   
300038ed:	00 00                	add    BYTE PTR [eax],al
300038ef:	00 86 07 00 30 43    	add    BYTE PTR [esi+0x43300007],al
300038f5:	00 00                	add    BYTE PTR [eax],al
300038f7:	00 12                	add    BYTE PTR [edx],dl
300038f9:	00 01                	add    BYTE PTR [ecx],al
300038fb:	00 e6                	add    dh,ah
300038fd:	00 00                	add    BYTE PTR [eax],al
300038ff:	00 3c 16             	add    BYTE PTR [esi+edx*1],bh
30003902:	00 30                	add    BYTE PTR [eax],dh
30003904:	5e                   	pop    esi
30003905:	00 00                	add    BYTE PTR [eax],al
30003907:	00 12                	add    BYTE PTR [edx],dl
30003909:	00 01                	add    BYTE PTR [ecx],al
3000390b:	00 ab 00 00 00 77    	add    BYTE PTR [ebx+0x77000000],ch
30003911:	0e                   	push   cs
30003912:	00 30                	add    BYTE PTR [eax],dh
30003914:	20 00                	and    BYTE PTR [eax],al
30003916:	00 00                	add    BYTE PTR [eax],al
30003918:	12 00                	adc    al,BYTE PTR [eax]
3000391a:	01 00                	add    DWORD PTR [eax],eax
3000391c:	08 00                	or     BYTE PTR [eax],al
3000391e:	00 00                	add    BYTE PTR [eax],al
30003920:	70 00                	jo     30003922 <__x86.get_pc_thunk.cx+0xe0e>
30003922:	00 30                	add    BYTE PTR [eax],dh
30003924:	55                   	push   ebp
30003925:	00 00                	add    BYTE PTR [eax],al
30003927:	00 12                	add    BYTE PTR [edx],dl
30003929:	00 01                	add    BYTE PTR [ecx],al
3000392b:	00 f4                	add    ah,dh
3000392d:	00 00                	add    BYTE PTR [eax],al
3000392f:	00 1c 17             	add    BYTE PTR [edi+edx*1],bl
30003932:	00 30                	add    BYTE PTR [eax],dh
30003934:	47                   	inc    edi
30003935:	00 00                	add    BYTE PTR [eax],al
30003937:	00 12                	add    BYTE PTR [edx],dl
30003939:	00 01                	add    BYTE PTR [ecx],al
3000393b:	00 86 00 00 00 dc    	add    BYTE PTR [esi-0x24000000],al
30003941:	0b 00                	or     eax,DWORD PTR [eax]
30003943:	30 29                	xor    BYTE PTR [ecx],ch
30003945:	00 00                	add    BYTE PTR [eax],al
30003947:	00 12                	add    BYTE PTR [edx],dl
30003949:	00 01                	add    BYTE PTR [ecx],al
3000394b:	00 5e 01             	add    BYTE PTR [esi+0x1],bl
3000394e:	00 00                	add    BYTE PTR [eax],al
30003950:	14 22                	adc    al,0x22
30003952:	00 30                	add    BYTE PTR [eax],dh
30003954:	1d 00 00 00 12       	sbb    eax,0x12000000
30003959:	00 01                	add    BYTE PTR [ecx],al
3000395b:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
3000395e:	00 00                	add    BYTE PTR [eax],al
30003960:	72 2a                	jb     3000398c <__x86.get_pc_thunk.cx+0xe78>
30003962:	00 30                	add    BYTE PTR [eax],dh
30003964:	6d                   	ins    DWORD PTR es:[edi],dx
30003965:	00 00                	add    BYTE PTR [eax],al
30003967:	00 12                	add    BYTE PTR [edx],dl
30003969:	00 01                	add    BYTE PTR [ecx],al
3000396b:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
3000396e:	00 00                	add    BYTE PTR [eax],al
30003970:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
30003975:	00 00                	add    BYTE PTR [eax],al
30003977:	00 12                	add    BYTE PTR [edx],dl
30003979:	00 01                	add    BYTE PTR [ecx],al
3000397b:	00 05 01 00 00 f0    	add    BYTE PTR ds:0xf0000001,al
30003981:	17                   	pop    ss
30003982:	00 30                	add    BYTE PTR [eax],dh
30003984:	31 00                	xor    DWORD PTR [eax],eax
30003986:	00 00                	add    BYTE PTR [eax],al
30003988:	12 00                	adc    al,BYTE PTR [eax]
3000398a:	01 00                	add    DWORD PTR [eax],eax
3000398c:	2f                   	das    
3000398d:	00 00                	add    BYTE PTR [eax],al
3000398f:	00 6c 06 00          	add    BYTE PTR [esi+eax*1+0x0],ch
30003993:	30 2d 00 00 00 12    	xor    BYTE PTR ds:0x12000000,ch
30003999:	00 01                	add    BYTE PTR [ecx],al
3000399b:	00 9d 00 00 00 0f    	add    BYTE PTR [ebp+0xf000000],bl
300039a1:	0e                   	push   cs
300039a2:	00 30                	add    BYTE PTR [eax],dh
300039a4:	4c                   	dec    esp
300039a5:	00 00                	add    BYTE PTR [eax],al
300039a7:	00 12                	add    BYTE PTR [edx],dl
300039a9:	00 01                	add    BYTE PTR [ecx],al
300039ab:	00 01                	add    BYTE PTR [ecx],al
300039ad:	00 00                	add    BYTE PTR [eax],al
300039af:	00 00                	add    BYTE PTR [eax],al
300039b1:	00 00                	add    BYTE PTR [eax],al
300039b3:	30 38                	xor    BYTE PTR [eax],bh
300039b5:	00 00                	add    BYTE PTR [eax],al
300039b7:	00 12                	add    BYTE PTR [edx],dl
300039b9:	00 01                	add    BYTE PTR [ecx],al
300039bb:	00 24 01             	add    BYTE PTR [ecx+eax*1],ah
300039be:	00 00                	add    BYTE PTR [eax],al
300039c0:	24 1b                	and    al,0x1b
300039c2:	00 30                	add    BYTE PTR [eax],dh
300039c4:	1d 00 00 00 12       	sbb    eax,0x12000000
300039c9:	00 01                	add    BYTE PTR [ecx],al
300039cb:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
300039ce:	00 00                	add    BYTE PTR [eax],al
300039d0:	99                   	cdq    
300039d1:	06                   	push   es
300039d2:	00 30                	add    BYTE PTR [eax],dh
300039d4:	2a 00                	sub    al,BYTE PTR [eax]
300039d6:	00 00                	add    BYTE PTR [eax],al
300039d8:	12 00                	adc    al,BYTE PTR [eax]
300039da:	01 00                	add    DWORD PTR [eax],eax
300039dc:	b9 00 00 00 b8       	mov    ecx,0xb8000000
300039e1:	11 00                	adc    DWORD PTR [eax],eax
300039e3:	30 1b                	xor    BYTE PTR [ebx],bl
300039e5:	00 00                	add    BYTE PTR [eax],al
300039e7:	00 12                	add    BYTE PTR [edx],dl
300039e9:	00 01                	add    BYTE PTR [ecx],al
	...

Disassembly of section .dynstr:

300039ec <.dynstr>:
300039ec:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
300039ef:	72 63                	jb     30003a54 <__x86.get_pc_thunk.cx+0xf40>
300039f1:	68 72 00 73 74       	push   0x74730072
300039f6:	72 63                	jb     30003a5b <__x86.get_pc_thunk.cx+0xf47>
300039f8:	73 70                	jae    30003a6a <__x86.get_pc_thunk.cx+0xf56>
300039fa:	6e                   	outs   dx,BYTE PTR ds:[esi]
300039fb:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
300039fe:	72 74                	jb     30003a74 <__x86.get_pc_thunk.cx+0xf60>
30003a00:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a01:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
30003a04:	74 6f                	je     30003a75 <__x86.get_pc_thunk.cx+0xf61>
30003a06:	61                   	popa   
30003a07:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
30003a0a:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a0b:	69 00 67 65 74 65    	imul   eax,DWORD PTR [eax],0x65746567
30003a11:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a12:	76 00                	jbe    30003a14 <__x86.get_pc_thunk.cx+0xf00>
30003a14:	73 65                	jae    30003a7b <__x86.get_pc_thunk.cx+0xf67>
30003a16:	74 65                	je     30003a7d <__x86.get_pc_thunk.cx+0xf69>
30003a18:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a19:	76 00                	jbe    30003a1b <__x86.get_pc_thunk.cx+0xf07>
30003a1b:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a1c:	70 65                	jo     30003a83 <__x86.get_pc_thunk.cx+0xf6f>
30003a1e:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a1f:	00 63 6c             	add    BYTE PTR [ebx+0x6c],ah
30003a22:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a23:	73 65                	jae    30003a8a <__x86.get_pc_thunk.cx+0xf76>
30003a25:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003a28:	61                   	popa   
30003a29:	64 00 77 72          	add    BYTE PTR fs:[edi+0x72],dh
30003a2d:	69 74 65 00 67 65 74 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x64746567
30003a34:	64 
30003a35:	69 72 00 70 75 74 73 	imul   esi,DWORD PTR [edx+0x0],0x73747570
30003a3c:	00 73 79             	add    BYTE PTR [ebx+0x79],dh
30003a3f:	73 45                	jae    30003a86 <__x86.get_pc_thunk.cx+0xf72>
30003a41:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a42:	74 65                	je     30003aa9 <__x86.get_pc_thunk.cx+0xf95>
30003a44:	72 5f                	jb     30003aa5 <__x86.get_pc_thunk.cx+0xf91>
30003a46:	56                   	push   esi
30003a47:	65 63 74 6f 72       	arpl   WORD PTR gs:[edi+ebp*2+0x72],si
30003a4c:	00 70 75             	add    BYTE PTR [eax+0x75],dh
30003a4f:	74 63                	je     30003ab4 <__x86.get_pc_thunk.cx+0xfa0>
30003a51:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003a54:	74 63                	je     30003ab9 <__x86.get_pc_thunk.cx+0xfa5>
30003a56:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003a59:	74 73                	je     30003ace <__x86.get_pc_thunk.cx+0xfba>
30003a5b:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
30003a5f:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
30003a62:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003a63:	69 74 00 70 72 69 6e 	imul   esi,DWORD PTR [eax+eax*1+0x70],0x746e6972
30003a6a:	74 
30003a6b:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
30003a6e:	65                   	gs
30003a6f:	65                   	gs
30003a70:	70 00                	jo     30003a72 <__x86.get_pc_thunk.cx+0xf5e>
30003a72:	6d                   	ins    DWORD PTR es:[edi],dx
30003a73:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003a74:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
30003a7b:	6e 
30003a7c:	61                   	popa   
30003a7d:	6c                   	ins    BYTE PTR es:[edi],dx
30003a7e:	00 66 6f             	add    BYTE PTR [esi+0x6f],ah
30003a81:	72 6b                	jb     30003aee <__x86.get_pc_thunk.cx+0xfda>
30003a83:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
30003a86:	65 63 00             	arpl   WORD PTR gs:[eax],ax
30003a89:	65                   	gs
30003a8a:	78 65                	js     30003af1 <__x86.get_pc_thunk.cx+0xfdd>
30003a8c:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
30003a8f:	77 61                	ja     30003af2 <__x86.get_pc_thunk.cx+0xfde>
30003a91:	69 74 70 69 64 00 67 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65670064
30003a98:	65 
30003a99:	74 63                	je     30003afe <__x86.get_pc_thunk.cx+0xfea>
30003a9b:	77 64                	ja     30003b01 <__x86.get_pc_thunk.cx+0xfed>
30003a9d:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
30003aa0:	6c                   	ins    BYTE PTR es:[edi],dx
30003aa1:	6c                   	ins    BYTE PTR es:[edi],dx
30003aa2:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003aa3:	63 00                	arpl   WORD PTR [eax],ax
30003aa5:	66                   	data16
30003aa6:	72 65                	jb     30003b0d <__x86.get_pc_thunk.cx+0xff9>
30003aa8:	65 00 6d 65          	add    BYTE PTR gs:[ebp+0x65],ch
30003aac:	6d                   	ins    DWORD PTR es:[edi],dx
30003aad:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003ab0:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
30003ab3:	6d                   	ins    DWORD PTR es:[edi],dx
30003ab4:	73 65                	jae    30003b1b <__x86.get_pc_thunk.cx+0x1007>
30003ab6:	74 00                	je     30003ab8 <__x86.get_pc_thunk.cx+0xfa4>
30003ab8:	6d                   	ins    DWORD PTR es:[edi],dx
30003ab9:	6d                   	ins    DWORD PTR es:[edi],dx
30003aba:	61                   	popa   
30003abb:	70 00                	jo     30003abd <__x86.get_pc_thunk.cx+0xfa9>
30003abd:	70 69                	jo     30003b28 <__x86.get_pc_thunk.cx+0x1014>
30003abf:	70 65                	jo     30003b26 <__x86.get_pc_thunk.cx+0x1012>
30003ac1:	00 72 65             	add    BYTE PTR [edx+0x65],dh
30003ac4:	73 65                	jae    30003b2b <__x86.get_pc_thunk.cx+0x1017>
30003ac6:	74 52                	je     30003b1a <__x86.get_pc_thunk.cx+0x1006>
30003ac8:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003ac9:	77 00                	ja     30003acb <__x86.get_pc_thunk.cx+0xfb7>
30003acb:	73 74                	jae    30003b41 <__x86.get_pc_thunk.cx+0x102d>
30003acd:	72 63                	jb     30003b32 <__x86.get_pc_thunk.cx+0x101e>
30003acf:	61                   	popa   
30003ad0:	74 00                	je     30003ad2 <__x86.get_pc_thunk.cx+0xfbe>
30003ad2:	73 74                	jae    30003b48 <__x86.get_pc_thunk.cx+0x1034>
30003ad4:	72 63                	jb     30003b39 <__x86.get_pc_thunk.cx+0x1025>
30003ad6:	6d                   	ins    DWORD PTR es:[edi],dx
30003ad7:	70 00                	jo     30003ad9 <__x86.get_pc_thunk.cx+0xfc5>
30003ad9:	73 74                	jae    30003b4f <__x86.get_pc_thunk.cx+0x103b>
30003adb:	72 63                	jb     30003b40 <__x86.get_pc_thunk.cx+0x102c>
30003add:	70 79                	jo     30003b58 <__x86.get_pc_thunk.cx+0x1044>
30003adf:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003ae2:	72 63                	jb     30003b47 <__x86.get_pc_thunk.cx+0x1033>
30003ae4:	70 79                	jo     30003b5f <__x86.get_pc_thunk.cx+0x104b>
30003ae6:	63 00                	arpl   WORD PTR [eax],ax
30003ae8:	73 74                	jae    30003b5e <__x86.get_pc_thunk.cx+0x104a>
30003aea:	72 69                	jb     30003b55 <__x86.get_pc_thunk.cx+0x1041>
30003aec:	73 6e                	jae    30003b5c <__x86.get_pc_thunk.cx+0x1048>
30003aee:	75 6d                	jne    30003b5d <__x86.get_pc_thunk.cx+0x1049>
30003af0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003af3:	72 6c                	jb     30003b61 <__x86.get_pc_thunk.cx+0x104d>
30003af5:	65 6e                	outs   dx,BYTE PTR gs:[esi]
30003af7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003afa:	72 6e                	jb     30003b6a <__x86.get_pc_thunk.cx+0x1056>
30003afc:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
30003aff:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b02:	72 6e                	jb     30003b72 <__x86.get_pc_thunk.cx+0x105e>
30003b04:	63 70 79             	arpl   WORD PTR [eax+0x79],si
30003b07:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b0a:	72 74                	jb     30003b80 <__x86.get_pc_thunk.cx+0x106c>
30003b0c:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b0d:	75 6c                	jne    30003b7b <__x86.get_pc_thunk.cx+0x1067>
30003b0f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b12:	72 6c                	jb     30003b80 <__x86.get_pc_thunk.cx+0x106c>
30003b14:	65                   	gs
30003b15:	66                   	data16
30003b16:	74 00                	je     30003b18 <__x86.get_pc_thunk.cx+0x1004>
30003b18:	73 74                	jae    30003b8e <__x86.get_pc_thunk.cx+0x107a>
30003b1a:	72 74                	jb     30003b90 <__x86.get_pc_thunk.cx+0x107c>
30003b1c:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b1d:	6c                   	ins    BYTE PTR es:[edi],dx
30003b1e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b21:	72 74                	jb     30003b97 <__x86.get_pc_thunk.cx+0x1083>
30003b23:	72 69                	jb     30003b8e <__x86.get_pc_thunk.cx+0x107a>
30003b25:	6d                   	ins    DWORD PTR es:[edi],dx
30003b26:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
30003b29:	72 73                	jb     30003b9e <__x86.get_pc_thunk.cx+0x108a>
30003b2b:	74 72                	je     30003b9f <__x86.get_pc_thunk.cx+0x108b>
30003b2d:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003b30:	74 74                	je     30003ba6 <__x86.get_pc_thunk.cx+0x1092>
30003b32:	69 63 6b 73 00 67 6d 	imul   esp,DWORD PTR [ebx+0x6b],0x6d670073
30003b39:	74 69                	je     30003ba4 <__x86.get_pc_thunk.cx+0x1090>
30003b3b:	6d                   	ins    DWORD PTR es:[edi],dx
30003b3c:	65                   	gs
30003b3d:	5f                   	pop    edi
30003b3e:	72 00                	jb     30003b40 <__x86.get_pc_thunk.cx+0x102c>
30003b40:	6c                   	ins    BYTE PTR es:[edi],dx
30003b41:	6f                   	outs   dx,DWORD PTR ds:[esi]
30003b42:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30003b45:	74 69                	je     30003bb0 <__x86.get_pc_thunk.cx+0x109c>
30003b47:	6d                   	ins    DWORD PTR es:[edi],dx
30003b48:	65 00 6c 6f 63       	add    BYTE PTR gs:[edi+ebp*2+0x63],ch
30003b4d:	61                   	popa   
30003b4e:	6c                   	ins    BYTE PTR es:[edi],dx
30003b4f:	74 69                	je     30003bba <__x86.get_pc_thunk.cx+0x10a6>
30003b51:	6d                   	ins    DWORD PTR es:[edi],dx
30003b52:	65                   	gs
30003b53:	5f                   	pop    edi
30003b54:	72 00                	jb     30003b56 <__x86.get_pc_thunk.cx+0x1042>
30003b56:	6d                   	ins    DWORD PTR es:[edi],dx
30003b57:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
30003b5c:	00 67 65             	add    BYTE PTR [edi+0x65],ah
30003b5f:	74 74                	je     30003bd5 <__x86.get_pc_thunk.cx+0x10c1>
30003b61:	69                   	.byte 0x69
30003b62:	6d                   	ins    DWORD PTR es:[edi],dx
30003b63:	65                   	gs
	...

Disassembly of section .hash:

30003b68 <.hash>:
30003b68:	25 00 00 00 35       	and    eax,0x35000000
30003b6d:	00 00                	add    BYTE PTR [eax],al
30003b6f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30003b72:	00 00                	add    BYTE PTR [eax],al
30003b74:	26 00 00             	add    BYTE PTR es:[eax],al
30003b77:	00 25 00 00 00 27    	add    BYTE PTR ds:0x27000000,ah
30003b7d:	00 00                	add    BYTE PTR [eax],al
30003b7f:	00 22                	add    BYTE PTR [edx],ah
30003b81:	00 00                	add    BYTE PTR [eax],al
30003b83:	00 30                	add    BYTE PTR [eax],dh
	...
30003b8d:	00 00                	add    BYTE PTR [eax],al
30003b8f:	00 1e                	add    BYTE PTR [esi],bl
	...
30003b99:	00 00                	add    BYTE PTR [eax],al
30003b9b:	00 16                	add    BYTE PTR [esi],dl
30003b9d:	00 00                	add    BYTE PTR [eax],al
30003b9f:	00 18                	add    BYTE PTR [eax],bl
30003ba1:	00 00                	add    BYTE PTR [eax],al
30003ba3:	00 13                	add    BYTE PTR [ebx],dl
30003ba5:	00 00                	add    BYTE PTR [eax],al
30003ba7:	00 1f                	add    BYTE PTR [edi],bl
30003ba9:	00 00                	add    BYTE PTR [eax],al
30003bab:	00 11                	add    BYTE PTR [ecx],dl
30003bad:	00 00                	add    BYTE PTR [eax],al
30003baf:	00 33                	add    BYTE PTR [ebx],dh
30003bb1:	00 00                	add    BYTE PTR [eax],al
30003bb3:	00 29                	add    BYTE PTR [ecx],ch
30003bb5:	00 00                	add    BYTE PTR [eax],al
30003bb7:	00 28                	add    BYTE PTR [eax],ch
30003bb9:	00 00                	add    BYTE PTR [eax],al
30003bbb:	00 06                	add    BYTE PTR [esi],al
30003bbd:	00 00                	add    BYTE PTR [eax],al
30003bbf:	00 03                	add    BYTE PTR [ebx],al
30003bc1:	00 00                	add    BYTE PTR [eax],al
30003bc3:	00 2f                	add    BYTE PTR [edi],ch
30003bc5:	00 00                	add    BYTE PTR [eax],al
30003bc7:	00 2d 00 00 00 0b    	add    BYTE PTR ds:0xb000000,ch
30003bcd:	00 00                	add    BYTE PTR [eax],al
30003bcf:	00 32                	add    BYTE PTR [edx],dh
	...
30003bd9:	00 00                	add    BYTE PTR [eax],al
30003bdb:	00 0f                	add    BYTE PTR [edi],cl
30003bdd:	00 00                	add    BYTE PTR [eax],al
30003bdf:	00 12                	add    BYTE PTR [edx],dl
30003be1:	00 00                	add    BYTE PTR [eax],al
30003be3:	00 2e                	add    BYTE PTR [esi],ch
30003be5:	00 00                	add    BYTE PTR [eax],al
30003be7:	00 1a                	add    BYTE PTR [edx],bl
30003be9:	00 00                	add    BYTE PTR [eax],al
30003beb:	00 34 00             	add    BYTE PTR [eax+eax*1],dh
30003bee:	00 00                	add    BYTE PTR [eax],al
30003bf0:	23 00                	and    eax,DWORD PTR [eax]
30003bf2:	00 00                	add    BYTE PTR [eax],al
30003bf4:	00 00                	add    BYTE PTR [eax],al
30003bf6:	00 00                	add    BYTE PTR [eax],al
30003bf8:	31 00                	xor    DWORD PTR [eax],eax
30003bfa:	00 00                	add    BYTE PTR [eax],al
30003bfc:	1d 00 00 00 00       	sbb    eax,0x0
	...
30003c15:	00 00                	add    BYTE PTR [eax],al
30003c17:	00 02                	add    BYTE PTR [edx],al
30003c19:	00 00                	add    BYTE PTR [eax],al
30003c1b:	00 00                	add    BYTE PTR [eax],al
30003c1d:	00 00                	add    BYTE PTR [eax],al
30003c1f:	00 05 00 00 00 00    	add    BYTE PTR ds:0x0,al
	...
30003c35:	00 00                	add    BYTE PTR [eax],al
30003c37:	00 07                	add    BYTE PTR [edi],al
	...
30003c41:	00 00                	add    BYTE PTR [eax],al
30003c43:	00 0d 00 00 00 00    	add    BYTE PTR ds:0x0,cl
	...
30003c6d:	00 00                	add    BYTE PTR [eax],al
30003c6f:	00 01                	add    BYTE PTR [ecx],al
30003c71:	00 00                	add    BYTE PTR [eax],al
30003c73:	00 0e                	add    BYTE PTR [esi],cl
30003c75:	00 00                	add    BYTE PTR [eax],al
30003c77:	00 15 00 00 00 00    	add    BYTE PTR ds:0x0,dl
30003c7d:	00 00                	add    BYTE PTR [eax],al
30003c7f:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
30003c82:	00 00                	add    BYTE PTR [eax],al
30003c84:	00 00                	add    BYTE PTR [eax],al
30003c86:	00 00                	add    BYTE PTR [eax],al
30003c88:	19 00                	sbb    DWORD PTR [eax],eax
30003c8a:	00 00                	add    BYTE PTR [eax],al
30003c8c:	21 00                	and    DWORD PTR [eax],eax
30003c8e:	00 00                	add    BYTE PTR [eax],al
30003c90:	20 00                	and    BYTE PTR [eax],al
30003c92:	00 00                	add    BYTE PTR [eax],al
30003c94:	17                   	pop    ss
30003c95:	00 00                	add    BYTE PTR [eax],al
30003c97:	00 09                	add    BYTE PTR [ecx],cl
30003c99:	00 00                	add    BYTE PTR [eax],al
30003c9b:	00 08                	add    BYTE PTR [eax],cl
30003c9d:	00 00                	add    BYTE PTR [eax],al
30003c9f:	00 00                	add    BYTE PTR [eax],al
30003ca1:	00 00                	add    BYTE PTR [eax],al
30003ca3:	00 0a                	add    BYTE PTR [edx],cl
30003ca5:	00 00                	add    BYTE PTR [eax],al
30003ca7:	00 10                	add    BYTE PTR [eax],dl
30003ca9:	00 00                	add    BYTE PTR [eax],al
30003cab:	00 00                	add    BYTE PTR [eax],al
30003cad:	00 00                	add    BYTE PTR [eax],al
30003caf:	00 1b                	add    BYTE PTR [ebx],bl
30003cb1:	00 00                	add    BYTE PTR [eax],al
30003cb3:	00 00                	add    BYTE PTR [eax],al
30003cb5:	00 00                	add    BYTE PTR [eax],al
30003cb7:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003cba:	00 00                	add    BYTE PTR [eax],al
30003cbc:	00 00                	add    BYTE PTR [eax],al
30003cbe:	00 00                	add    BYTE PTR [eax],al
30003cc0:	2b 00                	sub    eax,DWORD PTR [eax]
30003cc2:	00 00                	add    BYTE PTR [eax],al
30003cc4:	00 00                	add    BYTE PTR [eax],al
30003cc6:	00 00                	add    BYTE PTR [eax],al
30003cc8:	2c 00                	sub    al,0x0
30003cca:	00 00                	add    BYTE PTR [eax],al
30003ccc:	04 00                	add    al,0x0
30003cce:	00 00                	add    BYTE PTR [eax],al
30003cd0:	14 00                	adc    al,0x0
30003cd2:	00 00                	add    BYTE PTR [eax],al
30003cd4:	2a 00                	sub    al,BYTE PTR [eax]
	...

Disassembly of section .eh_frame:

30003cd8 <.eh_frame>:
30003cd8:	14 00                	adc    al,0x0
30003cda:	00 00                	add    BYTE PTR [eax],al
30003cdc:	00 00                	add    BYTE PTR [eax],al
30003cde:	00 00                	add    BYTE PTR [eax],al
30003ce0:	01 7a 52             	add    DWORD PTR [edx+0x52],edi
30003ce3:	00 01                	add    BYTE PTR [ecx],al
30003ce5:	7c 08                	jl     30003cef <__x86.get_pc_thunk.cx+0x11db>
30003ce7:	01 1b                	add    DWORD PTR [ebx],ebx
30003ce9:	0c 04                	or     al,0x4
30003ceb:	04 88                	add    al,0x88
30003ced:	01 00                	add    DWORD PTR [eax],eax
30003cef:	00 24 00             	add    BYTE PTR [eax+eax*1],ah
30003cf2:	00 00                	add    BYTE PTR [eax],al
30003cf4:	1c 00                	sbb    al,0x0
30003cf6:	00 00                	add    BYTE PTR [eax],al
30003cf8:	f8                   	clc    
30003cf9:	ed                   	in     eax,dx
30003cfa:	ff                   	(bad)  
30003cfb:	ff 20                	jmp    DWORD PTR [eax]
30003cfd:	00 00                	add    BYTE PTR [eax],al
30003cff:	00 00                	add    BYTE PTR [eax],al
30003d01:	0e                   	push   cs
30003d02:	08 46 0e             	or     BYTE PTR [esi+0xe],al
30003d05:	0c 4a                	or     al,0x4a
30003d07:	0f 0b                	ud2    
30003d09:	74 04                	je     30003d0f <__x86.get_pc_thunk.cx+0x11fb>
30003d0b:	78 00                	js     30003d0d <__x86.get_pc_thunk.cx+0x11f9>
30003d0d:	3f                   	aas    
30003d0e:	1a 3b                	sbb    bh,BYTE PTR [ebx]
30003d10:	2a 32                	sub    dh,BYTE PTR [edx]
30003d12:	24 22                	and    al,0x22
30003d14:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .eh_frame_hdr:

30003d18 <__GNU_EH_FRAME_HDR>:
__GNU_EH_FRAME_HDR():
30003d18:	01 1b                	add    DWORD PTR [ebx],ebx
30003d1a:	03 3b                	add    edi,DWORD PTR [ebx]
30003d1c:	fc                   	cld    
30003d1d:	ed                   	in     eax,dx
30003d1e:	ff                   	(bad)  
30003d1f:	ff 54 00 00          	call   DWORD PTR [eax+eax*1+0x0]
30003d23:	00 e8                	add    al,ch
30003d25:	c2 ff ff             	ret    0xffff
30003d28:	18 ee                	sbb    dh,ch
30003d2a:	ff                   	(bad)  
30003d2b:	ff 20                	jmp    DWORD PTR [eax]
30003d2d:	c3                   	ret    
30003d2e:	ff                   	(bad)  
30003d2f:	ff                   	(bad)  
30003d30:	38 ee                	cmp    dh,ch
30003d32:	ff                   	(bad)  
30003d33:	ff 58 c3             	call   FWORD PTR [eax-0x3d]
30003d36:	ff                   	(bad)  
30003d37:	ff 6c ee ff          	jmp    FWORD PTR [esi+ebp*8-0x1]
30003d3b:	ff ad c3 ff ff 94    	jmp    FWORD PTR [ebp-0x6b00003d]
30003d41:	ee                   	out    dx,al
30003d42:	ff                   	(bad)  
30003d43:	ff 04 c4             	inc    DWORD PTR [esp+eax*8]
30003d46:	ff                   	(bad)  
30003d47:	ff                   	(bad)  
30003d48:	bc ee ff ff 9c       	mov    esp,0x9cffffee
30003d4d:	c4                   	(bad)  
30003d4e:	ff                   	(bad)  
30003d4f:	ff                   	(bad)  
30003d50:	f8                   	clc    
30003d51:	ee                   	out    dx,al
30003d52:	ff                   	(bad)  
30003d53:	ff 13                	call   DWORD PTR [ebx]
30003d55:	c5 ff ff             	(bad)  
30003d58:	1c ef                	sbb    al,0xef
30003d5a:	ff                   	(bad)  
30003d5b:	ff ce                	dec    esi
30003d5d:	c5 ff ff             	(bad)  
30003d60:	40                   	inc    eax
30003d61:	ef                   	out    dx,eax
30003d62:	ff                   	(bad)  
30003d63:	ff 89 c6 ff ff 64    	dec    DWORD PTR [ecx+0x64ffffc6]
30003d69:	ef                   	out    dx,eax
30003d6a:	ff                   	(bad)  
30003d6b:	ff e8                	jmp    <internal disassembler error>
30003d6d:	c6                   	(bad)  
30003d6e:	ff                   	(bad)  
30003d6f:	ff 84 ef ff ff 92 c7 	inc    DWORD PTR [edi+ebp*8-0x386d0001]
30003d76:	ff                   	(bad)  
30003d77:	ff a8 ef ff ff 54    	jmp    FWORD PTR [eax+0x54ffffef]
30003d7d:	c9                   	leave  
30003d7e:	ff                   	(bad)  
30003d7f:	ff cc                	dec    esp
30003d81:	ef                   	out    dx,eax
30003d82:	ff                   	(bad)  
30003d83:	ff 81 c9 ff ff f0    	inc    DWORD PTR [ecx-0xf000037]
30003d89:	ef                   	out    dx,eax
30003d8a:	ff                   	(bad)  
30003d8b:	ff ab c9 ff ff 14    	jmp    FWORD PTR [ebx+0x14ffffc9]
30003d91:	f0 ff                	lock (bad) 
30003d93:	ff e0                	jmp    eax
30003d95:	c9                   	leave  
30003d96:	ff                   	(bad)  
30003d97:	ff                   	(bad)  
30003d98:	3c f0                	cmp    al,0xf0
30003d9a:	ff                   	(bad)  
30003d9b:	ff 15 ca ff ff 64    	call   DWORD PTR ds:0x64ffffca
30003da1:	f0 ff                	lock (bad) 
30003da3:	ff 48 ca             	dec    DWORD PTR [eax-0x36]
30003da6:	ff                   	(bad)  
30003da7:	ff 88 f0 ff ff 6e    	dec    DWORD PTR [eax+0x6efffff0]
30003dad:	ca ff ff             	retf   0xffff
30003db0:	ac                   	lods   al,BYTE PTR ds:[esi]
30003db1:	f0 ff                	lock (bad) 
30003db3:	ff b1 ca ff ff d0    	push   DWORD PTR [ecx-0x2f000036]
30003db9:	f0 ff                	lock (bad) 
30003dbb:	ff e0                	jmp    eax
30003dbd:	ca ff ff             	retf   0xffff
30003dc0:	f4                   	hlt    
30003dc1:	f0 ff                	lock (bad) 
30003dc3:	ff 9c cb ff ff 18 f1 	call   FWORD PTR [ebx+ecx*8-0xee70001]
30003dca:	ff                   	(bad)  
30003dcb:	ff d6                	call   esi
30003dcd:	cb                   	retf   
30003dce:	ff                   	(bad)  
30003dcf:	ff 40 f1             	inc    DWORD PTR [eax-0xf]
30003dd2:	ff                   	(bad)  
30003dd3:	ff 12                	call   DWORD PTR [edx]
30003dd5:	cc                   	int3   
30003dd6:	ff                   	(bad)  
30003dd7:	ff 68 f1             	jmp    FWORD PTR [eax-0xf]
30003dda:	ff                   	(bad)  
30003ddb:	ff 50 cc             	call   DWORD PTR [eax-0x34]
30003dde:	ff                   	(bad)  
30003ddf:	ff 90 f1 ff ff 90    	call   DWORD PTR [eax-0x6f00000f]
30003de5:	cc                   	int3   
30003de6:	ff                   	(bad)  
30003de7:	ff                   	(bad)  
30003de8:	b8 f1 ff ff d2       	mov    eax,0xd2fffff1
30003ded:	cc                   	int3   
30003dee:	ff                   	(bad)  
30003def:	ff e0                	jmp    eax
30003df1:	f1                   	icebp  
30003df2:	ff                   	(bad)  
30003df3:	ff 77 cd             	push   DWORD PTR [edi-0x33]
30003df6:	ff                   	(bad)  
30003df7:	ff 04 f2             	inc    DWORD PTR [edx+esi*8]
30003dfa:	ff                   	(bad)  
30003dfb:	ff 96 cd ff ff 28    	call   DWORD PTR [esi+0x28ffffcd]
30003e01:	f2 ff                	repnz (bad) 
30003e03:	ff ca                	dec    edx
30003e05:	cd ff                	int    0xff
30003e07:	ff 48 f2             	dec    DWORD PTR [eax-0xe]
30003e0a:	ff                   	(bad)  
30003e0b:	ff                   	(bad)  
30003e0c:	fe cd                	dec    ch
30003e0e:	ff                   	(bad)  
30003e0f:	ff 68 f2             	jmp    FWORD PTR [eax-0xe]
30003e12:	ff                   	(bad)  
30003e13:	ff 35 ce ff ff 88    	push   DWORD PTR ds:0x88ffffce
30003e19:	f2 ff                	repnz (bad) 
30003e1b:	ff a7 ce ff ff b0    	jmp    DWORD PTR [edi-0x4f000032]
30003e21:	f2 ff                	repnz (bad) 
30003e23:	ff c4                	inc    esp
30003e25:	ce                   	into   
30003e26:	ff                   	(bad)  
30003e27:	ff d0                	call   eax
30003e29:	f2 ff                	repnz (bad) 
30003e2b:	ff ed                	jmp    <internal disassembler error>
30003e2d:	ce                   	into   
30003e2e:	ff                   	(bad)  
30003e2f:	ff f0                	push   eax
30003e31:	f2 ff                	repnz (bad) 
30003e33:	ff 06                	inc    DWORD PTR [esi]
30003e35:	cf                   	iret   
30003e36:	ff                   	(bad)  
30003e37:	ff 10                	call   DWORD PTR [eax]
30003e39:	f3 ff                	repz (bad) 
30003e3b:	ff f7                	push   edi
30003e3d:	d0 ff                	sar    bh,1
30003e3f:	ff 34 f3             	push   DWORD PTR [ebx+esi*8]
30003e42:	ff                   	(bad)  
30003e43:	ff 43 d1             	inc    DWORD PTR [ebx-0x2f]
30003e46:	ff                   	(bad)  
30003e47:	ff 54 f3 ff          	call   DWORD PTR [ebx+esi*8-0x1]
30003e4b:	ff 5f d1             	call   FWORD PTR [edi-0x2f]
30003e4e:	ff                   	(bad)  
30003e4f:	ff 74 f3 ff          	push   DWORD PTR [ebx+esi*8-0x1]
30003e53:	ff 80 d1 ff ff 94    	inc    DWORD PTR [eax-0x6b00002f]
30003e59:	f3 ff                	repz (bad) 
30003e5b:	ff ec                	jmp    <internal disassembler error>
30003e5d:	d1 ff                	sar    edi,1
30003e5f:	ff                   	(bad)  
30003e60:	b8 f3 ff ff 73       	mov    eax,0x73fffff3
30003e65:	d2 ff                	sar    bh,cl
30003e67:	ff d8                	call   <internal disassembler error>
30003e69:	f3 ff                	repz (bad) 
30003e6b:	ff ac d2 ff ff f8 f3 	jmp    FWORD PTR [edx+edx*8-0xc070001]
30003e72:	ff                   	(bad)  
30003e73:	ff 80 d4 ff ff 1c    	inc    DWORD PTR [eax+0x1cffffd4]
30003e79:	f4                   	hlt    
30003e7a:	ff                   	(bad)  
30003e7b:	ff a0 d4 ff ff 3c    	jmp    DWORD PTR [eax+0x3cffffd4]
30003e81:	f4                   	hlt    
30003e82:	ff                   	(bad)  
30003e83:	ff                   	(bad)  
30003e84:	bb d4 ff ff 5c       	mov    ebx,0x5cffffd4
30003e89:	f4                   	hlt    
30003e8a:	ff                   	(bad)  
30003e8b:	ff f0                	push   eax
30003e8d:	d4 ff                	aam    0xff
30003e8f:	ff 80 f4 ff ff 8c    	inc    DWORD PTR [eax-0x7300000c]
30003e95:	d6                   	(bad)  
30003e96:	ff                   	(bad)  
30003e97:	ff a0 f4 ff ff 53    	jmp    DWORD PTR [eax+0x53fffff4]
30003e9d:	d7                   	xlat   BYTE PTR ds:[ebx]
30003e9e:	ff                   	(bad)  
30003e9f:	ff c0                	inc    eax
30003ea1:	f4                   	hlt    
30003ea2:	ff                   	(bad)  
30003ea3:	ff 74 d7 ff          	push   DWORD PTR [edi+edx*8-0x1]
30003ea7:	ff e0                	jmp    eax
30003ea9:	f4                   	hlt    
30003eaa:	ff                   	(bad)  
30003eab:	ff 88 d7 ff ff 00    	dec    DWORD PTR [eax+0xffffd7]
30003eb1:	f5                   	cmc    
30003eb2:	ff                   	(bad)  
30003eb3:	ff b4 d7 ff ff 24 f5 	push   DWORD PTR [edi+edx*8-0xadb0001]
30003eba:	ff                   	(bad)  
30003ebb:	ff                   	(bad)  
30003ebc:	38 d8                	cmp    al,bl
30003ebe:	ff                   	(bad)  
30003ebf:	ff 48 f5             	dec    DWORD PTR [eax-0xb]
30003ec2:	ff                   	(bad)  
30003ec3:	ff 76 d8             	push   DWORD PTR [esi-0x28]
30003ec6:	ff                   	(bad)  
30003ec7:	ff 6c f5 ff          	jmp    FWORD PTR [ebp+esi*8-0x1]
30003ecb:	ff b4 d8 ff ff 90 f5 	push   DWORD PTR [eax+ebx*8-0xa6f0001]
30003ed2:	ff                   	(bad)  
30003ed3:	ff 24 d9             	jmp    DWORD PTR [ecx+ebx*8]
30003ed6:	ff                   	(bad)  
30003ed7:	ff b0 f5 ff ff 84    	push   DWORD PTR [eax-0x7b00000b]
30003edd:	d9 ff                	fcos   
30003edf:	ff d8                	call   <internal disassembler error>
30003ee1:	f5                   	cmc    
30003ee2:	ff                   	(bad)  
30003ee3:	ff c4                	inc    esp
30003ee5:	d9 ff                	fcos   
30003ee7:	ff                   	(bad)  
30003ee8:	f8                   	clc    
30003ee9:	f5                   	cmc    
30003eea:	ff                   	(bad)  
30003eeb:	ff 04 da             	inc    DWORD PTR [edx+ebx*8]
30003eee:	ff                   	(bad)  
30003eef:	ff 18                	call   FWORD PTR [eax]
30003ef1:	f6 ff                	idiv   bh
30003ef3:	ff 4c da ff          	dec    DWORD PTR [edx+ebx*8-0x1]
30003ef7:	ff                   	(bad)  
30003ef8:	38 f6                	cmp    dh,dh
30003efa:	ff                   	(bad)  
30003efb:	ff                   	(bad)  
30003efc:	7c da                	jl     30003ed8 <__GNU_EH_FRAME_HDR+0x1c0>
30003efe:	ff                   	(bad)  
30003eff:	ff 58 f6             	call   FWORD PTR [eax-0xa]
30003f02:	ff                   	(bad)  
30003f03:	ff d8                	call   <internal disassembler error>
30003f05:	da ff                	(bad)  
30003f07:	ff                   	(bad)  
30003f08:	78 f6                	js     30003f00 <__GNU_EH_FRAME_HDR+0x1e8>
30003f0a:	ff                   	(bad)  
30003f0b:	ff 09                	dec    DWORD PTR [ecx]
30003f0d:	db ff                	(bad)  
30003f0f:	ff 98 f6 ff ff 3c    	call   FWORD PTR [eax+0x3cfffff6]
30003f15:	db ff                	(bad)  
30003f17:	ff                   	(bad)  
30003f18:	b8 f6 ff ff a3       	mov    eax,0xa3fffff6
30003f1d:	db ff                	(bad)  
30003f1f:	ff d8                	call   <internal disassembler error>
30003f21:	f6 ff                	idiv   bh
30003f23:	ff 0c dc             	dec    DWORD PTR [esp+ebx*8]
30003f26:	ff                   	(bad)  
30003f27:	ff                   	(bad)  
30003f28:	f8                   	clc    
30003f29:	f6 ff                	idiv   bh
30003f2b:	ff 6c dc ff          	jmp    FWORD PTR [esp+ebx*8-0x1]
30003f2f:	ff 18                	call   FWORD PTR [eax]
30003f31:	f7 ff                	idiv   edi
30003f33:	ff 8c dc ff ff 38 f7 	dec    DWORD PTR [esp+ebx*8-0x8c70001]
30003f3a:	ff                   	(bad)  
30003f3b:	ff 0c de             	dec    DWORD PTR [esi+ebx*8]
30003f3e:	ff                   	(bad)  
30003f3f:	ff 68 f7             	jmp    FWORD PTR [eax-0x9]
30003f42:	ff                   	(bad)  
30003f43:	ff 2c de             	jmp    FWORD PTR [esi+ebx*8]
30003f46:	ff                   	(bad)  
30003f47:	ff 88 f7 ff ff c8    	dec    DWORD PTR [eax-0x37000009]
30003f4d:	df ff                	(bad)  
30003f4f:	ff                   	(bad)  
30003f50:	b8 f7 ff ff 5e       	mov    eax,0x5efffff7
30003f55:	e0 ff                	loopne 30003f56 <__GNU_EH_FRAME_HDR+0x23e>
30003f57:	ff dc                	call   <internal disassembler error>
30003f59:	f7 ff                	idiv   edi
30003f5b:	ff 80 e0 ff ff fc    	inc    DWORD PTR [eax-0x3000020]
30003f61:	f7 ff                	idiv   edi
30003f63:	ff ee                	jmp    <internal disassembler error>
30003f65:	e0 ff                	loopne 30003f66 <__GNU_EH_FRAME_HDR+0x24e>
30003f67:	ff 24 f8             	jmp    DWORD PTR [eax+edi*8]
30003f6a:	ff                   	(bad)  
30003f6b:	ff 0c e1             	dec    DWORD PTR [ecx+eiz*8]
30003f6e:	ff                   	(bad)  
30003f6f:	ff 44 f8 ff          	inc    DWORD PTR [eax+edi*8-0x1]
30003f73:	ff 50 e1             	call   DWORD PTR [eax-0x1f]
30003f76:	ff                   	(bad)  
30003f77:	ff 6c f8 ff          	jmp    FWORD PTR [eax+edi*8-0x1]
30003f7b:	ff 69 e4             	jmp    FWORD PTR [ecx-0x1c]
30003f7e:	ff                   	(bad)  
30003f7f:	ff 94 f8 ff ff 86 e4 	call   DWORD PTR [eax+edi*8-0x1b790001]
30003f86:	ff                   	(bad)  
30003f87:	ff b4 f8 ff ff c7 e4 	push   DWORD PTR [eax+edi*8-0x1b380001]
30003f8e:	ff                   	(bad)  
30003f8f:	ff d8                	call   <internal disassembler error>
30003f91:	f8                   	clc    
30003f92:	ff                   	(bad)  
30003f93:	ff                   	(bad)  
30003f94:	fc                   	cld    
30003f95:	e4 ff                	in     al,0xff
30003f97:	ff                   	(bad)  
30003f98:	f8                   	clc    
30003f99:	f8                   	clc    
30003f9a:	ff                   	(bad)  
30003f9b:	ff 19                	call   FWORD PTR [ecx]
30003f9d:	e5 ff                	in     eax,0xff
30003f9f:	ff 18                	call   FWORD PTR [eax]
30003fa1:	f9                   	stc    
30003fa2:	ff                   	(bad)  
30003fa3:	ff 5a ed             	call   FWORD PTR [edx-0x13]
30003fa6:	ff                   	(bad)  
30003fa7:	ff 48 f9             	dec    DWORD PTR [eax-0x7]
30003faa:	ff                   	(bad)  
30003fab:	ff c7                	inc    edi
30003fad:	ed                   	in     eax,dx
30003fae:	ff                   	(bad)  
30003faf:	ff 58 ee             	call   FWORD PTR [eax-0x12]
30003fb2:	ff                   	(bad)  
30003fb3:	ff                   	(bad)  
30003fb4:	f8                   	clc    
30003fb5:	ed                   	in     eax,dx
30003fb6:	ff                   	(bad)  
30003fb7:	ff e4                	jmp    esp
30003fb9:	ee                   	out    dx,al
30003fba:	ff                   	(bad)  
30003fbb:	ff                   	(bad)  
30003fbc:	fc                   	cld    
30003fbd:	ed                   	in     eax,dx
30003fbe:	ff                   	(bad)  
30003fbf:	ff 70 f9             	push   DWORD PTR [eax-0x7]
30003fc2:	ff                   	(bad)  
30003fc3:	ff                   	.byte 0xff

Disassembly of section .rodata:

30003fe0 <_ytab-0x240>:
30003fe0:	3d 00 53 74 72       	cmp    eax,0x72745300
30003fe5:	65                   	gs
30003fe6:	61                   	popa   
30003fe7:	6d                   	ins    DWORD PTR es:[edi],dx
30003fe8:	20 25 75 20 6e 6f    	and    BYTE PTR ds:0x6f6e2075,ah
30003fee:	74 20                	je     30004010 <__GNU_EH_FRAME_HDR+0x2f8>
30003ff0:	69 6d 70 6c 65 6d 65 	imul   ebp,DWORD PTR [ebp+0x70],0x656d656c
30003ff7:	6e                   	outs   dx,BYTE PTR ds:[esi]
30003ff8:	74 65                	je     3000405f <__GNU_EH_FRAME_HDR+0x347>
30003ffa:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30003ffd:	00 00                	add    BYTE PTR [eax],al
30003fff:	00 2a                	add    BYTE PTR [edx],ch
30004001:	2a 2a                	sub    ch,BYTE PTR [edx]
30004003:	6c                   	ins    BYTE PTR es:[edi],dx
30004004:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
3000400b:	74 20                	je     3000402d <__GNU_EH_FRAME_HDR+0x315>
3000400d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
30004010:	6c                   	ins    BYTE PTR es:[edi],dx
30004011:	65 64 0a 2a          	gs or  ch,BYTE PTR fs:gs:[edx]
30004015:	2a 2a                	sub    ch,BYTE PTR [edx]
30004017:	00 2a                	add    BYTE PTR [edx],ch
30004019:	2a 2a                	sub    ch,BYTE PTR [edx]
3000401b:	6c                   	ins    BYTE PTR es:[edi],dx
3000401c:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30004023:	74 20                	je     30004045 <__GNU_EH_FRAME_HDR+0x32d>
30004025:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
30004028:	70 6c                	jo     30004096 <__GNU_EH_FRAME_HDR+0x37e>
3000402a:	65                   	gs
3000402b:	74 65                	je     30004092 <__GNU_EH_FRAME_HDR+0x37a>
3000402d:	64 0a 00             	or     al,BYTE PTR fs:[eax]
30004030:	6c                   	ins    BYTE PTR es:[edi],dx
30004031:	69 62 63 5f 69 6e 69 	imul   esp,DWORD PTR [edx+0x63],0x696e695f
30004038:	74 20                	je     3000405a <__GNU_EH_FRAME_HDR+0x342>
3000403a:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
3000403d:	6c                   	ins    BYTE PTR es:[edi],dx
3000403e:	65 64 20 70 72       	gs and BYTE PTR fs:gs:[eax+0x72],dh
30004043:	65                   	gs
30004044:	76 69                	jbe    300040af <__GNU_EH_FRAME_HDR+0x397>
30004046:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004047:	75 73                	jne    300040bc <__GNU_EH_FRAME_HDR+0x3a4>
30004049:	6c                   	ins    BYTE PTR es:[edi],dx
3000404a:	79 2c                	jns    30004078 <__GNU_EH_FRAME_HDR+0x360>
3000404c:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
3000404f:	69 74 69 6e 67 0a 00 	imul   esi,DWORD PTR [ecx+ebp*2+0x6e],0x20000a67
30004056:	20 
30004057:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
3000405b:	63 3a                	arpl   WORD PTR [edx],di
3000405d:	20 65 78             	and    BYTE PTR [ebp+0x78],ah
30004060:	65 63 75 74          	arpl   WORD PTR gs:[ebp+0x74],si
30004064:	69 6e 67 20 66 6f 72 	imul   ebp,DWORD PTR [esi+0x67],0x726f6620
3000406b:	20 25 73 0a 00 6c    	and    BYTE PTR ds:0x6c000a73,ah
30004071:	69 62 63 3a 20 65 78 	imul   esp,DWORD PTR [edx+0x63],0x7865203a
30004078:	65 63 20             	arpl   WORD PTR gs:[eax],sp
3000407b:	66 6f                	outs   dx,WORD PTR ds:[esi]
3000407d:	72 20                	jb     3000409f <__GNU_EH_FRAME_HDR+0x387>
3000407f:	25 73 0a 00 00       	and    eax,0xa73
30004084:	68 65 61 70 42       	push   0x42706165
30004089:	61                   	popa   
3000408a:	73 65                	jae    300040f1 <__GNU_EH_FRAME_HDR+0x3d9>
3000408c:	20 40 20             	and    BYTE PTR [eax+0x20],al
3000408f:	30 58 25             	xor    BYTE PTR [eax+0x25],bl
30004092:	30 38                	xor    BYTE PTR [eax],bh
30004094:	58                   	pop    eax
30004095:	20 3d 20 30 78 25    	and    BYTE PTR ds:0x25783020,bh
3000409b:	30 38                	xor    BYTE PTR [eax],bh
3000409d:	58                   	pop    eax
3000409e:	20 62 65             	and    BYTE PTR [edx+0x65],ah
300040a1:	66 6f                	outs   dx,WORD PTR ds:[esi]
300040a3:	72 65                	jb     3000410a <__GNU_EH_FRAME_HDR+0x3f2>
300040a5:	0a 00                	or     al,BYTE PTR [eax]
300040a7:	6d                   	ins    DWORD PTR es:[edi],dx
300040a8:	61                   	popa   
300040a9:	6c                   	ins    BYTE PTR es:[edi],dx
300040aa:	6c                   	ins    BYTE PTR es:[edi],dx
300040ab:	6f                   	outs   dx,DWORD PTR ds:[esi]
300040ac:	63 28                	arpl   WORD PTR [eax],bp
300040ae:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300040b1:	30 38                	xor    BYTE PTR [eax],bh
300040b3:	58                   	pop    eax
300040b4:	29 0a                	sub    DWORD PTR [edx],ecx
300040b6:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
300040ba:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
300040bd:	61                   	popa   
300040be:	6c                   	ins    BYTE PTR es:[edi],dx
300040bf:	6c                   	ins    BYTE PTR es:[edi],dx
300040c0:	6f                   	outs   dx,DWORD PTR ds:[esi]
300040c1:	63 3a                	arpl   WORD PTR [edx],di
300040c3:	20 6e 65             	and    BYTE PTR [esi+0x65],ch
300040c6:	65                   	gs
300040c7:	64                   	fs
300040c8:	65                   	gs
300040c9:	64                   	fs
300040ca:	3d 30 78 25 30       	cmp    eax,0x30257830
300040cf:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
300040d2:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
300040d6:	63 5f 6d             	arpl   WORD PTR [edi+0x6d],bx
300040d9:	61                   	popa   
300040da:	6c                   	ins    BYTE PTR es:[edi],dx
300040db:	6c                   	ins    BYTE PTR es:[edi],dx
300040dc:	6f                   	outs   dx,DWORD PTR ds:[esi]
300040dd:	63 3a                	arpl   WORD PTR [edx],di
300040df:	20 68 65             	and    BYTE PTR [eax+0x65],ch
300040e2:	61                   	popa   
300040e3:	45                   	inc    ebp
300040e4:	6e                   	outs   dx,BYTE PTR ds:[esi]
300040e5:	64                   	fs
300040e6:	3d 30 78 25 30       	cmp    eax,0x30257830
300040eb:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
300040ee:	00 00                	add    BYTE PTR [eax],al
300040f0:	6c                   	ins    BYTE PTR es:[edi],dx
300040f1:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
300040f8:	6c                   	ins    BYTE PTR es:[edi],dx
300040f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
300040fa:	63 3a                	arpl   WORD PTR [edx],di
300040fc:	20 52 65             	and    BYTE PTR [edx+0x65],dl
300040ff:	71 20                	jno    30004121 <__GNU_EH_FRAME_HDR+0x409>
30004101:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004104:	30 38                	xor    BYTE PTR [eax],bh
30004106:	58                   	pop    eax
30004107:	20 62 79             	and    BYTE PTR [edx+0x79],ah
3000410a:	74 65                	je     30004171 <__GNU_EH_FRAME_HDR+0x459>
3000410c:	73 2c                	jae    3000413a <__GNU_EH_FRAME_HDR+0x422>
3000410e:	20 72 65             	and    BYTE PTR [edx+0x65],dh
30004111:	74 20                	je     30004133 <__GNU_EH_FRAME_HDR+0x41b>
30004113:	77 61                	ja     30004176 <__GNU_EH_FRAME_HDR+0x45e>
30004115:	73 20                	jae    30004137 <__GNU_EH_FRAME_HDR+0x41f>
30004117:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
3000411a:	30 38                	xor    BYTE PTR [eax],bh
3000411c:	58                   	pop    eax
3000411d:	2c 20                	sub    al,0x20
3000411f:	68 65 61 70 45       	push   0x45706165
30004124:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004125:	64                   	fs
30004126:	3d 30 78 25 30       	cmp    eax,0x30257830
3000412b:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
3000412e:	00 00                	add    BYTE PTR [eax],al
30004130:	6c                   	ins    BYTE PTR es:[edi],dx
30004131:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004138:	6c                   	ins    BYTE PTR es:[edi],dx
30004139:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000413a:	63 3a                	arpl   WORD PTR [edx],di
3000413c:	20 49 6e             	and    BYTE PTR [ecx+0x6e],cl
3000413f:	69 74 69 61 6c 69 7a 	imul   esi,DWORD PTR [ecx+ebp*2+0x61],0x657a696c
30004146:	65 
30004147:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
3000414b:	61                   	popa   
3000414c:	70 43                	jo     30004191 <__GNU_EH_FRAME_HDR+0x479>
3000414e:	75 72                	jne    300041c2 <__GNU_EH_FRAME_HDR+0x4aa>
30004150:	72 20                	jb     30004172 <__GNU_EH_FRAME_HDR+0x45a>
30004152:	61                   	popa   
30004153:	6e                   	outs   dx,BYTE PTR ds:[esi]
30004154:	64 20 68 65          	and    BYTE PTR fs:[eax+0x65],ch
30004158:	61                   	popa   
30004159:	70 42                	jo     3000419d <__GNU_EH_FRAME_HDR+0x485>
3000415b:	61                   	popa   
3000415c:	73 65                	jae    300041c3 <__GNU_EH_FRAME_HDR+0x4ab>
3000415e:	20 74 6f 20          	and    BYTE PTR [edi+ebp*2+0x20],dh
30004162:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
30004165:	30 38                	xor    BYTE PTR [eax],bh
30004167:	58                   	pop    eax
30004168:	0a 00                	or     al,BYTE PTR [eax]
3000416a:	00 00                	add    BYTE PTR [eax],al
3000416c:	6c                   	ins    BYTE PTR es:[edi],dx
3000416d:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
30004174:	6c                   	ins    BYTE PTR es:[edi],dx
30004175:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004176:	63 3a                	arpl   WORD PTR [edx],di
30004178:	63 72 65             	arpl   WORD PTR [edx+0x65],si
3000417b:	61                   	popa   
3000417c:	74 69                	je     300041e7 <__GNU_EH_FRAME_HDR+0x4cf>
3000417e:	6e                   	outs   dx,BYTE PTR ds:[esi]
3000417f:	67 20 68 65          	and    BYTE PTR [bx+si+0x65],ch
30004183:	61                   	popa   
30004184:	70 20                	jo     300041a6 <__GNU_EH_FRAME_HDR+0x48e>
30004186:	72 65                	jb     300041ed <__GNU_EH_FRAME_HDR+0x4d5>
30004188:	63 20                	arpl   WORD PTR [eax],sp
3000418a:	40                   	inc    eax
3000418b:	20 30                	and    BYTE PTR [eax],dh
3000418d:	78 25                	js     300041b4 <__GNU_EH_FRAME_HDR+0x49c>
3000418f:	30 38                	xor    BYTE PTR [eax],bh
30004191:	58                   	pop    eax
30004192:	0a 00                	or     al,BYTE PTR [eax]
30004194:	6c                   	ins    BYTE PTR es:[edi],dx
30004195:	69 62 63 5f 6d 61 6c 	imul   esp,DWORD PTR [edx+0x63],0x6c616d5f
3000419c:	6c                   	ins    BYTE PTR es:[edi],dx
3000419d:	6f                   	outs   dx,DWORD PTR ds:[esi]
3000419e:	63 3a                	arpl   WORD PTR [edx],di
300041a0:	20 68 65             	and    BYTE PTR [eax+0x65],ch
300041a3:	61                   	popa   
300041a4:	70 43                	jo     300041e9 <__GNU_EH_FRAME_HDR+0x4d1>
300041a6:	75 72                	jne    3000421a <__GNU_EH_FRAME_HDR+0x502>
300041a8:	72 3d                	jb     300041e7 <__GNU_EH_FRAME_HDR+0x4cf>
300041aa:	30 78 25             	xor    BYTE PTR [eax+0x25],bh
300041ad:	30 38                	xor    BYTE PTR [eax],bh
300041af:	58                   	pop    eax
300041b0:	2c 20                	sub    al,0x20
300041b2:	73 69                	jae    3000421d <__GNU_EH_FRAME_HDR+0x505>
300041b4:	7a 65                	jp     3000421b <__GNU_EH_FRAME_HDR+0x503>
300041b6:	6f                   	outs   dx,DWORD PTR ds:[esi]
300041b7:	66                   	data16
300041b8:	28 68 65             	sub    BYTE PTR [eax+0x65],ch
300041bb:	61                   	popa   
300041bc:	70 72                	jo     30004230 <_ytab+0x10>
300041be:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
300041c2:	29 3d 30 78 25 30    	sub    DWORD PTR ds:0x30257830,edi
300041c8:	38 58 0a             	cmp    BYTE PTR [eax+0xa],bl
300041cb:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
300041ce:	6c                   	ins    BYTE PTR es:[edi],dx
300041cf:	6c                   	ins    BYTE PTR es:[edi],dx
300041d0:	6f                   	outs   dx,DWORD PTR ds:[esi]
300041d1:	63 3a                	arpl   WORD PTR [edx],di
300041d3:	20 72 65             	and    BYTE PTR [edx+0x65],dh
300041d6:	74 75                	je     3000424d <_ytab+0x2d>
300041d8:	72 6e                	jb     30004248 <_ytab+0x28>
300041da:	69 6e 67 20 30 78 25 	imul   ebp,DWORD PTR [esi+0x67],0x25783020
300041e1:	30 38                	xor    BYTE PTR [eax],bh
300041e3:	58                   	pop    eax
300041e4:	0a 00                	or     al,BYTE PTR [eax]
	...
300041fe:	00 00                	add    BYTE PTR [eax],al
30004200:	47                   	inc    edi
30004201:	4d                   	dec    ebp
30004202:	54                   	push   esp
	...

30004220 <_ytab>:
30004220:	1f                   	pop    ds
30004221:	00 00                	add    BYTE PTR [eax],al
30004223:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
30004226:	00 00                	add    BYTE PTR [eax],al
30004228:	1f                   	pop    ds
30004229:	00 00                	add    BYTE PTR [eax],al
3000422b:	00 1e                	add    BYTE PTR [esi],bl
3000422d:	00 00                	add    BYTE PTR [eax],al
3000422f:	00 1f                	add    BYTE PTR [edi],bl
30004231:	00 00                	add    BYTE PTR [eax],al
30004233:	00 1e                	add    BYTE PTR [esi],bl
30004235:	00 00                	add    BYTE PTR [eax],al
30004237:	00 1f                	add    BYTE PTR [edi],bl
30004239:	00 00                	add    BYTE PTR [eax],al
3000423b:	00 1f                	add    BYTE PTR [edi],bl
3000423d:	00 00                	add    BYTE PTR [eax],al
3000423f:	00 1e                	add    BYTE PTR [esi],bl
30004241:	00 00                	add    BYTE PTR [eax],al
30004243:	00 1f                	add    BYTE PTR [edi],bl
30004245:	00 00                	add    BYTE PTR [eax],al
30004247:	00 1e                	add    BYTE PTR [esi],bl
30004249:	00 00                	add    BYTE PTR [eax],al
3000424b:	00 1f                	add    BYTE PTR [edi],bl
3000424d:	00 00                	add    BYTE PTR [eax],al
3000424f:	00 1f                	add    BYTE PTR [edi],bl
30004251:	00 00                	add    BYTE PTR [eax],al
30004253:	00 1d 00 00 00 1f    	add    BYTE PTR ds:0x1f000000,bl
30004259:	00 00                	add    BYTE PTR [eax],al
3000425b:	00 1e                	add    BYTE PTR [esi],bl
3000425d:	00 00                	add    BYTE PTR [eax],al
3000425f:	00 1f                	add    BYTE PTR [edi],bl
30004261:	00 00                	add    BYTE PTR [eax],al
30004263:	00 1e                	add    BYTE PTR [esi],bl
30004265:	00 00                	add    BYTE PTR [eax],al
30004267:	00 1f                	add    BYTE PTR [edi],bl
30004269:	00 00                	add    BYTE PTR [eax],al
3000426b:	00 1f                	add    BYTE PTR [edi],bl
3000426d:	00 00                	add    BYTE PTR [eax],al
3000426f:	00 1e                	add    BYTE PTR [esi],bl
30004271:	00 00                	add    BYTE PTR [eax],al
30004273:	00 1f                	add    BYTE PTR [edi],bl
30004275:	00 00                	add    BYTE PTR [eax],al
30004277:	00 1e                	add    BYTE PTR [esi],bl
30004279:	00 00                	add    BYTE PTR [eax],al
3000427b:	00 1f                	add    BYTE PTR [edi],bl
3000427d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .rel.dyn:

30004280 <.rel.dyn>:
30004280:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
30004281:	44                   	inc    esp
30004282:	00 30                	add    BYTE PTR [eax],dh
30004284:	08 00                	or     BYTE PTR [eax],al
30004286:	00 00                	add    BYTE PTR [eax],al
30004288:	a8 44                	test   al,0x44
3000428a:	00 30                	add    BYTE PTR [eax],dh
3000428c:	08 00                	or     BYTE PTR [eax],al
3000428e:	00 00                	add    BYTE PTR [eax],al
30004290:	ac                   	lods   al,BYTE PTR ds:[esi]
30004291:	44                   	inc    esp
30004292:	00 30                	add    BYTE PTR [eax],dh
30004294:	08 00                	or     BYTE PTR [eax],al
30004296:	00 00                	add    BYTE PTR [eax],al
30004298:	b0 44                	mov    al,0x44
3000429a:	00 30                	add    BYTE PTR [eax],dh
3000429c:	08 00                	or     BYTE PTR [eax],al
3000429e:	00 00                	add    BYTE PTR [eax],al
300042a0:	b4 44                	mov    ah,0x44
300042a2:	00 30                	add    BYTE PTR [eax],dh
300042a4:	08 00                	or     BYTE PTR [eax],al
300042a6:	00 00                	add    BYTE PTR [eax],al
300042a8:	cc                   	int3   
300042a9:	44                   	inc    esp
300042aa:	00 30                	add    BYTE PTR [eax],dh
300042ac:	08 00                	or     BYTE PTR [eax],al
300042ae:	00 00                	add    BYTE PTR [eax],al
300042b0:	d0 44 00 30          	rol    BYTE PTR [eax+eax*1+0x30],1
300042b4:	08 00                	or     BYTE PTR [eax],al
300042b6:	00 00                	add    BYTE PTR [eax],al
300042b8:	d4 44                	aam    0x44
300042ba:	00 30                	add    BYTE PTR [eax],dh
300042bc:	08 00                	or     BYTE PTR [eax],al
300042be:	00 00                	add    BYTE PTR [eax],al
300042c0:	7e 07                	jle    300042c9 <_ytab+0xa9>
300042c2:	00 30                	add    BYTE PTR [eax],dh
300042c4:	02 21                	add    ah,BYTE PTR [ecx]
300042c6:	00 00                	add    BYTE PTR [eax],al
300042c8:	be 07 00 30 02       	mov    esi,0x2300007
300042cd:	21 00                	and    DWORD PTR [eax],eax
300042cf:	00 e7                	add    bh,ah
300042d1:	07                   	pop    es
300042d2:	00 30                	add    BYTE PTR [eax],dh
300042d4:	02 21                	add    ah,BYTE PTR [ecx]
300042d6:	00 00                	add    BYTE PTR [eax],al
300042d8:	44                   	inc    esp
300042d9:	08 00                	or     BYTE PTR [eax],al
300042db:	30 02                	xor    BYTE PTR [edx],al
300042dd:	21 00                	and    DWORD PTR [eax],eax
300042df:	00 a7 08 00 30 02    	add    BYTE PTR [edi+0x2300008],ah
300042e5:	21 00                	and    DWORD PTR [eax],eax
300042e7:	00 dd                	add    ch,bl
300042e9:	08 00                	or     BYTE PTR [eax],al
300042eb:	30 02                	xor    BYTE PTR [edx],al
300042ed:	21 00                	and    DWORD PTR [eax],eax
300042ef:	00 19                	add    BYTE PTR [ecx],bl
300042f1:	09 00                	or     DWORD PTR [eax],eax
300042f3:	30 02                	xor    BYTE PTR [edx],al
300042f5:	21 00                	and    DWORD PTR [eax],eax
300042f7:	00 57 09             	add    BYTE PTR [edi+0x9],dl
300042fa:	00 30                	add    BYTE PTR [eax],dh
300042fc:	02 21                	add    ah,BYTE PTR [ecx]
300042fe:	00 00                	add    BYTE PTR [eax],al
30004300:	97                   	xchg   edi,eax
30004301:	09 00                	or     DWORD PTR [eax],eax
30004303:	30 02                	xor    BYTE PTR [edx],al
30004305:	21 00                	and    DWORD PTR [eax],eax
30004307:	00 d9                	add    cl,bl
30004309:	09 00                	or     DWORD PTR [eax],eax
3000430b:	30 02                	xor    BYTE PTR [edx],al
3000430d:	21 00                	and    DWORD PTR [eax],eax
3000430f:	00 7f 0b             	add    BYTE PTR [edi+0xb],bh
30004312:	00 30                	add    BYTE PTR [eax],dh
30004314:	02 21                	add    ah,BYTE PTR [ecx]
30004316:	00 00                	add    BYTE PTR [eax],al
30004318:	ac                   	lods   al,BYTE PTR ds:[esi]
30004319:	0b 00                	or     eax,DWORD PTR [eax]
3000431b:	30 02                	xor    BYTE PTR [edx],al
3000431d:	21 00                	and    DWORD PTR [eax],eax
3000431f:	00 57 1e             	add    BYTE PTR [edi+0x1e],dl
30004322:	00 30                	add    BYTE PTR [eax],dh
30004324:	02 21                	add    ah,BYTE PTR [ecx]
30004326:	00 00                	add    BYTE PTR [eax],al
30004328:	ab                   	stos   DWORD PTR es:[edi],eax
30004329:	2a 00                	sub    al,BYTE PTR [eax]
3000432b:	30 02                	xor    BYTE PTR [edx],al
3000432d:	21 00                	and    DWORD PTR [eax],eax
3000432f:	00 c8                	add    al,cl
30004331:	44                   	inc    esp
30004332:	00 30                	add    BYTE PTR [eax],dh
30004334:	01 12                	add    DWORD PTR [edx],edx
30004336:	00 00                	add    BYTE PTR [eax],al
30004338:	c4 44 00 30          	les    eax,FWORD PTR [eax+eax*1+0x30]
3000433c:	07                   	pop    es
3000433d:	10 00                	adc    BYTE PTR [eax],al
	...

Disassembly of section .data:

30004340 <console_node>:
30004340:	01 00                	add    DWORD PTR [eax],eax
	...

30004380 <rcsid>:
30004380:	24 48                	and    al,0x48
30004382:	65                   	gs
30004383:	61                   	popa   
30004384:	64                   	fs
30004385:	65                   	gs
30004386:	72 3a                	jb     300043c2 <rcsid+0x42>
30004388:	20 2f                	and    BYTE PTR [edi],ch
3000438a:	75 73                	jne    300043ff <_DYNAMIC+0x13>
3000438c:	65                   	gs
3000438d:	72 36                	jb     300043c5 <rcsid+0x45>
3000438f:	2f                   	das    
30004390:	6f                   	outs   dx,DWORD PTR ds:[esi]
30004391:	75 73                	jne    30004406 <_DYNAMIC+0x1a>
30004393:	74 65                	je     300043fa <_DYNAMIC+0xe>
30004395:	72 2f                	jb     300043c6 <rcsid+0x46>
30004397:	74 63                	je     300043fc <_DYNAMIC+0x10>
30004399:	6c                   	ins    BYTE PTR es:[edi],dx
3000439a:	2f                   	das    
3000439b:	63 6f 6d             	arpl   WORD PTR [edi+0x6d],bp
3000439e:	70 61                	jo     30004401 <_DYNAMIC+0x15>
300043a0:	74 2f                	je     300043d1 <rcsid+0x51>
300043a2:	52                   	push   edx
300043a3:	43                   	inc    ebx
300043a4:	53                   	push   ebx
300043a5:	2f                   	das    
300043a6:	73 74                	jae    3000441c <_DYNAMIC+0x30>
300043a8:	72 73                	jb     3000441d <_DYNAMIC+0x31>
300043aa:	74 72                	je     3000441e <_DYNAMIC+0x32>
300043ac:	2e 63 2c 76          	arpl   WORD PTR cs:[esi+esi*2],bp
300043b0:	20 31                	and    BYTE PTR [ecx],dh
300043b2:	2e 32 20             	xor    ah,BYTE PTR cs:[eax]
300043b5:	39 33                	cmp    DWORD PTR [ebx],esi
300043b7:	2f                   	das    
300043b8:	30 33                	xor    BYTE PTR [ebx],dh
300043ba:	2f                   	das    
300043bb:	31 39                	xor    DWORD PTR [ecx],edi
300043bd:	20 31                	and    BYTE PTR [ecx],dh
300043bf:	35 3a 32 35 3a       	xor    eax,0x3a35323a
300043c4:	34 30                	xor    al,0x30
300043c6:	20 6f 75             	and    BYTE PTR [edi+0x75],ch
300043c9:	73 74                	jae    3000443f <_DYNAMIC+0x53>
300043cb:	65                   	gs
300043cc:	72 20                	jb     300043ee <_DYNAMIC+0x2>
300043ce:	45                   	inc    ebp
300043cf:	78 70                	js     30004441 <_DYNAMIC+0x55>
300043d1:	20 24 20             	and    BYTE PTR [eax+eiz*1],ah
300043d4:	53                   	push   ebx
300043d5:	50                   	push   eax
300043d6:	52                   	push   edx
300043d7:	49                   	dec    ecx
300043d8:	54                   	push   esp
300043d9:	45                   	inc    ebp
300043da:	20 28                	and    BYTE PTR [eax],ch
300043dc:	42                   	inc    edx
300043dd:	65                   	gs
300043de:	72 6b                	jb     3000444b <_DYNAMIC+0x5f>
300043e0:	65                   	gs
300043e1:	6c                   	ins    BYTE PTR es:[edi],dx
300043e2:	65                   	gs
300043e3:	79 29                	jns    3000440e <_DYNAMIC+0x22>
300043e5:	00 00                	add    BYTE PTR [eax],al
	...

300043e8 <_daylight>:
300043e8:	01 00                	add    DWORD PTR [eax],eax
	...

Disassembly of section .dynamic:

300043ec <_DYNAMIC>:
300043ec:	19 00                	sbb    DWORD PTR [eax],eax
300043ee:	00 00                	add    BYTE PTR [eax],al
300043f0:	c8 44 00 30          	enter  0x44,0x30
300043f4:	1b 00                	sbb    eax,DWORD PTR [eax]
300043f6:	00 00                	add    BYTE PTR [eax],al
300043f8:	04 00                	add    al,0x0
300043fa:	00 00                	add    BYTE PTR [eax],al
300043fc:	1a 00                	sbb    al,BYTE PTR [eax]
300043fe:	00 00                	add    BYTE PTR [eax],al
30004400:	cc                   	int3   
30004401:	44                   	inc    esp
30004402:	00 30                	add    BYTE PTR [eax],dh
30004404:	1c 00                	sbb    al,0x0
30004406:	00 00                	add    BYTE PTR [eax],al
30004408:	04 00                	add    al,0x0
3000440a:	00 00                	add    BYTE PTR [eax],al
3000440c:	04 00                	add    al,0x0
3000440e:	00 00                	add    BYTE PTR [eax],al
30004410:	68 3b 00 30 05       	push   0x530003b
30004415:	00 00                	add    BYTE PTR [eax],al
30004417:	00 ec                	add    ah,ch
30004419:	39 00                	cmp    DWORD PTR [eax],eax
3000441b:	30 06                	xor    BYTE PTR [esi],al
3000441d:	00 00                	add    BYTE PTR [eax],al
3000441f:	00 9c 36 00 30 0a 00 	add    BYTE PTR [esi+esi*1+0xa3000],bl
30004426:	00 00                	add    BYTE PTR [eax],al
30004428:	79 01                	jns    3000442b <_DYNAMIC+0x3f>
3000442a:	00 00                	add    BYTE PTR [eax],al
3000442c:	0b 00                	or     eax,DWORD PTR [eax]
3000442e:	00 00                	add    BYTE PTR [eax],al
30004430:	10 00                	adc    BYTE PTR [eax],al
30004432:	00 00                	add    BYTE PTR [eax],al
30004434:	03 00                	add    eax,DWORD PTR [eax]
30004436:	00 00                	add    BYTE PTR [eax],al
30004438:	b8 44 00 30 02       	mov    eax,0x2300044
3000443d:	00 00                	add    BYTE PTR [eax],al
3000443f:	00 08                	add    BYTE PTR [eax],cl
30004441:	00 00                	add    BYTE PTR [eax],al
30004443:	00 14 00             	add    BYTE PTR [eax+eax*1],dl
30004446:	00 00                	add    BYTE PTR [eax],al
30004448:	11 00                	adc    DWORD PTR [eax],eax
3000444a:	00 00                	add    BYTE PTR [eax],al
3000444c:	17                   	pop    ss
3000444d:	00 00                	add    BYTE PTR [eax],al
3000444f:	00 38                	add    BYTE PTR [eax],bh
30004451:	43                   	inc    ebx
30004452:	00 30                	add    BYTE PTR [eax],dh
30004454:	11 00                	adc    DWORD PTR [eax],eax
30004456:	00 00                	add    BYTE PTR [eax],al
30004458:	80 42 00 30          	add    BYTE PTR [edx+0x0],0x30
3000445c:	12 00                	adc    al,BYTE PTR [eax]
3000445e:	00 00                	add    BYTE PTR [eax],al
30004460:	b8 00 00 00 13       	mov    eax,0x13000000
30004465:	00 00                	add    BYTE PTR [eax],al
30004467:	00 08                	add    BYTE PTR [eax],cl
30004469:	00 00                	add    BYTE PTR [eax],al
3000446b:	00 16                	add    BYTE PTR [esi],dl
3000446d:	00 00                	add    BYTE PTR [eax],al
3000446f:	00 00                	add    BYTE PTR [eax],al
30004471:	00 00                	add    BYTE PTR [eax],al
30004473:	00 fa                	add    dl,bh
30004475:	ff                   	(bad)  
30004476:	ff 6f 08             	jmp    FWORD PTR [edi+0x8]
	...

Disassembly of section .got:

300044a4 <.got>:
300044a4:	d8 44 00 30          	fadd   DWORD PTR [eax+eax*1+0x30]
300044a8:	dc 44 00 30          	fadd   QWORD PTR [eax+eax*1+0x30]
300044ac:	e0 44                	loopne 300044f2 <libcInitialized+0x2>
300044ae:	00 30                	add    BYTE PTR [eax],dh
300044b0:	e4 44                	in     al,0x44
300044b2:	00 30                	add    BYTE PTR [eax],dh
300044b4:	e8                   	.byte 0xe8
300044b5:	44                   	inc    esp
300044b6:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .got.plt:

300044b8 <_GLOBAL_OFFSET_TABLE_>:
300044b8:	ec                   	in     al,dx
300044b9:	43                   	inc    ebx
300044ba:	00 30                	add    BYTE PTR [eax],dh
	...
300044c4:	06                   	push   es
300044c5:	2b 00                	sub    eax,DWORD PTR [eax]
300044c7:	30                   	.byte 0x30

Disassembly of section .init_array:

300044c8 <.init_array>:
300044c8:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .fini_array:

300044cc <.fini_array>:
300044cc:	8f 0a                	(bad)  
300044ce:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .data.rel.local:

300044d0 <_tzname>:
300044d0:	00 42 00             	add    BYTE PTR [edx+0x0],al
300044d3:	30 00                	xor    BYTE PTR [eax],al
300044d5:	42                   	inc    edx
300044d6:	00 30                	add    BYTE PTR [eax],dh

Disassembly of section .bss:

300044d8 <heapEnd>:
300044d8:	00 00                	add    BYTE PTR [eax],al
	...

300044dc <heapBase>:
300044dc:	00 00                	add    BYTE PTR [eax],al
	...

300044e0 <heapCurr>:
300044e0:	00 00                	add    BYTE PTR [eax],al
	...

300044e4 <processEnvp>:
300044e4:	00 00                	add    BYTE PTR [eax],al
	...

300044e8 <libcTZ>:
300044e8:	00 00                	add    BYTE PTR [eax],al
	...

300044ec <lasts.1355>:
300044ec:	00 00                	add    BYTE PTR [eax],al
	...

300044f0 <libcInitialized>:
300044f0:	00 00                	add    BYTE PTR [eax],al
	...

300044f4 <fops>:
	...

300044fc <console_file>:
	...

3000450c <_dstbias>:
3000450c:	00 00                	add    BYTE PTR [eax],al
	...

30004510 <ticksToWait>:
30004510:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
       0:	5f                   	pop    edi
       1:	01 00                	add    DWORD PTR [eax],eax
       3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
       6:	00 00                	add    BYTE PTR [eax],al
       8:	00 00                	add    BYTE PTR [eax],al
       a:	04 01                	add    al,0x1
       c:	f4                   	hlt    
       d:	00 00                	add    BYTE PTR [eax],al
       f:	00 0c b8             	add    BYTE PTR [eax+edi*4],cl
      12:	00 00                	add    BYTE PTR [eax],al
      14:	00 72 00             	add    BYTE PTR [edx+0x0],dh
      17:	00 00                	add    BYTE PTR [eax],al
      19:	00 00                	add    BYTE PTR [eax],al
      1b:	00 30                	add    BYTE PTR [eax],dh
      1d:	70 00                	jo     1f <sysEnter_Vector-0x12ffe1>
      1f:	00 00                	add    BYTE PTR [eax],al
      21:	00 00                	add    BYTE PTR [eax],al
      23:	00 00                	add    BYTE PTR [eax],al
      25:	02 01                	add    al,BYTE PTR [ecx]
      27:	06                   	push   es
      28:	64 00 00             	add    BYTE PTR fs:[eax],al
      2b:	00 02                	add    BYTE PTR [edx],al
      2d:	01 06                	add    DWORD PTR [esi],eax
      2f:	5d                   	pop    ebp
      30:	00 00                	add    BYTE PTR [eax],al
      32:	00 02                	add    BYTE PTR [edx],al
      34:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
      3a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
      41:	02 08                	add    cl,BYTE PTR [eax]
      43:	05 00 00 00 00       	add    eax,0x0
      48:	02 01                	add    al,BYTE PTR [ecx]
      4a:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
      4d:	00 00                	add    BYTE PTR [eax],al
      4f:	02 02                	add    al,BYTE PTR [edx]
      51:	07                   	pop    es
      52:	0e                   	push   cs
      53:	00 00                	add    BYTE PTR [eax],al
      55:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
      58:	00 00                	add    BYTE PTR [eax],al
      5a:	00 04 34             	add    BYTE PTR [esp+esi*1],al
      5d:	61                   	popa   
      5e:	00 00                	add    BYTE PTR [eax],al
      60:	00 02                	add    BYTE PTR [edx],al
      62:	04 07                	add    al,0x7
      64:	3e 00 00             	add    BYTE PTR ds:[eax],al
      67:	00 02                	add    BYTE PTR [edx],al
      69:	08 07                	or     BYTE PTR [edi],al
      6b:	34 00                	xor    al,0x0
      6d:	00 00                	add    BYTE PTR [eax],al
      6f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
      76:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
      79:	9b                   	fwait
      7a:	00 00                	add    BYTE PTR [eax],al
      7c:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
      82:	00 06                	add    BYTE PTR [esi],al
      84:	25 00 00 00 02       	and    eax,0x2000000
      89:	01 02                	add    DWORD PTR [edx],eax
      8b:	95                   	xchg   ebp,eax
      8c:	00 00                	add    BYTE PTR [eax],al
      8e:	00 02                	add    BYTE PTR [edx],al
      90:	04 07                	add    al,0x7
      92:	39 00                	cmp    DWORD PTR [eax],eax
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
      99:	e1 00                	loope  9b <sysEnter_Vector-0x12ff65>
      9b:	00 00                	add    BYTE PTR [eax],al
      9d:	05 04 25 00 00       	add    eax,0x2504
      a2:	00 07                	add    BYTE PTR [edi],al
      a4:	21 00                	and    DWORD PTR [eax],eax
      a6:	00 00                	add    BYTE PTR [eax],al
      a8:	01 08                	add    DWORD PTR [eax],ecx
      aa:	9d                   	popf   
      ab:	00 00                	add    BYTE PTR [eax],al
      ad:	00 00                	add    BYTE PTR [eax],al
      af:	00 00                	add    BYTE PTR [eax],al
      b1:	30 38                	xor    BYTE PTR [eax],bh
      b3:	00 00                	add    BYTE PTR [eax],al
      b5:	00 01                	add    BYTE PTR [ecx],al
      b7:	9c                   	pushf  
      b8:	d5 00                	aad    0x0
      ba:	00 00                	add    BYTE PTR [eax],al
      bc:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
      bf:	01 08                	add    DWORD PTR [eax],ecx
      c1:	7d 00                	jge    c3 <sysEnter_Vector-0x12ff3d>
      c3:	00 00                	add    BYTE PTR [eax],al
      c5:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      cb:	01 08                	add    DWORD PTR [eax],ecx
      cd:	3a 00                	cmp    al,BYTE PTR [eax]
      cf:	00 00                	add    BYTE PTR [eax],al
      d1:	02 91 04 00 07 a7    	add    dl,BYTE PTR [ecx-0x58f8fffc]
      d7:	00 00                	add    BYTE PTR [eax],al
      d9:	00 01                	add    BYTE PTR [ecx],al
      db:	10 9d 00 00 00 38    	adc    BYTE PTR [ebp+0x38000000],bl
      e1:	00 00                	add    BYTE PTR [eax],al
      e3:	30 38                	xor    BYTE PTR [eax],bh
      e5:	00 00                	add    BYTE PTR [eax],al
      e7:	00 01                	add    BYTE PTR [ecx],al
      e9:	9c                   	pushf  
      ea:	07                   	pop    es
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 08                	add    BYTE PTR [eax],cl
      ef:	73 00                	jae    f1 <sysEnter_Vector-0x12ff0f>
      f1:	01 10                	add    DWORD PTR [eax],edx
      f3:	7d 00                	jge    f5 <sysEnter_Vector-0x12ff0b>
      f5:	00 00                	add    BYTE PTR [eax],al
      f7:	02 91 00 08 63 00    	add    dl,BYTE PTR [ecx+0x630800]
      fd:	01 10                	add    DWORD PTR [eax],edx
      ff:	3a 00                	cmp    al,BYTE PTR [eax]
     101:	00 00                	add    BYTE PTR [eax],al
     103:	02 91 04 00 09 4b    	add    dl,BYTE PTR [ecx+0x4b090004]
     109:	00 00                	add    BYTE PTR [eax],al
     10b:	00 02                	add    BYTE PTR [edx],al
     10d:	34 56                	xor    al,0x56
     10f:	00 00                	add    BYTE PTR [eax],al
     111:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
     117:	30 09                	xor    BYTE PTR [ecx],cl
     119:	af                   	scas   eax,DWORD PTR es:[edi]
     11a:	00 00                	add    BYTE PTR [eax],al
     11c:	00 02                	add    BYTE PTR [edx],al
     11e:	35 56 00 00 00       	xor    eax,0x56
     123:	05 03 e0 44 00       	add    eax,0x44e003
     128:	30 09                	xor    BYTE PTR [ecx],cl
     12a:	5b                   	pop    ebx
     12b:	01 00                	add    DWORD PTR [eax],eax
     12d:	00 02                	add    BYTE PTR [edx],al
     12f:	36                   	ss
     130:	56                   	push   esi
     131:	00 00                	add    BYTE PTR [eax],al
     133:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
     139:	30 09                	xor    BYTE PTR [ecx],cl
     13b:	54                   	push   esp
     13c:	00 00                	add    BYTE PTR [eax],al
     13e:	00 02                	add    BYTE PTR [edx],al
     140:	37                   	aaa    
     141:	56                   	push   esi
     142:	00 00                	add    BYTE PTR [eax],al
     144:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
     14a:	30 09                	xor    BYTE PTR [ecx],cl
     14c:	28 00                	sub    BYTE PTR [eax],al
     14e:	00 00                	add    BYTE PTR [eax],al
     150:	03 46 5c             	add    eax,DWORD PTR [esi+0x5c]
     153:	01 00                	add    DWORD PTR [eax],eax
     155:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
     15b:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
     161:	00 00                	add    BYTE PTR [eax],al
     163:	9e                   	sahf   
     164:	01 00                	add    DWORD PTR [eax],eax
     166:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     169:	83 00 00             	add    DWORD PTR [eax],0x0
     16c:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     16f:	f4                   	hlt    
     170:	00 00                	add    BYTE PTR [eax],al
     172:	00 0c 69             	add    BYTE PTR [ecx+ebp*2],cl
     175:	01 00                	add    DWORD PTR [eax],eax
     177:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     17a:	00 00                	add    BYTE PTR [eax],al
     17c:	70 00                	jo     17e <sysEnter_Vector-0x12fe82>
     17e:	00 30                	add    BYTE PTR [eax],dh
     180:	aa                   	stos   BYTE PTR es:[edi],al
     181:	00 00                	add    BYTE PTR [eax],al
     183:	00 d4                	add    ah,dl
     185:	00 00                	add    BYTE PTR [eax],al
     187:	00 02                	add    BYTE PTR [edx],al
     189:	01 06                	add    DWORD PTR [esi],eax
     18b:	64 00 00             	add    BYTE PTR fs:[eax],al
     18e:	00 02                	add    BYTE PTR [edx],al
     190:	01 06                	add    DWORD PTR [esi],eax
     192:	5d                   	pop    ebp
     193:	00 00                	add    BYTE PTR [eax],al
     195:	00 02                	add    BYTE PTR [edx],al
     197:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     19d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     1a4:	02 08                	add    cl,BYTE PTR [eax]
     1a6:	05 00 00 00 00       	add    eax,0x0
     1ab:	02 01                	add    al,BYTE PTR [ecx]
     1ad:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     1b0:	00 00                	add    BYTE PTR [eax],al
     1b2:	02 02                	add    al,BYTE PTR [edx]
     1b4:	07                   	pop    es
     1b5:	0e                   	push   cs
     1b6:	00 00                	add    BYTE PTR [eax],al
     1b8:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     1bb:	00 00                	add    BYTE PTR [eax],al
     1bd:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     1c0:	61                   	popa   
     1c1:	00 00                	add    BYTE PTR [eax],al
     1c3:	00 02                	add    BYTE PTR [edx],al
     1c5:	04 07                	add    al,0x7
     1c7:	3e 00 00             	add    BYTE PTR ds:[eax],al
     1ca:	00 02                	add    BYTE PTR [edx],al
     1cc:	08 07                	or     BYTE PTR [edi],al
     1ce:	34 00                	xor    al,0x0
     1d0:	00 00                	add    BYTE PTR [eax],al
     1d2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     1d9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     1dc:	9b                   	fwait
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	00 02                	add    BYTE PTR [edx],al
     1e1:	01 02                	add    DWORD PTR [edx],eax
     1e3:	95                   	xchg   ebp,eax
     1e4:	00 00                	add    BYTE PTR [eax],al
     1e6:	00 02                	add    BYTE PTR [edx],al
     1e8:	04 07                	add    al,0x7
     1ea:	39 00                	cmp    DWORD PTR [eax],eax
     1ec:	00 00                	add    BYTE PTR [eax],al
     1ee:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     1f1:	e1 00                	loope  1f3 <sysEnter_Vector-0x12fe0d>
     1f3:	00 00                	add    BYTE PTR [eax],al
     1f5:	05 04 25 00 00       	add    eax,0x2504
     1fa:	00 06                	add    BYTE PTR [esi],al
     1fc:	93                   	xchg   ebx,eax
     1fd:	01 00                	add    DWORD PTR [eax],eax
     1ff:	00 01                	add    BYTE PTR [ecx],al
     201:	25 3a 00 00 00       	and    eax,0x3a
     206:	70 00                	jo     208 <sysEnter_Vector-0x12fdf8>
     208:	00 30                	add    BYTE PTR [eax],dh
     20a:	55                   	push   ebp
     20b:	00 00                	add    BYTE PTR [eax],al
     20d:	00 01                	add    BYTE PTR [ecx],al
     20f:	9c                   	pushf  
     210:	ef                   	out    dx,eax
     211:	00 00                	add    BYTE PTR [eax],al
     213:	00 07                	add    BYTE PTR [edi],al
     215:	a2 0a 00 00 01       	mov    ds:0x100000a,al
     21a:	25 92 00 00 00       	and    eax,0x92
     21f:	02 91 00 07 63 01    	add    dl,BYTE PTR [ecx+0x1630700]
     225:	00 00                	add    BYTE PTR [eax],al
     227:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     22d:	02 91 04 08 63 00    	add    dl,BYTE PTR [ecx+0x630804]
     233:	01 27                	add    DWORD PTR [edi],esp
     235:	25 00 00 00 01       	and    eax,0x1000000
     23a:	51                   	push   ecx
     23b:	08 70 00             	or     BYTE PTR [eax+0x0],dh
     23e:	01 27                	add    DWORD PTR [edi],esp
     240:	92                   	xchg   edx,eax
     241:	00 00                	add    BYTE PTR [eax],al
     243:	00 01                	add    BYTE PTR [ecx],al
     245:	56                   	push   esi
     246:	08 73 00             	or     BYTE PTR [ebx+0x0],dh
     249:	01 27                	add    DWORD PTR [edi],esp
     24b:	92                   	xchg   edx,eax
     24c:	00 00                	add    BYTE PTR [eax],al
     24e:	00 01                	add    BYTE PTR [ecx],al
     250:	53                   	push   ebx
     251:	00 06                	add    BYTE PTR [esi],al
     253:	9b                   	fwait
     254:	01 00                	add    DWORD PTR [eax],eax
     256:	00 01                	add    BYTE PTR [ecx],al
     258:	33 3a                	xor    edi,DWORD PTR [edx]
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	00 c5                	add    ch,al
     25e:	00 00                	add    BYTE PTR [eax],al
     260:	30 55 00             	xor    BYTE PTR [ebp+0x0],dl
     263:	00 00                	add    BYTE PTR [eax],al
     265:	01 9c 46 01 00 00 07 	add    DWORD PTR [esi+eax*2+0x7000001],ebx
     26c:	a2 0a 00 00 01       	mov    ds:0x100000a,al
     271:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
     277:	91                   	xchg   ecx,eax
     278:	00 07                	add    BYTE PTR [edi],al
     27a:	63 01                	arpl   WORD PTR [ecx],ax
     27c:	00 00                	add    BYTE PTR [eax],al
     27e:	01 33                	add    DWORD PTR [ebx],esi
     280:	92                   	xchg   edx,eax
     281:	00 00                	add    BYTE PTR [eax],al
     283:	00 02                	add    BYTE PTR [edx],al
     285:	91                   	xchg   ecx,eax
     286:	04 08                	add    al,0x8
     288:	63 00                	arpl   WORD PTR [eax],ax
     28a:	01 35 25 00 00 00    	add    DWORD PTR ds:0x25,esi
     290:	01 51 08             	add    DWORD PTR [ecx+0x8],edx
     293:	70 00                	jo     295 <sysEnter_Vector-0x12fd6b>
     295:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     29b:	01 56 08             	add    DWORD PTR [esi+0x8],edx
     29e:	73 00                	jae    2a0 <sysEnter_Vector-0x12fd60>
     2a0:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
     2a6:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
     2a9:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
     2ac:	00 00                	add    BYTE PTR [eax],al
     2ae:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     2b1:	00 00                	add    BYTE PTR [eax],al
     2b3:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
     2b9:	30 09                	xor    BYTE PTR [ecx],cl
     2bb:	af                   	scas   eax,DWORD PTR es:[edi]
     2bc:	00 00                	add    BYTE PTR [eax],al
     2be:	00 02                	add    BYTE PTR [edx],al
     2c0:	35 56 00 00 00       	xor    eax,0x56
     2c5:	05 03 e0 44 00       	add    eax,0x44e003
     2ca:	30 09                	xor    BYTE PTR [ecx],cl
     2cc:	5b                   	pop    ebx
     2cd:	01 00                	add    DWORD PTR [eax],eax
     2cf:	00 02                	add    BYTE PTR [edx],al
     2d1:	36                   	ss
     2d2:	56                   	push   esi
     2d3:	00 00                	add    BYTE PTR [eax],al
     2d5:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
     2db:	30 09                	xor    BYTE PTR [ecx],cl
     2dd:	54                   	push   esp
     2de:	00 00                	add    BYTE PTR [eax],al
     2e0:	00 02                	add    BYTE PTR [edx],al
     2e2:	37                   	aaa    
     2e3:	56                   	push   esi
     2e4:	00 00                	add    BYTE PTR [eax],al
     2e6:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
     2ec:	30 09                	xor    BYTE PTR [ecx],cl
     2ee:	28 00                	sub    BYTE PTR [eax],al
     2f0:	00 00                	add    BYTE PTR [eax],al
     2f2:	03 46 9b             	add    eax,DWORD PTR [esi-0x65]
     2f5:	01 00                	add    DWORD PTR [eax],eax
     2f7:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
     2fd:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     303:	00 00                	add    BYTE PTR [eax],al
     305:	41                   	inc    ecx
     306:	01 00                	add    DWORD PTR [eax],eax
     308:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     30b:	0e                   	push   cs
     30c:	01 00                	add    DWORD PTR [eax],eax
     30e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     311:	f4                   	hlt    
     312:	00 00                	add    BYTE PTR [eax],al
     314:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
     317:	01 00                	add    DWORD PTR [eax],eax
     319:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     31c:	00 00                	add    BYTE PTR [eax],al
     31e:	1c 01                	sbb    al,0x1
     320:	00 30                	add    BYTE PTR [eax],dh
     322:	97                   	xchg   edi,eax
     323:	00 00                	add    BYTE PTR [eax],al
     325:	00 db                	add    bl,bl
     327:	01 00                	add    DWORD PTR [eax],eax
     329:	00 02                	add    BYTE PTR [edx],al
     32b:	01 06                	add    DWORD PTR [esi],eax
     32d:	64 00 00             	add    BYTE PTR fs:[eax],al
     330:	00 02                	add    BYTE PTR [edx],al
     332:	01 06                	add    DWORD PTR [esi],eax
     334:	5d                   	pop    ebp
     335:	00 00                	add    BYTE PTR [eax],al
     337:	00 02                	add    BYTE PTR [edx],al
     339:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     33f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     346:	02 08                	add    cl,BYTE PTR [eax]
     348:	05 00 00 00 00       	add    eax,0x0
     34d:	02 01                	add    al,BYTE PTR [ecx]
     34f:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     352:	00 00                	add    BYTE PTR [eax],al
     354:	02 02                	add    al,BYTE PTR [edx]
     356:	07                   	pop    es
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     35d:	00 00                	add    BYTE PTR [eax],al
     35f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     362:	61                   	popa   
     363:	00 00                	add    BYTE PTR [eax],al
     365:	00 02                	add    BYTE PTR [edx],al
     367:	04 07                	add    al,0x7
     369:	3e 00 00             	add    BYTE PTR ds:[eax],al
     36c:	00 02                	add    BYTE PTR [edx],al
     36e:	08 07                	or     BYTE PTR [edi],al
     370:	34 00                	xor    al,0x0
     372:	00 00                	add    BYTE PTR [eax],al
     374:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     37b:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     37e:	9b                   	fwait
     37f:	00 00                	add    BYTE PTR [eax],al
     381:	00 02                	add    BYTE PTR [edx],al
     383:	01 02                	add    DWORD PTR [edx],eax
     385:	95                   	xchg   ebp,eax
     386:	00 00                	add    BYTE PTR [eax],al
     388:	00 02                	add    BYTE PTR [edx],al
     38a:	04 07                	add    al,0x7
     38c:	39 00                	cmp    DWORD PTR [eax],eax
     38e:	00 00                	add    BYTE PTR [eax],al
     390:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     393:	e1 00                	loope  395 <sysEnter_Vector-0x12fc6b>
     395:	00 00                	add    BYTE PTR [eax],al
     397:	05 04 25 00 00       	add    eax,0x2504
     39c:	00 06                	add    BYTE PTR [esi],al
     39e:	d9 01                	fld    DWORD PTR [ecx]
     3a0:	00 00                	add    BYTE PTR [eax],al
     3a2:	01 28                	add    DWORD PTR [eax],ebp
     3a4:	92                   	xchg   edx,eax
     3a5:	00 00                	add    BYTE PTR [eax],al
     3a7:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
     3aa:	00 30                	add    BYTE PTR [eax],dh
     3ac:	97                   	xchg   edi,eax
     3ad:	00 00                	add    BYTE PTR [eax],al
     3af:	00 01                	add    BYTE PTR [ecx],al
     3b1:	9c                   	pushf  
     3b2:	e9 00 00 00 07       	jmp    70003b7 <sysEnter_Vector+0x6ed03b7>
     3b7:	73 00                	jae    3b9 <sysEnter_Vector-0x12fc47>
     3b9:	01 28                	add    DWORD PTR [eax],ebp
     3bb:	92                   	xchg   edx,eax
     3bc:	00 00                	add    BYTE PTR [eax],al
     3be:	00 02                	add    BYTE PTR [edx],al
     3c0:	91                   	xchg   ecx,eax
     3c1:	00 08                	add    BYTE PTR [eax],cl
     3c3:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     3c4:	01 00                	add    DWORD PTR [eax],eax
     3c6:	00 01                	add    BYTE PTR [ecx],al
     3c8:	28 92 00 00 00 02    	sub    BYTE PTR [edx+0x2000000],dl
     3ce:	91                   	xchg   ecx,eax
     3cf:	04 09                	add    al,0x9
     3d1:	d3 01                	rol    DWORD PTR [ecx],cl
     3d3:	00 00                	add    BYTE PTR [eax],al
     3d5:	01 2a                	add    DWORD PTR [edx],ebp
     3d7:	92                   	xchg   edx,eax
     3d8:	00 00                	add    BYTE PTR [eax],al
     3da:	00 05 03 ec 44 00    	add    BYTE PTR ds:0x44ec03,al
     3e0:	30 0a                	xor    BYTE PTR [edx],cl
     3e2:	63 68 00             	arpl   WORD PTR [eax+0x0],bp
     3e5:	01 2b                	add    DWORD PTR [ebx],ebp
     3e7:	3a 00                	cmp    al,BYTE PTR [eax]
     3e9:	00 00                	add    BYTE PTR [eax],al
     3eb:	01 56 00             	add    DWORD PTR [esi+0x0],edx
     3ee:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
     3f1:	00 00                	add    BYTE PTR [eax],al
     3f3:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     3f6:	00 00                	add    BYTE PTR [eax],al
     3f8:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
     3fe:	30 0b                	xor    BYTE PTR [ebx],cl
     400:	af                   	scas   eax,DWORD PTR es:[edi]
     401:	00 00                	add    BYTE PTR [eax],al
     403:	00 02                	add    BYTE PTR [edx],al
     405:	35 56 00 00 00       	xor    eax,0x56
     40a:	05 03 e0 44 00       	add    eax,0x44e003
     40f:	30 0b                	xor    BYTE PTR [ebx],cl
     411:	5b                   	pop    ebx
     412:	01 00                	add    DWORD PTR [eax],eax
     414:	00 02                	add    BYTE PTR [edx],al
     416:	36                   	ss
     417:	56                   	push   esi
     418:	00 00                	add    BYTE PTR [eax],al
     41a:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
     420:	30 0b                	xor    BYTE PTR [ebx],cl
     422:	54                   	push   esp
     423:	00 00                	add    BYTE PTR [eax],al
     425:	00 02                	add    BYTE PTR [edx],al
     427:	37                   	aaa    
     428:	56                   	push   esi
     429:	00 00                	add    BYTE PTR [eax],al
     42b:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
     431:	30 0b                	xor    BYTE PTR [ebx],cl
     433:	28 00                	sub    BYTE PTR [eax],al
     435:	00 00                	add    BYTE PTR [eax],al
     437:	03 46 3e             	add    eax,DWORD PTR [esi+0x3e]
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
     442:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     448:	00 00                	add    BYTE PTR [eax],al
     44a:	12 02                	adc    al,BYTE PTR [edx]
     44c:	00 00                	add    BYTE PTR [eax],al
     44e:	04 00                	add    al,0x0
     450:	b7 01                	mov    bh,0x1
     452:	00 00                	add    BYTE PTR [eax],al
     454:	04 01                	add    al,0x1
     456:	f4                   	hlt    
     457:	00 00                	add    BYTE PTR [eax],al
     459:	00 0c e6             	add    BYTE PTR [esi+eiz*8],cl
     45c:	01 00                	add    DWORD PTR [eax],eax
     45e:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     461:	00 00                	add    BYTE PTR [eax],al
     463:	b4 01                	mov    ah,0x1
     465:	00 30                	add    BYTE PTR [eax],dh
     467:	49                   	dec    ecx
     468:	02 00                	add    al,BYTE PTR [eax]
     46a:	00 b3 02 00 00 02    	add    BYTE PTR [ebx+0x2000002],dh
     470:	01 06                	add    DWORD PTR [esi],eax
     472:	64 00 00             	add    BYTE PTR fs:[eax],al
     475:	00 02                	add    BYTE PTR [edx],al
     477:	01 06                	add    DWORD PTR [esi],eax
     479:	5d                   	pop    ebp
     47a:	00 00                	add    BYTE PTR [eax],al
     47c:	00 02                	add    BYTE PTR [edx],al
     47e:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     484:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     48b:	02 08                	add    cl,BYTE PTR [eax]
     48d:	05 00 00 00 00       	add    eax,0x0
     492:	02 01                	add    al,BYTE PTR [ecx]
     494:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     497:	00 00                	add    BYTE PTR [eax],al
     499:	02 02                	add    al,BYTE PTR [edx]
     49b:	07                   	pop    es
     49c:	0e                   	push   cs
     49d:	00 00                	add    BYTE PTR [eax],al
     49f:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     4a2:	00 00                	add    BYTE PTR [eax],al
     4a4:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     4a7:	61                   	popa   
     4a8:	00 00                	add    BYTE PTR [eax],al
     4aa:	00 02                	add    BYTE PTR [edx],al
     4ac:	04 07                	add    al,0x7
     4ae:	3e 00 00             	add    BYTE PTR ds:[eax],al
     4b1:	00 02                	add    BYTE PTR [edx],al
     4b3:	08 07                	or     BYTE PTR [edi],al
     4b5:	34 00                	xor    al,0x0
     4b7:	00 00                	add    BYTE PTR [eax],al
     4b9:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     4c0:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     4c3:	9b                   	fwait
     4c4:	00 00                	add    BYTE PTR [eax],al
     4c6:	00 02                	add    BYTE PTR [edx],al
     4c8:	01 02                	add    DWORD PTR [edx],eax
     4ca:	95                   	xchg   ebp,eax
     4cb:	00 00                	add    BYTE PTR [eax],al
     4cd:	00 02                	add    BYTE PTR [edx],al
     4cf:	04 07                	add    al,0x7
     4d1:	39 00                	cmp    DWORD PTR [eax],eax
     4d3:	00 00                	add    BYTE PTR [eax],al
     4d5:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     4d8:	e1 00                	loope  4da <sysEnter_Vector-0x12fb26>
     4da:	00 00                	add    BYTE PTR [eax],al
     4dc:	05 04 25 00 00       	add    eax,0x2504
     4e1:	00 06                	add    BYTE PTR [esi],al
     4e3:	fc                   	cld    
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 01                	add    BYTE PTR [ecx],al
     4e8:	09 b4 01 00 30 77 00 	or     DWORD PTR [ecx+eax*1+0x773000],esi
     4ef:	00 00                	add    BYTE PTR [eax],al
     4f1:	01 9c de 00 00 00 07 	add    DWORD PTR [esi+ebx*8+0x7000000],ebx
     4f8:	73 00                	jae    4fa <sysEnter_Vector-0x12fb06>
     4fa:	01 09                	add    DWORD PTR [ecx],ecx
     4fc:	92                   	xchg   edx,eax
     4fd:	00 00                	add    BYTE PTR [eax],al
     4ff:	00 02                	add    BYTE PTR [edx],al
     501:	91                   	xchg   ecx,eax
     502:	00 08                	add    BYTE PTR [eax],cl
     504:	69 00 01 0b 3a 00    	imul   eax,DWORD PTR [eax],0x3a0b01
     50a:	00 00                	add    BYTE PTR [eax],al
     50c:	02 91 6c 08 6a 00    	add    dl,BYTE PTR [ecx+0x6a086c]
     512:	01 0b                	add    DWORD PTR [ebx],ecx
     514:	3a 00                	cmp    al,BYTE PTR [eax]
     516:	00 00                	add    BYTE PTR [eax],al
     518:	02 91 68 08 63 00    	add    dl,BYTE PTR [ecx+0x630868]
     51e:	01 0c 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],ecx
     525:	91                   	xchg   ecx,eax
     526:	67 00 06 f2 01       	add    BYTE PTR ds:0x1f2,al
     52b:	00 00                	add    BYTE PTR [eax],al
     52d:	01 15 2b 02 00 30    	add    DWORD PTR ds:0x3000022b,edx
     533:	bb 00 00 00 01       	mov    ebx,0x1000000
     538:	9c                   	pushf  
     539:	26 01 00             	add    DWORD PTR es:[eax],eax
     53c:	00 07                	add    BYTE PTR [edi],al
     53e:	6e                   	outs   dx,BYTE PTR ds:[esi]
     53f:	00 01                	add    BYTE PTR [ecx],al
     541:	15 3a 00 00 00       	adc    eax,0x3a
     546:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     54c:	01 15 92 00 00 00    	add    DWORD PTR ds:0x92,edx
     552:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     558:	01 17                	add    DWORD PTR [edi],edx
     55a:	3a 00                	cmp    al,BYTE PTR [eax]
     55c:	00 00                	add    BYTE PTR [eax],al
     55e:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     564:	00 00                	add    BYTE PTR [eax],al
     566:	01 17                	add    DWORD PTR [edi],edx
     568:	3a 00                	cmp    al,BYTE PTR [eax]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	02 91 68 00 06 e0    	add    dl,BYTE PTR [ecx-0x1ff9ff98]
     572:	01 00                	add    DWORD PTR [eax],eax
     574:	00 01                	add    BYTE PTR [ecx],al
     576:	25 e6 02 00 30       	and    eax,0x300002e6
     57b:	bb 00 00 00 01       	mov    ebx,0x1000000
     580:	9c                   	pushf  
     581:	6e                   	outs   dx,BYTE PTR ds:[esi]
     582:	01 00                	add    DWORD PTR [eax],eax
     584:	00 07                	add    BYTE PTR [edi],al
     586:	6e                   	outs   dx,BYTE PTR ds:[esi]
     587:	00 01                	add    BYTE PTR [ecx],al
     589:	25 3a 00 00 00       	and    eax,0x3a
     58e:	02 91 00 07 73 00    	add    dl,BYTE PTR [ecx+0x730700]
     594:	01 25 92 00 00 00    	add    DWORD PTR ds:0x92,esp
     59a:	02 91 04 08 69 00    	add    dl,BYTE PTR [ecx+0x690804]
     5a0:	01 27                	add    DWORD PTR [edi],esp
     5a2:	3a 00                	cmp    al,BYTE PTR [eax]
     5a4:	00 00                	add    BYTE PTR [eax],al
     5a6:	02 91 6c 09 05 02    	add    dl,BYTE PTR [ecx+0x205096c]
     5ac:	00 00                	add    BYTE PTR [eax],al
     5ae:	01 27                	add    DWORD PTR [edi],esp
     5b0:	3a 00                	cmp    al,BYTE PTR [eax]
     5b2:	00 00                	add    BYTE PTR [eax],al
     5b4:	02 91 68 00 0a f7    	add    dl,BYTE PTR [ecx-0x8f5ff98]
     5ba:	01 00                	add    DWORD PTR [eax],eax
     5bc:	00 01                	add    BYTE PTR [ecx],al
     5be:	36 3a 00             	cmp    al,BYTE PTR ss:[eax]
     5c1:	00 00                	add    BYTE PTR [eax],al
     5c3:	a1 03 00 30 5c       	mov    eax,ds:0x5c300003
     5c8:	00 00                	add    BYTE PTR [eax],al
     5ca:	00 01                	add    BYTE PTR [ecx],al
     5cc:	9c                   	pushf  
     5cd:	ba 01 00 00 07       	mov    edx,0x7000001
     5d2:	73 74                	jae    648 <sysEnter_Vector-0x12f9b8>
     5d4:	72 00                	jb     5d6 <sysEnter_Vector-0x12fa2a>
     5d6:	01 36                	add    DWORD PTR [esi],esi
     5d8:	92                   	xchg   edx,eax
     5d9:	00 00                	add    BYTE PTR [eax],al
     5db:	00 02                	add    BYTE PTR [edx],al
     5dd:	91                   	xchg   ecx,eax
     5de:	00 08                	add    BYTE PTR [eax],cl
     5e0:	72 65                	jb     647 <sysEnter_Vector-0x12f9b9>
     5e2:	73 00                	jae    5e4 <sysEnter_Vector-0x12fa1c>
     5e4:	01 38                	add    DWORD PTR [eax],edi
     5e6:	3a 00                	cmp    al,BYTE PTR [eax]
     5e8:	00 00                	add    BYTE PTR [eax],al
     5ea:	02 91 74 0b b8 03    	add    dl,BYTE PTR [ecx+0x3b80b74]
     5f0:	00 30                	add    BYTE PTR [eax],dh
     5f2:	40                   	inc    eax
     5f3:	00 00                	add    BYTE PTR [eax],al
     5f5:	00 08                	add    BYTE PTR [eax],cl
     5f7:	69 00 01 3c 3a 00    	imul   eax,DWORD PTR [eax],0x3a3c01
     5fd:	00 00                	add    BYTE PTR [eax],al
     5ff:	02 91 70 00 00 0c    	add    dl,BYTE PTR [ecx+0xc000070]
     605:	4b                   	dec    ebx
     606:	00 00                	add    BYTE PTR [eax],al
     608:	00 02                	add    BYTE PTR [edx],al
     60a:	34 56                	xor    al,0x56
     60c:	00 00                	add    BYTE PTR [eax],al
     60e:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
     614:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
     617:	00 00                	add    BYTE PTR [eax],al
     619:	00 02                	add    BYTE PTR [edx],al
     61b:	35 56 00 00 00       	xor    eax,0x56
     620:	05 03 e0 44 00       	add    eax,0x44e003
     625:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
     628:	01 00                	add    DWORD PTR [eax],eax
     62a:	00 02                	add    BYTE PTR [edx],al
     62c:	36                   	ss
     62d:	56                   	push   esi
     62e:	00 00                	add    BYTE PTR [eax],al
     630:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
     636:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
     639:	00 00                	add    BYTE PTR [eax],al
     63b:	00 02                	add    BYTE PTR [edx],al
     63d:	37                   	aaa    
     63e:	56                   	push   esi
     63f:	00 00                	add    BYTE PTR [eax],al
     641:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
     647:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
     64a:	00 00                	add    BYTE PTR [eax],al
     64c:	00 03                	add    BYTE PTR [ebx],al
     64e:	46                   	inc    esi
     64f:	0f 02 00             	lar    eax,WORD PTR [eax]
     652:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
     658:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     65e:	00 00                	add    BYTE PTR [eax],al
     660:	b2 01                	mov    dl,0x1
     662:	00 00                	add    BYTE PTR [eax],al
     664:	04 00                	add    al,0x0
     666:	74 02                	je     66a <sysEnter_Vector-0x12f996>
     668:	00 00                	add    BYTE PTR [eax],al
     66a:	04 01                	add    al,0x1
     66c:	f4                   	hlt    
     66d:	00 00                	add    BYTE PTR [eax],al
     66f:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
     672:	02 00                	add    al,BYTE PTR [eax]
     674:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     677:	00 00                	add    BYTE PTR [eax],al
     679:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     67c:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
     67f:	00 00                	add    BYTE PTR [eax],al
     681:	c7 03 00 00 02 01    	mov    DWORD PTR [ebx],0x1020000
     687:	06                   	push   es
     688:	64 00 00             	add    BYTE PTR fs:[eax],al
     68b:	00 02                	add    BYTE PTR [edx],al
     68d:	01 06                	add    DWORD PTR [esi],eax
     68f:	5d                   	pop    ebp
     690:	00 00                	add    BYTE PTR [eax],al
     692:	00 02                	add    BYTE PTR [edx],al
     694:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     69a:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     6a1:	02 08                	add    cl,BYTE PTR [eax]
     6a3:	05 00 00 00 00       	add    eax,0x0
     6a8:	02 01                	add    al,BYTE PTR [ecx]
     6aa:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	02 02                	add    al,BYTE PTR [edx]
     6b1:	07                   	pop    es
     6b2:	0e                   	push   cs
     6b3:	00 00                	add    BYTE PTR [eax],al
     6b5:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     6b8:	00 00                	add    BYTE PTR [eax],al
     6ba:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     6bd:	61                   	popa   
     6be:	00 00                	add    BYTE PTR [eax],al
     6c0:	00 02                	add    BYTE PTR [edx],al
     6c2:	04 07                	add    al,0x7
     6c4:	3e 00 00             	add    BYTE PTR ds:[eax],al
     6c7:	00 02                	add    BYTE PTR [edx],al
     6c9:	08 07                	or     BYTE PTR [edi],al
     6cb:	34 00                	xor    al,0x0
     6cd:	00 00                	add    BYTE PTR [eax],al
     6cf:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     6d6:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     6d9:	9b                   	fwait
     6da:	00 00                	add    BYTE PTR [eax],al
     6dc:	00 02                	add    BYTE PTR [edx],al
     6de:	01 02                	add    DWORD PTR [edx],eax
     6e0:	95                   	xchg   ebp,eax
     6e1:	00 00                	add    BYTE PTR [eax],al
     6e3:	00 02                	add    BYTE PTR [edx],al
     6e5:	04 07                	add    al,0x7
     6e7:	39 00                	cmp    DWORD PTR [eax],eax
     6e9:	00 00                	add    BYTE PTR [eax],al
     6eb:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     6ee:	e1 00                	loope  6f0 <sysEnter_Vector-0x12f910>
     6f0:	00 00                	add    BYTE PTR [eax],al
     6f2:	05 04 25 00 00       	add    eax,0x2504
     6f7:	00 06                	add    BYTE PTR [esi],al
     6f9:	25 02 00 00 01       	and    eax,0x1000002
     6fe:	09 3a                	or     DWORD PTR [edx],edi
     700:	00 00                	add    BYTE PTR [eax],al
     702:	00 00                	add    BYTE PTR [eax],al
     704:	04 00                	add    al,0x0
     706:	30 aa 00 00 00 01    	xor    BYTE PTR [edx+0x1000000],ch
     70c:	9c                   	pushf  
     70d:	e6 00                	out    0x0,al
     70f:	00 00                	add    BYTE PTR [eax],al
     711:	07                   	pop    es
     712:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     715:	00 01                	add    BYTE PTR [ecx],al
     717:	09 92 00 00 00 02    	or     DWORD PTR [edx+0x2000000],edx
     71d:	91                   	xchg   ecx,eax
     71e:	00 07                	add    BYTE PTR [edi],al
     720:	0a 02                	or     al,BYTE PTR [edx]
     722:	00 00                	add    BYTE PTR [eax],al
     724:	01 09                	add    DWORD PTR [ecx],ecx
     726:	92                   	xchg   edx,eax
     727:	00 00                	add    BYTE PTR [eax],al
     729:	00 02                	add    BYTE PTR [edx],al
     72b:	91                   	xchg   ecx,eax
     72c:	04 08                	add    al,0x8
     72e:	12 04 00             	adc    al,BYTE PTR [eax+eax*1]
     731:	30 8e 00 00 00 09    	xor    BYTE PTR [esi+0x9000000],cl
     737:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
     73a:	00 01                	add    BYTE PTR [ecx],al
     73c:	0b 3a                	or     edi,DWORD PTR [edx]
     73e:	00 00                	add    BYTE PTR [eax],al
     740:	00 02                	add    BYTE PTR [edx],al
     742:	91                   	xchg   ecx,eax
     743:	6c                   	ins    BYTE PTR es:[edi],dx
     744:	00 00                	add    BYTE PTR [eax],al
     746:	0a 1e                	or     bl,BYTE PTR [esi]
     748:	02 00                	add    al,BYTE PTR [eax]
     74a:	00 01                	add    BYTE PTR [ecx],al
     74c:	14 aa                	adc    al,0xaa
     74e:	04 00                	add    al,0x0
     750:	30 c1                	xor    cl,al
     752:	01 00                	add    DWORD PTR [eax],eax
     754:	00 01                	add    BYTE PTR [ecx],al
     756:	9c                   	pushf  
     757:	5a                   	pop    edx
     758:	01 00                	add    DWORD PTR [eax],eax
     75a:	00 07                	add    BYTE PTR [edi],al
     75c:	3e 02 00             	add    al,BYTE PTR ds:[eax]
     75f:	00 01                	add    BYTE PTR [ecx],al
     761:	14 92                	adc    al,0x92
     763:	00 00                	add    BYTE PTR [eax],al
     765:	00 02                	add    BYTE PTR [edx],al
     767:	91                   	xchg   ecx,eax
     768:	00 07                	add    BYTE PTR [edi],al
     76a:	0a 02                	or     al,BYTE PTR [edx]
     76c:	00 00                	add    BYTE PTR [eax],al
     76e:	01 14 92             	add    DWORD PTR [edx+edx*4],edx
     771:	00 00                	add    BYTE PTR [eax],al
     773:	00 02                	add    BYTE PTR [edx],al
     775:	91                   	xchg   ecx,eax
     776:	04 0b                	add    al,0xb
     778:	10 02                	adc    BYTE PTR [edx],al
     77a:	00 00                	add    BYTE PTR [eax],al
     77c:	01 16                	add    DWORD PTR [esi],edx
     77e:	56                   	push   esi
     77f:	00 00                	add    BYTE PTR [eax],al
     781:	00 02                	add    BYTE PTR [edx],al
     783:	91                   	xchg   ecx,eax
     784:	6c                   	ins    BYTE PTR es:[edi],dx
     785:	0c c3                	or     al,0xc3
     787:	04 00                	add    al,0x0
     789:	30 eb                	xor    bl,ch
     78b:	00 00                	add    BYTE PTR [eax],al
     78d:	00 41 01             	add    BYTE PTR [ecx+0x1],al
     790:	00 00                	add    BYTE PTR [eax],al
     792:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     795:	74 00                	je     797 <sysEnter_Vector-0x12f869>
     797:	01 18                	add    DWORD PTR [eax],ebx
     799:	3a 00                	cmp    al,BYTE PTR [eax]
     79b:	00 00                	add    BYTE PTR [eax],al
     79d:	02 91 68 00 08 ae    	add    dl,BYTE PTR [ecx-0x51f7ff98]
     7a3:	05 00 30 b8 00       	add    eax,0xb83000
     7a8:	00 00                	add    BYTE PTR [eax],al
     7aa:	09 63 6e             	or     DWORD PTR [ebx+0x6e],esp
     7ad:	74 00                	je     7af <sysEnter_Vector-0x12f851>
     7af:	01 24 3a             	add    DWORD PTR [edx+edi*1],esp
     7b2:	00 00                	add    BYTE PTR [eax],al
     7b4:	00 02                	add    BYTE PTR [edx],al
     7b6:	91                   	xchg   ecx,eax
     7b7:	64 00 00             	add    BYTE PTR fs:[eax],al
     7ba:	0d 4b 00 00 00       	or     eax,0x4b
     7bf:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     7c2:	00 00                	add    BYTE PTR [eax],al
     7c4:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
     7ca:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
     7d0:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
     7d6:	05 03 e0 44 00       	add    eax,0x44e003
     7db:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
     7e1:	02 36                	add    dh,BYTE PTR [esi]
     7e3:	56                   	push   esi
     7e4:	00 00                	add    BYTE PTR [eax],al
     7e6:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
     7ec:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
     7f2:	02 37                	add    dh,BYTE PTR [edi]
     7f4:	56                   	push   esi
     7f5:	00 00                	add    BYTE PTR [eax],al
     7f7:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
     7fd:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
     803:	03 46 af             	add    eax,DWORD PTR [esi-0x51]
     806:	01 00                	add    DWORD PTR [eax],eax
     808:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
     80e:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
     814:	00 00                	add    BYTE PTR [eax],al
     816:	fa                   	cli    
     817:	02 00                	add    al,BYTE PTR [eax]
     819:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     81c:	3c 03                	cmp    al,0x3
     81e:	00 00                	add    BYTE PTR [eax],al
     820:	04 01                	add    al,0x1
     822:	f4                   	hlt    
     823:	00 00                	add    BYTE PTR [eax],al
     825:	00 0c a1             	add    BYTE PTR [ecx+eiz*4],cl
     828:	02 00                	add    al,BYTE PTR [eax]
     82a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     82d:	00 00                	add    BYTE PTR [eax],al
     82f:	6c                   	ins    BYTE PTR es:[edi],dx
     830:	06                   	push   es
     831:	00 30                	add    BYTE PTR [eax],dh
     833:	f2 00 00             	repnz add BYTE PTR [eax],al
     836:	00 d1                	add    cl,dl
     838:	04 00                	add    al,0x0
     83a:	00 02                	add    BYTE PTR [edx],al
     83c:	01 06                	add    DWORD PTR [esi],eax
     83e:	64 00 00             	add    BYTE PTR fs:[eax],al
     841:	00 02                	add    BYTE PTR [edx],al
     843:	01 06                	add    DWORD PTR [esi],eax
     845:	5d                   	pop    ebp
     846:	00 00                	add    BYTE PTR [eax],al
     848:	00 02                	add    BYTE PTR [edx],al
     84a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     850:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     857:	02 08                	add    cl,BYTE PTR [eax]
     859:	05 00 00 00 00       	add    eax,0x0
     85e:	02 01                	add    al,BYTE PTR [ecx]
     860:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     863:	00 00                	add    BYTE PTR [eax],al
     865:	02 02                	add    al,BYTE PTR [edx]
     867:	07                   	pop    es
     868:	0e                   	push   cs
     869:	00 00                	add    BYTE PTR [eax],al
     86b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     86e:	00 00                	add    BYTE PTR [eax],al
     870:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     873:	61                   	popa   
     874:	00 00                	add    BYTE PTR [eax],al
     876:	00 02                	add    BYTE PTR [edx],al
     878:	04 07                	add    al,0x7
     87a:	3e 00 00             	add    BYTE PTR ds:[eax],al
     87d:	00 02                	add    BYTE PTR [edx],al
     87f:	08 07                	or     BYTE PTR [edi],al
     881:	34 00                	xor    al,0x0
     883:	00 00                	add    BYTE PTR [eax],al
     885:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     88c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     88f:	9b                   	fwait
     890:	00 00                	add    BYTE PTR [eax],al
     892:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
     898:	00 06                	add    BYTE PTR [esi],al
     89a:	25 00 00 00 02       	and    eax,0x2000000
     89f:	01 02                	add    DWORD PTR [edx],eax
     8a1:	95                   	xchg   ebp,eax
     8a2:	00 00                	add    BYTE PTR [eax],al
     8a4:	00 07                	add    BYTE PTR [edi],al
     8a6:	07                   	pop    es
     8a7:	03 00                	add    eax,DWORD PTR [eax]
     8a9:	00 04 61             	add    BYTE PTR [ecx+eiz*2],al
     8ac:	00 00                	add    BYTE PTR [eax],al
     8ae:	00 05 15 4a 01 00    	add    BYTE PTR ds:0x14a15,al
     8b4:	00 08                	add    BYTE PTR [eax],cl
     8b6:	6c                   	ins    BYTE PTR es:[edi],dx
     8b7:	03 00                	add    eax,DWORD PTR [eax]
     8b9:	00 00                	add    BYTE PTR [eax],al
     8bb:	08 a4 03 00 00 01 08 	or     BYTE PTR [ebx+eax*1+0x8010000],ah
     8c2:	73 02                	jae    8c6 <sysEnter_Vector-0x12f73a>
     8c4:	00 00                	add    BYTE PTR [eax],al
     8c6:	02 08                	add    cl,BYTE PTR [eax]
     8c8:	f9                   	stc    
     8c9:	02 00                	add    al,BYTE PTR [eax]
     8cb:	00 03                	add    BYTE PTR [ebx],al
     8cd:	08 53 02             	or     BYTE PTR [ebx+0x2],dl
     8d0:	00 00                	add    BYTE PTR [eax],al
     8d2:	04 08                	add    al,0x8
     8d4:	be 03 00 00 05       	mov    esi,0x5000003
     8d9:	08 1d 03 00 00 06    	or     BYTE PTR ds:0x6000003,bl
     8df:	08 66 02             	or     BYTE PTR [esi+0x2],ah
     8e2:	00 00                	add    BYTE PTR [eax],al
     8e4:	07                   	pop    es
     8e5:	08 f4                	or     ah,dh
     8e7:	03 00                	add    eax,DWORD PTR [eax]
     8e9:	00 4f 08             	add    BYTE PTR [edi+0x8],cl
     8ec:	5f                   	pop    edi
     8ed:	03 00                	add    eax,DWORD PTR [eax]
     8ef:	00 59 08             	add    BYTE PTR [ecx+0x8],bl
     8f2:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     8f5:	00 61 08             	add    BYTE PTR [ecx+0x8],ah
     8f8:	e5 02                	in     eax,0x2
     8fa:	00 00                	add    BYTE PTR [eax],al
     8fc:	97                   	xchg   edi,eax
     8fd:	09 7c 03 00          	or     DWORD PTR [ebx+eax*1+0x0],edi
     901:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     904:	09 52 03             	or     DWORD PTR [edx+0x3],edx
     907:	00 00                	add    BYTE PTR [eax],al
     909:	64 01 09             	add    DWORD PTR fs:[ecx],ecx
     90c:	e6 03                	out    0x3,al
     90e:	00 00                	add    BYTE PTR [eax],al
     910:	65 01 09             	add    DWORD PTR gs:[ecx],ecx
     913:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
     919:	09 1b                	or     DWORD PTR [ebx],ebx
     91b:	04 00                	add    al,0x0
     91d:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     920:	09 2a                	or     DWORD PTR [edx],ebp
     922:	03 00                	add    eax,DWORD PTR [eax]
     924:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     927:	09 ac 02 00 00 69 01 	or     DWORD PTR [edx+eax*1+0x1690000],ebp
     92e:	09 93 03 00 00 70    	or     DWORD PTR [ebx+0x70000003],edx
     934:	01 09                	add    DWORD PTR [ecx],ecx
     936:	d5 02                	aad    0x2
     938:	00 00                	add    BYTE PTR [eax],al
     93a:	71 01                	jno    93d <sysEnter_Vector-0x12f6c3>
     93c:	09 cc                	or     esp,ecx
     93e:	03 00                	add    eax,DWORD PTR [eax]
     940:	00 00                	add    BYTE PTR [eax],al
     942:	03 09                	add    ecx,DWORD PTR [ecx]
     944:	37                   	aaa    
     945:	03 00                	add    eax,DWORD PTR [eax]
     947:	00 01                	add    BYTE PTR [ecx],al
     949:	03 09                	add    ecx,DWORD PTR [ecx]
     94b:	bb 02 00 00 02       	mov    ebx,0x2000002
     950:	03 09                	add    ecx,DWORD PTR [ecx]
     952:	80 02 00             	add    BYTE PTR [edx],0x0
     955:	00 03                	add    BYTE PTR [ebx],al
     957:	03 09                	add    ecx,DWORD PTR [ecx]
     959:	90                   	nop
     95a:	02 00                	add    al,BYTE PTR [eax]
     95c:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     95f:	00 02                	add    BYTE PTR [edx],al
     961:	04 07                	add    al,0x7
     963:	39 00                	cmp    DWORD PTR [eax],eax
     965:	00 00                	add    BYTE PTR [eax],al
     967:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     96a:	e1 00                	loope  96c <sysEnter_Vector-0x12f694>
     96c:	00 00                	add    BYTE PTR [eax],al
     96e:	0a 04 05 04 25 00 00 	or     al,BYTE PTR [eax*1+0x2504]
     975:	00 0b                	add    BYTE PTR [ebx],cl
     977:	16                   	push   ss
     978:	04 00                	add    al,0x0
     97a:	00 01                	add    BYTE PTR [ecx],al
     97c:	09 58 01             	or     DWORD PTR [eax+0x1],ebx
     97f:	00 00                	add    BYTE PTR [eax],al
     981:	6c                   	ins    BYTE PTR es:[edi],dx
     982:	06                   	push   es
     983:	00 30                	add    BYTE PTR [eax],dh
     985:	2d 00 00 00 01       	sub    eax,0x1000000
     98a:	9c                   	pushf  
     98b:	96                   	xchg   esi,eax
     98c:	01 00                	add    DWORD PTR [eax],eax
     98e:	00 0c b1             	add    BYTE PTR [ecx+esi*4],cl
     991:	08 00                	or     BYTE PTR [eax],al
     993:	00 01                	add    BYTE PTR [ecx],al
     995:	09 5a 01             	or     DWORD PTR [edx+0x1],ebx
     998:	00 00                	add    BYTE PTR [eax],al
     99a:	02 91 00 0c 5f 08    	add    dl,BYTE PTR [ecx+0x85f0c00]
     9a0:	00 00                	add    BYTE PTR [eax],al
     9a2:	01 09                	add    DWORD PTR [ecx],ecx
     9a4:	7d 00                	jge    9a6 <sysEnter_Vector-0x12f65a>
     9a6:	00 00                	add    BYTE PTR [eax],al
     9a8:	02 91 04 00 0d 4d    	add    dl,BYTE PTR [ecx+0x4d0d0004]
     9ae:	02 00                	add    al,BYTE PTR [eax]
     9b0:	00 01                	add    BYTE PTR [ecx],al
     9b2:	0e                   	push   cs
     9b3:	99                   	cdq    
     9b4:	06                   	push   es
     9b5:	00 30                	add    BYTE PTR [eax],dh
     9b7:	2a 00                	sub    al,BYTE PTR [eax]
     9b9:	00 00                	add    BYTE PTR [eax],al
     9bb:	01 9c ba 01 00 00 0c 	add    DWORD PTR [edx+edi*4+0xc000001],ebx
     9c2:	da 03                	fiadd  DWORD PTR [ebx]
     9c4:	00 00                	add    BYTE PTR [eax],al
     9c6:	01 0e                	add    DWORD PTR [esi],ecx
     9c8:	58                   	pop    eax
     9c9:	01 00                	add    DWORD PTR [eax],eax
     9cb:	00 02                	add    BYTE PTR [edx],al
     9cd:	91                   	xchg   ecx,eax
     9ce:	00 00                	add    BYTE PTR [eax],al
     9d0:	0b 18                	or     ebx,DWORD PTR [eax]
     9d2:	03 00                	add    eax,DWORD PTR [eax]
     9d4:	00 01                	add    BYTE PTR [ecx],al
     9d6:	13 3a                	adc    edi,DWORD PTR [edx]
     9d8:	00 00                	add    BYTE PTR [eax],al
     9da:	00 c3                	add    bl,al
     9dc:	06                   	push   es
     9dd:	00 30                	add    BYTE PTR [eax],dh
     9df:	35 00 00 00 01       	xor    eax,0x1000000
     9e4:	9c                   	pushf  
     9e5:	0c 02                	or     al,0x2
     9e7:	00 00                	add    BYTE PTR [eax],al
     9e9:	0c da                	or     al,0xda
     9eb:	03 00                	add    eax,DWORD PTR [eax]
     9ed:	00 01                	add    BYTE PTR [ecx],al
     9ef:	13 58 01             	adc    ebx,DWORD PTR [eax+0x1]
     9f2:	00 00                	add    BYTE PTR [eax],al
     9f4:	02 91 00 0c b7 03    	add    dl,BYTE PTR [ecx+0x3b70c00]
     9fa:	00 00                	add    BYTE PTR [eax],al
     9fc:	01 13                	add    DWORD PTR [ebx],edx
     9fe:	58                   	pop    eax
     9ff:	01 00                	add    DWORD PTR [eax],eax
     a01:	00 02                	add    BYTE PTR [edx],al
     a03:	91                   	xchg   ecx,eax
     a04:	04 0c                	add    al,0xc
     a06:	e1 03                	loope  a0b <sysEnter_Vector-0x12f5f5>
     a08:	00 00                	add    BYTE PTR [eax],al
     a0a:	01 13                	add    DWORD PTR [ebx],edx
     a0c:	3a 00                	cmp    al,BYTE PTR [eax]
     a0e:	00 00                	add    BYTE PTR [eax],al
     a10:	02 91 08 0c 11 03    	add    dl,BYTE PTR [ecx+0x3110c08]
     a16:	00 00                	add    BYTE PTR [eax],al
     a18:	01 13                	add    DWORD PTR [ebx],edx
     a1a:	3a 00                	cmp    al,BYTE PTR [eax]
     a1c:	00 00                	add    BYTE PTR [eax],al
     a1e:	02 91 0c 00 0b 60    	add    dl,BYTE PTR [ecx+0x600b000c]
     a24:	02 00                	add    al,BYTE PTR [eax]
     a26:	00 01                	add    BYTE PTR [ecx],al
     a28:	18 3a                	sbb    BYTE PTR [edx],bh
     a2a:	00 00                	add    BYTE PTR [eax],al
     a2c:	00 f8                	add    al,bh
     a2e:	06                   	push   es
     a2f:	00 30                	add    BYTE PTR [eax],dh
     a31:	35 00 00 00 01       	xor    eax,0x1000000
     a36:	9c                   	pushf  
     a37:	5e                   	pop    esi
     a38:	02 00                	add    al,BYTE PTR [eax]
     a3a:	00 0c da             	add    BYTE PTR [edx+ebx*8],cl
     a3d:	03 00                	add    eax,DWORD PTR [eax]
     a3f:	00 01                	add    BYTE PTR [ecx],al
     a41:	18 58 01             	sbb    BYTE PTR [eax+0x1],bl
     a44:	00 00                	add    BYTE PTR [eax],al
     a46:	02 91 00 0c b7 03    	add    dl,BYTE PTR [ecx+0x3b70c00]
     a4c:	00 00                	add    BYTE PTR [eax],al
     a4e:	01 18                	add    DWORD PTR [eax],ebx
     a50:	58                   	pop    eax
     a51:	01 00                	add    DWORD PTR [eax],eax
     a53:	00 02                	add    BYTE PTR [edx],al
     a55:	91                   	xchg   ecx,eax
     a56:	04 0c                	add    al,0xc
     a58:	e1 03                	loope  a5d <sysEnter_Vector-0x12f5a3>
     a5a:	00 00                	add    BYTE PTR [eax],al
     a5c:	01 18                	add    DWORD PTR [eax],ebx
     a5e:	3a 00                	cmp    al,BYTE PTR [eax]
     a60:	00 00                	add    BYTE PTR [eax],al
     a62:	02 91 08 0c 11 03    	add    dl,BYTE PTR [ecx+0x3110c08]
     a68:	00 00                	add    BYTE PTR [eax],al
     a6a:	01 18                	add    DWORD PTR [eax],ebx
     a6c:	3a 00                	cmp    al,BYTE PTR [eax]
     a6e:	00 00                	add    BYTE PTR [eax],al
     a70:	02 91 0c 00 0b 46    	add    dl,BYTE PTR [ecx+0x460b000c]
     a76:	02 00                	add    al,BYTE PTR [eax]
     a78:	00 01                	add    BYTE PTR [ecx],al
     a7a:	1e                   	push   ds
     a7b:	3a 00                	cmp    al,BYTE PTR [eax]
     a7d:	00 00                	add    BYTE PTR [eax],al
     a7f:	2d 07 00 30 31       	sub    eax,0x31300007
     a84:	00 00                	add    BYTE PTR [eax],al
     a86:	00 01                	add    BYTE PTR [ecx],al
     a88:	9c                   	pushf  
     a89:	a2 02 00 00 0c       	mov    ds:0xc000002,al
     a8e:	b1 08                	mov    cl,0x8
     a90:	00 00                	add    BYTE PTR [eax],al
     a92:	01 1e                	add    DWORD PTR [esi],ebx
     a94:	5a                   	pop    edx
     a95:	01 00                	add    DWORD PTR [eax],eax
     a97:	00 02                	add    BYTE PTR [edx],al
     a99:	91                   	xchg   ecx,eax
     a9a:	00 0c b7             	add    BYTE PTR [edi+esi*4],cl
     a9d:	03 00                	add    eax,DWORD PTR [eax]
     a9f:	00 01                	add    BYTE PTR [ecx],al
     aa1:	1e                   	push   ds
     aa2:	5a                   	pop    edx
     aa3:	01 00                	add    DWORD PTR [eax],eax
     aa5:	00 02                	add    BYTE PTR [edx],al
     aa7:	91                   	xchg   ecx,eax
     aa8:	04 0c                	add    al,0xc
     aaa:	46                   	inc    esi
     aab:	03 00                	add    eax,DWORD PTR [eax]
     aad:	00 01                	add    BYTE PTR [ecx],al
     aaf:	1e                   	push   ds
     ab0:	3a 00                	cmp    al,BYTE PTR [eax]
     ab2:	00 00                	add    BYTE PTR [eax],al
     ab4:	02 91 08 00 0e 4b    	add    dl,BYTE PTR [ecx+0x4b0e0008]
     aba:	00 00                	add    BYTE PTR [eax],al
     abc:	00 02                	add    BYTE PTR [edx],al
     abe:	34 56                	xor    al,0x56
     ac0:	00 00                	add    BYTE PTR [eax],al
     ac2:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
     ac8:	30 0e                	xor    BYTE PTR [esi],cl
     aca:	af                   	scas   eax,DWORD PTR es:[edi]
     acb:	00 00                	add    BYTE PTR [eax],al
     acd:	00 02                	add    BYTE PTR [edx],al
     acf:	35 56 00 00 00       	xor    eax,0x56
     ad4:	05 03 e0 44 00       	add    eax,0x44e003
     ad9:	30 0e                	xor    BYTE PTR [esi],cl
     adb:	5b                   	pop    ebx
     adc:	01 00                	add    DWORD PTR [eax],eax
     ade:	00 02                	add    BYTE PTR [edx],al
     ae0:	36                   	ss
     ae1:	56                   	push   esi
     ae2:	00 00                	add    BYTE PTR [eax],al
     ae4:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
     aea:	30 0e                	xor    BYTE PTR [esi],cl
     aec:	54                   	push   esp
     aed:	00 00                	add    BYTE PTR [eax],al
     aef:	00 02                	add    BYTE PTR [edx],al
     af1:	37                   	aaa    
     af2:	56                   	push   esi
     af3:	00 00                	add    BYTE PTR [eax],al
     af5:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
     afb:	30 0e                	xor    BYTE PTR [esi],cl
     afd:	28 00                	sub    BYTE PTR [eax],al
     aff:	00 00                	add    BYTE PTR [eax],al
     b01:	03 46 f7             	add    eax,DWORD PTR [esi-0x9]
     b04:	02 00                	add    al,BYTE PTR [eax]
     b06:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
     b0c:	30 05 04 5a 01 00    	xor    BYTE PTR ds:0x15a04,al
     b12:	00 00                	add    BYTE PTR [eax],al
     b14:	ae                   	scas   al,BYTE PTR es:[edi]
     b15:	02 00                	add    al,BYTE PTR [eax]
     b17:	00 04 00             	add    BYTE PTR [eax+eax*1],al
     b1a:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     b1d:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     b20:	f4                   	hlt    
     b21:	00 00                	add    BYTE PTR [eax],al
     b23:	00 0c 46             	add    BYTE PTR [esi+eax*2],cl
     b26:	04 00                	add    al,0x0
     b28:	00 72 00             	add    BYTE PTR [edx+0x0],dh
     b2b:	00 00                	add    BYTE PTR [eax],al
     b2d:	60                   	pusha  
     b2e:	07                   	pop    es
     b2f:	00 30                	add    BYTE PTR [eax],dh
     b31:	52                   	push   edx
     b32:	01 00                	add    DWORD PTR [eax],eax
     b34:	00 cd                	add    ch,cl
     b36:	05 00 00 02 01       	add    eax,0x1020000
     b3b:	06                   	push   es
     b3c:	64 00 00             	add    BYTE PTR fs:[eax],al
     b3f:	00 02                	add    BYTE PTR [edx],al
     b41:	01 06                	add    DWORD PTR [esi],eax
     b43:	5d                   	pop    ebp
     b44:	00 00                	add    BYTE PTR [eax],al
     b46:	00 02                	add    BYTE PTR [edx],al
     b48:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
     b4e:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
     b55:	02 08                	add    cl,BYTE PTR [eax]
     b57:	05 00 00 00 00       	add    eax,0x0
     b5c:	02 01                	add    al,BYTE PTR [ecx]
     b5e:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     b61:	00 00                	add    BYTE PTR [eax],al
     b63:	02 02                	add    al,BYTE PTR [edx]
     b65:	07                   	pop    es
     b66:	0e                   	push   cs
     b67:	00 00                	add    BYTE PTR [eax],al
     b69:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
     b6c:	00 00                	add    BYTE PTR [eax],al
     b6e:	00 04 34             	add    BYTE PTR [esp+esi*1],al
     b71:	61                   	popa   
     b72:	00 00                	add    BYTE PTR [eax],al
     b74:	00 02                	add    BYTE PTR [edx],al
     b76:	04 07                	add    al,0x7
     b78:	3e 00 00             	add    BYTE PTR ds:[eax],al
     b7b:	00 02                	add    BYTE PTR [edx],al
     b7d:	08 07                	or     BYTE PTR [edi],al
     b7f:	34 00                	xor    al,0x0
     b81:	00 00                	add    BYTE PTR [eax],al
     b83:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
     b8a:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
     b8d:	9b                   	fwait
     b8e:	00 00                	add    BYTE PTR [eax],al
     b90:	00 02                	add    BYTE PTR [edx],al
     b92:	01 02                	add    DWORD PTR [edx],eax
     b94:	95                   	xchg   ebp,eax
     b95:	00 00                	add    BYTE PTR [eax],al
     b97:	00 05 07 03 00 00    	add    BYTE PTR ds:0x307,al
     b9d:	04 61                	add    al,0x61
     b9f:	00 00                	add    BYTE PTR [eax],al
     ba1:	00 05 15 3f 01 00    	add    BYTE PTR ds:0x13f15,al
     ba7:	00 06                	add    BYTE PTR [esi],al
     ba9:	6c                   	ins    BYTE PTR es:[edi],dx
     baa:	03 00                	add    eax,DWORD PTR [eax]
     bac:	00 00                	add    BYTE PTR [eax],al
     bae:	06                   	push   es
     baf:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     bb0:	03 00                	add    eax,DWORD PTR [eax]
     bb2:	00 01                	add    BYTE PTR [ecx],al
     bb4:	06                   	push   es
     bb5:	73 02                	jae    bb9 <sysEnter_Vector-0x12f447>
     bb7:	00 00                	add    BYTE PTR [eax],al
     bb9:	02 06                	add    al,BYTE PTR [esi]
     bbb:	f9                   	stc    
     bbc:	02 00                	add    al,BYTE PTR [eax]
     bbe:	00 03                	add    BYTE PTR [ebx],al
     bc0:	06                   	push   es
     bc1:	53                   	push   ebx
     bc2:	02 00                	add    al,BYTE PTR [eax]
     bc4:	00 04 06             	add    BYTE PTR [esi+eax*1],al
     bc7:	be 03 00 00 05       	mov    esi,0x5000003
     bcc:	06                   	push   es
     bcd:	1d 03 00 00 06       	sbb    eax,0x6000003
     bd2:	06                   	push   es
     bd3:	66                   	data16
     bd4:	02 00                	add    al,BYTE PTR [eax]
     bd6:	00 07                	add    BYTE PTR [edi],al
     bd8:	06                   	push   es
     bd9:	f4                   	hlt    
     bda:	03 00                	add    eax,DWORD PTR [eax]
     bdc:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
     bdf:	5f                   	pop    edi
     be0:	03 00                	add    eax,DWORD PTR [eax]
     be2:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
     be5:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     be8:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
     beb:	e5 02                	in     eax,0x2
     bed:	00 00                	add    BYTE PTR [eax],al
     bef:	97                   	xchg   edi,eax
     bf0:	07                   	pop    es
     bf1:	7c 03                	jl     bf6 <sysEnter_Vector-0x12f40a>
     bf3:	00 00                	add    BYTE PTR [eax],al
     bf5:	63 01                	arpl   WORD PTR [ecx],ax
     bf7:	07                   	pop    es
     bf8:	52                   	push   edx
     bf9:	03 00                	add    eax,DWORD PTR [eax]
     bfb:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
     bff:	e6 03                	out    0x3,al
     c01:	00 00                	add    BYTE PTR [eax],al
     c03:	65 01 07             	add    DWORD PTR gs:[edi],eax
     c06:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
     c0c:	07                   	pop    es
     c0d:	1b 04 00             	sbb    eax,DWORD PTR [eax+eax*1]
     c10:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     c13:	07                   	pop    es
     c14:	2a 03                	sub    al,BYTE PTR [ebx]
     c16:	00 00                	add    BYTE PTR [eax],al
     c18:	68 01 07 ac 02       	push   0x2ac0701
     c1d:	00 00                	add    BYTE PTR [eax],al
     c1f:	69 01 07 93 03 00    	imul   eax,DWORD PTR [ecx],0x39307
     c25:	00 70 01             	add    BYTE PTR [eax+0x1],dh
     c28:	07                   	pop    es
     c29:	d5 02                	aad    0x2
     c2b:	00 00                	add    BYTE PTR [eax],al
     c2d:	71 01                	jno    c30 <sysEnter_Vector-0x12f3d0>
     c2f:	07                   	pop    es
     c30:	cc                   	int3   
     c31:	03 00                	add    eax,DWORD PTR [eax]
     c33:	00 00                	add    BYTE PTR [eax],al
     c35:	03 07                	add    eax,DWORD PTR [edi]
     c37:	37                   	aaa    
     c38:	03 00                	add    eax,DWORD PTR [eax]
     c3a:	00 01                	add    BYTE PTR [ecx],al
     c3c:	03 07                	add    eax,DWORD PTR [edi]
     c3e:	bb 02 00 00 02       	mov    ebx,0x2000002
     c43:	03 07                	add    eax,DWORD PTR [edi]
     c45:	80 02 00             	add    BYTE PTR [edx],0x0
     c48:	00 03                	add    BYTE PTR [ebx],al
     c4a:	03 07                	add    eax,DWORD PTR [edi]
     c4c:	90                   	nop
     c4d:	02 00                	add    al,BYTE PTR [eax]
     c4f:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     c52:	00 02                	add    BYTE PTR [edx],al
     c54:	04 07                	add    al,0x7
     c56:	39 00                	cmp    DWORD PTR [eax],eax
     c58:	00 00                	add    BYTE PTR [eax],al
     c5a:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
     c5d:	e1 00                	loope  c5f <sysEnter_Vector-0x12f3a1>
     c5f:	00 00                	add    BYTE PTR [eax],al
     c61:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
     c68:	75 04                	jne    c6e <sysEnter_Vector-0x12f392>
     c6a:	00 00                	add    BYTE PTR [eax],al
     c6c:	01 0f                	add    DWORD PTR [edi],ecx
     c6e:	60                   	pusha  
     c6f:	07                   	pop    es
     c70:	00 30                	add    BYTE PTR [eax],dh
     c72:	26 00 00             	add    BYTE PTR es:[eax],al
     c75:	00 01                	add    BYTE PTR [ecx],al
     c77:	9c                   	pushf  
     c78:	77 01                	ja     c7b <sysEnter_Vector-0x12f385>
     c7a:	00 00                	add    BYTE PTR [eax],al
     c7c:	0a b7 03 00 00 01    	or     dh,BYTE PTR [edi+0x1000003]
     c82:	0f 4d 01             	cmovge eax,DWORD PTR [ecx]
     c85:	00 00                	add    BYTE PTR [eax],al
     c87:	02 91 00 00 09 70    	add    dl,BYTE PTR [ecx+0x70090000]
     c8d:	04 00                	add    al,0x0
     c8f:	00 01                	add    BYTE PTR [ecx],al
     c91:	14 86                	adc    al,0x86
     c93:	07                   	pop    es
     c94:	00 30                	add    BYTE PTR [eax],dh
     c96:	43                   	inc    ebx
     c97:	00 00                	add    BYTE PTR [eax],al
     c99:	00 01                	add    BYTE PTR [ecx],al
     c9b:	9c                   	pushf  
     c9c:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     c9d:	01 00                	add    DWORD PTR [eax],eax
     c9f:	00 0b                	add    BYTE PTR [ebx],cl
     ca1:	63 00                	arpl   WORD PTR [eax],ax
     ca3:	01 14 25 00 00 00 02 	add    DWORD PTR [eiz*1+0x2000000],edx
     caa:	91                   	xchg   ecx,eax
     cab:	60                   	pusha  
     cac:	0c b7                	or     al,0xb7
     cae:	03 00                	add    eax,DWORD PTR [eax]
     cb0:	00 01                	add    BYTE PTR [ecx],al
     cb2:	16                   	push   ss
     cb3:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
     cb4:	01 00                	add    DWORD PTR [eax],eax
     cb6:	00 02                	add    BYTE PTR [edx],al
     cb8:	91                   	xchg   ecx,eax
     cb9:	72 00                	jb     cbb <sysEnter_Vector-0x12f345>
     cbb:	0d 25 00 00 00       	or     eax,0x25
     cc0:	b7 01                	mov    bh,0x1
     cc2:	00 00                	add    BYTE PTR [eax],al
     cc4:	0e                   	push   cs
     cc5:	46                   	inc    esi
     cc6:	01 00                	add    DWORD PTR [eax],eax
     cc8:	00 01                	add    BYTE PTR [ecx],al
     cca:	00 0f                	add    BYTE PTR [edi],cl
     ccc:	5f                   	pop    edi
     ccd:	04 00                	add    al,0x0
     ccf:	00 01                	add    BYTE PTR [ecx],al
     cd1:	1d 25 00 00 00       	sbb    eax,0x25
     cd6:	c9                   	leave  
     cd7:	07                   	pop    es
     cd8:	00 30                	add    BYTE PTR [eax],dh
     cda:	2f                   	das    
     cdb:	00 00                	add    BYTE PTR [eax],al
     cdd:	00 01                	add    BYTE PTR [ecx],al
     cdf:	9c                   	pushf  
     ce0:	dd 01                	fld    QWORD PTR [ecx]
     ce2:	00 00                	add    BYTE PTR [eax],al
     ce4:	10 63 00             	adc    BYTE PTR [ebx+0x0],ah
     ce7:	01 1f                	add    DWORD PTR [edi],ebx
     ce9:	25 00 00 00 02       	and    eax,0x2000000
     cee:	91                   	xchg   ecx,eax
     cef:	73 00                	jae    cf1 <sysEnter_Vector-0x12f30f>
     cf1:	11 6b 04             	adc    DWORD PTR [ebx+0x4],ebp
     cf4:	00 00                	add    BYTE PTR [eax],al
     cf6:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     cfc:	f8                   	clc    
     cfd:	07                   	pop    es
     cfe:	00 30                	add    BYTE PTR [eax],dh
     d00:	ba 00 00 00 01       	mov    edx,0x1000000
     d05:	9c                   	pushf  
     d06:	56                   	push   esi
     d07:	02 00                	add    al,BYTE PTR [eax]
     d09:	00 0a                	add    BYTE PTR [edx],cl
     d0b:	b7 03                	mov    bh,0x3
     d0d:	00 00                	add    BYTE PTR [eax],al
     d0f:	01 25 4d 01 00 00    	add    DWORD PTR ds:0x14d,esp
     d15:	02 91 00 0a 64 04    	add    dl,BYTE PTR [ecx+0x4640a00]
     d1b:	00 00                	add    BYTE PTR [eax],al
     d1d:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d23:	02 91 04 0a 30 04    	add    dl,BYTE PTR [ecx+0x4300a04]
     d29:	00 00                	add    BYTE PTR [eax],al
     d2b:	01 25 3a 00 00 00    	add    DWORD PTR ds:0x3a,esp
     d31:	02 91 08 0c 58 04    	add    dl,BYTE PTR [ecx+0x4580c08]
     d37:	00 00                	add    BYTE PTR [eax],al
     d39:	01 27                	add    DWORD PTR [edi],esp
     d3b:	25 00 00 00 02       	and    eax,0x2000000
     d40:	91                   	xchg   ecx,eax
     d41:	6b 10 6c             	imul   edx,DWORD PTR [eax],0x6c
     d44:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     d46:	00 01                	add    BYTE PTR [ecx],al
     d48:	28 3a                	sub    BYTE PTR [edx],bh
     d4a:	00 00                	add    BYTE PTR [eax],al
     d4c:	00 02                	add    BYTE PTR [edx],al
     d4e:	91                   	xchg   ecx,eax
     d4f:	6c                   	ins    BYTE PTR es:[edi],dx
     d50:	0c 41                	or     al,0x41
     d52:	04 00                	add    al,0x0
     d54:	00 01                	add    BYTE PTR [ecx],al
     d56:	29 a7 01 00 00 02    	sub    DWORD PTR [edi+0x2000001],esp
     d5c:	91                   	xchg   ecx,eax
     d5d:	69 12 37 04 00 00    	imul   edx,DWORD PTR [edx],0x437
     d63:	01 2e                	add    DWORD PTR [esi],ebp
     d65:	35 08 00 30 00       	xor    eax,0x300008
     d6a:	13 4b 00             	adc    ecx,DWORD PTR [ebx+0x0]
     d6d:	00 00                	add    BYTE PTR [eax],al
     d6f:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
     d72:	00 00                	add    BYTE PTR [eax],al
     d74:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
     d7a:	30 13                	xor    BYTE PTR [ebx],dl
     d7c:	af                   	scas   eax,DWORD PTR es:[edi]
     d7d:	00 00                	add    BYTE PTR [eax],al
     d7f:	00 02                	add    BYTE PTR [edx],al
     d81:	35 56 00 00 00       	xor    eax,0x56
     d86:	05 03 e0 44 00       	add    eax,0x44e003
     d8b:	30 13                	xor    BYTE PTR [ebx],dl
     d8d:	5b                   	pop    ebx
     d8e:	01 00                	add    DWORD PTR [eax],eax
     d90:	00 02                	add    BYTE PTR [edx],al
     d92:	36                   	ss
     d93:	56                   	push   esi
     d94:	00 00                	add    BYTE PTR [eax],al
     d96:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
     d9c:	30 13                	xor    BYTE PTR [ebx],dl
     d9e:	54                   	push   esp
     d9f:	00 00                	add    BYTE PTR [eax],al
     da1:	00 02                	add    BYTE PTR [edx],al
     da3:	37                   	aaa    
     da4:	56                   	push   esi
     da5:	00 00                	add    BYTE PTR [eax],al
     da7:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
     dad:	30 13                	xor    BYTE PTR [ebx],dl
     daf:	28 00                	sub    BYTE PTR [eax],al
     db1:	00 00                	add    BYTE PTR [eax],al
     db3:	03 46 ab             	add    eax,DWORD PTR [esi-0x55]
     db6:	02 00                	add    al,BYTE PTR [eax]
     db8:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
     dbe:	30 08                	xor    BYTE PTR [eax],cl
     dc0:	04 4d                	add    al,0x4d
     dc2:	01 00                	add    DWORD PTR [eax],eax
     dc4:	00 00                	add    BYTE PTR [eax],al
     dc6:	72 06                	jb     dce <sysEnter_Vector-0x12f232>
     dc8:	00 00                	add    BYTE PTR [eax],al
     dca:	04 00                	add    al,0x0
     dcc:	22 05 00 00 04 01    	and    al,BYTE PTR ds:0x1040000
     dd2:	f4                   	hlt    
     dd3:	00 00                	add    BYTE PTR [eax],al
     dd5:	00 0c aa             	add    BYTE PTR [edx+ebp*4],cl
     dd8:	05 00 00 72 00       	add    eax,0x720000
     ddd:	00 00                	add    BYTE PTR [eax],al
     ddf:	b4 08                	mov    ah,0x8
     de1:	00 30                	add    BYTE PTR [eax],dh
     de3:	e3 05                	jecxz  dea <sysEnter_Vector-0x12f216>
     de5:	00 00                	add    BYTE PTR [eax],al
     de7:	f7 06 00 00 02 54    	test   DWORD PTR [esi],0x54020000
     ded:	05 00 00 02 28       	add    eax,0x28020000
     df2:	30 00                	xor    BYTE PTR [eax],al
     df4:	00 00                	add    BYTE PTR [eax],al
     df6:	03 04 c7             	add    eax,DWORD PTR [edi+eax*8]
     df9:	04 00                	add    al,0x0
     dfb:	00 3a                	add    BYTE PTR [edx],bh
     dfd:	00 00                	add    BYTE PTR [eax],al
     dff:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
     e02:	06                   	push   es
     e03:	64 00 00             	add    BYTE PTR fs:[eax],al
     e06:	00 02                	add    BYTE PTR [edx],al
     e08:	5b                   	pop    ebx
     e09:	05 00 00 02 62       	add    eax,0x62020000
     e0e:	25 00 00 00 04       	and    eax,0x4000000
     e13:	01 06                	add    DWORD PTR [esi],eax
     e15:	5d                   	pop    ebp
     e16:	00 00                	add    BYTE PTR [eax],al
     e18:	00 04 02             	add    BYTE PTR [edx+eax*1],al
     e1b:	05 ea 00 00 00       	add    eax,0xea
     e20:	05 04 05 69 6e       	add    eax,0x6e690504
     e25:	74 00                	je     e27 <sysEnter_Vector-0x12f1d9>
     e27:	04 08                	add    al,0x8
     e29:	05 00 00 00 00       	add    eax,0x0
     e2e:	04 01                	add    al,0x1
     e30:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
     e33:	00 00                	add    BYTE PTR [eax],al
     e35:	04 02                	add    al,0x2
     e37:	07                   	pop    es
     e38:	0e                   	push   cs
     e39:	00 00                	add    BYTE PTR [eax],al
     e3b:	00 02                	add    BYTE PTR [edx],al
     e3d:	69 00 00 00 03 34    	imul   eax,DWORD PTR [eax],0x34030000
     e43:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e49:	07                   	pop    es
     e4a:	3e 00 00             	add    BYTE PTR ds:[eax],al
     e4d:	00 04 08             	add    BYTE PTR [eax+ecx*1],al
     e50:	07                   	pop    es
     e51:	34 00                	xor    al,0x0
     e53:	00 00                	add    BYTE PTR [eax],al
     e55:	02 9b 04 00 00 03    	add    bl,BYTE PTR [ebx+0x3000004]
     e5b:	56                   	push   esi
     e5c:	81 00 00 00 02 94    	add    DWORD PTR [eax],0x94020000
     e62:	04 00                	add    al,0x0
     e64:	00 04 d8             	add    BYTE PTR [eax+ebx*8],al
     e67:	81 00 00 00 04 04    	add    DWORD PTR [eax],0x4040000
     e6d:	05 05 00 00 00       	add    eax,0x5
     e72:	04 0c                	add    al,0xc
     e74:	04 9b                	add    al,0x9b
     e76:	00 00                	add    BYTE PTR [eax],al
     e78:	00 06                	add    BYTE PTR [esi],al
     e7a:	04 b9                	add    al,0xb9
     e7c:	00 00                	add    BYTE PTR [eax],al
     e7e:	00 07                	add    BYTE PTR [edi],al
     e80:	3a 00                	cmp    al,BYTE PTR [eax]
     e82:	00 00                	add    BYTE PTR [eax],al
     e84:	04 01                	add    al,0x1
     e86:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
     e8c:	07                   	pop    es
     e8d:	03 00                	add    eax,DWORD PTR [eax]
     e8f:	00 04 81             	add    BYTE PTR [ecx+eax*4],al
     e92:	00 00                	add    BYTE PTR [eax],al
     e94:	00 07                	add    BYTE PTR [edi],al
     e96:	15 80 01 00 00       	adc    eax,0x180
     e9b:	09 6c 03 00          	or     DWORD PTR [ebx+eax*1+0x0],ebp
     e9f:	00 00                	add    BYTE PTR [eax],al
     ea1:	09 a4 03 00 00 01 09 	or     DWORD PTR [ebx+eax*1+0x9010000],esp
     ea8:	73 02                	jae    eac <sysEnter_Vector-0x12f154>
     eaa:	00 00                	add    BYTE PTR [eax],al
     eac:	02 09                	add    cl,BYTE PTR [ecx]
     eae:	f9                   	stc    
     eaf:	02 00                	add    al,BYTE PTR [eax]
     eb1:	00 03                	add    BYTE PTR [ebx],al
     eb3:	09 53 02             	or     DWORD PTR [ebx+0x2],edx
     eb6:	00 00                	add    BYTE PTR [eax],al
     eb8:	04 09                	add    al,0x9
     eba:	be 03 00 00 05       	mov    esi,0x5000003
     ebf:	09 1d 03 00 00 06    	or     DWORD PTR ds:0x6000003,ebx
     ec5:	09 66 02             	or     DWORD PTR [esi+0x2],esp
     ec8:	00 00                	add    BYTE PTR [eax],al
     eca:	07                   	pop    es
     ecb:	09 f4                	or     esp,esi
     ecd:	03 00                	add    eax,DWORD PTR [eax]
     ecf:	00 4f 09             	add    BYTE PTR [edi+0x9],cl
     ed2:	5f                   	pop    edi
     ed3:	03 00                	add    eax,DWORD PTR [eax]
     ed5:	00 59 09             	add    BYTE PTR [ecx+0x9],bl
     ed8:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
     edb:	00 61 09             	add    BYTE PTR [ecx+0x9],ah
     ede:	e5 02                	in     eax,0x2
     ee0:	00 00                	add    BYTE PTR [eax],al
     ee2:	97                   	xchg   edi,eax
     ee3:	0a 7c 03 00          	or     bh,BYTE PTR [ebx+eax*1+0x0]
     ee7:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
     eea:	0a 52 03             	or     dl,BYTE PTR [edx+0x3]
     eed:	00 00                	add    BYTE PTR [eax],al
     eef:	64 01 0a             	add    DWORD PTR fs:[edx],ecx
     ef2:	e6 03                	out    0x3,al
     ef4:	00 00                	add    BYTE PTR [eax],al
     ef6:	65 01 0a             	add    DWORD PTR gs:[edx],ecx
     ef9:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
     eff:	0a 1b                	or     bl,BYTE PTR [ebx]
     f01:	04 00                	add    al,0x0
     f03:	00 67 01             	add    BYTE PTR [edi+0x1],ah
     f06:	0a 2a                	or     ch,BYTE PTR [edx]
     f08:	03 00                	add    eax,DWORD PTR [eax]
     f0a:	00 68 01             	add    BYTE PTR [eax+0x1],ch
     f0d:	0a ac 02 00 00 69 01 	or     ch,BYTE PTR [edx+eax*1+0x1690000]
     f14:	0a 93 03 00 00 70    	or     dl,BYTE PTR [ebx+0x70000003]
     f1a:	01 0a                	add    DWORD PTR [edx],ecx
     f1c:	d5 02                	aad    0x2
     f1e:	00 00                	add    BYTE PTR [eax],al
     f20:	71 01                	jno    f23 <sysEnter_Vector-0x12f0dd>
     f22:	0a cc                	or     cl,ah
     f24:	03 00                	add    eax,DWORD PTR [eax]
     f26:	00 00                	add    BYTE PTR [eax],al
     f28:	03 0a                	add    ecx,DWORD PTR [edx]
     f2a:	37                   	aaa    
     f2b:	03 00                	add    eax,DWORD PTR [eax]
     f2d:	00 01                	add    BYTE PTR [ecx],al
     f2f:	03 0a                	add    ecx,DWORD PTR [edx]
     f31:	bb 02 00 00 02       	mov    ebx,0x2000002
     f36:	03 0a                	add    ecx,DWORD PTR [edx]
     f38:	80 02 00             	add    BYTE PTR [edx],0x0
     f3b:	00 03                	add    BYTE PTR [ebx],al
     f3d:	03 0a                	add    ecx,DWORD PTR [edx]
     f3f:	90                   	nop
     f40:	02 00                	add    al,BYTE PTR [eax]
     f42:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
     f45:	00 04 04             	add    BYTE PTR [esp+eax*1],al
     f48:	07                   	pop    es
     f49:	39 00                	cmp    DWORD PTR [eax],eax
     f4b:	00 00                	add    BYTE PTR [eax],al
     f4d:	04 04                	add    al,0x4
     f4f:	07                   	pop    es
     f50:	e1 00                	loope  f52 <sysEnter_Vector-0x12f0ae>
     f52:	00 00                	add    BYTE PTR [eax],al
     f54:	0b 04 06             	or     eax,DWORD PTR [esi+eax*1]
     f57:	04 3a                	add    al,0x3a
     f59:	00 00                	add    BYTE PTR [eax],al
     f5b:	00 0c 38             	add    BYTE PTR [eax+edi*1],cl
     f5e:	05 00 00 01 10       	add    eax,0x10010000
     f63:	5a                   	pop    edx
     f64:	00 00                	add    BYTE PTR [eax],al
     f66:	00 b4 08 00 30 3a 00 	add    BYTE PTR [eax+ecx*1+0x3a3000],dh
     f6d:	00 00                	add    BYTE PTR [eax],al
     f6f:	01 9c 04 02 00 00 0d 	add    DWORD PTR [esp+eax*1+0xd000002],ebx
     f76:	fa                   	cli    
     f77:	04 00                	add    al,0x0
     f79:	00 01                	add    BYTE PTR [ecx],al
     f7b:	10 5a 00             	adc    BYTE PTR [edx+0x0],bl
     f7e:	00 00                	add    BYTE PTR [eax],al
     f80:	02 91 00 0d 6b 05    	add    dl,BYTE PTR [ecx+0x56b0d00]
     f86:	00 00                	add    BYTE PTR [eax],al
     f88:	01 10                	add    DWORD PTR [eax],edx
     f8a:	76 00                	jbe    f8c <sysEnter_Vector-0x12f074>
     f8c:	00 00                	add    BYTE PTR [eax],al
     f8e:	02 91 04 0d 72 05    	add    dl,BYTE PTR [ecx+0x5720d04]
     f94:	00 00                	add    BYTE PTR [eax],al
     f96:	01 10                	add    DWORD PTR [eax],edx
     f98:	76 00                	jbe    f9a <sysEnter_Vector-0x12f066>
     f9a:	00 00                	add    BYTE PTR [eax],al
     f9c:	02 91 08 0d 79 05    	add    dl,BYTE PTR [ecx+0x5790d08]
     fa2:	00 00                	add    BYTE PTR [eax],al
     fa4:	01 10                	add    DWORD PTR [eax],edx
     fa6:	76 00                	jbe    fa8 <sysEnter_Vector-0x12f058>
     fa8:	00 00                	add    BYTE PTR [eax],al
     faa:	02 91 0c 0d 80 05    	add    dl,BYTE PTR [ecx+0x5800d0c]
     fb0:	00 00                	add    BYTE PTR [eax],al
     fb2:	01 10                	add    DWORD PTR [eax],edx
     fb4:	76 00                	jbe    fb6 <sysEnter_Vector-0x12f04a>
     fb6:	00 00                	add    BYTE PTR [eax],al
     fb8:	02 91 10 0e 7a 04    	add    dl,BYTE PTR [ecx+0x47a0e10]
     fbe:	00 00                	add    BYTE PTR [eax],al
     fc0:	01 12                	add    DWORD PTR [edx],edx
     fc2:	5a                   	pop    edx
     fc3:	00 00                	add    BYTE PTR [eax],al
     fc5:	00 02                	add    BYTE PTR [edx],al
     fc7:	91                   	xchg   ecx,eax
     fc8:	6c                   	ins    BYTE PTR es:[edi],dx
     fc9:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
     fcc:	05 00 00 01 17       	add    eax,0x17010000
     fd1:	5a                   	pop    edx
     fd2:	00 00                	add    BYTE PTR [eax],al
     fd4:	00 ee                	add    dh,ch
     fd6:	08 00                	or     BYTE PTR [eax],al
     fd8:	30 3c 00             	xor    BYTE PTR [eax+eax*1],bh
     fdb:	00 00                	add    BYTE PTR [eax],al
     fdd:	01 9c 64 02 00 00 0d 	add    DWORD PTR [esp+eiz*2+0xd000002],ebx
     fe4:	fa                   	cli    
     fe5:	04 00                	add    al,0x0
     fe7:	00 01                	add    BYTE PTR [ecx],al
     fe9:	17                   	pop    ss
     fea:	5a                   	pop    edx
     feb:	00 00                	add    BYTE PTR [eax],al
     fed:	00 02                	add    BYTE PTR [edx],al
     fef:	91                   	xchg   ecx,eax
     ff0:	00 0d 6b 05 00 00    	add    BYTE PTR ds:0x56b,cl
     ff6:	01 17                	add    DWORD PTR [edi],edx
     ff8:	76 00                	jbe    ffa <sysEnter_Vector-0x12f006>
     ffa:	00 00                	add    BYTE PTR [eax],al
     ffc:	02 91 04 0d 72 05    	add    dl,BYTE PTR [ecx+0x5720d04]
    1002:	00 00                	add    BYTE PTR [eax],al
    1004:	01 17                	add    DWORD PTR [edi],edx
    1006:	76 00                	jbe    1008 <sysEnter_Vector-0x12eff8>
    1008:	00 00                	add    BYTE PTR [eax],al
    100a:	02 91 08 0d 79 05    	add    dl,BYTE PTR [ecx+0x5790d08]
    1010:	00 00                	add    BYTE PTR [eax],al
    1012:	01 17                	add    DWORD PTR [edi],edx
    1014:	76 00                	jbe    1016 <sysEnter_Vector-0x12efea>
    1016:	00 00                	add    BYTE PTR [eax],al
    1018:	02 91 0c 0e 7a 04    	add    dl,BYTE PTR [ecx+0x47a0e0c]
    101e:	00 00                	add    BYTE PTR [eax],al
    1020:	01 19                	add    DWORD PTR [ecx],ebx
    1022:	5a                   	pop    edx
    1023:	00 00                	add    BYTE PTR [eax],al
    1025:	00 02                	add    BYTE PTR [edx],al
    1027:	91                   	xchg   ecx,eax
    1028:	6c                   	ins    BYTE PTR es:[edi],dx
    1029:	00 0c 20             	add    BYTE PTR [eax+eiz*1],cl
    102c:	05 00 00 01 1e       	add    eax,0x1e010000
    1031:	5a                   	pop    edx
    1032:	00 00                	add    BYTE PTR [eax],al
    1034:	00 2a                	add    BYTE PTR [edx],ch
    1036:	09 00                	or     DWORD PTR [eax],eax
    1038:	30 3e                	xor    BYTE PTR [esi],bh
    103a:	00 00                	add    BYTE PTR [eax],al
    103c:	00 01                	add    BYTE PTR [ecx],al
    103e:	9c                   	pushf  
    103f:	b6 02                	mov    dh,0x2
    1041:	00 00                	add    BYTE PTR [eax],al
    1043:	0d fa 04 00 00       	or     eax,0x4fa
    1048:	01 1e                	add    DWORD PTR [esi],ebx
    104a:	5a                   	pop    edx
    104b:	00 00                	add    BYTE PTR [eax],al
    104d:	00 02                	add    BYTE PTR [edx],al
    104f:	91                   	xchg   ecx,eax
    1050:	00 0d 6b 05 00 00    	add    BYTE PTR ds:0x56b,cl
    1056:	01 1e                	add    DWORD PTR [esi],ebx
    1058:	76 00                	jbe    105a <sysEnter_Vector-0x12efa6>
    105a:	00 00                	add    BYTE PTR [eax],al
    105c:	02 91 04 0d 72 05    	add    dl,BYTE PTR [ecx+0x5720d04]
    1062:	00 00                	add    BYTE PTR [eax],al
    1064:	01 1e                	add    DWORD PTR [esi],ebx
    1066:	76 00                	jbe    1068 <sysEnter_Vector-0x12ef98>
    1068:	00 00                	add    BYTE PTR [eax],al
    106a:	02 91 08 0e 7a 04    	add    dl,BYTE PTR [ecx+0x47a0e08]
    1070:	00 00                	add    BYTE PTR [eax],al
    1072:	01 20                	add    DWORD PTR [eax],esp
    1074:	5a                   	pop    edx
    1075:	00 00                	add    BYTE PTR [eax],al
    1077:	00 02                	add    BYTE PTR [edx],al
    1079:	91                   	xchg   ecx,eax
    107a:	6c                   	ins    BYTE PTR es:[edi],dx
    107b:	00 0c 14             	add    BYTE PTR [esp+edx*1],cl
    107e:	05 00 00 01 25       	add    eax,0x25010000
    1083:	5a                   	pop    edx
    1084:	00 00                	add    BYTE PTR [eax],al
    1086:	00 68 09             	add    BYTE PTR [eax+0x9],ch
    1089:	00 30                	add    BYTE PTR [eax],dh
    108b:	40                   	inc    eax
    108c:	00 00                	add    BYTE PTR [eax],al
    108e:	00 01                	add    BYTE PTR [ecx],al
    1090:	9c                   	pushf  
    1091:	fa                   	cli    
    1092:	02 00                	add    al,BYTE PTR [eax]
    1094:	00 0d fa 04 00 00    	add    BYTE PTR ds:0x4fa,cl
    109a:	01 25 5a 00 00 00    	add    DWORD PTR ds:0x5a,esp
    10a0:	02 91 00 0d 6b 05    	add    dl,BYTE PTR [ecx+0x56b0d00]
    10a6:	00 00                	add    BYTE PTR [eax],al
    10a8:	01 25 76 00 00 00    	add    DWORD PTR ds:0x76,esp
    10ae:	02 91 04 0e 7a 04    	add    dl,BYTE PTR [ecx+0x47a0e04]
    10b4:	00 00                	add    BYTE PTR [eax],al
    10b6:	01 27                	add    DWORD PTR [edi],esp
    10b8:	5a                   	pop    edx
    10b9:	00 00                	add    BYTE PTR [eax],al
    10bb:	00 02                	add    BYTE PTR [edx],al
    10bd:	91                   	xchg   ecx,eax
    10be:	6c                   	ins    BYTE PTR es:[edi],dx
    10bf:	00 0c 08             	add    BYTE PTR [eax+ecx*1],cl
    10c2:	05 00 00 01 2c       	add    eax,0x2c010000
    10c7:	5a                   	pop    edx
    10c8:	00 00                	add    BYTE PTR [eax],al
    10ca:	00 a8 09 00 30 42    	add    BYTE PTR [eax+0x42300009],ch
    10d0:	00 00                	add    BYTE PTR [eax],al
    10d2:	00 01                	add    BYTE PTR [ecx],al
    10d4:	9c                   	pushf  
    10d5:	30 03                	xor    BYTE PTR [ebx],al
    10d7:	00 00                	add    BYTE PTR [eax],al
    10d9:	0d fa 04 00 00       	or     eax,0x4fa
    10de:	01 2c 5a             	add    DWORD PTR [edx+ebx*2],ebp
    10e1:	00 00                	add    BYTE PTR [eax],al
    10e3:	00 02                	add    BYTE PTR [edx],al
    10e5:	91                   	xchg   ecx,eax
    10e6:	00 0e                	add    BYTE PTR [esi],cl
    10e8:	7a 04                	jp     10ee <sysEnter_Vector-0x12ef12>
    10ea:	00 00                	add    BYTE PTR [eax],al
    10ec:	01 2e                	add    DWORD PTR [esi],ebp
    10ee:	5a                   	pop    edx
    10ef:	00 00                	add    BYTE PTR [eax],al
    10f1:	00 02                	add    BYTE PTR [edx],al
    10f3:	91                   	xchg   ecx,eax
    10f4:	6c                   	ins    BYTE PTR es:[edi],dx
    10f5:	00 0f                	add    BYTE PTR [edi],cl
    10f7:	bd 04 00 00 01       	mov    ebp,0x1000004
    10fc:	33 ea                	xor    ebp,edx
    10fe:	09 00                	or     DWORD PTR [eax],eax
    1100:	30 a5 00 00 00 01    	xor    BYTE PTR [ebp+0x1000000],ah
    1106:	9c                   	pushf  
    1107:	10 c0                	adc    al,al
    1109:	05 00 00 01 44       	add    eax,0x44010000
    110e:	8f 0a                	(bad)  
    1110:	00 30                	add    BYTE PTR [eax],dh
    1112:	1f                   	pop    ds
    1113:	00 00                	add    BYTE PTR [eax],al
    1115:	00 01                	add    BYTE PTR [ecx],al
    1117:	9c                   	pushf  
    1118:	11 81 04 00 00 01    	adc    DWORD PTR [ecx+0x1000004],eax
    111e:	49                   	dec    ecx
    111f:	5a                   	pop    edx
    1120:	00 00                	add    BYTE PTR [eax],al
    1122:	00 ae 0a 00 30 34    	add    BYTE PTR [esi+0x3430000a],ch
    1128:	00 00                	add    BYTE PTR [eax],al
    112a:	00 01                	add    BYTE PTR [ecx],al
    112c:	9c                   	pushf  
    112d:	89 03                	mov    DWORD PTR [ebx],eax
    112f:	00 00                	add    BYTE PTR [eax],al
    1131:	0d 8d 05 00 00       	or     eax,0x58d
    1136:	01 49 b3             	add    DWORD PTR [ecx-0x4d],ecx
    1139:	00 00                	add    BYTE PTR [eax],al
    113b:	00 02                	add    BYTE PTR [edx],al
    113d:	91                   	xchg   ecx,eax
    113e:	00 12                	add    BYTE PTR [edx],dl
    1140:	0e                   	push   cs
    1141:	ea 05 00 00 01 4b 41 	jmp    0x414b:0x1000005
    1148:	00 00                	add    BYTE PTR [eax],al
    114a:	00 02                	add    BYTE PTR [edx],al
    114c:	91                   	xchg   ecx,eax
    114d:	74 00                	je     114f <sysEnter_Vector-0x12eeb1>
    114f:	11 ef                	adc    edi,ebp
    1151:	05 00 00 01 51       	add    eax,0x51010000
    1156:	5a                   	pop    edx
    1157:	00 00                	add    BYTE PTR [eax],al
    1159:	00 e2                	add    dl,ah
    115b:	0a 00                	or     al,BYTE PTR [eax]
    115d:	30 34 00             	xor    BYTE PTR [eax+eax*1],dh
    1160:	00 00                	add    BYTE PTR [eax],al
    1162:	01 9c c0 03 00 00 0d 	add    DWORD PTR [eax+eax*8+0xd000003],ebx
    1169:	8d 05 00 00 01 51    	lea    eax,ds:0x51010000
    116f:	b3 00                	mov    bl,0x0
    1171:	00 00                	add    BYTE PTR [eax],al
    1173:	02 91 00 12 0e ea    	add    dl,BYTE PTR [ecx-0x15f1ee00]
    1179:	05 00 00 01 53       	add    eax,0x53010000
    117e:	41                   	inc    ecx
    117f:	00 00                	add    BYTE PTR [eax],al
    1181:	00 02                	add    BYTE PTR [edx],al
    1183:	91                   	xchg   ecx,eax
    1184:	74 00                	je     1186 <sysEnter_Vector-0x12ee7a>
    1186:	11 63 05             	adc    DWORD PTR [ebx+0x5],esp
    1189:	00 00                	add    BYTE PTR [eax],al
    118b:	01 59 5a             	add    DWORD PTR [ecx+0x5a],ebx
    118e:	00 00                	add    BYTE PTR [eax],al
    1190:	00 16                	add    BYTE PTR [esi],dl
    1192:	0b 00                	or     eax,DWORD PTR [eax]
    1194:	30 37                	xor    BYTE PTR [edi],dh
    1196:	00 00                	add    BYTE PTR [eax],al
    1198:	00 01                	add    BYTE PTR [ecx],al
    119a:	9c                   	pushf  
    119b:	05 04 00 00 0d       	add    eax,0xd000004
    11a0:	ef                   	out    dx,eax
    11a1:	04 00                	add    al,0x0
    11a3:	00 01                	add    BYTE PTR [ecx],al
    11a5:	59                   	pop    ecx
    11a6:	76 00                	jbe    11a8 <sysEnter_Vector-0x12ee58>
    11a8:	00 00                	add    BYTE PTR [eax],al
    11aa:	02 91 00 0d 8d 05    	add    dl,BYTE PTR [ecx+0x58d0d00]
    11b0:	00 00                	add    BYTE PTR [eax],al
    11b2:	01 59 b3             	add    DWORD PTR [ecx-0x4d],ebx
    11b5:	00 00                	add    BYTE PTR [eax],al
    11b7:	00 02                	add    BYTE PTR [edx],al
    11b9:	91                   	xchg   ecx,eax
    11ba:	04 12                	add    al,0x12
    11bc:	0e                   	push   cs
    11bd:	ea 05 00 00 01 5b 41 	jmp    0x415b:0x1000005
    11c4:	00 00                	add    BYTE PTR [eax],al
    11c6:	00 02                	add    BYTE PTR [edx],al
    11c8:	91                   	xchg   ecx,eax
    11c9:	74 00                	je     11cb <sysEnter_Vector-0x12ee35>
    11cb:	0c 02                	or     al,0x2
    11cd:	05 00 00 01 63       	add    eax,0x63010000
    11d2:	81 00 00 00 4d 0b    	add    DWORD PTR [eax],0xb4d0000
    11d8:	00 30                	add    BYTE PTR [eax],dh
    11da:	72 00                	jb     11dc <sysEnter_Vector-0x12ee24>
    11dc:	00 00                	add    BYTE PTR [eax],al
    11de:	01 9c 51 04 00 00 0d 	add    DWORD PTR [ecx+edx*2+0xd000004],ebx
    11e5:	a0 05 00 00 01       	mov    al,ds:0x1000005
    11ea:	63 81 00 00 00 02    	arpl   WORD PTR [ecx+0x2000000],ax
    11f0:	91                   	xchg   ecx,eax
    11f1:	00 13                	add    BYTE PTR [ebx],dl
    11f3:	5f                   	pop    edi
    11f4:	0b 00                	or     eax,DWORD PTR [eax]
    11f6:	30 54 00 00          	xor    BYTE PTR [eax+eax*1+0x0],dl
    11fa:	00 14 73             	add    BYTE PTR [ebx+esi*2],dl
    11fd:	32 00                	xor    al,BYTE PTR [eax]
    11ff:	01 65 76             	add    DWORD PTR [ebp+0x76],esp
    1202:	00 00                	add    BYTE PTR [eax],al
    1204:	00 02                	add    BYTE PTR [edx],al
    1206:	91                   	xchg   ecx,eax
    1207:	6c                   	ins    BYTE PTR es:[edi],dx
    1208:	14 63                	adc    al,0x63
    120a:	74 00                	je     120c <sysEnter_Vector-0x12edf4>
    120c:	01 65 76             	add    DWORD PTR [ebp+0x76],esp
    120f:	00 00                	add    BYTE PTR [eax],al
    1211:	00 02                	add    BYTE PTR [edx],al
    1213:	91                   	xchg   ecx,eax
    1214:	68 00 00 0f f6       	push   0xf60f0000
    1219:	05 00 00 01 69       	add    eax,0x69010000
    121e:	bf 0b 00 30 1d       	mov    edi,0x1d30000b
    1223:	00 00                	add    BYTE PTR [eax],al
    1225:	00 01                	add    BYTE PTR [ecx],al
    1227:	9c                   	pushf  
    1228:	15 dd 05 00 00       	adc    eax,0x5dd
    122d:	01 6e dc             	add    DWORD PTR [esi-0x24],ebp
    1230:	0b 00                	or     eax,DWORD PTR [eax]
    1232:	30 29                	xor    BYTE PTR [ecx],ch
    1234:	00 00                	add    BYTE PTR [eax],al
    1236:	00 01                	add    BYTE PTR [ecx],al
    1238:	9c                   	pushf  
    1239:	a2 04 00 00 0d       	mov    ds:0xd000004,al
    123e:	94                   	xchg   esp,eax
    123f:	05 00 00 01 6e       	add    eax,0x6e010000
    1244:	5a                   	pop    edx
    1245:	00 00                	add    BYTE PTR [eax],al
    1247:	00 02                	add    BYTE PTR [edx],al
    1249:	91                   	xchg   ecx,eax
    124a:	00 0d d2 05 00 00    	add    BYTE PTR ds:0x5d2,cl
    1250:	01 6e 8e             	add    DWORD PTR [esi-0x72],ebp
    1253:	01 00                	add    DWORD PTR [eax],eax
    1255:	00 02                	add    BYTE PTR [edx],al
    1257:	91                   	xchg   ecx,eax
    1258:	04 0d                	add    al,0xd
    125a:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    125b:	04 00                	add    al,0x0
    125d:	00 01                	add    BYTE PTR [ecx],al
    125f:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1260:	5a                   	pop    edx
    1261:	00 00                	add    BYTE PTR [eax],al
    1263:	00 02                	add    BYTE PTR [edx],al
    1265:	91                   	xchg   ecx,eax
    1266:	08 00                	or     BYTE PTR [eax],al
    1268:	16                   	push   ss
    1269:	d9 04 00             	fld    DWORD PTR [eax+eax*1]
    126c:	00 01                	add    BYTE PTR [ecx],al
    126e:	73 5a                	jae    12ca <sysEnter_Vector-0x12ed36>
    1270:	00 00                	add    BYTE PTR [eax],al
    1272:	00 05 0c 00 30 19    	add    BYTE PTR ds:0x1930000c,al
    1278:	00 00                	add    BYTE PTR [eax],al
    127a:	00 01                	add    BYTE PTR [ecx],al
    127c:	9c                   	pushf  
    127d:	11 9b 05 00 00 01    	adc    DWORD PTR [ebx+0x1000005],ebx
    1283:	78 5a                	js     12df <sysEnter_Vector-0x12ed21>
    1285:	00 00                	add    BYTE PTR [eax],al
    1287:	00 1e                	add    BYTE PTR [esi],bl
    1289:	0c 00                	or     al,0x0
    128b:	30 f1                	xor    cl,dh
    128d:	01 00                	add    DWORD PTR [eax],eax
    128f:	00 01                	add    BYTE PTR [ecx],al
    1291:	9c                   	pushf  
    1292:	59                   	pop    ecx
    1293:	05 00 00 0d b1       	add    eax,0xb10d0000
    1298:	08 00                	or     BYTE PTR [eax],al
    129a:	00 01                	add    BYTE PTR [ecx],al
    129c:	78 90                	js     122e <sysEnter_Vector-0x12edd2>
    129e:	01 00                	add    DWORD PTR [eax],eax
    12a0:	00 02                	add    BYTE PTR [edx],al
    12a2:	91                   	xchg   ecx,eax
    12a3:	00 14 70             	add    BYTE PTR [eax+esi*2],dl
    12a6:	69 64 00 01 7a 5a 00 	imul   esp,DWORD PTR [eax+eax*1+0x1],0x5a7a
    12ad:	00 
    12ae:	00 02                	add    BYTE PTR [edx],al
    12b0:	91                   	xchg   ecx,eax
    12b1:	58                   	pop    eax
    12b2:	0e                   	push   cs
    12b3:	bb 05 00 00 01       	mov    ebx,0x1000005
    12b8:	7a 5a                	jp     1314 <sysEnter_Vector-0x12ecec>
    12ba:	00 00                	add    BYTE PTR [eax],al
    12bc:	00 02                	add    BYTE PTR [edx],al
    12be:	91                   	xchg   ecx,eax
    12bf:	6c                   	ins    BYTE PTR es:[edi],dx
    12c0:	0e                   	push   cs
    12c1:	cd 05                	int    0x5
    12c3:	00 00                	add    BYTE PTR [eax],al
    12c5:	01 7b 59             	add    DWORD PTR [ebx+0x59],edi
    12c8:	05 00 00 02 91       	add    eax,0x91020000
    12cd:	50                   	push   eax
    12ce:	0e                   	push   cs
    12cf:	de 04 00             	fiadd  WORD PTR [eax+eax*1]
    12d2:	00 01                	add    BYTE PTR [ecx],al
    12d4:	7c 90                	jl     1266 <sysEnter_Vector-0x12ed9a>
    12d6:	01 00                	add    DWORD PTR [eax],eax
    12d8:	00 02                	add    BYTE PTR [edx],al
    12da:	91                   	xchg   ecx,eax
    12db:	68 0e 87 04 00       	push   0x4870e
    12e0:	00 01                	add    BYTE PTR [ecx],al
    12e2:	7c 90                	jl     1274 <sysEnter_Vector-0x12ed8c>
    12e4:	01 00                	add    DWORD PTR [eax],eax
    12e6:	00 02                	add    BYTE PTR [edx],al
    12e8:	91                   	xchg   ecx,eax
    12e9:	64                   	fs
    12ea:	0e                   	push   cs
    12eb:	b5 04                	mov    ch,0x4
    12ed:	00 00                	add    BYTE PTR [eax],al
    12ef:	01 7d 90             	add    DWORD PTR [ebp-0x70],edi
    12f2:	01 00                	add    DWORD PTR [eax],eax
    12f4:	00 02                	add    BYTE PTR [edx],al
    12f6:	91                   	xchg   ecx,eax
    12f7:	54                   	push   esp
    12f8:	0e                   	push   cs
    12f9:	ad                   	lods   eax,DWORD PTR ds:[esi]
    12fa:	04 00                	add    al,0x0
    12fc:	00 01                	add    BYTE PTR [ecx],al
    12fe:	8e 5a 00             	mov    ds,WORD PTR [edx+0x0]
    1301:	00 00                	add    BYTE PTR [eax],al
    1303:	02 91 60 13 f4 0c    	add    dl,BYTE PTR [ecx+0xcf41360]
    1309:	00 30                	add    BYTE PTR [eax],dh
    130b:	e0 00                	loopne 130d <sysEnter_Vector-0x12ecf3>
    130d:	00 00                	add    BYTE PTR [eax],al
    130f:	14 63                	adc    al,0x63
    1311:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1312:	74 00                	je     1314 <sysEnter_Vector-0x12ecec>
    1314:	01 90 5a 00 00 00    	add    DWORD PTR [eax+0x5a],edx
    131a:	02 91 5c 00 00 06    	add    dl,BYTE PTR [ecx+0x600005c]
    1320:	04 90                	add    al,0x90
    1322:	01 00                	add    DWORD PTR [eax],eax
    1324:	00 11                	add    BYTE PTR [ecx],dl
    1326:	87 05 00 00 01 a6    	xchg   DWORD PTR ds:0xa6010000,eax
    132c:	5a                   	pop    edx
    132d:	00 00                	add    BYTE PTR [eax],al
    132f:	00 0f                	add    BYTE PTR [edi],cl
    1331:	0e                   	push   cs
    1332:	00 30                	add    BYTE PTR [eax],dh
    1334:	4c                   	dec    esp
    1335:	00 00                	add    BYTE PTR [eax],al
    1337:	00 01                	add    BYTE PTR [ecx],al
    1339:	9c                   	pushf  
    133a:	b1 05                	mov    cl,0x5
    133c:	00 00                	add    BYTE PTR [eax],al
    133e:	0d b1 08 00 00       	or     eax,0x8b1
    1343:	01 a6 90 01 00 00    	add    DWORD PTR [esi+0x190],esp
    1349:	02 91 00 0d bb 05    	add    dl,BYTE PTR [ecx+0x5bb0d00]
    134f:	00 00                	add    BYTE PTR [eax],al
    1351:	01 a6 5a 00 00 00    	add    DWORD PTR [esi+0x5a],esp
    1357:	02 91 04 0d cd 05    	add    dl,BYTE PTR [ecx+0x5cd0d04]
    135d:	00 00                	add    BYTE PTR [eax],al
    135f:	01 a6 59 05 00 00    	add    DWORD PTR [esi+0x559],esp
    1365:	02 91 08 14 70 69    	add    dl,BYTE PTR [ecx+0x69701408]
    136b:	64 00 01             	add    BYTE PTR fs:[ecx],al
    136e:	a8 5a                	test   al,0x5a
    1370:	00 00                	add    BYTE PTR [eax],al
    1372:	00 02                	add    BYTE PTR [edx],al
    1374:	91                   	xchg   ecx,eax
    1375:	74 00                	je     1377 <sysEnter_Vector-0x12ec89>
    1377:	11 e7                	adc    edi,esp
    1379:	04 00                	add    al,0x0
    137b:	00 01                	add    BYTE PTR [ecx],al
    137d:	b3 5a                	mov    bl,0x5a
    137f:	00 00                	add    BYTE PTR [eax],al
    1381:	00 5b 0e             	add    BYTE PTR [ebx+0xe],bl
    1384:	00 30                	add    BYTE PTR [eax],dh
    1386:	1c 00                	sbb    al,0x0
    1388:	00 00                	add    BYTE PTR [eax],al
    138a:	01 9c d9 05 00 00 17 	add    DWORD PTR [ecx+ebx*8+0x17000005],ebx
    1391:	70 69                	jo     13fc <sysEnter_Vector-0x12ec04>
    1393:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1396:	b3 76                	mov    bl,0x76
    1398:	00 00                	add    BYTE PTR [eax],al
    139a:	00 02                	add    BYTE PTR [edx],al
    139c:	91                   	xchg   ecx,eax
    139d:	00 00                	add    BYTE PTR [eax],al
    139f:	11 fb                	adc    ebx,edi
    13a1:	05 00 00 01 b8       	add    eax,0xb8010000
    13a6:	90                   	nop
    13a7:	01 00                	add    DWORD PTR [eax],eax
    13a9:	00 77 0e             	add    BYTE PTR [edi+0xe],dh
    13ac:	00 30                	add    BYTE PTR [eax],dh
    13ae:	20 00                	and    BYTE PTR [eax],al
    13b0:	00 00                	add    BYTE PTR [eax],al
    13b2:	01 9c 0f 06 00 00 17 	add    DWORD PTR [edi+ecx*1+0x17000006],ebx
    13b9:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
    13bc:	00 01                	add    BYTE PTR [ecx],al
    13be:	b8 90 01 00 00       	mov    eax,0x190
    13c3:	02 91 00 0d e1 03    	add    dl,BYTE PTR [ecx+0x3e10d00]
    13c9:	00 00                	add    BYTE PTR [eax],al
    13cb:	01 b8 9a 00 00 00    	add    DWORD PTR [eax+0x9a],edi
    13d1:	02 91 04 00 18 4b    	add    dl,BYTE PTR [ecx+0x4b180004]
    13d7:	00 00                	add    BYTE PTR [eax],al
    13d9:	00 05 34 76 00 00    	add    BYTE PTR ds:0x7634,al
    13df:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    13e5:	30 18                	xor    BYTE PTR [eax],bl
    13e7:	af                   	scas   eax,DWORD PTR es:[edi]
    13e8:	00 00                	add    BYTE PTR [eax],al
    13ea:	00 05 35 76 00 00    	add    BYTE PTR ds:0x7635,al
    13f0:	00 05 03 e0 44 00    	add    BYTE PTR ds:0x44e003,al
    13f6:	30 18                	xor    BYTE PTR [eax],bl
    13f8:	5b                   	pop    ebx
    13f9:	01 00                	add    DWORD PTR [eax],eax
    13fb:	00 05 36 76 00 00    	add    BYTE PTR ds:0x7636,al
    1401:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    1407:	30 18                	xor    BYTE PTR [eax],bl
    1409:	54                   	push   esp
    140a:	00 00                	add    BYTE PTR [eax],al
    140c:	00 05 37 76 00 00    	add    BYTE PTR ds:0x7637,al
    1412:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    1418:	30 18                	xor    BYTE PTR [eax],bl
    141a:	28 00                	sub    BYTE PTR [eax],al
    141c:	00 00                	add    BYTE PTR [eax],al
    141e:	06                   	push   es
    141f:	46                   	inc    esi
    1420:	59                   	pop    ecx
    1421:	05 00 00 05 03       	add    eax,0x3050000
    1426:	e4 44                	in     al,0x44
    1428:	00 30                	add    BYTE PTR [eax],dh
    142a:	18 44 05 00          	sbb    BYTE PTR [ebp+eax*1+0x0],al
    142e:	00 01                	add    BYTE PTR [ecx],al
    1430:	0d be 00 00 00       	or     eax,0xbe
    1435:	05 03 f0 44 00       	add    eax,0x44f003
    143a:	30 00                	xor    BYTE PTR [eax],al
    143c:	6b 03 00             	imul   eax,DWORD PTR [ebx],0x0
    143f:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1442:	91                   	xchg   ecx,eax
    1443:	06                   	push   es
    1444:	00 00                	add    BYTE PTR [eax],al
    1446:	04 01                	add    al,0x1
    1448:	f4                   	hlt    
    1449:	00 00                	add    BYTE PTR [eax],al
    144b:	00 0c a6             	add    BYTE PTR [esi+eiz*4],cl
    144e:	06                   	push   es
    144f:	00 00                	add    BYTE PTR [eax],al
    1451:	72 00                	jb     1453 <sysEnter_Vector-0x12ebad>
    1453:	00 00                	add    BYTE PTR [eax],al
    1455:	98                   	cwde   
    1456:	0e                   	push   cs
    1457:	00 30                	add    BYTE PTR [eax],dh
    1459:	6d                   	ins    DWORD PTR es:[edi],dx
    145a:	03 00                	add    eax,DWORD PTR [eax]
    145c:	00 ab 08 00 00 02    	add    BYTE PTR [ebx+0x2000008],ch
    1462:	01 06                	add    DWORD PTR [esi],eax
    1464:	5d                   	pop    ebp
    1465:	00 00                	add    BYTE PTR [eax],al
    1467:	00 02                	add    BYTE PTR [edx],al
    1469:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    146f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1476:	02 08                	add    cl,BYTE PTR [eax]
    1478:	05 00 00 00 00       	add    eax,0x0
    147d:	04 46                	add    al,0x46
    147f:	06                   	push   es
    1480:	00 00                	add    BYTE PTR [eax],al
    1482:	02 2e                	add    ch,BYTE PTR [esi]
    1484:	4c                   	dec    esp
    1485:	00 00                	add    BYTE PTR [eax],al
    1487:	00 02                	add    BYTE PTR [edx],al
    1489:	01 08                	add    DWORD PTR [eax],ecx
    148b:	5b                   	pop    ebx
    148c:	00 00                	add    BYTE PTR [eax],al
    148e:	00 02                	add    BYTE PTR [edx],al
    1490:	02 07                	add    al,BYTE PTR [edi]
    1492:	0e                   	push   cs
    1493:	00 00                	add    BYTE PTR [eax],al
    1495:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1498:	00 00                	add    BYTE PTR [eax],al
    149a:	00 02                	add    BYTE PTR [edx],al
    149c:	34 65                	xor    al,0x65
    149e:	00 00                	add    BYTE PTR [eax],al
    14a0:	00 02                	add    BYTE PTR [edx],al
    14a2:	04 07                	add    al,0x7
    14a4:	3e 00 00             	add    BYTE PTR ds:[eax],al
    14a7:	00 02                	add    BYTE PTR [edx],al
    14a9:	08 07                	or     BYTE PTR [edi],al
    14ab:	34 00                	xor    al,0x0
    14ad:	00 00                	add    BYTE PTR [eax],al
    14af:	04 94                	add    al,0x94
    14b1:	04 00                	add    al,0x0
    14b3:	00 03                	add    BYTE PTR [ebx],al
    14b5:	d8 65 00             	fsub   DWORD PTR [ebp+0x0]
    14b8:	00 00                	add    BYTE PTR [eax],al
    14ba:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    14c1:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    14c4:	9b                   	fwait
    14c5:	00 00                	add    BYTE PTR [eax],al
    14c7:	00 02                	add    BYTE PTR [edx],al
    14c9:	01 06                	add    DWORD PTR [esi],eax
    14cb:	64 00 00             	add    BYTE PTR fs:[eax],al
    14ce:	00 05 5a 06 00 00    	add    BYTE PTR ds:0x65a,al
    14d4:	10 04 2c             	adc    BYTE PTR [esp+ebp*1],al
    14d7:	d0 00                	rol    BYTE PTR [eax],1
    14d9:	00 00                	add    BYTE PTR [eax],al
    14db:	06                   	push   es
    14dc:	2f                   	das    
    14dd:	06                   	push   es
    14de:	00 00                	add    BYTE PTR [eax],al
    14e0:	04 2e                	add    al,0x2e
    14e2:	5a                   	pop    edx
    14e3:	00 00                	add    BYTE PTR [eax],al
    14e5:	00 00                	add    BYTE PTR [eax],al
    14e7:	07                   	pop    es
    14e8:	6c                   	ins    BYTE PTR es:[edi],dx
    14e9:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    14eb:	00 04 2f             	add    BYTE PTR [edi+ebp*1],al
    14ee:	5a                   	pop    edx
    14ef:	00 00                	add    BYTE PTR [eax],al
    14f1:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    14f4:	60                   	pusha  
    14f5:	06                   	push   es
    14f6:	00 00                	add    BYTE PTR [eax],al
    14f8:	04 30                	add    al,0x30
    14fa:	d0 00                	rol    BYTE PTR [eax],1
    14fc:	00 00                	add    BYTE PTR [eax],al
    14fe:	08 06                	or     BYTE PTR [esi],al
    1500:	b9 06 00 00 04       	mov    ecx,0x4000006
    1505:	31 d7                	xor    edi,edx
    1507:	00 00                	add    BYTE PTR [eax],al
    1509:	00 0c 00             	add    BYTE PTR [eax+eax*1],cl
    150c:	02 01                	add    al,BYTE PTR [ecx]
    150e:	02 95 00 00 00 08    	add    dl,BYTE PTR [ebp+0x8000000]
    1514:	04 93                	add    al,0x93
    1516:	00 00                	add    BYTE PTR [eax],al
    1518:	00 04 be             	add    BYTE PTR [esi+edi*4],al
    151b:	06                   	push   es
    151c:	00 00                	add    BYTE PTR [eax],al
    151e:	04 32                	add    al,0x32
    1520:	93                   	xchg   ebx,eax
    1521:	00 00                	add    BYTE PTR [eax],al
    1523:	00 09                	add    BYTE PTR [ecx],cl
    1525:	07                   	pop    es
    1526:	03 00                	add    eax,DWORD PTR [eax]
    1528:	00 04 65 00 00 00 06 	add    BYTE PTR [eiz*2+0x6000000],al
    152f:	15 a3 01 00 00       	adc    eax,0x1a3
    1534:	0a 6c 03 00          	or     ch,BYTE PTR [ebx+eax*1+0x0]
    1538:	00 00                	add    BYTE PTR [eax],al
    153a:	0a a4 03 00 00 01 0a 	or     ah,BYTE PTR [ebx+eax*1+0xa010000]
    1541:	73 02                	jae    1545 <sysEnter_Vector-0x12eabb>
    1543:	00 00                	add    BYTE PTR [eax],al
    1545:	02 0a                	add    cl,BYTE PTR [edx]
    1547:	f9                   	stc    
    1548:	02 00                	add    al,BYTE PTR [eax]
    154a:	00 03                	add    BYTE PTR [ebx],al
    154c:	0a 53 02             	or     dl,BYTE PTR [ebx+0x2]
    154f:	00 00                	add    BYTE PTR [eax],al
    1551:	04 0a                	add    al,0xa
    1553:	be 03 00 00 05       	mov    esi,0x5000003
    1558:	0a 1d 03 00 00 06    	or     bl,BYTE PTR ds:0x6000003
    155e:	0a 66 02             	or     ah,BYTE PTR [esi+0x2]
    1561:	00 00                	add    BYTE PTR [eax],al
    1563:	07                   	pop    es
    1564:	0a f4                	or     dh,ah
    1566:	03 00                	add    eax,DWORD PTR [eax]
    1568:	00 4f 0a             	add    BYTE PTR [edi+0xa],cl
    156b:	5f                   	pop    edi
    156c:	03 00                	add    eax,DWORD PTR [eax]
    156e:	00 59 0a             	add    BYTE PTR [ecx+0xa],bl
    1571:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
    1574:	00 61 0a             	add    BYTE PTR [ecx+0xa],ah
    1577:	e5 02                	in     eax,0x2
    1579:	00 00                	add    BYTE PTR [eax],al
    157b:	97                   	xchg   edi,eax
    157c:	0b 7c 03 00          	or     edi,DWORD PTR [ebx+eax*1+0x0]
    1580:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    1583:	0b 52 03             	or     edx,DWORD PTR [edx+0x3]
    1586:	00 00                	add    BYTE PTR [eax],al
    1588:	64 01 0b             	add    DWORD PTR fs:[ebx],ecx
    158b:	e6 03                	out    0x3,al
    158d:	00 00                	add    BYTE PTR [eax],al
    158f:	65 01 0b             	add    DWORD PTR gs:[ebx],ecx
    1592:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
    1598:	0b 1b                	or     ebx,DWORD PTR [ebx]
    159a:	04 00                	add    al,0x0
    159c:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    159f:	0b 2a                	or     ebp,DWORD PTR [edx]
    15a1:	03 00                	add    eax,DWORD PTR [eax]
    15a3:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    15a6:	0b ac 02 00 00 69 01 	or     ebp,DWORD PTR [edx+eax*1+0x1690000]
    15ad:	0b 93 03 00 00 70    	or     edx,DWORD PTR [ebx+0x70000003]
    15b3:	01 0b                	add    DWORD PTR [ebx],ecx
    15b5:	d5 02                	aad    0x2
    15b7:	00 00                	add    BYTE PTR [eax],al
    15b9:	71 01                	jno    15bc <sysEnter_Vector-0x12ea44>
    15bb:	0b cc                	or     ecx,esp
    15bd:	03 00                	add    eax,DWORD PTR [eax]
    15bf:	00 00                	add    BYTE PTR [eax],al
    15c1:	03 0b                	add    ecx,DWORD PTR [ebx]
    15c3:	37                   	aaa    
    15c4:	03 00                	add    eax,DWORD PTR [eax]
    15c6:	00 01                	add    BYTE PTR [ecx],al
    15c8:	03 0b                	add    ecx,DWORD PTR [ebx]
    15ca:	bb 02 00 00 02       	mov    ebx,0x2000002
    15cf:	03 0b                	add    ecx,DWORD PTR [ebx]
    15d1:	80 02 00             	add    BYTE PTR [edx],0x0
    15d4:	00 03                	add    BYTE PTR [ebx],al
    15d6:	03 0b                	add    ecx,DWORD PTR [ebx]
    15d8:	90                   	nop
    15d9:	02 00                	add    al,BYTE PTR [eax]
    15db:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    15de:	00 02                	add    BYTE PTR [edx],al
    15e0:	04 07                	add    al,0x7
    15e2:	39 00                	cmp    DWORD PTR [eax],eax
    15e4:	00 00                	add    BYTE PTR [eax],al
    15e6:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    15e9:	e1 00                	loope  15eb <sysEnter_Vector-0x12ea15>
    15eb:	00 00                	add    BYTE PTR [eax],al
    15ed:	0c 04                	or     al,0x4
    15ef:	08 04 8c             	or     BYTE PTR [esp+ecx*4],al
    15f2:	00 00                	add    BYTE PTR [eax],al
    15f4:	00 0d 66 06 00 00    	add    BYTE PTR ds:0x666,cl
    15fa:	01 0c 98             	add    DWORD PTR [eax+ebx*4],ecx
    15fd:	0e                   	push   cs
    15fe:	00 30                	add    BYTE PTR [eax],dh
    1600:	6c                   	ins    BYTE PTR es:[edi],dx
    1601:	00 00                	add    BYTE PTR [eax],al
    1603:	00 01                	add    BYTE PTR [ecx],al
    1605:	9c                   	pushf  
    1606:	0e                   	push   cs
    1607:	86 06                	xchg   BYTE PTR [esi],al
    1609:	00 00                	add    BYTE PTR [eax],al
    160b:	01 16                	add    DWORD PTR [esi],edx
    160d:	5a                   	pop    edx
    160e:	00 00                	add    BYTE PTR [eax],al
    1610:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
    1613:	00 30                	add    BYTE PTR [eax],dh
    1615:	87 00                	xchg   DWORD PTR [eax],eax
    1617:	00 00                	add    BYTE PTR [eax],al
    1619:	01 9c 00 02 00 00 0f 	add    DWORD PTR [eax+eax*1+0xf000002],ebx
    1620:	e1 03                	loope  1625 <sysEnter_Vector-0x12e9db>
    1622:	00 00                	add    BYTE PTR [eax],al
    1624:	01 16                	add    DWORD PTR [esi],edx
    1626:	73 00                	jae    1628 <sysEnter_Vector-0x12e9d8>
    1628:	00 00                	add    BYTE PTR [eax],al
    162a:	02 91 00 10 18 06    	add    dl,BYTE PTR [ecx+0x6181000]
    1630:	00 00                	add    BYTE PTR [eax],al
    1632:	01 1a                	add    DWORD PTR [edx],ebx
    1634:	5a                   	pop    edx
    1635:	00 00                	add    BYTE PTR [eax],al
    1637:	00 02                	add    BYTE PTR [edx],al
    1639:	91                   	xchg   ecx,eax
    163a:	74 00                	je     163c <sysEnter_Vector-0x12e9c4>
    163c:	11 b3 06 00 00 01    	adc    DWORD PTR [ebx+0x1000006],esi
    1642:	2e 8b 0f             	mov    ecx,DWORD PTR cs:[edi]
    1645:	00 30                	add    BYTE PTR [eax],dh
    1647:	39 00                	cmp    DWORD PTR [eax],eax
    1649:	00 00                	add    BYTE PTR [eax],al
    164b:	01 9c 3c 02 00 00 0f 	add    DWORD PTR [esp+edi*1+0xf000002],ebx
    1652:	0f 06                	clts   
    1654:	00 00                	add    BYTE PTR [eax],al
    1656:	01 2e                	add    DWORD PTR [esi],ebp
    1658:	b1 01                	mov    cl,0x1
    165a:	00 00                	add    BYTE PTR [eax],al
    165c:	02 91 00 12 6d 70    	add    dl,BYTE PTR [ecx+0x706d1200]
    1662:	00 01                	add    BYTE PTR [ecx],al
    1664:	30 3c 02             	xor    BYTE PTR [edx+eax*1],bh
    1667:	00 00                	add    BYTE PTR [eax],al
    1669:	02 91 74 13 71 06    	add    dl,BYTE PTR [ecx+0x6711374]
    166f:	00 00                	add    BYTE PTR [eax],al
    1671:	01 3a                	add    DWORD PTR [edx],edi
    1673:	b6 0f                	mov    dh,0xf
    1675:	00 30                	add    BYTE PTR [eax],dh
    1677:	00 08                	add    BYTE PTR [eax],cl
    1679:	04 dd                	add    al,0xdd
    167b:	00 00                	add    BYTE PTR [eax],al
    167d:	00 14 36             	add    BYTE PTR [esi+esi*1],dl
    1680:	06                   	push   es
    1681:	00 00                	add    BYTE PTR [eax],al
    1683:	01 40 b1             	add    DWORD PTR [eax-0x4f],eax
    1686:	01 00                	add    DWORD PTR [eax],eax
    1688:	00 c4                	add    ah,al
    168a:	0f 00                	(bad)  
    168c:	30 d4                	xor    ah,dl
    168e:	01 00                	add    DWORD PTR [eax],eax
    1690:	00 01                	add    BYTE PTR [ecx],al
    1692:	9c                   	pushf  
    1693:	b0 02                	mov    al,0x2
    1695:	00 00                	add    BYTE PTR [eax],al
    1697:	0f e1 03             	psraw  mm0,QWORD PTR [ebx]
    169a:	00 00                	add    BYTE PTR [eax],al
    169c:	01 40 73             	add    DWORD PTR [eax+0x73],eax
    169f:	00 00                	add    BYTE PTR [eax],al
    16a1:	00 02                	add    BYTE PTR [edx],al
    16a3:	91                   	xchg   ecx,eax
    16a4:	00 10                	add    BYTE PTR [eax],dl
    16a6:	7a 04                	jp     16ac <sysEnter_Vector-0x12e954>
    16a8:	00 00                	add    BYTE PTR [eax],al
    16aa:	01 42 b1             	add    DWORD PTR [edx-0x4f],eax
    16ad:	01 00                	add    DWORD PTR [eax],eax
    16af:	00 02                	add    BYTE PTR [edx],al
    16b1:	91                   	xchg   ecx,eax
    16b2:	60                   	pusha  
    16b3:	10 53 06             	adc    BYTE PTR [ebx+0x6],dl
    16b6:	00 00                	add    BYTE PTR [eax],al
    16b8:	01 44 5a 00          	add    DWORD PTR [edx+ebx*2+0x0],eax
    16bc:	00 00                	add    BYTE PTR [eax],al
    16be:	02 91 6c 10 02 06    	add    dl,BYTE PTR [ecx+0x602106c]
    16c4:	00 00                	add    BYTE PTR [eax],al
    16c6:	01 45 5a             	add    DWORD PTR [ebp+0x5a],eax
    16c9:	00 00                	add    BYTE PTR [eax],al
    16cb:	00 02                	add    BYTE PTR [edx],al
    16cd:	91                   	xchg   ecx,eax
    16ce:	68 10 3e 06 00       	push   0x63e10
    16d3:	00 01                	add    BYTE PTR [ecx],al
    16d5:	46                   	inc    esi
    16d6:	3c 02                	cmp    al,0x2
    16d8:	00 00                	add    BYTE PTR [eax],al
    16da:	02 91 64 10 7a 06    	add    dl,BYTE PTR [ecx+0x67a1064]
    16e0:	00 00                	add    BYTE PTR [eax],al
    16e2:	01 47 b0             	add    DWORD PTR [edi-0x50],eax
    16e5:	02 00                	add    al,BYTE PTR [eax]
    16e7:	00 02                	add    BYTE PTR [edx],al
    16e9:	91                   	xchg   ecx,eax
    16ea:	5c                   	pop    esp
    16eb:	00 08                	add    BYTE PTR [eax],cl
    16ed:	04 41                	add    al,0x41
    16ef:	00 00                	add    BYTE PTR [eax],al
    16f1:	00 14 6a             	add    BYTE PTR [edx+ebp*2],dl
    16f4:	06                   	push   es
    16f5:	00 00                	add    BYTE PTR [eax],al
    16f7:	01 67 b1             	add    DWORD PTR [edi-0x4f],esp
    16fa:	01 00                	add    DWORD PTR [eax],eax
    16fc:	00 98 11 00 30 20    	add    BYTE PTR [eax+0x20300011],bl
    1702:	00 00                	add    BYTE PTR [eax],al
    1704:	00 01                	add    BYTE PTR [ecx],al
    1706:	9c                   	pushf  
    1707:	de 02                	fiadd  WORD PTR [edx]
    1709:	00 00                	add    BYTE PTR [eax],al
    170b:	0f e1 03             	psraw  mm0,QWORD PTR [ebx]
    170e:	00 00                	add    BYTE PTR [eax],al
    1710:	01 67 73             	add    DWORD PTR [edi+0x73],esp
    1713:	00 00                	add    BYTE PTR [eax],al
    1715:	00 02                	add    BYTE PTR [edx],al
    1717:	91                   	xchg   ecx,eax
    1718:	00 00                	add    BYTE PTR [eax],al
    171a:	15 4e 06 00 00       	adc    eax,0x64e
    171f:	01 6c b8 11          	add    DWORD PTR [eax+edi*4+0x11],ebp
    1723:	00 30                	add    BYTE PTR [eax],dh
    1725:	1b 00                	sbb    eax,DWORD PTR [eax]
    1727:	00 00                	add    BYTE PTR [eax],al
    1729:	01 9c 02 03 00 00 0f 	add    DWORD PTR [edx+eax*1+0xf000003],ebx
    1730:	0f 06                	clts   
    1732:	00 00                	add    BYTE PTR [eax],al
    1734:	01 6c b1 01          	add    DWORD PTR [ecx+esi*4+0x1],ebp
    1738:	00 00                	add    BYTE PTR [eax],al
    173a:	02 91 00 00 0d 20    	add    dl,BYTE PTR [ecx+0x200d0000]
    1740:	06                   	push   es
    1741:	00 00                	add    BYTE PTR [eax],al
    1743:	01 71 d3             	add    DWORD PTR [ecx-0x2d],esi
    1746:	11 00                	adc    DWORD PTR [eax],eax
    1748:	30 32                	xor    BYTE PTR [edx],dh
    174a:	00 00                	add    BYTE PTR [eax],al
    174c:	00 01                	add    BYTE PTR [ecx],al
    174e:	9c                   	pushf  
    174f:	16                   	push   ss
    1750:	4b                   	dec    ebx
    1751:	00 00                	add    BYTE PTR [eax],al
    1753:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1756:	5a                   	pop    edx
    1757:	00 00                	add    BYTE PTR [eax],al
    1759:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    175f:	30 16                	xor    BYTE PTR [esi],dl
    1761:	af                   	scas   eax,DWORD PTR es:[edi]
    1762:	00 00                	add    BYTE PTR [eax],al
    1764:	00 04 35 5a 00 00 00 	add    BYTE PTR [esi*1+0x5a],al
    176b:	05 03 e0 44 00       	add    eax,0x44e003
    1770:	30 16                	xor    BYTE PTR [esi],dl
    1772:	5b                   	pop    ebx
    1773:	01 00                	add    DWORD PTR [eax],eax
    1775:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1778:	5a                   	pop    edx
    1779:	00 00                	add    BYTE PTR [eax],al
    177b:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    1781:	30 16                	xor    BYTE PTR [esi],dl
    1783:	54                   	push   esp
    1784:	00 00                	add    BYTE PTR [eax],al
    1786:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1789:	5a                   	pop    edx
    178a:	00 00                	add    BYTE PTR [eax],al
    178c:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    1792:	30 16                	xor    BYTE PTR [esi],dl
    1794:	28 00                	sub    BYTE PTR [eax],al
    1796:	00 00                	add    BYTE PTR [eax],al
    1798:	05 46 68 03 00       	add    eax,0x36846
    179d:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    17a3:	30 08                	xor    BYTE PTR [eax],cl
    17a5:	04 b3                	add    al,0xb3
    17a7:	01 00                	add    DWORD PTR [eax],eax
    17a9:	00 00                	add    BYTE PTR [eax],al
    17ab:	ea 01 00 00 04 00 f5 	jmp    0xf500:0x4000001
    17b2:	07                   	pop    es
    17b3:	00 00                	add    BYTE PTR [eax],al
    17b5:	04 01                	add    al,0x1
    17b7:	f4                   	hlt    
    17b8:	00 00                	add    BYTE PTR [eax],al
    17ba:	00 0c c8             	add    BYTE PTR [eax+ecx*8],cl
    17bd:	06                   	push   es
    17be:	00 00                	add    BYTE PTR [eax],al
    17c0:	72 00                	jb     17c2 <sysEnter_Vector-0x12e83e>
    17c2:	00 00                	add    BYTE PTR [eax],al
    17c4:	08 12                	or     BYTE PTR [edx],dl
    17c6:	00 30                	add    BYTE PTR [eax],dh
    17c8:	9b                   	fwait
    17c9:	01 00                	add    DWORD PTR [eax],eax
    17cb:	00 ff                	add    bh,bh
    17cd:	09 00                	or     DWORD PTR [eax],eax
    17cf:	00 02                	add    BYTE PTR [edx],al
    17d1:	01 08                	add    DWORD PTR [eax],ecx
    17d3:	5b                   	pop    ebx
    17d4:	00 00                	add    BYTE PTR [eax],al
    17d6:	00 02                	add    BYTE PTR [edx],al
    17d8:	02 07                	add    al,BYTE PTR [edi]
    17da:	0e                   	push   cs
    17db:	00 00                	add    BYTE PTR [eax],al
    17dd:	00 02                	add    BYTE PTR [edx],al
    17df:	04 07                	add    al,0x7
    17e1:	3e 00 00             	add    BYTE PTR ds:[eax],al
    17e4:	00 02                	add    BYTE PTR [edx],al
    17e6:	04 07                	add    al,0x7
    17e8:	39 00                	cmp    DWORD PTR [eax],eax
    17ea:	00 00                	add    BYTE PTR [eax],al
    17ec:	02 01                	add    al,BYTE PTR [ecx]
    17ee:	06                   	push   es
    17ef:	5d                   	pop    ebp
    17f0:	00 00                	add    BYTE PTR [eax],al
    17f2:	00 02                	add    BYTE PTR [edx],al
    17f4:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    17fa:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1801:	02 08                	add    cl,BYTE PTR [eax]
    1803:	05 00 00 00 00       	add    eax,0x0
    1808:	02 08                	add    cl,BYTE PTR [eax]
    180a:	07                   	pop    es
    180b:	34 00                	xor    al,0x0
    180d:	00 00                	add    BYTE PTR [eax],al
    180f:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1816:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1819:	e1 00                	loope  181b <sysEnter_Vector-0x12e7e5>
    181b:	00 00                	add    BYTE PTR [eax],al
    181d:	04 04                	add    al,0x4
    181f:	05 04 7a 00 00       	add    eax,0x7a04
    1824:	00 02                	add    BYTE PTR [edx],al
    1826:	01 06                	add    DWORD PTR [esi],eax
    1828:	64 00 00             	add    BYTE PTR fs:[eax],al
    182b:	00 06                	add    BYTE PTR [esi],al
    182d:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    1833:	33 00                	xor    eax,DWORD PTR [eax]
    1835:	00 00                	add    BYTE PTR [eax],al
    1837:	05 04 92 00 00       	add    eax,0x9204
    183c:	00 07                	add    BYTE PTR [edi],al
    183e:	7a 00                	jp     1840 <sysEnter_Vector-0x12e7c0>
    1840:	00 00                	add    BYTE PTR [eax],al
    1842:	06                   	push   es
    1843:	94                   	xchg   esp,eax
    1844:	04 00                	add    al,0x0
    1846:	00 03                	add    BYTE PTR [ebx],al
    1848:	d8 33                	fdiv   DWORD PTR [ebx]
    184a:	00 00                	add    BYTE PTR [eax],al
    184c:	00 02                	add    BYTE PTR [edx],al
    184e:	0c 04                	or     al,0x4
    1850:	9b                   	fwait
    1851:	00 00                	add    BYTE PTR [eax],al
    1853:	00 02                	add    BYTE PTR [edx],al
    1855:	01 02                	add    DWORD PTR [edx],eax
    1857:	95                   	xchg   ebp,eax
    1858:	00 00                	add    BYTE PTR [eax],al
    185a:	00 08                	add    BYTE PTR [eax],cl
    185c:	da 06                	fiadd  DWORD PTR [esi]
    185e:	00 00                	add    BYTE PTR [eax],al
    1860:	01 0a                	add    DWORD PTR [edx],ecx
    1862:	72 00                	jb     1864 <sysEnter_Vector-0x12e79c>
    1864:	00 00                	add    BYTE PTR [eax],al
    1866:	08 12                	or     BYTE PTR [edx],dl
    1868:	00 30                	add    BYTE PTR [eax],dh
    186a:	9b                   	fwait
    186b:	01 00                	add    DWORD PTR [eax],eax
    186d:	00 01                	add    BYTE PTR [ecx],al
    186f:	9c                   	pushf  
    1870:	7a 01                	jp     1873 <sysEnter_Vector-0x12e78d>
    1872:	00 00                	add    BYTE PTR [eax],al
    1874:	09 d5                	or     ebp,edx
    1876:	06                   	push   es
    1877:	00 00                	add    BYTE PTR [eax],al
    1879:	01 0a                	add    DWORD PTR [edx],ecx
    187b:	72 00                	jb     187d <sysEnter_Vector-0x12e783>
    187d:	00 00                	add    BYTE PTR [eax],al
    187f:	02 91 00 0a 73 72    	add    dl,BYTE PTR [ecx+0x72730a00]
    1885:	63 00                	arpl   WORD PTR [eax],ax
    1887:	01 0a                	add    DWORD PTR [edx],ecx
    1889:	7a 01                	jp     188c <sysEnter_Vector-0x12e774>
    188b:	00 00                	add    BYTE PTR [eax],al
    188d:	02 91 04 0a 6e 00    	add    dl,BYTE PTR [ecx+0x6e0a04]
    1893:	01 0a                	add    DWORD PTR [edx],ecx
    1895:	97                   	xchg   edi,eax
    1896:	00 00                	add    BYTE PTR [eax],al
    1898:	00 02                	add    BYTE PTR [edx],al
    189a:	91                   	xchg   ecx,eax
    189b:	08 0b                	or     BYTE PTR [ebx],cl
    189d:	64                   	fs
    189e:	77 00                	ja     18a0 <sysEnter_Vector-0x12e760>
    18a0:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    18a3:	00 00                	add    BYTE PTR [eax],al
    18a5:	00 02                	add    BYTE PTR [edx],al
    18a7:	91                   	xchg   ecx,eax
    18a8:	5e                   	pop    esi
    18a9:	0b 64 64 00          	or     esp,DWORD PTR [esp+eiz*2+0x0]
    18ad:	01 0c a9             	add    DWORD PTR [ecx+ebp*4],ecx
    18b0:	00 00                	add    BYTE PTR [eax],al
    18b2:	00 02                	add    BYTE PTR [edx],al
    18b4:	91                   	xchg   ecx,eax
    18b5:	5f                   	pop    edi
    18b6:	0c 3a                	or     al,0x3a
    18b8:	12 00                	adc    al,BYTE PTR [eax]
    18ba:	30 7d 00             	xor    BYTE PTR [ebp+0x0],bh
    18bd:	00 00                	add    BYTE PTR [eax],al
    18bf:	31 01                	xor    DWORD PTR [ecx],eax
    18c1:	00 00                	add    BYTE PTR [eax],al
    18c3:	0b 66 00             	or     esp,DWORD PTR [esi+0x0]
    18c6:	01 13                	add    DWORD PTR [ebx],edx
    18c8:	81 01 00 00 02 91    	add    DWORD PTR [ecx],0x91020000
    18ce:	74 0b                	je     18db <sysEnter_Vector-0x12e725>
    18d0:	74 00                	je     18d2 <sysEnter_Vector-0x12e72e>
    18d2:	01 14 8c             	add    DWORD PTR [esp+ecx*4],edx
    18d5:	01 00                	add    DWORD PTR [eax],eax
    18d7:	00 02                	add    BYTE PTR [edx],al
    18d9:	91                   	xchg   ecx,eax
    18da:	70 00                	jo     18dc <sysEnter_Vector-0x12e724>
    18dc:	0c bd                	or     al,0xbd
    18de:	12 00                	adc    al,BYTE PTR [eax]
    18e0:	30 79 00             	xor    BYTE PTR [ecx+0x0],bh
    18e3:	00 00                	add    BYTE PTR [eax],al
    18e5:	57                   	push   edi
    18e6:	01 00                	add    DWORD PTR [eax],eax
    18e8:	00 0b                	add    BYTE PTR [ebx],cl
    18ea:	66                   	data16
    18eb:	00 01                	add    BYTE PTR [ecx],al
    18ed:	23 81 01 00 00 02    	and    eax,DWORD PTR [ecx+0x2000001]
    18f3:	91                   	xchg   ecx,eax
    18f4:	6c                   	ins    BYTE PTR es:[edi],dx
    18f5:	0b 74 00 01          	or     esi,DWORD PTR [eax+eax*1+0x1]
    18f9:	24 8c                	and    al,0x8c
    18fb:	01 00                	add    DWORD PTR [eax],eax
    18fd:	00 02                	add    BYTE PTR [edx],al
    18ff:	91                   	xchg   ecx,eax
    1900:	68 00 0d 36 13       	push   0x13360d00
    1905:	00 30                	add    BYTE PTR [eax],dh
    1907:	6b 00 00             	imul   eax,DWORD PTR [eax],0x0
    190a:	00 0b                	add    BYTE PTR [ebx],cl
    190c:	66                   	data16
    190d:	00 01                	add    BYTE PTR [ecx],al
    190f:	32 8c 00 00 00 02 91 	xor    cl,BYTE PTR [eax+eax*1-0x6efe0000]
    1916:	64 0b 74 00 01       	or     esi,DWORD PTR fs:[eax+eax*1+0x1]
    191b:	33 74 00 00          	xor    esi,DWORD PTR [eax+eax*1+0x0]
    191f:	00 02                	add    BYTE PTR [edx],al
    1921:	91                   	xchg   ecx,eax
    1922:	60                   	pusha  
    1923:	00 00                	add    BYTE PTR [eax],al
    1925:	05 04 80 01 00       	add    eax,0x18004
    192a:	00 0e                	add    BYTE PTR [esi],cl
    192c:	05 04 87 01 00       	add    eax,0x18704
    1931:	00 07                	add    BYTE PTR [edi],al
    1933:	81 00 00 00 05 04    	add    DWORD PTR [eax],0x4050000
    1939:	81 00 00 00 0f 4b    	add    DWORD PTR [eax],0x4b0f0000
    193f:	00 00                	add    BYTE PTR [eax],al
    1941:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1944:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    194a:	dc 44 00 30          	fadd   QWORD PTR [eax+eax*1+0x30]
    194e:	0f af 00             	imul   eax,DWORD PTR [eax]
    1951:	00 00                	add    BYTE PTR [eax],al
    1953:	04 35                	add    al,0x35
    1955:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    195b:	e0 44                	loopne 19a1 <sysEnter_Vector-0x12e65f>
    195d:	00 30                	add    BYTE PTR [eax],dh
    195f:	0f 5b 01             	cvtdq2ps xmm0,XMMWORD PTR [ecx]
    1962:	00 00                	add    BYTE PTR [eax],al
    1964:	04 36                	add    al,0x36
    1966:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    196c:	d8 44 00 30          	fadd   DWORD PTR [eax+eax*1+0x30]
    1970:	0f 54 00             	andps  xmm0,XMMWORD PTR [eax]
    1973:	00 00                	add    BYTE PTR [eax],al
    1975:	04 37                	add    al,0x37
    1977:	81 00 00 00 05 03    	add    DWORD PTR [eax],0x3050000
    197d:	e8 44 00 30 0f       	call   f3019c6 <sysEnter_Vector+0xf1d19c6>
    1982:	28 00                	sub    BYTE PTR [eax],al
    1984:	00 00                	add    BYTE PTR [eax],al
    1986:	05 46 e7 01 00       	add    eax,0x1e746
    198b:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    1991:	30 05 04 74 00 00    	xor    BYTE PTR ds:0x7404,al
    1997:	00 00                	add    BYTE PTR [eax],al
    1999:	eb 01                	jmp    199c <sysEnter_Vector-0x12e664>
    199b:	00 00                	add    BYTE PTR [eax],al
    199d:	04 00                	add    al,0x0
    199f:	b6 08                	mov    dh,0x8
    19a1:	00 00                	add    BYTE PTR [eax],al
    19a3:	04 01                	add    al,0x1
    19a5:	f4                   	hlt    
    19a6:	00 00                	add    BYTE PTR [eax],al
    19a8:	00 0c ed 06 00 00 72 	add    BYTE PTR [ebp*8+0x72000006],cl
    19af:	00 00                	add    BYTE PTR [eax],al
    19b1:	00 a4 13 00 30 e7 00 	add    BYTE PTR [ebx+edx*1+0xe73000],ah
    19b8:	00 00                	add    BYTE PTR [eax],al
    19ba:	e6 0a                	out    0xa,al
    19bc:	00 00                	add    BYTE PTR [eax],al
    19be:	02 01                	add    al,BYTE PTR [ecx]
    19c0:	06                   	push   es
    19c1:	64 00 00             	add    BYTE PTR fs:[eax],al
    19c4:	00 02                	add    BYTE PTR [edx],al
    19c6:	01 06                	add    DWORD PTR [esi],eax
    19c8:	5d                   	pop    ebp
    19c9:	00 00                	add    BYTE PTR [eax],al
    19cb:	00 02                	add    BYTE PTR [edx],al
    19cd:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    19d3:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    19da:	02 08                	add    cl,BYTE PTR [eax]
    19dc:	05 00 00 00 00       	add    eax,0x0
    19e1:	04 46                	add    al,0x46
    19e3:	06                   	push   es
    19e4:	00 00                	add    BYTE PTR [eax],al
    19e6:	02 2e                	add    ch,BYTE PTR [esi]
    19e8:	53                   	push   ebx
    19e9:	00 00                	add    BYTE PTR [eax],al
    19eb:	00 02                	add    BYTE PTR [edx],al
    19ed:	01 08                	add    DWORD PTR [eax],ecx
    19ef:	5b                   	pop    ebx
    19f0:	00 00                	add    BYTE PTR [eax],al
    19f2:	00 04 07             	add    BYTE PTR [edi+eax*1],al
    19f5:	07                   	pop    es
    19f6:	00 00                	add    BYTE PTR [eax],al
    19f8:	02 31                	add    dh,BYTE PTR [ecx]
    19fa:	65 00 00             	add    BYTE PTR gs:[eax],al
    19fd:	00 02                	add    BYTE PTR [edx],al
    19ff:	02 07                	add    al,BYTE PTR [edi]
    1a01:	0e                   	push   cs
    1a02:	00 00                	add    BYTE PTR [eax],al
    1a04:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1a07:	00 00                	add    BYTE PTR [eax],al
    1a09:	00 02                	add    BYTE PTR [edx],al
    1a0b:	34 77                	xor    al,0x77
    1a0d:	00 00                	add    BYTE PTR [eax],al
    1a0f:	00 02                	add    BYTE PTR [edx],al
    1a11:	04 07                	add    al,0x7
    1a13:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1a16:	00 02                	add    BYTE PTR [edx],al
    1a18:	08 07                	or     BYTE PTR [edi],al
    1a1a:	34 00                	xor    al,0x0
    1a1c:	00 00                	add    BYTE PTR [eax],al
    1a1e:	04 94                	add    al,0x94
    1a20:	04 00                	add    al,0x0
    1a22:	00 03                	add    BYTE PTR [ebx],al
    1a24:	d8 77 00             	fdiv   DWORD PTR [edi+0x0]
    1a27:	00 00                	add    BYTE PTR [eax],al
    1a29:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1a30:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1a33:	9b                   	fwait
    1a34:	00 00                	add    BYTE PTR [eax],al
    1a36:	00 02                	add    BYTE PTR [edx],al
    1a38:	01 02                	add    DWORD PTR [edx],eax
    1a3a:	95                   	xchg   ebp,eax
    1a3b:	00 00                	add    BYTE PTR [eax],al
    1a3d:	00 02                	add    BYTE PTR [edx],al
    1a3f:	04 07                	add    al,0x7
    1a41:	39 00                	cmp    DWORD PTR [eax],eax
    1a43:	00 00                	add    BYTE PTR [eax],al
    1a45:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1a48:	e1 00                	loope  1a4a <sysEnter_Vector-0x12e5b6>
    1a4a:	00 00                	add    BYTE PTR [eax],al
    1a4c:	05 04 06 04 25       	add    eax,0x25040604
    1a51:	00 00                	add    BYTE PTR [eax],al
    1a53:	00 07                	add    BYTE PTR [edi],al
    1a55:	ff 06                	inc    DWORD PTR [esi]
    1a57:	00 00                	add    BYTE PTR [eax],al
    1a59:	01 08                	add    DWORD PTR [eax],ecx
    1a5b:	b3 00                	mov    bl,0x0
    1a5d:	00 00                	add    BYTE PTR [eax],al
    1a5f:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    1a60:	13 00                	adc    eax,DWORD PTR [eax]
    1a62:	30 c7                	xor    bh,al
    1a64:	00 00                	add    BYTE PTR [eax],al
    1a66:	00 01                	add    BYTE PTR [ecx],al
    1a68:	9c                   	pushf  
    1a69:	3e 01 00             	add    DWORD PTR ds:[eax],eax
    1a6c:	00 08                	add    BYTE PTR [eax],cl
    1a6e:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1a71:	01 08                	add    DWORD PTR [eax],ecx
    1a73:	b3 00                	mov    bl,0x0
    1a75:	00 00                	add    BYTE PTR [eax],al
    1a77:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1a7d:	6c                   	ins    BYTE PTR es:[edi],dx
    1a7e:	00 01                	add    BYTE PTR [ecx],al
    1a80:	08 3a                	or     BYTE PTR [edx],bh
    1a82:	00 00                	add    BYTE PTR [eax],al
    1a84:	00 02                	add    BYTE PTR [edx],al
    1a86:	91                   	xchg   ecx,eax
    1a87:	04 08                	add    al,0x8
    1a89:	6c                   	ins    BYTE PTR es:[edi],dx
    1a8a:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1a8c:	00 01                	add    BYTE PTR [ecx],al
    1a8e:	08 85 00 00 00 02    	or     BYTE PTR [ebp+0x2000000],al
    1a94:	91                   	xchg   ecx,eax
    1a95:	08 09                	or     BYTE PTR [ecx],cl
    1a97:	64 00 01             	add    BYTE PTR fs:[ecx],al
    1a9a:	0a 3e                	or     bh,BYTE PTR [esi]
    1a9c:	01 00                	add    DWORD PTR [eax],eax
    1a9e:	00 02                	add    BYTE PTR [edx],al
    1aa0:	91                   	xchg   ecx,eax
    1aa1:	74 09                	je     1aac <sysEnter_Vector-0x12e554>
    1aa3:	65 00 01             	add    BYTE PTR gs:[ecx],al
    1aa6:	0b 44 01 00          	or     eax,DWORD PTR [ecx+eax*1+0x0]
    1aaa:	00 02                	add    BYTE PTR [edx],al
    1aac:	91                   	xchg   ecx,eax
    1aad:	70 0a                	jo     1ab9 <sysEnter_Vector-0x12e547>
    1aaf:	e1 06                	loope  1ab7 <sysEnter_Vector-0x12e549>
    1ab1:	00 00                	add    BYTE PTR [eax],al
    1ab3:	01 0c 5a             	add    DWORD PTR [edx+ebx*2],ecx
    1ab6:	00 00                	add    BYTE PTR [eax],al
    1ab8:	00 02                	add    BYTE PTR [edx],al
    1aba:	91                   	xchg   ecx,eax
    1abb:	6a 09                	push   0x9
    1abd:	66                   	data16
    1abe:	00 01                	add    BYTE PTR [ecx],al
    1ac0:	0d 4a 01 00 00       	or     eax,0x14a
    1ac5:	02 91 6c 0a fa 06    	add    dl,BYTE PTR [ecx+0x6fa0a6c]
    1acb:	00 00                	add    BYTE PTR [eax],al
    1acd:	01 0e                	add    DWORD PTR [esi],ecx
    1acf:	6c                   	ins    BYTE PTR es:[edi],dx
    1ad0:	00 00                	add    BYTE PTR [eax],al
    1ad2:	00 02                	add    BYTE PTR [edx],al
    1ad4:	91                   	xchg   ecx,eax
    1ad5:	64 00 06             	add    BYTE PTR fs:[esi],al
    1ad8:	04 48                	add    al,0x48
    1ada:	00 00                	add    BYTE PTR [eax],al
    1adc:	00 06                	add    BYTE PTR [esi],al
    1ade:	04 5a                	add    al,0x5a
    1ae0:	00 00                	add    BYTE PTR [eax],al
    1ae2:	00 06                	add    BYTE PTR [esi],al
    1ae4:	04 6c                	add    al,0x6c
    1ae6:	00 00                	add    BYTE PTR [eax],al
    1ae8:	00 0b                	add    BYTE PTR [ebx],cl
    1aea:	e6 06                	out    0x6,al
    1aec:	00 00                	add    BYTE PTR [eax],al
    1aee:	01 1f                	add    DWORD PTR [edi],ebx
    1af0:	b3 00                	mov    bl,0x0
    1af2:	00 00                	add    BYTE PTR [eax],al
    1af4:	6b 14 00 30          	imul   edx,DWORD PTR [eax+eax*1],0x30
    1af8:	20 00                	and    BYTE PTR [eax],al
    1afa:	00 00                	add    BYTE PTR [eax],al
    1afc:	01 9c 93 01 00 00 08 	add    DWORD PTR [ebx+edx*4+0x8000001],ebx
    1b03:	64 31 00             	xor    DWORD PTR fs:[eax],eax
    1b06:	01 1f                	add    DWORD PTR [edi],ebx
    1b08:	b3 00                	mov    bl,0x0
    1b0a:	00 00                	add    BYTE PTR [eax],al
    1b0c:	02 91 00 08 76 61    	add    dl,BYTE PTR [ecx+0x61760800]
    1b12:	6c                   	ins    BYTE PTR es:[edi],dx
    1b13:	00 01                	add    BYTE PTR [ecx],al
    1b15:	1f                   	pop    ds
    1b16:	3a 00                	cmp    al,BYTE PTR [eax]
    1b18:	00 00                	add    BYTE PTR [eax],al
    1b1a:	02 91 04 08 6c 65    	add    dl,BYTE PTR [ecx+0x656c0804]
    1b20:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1b21:	00 01                	add    BYTE PTR [ecx],al
    1b23:	1f                   	pop    ds
    1b24:	85 00                	test   DWORD PTR [eax],eax
    1b26:	00 00                	add    BYTE PTR [eax],al
    1b28:	02 91 08 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0008]
    1b2e:	00 00                	add    BYTE PTR [eax],al
    1b30:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    1b33:	6c                   	ins    BYTE PTR es:[edi],dx
    1b34:	00 00                	add    BYTE PTR [eax],al
    1b36:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    1b3c:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    1b3f:	00 00                	add    BYTE PTR [eax],al
    1b41:	00 04 35 6c 00 00 00 	add    BYTE PTR [esi*1+0x6c],al
    1b48:	05 03 e0 44 00       	add    eax,0x44e003
    1b4d:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    1b50:	01 00                	add    DWORD PTR [eax],eax
    1b52:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    1b55:	6c                   	ins    BYTE PTR es:[edi],dx
    1b56:	00 00                	add    BYTE PTR [eax],al
    1b58:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    1b5e:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    1b61:	00 00                	add    BYTE PTR [eax],al
    1b63:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    1b66:	6c                   	ins    BYTE PTR es:[edi],dx
    1b67:	00 00                	add    BYTE PTR [eax],al
    1b69:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    1b6f:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    1b72:	00 00                	add    BYTE PTR [eax],al
    1b74:	00 05 46 e8 01 00    	add    BYTE PTR ds:0x1e846,al
    1b7a:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    1b80:	30 06                	xor    BYTE PTR [esi],al
    1b82:	04 b5                	add    al,0xb5
    1b84:	00 00                	add    BYTE PTR [eax],al
    1b86:	00 00                	add    BYTE PTR [eax],al
    1b88:	75 01                	jne    1b8b <sysEnter_Vector-0x12e475>
    1b8a:	00 00                	add    BYTE PTR [eax],al
    1b8c:	04 00                	add    al,0x0
    1b8e:	73 09                	jae    1b99 <sysEnter_Vector-0x12e467>
    1b90:	00 00                	add    BYTE PTR [eax],al
    1b92:	04 01                	add    al,0x1
    1b94:	f4                   	hlt    
    1b95:	00 00                	add    BYTE PTR [eax],al
    1b97:	00 0c 2c             	add    BYTE PTR [esp+ebp*1],cl
    1b9a:	07                   	pop    es
    1b9b:	00 00                	add    BYTE PTR [eax],al
    1b9d:	72 00                	jb     1b9f <sysEnter_Vector-0x12e461>
    1b9f:	00 00                	add    BYTE PTR [eax],al
    1ba1:	8c 14 00             	mov    WORD PTR [eax+eax*1],ss
    1ba4:	30 14 00             	xor    BYTE PTR [eax+eax*1],dl
    1ba7:	00 00                	add    BYTE PTR [eax],al
    1ba9:	b4 0b                	mov    ah,0xb
    1bab:	00 00                	add    BYTE PTR [eax],al
    1bad:	02 01                	add    al,BYTE PTR [ecx]
    1baf:	06                   	push   es
    1bb0:	64 00 00             	add    BYTE PTR fs:[eax],al
    1bb3:	00 02                	add    BYTE PTR [edx],al
    1bb5:	01 06                	add    DWORD PTR [esi],eax
    1bb7:	5d                   	pop    ebp
    1bb8:	00 00                	add    BYTE PTR [eax],al
    1bba:	00 02                	add    BYTE PTR [edx],al
    1bbc:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1bc2:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1bc9:	02 08                	add    cl,BYTE PTR [eax]
    1bcb:	05 00 00 00 00       	add    eax,0x0
    1bd0:	02 01                	add    al,BYTE PTR [ecx]
    1bd2:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1bd5:	00 00                	add    BYTE PTR [eax],al
    1bd7:	02 02                	add    al,BYTE PTR [edx]
    1bd9:	07                   	pop    es
    1bda:	0e                   	push   cs
    1bdb:	00 00                	add    BYTE PTR [eax],al
    1bdd:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1be0:	00 00                	add    BYTE PTR [eax],al
    1be2:	00 02                	add    BYTE PTR [edx],al
    1be4:	34 61                	xor    al,0x61
    1be6:	00 00                	add    BYTE PTR [eax],al
    1be8:	00 02                	add    BYTE PTR [edx],al
    1bea:	04 07                	add    al,0x7
    1bec:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1bef:	00 02                	add    BYTE PTR [edx],al
    1bf1:	08 07                	or     BYTE PTR [edi],al
    1bf3:	34 00                	xor    al,0x0
    1bf5:	00 00                	add    BYTE PTR [eax],al
    1bf7:	04 94                	add    al,0x94
    1bf9:	04 00                	add    al,0x0
    1bfb:	00 03                	add    BYTE PTR [ebx],al
    1bfd:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1c00:	00 00                	add    BYTE PTR [eax],al
    1c02:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1c09:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1c0c:	9b                   	fwait
    1c0d:	00 00                	add    BYTE PTR [eax],al
    1c0f:	00 02                	add    BYTE PTR [edx],al
    1c11:	01 02                	add    DWORD PTR [edx],eax
    1c13:	95                   	xchg   ebp,eax
    1c14:	00 00                	add    BYTE PTR [eax],al
    1c16:	00 02                	add    BYTE PTR [edx],al
    1c18:	04 07                	add    al,0x7
    1c1a:	39 00                	cmp    DWORD PTR [eax],eax
    1c1c:	00 00                	add    BYTE PTR [eax],al
    1c1e:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1c21:	e1 00                	loope  1c23 <sysEnter_Vector-0x12e3dd>
    1c23:	00 00                	add    BYTE PTR [eax],al
    1c25:	05 04 06 04 25       	add    eax,0x25040604
    1c2a:	00 00                	add    BYTE PTR [eax],al
    1c2c:	00 04 15 07 00 00 04 	add    BYTE PTR [edx*1+0x4000007],al
    1c33:	15 7a 00 00 00       	adc    eax,0x7a
    1c38:	07                   	pop    es
    1c39:	27                   	daa    
    1c3a:	07                   	pop    es
    1c3b:	00 00                	add    BYTE PTR [eax],al
    1c3d:	01 09                	add    DWORD PTR [ecx],ecx
    1c3f:	9d                   	popf   
    1c40:	00 00                	add    BYTE PTR [eax],al
    1c42:	00 8c 14 00 30 14 00 	add    BYTE PTR [esp+edx*1+0x143000],cl
    1c49:	00 00                	add    BYTE PTR [eax],al
    1c4b:	01 9c 1d 01 00 00 08 	add    DWORD PTR [ebp+ebx*1+0x8000001],ebx
    1c52:	10 07                	adc    BYTE PTR [edi],al
    1c54:	00 00                	add    BYTE PTR [eax],al
    1c56:	01 09                	add    DWORD PTR [ecx],ecx
    1c58:	9d                   	popf   
    1c59:	00 00                	add    BYTE PTR [eax],al
    1c5b:	00 02                	add    BYTE PTR [edx],al
    1c5d:	91                   	xchg   ecx,eax
    1c5e:	00 09                	add    BYTE PTR [ecx],cl
    1c60:	6c                   	ins    BYTE PTR es:[edi],dx
    1c61:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1c63:	00 01                	add    BYTE PTR [ecx],al
    1c65:	09 6f 00             	or     DWORD PTR [edi+0x0],ebp
    1c68:	00 00                	add    BYTE PTR [eax],al
    1c6a:	02 91 04 08 1b 07    	add    dl,BYTE PTR [ecx+0x71b0804]
    1c70:	00 00                	add    BYTE PTR [eax],al
    1c72:	01 09                	add    DWORD PTR [ecx],ecx
    1c74:	3a 00                	cmp    al,BYTE PTR [eax]
    1c76:	00 00                	add    BYTE PTR [eax],al
    1c78:	02 91 08 08 51 08    	add    dl,BYTE PTR [ecx+0x8510808]
    1c7e:	00 00                	add    BYTE PTR [eax],al
    1c80:	01 09                	add    DWORD PTR [ecx],ecx
    1c82:	3a 00                	cmp    al,BYTE PTR [eax]
    1c84:	00 00                	add    BYTE PTR [eax],al
    1c86:	02 91 0c 09 66 64    	add    dl,BYTE PTR [ecx+0x6466090c]
    1c8c:	00 01                	add    BYTE PTR [ecx],al
    1c8e:	09 3a                	or     DWORD PTR [edx],edi
    1c90:	00 00                	add    BYTE PTR [eax],al
    1c92:	00 02                	add    BYTE PTR [edx],al
    1c94:	91                   	xchg   ecx,eax
    1c95:	10 08                	adc    BYTE PTR [eax],cl
    1c97:	20 07                	and    BYTE PTR [edi],al
    1c99:	00 00                	add    BYTE PTR [eax],al
    1c9b:	01 09                	add    DWORD PTR [ecx],ecx
    1c9d:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    1c9e:	00 00                	add    BYTE PTR [eax],al
    1ca0:	00 02                	add    BYTE PTR [edx],al
    1ca2:	91                   	xchg   ecx,eax
    1ca3:	14 00                	adc    al,0x0
    1ca5:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    1ca8:	00 00                	add    BYTE PTR [eax],al
    1caa:	05 34 56 00 00       	add    eax,0x5634
    1caf:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    1cb5:	30 0a                	xor    BYTE PTR [edx],cl
    1cb7:	af                   	scas   eax,DWORD PTR es:[edi]
    1cb8:	00 00                	add    BYTE PTR [eax],al
    1cba:	00 05 35 56 00 00    	add    BYTE PTR ds:0x5635,al
    1cc0:	00 05 03 e0 44 00    	add    BYTE PTR ds:0x44e003,al
    1cc6:	30 0a                	xor    BYTE PTR [edx],cl
    1cc8:	5b                   	pop    ebx
    1cc9:	01 00                	add    DWORD PTR [eax],eax
    1ccb:	00 05 36 56 00 00    	add    BYTE PTR ds:0x5636,al
    1cd1:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    1cd7:	30 0a                	xor    BYTE PTR [edx],cl
    1cd9:	54                   	push   esp
    1cda:	00 00                	add    BYTE PTR [eax],al
    1cdc:	00 05 37 56 00 00    	add    BYTE PTR ds:0x5637,al
    1ce2:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    1ce8:	30 0a                	xor    BYTE PTR [edx],cl
    1cea:	28 00                	sub    BYTE PTR [eax],al
    1cec:	00 00                	add    BYTE PTR [eax],al
    1cee:	06                   	push   es
    1cef:	46                   	inc    esi
    1cf0:	72 01                	jb     1cf3 <sysEnter_Vector-0x12e30d>
    1cf2:	00 00                	add    BYTE PTR [eax],al
    1cf4:	05 03 e4 44 00       	add    eax,0x44e403
    1cf9:	30 06                	xor    BYTE PTR [esi],al
    1cfb:	04 9f                	add    al,0x9f
    1cfd:	00 00                	add    BYTE PTR [eax],al
    1cff:	00 00                	add    BYTE PTR [eax],al
    1d01:	e4 01                	in     al,0x1
    1d03:	00 00                	add    BYTE PTR [eax],al
    1d05:	04 00                	add    al,0x0
    1d07:	05 0a 00 00 04       	add    eax,0x400000a
    1d0c:	01 f4                	add    esp,esi
    1d0e:	00 00                	add    BYTE PTR [eax],al
    1d10:	00 0c 37             	add    BYTE PTR [edi+esi*1],cl
    1d13:	07                   	pop    es
    1d14:	00 00                	add    BYTE PTR [eax],al
    1d16:	72 00                	jb     1d18 <sysEnter_Vector-0x12e2e8>
    1d18:	00 00                	add    BYTE PTR [eax],al
    1d1a:	a0 14 00 30 29       	mov    al,ds:0x29300014
    1d1f:	00 00                	add    BYTE PTR [eax],al
    1d21:	00 78 0c             	add    BYTE PTR [eax+0xc],bh
    1d24:	00 00                	add    BYTE PTR [eax],al
    1d26:	02 01                	add    al,BYTE PTR [ecx]
    1d28:	06                   	push   es
    1d29:	64 00 00             	add    BYTE PTR fs:[eax],al
    1d2c:	00 02                	add    BYTE PTR [edx],al
    1d2e:	01 06                	add    DWORD PTR [esi],eax
    1d30:	5d                   	pop    ebp
    1d31:	00 00                	add    BYTE PTR [eax],al
    1d33:	00 02                	add    BYTE PTR [edx],al
    1d35:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1d3b:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1d42:	02 08                	add    cl,BYTE PTR [eax]
    1d44:	05 00 00 00 00       	add    eax,0x0
    1d49:	02 01                	add    al,BYTE PTR [ecx]
    1d4b:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1d4e:	00 00                	add    BYTE PTR [eax],al
    1d50:	02 02                	add    al,BYTE PTR [edx]
    1d52:	07                   	pop    es
    1d53:	0e                   	push   cs
    1d54:	00 00                	add    BYTE PTR [eax],al
    1d56:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1d59:	00 00                	add    BYTE PTR [eax],al
    1d5b:	00 02                	add    BYTE PTR [edx],al
    1d5d:	34 61                	xor    al,0x61
    1d5f:	00 00                	add    BYTE PTR [eax],al
    1d61:	00 02                	add    BYTE PTR [edx],al
    1d63:	04 07                	add    al,0x7
    1d65:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1d68:	00 02                	add    BYTE PTR [edx],al
    1d6a:	08 07                	or     BYTE PTR [edi],al
    1d6c:	34 00                	xor    al,0x0
    1d6e:	00 00                	add    BYTE PTR [eax],al
    1d70:	04 9b                	add    al,0x9b
    1d72:	04 00                	add    al,0x0
    1d74:	00 02                	add    BYTE PTR [edx],al
    1d76:	56                   	push   esi
    1d77:	61                   	popa   
    1d78:	00 00                	add    BYTE PTR [eax],al
    1d7a:	00 02                	add    BYTE PTR [edx],al
    1d7c:	04 05                	add    al,0x5
    1d7e:	05 00 00 00 02       	add    eax,0x2000000
    1d83:	0c 04                	or     al,0x4
    1d85:	9b                   	fwait
    1d86:	00 00                	add    BYTE PTR [eax],al
    1d88:	00 02                	add    BYTE PTR [edx],al
    1d8a:	01 02                	add    DWORD PTR [edx],eax
    1d8c:	95                   	xchg   ebp,eax
    1d8d:	00 00                	add    BYTE PTR [eax],al
    1d8f:	00 05 07 03 00 00    	add    BYTE PTR ds:0x307,al
    1d95:	04 61                	add    al,0x61
    1d97:	00 00                	add    BYTE PTR [eax],al
    1d99:	00 05 15 4a 01 00    	add    BYTE PTR ds:0x14a15,al
    1d9f:	00 06                	add    BYTE PTR [esi],al
    1da1:	6c                   	ins    BYTE PTR es:[edi],dx
    1da2:	03 00                	add    eax,DWORD PTR [eax]
    1da4:	00 00                	add    BYTE PTR [eax],al
    1da6:	06                   	push   es
    1da7:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    1da8:	03 00                	add    eax,DWORD PTR [eax]
    1daa:	00 01                	add    BYTE PTR [ecx],al
    1dac:	06                   	push   es
    1dad:	73 02                	jae    1db1 <sysEnter_Vector-0x12e24f>
    1daf:	00 00                	add    BYTE PTR [eax],al
    1db1:	02 06                	add    al,BYTE PTR [esi]
    1db3:	f9                   	stc    
    1db4:	02 00                	add    al,BYTE PTR [eax]
    1db6:	00 03                	add    BYTE PTR [ebx],al
    1db8:	06                   	push   es
    1db9:	53                   	push   ebx
    1dba:	02 00                	add    al,BYTE PTR [eax]
    1dbc:	00 04 06             	add    BYTE PTR [esi+eax*1],al
    1dbf:	be 03 00 00 05       	mov    esi,0x5000003
    1dc4:	06                   	push   es
    1dc5:	1d 03 00 00 06       	sbb    eax,0x6000003
    1dca:	06                   	push   es
    1dcb:	66                   	data16
    1dcc:	02 00                	add    al,BYTE PTR [eax]
    1dce:	00 07                	add    BYTE PTR [edi],al
    1dd0:	06                   	push   es
    1dd1:	f4                   	hlt    
    1dd2:	03 00                	add    eax,DWORD PTR [eax]
    1dd4:	00 4f 06             	add    BYTE PTR [edi+0x6],cl
    1dd7:	5f                   	pop    edi
    1dd8:	03 00                	add    eax,DWORD PTR [eax]
    1dda:	00 59 06             	add    BYTE PTR [ecx+0x6],bl
    1ddd:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
    1de0:	00 61 06             	add    BYTE PTR [ecx+0x6],ah
    1de3:	e5 02                	in     eax,0x2
    1de5:	00 00                	add    BYTE PTR [eax],al
    1de7:	97                   	xchg   edi,eax
    1de8:	07                   	pop    es
    1de9:	7c 03                	jl     1dee <sysEnter_Vector-0x12e212>
    1deb:	00 00                	add    BYTE PTR [eax],al
    1ded:	63 01                	arpl   WORD PTR [ecx],ax
    1def:	07                   	pop    es
    1df0:	52                   	push   edx
    1df1:	03 00                	add    eax,DWORD PTR [eax]
    1df3:	00 64 01 07          	add    BYTE PTR [ecx+eax*1+0x7],ah
    1df7:	e6 03                	out    0x3,al
    1df9:	00 00                	add    BYTE PTR [eax],al
    1dfb:	65 01 07             	add    DWORD PTR gs:[edi],eax
    1dfe:	c7 02 00 00 66 01    	mov    DWORD PTR [edx],0x1660000
    1e04:	07                   	pop    es
    1e05:	1b 04 00             	sbb    eax,DWORD PTR [eax+eax*1]
    1e08:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    1e0b:	07                   	pop    es
    1e0c:	2a 03                	sub    al,BYTE PTR [ebx]
    1e0e:	00 00                	add    BYTE PTR [eax],al
    1e10:	68 01 07 ac 02       	push   0x2ac0701
    1e15:	00 00                	add    BYTE PTR [eax],al
    1e17:	69 01 07 93 03 00    	imul   eax,DWORD PTR [ecx],0x39307
    1e1d:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    1e20:	07                   	pop    es
    1e21:	d5 02                	aad    0x2
    1e23:	00 00                	add    BYTE PTR [eax],al
    1e25:	71 01                	jno    1e28 <sysEnter_Vector-0x12e1d8>
    1e27:	07                   	pop    es
    1e28:	cc                   	int3   
    1e29:	03 00                	add    eax,DWORD PTR [eax]
    1e2b:	00 00                	add    BYTE PTR [eax],al
    1e2d:	03 07                	add    eax,DWORD PTR [edi]
    1e2f:	37                   	aaa    
    1e30:	03 00                	add    eax,DWORD PTR [eax]
    1e32:	00 01                	add    BYTE PTR [ecx],al
    1e34:	03 07                	add    eax,DWORD PTR [edi]
    1e36:	bb 02 00 00 02       	mov    ebx,0x2000002
    1e3b:	03 07                	add    eax,DWORD PTR [edi]
    1e3d:	80 02 00             	add    BYTE PTR [edx],0x0
    1e40:	00 03                	add    BYTE PTR [ebx],al
    1e42:	03 07                	add    eax,DWORD PTR [edi]
    1e44:	90                   	nop
    1e45:	02 00                	add    al,BYTE PTR [eax]
    1e47:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    1e4a:	00 02                	add    BYTE PTR [edx],al
    1e4c:	04 07                	add    al,0x7
    1e4e:	39 00                	cmp    DWORD PTR [eax],eax
    1e50:	00 00                	add    BYTE PTR [eax],al
    1e52:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1e55:	e1 00                	loope  1e57 <sysEnter_Vector-0x12e1a9>
    1e57:	00 00                	add    BYTE PTR [eax],al
    1e59:	08 04 25 00 00 00 09 	or     BYTE PTR [eiz*1+0x9000000],al
    1e60:	42                   	inc    edx
    1e61:	07                   	pop    es
    1e62:	00 00                	add    BYTE PTR [eax],al
    1e64:	01 0a                	add    DWORD PTR [edx],ecx
    1e66:	3a 00                	cmp    al,BYTE PTR [eax]
    1e68:	00 00                	add    BYTE PTR [eax],al
    1e6a:	a0 14 00 30 29       	mov    al,ds:0x29300014
    1e6f:	00 00                	add    BYTE PTR [eax],al
    1e71:	00 01                	add    BYTE PTR [ecx],al
    1e73:	9c                   	pushf  
    1e74:	86 01                	xchg   BYTE PTR [ecx],al
    1e76:	00 00                	add    BYTE PTR [eax],al
    1e78:	0a 47 07             	or     al,BYTE PTR [edi+0x7]
    1e7b:	00 00                	add    BYTE PTR [eax],al
    1e7d:	01 0a                	add    DWORD PTR [edx],ecx
    1e7f:	86 01                	xchg   BYTE PTR [ecx],al
    1e81:	00 00                	add    BYTE PTR [eax],al
    1e83:	02 91 00 00 08 04    	add    dl,BYTE PTR [ecx+0x4080000]
    1e89:	3a 00                	cmp    al,BYTE PTR [eax]
    1e8b:	00 00                	add    BYTE PTR [eax],al
    1e8d:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    1e90:	00 00                	add    BYTE PTR [eax],al
    1e92:	03 34 56             	add    esi,DWORD PTR [esi+edx*2]
    1e95:	00 00                	add    BYTE PTR [eax],al
    1e97:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    1e9d:	30 0b                	xor    BYTE PTR [ebx],cl
    1e9f:	af                   	scas   eax,DWORD PTR es:[edi]
    1ea0:	00 00                	add    BYTE PTR [eax],al
    1ea2:	00 03                	add    BYTE PTR [ebx],al
    1ea4:	35 56 00 00 00       	xor    eax,0x56
    1ea9:	05 03 e0 44 00       	add    eax,0x44e003
    1eae:	30 0b                	xor    BYTE PTR [ebx],cl
    1eb0:	5b                   	pop    ebx
    1eb1:	01 00                	add    DWORD PTR [eax],eax
    1eb3:	00 03                	add    BYTE PTR [ebx],al
    1eb5:	36                   	ss
    1eb6:	56                   	push   esi
    1eb7:	00 00                	add    BYTE PTR [eax],al
    1eb9:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    1ebf:	30 0b                	xor    BYTE PTR [ebx],cl
    1ec1:	54                   	push   esp
    1ec2:	00 00                	add    BYTE PTR [eax],al
    1ec4:	00 03                	add    BYTE PTR [ebx],al
    1ec6:	37                   	aaa    
    1ec7:	56                   	push   esi
    1ec8:	00 00                	add    BYTE PTR [eax],al
    1eca:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    1ed0:	30 0b                	xor    BYTE PTR [ebx],cl
    1ed2:	28 00                	sub    BYTE PTR [eax],al
    1ed4:	00 00                	add    BYTE PTR [eax],al
    1ed6:	04 46                	add    al,0x46
    1ed8:	e1 01                	loope  1edb <sysEnter_Vector-0x12e125>
    1eda:	00 00                	add    BYTE PTR [eax],al
    1edc:	05 03 e4 44 00       	add    eax,0x44e403
    1ee1:	30 08                	xor    BYTE PTR [eax],cl
    1ee3:	04 58                	add    al,0x58
    1ee5:	01 00                	add    DWORD PTR [eax],eax
    1ee7:	00 00                	add    BYTE PTR [eax],al
    1ee9:	58                   	pop    eax
    1eea:	04 00                	add    al,0x0
    1eec:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    1eef:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    1ef0:	0a 00                	or     al,BYTE PTR [eax]
    1ef2:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    1ef5:	f4                   	hlt    
    1ef6:	00 00                	add    BYTE PTR [eax],al
    1ef8:	00 0c b0             	add    BYTE PTR [eax+esi*4],cl
    1efb:	07                   	pop    es
    1efc:	00 00                	add    BYTE PTR [eax],al
    1efe:	72 00                	jb     1f00 <sysEnter_Vector-0x12e100>
    1f00:	00 00                	add    BYTE PTR [eax],al
    1f02:	cc                   	int3   
    1f03:	14 00                	adc    al,0x0
    1f05:	30 84 00 00 00 62 0d 	xor    BYTE PTR [eax+eax*1+0xd620000],al
    1f0c:	00 00                	add    BYTE PTR [eax],al
    1f0e:	02 01                	add    al,BYTE PTR [ecx]
    1f10:	06                   	push   es
    1f11:	64 00 00             	add    BYTE PTR fs:[eax],al
    1f14:	00 02                	add    BYTE PTR [edx],al
    1f16:	01 06                	add    DWORD PTR [esi],eax
    1f18:	5d                   	pop    ebp
    1f19:	00 00                	add    BYTE PTR [eax],al
    1f1b:	00 02                	add    BYTE PTR [edx],al
    1f1d:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    1f23:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    1f2a:	02 08                	add    cl,BYTE PTR [eax]
    1f2c:	05 00 00 00 00       	add    eax,0x0
    1f31:	02 01                	add    al,BYTE PTR [ecx]
    1f33:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    1f36:	00 00                	add    BYTE PTR [eax],al
    1f38:	02 02                	add    al,BYTE PTR [edx]
    1f3a:	07                   	pop    es
    1f3b:	0e                   	push   cs
    1f3c:	00 00                	add    BYTE PTR [eax],al
    1f3e:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    1f41:	00 00                	add    BYTE PTR [eax],al
    1f43:	00 02                	add    BYTE PTR [edx],al
    1f45:	34 61                	xor    al,0x61
    1f47:	00 00                	add    BYTE PTR [eax],al
    1f49:	00 02                	add    BYTE PTR [edx],al
    1f4b:	04 07                	add    al,0x7
    1f4d:	3e 00 00             	add    BYTE PTR ds:[eax],al
    1f50:	00 04 54             	add    BYTE PTR [esp+edx*2],al
    1f53:	07                   	pop    es
    1f54:	00 00                	add    BYTE PTR [eax],al
    1f56:	02 37                	add    dh,BYTE PTR [edi]
    1f58:	73 00                	jae    1f5a <sysEnter_Vector-0x12e0a6>
    1f5a:	00 00                	add    BYTE PTR [eax],al
    1f5c:	02 08                	add    cl,BYTE PTR [eax]
    1f5e:	07                   	pop    es
    1f5f:	34 00                	xor    al,0x0
    1f61:	00 00                	add    BYTE PTR [eax],al
    1f63:	04 94                	add    al,0x94
    1f65:	04 00                	add    al,0x0
    1f67:	00 03                	add    BYTE PTR [ebx],al
    1f69:	d8 61 00             	fsub   DWORD PTR [ecx+0x0]
    1f6c:	00 00                	add    BYTE PTR [eax],al
    1f6e:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    1f75:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    1f78:	9b                   	fwait
    1f79:	00 00                	add    BYTE PTR [eax],al
    1f7b:	00 05 04 99 00 00    	add    BYTE PTR ds:0x9904,al
    1f81:	00 06                	add    BYTE PTR [esi],al
    1f83:	25 00 00 00 02       	and    eax,0x2000000
    1f88:	01 02                	add    DWORD PTR [edx],eax
    1f8a:	95                   	xchg   ebp,eax
    1f8b:	00 00                	add    BYTE PTR [eax],al
    1f8d:	00 02                	add    BYTE PTR [edx],al
    1f8f:	04 07                	add    al,0x7
    1f91:	39 00                	cmp    DWORD PTR [eax],eax
    1f93:	00 00                	add    BYTE PTR [eax],al
    1f95:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    1f98:	e1 00                	loope  1f9a <sysEnter_Vector-0x12e066>
    1f9a:	00 00                	add    BYTE PTR [eax],al
    1f9c:	07                   	pop    es
    1f9d:	04 05                	add    al,0x5
    1f9f:	04 25                	add    al,0x25
    1fa1:	00 00                	add    BYTE PTR [eax],al
    1fa3:	00 08                	add    BYTE PTR [eax],cl
    1fa5:	2b 08                	sub    ecx,DWORD PTR [eax]
    1fa7:	00 00                	add    BYTE PTR [eax],al
    1fa9:	0c 04                	or     al,0x4
    1fab:	17                   	pop    ss
    1fac:	ec                   	in     al,dx
    1fad:	00 00                	add    BYTE PTR [eax],al
    1faf:	00 09                	add    BYTE PTR [ecx],cl
    1fb1:	6d                   	ins    DWORD PTR es:[edi],dx
    1fb2:	07                   	pop    es
    1fb3:	00 00                	add    BYTE PTR [eax],al
    1fb5:	04 19                	add    al,0x19
    1fb7:	ec                   	in     al,dx
    1fb8:	00 00                	add    BYTE PTR [eax],al
    1fba:	00 00                	add    BYTE PTR [eax],al
    1fbc:	09 b9 06 00 00 04    	or     DWORD PTR [ecx+0x4000006],edi
    1fc2:	19 ec                	sbb    esp,ebp
    1fc4:	00 00                	add    BYTE PTR [eax],al
    1fc6:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    1fc9:	23 08                	and    ecx,DWORD PTR [eax]
    1fcb:	00 00                	add    BYTE PTR [eax],al
    1fcd:	04 1a                	add    al,0x1a
    1fcf:	b3 00                	mov    bl,0x0
    1fd1:	00 00                	add    BYTE PTR [eax],al
    1fd3:	08 00                	or     BYTE PTR [eax],al
    1fd5:	05 04 bb 00 00       	add    eax,0xbb04
    1fda:	00 04 df             	add    BYTE PTR [edi+ebx*8],al
    1fdd:	07                   	pop    es
    1fde:	00 00                	add    BYTE PTR [eax],al
    1fe0:	04 1b                	add    al,0x1b
    1fe2:	bb 00 00 00 08       	mov    ebx,0x8000000
    1fe7:	8b 07                	mov    eax,DWORD PTR [edi]
    1fe9:	00 00                	add    BYTE PTR [eax],al
    1feb:	14 05                	adc    al,0x5
    1fed:	1b 2e                	sbb    ebp,DWORD PTR [esi]
    1fef:	01 00                	add    DWORD PTR [eax],eax
    1ff1:	00 09                	add    BYTE PTR [ecx],cl
    1ff3:	84 07                	test   BYTE PTR [edi],al
    1ff5:	00 00                	add    BYTE PTR [eax],al
    1ff7:	05 1d f2 00 00       	add    eax,0xf21d
    1ffc:	00 00                	add    BYTE PTR [eax],al
    1ffe:	09 4e 07             	or     DWORD PTR [esi+0x7],ecx
    2001:	00 00                	add    BYTE PTR [eax],al
    2003:	05 1e 61 00 00       	add    eax,0x611e
    2008:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    200b:	86 08                	xchg   BYTE PTR [eax],cl
    200d:	00 00                	add    BYTE PTR [eax],al
    200f:	05 1f 5f 01 00       	add    eax,0x15f1f
    2014:	00 10                	add    BYTE PTR [eax],dl
    2016:	00 08                	add    BYTE PTR [eax],cl
    2018:	bc 07 00 00 0c       	mov    esp,0xc000007
    201d:	05 37 5f 01 00       	add    eax,0x15f37
    2022:	00 09                	add    BYTE PTR [ecx],cl
    2024:	a9 07 00 00 05       	test   eax,0x5000007
    2029:	39 b5 00 00 00 00    	cmp    DWORD PTR [ebp+0x0],esi
    202f:	09 8d 08 00 00 05    	or     DWORD PTR [ebp+0x5000008],ecx
    2035:	3a 68 02             	cmp    ch,BYTE PTR [eax+0x2]
    2038:	00 00                	add    BYTE PTR [eax],al
    203a:	04 09                	add    al,0x9
    203c:	9e                   	sahf   
    203d:	08 00                	or     BYTE PTR [eax],al
    203f:	00 05 3b 5f 01 00    	add    BYTE PTR ds:0x15f3b,al
    2045:	00 08                	add    BYTE PTR [eax],cl
    2047:	00 05 04 2e 01 00    	add    BYTE PTR ds:0x12e04,al
    204d:	00 08                	add    BYTE PTR [eax],cl
    204f:	99                   	cdq    
    2050:	07                   	pop    es
    2051:	00 00                	add    BYTE PTR [eax],al
    2053:	0c 05                	or     al,0x5
    2055:	22 96 01 00 00 09    	and    dl,BYTE PTR [esi+0x9000001]
    205b:	3a 08                	cmp    cl,BYTE PTR [eax]
    205d:	00 00                	add    BYTE PTR [eax],al
    205f:	05 24 5f 01 00       	add    eax,0x15f24
    2064:	00 00                	add    BYTE PTR [eax],al
    2066:	09 7d 07             	or     DWORD PTR [ebp+0x7],edi
    2069:	00 00                	add    BYTE PTR [eax],al
    206b:	05 25 96 01 00       	add    eax,0x19625
    2070:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2073:	5d                   	pop    ebp
    2074:	07                   	pop    es
    2075:	00 00                	add    BYTE PTR [eax],al
    2077:	05 26 3a 00 00       	add    eax,0x3a26
    207c:	00 08                	add    BYTE PTR [eax],cl
    207e:	00 05 04 fd 00 00    	add    BYTE PTR ds:0xfd04,al
    2084:	00 08                	add    BYTE PTR [eax],cl
    2086:	8f 08                	(bad)  
    2088:	00 00                	add    BYTE PTR [eax],al
    208a:	24 05                	and    al,0x5
    208c:	29 09                	sub    DWORD PTR [ecx],ecx
    208e:	02 00                	add    al,BYTE PTR [eax]
    2090:	00 09                	add    BYTE PTR [ecx],cl
    2092:	1d 08 00 00 05       	sbb    eax,0x5000008
    2097:	2b 61 00             	sub    esp,DWORD PTR [ecx+0x0]
    209a:	00 00                	add    BYTE PTR [eax],al
    209c:	00 09                	add    BYTE PTR [ecx],cl
    209e:	5d                   	pop    ebp
    209f:	08 00                	or     BYTE PTR [eax],al
    20a1:	00 05 2c 4f 00 00    	add    BYTE PTR ds:0x4f2c,al
    20a7:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    20aa:	f9                   	stc    
    20ab:	07                   	pop    es
    20ac:	00 00                	add    BYTE PTR [eax],al
    20ae:	05 2d 4f 00 00       	add    eax,0x4f2d
    20b3:	00 06                	add    BYTE PTR [esi],al
    20b5:	09 57 08             	or     DWORD PTR [edi+0x8],edx
    20b8:	00 00                	add    BYTE PTR [eax],al
    20ba:	05 2e 61 00 00       	add    eax,0x612e
    20bf:	00 08                	add    BYTE PTR [eax],cl
    20c1:	09 d9                	or     ecx,ebx
    20c3:	07                   	pop    es
    20c4:	00 00                	add    BYTE PTR [eax],al
    20c6:	05 2f 61 00 00       	add    eax,0x612f
    20cb:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    20ce:	4f                   	dec    edi
    20cf:	08 00                	or     BYTE PTR [eax],al
    20d1:	00 05 30 61 00 00    	add    BYTE PTR ds:0x6130,al
    20d7:	00 10                	add    BYTE PTR [eax],dl
    20d9:	09 35 08 00 00 05    	or     DWORD PTR ds:0x5000008,esi
    20df:	31 52 02             	xor    DWORD PTR [edx+0x2],edx
    20e2:	00 00                	add    BYTE PTR [eax],al
    20e4:	14 09                	adc    al,0x9
    20e6:	97                   	xchg   edi,eax
    20e7:	07                   	pop    es
    20e8:	00 00                	add    BYTE PTR [eax],al
    20ea:	05 32 65 01 00       	add    eax,0x16532
    20ef:	00 18                	add    BYTE PTR [eax],bl
    20f1:	00 08                	add    BYTE PTR [eax],cl
    20f3:	e8 07 00 00 14       	call   140020ff <sysEnter_Vector+0x13ed20ff>
    20f8:	05 3e 52 02 00       	add    eax,0x2523e
    20fd:	00 09                	add    BYTE PTR [ecx],cl
    20ff:	b6 08                	mov    dh,0x8
    2101:	00 00                	add    BYTE PTR [eax],al
    2103:	05 40 82 02 00       	add    eax,0x28240
    2108:	00 00                	add    BYTE PTR [eax],al
    210a:	09 72 07             	or     DWORD PTR [edx+0x7],esi
    210d:	00 00                	add    BYTE PTR [eax],al
    210f:	05 41 82 02 00       	add    eax,0x28241
    2114:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    2117:	d3 07                	rol    DWORD PTR [edi],cl
    2119:	00 00                	add    BYTE PTR [eax],al
    211b:	05 42 82 02 00       	add    eax,0x28242
    2120:	00 08                	add    BYTE PTR [eax],cl
    2122:	09 67 07             	or     DWORD PTR [edi+0x7],esp
    2125:	00 00                	add    BYTE PTR [eax],al
    2127:	05 43 9c 02 00       	add    eax,0x29c43
    212c:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    212f:	a2 07 00 00 05       	mov    ds:0x5000007,al
    2134:	44                   	inc    esp
    2135:	c5 02                	lds    eax,FWORD PTR [edx]
    2137:	00 00                	add    BYTE PTR [eax],al
    2139:	10 00                	adc    BYTE PTR [eax],al
    213b:	05 04 58 02 00       	add    eax,0x25804
    2140:	00 06                	add    BYTE PTR [esi],al
    2142:	09 02                	or     DWORD PTR [edx],eax
    2144:	00 00                	add    BYTE PTR [eax],al
    2146:	04 71                	add    al,0x71
    2148:	08 00                	or     BYTE PTR [eax],al
    214a:	00 05 35 9c 01 00    	add    BYTE PTR ds:0x19c35,al
    2150:	00 05 04 9c 01 00    	add    BYTE PTR ds:0x19c04,al
    2156:	00 0a                	add    BYTE PTR [edx],cl
    2158:	3a 00                	cmp    al,BYTE PTR [eax]
    215a:	00 00                	add    BYTE PTR [eax],al
    215c:	82                   	(bad)  
    215d:	02 00                	add    al,BYTE PTR [eax]
    215f:	00 0b                	add    BYTE PTR [ebx],cl
    2161:	68 02 00 00 0b       	push   0xb000002
    2166:	5f                   	pop    edi
    2167:	01 00                	add    DWORD PTR [eax],eax
    2169:	00 00                	add    BYTE PTR [eax],al
    216b:	05 04 6e 02 00       	add    eax,0x26e04
    2170:	00 0a                	add    BYTE PTR [edx],cl
    2172:	3a 00                	cmp    al,BYTE PTR [eax]
    2174:	00 00                	add    BYTE PTR [eax],al
    2176:	9c                   	pushf  
    2177:	02 00                	add    al,BYTE PTR [eax]
    2179:	00 0b                	add    BYTE PTR [ebx],cl
    217b:	68 02 00 00 0b       	push   0xb000002
    2180:	2e 01 00             	add    DWORD PTR cs:[eax],eax
    2183:	00 00                	add    BYTE PTR [eax],al
    2185:	05 04 88 02 00       	add    eax,0x28804
    218a:	00 0a                	add    BYTE PTR [edx],cl
    218c:	3a 00                	cmp    al,BYTE PTR [eax]
    218e:	00 00                	add    BYTE PTR [eax],al
    2190:	c5 02                	lds    eax,FWORD PTR [edx]
    2192:	00 00                	add    BYTE PTR [eax],al
    2194:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    2197:	00 00                	add    BYTE PTR [eax],al
    2199:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    219c:	00 00                	add    BYTE PTR [eax],al
    219e:	0b 68 02             	or     ebp,DWORD PTR [eax+0x2]
    21a1:	00 00                	add    BYTE PTR [eax],al
    21a3:	0b 5f 01             	or     ebx,DWORD PTR [edi+0x1]
    21a6:	00 00                	add    BYTE PTR [eax],al
    21a8:	0b 61 00             	or     esp,DWORD PTR [ecx+0x0]
    21ab:	00 00                	add    BYTE PTR [eax],al
    21ad:	00 05 04 a2 02 00    	add    BYTE PTR ds:0x2a204,al
    21b3:	00 04 48             	add    BYTE PTR [eax+ecx*2],al
    21b6:	08 00                	or     BYTE PTR [eax],al
    21b8:	00 05 47 d6 02 00    	add    BYTE PTR ds:0x2d647,al
    21be:	00 08                	add    BYTE PTR [eax],cl
    21c0:	81 08 00 00 10 05    	or     DWORD PTR [eax],0x5100000
    21c6:	4f                   	dec    edi
    21c7:	07                   	pop    es
    21c8:	03 00                	add    eax,DWORD PTR [eax]
    21ca:	00 09                	add    BYTE PTR [ecx],cl
    21cc:	af                   	scas   eax,DWORD PTR es:[edi]
    21cd:	08 00                	or     BYTE PTR [eax],al
    21cf:	00 05 51 b5 00 00    	add    BYTE PTR ds:0xb551,al
    21d5:	00 00                	add    BYTE PTR [eax],al
    21d7:	09 a7 08 00 00 05    	or     DWORD PTR [edi+0x5000008],esp
    21dd:	52                   	push   edx
    21de:	68 02 00 00 04       	push   0x4000002
    21e3:	09 43 08             	or     DWORD PTR [ebx+0x8],eax
    21e6:	00 00                	add    BYTE PTR [eax],al
    21e8:	05 53 07 03 00       	add    eax,0x30753
    21ed:	00 08                	add    BYTE PTR [eax],cl
    21ef:	00 08                	add    BYTE PTR [eax],cl
    21f1:	c3                   	ret    
    21f2:	07                   	pop    es
    21f3:	00 00                	add    BYTE PTR [eax],al
    21f5:	08 05 49 2c 03 00    	or     BYTE PTR ds:0x32c49,al
    21fb:	00 09                	add    BYTE PTR [ecx],cl
    21fd:	18 03                	sbb    BYTE PTR [ebx],al
    21ff:	00 00                	add    BYTE PTR [eax],al
    2201:	05 4b 56 03 00       	add    eax,0x3564b
    2206:	00 00                	add    BYTE PTR [eax],al
    2208:	09 60 02             	or     DWORD PTR [eax+0x2],esp
    220b:	00 00                	add    BYTE PTR [eax],al
    220d:	05 4c 7a 03 00       	add    eax,0x37a4c
    2212:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2215:	0a 7a 00             	or     bh,BYTE PTR [edx+0x0]
    2218:	00 00                	add    BYTE PTR [eax],al
    221a:	4a                   	dec    edx
    221b:	03 00                	add    eax,DWORD PTR [eax]
    221d:	00 0b                	add    BYTE PTR [ebx],cl
    221f:	4a                   	dec    edx
    2220:	03 00                	add    eax,DWORD PTR [eax]
    2222:	00 0b                	add    BYTE PTR [ebx],cl
    2224:	b5 00                	mov    ch,0x0
    2226:	00 00                	add    BYTE PTR [eax],al
    2228:	0b 7a 00             	or     edi,DWORD PTR [edx+0x0]
    222b:	00 00                	add    BYTE PTR [eax],al
    222d:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2230:	00 00                	add    BYTE PTR [eax],al
    2232:	00 05 04 d6 02 00    	add    BYTE PTR ds:0x2d604,al
    2238:	00 05 04 68 00 00    	add    BYTE PTR ds:0x6804,al
    223e:	00 05 04 2c 03 00    	add    BYTE PTR ds:0x32c04,al
    2244:	00 0a                	add    BYTE PTR [edx],cl
    2246:	7a 00                	jp     2248 <sysEnter_Vector-0x12ddb8>
    2248:	00 00                	add    BYTE PTR [eax],al
    224a:	7a 03                	jp     224f <sysEnter_Vector-0x12ddb1>
    224c:	00 00                	add    BYTE PTR [eax],al
    224e:	0b 4a 03             	or     ecx,DWORD PTR [edx+0x3]
    2251:	00 00                	add    BYTE PTR [eax],al
    2253:	0b 93 00 00 00 0b    	or     edx,DWORD PTR [ebx+0xb000000]
    2259:	7a 00                	jp     225b <sysEnter_Vector-0x12dda5>
    225b:	00 00                	add    BYTE PTR [eax],al
    225d:	0b 50 03             	or     edx,DWORD PTR [eax+0x3]
    2260:	00 00                	add    BYTE PTR [eax],al
    2262:	00 05 04 5c 03 00    	add    BYTE PTR ds:0x35c04,al
    2268:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    226b:	08 00                	or     BYTE PTR [eax],al
    226d:	00 05 4d 07 03 00    	add    BYTE PTR ds:0x3074d,al
    2273:	00 0c 95 08 00 00 01 	add    BYTE PTR [edx*4+0x1000008],cl
    227a:	43                   	inc    ebx
    227b:	cc                   	int3   
    227c:	14 00                	adc    al,0x0
    227e:	30 84 00 00 00 01 9c 	xor    BYTE PTR [eax+eax*1-0x63ff0000],al
    2285:	bd 03 00 00 0d       	mov    ebp,0xd000003
    228a:	78 07                	js     2293 <sysEnter_Vector-0x12dd6d>
    228c:	00 00                	add    BYTE PTR [eax],al
    228e:	01 45 bd             	add    DWORD PTR [ebp-0x43],eax
    2291:	03 00                	add    eax,DWORD PTR [eax]
    2293:	00 02                	add    BYTE PTR [edx],al
    2295:	91                   	xchg   ecx,eax
    2296:	67 0d 15 08 00 00    	addr16 or eax,0x815
    229c:	01 46 3a             	add    DWORD PTR [esi+0x3a],eax
    229f:	00 00                	add    BYTE PTR [eax],al
    22a1:	00 02                	add    BYTE PTR [edx],al
    22a3:	91                   	xchg   ecx,eax
    22a4:	6c                   	ins    BYTE PTR es:[edi],dx
    22a5:	00 0e                	add    BYTE PTR [esi],cl
    22a7:	25 00 00 00 cd       	and    eax,0xcd000000
    22ac:	03 00                	add    eax,DWORD PTR [eax]
    22ae:	00 0f                	add    BYTE PTR [edi],cl
    22b0:	ac                   	lods   al,BYTE PTR ds:[esi]
    22b1:	00 00                	add    BYTE PTR [eax],al
    22b3:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    22b6:	10 4b 00             	adc    BYTE PTR [ebx+0x0],cl
    22b9:	00 00                	add    BYTE PTR [eax],al
    22bb:	06                   	push   es
    22bc:	34 56                	xor    al,0x56
    22be:	00 00                	add    BYTE PTR [eax],al
    22c0:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    22c6:	30 10                	xor    BYTE PTR [eax],dl
    22c8:	af                   	scas   eax,DWORD PTR es:[edi]
    22c9:	00 00                	add    BYTE PTR [eax],al
    22cb:	00 06                	add    BYTE PTR [esi],al
    22cd:	35 56 00 00 00       	xor    eax,0x56
    22d2:	05 03 e0 44 00       	add    eax,0x44e003
    22d7:	30 10                	xor    BYTE PTR [eax],dl
    22d9:	5b                   	pop    ebx
    22da:	01 00                	add    DWORD PTR [eax],eax
    22dc:	00 06                	add    BYTE PTR [esi],al
    22de:	36                   	ss
    22df:	56                   	push   esi
    22e0:	00 00                	add    BYTE PTR [eax],al
    22e2:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    22e8:	30 10                	xor    BYTE PTR [eax],dl
    22ea:	54                   	push   esp
    22eb:	00 00                	add    BYTE PTR [eax],al
    22ed:	00 06                	add    BYTE PTR [esi],al
    22ef:	37                   	aaa    
    22f0:	56                   	push   esi
    22f1:	00 00                	add    BYTE PTR [eax],al
    22f3:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    22f9:	30 10                	xor    BYTE PTR [eax],dl
    22fb:	28 00                	sub    BYTE PTR [eax],al
    22fd:	00 00                	add    BYTE PTR [eax],al
    22ff:	07                   	pop    es
    2300:	46                   	inc    esi
    2301:	22 04 00             	and    al,BYTE PTR [eax+eax*1]
    2304:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    230a:	30 05 04 b5 00 00    	xor    BYTE PTR ds:0xb504,al
    2310:	00 10                	add    BYTE PTR [eax],dl
    2312:	43                   	inc    ebx
    2313:	08 00                	or     BYTE PTR [eax],al
    2315:	00 01                	add    BYTE PTR [ecx],al
    2317:	0e                   	push   cs
    2318:	80 03 00             	add    BYTE PTR [ebx],0x0
    231b:	00 05 03 f4 44 00    	add    BYTE PTR ds:0x44f403,al
    2321:	30 10                	xor    BYTE PTR [eax],dl
    2323:	64 08 00             	or     BYTE PTR fs:[eax],al
    2326:	00 01                	add    BYTE PTR [ecx],al
    2328:	0f 5d 02             	minps  xmm0,XMMWORD PTR [edx]
    232b:	00 00                	add    BYTE PTR [eax],al
    232d:	05 03 40 43 00       	add    eax,0x434003
    2332:	30 10                	xor    BYTE PTR [eax],dl
    2334:	79 08                	jns    233e <sysEnter_Vector-0x12dcc2>
    2336:	00 00                	add    BYTE PTR [eax],al
    2338:	01 10                	add    DWORD PTR [eax],edx
    233a:	cb                   	retf   
    233b:	02 00                	add    al,BYTE PTR [eax]
    233d:	00 05 03 fc 44 00    	add    BYTE PTR ds:0x44fc03,al
    2343:	30 00                	xor    BYTE PTR [eax],al
    2345:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2346:	01 00                	add    DWORD PTR [eax],eax
    2348:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    234b:	6c                   	ins    BYTE PTR es:[edi],dx
    234c:	0b 00                	or     eax,DWORD PTR [eax]
    234e:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2351:	f4                   	hlt    
    2352:	00 00                	add    BYTE PTR [eax],al
    2354:	00 0c d8             	add    BYTE PTR [eax+ebx*8],cl
    2357:	08 00                	or     BYTE PTR [eax],al
    2359:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    235c:	00 00                	add    BYTE PTR [eax],al
    235e:	50                   	push   eax
    235f:	15 00 30 eb 00       	adc    eax,0xeb3000
    2364:	00 00                	add    BYTE PTR [eax],al
    2366:	60                   	pusha  
    2367:	0e                   	push   cs
    2368:	00 00                	add    BYTE PTR [eax],al
    236a:	02 01                	add    al,BYTE PTR [ecx]
    236c:	06                   	push   es
    236d:	64 00 00             	add    BYTE PTR fs:[eax],al
    2370:	00 02                	add    BYTE PTR [edx],al
    2372:	01 06                	add    DWORD PTR [esi],eax
    2374:	5d                   	pop    ebp
    2375:	00 00                	add    BYTE PTR [eax],al
    2377:	00 02                	add    BYTE PTR [edx],al
    2379:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    237f:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2386:	02 08                	add    cl,BYTE PTR [eax]
    2388:	05 00 00 00 00       	add    eax,0x0
    238d:	02 01                	add    al,BYTE PTR [ecx]
    238f:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2392:	00 00                	add    BYTE PTR [eax],al
    2394:	02 02                	add    al,BYTE PTR [edx]
    2396:	07                   	pop    es
    2397:	0e                   	push   cs
    2398:	00 00                	add    BYTE PTR [eax],al
    239a:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    239d:	00 00                	add    BYTE PTR [eax],al
    239f:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    23a2:	61                   	popa   
    23a3:	00 00                	add    BYTE PTR [eax],al
    23a5:	00 02                	add    BYTE PTR [edx],al
    23a7:	04 07                	add    al,0x7
    23a9:	3e 00 00             	add    BYTE PTR ds:[eax],al
    23ac:	00 02                	add    BYTE PTR [edx],al
    23ae:	08 07                	or     BYTE PTR [edi],al
    23b0:	34 00                	xor    al,0x0
    23b2:	00 00                	add    BYTE PTR [eax],al
    23b4:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    23bb:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    23be:	9b                   	fwait
    23bf:	00 00                	add    BYTE PTR [eax],al
    23c1:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    23c7:	00 06                	add    BYTE PTR [esi],al
    23c9:	25 00 00 00 02       	and    eax,0x2000000
    23ce:	01 02                	add    DWORD PTR [edx],eax
    23d0:	95                   	xchg   ebp,eax
    23d1:	00 00                	add    BYTE PTR [eax],al
    23d3:	00 02                	add    BYTE PTR [edx],al
    23d5:	04 07                	add    al,0x7
    23d7:	39 00                	cmp    DWORD PTR [eax],eax
    23d9:	00 00                	add    BYTE PTR [eax],al
    23db:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    23de:	e1 00                	loope  23e0 <sysEnter_Vector-0x12dc20>
    23e0:	00 00                	add    BYTE PTR [eax],al
    23e2:	05 04 25 00 00       	add    eax,0x2504
    23e7:	00 07                	add    BYTE PTR [edi],al
    23e9:	d1 08                	ror    DWORD PTR [eax],1
    23eb:	00 00                	add    BYTE PTR [eax],al
    23ed:	01 1d 9d 00 00 00    	add    DWORD PTR ds:0x9d,ebx
    23f3:	50                   	push   eax
    23f4:	15 00 30 3e 00       	adc    eax,0x3e3000
    23f9:	00 00                	add    BYTE PTR [eax],al
    23fb:	01 9c d9 00 00 00 08 	add    DWORD PTR [ecx+ebx*8+0x8000000],ebx
    2402:	d5 06                	aad    0x6
    2404:	00 00                	add    BYTE PTR [eax],al
    2406:	01 1d 9d 00 00 00    	add    DWORD PTR ds:0x9d,ebx
    240c:	02 91 00 09 73 72    	add    dl,BYTE PTR [ecx+0x72730900]
    2412:	63 00                	arpl   WORD PTR [eax],ax
    2414:	01 1d 7d 00 00 00    	add    DWORD PTR ds:0x7d,ebx
    241a:	02 91 04 00 07 c9    	add    dl,BYTE PTR [ecx-0x36f8fffc]
    2420:	08 00                	or     BYTE PTR [eax],al
    2422:	00 01                	add    BYTE PTR [ecx],al
    2424:	23 9d 00 00 00 8e    	and    ebx,DWORD PTR [ebp-0x72000000]
    242a:	15 00 30 3e 00       	adc    eax,0x3e3000
    242f:	00 00                	add    BYTE PTR [eax],al
    2431:	01 9c 0f 01 00 00 08 	add    DWORD PTR [edi+ecx*1+0x8000001],ebx
    2438:	d5 06                	aad    0x6
    243a:	00 00                	add    BYTE PTR [eax],al
    243c:	01 23                	add    DWORD PTR [ebx],esp
    243e:	9d                   	popf   
    243f:	00 00                	add    BYTE PTR [eax],al
    2441:	00 02                	add    BYTE PTR [edx],al
    2443:	91                   	xchg   ecx,eax
    2444:	00 09                	add    BYTE PTR [ecx],cl
    2446:	73 72                	jae    24ba <sysEnter_Vector-0x12db46>
    2448:	63 00                	arpl   WORD PTR [eax],ax
    244a:	01 23                	add    DWORD PTR [ebx],esp
    244c:	7d 00                	jge    244e <sysEnter_Vector-0x12dbb2>
    244e:	00 00                	add    BYTE PTR [eax],al
    2450:	02 91 04 00 0a bd    	add    dl,BYTE PTR [ecx-0x42f5fffc]
    2456:	08 00                	or     BYTE PTR [eax],al
    2458:	00 01                	add    BYTE PTR [ecx],al
    245a:	29 cc                	sub    esp,ecx
    245c:	15 00 30 6f 00       	adc    eax,0x6f3000
    2461:	00 00                	add    BYTE PTR [eax],al
    2463:	01 9c 55 01 00 00 09 	add    DWORD PTR [ebp+edx*2+0x9000001],ebx
    246a:	70 00                	jo     246c <sysEnter_Vector-0x12db94>
    246c:	01 29                	add    DWORD PTR [ecx],ebp
    246e:	9d                   	popf   
    246f:	00 00                	add    BYTE PTR [eax],al
    2471:	00 02                	add    BYTE PTR [edx],al
    2473:	91                   	xchg   ecx,eax
    2474:	00 09                	add    BYTE PTR [ecx],cl
    2476:	71 00                	jno    2478 <sysEnter_Vector-0x12db88>
    2478:	01 29                	add    DWORD PTR [ecx],ebp
    247a:	9d                   	popf   
    247b:	00 00                	add    BYTE PTR [eax],al
    247d:	00 02                	add    BYTE PTR [edx],al
    247f:	91                   	xchg   ecx,eax
    2480:	04 0b                	add    al,0xb
    2482:	63 00                	arpl   WORD PTR [eax],ax
    2484:	01 2a                	add    DWORD PTR [edx],ebp
    2486:	3a 00                	cmp    al,BYTE PTR [eax]
    2488:	00 00                	add    BYTE PTR [eax],al
    248a:	02 91 74 0b 64 00    	add    dl,BYTE PTR [ecx+0x640b74]
    2490:	01 2a                	add    DWORD PTR [edx],ebp
    2492:	3a 00                	cmp    al,BYTE PTR [eax]
    2494:	00 00                	add    BYTE PTR [eax],al
    2496:	02 91 70 00 0c 4b    	add    dl,BYTE PTR [ecx+0x4b0c0070]
    249c:	00 00                	add    BYTE PTR [eax],al
    249e:	00 02                	add    BYTE PTR [edx],al
    24a0:	34 56                	xor    al,0x56
    24a2:	00 00                	add    BYTE PTR [eax],al
    24a4:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    24aa:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    24ad:	00 00                	add    BYTE PTR [eax],al
    24af:	00 02                	add    BYTE PTR [edx],al
    24b1:	35 56 00 00 00       	xor    eax,0x56
    24b6:	05 03 e0 44 00       	add    eax,0x44e003
    24bb:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    24be:	01 00                	add    DWORD PTR [eax],eax
    24c0:	00 02                	add    BYTE PTR [edx],al
    24c2:	36                   	ss
    24c3:	56                   	push   esi
    24c4:	00 00                	add    BYTE PTR [eax],al
    24c6:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    24cc:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    24cf:	00 00                	add    BYTE PTR [eax],al
    24d1:	00 02                	add    BYTE PTR [edx],al
    24d3:	37                   	aaa    
    24d4:	56                   	push   esi
    24d5:	00 00                	add    BYTE PTR [eax],al
    24d7:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    24dd:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    24e0:	00 00                	add    BYTE PTR [eax],al
    24e2:	00 03                	add    BYTE PTR [ebx],al
    24e4:	46                   	inc    esi
    24e5:	aa                   	stos   BYTE PTR es:[edi],al
    24e6:	01 00                	add    DWORD PTR [eax],eax
    24e8:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    24ee:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    24f4:	00 00                	add    BYTE PTR [eax],al
    24f6:	6c                   	ins    BYTE PTR es:[edi],dx
    24f7:	01 00                	add    DWORD PTR [eax],eax
    24f9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    24fc:	27                   	daa    
    24fd:	0c 00                	or     al,0x0
    24ff:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2502:	f4                   	hlt    
    2503:	00 00                	add    BYTE PTR [eax],al
    2505:	00 0c f4             	add    BYTE PTR [esp+esi*8],cl
    2508:	08 00                	or     BYTE PTR [eax],al
    250a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    250d:	00 00                	add    BYTE PTR [eax],al
    250f:	3c 16                	cmp    al,0x16
    2511:	00 30                	add    BYTE PTR [eax],dh
    2513:	5e                   	pop    esi
    2514:	00 00                	add    BYTE PTR [eax],al
    2516:	00 30                	add    BYTE PTR [eax],dh
    2518:	0f 00 00             	sldt   WORD PTR [eax]
    251b:	02 01                	add    al,BYTE PTR [ecx]
    251d:	06                   	push   es
    251e:	64 00 00             	add    BYTE PTR fs:[eax],al
    2521:	00 02                	add    BYTE PTR [edx],al
    2523:	01 06                	add    DWORD PTR [esi],eax
    2525:	5d                   	pop    ebp
    2526:	00 00                	add    BYTE PTR [eax],al
    2528:	00 02                	add    BYTE PTR [edx],al
    252a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2530:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2537:	02 08                	add    cl,BYTE PTR [eax]
    2539:	05 00 00 00 00       	add    eax,0x0
    253e:	02 01                	add    al,BYTE PTR [ecx]
    2540:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2543:	00 00                	add    BYTE PTR [eax],al
    2545:	02 02                	add    al,BYTE PTR [edx]
    2547:	07                   	pop    es
    2548:	0e                   	push   cs
    2549:	00 00                	add    BYTE PTR [eax],al
    254b:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    254e:	00 00                	add    BYTE PTR [eax],al
    2550:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2553:	61                   	popa   
    2554:	00 00                	add    BYTE PTR [eax],al
    2556:	00 02                	add    BYTE PTR [edx],al
    2558:	04 07                	add    al,0x7
    255a:	3e 00 00             	add    BYTE PTR ds:[eax],al
    255d:	00 02                	add    BYTE PTR [edx],al
    255f:	08 07                	or     BYTE PTR [edi],al
    2561:	34 00                	xor    al,0x0
    2563:	00 00                	add    BYTE PTR [eax],al
    2565:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    256c:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    256f:	9b                   	fwait
    2570:	00 00                	add    BYTE PTR [eax],al
    2572:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2578:	00 06                	add    BYTE PTR [esi],al
    257a:	25 00 00 00 02       	and    eax,0x2000000
    257f:	01 02                	add    DWORD PTR [edx],eax
    2581:	95                   	xchg   ebp,eax
    2582:	00 00                	add    BYTE PTR [eax],al
    2584:	00 02                	add    BYTE PTR [edx],al
    2586:	04 07                	add    al,0x7
    2588:	39 00                	cmp    DWORD PTR [eax],eax
    258a:	00 00                	add    BYTE PTR [eax],al
    258c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    258f:	e1 00                	loope  2591 <sysEnter_Vector-0x12da6f>
    2591:	00 00                	add    BYTE PTR [eax],al
    2593:	05 04 25 00 00       	add    eax,0x2504
    2598:	00 07                	add    BYTE PTR [edi],al
    259a:	ed                   	in     eax,dx
    259b:	08 00                	or     BYTE PTR [eax],al
    259d:	00 01                	add    BYTE PTR [ecx],al
    259f:	18 3a                	sbb    BYTE PTR [edx],bh
    25a1:	00 00                	add    BYTE PTR [eax],al
    25a3:	00 3c 16             	add    BYTE PTR [esi+edx*1],bh
    25a6:	00 30                	add    BYTE PTR [eax],dh
    25a8:	5e                   	pop    esi
    25a9:	00 00                	add    BYTE PTR [eax],al
    25ab:	00 01                	add    BYTE PTR [ecx],al
    25ad:	9c                   	pushf  
    25ae:	09 01                	or     DWORD PTR [ecx],eax
    25b0:	00 00                	add    BYTE PTR [eax],al
    25b2:	08 70 31             	or     BYTE PTR [eax+0x31],dh
    25b5:	00 01                	add    BYTE PTR [ecx],al
    25b7:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    25ba:	00 00                	add    BYTE PTR [eax],al
    25bc:	02 91 00 08 70 32    	add    dl,BYTE PTR [ecx+0x32700800]
    25c2:	00 01                	add    BYTE PTR [ecx],al
    25c4:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    25c7:	00 00                	add    BYTE PTR [eax],al
    25c9:	02 91 04 09 73 31    	add    dl,BYTE PTR [ecx+0x31730904]
    25cf:	00 01                	add    BYTE PTR [ecx],al
    25d1:	1a 09                	sbb    cl,BYTE PTR [ecx]
    25d3:	01 00                	add    DWORD PTR [eax],eax
    25d5:	00 01                	add    BYTE PTR [ecx],al
    25d7:	53                   	push   ebx
    25d8:	09 73 32             	or     DWORD PTR [ebx+0x32],esi
    25db:	00 01                	add    BYTE PTR [ecx],al
    25dd:	1b 09                	sbb    ecx,DWORD PTR [ecx]
    25df:	01 00                	add    DWORD PTR [eax],eax
    25e1:	00 01                	add    BYTE PTR [ecx],al
    25e3:	56                   	push   esi
    25e4:	09 63 31             	or     DWORD PTR [ebx+0x31],esp
    25e7:	00 01                	add    BYTE PTR [ecx],al
    25e9:	1c 48                	sbb    al,0x48
    25eb:	00 00                	add    BYTE PTR [eax],al
    25ed:	00 02                	add    BYTE PTR [edx],al
    25ef:	91                   	xchg   ecx,eax
    25f0:	6f                   	outs   dx,DWORD PTR ds:[esi]
    25f1:	09 63 32             	or     DWORD PTR [ebx+0x32],esp
    25f4:	00 01                	add    BYTE PTR [ecx],al
    25f6:	1c 48                	sbb    al,0x48
    25f8:	00 00                	add    BYTE PTR [eax],al
    25fa:	00 02                	add    BYTE PTR [edx],al
    25fc:	91                   	xchg   ecx,eax
    25fd:	6e                   	outs   dx,BYTE PTR ds:[esi]
    25fe:	00 05 04 0f 01 00    	add    BYTE PTR ds:0x10f04,al
    2604:	00 06                	add    BYTE PTR [esi],al
    2606:	48                   	dec    eax
    2607:	00 00                	add    BYTE PTR [eax],al
    2609:	00 0a                	add    BYTE PTR [edx],cl
    260b:	4b                   	dec    ebx
    260c:	00 00                	add    BYTE PTR [eax],al
    260e:	00 02                	add    BYTE PTR [edx],al
    2610:	34 56                	xor    al,0x56
    2612:	00 00                	add    BYTE PTR [eax],al
    2614:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    261a:	30 0a                	xor    BYTE PTR [edx],cl
    261c:	af                   	scas   eax,DWORD PTR es:[edi]
    261d:	00 00                	add    BYTE PTR [eax],al
    261f:	00 02                	add    BYTE PTR [edx],al
    2621:	35 56 00 00 00       	xor    eax,0x56
    2626:	05 03 e0 44 00       	add    eax,0x44e003
    262b:	30 0a                	xor    BYTE PTR [edx],cl
    262d:	5b                   	pop    ebx
    262e:	01 00                	add    DWORD PTR [eax],eax
    2630:	00 02                	add    BYTE PTR [edx],al
    2632:	36                   	ss
    2633:	56                   	push   esi
    2634:	00 00                	add    BYTE PTR [eax],al
    2636:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    263c:	30 0a                	xor    BYTE PTR [edx],cl
    263e:	54                   	push   esp
    263f:	00 00                	add    BYTE PTR [eax],al
    2641:	00 02                	add    BYTE PTR [edx],al
    2643:	37                   	aaa    
    2644:	56                   	push   esi
    2645:	00 00                	add    BYTE PTR [eax],al
    2647:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    264d:	30 0a                	xor    BYTE PTR [edx],cl
    264f:	28 00                	sub    BYTE PTR [eax],al
    2651:	00 00                	add    BYTE PTR [eax],al
    2653:	03 46 69             	add    eax,DWORD PTR [esi+0x69]
    2656:	01 00                	add    DWORD PTR [eax],eax
    2658:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    265e:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2664:	00 00                	add    BYTE PTR [eax],al
    2666:	c9                   	leave  
    2667:	01 00                	add    DWORD PTR [eax],eax
    2669:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    266c:	b9 0c 00 00 04       	mov    ecx,0x400000c
    2671:	01 f4                	add    esp,esi
    2673:	00 00                	add    BYTE PTR [eax],al
    2675:	00 0c 26             	add    BYTE PTR [esi+eiz*1],cl
    2678:	09 00                	or     DWORD PTR [eax],eax
    267a:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    267d:	00 00                	add    BYTE PTR [eax],al
    267f:	9c                   	pushf  
    2680:	16                   	push   ss
    2681:	00 30                	add    BYTE PTR [eax],dh
    2683:	c7 00 00 00 ef 0f    	mov    DWORD PTR [eax],0xfef0000
    2689:	00 00                	add    BYTE PTR [eax],al
    268b:	02 01                	add    al,BYTE PTR [ecx]
    268d:	06                   	push   es
    268e:	64 00 00             	add    BYTE PTR fs:[eax],al
    2691:	00 02                	add    BYTE PTR [edx],al
    2693:	01 06                	add    DWORD PTR [esi],eax
    2695:	5d                   	pop    ebp
    2696:	00 00                	add    BYTE PTR [eax],al
    2698:	00 02                	add    BYTE PTR [edx],al
    269a:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    26a0:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    26a7:	02 08                	add    cl,BYTE PTR [eax]
    26a9:	05 00 00 00 00       	add    eax,0x0
    26ae:	02 01                	add    al,BYTE PTR [ecx]
    26b0:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    26b3:	00 00                	add    BYTE PTR [eax],al
    26b5:	02 02                	add    al,BYTE PTR [edx]
    26b7:	07                   	pop    es
    26b8:	0e                   	push   cs
    26b9:	00 00                	add    BYTE PTR [eax],al
    26bb:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    26be:	00 00                	add    BYTE PTR [eax],al
    26c0:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    26c3:	61                   	popa   
    26c4:	00 00                	add    BYTE PTR [eax],al
    26c6:	00 02                	add    BYTE PTR [edx],al
    26c8:	04 07                	add    al,0x7
    26ca:	3e 00 00             	add    BYTE PTR ds:[eax],al
    26cd:	00 02                	add    BYTE PTR [edx],al
    26cf:	08 07                	or     BYTE PTR [edi],al
    26d1:	34 00                	xor    al,0x0
    26d3:	00 00                	add    BYTE PTR [eax],al
    26d5:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    26dc:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    26df:	9b                   	fwait
    26e0:	00 00                	add    BYTE PTR [eax],al
    26e2:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    26e8:	00 06                	add    BYTE PTR [esi],al
    26ea:	25 00 00 00 02       	and    eax,0x2000000
    26ef:	01 02                	add    DWORD PTR [edx],eax
    26f1:	95                   	xchg   ebp,eax
    26f2:	00 00                	add    BYTE PTR [eax],al
    26f4:	00 02                	add    BYTE PTR [edx],al
    26f6:	04 07                	add    al,0x7
    26f8:	39 00                	cmp    DWORD PTR [eax],eax
    26fa:	00 00                	add    BYTE PTR [eax],al
    26fc:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    26ff:	e1 00                	loope  2701 <sysEnter_Vector-0x12d8ff>
    2701:	00 00                	add    BYTE PTR [eax],al
    2703:	05 04 25 00 00       	add    eax,0x2504
    2708:	00 07                	add    BYTE PTR [edi],al
    270a:	09 09                	or     DWORD PTR [ecx],ecx
    270c:	00 00                	add    BYTE PTR [eax],al
    270e:	01 04 9d 00 00 00 9c 	add    DWORD PTR [ebx*4-0x64000000],eax
    2715:	16                   	push   ss
    2716:	00 30                	add    BYTE PTR [eax],dh
    2718:	40                   	inc    eax
    2719:	00 00                	add    BYTE PTR [eax],al
    271b:	00 01                	add    BYTE PTR [ecx],al
    271d:	9c                   	pushf  
    271e:	e3 00                	jecxz  2720 <sysEnter_Vector-0x12d8e0>
    2720:	00 00                	add    BYTE PTR [eax],al
    2722:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2725:	00 01                	add    BYTE PTR [ecx],al
    2727:	04 9d                	add    al,0x9d
    2729:	00 00                	add    BYTE PTR [eax],al
    272b:	00 02                	add    BYTE PTR [edx],al
    272d:	91                   	xchg   ecx,eax
    272e:	00 08                	add    BYTE PTR [eax],cl
    2730:	73 32                	jae    2764 <sysEnter_Vector-0x12d89c>
    2732:	00 01                	add    BYTE PTR [ecx],al
    2734:	04 7d                	add    al,0x7d
    2736:	00 00                	add    BYTE PTR [eax],al
    2738:	00 02                	add    BYTE PTR [edx],al
    273a:	91                   	xchg   ecx,eax
    273b:	04 09                	add    al,0x9
    273d:	73 00                	jae    273f <sysEnter_Vector-0x12d8c1>
    273f:	01 06                	add    DWORD PTR [esi],eax
    2741:	9d                   	popf   
    2742:	00 00                	add    BYTE PTR [eax],al
    2744:	00 02                	add    BYTE PTR [edx],al
    2746:	91                   	xchg   ecx,eax
    2747:	74 00                	je     2749 <sysEnter_Vector-0x12d8b7>
    2749:	07                   	pop    es
    274a:	1e                   	push   ds
    274b:	09 00                	or     DWORD PTR [eax],eax
    274d:	00 01                	add    BYTE PTR [ecx],al
    274f:	0e                   	push   cs
    2750:	9d                   	popf   
    2751:	00 00                	add    BYTE PTR [eax],al
    2753:	00 dc                	add    ah,bl
    2755:	16                   	push   ss
    2756:	00 30                	add    BYTE PTR [eax],dh
    2758:	40                   	inc    eax
    2759:	00 00                	add    BYTE PTR [eax],al
    275b:	00 01                	add    BYTE PTR [ecx],al
    275d:	9c                   	pushf  
    275e:	23 01                	and    eax,DWORD PTR [ecx]
    2760:	00 00                	add    BYTE PTR [eax],al
    2762:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    2765:	00 01                	add    BYTE PTR [ecx],al
    2767:	0e                   	push   cs
    2768:	9d                   	popf   
    2769:	00 00                	add    BYTE PTR [eax],al
    276b:	00 02                	add    BYTE PTR [edx],al
    276d:	91                   	xchg   ecx,eax
    276e:	00 08                	add    BYTE PTR [eax],cl
    2770:	73 32                	jae    27a4 <sysEnter_Vector-0x12d85c>
    2772:	00 01                	add    BYTE PTR [ecx],al
    2774:	0e                   	push   cs
    2775:	7d 00                	jge    2777 <sysEnter_Vector-0x12d889>
    2777:	00 00                	add    BYTE PTR [eax],al
    2779:	02 91 04 09 73 00    	add    dl,BYTE PTR [ecx+0x730904]
    277f:	01 10                	add    DWORD PTR [eax],edx
    2781:	9d                   	popf   
    2782:	00 00                	add    BYTE PTR [eax],al
    2784:	00 02                	add    BYTE PTR [edx],al
    2786:	91                   	xchg   ecx,eax
    2787:	74 00                	je     2789 <sysEnter_Vector-0x12d877>
    2789:	07                   	pop    es
    278a:	16                   	push   ss
    278b:	09 00                	or     DWORD PTR [eax],eax
    278d:	00 01                	add    BYTE PTR [ecx],al
    278f:	18 9d 00 00 00 1c    	sbb    BYTE PTR [ebp+0x1c000000],bl
    2795:	17                   	pop    ss
    2796:	00 30                	add    BYTE PTR [eax],dh
    2798:	47                   	inc    edi
    2799:	00 00                	add    BYTE PTR [eax],al
    279b:	00 01                	add    BYTE PTR [ecx],al
    279d:	9c                   	pushf  
    279e:	71 01                	jno    27a1 <sysEnter_Vector-0x12d85f>
    27a0:	00 00                	add    BYTE PTR [eax],al
    27a2:	08 73 31             	or     BYTE PTR [ebx+0x31],dh
    27a5:	00 01                	add    BYTE PTR [ecx],al
    27a7:	18 9d 00 00 00 02    	sbb    BYTE PTR [ebp+0x2000000],bl
    27ad:	91                   	xchg   ecx,eax
    27ae:	00 08                	add    BYTE PTR [eax],cl
    27b0:	73 32                	jae    27e4 <sysEnter_Vector-0x12d81c>
    27b2:	00 01                	add    BYTE PTR [ecx],al
    27b4:	18 7d 00             	sbb    BYTE PTR [ebp+0x0],bh
    27b7:	00 00                	add    BYTE PTR [eax],al
    27b9:	02 91 04 0a 10 09    	add    dl,BYTE PTR [ecx+0x9100a04]
    27bf:	00 00                	add    BYTE PTR [eax],al
    27c1:	01 18                	add    DWORD PTR [eax],ebx
    27c3:	61                   	popa   
    27c4:	00 00                	add    BYTE PTR [eax],al
    27c6:	00 02                	add    BYTE PTR [edx],al
    27c8:	91                   	xchg   ecx,eax
    27c9:	08 09                	or     BYTE PTR [ecx],cl
    27cb:	73 00                	jae    27cd <sysEnter_Vector-0x12d833>
    27cd:	01 1a                	add    DWORD PTR [edx],ebx
    27cf:	9d                   	popf   
    27d0:	00 00                	add    BYTE PTR [eax],al
    27d2:	00 02                	add    BYTE PTR [edx],al
    27d4:	91                   	xchg   ecx,eax
    27d5:	74 00                	je     27d7 <sysEnter_Vector-0x12d829>
    27d7:	0b 4b 00             	or     ecx,DWORD PTR [ebx+0x0]
    27da:	00 00                	add    BYTE PTR [eax],al
    27dc:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    27df:	00 00                	add    BYTE PTR [eax],al
    27e1:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    27e7:	30 0b                	xor    BYTE PTR [ebx],cl
    27e9:	af                   	scas   eax,DWORD PTR es:[edi]
    27ea:	00 00                	add    BYTE PTR [eax],al
    27ec:	00 02                	add    BYTE PTR [edx],al
    27ee:	35 56 00 00 00       	xor    eax,0x56
    27f3:	05 03 e0 44 00       	add    eax,0x44e003
    27f8:	30 0b                	xor    BYTE PTR [ebx],cl
    27fa:	5b                   	pop    ebx
    27fb:	01 00                	add    DWORD PTR [eax],eax
    27fd:	00 02                	add    BYTE PTR [edx],al
    27ff:	36                   	ss
    2800:	56                   	push   esi
    2801:	00 00                	add    BYTE PTR [eax],al
    2803:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    2809:	30 0b                	xor    BYTE PTR [ebx],cl
    280b:	54                   	push   esp
    280c:	00 00                	add    BYTE PTR [eax],al
    280e:	00 02                	add    BYTE PTR [edx],al
    2810:	37                   	aaa    
    2811:	56                   	push   esi
    2812:	00 00                	add    BYTE PTR [eax],al
    2814:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    281a:	30 0b                	xor    BYTE PTR [ebx],cl
    281c:	28 00                	sub    BYTE PTR [eax],al
    281e:	00 00                	add    BYTE PTR [eax],al
    2820:	03 46 c6             	add    eax,DWORD PTR [esi-0x3a]
    2823:	01 00                	add    DWORD PTR [eax],eax
    2825:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    282b:	30 05 04 9d 00 00    	xor    BYTE PTR ds:0x9d04,al
    2831:	00 00                	add    BYTE PTR [eax],al
    2833:	4c                   	dec    esp
    2834:	01 00                	add    DWORD PTR [eax],eax
    2836:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2839:	5a                   	pop    edx
    283a:	0d 00 00 04 01       	or     eax,0x1040000
    283f:	f4                   	hlt    
    2840:	00 00                	add    BYTE PTR [eax],al
    2842:	00 0c 50             	add    BYTE PTR [eax+edx*2],cl
    2845:	09 00                	or     DWORD PTR [eax],eax
    2847:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    284a:	00 00                	add    BYTE PTR [eax],al
    284c:	64                   	fs
    284d:	17                   	pop    ss
    284e:	00 30                	add    BYTE PTR [eax],dh
    2850:	89 00                	mov    DWORD PTR [eax],eax
    2852:	00 00                	add    BYTE PTR [eax],al
    2854:	cf                   	iret   
    2855:	10 00                	adc    BYTE PTR [eax],al
    2857:	00 02                	add    BYTE PTR [edx],al
    2859:	01 06                	add    DWORD PTR [esi],eax
    285b:	64 00 00             	add    BYTE PTR fs:[eax],al
    285e:	00 02                	add    BYTE PTR [edx],al
    2860:	01 06                	add    DWORD PTR [esi],eax
    2862:	5d                   	pop    ebp
    2863:	00 00                	add    BYTE PTR [eax],al
    2865:	00 02                	add    BYTE PTR [edx],al
    2867:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    286d:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2874:	02 08                	add    cl,BYTE PTR [eax]
    2876:	05 00 00 00 00       	add    eax,0x0
    287b:	02 01                	add    al,BYTE PTR [ecx]
    287d:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2880:	00 00                	add    BYTE PTR [eax],al
    2882:	02 02                	add    al,BYTE PTR [edx]
    2884:	07                   	pop    es
    2885:	0e                   	push   cs
    2886:	00 00                	add    BYTE PTR [eax],al
    2888:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    288b:	00 00                	add    BYTE PTR [eax],al
    288d:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2890:	61                   	popa   
    2891:	00 00                	add    BYTE PTR [eax],al
    2893:	00 02                	add    BYTE PTR [edx],al
    2895:	04 07                	add    al,0x7
    2897:	3e 00 00             	add    BYTE PTR ds:[eax],al
    289a:	00 02                	add    BYTE PTR [edx],al
    289c:	08 07                	or     BYTE PTR [edi],al
    289e:	34 00                	xor    al,0x0
    28a0:	00 00                	add    BYTE PTR [eax],al
    28a2:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    28a9:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    28ac:	9b                   	fwait
    28ad:	00 00                	add    BYTE PTR [eax],al
    28af:	00 02                	add    BYTE PTR [edx],al
    28b1:	01 02                	add    DWORD PTR [edx],eax
    28b3:	95                   	xchg   ebp,eax
    28b4:	00 00                	add    BYTE PTR [eax],al
    28b6:	00 02                	add    BYTE PTR [edx],al
    28b8:	04 07                	add    al,0x7
    28ba:	39 00                	cmp    DWORD PTR [eax],eax
    28bc:	00 00                	add    BYTE PTR [eax],al
    28be:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    28c1:	e1 00                	loope  28c3 <sysEnter_Vector-0x12d73d>
    28c3:	00 00                	add    BYTE PTR [eax],al
    28c5:	05 04 25 00 00       	add    eax,0x2504
    28ca:	00 06                	add    BYTE PTR [esi],al
    28cc:	3b 09                	cmp    ecx,DWORD PTR [ecx]
    28ce:	00 00                	add    BYTE PTR [eax],al
    28d0:	01 09                	add    DWORD PTR [ecx],ecx
    28d2:	7d 00                	jge    28d4 <sysEnter_Vector-0x12d72c>
    28d4:	00 00                	add    BYTE PTR [eax],al
    28d6:	64                   	fs
    28d7:	17                   	pop    ss
    28d8:	00 30                	add    BYTE PTR [eax],dh
    28da:	30 00                	xor    BYTE PTR [eax],al
    28dc:	00 00                	add    BYTE PTR [eax],al
    28de:	01 9c be 00 00 00 07 	add    DWORD PTR [esi+edi*4+0x7000000],ebx
    28e5:	63 00                	arpl   WORD PTR [eax],ax
    28e7:	01 09                	add    DWORD PTR [ecx],ecx
    28e9:	25 00 00 00 02       	and    eax,0x2000000
    28ee:	91                   	xchg   ecx,eax
    28ef:	74 00                	je     28f1 <sysEnter_Vector-0x12d70f>
    28f1:	08 47 09             	or     BYTE PTR [edi+0x9],al
    28f4:	00 00                	add    BYTE PTR [eax],al
    28f6:	01 0e                	add    DWORD PTR [esi],ecx
    28f8:	7d 00                	jge    28fa <sysEnter_Vector-0x12d706>
    28fa:	00 00                	add    BYTE PTR [eax],al
    28fc:	94                   	xchg   esp,eax
    28fd:	17                   	pop    ss
    28fe:	00 30                	add    BYTE PTR [eax],dh
    2900:	59                   	pop    ecx
    2901:	00 00                	add    BYTE PTR [eax],al
    2903:	00 01                	add    BYTE PTR [ecx],al
    2905:	9c                   	pushf  
    2906:	f4                   	hlt    
    2907:	00 00                	add    BYTE PTR [eax],al
    2909:	00 07                	add    BYTE PTR [edi],al
    290b:	73 74                	jae    2981 <sysEnter_Vector-0x12d67f>
    290d:	72 00                	jb     290f <sysEnter_Vector-0x12d6f1>
    290f:	01 0e                	add    DWORD PTR [esi],ecx
    2911:	92                   	xchg   edx,eax
    2912:	00 00                	add    BYTE PTR [eax],al
    2914:	00 02                	add    BYTE PTR [edx],al
    2916:	91                   	xchg   ecx,eax
    2917:	00 09                	add    BYTE PTR [ecx],cl
    2919:	63 6e 74             	arpl   WORD PTR [esi+0x74],bp
    291c:	00 01                	add    BYTE PTR [ecx],al
    291e:	10 3a                	adc    BYTE PTR [edx],bh
    2920:	00 00                	add    BYTE PTR [eax],al
    2922:	00 02                	add    BYTE PTR [edx],al
    2924:	91                   	xchg   ecx,eax
    2925:	74 00                	je     2927 <sysEnter_Vector-0x12d6d9>
    2927:	0a 4b 00             	or     cl,BYTE PTR [ebx+0x0]
    292a:	00 00                	add    BYTE PTR [eax],al
    292c:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    292f:	00 00                	add    BYTE PTR [eax],al
    2931:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    2937:	30 0a                	xor    BYTE PTR [edx],cl
    2939:	af                   	scas   eax,DWORD PTR es:[edi]
    293a:	00 00                	add    BYTE PTR [eax],al
    293c:	00 02                	add    BYTE PTR [edx],al
    293e:	35 56 00 00 00       	xor    eax,0x56
    2943:	05 03 e0 44 00       	add    eax,0x44e003
    2948:	30 0a                	xor    BYTE PTR [edx],cl
    294a:	5b                   	pop    ebx
    294b:	01 00                	add    DWORD PTR [eax],eax
    294d:	00 02                	add    BYTE PTR [edx],al
    294f:	36                   	ss
    2950:	56                   	push   esi
    2951:	00 00                	add    BYTE PTR [eax],al
    2953:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    2959:	30 0a                	xor    BYTE PTR [edx],cl
    295b:	54                   	push   esp
    295c:	00 00                	add    BYTE PTR [eax],al
    295e:	00 02                	add    BYTE PTR [edx],al
    2960:	37                   	aaa    
    2961:	56                   	push   esi
    2962:	00 00                	add    BYTE PTR [eax],al
    2964:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    296a:	30 0a                	xor    BYTE PTR [edx],cl
    296c:	28 00                	sub    BYTE PTR [eax],al
    296e:	00 00                	add    BYTE PTR [eax],al
    2970:	03 46 49             	add    eax,DWORD PTR [esi+0x49]
    2973:	01 00                	add    DWORD PTR [eax],eax
    2975:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    297b:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    2981:	00 00                	add    BYTE PTR [eax],al
    2983:	ca 00 00             	retf   0x0
    2986:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2989:	01 0e                	add    DWORD PTR [esi],ecx
    298b:	00 00                	add    BYTE PTR [eax],al
    298d:	04 01                	add    al,0x1
    298f:	f4                   	hlt    
    2990:	00 00                	add    BYTE PTR [eax],al
    2992:	00 0c 6e             	add    BYTE PTR [esi+ebp*2],cl
    2995:	09 00                	or     DWORD PTR [eax],eax
    2997:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    299a:	00 00                	add    BYTE PTR [eax],al
    299c:	f0 17                	lock pop ss
    299e:	00 30                	add    BYTE PTR [eax],dh
    29a0:	62 00                	bound  eax,QWORD PTR [eax]
    29a2:	00 00                	add    BYTE PTR [eax],al
    29a4:	9e                   	sahf   
    29a5:	11 00                	adc    DWORD PTR [eax],eax
    29a7:	00 02                	add    BYTE PTR [edx],al
    29a9:	04 05                	add    al,0x5
    29ab:	69 6e 74 00 03 94 04 	imul   ebp,DWORD PTR [esi+0x74],0x4940300
    29b2:	00 00                	add    BYTE PTR [eax],al
    29b4:	02 d8                	add    bl,al
    29b6:	37                   	aaa    
    29b7:	00 00                	add    BYTE PTR [eax],al
    29b9:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    29bc:	07                   	pop    es
    29bd:	3e 00 00             	add    BYTE PTR ds:[eax],al
    29c0:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    29c3:	05 05 00 00 00       	add    eax,0x5
    29c8:	04 08                	add    al,0x8
    29ca:	05 00 00 00 00       	add    eax,0x0
    29cf:	04 0c                	add    al,0xc
    29d1:	04 9b                	add    al,0x9b
    29d3:	00 00                	add    BYTE PTR [eax],al
    29d5:	00 05 67 09 00 00    	add    BYTE PTR ds:0x967,al
    29db:	01 03                	add    DWORD PTR [ebx],eax
    29dd:	2c 00                	sub    al,0x0
    29df:	00 00                	add    BYTE PTR [eax],al
    29e1:	f0 17                	lock pop ss
    29e3:	00 30                	add    BYTE PTR [eax],dh
    29e5:	31 00                	xor    DWORD PTR [eax],eax
    29e7:	00 00                	add    BYTE PTR [eax],al
    29e9:	01 9c 89 00 00 00 06 	add    DWORD PTR [ecx+ecx*4+0x6000000],ebx
    29f0:	73 74                	jae    2a66 <sysEnter_Vector-0x12d59a>
    29f2:	72 00                	jb     29f4 <sysEnter_Vector-0x12d60c>
    29f4:	01 03                	add    DWORD PTR [ebx],eax
    29f6:	89 00                	mov    DWORD PTR [eax],eax
    29f8:	00 00                	add    BYTE PTR [eax],al
    29fa:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2a00:	74 00                	je     2a02 <sysEnter_Vector-0x12d5fe>
    2a02:	01 04 2c             	add    DWORD PTR [esp+ebp*1],eax
    2a05:	00 00                	add    BYTE PTR [eax],al
    2a07:	00 02                	add    BYTE PTR [edx],al
    2a09:	91                   	xchg   ecx,eax
    2a0a:	74 00                	je     2a0c <sysEnter_Vector-0x12d5f4>
    2a0c:	08 04 96             	or     BYTE PTR [esi+edx*4],al
    2a0f:	00 00                	add    BYTE PTR [eax],al
    2a11:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2a14:	06                   	push   es
    2a15:	64 00 00             	add    BYTE PTR fs:[eax],al
    2a18:	00 09                	add    BYTE PTR [ecx],cl
    2a1a:	8f 00                	pop    DWORD PTR [eax]
    2a1c:	00 00                	add    BYTE PTR [eax],al
    2a1e:	0a 83 09 00 00 01    	or     al,BYTE PTR [ebx+0x1000009]
    2a24:	0a 2c 00             	or     ch,BYTE PTR [eax+eax*1]
    2a27:	00 00                	add    BYTE PTR [eax],al
    2a29:	21 18                	and    DWORD PTR [eax],ebx
    2a2b:	00 30                	add    BYTE PTR [eax],dh
    2a2d:	31 00                	xor    DWORD PTR [eax],eax
    2a2f:	00 00                	add    BYTE PTR [eax],al
    2a31:	01 9c 06 73 74 72 00 	add    DWORD PTR [esi+eax*1+0x727473],ebx
    2a38:	01 0a                	add    DWORD PTR [edx],ecx
    2a3a:	89 00                	mov    DWORD PTR [eax],eax
    2a3c:	00 00                	add    BYTE PTR [eax],al
    2a3e:	02 91 00 07 72 65    	add    dl,BYTE PTR [ecx+0x65720700]
    2a44:	74 00                	je     2a46 <sysEnter_Vector-0x12d5ba>
    2a46:	01 0b                	add    DWORD PTR [ebx],ecx
    2a48:	2c 00                	sub    al,0x0
    2a4a:	00 00                	add    BYTE PTR [eax],al
    2a4c:	02 91 74 00 00 de    	add    dl,BYTE PTR [ecx-0x21ffff8c]
    2a52:	00 00                	add    BYTE PTR [eax],al
    2a54:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2a57:	9c                   	pushf  
    2a58:	0e                   	push   cs
    2a59:	00 00                	add    BYTE PTR [eax],al
    2a5b:	04 01                	add    al,0x1
    2a5d:	f4                   	hlt    
    2a5e:	00 00                	add    BYTE PTR [eax],al
    2a60:	00 0c 9c             	add    BYTE PTR [esp+ebx*4],cl
    2a63:	09 00                	or     DWORD PTR [eax],eax
    2a65:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2a68:	00 00                	add    BYTE PTR [eax],al
    2a6a:	54                   	push   esp
    2a6b:	18 00                	sbb    BYTE PTR [eax],al
    2a6d:	30 ce                	xor    dh,cl
    2a6f:	00 00                	add    BYTE PTR [eax],al
    2a71:	00 36                	add    BYTE PTR [esi],dh
    2a73:	12 00                	adc    al,BYTE PTR [eax]
    2a75:	00 02                	add    BYTE PTR [edx],al
    2a77:	04 05                	add    al,0x5
    2a79:	69 6e 74 00 03 94 04 	imul   ebp,DWORD PTR [esi+0x74],0x4940300
    2a80:	00 00                	add    BYTE PTR [eax],al
    2a82:	02 d8                	add    bl,al
    2a84:	37                   	aaa    
    2a85:	00 00                	add    BYTE PTR [eax],al
    2a87:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2a8a:	07                   	pop    es
    2a8b:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2a8e:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2a91:	05 05 00 00 00       	add    eax,0x5
    2a96:	04 08                	add    al,0x8
    2a98:	05 00 00 00 00       	add    eax,0x0
    2a9d:	04 0c                	add    al,0xc
    2a9f:	04 9b                	add    al,0x9b
    2aa1:	00 00                	add    BYTE PTR [eax],al
    2aa3:	00 05 94 09 00 00    	add    BYTE PTR ds:0x994,al
    2aa9:	01 0c 25 00 00 00 54 	add    DWORD PTR [eiz*1+0x54000000],ecx
    2ab0:	18 00                	sbb    BYTE PTR [eax],al
    2ab2:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2ab5:	00 00                	add    BYTE PTR [eax],al
    2ab7:	01 9c 93 00 00 00 06 	add    DWORD PTR [ebx+edx*4+0x6000000],ebx
    2abe:	73 31                	jae    2af1 <sysEnter_Vector-0x12d50f>
    2ac0:	00 01                	add    BYTE PTR [ecx],al
    2ac2:	0c 93                	or     al,0x93
    2ac4:	00 00                	add    BYTE PTR [eax],al
    2ac6:	00 02                	add    BYTE PTR [edx],al
    2ac8:	91                   	xchg   ecx,eax
    2ac9:	00 06                	add    BYTE PTR [esi],al
    2acb:	73 32                	jae    2aff <sysEnter_Vector-0x12d501>
    2acd:	00 01                	add    BYTE PTR [ecx],al
    2acf:	0c 93                	or     al,0x93
    2ad1:	00 00                	add    BYTE PTR [eax],al
    2ad3:	00 02                	add    BYTE PTR [edx],al
    2ad5:	91                   	xchg   ecx,eax
    2ad6:	04 06                	add    al,0x6
    2ad8:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2ad9:	00 01                	add    BYTE PTR [ecx],al
    2adb:	0c 2c                	or     al,0x2c
    2add:	00 00                	add    BYTE PTR [eax],al
    2adf:	00 02                	add    BYTE PTR [edx],al
    2ae1:	91                   	xchg   ecx,eax
    2ae2:	08 00                	or     BYTE PTR [eax],al
    2ae4:	07                   	pop    es
    2ae5:	04 a0                	add    al,0xa0
    2ae7:	00 00                	add    BYTE PTR [eax],al
    2ae9:	00 04 01             	add    BYTE PTR [ecx+eax*1],al
    2aec:	06                   	push   es
    2aed:	64 00 00             	add    BYTE PTR fs:[eax],al
    2af0:	00 08                	add    BYTE PTR [eax],cl
    2af2:	99                   	cdq    
    2af3:	00 00                	add    BYTE PTR [eax],al
    2af5:	00 09                	add    BYTE PTR [ecx],cl
    2af7:	8b 09                	mov    ecx,DWORD PTR [ecx]
    2af9:	00 00                	add    BYTE PTR [eax],al
    2afb:	01 16                	add    DWORD PTR [esi],edx
    2afd:	25 00 00 00 bb       	and    eax,0xbb000000
    2b02:	18 00                	sbb    BYTE PTR [eax],al
    2b04:	30 67 00             	xor    BYTE PTR [edi+0x0],ah
    2b07:	00 00                	add    BYTE PTR [eax],al
    2b09:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    2b10:	16                   	push   ss
    2b11:	93                   	xchg   ebx,eax
    2b12:	00 00                	add    BYTE PTR [eax],al
    2b14:	00 02                	add    BYTE PTR [edx],al
    2b16:	91                   	xchg   ecx,eax
    2b17:	00 06                	add    BYTE PTR [esi],al
    2b19:	73 32                	jae    2b4d <sysEnter_Vector-0x12d4b3>
    2b1b:	00 01                	add    BYTE PTR [ecx],al
    2b1d:	16                   	push   ss
    2b1e:	93                   	xchg   ebx,eax
    2b1f:	00 00                	add    BYTE PTR [eax],al
    2b21:	00 02                	add    BYTE PTR [edx],al
    2b23:	91                   	xchg   ecx,eax
    2b24:	04 06                	add    al,0x6
    2b26:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2b27:	00 01                	add    BYTE PTR [ecx],al
    2b29:	16                   	push   ss
    2b2a:	2c 00                	sub    al,0x0
    2b2c:	00 00                	add    BYTE PTR [eax],al
    2b2e:	02 91 08 00 00 f0    	add    dl,BYTE PTR [ecx-0xffffff8]
    2b34:	00 00                	add    BYTE PTR [eax],al
    2b36:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2b39:	28 0f                	sub    BYTE PTR [edi],cl
    2b3b:	00 00                	add    BYTE PTR [eax],al
    2b3d:	04 01                	add    al,0x1
    2b3f:	f4                   	hlt    
    2b40:	00 00                	add    BYTE PTR [eax],al
    2b42:	00 0c b2             	add    BYTE PTR [edx+esi*4],cl
    2b45:	09 00                	or     DWORD PTR [eax],eax
    2b47:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2b4a:	00 00                	add    BYTE PTR [eax],al
    2b4c:	24 19                	and    al,0x19
    2b4e:	00 30                	add    BYTE PTR [eax],dh
    2b50:	80 00 00             	add    BYTE PTR [eax],0x0
    2b53:	00 fb                	add    bl,bh
    2b55:	12 00                	adc    al,BYTE PTR [eax]
    2b57:	00 02                	add    BYTE PTR [edx],al
    2b59:	04 05                	add    al,0x5
    2b5b:	69 6e 74 00 03 94 04 	imul   ebp,DWORD PTR [esi+0x74],0x4940300
    2b62:	00 00                	add    BYTE PTR [eax],al
    2b64:	02 d8                	add    bl,al
    2b66:	37                   	aaa    
    2b67:	00 00                	add    BYTE PTR [eax],al
    2b69:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b6c:	07                   	pop    es
    2b6d:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2b70:	00 04 04             	add    BYTE PTR [esp+eax*1],al
    2b73:	05 05 00 00 00       	add    eax,0x5
    2b78:	04 08                	add    al,0x8
    2b7a:	05 00 00 00 00       	add    eax,0x0
    2b7f:	04 0c                	add    al,0xc
    2b81:	04 9b                	add    al,0x9b
    2b83:	00 00                	add    BYTE PTR [eax],al
    2b85:	00 05 c8 09 00 00    	add    BYTE PTR ds:0x9c8,al
    2b8b:	01 0d 9f 00 00 00    	add    DWORD PTR ds:0x9f,ecx
    2b91:	24 19                	and    al,0x19
    2b93:	00 30                	add    BYTE PTR [eax],dh
    2b95:	60                   	pusha  
    2b96:	00 00                	add    BYTE PTR [eax],al
    2b98:	00 01                	add    BYTE PTR [ecx],al
    2b9a:	9c                   	pushf  
    2b9b:	9f                   	lahf   
    2b9c:	00 00                	add    BYTE PTR [eax],al
    2b9e:	00 06                	add    BYTE PTR [esi],al
    2ba0:	73 31                	jae    2bd3 <sysEnter_Vector-0x12d42d>
    2ba2:	00 01                	add    BYTE PTR [ecx],al
    2ba4:	0d 9f 00 00 00       	or     eax,0x9f
    2ba9:	02 91 00 06 73 32    	add    dl,BYTE PTR [ecx+0x32730600]
    2baf:	00 01                	add    BYTE PTR [ecx],al
    2bb1:	0d ac 00 00 00       	or     eax,0xac
    2bb6:	02 91 04 06 6e 00    	add    dl,BYTE PTR [ecx+0x6e0604]
    2bbc:	01 0d 2c 00 00 00    	add    DWORD PTR ds:0x2c,ecx
    2bc2:	02 91 08 07 73 00    	add    dl,BYTE PTR [ecx+0x730708]
    2bc8:	01 0f                	add    DWORD PTR [edi],ecx
    2bca:	9f                   	lahf   
    2bcb:	00 00                	add    BYTE PTR [eax],al
    2bcd:	00 02                	add    BYTE PTR [edx],al
    2bcf:	91                   	xchg   ecx,eax
    2bd0:	74 00                	je     2bd2 <sysEnter_Vector-0x12d42e>
    2bd2:	08 04 a5 00 00 00 04 	or     BYTE PTR [eiz*4+0x4000000],al
    2bd9:	01 06                	add    DWORD PTR [esi],eax
    2bdb:	64 00 00             	add    BYTE PTR fs:[eax],al
    2bde:	00 08                	add    BYTE PTR [eax],cl
    2be0:	04 b2                	add    al,0xb2
    2be2:	00 00                	add    BYTE PTR [eax],al
    2be4:	00 09                	add    BYTE PTR [ecx],cl
    2be6:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    2be7:	00 00                	add    BYTE PTR [eax],al
    2be9:	00 0a                	add    BYTE PTR [edx],cl
    2beb:	d1 09                	ror    DWORD PTR [ecx],1
    2bed:	00 00                	add    BYTE PTR [eax],al
    2bef:	01 1b                	add    DWORD PTR [ebx],ebx
    2bf1:	9f                   	lahf   
    2bf2:	00 00                	add    BYTE PTR [eax],al
    2bf4:	00 84 19 00 30 20 00 	add    BYTE PTR [ecx+ebx*1+0x203000],al
    2bfb:	00 00                	add    BYTE PTR [eax],al
    2bfd:	01 9c 06 73 31 00 01 	add    DWORD PTR [esi+eax*1+0x1003173],ebx
    2c04:	1b 9f 00 00 00 02    	sbb    ebx,DWORD PTR [edi+0x2000000]
    2c0a:	91                   	xchg   ecx,eax
    2c0b:	00 06                	add    BYTE PTR [esi],al
    2c0d:	73 32                	jae    2c41 <sysEnter_Vector-0x12d3bf>
    2c0f:	00 01                	add    BYTE PTR [ecx],al
    2c11:	1b ac 00 00 00 02 91 	sbb    ebp,DWORD PTR [eax+eax*1-0x6efe0000]
    2c18:	04 06                	add    al,0x6
    2c1a:	6e                   	outs   dx,BYTE PTR ds:[esi]
    2c1b:	00 01                	add    BYTE PTR [ecx],al
    2c1d:	1b 2c 00             	sbb    ebp,DWORD PTR [eax+eax*1]
    2c20:	00 00                	add    BYTE PTR [eax],al
    2c22:	02 91 08 00 00 92    	add    dl,BYTE PTR [ecx-0x6dfffff8]
    2c28:	01 00                	add    DWORD PTR [eax],eax
    2c2a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2c2d:	c3                   	ret    
    2c2e:	0f 00 00             	sldt   WORD PTR [eax]
    2c31:	04 01                	add    al,0x1
    2c33:	f4                   	hlt    
    2c34:	00 00                	add    BYTE PTR [eax],al
    2c36:	00 0c d9             	add    BYTE PTR [ecx+ebx*8],cl
    2c39:	09 00                	or     DWORD PTR [eax],eax
    2c3b:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2c3e:	00 00                	add    BYTE PTR [eax],al
    2c40:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
    2c41:	19 00                	sbb    DWORD PTR [eax],eax
    2c43:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2c46:	00 00                	add    BYTE PTR [eax],al
    2c48:	a0 13 00 00 02       	mov    al,ds:0x2000013
    2c4d:	01 06                	add    DWORD PTR [esi],eax
    2c4f:	64 00 00             	add    BYTE PTR fs:[eax],al
    2c52:	00 02                	add    BYTE PTR [edx],al
    2c54:	01 06                	add    DWORD PTR [esi],eax
    2c56:	5d                   	pop    ebp
    2c57:	00 00                	add    BYTE PTR [eax],al
    2c59:	00 02                	add    BYTE PTR [edx],al
    2c5b:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2c61:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2c68:	02 08                	add    cl,BYTE PTR [eax]
    2c6a:	05 00 00 00 00       	add    eax,0x0
    2c6f:	02 01                	add    al,BYTE PTR [ecx]
    2c71:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2c74:	00 00                	add    BYTE PTR [eax],al
    2c76:	02 02                	add    al,BYTE PTR [edx]
    2c78:	07                   	pop    es
    2c79:	0e                   	push   cs
    2c7a:	00 00                	add    BYTE PTR [eax],al
    2c7c:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2c7f:	00 00                	add    BYTE PTR [eax],al
    2c81:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2c84:	61                   	popa   
    2c85:	00 00                	add    BYTE PTR [eax],al
    2c87:	00 02                	add    BYTE PTR [edx],al
    2c89:	04 07                	add    al,0x7
    2c8b:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2c8e:	00 02                	add    BYTE PTR [edx],al
    2c90:	08 07                	or     BYTE PTR [edi],al
    2c92:	34 00                	xor    al,0x0
    2c94:	00 00                	add    BYTE PTR [eax],al
    2c96:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2c9d:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2ca0:	9b                   	fwait
    2ca1:	00 00                	add    BYTE PTR [eax],al
    2ca3:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2ca9:	00 06                	add    BYTE PTR [esi],al
    2cab:	25 00 00 00 02       	and    eax,0x2000000
    2cb0:	01 02                	add    DWORD PTR [edx],eax
    2cb2:	95                   	xchg   ebp,eax
    2cb3:	00 00                	add    BYTE PTR [eax],al
    2cb5:	00 02                	add    BYTE PTR [edx],al
    2cb7:	04 07                	add    al,0x7
    2cb9:	39 00                	cmp    DWORD PTR [eax],eax
    2cbb:	00 00                	add    BYTE PTR [eax],al
    2cbd:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2cc0:	e1 00                	loope  2cc2 <sysEnter_Vector-0x12d33e>
    2cc2:	00 00                	add    BYTE PTR [eax],al
    2cc4:	05 04 25 00 00       	add    eax,0x2504
    2cc9:	00 07                	add    BYTE PTR [edi],al
    2ccb:	fc                   	cld    
    2ccc:	09 00                	or     DWORD PTR [eax],eax
    2cce:	00 01                	add    BYTE PTR [ecx],al
    2cd0:	3b 8f 00 00 00 a4    	cmp    ecx,DWORD PTR [edi-0x5c000000]
    2cd6:	19 00                	sbb    DWORD PTR [eax],eax
    2cd8:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
    2cdb:	00 00                	add    BYTE PTR [eax],al
    2cdd:	01 9c 3a 01 00 00 08 	add    DWORD PTR [edx+edi*1+0x8000001],ebx
    2ce4:	0b 0a                	or     ecx,DWORD PTR [edx]
    2ce6:	00 00                	add    BYTE PTR [eax],al
    2ce8:	01 3b                	add    DWORD PTR [ebx],edi
    2cea:	7d 00                	jge    2cec <sysEnter_Vector-0x12d314>
    2cec:	00 00                	add    BYTE PTR [eax],al
    2cee:	02 91 00 08 04 0a    	add    dl,BYTE PTR [ecx+0xa040800]
    2cf4:	00 00                	add    BYTE PTR [eax],al
    2cf6:	01 3b                	add    DWORD PTR [ebx],edi
    2cf8:	3a 01                	cmp    al,BYTE PTR [ecx]
    2cfa:	00 00                	add    BYTE PTR [eax],al
    2cfc:	02 91 04 08 10 0a    	add    dl,BYTE PTR [ecx+0xa100804]
    2d02:	00 00                	add    BYTE PTR [eax],al
    2d04:	01 3b                	add    DWORD PTR [ebx],edi
    2d06:	3a 00                	cmp    al,BYTE PTR [eax]
    2d08:	00 00                	add    BYTE PTR [eax],al
    2d0a:	02 91 08 09 73 00    	add    dl,BYTE PTR [ecx+0x730908]
    2d10:	01 3d 7d 00 00 00    	add    DWORD PTR ds:0x7d,edi
    2d16:	01 56 09             	add    DWORD PTR [esi+0x9],edx
    2d19:	61                   	popa   
    2d1a:	63 63 00             	arpl   WORD PTR [ebx+0x0],sp
    2d1d:	01 3e                	add    DWORD PTR [esi],edi
    2d1f:	8f 00                	pop    DWORD PTR [eax]
    2d21:	00 00                	add    BYTE PTR [eax],al
    2d23:	01 57 09             	add    DWORD PTR [edi+0x9],edx
    2d26:	63 00                	arpl   WORD PTR [eax],ax
    2d28:	01 3f                	add    DWORD PTR [edi],edi
    2d2a:	3a 00                	cmp    al,BYTE PTR [eax]
    2d2c:	00 00                	add    BYTE PTR [eax],al
    2d2e:	01 53 0a             	add    DWORD PTR [ebx+0xa],edx
    2d31:	ee                   	out    dx,al
    2d32:	09 00                	or     DWORD PTR [eax],eax
    2d34:	00 01                	add    BYTE PTR [ecx],al
    2d36:	40                   	inc    eax
    2d37:	8f 00                	pop    DWORD PTR [eax]
    2d39:	00 00                	add    BYTE PTR [eax],al
    2d3b:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    2d3e:	67 00 01             	add    BYTE PTR [bx+di],al
    2d41:	41                   	inc    ecx
    2d42:	3a 00                	cmp    al,BYTE PTR [eax]
    2d44:	00 00                	add    BYTE PTR [eax],al
    2d46:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2d49:	79 00                	jns    2d4b <sysEnter_Vector-0x12d2b5>
    2d4b:	01 41 3a             	add    DWORD PTR [ecx+0x3a],eax
    2d4e:	00 00                	add    BYTE PTR [eax],al
    2d50:	00 01                	add    BYTE PTR [ecx],al
    2d52:	51                   	push   ecx
    2d53:	0c f5                	or     al,0xf5
    2d55:	09 00                	or     DWORD PTR [eax],eax
    2d57:	00 01                	add    BYTE PTR [ecx],al
    2d59:	41                   	inc    ecx
    2d5a:	3a 00                	cmp    al,BYTE PTR [eax]
    2d5c:	00 00                	add    BYTE PTR [eax],al
    2d5e:	01 52 00             	add    DWORD PTR [edx+0x0],edx
    2d61:	05 04 9d 00 00       	add    eax,0x9d04
    2d66:	00 0d 4b 00 00 00    	add    BYTE PTR ds:0x4b,cl
    2d6c:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    2d6f:	00 00                	add    BYTE PTR [eax],al
    2d71:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    2d77:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    2d7d:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    2d83:	05 03 e0 44 00       	add    eax,0x44e003
    2d88:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    2d8e:	02 36                	add    dh,BYTE PTR [esi]
    2d90:	56                   	push   esi
    2d91:	00 00                	add    BYTE PTR [eax],al
    2d93:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    2d99:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    2d9f:	02 37                	add    dh,BYTE PTR [edi]
    2da1:	56                   	push   esi
    2da2:	00 00                	add    BYTE PTR [eax],al
    2da4:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    2daa:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    2db0:	03 46 3a             	add    eax,DWORD PTR [esi+0x3a]
    2db3:	01 00                	add    DWORD PTR [eax],eax
    2db5:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    2dbb:	30 00                	xor    BYTE PTR [eax],al
    2dbd:	6c                   	ins    BYTE PTR es:[edi],dx
    2dbe:	00 00                	add    BYTE PTR [eax],al
    2dc0:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    2dc3:	7e 10                	jle    2dd5 <sysEnter_Vector-0x12d22b>
    2dc5:	00 00                	add    BYTE PTR [eax],al
    2dc7:	04 01                	add    al,0x1
    2dc9:	f4                   	hlt    
    2dca:	00 00                	add    BYTE PTR [eax],al
    2dcc:	00 0c 15 0a 00 00 72 	add    BYTE PTR [edx*1+0x7200000a],cl
    2dd3:	00 00                	add    BYTE PTR [eax],al
    2dd5:	00 24 1b             	add    BYTE PTR [ebx+ebx*1],ah
    2dd8:	00 30                	add    BYTE PTR [eax],dh
    2dda:	1d 00 00 00 ed       	sbb    eax,0xed000000
    2ddf:	14 00                	adc    al,0x0
    2de1:	00 02                	add    BYTE PTR [edx],al
    2de3:	2c 0a                	sub    al,0xa
    2de5:	00 00                	add    BYTE PTR [eax],al
    2de7:	01 01                	add    DWORD PTR [ecx],eax
    2de9:	5b                   	pop    ebx
    2dea:	00 00                	add    BYTE PTR [eax],al
    2dec:	00 24 1b             	add    BYTE PTR [ebx+ebx*1],ah
    2def:	00 30                	add    BYTE PTR [eax],dh
    2df1:	1d 00 00 00 01       	sbb    eax,0x1000000
    2df6:	9c                   	pushf  
    2df7:	5b                   	pop    ebx
    2df8:	00 00                	add    BYTE PTR [eax],al
    2dfa:	00 03                	add    BYTE PTR [ebx],al
    2dfc:	76 61                	jbe    2e5f <sysEnter_Vector-0x12d1a1>
    2dfe:	6c                   	ins    BYTE PTR es:[edi],dx
    2dff:	00 01                	add    BYTE PTR [ecx],al
    2e01:	01 5b 00             	add    DWORD PTR [ebx+0x0],ebx
    2e04:	00 00                	add    BYTE PTR [eax],al
    2e06:	02 91 00 03 63 6e    	add    dl,BYTE PTR [ecx+0x6e630300]
    2e0c:	74 00                	je     2e0e <sysEnter_Vector-0x12d1f2>
    2e0e:	01 01                	add    DWORD PTR [ecx],eax
    2e10:	68 00 00 00 02       	push   0x2000000
    2e15:	91                   	xchg   ecx,eax
    2e16:	04 00                	add    al,0x0
    2e18:	04 04                	add    al,0x4
    2e1a:	61                   	popa   
    2e1b:	00 00                	add    BYTE PTR [eax],al
    2e1d:	00 05 01 06 64 00    	add    BYTE PTR ds:0x640601,al
    2e23:	00 00                	add    BYTE PTR [eax],al
    2e25:	06                   	push   es
    2e26:	04 05                	add    al,0x5
    2e28:	69 6e 74 00 00 90 01 	imul   ebp,DWORD PTR [esi+0x74],0x1900000
    2e2f:	00 00                	add    BYTE PTR [eax],al
    2e31:	04 00                	add    al,0x0
    2e33:	dc 10                	fcom   QWORD PTR [eax]
    2e35:	00 00                	add    BYTE PTR [eax],al
    2e37:	04 01                	add    al,0x1
    2e39:	f4                   	hlt    
    2e3a:	00 00                	add    BYTE PTR [eax],al
    2e3c:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    2e3f:	0a 00                	or     al,BYTE PTR [eax]
    2e41:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2e44:	00 00                	add    BYTE PTR [eax],al
    2e46:	44                   	inc    esp
    2e47:	1b 00                	sbb    eax,DWORD PTR [eax]
    2e49:	30 9c 01 00 00 34 15 	xor    BYTE PTR [ecx+eax*1+0x15340000],bl
    2e50:	00 00                	add    BYTE PTR [eax],al
    2e52:	02 01                	add    al,BYTE PTR [ecx]
    2e54:	06                   	push   es
    2e55:	64 00 00             	add    BYTE PTR fs:[eax],al
    2e58:	00 02                	add    BYTE PTR [edx],al
    2e5a:	01 06                	add    DWORD PTR [esi],eax
    2e5c:	5d                   	pop    ebp
    2e5d:	00 00                	add    BYTE PTR [eax],al
    2e5f:	00 02                	add    BYTE PTR [edx],al
    2e61:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2e67:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    2e6e:	02 08                	add    cl,BYTE PTR [eax]
    2e70:	05 00 00 00 00       	add    eax,0x0
    2e75:	02 01                	add    al,BYTE PTR [ecx]
    2e77:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    2e7a:	00 00                	add    BYTE PTR [eax],al
    2e7c:	02 02                	add    al,BYTE PTR [edx]
    2e7e:	07                   	pop    es
    2e7f:	0e                   	push   cs
    2e80:	00 00                	add    BYTE PTR [eax],al
    2e82:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    2e85:	00 00                	add    BYTE PTR [eax],al
    2e87:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    2e8a:	61                   	popa   
    2e8b:	00 00                	add    BYTE PTR [eax],al
    2e8d:	00 02                	add    BYTE PTR [edx],al
    2e8f:	04 07                	add    al,0x7
    2e91:	3e 00 00             	add    BYTE PTR ds:[eax],al
    2e94:	00 02                	add    BYTE PTR [edx],al
    2e96:	08 07                	or     BYTE PTR [edi],al
    2e98:	34 00                	xor    al,0x0
    2e9a:	00 00                	add    BYTE PTR [eax],al
    2e9c:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    2ea3:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    2ea6:	9b                   	fwait
    2ea7:	00 00                	add    BYTE PTR [eax],al
    2ea9:	00 05 04 83 00 00    	add    BYTE PTR ds:0x8304,al
    2eaf:	00 06                	add    BYTE PTR [esi],al
    2eb1:	25 00 00 00 02       	and    eax,0x2000000
    2eb6:	01 02                	add    DWORD PTR [edx],eax
    2eb8:	95                   	xchg   ebp,eax
    2eb9:	00 00                	add    BYTE PTR [eax],al
    2ebb:	00 02                	add    BYTE PTR [edx],al
    2ebd:	04 07                	add    al,0x7
    2ebf:	39 00                	cmp    DWORD PTR [eax],eax
    2ec1:	00 00                	add    BYTE PTR [eax],al
    2ec3:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    2ec6:	e1 00                	loope  2ec8 <sysEnter_Vector-0x12d138>
    2ec8:	00 00                	add    BYTE PTR [eax],al
    2eca:	05 04 25 00 00       	add    eax,0x2504
    2ecf:	00 07                	add    BYTE PTR [edi],al
    2ed1:	49                   	dec    ecx
    2ed2:	0a 00                	or     al,BYTE PTR [eax]
    2ed4:	00 01                	add    BYTE PTR [ecx],al
    2ed6:	57                   	push   edi
    2ed7:	6f                   	outs   dx,DWORD PTR ds:[esi]
    2ed8:	00 00                	add    BYTE PTR [eax],al
    2eda:	00 44 1b 00          	add    BYTE PTR [ebx+ebx*1+0x0],al
    2ede:	30 9c 01 00 00 01 9c 	xor    BYTE PTR [ecx+eax*1-0x63ff0000],bl
    2ee5:	38 01                	cmp    BYTE PTR [ecx],al
    2ee7:	00 00                	add    BYTE PTR [eax],al
    2ee9:	08 0b                	or     BYTE PTR [ebx],cl
    2eeb:	0a 00                	or     al,BYTE PTR [eax]
    2eed:	00 01                	add    BYTE PTR [ecx],al
    2eef:	57                   	push   edi
    2ef0:	7d 00                	jge    2ef2 <sysEnter_Vector-0x12d10e>
    2ef2:	00 00                	add    BYTE PTR [eax],al
    2ef4:	02 91 00 08 04 0a    	add    dl,BYTE PTR [ecx+0xa040800]
    2efa:	00 00                	add    BYTE PTR [eax],al
    2efc:	01 57 38             	add    DWORD PTR [edi+0x38],edx
    2eff:	01 00                	add    DWORD PTR [eax],eax
    2f01:	00 02                	add    BYTE PTR [edx],al
    2f03:	91                   	xchg   ecx,eax
    2f04:	04 08                	add    al,0x8
    2f06:	10 0a                	adc    BYTE PTR [edx],cl
    2f08:	00 00                	add    BYTE PTR [eax],al
    2f0a:	01 57 3a             	add    DWORD PTR [edi+0x3a],edx
    2f0d:	00 00                	add    BYTE PTR [eax],al
    2f0f:	00 02                	add    BYTE PTR [edx],al
    2f11:	91                   	xchg   ecx,eax
    2f12:	08 09                	or     BYTE PTR [ecx],cl
    2f14:	73 00                	jae    2f16 <sysEnter_Vector-0x12d0ea>
    2f16:	01 59 7d             	add    DWORD PTR [ecx+0x7d],ebx
    2f19:	00 00                	add    BYTE PTR [eax],al
    2f1b:	00 01                	add    BYTE PTR [ecx],al
    2f1d:	56                   	push   esi
    2f1e:	09 61 63             	or     DWORD PTR [ecx+0x63],esp
    2f21:	63 00                	arpl   WORD PTR [eax],ax
    2f23:	01 5a 8f             	add    DWORD PTR [edx-0x71],ebx
    2f26:	00 00                	add    BYTE PTR [eax],al
    2f28:	00 01                	add    BYTE PTR [ecx],al
    2f2a:	57                   	push   edi
    2f2b:	09 63 00             	or     DWORD PTR [ebx+0x0],esp
    2f2e:	01 5b 3a             	add    DWORD PTR [ebx+0x3a],ebx
    2f31:	00 00                	add    BYTE PTR [eax],al
    2f33:	00 01                	add    BYTE PTR [ecx],al
    2f35:	53                   	push   ebx
    2f36:	0a ee                	or     ch,dh
    2f38:	09 00                	or     DWORD PTR [eax],eax
    2f3a:	00 01                	add    BYTE PTR [ecx],al
    2f3c:	5c                   	pop    esp
    2f3d:	8f 00                	pop    DWORD PTR [eax]
    2f3f:	00 00                	add    BYTE PTR [eax],al
    2f41:	0b 6e 65             	or     ebp,DWORD PTR [esi+0x65]
    2f44:	67 00 01             	add    BYTE PTR [bx+di],al
    2f47:	5d                   	pop    ebp
    2f48:	3a 00                	cmp    al,BYTE PTR [eax]
    2f4a:	00 00                	add    BYTE PTR [eax],al
    2f4c:	09 61 6e             	or     DWORD PTR [ecx+0x6e],esp
    2f4f:	79 00                	jns    2f51 <sysEnter_Vector-0x12d0af>
    2f51:	01 5d 3a             	add    DWORD PTR [ebp+0x3a],ebx
    2f54:	00 00                	add    BYTE PTR [eax],al
    2f56:	00 01                	add    BYTE PTR [ecx],al
    2f58:	51                   	push   ecx
    2f59:	0a f5                	or     dh,ch
    2f5b:	09 00                	or     DWORD PTR [eax],eax
    2f5d:	00 01                	add    BYTE PTR [ecx],al
    2f5f:	5d                   	pop    ebp
    2f60:	3a 00                	cmp    al,BYTE PTR [eax]
    2f62:	00 00                	add    BYTE PTR [eax],al
    2f64:	00 05 04 9d 00 00    	add    BYTE PTR ds:0x9d04,al
    2f6a:	00 0c 4b             	add    BYTE PTR [ebx+ecx*2],cl
    2f6d:	00 00                	add    BYTE PTR [eax],al
    2f6f:	00 02                	add    BYTE PTR [edx],al
    2f71:	34 56                	xor    al,0x56
    2f73:	00 00                	add    BYTE PTR [eax],al
    2f75:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    2f7b:	30 0c af             	xor    BYTE PTR [edi+ebp*4],cl
    2f7e:	00 00                	add    BYTE PTR [eax],al
    2f80:	00 02                	add    BYTE PTR [edx],al
    2f82:	35 56 00 00 00       	xor    eax,0x56
    2f87:	05 03 e0 44 00       	add    eax,0x44e003
    2f8c:	30 0c 5b             	xor    BYTE PTR [ebx+ebx*2],cl
    2f8f:	01 00                	add    DWORD PTR [eax],eax
    2f91:	00 02                	add    BYTE PTR [edx],al
    2f93:	36                   	ss
    2f94:	56                   	push   esi
    2f95:	00 00                	add    BYTE PTR [eax],al
    2f97:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    2f9d:	30 0c 54             	xor    BYTE PTR [esp+edx*2],cl
    2fa0:	00 00                	add    BYTE PTR [eax],al
    2fa2:	00 02                	add    BYTE PTR [edx],al
    2fa4:	37                   	aaa    
    2fa5:	56                   	push   esi
    2fa6:	00 00                	add    BYTE PTR [eax],al
    2fa8:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    2fae:	30 0c 28             	xor    BYTE PTR [eax+ebp*1],cl
    2fb1:	00 00                	add    BYTE PTR [eax],al
    2fb3:	00 03                	add    BYTE PTR [ebx],al
    2fb5:	46                   	inc    esi
    2fb6:	38 01                	cmp    BYTE PTR [ecx],al
    2fb8:	00 00                	add    BYTE PTR [eax],al
    2fba:	05 03 e4 44 00       	add    eax,0x44e403
    2fbf:	30 00                	xor    BYTE PTR [eax],al
    2fc1:	62 01                	bound  eax,QWORD PTR [ecx]
    2fc3:	00 00                	add    BYTE PTR [eax],al
    2fc5:	04 00                	add    al,0x0
    2fc7:	88 11                	mov    BYTE PTR [ecx],dl
    2fc9:	00 00                	add    BYTE PTR [eax],al
    2fcb:	04 01                	add    al,0x1
    2fcd:	f4                   	hlt    
    2fce:	00 00                	add    BYTE PTR [eax],al
    2fd0:	00 0c 56             	add    BYTE PTR [esi+edx*2],cl
    2fd3:	0a 00                	or     al,BYTE PTR [eax]
    2fd5:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    2fd8:	00 00                	add    BYTE PTR [eax],al
    2fda:	e0 1c                	loopne 2ff8 <sysEnter_Vector-0x12d008>
    2fdc:	00 30                	add    BYTE PTR [eax],dh
    2fde:	b6 00                	mov    dh,0x0
    2fe0:	00 00                	add    BYTE PTR [eax],al
    2fe2:	ad                   	lods   eax,DWORD PTR ds:[esi]
    2fe3:	16                   	push   ss
    2fe4:	00 00                	add    BYTE PTR [eax],al
    2fe6:	02 01                	add    al,BYTE PTR [ecx]
    2fe8:	06                   	push   es
    2fe9:	64 00 00             	add    BYTE PTR fs:[eax],al
    2fec:	00 02                	add    BYTE PTR [edx],al
    2fee:	01 06                	add    DWORD PTR [esi],eax
    2ff0:	5d                   	pop    ebp
    2ff1:	00 00                	add    BYTE PTR [eax],al
    2ff3:	00 02                	add    BYTE PTR [edx],al
    2ff5:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    2ffb:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3002:	02 08                	add    cl,BYTE PTR [eax]
    3004:	05 00 00 00 00       	add    eax,0x0
    3009:	02 01                	add    al,BYTE PTR [ecx]
    300b:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    300e:	00 00                	add    BYTE PTR [eax],al
    3010:	02 02                	add    al,BYTE PTR [edx]
    3012:	07                   	pop    es
    3013:	0e                   	push   cs
    3014:	00 00                	add    BYTE PTR [eax],al
    3016:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    3019:	00 00                	add    BYTE PTR [eax],al
    301b:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    301e:	61                   	popa   
    301f:	00 00                	add    BYTE PTR [eax],al
    3021:	00 02                	add    BYTE PTR [edx],al
    3023:	04 07                	add    al,0x7
    3025:	3e 00 00             	add    BYTE PTR ds:[eax],al
    3028:	00 02                	add    BYTE PTR [edx],al
    302a:	08 07                	or     BYTE PTR [edi],al
    302c:	34 00                	xor    al,0x0
    302e:	00 00                	add    BYTE PTR [eax],al
    3030:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    3037:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    303a:	9b                   	fwait
    303b:	00 00                	add    BYTE PTR [eax],al
    303d:	00 02                	add    BYTE PTR [edx],al
    303f:	01 02                	add    DWORD PTR [edx],eax
    3041:	95                   	xchg   ebp,eax
    3042:	00 00                	add    BYTE PTR [eax],al
    3044:	00 02                	add    BYTE PTR [edx],al
    3046:	04 07                	add    al,0x7
    3048:	39 00                	cmp    DWORD PTR [eax],eax
    304a:	00 00                	add    BYTE PTR [eax],al
    304c:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    304f:	e1 00                	loope  3051 <sysEnter_Vector-0x12cfaf>
    3051:	00 00                	add    BYTE PTR [eax],al
    3053:	05 04 25 00 00       	add    eax,0x2504
    3058:	00 06                	add    BYTE PTR [esi],al
    305a:	74 0a                	je     3066 <sysEnter_Vector-0x12cf9a>
    305c:	00 00                	add    BYTE PTR [eax],al
    305e:	01 03                	add    DWORD PTR [ebx],eax
    3060:	e0 1c                	loopne 307e <sysEnter_Vector-0x12cf82>
    3062:	00 30                	add    BYTE PTR [eax],dh
    3064:	96                   	xchg   esi,eax
    3065:	00 00                	add    BYTE PTR [eax],al
    3067:	00 01                	add    BYTE PTR [ecx],al
    3069:	9c                   	pushf  
    306a:	e6 00                	out    0x0,al
    306c:	00 00                	add    BYTE PTR [eax],al
    306e:	07                   	pop    es
    306f:	50                   	push   eax
    3070:	0a 00                	or     al,BYTE PTR [eax]
    3072:	00 01                	add    BYTE PTR [ecx],al
    3074:	03 92 00 00 00 02    	add    edx,DWORD PTR [edx+0x2000000]
    307a:	91                   	xchg   ecx,eax
    307b:	00 08                	add    BYTE PTR [eax],cl
    307d:	64                   	fs
    307e:	73 74                	jae    30f4 <sysEnter_Vector-0x12cf0c>
    3080:	00 01                	add    BYTE PTR [ecx],al
    3082:	05 92 00 00 00       	add    eax,0x92
    3087:	02 91 6c 08 73 72    	add    dl,BYTE PTR [ecx+0x7273086c]
    308d:	63 00                	arpl   WORD PTR [eax],ax
    308f:	01 05 92 00 00 00    	add    DWORD PTR ds:0x92,eax
    3095:	02 91 68 08 65 6e    	add    dl,BYTE PTR [ecx+0x6e650868]
    309b:	64 00 01             	add    BYTE PTR fs:[ecx],al
    309e:	06                   	push   es
    309f:	92                   	xchg   edx,eax
    30a0:	00 00                	add    BYTE PTR [eax],al
    30a2:	00 02                	add    BYTE PTR [edx],al
    30a4:	91                   	xchg   ecx,eax
    30a5:	64 00 06             	add    BYTE PTR fs:[esi],al
    30a8:	6c                   	ins    BYTE PTR es:[edi],dx
    30a9:	0a 00                	or     al,BYTE PTR [eax]
    30ab:	00 01                	add    BYTE PTR [ecx],al
    30ad:	1f                   	pop    ds
    30ae:	76 1d                	jbe    30cd <sysEnter_Vector-0x12cf33>
    30b0:	00 30                	add    BYTE PTR [eax],dh
    30b2:	20 00                	and    BYTE PTR [eax],al
    30b4:	00 00                	add    BYTE PTR [eax],al
    30b6:	01 9c 0a 01 00 00 07 	add    DWORD PTR [edx+ecx*1+0x7000001],ebx
    30bd:	50                   	push   eax
    30be:	0a 00                	or     al,BYTE PTR [eax]
    30c0:	00 01                	add    BYTE PTR [ecx],al
    30c2:	1f                   	pop    ds
    30c3:	92                   	xchg   edx,eax
    30c4:	00 00                	add    BYTE PTR [eax],al
    30c6:	00 02                	add    BYTE PTR [edx],al
    30c8:	91                   	xchg   ecx,eax
    30c9:	00 00                	add    BYTE PTR [eax],al
    30cb:	09 4b 00             	or     DWORD PTR [ebx+0x0],ecx
    30ce:	00 00                	add    BYTE PTR [eax],al
    30d0:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    30d3:	00 00                	add    BYTE PTR [eax],al
    30d5:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    30db:	30 09                	xor    BYTE PTR [ecx],cl
    30dd:	af                   	scas   eax,DWORD PTR es:[edi]
    30de:	00 00                	add    BYTE PTR [eax],al
    30e0:	00 02                	add    BYTE PTR [edx],al
    30e2:	35 56 00 00 00       	xor    eax,0x56
    30e7:	05 03 e0 44 00       	add    eax,0x44e003
    30ec:	30 09                	xor    BYTE PTR [ecx],cl
    30ee:	5b                   	pop    ebx
    30ef:	01 00                	add    DWORD PTR [eax],eax
    30f1:	00 02                	add    BYTE PTR [edx],al
    30f3:	36                   	ss
    30f4:	56                   	push   esi
    30f5:	00 00                	add    BYTE PTR [eax],al
    30f7:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    30fd:	30 09                	xor    BYTE PTR [ecx],cl
    30ff:	54                   	push   esp
    3100:	00 00                	add    BYTE PTR [eax],al
    3102:	00 02                	add    BYTE PTR [edx],al
    3104:	37                   	aaa    
    3105:	56                   	push   esi
    3106:	00 00                	add    BYTE PTR [eax],al
    3108:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    310e:	30 09                	xor    BYTE PTR [ecx],cl
    3110:	28 00                	sub    BYTE PTR [eax],al
    3112:	00 00                	add    BYTE PTR [eax],al
    3114:	03 46 5f             	add    eax,DWORD PTR [esi+0x5f]
    3117:	01 00                	add    DWORD PTR [eax],eax
    3119:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    311f:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    3125:	00 00                	add    BYTE PTR [eax],al
    3127:	93                   	xchg   ebx,eax
    3128:	01 00                	add    DWORD PTR [eax],eax
    312a:	00 04 00             	add    BYTE PTR [eax+eax*1],al
    312d:	11 12                	adc    DWORD PTR [edx],edx
    312f:	00 00                	add    BYTE PTR [eax],al
    3131:	04 01                	add    al,0x1
    3133:	f4                   	hlt    
    3134:	00 00                	add    BYTE PTR [eax],al
    3136:	00 0c 85 0a 00 00 72 	add    BYTE PTR [eax*4+0x7200000a],cl
    313d:	00 00                	add    BYTE PTR [eax],al
    313f:	00 98 1d 00 30 8b    	add    BYTE PTR [eax-0x74cfffe3],bl
    3145:	00 00                	add    BYTE PTR [eax],al
    3147:	00 80 17 00 00 02    	add    BYTE PTR [eax+0x2000017],al
    314d:	01 06                	add    DWORD PTR [esi],eax
    314f:	64 00 00             	add    BYTE PTR fs:[eax],al
    3152:	00 02                	add    BYTE PTR [edx],al
    3154:	01 06                	add    DWORD PTR [esi],eax
    3156:	5d                   	pop    ebp
    3157:	00 00                	add    BYTE PTR [eax],al
    3159:	00 02                	add    BYTE PTR [edx],al
    315b:	02 05 ea 00 00 00    	add    al,BYTE PTR ds:0xea
    3161:	03 04 05 69 6e 74 00 	add    eax,DWORD PTR [eax*1+0x746e69]
    3168:	02 08                	add    cl,BYTE PTR [eax]
    316a:	05 00 00 00 00       	add    eax,0x0
    316f:	02 01                	add    al,BYTE PTR [ecx]
    3171:	08 5b 00             	or     BYTE PTR [ebx+0x0],bl
    3174:	00 00                	add    BYTE PTR [eax],al
    3176:	02 02                	add    al,BYTE PTR [edx]
    3178:	07                   	pop    es
    3179:	0e                   	push   cs
    317a:	00 00                	add    BYTE PTR [eax],al
    317c:	00 04 69             	add    BYTE PTR [ecx+ebp*2],al
    317f:	00 00                	add    BYTE PTR [eax],al
    3181:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3184:	61                   	popa   
    3185:	00 00                	add    BYTE PTR [eax],al
    3187:	00 02                	add    BYTE PTR [edx],al
    3189:	04 07                	add    al,0x7
    318b:	3e 00 00             	add    BYTE PTR ds:[eax],al
    318e:	00 02                	add    BYTE PTR [edx],al
    3190:	08 07                	or     BYTE PTR [edi],al
    3192:	34 00                	xor    al,0x0
    3194:	00 00                	add    BYTE PTR [eax],al
    3196:	02 04 05 05 00 00 00 	add    al,BYTE PTR [eax*1+0x5]
    319d:	02 0c 04             	add    cl,BYTE PTR [esp+eax*1]
    31a0:	9b                   	fwait
    31a1:	00 00                	add    BYTE PTR [eax],al
    31a3:	00 02                	add    BYTE PTR [edx],al
    31a5:	01 02                	add    DWORD PTR [edx],eax
    31a7:	95                   	xchg   ebp,eax
    31a8:	00 00                	add    BYTE PTR [eax],al
    31aa:	00 02                	add    BYTE PTR [edx],al
    31ac:	04 07                	add    al,0x7
    31ae:	39 00                	cmp    DWORD PTR [eax],eax
    31b0:	00 00                	add    BYTE PTR [eax],al
    31b2:	02 04 07             	add    al,BYTE PTR [edi+eax*1]
    31b5:	e1 00                	loope  31b7 <sysEnter_Vector-0x12ce49>
    31b7:	00 00                	add    BYTE PTR [eax],al
    31b9:	05 04 25 00 00       	add    eax,0x2504
    31be:	00 06                	add    BYTE PTR [esi],al
    31c0:	7d 0a                	jge    31cc <sysEnter_Vector-0x12ce34>
    31c2:	00 00                	add    BYTE PTR [eax],al
    31c4:	01 33                	add    DWORD PTR [ebx],esi
    31c6:	92                   	xchg   edx,eax
    31c7:	00 00                	add    BYTE PTR [eax],al
    31c9:	00 98 1d 00 30 6e    	add    BYTE PTR [eax+0x6e30001d],bl
    31cf:	00 00                	add    BYTE PTR [eax],al
    31d1:	00 01                	add    BYTE PTR [ecx],al
    31d3:	9c                   	pushf  
    31d4:	e4 00                	in     al,0x0
    31d6:	00 00                	add    BYTE PTR [eax],al
    31d8:	07                   	pop    es
    31d9:	a2 0a 00 00 01       	mov    ds:0x100000a,al
    31de:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
    31e4:	91                   	xchg   ecx,eax
    31e5:	00 07                	add    BYTE PTR [edi],al
    31e7:	9f                   	lahf   
    31e8:	0a 00                	or     al,BYTE PTR [eax]
    31ea:	00 01                	add    BYTE PTR [ecx],al
    31ec:	33 92 00 00 00 02    	xor    edx,DWORD PTR [edx+0x2000000]
    31f2:	91                   	xchg   ecx,eax
    31f3:	04 08                	add    al,0x8
    31f5:	61                   	popa   
    31f6:	00 01                	add    BYTE PTR [ecx],al
    31f8:	35 92 00 00 00       	xor    eax,0x92
    31fd:	01 56 08             	add    DWORD PTR [esi+0x8],edx
    3200:	62 00                	bound  eax,QWORD PTR [eax]
    3202:	01 35 92 00 00 00    	add    DWORD PTR ds:0x92,esi
    3208:	01 53 00             	add    DWORD PTR [ebx+0x0],edx
    320b:	09 92 0a 00 00 01    	or     DWORD PTR [edx+0x100000a],edx
    3211:	52                   	push   edx
    3212:	92                   	xchg   edx,eax
    3213:	00 00                	add    BYTE PTR [eax],al
    3215:	00 06                	add    BYTE PTR [esi],al
    3217:	1e                   	push   ds
    3218:	00 30                	add    BYTE PTR [eax],dh
    321a:	1d 00 00 00 01       	sbb    eax,0x1000000
    321f:	9c                   	pushf  
    3220:	1a 01                	sbb    al,BYTE PTR [ecx]
    3222:	00 00                	add    BYTE PTR [eax],al
    3224:	07                   	pop    es
    3225:	a2 0a 00 00 01       	mov    ds:0x100000a,al
    322a:	52                   	push   edx
    322b:	92                   	xchg   edx,eax
    322c:	00 00                	add    BYTE PTR [eax],al
    322e:	00 02                	add    BYTE PTR [edx],al
    3230:	91                   	xchg   ecx,eax
    3231:	00 07                	add    BYTE PTR [edi],al
    3233:	9f                   	lahf   
    3234:	0a 00                	or     al,BYTE PTR [eax]
    3236:	00 01                	add    BYTE PTR [ecx],al
    3238:	52                   	push   edx
    3239:	92                   	xchg   edx,eax
    323a:	00 00                	add    BYTE PTR [eax],al
    323c:	00 02                	add    BYTE PTR [edx],al
    323e:	91                   	xchg   ecx,eax
    323f:	04 00                	add    al,0x0
    3241:	0a 25 00 00 00 2a    	or     ah,BYTE PTR ds:0x2a000000
    3247:	01 00                	add    DWORD PTR [eax],eax
    3249:	00 0b                	add    BYTE PTR [ebx],cl
    324b:	8b 00                	mov    eax,DWORD PTR [eax]
    324d:	00 00                	add    BYTE PTR [eax],al
    324f:	65 00 0c 99          	add    BYTE PTR gs:[ecx+ebx*4],cl
    3253:	0a 00                	or     al,BYTE PTR [eax]
    3255:	00 01                	add    BYTE PTR [ecx],al
    3257:	19 1a                	sbb    DWORD PTR [edx],ebx
    3259:	01 00                	add    DWORD PTR [eax],eax
    325b:	00 05 03 80 43 00    	add    BYTE PTR ds:0x438003,al
    3261:	30 0d 4b 00 00 00    	xor    BYTE PTR ds:0x4b,cl
    3267:	02 34 56             	add    dh,BYTE PTR [esi+edx*2]
    326a:	00 00                	add    BYTE PTR [eax],al
    326c:	00 05 03 dc 44 00    	add    BYTE PTR ds:0x44dc03,al
    3272:	30 0d af 00 00 00    	xor    BYTE PTR ds:0xaf,cl
    3278:	02 35 56 00 00 00    	add    dh,BYTE PTR ds:0x56
    327e:	05 03 e0 44 00       	add    eax,0x44e003
    3283:	30 0d 5b 01 00 00    	xor    BYTE PTR ds:0x15b,cl
    3289:	02 36                	add    dh,BYTE PTR [esi]
    328b:	56                   	push   esi
    328c:	00 00                	add    BYTE PTR [eax],al
    328e:	00 05 03 d8 44 00    	add    BYTE PTR ds:0x44d803,al
    3294:	30 0d 54 00 00 00    	xor    BYTE PTR ds:0x54,cl
    329a:	02 37                	add    dh,BYTE PTR [edi]
    329c:	56                   	push   esi
    329d:	00 00                	add    BYTE PTR [eax],al
    329f:	00 05 03 e8 44 00    	add    BYTE PTR ds:0x44e803,al
    32a5:	30 0d 28 00 00 00    	xor    BYTE PTR ds:0x28,cl
    32ab:	03 46 90             	add    eax,DWORD PTR [esi-0x70]
    32ae:	01 00                	add    DWORD PTR [eax],eax
    32b0:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    32b6:	30 05 04 92 00 00    	xor    BYTE PTR ds:0x9204,al
    32bc:	00 00                	add    BYTE PTR [eax],al
    32be:	44                   	inc    esp
    32bf:	05 00 00 04 00       	add    eax,0x40000
    32c4:	d9 12                	fst    DWORD PTR [edx]
    32c6:	00 00                	add    BYTE PTR [eax],al
    32c8:	04 01                	add    al,0x1
    32ca:	f4                   	hlt    
    32cb:	00 00                	add    BYTE PTR [eax],al
    32cd:	00 0c a9             	add    BYTE PTR [ecx+ebp*4],cl
    32d0:	0a 00                	or     al,BYTE PTR [eax]
    32d2:	00 72 00             	add    BYTE PTR [edx+0x0],dh
    32d5:	00 00                	add    BYTE PTR [eax],al
    32d7:	24 1e                	and    al,0x1e
    32d9:	00 30                	add    BYTE PTR [eax],dh
    32db:	bb 0c 00 00 4b       	mov    ebx,0x4b00000c
    32e0:	18 00                	sbb    BYTE PTR [eax],al
    32e2:	00 02                	add    BYTE PTR [edx],al
    32e4:	07                   	pop    es
    32e5:	03 00                	add    eax,DWORD PTR [eax]
    32e7:	00 04 e0             	add    BYTE PTR [eax+eiz*8],al
    32ea:	00 00                	add    BYTE PTR [eax],al
    32ec:	00 06                	add    BYTE PTR [esi],al
    32ee:	15 e0 00 00 00       	adc    eax,0xe0
    32f3:	03 6c 03 00          	add    ebp,DWORD PTR [ebx+eax*1+0x0]
    32f7:	00 00                	add    BYTE PTR [eax],al
    32f9:	03 a4 03 00 00 01 03 	add    esp,DWORD PTR [ebx+eax*1+0x3010000]
    3300:	73 02                	jae    3304 <sysEnter_Vector-0x12ccfc>
    3302:	00 00                	add    BYTE PTR [eax],al
    3304:	02 03                	add    al,BYTE PTR [ebx]
    3306:	f9                   	stc    
    3307:	02 00                	add    al,BYTE PTR [eax]
    3309:	00 03                	add    BYTE PTR [ebx],al
    330b:	03 53 02             	add    edx,DWORD PTR [ebx+0x2]
    330e:	00 00                	add    BYTE PTR [eax],al
    3310:	04 03                	add    al,0x3
    3312:	be 03 00 00 05       	mov    esi,0x5000003
    3317:	03 1d 03 00 00 06    	add    ebx,DWORD PTR ds:0x6000003
    331d:	03 66 02             	add    esp,DWORD PTR [esi+0x2]
    3320:	00 00                	add    BYTE PTR [eax],al
    3322:	07                   	pop    es
    3323:	03 f4                	add    esi,esp
    3325:	03 00                	add    eax,DWORD PTR [eax]
    3327:	00 4f 03             	add    BYTE PTR [edi+0x3],cl
    332a:	5f                   	pop    edi
    332b:	03 00                	add    eax,DWORD PTR [eax]
    332d:	00 59 03             	add    BYTE PTR [ecx+0x3],bl
    3330:	03 04 00             	add    eax,DWORD PTR [eax+eax*1]
    3333:	00 61 03             	add    BYTE PTR [ecx+0x3],ah
    3336:	e5 02                	in     eax,0x2
    3338:	00 00                	add    BYTE PTR [eax],al
    333a:	97                   	xchg   edi,eax
    333b:	04 7c                	add    al,0x7c
    333d:	03 00                	add    eax,DWORD PTR [eax]
    333f:	00 63 01             	add    BYTE PTR [ebx+0x1],ah
    3342:	04 52                	add    al,0x52
    3344:	03 00                	add    eax,DWORD PTR [eax]
    3346:	00 64 01 04          	add    BYTE PTR [ecx+eax*1+0x4],ah
    334a:	e6 03                	out    0x3,al
    334c:	00 00                	add    BYTE PTR [eax],al
    334e:	65 01 04 c7          	add    DWORD PTR gs:[edi+eax*8],eax
    3352:	02 00                	add    al,BYTE PTR [eax]
    3354:	00 66 01             	add    BYTE PTR [esi+0x1],ah
    3357:	04 1b                	add    al,0x1b
    3359:	04 00                	add    al,0x0
    335b:	00 67 01             	add    BYTE PTR [edi+0x1],ah
    335e:	04 2a                	add    al,0x2a
    3360:	03 00                	add    eax,DWORD PTR [eax]
    3362:	00 68 01             	add    BYTE PTR [eax+0x1],ch
    3365:	04 ac                	add    al,0xac
    3367:	02 00                	add    al,BYTE PTR [eax]
    3369:	00 69 01             	add    BYTE PTR [ecx+0x1],ch
    336c:	04 93                	add    al,0x93
    336e:	03 00                	add    eax,DWORD PTR [eax]
    3370:	00 70 01             	add    BYTE PTR [eax+0x1],dh
    3373:	04 d5                	add    al,0xd5
    3375:	02 00                	add    al,BYTE PTR [eax]
    3377:	00 71 01             	add    BYTE PTR [ecx+0x1],dh
    337a:	04 cc                	add    al,0xcc
    337c:	03 00                	add    eax,DWORD PTR [eax]
    337e:	00 00                	add    BYTE PTR [eax],al
    3380:	03 04 37             	add    eax,DWORD PTR [edi+esi*1]
    3383:	03 00                	add    eax,DWORD PTR [eax]
    3385:	00 01                	add    BYTE PTR [ecx],al
    3387:	03 04 bb             	add    eax,DWORD PTR [ebx+edi*4]
    338a:	02 00                	add    al,BYTE PTR [eax]
    338c:	00 02                	add    BYTE PTR [edx],al
    338e:	03 04 80             	add    eax,DWORD PTR [eax+eax*4]
    3391:	02 00                	add    al,BYTE PTR [eax]
    3393:	00 03                	add    BYTE PTR [ebx],al
    3395:	03 04 90             	add    eax,DWORD PTR [eax+edx*4]
    3398:	02 00                	add    al,BYTE PTR [eax]
    339a:	00 04 03             	add    BYTE PTR [ebx+eax*1],al
    339d:	00 05 04 07 3e 00    	add    BYTE PTR ds:0x3e0704,al
    33a3:	00 00                	add    BYTE PTR [eax],al
    33a5:	05 01 06 64 00       	add    eax,0x640601
    33aa:	00 00                	add    BYTE PTR [eax],al
    33ac:	05 01 06 5d 00       	add    eax,0x5d0601
    33b1:	00 00                	add    BYTE PTR [eax],al
    33b3:	05 02 05 ea 00       	add    eax,0xea0502
    33b8:	00 00                	add    BYTE PTR [eax],al
    33ba:	06                   	push   es
    33bb:	04 05                	add    al,0x5
    33bd:	69 6e 74 00 05 08 05 	imul   ebp,DWORD PTR [esi+0x74],0x5080500
    33c4:	00 00                	add    BYTE PTR [eax],al
    33c6:	00 00                	add    BYTE PTR [eax],al
    33c8:	05 01 08 5b 00       	add    eax,0x5b0801
    33cd:	00 00                	add    BYTE PTR [eax],al
    33cf:	05 02 07 0e 00       	add    eax,0xe0702
    33d4:	00 00                	add    BYTE PTR [eax],al
    33d6:	07                   	pop    es
    33d7:	69 00 00 00 02 34    	imul   eax,DWORD PTR [eax],0x34020000
    33dd:	e0 00                	loopne 33df <sysEnter_Vector-0x12cc21>
    33df:	00 00                	add    BYTE PTR [eax],al
    33e1:	05 08 07 34 00       	add    eax,0x340708
    33e6:	00 00                	add    BYTE PTR [eax],al
    33e8:	05 04 05 05 00       	add    eax,0x50504
    33ed:	00 00                	add    BYTE PTR [eax],al
    33ef:	05 0c 04 9b 00       	add    eax,0x9b040c
    33f4:	00 00                	add    BYTE PTR [eax],al
    33f6:	07                   	pop    es
    33f7:	4b                   	dec    ebx
    33f8:	0b 00                	or     eax,DWORD PTR [eax]
    33fa:	00 03                	add    BYTE PTR [ebx],al
    33fc:	2a 2a                	sub    ch,BYTE PTR [edx]
    33fe:	01 00                	add    DWORD PTR [eax],eax
    3400:	00 08                	add    BYTE PTR [eax],cl
    3402:	74 6d                	je     3471 <sysEnter_Vector-0x12cb8f>
    3404:	00 2c 03             	add    BYTE PTR [ebx+eax*1],ch
    3407:	2c d3                	sub    al,0xd3
    3409:	01 00                	add    DWORD PTR [eax],eax
    340b:	00 09                	add    BYTE PTR [ecx],cl
    340d:	8e 0b                	mov    cs,WORD PTR [ebx]
    340f:	00 00                	add    BYTE PTR [eax],al
    3411:	03 2e                	add    ebp,DWORD PTR [esi]
    3413:	fc                   	cld    
    3414:	00 00                	add    BYTE PTR [eax],al
    3416:	00 00                	add    BYTE PTR [eax],al
    3418:	09 2c 0b             	or     DWORD PTR [ebx+ecx*1],ebp
    341b:	00 00                	add    BYTE PTR [eax],al
    341d:	03 2f                	add    ebp,DWORD PTR [edi]
    341f:	fc                   	cld    
    3420:	00 00                	add    BYTE PTR [eax],al
    3422:	00 04 09             	add    BYTE PTR [ecx+ecx*1],al
    3425:	be 0a 00 00 03       	mov    esi,0x300000a
    342a:	30 fc                	xor    ah,bh
    342c:	00 00                	add    BYTE PTR [eax],al
    342e:	00 08                	add    BYTE PTR [eax],cl
    3430:	09 86 0b 00 00 03    	or     DWORD PTR [esi+0x300000b],eax
    3436:	31 fc                	xor    esp,edi
    3438:	00 00                	add    BYTE PTR [eax],al
    343a:	00 0c 09             	add    BYTE PTR [ecx+ecx*1],cl
    343d:	f6                   	(bad)  
    343e:	0a 00                	or     al,BYTE PTR [eax]
    3440:	00 03                	add    BYTE PTR [ebx],al
    3442:	32 fc                	xor    bh,ah
    3444:	00 00                	add    BYTE PTR [eax],al
    3446:	00 10                	add    BYTE PTR [eax],dl
    3448:	09 fd                	or     ebp,edi
    344a:	0a 00                	or     al,BYTE PTR [eax]
    344c:	00 03                	add    BYTE PTR [ebx],al
    344e:	33 fc                	xor    edi,esp
    3450:	00 00                	add    BYTE PTR [eax],al
    3452:	00 14 09             	add    BYTE PTR [ecx+ecx*1],dl
    3455:	78 0b                	js     3462 <sysEnter_Vector-0x12cb9e>
    3457:	00 00                	add    BYTE PTR [eax],al
    3459:	03 34 fc             	add    esi,DWORD PTR [esp+edi*8]
    345c:	00 00                	add    BYTE PTR [eax],al
    345e:	00 18                	add    BYTE PTR [eax],bl
    3460:	09 33                	or     DWORD PTR [ebx],esi
    3462:	0b 00                	or     eax,DWORD PTR [eax]
    3464:	00 03                	add    BYTE PTR [ebx],al
    3466:	35 fc 00 00 00       	xor    eax,0xfc
    346b:	1c 09                	sbb    al,0x9
    346d:	13 0b                	adc    ecx,DWORD PTR [ebx]
    346f:	00 00                	add    BYTE PTR [eax],al
    3471:	03 36                	add    esi,DWORD PTR [esi]
    3473:	fc                   	cld    
    3474:	00 00                	add    BYTE PTR [eax],al
    3476:	00 20                	add    BYTE PTR [eax],ah
    3478:	09 6e 0b             	or     DWORD PTR [esi+0xb],ebp
    347b:	00 00                	add    BYTE PTR [eax],al
    347d:	03 37                	add    esi,DWORD PTR [edi]
    347f:	2a 01                	sub    al,BYTE PTR [ecx]
    3481:	00 00                	add    BYTE PTR [eax],al
    3483:	24 09                	and    al,0x9
    3485:	95                   	xchg   ebp,eax
    3486:	0b 00                	or     eax,DWORD PTR [eax]
    3488:	00 03                	add    BYTE PTR [ebx],al
    348a:	38 d3                	cmp    bl,dl
    348c:	01 00                	add    DWORD PTR [eax],eax
    348e:	00 28                	add    BYTE PTR [eax],ch
    3490:	00 0a                	add    BYTE PTR [edx],cl
    3492:	04 d9                	add    al,0xd9
    3494:	01 00                	add    DWORD PTR [eax],eax
    3496:	00 0b                	add    BYTE PTR [ebx],cl
    3498:	e7 00                	out    0x0,eax
    349a:	00 00                	add    BYTE PTR [eax],al
    349c:	05 01 02 95 00       	add    eax,0x950201
    34a1:	00 00                	add    BYTE PTR [eax],al
    34a3:	05 04 07 39 00       	add    eax,0x390704
    34a8:	00 00                	add    BYTE PTR [eax],al
    34aa:	05 04 07 e1 00       	add    eax,0xe10704
    34af:	00 00                	add    BYTE PTR [eax],al
    34b1:	0a 04 e7             	or     al,BYTE PTR [edi+eiz*8]
    34b4:	00 00                	add    BYTE PTR [eax],al
    34b6:	00 0c c6             	add    BYTE PTR [esi+eax*8],cl
    34b9:	0a 00                	or     al,BYTE PTR [eax]
    34bb:	00 01                	add    BYTE PTR [ecx],al
    34bd:	16                   	push   ss
    34be:	38 01                	cmp    BYTE PTR [ecx],al
    34c0:	00 00                	add    BYTE PTR [eax],al
    34c2:	24 1e                	and    al,0x1e
    34c4:	00 30                	add    BYTE PTR [eax],dh
    34c6:	44                   	inc    esp
    34c7:	00 00                	add    BYTE PTR [eax],al
    34c9:	00 01                	add    BYTE PTR [ecx],al
    34cb:	9c                   	pushf  
    34cc:	21 02                	and    DWORD PTR [edx],eax
    34ce:	00 00                	add    BYTE PTR [eax],al
    34d0:	0d 7a 04 00 00       	or     eax,0x47a
    34d5:	01 18                	add    DWORD PTR [eax],ebx
    34d7:	18 01                	sbb    BYTE PTR [ecx],al
    34d9:	00 00                	add    BYTE PTR [eax],al
    34db:	02 91 6c 00 0e 22    	add    dl,BYTE PTR [ecx+0x220e006c]
    34e1:	0b 00                	or     eax,DWORD PTR [eax]
    34e3:	00 01                	add    BYTE PTR [ecx],al
    34e5:	1e                   	push   ds
    34e6:	8f 02                	pop    DWORD PTR [edx]
    34e8:	00 00                	add    BYTE PTR [eax],al
    34ea:	68 1e 00 30 19       	push   0x1930001e
    34ef:	03 00                	add    eax,DWORD PTR [eax]
    34f1:	00 01                	add    BYTE PTR [ecx],al
    34f3:	9c                   	pushf  
    34f4:	8f 02                	pop    DWORD PTR [edx]
    34f6:	00 00                	add    BYTE PTR [eax],al
    34f8:	0f 9d 0b             	setge  BYTE PTR [ebx]
    34fb:	00 00                	add    BYTE PTR [eax],al
    34fd:	01 1e                	add    DWORD PTR [esi],ebx
    34ff:	95                   	xchg   ebp,eax
    3500:	02 00                	add    al,BYTE PTR [eax]
    3502:	00 02                	add    BYTE PTR [edx],al
    3504:	91                   	xchg   ecx,eax
    3505:	00 0f                	add    BYTE PTR [edi],cl
    3507:	45                   	inc    ebp
    3508:	0b 00                	or     eax,DWORD PTR [eax]
    350a:	00 01                	add    BYTE PTR [ecx],al
    350c:	1e                   	push   ds
    350d:	8f 02                	pop    DWORD PTR [edx]
    350f:	00 00                	add    BYTE PTR [eax],al
    3511:	02 91 04 0d 69 0b    	add    dl,BYTE PTR [ecx+0xb690d04]
    3517:	00 00                	add    BYTE PTR [eax],al
    3519:	01 20                	add    DWORD PTR [eax],esp
    351b:	38 01                	cmp    BYTE PTR [ecx],al
    351d:	00 00                	add    BYTE PTR [eax],al
    351f:	02 91 68 0d 5e 0b    	add    dl,BYTE PTR [ecx+0xb5e0d68]
    3525:	00 00                	add    BYTE PTR [eax],al
    3527:	01 21                	add    DWORD PTR [ecx],esp
    3529:	e5 01                	in     eax,0x1
    352b:	00 00                	add    BYTE PTR [eax],al
    352d:	02 91 64 0d 1c 0b    	add    dl,BYTE PTR [ecx+0xb1c0d64]
    3533:	00 00                	add    BYTE PTR [eax],al
    3535:	01 21                	add    DWORD PTR [ecx],esp
    3537:	e5 01                	in     eax,0x1
    3539:	00 00                	add    BYTE PTR [eax],al
    353b:	02 91 70 0d 00 0b    	add    dl,BYTE PTR [ecx+0xb000d70]
    3541:	00 00                	add    BYTE PTR [eax],al
    3543:	01 22                	add    DWORD PTR [edx],esp
    3545:	fc                   	cld    
    3546:	00 00                	add    BYTE PTR [eax],al
    3548:	00 02                	add    BYTE PTR [edx],al
    354a:	91                   	xchg   ecx,eax
    354b:	6c                   	ins    BYTE PTR es:[edi],dx
    354c:	00 0a                	add    BYTE PTR [edx],cl
    354e:	04 43                	add    al,0x43
    3550:	01 00                	add    DWORD PTR [eax],eax
    3552:	00 0a                	add    BYTE PTR [edx],cl
    3554:	04 9b                	add    al,0x9b
    3556:	02 00                	add    al,BYTE PTR [eax]
    3558:	00 0b                	add    BYTE PTR [ebx],cl
    355a:	38 01                	cmp    BYTE PTR [ecx],al
    355c:	00 00                	add    BYTE PTR [eax],al
    355e:	10 e1                	adc    cl,ah
    3560:	0a 00                	or     al,BYTE PTR [eax]
    3562:	00 01                	add    BYTE PTR [ecx],al
    3564:	3b 8f 02 00 00 81    	cmp    ecx,DWORD PTR [edi-0x7efffffe]
    356a:	21 00                	and    DWORD PTR [eax],eax
    356c:	30 1d 00 00 00 01    	xor    BYTE PTR ds:0x1000000,bl
    3572:	9c                   	pushf  
    3573:	d6                   	(bad)  
    3574:	02 00                	add    al,BYTE PTR [eax]
    3576:	00 0f                	add    BYTE PTR [edi],cl
    3578:	9d                   	popf   
    3579:	0b 00                	or     eax,DWORD PTR [eax]
    357b:	00 01                	add    BYTE PTR [ecx],al
    357d:	3b 95 02 00 00 02    	cmp    edx,DWORD PTR [ebp+0x2000002]
    3583:	91                   	xchg   ecx,eax
    3584:	00 0f                	add    BYTE PTR [edi],cl
    3586:	45                   	inc    ebp
    3587:	0b 00                	or     eax,DWORD PTR [eax]
    3589:	00 01                	add    BYTE PTR [ecx],al
    358b:	3b 8f 02 00 00 02    	cmp    ecx,DWORD PTR [edi+0x2000002]
    3591:	91                   	xchg   ecx,eax
    3592:	04 00                	add    al,0x0
    3594:	10 b4 0a 00 00 01 40 	adc    BYTE PTR [edx+ecx*1+0x40010000],dh
    359b:	8f 02                	pop    DWORD PTR [edx]
    359d:	00 00                	add    BYTE PTR [eax],al
    359f:	9e                   	sahf   
    35a0:	21 00                	and    DWORD PTR [eax],eax
    35a2:	30 41 00             	xor    BYTE PTR [ecx+0x0],al
    35a5:	00 00                	add    BYTE PTR [eax],al
    35a7:	01 9c 18 03 00 00 0f 	add    DWORD PTR [eax+ebx*1+0xf000003],ebx
    35ae:	9d                   	popf   
    35af:	0b 00                	or     eax,DWORD PTR [eax]
    35b1:	00 01                	add    BYTE PTR [ecx],al
    35b3:	40                   	inc    eax
    35b4:	95                   	xchg   ebp,eax
    35b5:	02 00                	add    al,BYTE PTR [eax]
    35b7:	00 02                	add    BYTE PTR [edx],al
    35b9:	91                   	xchg   ecx,eax
    35ba:	00 11                	add    BYTE PTR [ecx],dl
    35bc:	74 00                	je     35be <sysEnter_Vector-0x12ca42>
    35be:	01 41 38             	add    DWORD PTR [ecx+0x38],eax
    35c1:	01 00                	add    DWORD PTR [eax],eax
    35c3:	00 02                	add    BYTE PTR [edx],al
    35c5:	91                   	xchg   ecx,eax
    35c6:	6c                   	ins    BYTE PTR es:[edi],dx
    35c7:	0d 45 0b 00 00       	or     eax,0xb45
    35cc:	01 42 43             	add    DWORD PTR [edx+0x43],eax
    35cf:	01 00                	add    DWORD PTR [eax],eax
    35d1:	00 02                	add    BYTE PTR [edx],al
    35d3:	91                   	xchg   ecx,eax
    35d4:	40                   	inc    eax
    35d5:	00 10                	add    BYTE PTR [eax],dl
    35d7:	a3 0b 00 00 01       	mov    ds:0x100000b,eax
    35dc:	48                   	dec    eax
    35dd:	8f 02                	pop    DWORD PTR [edx]
    35df:	00 00                	add    BYTE PTR [eax],al
    35e1:	df 21                	fbld   TBYTE PTR [ecx]
    35e3:	00 30                	add    BYTE PTR [eax],dh
    35e5:	35 00 00 00 01       	xor    eax,0x1000000
    35ea:	9c                   	pushf  
    35eb:	5a                   	pop    edx
    35ec:	03 00                	add    eax,DWORD PTR [eax]
    35ee:	00 0f                	add    BYTE PTR [edi],cl
    35f0:	9d                   	popf   
    35f1:	0b 00                	or     eax,DWORD PTR [eax]
    35f3:	00 01                	add    BYTE PTR [ecx],al
    35f5:	48                   	dec    eax
    35f6:	95                   	xchg   ebp,eax
    35f7:	02 00                	add    al,BYTE PTR [eax]
    35f9:	00 02                	add    BYTE PTR [edx],al
    35fb:	91                   	xchg   ecx,eax
    35fc:	00 0f                	add    BYTE PTR [edi],cl
    35fe:	45                   	inc    ebp
    35ff:	0b 00                	or     eax,DWORD PTR [eax]
    3601:	00 01                	add    BYTE PTR [ecx],al
    3603:	48                   	dec    eax
    3604:	8f 02                	pop    DWORD PTR [edx]
    3606:	00 00                	add    BYTE PTR [eax],al
    3608:	02 91 04 11 74 00    	add    dl,BYTE PTR [ecx+0x741104]
    360e:	01 4a 38             	add    DWORD PTR [edx+0x38],ecx
    3611:	01 00                	add    DWORD PTR [eax],eax
    3613:	00 02                	add    BYTE PTR [edx],al
    3615:	91                   	xchg   ecx,eax
    3616:	74 00                	je     3618 <sysEnter_Vector-0x12c9e8>
    3618:	10 52 0b             	adc    BYTE PTR [edx+0xb],dl
    361b:	00 00                	add    BYTE PTR [eax],al
    361d:	01 50 8f             	add    DWORD PTR [eax-0x71],edx
    3620:	02 00                	add    al,BYTE PTR [eax]
    3622:	00 14 22             	add    BYTE PTR [edx+eiz*1],dl
    3625:	00 30                	add    BYTE PTR [eax],dh
    3627:	1d 00 00 00 01       	sbb    eax,0x1000000
    362c:	9c                   	pushf  
    362d:	90                   	nop
    362e:	03 00                	add    eax,DWORD PTR [eax]
    3630:	00 0f                	add    BYTE PTR [edi],cl
    3632:	9d                   	popf   
    3633:	0b 00                	or     eax,DWORD PTR [eax]
    3635:	00 01                	add    BYTE PTR [ecx],al
    3637:	50                   	push   eax
    3638:	95                   	xchg   ebp,eax
    3639:	02 00                	add    al,BYTE PTR [eax]
    363b:	00 02                	add    BYTE PTR [edx],al
    363d:	91                   	xchg   ecx,eax
    363e:	00 0f                	add    BYTE PTR [edi],cl
    3640:	45                   	inc    ebp
    3641:	0b 00                	or     eax,DWORD PTR [eax]
    3643:	00 01                	add    BYTE PTR [ecx],al
    3645:	50                   	push   eax
    3646:	8f 02                	pop    DWORD PTR [edx]
    3648:	00 00                	add    BYTE PTR [eax],al
    364a:	02 91 04 00 0e 67    	add    dl,BYTE PTR [ecx+0x670e0004]
    3650:	0b 00                	or     eax,DWORD PTR [eax]
    3652:	00 01                	add    BYTE PTR [ecx],al
    3654:	54                   	push   esp
    3655:	38 01                	cmp    BYTE PTR [ecx],al
    3657:	00 00                	add    BYTE PTR [eax],al
    3659:	31 22                	xor    DWORD PTR [edx],esp
    365b:	00 30                	add    BYTE PTR [eax],dh
    365d:	41                   	inc    ecx
    365e:	08 00                	or     BYTE PTR [eax],al
    3660:	00 01                	add    BYTE PTR [ecx],al
    3662:	9c                   	pushf  
    3663:	28 04 00             	sub    BYTE PTR [eax+eax*1],al
    3666:	00 0f                	add    BYTE PTR [edi],cl
    3668:	45                   	inc    ebp
    3669:	0b 00                	or     eax,DWORD PTR [eax]
    366b:	00 01                	add    BYTE PTR [ecx],al
    366d:	54                   	push   esp
    366e:	8f 02                	pop    DWORD PTR [edx]
    3670:	00 00                	add    BYTE PTR [eax],al
    3672:	02 91 00 11 64 61    	add    dl,BYTE PTR [ecx+0x61641100]
    3678:	79 00                	jns    367a <sysEnter_Vector-0x12c986>
    367a:	01 55 2a             	add    DWORD PTR [ebp+0x2a],edx
    367d:	01 00                	add    DWORD PTR [eax],eax
    367f:	00 02                	add    BYTE PTR [edx],al
    3681:	91                   	xchg   ecx,eax
    3682:	68 0d 00 0b 00       	push   0xb000d
    3687:	00 01                	add    BYTE PTR [ecx],al
    3689:	55                   	push   ebp
    368a:	2a 01                	sub    al,BYTE PTR [ecx]
    368c:	00 00                	add    BYTE PTR [eax],al
    368e:	02 91 54 0d fd 0a    	add    dl,BYTE PTR [ecx+0xafd0d54]
    3694:	00 00                	add    BYTE PTR [eax],al
    3696:	01 56 fc             	add    DWORD PTR [esi-0x4],edx
    3699:	00 00                	add    BYTE PTR [eax],al
    369b:	00 02                	add    BYTE PTR [edx],al
    369d:	91                   	xchg   ecx,eax
    369e:	4c                   	dec    esp
    369f:	0d 36 0b 00 00       	or     eax,0xb36
    36a4:	01 57 fc             	add    DWORD PTR [edi-0x4],edx
    36a7:	00 00                	add    BYTE PTR [eax],al
    36a9:	00 02                	add    BYTE PTR [edx],al
    36ab:	91                   	xchg   ecx,eax
    36ac:	64                   	fs
    36ad:	0d 05 0b 00 00       	or     eax,0xb05
    36b2:	01 57 fc             	add    DWORD PTR [edi-0x4],edx
    36b5:	00 00                	add    BYTE PTR [eax],al
    36b7:	00 02                	add    BYTE PTR [edx],al
    36b9:	91                   	xchg   ecx,eax
    36ba:	60                   	pusha  
    36bb:	0d a2 05 00 00       	or     eax,0x5a2
    36c0:	01 58 2a             	add    DWORD PTR [eax+0x2a],ebx
    36c3:	01 00                	add    DWORD PTR [eax],eax
    36c5:	00 02                	add    BYTE PTR [edx],al
    36c7:	91                   	xchg   ecx,eax
    36c8:	50                   	push   eax
    36c9:	0d b9 0b 00 00       	or     eax,0xbb9
    36ce:	01 59 fc             	add    DWORD PTR [ecx-0x4],ebx
    36d1:	00 00                	add    BYTE PTR [eax],al
    36d3:	00 02                	add    BYTE PTR [edx],al
    36d5:	91                   	xchg   ecx,eax
    36d6:	5c                   	pop    esp
    36d7:	11 64 73 74          	adc    DWORD PTR [ebx+esi*2+0x74],esp
    36db:	00 01                	add    BYTE PTR [ecx],al
    36dd:	5a                   	pop    edx
    36de:	2a 01                	sub    al,BYTE PTR [ecx]
    36e0:	00 00                	add    BYTE PTR [eax],al
    36e2:	02 91 58 00 10 0b    	add    dl,BYTE PTR [ecx+0xb100058]
    36e8:	0b 00                	or     eax,DWORD PTR [eax]
    36ea:	00 01                	add    BYTE PTR [ecx],al
    36ec:	bf 8f 02 00 00       	mov    edi,0x28f
    36f1:	72 2a                	jb     371d <sysEnter_Vector-0x12c8e3>
    36f3:	00 30                	add    BYTE PTR [eax],dh
    36f5:	6d                   	ins    DWORD PTR es:[edi],dx
    36f6:	00 00                	add    BYTE PTR [eax],al
    36f8:	00 01                	add    BYTE PTR [ecx],al
    36fa:	9c                   	pushf  
    36fb:	6c                   	ins    BYTE PTR es:[edi],dx
    36fc:	04 00                	add    al,0x0
    36fe:	00 0f                	add    BYTE PTR [edi],cl
    3700:	69 0b 00 00 01 bf    	imul   ecx,DWORD PTR [ebx],0xbf010000
    3706:	8f 02                	pop    DWORD PTR [edx]
    3708:	00 00                	add    BYTE PTR [eax],al
    370a:	02 91 00 0f 3b 0b    	add    dl,BYTE PTR [ecx+0xb3b0f00]
    3710:	00 00                	add    BYTE PTR [eax],al
    3712:	01 bf de 01 00 00    	add    DWORD PTR [edi+0x1de],edi
    3718:	02 91 5c 0d c9 0a    	add    dl,BYTE PTR [ecx+0xac90d5c]
    371e:	00 00                	add    BYTE PTR [eax],al
    3720:	01 c1                	add    ecx,eax
    3722:	38 01                	cmp    BYTE PTR [ecx],al
    3724:	00 00                	add    BYTE PTR [eax],al
    3726:	02 91 6c 00 12 4b    	add    dl,BYTE PTR [ecx+0x4b12006c]
    372c:	00 00                	add    BYTE PTR [eax],al
    372e:	00 04 34             	add    BYTE PTR [esp+esi*1],al
    3731:	18 01                	sbb    BYTE PTR [ecx],al
    3733:	00 00                	add    BYTE PTR [eax],al
    3735:	05 03 dc 44 00       	add    eax,0x44dc03
    373a:	30 12                	xor    BYTE PTR [edx],dl
    373c:	af                   	scas   eax,DWORD PTR es:[edi]
    373d:	00 00                	add    BYTE PTR [eax],al
    373f:	00 04 35 18 01 00 00 	add    BYTE PTR [esi*1+0x118],al
    3746:	05 03 e0 44 00       	add    eax,0x44e003
    374b:	30 12                	xor    BYTE PTR [edx],dl
    374d:	5b                   	pop    ebx
    374e:	01 00                	add    DWORD PTR [eax],eax
    3750:	00 04 36             	add    BYTE PTR [esi+esi*1],al
    3753:	18 01                	sbb    BYTE PTR [ecx],al
    3755:	00 00                	add    BYTE PTR [eax],al
    3757:	05 03 d8 44 00       	add    eax,0x44d803
    375c:	30 12                	xor    BYTE PTR [edx],dl
    375e:	54                   	push   esp
    375f:	00 00                	add    BYTE PTR [eax],al
    3761:	00 04 37             	add    BYTE PTR [edi+esi*1],al
    3764:	18 01                	sbb    BYTE PTR [ecx],al
    3766:	00 00                	add    BYTE PTR [eax],al
    3768:	05 03 e8 44 00       	add    eax,0x44e803
    376d:	30 12                	xor    BYTE PTR [edx],dl
    376f:	28 00                	sub    BYTE PTR [eax],al
    3771:	00 00                	add    BYTE PTR [eax],al
    3773:	05 46 c1 04 00       	add    eax,0x4c146
    3778:	00 05 03 e4 44 00    	add    BYTE PTR ds:0x44e403,al
    377e:	30 0a                	xor    BYTE PTR [edx],cl
    3780:	04 f3                	add    al,0xf3
    3782:	01 00                	add    DWORD PTR [eax],eax
    3784:	00 12                	add    BYTE PTR [edx],dl
    3786:	cf                   	iret   
    3787:	0a 00                	or     al,BYTE PTR [eax]
    3789:	00 01                	add    BYTE PTR [ecx],al
    378b:	0c fc                	or     al,0xfc
    378d:	00 00                	add    BYTE PTR [eax],al
    378f:	00 05 03 e8 43 00    	add    BYTE PTR ds:0x43e803,al
    3795:	30 12                	xor    BYTE PTR [edx],dl
    3797:	b0 0b                	mov    al,0xb
    3799:	00 00                	add    BYTE PTR [eax],al
    379b:	01 0d 2a 01 00 00    	add    DWORD PTR ds:0x12a,ecx
    37a1:	05 03 0c 45 00       	add    eax,0x450c03
    37a6:	30 13                	xor    BYTE PTR [ebx],dl
    37a8:	f3 01 00             	repz add DWORD PTR [eax],eax
    37ab:	00 f9                	add    cl,bh
    37ad:	04 00                	add    al,0x0
    37af:	00 14 ec             	add    BYTE PTR [esp+ebp*8],dl
    37b2:	01 00                	add    DWORD PTR [eax],eax
    37b4:	00 01                	add    BYTE PTR [ecx],al
    37b6:	00 12                	add    BYTE PTR [edx],dl
    37b8:	d9 0a                	(bad)  [edx]
    37ba:	00 00                	add    BYTE PTR [eax],al
    37bc:	01 0e                	add    DWORD PTR [esi],ecx
    37be:	e9 04 00 00 05       	jmp    50037c7 <sysEnter_Vector+0x4ed37c7>
    37c3:	03 d0                	add    edx,eax
    37c5:	44                   	inc    esp
    37c6:	00 30                	add    BYTE PTR [eax],dh
    37c8:	12 ea                	adc    ch,dl
    37ca:	0a 00                	or     al,BYTE PTR [eax]
    37cc:	00 01                	add    BYTE PTR [ecx],al
    37ce:	0f fc 00             	paddb  mm0,QWORD PTR [eax]
    37d1:	00 00                	add    BYTE PTR [eax],al
    37d3:	05 03 10 45 00       	add    eax,0x451003
    37d8:	30 13                	xor    BYTE PTR [ebx],dl
    37da:	fc                   	cld    
    37db:	00 00                	add    BYTE PTR [eax],al
    37dd:	00 31                	add    BYTE PTR [ecx],dh
    37df:	05 00 00 14 ec       	add    eax,0xec140000
    37e4:	01 00                	add    DWORD PTR [eax],eax
    37e6:	00 01                	add    BYTE PTR [ecx],al
    37e8:	14 ec                	adc    al,0xec
    37ea:	01 00                	add    DWORD PTR [eax],eax
    37ec:	00 0b                	add    BYTE PTR [ebx],cl
    37ee:	00 12                	add    BYTE PTR [edx],dl
    37f0:	80 0b 00             	or     BYTE PTR [ebx],0x0
    37f3:	00 01                	add    BYTE PTR [ecx],al
    37f5:	11 42 05             	adc    DWORD PTR [edx+0x5],eax
    37f8:	00 00                	add    BYTE PTR [eax],al
    37fa:	05 03 20 42 00       	add    eax,0x422003
    37ff:	30 0b                	xor    BYTE PTR [ebx],cl
    3801:	1b                   	.byte 0x1b
    3802:	05                   	.byte 0x5
    3803:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
       0:	01 11                	add    DWORD PTR [ecx],edx
       2:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
       8:	0e                   	push   cs
       9:	1b 0e                	sbb    ecx,DWORD PTR [esi]
       b:	11 01                	adc    DWORD PTR [ecx],eax
       d:	12 06                	adc    al,BYTE PTR [esi]
       f:	10 17                	adc    BYTE PTR [edi],dl
      11:	00 00                	add    BYTE PTR [eax],al
      13:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      16:	0b 0b                	or     ecx,DWORD PTR [ebx]
      18:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      1b:	0e                   	push   cs
      1c:	00 00                	add    BYTE PTR [eax],al
      1e:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      21:	0b 0b                	or     ecx,DWORD PTR [ebx]
      23:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      26:	08 00                	or     BYTE PTR [eax],al
      28:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      2b:	00 03                	add    BYTE PTR [ebx],al
      2d:	0e                   	push   cs
      2e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      30:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      32:	49                   	dec    ecx
      33:	13 00                	adc    eax,DWORD PTR [eax]
      35:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      3b:	49                   	dec    ecx
      3c:	13 00                	adc    eax,DWORD PTR [eax]
      3e:	00 06                	add    BYTE PTR [esi],al
      40:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
      44:	00 00                	add    BYTE PTR [eax],al
      46:	07                   	pop    es
      47:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      4a:	19 03                	sbb    DWORD PTR [ebx],eax
      4c:	0e                   	push   cs
      4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      51:	27                   	daa    
      52:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      55:	11 01                	adc    DWORD PTR [ecx],eax
      57:	12 06                	adc    al,BYTE PTR [esi]
      59:	40                   	inc    eax
      5a:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      60:	00 00                	add    BYTE PTR [eax],al
      62:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
      68:	0b 3b                	or     edi,DWORD PTR [ebx]
      6a:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      6d:	02 18                	add    bl,BYTE PTR [eax]
      6f:	00 00                	add    BYTE PTR [eax],al
      71:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
      74:	03 0e                	add    ecx,DWORD PTR [esi]
      76:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      78:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      7a:	49                   	dec    ecx
      7b:	13 3f                	adc    edi,DWORD PTR [edi]
      7d:	19 02                	sbb    DWORD PTR [edx],eax
      7f:	18 00                	sbb    BYTE PTR [eax],al
      81:	00 00                	add    BYTE PTR [eax],al
      83:	01 11                	add    DWORD PTR [ecx],edx
      85:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
      8b:	0e                   	push   cs
      8c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
      8e:	11 01                	adc    DWORD PTR [ecx],eax
      90:	12 06                	adc    al,BYTE PTR [esi]
      92:	10 17                	adc    BYTE PTR [edi],dl
      94:	00 00                	add    BYTE PTR [eax],al
      96:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
      99:	0b 0b                	or     ecx,DWORD PTR [ebx]
      9b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      9e:	0e                   	push   cs
      9f:	00 00                	add    BYTE PTR [eax],al
      a1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
      a4:	0b 0b                	or     ecx,DWORD PTR [ebx]
      a6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
      a9:	08 00                	or     BYTE PTR [eax],al
      ab:	00 04 16             	add    BYTE PTR [esi+edx*1],al
      ae:	00 03                	add    BYTE PTR [ebx],al
      b0:	0e                   	push   cs
      b1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      b3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      b5:	49                   	dec    ecx
      b6:	13 00                	adc    eax,DWORD PTR [eax]
      b8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
      be:	49                   	dec    ecx
      bf:	13 00                	adc    eax,DWORD PTR [eax]
      c1:	00 06                	add    BYTE PTR [esi],al
      c3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
      c6:	19 03                	sbb    DWORD PTR [ebx],eax
      c8:	0e                   	push   cs
      c9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      cb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      cd:	27                   	daa    
      ce:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
      d1:	11 01                	adc    DWORD PTR [ecx],eax
      d3:	12 06                	adc    al,BYTE PTR [esi]
      d5:	40                   	inc    eax
      d6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
      dc:	00 00                	add    BYTE PTR [eax],al
      de:	07                   	pop    es
      df:	05 00 03 0e 3a       	add    eax,0x3a0e0300
      e4:	0b 3b                	or     edi,DWORD PTR [ebx]
      e6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
      e9:	02 18                	add    bl,BYTE PTR [eax]
      eb:	00 00                	add    BYTE PTR [eax],al
      ed:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
      f0:	03 08                	add    ecx,DWORD PTR [eax]
      f2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
      f4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
      f6:	49                   	dec    ecx
      f7:	13 02                	adc    eax,DWORD PTR [edx]
      f9:	18 00                	sbb    BYTE PTR [eax],al
      fb:	00 09                	add    BYTE PTR [ecx],cl
      fd:	34 00                	xor    al,0x0
      ff:	03 0e                	add    ecx,DWORD PTR [esi]
     101:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     103:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     105:	49                   	dec    ecx
     106:	13 3f                	adc    edi,DWORD PTR [edi]
     108:	19 02                	sbb    DWORD PTR [edx],eax
     10a:	18 00                	sbb    BYTE PTR [eax],al
     10c:	00 00                	add    BYTE PTR [eax],al
     10e:	01 11                	add    DWORD PTR [ecx],edx
     110:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     116:	0e                   	push   cs
     117:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     119:	11 01                	adc    DWORD PTR [ecx],eax
     11b:	12 06                	adc    al,BYTE PTR [esi]
     11d:	10 17                	adc    BYTE PTR [edi],dl
     11f:	00 00                	add    BYTE PTR [eax],al
     121:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     124:	0b 0b                	or     ecx,DWORD PTR [ebx]
     126:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     129:	0e                   	push   cs
     12a:	00 00                	add    BYTE PTR [eax],al
     12c:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     12f:	0b 0b                	or     ecx,DWORD PTR [ebx]
     131:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     134:	08 00                	or     BYTE PTR [eax],al
     136:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     139:	00 03                	add    BYTE PTR [ebx],al
     13b:	0e                   	push   cs
     13c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     13e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     140:	49                   	dec    ecx
     141:	13 00                	adc    eax,DWORD PTR [eax]
     143:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     149:	49                   	dec    ecx
     14a:	13 00                	adc    eax,DWORD PTR [eax]
     14c:	00 06                	add    BYTE PTR [esi],al
     14e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     151:	19 03                	sbb    DWORD PTR [ebx],eax
     153:	0e                   	push   cs
     154:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     156:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     158:	27                   	daa    
     159:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     15c:	11 01                	adc    DWORD PTR [ecx],eax
     15e:	12 06                	adc    al,BYTE PTR [esi]
     160:	40                   	inc    eax
     161:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     167:	00 00                	add    BYTE PTR [eax],al
     169:	07                   	pop    es
     16a:	05 00 03 08 3a       	add    eax,0x3a080300
     16f:	0b 3b                	or     edi,DWORD PTR [ebx]
     171:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     174:	02 18                	add    bl,BYTE PTR [eax]
     176:	00 00                	add    BYTE PTR [eax],al
     178:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     17e:	0b 3b                	or     edi,DWORD PTR [ebx]
     180:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     183:	02 18                	add    bl,BYTE PTR [eax]
     185:	00 00                	add    BYTE PTR [eax],al
     187:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     18a:	03 0e                	add    ecx,DWORD PTR [esi]
     18c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     18e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     190:	49                   	dec    ecx
     191:	13 02                	adc    eax,DWORD PTR [edx]
     193:	18 00                	sbb    BYTE PTR [eax],al
     195:	00 0a                	add    BYTE PTR [edx],cl
     197:	34 00                	xor    al,0x0
     199:	03 08                	add    ecx,DWORD PTR [eax]
     19b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     19d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     19f:	49                   	dec    ecx
     1a0:	13 02                	adc    eax,DWORD PTR [edx]
     1a2:	18 00                	sbb    BYTE PTR [eax],al
     1a4:	00 0b                	add    BYTE PTR [ebx],cl
     1a6:	34 00                	xor    al,0x0
     1a8:	03 0e                	add    ecx,DWORD PTR [esi]
     1aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1ae:	49                   	dec    ecx
     1af:	13 3f                	adc    edi,DWORD PTR [edi]
     1b1:	19 02                	sbb    DWORD PTR [edx],eax
     1b3:	18 00                	sbb    BYTE PTR [eax],al
     1b5:	00 00                	add    BYTE PTR [eax],al
     1b7:	01 11                	add    DWORD PTR [ecx],edx
     1b9:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     1bf:	0e                   	push   cs
     1c0:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     1c2:	11 01                	adc    DWORD PTR [ecx],eax
     1c4:	12 06                	adc    al,BYTE PTR [esi]
     1c6:	10 17                	adc    BYTE PTR [edi],dl
     1c8:	00 00                	add    BYTE PTR [eax],al
     1ca:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     1cd:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1cf:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1d2:	0e                   	push   cs
     1d3:	00 00                	add    BYTE PTR [eax],al
     1d5:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     1d8:	0b 0b                	or     ecx,DWORD PTR [ebx]
     1da:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     1dd:	08 00                	or     BYTE PTR [eax],al
     1df:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     1e2:	00 03                	add    BYTE PTR [ebx],al
     1e4:	0e                   	push   cs
     1e5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1e7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     1e9:	49                   	dec    ecx
     1ea:	13 00                	adc    eax,DWORD PTR [eax]
     1ec:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     1f2:	49                   	dec    ecx
     1f3:	13 00                	adc    eax,DWORD PTR [eax]
     1f5:	00 06                	add    BYTE PTR [esi],al
     1f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     1fa:	19 03                	sbb    DWORD PTR [ebx],eax
     1fc:	0e                   	push   cs
     1fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     1ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     201:	27                   	daa    
     202:	19 11                	sbb    DWORD PTR [ecx],edx
     204:	01 12                	add    DWORD PTR [edx],edx
     206:	06                   	push   es
     207:	40                   	inc    eax
     208:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     20e:	00 00                	add    BYTE PTR [eax],al
     210:	07                   	pop    es
     211:	05 00 03 08 3a       	add    eax,0x3a080300
     216:	0b 3b                	or     edi,DWORD PTR [ebx]
     218:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     21b:	02 18                	add    bl,BYTE PTR [eax]
     21d:	00 00                	add    BYTE PTR [eax],al
     21f:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
     222:	03 08                	add    ecx,DWORD PTR [eax]
     224:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     226:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     228:	49                   	dec    ecx
     229:	13 02                	adc    eax,DWORD PTR [edx]
     22b:	18 00                	sbb    BYTE PTR [eax],al
     22d:	00 09                	add    BYTE PTR [ecx],cl
     22f:	34 00                	xor    al,0x0
     231:	03 0e                	add    ecx,DWORD PTR [esi]
     233:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     235:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     237:	49                   	dec    ecx
     238:	13 02                	adc    eax,DWORD PTR [edx]
     23a:	18 00                	sbb    BYTE PTR [eax],al
     23c:	00 0a                	add    BYTE PTR [edx],cl
     23e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     241:	19 03                	sbb    DWORD PTR [ebx],eax
     243:	0e                   	push   cs
     244:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     246:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     248:	27                   	daa    
     249:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     24c:	11 01                	adc    DWORD PTR [ecx],eax
     24e:	12 06                	adc    al,BYTE PTR [esi]
     250:	40                   	inc    eax
     251:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     257:	00 00                	add    BYTE PTR [eax],al
     259:	0b 0b                	or     ecx,DWORD PTR [ebx]
     25b:	01 11                	add    DWORD PTR [ecx],edx
     25d:	01 12                	add    DWORD PTR [edx],edx
     25f:	06                   	push   es
     260:	00 00                	add    BYTE PTR [eax],al
     262:	0c 34                	or     al,0x34
     264:	00 03                	add    BYTE PTR [ebx],al
     266:	0e                   	push   cs
     267:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     269:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     26b:	49                   	dec    ecx
     26c:	13 3f                	adc    edi,DWORD PTR [edi]
     26e:	19 02                	sbb    DWORD PTR [edx],eax
     270:	18 00                	sbb    BYTE PTR [eax],al
     272:	00 00                	add    BYTE PTR [eax],al
     274:	01 11                	add    DWORD PTR [ecx],edx
     276:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     27c:	0e                   	push   cs
     27d:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     27f:	11 01                	adc    DWORD PTR [ecx],eax
     281:	12 06                	adc    al,BYTE PTR [esi]
     283:	10 17                	adc    BYTE PTR [edi],dl
     285:	00 00                	add    BYTE PTR [eax],al
     287:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     28a:	0b 0b                	or     ecx,DWORD PTR [ebx]
     28c:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     28f:	0e                   	push   cs
     290:	00 00                	add    BYTE PTR [eax],al
     292:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     295:	0b 0b                	or     ecx,DWORD PTR [ebx]
     297:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     29a:	08 00                	or     BYTE PTR [eax],al
     29c:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     29f:	00 03                	add    BYTE PTR [ebx],al
     2a1:	0e                   	push   cs
     2a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2a6:	49                   	dec    ecx
     2a7:	13 00                	adc    eax,DWORD PTR [eax]
     2a9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     2af:	49                   	dec    ecx
     2b0:	13 00                	adc    eax,DWORD PTR [eax]
     2b2:	00 06                	add    BYTE PTR [esi],al
     2b4:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2b7:	19 03                	sbb    DWORD PTR [ebx],eax
     2b9:	0e                   	push   cs
     2ba:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2bc:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2be:	27                   	daa    
     2bf:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     2c2:	11 01                	adc    DWORD PTR [ecx],eax
     2c4:	12 06                	adc    al,BYTE PTR [esi]
     2c6:	40                   	inc    eax
     2c7:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     2cd:	00 00                	add    BYTE PTR [eax],al
     2cf:	07                   	pop    es
     2d0:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     2d5:	0b 3b                	or     edi,DWORD PTR [ebx]
     2d7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     2da:	02 18                	add    bl,BYTE PTR [eax]
     2dc:	00 00                	add    BYTE PTR [eax],al
     2de:	08 0b                	or     BYTE PTR [ebx],cl
     2e0:	01 11                	add    DWORD PTR [ecx],edx
     2e2:	01 12                	add    DWORD PTR [edx],edx
     2e4:	06                   	push   es
     2e5:	00 00                	add    BYTE PTR [eax],al
     2e7:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     2ea:	03 08                	add    ecx,DWORD PTR [eax]
     2ec:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ee:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     2f0:	49                   	dec    ecx
     2f1:	13 02                	adc    eax,DWORD PTR [edx]
     2f3:	18 00                	sbb    BYTE PTR [eax],al
     2f5:	00 0a                	add    BYTE PTR [edx],cl
     2f7:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     2fa:	19 03                	sbb    DWORD PTR [ebx],eax
     2fc:	0e                   	push   cs
     2fd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     2ff:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     301:	27                   	daa    
     302:	19 11                	sbb    DWORD PTR [ecx],edx
     304:	01 12                	add    DWORD PTR [edx],edx
     306:	06                   	push   es
     307:	40                   	inc    eax
     308:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     30e:	00 00                	add    BYTE PTR [eax],al
     310:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     313:	03 0e                	add    ecx,DWORD PTR [esi]
     315:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     317:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     319:	49                   	dec    ecx
     31a:	13 02                	adc    eax,DWORD PTR [edx]
     31c:	18 00                	sbb    BYTE PTR [eax],al
     31e:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     321:	01 11                	add    DWORD PTR [ecx],edx
     323:	01 12                	add    DWORD PTR [edx],edx
     325:	06                   	push   es
     326:	01 13                	add    DWORD PTR [ebx],edx
     328:	00 00                	add    BYTE PTR [eax],al
     32a:	0d 34 00 03 0e       	or     eax,0xe030034
     32f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     331:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     333:	49                   	dec    ecx
     334:	13 3f                	adc    edi,DWORD PTR [edi]
     336:	19 02                	sbb    DWORD PTR [edx],eax
     338:	18 00                	sbb    BYTE PTR [eax],al
     33a:	00 00                	add    BYTE PTR [eax],al
     33c:	01 11                	add    DWORD PTR [ecx],edx
     33e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     344:	0e                   	push   cs
     345:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     347:	11 01                	adc    DWORD PTR [ecx],eax
     349:	12 06                	adc    al,BYTE PTR [esi]
     34b:	10 17                	adc    BYTE PTR [edi],dl
     34d:	00 00                	add    BYTE PTR [eax],al
     34f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     352:	0b 0b                	or     ecx,DWORD PTR [ebx]
     354:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     357:	0e                   	push   cs
     358:	00 00                	add    BYTE PTR [eax],al
     35a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     35d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     35f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     362:	08 00                	or     BYTE PTR [eax],al
     364:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     367:	00 03                	add    BYTE PTR [ebx],al
     369:	0e                   	push   cs
     36a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     36c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     36e:	49                   	dec    ecx
     36f:	13 00                	adc    eax,DWORD PTR [eax]
     371:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     377:	49                   	dec    ecx
     378:	13 00                	adc    eax,DWORD PTR [eax]
     37a:	00 06                	add    BYTE PTR [esi],al
     37c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     380:	00 00                	add    BYTE PTR [eax],al
     382:	07                   	pop    es
     383:	04 01                	add    al,0x1
     385:	03 0e                	add    ecx,DWORD PTR [esi]
     387:	0b 0b                	or     ecx,DWORD PTR [ebx]
     389:	49                   	dec    ecx
     38a:	13 3a                	adc    edi,DWORD PTR [edx]
     38c:	0b 3b                	or     edi,DWORD PTR [ebx]
     38e:	0b 01                	or     eax,DWORD PTR [ecx]
     390:	13 00                	adc    eax,DWORD PTR [eax]
     392:	00 08                	add    BYTE PTR [eax],cl
     394:	28 00                	sub    BYTE PTR [eax],al
     396:	03 0e                	add    ecx,DWORD PTR [esi]
     398:	1c 0b                	sbb    al,0xb
     39a:	00 00                	add    BYTE PTR [eax],al
     39c:	09 28                	or     DWORD PTR [eax],ebp
     39e:	00 03                	add    BYTE PTR [ebx],al
     3a0:	0e                   	push   cs
     3a1:	1c 05                	sbb    al,0x5
     3a3:	00 00                	add    BYTE PTR [eax],al
     3a5:	0a 0f                	or     cl,BYTE PTR [edi]
     3a7:	00 0b                	add    BYTE PTR [ebx],cl
     3a9:	0b 00                	or     eax,DWORD PTR [eax]
     3ab:	00 0b                	add    BYTE PTR [ebx],cl
     3ad:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     3b0:	19 03                	sbb    DWORD PTR [ebx],eax
     3b2:	0e                   	push   cs
     3b3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3b5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3b7:	27                   	daa    
     3b8:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     3bb:	11 01                	adc    DWORD PTR [ecx],eax
     3bd:	12 06                	adc    al,BYTE PTR [esi]
     3bf:	40                   	inc    eax
     3c0:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3c6:	00 00                	add    BYTE PTR [eax],al
     3c8:	0c 05                	or     al,0x5
     3ca:	00 03                	add    BYTE PTR [ebx],al
     3cc:	0e                   	push   cs
     3cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3d1:	49                   	dec    ecx
     3d2:	13 02                	adc    eax,DWORD PTR [edx]
     3d4:	18 00                	sbb    BYTE PTR [eax],al
     3d6:	00 0d 2e 01 3f 19    	add    BYTE PTR ds:0x193f012e,cl
     3dc:	03 0e                	add    ecx,DWORD PTR [esi]
     3de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3e2:	27                   	daa    
     3e3:	19 11                	sbb    DWORD PTR [ecx],edx
     3e5:	01 12                	add    DWORD PTR [edx],edx
     3e7:	06                   	push   es
     3e8:	40                   	inc    eax
     3e9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     3ef:	00 00                	add    BYTE PTR [eax],al
     3f1:	0e                   	push   cs
     3f2:	34 00                	xor    al,0x0
     3f4:	03 0e                	add    ecx,DWORD PTR [esi]
     3f6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     3f8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     3fa:	49                   	dec    ecx
     3fb:	13 3f                	adc    edi,DWORD PTR [edi]
     3fd:	19 02                	sbb    DWORD PTR [edx],eax
     3ff:	18 00                	sbb    BYTE PTR [eax],al
     401:	00 00                	add    BYTE PTR [eax],al
     403:	01 11                	add    DWORD PTR [ecx],edx
     405:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     40b:	0e                   	push   cs
     40c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     40e:	11 01                	adc    DWORD PTR [ecx],eax
     410:	12 06                	adc    al,BYTE PTR [esi]
     412:	10 17                	adc    BYTE PTR [edi],dl
     414:	00 00                	add    BYTE PTR [eax],al
     416:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     419:	0b 0b                	or     ecx,DWORD PTR [ebx]
     41b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     41e:	0e                   	push   cs
     41f:	00 00                	add    BYTE PTR [eax],al
     421:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     424:	0b 0b                	or     ecx,DWORD PTR [ebx]
     426:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     429:	08 00                	or     BYTE PTR [eax],al
     42b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     42e:	00 03                	add    BYTE PTR [ebx],al
     430:	0e                   	push   cs
     431:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     433:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     435:	49                   	dec    ecx
     436:	13 00                	adc    eax,DWORD PTR [eax]
     438:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     43e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     440:	49                   	dec    ecx
     441:	13 3a                	adc    edi,DWORD PTR [edx]
     443:	0b 3b                	or     edi,DWORD PTR [ebx]
     445:	0b 01                	or     eax,DWORD PTR [ecx]
     447:	13 00                	adc    eax,DWORD PTR [eax]
     449:	00 06                	add    BYTE PTR [esi],al
     44b:	28 00                	sub    BYTE PTR [eax],al
     44d:	03 0e                	add    ecx,DWORD PTR [esi]
     44f:	1c 0b                	sbb    al,0xb
     451:	00 00                	add    BYTE PTR [eax],al
     453:	07                   	pop    es
     454:	28 00                	sub    BYTE PTR [eax],al
     456:	03 0e                	add    ecx,DWORD PTR [esi]
     458:	1c 05                	sbb    al,0x5
     45a:	00 00                	add    BYTE PTR [eax],al
     45c:	08 0f                	or     BYTE PTR [edi],cl
     45e:	00 0b                	add    BYTE PTR [ebx],cl
     460:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     463:	00 00                	add    BYTE PTR [eax],al
     465:	09 2e                	or     DWORD PTR [esi],ebp
     467:	01 3f                	add    DWORD PTR [edi],edi
     469:	19 03                	sbb    DWORD PTR [ebx],eax
     46b:	0e                   	push   cs
     46c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     46e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     470:	27                   	daa    
     471:	19 11                	sbb    DWORD PTR [ecx],edx
     473:	01 12                	add    DWORD PTR [edx],edx
     475:	06                   	push   es
     476:	40                   	inc    eax
     477:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     47d:	00 00                	add    BYTE PTR [eax],al
     47f:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     485:	0b 3b                	or     edi,DWORD PTR [ebx]
     487:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     48a:	02 18                	add    bl,BYTE PTR [eax]
     48c:	00 00                	add    BYTE PTR [eax],al
     48e:	0b 05 00 03 08 3a    	or     eax,DWORD PTR ds:0x3a080300
     494:	0b 3b                	or     edi,DWORD PTR [ebx]
     496:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     499:	02 18                	add    bl,BYTE PTR [eax]
     49b:	00 00                	add    BYTE PTR [eax],al
     49d:	0c 34                	or     al,0x34
     49f:	00 03                	add    BYTE PTR [ebx],al
     4a1:	0e                   	push   cs
     4a2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4a4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4a6:	49                   	dec    ecx
     4a7:	13 02                	adc    eax,DWORD PTR [edx]
     4a9:	18 00                	sbb    BYTE PTR [eax],al
     4ab:	00 0d 01 01 49 13    	add    BYTE PTR ds:0x13490101,cl
     4b1:	01 13                	add    DWORD PTR [ebx],edx
     4b3:	00 00                	add    BYTE PTR [eax],al
     4b5:	0e                   	push   cs
     4b6:	21 00                	and    DWORD PTR [eax],eax
     4b8:	49                   	dec    ecx
     4b9:	13 2f                	adc    ebp,DWORD PTR [edi]
     4bb:	0b 00                	or     eax,DWORD PTR [eax]
     4bd:	00 0f                	add    BYTE PTR [edi],cl
     4bf:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4c2:	19 03                	sbb    DWORD PTR [ebx],eax
     4c4:	0e                   	push   cs
     4c5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4c7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4c9:	49                   	dec    ecx
     4ca:	13 11                	adc    edx,DWORD PTR [ecx]
     4cc:	01 12                	add    DWORD PTR [edx],edx
     4ce:	06                   	push   es
     4cf:	40                   	inc    eax
     4d0:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     4d6:	00 00                	add    BYTE PTR [eax],al
     4d8:	10 34 00             	adc    BYTE PTR [eax+eax*1],dh
     4db:	03 08                	add    ecx,DWORD PTR [eax]
     4dd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4df:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4e1:	49                   	dec    ecx
     4e2:	13 02                	adc    eax,DWORD PTR [edx]
     4e4:	18 00                	sbb    BYTE PTR [eax],al
     4e6:	00 11                	add    BYTE PTR [ecx],dl
     4e8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     4eb:	19 03                	sbb    DWORD PTR [ebx],eax
     4ed:	0e                   	push   cs
     4ee:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     4f0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     4f2:	27                   	daa    
     4f3:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     4f6:	11 01                	adc    DWORD PTR [ecx],eax
     4f8:	12 06                	adc    al,BYTE PTR [esi]
     4fa:	40                   	inc    eax
     4fb:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     501:	00 00                	add    BYTE PTR [eax],al
     503:	12 0a                	adc    cl,BYTE PTR [edx]
     505:	00 03                	add    BYTE PTR [ebx],al
     507:	0e                   	push   cs
     508:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     50a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     50c:	11 01                	adc    DWORD PTR [ecx],eax
     50e:	00 00                	add    BYTE PTR [eax],al
     510:	13 34 00             	adc    esi,DWORD PTR [eax+eax*1]
     513:	03 0e                	add    ecx,DWORD PTR [esi]
     515:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     517:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     519:	49                   	dec    ecx
     51a:	13 3f                	adc    edi,DWORD PTR [edi]
     51c:	19 02                	sbb    DWORD PTR [edx],eax
     51e:	18 00                	sbb    BYTE PTR [eax],al
     520:	00 00                	add    BYTE PTR [eax],al
     522:	01 11                	add    DWORD PTR [ecx],edx
     524:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     52a:	0e                   	push   cs
     52b:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     52d:	11 01                	adc    DWORD PTR [ecx],eax
     52f:	12 06                	adc    al,BYTE PTR [esi]
     531:	10 17                	adc    BYTE PTR [edi],dl
     533:	00 00                	add    BYTE PTR [eax],al
     535:	02 16                	add    dl,BYTE PTR [esi]
     537:	00 03                	add    BYTE PTR [ebx],al
     539:	0e                   	push   cs
     53a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     53c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     53e:	49                   	dec    ecx
     53f:	13 00                	adc    eax,DWORD PTR [eax]
     541:	00 03                	add    BYTE PTR [ebx],al
     543:	0f 00 0b             	str    WORD PTR [ebx]
     546:	0b 03                	or     eax,DWORD PTR [ebx]
     548:	0e                   	push   cs
     549:	49                   	dec    ecx
     54a:	13 00                	adc    eax,DWORD PTR [eax]
     54c:	00 04 24             	add    BYTE PTR [esp],al
     54f:	00 0b                	add    BYTE PTR [ebx],cl
     551:	0b 3e                	or     edi,DWORD PTR [esi]
     553:	0b 03                	or     eax,DWORD PTR [ebx]
     555:	0e                   	push   cs
     556:	00 00                	add    BYTE PTR [eax],al
     558:	05 24 00 0b 0b       	add    eax,0xb0b0024
     55d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     560:	08 00                	or     BYTE PTR [eax],al
     562:	00 06                	add    BYTE PTR [esi],al
     564:	0f 00 0b             	str    WORD PTR [ebx]
     567:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     56a:	00 00                	add    BYTE PTR [eax],al
     56c:	07                   	pop    es
     56d:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     571:	00 00                	add    BYTE PTR [eax],al
     573:	08 04 01             	or     BYTE PTR [ecx+eax*1],al
     576:	03 0e                	add    ecx,DWORD PTR [esi]
     578:	0b 0b                	or     ecx,DWORD PTR [ebx]
     57a:	49                   	dec    ecx
     57b:	13 3a                	adc    edi,DWORD PTR [edx]
     57d:	0b 3b                	or     edi,DWORD PTR [ebx]
     57f:	0b 01                	or     eax,DWORD PTR [ecx]
     581:	13 00                	adc    eax,DWORD PTR [eax]
     583:	00 09                	add    BYTE PTR [ecx],cl
     585:	28 00                	sub    BYTE PTR [eax],al
     587:	03 0e                	add    ecx,DWORD PTR [esi]
     589:	1c 0b                	sbb    al,0xb
     58b:	00 00                	add    BYTE PTR [eax],al
     58d:	0a 28                	or     ch,BYTE PTR [eax]
     58f:	00 03                	add    BYTE PTR [ebx],al
     591:	0e                   	push   cs
     592:	1c 05                	sbb    al,0x5
     594:	00 00                	add    BYTE PTR [eax],al
     596:	0b 0f                	or     ecx,DWORD PTR [edi]
     598:	00 0b                	add    BYTE PTR [ebx],cl
     59a:	0b 00                	or     eax,DWORD PTR [eax]
     59c:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     59f:	01 3f                	add    DWORD PTR [edi],edi
     5a1:	19 03                	sbb    DWORD PTR [ebx],eax
     5a3:	0e                   	push   cs
     5a4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5a6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5a8:	27                   	daa    
     5a9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     5ac:	11 01                	adc    DWORD PTR [ecx],eax
     5ae:	12 06                	adc    al,BYTE PTR [esi]
     5b0:	40                   	inc    eax
     5b1:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     5b7:	00 00                	add    BYTE PTR [eax],al
     5b9:	0d 05 00 03 0e       	or     eax,0xe030005
     5be:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5c0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5c2:	49                   	dec    ecx
     5c3:	13 02                	adc    eax,DWORD PTR [edx]
     5c5:	18 00                	sbb    BYTE PTR [eax],al
     5c7:	00 0e                	add    BYTE PTR [esi],cl
     5c9:	34 00                	xor    al,0x0
     5cb:	03 0e                	add    ecx,DWORD PTR [esi]
     5cd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5cf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5d1:	49                   	dec    ecx
     5d2:	13 02                	adc    eax,DWORD PTR [edx]
     5d4:	18 00                	sbb    BYTE PTR [eax],al
     5d6:	00 0f                	add    BYTE PTR [edi],cl
     5d8:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     5db:	19 03                	sbb    DWORD PTR [ebx],eax
     5dd:	0e                   	push   cs
     5de:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5e0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5e2:	11 01                	adc    DWORD PTR [ecx],eax
     5e4:	12 06                	adc    al,BYTE PTR [esi]
     5e6:	40                   	inc    eax
     5e7:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     5ed:	10 2e                	adc    BYTE PTR [esi],ch
     5ef:	00 3f                	add    BYTE PTR [edi],bh
     5f1:	19 03                	sbb    DWORD PTR [ebx],eax
     5f3:	0e                   	push   cs
     5f4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     5f6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     5f8:	27                   	daa    
     5f9:	19 11                	sbb    DWORD PTR [ecx],edx
     5fb:	01 12                	add    DWORD PTR [edx],edx
     5fd:	06                   	push   es
     5fe:	40                   	inc    eax
     5ff:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     605:	11 2e                	adc    DWORD PTR [esi],ebp
     607:	01 3f                	add    DWORD PTR [edi],edi
     609:	19 03                	sbb    DWORD PTR [ebx],eax
     60b:	0e                   	push   cs
     60c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     60e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     610:	27                   	daa    
     611:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     614:	11 01                	adc    DWORD PTR [ecx],eax
     616:	12 06                	adc    al,BYTE PTR [esi]
     618:	40                   	inc    eax
     619:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     61f:	00 00                	add    BYTE PTR [eax],al
     621:	12 18                	adc    bl,BYTE PTR [eax]
     623:	00 00                	add    BYTE PTR [eax],al
     625:	00 13                	add    BYTE PTR [ebx],dl
     627:	0b 01                	or     eax,DWORD PTR [ecx]
     629:	11 01                	adc    DWORD PTR [ecx],eax
     62b:	12 06                	adc    al,BYTE PTR [esi]
     62d:	00 00                	add    BYTE PTR [eax],al
     62f:	14 34                	adc    al,0x34
     631:	00 03                	add    BYTE PTR [ebx],al
     633:	08 3a                	or     BYTE PTR [edx],bh
     635:	0b 3b                	or     edi,DWORD PTR [ebx]
     637:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     63a:	02 18                	add    bl,BYTE PTR [eax]
     63c:	00 00                	add    BYTE PTR [eax],al
     63e:	15 2e 01 3f 19       	adc    eax,0x193f012e
     643:	03 0e                	add    ecx,DWORD PTR [esi]
     645:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     647:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     649:	27                   	daa    
     64a:	19 11                	sbb    DWORD PTR [ecx],edx
     64c:	01 12                	add    DWORD PTR [edx],edx
     64e:	06                   	push   es
     64f:	40                   	inc    eax
     650:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     656:	00 00                	add    BYTE PTR [eax],al
     658:	16                   	push   ss
     659:	2e 00 3f             	add    BYTE PTR cs:[edi],bh
     65c:	19 03                	sbb    DWORD PTR [ebx],eax
     65e:	0e                   	push   cs
     65f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     661:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     663:	49                   	dec    ecx
     664:	13 11                	adc    edx,DWORD PTR [ecx]
     666:	01 12                	add    DWORD PTR [edx],edx
     668:	06                   	push   es
     669:	40                   	inc    eax
     66a:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     670:	17                   	pop    ss
     671:	05 00 03 08 3a       	add    eax,0x3a080300
     676:	0b 3b                	or     edi,DWORD PTR [ebx]
     678:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     67b:	02 18                	add    bl,BYTE PTR [eax]
     67d:	00 00                	add    BYTE PTR [eax],al
     67f:	18 34 00             	sbb    BYTE PTR [eax+eax*1],dh
     682:	03 0e                	add    ecx,DWORD PTR [esi]
     684:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     686:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     688:	49                   	dec    ecx
     689:	13 3f                	adc    edi,DWORD PTR [edi]
     68b:	19 02                	sbb    DWORD PTR [edx],eax
     68d:	18 00                	sbb    BYTE PTR [eax],al
     68f:	00 00                	add    BYTE PTR [eax],al
     691:	01 11                	add    DWORD PTR [ecx],edx
     693:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     699:	0e                   	push   cs
     69a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     69c:	11 01                	adc    DWORD PTR [ecx],eax
     69e:	12 06                	adc    al,BYTE PTR [esi]
     6a0:	10 17                	adc    BYTE PTR [edi],dl
     6a2:	00 00                	add    BYTE PTR [eax],al
     6a4:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     6a7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6a9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6ac:	0e                   	push   cs
     6ad:	00 00                	add    BYTE PTR [eax],al
     6af:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     6b2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6b4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     6b7:	08 00                	or     BYTE PTR [eax],al
     6b9:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     6bc:	00 03                	add    BYTE PTR [ebx],al
     6be:	0e                   	push   cs
     6bf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6c1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6c3:	49                   	dec    ecx
     6c4:	13 00                	adc    eax,DWORD PTR [eax]
     6c6:	00 05 13 01 03 0e    	add    BYTE PTR ds:0xe030113,al
     6cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     6ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     6d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     6d2:	01 13                	add    DWORD PTR [ebx],edx
     6d4:	00 00                	add    BYTE PTR [eax],al
     6d6:	06                   	push   es
     6d7:	0d 00 03 0e 3a       	or     eax,0x3a0e0300
     6dc:	0b 3b                	or     edi,DWORD PTR [ebx]
     6de:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6e1:	38 0b                	cmp    BYTE PTR [ebx],cl
     6e3:	00 00                	add    BYTE PTR [eax],al
     6e5:	07                   	pop    es
     6e6:	0d 00 03 08 3a       	or     eax,0x3a080300
     6eb:	0b 3b                	or     edi,DWORD PTR [ebx]
     6ed:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6f0:	38 0b                	cmp    BYTE PTR [ebx],cl
     6f2:	00 00                	add    BYTE PTR [eax],al
     6f4:	08 0f                	or     BYTE PTR [edi],cl
     6f6:	00 0b                	add    BYTE PTR [ebx],cl
     6f8:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     6fb:	00 00                	add    BYTE PTR [eax],al
     6fd:	09 04 01             	or     DWORD PTR [ecx+eax*1],eax
     700:	03 0e                	add    ecx,DWORD PTR [esi]
     702:	0b 0b                	or     ecx,DWORD PTR [ebx]
     704:	49                   	dec    ecx
     705:	13 3a                	adc    edi,DWORD PTR [edx]
     707:	0b 3b                	or     edi,DWORD PTR [ebx]
     709:	0b 01                	or     eax,DWORD PTR [ecx]
     70b:	13 00                	adc    eax,DWORD PTR [eax]
     70d:	00 0a                	add    BYTE PTR [edx],cl
     70f:	28 00                	sub    BYTE PTR [eax],al
     711:	03 0e                	add    ecx,DWORD PTR [esi]
     713:	1c 0b                	sbb    al,0xb
     715:	00 00                	add    BYTE PTR [eax],al
     717:	0b 28                	or     ebp,DWORD PTR [eax]
     719:	00 03                	add    BYTE PTR [ebx],al
     71b:	0e                   	push   cs
     71c:	1c 05                	sbb    al,0x5
     71e:	00 00                	add    BYTE PTR [eax],al
     720:	0c 0f                	or     al,0xf
     722:	00 0b                	add    BYTE PTR [ebx],cl
     724:	0b 00                	or     eax,DWORD PTR [eax]
     726:	00 0d 2e 00 3f 19    	add    BYTE PTR ds:0x193f002e,cl
     72c:	03 0e                	add    ecx,DWORD PTR [esi]
     72e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     730:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     732:	11 01                	adc    DWORD PTR [ecx],eax
     734:	12 06                	adc    al,BYTE PTR [esi]
     736:	40                   	inc    eax
     737:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     73d:	0e                   	push   cs
     73e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     741:	19 03                	sbb    DWORD PTR [ebx],eax
     743:	0e                   	push   cs
     744:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     746:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     748:	27                   	daa    
     749:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     74c:	11 01                	adc    DWORD PTR [ecx],eax
     74e:	12 06                	adc    al,BYTE PTR [esi]
     750:	40                   	inc    eax
     751:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     757:	00 00                	add    BYTE PTR [eax],al
     759:	0f 05                	syscall 
     75b:	00 03                	add    BYTE PTR [ebx],al
     75d:	0e                   	push   cs
     75e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     760:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     762:	49                   	dec    ecx
     763:	13 02                	adc    eax,DWORD PTR [edx]
     765:	18 00                	sbb    BYTE PTR [eax],al
     767:	00 10                	add    BYTE PTR [eax],dl
     769:	34 00                	xor    al,0x0
     76b:	03 0e                	add    ecx,DWORD PTR [esi]
     76d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     76f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     771:	49                   	dec    ecx
     772:	13 02                	adc    eax,DWORD PTR [edx]
     774:	18 00                	sbb    BYTE PTR [eax],al
     776:	00 11                	add    BYTE PTR [ecx],dl
     778:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     77b:	19 03                	sbb    DWORD PTR [ebx],eax
     77d:	0e                   	push   cs
     77e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     780:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     782:	27                   	daa    
     783:	19 11                	sbb    DWORD PTR [ecx],edx
     785:	01 12                	add    DWORD PTR [edx],edx
     787:	06                   	push   es
     788:	40                   	inc    eax
     789:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     78f:	00 00                	add    BYTE PTR [eax],al
     791:	12 34 00             	adc    dh,BYTE PTR [eax+eax*1]
     794:	03 08                	add    ecx,DWORD PTR [eax]
     796:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     798:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     79a:	49                   	dec    ecx
     79b:	13 02                	adc    eax,DWORD PTR [edx]
     79d:	18 00                	sbb    BYTE PTR [eax],al
     79f:	00 13                	add    BYTE PTR [ebx],dl
     7a1:	0a 00                	or     al,BYTE PTR [eax]
     7a3:	03 0e                	add    ecx,DWORD PTR [esi]
     7a5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7a7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7a9:	11 01                	adc    DWORD PTR [ecx],eax
     7ab:	00 00                	add    BYTE PTR [eax],al
     7ad:	14 2e                	adc    al,0x2e
     7af:	01 3f                	add    DWORD PTR [edi],edi
     7b1:	19 03                	sbb    DWORD PTR [ebx],eax
     7b3:	0e                   	push   cs
     7b4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7b6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7b8:	27                   	daa    
     7b9:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     7bc:	11 01                	adc    DWORD PTR [ecx],eax
     7be:	12 06                	adc    al,BYTE PTR [esi]
     7c0:	40                   	inc    eax
     7c1:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7c7:	00 00                	add    BYTE PTR [eax],al
     7c9:	15 2e 01 3f 19       	adc    eax,0x193f012e
     7ce:	03 0e                	add    ecx,DWORD PTR [esi]
     7d0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7d2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7d4:	27                   	daa    
     7d5:	19 11                	sbb    DWORD PTR [ecx],edx
     7d7:	01 12                	add    DWORD PTR [edx],edx
     7d9:	06                   	push   es
     7da:	40                   	inc    eax
     7db:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     7e1:	00 00                	add    BYTE PTR [eax],al
     7e3:	16                   	push   ss
     7e4:	34 00                	xor    al,0x0
     7e6:	03 0e                	add    ecx,DWORD PTR [esi]
     7e8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     7ea:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     7ec:	49                   	dec    ecx
     7ed:	13 3f                	adc    edi,DWORD PTR [edi]
     7ef:	19 02                	sbb    DWORD PTR [edx],eax
     7f1:	18 00                	sbb    BYTE PTR [eax],al
     7f3:	00 00                	add    BYTE PTR [eax],al
     7f5:	01 11                	add    DWORD PTR [ecx],edx
     7f7:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     7fd:	0e                   	push   cs
     7fe:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     800:	11 01                	adc    DWORD PTR [ecx],eax
     802:	12 06                	adc    al,BYTE PTR [esi]
     804:	10 17                	adc    BYTE PTR [edi],dl
     806:	00 00                	add    BYTE PTR [eax],al
     808:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     80b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     80d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     810:	0e                   	push   cs
     811:	00 00                	add    BYTE PTR [eax],al
     813:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     816:	0b 0b                	or     ecx,DWORD PTR [ebx]
     818:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     81b:	08 00                	or     BYTE PTR [eax],al
     81d:	00 04 0f             	add    BYTE PTR [edi+ecx*1],al
     820:	00 0b                	add    BYTE PTR [ebx],cl
     822:	0b 00                	or     eax,DWORD PTR [eax]
     824:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     82a:	49                   	dec    ecx
     82b:	13 00                	adc    eax,DWORD PTR [eax]
     82d:	00 06                	add    BYTE PTR [esi],al
     82f:	16                   	push   ss
     830:	00 03                	add    BYTE PTR [ebx],al
     832:	0e                   	push   cs
     833:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     835:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     837:	49                   	dec    ecx
     838:	13 00                	adc    eax,DWORD PTR [eax]
     83a:	00 07                	add    BYTE PTR [edi],al
     83c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     840:	00 00                	add    BYTE PTR [eax],al
     842:	08 2e                	or     BYTE PTR [esi],ch
     844:	01 3f                	add    DWORD PTR [edi],edi
     846:	19 03                	sbb    DWORD PTR [ebx],eax
     848:	0e                   	push   cs
     849:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     84b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     84d:	27                   	daa    
     84e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     851:	11 01                	adc    DWORD PTR [ecx],eax
     853:	12 06                	adc    al,BYTE PTR [esi]
     855:	40                   	inc    eax
     856:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     85c:	00 00                	add    BYTE PTR [eax],al
     85e:	09 05 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,eax
     864:	0b 3b                	or     edi,DWORD PTR [ebx]
     866:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     869:	02 18                	add    bl,BYTE PTR [eax]
     86b:	00 00                	add    BYTE PTR [eax],al
     86d:	0a 05 00 03 08 3a    	or     al,BYTE PTR ds:0x3a080300
     873:	0b 3b                	or     edi,DWORD PTR [ebx]
     875:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     878:	02 18                	add    bl,BYTE PTR [eax]
     87a:	00 00                	add    BYTE PTR [eax],al
     87c:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     87f:	03 08                	add    ecx,DWORD PTR [eax]
     881:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     883:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     885:	49                   	dec    ecx
     886:	13 02                	adc    eax,DWORD PTR [edx]
     888:	18 00                	sbb    BYTE PTR [eax],al
     88a:	00 0c 0b             	add    BYTE PTR [ebx+ecx*1],cl
     88d:	01 11                	add    DWORD PTR [ecx],edx
     88f:	01 12                	add    DWORD PTR [edx],edx
     891:	06                   	push   es
     892:	01 13                	add    DWORD PTR [ebx],edx
     894:	00 00                	add    BYTE PTR [eax],al
     896:	0d 0b 01 11 01       	or     eax,0x111010b
     89b:	12 06                	adc    al,BYTE PTR [esi]
     89d:	00 00                	add    BYTE PTR [eax],al
     89f:	0e                   	push   cs
     8a0:	26 00 00             	add    BYTE PTR es:[eax],al
     8a3:	00 0f                	add    BYTE PTR [edi],cl
     8a5:	34 00                	xor    al,0x0
     8a7:	03 0e                	add    ecx,DWORD PTR [esi]
     8a9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8ab:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8ad:	49                   	dec    ecx
     8ae:	13 3f                	adc    edi,DWORD PTR [edi]
     8b0:	19 02                	sbb    DWORD PTR [edx],eax
     8b2:	18 00                	sbb    BYTE PTR [eax],al
     8b4:	00 00                	add    BYTE PTR [eax],al
     8b6:	01 11                	add    DWORD PTR [ecx],edx
     8b8:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     8be:	0e                   	push   cs
     8bf:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     8c1:	11 01                	adc    DWORD PTR [ecx],eax
     8c3:	12 06                	adc    al,BYTE PTR [esi]
     8c5:	10 17                	adc    BYTE PTR [edi],dl
     8c7:	00 00                	add    BYTE PTR [eax],al
     8c9:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     8cc:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8ce:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8d1:	0e                   	push   cs
     8d2:	00 00                	add    BYTE PTR [eax],al
     8d4:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     8d7:	0b 0b                	or     ecx,DWORD PTR [ebx]
     8d9:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     8dc:	08 00                	or     BYTE PTR [eax],al
     8de:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     8e1:	00 03                	add    BYTE PTR [ebx],al
     8e3:	0e                   	push   cs
     8e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     8e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     8e8:	49                   	dec    ecx
     8e9:	13 00                	adc    eax,DWORD PTR [eax]
     8eb:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     8f1:	00 00                	add    BYTE PTR [eax],al
     8f3:	06                   	push   es
     8f4:	0f 00 0b             	str    WORD PTR [ebx]
     8f7:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     8fa:	00 00                	add    BYTE PTR [eax],al
     8fc:	07                   	pop    es
     8fd:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     900:	19 03                	sbb    DWORD PTR [ebx],eax
     902:	0e                   	push   cs
     903:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     905:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     907:	27                   	daa    
     908:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     90b:	11 01                	adc    DWORD PTR [ecx],eax
     90d:	12 06                	adc    al,BYTE PTR [esi]
     90f:	40                   	inc    eax
     910:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     916:	00 00                	add    BYTE PTR [eax],al
     918:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     91e:	0b 3b                	or     edi,DWORD PTR [ebx]
     920:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     923:	02 18                	add    bl,BYTE PTR [eax]
     925:	00 00                	add    BYTE PTR [eax],al
     927:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     92a:	03 08                	add    ecx,DWORD PTR [eax]
     92c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     92e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     930:	49                   	dec    ecx
     931:	13 02                	adc    eax,DWORD PTR [edx]
     933:	18 00                	sbb    BYTE PTR [eax],al
     935:	00 0a                	add    BYTE PTR [edx],cl
     937:	34 00                	xor    al,0x0
     939:	03 0e                	add    ecx,DWORD PTR [esi]
     93b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     93d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     93f:	49                   	dec    ecx
     940:	13 02                	adc    eax,DWORD PTR [edx]
     942:	18 00                	sbb    BYTE PTR [eax],al
     944:	00 0b                	add    BYTE PTR [ebx],cl
     946:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     949:	19 03                	sbb    DWORD PTR [ebx],eax
     94b:	0e                   	push   cs
     94c:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     94e:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     950:	27                   	daa    
     951:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     954:	11 01                	adc    DWORD PTR [ecx],eax
     956:	12 06                	adc    al,BYTE PTR [esi]
     958:	40                   	inc    eax
     959:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     95f:	00 00                	add    BYTE PTR [eax],al
     961:	0c 34                	or     al,0x34
     963:	00 03                	add    BYTE PTR [ebx],al
     965:	0e                   	push   cs
     966:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     968:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     96a:	49                   	dec    ecx
     96b:	13 3f                	adc    edi,DWORD PTR [edi]
     96d:	19 02                	sbb    DWORD PTR [edx],eax
     96f:	18 00                	sbb    BYTE PTR [eax],al
     971:	00 00                	add    BYTE PTR [eax],al
     973:	01 11                	add    DWORD PTR [ecx],edx
     975:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     97b:	0e                   	push   cs
     97c:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     97e:	11 01                	adc    DWORD PTR [ecx],eax
     980:	12 06                	adc    al,BYTE PTR [esi]
     982:	10 17                	adc    BYTE PTR [edi],dl
     984:	00 00                	add    BYTE PTR [eax],al
     986:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     989:	0b 0b                	or     ecx,DWORD PTR [ebx]
     98b:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     98e:	0e                   	push   cs
     98f:	00 00                	add    BYTE PTR [eax],al
     991:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     994:	0b 0b                	or     ecx,DWORD PTR [ebx]
     996:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     999:	08 00                	or     BYTE PTR [eax],al
     99b:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     99e:	00 03                	add    BYTE PTR [ebx],al
     9a0:	0e                   	push   cs
     9a1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9a3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9a5:	49                   	dec    ecx
     9a6:	13 00                	adc    eax,DWORD PTR [eax]
     9a8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     9ae:	00 00                	add    BYTE PTR [eax],al
     9b0:	06                   	push   es
     9b1:	0f 00 0b             	str    WORD PTR [ebx]
     9b4:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9b7:	00 00                	add    BYTE PTR [eax],al
     9b9:	07                   	pop    es
     9ba:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     9bd:	19 03                	sbb    DWORD PTR [ebx],eax
     9bf:	0e                   	push   cs
     9c0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9c2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9c4:	27                   	daa    
     9c5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     9c8:	11 01                	adc    DWORD PTR [ecx],eax
     9ca:	12 06                	adc    al,BYTE PTR [esi]
     9cc:	40                   	inc    eax
     9cd:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     9d3:	00 00                	add    BYTE PTR [eax],al
     9d5:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     9db:	0b 3b                	or     edi,DWORD PTR [ebx]
     9dd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9e0:	02 18                	add    bl,BYTE PTR [eax]
     9e2:	00 00                	add    BYTE PTR [eax],al
     9e4:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     9ea:	0b 3b                	or     edi,DWORD PTR [ebx]
     9ec:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     9ef:	02 18                	add    bl,BYTE PTR [eax]
     9f1:	00 00                	add    BYTE PTR [eax],al
     9f3:	0a 34 00             	or     dh,BYTE PTR [eax+eax*1]
     9f6:	03 0e                	add    ecx,DWORD PTR [esi]
     9f8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     9fa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     9fc:	49                   	dec    ecx
     9fd:	13 3f                	adc    edi,DWORD PTR [edi]
     9ff:	19 02                	sbb    DWORD PTR [edx],eax
     a01:	18 00                	sbb    BYTE PTR [eax],al
     a03:	00 00                	add    BYTE PTR [eax],al
     a05:	01 11                	add    DWORD PTR [ecx],edx
     a07:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     a0d:	0e                   	push   cs
     a0e:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     a10:	11 01                	adc    DWORD PTR [ecx],eax
     a12:	12 06                	adc    al,BYTE PTR [esi]
     a14:	10 17                	adc    BYTE PTR [edi],dl
     a16:	00 00                	add    BYTE PTR [eax],al
     a18:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     a1b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a1d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a20:	0e                   	push   cs
     a21:	00 00                	add    BYTE PTR [eax],al
     a23:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     a26:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a28:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     a2b:	08 00                	or     BYTE PTR [eax],al
     a2d:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     a30:	00 03                	add    BYTE PTR [ebx],al
     a32:	0e                   	push   cs
     a33:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a35:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a37:	49                   	dec    ecx
     a38:	13 00                	adc    eax,DWORD PTR [eax]
     a3a:	00 05 04 01 03 0e    	add    BYTE PTR ds:0xe030104,al
     a40:	0b 0b                	or     ecx,DWORD PTR [ebx]
     a42:	49                   	dec    ecx
     a43:	13 3a                	adc    edi,DWORD PTR [edx]
     a45:	0b 3b                	or     edi,DWORD PTR [ebx]
     a47:	0b 01                	or     eax,DWORD PTR [ecx]
     a49:	13 00                	adc    eax,DWORD PTR [eax]
     a4b:	00 06                	add    BYTE PTR [esi],al
     a4d:	28 00                	sub    BYTE PTR [eax],al
     a4f:	03 0e                	add    ecx,DWORD PTR [esi]
     a51:	1c 0b                	sbb    al,0xb
     a53:	00 00                	add    BYTE PTR [eax],al
     a55:	07                   	pop    es
     a56:	28 00                	sub    BYTE PTR [eax],al
     a58:	03 0e                	add    ecx,DWORD PTR [esi]
     a5a:	1c 05                	sbb    al,0x5
     a5c:	00 00                	add    BYTE PTR [eax],al
     a5e:	08 0f                	or     BYTE PTR [edi],cl
     a60:	00 0b                	add    BYTE PTR [ebx],cl
     a62:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a65:	00 00                	add    BYTE PTR [eax],al
     a67:	09 2e                	or     DWORD PTR [esi],ebp
     a69:	01 3f                	add    DWORD PTR [edi],edi
     a6b:	19 03                	sbb    DWORD PTR [ebx],eax
     a6d:	0e                   	push   cs
     a6e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a70:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a72:	27                   	daa    
     a73:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     a76:	11 01                	adc    DWORD PTR [ecx],eax
     a78:	12 06                	adc    al,BYTE PTR [esi]
     a7a:	40                   	inc    eax
     a7b:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     a81:	00 00                	add    BYTE PTR [eax],al
     a83:	0a 05 00 03 0e 3a    	or     al,BYTE PTR ds:0x3a0e0300
     a89:	0b 3b                	or     edi,DWORD PTR [ebx]
     a8b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     a8e:	02 18                	add    bl,BYTE PTR [eax]
     a90:	00 00                	add    BYTE PTR [eax],al
     a92:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     a95:	03 0e                	add    ecx,DWORD PTR [esi]
     a97:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     a99:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     a9b:	49                   	dec    ecx
     a9c:	13 3f                	adc    edi,DWORD PTR [edi]
     a9e:	19 02                	sbb    DWORD PTR [edx],eax
     aa0:	18 00                	sbb    BYTE PTR [eax],al
     aa2:	00 00                	add    BYTE PTR [eax],al
     aa4:	01 11                	add    DWORD PTR [ecx],edx
     aa6:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     aac:	0e                   	push   cs
     aad:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     aaf:	11 01                	adc    DWORD PTR [ecx],eax
     ab1:	12 06                	adc    al,BYTE PTR [esi]
     ab3:	10 17                	adc    BYTE PTR [edi],dl
     ab5:	00 00                	add    BYTE PTR [eax],al
     ab7:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     aba:	0b 0b                	or     ecx,DWORD PTR [ebx]
     abc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     abf:	0e                   	push   cs
     ac0:	00 00                	add    BYTE PTR [eax],al
     ac2:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     ac5:	0b 0b                	or     ecx,DWORD PTR [ebx]
     ac7:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     aca:	08 00                	or     BYTE PTR [eax],al
     acc:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     acf:	00 03                	add    BYTE PTR [ebx],al
     ad1:	0e                   	push   cs
     ad2:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ad4:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ad6:	49                   	dec    ecx
     ad7:	13 00                	adc    eax,DWORD PTR [eax]
     ad9:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     adf:	49                   	dec    ecx
     ae0:	13 00                	adc    eax,DWORD PTR [eax]
     ae2:	00 06                	add    BYTE PTR [esi],al
     ae4:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     ae8:	00 00                	add    BYTE PTR [eax],al
     aea:	07                   	pop    es
     aeb:	0f 00 0b             	str    WORD PTR [ebx]
     aee:	0b 00                	or     eax,DWORD PTR [eax]
     af0:	00 08                	add    BYTE PTR [eax],cl
     af2:	13 01                	adc    eax,DWORD PTR [ecx]
     af4:	03 0e                	add    ecx,DWORD PTR [esi]
     af6:	0b 0b                	or     ecx,DWORD PTR [ebx]
     af8:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     afa:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     afc:	01 13                	add    DWORD PTR [ebx],edx
     afe:	00 00                	add    BYTE PTR [eax],al
     b00:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
     b06:	0b 3b                	or     edi,DWORD PTR [ebx]
     b08:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     b0b:	38 0b                	cmp    BYTE PTR [ebx],cl
     b0d:	00 00                	add    BYTE PTR [eax],al
     b0f:	0a 15 01 27 19 49    	or     dl,BYTE PTR ds:0x49192701
     b15:	13 01                	adc    eax,DWORD PTR [ecx]
     b17:	13 00                	adc    eax,DWORD PTR [eax]
     b19:	00 0b                	add    BYTE PTR [ebx],cl
     b1b:	05 00 49 13 00       	add    eax,0x134900
     b20:	00 0c 2e             	add    BYTE PTR [esi+ebp*1],cl
     b23:	01 3f                	add    DWORD PTR [edi],edi
     b25:	19 03                	sbb    DWORD PTR [ebx],eax
     b27:	0e                   	push   cs
     b28:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b2a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b2c:	11 01                	adc    DWORD PTR [ecx],eax
     b2e:	12 06                	adc    al,BYTE PTR [esi]
     b30:	40                   	inc    eax
     b31:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     b37:	00 00                	add    BYTE PTR [eax],al
     b39:	0d 34 00 03 0e       	or     eax,0xe030034
     b3e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b40:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b42:	49                   	dec    ecx
     b43:	13 02                	adc    eax,DWORD PTR [edx]
     b45:	18 00                	sbb    BYTE PTR [eax],al
     b47:	00 0e                	add    BYTE PTR [esi],cl
     b49:	01 01                	add    DWORD PTR [ecx],eax
     b4b:	49                   	dec    ecx
     b4c:	13 01                	adc    eax,DWORD PTR [ecx]
     b4e:	13 00                	adc    eax,DWORD PTR [eax]
     b50:	00 0f                	add    BYTE PTR [edi],cl
     b52:	21 00                	and    DWORD PTR [eax],eax
     b54:	49                   	dec    ecx
     b55:	13 2f                	adc    ebp,DWORD PTR [edi]
     b57:	0b 00                	or     eax,DWORD PTR [eax]
     b59:	00 10                	add    BYTE PTR [eax],dl
     b5b:	34 00                	xor    al,0x0
     b5d:	03 0e                	add    ecx,DWORD PTR [esi]
     b5f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b61:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b63:	49                   	dec    ecx
     b64:	13 3f                	adc    edi,DWORD PTR [edi]
     b66:	19 02                	sbb    DWORD PTR [edx],eax
     b68:	18 00                	sbb    BYTE PTR [eax],al
     b6a:	00 00                	add    BYTE PTR [eax],al
     b6c:	01 11                	add    DWORD PTR [ecx],edx
     b6e:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     b74:	0e                   	push   cs
     b75:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     b77:	11 01                	adc    DWORD PTR [ecx],eax
     b79:	12 06                	adc    al,BYTE PTR [esi]
     b7b:	10 17                	adc    BYTE PTR [edi],dl
     b7d:	00 00                	add    BYTE PTR [eax],al
     b7f:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     b82:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b84:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b87:	0e                   	push   cs
     b88:	00 00                	add    BYTE PTR [eax],al
     b8a:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     b8d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     b8f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     b92:	08 00                	or     BYTE PTR [eax],al
     b94:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     b97:	00 03                	add    BYTE PTR [ebx],al
     b99:	0e                   	push   cs
     b9a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     b9c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     b9e:	49                   	dec    ecx
     b9f:	13 00                	adc    eax,DWORD PTR [eax]
     ba1:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ba7:	49                   	dec    ecx
     ba8:	13 00                	adc    eax,DWORD PTR [eax]
     baa:	00 06                	add    BYTE PTR [esi],al
     bac:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     bb0:	00 00                	add    BYTE PTR [eax],al
     bb2:	07                   	pop    es
     bb3:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     bb6:	19 03                	sbb    DWORD PTR [ebx],eax
     bb8:	0e                   	push   cs
     bb9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bbb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bbd:	27                   	daa    
     bbe:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     bc1:	11 01                	adc    DWORD PTR [ecx],eax
     bc3:	12 06                	adc    al,BYTE PTR [esi]
     bc5:	40                   	inc    eax
     bc6:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     bcc:	00 00                	add    BYTE PTR [eax],al
     bce:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
     bd4:	0b 3b                	or     edi,DWORD PTR [ebx]
     bd6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     bd9:	02 18                	add    bl,BYTE PTR [eax]
     bdb:	00 00                	add    BYTE PTR [eax],al
     bdd:	09 05 00 03 08 3a    	or     DWORD PTR ds:0x3a080300,eax
     be3:	0b 3b                	or     edi,DWORD PTR [ebx]
     be5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     be8:	02 18                	add    bl,BYTE PTR [eax]
     bea:	00 00                	add    BYTE PTR [eax],al
     bec:	0a 2e                	or     ch,BYTE PTR [esi]
     bee:	01 3f                	add    DWORD PTR [edi],edi
     bf0:	19 03                	sbb    DWORD PTR [ebx],eax
     bf2:	0e                   	push   cs
     bf3:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     bf5:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     bf7:	27                   	daa    
     bf8:	19 11                	sbb    DWORD PTR [ecx],edx
     bfa:	01 12                	add    DWORD PTR [edx],edx
     bfc:	06                   	push   es
     bfd:	40                   	inc    eax
     bfe:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c04:	00 00                	add    BYTE PTR [eax],al
     c06:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     c09:	03 08                	add    ecx,DWORD PTR [eax]
     c0b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c0d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c0f:	49                   	dec    ecx
     c10:	13 02                	adc    eax,DWORD PTR [edx]
     c12:	18 00                	sbb    BYTE PTR [eax],al
     c14:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
     c17:	00 03                	add    BYTE PTR [ebx],al
     c19:	0e                   	push   cs
     c1a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c1c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c1e:	49                   	dec    ecx
     c1f:	13 3f                	adc    edi,DWORD PTR [edi]
     c21:	19 02                	sbb    DWORD PTR [edx],eax
     c23:	18 00                	sbb    BYTE PTR [eax],al
     c25:	00 00                	add    BYTE PTR [eax],al
     c27:	01 11                	add    DWORD PTR [ecx],edx
     c29:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     c2f:	0e                   	push   cs
     c30:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     c32:	11 01                	adc    DWORD PTR [ecx],eax
     c34:	12 06                	adc    al,BYTE PTR [esi]
     c36:	10 17                	adc    BYTE PTR [edi],dl
     c38:	00 00                	add    BYTE PTR [eax],al
     c3a:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     c3d:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c3f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c42:	0e                   	push   cs
     c43:	00 00                	add    BYTE PTR [eax],al
     c45:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     c48:	0b 0b                	or     ecx,DWORD PTR [ebx]
     c4a:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     c4d:	08 00                	or     BYTE PTR [eax],al
     c4f:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     c52:	00 03                	add    BYTE PTR [ebx],al
     c54:	0e                   	push   cs
     c55:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c57:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c59:	49                   	dec    ecx
     c5a:	13 00                	adc    eax,DWORD PTR [eax]
     c5c:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     c62:	49                   	dec    ecx
     c63:	13 00                	adc    eax,DWORD PTR [eax]
     c65:	00 06                	add    BYTE PTR [esi],al
     c67:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     c6b:	00 00                	add    BYTE PTR [eax],al
     c6d:	07                   	pop    es
     c6e:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     c71:	19 03                	sbb    DWORD PTR [ebx],eax
     c73:	0e                   	push   cs
     c74:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c76:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     c78:	27                   	daa    
     c79:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     c7c:	11 01                	adc    DWORD PTR [ecx],eax
     c7e:	12 06                	adc    al,BYTE PTR [esi]
     c80:	40                   	inc    eax
     c81:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     c87:	00 00                	add    BYTE PTR [eax],al
     c89:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     c8f:	0b 3b                	or     edi,DWORD PTR [ebx]
     c91:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     c94:	02 18                	add    bl,BYTE PTR [eax]
     c96:	00 00                	add    BYTE PTR [eax],al
     c98:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     c9b:	03 08                	add    ecx,DWORD PTR [eax]
     c9d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     c9f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ca1:	49                   	dec    ecx
     ca2:	13 02                	adc    eax,DWORD PTR [edx]
     ca4:	18 00                	sbb    BYTE PTR [eax],al
     ca6:	00 0a                	add    BYTE PTR [edx],cl
     ca8:	34 00                	xor    al,0x0
     caa:	03 0e                	add    ecx,DWORD PTR [esi]
     cac:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     cae:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     cb0:	49                   	dec    ecx
     cb1:	13 3f                	adc    edi,DWORD PTR [edi]
     cb3:	19 02                	sbb    DWORD PTR [edx],eax
     cb5:	18 00                	sbb    BYTE PTR [eax],al
     cb7:	00 00                	add    BYTE PTR [eax],al
     cb9:	01 11                	add    DWORD PTR [ecx],edx
     cbb:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     cc1:	0e                   	push   cs
     cc2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     cc4:	11 01                	adc    DWORD PTR [ecx],eax
     cc6:	12 06                	adc    al,BYTE PTR [esi]
     cc8:	10 17                	adc    BYTE PTR [edi],dl
     cca:	00 00                	add    BYTE PTR [eax],al
     ccc:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     ccf:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cd1:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cd4:	0e                   	push   cs
     cd5:	00 00                	add    BYTE PTR [eax],al
     cd7:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     cda:	0b 0b                	or     ecx,DWORD PTR [ebx]
     cdc:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     cdf:	08 00                	or     BYTE PTR [eax],al
     ce1:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     ce4:	00 03                	add    BYTE PTR [ebx],al
     ce6:	0e                   	push   cs
     ce7:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ce9:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ceb:	49                   	dec    ecx
     cec:	13 00                	adc    eax,DWORD PTR [eax]
     cee:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     cf4:	49                   	dec    ecx
     cf5:	13 00                	adc    eax,DWORD PTR [eax]
     cf7:	00 06                	add    BYTE PTR [esi],al
     cf9:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
     cfd:	00 00                	add    BYTE PTR [eax],al
     cff:	07                   	pop    es
     d00:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d03:	19 03                	sbb    DWORD PTR [ebx],eax
     d05:	0e                   	push   cs
     d06:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d08:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d0a:	27                   	daa    
     d0b:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     d0e:	11 01                	adc    DWORD PTR [ecx],eax
     d10:	12 06                	adc    al,BYTE PTR [esi]
     d12:	40                   	inc    eax
     d13:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     d19:	00 00                	add    BYTE PTR [eax],al
     d1b:	08 05 00 03 08 3a    	or     BYTE PTR ds:0x3a080300,al
     d21:	0b 3b                	or     edi,DWORD PTR [ebx]
     d23:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d26:	02 18                	add    bl,BYTE PTR [eax]
     d28:	00 00                	add    BYTE PTR [eax],al
     d2a:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     d2d:	03 08                	add    ecx,DWORD PTR [eax]
     d2f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d31:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d33:	49                   	dec    ecx
     d34:	13 02                	adc    eax,DWORD PTR [edx]
     d36:	18 00                	sbb    BYTE PTR [eax],al
     d38:	00 0a                	add    BYTE PTR [edx],cl
     d3a:	05 00 03 0e 3a       	add    eax,0x3a0e0300
     d3f:	0b 3b                	or     edi,DWORD PTR [ebx]
     d41:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     d44:	02 18                	add    bl,BYTE PTR [eax]
     d46:	00 00                	add    BYTE PTR [eax],al
     d48:	0b 34 00             	or     esi,DWORD PTR [eax+eax*1]
     d4b:	03 0e                	add    ecx,DWORD PTR [esi]
     d4d:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d4f:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d51:	49                   	dec    ecx
     d52:	13 3f                	adc    edi,DWORD PTR [edi]
     d54:	19 02                	sbb    DWORD PTR [edx],eax
     d56:	18 00                	sbb    BYTE PTR [eax],al
     d58:	00 00                	add    BYTE PTR [eax],al
     d5a:	01 11                	add    DWORD PTR [ecx],edx
     d5c:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     d62:	0e                   	push   cs
     d63:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     d65:	11 01                	adc    DWORD PTR [ecx],eax
     d67:	12 06                	adc    al,BYTE PTR [esi]
     d69:	10 17                	adc    BYTE PTR [edi],dl
     d6b:	00 00                	add    BYTE PTR [eax],al
     d6d:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     d70:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d72:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d75:	0e                   	push   cs
     d76:	00 00                	add    BYTE PTR [eax],al
     d78:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     d7b:	0b 0b                	or     ecx,DWORD PTR [ebx]
     d7d:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     d80:	08 00                	or     BYTE PTR [eax],al
     d82:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     d85:	00 03                	add    BYTE PTR [ebx],al
     d87:	0e                   	push   cs
     d88:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     d8a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     d8c:	49                   	dec    ecx
     d8d:	13 00                	adc    eax,DWORD PTR [eax]
     d8f:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     d95:	49                   	dec    ecx
     d96:	13 00                	adc    eax,DWORD PTR [eax]
     d98:	00 06                	add    BYTE PTR [esi],al
     d9a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
     d9d:	19 03                	sbb    DWORD PTR [ebx],eax
     d9f:	0e                   	push   cs
     da0:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     da2:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     da4:	27                   	daa    
     da5:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     da8:	11 01                	adc    DWORD PTR [ecx],eax
     daa:	12 06                	adc    al,BYTE PTR [esi]
     dac:	40                   	inc    eax
     dad:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     db3:	00 00                	add    BYTE PTR [eax],al
     db5:	07                   	pop    es
     db6:	05 00 03 08 3a       	add    eax,0x3a080300
     dbb:	0b 3b                	or     edi,DWORD PTR [ebx]
     dbd:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     dc0:	02 18                	add    bl,BYTE PTR [eax]
     dc2:	00 00                	add    BYTE PTR [eax],al
     dc4:	08 2e                	or     BYTE PTR [esi],ch
     dc6:	01 3f                	add    DWORD PTR [edi],edi
     dc8:	19 03                	sbb    DWORD PTR [ebx],eax
     dca:	0e                   	push   cs
     dcb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     dcd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     dcf:	27                   	daa    
     dd0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     dd3:	11 01                	adc    DWORD PTR [ecx],eax
     dd5:	12 06                	adc    al,BYTE PTR [esi]
     dd7:	40                   	inc    eax
     dd8:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
     dde:	00 00                	add    BYTE PTR [eax],al
     de0:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
     de3:	03 08                	add    ecx,DWORD PTR [eax]
     de5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     de7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     de9:	49                   	dec    ecx
     dea:	13 02                	adc    eax,DWORD PTR [edx]
     dec:	18 00                	sbb    BYTE PTR [eax],al
     dee:	00 0a                	add    BYTE PTR [edx],cl
     df0:	34 00                	xor    al,0x0
     df2:	03 0e                	add    ecx,DWORD PTR [esi]
     df4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     df6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     df8:	49                   	dec    ecx
     df9:	13 3f                	adc    edi,DWORD PTR [edi]
     dfb:	19 02                	sbb    DWORD PTR [edx],eax
     dfd:	18 00                	sbb    BYTE PTR [eax],al
     dff:	00 00                	add    BYTE PTR [eax],al
     e01:	01 11                	add    DWORD PTR [ecx],edx
     e03:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
     e09:	0e                   	push   cs
     e0a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     e0c:	11 01                	adc    DWORD PTR [ecx],eax
     e0e:	12 06                	adc    al,BYTE PTR [esi]
     e10:	10 17                	adc    BYTE PTR [edi],dl
     e12:	00 00                	add    BYTE PTR [eax],al
     e14:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     e17:	0b 0b                	or     ecx,DWORD PTR [ebx]
     e19:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     e1c:	08 00                	or     BYTE PTR [eax],al
     e1e:	00 03                	add    BYTE PTR [ebx],al
     e20:	16                   	push   ss
     e21:	00 03                	add    BYTE PTR [ebx],al
     e23:	0e                   	push   cs
     e24:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e26:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e28:	49                   	dec    ecx
     e29:	13 00                	adc    eax,DWORD PTR [eax]
     e2b:	00 04 24             	add    BYTE PTR [esp],al
     e2e:	00 0b                	add    BYTE PTR [ebx],cl
     e30:	0b 3e                	or     edi,DWORD PTR [esi]
     e32:	0b 03                	or     eax,DWORD PTR [ebx]
     e34:	0e                   	push   cs
     e35:	00 00                	add    BYTE PTR [eax],al
     e37:	05 2e 01 3f 19       	add    eax,0x193f012e
     e3c:	03 0e                	add    ecx,DWORD PTR [esi]
     e3e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e40:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e42:	27                   	daa    
     e43:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e46:	11 01                	adc    DWORD PTR [ecx],eax
     e48:	12 06                	adc    al,BYTE PTR [esi]
     e4a:	40                   	inc    eax
     e4b:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     e51:	00 00                	add    BYTE PTR [eax],al
     e53:	06                   	push   es
     e54:	05 00 03 08 3a       	add    eax,0x3a080300
     e59:	0b 3b                	or     edi,DWORD PTR [ebx]
     e5b:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e5e:	02 18                	add    bl,BYTE PTR [eax]
     e60:	00 00                	add    BYTE PTR [eax],al
     e62:	07                   	pop    es
     e63:	34 00                	xor    al,0x0
     e65:	03 08                	add    ecx,DWORD PTR [eax]
     e67:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e69:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e6b:	49                   	dec    ecx
     e6c:	13 02                	adc    eax,DWORD PTR [edx]
     e6e:	18 00                	sbb    BYTE PTR [eax],al
     e70:	00 08                	add    BYTE PTR [eax],cl
     e72:	0f 00 0b             	str    WORD PTR [ebx]
     e75:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     e78:	00 00                	add    BYTE PTR [eax],al
     e7a:	09 26                	or     DWORD PTR [esi],esp
     e7c:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     e7f:	00 00                	add    BYTE PTR [eax],al
     e81:	0a 2e                	or     ch,BYTE PTR [esi]
     e83:	01 3f                	add    DWORD PTR [edi],edi
     e85:	19 03                	sbb    DWORD PTR [ebx],eax
     e87:	0e                   	push   cs
     e88:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     e8a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     e8c:	27                   	daa    
     e8d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     e90:	11 01                	adc    DWORD PTR [ecx],eax
     e92:	12 06                	adc    al,BYTE PTR [esi]
     e94:	40                   	inc    eax
     e95:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     e9b:	00 01                	add    BYTE PTR [ecx],al
     e9d:	11 01                	adc    DWORD PTR [ecx],eax
     e9f:	25 0e 13 0b 03       	and    eax,0x30b130e
     ea4:	0e                   	push   cs
     ea5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     ea7:	11 01                	adc    DWORD PTR [ecx],eax
     ea9:	12 06                	adc    al,BYTE PTR [esi]
     eab:	10 17                	adc    BYTE PTR [edi],dl
     ead:	00 00                	add    BYTE PTR [eax],al
     eaf:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     eb2:	0b 0b                	or     ecx,DWORD PTR [ebx]
     eb4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     eb7:	08 00                	or     BYTE PTR [eax],al
     eb9:	00 03                	add    BYTE PTR [ebx],al
     ebb:	16                   	push   ss
     ebc:	00 03                	add    BYTE PTR [ebx],al
     ebe:	0e                   	push   cs
     ebf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ec1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ec3:	49                   	dec    ecx
     ec4:	13 00                	adc    eax,DWORD PTR [eax]
     ec6:	00 04 24             	add    BYTE PTR [esp],al
     ec9:	00 0b                	add    BYTE PTR [ebx],cl
     ecb:	0b 3e                	or     edi,DWORD PTR [esi]
     ecd:	0b 03                	or     eax,DWORD PTR [ebx]
     ecf:	0e                   	push   cs
     ed0:	00 00                	add    BYTE PTR [eax],al
     ed2:	05 2e 01 3f 19       	add    eax,0x193f012e
     ed7:	03 0e                	add    ecx,DWORD PTR [esi]
     ed9:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     edb:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     edd:	27                   	daa    
     ede:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     ee1:	11 01                	adc    DWORD PTR [ecx],eax
     ee3:	12 06                	adc    al,BYTE PTR [esi]
     ee5:	40                   	inc    eax
     ee6:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     eec:	00 00                	add    BYTE PTR [eax],al
     eee:	06                   	push   es
     eef:	05 00 03 08 3a       	add    eax,0x3a080300
     ef4:	0b 3b                	or     edi,DWORD PTR [ebx]
     ef6:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     ef9:	02 18                	add    bl,BYTE PTR [eax]
     efb:	00 00                	add    BYTE PTR [eax],al
     efd:	07                   	pop    es
     efe:	0f 00 0b             	str    WORD PTR [ebx]
     f01:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f04:	00 00                	add    BYTE PTR [eax],al
     f06:	08 26                	or     BYTE PTR [esi],ah
     f08:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     f0b:	00 00                	add    BYTE PTR [eax],al
     f0d:	09 2e                	or     DWORD PTR [esi],ebp
     f0f:	01 3f                	add    DWORD PTR [edi],edi
     f11:	19 03                	sbb    DWORD PTR [ebx],eax
     f13:	0e                   	push   cs
     f14:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f16:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f18:	27                   	daa    
     f19:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f1c:	11 01                	adc    DWORD PTR [ecx],eax
     f1e:	12 06                	adc    al,BYTE PTR [esi]
     f20:	40                   	inc    eax
     f21:	18 97 42 19 00 00    	sbb    BYTE PTR [edi+0x1942],dl
     f27:	00 01                	add    BYTE PTR [ecx],al
     f29:	11 01                	adc    DWORD PTR [ecx],eax
     f2b:	25 0e 13 0b 03       	and    eax,0x30b130e
     f30:	0e                   	push   cs
     f31:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     f33:	11 01                	adc    DWORD PTR [ecx],eax
     f35:	12 06                	adc    al,BYTE PTR [esi]
     f37:	10 17                	adc    BYTE PTR [edi],dl
     f39:	00 00                	add    BYTE PTR [eax],al
     f3b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     f3e:	0b 0b                	or     ecx,DWORD PTR [ebx]
     f40:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     f43:	08 00                	or     BYTE PTR [eax],al
     f45:	00 03                	add    BYTE PTR [ebx],al
     f47:	16                   	push   ss
     f48:	00 03                	add    BYTE PTR [ebx],al
     f4a:	0e                   	push   cs
     f4b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f4d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f4f:	49                   	dec    ecx
     f50:	13 00                	adc    eax,DWORD PTR [eax]
     f52:	00 04 24             	add    BYTE PTR [esp],al
     f55:	00 0b                	add    BYTE PTR [ebx],cl
     f57:	0b 3e                	or     edi,DWORD PTR [esi]
     f59:	0b 03                	or     eax,DWORD PTR [ebx]
     f5b:	0e                   	push   cs
     f5c:	00 00                	add    BYTE PTR [eax],al
     f5e:	05 2e 01 3f 19       	add    eax,0x193f012e
     f63:	03 0e                	add    ecx,DWORD PTR [esi]
     f65:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f67:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f69:	27                   	daa    
     f6a:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     f6d:	11 01                	adc    DWORD PTR [ecx],eax
     f6f:	12 06                	adc    al,BYTE PTR [esi]
     f71:	40                   	inc    eax
     f72:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
     f78:	00 00                	add    BYTE PTR [eax],al
     f7a:	06                   	push   es
     f7b:	05 00 03 08 3a       	add    eax,0x3a080300
     f80:	0b 3b                	or     edi,DWORD PTR [ebx]
     f82:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f85:	02 18                	add    bl,BYTE PTR [eax]
     f87:	00 00                	add    BYTE PTR [eax],al
     f89:	07                   	pop    es
     f8a:	34 00                	xor    al,0x0
     f8c:	03 08                	add    ecx,DWORD PTR [eax]
     f8e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     f90:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     f92:	49                   	dec    ecx
     f93:	13 02                	adc    eax,DWORD PTR [edx]
     f95:	18 00                	sbb    BYTE PTR [eax],al
     f97:	00 08                	add    BYTE PTR [eax],cl
     f99:	0f 00 0b             	str    WORD PTR [ebx]
     f9c:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
     f9f:	00 00                	add    BYTE PTR [eax],al
     fa1:	09 26                	or     DWORD PTR [esi],esp
     fa3:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
     fa6:	00 00                	add    BYTE PTR [eax],al
     fa8:	0a 2e                	or     ch,BYTE PTR [esi]
     faa:	01 3f                	add    DWORD PTR [edi],edi
     fac:	19 03                	sbb    DWORD PTR [ebx],eax
     fae:	0e                   	push   cs
     faf:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     fb1:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     fb3:	27                   	daa    
     fb4:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
     fb7:	11 01                	adc    DWORD PTR [ecx],eax
     fb9:	12 06                	adc    al,BYTE PTR [esi]
     fbb:	40                   	inc    eax
     fbc:	18 96 42 19 00 00    	sbb    BYTE PTR [esi+0x1942],dl
     fc2:	00 01                	add    BYTE PTR [ecx],al
     fc4:	11 01                	adc    DWORD PTR [ecx],eax
     fc6:	25 0e 13 0b 03       	and    eax,0x30b130e
     fcb:	0e                   	push   cs
     fcc:	1b 0e                	sbb    ecx,DWORD PTR [esi]
     fce:	11 01                	adc    DWORD PTR [ecx],eax
     fd0:	12 06                	adc    al,BYTE PTR [esi]
     fd2:	10 17                	adc    BYTE PTR [edi],dl
     fd4:	00 00                	add    BYTE PTR [eax],al
     fd6:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
     fd9:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fdb:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fde:	0e                   	push   cs
     fdf:	00 00                	add    BYTE PTR [eax],al
     fe1:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
     fe4:	0b 0b                	or     ecx,DWORD PTR [ebx]
     fe6:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
     fe9:	08 00                	or     BYTE PTR [eax],al
     feb:	00 04 16             	add    BYTE PTR [esi+edx*1],al
     fee:	00 03                	add    BYTE PTR [ebx],al
     ff0:	0e                   	push   cs
     ff1:	3a 0b                	cmp    cl,BYTE PTR [ebx]
     ff3:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
     ff5:	49                   	dec    ecx
     ff6:	13 00                	adc    eax,DWORD PTR [eax]
     ff8:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
     ffe:	49                   	dec    ecx
     fff:	13 00                	adc    eax,DWORD PTR [eax]
    1001:	00 06                	add    BYTE PTR [esi],al
    1003:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1007:	00 00                	add    BYTE PTR [eax],al
    1009:	07                   	pop    es
    100a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    100d:	19 03                	sbb    DWORD PTR [ebx],eax
    100f:	0e                   	push   cs
    1010:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1012:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1014:	27                   	daa    
    1015:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1018:	11 01                	adc    DWORD PTR [ecx],eax
    101a:	12 06                	adc    al,BYTE PTR [esi]
    101c:	40                   	inc    eax
    101d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1023:	00 00                	add    BYTE PTR [eax],al
    1025:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    102b:	0b 3b                	or     edi,DWORD PTR [ebx]
    102d:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1030:	02 18                	add    bl,BYTE PTR [eax]
    1032:	00 00                	add    BYTE PTR [eax],al
    1034:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1037:	03 08                	add    ecx,DWORD PTR [eax]
    1039:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    103b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    103d:	49                   	dec    ecx
    103e:	13 02                	adc    eax,DWORD PTR [edx]
    1040:	18 00                	sbb    BYTE PTR [eax],al
    1042:	00 0a                	add    BYTE PTR [edx],cl
    1044:	34 00                	xor    al,0x0
    1046:	03 0e                	add    ecx,DWORD PTR [esi]
    1048:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    104a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    104c:	49                   	dec    ecx
    104d:	13 00                	adc    eax,DWORD PTR [eax]
    104f:	00 0b                	add    BYTE PTR [ebx],cl
    1051:	34 00                	xor    al,0x0
    1053:	03 08                	add    ecx,DWORD PTR [eax]
    1055:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1057:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1059:	49                   	dec    ecx
    105a:	13 00                	adc    eax,DWORD PTR [eax]
    105c:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    105f:	00 03                	add    BYTE PTR [ebx],al
    1061:	0e                   	push   cs
    1062:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1064:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1066:	49                   	dec    ecx
    1067:	13 02                	adc    eax,DWORD PTR [edx]
    1069:	18 00                	sbb    BYTE PTR [eax],al
    106b:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    1071:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1073:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1075:	49                   	dec    ecx
    1076:	13 3f                	adc    edi,DWORD PTR [edi]
    1078:	19 02                	sbb    DWORD PTR [edx],eax
    107a:	18 00                	sbb    BYTE PTR [eax],al
    107c:	00 00                	add    BYTE PTR [eax],al
    107e:	01 11                	add    DWORD PTR [ecx],edx
    1080:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1086:	0e                   	push   cs
    1087:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1089:	11 01                	adc    DWORD PTR [ecx],eax
    108b:	12 06                	adc    al,BYTE PTR [esi]
    108d:	10 17                	adc    BYTE PTR [edi],dl
    108f:	00 00                	add    BYTE PTR [eax],al
    1091:	02 2e                	add    ch,BYTE PTR [esi]
    1093:	01 3f                	add    DWORD PTR [edi],edi
    1095:	19 03                	sbb    DWORD PTR [ebx],eax
    1097:	0e                   	push   cs
    1098:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    109a:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    109c:	27                   	daa    
    109d:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    10a0:	11 01                	adc    DWORD PTR [ecx],eax
    10a2:	12 06                	adc    al,BYTE PTR [esi]
    10a4:	40                   	inc    eax
    10a5:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    10ab:	00 00                	add    BYTE PTR [eax],al
    10ad:	03 05 00 03 08 3a    	add    eax,DWORD PTR ds:0x3a080300
    10b3:	0b 3b                	or     edi,DWORD PTR [ebx]
    10b5:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10b8:	02 18                	add    bl,BYTE PTR [eax]
    10ba:	00 00                	add    BYTE PTR [eax],al
    10bc:	04 0f                	add    al,0xf
    10be:	00 0b                	add    BYTE PTR [ebx],cl
    10c0:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    10c3:	00 00                	add    BYTE PTR [eax],al
    10c5:	05 24 00 0b 0b       	add    eax,0xb0b0024
    10ca:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10cd:	0e                   	push   cs
    10ce:	00 00                	add    BYTE PTR [eax],al
    10d0:	06                   	push   es
    10d1:	24 00                	and    al,0x0
    10d3:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10d5:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10d8:	08 00                	or     BYTE PTR [eax],al
    10da:	00 00                	add    BYTE PTR [eax],al
    10dc:	01 11                	add    DWORD PTR [ecx],edx
    10de:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    10e4:	0e                   	push   cs
    10e5:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    10e7:	11 01                	adc    DWORD PTR [ecx],eax
    10e9:	12 06                	adc    al,BYTE PTR [esi]
    10eb:	10 17                	adc    BYTE PTR [edi],dl
    10ed:	00 00                	add    BYTE PTR [eax],al
    10ef:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    10f2:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10f4:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    10f7:	0e                   	push   cs
    10f8:	00 00                	add    BYTE PTR [eax],al
    10fa:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    10fd:	0b 0b                	or     ecx,DWORD PTR [ebx]
    10ff:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1102:	08 00                	or     BYTE PTR [eax],al
    1104:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    1107:	00 03                	add    BYTE PTR [ebx],al
    1109:	0e                   	push   cs
    110a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    110c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    110e:	49                   	dec    ecx
    110f:	13 00                	adc    eax,DWORD PTR [eax]
    1111:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    1117:	49                   	dec    ecx
    1118:	13 00                	adc    eax,DWORD PTR [eax]
    111a:	00 06                	add    BYTE PTR [esi],al
    111c:	26 00 49 13          	add    BYTE PTR es:[ecx+0x13],cl
    1120:	00 00                	add    BYTE PTR [eax],al
    1122:	07                   	pop    es
    1123:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1126:	19 03                	sbb    DWORD PTR [ebx],eax
    1128:	0e                   	push   cs
    1129:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    112b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    112d:	27                   	daa    
    112e:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1131:	11 01                	adc    DWORD PTR [ecx],eax
    1133:	12 06                	adc    al,BYTE PTR [esi]
    1135:	40                   	inc    eax
    1136:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    113c:	00 00                	add    BYTE PTR [eax],al
    113e:	08 05 00 03 0e 3a    	or     BYTE PTR ds:0x3a0e0300,al
    1144:	0b 3b                	or     edi,DWORD PTR [ebx]
    1146:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1149:	02 18                	add    bl,BYTE PTR [eax]
    114b:	00 00                	add    BYTE PTR [eax],al
    114d:	09 34 00             	or     DWORD PTR [eax+eax*1],esi
    1150:	03 08                	add    ecx,DWORD PTR [eax]
    1152:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1154:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1156:	49                   	dec    ecx
    1157:	13 02                	adc    eax,DWORD PTR [edx]
    1159:	18 00                	sbb    BYTE PTR [eax],al
    115b:	00 0a                	add    BYTE PTR [edx],cl
    115d:	34 00                	xor    al,0x0
    115f:	03 0e                	add    ecx,DWORD PTR [esi]
    1161:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1163:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1165:	49                   	dec    ecx
    1166:	13 00                	adc    eax,DWORD PTR [eax]
    1168:	00 0b                	add    BYTE PTR [ebx],cl
    116a:	34 00                	xor    al,0x0
    116c:	03 08                	add    ecx,DWORD PTR [eax]
    116e:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1170:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1172:	49                   	dec    ecx
    1173:	13 00                	adc    eax,DWORD PTR [eax]
    1175:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    1178:	00 03                	add    BYTE PTR [ebx],al
    117a:	0e                   	push   cs
    117b:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    117d:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    117f:	49                   	dec    ecx
    1180:	13 3f                	adc    edi,DWORD PTR [edi]
    1182:	19 02                	sbb    DWORD PTR [edx],eax
    1184:	18 00                	sbb    BYTE PTR [eax],al
    1186:	00 00                	add    BYTE PTR [eax],al
    1188:	01 11                	add    DWORD PTR [ecx],edx
    118a:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1190:	0e                   	push   cs
    1191:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    1193:	11 01                	adc    DWORD PTR [ecx],eax
    1195:	12 06                	adc    al,BYTE PTR [esi]
    1197:	10 17                	adc    BYTE PTR [edi],dl
    1199:	00 00                	add    BYTE PTR [eax],al
    119b:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    119e:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11a0:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11a3:	0e                   	push   cs
    11a4:	00 00                	add    BYTE PTR [eax],al
    11a6:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    11a9:	0b 0b                	or     ecx,DWORD PTR [ebx]
    11ab:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    11ae:	08 00                	or     BYTE PTR [eax],al
    11b0:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    11b3:	00 03                	add    BYTE PTR [ebx],al
    11b5:	0e                   	push   cs
    11b6:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11b8:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11ba:	49                   	dec    ecx
    11bb:	13 00                	adc    eax,DWORD PTR [eax]
    11bd:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    11c3:	49                   	dec    ecx
    11c4:	13 00                	adc    eax,DWORD PTR [eax]
    11c6:	00 06                	add    BYTE PTR [esi],al
    11c8:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    11cb:	19 03                	sbb    DWORD PTR [ebx],eax
    11cd:	0e                   	push   cs
    11ce:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11d0:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11d2:	27                   	daa    
    11d3:	19 11                	sbb    DWORD PTR [ecx],edx
    11d5:	01 12                	add    DWORD PTR [edx],edx
    11d7:	06                   	push   es
    11d8:	40                   	inc    eax
    11d9:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    11df:	00 00                	add    BYTE PTR [eax],al
    11e1:	07                   	pop    es
    11e2:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    11e7:	0b 3b                	or     edi,DWORD PTR [ebx]
    11e9:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    11ec:	02 18                	add    bl,BYTE PTR [eax]
    11ee:	00 00                	add    BYTE PTR [eax],al
    11f0:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    11f3:	03 08                	add    ecx,DWORD PTR [eax]
    11f5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    11f7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    11f9:	49                   	dec    ecx
    11fa:	13 02                	adc    eax,DWORD PTR [edx]
    11fc:	18 00                	sbb    BYTE PTR [eax],al
    11fe:	00 09                	add    BYTE PTR [ecx],cl
    1200:	34 00                	xor    al,0x0
    1202:	03 0e                	add    ecx,DWORD PTR [esi]
    1204:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1206:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1208:	49                   	dec    ecx
    1209:	13 3f                	adc    edi,DWORD PTR [edi]
    120b:	19 02                	sbb    DWORD PTR [edx],eax
    120d:	18 00                	sbb    BYTE PTR [eax],al
    120f:	00 00                	add    BYTE PTR [eax],al
    1211:	01 11                	add    DWORD PTR [ecx],edx
    1213:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    1219:	0e                   	push   cs
    121a:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    121c:	11 01                	adc    DWORD PTR [ecx],eax
    121e:	12 06                	adc    al,BYTE PTR [esi]
    1220:	10 17                	adc    BYTE PTR [edi],dl
    1222:	00 00                	add    BYTE PTR [eax],al
    1224:	02 24 00             	add    ah,BYTE PTR [eax+eax*1]
    1227:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1229:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    122c:	0e                   	push   cs
    122d:	00 00                	add    BYTE PTR [eax],al
    122f:	03 24 00             	add    esp,DWORD PTR [eax+eax*1]
    1232:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1234:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1237:	08 00                	or     BYTE PTR [eax],al
    1239:	00 04 16             	add    BYTE PTR [esi+edx*1],al
    123c:	00 03                	add    BYTE PTR [ebx],al
    123e:	0e                   	push   cs
    123f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1241:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1243:	49                   	dec    ecx
    1244:	13 00                	adc    eax,DWORD PTR [eax]
    1246:	00 05 0f 00 0b 0b    	add    BYTE PTR ds:0xb0b000f,al
    124c:	49                   	dec    ecx
    124d:	13 00                	adc    eax,DWORD PTR [eax]
    124f:	00 06                	add    BYTE PTR [esi],al
    1251:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    1254:	19 03                	sbb    DWORD PTR [ebx],eax
    1256:	0e                   	push   cs
    1257:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1259:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    125b:	27                   	daa    
    125c:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    125f:	11 01                	adc    DWORD PTR [ecx],eax
    1261:	12 06                	adc    al,BYTE PTR [esi]
    1263:	40                   	inc    eax
    1264:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    126a:	00 00                	add    BYTE PTR [eax],al
    126c:	07                   	pop    es
    126d:	05 00 03 0e 3a       	add    eax,0x3a0e0300
    1272:	0b 3b                	or     edi,DWORD PTR [ebx]
    1274:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1277:	02 18                	add    bl,BYTE PTR [eax]
    1279:	00 00                	add    BYTE PTR [eax],al
    127b:	08 34 00             	or     BYTE PTR [eax+eax*1],dh
    127e:	03 08                	add    ecx,DWORD PTR [eax]
    1280:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1282:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1284:	49                   	dec    ecx
    1285:	13 02                	adc    eax,DWORD PTR [edx]
    1287:	18 00                	sbb    BYTE PTR [eax],al
    1289:	00 09                	add    BYTE PTR [ecx],cl
    128b:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    128e:	19 03                	sbb    DWORD PTR [ebx],eax
    1290:	0e                   	push   cs
    1291:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1293:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1295:	27                   	daa    
    1296:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1299:	11 01                	adc    DWORD PTR [ecx],eax
    129b:	12 06                	adc    al,BYTE PTR [esi]
    129d:	40                   	inc    eax
    129e:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    12a4:	00 00                	add    BYTE PTR [eax],al
    12a6:	0a 01                	or     al,BYTE PTR [ecx]
    12a8:	01 49 13             	add    DWORD PTR [ecx+0x13],ecx
    12ab:	01 13                	add    DWORD PTR [ebx],edx
    12ad:	00 00                	add    BYTE PTR [eax],al
    12af:	0b 21                	or     esp,DWORD PTR [ecx]
    12b1:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    12b4:	2f                   	das    
    12b5:	0b 00                	or     eax,DWORD PTR [eax]
    12b7:	00 0c 34             	add    BYTE PTR [esp+esi*1],cl
    12ba:	00 03                	add    BYTE PTR [ebx],al
    12bc:	0e                   	push   cs
    12bd:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12bf:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12c1:	49                   	dec    ecx
    12c2:	13 02                	adc    eax,DWORD PTR [edx]
    12c4:	18 00                	sbb    BYTE PTR [eax],al
    12c6:	00 0d 34 00 03 0e    	add    BYTE PTR ds:0xe030034,cl
    12cc:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    12ce:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    12d0:	49                   	dec    ecx
    12d1:	13 3f                	adc    edi,DWORD PTR [edi]
    12d3:	19 02                	sbb    DWORD PTR [edx],eax
    12d5:	18 00                	sbb    BYTE PTR [eax],al
    12d7:	00 00                	add    BYTE PTR [eax],al
    12d9:	01 11                	add    DWORD PTR [ecx],edx
    12db:	01 25 0e 13 0b 03    	add    DWORD PTR ds:0x30b130e,esp
    12e1:	0e                   	push   cs
    12e2:	1b 0e                	sbb    ecx,DWORD PTR [esi]
    12e4:	11 01                	adc    DWORD PTR [ecx],eax
    12e6:	12 06                	adc    al,BYTE PTR [esi]
    12e8:	10 17                	adc    BYTE PTR [edi],dl
    12ea:	00 00                	add    BYTE PTR [eax],al
    12ec:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12ef:	03 0e                	add    ecx,DWORD PTR [esi]
    12f1:	0b 0b                	or     ecx,DWORD PTR [ebx]
    12f3:	49                   	dec    ecx
    12f4:	13 3a                	adc    edi,DWORD PTR [edx]
    12f6:	0b 3b                	or     edi,DWORD PTR [ebx]
    12f8:	0b 01                	or     eax,DWORD PTR [ecx]
    12fa:	13 00                	adc    eax,DWORD PTR [eax]
    12fc:	00 03                	add    BYTE PTR [ebx],al
    12fe:	28 00                	sub    BYTE PTR [eax],al
    1300:	03 0e                	add    ecx,DWORD PTR [esi]
    1302:	1c 0b                	sbb    al,0xb
    1304:	00 00                	add    BYTE PTR [eax],al
    1306:	04 28                	add    al,0x28
    1308:	00 03                	add    BYTE PTR [ebx],al
    130a:	0e                   	push   cs
    130b:	1c 05                	sbb    al,0x5
    130d:	00 00                	add    BYTE PTR [eax],al
    130f:	05 24 00 0b 0b       	add    eax,0xb0b0024
    1314:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1317:	0e                   	push   cs
    1318:	00 00                	add    BYTE PTR [eax],al
    131a:	06                   	push   es
    131b:	24 00                	and    al,0x0
    131d:	0b 0b                	or     ecx,DWORD PTR [ebx]
    131f:	3e 0b 03             	or     eax,DWORD PTR ds:[ebx]
    1322:	08 00                	or     BYTE PTR [eax],al
    1324:	00 07                	add    BYTE PTR [edi],al
    1326:	16                   	push   ss
    1327:	00 03                	add    BYTE PTR [ebx],al
    1329:	0e                   	push   cs
    132a:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    132c:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    132e:	49                   	dec    ecx
    132f:	13 00                	adc    eax,DWORD PTR [eax]
    1331:	00 08                	add    BYTE PTR [eax],cl
    1333:	13 01                	adc    eax,DWORD PTR [ecx]
    1335:	03 08                	add    ecx,DWORD PTR [eax]
    1337:	0b 0b                	or     ecx,DWORD PTR [ebx]
    1339:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    133b:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    133d:	01 13                	add    DWORD PTR [ebx],edx
    133f:	00 00                	add    BYTE PTR [eax],al
    1341:	09 0d 00 03 0e 3a    	or     DWORD PTR ds:0x3a0e0300,ecx
    1347:	0b 3b                	or     edi,DWORD PTR [ebx]
    1349:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    134c:	38 0b                	cmp    BYTE PTR [ebx],cl
    134e:	00 00                	add    BYTE PTR [eax],al
    1350:	0a 0f                	or     cl,BYTE PTR [edi]
    1352:	00 0b                	add    BYTE PTR [ebx],cl
    1354:	0b 49 13             	or     ecx,DWORD PTR [ecx+0x13]
    1357:	00 00                	add    BYTE PTR [eax],al
    1359:	0b 26                	or     esp,DWORD PTR [esi]
    135b:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    135e:	00 00                	add    BYTE PTR [eax],al
    1360:	0c 2e                	or     al,0x2e
    1362:	01 3f                	add    DWORD PTR [edi],edi
    1364:	19 03                	sbb    DWORD PTR [ebx],eax
    1366:	0e                   	push   cs
    1367:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1369:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    136b:	49                   	dec    ecx
    136c:	13 11                	adc    edx,DWORD PTR [ecx]
    136e:	01 12                	add    DWORD PTR [edx],edx
    1370:	06                   	push   es
    1371:	40                   	inc    eax
    1372:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    1378:	00 00                	add    BYTE PTR [eax],al
    137a:	0d 34 00 03 0e       	or     eax,0xe030034
    137f:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1381:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1383:	49                   	dec    ecx
    1384:	13 02                	adc    eax,DWORD PTR [edx]
    1386:	18 00                	sbb    BYTE PTR [eax],al
    1388:	00 0e                	add    BYTE PTR [esi],cl
    138a:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    138d:	19 03                	sbb    DWORD PTR [ebx],eax
    138f:	0e                   	push   cs
    1390:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    1392:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    1394:	27                   	daa    
    1395:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    1398:	11 01                	adc    DWORD PTR [ecx],eax
    139a:	12 06                	adc    al,BYTE PTR [esi]
    139c:	40                   	inc    eax
    139d:	18 97 42 19 01 13    	sbb    BYTE PTR [edi+0x13011942],dl
    13a3:	00 00                	add    BYTE PTR [eax],al
    13a5:	0f 05                	syscall 
    13a7:	00 03                	add    BYTE PTR [ebx],al
    13a9:	0e                   	push   cs
    13aa:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13ac:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13ae:	49                   	dec    ecx
    13af:	13 02                	adc    eax,DWORD PTR [edx]
    13b1:	18 00                	sbb    BYTE PTR [eax],al
    13b3:	00 10                	add    BYTE PTR [eax],dl
    13b5:	2e 01 3f             	add    DWORD PTR cs:[edi],edi
    13b8:	19 03                	sbb    DWORD PTR [ebx],eax
    13ba:	0e                   	push   cs
    13bb:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13bd:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13bf:	27                   	daa    
    13c0:	19 49 13             	sbb    DWORD PTR [ecx+0x13],ecx
    13c3:	11 01                	adc    DWORD PTR [ecx],eax
    13c5:	12 06                	adc    al,BYTE PTR [esi]
    13c7:	40                   	inc    eax
    13c8:	18 96 42 19 01 13    	sbb    BYTE PTR [esi+0x13011942],dl
    13ce:	00 00                	add    BYTE PTR [eax],al
    13d0:	11 34 00             	adc    DWORD PTR [eax+eax*1],esi
    13d3:	03 08                	add    ecx,DWORD PTR [eax]
    13d5:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13d7:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13d9:	49                   	dec    ecx
    13da:	13 02                	adc    eax,DWORD PTR [edx]
    13dc:	18 00                	sbb    BYTE PTR [eax],al
    13de:	00 12                	add    BYTE PTR [edx],dl
    13e0:	34 00                	xor    al,0x0
    13e2:	03 0e                	add    ecx,DWORD PTR [esi]
    13e4:	3a 0b                	cmp    cl,BYTE PTR [ebx]
    13e6:	3b 0b                	cmp    ecx,DWORD PTR [ebx]
    13e8:	49                   	dec    ecx
    13e9:	13 3f                	adc    edi,DWORD PTR [edi]
    13eb:	19 02                	sbb    DWORD PTR [edx],eax
    13ed:	18 00                	sbb    BYTE PTR [eax],al
    13ef:	00 13                	add    BYTE PTR [ebx],dl
    13f1:	01 01                	add    DWORD PTR [ecx],eax
    13f3:	49                   	dec    ecx
    13f4:	13 01                	adc    eax,DWORD PTR [ecx]
    13f6:	13 00                	adc    eax,DWORD PTR [eax]
    13f8:	00 14 21             	add    BYTE PTR [ecx+eiz*1],dl
    13fb:	00 49 13             	add    BYTE PTR [ecx+0x13],cl
    13fe:	2f                   	das    
    13ff:	0b 00                	or     eax,DWORD PTR [eax]
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00                	sbb    al,0x0
   2:	00 00                	add    BYTE PTR [eax],al
   4:	02 00                	add    al,BYTE PTR [eax]
   6:	00 00                	add    BYTE PTR [eax],al
   8:	00 00                	add    BYTE PTR [eax],al
   a:	04 00                	add    al,0x0
   c:	00 00                	add    BYTE PTR [eax],al
   e:	00 00                	add    BYTE PTR [eax],al
  10:	00 00                	add    BYTE PTR [eax],al
  12:	00 30                	add    BYTE PTR [eax],dh
  14:	70 00                	jo     16 <sysEnter_Vector-0x12ffea>
	...
  1e:	00 00                	add    BYTE PTR [eax],al
  20:	1c 00                	sbb    al,0x0
  22:	00 00                	add    BYTE PTR [eax],al
  24:	02 00                	add    al,BYTE PTR [eax]
  26:	63 01                	arpl   WORD PTR [ecx],ax
  28:	00 00                	add    BYTE PTR [eax],al
  2a:	04 00                	add    al,0x0
  2c:	00 00                	add    BYTE PTR [eax],al
  2e:	00 00                	add    BYTE PTR [eax],al
  30:	70 00                	jo     32 <sysEnter_Vector-0x12ffce>
  32:	00 30                	add    BYTE PTR [eax],dh
  34:	aa                   	stos   BYTE PTR es:[edi],al
	...
  3d:	00 00                	add    BYTE PTR [eax],al
  3f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  42:	00 00                	add    BYTE PTR [eax],al
  44:	02 00                	add    al,BYTE PTR [eax]
  46:	05 03 00 00 04       	add    eax,0x4000003
  4b:	00 00                	add    BYTE PTR [eax],al
  4d:	00 00                	add    BYTE PTR [eax],al
  4f:	00 1c 01             	add    BYTE PTR [ecx+eax*1],bl
  52:	00 30                	add    BYTE PTR [eax],dh
  54:	97                   	xchg   edi,eax
	...
  5d:	00 00                	add    BYTE PTR [eax],al
  5f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  62:	00 00                	add    BYTE PTR [eax],al
  64:	02 00                	add    al,BYTE PTR [eax]
  66:	4a                   	dec    edx
  67:	04 00                	add    al,0x0
  69:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  6c:	00 00                	add    BYTE PTR [eax],al
  6e:	00 00                	add    BYTE PTR [eax],al
  70:	b4 01                	mov    ah,0x1
  72:	00 30                	add    BYTE PTR [eax],dh
  74:	49                   	dec    ecx
  75:	02 00                	add    al,BYTE PTR [eax]
	...
  7f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  82:	00 00                	add    BYTE PTR [eax],al
  84:	02 00                	add    al,BYTE PTR [eax]
  86:	60                   	pusha  
  87:	06                   	push   es
  88:	00 00                	add    BYTE PTR [eax],al
  8a:	04 00                	add    al,0x0
  8c:	00 00                	add    BYTE PTR [eax],al
  8e:	00 00                	add    BYTE PTR [eax],al
  90:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  93:	30 6b 02             	xor    BYTE PTR [ebx+0x2],ch
	...
  9e:	00 00                	add    BYTE PTR [eax],al
  a0:	1c 00                	sbb    al,0x0
  a2:	00 00                	add    BYTE PTR [eax],al
  a4:	02 00                	add    al,BYTE PTR [eax]
  a6:	16                   	push   ss
  a7:	08 00                	or     BYTE PTR [eax],al
  a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
  ac:	00 00                	add    BYTE PTR [eax],al
  ae:	00 00                	add    BYTE PTR [eax],al
  b0:	6c                   	ins    BYTE PTR es:[edi],dx
  b1:	06                   	push   es
  b2:	00 30                	add    BYTE PTR [eax],dh
  b4:	f2 00 00             	repnz add BYTE PTR [eax],al
	...
  bf:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  c2:	00 00                	add    BYTE PTR [eax],al
  c4:	02 00                	add    al,BYTE PTR [eax]
  c6:	14 0b                	adc    al,0xb
  c8:	00 00                	add    BYTE PTR [eax],al
  ca:	04 00                	add    al,0x0
  cc:	00 00                	add    BYTE PTR [eax],al
  ce:	00 00                	add    BYTE PTR [eax],al
  d0:	60                   	pusha  
  d1:	07                   	pop    es
  d2:	00 30                	add    BYTE PTR [eax],dh
  d4:	52                   	push   edx
  d5:	01 00                	add    DWORD PTR [eax],eax
	...
  df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
  e2:	00 00                	add    BYTE PTR [eax],al
  e4:	02 00                	add    al,BYTE PTR [eax]
  e6:	c6                   	(bad)  
  e7:	0d 00 00 04 00       	or     eax,0x40000
  ec:	00 00                	add    BYTE PTR [eax],al
  ee:	00 00                	add    BYTE PTR [eax],al
  f0:	b4 08                	mov    ah,0x8
  f2:	00 30                	add    BYTE PTR [eax],dh
  f4:	e3 05                	jecxz  fb <sysEnter_Vector-0x12ff05>
	...
  fe:	00 00                	add    BYTE PTR [eax],al
 100:	1c 00                	sbb    al,0x0
 102:	00 00                	add    BYTE PTR [eax],al
 104:	02 00                	add    al,BYTE PTR [eax]
 106:	3c 14                	cmp    al,0x14
 108:	00 00                	add    BYTE PTR [eax],al
 10a:	04 00                	add    al,0x0
 10c:	00 00                	add    BYTE PTR [eax],al
 10e:	00 00                	add    BYTE PTR [eax],al
 110:	98                   	cwde   
 111:	0e                   	push   cs
 112:	00 30                	add    BYTE PTR [eax],dh
 114:	6d                   	ins    DWORD PTR es:[edi],dx
 115:	03 00                	add    eax,DWORD PTR [eax]
	...
 11f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 122:	00 00                	add    BYTE PTR [eax],al
 124:	02 00                	add    al,BYTE PTR [eax]
 126:	ab                   	stos   DWORD PTR es:[edi],eax
 127:	17                   	pop    ss
 128:	00 00                	add    BYTE PTR [eax],al
 12a:	04 00                	add    al,0x0
 12c:	00 00                	add    BYTE PTR [eax],al
 12e:	00 00                	add    BYTE PTR [eax],al
 130:	08 12                	or     BYTE PTR [edx],dl
 132:	00 30                	add    BYTE PTR [eax],dh
 134:	9b                   	fwait
 135:	01 00                	add    DWORD PTR [eax],eax
	...
 13f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 142:	00 00                	add    BYTE PTR [eax],al
 144:	02 00                	add    al,BYTE PTR [eax]
 146:	99                   	cdq    
 147:	19 00                	sbb    DWORD PTR [eax],eax
 149:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 14c:	00 00                	add    BYTE PTR [eax],al
 14e:	00 00                	add    BYTE PTR [eax],al
 150:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
 151:	13 00                	adc    eax,DWORD PTR [eax]
 153:	30 e7                	xor    bh,ah
	...
 15d:	00 00                	add    BYTE PTR [eax],al
 15f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 162:	00 00                	add    BYTE PTR [eax],al
 164:	02 00                	add    al,BYTE PTR [eax]
 166:	88 1b                	mov    BYTE PTR [ebx],bl
 168:	00 00                	add    BYTE PTR [eax],al
 16a:	04 00                	add    al,0x0
 16c:	00 00                	add    BYTE PTR [eax],al
 16e:	00 00                	add    BYTE PTR [eax],al
 170:	8c 14 00             	mov    WORD PTR [eax+eax*1],ss
 173:	30 14 00             	xor    BYTE PTR [eax+eax*1],dl
	...
 17e:	00 00                	add    BYTE PTR [eax],al
 180:	1c 00                	sbb    al,0x0
 182:	00 00                	add    BYTE PTR [eax],al
 184:	02 00                	add    al,BYTE PTR [eax]
 186:	01 1d 00 00 04 00    	add    DWORD PTR ds:0x40000,ebx
 18c:	00 00                	add    BYTE PTR [eax],al
 18e:	00 00                	add    BYTE PTR [eax],al
 190:	a0 14 00 30 29       	mov    al,ds:0x29300014
	...
 19d:	00 00                	add    BYTE PTR [eax],al
 19f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 1a2:	00 00                	add    BYTE PTR [eax],al
 1a4:	02 00                	add    al,BYTE PTR [eax]
 1a6:	e9 1e 00 00 04       	jmp    40001c9 <sysEnter_Vector+0x3ed01c9>
 1ab:	00 00                	add    BYTE PTR [eax],al
 1ad:	00 00                	add    BYTE PTR [eax],al
 1af:	00 cc                	add    ah,cl
 1b1:	14 00                	adc    al,0x0
 1b3:	30 84 00 00 00 00 00 	xor    BYTE PTR [eax+eax*1+0x0],al
 1ba:	00 00                	add    BYTE PTR [eax],al
 1bc:	00 00                	add    BYTE PTR [eax],al
 1be:	00 00                	add    BYTE PTR [eax],al
 1c0:	1c 00                	sbb    al,0x0
 1c2:	00 00                	add    BYTE PTR [eax],al
 1c4:	02 00                	add    al,BYTE PTR [eax]
 1c6:	45                   	inc    ebp
 1c7:	23 00                	and    eax,DWORD PTR [eax]
 1c9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1cc:	00 00                	add    BYTE PTR [eax],al
 1ce:	00 00                	add    BYTE PTR [eax],al
 1d0:	50                   	push   eax
 1d1:	15 00 30 eb 00       	adc    eax,0xeb3000
	...
 1de:	00 00                	add    BYTE PTR [eax],al
 1e0:	1c 00                	sbb    al,0x0
 1e2:	00 00                	add    BYTE PTR [eax],al
 1e4:	02 00                	add    al,BYTE PTR [eax]
 1e6:	f6 24 00             	mul    BYTE PTR [eax+eax*1]
 1e9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 1ec:	00 00                	add    BYTE PTR [eax],al
 1ee:	00 00                	add    BYTE PTR [eax],al
 1f0:	3c 16                	cmp    al,0x16
 1f2:	00 30                	add    BYTE PTR [eax],dh
 1f4:	5e                   	pop    esi
	...
 1fd:	00 00                	add    BYTE PTR [eax],al
 1ff:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 202:	00 00                	add    BYTE PTR [eax],al
 204:	02 00                	add    al,BYTE PTR [eax]
 206:	66                   	data16
 207:	26 00 00             	add    BYTE PTR es:[eax],al
 20a:	04 00                	add    al,0x0
 20c:	00 00                	add    BYTE PTR [eax],al
 20e:	00 00                	add    BYTE PTR [eax],al
 210:	9c                   	pushf  
 211:	16                   	push   ss
 212:	00 30                	add    BYTE PTR [eax],dh
 214:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
 21a:	00 00                	add    BYTE PTR [eax],al
 21c:	00 00                	add    BYTE PTR [eax],al
 21e:	00 00                	add    BYTE PTR [eax],al
 220:	1c 00                	sbb    al,0x0
 222:	00 00                	add    BYTE PTR [eax],al
 224:	02 00                	add    al,BYTE PTR [eax]
 226:	33 28                	xor    ebp,DWORD PTR [eax]
 228:	00 00                	add    BYTE PTR [eax],al
 22a:	04 00                	add    al,0x0
 22c:	00 00                	add    BYTE PTR [eax],al
 22e:	00 00                	add    BYTE PTR [eax],al
 230:	64                   	fs
 231:	17                   	pop    ss
 232:	00 30                	add    BYTE PTR [eax],dh
 234:	89 00                	mov    DWORD PTR [eax],eax
	...
 23e:	00 00                	add    BYTE PTR [eax],al
 240:	1c 00                	sbb    al,0x0
 242:	00 00                	add    BYTE PTR [eax],al
 244:	02 00                	add    al,BYTE PTR [eax]
 246:	83 29 00             	sub    DWORD PTR [ecx],0x0
 249:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 24c:	00 00                	add    BYTE PTR [eax],al
 24e:	00 00                	add    BYTE PTR [eax],al
 250:	f0 17                	lock pop ss
 252:	00 30                	add    BYTE PTR [eax],dh
 254:	62 00                	bound  eax,QWORD PTR [eax]
	...
 25e:	00 00                	add    BYTE PTR [eax],al
 260:	1c 00                	sbb    al,0x0
 262:	00 00                	add    BYTE PTR [eax],al
 264:	02 00                	add    al,BYTE PTR [eax]
 266:	51                   	push   ecx
 267:	2a 00                	sub    al,BYTE PTR [eax]
 269:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 26c:	00 00                	add    BYTE PTR [eax],al
 26e:	00 00                	add    BYTE PTR [eax],al
 270:	54                   	push   esp
 271:	18 00                	sbb    BYTE PTR [eax],al
 273:	30 ce                	xor    dh,cl
	...
 27d:	00 00                	add    BYTE PTR [eax],al
 27f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 282:	00 00                	add    BYTE PTR [eax],al
 284:	02 00                	add    al,BYTE PTR [eax]
 286:	33 2b                	xor    ebp,DWORD PTR [ebx]
 288:	00 00                	add    BYTE PTR [eax],al
 28a:	04 00                	add    al,0x0
 28c:	00 00                	add    BYTE PTR [eax],al
 28e:	00 00                	add    BYTE PTR [eax],al
 290:	24 19                	and    al,0x19
 292:	00 30                	add    BYTE PTR [eax],dh
 294:	80 00 00             	add    BYTE PTR [eax],0x0
	...
 29f:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2a2:	00 00                	add    BYTE PTR [eax],al
 2a4:	02 00                	add    al,BYTE PTR [eax]
 2a6:	27                   	daa    
 2a7:	2c 00                	sub    al,0x0
 2a9:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 2ac:	00 00                	add    BYTE PTR [eax],al
 2ae:	00 00                	add    BYTE PTR [eax],al
 2b0:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
 2b1:	19 00                	sbb    DWORD PTR [eax],eax
 2b3:	30 7d 01             	xor    BYTE PTR [ebp+0x1],bh
	...
 2be:	00 00                	add    BYTE PTR [eax],al
 2c0:	1c 00                	sbb    al,0x0
 2c2:	00 00                	add    BYTE PTR [eax],al
 2c4:	02 00                	add    al,BYTE PTR [eax]
 2c6:	bd 2d 00 00 04       	mov    ebp,0x400002d
 2cb:	00 00                	add    BYTE PTR [eax],al
 2cd:	00 00                	add    BYTE PTR [eax],al
 2cf:	00 24 1b             	add    BYTE PTR [ebx+ebx*1],ah
 2d2:	00 30                	add    BYTE PTR [eax],dh
 2d4:	1d 00 00 00 00       	sbb    eax,0x0
 2d9:	00 00                	add    BYTE PTR [eax],al
 2db:	00 00                	add    BYTE PTR [eax],al
 2dd:	00 00                	add    BYTE PTR [eax],al
 2df:	00 1c 00             	add    BYTE PTR [eax+eax*1],bl
 2e2:	00 00                	add    BYTE PTR [eax],al
 2e4:	02 00                	add    al,BYTE PTR [eax]
 2e6:	2d 2e 00 00 04       	sub    eax,0x400002e
 2eb:	00 00                	add    BYTE PTR [eax],al
 2ed:	00 00                	add    BYTE PTR [eax],al
 2ef:	00 44 1b 00          	add    BYTE PTR [ebx+ebx*1+0x0],al
 2f3:	30 9c 01 00 00 00 00 	xor    BYTE PTR [ecx+eax*1+0x0],bl
 2fa:	00 00                	add    BYTE PTR [eax],al
 2fc:	00 00                	add    BYTE PTR [eax],al
 2fe:	00 00                	add    BYTE PTR [eax],al
 300:	1c 00                	sbb    al,0x0
 302:	00 00                	add    BYTE PTR [eax],al
 304:	02 00                	add    al,BYTE PTR [eax]
 306:	c1 2f 00             	shr    DWORD PTR [edi],0x0
 309:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 30c:	00 00                	add    BYTE PTR [eax],al
 30e:	00 00                	add    BYTE PTR [eax],al
 310:	e0 1c                	loopne 32e <sysEnter_Vector-0x12fcd2>
 312:	00 30                	add    BYTE PTR [eax],dh
 314:	b6 00                	mov    dh,0x0
	...
 31e:	00 00                	add    BYTE PTR [eax],al
 320:	1c 00                	sbb    al,0x0
 322:	00 00                	add    BYTE PTR [eax],al
 324:	02 00                	add    al,BYTE PTR [eax]
 326:	27                   	daa    
 327:	31 00                	xor    DWORD PTR [eax],eax
 329:	00 04 00             	add    BYTE PTR [eax+eax*1],al
 32c:	00 00                	add    BYTE PTR [eax],al
 32e:	00 00                	add    BYTE PTR [eax],al
 330:	98                   	cwde   
 331:	1d 00 30 8b 00       	sbb    eax,0x8b3000
	...
 33e:	00 00                	add    BYTE PTR [eax],al
 340:	1c 00                	sbb    al,0x0
 342:	00 00                	add    BYTE PTR [eax],al
 344:	02 00                	add    al,BYTE PTR [eax]
 346:	be 32 00 00 04       	mov    esi,0x4000032
 34b:	00 00                	add    BYTE PTR [eax],al
 34d:	00 00                	add    BYTE PTR [eax],al
 34f:	00 24 1e             	add    BYTE PTR [esi+ebx*1],ah
 352:	00 30                	add    BYTE PTR [eax],dh
 354:	bb 0c 00 00 00       	mov    ebx,0xc
 359:	00 00                	add    BYTE PTR [eax],al
 35b:	00 00                	add    BYTE PTR [eax],al
 35d:	00 00                	add    BYTE PTR [eax],al
	...

Disassembly of section .debug_line:

00000000 <.debug_line>:
       0:	d0 00                	rol    BYTE PTR [eax],1
       2:	00 00                	add    BYTE PTR [eax],al
       4:	02 00                	add    al,BYTE PTR [eax]
       6:	b0 00                	mov    al,0x0
       8:	00 00                	add    BYTE PTR [eax],al
       a:	01 01                	add    DWORD PTR [ecx],eax
       c:	fb                   	sti    
       d:	0e                   	push   cs
       e:	0d 00 01 01 01       	or     eax,0x1010100
      13:	01 00                	add    DWORD PTR [eax],eax
      15:	00 00                	add    BYTE PTR [eax],al
      17:	01 00                	add    DWORD PTR [eax],eax
      19:	00 01                	add    BYTE PTR [ecx],al
      1b:	2e                   	cs
      1c:	2e                   	cs
      1d:	2f                   	das    
      1e:	2e                   	cs
      1f:	2e                   	cs
      20:	2f                   	das    
      21:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      25:	6a 2f                	push   0x2f
      27:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      2a:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
      31:	63 2f                	arpl   WORD PTR [edi],bp
      33:	73 74                	jae    a9 <sysEnter_Vector-0x12ff57>
      35:	72 69                	jb     a0 <sysEnter_Vector-0x12ff60>
      37:	6e                   	outs   dx,BYTE PTR ds:[esi]
      38:	67 73 00             	addr16 jae 3b <sysEnter_Vector-0x12ffc5>
      3b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      42:	00 2f                	add    BYTE PTR [edi],ch
      44:	68 6f 6d 65 2f       	push   0x2f656d6f
      49:	79 6f                	jns    ba <sysEnter_Vector-0x12ff46>
      4b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
      52:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
      55:	73 73                	jae    ca <sysEnter_Vector-0x12ff36>
      57:	2f                   	das    
      58:	6c                   	ins    BYTE PTR es:[edi],dx
      59:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
      60:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
      66:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
      6c:	78 2d                	js     9b <sysEnter_Vector-0x12ff65>
      6e:	67 6e                	outs   dx,BYTE PTR ds:[si]
      70:	75 2f                	jne    a1 <sysEnter_Vector-0x12ff5f>
      72:	35 2e 33 2e 30       	xor    eax,0x302e332e
      77:	2f                   	das    
      78:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
      7f:	00 00                	add    BYTE PTR [eax],al
      81:	73 74                	jae    f7 <sysEnter_Vector-0x12ff09>
      83:	72 63                	jb     e8 <sysEnter_Vector-0x12ff18>
      85:	68 72 2e 63 00       	push   0x632e72
      8a:	01 00                	add    DWORD PTR [eax],eax
      8c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
      8f:	6c                   	ins    BYTE PTR es:[edi],dx
      90:	6c                   	ins    BYTE PTR es:[edi],dx
      91:	6f                   	outs   dx,DWORD PTR ds:[esi]
      92:	63 2e                	arpl   WORD PTR [esi],bp
      94:	68 00 02 00 00       	push   0x200
      99:	6c                   	ins    BYTE PTR es:[edi],dx
      9a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
      a1:	4f                   	dec    edi
      a2:	53                   	push   ebx
      a3:	2e                   	cs
      a4:	68 00 02 00 00       	push   0x200
      a9:	73 74                	jae    11f <sysEnter_Vector-0x12fee1>
      ab:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
      b2:	63 
      b3:	2e                   	cs
      b4:	68 00 03 00 00       	push   0x300
      b9:	00 00                	add    BYTE PTR [eax],al
      bb:	05 02 00 00 00       	add    eax,0x2
      c0:	30 1a                	xor    BYTE PTR [edx],bl
      c2:	c9                   	leave  
      c3:	2f                   	das    
      c4:	f3 72 cb             	repz jb 92 <sysEnter_Vector-0x12ff6e>
      c7:	3d 31 c9 2f f3       	cmp    eax,0xf32fc931
      cc:	72 cb                	jb     99 <sysEnter_Vector-0x12ff67>
      ce:	3d 02 02 00 01       	cmp    eax,0x1000202
      d3:	01 03                	add    DWORD PTR [ebx],eax
      d5:	01 00                	add    DWORD PTR [eax],eax
      d7:	00 02                	add    BYTE PTR [edx],al
      d9:	00 b1 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],dh
      df:	01 fb                	add    ebx,edi
      e1:	0e                   	push   cs
      e2:	0d 00 01 01 01       	or     eax,0x1010100
      e7:	01 00                	add    DWORD PTR [eax],eax
      e9:	00 00                	add    BYTE PTR [eax],al
      eb:	01 00                	add    DWORD PTR [eax],eax
      ed:	00 01                	add    BYTE PTR [ecx],al
      ef:	2e                   	cs
      f0:	2e                   	cs
      f1:	2f                   	das    
      f2:	2e                   	cs
      f3:	2e                   	cs
      f4:	2f                   	das    
      f5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
      f9:	6a 2f                	push   0x2f
      fb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
      fe:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     105:	63 2f                	arpl   WORD PTR [edi],bp
     107:	73 74                	jae    17d <sysEnter_Vector-0x12fe83>
     109:	72 69                	jb     174 <sysEnter_Vector-0x12fe8c>
     10b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     10c:	67 73 00             	addr16 jae 10f <sysEnter_Vector-0x12fef1>
     10f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     116:	00 2f                	add    BYTE PTR [edi],ch
     118:	68 6f 6d 65 2f       	push   0x2f656d6f
     11d:	79 6f                	jns    18e <sysEnter_Vector-0x12fe72>
     11f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     126:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     129:	73 73                	jae    19e <sysEnter_Vector-0x12fe62>
     12b:	2f                   	das    
     12c:	6c                   	ins    BYTE PTR es:[edi],dx
     12d:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     134:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     13a:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     140:	78 2d                	js     16f <sysEnter_Vector-0x12fe91>
     142:	67 6e                	outs   dx,BYTE PTR ds:[si]
     144:	75 2f                	jne    175 <sysEnter_Vector-0x12fe8b>
     146:	35 2e 33 2e 30       	xor    eax,0x302e332e
     14b:	2f                   	das    
     14c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     153:	00 00                	add    BYTE PTR [eax],al
     155:	73 74                	jae    1cb <sysEnter_Vector-0x12fe35>
     157:	72 63                	jb     1bc <sysEnter_Vector-0x12fe44>
     159:	73 70                	jae    1cb <sysEnter_Vector-0x12fe35>
     15b:	6e                   	outs   dx,BYTE PTR ds:[esi]
     15c:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     15f:	01 00                	add    DWORD PTR [eax],eax
     161:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     164:	6c                   	ins    BYTE PTR es:[edi],dx
     165:	6c                   	ins    BYTE PTR es:[edi],dx
     166:	6f                   	outs   dx,DWORD PTR ds:[esi]
     167:	63 2e                	arpl   WORD PTR [esi],bp
     169:	68 00 02 00 00       	push   0x200
     16e:	6c                   	ins    BYTE PTR es:[edi],dx
     16f:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     176:	4f                   	dec    edi
     177:	53                   	push   ebx
     178:	2e                   	cs
     179:	68 00 02 00 00       	push   0x200
     17e:	73 74                	jae    1f4 <sysEnter_Vector-0x12fe0c>
     180:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     187:	63 
     188:	2e                   	cs
     189:	68 00 03 00 00       	push   0x300
     18e:	00 00                	add    BYTE PTR [eax],al
     190:	05 02 70 00 00       	add    eax,0x7002
     195:	30 03                	xor    BYTE PTR [ebx],al
     197:	25 01 e7 9f 59       	and    eax,0x599fe701
     19c:	75 00                	jne    19e <sysEnter_Vector-0x12fe62>
     19e:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1a1:	aa                   	stos   BYTE PTR es:[edi],al
     1a2:	00 02                	add    BYTE PTR [edx],al
     1a4:	04 01                	add    al,0x1
     1a6:	06                   	push   es
     1a7:	3c 00                	cmp    al,0x0
     1a9:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1ac:	06                   	push   es
     1ad:	73 00                	jae    1af <sysEnter_Vector-0x12fe51>
     1af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1b2:	06                   	push   es
     1b3:	82                   	(bad)  
     1b4:	06                   	push   es
     1b5:	6d                   	ins    DWORD PTR es:[edi],dx
     1b6:	91                   	xchg   ecx,eax
     1b7:	4d                   	dec    ebp
     1b8:	e7 9f                	out    0x9f,eax
     1ba:	59                   	pop    ecx
     1bb:	75 00                	jne    1bd <sysEnter_Vector-0x12fe43>
     1bd:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1c0:	aa                   	stos   BYTE PTR es:[edi],al
     1c1:	00 02                	add    BYTE PTR [edx],al
     1c3:	04 01                	add    al,0x1
     1c5:	06                   	push   es
     1c6:	3c 00                	cmp    al,0x0
     1c8:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     1cb:	06                   	push   es
     1cc:	73 00                	jae    1ce <sysEnter_Vector-0x12fe32>
     1ce:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     1d1:	06                   	push   es
     1d2:	82                   	(bad)  
     1d3:	06                   	push   es
     1d4:	6d                   	ins    DWORD PTR es:[edi],dx
     1d5:	91                   	xchg   ecx,eax
     1d6:	02 04 00             	add    al,BYTE PTR [eax+eax*1]
     1d9:	01 01                	add    DWORD PTR [ecx],eax
     1db:	d4 00                	aam    0x0
     1dd:	00 00                	add    BYTE PTR [eax],al
     1df:	02 00                	add    al,BYTE PTR [eax]
     1e1:	b0 00                	mov    al,0x0
     1e3:	00 00                	add    BYTE PTR [eax],al
     1e5:	01 01                	add    DWORD PTR [ecx],eax
     1e7:	fb                   	sti    
     1e8:	0e                   	push   cs
     1e9:	0d 00 01 01 01       	or     eax,0x1010100
     1ee:	01 00                	add    DWORD PTR [eax],eax
     1f0:	00 00                	add    BYTE PTR [eax],al
     1f2:	01 00                	add    DWORD PTR [eax],eax
     1f4:	00 01                	add    BYTE PTR [ecx],al
     1f6:	2e                   	cs
     1f7:	2e                   	cs
     1f8:	2f                   	das    
     1f9:	2e                   	cs
     1fa:	2e                   	cs
     1fb:	2f                   	das    
     1fc:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     200:	6a 2f                	push   0x2f
     202:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     205:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
     20c:	63 2f                	arpl   WORD PTR [edi],bp
     20e:	73 74                	jae    284 <sysEnter_Vector-0x12fd7c>
     210:	72 69                	jb     27b <sysEnter_Vector-0x12fd85>
     212:	6e                   	outs   dx,BYTE PTR ds:[esi]
     213:	67 73 00             	addr16 jae 216 <sysEnter_Vector-0x12fdea>
     216:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     21d:	00 2f                	add    BYTE PTR [edi],ch
     21f:	68 6f 6d 65 2f       	push   0x2f656d6f
     224:	79 6f                	jns    295 <sysEnter_Vector-0x12fd6b>
     226:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     22d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     230:	73 73                	jae    2a5 <sysEnter_Vector-0x12fd5b>
     232:	2f                   	das    
     233:	6c                   	ins    BYTE PTR es:[edi],dx
     234:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     23b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     241:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     247:	78 2d                	js     276 <sysEnter_Vector-0x12fd8a>
     249:	67 6e                	outs   dx,BYTE PTR ds:[si]
     24b:	75 2f                	jne    27c <sysEnter_Vector-0x12fd84>
     24d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     252:	2f                   	das    
     253:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     25a:	00 00                	add    BYTE PTR [eax],al
     25c:	73 74                	jae    2d2 <sysEnter_Vector-0x12fd2e>
     25e:	72 74                	jb     2d4 <sysEnter_Vector-0x12fd2c>
     260:	6f                   	outs   dx,DWORD PTR ds:[esi]
     261:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
     264:	00 01                	add    BYTE PTR [ecx],al
     266:	00 00                	add    BYTE PTR [eax],al
     268:	6d                   	ins    DWORD PTR es:[edi],dx
     269:	61                   	popa   
     26a:	6c                   	ins    BYTE PTR es:[edi],dx
     26b:	6c                   	ins    BYTE PTR es:[edi],dx
     26c:	6f                   	outs   dx,DWORD PTR ds:[esi]
     26d:	63 2e                	arpl   WORD PTR [esi],bp
     26f:	68 00 02 00 00       	push   0x200
     274:	6c                   	ins    BYTE PTR es:[edi],dx
     275:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     27c:	4f                   	dec    edi
     27d:	53                   	push   ebx
     27e:	2e                   	cs
     27f:	68 00 02 00 00       	push   0x200
     284:	73 74                	jae    2fa <sysEnter_Vector-0x12fd06>
     286:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     28d:	63 
     28e:	2e                   	cs
     28f:	68 00 03 00 00       	push   0x300
     294:	00 00                	add    BYTE PTR [eax],al
     296:	05 02 1c 01 00       	add    eax,0x11c02
     29b:	30 03                	xor    BYTE PTR [ebx],al
     29d:	28 01                	sub    BYTE PTR [ecx],al
     29f:	f6 67 92             	mul    BYTE PTR [edi-0x6e]
     2a2:	08 2f                	or     BYTE PTR [edi],ch
     2a4:	75 08                	jne    2ae <sysEnter_Vector-0x12fd52>
     2a6:	2f                   	das    
     2a7:	4b                   	dec    ebx
     2a8:	08 c9                	or     cl,cl
     2aa:	c9                   	leave  
     2ab:	08 21                	or     BYTE PTR [ecx],ah
     2ad:	3d 02 07 00 01       	cmp    eax,0x1000702
     2b2:	01 10                	add    DWORD PTR [eax],edx
     2b4:	01 00                	add    DWORD PTR [eax],eax
     2b6:	00 02                	add    BYTE PTR [edx],al
     2b8:	00 93 00 00 00 01    	add    BYTE PTR [ebx+0x1000000],dl
     2be:	01 fb                	add    ebx,edi
     2c0:	0e                   	push   cs
     2c1:	0d 00 01 01 01       	or     eax,0x1010100
     2c6:	01 00                	add    DWORD PTR [eax],eax
     2c8:	00 00                	add    BYTE PTR [eax],al
     2ca:	01 00                	add    DWORD PTR [eax],eax
     2cc:	00 01                	add    BYTE PTR [ecx],al
     2ce:	73 72                	jae    342 <sysEnter_Vector-0x12fcbe>
     2d0:	63 00                	arpl   WORD PTR [eax],ax
     2d2:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     2d9:	00 2f                	add    BYTE PTR [edi],ch
     2db:	68 6f 6d 65 2f       	push   0x2f656d6f
     2e0:	79 6f                	jns    351 <sysEnter_Vector-0x12fcaf>
     2e2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     2e9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     2ec:	73 73                	jae    361 <sysEnter_Vector-0x12fc9f>
     2ee:	2f                   	das    
     2ef:	6c                   	ins    BYTE PTR es:[edi],dx
     2f0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     2f7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     2fd:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     303:	78 2d                	js     332 <sysEnter_Vector-0x12fcce>
     305:	67 6e                	outs   dx,BYTE PTR ds:[si]
     307:	75 2f                	jne    338 <sysEnter_Vector-0x12fcc8>
     309:	35 2e 33 2e 30       	xor    eax,0x302e332e
     30e:	2f                   	das    
     30f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     316:	00 00                	add    BYTE PTR [eax],al
     318:	61                   	popa   
     319:	73 63                	jae    37e <sysEnter_Vector-0x12fc82>
     31b:	69 69 2e 63 00 01 00 	imul   ebp,DWORD PTR [ecx+0x2e],0x10063
     322:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     325:	6c                   	ins    BYTE PTR es:[edi],dx
     326:	6c                   	ins    BYTE PTR es:[edi],dx
     327:	6f                   	outs   dx,DWORD PTR ds:[esi]
     328:	63 2e                	arpl   WORD PTR [esi],bp
     32a:	68 00 02 00 00       	push   0x200
     32f:	6c                   	ins    BYTE PTR es:[edi],dx
     330:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     337:	4f                   	dec    edi
     338:	53                   	push   ebx
     339:	2e                   	cs
     33a:	68 00 02 00 00       	push   0x200
     33f:	73 74                	jae    3b5 <sysEnter_Vector-0x12fc4b>
     341:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     348:	63 
     349:	2e                   	cs
     34a:	68 00 03 00 00       	push   0x300
     34f:	00 00                	add    BYTE PTR [eax],al
     351:	05 02 b4 01 00       	add    eax,0x1b402
     356:	30 03                	xor    BYTE PTR [ebx],al
     358:	09 01                	or     DWORD PTR [ecx],eax
     35a:	08 16                	or     BYTE PTR [esi],dl
     35c:	00 02                	add    BYTE PTR [edx],al
     35e:	04 03                	add    al,0x3
     360:	08 d7                	or     bh,dl
     362:	00 02                	add    BYTE PTR [edx],al
     364:	04 03                	add    al,0x3
     366:	d7                   	xlat   BYTE PTR ds:[ebx]
     367:	00 02                	add    BYTE PTR [edx],al
     369:	04 03                	add    al,0x3
     36b:	08 4b 00             	or     BYTE PTR [ebx+0x0],cl
     36e:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     371:	d3 00                	rol    DWORD PTR [eax],cl
     373:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     376:	06                   	push   es
     377:	82                   	(bad)  
     378:	06                   	push   es
     379:	87 69 08             	xchg   DWORD PTR [ecx+0x8],ebp
     37c:	15 bb 3d 00 02       	adc    eax,0x2003dbb
     381:	04 01                	add    al,0x1
     383:	76 00                	jbe    385 <sysEnter_Vector-0x12fc7b>
     385:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     388:	02 3b                	add    bh,BYTE PTR [ebx]
     38a:	13 08                	adc    ecx,DWORD PTR [eax]
     38c:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     390:	ad                   	lods   eax,DWORD PTR ds:[esi]
     391:	d7                   	xlat   BYTE PTR ds:[ebx]
     392:	69 08 15 bb 3d 00    	imul   ecx,DWORD PTR [eax],0x3dbb15
     398:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     39b:	76 00                	jbe    39d <sysEnter_Vector-0x12fc63>
     39d:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     3a0:	02 3b                	add    bh,BYTE PTR [ebx]
     3a2:	13 08                	adc    ecx,DWORD PTR [eax]
     3a4:	f3 67 08 2f          	repz or BYTE PTR [bx],ch
     3a8:	ad                   	lods   eax,DWORD PTR ds:[esi]
     3a9:	d7                   	xlat   BYTE PTR ds:[ebx]
     3aa:	6a f3                	push   0xfffffff3
     3ac:	78 00                	js     3ae <sysEnter_Vector-0x12fc52>
     3ae:	02 04 03             	add    al,BYTE PTR [ebx+eax*1]
     3b1:	91                   	xchg   ecx,eax
     3b2:	00 02                	add    BYTE PTR [edx],al
     3b4:	04 03                	add    al,0x3
     3b6:	02 24 11             	add    ah,BYTE PTR [ecx+edx*1]
     3b9:	00 02                	add    BYTE PTR [edx],al
     3bb:	04 01                	add    al,0x1
     3bd:	06                   	push   es
     3be:	4a                   	dec    edx
     3bf:	06                   	push   es
     3c0:	e8 3d 02 02 00       	call   20602 <sysEnter_Vector-0x10f9fe>
     3c5:	01 01                	add    DWORD PTR [ecx],eax
     3c7:	06                   	push   es
     3c8:	01 00                	add    DWORD PTR [eax],eax
     3ca:	00 02                	add    BYTE PTR [edx],al
     3cc:	00 99 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],bl
     3d2:	01 fb                	add    ebx,edi
     3d4:	0e                   	push   cs
     3d5:	0d 00 01 01 01       	or     eax,0x1010100
     3da:	01 00                	add    DWORD PTR [eax],eax
     3dc:	00 00                	add    BYTE PTR [eax],al
     3de:	01 00                	add    DWORD PTR [eax],eax
     3e0:	00 01                	add    BYTE PTR [ecx],al
     3e2:	73 72                	jae    456 <sysEnter_Vector-0x12fbaa>
     3e4:	63 00                	arpl   WORD PTR [eax],ax
     3e6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     3ed:	00 2f                	add    BYTE PTR [edi],ch
     3ef:	68 6f 6d 65 2f       	push   0x2f656d6f
     3f4:	79 6f                	jns    465 <sysEnter_Vector-0x12fb9b>
     3f6:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     3fd:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     400:	73 73                	jae    475 <sysEnter_Vector-0x12fb8b>
     402:	2f                   	das    
     403:	6c                   	ins    BYTE PTR es:[edi],dx
     404:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     40b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     411:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     417:	78 2d                	js     446 <sysEnter_Vector-0x12fbba>
     419:	67 6e                	outs   dx,BYTE PTR ds:[si]
     41b:	75 2f                	jne    44c <sysEnter_Vector-0x12fbb4>
     41d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     422:	2f                   	das    
     423:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     42a:	00 00                	add    BYTE PTR [eax],al
     42c:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     42e:	76 69                	jbe    499 <sysEnter_Vector-0x12fb67>
     430:	72 6f                	jb     4a1 <sysEnter_Vector-0x12fb5f>
     432:	6e                   	outs   dx,BYTE PTR ds:[esi]
     433:	6d                   	ins    DWORD PTR es:[edi],dx
     434:	65 6e                	outs   dx,BYTE PTR gs:[esi]
     436:	74 2e                	je     466 <sysEnter_Vector-0x12fb9a>
     438:	63 00                	arpl   WORD PTR [eax],ax
     43a:	01 00                	add    DWORD PTR [eax],eax
     43c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     43f:	6c                   	ins    BYTE PTR es:[edi],dx
     440:	6c                   	ins    BYTE PTR es:[edi],dx
     441:	6f                   	outs   dx,DWORD PTR ds:[esi]
     442:	63 2e                	arpl   WORD PTR [esi],bp
     444:	68 00 02 00 00       	push   0x200
     449:	6c                   	ins    BYTE PTR es:[edi],dx
     44a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     451:	4f                   	dec    edi
     452:	53                   	push   ebx
     453:	2e                   	cs
     454:	68 00 02 00 00       	push   0x200
     459:	73 74                	jae    4cf <sysEnter_Vector-0x12fb31>
     45b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     462:	63 
     463:	2e                   	cs
     464:	68 00 03 00 00       	push   0x300
     469:	00 00                	add    BYTE PTR [eax],al
     46b:	05 02 00 04 00       	add    eax,0x40002
     470:	30 03                	xor    BYTE PTR [ebx],al
     472:	09 01                	or     DWORD PTR [ecx],eax
     474:	08 21                	or     BYTE PTR [ecx],ah
     476:	91                   	xchg   ecx,eax
     477:	02 36                	add    dh,BYTE PTR [esi]
     479:	14 02                	adc    al,0x2
     47b:	39 13                	cmp    DWORD PTR [ebx],edx
     47d:	00 02                	add    BYTE PTR [edx],al
     47f:	04 02                	add    al,0x2
     481:	7e 00                	jle    483 <sysEnter_Vector-0x12fb7d>
     483:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     486:	06                   	push   es
     487:	4a                   	dec    edx
     488:	06                   	push   es
     489:	a4                   	movs   BYTE PTR es:[edi],BYTE PTR ds:[esi]
     48a:	59                   	pop    ecx
     48b:	5b                   	pop    ebx
     48c:	08 21                	or     BYTE PTR [ecx],ah
     48e:	76 bb                	jbe    44b <sysEnter_Vector-0x12fbb5>
     490:	08 92 08 4b 02 36    	or     BYTE PTR [edx+0x36024b08],dl
     496:	14 08                	adc    al,0x8
     498:	f3 02 25 13 08 f3 00 	repz add ah,BYTE PTR ds:0xf30813
     49f:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4a2:	03 77 58             	add    esi,DWORD PTR [edi+0x58]
     4a5:	00 02                	add    BYTE PTR [edx],al
     4a7:	04 01                	add    al,0x1
     4a9:	06                   	push   es
     4aa:	4a                   	dec    edx
     4ab:	06                   	push   es
     4ac:	03 0c 9e             	add    ecx,DWORD PTR [esi+ebx*4]
     4af:	bb 08 92 08 9f       	mov    ebx,0x9f089208
     4b4:	08 f3                	or     bl,dh
     4b6:	02 25 13 08 f3 00    	add    ah,BYTE PTR ds:0xf30813
     4bc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     4bf:	03 79 2e             	add    edi,DWORD PTR [ecx+0x2e]
     4c2:	00 02                	add    BYTE PTR [edx],al
     4c4:	04 01                	add    al,0x1
     4c6:	06                   	push   es
     4c7:	4a                   	dec    edx
     4c8:	06                   	push   es
     4c9:	03 0b                	add    ecx,DWORD PTR [ebx]
     4cb:	9e                   	sahf   
     4cc:	02 05 00 01 01 f8    	add    al,BYTE PTR ds:0xf8010100
     4d2:	00 00                	add    BYTE PTR [eax],al
     4d4:	00 02                	add    BYTE PTR [edx],al
     4d6:	00 cd                	add    ch,cl
     4d8:	00 00                	add    BYTE PTR [eax],al
     4da:	00 01                	add    BYTE PTR [ecx],al
     4dc:	01 fb                	add    ebx,edi
     4de:	0e                   	push   cs
     4df:	0d 00 01 01 01       	or     eax,0x1010100
     4e4:	01 00                	add    DWORD PTR [eax],eax
     4e6:	00 00                	add    BYTE PTR [eax],al
     4e8:	01 00                	add    DWORD PTR [eax],eax
     4ea:	00 01                	add    BYTE PTR [ecx],al
     4ec:	73 72                	jae    560 <sysEnter_Vector-0x12faa0>
     4ee:	63 00                	arpl   WORD PTR [eax],ax
     4f0:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     4f7:	00 2f                	add    BYTE PTR [edi],ch
     4f9:	68 6f 6d 65 2f       	push   0x2f656d6f
     4fe:	79 6f                	jns    56f <sysEnter_Vector-0x12fa91>
     500:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     507:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     50a:	73 73                	jae    57f <sysEnter_Vector-0x12fa81>
     50c:	2f                   	das    
     50d:	6c                   	ins    BYTE PTR es:[edi],dx
     50e:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     515:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     51b:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     521:	78 2d                	js     550 <sysEnter_Vector-0x12fab0>
     523:	67 6e                	outs   dx,BYTE PTR ds:[si]
     525:	75 2f                	jne    556 <sysEnter_Vector-0x12faaa>
     527:	35 2e 33 2e 30       	xor    eax,0x302e332e
     52c:	2f                   	das    
     52d:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     534:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     537:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     53b:	65                   	gs
     53c:	2f                   	das    
     53d:	2e                   	cs
     53e:	2e                   	cs
     53f:	2f                   	das    
     540:	2e                   	cs
     541:	2e                   	cs
     542:	2f                   	das    
     543:	2e                   	cs
     544:	2e                   	cs
     545:	2f                   	das    
     546:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     54a:	6a 2f                	push   0x2f
     54c:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     54f:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     556:	6e                   	outs   dx,BYTE PTR ds:[esi]
     557:	65                   	gs
     558:	6c                   	ins    BYTE PTR es:[edi],dx
     559:	2f                   	das    
     55a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     561:	00 00                	add    BYTE PTR [eax],al
     563:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
     56a:	01 00                	add    DWORD PTR [eax],eax
     56c:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     56f:	6c                   	ins    BYTE PTR es:[edi],dx
     570:	6c                   	ins    BYTE PTR es:[edi],dx
     571:	6f                   	outs   dx,DWORD PTR ds:[esi]
     572:	63 2e                	arpl   WORD PTR [esi],bp
     574:	68 00 02 00 00       	push   0x200
     579:	6c                   	ins    BYTE PTR es:[edi],dx
     57a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     581:	4f                   	dec    edi
     582:	53                   	push   ebx
     583:	2e                   	cs
     584:	68 00 02 00 00       	push   0x200
     589:	73 74                	jae    5ff <sysEnter_Vector-0x12fa01>
     58b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     592:	63 
     593:	2e                   	cs
     594:	68 00 03 00 00       	push   0x300
     599:	73 79                	jae    614 <sysEnter_Vector-0x12f9ec>
     59b:	73 63                	jae    600 <sysEnter_Vector-0x12fa00>
     59d:	61                   	popa   
     59e:	6c                   	ins    BYTE PTR es:[edi],dx
     59f:	6c                   	ins    BYTE PTR es:[edi],dx
     5a0:	73 2e                	jae    5d0 <sysEnter_Vector-0x12fa30>
     5a2:	68 00 04 00 00       	push   0x400
     5a7:	00 00                	add    BYTE PTR [eax],al
     5a9:	05 02 6c 06 00       	add    eax,0x66c02
     5ae:	30 03                	xor    BYTE PTR [ebx],al
     5b0:	09 01                	or     DWORD PTR [ecx],eax
     5b2:	08 13                	or     BYTE PTR [ebx],dl
     5b4:	08 67 5b             	or     BYTE PTR [edi+0x5b],ah
     5b7:	08 13                	or     BYTE PTR [ebx],dl
     5b9:	08 2f                	or     BYTE PTR [edi],ch
     5bb:	69 e5 08 d7 77 e5    	imul   esp,ebp,0xe577d708
     5c1:	08 d7                	or     bh,dl
     5c3:	78 08                	js     5cd <sysEnter_Vector-0x12fa33>
     5c5:	13 08                	adc    ecx,DWORD PTR [eax]
     5c7:	9f                   	lahf   
     5c8:	02 05 00 01 01 26    	add    al,BYTE PTR ds:0x26010100
     5ce:	01 00                	add    DWORD PTR [eax],eax
     5d0:	00 02                	add    BYTE PTR [edx],al
     5d2:	00 d4                	add    ah,dl
     5d4:	00 00                	add    BYTE PTR [eax],al
     5d6:	00 01                	add    BYTE PTR [ecx],al
     5d8:	01 fb                	add    ebx,edi
     5da:	0e                   	push   cs
     5db:	0d 00 01 01 01       	or     eax,0x1010100
     5e0:	01 00                	add    DWORD PTR [eax],eax
     5e2:	00 00                	add    BYTE PTR [eax],al
     5e4:	01 00                	add    DWORD PTR [eax],eax
     5e6:	00 01                	add    BYTE PTR [ecx],al
     5e8:	73 72                	jae    65c <sysEnter_Vector-0x12f9a4>
     5ea:	63 2f                	arpl   WORD PTR [edi],bp
     5ec:	69 6e 70 75 74 00 69 	imul   ebp,DWORD PTR [esi+0x70],0x69007475
     5f3:	6e                   	outs   dx,BYTE PTR ds:[esi]
     5f4:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     5f8:	65 00 2f             	add    BYTE PTR gs:[edi],ch
     5fb:	68 6f 6d 65 2f       	push   0x2f656d6f
     600:	79 6f                	jns    671 <sysEnter_Vector-0x12f98f>
     602:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     609:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     60c:	73 73                	jae    681 <sysEnter_Vector-0x12f97f>
     60e:	2f                   	das    
     60f:	6c                   	ins    BYTE PTR es:[edi],dx
     610:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     617:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     61d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     623:	78 2d                	js     652 <sysEnter_Vector-0x12f9ae>
     625:	67 6e                	outs   dx,BYTE PTR ds:[si]
     627:	75 2f                	jne    658 <sysEnter_Vector-0x12f9a8>
     629:	35 2e 33 2e 30       	xor    eax,0x302e332e
     62e:	2f                   	das    
     62f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     636:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     639:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     63d:	65                   	gs
     63e:	2f                   	das    
     63f:	2e                   	cs
     640:	2e                   	cs
     641:	2f                   	das    
     642:	2e                   	cs
     643:	2e                   	cs
     644:	2f                   	das    
     645:	2e                   	cs
     646:	2e                   	cs
     647:	2f                   	das    
     648:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     64c:	6a 2f                	push   0x2f
     64e:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     651:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     658:	6e                   	outs   dx,BYTE PTR ds:[esi]
     659:	65                   	gs
     65a:	6c                   	ins    BYTE PTR es:[edi],dx
     65b:	2f                   	das    
     65c:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     663:	00 00                	add    BYTE PTR [eax],al
     665:	69 6e 70 75 74 2e 63 	imul   ebp,DWORD PTR [esi+0x70],0x632e7475
     66c:	00 01                	add    BYTE PTR [ecx],al
     66e:	00 00                	add    BYTE PTR [eax],al
     670:	6d                   	ins    DWORD PTR es:[edi],dx
     671:	61                   	popa   
     672:	6c                   	ins    BYTE PTR es:[edi],dx
     673:	6c                   	ins    BYTE PTR es:[edi],dx
     674:	6f                   	outs   dx,DWORD PTR ds:[esi]
     675:	63 2e                	arpl   WORD PTR [esi],bp
     677:	68 00 02 00 00       	push   0x200
     67c:	6c                   	ins    BYTE PTR es:[edi],dx
     67d:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     684:	4f                   	dec    edi
     685:	53                   	push   ebx
     686:	2e                   	cs
     687:	68 00 02 00 00       	push   0x200
     68c:	73 74                	jae    702 <sysEnter_Vector-0x12f8fe>
     68e:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     695:	63 
     696:	2e                   	cs
     697:	68 00 03 00 00       	push   0x300
     69c:	73 79                	jae    717 <sysEnter_Vector-0x12f8e9>
     69e:	73 63                	jae    703 <sysEnter_Vector-0x12f8fd>
     6a0:	61                   	popa   
     6a1:	6c                   	ins    BYTE PTR es:[edi],dx
     6a2:	6c                   	ins    BYTE PTR es:[edi],dx
     6a3:	73 2e                	jae    6d3 <sysEnter_Vector-0x12f92d>
     6a5:	68 00 04 00 00       	push   0x400
     6aa:	00 00                	add    BYTE PTR [eax],al
     6ac:	05 02 60 07 00       	add    eax,0x76002
     6b1:	30 03                	xor    BYTE PTR [ebx],al
     6b3:	0f 01                	(bad)  
     6b5:	d7                   	xlat   BYTE PTR ds:[ebx]
     6b6:	08 3d 4d 08 67 68    	or     BYTE PTR ds:0x6867084d,bh
     6bc:	75 4b                	jne    709 <sysEnter_Vector-0x12f8f7>
     6be:	08 3d 77 08 14 08    	or     BYTE PTR ds:0x8140877,bh
     6c4:	3d 4b 6a 08 14       	cmp    eax,0x14086a4b
     6c9:	75 84                	jne    64f <sysEnter_Vector-0x12f9b1>
     6cb:	68 00 02 04 01       	push   0x1040200
     6d0:	08 67 33             	or     BYTE PTR [edi+0x33],ah
     6d3:	08 3d 00 02 04 01    	or     BYTE PTR ds:0x1040200,bh
     6d9:	06                   	push   es
     6da:	66 06                	pushw  es
     6dc:	68 ad 68 68 76       	push   0x766868ad
     6e1:	08 5a 00             	or     BYTE PTR [edx+0x0],bl
     6e4:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
     6e7:	06                   	push   es
     6e8:	ac                   	lods   al,BYTE PTR ds:[esi]
     6e9:	06                   	push   es
     6ea:	68 5b 00 02 04       	push   0x402005b
     6ef:	02 a0 2f 02 05 00    	add    ah,BYTE PTR [eax+0x5022f]
     6f5:	01 01                	add    DWORD PTR [ecx],eax
     6f7:	b0 01                	mov    al,0x1
     6f9:	00 00                	add    BYTE PTR [eax],al
     6fb:	02 00                	add    al,BYTE PTR [eax]
     6fd:	eb 00                	jmp    6ff <sysEnter_Vector-0x12f901>
     6ff:	00 00                	add    BYTE PTR [eax],al
     701:	01 01                	add    DWORD PTR [ecx],eax
     703:	fb                   	sti    
     704:	0e                   	push   cs
     705:	0d 00 01 01 01       	or     eax,0x1010100
     70a:	01 00                	add    DWORD PTR [eax],eax
     70c:	00 00                	add    BYTE PTR [eax],al
     70e:	01 00                	add    DWORD PTR [eax],eax
     710:	00 01                	add    BYTE PTR [ecx],al
     712:	73 72                	jae    786 <sysEnter_Vector-0x12f87a>
     714:	63 00                	arpl   WORD PTR [eax],ax
     716:	2f                   	das    
     717:	68 6f 6d 65 2f       	push   0x2f656d6f
     71c:	79 6f                	jns    78d <sysEnter_Vector-0x12f873>
     71e:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     725:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     728:	73 73                	jae    79d <sysEnter_Vector-0x12f863>
     72a:	2f                   	das    
     72b:	6c                   	ins    BYTE PTR es:[edi],dx
     72c:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     733:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     739:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     73f:	78 2d                	js     76e <sysEnter_Vector-0x12f892>
     741:	67 6e                	outs   dx,BYTE PTR ds:[si]
     743:	75 2f                	jne    774 <sysEnter_Vector-0x12f88c>
     745:	35 2e 33 2e 30       	xor    eax,0x302e332e
     74a:	2f                   	das    
     74b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     752:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     755:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     759:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     75d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     761:	65                   	gs
     762:	2f                   	das    
     763:	2e                   	cs
     764:	2e                   	cs
     765:	2f                   	das    
     766:	2e                   	cs
     767:	2e                   	cs
     768:	2f                   	das    
     769:	2e                   	cs
     76a:	2e                   	cs
     76b:	2f                   	das    
     76c:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     770:	6a 2f                	push   0x2f
     772:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     775:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     77c:	6e                   	outs   dx,BYTE PTR ds:[esi]
     77d:	65                   	gs
     77e:	6c                   	ins    BYTE PTR es:[edi],dx
     77f:	2f                   	das    
     780:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     787:	00 00                	add    BYTE PTR [eax],al
     789:	6c                   	ins    BYTE PTR es:[edi],dx
     78a:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     791:	4f                   	dec    edi
     792:	53                   	push   ebx
     793:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     796:	01 00                	add    DWORD PTR [eax],eax
     798:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     79b:	64                   	fs
     79c:	61                   	popa   
     79d:	72 67                	jb     806 <sysEnter_Vector-0x12f7fa>
     79f:	2e                   	cs
     7a0:	68 00 02 00 00       	push   0x200
     7a5:	73 74                	jae    81b <sysEnter_Vector-0x12f7e5>
     7a7:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     7ae:	63 
     7af:	2e                   	cs
     7b0:	68 00 02 00 00       	push   0x200
     7b5:	73 74                	jae    82b <sysEnter_Vector-0x12f7d5>
     7b7:	64                   	fs
     7b8:	64                   	fs
     7b9:	65                   	gs
     7ba:	66                   	data16
     7bb:	2e                   	cs
     7bc:	68 00 02 00 00       	push   0x200
     7c1:	6d                   	ins    DWORD PTR es:[edi],dx
     7c2:	61                   	popa   
     7c3:	6c                   	ins    BYTE PTR es:[edi],dx
     7c4:	6c                   	ins    BYTE PTR es:[edi],dx
     7c5:	6f                   	outs   dx,DWORD PTR ds:[esi]
     7c6:	63 2e                	arpl   WORD PTR [esi],bp
     7c8:	68 00 03 00 00       	push   0x300
     7cd:	6c                   	ins    BYTE PTR es:[edi],dx
     7ce:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     7d5:	4f                   	dec    edi
     7d6:	53                   	push   ebx
     7d7:	2e                   	cs
     7d8:	68 00 03 00 00       	push   0x300
     7dd:	73 79                	jae    858 <sysEnter_Vector-0x12f7a8>
     7df:	73 63                	jae    844 <sysEnter_Vector-0x12f7bc>
     7e1:	61                   	popa   
     7e2:	6c                   	ins    BYTE PTR es:[edi],dx
     7e3:	6c                   	ins    BYTE PTR es:[edi],dx
     7e4:	73 2e                	jae    814 <sysEnter_Vector-0x12f7ec>
     7e6:	68 00 04 00 00       	push   0x400
     7eb:	00 00                	add    BYTE PTR [eax],al
     7ed:	05 02 b4 08 00       	add    eax,0x8b402
     7f2:	30 03                	xor    BYTE PTR [ebx],al
     7f4:	10 01                	adc    BYTE PTR [ecx],al
     7f6:	08 21                	or     BYTE PTR [ecx],ah
     7f8:	75 08                	jne    802 <sysEnter_Vector-0x12f7fe>
     7fa:	67 3d 77 08 21 75    	addr16 cmp eax,0x75210877
     800:	08 83 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],al
     806:	75 08                	jne    810 <sysEnter_Vector-0x12f7f0>
     808:	9f                   	lahf   
     809:	3d 77 08 21 75       	cmp    eax,0x75210877
     80e:	08 bb 3d 77 08 21    	or     BYTE PTR [ebx+0x2108773d],bh
     814:	75 08                	jne    81e <sysEnter_Vector-0x12f7e2>
     816:	d7                   	xlat   BYTE PTR ds:[ebx]
     817:	3d 77 08 21 08       	cmp    eax,0x8210877
     81c:	67 d8 5a c9          	fcomp  DWORD PTR [bp+si-0x37]
     820:	c9                   	leave  
     821:	08 67 75             	or     BYTE PTR [edi+0x75],ah
     824:	08 6a 2d             	or     BYTE PTR [edx+0x2d],ch
     827:	08 21                	or     BYTE PTR [ecx],ah
     829:	69 08 13 75 77 f4    	imul   ecx,DWORD PTR [eax],0xf4777513
     82f:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     833:	31 f4                	xor    esp,esi
     835:	67 08 67 59          	or     BYTE PTR [bx+0x59],ah
     839:	31 f4                	xor    esp,esi
     83b:	68 08 91 5a 31       	push   0x315a9108
     840:	08 21                	or     BYTE PTR [ecx],ah
     842:	02 54 13 59          	add    dl,BYTE PTR [ebx+edx*1+0x59]
     846:	77 c9                	ja     811 <sysEnter_Vector-0x12f7ef>
     848:	c9                   	leave  
     849:	3f                   	aas    
     84a:	c9                   	leave  
     84b:	08 83 3f c9 9f 31    	or     BYTE PTR [ebx+0x319fc93f],al
     851:	08 21                	or     BYTE PTR [ecx],ah
     853:	d8 bc 08 31 08 75 68 	fdivr  DWORD PTR [eax+ecx*1+0x68750831]
     85a:	67 02 22             	add    ah,BYTE PTR [bp+si]
     85d:	14 08                	adc    al,0x8
     85f:	ae                   	scas   al,BYTE PTR es:[edi]
     860:	4c                   	dec    esp
     861:	ca 08 4b             	retf   0x4b08
     864:	91                   	xchg   ecx,eax
     865:	67 bc 08 83 08 75    	addr16 mov esp,0x75088308
     86b:	67 02 2f             	add    ch,BYTE PTR [bx]
     86e:	14 00                	adc    al,0x0
     870:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     873:	02 31                	add    dh,BYTE PTR [ecx]
     875:	13 00                	adc    eax,DWORD PTR [eax]
     877:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
     87a:	08 bb 00 02 04 02    	or     BYTE PTR [ebx+0x2040200],bh
     880:	bb 00 02 04 02       	mov    ebx,0x2040200
     885:	03 76 4a             	add    esi,DWORD PTR [esi+0x4a]
     888:	00 02                	add    BYTE PTR [edx],al
     88a:	04 01                	add    al,0x1
     88c:	06                   	push   es
     88d:	4a                   	dec    edx
     88e:	06                   	push   es
     88f:	03 0c ba             	add    ecx,DWORD PTR [edx+edi*4]
     892:	08 91 08 86 3f 5b    	or     BYTE PTR [ecx+0x5b3f8608],dl
     898:	f3 77 08             	repz ja 8a3 <sysEnter_Vector-0x12f75d>
     89b:	67 08 86 3d 31       	or     BYTE PTR [bp+0x313d],al
     8a0:	c9                   	leave  
     8a1:	c9                   	leave  
     8a2:	31 c9                	xor    ecx,ecx
     8a4:	08 13                	or     BYTE PTR [ebx],dl
     8a6:	02 02                	add    al,BYTE PTR [edx]
     8a8:	00 01                	add    BYTE PTR [ecx],al
     8aa:	01 50 01             	add    DWORD PTR [eax+0x1],edx
     8ad:	00 00                	add    BYTE PTR [eax],al
     8af:	02 00                	add    al,BYTE PTR [eax]
     8b1:	db 00                	fild   DWORD PTR [eax]
     8b3:	00 00                	add    BYTE PTR [eax],al
     8b5:	01 01                	add    DWORD PTR [ecx],eax
     8b7:	fb                   	sti    
     8b8:	0e                   	push   cs
     8b9:	0d 00 01 01 01       	or     eax,0x1010100
     8be:	01 00                	add    DWORD PTR [eax],eax
     8c0:	00 00                	add    BYTE PTR [eax],al
     8c2:	01 00                	add    DWORD PTR [eax],eax
     8c4:	00 01                	add    BYTE PTR [ecx],al
     8c6:	73 72                	jae    93a <sysEnter_Vector-0x12f6c6>
     8c8:	63 00                	arpl   WORD PTR [eax],ax
     8ca:	2f                   	das    
     8cb:	68 6f 6d 65 2f       	push   0x2f656d6f
     8d0:	79 6f                	jns    941 <sysEnter_Vector-0x12f6bf>
     8d2:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     8d9:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     8dc:	73 73                	jae    951 <sysEnter_Vector-0x12f6af>
     8de:	2f                   	das    
     8df:	6c                   	ins    BYTE PTR es:[edi],dx
     8e0:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     8e7:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     8ed:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     8f3:	78 2d                	js     922 <sysEnter_Vector-0x12f6de>
     8f5:	67 6e                	outs   dx,BYTE PTR ds:[si]
     8f7:	75 2f                	jne    928 <sysEnter_Vector-0x12f6d8>
     8f9:	35 2e 33 2e 30       	xor    eax,0x302e332e
     8fe:	2f                   	das    
     8ff:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     906:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     909:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     90d:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     911:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     915:	65                   	gs
     916:	2f                   	das    
     917:	2e                   	cs
     918:	2e                   	cs
     919:	2f                   	das    
     91a:	2e                   	cs
     91b:	2e                   	cs
     91c:	2f                   	das    
     91d:	2e                   	cs
     91e:	2e                   	cs
     91f:	2f                   	das    
     920:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     924:	6a 2f                	push   0x2f
     926:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     929:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     930:	6e                   	outs   dx,BYTE PTR ds:[esi]
     931:	65                   	gs
     932:	6c                   	ins    BYTE PTR es:[edi],dx
     933:	2f                   	das    
     934:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     93b:	00 00                	add    BYTE PTR [eax],al
     93d:	6d                   	ins    DWORD PTR es:[edi],dx
     93e:	61                   	popa   
     93f:	6c                   	ins    BYTE PTR es:[edi],dx
     940:	6c                   	ins    BYTE PTR es:[edi],dx
     941:	6f                   	outs   dx,DWORD PTR ds:[esi]
     942:	63 2e                	arpl   WORD PTR [esi],bp
     944:	63 00                	arpl   WORD PTR [eax],ax
     946:	01 00                	add    DWORD PTR [eax],eax
     948:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     94b:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     952:	63 
     953:	2e                   	cs
     954:	68 00 02 00 00       	push   0x200
     959:	73 74                	jae    9cf <sysEnter_Vector-0x12f631>
     95b:	64                   	fs
     95c:	64                   	fs
     95d:	65                   	gs
     95e:	66                   	data16
     95f:	2e                   	cs
     960:	68 00 02 00 00       	push   0x200
     965:	6d                   	ins    DWORD PTR es:[edi],dx
     966:	61                   	popa   
     967:	6c                   	ins    BYTE PTR es:[edi],dx
     968:	6c                   	ins    BYTE PTR es:[edi],dx
     969:	6f                   	outs   dx,DWORD PTR ds:[esi]
     96a:	63 2e                	arpl   WORD PTR [esi],bp
     96c:	68 00 03 00 00       	push   0x300
     971:	6c                   	ins    BYTE PTR es:[edi],dx
     972:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     979:	4f                   	dec    edi
     97a:	53                   	push   ebx
     97b:	2e                   	cs
     97c:	68 00 03 00 00       	push   0x300
     981:	73 79                	jae    9fc <sysEnter_Vector-0x12f604>
     983:	73 63                	jae    9e8 <sysEnter_Vector-0x12f618>
     985:	61                   	popa   
     986:	6c                   	ins    BYTE PTR es:[edi],dx
     987:	6c                   	ins    BYTE PTR es:[edi],dx
     988:	73 2e                	jae    9b8 <sysEnter_Vector-0x12f648>
     98a:	68 00 04 00 00       	push   0x400
     98f:	00 00                	add    BYTE PTR [eax],al
     991:	05 02 98 0e 00       	add    eax,0xe9802
     996:	30 03                	xor    BYTE PTR [ebx],al
     998:	0c 01                	or     al,0x1
     99a:	08 21                	or     BYTE PTR [ecx],ah
     99c:	02 24 13             	add    ah,BYTE PTR [ebx+edx*1]
     99f:	bb bb bb bc 69       	mov    ebx,0x69bcbbbb
     9a4:	f5                   	cmc    
     9a5:	92                   	xchg   edx,eax
     9a6:	08 85 08 67 00 02    	or     BYTE PTR [ebp+0x2006708],al
     9ac:	04 01                	add    al,0x1
     9ae:	06                   	push   es
     9af:	66 06                	pushw  es
     9b1:	bc f5 91 76 5b       	mov    esp,0x5b7691f5
     9b6:	59                   	pop    ecx
     9b7:	31 f5                	xor    ebp,esi
     9b9:	68 93 00 02 04       	push   0x4020093
     9be:	02 be 30 03 76 90    	add    bh,BYTE PTR [esi-0x6f89fcd0]
     9c4:	03 0b                	add    ecx,DWORD PTR [ebx]
     9c6:	20 31                	and    BYTE PTR [ecx],dh
     9c8:	08 27                	or     BYTE PTR [edi],ah
     9ca:	08 91 08 13 08 91    	or     BYTE PTR [ecx-0x6ef7ecf8],dl
     9d0:	a0 08 5a 08 e5       	mov    al,ds:0xe5085a08
     9d5:	f3 02 26             	repz add ah,BYTE PTR [esi]
     9d8:	13 bc ad ad 08 e7 08 	adc    edi,DWORD PTR [ebp+ebp*4+0x8e708ad]
     9df:	e5 ad                	in     eax,0xad
     9e1:	91                   	xchg   ecx,eax
     9e2:	91                   	xchg   ecx,eax
     9e3:	75 08                	jne    9ed <sysEnter_Vector-0x12f613>
     9e5:	d7                   	xlat   BYTE PTR ds:[ebx]
     9e6:	d7                   	xlat   BYTE PTR ds:[ebx]
     9e7:	08 13                	or     BYTE PTR [ebx],dl
     9e9:	91                   	xchg   ecx,eax
     9ea:	08 75 08             	or     BYTE PTR [ebp+0x8],dh
     9ed:	91                   	xchg   ecx,eax
     9ee:	3d 5b f3 d7 31       	cmp    eax,0x31d7f35b
     9f3:	c9                   	leave  
     9f4:	ad                   	lods   eax,DWORD PTR ds:[esi]
     9f5:	3f                   	aas    
     9f6:	08 13                	or     BYTE PTR [ebx],dl
     9f8:	08 9f 02 06 00 01    	or     BYTE PTR [edi+0x1000602],bl
     9fe:	01 e3                	add    ebx,esp
     a00:	00 00                	add    BYTE PTR [eax],al
     a02:	00 02                	add    BYTE PTR [edx],al
     a04:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     a0a:	01 fb                	add    ebx,edi
     a0c:	0e                   	push   cs
     a0d:	0d 00 01 01 01       	or     eax,0x1010100
     a12:	01 00                	add    DWORD PTR [eax],eax
     a14:	00 00                	add    BYTE PTR [eax],al
     a16:	01 00                	add    DWORD PTR [eax],eax
     a18:	00 01                	add    BYTE PTR [ecx],al
     a1a:	73 72                	jae    a8e <sysEnter_Vector-0x12f572>
     a1c:	63 00                	arpl   WORD PTR [eax],ax
     a1e:	2f                   	das    
     a1f:	68 6f 6d 65 2f       	push   0x2f656d6f
     a24:	79 6f                	jns    a95 <sysEnter_Vector-0x12f56b>
     a26:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     a2d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     a30:	73 73                	jae    aa5 <sysEnter_Vector-0x12f55b>
     a32:	2f                   	das    
     a33:	6c                   	ins    BYTE PTR es:[edi],dx
     a34:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     a3b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     a41:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     a47:	78 2d                	js     a76 <sysEnter_Vector-0x12f58a>
     a49:	67 6e                	outs   dx,BYTE PTR ds:[si]
     a4b:	75 2f                	jne    a7c <sysEnter_Vector-0x12f584>
     a4d:	35 2e 33 2e 30       	xor    eax,0x302e332e
     a52:	2f                   	das    
     a53:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     a5a:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     a5d:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     a61:	65 00 00             	add    BYTE PTR gs:[eax],al
     a64:	6d                   	ins    DWORD PTR es:[edi],dx
     a65:	65                   	gs
     a66:	6d                   	ins    DWORD PTR es:[edi],dx
     a67:	63 70 79             	arpl   WORD PTR [eax+0x79],si
     a6a:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     a6d:	01 00                	add    DWORD PTR [eax],eax
     a6f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     a72:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     a79:	63 
     a7a:	2e                   	cs
     a7b:	68 00 02 00 00       	push   0x200
     a80:	73 74                	jae    af6 <sysEnter_Vector-0x12f50a>
     a82:	64                   	fs
     a83:	64                   	fs
     a84:	65                   	gs
     a85:	66                   	data16
     a86:	2e                   	cs
     a87:	68 00 02 00 00       	push   0x200
     a8c:	6d                   	ins    DWORD PTR es:[edi],dx
     a8d:	61                   	popa   
     a8e:	6c                   	ins    BYTE PTR es:[edi],dx
     a8f:	6c                   	ins    BYTE PTR es:[edi],dx
     a90:	6f                   	outs   dx,DWORD PTR ds:[esi]
     a91:	63 2e                	arpl   WORD PTR [esi],bp
     a93:	68 00 03 00 00       	push   0x300
     a98:	6c                   	ins    BYTE PTR es:[edi],dx
     a99:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     aa0:	4f                   	dec    edi
     aa1:	53                   	push   ebx
     aa2:	2e                   	cs
     aa3:	68 00 03 00 00       	push   0x300
     aa8:	00 00                	add    BYTE PTR [eax],al
     aaa:	05 02 08 12 00       	add    eax,0x120802
     aaf:	30 03                	xor    BYTE PTR [ebx],al
     ab1:	0a 01                	or     al,BYTE PTR [ecx]
     ab3:	f5                   	cmc    
     ab4:	d7                   	xlat   BYTE PTR ds:[ebx]
     ab5:	d7                   	xlat   BYTE PTR ds:[ebx]
     ab6:	68 91 67 68 83       	push   0x83686791
     abb:	91                   	xchg   ecx,eax
     abc:	91                   	xchg   ecx,eax
     abd:	2f                   	das    
     abe:	08 1f                	or     BYTE PTR [edi],bl
     ac0:	e8 08 57 ca 84       	call   84ca61cd <ticksToWait+0x54ca1cbd>
     ac5:	68 83 67 68 83       	push   0x83686783
     aca:	91                   	xchg   ecx,eax
     acb:	91                   	xchg   ecx,eax
     acc:	2f                   	das    
     acd:	08 1f                	or     BYTE PTR [edi],bl
     acf:	e8 08 57 ca 5c       	call   5cca61dc <ticksToWait+0x2cca1ccc>
     ad4:	67 68 83 67 67 2f    	addr16 push 0x2f676783
     ada:	08 2d e8 08 65 ca    	or     BYTE PTR ds:0xca6508e8,ch
     ae0:	3e 02 02             	add    al,BYTE PTR ds:[edx]
     ae3:	00 01                	add    BYTE PTR [ecx],al
     ae5:	01 ca                	add    edx,ecx
     ae7:	00 00                	add    BYTE PTR [eax],al
     ae9:	00 02                	add    BYTE PTR [edx],al
     aeb:	00 a0 00 00 00 01    	add    BYTE PTR [eax+0x1000000],ah
     af1:	01 fb                	add    ebx,edi
     af3:	0e                   	push   cs
     af4:	0d 00 01 01 01       	or     eax,0x1010100
     af9:	01 00                	add    DWORD PTR [eax],eax
     afb:	00 00                	add    BYTE PTR [eax],al
     afd:	01 00                	add    DWORD PTR [eax],eax
     aff:	00 01                	add    BYTE PTR [ecx],al
     b01:	73 72                	jae    b75 <sysEnter_Vector-0x12f48b>
     b03:	63 00                	arpl   WORD PTR [eax],ax
     b05:	2f                   	das    
     b06:	68 6f 6d 65 2f       	push   0x2f656d6f
     b0b:	79 6f                	jns    b7c <sysEnter_Vector-0x12f484>
     b0d:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     b14:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     b17:	73 73                	jae    b8c <sysEnter_Vector-0x12f474>
     b19:	2f                   	das    
     b1a:	6c                   	ins    BYTE PTR es:[edi],dx
     b1b:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     b22:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     b28:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     b2e:	78 2d                	js     b5d <sysEnter_Vector-0x12f4a3>
     b30:	67 6e                	outs   dx,BYTE PTR ds:[si]
     b32:	75 2f                	jne    b63 <sysEnter_Vector-0x12f49d>
     b34:	35 2e 33 2e 30       	xor    eax,0x302e332e
     b39:	2f                   	das    
     b3a:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     b41:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     b44:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     b48:	65 00 00             	add    BYTE PTR gs:[eax],al
     b4b:	6d                   	ins    DWORD PTR es:[edi],dx
     b4c:	65                   	gs
     b4d:	6d                   	ins    DWORD PTR es:[edi],dx
     b4e:	73 65                	jae    bb5 <sysEnter_Vector-0x12f44b>
     b50:	74 2e                	je     b80 <sysEnter_Vector-0x12f480>
     b52:	63 00                	arpl   WORD PTR [eax],ax
     b54:	01 00                	add    DWORD PTR [eax],eax
     b56:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     b59:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     b60:	63 
     b61:	2e                   	cs
     b62:	68 00 02 00 00       	push   0x200
     b67:	73 74                	jae    bdd <sysEnter_Vector-0x12f423>
     b69:	64                   	fs
     b6a:	64                   	fs
     b6b:	65                   	gs
     b6c:	66                   	data16
     b6d:	2e                   	cs
     b6e:	68 00 02 00 00       	push   0x200
     b73:	6d                   	ins    DWORD PTR es:[edi],dx
     b74:	61                   	popa   
     b75:	6c                   	ins    BYTE PTR es:[edi],dx
     b76:	6c                   	ins    BYTE PTR es:[edi],dx
     b77:	6f                   	outs   dx,DWORD PTR ds:[esi]
     b78:	63 2e                	arpl   WORD PTR [esi],bp
     b7a:	68 00 03 00 00       	push   0x300
     b7f:	6c                   	ins    BYTE PTR es:[edi],dx
     b80:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     b87:	4f                   	dec    edi
     b88:	53                   	push   ebx
     b89:	2e                   	cs
     b8a:	68 00 03 00 00       	push   0x300
     b8f:	00 00                	add    BYTE PTR [eax],al
     b91:	05 02 a4 13 00       	add    eax,0x13a402
     b96:	30 1a                	xor    BYTE PTR [edx],bl
     b98:	f3 67 67 08 83 67 08 	repz addr32 or BYTE PTR [bp+di+0x867],al
     b9f:	ca 9f 2f             	retf   0x2f9f
     ba2:	d5 bd                	aad    0xbd
     ba4:	9f                   	lahf   
     ba5:	2f                   	das    
     ba6:	f1                   	icebp  
     ba7:	bf d5 cb 3d 31       	mov    edi,0x313dcbd5
     bac:	c9                   	leave  
     bad:	08 13                	or     BYTE PTR [ebx],dl
     baf:	02 02                	add    al,BYTE PTR [edx]
     bb1:	00 01                	add    BYTE PTR [ecx],al
     bb3:	01 c0                	add    eax,eax
     bb5:	00 00                	add    BYTE PTR [eax],al
     bb7:	00 02                	add    BYTE PTR [edx],al
     bb9:	00 a9 00 00 00 01    	add    BYTE PTR [ecx+0x1000000],ch
     bbf:	01 fb                	add    ebx,edi
     bc1:	0e                   	push   cs
     bc2:	0d 00 01 01 01       	or     eax,0x1010100
     bc7:	01 00                	add    DWORD PTR [eax],eax
     bc9:	00 00                	add    BYTE PTR [eax],al
     bcb:	01 00                	add    DWORD PTR [eax],eax
     bcd:	00 01                	add    BYTE PTR [ecx],al
     bcf:	73 72                	jae    c43 <sysEnter_Vector-0x12f3bd>
     bd1:	63 00                	arpl   WORD PTR [eax],ax
     bd3:	2f                   	das    
     bd4:	68 6f 6d 65 2f       	push   0x2f656d6f
     bd9:	79 6f                	jns    c4a <sysEnter_Vector-0x12f3b6>
     bdb:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     be2:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     be5:	73 73                	jae    c5a <sysEnter_Vector-0x12f3a6>
     be7:	2f                   	das    
     be8:	6c                   	ins    BYTE PTR es:[edi],dx
     be9:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     bf0:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     bf6:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     bfc:	78 2d                	js     c2b <sysEnter_Vector-0x12f3d5>
     bfe:	67 6e                	outs   dx,BYTE PTR ds:[si]
     c00:	75 2f                	jne    c31 <sysEnter_Vector-0x12f3cf>
     c02:	35 2e 33 2e 30       	xor    eax,0x302e332e
     c07:	2f                   	das    
     c08:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     c0f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     c12:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     c16:	65 00 00             	add    BYTE PTR gs:[eax],al
     c19:	6d                   	ins    DWORD PTR es:[edi],dx
     c1a:	6d                   	ins    DWORD PTR es:[edi],dx
     c1b:	61                   	popa   
     c1c:	70 2e                	jo     c4c <sysEnter_Vector-0x12f3b4>
     c1e:	63 00                	arpl   WORD PTR [eax],ax
     c20:	01 00                	add    DWORD PTR [eax],eax
     c22:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     c25:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     c2c:	63 
     c2d:	2e                   	cs
     c2e:	68 00 02 00 00       	push   0x200
     c33:	73 74                	jae    ca9 <sysEnter_Vector-0x12f357>
     c35:	64                   	fs
     c36:	64                   	fs
     c37:	65                   	gs
     c38:	66                   	data16
     c39:	2e                   	cs
     c3a:	68 00 02 00 00       	push   0x200
     c3f:	74 79                	je     cba <sysEnter_Vector-0x12f346>
     c41:	70 65                	jo     ca8 <sysEnter_Vector-0x12f358>
     c43:	73 2e                	jae    c73 <sysEnter_Vector-0x12f38d>
     c45:	68 00 03 00 00       	push   0x300
     c4a:	6d                   	ins    DWORD PTR es:[edi],dx
     c4b:	61                   	popa   
     c4c:	6c                   	ins    BYTE PTR es:[edi],dx
     c4d:	6c                   	ins    BYTE PTR es:[edi],dx
     c4e:	6f                   	outs   dx,DWORD PTR ds:[esi]
     c4f:	63 2e                	arpl   WORD PTR [esi],bp
     c51:	68 00 03 00 00       	push   0x300
     c56:	6c                   	ins    BYTE PTR es:[edi],dx
     c57:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     c5e:	4f                   	dec    edi
     c5f:	53                   	push   ebx
     c60:	2e                   	cs
     c61:	68 00 03 00 00       	push   0x300
     c66:	00 00                	add    BYTE PTR [eax],al
     c68:	05 02 8c 14 00       	add    eax,0x148c02
     c6d:	30 03                	xor    BYTE PTR [ebx],al
     c6f:	09 01                	or     DWORD PTR [ecx],eax
     c71:	c9                   	leave  
     c72:	59                   	pop    ecx
     c73:	02 02                	add    al,BYTE PTR [edx]
     c75:	00 01                	add    BYTE PTR [ecx],al
     c77:	01 e6                	add    esi,esp
     c79:	00 00                	add    BYTE PTR [eax],al
     c7b:	00 02                	add    BYTE PTR [edx],al
     c7d:	00 cd                	add    ch,cl
     c7f:	00 00                	add    BYTE PTR [eax],al
     c81:	00 01                	add    BYTE PTR [ecx],al
     c83:	01 fb                	add    ebx,edi
     c85:	0e                   	push   cs
     c86:	0d 00 01 01 01       	or     eax,0x1010100
     c8b:	01 00                	add    DWORD PTR [eax],eax
     c8d:	00 00                	add    BYTE PTR [eax],al
     c8f:	01 00                	add    DWORD PTR [eax],eax
     c91:	00 01                	add    BYTE PTR [ecx],al
     c93:	73 72                	jae    d07 <sysEnter_Vector-0x12f2f9>
     c95:	63 00                	arpl   WORD PTR [eax],ax
     c97:	2f                   	das    
     c98:	68 6f 6d 65 2f       	push   0x2f656d6f
     c9d:	79 6f                	jns    d0e <sysEnter_Vector-0x12f2f2>
     c9f:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     ca6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ca9:	73 73                	jae    d1e <sysEnter_Vector-0x12f2e2>
     cab:	2f                   	das    
     cac:	6c                   	ins    BYTE PTR es:[edi],dx
     cad:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     cb4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     cba:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     cc0:	78 2d                	js     cef <sysEnter_Vector-0x12f311>
     cc2:	67 6e                	outs   dx,BYTE PTR ds:[si]
     cc4:	75 2f                	jne    cf5 <sysEnter_Vector-0x12f30b>
     cc6:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ccb:	2f                   	das    
     ccc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     cd3:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     cd6:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     cda:	65 00 69 6e          	add    BYTE PTR gs:[ecx+0x6e],ch
     cde:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     ce2:	65                   	gs
     ce3:	2f                   	das    
     ce4:	2e                   	cs
     ce5:	2e                   	cs
     ce6:	2f                   	das    
     ce7:	2e                   	cs
     ce8:	2e                   	cs
     ce9:	2f                   	das    
     cea:	2e                   	cs
     ceb:	2e                   	cs
     cec:	2f                   	das    
     ced:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     cf1:	6a 2f                	push   0x2f
     cf3:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     cf6:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     cfd:	6e                   	outs   dx,BYTE PTR ds:[esi]
     cfe:	65                   	gs
     cff:	6c                   	ins    BYTE PTR es:[edi],dx
     d00:	2f                   	das    
     d01:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     d08:	00 00                	add    BYTE PTR [eax],al
     d0a:	70 69                	jo     d75 <sysEnter_Vector-0x12f28b>
     d0c:	70 65                	jo     d73 <sysEnter_Vector-0x12f28d>
     d0e:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
     d11:	01 00                	add    DWORD PTR [eax],eax
     d13:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     d16:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     d1d:	63 
     d1e:	2e                   	cs
     d1f:	68 00 02 00 00       	push   0x200
     d24:	6d                   	ins    DWORD PTR es:[edi],dx
     d25:	61                   	popa   
     d26:	6c                   	ins    BYTE PTR es:[edi],dx
     d27:	6c                   	ins    BYTE PTR es:[edi],dx
     d28:	6f                   	outs   dx,DWORD PTR ds:[esi]
     d29:	63 2e                	arpl   WORD PTR [esi],bp
     d2b:	68 00 03 00 00       	push   0x300
     d30:	6c                   	ins    BYTE PTR es:[edi],dx
     d31:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     d38:	4f                   	dec    edi
     d39:	53                   	push   ebx
     d3a:	2e                   	cs
     d3b:	68 00 03 00 00       	push   0x300
     d40:	73 79                	jae    dbb <sysEnter_Vector-0x12f245>
     d42:	73 63                	jae    da7 <sysEnter_Vector-0x12f259>
     d44:	61                   	popa   
     d45:	6c                   	ins    BYTE PTR es:[edi],dx
     d46:	6c                   	ins    BYTE PTR es:[edi],dx
     d47:	73 2e                	jae    d77 <sysEnter_Vector-0x12f289>
     d49:	68 00 04 00 00       	push   0x400
     d4e:	00 00                	add    BYTE PTR [eax],al
     d50:	05 02 a0 14 00       	add    eax,0x14a002
     d55:	30 03                	xor    BYTE PTR [ebx],al
     d57:	0a 01                	or     al,BYTE PTR [ecx]
     d59:	08 13                	or     BYTE PTR [ebx],dl
     d5b:	08 2f                	or     BYTE PTR [edi],ch
     d5d:	02 05 00 01 01 fa    	add    al,BYTE PTR ds:0xfa010100
     d63:	00 00                	add    BYTE PTR [eax],al
     d65:	00 02                	add    BYTE PTR [edx],al
     d67:	00 d8                	add    al,bl
     d69:	00 00                	add    BYTE PTR [eax],al
     d6b:	00 01                	add    BYTE PTR [ecx],al
     d6d:	01 fb                	add    ebx,edi
     d6f:	0e                   	push   cs
     d70:	0d 00 01 01 01       	or     eax,0x1010100
     d75:	01 00                	add    DWORD PTR [eax],eax
     d77:	00 00                	add    BYTE PTR [eax],al
     d79:	01 00                	add    DWORD PTR [eax],eax
     d7b:	00 01                	add    BYTE PTR [ecx],al
     d7d:	73 72                	jae    df1 <sysEnter_Vector-0x12f20f>
     d7f:	63 00                	arpl   WORD PTR [eax],ax
     d81:	2f                   	das    
     d82:	68 6f 6d 65 2f       	push   0x2f656d6f
     d87:	79 6f                	jns    df8 <sysEnter_Vector-0x12f208>
     d89:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     d90:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     d93:	73 73                	jae    e08 <sysEnter_Vector-0x12f1f8>
     d95:	2f                   	das    
     d96:	6c                   	ins    BYTE PTR es:[edi],dx
     d97:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     d9e:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     da4:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     daa:	78 2d                	js     dd9 <sysEnter_Vector-0x12f227>
     dac:	67 6e                	outs   dx,BYTE PTR ds:[si]
     dae:	75 2f                	jne    ddf <sysEnter_Vector-0x12f221>
     db0:	35 2e 33 2e 30       	xor    eax,0x302e332e
     db5:	2f                   	das    
     db6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     dbd:	00 2e                	add    BYTE PTR [esi],ch
     dbf:	2e                   	cs
     dc0:	2f                   	das    
     dc1:	2e                   	cs
     dc2:	2e                   	cs
     dc3:	2f                   	das    
     dc4:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
     dc8:	6a 2f                	push   0x2f
     dca:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
     dcd:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
     dd4:	6e                   	outs   dx,BYTE PTR ds:[esi]
     dd5:	65                   	gs
     dd6:	6c                   	ins    BYTE PTR es:[edi],dx
     dd7:	2f                   	das    
     dd8:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ddf:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
     de2:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
     de6:	65 00 00             	add    BYTE PTR gs:[eax],al
     de9:	73 74                	jae    e5f <sysEnter_Vector-0x12f1a1>
     deb:	64 69 6f 2e 63 00 01 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x10063
     df2:	00 
     df3:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
     df6:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     dfd:	63 
     dfe:	2e                   	cs
     dff:	68 00 02 00 00       	push   0x200
     e04:	73 74                	jae    e7a <sysEnter_Vector-0x12f186>
     e06:	64                   	fs
     e07:	64                   	fs
     e08:	65                   	gs
     e09:	66                   	data16
     e0a:	2e                   	cs
     e0b:	68 00 02 00 00       	push   0x200
     e10:	64                   	fs
     e11:	6c                   	ins    BYTE PTR es:[edi],dx
     e12:	6c                   	ins    BYTE PTR es:[edi],dx
     e13:	69 73 74 2e 68 00 03 	imul   esi,DWORD PTR [ebx+0x74],0x300682e
     e1a:	00 00                	add    BYTE PTR [eax],al
     e1c:	73 74                	jae    e92 <sysEnter_Vector-0x12f16e>
     e1e:	64 69 6f 2e 68 00 04 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x40068
     e25:	00 
     e26:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     e29:	6c                   	ins    BYTE PTR es:[edi],dx
     e2a:	6c                   	ins    BYTE PTR es:[edi],dx
     e2b:	6f                   	outs   dx,DWORD PTR ds:[esi]
     e2c:	63 2e                	arpl   WORD PTR [esi],bp
     e2e:	68 00 04 00 00       	push   0x400
     e33:	6c                   	ins    BYTE PTR es:[edi],dx
     e34:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     e3b:	4f                   	dec    edi
     e3c:	53                   	push   ebx
     e3d:	2e                   	cs
     e3e:	68 00 04 00 00       	push   0x400
     e43:	00 00                	add    BYTE PTR [eax],al
     e45:	05 02 cc 14 00       	add    eax,0x14cc02
     e4a:	30 03                	xor    BYTE PTR [ebx],al
     e4c:	c3                   	ret    
     e4d:	00 01                	add    BYTE PTR [ecx],al
     e4f:	08 22                	or     BYTE PTR [edx],ah
     e51:	76 08                	jbe    e5b <sysEnter_Vector-0x12f1a5>
     e53:	31 d7                	xor    edi,edx
     e55:	d7                   	xlat   BYTE PTR ds:[ebx]
     e56:	d7                   	xlat   BYTE PTR ds:[ebx]
     e57:	d7                   	xlat   BYTE PTR ds:[ebx]
     e58:	ad                   	lods   eax,DWORD PTR ds:[esi]
     e59:	e6 21                	out    0x21,al
     e5b:	02 05 00 01 01 cc    	add    al,BYTE PTR ds:0xcc010100
     e61:	00 00                	add    BYTE PTR [eax],al
     e63:	00 02                	add    BYTE PTR [edx],al
     e65:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     e6c:	fb                   	sti    
     e6d:	0e                   	push   cs
     e6e:	0d 00 01 01 01       	or     eax,0x1010100
     e73:	01 00                	add    DWORD PTR [eax],eax
     e75:	00 00                	add    BYTE PTR [eax],al
     e77:	01 00                	add    DWORD PTR [eax],eax
     e79:	00 01                	add    BYTE PTR [ecx],al
     e7b:	73 72                	jae    eef <sysEnter_Vector-0x12f111>
     e7d:	63 2f                	arpl   WORD PTR [edi],bp
     e7f:	73 74                	jae    ef5 <sysEnter_Vector-0x12f10b>
     e81:	72 69                	jb     eec <sysEnter_Vector-0x12f114>
     e83:	6e                   	outs   dx,BYTE PTR ds:[esi]
     e84:	67 73 00             	addr16 jae e87 <sysEnter_Vector-0x12f179>
     e87:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     e8e:	00 2f                	add    BYTE PTR [edi],ch
     e90:	68 6f 6d 65 2f       	push   0x2f656d6f
     e95:	79 6f                	jns    f06 <sysEnter_Vector-0x12f0fa>
     e97:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     e9e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     ea1:	73 73                	jae    f16 <sysEnter_Vector-0x12f0ea>
     ea3:	2f                   	das    
     ea4:	6c                   	ins    BYTE PTR es:[edi],dx
     ea5:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     eac:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     eb2:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     eb8:	78 2d                	js     ee7 <sysEnter_Vector-0x12f119>
     eba:	67 6e                	outs   dx,BYTE PTR ds:[si]
     ebc:	75 2f                	jne    eed <sysEnter_Vector-0x12f113>
     ebe:	35 2e 33 2e 30       	xor    eax,0x302e332e
     ec3:	2f                   	das    
     ec4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     ecb:	00 00                	add    BYTE PTR [eax],al
     ecd:	73 74                	jae    f43 <sysEnter_Vector-0x12f0bd>
     ecf:	72 63                	jb     f34 <sysEnter_Vector-0x12f0cc>
     ed1:	61                   	popa   
     ed2:	74 2e                	je     f02 <sysEnter_Vector-0x12f0fe>
     ed4:	63 00                	arpl   WORD PTR [eax],ax
     ed6:	01 00                	add    DWORD PTR [eax],eax
     ed8:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     edb:	6c                   	ins    BYTE PTR es:[edi],dx
     edc:	6c                   	ins    BYTE PTR es:[edi],dx
     edd:	6f                   	outs   dx,DWORD PTR ds:[esi]
     ede:	63 2e                	arpl   WORD PTR [esi],bp
     ee0:	68 00 02 00 00       	push   0x200
     ee5:	6c                   	ins    BYTE PTR es:[edi],dx
     ee6:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     eed:	4f                   	dec    edi
     eee:	53                   	push   ebx
     eef:	2e                   	cs
     ef0:	68 00 02 00 00       	push   0x200
     ef5:	73 74                	jae    f6b <sysEnter_Vector-0x12f095>
     ef7:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     efe:	63 
     eff:	2e                   	cs
     f00:	68 00 03 00 00       	push   0x300
     f05:	00 00                	add    BYTE PTR [eax],al
     f07:	05 02 50 15 00       	add    eax,0x155002
     f0c:	30 03                	xor    BYTE PTR [ebx],al
     f0e:	1d 01 08 21 02       	sbb    eax,0x2210801
     f13:	24 13                	and    al,0x13
     f15:	3d 5b 08 21 02       	cmp    eax,0x221085b
     f1a:	24 13                	and    al,0x13
     f1c:	3d 5a f5 76 2f       	cmp    eax,0x2f76f55a
     f21:	49                   	dec    ecx
     f22:	e8 76 2f 08 4b       	call   4b083e9d <ticksToWait+0x1b07f98d>
     f27:	4b                   	dec    ebx
     f28:	47                   	inc    edi
     f29:	ea ad 02 03 00 01 01 	jmp    0x101:0x302ad
     f30:	bb 00 00 00 02       	mov    ebx,0x2000000
     f35:	00 9c 00 00 00 01 01 	add    BYTE PTR [eax+eax*1+0x1010000],bl
     f3c:	fb                   	sti    
     f3d:	0e                   	push   cs
     f3e:	0d 00 01 01 01       	or     eax,0x1010100
     f43:	01 00                	add    DWORD PTR [eax],eax
     f45:	00 00                	add    BYTE PTR [eax],al
     f47:	01 00                	add    DWORD PTR [eax],eax
     f49:	00 01                	add    BYTE PTR [ecx],al
     f4b:	73 72                	jae    fbf <sysEnter_Vector-0x12f041>
     f4d:	63 2f                	arpl   WORD PTR [edi],bp
     f4f:	73 74                	jae    fc5 <sysEnter_Vector-0x12f03b>
     f51:	72 69                	jb     fbc <sysEnter_Vector-0x12f044>
     f53:	6e                   	outs   dx,BYTE PTR ds:[esi]
     f54:	67 73 00             	addr16 jae f57 <sysEnter_Vector-0x12f0a9>
     f57:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f5e:	00 2f                	add    BYTE PTR [edi],ch
     f60:	68 6f 6d 65 2f       	push   0x2f656d6f
     f65:	79 6f                	jns    fd6 <sysEnter_Vector-0x12f02a>
     f67:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
     f6e:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
     f71:	73 73                	jae    fe6 <sysEnter_Vector-0x12f01a>
     f73:	2f                   	das    
     f74:	6c                   	ins    BYTE PTR es:[edi],dx
     f75:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
     f7c:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
     f82:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
     f88:	78 2d                	js     fb7 <sysEnter_Vector-0x12f049>
     f8a:	67 6e                	outs   dx,BYTE PTR ds:[si]
     f8c:	75 2f                	jne    fbd <sysEnter_Vector-0x12f043>
     f8e:	35 2e 33 2e 30       	xor    eax,0x302e332e
     f93:	2f                   	das    
     f94:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
     f9b:	00 00                	add    BYTE PTR [eax],al
     f9d:	73 74                	jae    1013 <sysEnter_Vector-0x12efed>
     f9f:	72 63                	jb     1004 <sysEnter_Vector-0x12effc>
     fa1:	6d                   	ins    DWORD PTR es:[edi],dx
     fa2:	70 2e                	jo     fd2 <sysEnter_Vector-0x12f02e>
     fa4:	63 00                	arpl   WORD PTR [eax],ax
     fa6:	01 00                	add    DWORD PTR [eax],eax
     fa8:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
     fab:	6c                   	ins    BYTE PTR es:[edi],dx
     fac:	6c                   	ins    BYTE PTR es:[edi],dx
     fad:	6f                   	outs   dx,DWORD PTR ds:[esi]
     fae:	63 2e                	arpl   WORD PTR [esi],bp
     fb0:	68 00 02 00 00       	push   0x200
     fb5:	6c                   	ins    BYTE PTR es:[edi],dx
     fb6:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
     fbd:	4f                   	dec    edi
     fbe:	53                   	push   ebx
     fbf:	2e                   	cs
     fc0:	68 00 02 00 00       	push   0x200
     fc5:	73 74                	jae    103b <sysEnter_Vector-0x12efc5>
     fc7:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
     fce:	63 
     fcf:	2e                   	cs
     fd0:	68 00 03 00 00       	push   0x300
     fd5:	00 00                	add    BYTE PTR [eax],al
     fd7:	05 02 3c 16 00       	add    eax,0x163c02
     fdc:	30 03                	xor    BYTE PTR [ebx],al
     fde:	18 01                	sbb    BYTE PTR [ecx],al
     fe0:	08 21                	or     BYTE PTR [ecx],ah
     fe2:	3d 41 ad ad 67       	cmp    eax,0x67adad41
     fe7:	d8 92 bb 02 07 00    	fcom   DWORD PTR [edx+0x702bb]
     fed:	01 01                	add    DWORD PTR [ecx],eax
     fef:	dc 00                	fadd   QWORD PTR [eax]
     ff1:	00 00                	add    BYTE PTR [eax],al
     ff3:	02 00                	add    al,BYTE PTR [eax]
     ff5:	9c                   	pushf  
     ff6:	00 00                	add    BYTE PTR [eax],al
     ff8:	00 01                	add    BYTE PTR [ecx],al
     ffa:	01 fb                	add    ebx,edi
     ffc:	0e                   	push   cs
     ffd:	0d 00 01 01 01       	or     eax,0x1010100
    1002:	01 00                	add    DWORD PTR [eax],eax
    1004:	00 00                	add    BYTE PTR [eax],al
    1006:	01 00                	add    DWORD PTR [eax],eax
    1008:	00 01                	add    BYTE PTR [ecx],al
    100a:	73 72                	jae    107e <sysEnter_Vector-0x12ef82>
    100c:	63 2f                	arpl   WORD PTR [edi],bp
    100e:	73 74                	jae    1084 <sysEnter_Vector-0x12ef7c>
    1010:	72 69                	jb     107b <sysEnter_Vector-0x12ef85>
    1012:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1013:	67 73 00             	addr16 jae 1016 <sysEnter_Vector-0x12efea>
    1016:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    101d:	00 2f                	add    BYTE PTR [edi],ch
    101f:	68 6f 6d 65 2f       	push   0x2f656d6f
    1024:	79 6f                	jns    1095 <sysEnter_Vector-0x12ef6b>
    1026:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    102d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1030:	73 73                	jae    10a5 <sysEnter_Vector-0x12ef5b>
    1032:	2f                   	das    
    1033:	6c                   	ins    BYTE PTR es:[edi],dx
    1034:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    103b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1041:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1047:	78 2d                	js     1076 <sysEnter_Vector-0x12ef8a>
    1049:	67 6e                	outs   dx,BYTE PTR ds:[si]
    104b:	75 2f                	jne    107c <sysEnter_Vector-0x12ef84>
    104d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1052:	2f                   	das    
    1053:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    105a:	00 00                	add    BYTE PTR [eax],al
    105c:	73 74                	jae    10d2 <sysEnter_Vector-0x12ef2e>
    105e:	72 63                	jb     10c3 <sysEnter_Vector-0x12ef3d>
    1060:	70 79                	jo     10db <sysEnter_Vector-0x12ef25>
    1062:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1065:	01 00                	add    DWORD PTR [eax],eax
    1067:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    106a:	6c                   	ins    BYTE PTR es:[edi],dx
    106b:	6c                   	ins    BYTE PTR es:[edi],dx
    106c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    106d:	63 2e                	arpl   WORD PTR [esi],bp
    106f:	68 00 02 00 00       	push   0x200
    1074:	6c                   	ins    BYTE PTR es:[edi],dx
    1075:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    107c:	4f                   	dec    edi
    107d:	53                   	push   ebx
    107e:	2e                   	cs
    107f:	68 00 02 00 00       	push   0x200
    1084:	73 74                	jae    10fa <sysEnter_Vector-0x12ef06>
    1086:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    108d:	63 
    108e:	2e                   	cs
    108f:	68 00 03 00 00       	push   0x300
    1094:	00 00                	add    BYTE PTR [eax],al
    1096:	05 02 9c 16 00       	add    eax,0x169c02
    109b:	30 16                	xor    BYTE PTR [esi],dl
    109d:	f3 67 00 02          	repz add BYTE PTR [bp+si],al
    10a1:	04 01                	add    al,0x1
    10a3:	06                   	push   es
    10a4:	20 06                	and    BYTE PTR [esi],al
    10a6:	08 ca                	or     dl,cl
    10a8:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    10ae:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10b1:	06                   	push   es
    10b2:	20 06                	and    BYTE PTR [esi],al
    10b4:	08 ca                	or     dl,cl
    10b6:	67 3d 32 f3 67 00    	addr16 cmp eax,0x67f332
    10bc:	02 04 02             	add    al,BYTE PTR [edx+eax*1]
    10bf:	06                   	push   es
    10c0:	20 00                	and    BYTE PTR [eax],al
    10c2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    10c5:	08 c8                	or     al,cl
    10c7:	06                   	push   es
    10c8:	ca 3d 02             	retf   0x23d
    10cb:	02 00                	add    al,BYTE PTR [eax]
    10cd:	01 01                	add    DWORD PTR [ecx],eax
    10cf:	cb                   	retf   
    10d0:	00 00                	add    BYTE PTR [eax],al
    10d2:	00 02                	add    BYTE PTR [edx],al
    10d4:	00 9e 00 00 00 01    	add    BYTE PTR [esi+0x1000000],bl
    10da:	01 fb                	add    ebx,edi
    10dc:	0e                   	push   cs
    10dd:	0d 00 01 01 01       	or     eax,0x1010100
    10e2:	01 00                	add    DWORD PTR [eax],eax
    10e4:	00 00                	add    BYTE PTR [eax],al
    10e6:	01 00                	add    DWORD PTR [eax],eax
    10e8:	00 01                	add    BYTE PTR [ecx],al
    10ea:	73 72                	jae    115e <sysEnter_Vector-0x12eea2>
    10ec:	63 2f                	arpl   WORD PTR [edi],bp
    10ee:	73 74                	jae    1164 <sysEnter_Vector-0x12ee9c>
    10f0:	72 69                	jb     115b <sysEnter_Vector-0x12eea5>
    10f2:	6e                   	outs   dx,BYTE PTR ds:[esi]
    10f3:	67 73 00             	addr16 jae 10f6 <sysEnter_Vector-0x12ef0a>
    10f6:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    10fd:	00 2f                	add    BYTE PTR [edi],ch
    10ff:	68 6f 6d 65 2f       	push   0x2f656d6f
    1104:	79 6f                	jns    1175 <sysEnter_Vector-0x12ee8b>
    1106:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    110d:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1110:	73 73                	jae    1185 <sysEnter_Vector-0x12ee7b>
    1112:	2f                   	das    
    1113:	6c                   	ins    BYTE PTR es:[edi],dx
    1114:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    111b:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1121:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1127:	78 2d                	js     1156 <sysEnter_Vector-0x12eeaa>
    1129:	67 6e                	outs   dx,BYTE PTR ds:[si]
    112b:	75 2f                	jne    115c <sysEnter_Vector-0x12eea4>
    112d:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1132:	2f                   	das    
    1133:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    113a:	00 00                	add    BYTE PTR [eax],al
    113c:	73 74                	jae    11b2 <sysEnter_Vector-0x12ee4e>
    113e:	72 69                	jb     11a9 <sysEnter_Vector-0x12ee57>
    1140:	73 6e                	jae    11b0 <sysEnter_Vector-0x12ee50>
    1142:	75 6d                	jne    11b1 <sysEnter_Vector-0x12ee4f>
    1144:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1147:	01 00                	add    DWORD PTR [eax],eax
    1149:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    114c:	6c                   	ins    BYTE PTR es:[edi],dx
    114d:	6c                   	ins    BYTE PTR es:[edi],dx
    114e:	6f                   	outs   dx,DWORD PTR ds:[esi]
    114f:	63 2e                	arpl   WORD PTR [esi],bp
    1151:	68 00 02 00 00       	push   0x200
    1156:	6c                   	ins    BYTE PTR es:[edi],dx
    1157:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    115e:	4f                   	dec    edi
    115f:	53                   	push   ebx
    1160:	2e                   	cs
    1161:	68 00 02 00 00       	push   0x200
    1166:	73 74                	jae    11dc <sysEnter_Vector-0x12ee24>
    1168:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    116f:	63 
    1170:	2e                   	cs
    1171:	68 00 03 00 00       	push   0x300
    1176:	00 00                	add    BYTE PTR [eax],al
    1178:	05 02 64 17 00       	add    eax,0x176402
    117d:	30 1a                	xor    BYTE PTR [edx],bl
    117f:	08 59 00             	or     BYTE PTR [ecx+0x0],bl
    1182:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1185:	06                   	push   es
    1186:	66                   	data16
    1187:	00 02                	add    BYTE PTR [edx],al
    1189:	04 02                	add    al,0x2
    118b:	66 06                	pushw  es
    118d:	75 59                	jne    11e8 <sysEnter_Vector-0x12ee18>
    118f:	31 f3                	xor    ebx,esi
    1191:	76 2f                	jbe    11c2 <sysEnter_Vector-0x12ee3e>
    1193:	08 e5                	or     ch,ah
    1195:	72 08                	jb     119f <sysEnter_Vector-0x12ee61>
    1197:	23 5a 02             	and    ebx,DWORD PTR [edx+0x2]
    119a:	02 00                	add    al,BYTE PTR [eax]
    119c:	01 01                	add    DWORD PTR [ecx],eax
    119e:	94                   	xchg   esp,eax
    119f:	00 00                	add    BYTE PTR [eax],al
    11a1:	00 02                	add    BYTE PTR [edx],al
    11a3:	00 74 00 00          	add    BYTE PTR [eax+eax*1+0x0],dh
    11a7:	00 01                	add    BYTE PTR [ecx],al
    11a9:	01 fb                	add    ebx,edi
    11ab:	0e                   	push   cs
    11ac:	0d 00 01 01 01       	or     eax,0x1010100
    11b1:	01 00                	add    DWORD PTR [eax],eax
    11b3:	00 00                	add    BYTE PTR [eax],al
    11b5:	01 00                	add    DWORD PTR [eax],eax
    11b7:	00 01                	add    BYTE PTR [ecx],al
    11b9:	73 72                	jae    122d <sysEnter_Vector-0x12edd3>
    11bb:	63 2f                	arpl   WORD PTR [edi],bp
    11bd:	73 74                	jae    1233 <sysEnter_Vector-0x12edcd>
    11bf:	72 69                	jb     122a <sysEnter_Vector-0x12edd6>
    11c1:	6e                   	outs   dx,BYTE PTR ds:[esi]
    11c2:	67 73 00             	addr16 jae 11c5 <sysEnter_Vector-0x12ee3b>
    11c5:	2f                   	das    
    11c6:	68 6f 6d 65 2f       	push   0x2f656d6f
    11cb:	79 6f                	jns    123c <sysEnter_Vector-0x12edc4>
    11cd:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    11d4:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    11d7:	73 73                	jae    124c <sysEnter_Vector-0x12edb4>
    11d9:	2f                   	das    
    11da:	6c                   	ins    BYTE PTR es:[edi],dx
    11db:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    11e2:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    11e8:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    11ee:	78 2d                	js     121d <sysEnter_Vector-0x12ede3>
    11f0:	67 6e                	outs   dx,BYTE PTR ds:[si]
    11f2:	75 2f                	jne    1223 <sysEnter_Vector-0x12eddd>
    11f4:	35 2e 33 2e 30       	xor    eax,0x302e332e
    11f9:	2f                   	das    
    11fa:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1201:	00 00                	add    BYTE PTR [eax],al
    1203:	73 74                	jae    1279 <sysEnter_Vector-0x12ed87>
    1205:	72 6c                	jb     1273 <sysEnter_Vector-0x12ed8d>
    1207:	65 6e                	outs   dx,BYTE PTR gs:[esi]
    1209:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    120c:	01 00                	add    DWORD PTR [eax],eax
    120e:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1211:	64                   	fs
    1212:	64                   	fs
    1213:	65                   	gs
    1214:	66                   	data16
    1215:	2e                   	cs
    1216:	68 00 02 00 00       	push   0x200
    121b:	00 00                	add    BYTE PTR [eax],al
    121d:	05 02 f0 17 00       	add    eax,0x17f002
    1222:	30 14 f3             	xor    BYTE PTR [ebx+esi*8],dl
    1225:	75 2f                	jne    1256 <sysEnter_Vector-0x12edaa>
    1227:	49                   	dec    ecx
    1228:	e6 3d                	out    0x3d,al
    122a:	30 f3                	xor    bl,dh
    122c:	75 2f                	jne    125d <sysEnter_Vector-0x12eda3>
    122e:	49                   	dec    ecx
    122f:	e6 3d                	out    0x3d,al
    1231:	02 02                	add    al,BYTE PTR [edx]
    1233:	00 01                	add    BYTE PTR [ecx],al
    1235:	01 c1                	add    ecx,eax
    1237:	00 00                	add    BYTE PTR [eax],al
    1239:	00 02                	add    BYTE PTR [edx],al
    123b:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    123e:	00 00                	add    BYTE PTR [eax],al
    1240:	01 01                	add    DWORD PTR [ecx],eax
    1242:	fb                   	sti    
    1243:	0e                   	push   cs
    1244:	0d 00 01 01 01       	or     eax,0x1010100
    1249:	01 00                	add    DWORD PTR [eax],eax
    124b:	00 00                	add    BYTE PTR [eax],al
    124d:	01 00                	add    DWORD PTR [eax],eax
    124f:	00 01                	add    BYTE PTR [ecx],al
    1251:	73 72                	jae    12c5 <sysEnter_Vector-0x12ed3b>
    1253:	63 2f                	arpl   WORD PTR [edi],bp
    1255:	73 74                	jae    12cb <sysEnter_Vector-0x12ed35>
    1257:	72 69                	jb     12c2 <sysEnter_Vector-0x12ed3e>
    1259:	6e                   	outs   dx,BYTE PTR ds:[esi]
    125a:	67 73 00             	addr16 jae 125d <sysEnter_Vector-0x12eda3>
    125d:	2f                   	das    
    125e:	68 6f 6d 65 2f       	push   0x2f656d6f
    1263:	79 6f                	jns    12d4 <sysEnter_Vector-0x12ed2c>
    1265:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    126c:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    126f:	73 73                	jae    12e4 <sysEnter_Vector-0x12ed1c>
    1271:	2f                   	das    
    1272:	6c                   	ins    BYTE PTR es:[edi],dx
    1273:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    127a:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1280:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1286:	78 2d                	js     12b5 <sysEnter_Vector-0x12ed4b>
    1288:	67 6e                	outs   dx,BYTE PTR ds:[si]
    128a:	75 2f                	jne    12bb <sysEnter_Vector-0x12ed45>
    128c:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1291:	2f                   	das    
    1292:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1299:	00 00                	add    BYTE PTR [eax],al
    129b:	73 74                	jae    1311 <sysEnter_Vector-0x12ecef>
    129d:	72 6e                	jb     130d <sysEnter_Vector-0x12ecf3>
    129f:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
    12a2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    12a5:	01 00                	add    DWORD PTR [eax],eax
    12a7:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    12aa:	64                   	fs
    12ab:	64                   	fs
    12ac:	65                   	gs
    12ad:	66                   	data16
    12ae:	2e                   	cs
    12af:	68 00 02 00 00       	push   0x200
    12b4:	00 00                	add    BYTE PTR [eax],al
    12b6:	05 02 54 18 00       	add    eax,0x185402
    12bb:	30 03                	xor    BYTE PTR [ebx],al
    12bd:	0c 01                	or     al,0x1
    12bf:	c9                   	leave  
    12c0:	2f                   	das    
    12c1:	f3 00 02             	repz add BYTE PTR [edx],al
    12c4:	04 01                	add    al,0x1
    12c6:	06                   	push   es
    12c7:	f2 00 02             	repnz add BYTE PTR [edx],al
    12ca:	04 02                	add    al,0x2
    12cc:	74 06                	je     12d4 <sysEnter_Vector-0x12ed2c>
    12ce:	75 9f                	jne    126f <sysEnter_Vector-0x12ed91>
    12d0:	70 00                	jo     12d2 <sysEnter_Vector-0x12ed2e>
    12d2:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12d5:	06                   	push   es
    12d6:	ba 06 6b 59 31       	mov    edx,0x31596b06
    12db:	c9                   	leave  
    12dc:	2f                   	das    
    12dd:	f3 00 02             	repz add BYTE PTR [edx],al
    12e0:	04 01                	add    al,0x1
    12e2:	06                   	push   es
    12e3:	f2 00 02             	repnz add BYTE PTR [edx],al
    12e6:	04 02                	add    al,0x2
    12e8:	74 06                	je     12f0 <sysEnter_Vector-0x12ed10>
    12ea:	75 9f                	jne    128b <sysEnter_Vector-0x12ed75>
    12ec:	70 00                	jo     12ee <sysEnter_Vector-0x12ed12>
    12ee:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    12f1:	06                   	push   es
    12f2:	ba 06 6b 59 02       	mov    edx,0x2596b06
    12f7:	02 00                	add    al,BYTE PTR [eax]
    12f9:	01 01                	add    DWORD PTR [ecx],eax
    12fb:	a1 00 00 00 02       	mov    eax,ds:0x2000000
    1300:	00 75 00             	add    BYTE PTR [ebp+0x0],dh
    1303:	00 00                	add    BYTE PTR [eax],al
    1305:	01 01                	add    DWORD PTR [ecx],eax
    1307:	fb                   	sti    
    1308:	0e                   	push   cs
    1309:	0d 00 01 01 01       	or     eax,0x1010100
    130e:	01 00                	add    DWORD PTR [eax],eax
    1310:	00 00                	add    BYTE PTR [eax],al
    1312:	01 00                	add    DWORD PTR [eax],eax
    1314:	00 01                	add    BYTE PTR [ecx],al
    1316:	73 72                	jae    138a <sysEnter_Vector-0x12ec76>
    1318:	63 2f                	arpl   WORD PTR [edi],bp
    131a:	73 74                	jae    1390 <sysEnter_Vector-0x12ec70>
    131c:	72 69                	jb     1387 <sysEnter_Vector-0x12ec79>
    131e:	6e                   	outs   dx,BYTE PTR ds:[esi]
    131f:	67 73 00             	addr16 jae 1322 <sysEnter_Vector-0x12ecde>
    1322:	2f                   	das    
    1323:	68 6f 6d 65 2f       	push   0x2f656d6f
    1328:	79 6f                	jns    1399 <sysEnter_Vector-0x12ec67>
    132a:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1331:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1334:	73 73                	jae    13a9 <sysEnter_Vector-0x12ec57>
    1336:	2f                   	das    
    1337:	6c                   	ins    BYTE PTR es:[edi],dx
    1338:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    133f:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1345:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    134b:	78 2d                	js     137a <sysEnter_Vector-0x12ec86>
    134d:	67 6e                	outs   dx,BYTE PTR ds:[si]
    134f:	75 2f                	jne    1380 <sysEnter_Vector-0x12ec80>
    1351:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1356:	2f                   	das    
    1357:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    135e:	00 00                	add    BYTE PTR [eax],al
    1360:	73 74                	jae    13d6 <sysEnter_Vector-0x12ec2a>
    1362:	72 6e                	jb     13d2 <sysEnter_Vector-0x12ec2e>
    1364:	63 70 79             	arpl   WORD PTR [eax+0x79],si
    1367:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    136a:	01 00                	add    DWORD PTR [eax],eax
    136c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    136f:	64                   	fs
    1370:	64                   	fs
    1371:	65                   	gs
    1372:	66                   	data16
    1373:	2e                   	cs
    1374:	68 00 02 00 00       	push   0x200
    1379:	00 00                	add    BYTE PTR [eax],al
    137b:	05 02 24 19 00       	add    eax,0x192402
    1380:	30 03                	xor    BYTE PTR [ebx],al
    1382:	0d 01 f3 67 2f       	or     eax,0x2f67f301
    1387:	08 67 48             	or     BYTE PTR [edi+0x48],ah
    138a:	00 02                	add    BYTE PTR [edx],al
    138c:	04 01                	add    al,0x1
    138e:	06                   	push   es
    138f:	66 06                	pushw  es
    1391:	a2 2f bb 48 6a       	mov    ds:0x6a48bb2f,al
    1396:	3d 31 c9 08 13       	cmp    eax,0x1308c931
    139b:	02 02                	add    al,BYTE PTR [edx]
    139d:	00 01                	add    BYTE PTR [ecx],al
    139f:	01 49 01             	add    DWORD PTR [ecx+0x1],ecx
    13a2:	00 00                	add    BYTE PTR [eax],al
    13a4:	02 00                	add    al,BYTE PTR [eax]
    13a6:	9c                   	pushf  
    13a7:	00 00                	add    BYTE PTR [eax],al
    13a9:	00 01                	add    BYTE PTR [ecx],al
    13ab:	01 fb                	add    ebx,edi
    13ad:	0e                   	push   cs
    13ae:	0d 00 01 01 01       	or     eax,0x1010100
    13b3:	01 00                	add    DWORD PTR [eax],eax
    13b5:	00 00                	add    BYTE PTR [eax],al
    13b7:	01 00                	add    DWORD PTR [eax],eax
    13b9:	00 01                	add    BYTE PTR [ecx],al
    13bb:	73 72                	jae    142f <sysEnter_Vector-0x12ebd1>
    13bd:	63 2f                	arpl   WORD PTR [edi],bp
    13bf:	73 74                	jae    1435 <sysEnter_Vector-0x12ebcb>
    13c1:	72 69                	jb     142c <sysEnter_Vector-0x12ebd4>
    13c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
    13c4:	67 73 00             	addr16 jae 13c7 <sysEnter_Vector-0x12ec39>
    13c7:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    13ce:	00 2f                	add    BYTE PTR [edi],ch
    13d0:	68 6f 6d 65 2f       	push   0x2f656d6f
    13d5:	79 6f                	jns    1446 <sysEnter_Vector-0x12ebba>
    13d7:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    13de:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    13e1:	73 73                	jae    1456 <sysEnter_Vector-0x12ebaa>
    13e3:	2f                   	das    
    13e4:	6c                   	ins    BYTE PTR es:[edi],dx
    13e5:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    13ec:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    13f2:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    13f8:	78 2d                	js     1427 <sysEnter_Vector-0x12ebd9>
    13fa:	67 6e                	outs   dx,BYTE PTR ds:[si]
    13fc:	75 2f                	jne    142d <sysEnter_Vector-0x12ebd3>
    13fe:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1403:	2f                   	das    
    1404:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    140b:	00 00                	add    BYTE PTR [eax],al
    140d:	73 74                	jae    1483 <sysEnter_Vector-0x12eb7d>
    140f:	72 6f                	jb     1480 <sysEnter_Vector-0x12eb80>
    1411:	75 6c                	jne    147f <sysEnter_Vector-0x12eb81>
    1413:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1416:	01 00                	add    DWORD PTR [eax],eax
    1418:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    141b:	6c                   	ins    BYTE PTR es:[edi],dx
    141c:	6c                   	ins    BYTE PTR es:[edi],dx
    141d:	6f                   	outs   dx,DWORD PTR ds:[esi]
    141e:	63 2e                	arpl   WORD PTR [esi],bp
    1420:	68 00 02 00 00       	push   0x200
    1425:	6c                   	ins    BYTE PTR es:[edi],dx
    1426:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    142d:	4f                   	dec    edi
    142e:	53                   	push   ebx
    142f:	2e                   	cs
    1430:	68 00 02 00 00       	push   0x200
    1435:	73 74                	jae    14ab <sysEnter_Vector-0x12eb55>
    1437:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    143e:	63 
    143f:	2e                   	cs
    1440:	68 00 03 00 00       	push   0x300
    1445:	00 00                	add    BYTE PTR [eax],al
    1447:	05 02 a4 19 00       	add    eax,0x19a402
    144c:	30 03                	xor    BYTE PTR [ebx],al
    144e:	3b 01                	cmp    eax,DWORD PTR [ecx]
    1450:	08 2f                	or     BYTE PTR [edi],ch
    1452:	40                   	inc    eax
    1453:	00 02                	add    BYTE PTR [edx],al
    1455:	04 01                	add    al,0x1
    1457:	7a 00                	jp     1459 <sysEnter_Vector-0x12eba7>
    1459:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    145c:	ad                   	lods   eax,DWORD PTR ds:[esi]
    145d:	59                   	pop    ecx
    145e:	59                   	pop    ecx
    145f:	75 c9                	jne    142a <sysEnter_Vector-0x12ebd6>
    1461:	59                   	pop    ecx
    1462:	ad                   	lods   eax,DWORD PTR ds:[esi]
    1463:	00 02                	add    BYTE PTR [edx],al
    1465:	04 02                	add    al,0x2
    1467:	06                   	push   es
    1468:	66                   	data16
    1469:	00 02                	add    BYTE PTR [edx],al
    146b:	04 03                	add    al,0x3
    146d:	66 06                	pushw  es
    146f:	59                   	pop    ecx
    1470:	00 02                	add    BYTE PTR [edx],al
    1472:	04 01                	add    al,0x1
    1474:	06                   	push   es
    1475:	74 06                	je     147d <sysEnter_Vector-0x12eb83>
    1477:	75 91                	jne    140a <sysEnter_Vector-0x12ebf6>
    1479:	3d 76 67 00 02       	cmp    eax,0x2006776
    147e:	04 01                	add    al,0x1
    1480:	06                   	push   es
    1481:	58                   	pop    eax
    1482:	00 02                	add    BYTE PTR [edx],al
    1484:	04 02                	add    al,0x2
    1486:	74 00                	je     1488 <sysEnter_Vector-0x12eb78>
    1488:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    148b:	58                   	pop    eax
    148c:	06                   	push   es
    148d:	3d 08 21 08 2f       	cmp    eax,0x2f082108
    1492:	9f                   	lahf   
    1493:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1497:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    149a:	06                   	push   es
    149b:	58                   	pop    eax
    149c:	00 02                	add    BYTE PTR [edx],al
    149e:	04 03                	add    al,0x3
    14a0:	58                   	pop    eax
    14a1:	00 02                	add    BYTE PTR [edx],al
    14a3:	04 04                	add    al,0x4
    14a5:	74 00                	je     14a7 <sysEnter_Vector-0x12eb59>
    14a7:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    14aa:	58                   	pop    eax
    14ab:	06                   	push   es
    14ac:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    14af:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    14b2:	06                   	push   es
    14b3:	66                   	data16
    14b4:	00 02                	add    BYTE PTR [edx],al
    14b6:	04 02                	add    al,0x2
    14b8:	58                   	pop    eax
    14b9:	00 02                	add    BYTE PTR [edx],al
    14bb:	04 03                	add    al,0x3
    14bd:	58                   	pop    eax
    14be:	06                   	push   es
    14bf:	67 76 59             	addr16 jbe 151b <sysEnter_Vector-0x12eae5>
    14c2:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    14c6:	03 10                	add    edx,DWORD PTR [eax]
    14c8:	ac                   	lods   al,BYTE PTR ds:[esi]
    14c9:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    14cc:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    14cf:	20 67 75             	and    BYTE PTR [edi+0x75],ah
    14d2:	67 2f                	addr16 das 
    14d4:	67 00 02             	add    BYTE PTR [bp+si],al
    14d7:	04 01                	add    al,0x1
    14d9:	06                   	push   es
    14da:	66                   	data16
    14db:	00 02                	add    BYTE PTR [edx],al
    14dd:	04 02                	add    al,0x2
    14df:	58                   	pop    eax
    14e0:	00 02                	add    BYTE PTR [edx],al
    14e2:	04 04                	add    al,0x4
    14e4:	3c 06                	cmp    al,0x6
    14e6:	59                   	pop    ecx
    14e7:	2f                   	das    
    14e8:	02 08                	add    cl,BYTE PTR [eax]
    14ea:	00 01                	add    BYTE PTR [ecx],al
    14ec:	01 43 00             	add    DWORD PTR [ebx+0x0],eax
    14ef:	00 00                	add    BYTE PTR [eax],al
    14f1:	02 00                	add    al,BYTE PTR [eax]
    14f3:	2d 00 00 00 01       	sub    eax,0x1000000
    14f8:	01 fb                	add    ebx,edi
    14fa:	0e                   	push   cs
    14fb:	0d 00 01 01 01       	or     eax,0x1010100
    1500:	01 00                	add    DWORD PTR [eax],eax
    1502:	00 00                	add    BYTE PTR [eax],al
    1504:	01 00                	add    DWORD PTR [eax],eax
    1506:	00 01                	add    BYTE PTR [ecx],al
    1508:	73 72                	jae    157c <sysEnter_Vector-0x12ea84>
    150a:	63 2f                	arpl   WORD PTR [edi],bp
    150c:	73 74                	jae    1582 <sysEnter_Vector-0x12ea7e>
    150e:	72 69                	jb     1579 <sysEnter_Vector-0x12ea87>
    1510:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1511:	67 73 00             	addr16 jae 1514 <sysEnter_Vector-0x12eaec>
    1514:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    1517:	72 70                	jb     1589 <sysEnter_Vector-0x12ea77>
    1519:	61                   	popa   
    151a:	72 74                	jb     1590 <sysEnter_Vector-0x12ea70>
    151c:	73 2e                	jae    154c <sysEnter_Vector-0x12eab4>
    151e:	63 00                	arpl   WORD PTR [eax],ax
    1520:	01 00                	add    DWORD PTR [eax],eax
    1522:	00 00                	add    BYTE PTR [eax],al
    1524:	00 05 02 24 1b 00    	add    BYTE PTR ds:0x1b2402,al
    152a:	30 13                	xor    BYTE PTR [ebx],dl
    152c:	c9                   	leave  
    152d:	ad                   	lods   eax,DWORD PTR ds:[esi]
    152e:	3d 02 02 00 01       	cmp    eax,0x1000202
    1533:	01 75 01             	add    DWORD PTR [ebp+0x1],esi
    1536:	00 00                	add    BYTE PTR [eax],al
    1538:	02 00                	add    al,BYTE PTR [eax]
    153a:	9c                   	pushf  
    153b:	00 00                	add    BYTE PTR [eax],al
    153d:	00 01                	add    BYTE PTR [ecx],al
    153f:	01 fb                	add    ebx,edi
    1541:	0e                   	push   cs
    1542:	0d 00 01 01 01       	or     eax,0x1010100
    1547:	01 00                	add    DWORD PTR [eax],eax
    1549:	00 00                	add    BYTE PTR [eax],al
    154b:	01 00                	add    DWORD PTR [eax],eax
    154d:	00 01                	add    BYTE PTR [ecx],al
    154f:	73 72                	jae    15c3 <sysEnter_Vector-0x12ea3d>
    1551:	63 2f                	arpl   WORD PTR [edi],bp
    1553:	73 74                	jae    15c9 <sysEnter_Vector-0x12ea37>
    1555:	72 69                	jb     15c0 <sysEnter_Vector-0x12ea40>
    1557:	6e                   	outs   dx,BYTE PTR ds:[esi]
    1558:	67 73 00             	addr16 jae 155b <sysEnter_Vector-0x12eaa5>
    155b:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1562:	00 2f                	add    BYTE PTR [edi],ch
    1564:	68 6f 6d 65 2f       	push   0x2f656d6f
    1569:	79 6f                	jns    15da <sysEnter_Vector-0x12ea26>
    156b:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1572:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    1575:	73 73                	jae    15ea <sysEnter_Vector-0x12ea16>
    1577:	2f                   	das    
    1578:	6c                   	ins    BYTE PTR es:[edi],dx
    1579:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1580:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    1586:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    158c:	78 2d                	js     15bb <sysEnter_Vector-0x12ea45>
    158e:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1590:	75 2f                	jne    15c1 <sysEnter_Vector-0x12ea3f>
    1592:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1597:	2f                   	das    
    1598:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    159f:	00 00                	add    BYTE PTR [eax],al
    15a1:	73 74                	jae    1617 <sysEnter_Vector-0x12e9e9>
    15a3:	72 74                	jb     1619 <sysEnter_Vector-0x12e9e7>
    15a5:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15a6:	6c                   	ins    BYTE PTR es:[edi],dx
    15a7:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    15aa:	01 00                	add    DWORD PTR [eax],eax
    15ac:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    15af:	6c                   	ins    BYTE PTR es:[edi],dx
    15b0:	6c                   	ins    BYTE PTR es:[edi],dx
    15b1:	6f                   	outs   dx,DWORD PTR ds:[esi]
    15b2:	63 2e                	arpl   WORD PTR [esi],bp
    15b4:	68 00 02 00 00       	push   0x200
    15b9:	6c                   	ins    BYTE PTR es:[edi],dx
    15ba:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    15c1:	4f                   	dec    edi
    15c2:	53                   	push   ebx
    15c3:	2e                   	cs
    15c4:	68 00 02 00 00       	push   0x200
    15c9:	73 74                	jae    163f <sysEnter_Vector-0x12e9c1>
    15cb:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    15d2:	63 
    15d3:	2e                   	cs
    15d4:	68 00 03 00 00       	push   0x300
    15d9:	00 00                	add    BYTE PTR [eax],al
    15db:	05 02 44 1b 00       	add    eax,0x1b4402
    15e0:	30 03                	xor    BYTE PTR [ebx],al
    15e2:	d7                   	xlat   BYTE PTR ds:[ebx]
    15e3:	00 01                	add    BYTE PTR [ecx],al
    15e5:	08 2f                	or     BYTE PTR [edi],ch
    15e7:	40                   	inc    eax
    15e8:	00 02                	add    BYTE PTR [edx],al
    15ea:	04 01                	add    al,0x1
    15ec:	7c 00                	jl     15ee <sysEnter_Vector-0x12ea12>
    15ee:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    15f1:	ad                   	lods   eax,DWORD PTR ds:[esi]
    15f2:	59                   	pop    ecx
    15f3:	59                   	pop    ecx
    15f4:	75 c9                	jne    15bf <sysEnter_Vector-0x12ea41>
    15f6:	59                   	pop    ecx
    15f7:	ad                   	lods   eax,DWORD PTR ds:[esi]
    15f8:	00 02                	add    BYTE PTR [edx],al
    15fa:	04 02                	add    al,0x2
    15fc:	06                   	push   es
    15fd:	66                   	data16
    15fe:	00 02                	add    BYTE PTR [edx],al
    1600:	04 03                	add    al,0x3
    1602:	66 06                	pushw  es
    1604:	59                   	pop    ecx
    1605:	00 02                	add    BYTE PTR [edx],al
    1607:	04 01                	add    al,0x1
    1609:	06                   	push   es
    160a:	74 06                	je     1612 <sysEnter_Vector-0x12e9ee>
    160c:	75 91                	jne    159f <sysEnter_Vector-0x12ea61>
    160e:	3d 76 67 00 02       	cmp    eax,0x2006776
    1613:	04 01                	add    al,0x1
    1615:	06                   	push   es
    1616:	58                   	pop    eax
    1617:	00 02                	add    BYTE PTR [edx],al
    1619:	04 02                	add    al,0x2
    161b:	74 00                	je     161d <sysEnter_Vector-0x12e9e3>
    161d:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1620:	58                   	pop    eax
    1621:	06                   	push   es
    1622:	03 13                	add    edx,DWORD PTR [ebx]
    1624:	3c 00                	cmp    al,0x0
    1626:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1629:	06                   	push   es
    162a:	66                   	data16
    162b:	00 02                	add    BYTE PTR [edx],al
    162d:	04 02                	add    al,0x2
    162f:	74 00                	je     1631 <sysEnter_Vector-0x12e9cf>
    1631:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1634:	06                   	push   es
    1635:	59                   	pop    ecx
    1636:	00 02                	add    BYTE PTR [edx],al
    1638:	04 04                	add    al,0x4
    163a:	08 3d 00 02 04 04    	or     BYTE PTR ds:0x4040200,bh
    1640:	f3 9f                	repz lahf 
    1642:	83 59 c9 00          	sbb    DWORD PTR [ecx-0x37],0x0
    1646:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1649:	06                   	push   es
    164a:	58                   	pop    eax
    164b:	00 02                	add    BYTE PTR [edx],al
    164d:	04 03                	add    al,0x3
    164f:	58                   	pop    eax
    1650:	00 02                	add    BYTE PTR [edx],al
    1652:	04 04                	add    al,0x4
    1654:	74 00                	je     1656 <sysEnter_Vector-0x12e9aa>
    1656:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1659:	58                   	pop    eax
    165a:	06                   	push   es
    165b:	31 5a 00             	xor    DWORD PTR [edx+0x0],ebx
    165e:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1661:	06                   	push   es
    1662:	66                   	data16
    1663:	00 02                	add    BYTE PTR [edx],al
    1665:	04 02                	add    al,0x2
    1667:	58                   	pop    eax
    1668:	00 02                	add    BYTE PTR [edx],al
    166a:	04 03                	add    al,0x3
    166c:	58                   	pop    eax
    166d:	06                   	push   es
    166e:	59                   	pop    ecx
    166f:	76 59                	jbe    16ca <sysEnter_Vector-0x12e936>
    1671:	67 03 72 4a          	add    esi,DWORD PTR [bp+si+0x4a]
    1675:	03 10                	add    edx,DWORD PTR [eax]
    1677:	ac                   	lods   al,BYTE PTR ds:[esi]
    1678:	03 76 2e             	add    esi,DWORD PTR [esi+0x2e]
    167b:	3e 03 09             	add    ecx,DWORD PTR ds:[ecx]
    167e:	20 67 00             	and    BYTE PTR [edi+0x0],ah
    1681:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1684:	06                   	push   es
    1685:	66                   	data16
    1686:	00 02                	add    BYTE PTR [edx],al
    1688:	04 02                	add    al,0x2
    168a:	74 00                	je     168c <sysEnter_Vector-0x12e974>
    168c:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    168f:	58                   	pop    eax
    1690:	06                   	push   es
    1691:	4b                   	dec    ebx
    1692:	67 2f                	addr16 das 
    1694:	67 00 02             	add    BYTE PTR [bp+si],al
    1697:	04 01                	add    al,0x1
    1699:	06                   	push   es
    169a:	66                   	data16
    169b:	00 02                	add    BYTE PTR [edx],al
    169d:	04 02                	add    al,0x2
    169f:	58                   	pop    eax
    16a0:	00 02                	add    BYTE PTR [edx],al
    16a2:	04 04                	add    al,0x4
    16a4:	3c 06                	cmp    al,0x6
    16a6:	59                   	pop    ecx
    16a7:	2f                   	das    
    16a8:	02 08                	add    cl,BYTE PTR [eax]
    16aa:	00 01                	add    BYTE PTR [ecx],al
    16ac:	01 cf                	add    edi,ecx
    16ae:	00 00                	add    BYTE PTR [eax],al
    16b0:	00 02                	add    BYTE PTR [edx],al
    16b2:	00 9d 00 00 00 01    	add    BYTE PTR [ebp+0x1000000],bl
    16b8:	01 fb                	add    ebx,edi
    16ba:	0e                   	push   cs
    16bb:	0d 00 01 01 01       	or     eax,0x1010100
    16c0:	01 00                	add    DWORD PTR [eax],eax
    16c2:	00 00                	add    BYTE PTR [eax],al
    16c4:	01 00                	add    DWORD PTR [eax],eax
    16c6:	00 01                	add    BYTE PTR [ecx],al
    16c8:	73 72                	jae    173c <sysEnter_Vector-0x12e8c4>
    16ca:	63 2f                	arpl   WORD PTR [edi],bp
    16cc:	73 74                	jae    1742 <sysEnter_Vector-0x12e8be>
    16ce:	72 69                	jb     1739 <sysEnter_Vector-0x12e8c7>
    16d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
    16d1:	67 73 00             	addr16 jae 16d4 <sysEnter_Vector-0x12e92c>
    16d4:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    16db:	00 2f                	add    BYTE PTR [edi],ch
    16dd:	68 6f 6d 65 2f       	push   0x2f656d6f
    16e2:	79 6f                	jns    1753 <sysEnter_Vector-0x12e8ad>
    16e4:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    16eb:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    16ee:	73 73                	jae    1763 <sysEnter_Vector-0x12e89d>
    16f0:	2f                   	das    
    16f1:	6c                   	ins    BYTE PTR es:[edi],dx
    16f2:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    16f9:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    16ff:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1705:	78 2d                	js     1734 <sysEnter_Vector-0x12e8cc>
    1707:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1709:	75 2f                	jne    173a <sysEnter_Vector-0x12e8c6>
    170b:	35 2e 33 2e 30       	xor    eax,0x302e332e
    1710:	2f                   	das    
    1711:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    1718:	00 00                	add    BYTE PTR [eax],al
    171a:	73 74                	jae    1790 <sysEnter_Vector-0x12e870>
    171c:	72 74                	jb     1792 <sysEnter_Vector-0x12e86e>
    171e:	72 69                	jb     1789 <sysEnter_Vector-0x12e877>
    1720:	6d                   	ins    DWORD PTR es:[edi],dx
    1721:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    1724:	01 00                	add    DWORD PTR [eax],eax
    1726:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    1729:	6c                   	ins    BYTE PTR es:[edi],dx
    172a:	6c                   	ins    BYTE PTR es:[edi],dx
    172b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    172c:	63 2e                	arpl   WORD PTR [esi],bp
    172e:	68 00 02 00 00       	push   0x200
    1733:	6c                   	ins    BYTE PTR es:[edi],dx
    1734:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    173b:	4f                   	dec    edi
    173c:	53                   	push   ebx
    173d:	2e                   	cs
    173e:	68 00 02 00 00       	push   0x200
    1743:	73 74                	jae    17b9 <sysEnter_Vector-0x12e847>
    1745:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    174c:	63 
    174d:	2e                   	cs
    174e:	68 00 03 00 00       	push   0x300
    1753:	00 00                	add    BYTE PTR [eax],al
    1755:	05 02 e0 1c 00       	add    eax,0x1ce002
    175a:	30 15 08 13 bf 30    	xor    BYTE PTR ds:0x30bf1308,dl
    1760:	48                   	dec    eax
    1761:	b3 08                	mov    bl,0x8
    1763:	9f                   	lahf   
    1764:	30 b8 00 02 04 01    	xor    BYTE PTR [eax+0x1040200],bh
    176a:	06                   	push   es
    176b:	82                   	(bad)  
    176c:	06                   	push   es
    176d:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    176e:	84 00                	test   BYTE PTR [eax],al
    1770:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1773:	06                   	push   es
    1774:	20 06                	and    BYTE PTR [esi],al
    1776:	08 ca                	or     dl,cl
    1778:	69 f3 d7 02 02 00    	imul   esi,ebx,0x202d7
    177e:	01 01                	add    DWORD PTR [ecx],eax
    1780:	c7 00 00 00 02 00    	mov    DWORD PTR [eax],0x20000
    1786:	94                   	xchg   esp,eax
    1787:	00 00                	add    BYTE PTR [eax],al
    1789:	00 01                	add    BYTE PTR [ecx],al
    178b:	01 fb                	add    ebx,edi
    178d:	0e                   	push   cs
    178e:	0d 00 01 01 01       	or     eax,0x1010100
    1793:	01 00                	add    DWORD PTR [eax],eax
    1795:	00 00                	add    BYTE PTR [eax],al
    1797:	01 00                	add    DWORD PTR [eax],eax
    1799:	00 01                	add    BYTE PTR [ecx],al
    179b:	73 72                	jae    180f <sysEnter_Vector-0x12e7f1>
    179d:	63 00                	arpl   WORD PTR [eax],ax
    179f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17a6:	00 2f                	add    BYTE PTR [edi],ch
    17a8:	68 6f 6d 65 2f       	push   0x2f656d6f
    17ad:	79 6f                	jns    181e <sysEnter_Vector-0x12e7e2>
    17af:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    17b6:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    17b9:	73 73                	jae    182e <sysEnter_Vector-0x12e7d2>
    17bb:	2f                   	das    
    17bc:	6c                   	ins    BYTE PTR es:[edi],dx
    17bd:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    17c4:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    17ca:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    17d0:	78 2d                	js     17ff <sysEnter_Vector-0x12e801>
    17d2:	67 6e                	outs   dx,BYTE PTR ds:[si]
    17d4:	75 2f                	jne    1805 <sysEnter_Vector-0x12e7fb>
    17d6:	35 2e 33 2e 30       	xor    eax,0x302e332e
    17db:	2f                   	das    
    17dc:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    17e3:	00 00                	add    BYTE PTR [eax],al
    17e5:	73 74                	jae    185b <sysEnter_Vector-0x12e7a5>
    17e7:	72 73                	jb     185c <sysEnter_Vector-0x12e7a4>
    17e9:	74 72                	je     185d <sysEnter_Vector-0x12e7a3>
    17eb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
    17ee:	01 00                	add    DWORD PTR [eax],eax
    17f0:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
    17f3:	6c                   	ins    BYTE PTR es:[edi],dx
    17f4:	6c                   	ins    BYTE PTR es:[edi],dx
    17f5:	6f                   	outs   dx,DWORD PTR ds:[esi]
    17f6:	63 2e                	arpl   WORD PTR [esi],bp
    17f8:	68 00 02 00 00       	push   0x200
    17fd:	6c                   	ins    BYTE PTR es:[edi],dx
    17fe:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    1805:	4f                   	dec    edi
    1806:	53                   	push   ebx
    1807:	2e                   	cs
    1808:	68 00 02 00 00       	push   0x200
    180d:	73 74                	jae    1883 <sysEnter_Vector-0x12e77d>
    180f:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    1816:	63 
    1817:	2e                   	cs
    1818:	68 00 03 00 00       	push   0x300
    181d:	00 00                	add    BYTE PTR [eax],al
    181f:	05 02 98 1d 00       	add    eax,0x1d9802
    1824:	30 03                	xor    BYTE PTR [ebx],al
    1826:	33 01                	xor    eax,DWORD PTR [ecx]
    1828:	ec                   	in     al,dx
    1829:	3d 75 5b cb 3e       	cmp    eax,0x3ecb5b75
    182e:	75 5a                	jne    188a <sysEnter_Vector-0x12e776>
    1830:	08 3f                	or     BYTE PTR [edi],bh
    1832:	2c 23                	sub    al,0x23
    1834:	03 75 58             	add    esi,DWORD PTR [ebp+0x58]
    1837:	1e                   	push   ds
    1838:	00 02                	add    BYTE PTR [edx],al
    183a:	04 01                	add    al,0x1
    183c:	06                   	push   es
    183d:	4a                   	dec    edx
    183e:	06                   	push   es
    183f:	03 0f                	add    ecx,DWORD PTR [edi]
    1841:	9e                   	sahf   
    1842:	59                   	pop    ecx
    1843:	4d                   	dec    ebp
    1844:	c9                   	leave  
    1845:	d7                   	xlat   BYTE PTR ds:[ebx]
    1846:	02 02                	add    al,BYTE PTR [edx]
    1848:	00 01                	add    BYTE PTR [ecx],al
    184a:	01 30                	add    DWORD PTR [eax],esi
    184c:	03 00                	add    eax,DWORD PTR [eax]
    184e:	00 02                	add    BYTE PTR [edx],al
    1850:	00 cc                	add    ah,cl
    1852:	00 00                	add    BYTE PTR [eax],al
    1854:	00 01                	add    BYTE PTR [ecx],al
    1856:	01 fb                	add    ebx,edi
    1858:	0e                   	push   cs
    1859:	0d 00 01 01 01       	or     eax,0x1010100
    185e:	01 00                	add    DWORD PTR [eax],eax
    1860:	00 00                	add    BYTE PTR [eax],al
    1862:	01 00                	add    DWORD PTR [eax],eax
    1864:	00 01                	add    BYTE PTR [ecx],al
    1866:	73 72                	jae    18da <sysEnter_Vector-0x12e726>
    1868:	63 00                	arpl   WORD PTR [eax],ax
    186a:	2f                   	das    
    186b:	68 6f 6d 65 2f       	push   0x2f656d6f
    1870:	79 6f                	jns    18e1 <sysEnter_Vector-0x12e71f>
    1872:	67 69 2f 6f 70 74 2f 	imul   ebp,DWORD PTR [bx],0x2f74706f
    1879:	63 72 6f             	arpl   WORD PTR [edx+0x6f],si
    187c:	73 73                	jae    18f1 <sysEnter_Vector-0x12e70f>
    187e:	2f                   	das    
    187f:	6c                   	ins    BYTE PTR es:[edi],dx
    1880:	69 62 2f 67 63 63 2f 	imul   esp,DWORD PTR [edx+0x2f],0x2f636367
    1887:	69 36 38 36 2d 70    	imul   esi,DWORD PTR [esi],0x702d3638
    188d:	63 2d 6c 69 6e 75    	arpl   WORD PTR ds:0x756e696c,bp
    1893:	78 2d                	js     18c2 <sysEnter_Vector-0x12e73e>
    1895:	67 6e                	outs   dx,BYTE PTR ds:[si]
    1897:	75 2f                	jne    18c8 <sysEnter_Vector-0x12e738>
    1899:	35 2e 33 2e 30       	xor    eax,0x302e332e
    189e:	2f                   	das    
    189f:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    18a6:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
    18a9:	63 6c 75 64          	arpl   WORD PTR [ebp+esi*2+0x64],bp
    18ad:	65 00 2e             	add    BYTE PTR gs:[esi],ch
    18b0:	2e                   	cs
    18b1:	2f                   	das    
    18b2:	2e                   	cs
    18b3:	2e                   	cs
    18b4:	2f                   	das    
    18b5:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
    18b9:	6a 2f                	push   0x2f
    18bb:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
    18be:	69 73 4f 53 4b 65 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72654b53
    18c5:	6e                   	outs   dx,BYTE PTR ds:[esi]
    18c6:	65                   	gs
    18c7:	6c                   	ins    BYTE PTR es:[edi],dx
    18c8:	2f                   	das    
    18c9:	69 6e 63 6c 75 64 65 	imul   ebp,DWORD PTR [esi+0x63],0x6564756c
    18d0:	00 00                	add    BYTE PTR [eax],al
    18d2:	74 69                	je     193d <sysEnter_Vector-0x12e6c3>
    18d4:	6d                   	ins    DWORD PTR es:[edi],dx
    18d5:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
    18d9:	01 00                	add    DWORD PTR [eax],eax
    18db:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
    18de:	64 69 6e 74 2d 67 63 	imul   ebp,DWORD PTR fs:[esi+0x74],0x6363672d
    18e5:	63 
    18e6:	2e                   	cs
    18e7:	68 00 02 00 00       	push   0x200
    18ec:	74 69                	je     1957 <sysEnter_Vector-0x12e6a9>
    18ee:	6d                   	ins    DWORD PTR es:[edi],dx
    18ef:	65                   	gs
    18f0:	2e                   	cs
    18f1:	68 00 03 00 00       	push   0x300
    18f6:	6d                   	ins    DWORD PTR es:[edi],dx
    18f7:	61                   	popa   
    18f8:	6c                   	ins    BYTE PTR es:[edi],dx
    18f9:	6c                   	ins    BYTE PTR es:[edi],dx
    18fa:	6f                   	outs   dx,DWORD PTR ds:[esi]
    18fb:	63 2e                	arpl   WORD PTR [esi],bp
    18fd:	68 00 03 00 00       	push   0x300
    1902:	6c                   	ins    BYTE PTR es:[edi],dx
    1903:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
    190a:	4f                   	dec    edi
    190b:	53                   	push   ebx
    190c:	2e                   	cs
    190d:	68 00 03 00 00       	push   0x300
    1912:	73 79                	jae    198d <sysEnter_Vector-0x12e673>
    1914:	73 63                	jae    1979 <sysEnter_Vector-0x12e687>
    1916:	61                   	popa   
    1917:	6c                   	ins    BYTE PTR es:[edi],dx
    1918:	6c                   	ins    BYTE PTR es:[edi],dx
    1919:	73 2e                	jae    1949 <sysEnter_Vector-0x12e6b7>
    191b:	68 00 04 00 00       	push   0x400
    1920:	00 00                	add    BYTE PTR [eax],al
    1922:	05 02 24 1e 00       	add    eax,0x1e2402
    1927:	30 03                	xor    BYTE PTR [ebx],al
    1929:	16                   	push   ss
    192a:	01 08                	add    DWORD PTR [eax],ecx
    192c:	21 75 08             	and    DWORD PTR [ebp+0x8],esi
    192f:	f3 3d 78 08 21 84    	repz cmp eax,0x84210878
    1935:	76 02                	jbe    1939 <sysEnter_Vector-0x12e6c7>
    1937:	24 13                	and    al,0x13
    1939:	08 22                	or     BYTE PTR [edx],ah
    193b:	02 2e                	add    ch,BYTE PTR [esi]
    193d:	13 02                	adc    eax,DWORD PTR [edx]
    193f:	2f                   	das    
    1940:	13 08                	adc    ecx,DWORD PTR [eax]
    1942:	67 02 2d             	add    ch,BYTE PTR [di]
    1945:	13 2f                	adc    ebp,DWORD PTR [edi]
    1947:	00 02                	add    BYTE PTR [edx],al
    1949:	04 01                	add    al,0x1
    194b:	06                   	push   es
    194c:	9e                   	sahf   
    194d:	00 02                	add    BYTE PTR [edx],al
    194f:	04 04                	add    al,0x4
    1951:	02 23                	add    ah,BYTE PTR [ebx]
    1953:	12 00                	adc    al,BYTE PTR [eax]
    1955:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    195c:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    195f:	74 00                	je     1961 <sysEnter_Vector-0x12e69f>
    1961:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1964:	58                   	pop    eax
    1965:	00 02                	add    BYTE PTR [edx],al
    1967:	04 08                	add    al,0x8
    1969:	06                   	push   es
    196a:	3d 48 00 02 04       	cmp    eax,0x4020048
    196f:	01 06                	add    DWORD PTR [esi],eax
    1971:	9e                   	sahf   
    1972:	00 02                	add    BYTE PTR [edx],al
    1974:	04 04                	add    al,0x4
    1976:	02 23                	add    ah,BYTE PTR [ebx]
    1978:	12 00                	adc    al,BYTE PTR [eax]
    197a:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1981:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1984:	74 00                	je     1986 <sysEnter_Vector-0x12e67a>
    1986:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1989:	58                   	pop    eax
    198a:	06                   	push   es
    198b:	94                   	xchg   esp,eax
    198c:	e5 91                	in     eax,0x91
    198e:	9f                   	lahf   
    198f:	59                   	pop    ecx
    1990:	00 02                	add    BYTE PTR [edx],al
    1992:	04 01                	add    al,0x1
    1994:	06                   	push   es
    1995:	9e                   	sahf   
    1996:	00 02                	add    BYTE PTR [edx],al
    1998:	04 04                	add    al,0x4
    199a:	02 23                	add    ah,BYTE PTR [ebx]
    199c:	12 00                	adc    al,BYTE PTR [eax]
    199e:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19a5:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19a8:	74 00                	je     19aa <sysEnter_Vector-0x12e656>
    19aa:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19ad:	58                   	pop    eax
    19ae:	00 02                	add    BYTE PTR [edx],al
    19b0:	04 08                	add    al,0x8
    19b2:	06                   	push   es
    19b3:	08 9f e2 00 02 04    	or     BYTE PTR [edi+0x40200e2],bl
    19b9:	01 06                	add    DWORD PTR [esi],eax
    19bb:	9e                   	sahf   
    19bc:	00 02                	add    BYTE PTR [edx],al
    19be:	04 04                	add    al,0x4
    19c0:	02 23                	add    ah,BYTE PTR [ebx]
    19c2:	12 00                	adc    al,BYTE PTR [eax]
    19c4:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    19cb:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    19ce:	74 00                	je     19d0 <sysEnter_Vector-0x12e630>
    19d0:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    19d3:	58                   	pop    eax
    19d4:	06                   	push   es
    19d5:	08 f6                	or     dh,dh
    19d7:	d7                   	xlat   BYTE PTR ds:[ebx]
    19d8:	9f                   	lahf   
    19d9:	3d 69 c9 d7 30       	cmp    eax,0x30d7c969
    19de:	08 16                	or     BYTE PTR [esi],dl
    19e0:	08 59 08             	or     BYTE PTR [ecx+0x8],bl
    19e3:	4b                   	dec    ebx
    19e4:	5b                   	pop    ebx
    19e5:	f5                   	cmc    
    19e6:	08 3d e5 30 c9 d7    	or     BYTE PTR ds:0xd7c930e5,bh
    19ec:	30 08                	xor    BYTE PTR [eax],cl
    19ee:	44                   	inc    esp
    19ef:	02 2e                	add    ch,BYTE PTR [esi]
    19f1:	13 02                	adc    eax,DWORD PTR [edx]
    19f3:	3a 13                	cmp    dl,BYTE PTR [ebx]
    19f5:	91                   	xchg   ecx,eax
    19f6:	c9                   	leave  
    19f7:	e6 02                	out    0x2,al
    19f9:	2f                   	das    
    19fa:	13 02                	adc    eax,DWORD PTR [edx]
    19fc:	3c 13                	cmp    al,0x13
    19fe:	9f                   	lahf   
    19ff:	e5 e6                	in     eax,0xe6
    1a01:	08 c9                	or     cl,cl
    1a03:	02 2c 13             	add    ch,BYTE PTR [ebx+edx*1]
    1a06:	9f                   	lahf   
    1a07:	e5 4c                	in     eax,0x4c
    1a09:	02 29                	add    ch,BYTE PTR [ecx]
    1a0b:	13 02                	adc    eax,DWORD PTR [edx]
    1a0d:	2b 13                	sub    edx,DWORD PTR [ebx]
    1a0f:	9f                   	lahf   
    1a10:	e5 e6                	in     eax,0xe6
    1a12:	bb 59 08 83 e5       	mov    ebx,0xe5830859
    1a17:	a0 00 02 04 01       	mov    al,ds:0x1040200
    1a1c:	06                   	push   es
    1a1d:	c8 00 02 04          	enter  0x200,0x4
    1a21:	04 02                	add    al,0x2
    1a23:	2c 12                	sub    al,0x12
    1a25:	00 02                	add    BYTE PTR [edx],al
    1a27:	04 05                	add    al,0x5
    1a29:	02 2f                	add    ch,BYTE PTR [edi]
    1a2b:	12 00                	adc    al,BYTE PTR [eax]
    1a2d:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a30:	74 00                	je     1a32 <sysEnter_Vector-0x12e5ce>
    1a32:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a35:	58                   	pop    eax
    1a36:	06                   	push   es
    1a37:	08 99 a5 59 00 02    	or     BYTE PTR [ecx+0x20059a5],bl
    1a3d:	04 01                	add    al,0x1
    1a3f:	06                   	push   es
    1a40:	c8 00 02 04          	enter  0x200,0x4
    1a44:	04 02                	add    al,0x2
    1a46:	2c 12                	sub    al,0x12
    1a48:	00 02                	add    BYTE PTR [edx],al
    1a4a:	04 05                	add    al,0x5
    1a4c:	02 2f                	add    ch,BYTE PTR [edi]
    1a4e:	12 00                	adc    al,BYTE PTR [eax]
    1a50:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a53:	74 00                	je     1a55 <sysEnter_Vector-0x12e5ab>
    1a55:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a58:	58                   	pop    eax
    1a59:	00 02                	add    BYTE PTR [edx],al
    1a5b:	04 08                	add    al,0x8
    1a5d:	06                   	push   es
    1a5e:	08 9f 08 91 9f e0    	or     BYTE PTR [edi-0x1f606ef8],bl
    1a64:	00 02                	add    BYTE PTR [edx],al
    1a66:	04 01                	add    al,0x1
    1a68:	06                   	push   es
    1a69:	c8 00 02 04          	enter  0x200,0x4
    1a6d:	04 02                	add    al,0x2
    1a6f:	2c 12                	sub    al,0x12
    1a71:	00 02                	add    BYTE PTR [edx],al
    1a73:	04 05                	add    al,0x5
    1a75:	02 2f                	add    ch,BYTE PTR [edi]
    1a77:	12 00                	adc    al,BYTE PTR [eax]
    1a79:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1a7c:	74 00                	je     1a7e <sysEnter_Vector-0x12e582>
    1a7e:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1a81:	58                   	pop    eax
    1a82:	06                   	push   es
    1a83:	08 f9                	or     cl,bh
    1a85:	bb 75 00 02 04       	mov    ebx,0x4020075
    1a8a:	01 06                	add    DWORD PTR [esi],eax
    1a8c:	08 2e                	or     BYTE PTR [esi],ch
    1a8e:	06                   	push   es
    1a8f:	9f                   	lahf   
    1a90:	75 75                	jne    1b07 <sysEnter_Vector-0x12e4f9>
    1a92:	7b d8                	jnp    1a6c <sysEnter_Vector-0x12e594>
    1a94:	00 02                	add    BYTE PTR [edx],al
    1a96:	04 01                	add    al,0x1
    1a98:	06                   	push   es
    1a99:	c8 06 75 e5          	enter  0x7506,0xe5
    1a9d:	00 02                	add    BYTE PTR [edx],al
    1a9f:	04 01                	add    al,0x1
    1aa1:	06                   	push   es
    1aa2:	02 22                	add    ah,BYTE PTR [edx]
    1aa4:	12 06                	adc    al,BYTE PTR [esi]
    1aa6:	4b                   	dec    ebx
    1aa7:	00 02                	add    BYTE PTR [edx],al
    1aa9:	04 01                	add    al,0x1
    1aab:	06                   	push   es
    1aac:	08 ba 00 02 04 03    	or     BYTE PTR [edx+0x3040200],bh
    1ab2:	02 22                	add    ah,BYTE PTR [edx]
    1ab4:	12 00                	adc    al,BYTE PTR [eax]
    1ab6:	02 04 04             	add    al,BYTE PTR [esp+eax*1]
    1ab9:	74 00                	je     1abb <sysEnter_Vector-0x12e545>
    1abb:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1abe:	58                   	pop    eax
    1abf:	00 02                	add    BYTE PTR [edx],al
    1ac1:	04 06                	add    al,0x6
    1ac3:	06                   	push   es
    1ac4:	59                   	pop    ecx
    1ac5:	00 02                	add    BYTE PTR [edx],al
    1ac7:	04 01                	add    al,0x1
    1ac9:	06                   	push   es
    1aca:	02 40 12             	add    al,BYTE PTR [eax+0x12]
    1acd:	00 02                	add    BYTE PTR [edx],al
    1acf:	04 03                	add    al,0x3
    1ad1:	02 42 12             	add    al,BYTE PTR [edx+0x12]
    1ad4:	00 02                	add    BYTE PTR [edx],al
    1ad6:	04 04                	add    al,0x4
    1ad8:	74 00                	je     1ada <sysEnter_Vector-0x12e526>
    1ada:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1add:	58                   	pop    eax
    1ade:	00 02                	add    BYTE PTR [edx],al
    1ae0:	04 06                	add    al,0x6
    1ae2:	06                   	push   es
    1ae3:	59                   	pop    ecx
    1ae4:	00 02                	add    BYTE PTR [edx],al
    1ae6:	04 01                	add    al,0x1
    1ae8:	06                   	push   es
    1ae9:	02 43 12             	add    al,BYTE PTR [ebx+0x12]
    1aec:	00 02                	add    BYTE PTR [edx],al
    1aee:	04 03                	add    al,0x3
    1af0:	02 48 12             	add    cl,BYTE PTR [eax+0x12]
    1af3:	00 02                	add    BYTE PTR [edx],al
    1af5:	04 04                	add    al,0x4
    1af7:	74 00                	je     1af9 <sysEnter_Vector-0x12e507>
    1af9:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1afc:	58                   	pop    eax
    1afd:	00 02                	add    BYTE PTR [edx],al
    1aff:	04 06                	add    al,0x6
    1b01:	06                   	push   es
    1b02:	5a                   	pop    edx
    1b03:	00 02                	add    BYTE PTR [edx],al
    1b05:	04 06                	add    al,0x6
    1b07:	c9                   	leave  
    1b08:	2f                   	das    
    1b09:	00 02                	add    BYTE PTR [edx],al
    1b0b:	04 01                	add    al,0x1
    1b0d:	06                   	push   es
    1b0e:	9e                   	sahf   
    1b0f:	00 02                	add    BYTE PTR [edx],al
    1b11:	04 04                	add    al,0x4
    1b13:	02 23                	add    ah,BYTE PTR [ebx]
    1b15:	12 00                	adc    al,BYTE PTR [eax]
    1b17:	02 04 05 02 26 12 00 	add    al,BYTE PTR [eax*1+0x122602]
    1b1e:	02 04 06             	add    al,BYTE PTR [esi+eax*1]
    1b21:	74 00                	je     1b23 <sysEnter_Vector-0x12e4dd>
    1b23:	02 04 08             	add    al,BYTE PTR [eax+ecx*1]
    1b26:	58                   	pop    eax
    1b27:	00 02                	add    BYTE PTR [edx],al
    1b29:	04 08                	add    al,0x8
    1b2b:	06                   	push   es
    1b2c:	08 75 48             	or     BYTE PTR [ebp+0x48],dh
    1b2f:	e8 bb 00 02 04       	call   4021bef <sysEnter_Vector+0x3ef1bef>
    1b34:	01 06                	add    DWORD PTR [esi],eax
    1b36:	ba 06 4b 68 91       	mov    edx,0x91684b06
    1b3b:	02 31                	add    dh,BYTE PTR [ecx]
    1b3d:	14 02                	adc    al,0x2
    1b3f:	2c 14                	sub    al,0x14
    1b41:	00 02                	add    BYTE PTR [edx],al
    1b43:	04 01                	add    al,0x1
    1b45:	06                   	push   es
    1b46:	02 29                	add    ch,BYTE PTR [ecx]
    1b48:	12 06                	adc    al,BYTE PTR [esi]
    1b4a:	4b                   	dec    ebx
    1b4b:	bd 00 02 04 01       	mov    ebp,0x1040200
    1b50:	06                   	push   es
    1b51:	ba 06 08 5a 4c       	mov    edx,0x4c5a0806
    1b56:	f4                   	hlt    
    1b57:	9f                   	lahf   
    1b58:	ae                   	scas   al,BYTE PTR es:[edi]
    1b59:	77 00                	ja     1b5b <sysEnter_Vector-0x12e4a5>
    1b5b:	02 04 01             	add    al,BYTE PTR [ecx+eax*1]
    1b5e:	06                   	push   es
    1b5f:	82                   	(bad)  
    1b60:	06                   	push   es
    1b61:	4b                   	dec    ebx
    1b62:	68 00 02 04 01       	push   0x1040200
    1b67:	06                   	push   es
    1b68:	66 06                	pushw  es
    1b6a:	85 3d 85 08 75 76    	test   DWORD PTR ds:0x76750885,edi
    1b70:	08 f3                	or     bl,dh
    1b72:	67 08 14             	or     BYTE PTR [si],dl
    1b75:	00 02                	add    BYTE PTR [edx],al
    1b77:	04 01                	add    al,0x1
    1b79:	e5 02                	in     eax,0x2
    1b7b:	07                   	pop    es
    1b7c:	00 01                	add    BYTE PTR [ecx],al
    1b7e:	01                   	.byte 0x1

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	6c                   	ins    BYTE PTR es:[edi],dx
   1:	6f                   	outs   dx,DWORD PTR ds:[esi]
   2:	6e                   	outs   dx,BYTE PTR ds:[esi]
   3:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
   7:	6e                   	outs   dx,BYTE PTR ds:[esi]
   8:	67 20 69 6e          	and    BYTE PTR [bx+di+0x6e],ch
   c:	74 00                	je     e <sysEnter_Vector-0x12fff2>
   e:	73 68                	jae    78 <sysEnter_Vector-0x12ff88>
  10:	6f                   	outs   dx,DWORD PTR ds:[esi]
  11:	72 74                	jb     87 <sysEnter_Vector-0x12ff79>
  13:	20 75 6e             	and    BYTE PTR [ebp+0x6e],dh
  16:	73 69                	jae    81 <sysEnter_Vector-0x12ff7f>
  18:	67 6e                	outs   dx,BYTE PTR ds:[si]
  1a:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  1f:	74 00                	je     21 <sysEnter_Vector-0x12ffdf>
  21:	73 74                	jae    97 <sysEnter_Vector-0x12ff69>
  23:	72 63                	jb     88 <sysEnter_Vector-0x12ff78>
  25:	68 72 00 70 72       	push   0x72700072
  2a:	6f                   	outs   dx,DWORD PTR ds:[esi]
  2b:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
  2e:	73 45                	jae    75 <sysEnter_Vector-0x12ff8b>
  30:	6e                   	outs   dx,BYTE PTR ds:[esi]
  31:	76 70                	jbe    a3 <sysEnter_Vector-0x12ff5d>
  33:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  37:	67 20 6c 6f          	and    BYTE PTR [si+0x6f],ch
  3b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  3c:	67 20 75 6e          	and    BYTE PTR [di+0x6e],dh
  40:	73 69                	jae    ab <sysEnter_Vector-0x12ff55>
  42:	67 6e                	outs   dx,BYTE PTR ds:[si]
  44:	65 64 20 69 6e       	gs and BYTE PTR fs:gs:[ecx+0x6e],ch
  49:	74 00                	je     4b <sysEnter_Vector-0x12ffb5>
  4b:	68 65 61 70 42       	push   0x42706165
  50:	61                   	popa   
  51:	73 65                	jae    b8 <sysEnter_Vector-0x12ff48>
  53:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
  57:	63 54 5a 00          	arpl   WORD PTR [edx+ebx*2+0x0],dx
  5b:	75 6e                	jne    cb <sysEnter_Vector-0x12ff35>
  5d:	73 69                	jae    c8 <sysEnter_Vector-0x12ff38>
  5f:	67 6e                	outs   dx,BYTE PTR ds:[si]
  61:	65 64 20 63 68       	gs and BYTE PTR fs:gs:[ebx+0x68],ah
  66:	61                   	popa   
  67:	72 00                	jb     69 <sysEnter_Vector-0x12ff97>
  69:	75 69                	jne    d4 <sysEnter_Vector-0x12ff2c>
  6b:	6e                   	outs   dx,BYTE PTR ds:[esi]
  6c:	74 33                	je     a1 <sysEnter_Vector-0x12ff5f>
  6e:	32 5f 74             	xor    bl,BYTE PTR [edi+0x74]
  71:	00 2f                	add    BYTE PTR [edi],ch
  73:	68 6f 6d 65 2f       	push   0x2f656d6f
  78:	79 6f                	jns    e9 <sysEnter_Vector-0x12ff17>
  7a:	67 69 2f 73 72 63 2f 	imul   ebp,DWORD PTR [bx],0x2f637273
  81:	6f                   	outs   dx,DWORD PTR ds:[esi]
  82:	73 2f                	jae    b3 <sysEnter_Vector-0x12ff4d>
  84:	61                   	popa   
  85:	70 72                	jo     f9 <sysEnter_Vector-0x12ff07>
  87:	6f                   	outs   dx,DWORD PTR ds:[esi]
  88:	6a 2f                	push   0x2f
  8a:	6c                   	ins    BYTE PTR es:[edi],dx
  8b:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
  92:	4f                   	dec    edi
  93:	53                   	push   ebx
  94:	00 5f 42             	add    BYTE PTR [edi+0x42],bl
  97:	6f                   	outs   dx,DWORD PTR ds:[esi]
  98:	6f                   	outs   dx,DWORD PTR ds:[esi]
  99:	6c                   	ins    BYTE PTR es:[edi],dx
  9a:	00 6c 6f 6e          	add    BYTE PTR [edi+ebp*2+0x6e],ch
  9e:	67 20 64 6f          	and    BYTE PTR [si+0x6f],ah
  a2:	75 62                	jne    106 <sysEnter_Vector-0x12fefa>
  a4:	6c                   	ins    BYTE PTR es:[edi],dx
  a5:	65 00 73 74          	add    BYTE PTR gs:[ebx+0x74],dh
  a9:	72 63                	jb     10e <sysEnter_Vector-0x12fef2>
  ab:	68 72 49 00 68       	push   0x68004972
  b0:	65                   	gs
  b1:	61                   	popa   
  b2:	70 43                	jo     f7 <sysEnter_Vector-0x12ff09>
  b4:	75 72                	jne    128 <sysEnter_Vector-0x12fed8>
  b6:	72 00                	jb     b8 <sysEnter_Vector-0x12ff48>
  b8:	2e                   	cs
  b9:	2e                   	cs
  ba:	2f                   	das    
  bb:	2e                   	cs
  bc:	2e                   	cs
  bd:	2f                   	das    
  be:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
  c2:	6a 2f                	push   0x2f
  c4:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
  c7:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
  ce:	63 2f                	arpl   WORD PTR [edi],bp
  d0:	73 74                	jae    146 <sysEnter_Vector-0x12feba>
  d2:	72 69                	jb     13d <sysEnter_Vector-0x12fec3>
  d4:	6e                   	outs   dx,BYTE PTR ds:[esi]
  d5:	67 73 2f             	addr16 jae 107 <sysEnter_Vector-0x12fef9>
  d8:	73 74                	jae    14e <sysEnter_Vector-0x12feb2>
  da:	72 63                	jb     13f <sysEnter_Vector-0x12fec1>
  dc:	68 72 2e 63 00       	push   0x632e72
  e1:	73 69                	jae    14c <sysEnter_Vector-0x12feb4>
  e3:	7a 65                	jp     14a <sysEnter_Vector-0x12feb6>
  e5:	74 79                	je     160 <sysEnter_Vector-0x12fea0>
  e7:	70 65                	jo     14e <sysEnter_Vector-0x12feb2>
  e9:	00 73 68             	add    BYTE PTR [ebx+0x68],dh
  ec:	6f                   	outs   dx,DWORD PTR ds:[esi]
  ed:	72 74                	jb     163 <sysEnter_Vector-0x12fe9d>
  ef:	20 69 6e             	and    BYTE PTR [ecx+0x6e],ch
  f2:	74 00                	je     f4 <sysEnter_Vector-0x12ff0c>
  f4:	47                   	inc    edi
  f5:	4e                   	dec    esi
  f6:	55                   	push   ebp
  f7:	20 43 31             	and    BYTE PTR [ebx+0x31],al
  fa:	31 20                	xor    DWORD PTR [eax],esp
  fc:	35 2e 33 2e 30       	xor    eax,0x302e332e
 101:	20 2d 6d 61 73 6d    	and    BYTE PTR ds:0x6d73616d,ch
 107:	3d 69 6e 74 65       	cmp    eax,0x65746e69
 10c:	6c                   	ins    BYTE PTR es:[edi],dx
 10d:	20 2d 6d 74 75 6e    	and    BYTE PTR ds:0x6e75746d,ch
 113:	65                   	gs
 114:	3d 67 65 6e 65       	cmp    eax,0x656e6567
 119:	72 69                	jb     184 <sysEnter_Vector-0x12fe7c>
 11b:	63 20                	arpl   WORD PTR [eax],sp
 11d:	2d 6d 61 72 63       	sub    eax,0x6372616d
 122:	68 3d 70 65 6e       	push   0x6e65703d
 127:	74 69                	je     192 <sysEnter_Vector-0x12fe6e>
 129:	75 6d                	jne    198 <sysEnter_Vector-0x12fe68>
 12b:	70 72                	jo     19f <sysEnter_Vector-0x12fe61>
 12d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 12e:	20 2d 67 20 2d 66    	and    BYTE PTR ds:0x662d2067,ch
 134:	66                   	data16
 135:	72 65                	jb     19c <sysEnter_Vector-0x12fe64>
 137:	65                   	gs
 138:	73 74                	jae    1ae <sysEnter_Vector-0x12fe52>
 13a:	61                   	popa   
 13b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 13c:	64 69 6e 67 20 2d 66 	imul   ebp,DWORD PTR fs:[esi+0x67],0x76662d20
 143:	76 
 144:	69 73 69 62 69 6c 69 	imul   esi,DWORD PTR [ebx+0x69],0x696c6962
 14b:	74 79                	je     1c6 <sysEnter_Vector-0x12fe3a>
 14d:	3d 68 69 64 64       	cmp    eax,0x64646968
 152:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 154:	20 2d 66 50 49 43    	and    BYTE PTR ds:0x43495066,ch
 15a:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 15d:	61                   	popa   
 15e:	70 45                	jo     1a5 <sysEnter_Vector-0x12fe5b>
 160:	6e                   	outs   dx,BYTE PTR ds:[esi]
 161:	64 00 63 68          	add    BYTE PTR fs:[ebx+0x68],ah
 165:	61                   	popa   
 166:	72 73                	jb     1db <sysEnter_Vector-0x12fe25>
 168:	00 2e                	add    BYTE PTR [esi],ch
 16a:	2e                   	cs
 16b:	2f                   	das    
 16c:	2e                   	cs
 16d:	2e                   	cs
 16e:	2f                   	das    
 16f:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 173:	6a 2f                	push   0x2f
 175:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 178:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 17f:	63 2f                	arpl   WORD PTR [edi],bp
 181:	73 74                	jae    1f7 <sysEnter_Vector-0x12fe09>
 183:	72 69                	jb     1ee <sysEnter_Vector-0x12fe12>
 185:	6e                   	outs   dx,BYTE PTR ds:[esi]
 186:	67 73 2f             	addr16 jae 1b8 <sysEnter_Vector-0x12fe48>
 189:	73 74                	jae    1ff <sysEnter_Vector-0x12fe01>
 18b:	72 63                	jb     1f0 <sysEnter_Vector-0x12fe10>
 18d:	73 70                	jae    1ff <sysEnter_Vector-0x12fe01>
 18f:	6e                   	outs   dx,BYTE PTR ds:[esi]
 190:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 193:	73 74                	jae    209 <sysEnter_Vector-0x12fdf7>
 195:	72 63                	jb     1fa <sysEnter_Vector-0x12fe06>
 197:	73 70                	jae    209 <sysEnter_Vector-0x12fdf7>
 199:	6e                   	outs   dx,BYTE PTR ds:[esi]
 19a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 19d:	72 63                	jb     202 <sysEnter_Vector-0x12fdfe>
 19f:	73 70                	jae    211 <sysEnter_Vector-0x12fdef>
 1a1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1a2:	49                   	dec    ecx
 1a3:	00 64 65 6c          	add    BYTE PTR [ebp+eiz*2+0x6c],ah
 1a7:	69 6d 00 2e 2e 2f 2e 	imul   ebp,DWORD PTR [ebp+0x0],0x2e2f2e2e
 1ae:	2e                   	cs
 1af:	2f                   	das    
 1b0:	6b 70 72 6f          	imul   esi,DWORD PTR [eax+0x72],0x6f
 1b4:	6a 2f                	push   0x2f
 1b6:	63 68 72             	arpl   WORD PTR [eax+0x72],bp
 1b9:	69 73 4f 53 2f 73 72 	imul   esi,DWORD PTR [ebx+0x4f],0x72732f53
 1c0:	63 2f                	arpl   WORD PTR [edi],bp
 1c2:	73 74                	jae    238 <sysEnter_Vector-0x12fdc8>
 1c4:	72 69                	jb     22f <sysEnter_Vector-0x12fdd1>
 1c6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 1c7:	67 73 2f             	addr16 jae 1f9 <sysEnter_Vector-0x12fe07>
 1ca:	73 74                	jae    240 <sysEnter_Vector-0x12fdc0>
 1cc:	72 74                	jb     242 <sysEnter_Vector-0x12fdbe>
 1ce:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1cf:	6b 2e 63             	imul   ebp,DWORD PTR [esi],0x63
 1d2:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 1d6:	74 73                	je     24b <sysEnter_Vector-0x12fdb5>
 1d8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 1db:	72 74                	jb     251 <sysEnter_Vector-0x12fdaf>
 1dd:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1de:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 1e1:	74 6f                	je     252 <sysEnter_Vector-0x12fdae>
 1e3:	61                   	popa   
 1e4:	49                   	dec    ecx
 1e5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 1e8:	63 2f                	arpl   WORD PTR [edi],bp
 1ea:	61                   	popa   
 1eb:	73 63                	jae    250 <sysEnter_Vector-0x12fdb0>
 1ed:	69 69 2e 63 00 69 74 	imul   ebp,DWORD PTR [ecx+0x2e],0x74690063
 1f4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1f5:	61                   	popa   
 1f6:	00 61 74             	add    BYTE PTR [ecx+0x74],ah
 1f9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 1fa:	69 00 72 65 76 65    	imul   eax,DWORD PTR [eax],0x65766572
 200:	72 73                	jb     275 <sysEnter_Vector-0x12fd8b>
 202:	65                   	gs
 203:	49                   	dec    ecx
 204:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 207:	67 6e                	outs   dx,BYTE PTR ds:[si]
 209:	00 76 61             	add    BYTE PTR [esi+0x61],dh
 20c:	6c                   	ins    BYTE PTR es:[edi],dx
 20d:	75 65                	jne    274 <sysEnter_Vector-0x12fd8c>
 20f:	00 6c 61 73          	add    BYTE PTR [ecx+eiz*2+0x73],ch
 213:	74 50                	je     265 <sysEnter_Vector-0x12fd9b>
 215:	6f                   	outs   dx,DWORD PTR ds:[esi]
 216:	70 75                	jo     28d <sysEnter_Vector-0x12fd73>
 218:	6c                   	ins    BYTE PTR es:[edi],dx
 219:	61                   	popa   
 21a:	74 65                	je     281 <sysEnter_Vector-0x12fd7f>
 21c:	64 00 73 65          	add    BYTE PTR fs:[ebx+0x65],dh
 220:	74 65                	je     287 <sysEnter_Vector-0x12fd79>
 222:	6e                   	outs   dx,BYTE PTR ds:[esi]
 223:	76 00                	jbe    225 <sysEnter_Vector-0x12fddb>
 225:	67                   	addr16
 226:	65                   	gs
 227:	74 65                	je     28e <sysEnter_Vector-0x12fd72>
 229:	6e                   	outs   dx,BYTE PTR ds:[esi]
 22a:	76 00                	jbe    22c <sysEnter_Vector-0x12fdd4>
 22c:	73 72                	jae    2a0 <sysEnter_Vector-0x12fd60>
 22e:	63 2f                	arpl   WORD PTR [edi],bp
 230:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 232:	76 69                	jbe    29d <sysEnter_Vector-0x12fd63>
 234:	72 6f                	jb     2a5 <sysEnter_Vector-0x12fd5b>
 236:	6e                   	outs   dx,BYTE PTR ds:[esi]
 237:	6d                   	ins    DWORD PTR es:[edi],dx
 238:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 23a:	74 2e                	je     26a <sysEnter_Vector-0x12fd96>
 23c:	63 00                	arpl   WORD PTR [eax],ax
 23e:	76 61                	jbe    2a1 <sysEnter_Vector-0x12fd5f>
 240:	72 6e                	jb     2b0 <sysEnter_Vector-0x12fd50>
 242:	61                   	popa   
 243:	6d                   	ins    DWORD PTR es:[edi],dx
 244:	65 00 67 65          	add    BYTE PTR gs:[edi+0x65],ah
 248:	74 64                	je     2ae <sysEnter_Vector-0x12fd52>
 24a:	69 72 00 63 6c 6f 73 	imul   esi,DWORD PTR [edx+0x0],0x736f6c63
 251:	65 00 53 59          	add    BYTE PTR gs:[ebx+0x59],dl
 255:	53                   	push   ebx
 256:	43                   	inc    ebx
 257:	41                   	inc    ecx
 258:	4c                   	dec    esp
 259:	4c                   	dec    esp
 25a:	5f                   	pop    edi
 25b:	52                   	push   edx
 25c:	45                   	inc    ebp
 25d:	41                   	inc    ecx
 25e:	44                   	inc    esp
 25f:	00 77 72             	add    BYTE PTR [edi+0x72],dh
 262:	69 74 65 00 53 59 53 	imul   esi,DWORD PTR [ebp+eiz*2+0x0],0x43535953
 269:	43 
 26a:	41                   	inc    ecx
 26b:	4c                   	dec    esp
 26c:	4c                   	dec    esp
 26d:	5f                   	pop    edi
 26e:	50                   	push   eax
 26f:	49                   	dec    ecx
 270:	50                   	push   eax
 271:	45                   	inc    ebp
 272:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 275:	53                   	push   ebx
 276:	43                   	inc    ebx
 277:	41                   	inc    ecx
 278:	4c                   	dec    esp
 279:	4c                   	dec    esp
 27a:	5f                   	pop    edi
 27b:	4f                   	dec    edi
 27c:	50                   	push   eax
 27d:	45                   	inc    ebp
 27e:	4e                   	dec    esi
 27f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 282:	53                   	push   ebx
 283:	43                   	inc    ebx
 284:	41                   	inc    ecx
 285:	4c                   	dec    esp
 286:	4c                   	dec    esp
 287:	5f                   	pop    edi
 288:	4d                   	dec    ebp
 289:	41                   	inc    ecx
 28a:	53                   	push   ebx
 28b:	4b                   	dec    ebx
 28c:	53                   	push   ebx
 28d:	49                   	dec    ecx
 28e:	47                   	inc    edi
 28f:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 292:	53                   	push   ebx
 293:	43                   	inc    ebx
 294:	41                   	inc    ecx
 295:	4c                   	dec    esp
 296:	4c                   	dec    esp
 297:	5f                   	pop    edi
 298:	47                   	inc    edi
 299:	45                   	inc    ebp
 29a:	54                   	push   esp
 29b:	44                   	inc    esp
 29c:	45                   	inc    ebp
 29d:	4e                   	dec    esi
 29e:	54                   	push   esp
 29f:	53                   	push   ebx
 2a0:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 2a3:	63 2f                	arpl   WORD PTR [edi],bp
 2a5:	66 69 6c 65 2e 63 00 	imul   bp,WORD PTR [ebp+eiz*2+0x2e],0x63
 2ac:	53                   	push   ebx
 2ad:	59                   	pop    ecx
 2ae:	53                   	push   ebx
 2af:	43                   	inc    ebx
 2b0:	41                   	inc    ecx
 2b1:	4c                   	dec    esp
 2b2:	4c                   	dec    esp
 2b3:	5f                   	pop    edi
 2b4:	52                   	push   edx
 2b5:	45                   	inc    ebp
 2b6:	42                   	inc    edx
 2b7:	4f                   	dec    edi
 2b8:	4f                   	dec    edi
 2b9:	54                   	push   esp
 2ba:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2bd:	53                   	push   ebx
 2be:	43                   	inc    ebx
 2bf:	41                   	inc    ecx
 2c0:	4c                   	dec    esp
 2c1:	4c                   	dec    esp
 2c2:	5f                   	pop    edi
 2c3:	48                   	dec    eax
 2c4:	4c                   	dec    esp
 2c5:	54                   	push   esp
 2c6:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2c9:	53                   	push   ebx
 2ca:	43                   	inc    ebx
 2cb:	41                   	inc    ecx
 2cc:	4c                   	dec    esp
 2cd:	4c                   	dec    esp
 2ce:	5f                   	pop    edi
 2cf:	53                   	push   ebx
 2d0:	4c                   	dec    esp
 2d1:	45                   	inc    ebp
 2d2:	45                   	inc    ebp
 2d3:	50                   	push   eax
 2d4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2d7:	53                   	push   ebx
 2d8:	43                   	inc    ebx
 2d9:	41                   	inc    ecx
 2da:	4c                   	dec    esp
 2db:	4c                   	dec    esp
 2dc:	5f                   	pop    edi
 2dd:	47                   	inc    edi
 2de:	45                   	inc    ebp
 2df:	54                   	push   esp
 2e0:	54                   	push   esp
 2e1:	49                   	dec    ecx
 2e2:	4d                   	dec    ebp
 2e3:	45                   	inc    ebp
 2e4:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2e7:	53                   	push   ebx
 2e8:	43                   	inc    ebx
 2e9:	41                   	inc    ecx
 2ea:	4c                   	dec    esp
 2eb:	4c                   	dec    esp
 2ec:	5f                   	pop    edi
 2ed:	53                   	push   ebx
 2ee:	45                   	inc    ebp
 2ef:	54                   	push   esp
 2f0:	50                   	push   eax
 2f1:	52                   	push   edx
 2f2:	49                   	dec    ecx
 2f3:	4f                   	dec    edi
 2f4:	52                   	push   edx
 2f5:	49                   	dec    ecx
 2f6:	54                   	push   esp
 2f7:	59                   	pop    ecx
 2f8:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 2fb:	53                   	push   ebx
 2fc:	43                   	inc    ebx
 2fd:	41                   	inc    ecx
 2fe:	4c                   	dec    esp
 2ff:	4c                   	dec    esp
 300:	5f                   	pop    edi
 301:	43                   	inc    ebx
 302:	4c                   	dec    esp
 303:	4f                   	dec    edi
 304:	53                   	push   ebx
 305:	45                   	inc    ebp
 306:	00 65 73             	add    BYTE PTR [ebp+0x73],ah
 309:	79 73                	jns    37e <sysEnter_Vector-0x12fc82>
 30b:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 30e:	6c                   	ins    BYTE PTR es:[edi],dx
 30f:	73 00                	jae    311 <sysEnter_Vector-0x12fcef>
 311:	6c                   	ins    BYTE PTR es:[edi],dx
 312:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 314:	67 74 68             	addr16 je 37f <sysEnter_Vector-0x12fc81>
 317:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 31a:	61                   	popa   
 31b:	64 00 53 59          	add    BYTE PTR fs:[ebx+0x59],dl
 31f:	53                   	push   ebx
 320:	43                   	inc    ebx
 321:	41                   	inc    ecx
 322:	4c                   	dec    esp
 323:	4c                   	dec    esp
 324:	5f                   	pop    edi
 325:	46                   	inc    esi
 326:	4f                   	dec    edi
 327:	52                   	push   edx
 328:	4b                   	dec    ebx
 329:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 32c:	53                   	push   ebx
 32d:	43                   	inc    ebx
 32e:	41                   	inc    ecx
 32f:	4c                   	dec    esp
 330:	4c                   	dec    esp
 331:	5f                   	pop    edi
 332:	53                   	push   ebx
 333:	54                   	push   esp
 334:	4f                   	dec    edi
 335:	50                   	push   eax
 336:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 339:	53                   	push   ebx
 33a:	43                   	inc    ebx
 33b:	41                   	inc    ecx
 33c:	4c                   	dec    esp
 33d:	4c                   	dec    esp
 33e:	5f                   	pop    edi
 33f:	50                   	push   eax
 340:	52                   	push   edx
 341:	49                   	dec    ecx
 342:	4e                   	dec    esi
 343:	54                   	push   esp
 344:	44                   	inc    esp
 345:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 348:	66                   	data16
 349:	66                   	data16
 34a:	65                   	gs
 34b:	72 43                	jb     390 <sysEnter_Vector-0x12fc70>
 34d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 34e:	75 6e                	jne    3be <sysEnter_Vector-0x12fc42>
 350:	74 00                	je     352 <sysEnter_Vector-0x12fcae>
 352:	53                   	push   ebx
 353:	59                   	pop    ecx
 354:	53                   	push   ebx
 355:	43                   	inc    ebx
 356:	41                   	inc    ecx
 357:	4c                   	dec    esp
 358:	4c                   	dec    esp
 359:	5f                   	pop    edi
 35a:	46                   	inc    esi
 35b:	52                   	push   edx
 35c:	45                   	inc    ebp
 35d:	45                   	inc    ebp
 35e:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 361:	53                   	push   ebx
 362:	43                   	inc    ebx
 363:	41                   	inc    ecx
 364:	4c                   	dec    esp
 365:	4c                   	dec    esp
 366:	5f                   	pop    edi
 367:	45                   	inc    ebp
 368:	58                   	pop    eax
 369:	45                   	inc    ebp
 36a:	43                   	inc    ebx
 36b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 36e:	53                   	push   ebx
 36f:	43                   	inc    ebx
 370:	41                   	inc    ecx
 371:	4c                   	dec    esp
 372:	4c                   	dec    esp
 373:	5f                   	pop    edi
 374:	49                   	dec    ecx
 375:	4e                   	dec    esi
 376:	56                   	push   esi
 377:	41                   	inc    ecx
 378:	4c                   	dec    esp
 379:	49                   	dec    ecx
 37a:	44                   	inc    esp
 37b:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 37e:	53                   	push   ebx
 37f:	43                   	inc    ebx
 380:	41                   	inc    ecx
 381:	4c                   	dec    esp
 382:	4c                   	dec    esp
 383:	5f                   	pop    edi
 384:	52                   	push   edx
 385:	45                   	inc    ebp
 386:	47                   	inc    edi
 387:	45                   	inc    ebp
 388:	58                   	pop    eax
 389:	49                   	dec    ecx
 38a:	54                   	push   esp
 38b:	48                   	dec    eax
 38c:	41                   	inc    ecx
 38d:	4e                   	dec    esi
 38e:	44                   	inc    esp
 38f:	4c                   	dec    esp
 390:	45                   	inc    ebp
 391:	52                   	push   edx
 392:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 395:	53                   	push   ebx
 396:	43                   	inc    ebx
 397:	41                   	inc    ecx
 398:	4c                   	dec    esp
 399:	4c                   	dec    esp
 39a:	5f                   	pop    edi
 39b:	47                   	inc    edi
 39c:	45                   	inc    ebp
 39d:	54                   	push   esp
 39e:	54                   	push   esp
 39f:	49                   	dec    ecx
 3a0:	43                   	inc    ebx
 3a1:	4b                   	dec    ebx
 3a2:	53                   	push   ebx
 3a3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3a6:	53                   	push   ebx
 3a7:	43                   	inc    ebx
 3a8:	41                   	inc    ecx
 3a9:	4c                   	dec    esp
 3aa:	4c                   	dec    esp
 3ab:	5f                   	pop    edi
 3ac:	45                   	inc    ebp
 3ad:	4e                   	dec    esi
 3ae:	44                   	inc    esp
 3af:	50                   	push   eax
 3b0:	52                   	push   edx
 3b1:	4f                   	dec    edi
 3b2:	43                   	inc    ebx
 3b3:	45                   	inc    ebp
 3b4:	53                   	push   ebx
 3b5:	53                   	push   ebx
 3b6:	00 62 75             	add    BYTE PTR [edx+0x75],ah
 3b9:	66                   	data16
 3ba:	66                   	data16
 3bb:	65                   	gs
 3bc:	72 00                	jb     3be <sysEnter_Vector-0x12fc42>
 3be:	53                   	push   ebx
 3bf:	59                   	pop    ecx
 3c0:	53                   	push   ebx
 3c1:	43                   	inc    ebx
 3c2:	41                   	inc    ecx
 3c3:	4c                   	dec    esp
 3c4:	4c                   	dec    esp
 3c5:	5f                   	pop    edi
 3c6:	57                   	push   edi
 3c7:	52                   	push   edx
 3c8:	49                   	dec    ecx
 3c9:	54                   	push   esp
 3ca:	45                   	inc    ebp
 3cb:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3ce:	53                   	push   ebx
 3cf:	43                   	inc    ebx
 3d0:	41                   	inc    ecx
 3d1:	4c                   	dec    esp
 3d2:	4c                   	dec    esp
 3d3:	5f                   	pop    edi
 3d4:	50                   	push   eax
 3d5:	52                   	push   edx
 3d6:	49                   	dec    ecx
 3d7:	4e                   	dec    esi
 3d8:	54                   	push   esp
 3d9:	00 68 61             	add    BYTE PTR [eax+0x61],ch
 3dc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 3dd:	64                   	fs
 3de:	6c                   	ins    BYTE PTR es:[edi],dx
 3df:	65 00 73 69          	add    BYTE PTR gs:[ebx+0x69],dh
 3e3:	7a 65                	jp     44a <sysEnter_Vector-0x12fbb6>
 3e5:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3e8:	53                   	push   ebx
 3e9:	43                   	inc    ebx
 3ea:	41                   	inc    ecx
 3eb:	4c                   	dec    esp
 3ec:	4c                   	dec    esp
 3ed:	5f                   	pop    edi
 3ee:	41                   	inc    ecx
 3ef:	4c                   	dec    esp
 3f0:	4c                   	dec    esp
 3f1:	4f                   	dec    edi
 3f2:	43                   	inc    ebx
 3f3:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 3f6:	53                   	push   ebx
 3f7:	43                   	inc    ebx
 3f8:	41                   	inc    ecx
 3f9:	4c                   	dec    esp
 3fa:	4c                   	dec    esp
 3fb:	5f                   	pop    edi
 3fc:	47                   	inc    edi
 3fd:	45                   	inc    ebp
 3fe:	54                   	push   esp
 3ff:	43                   	inc    ebx
 400:	57                   	push   edi
 401:	44                   	inc    esp
 402:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 405:	53                   	push   ebx
 406:	43                   	inc    ebx
 407:	41                   	inc    ecx
 408:	4c                   	dec    esp
 409:	4c                   	dec    esp
 40a:	5f                   	pop    edi
 40b:	57                   	push   edi
 40c:	41                   	inc    ecx
 40d:	49                   	dec    ecx
 40e:	54                   	push   esp
 40f:	46                   	inc    esi
 410:	4f                   	dec    edi
 411:	52                   	push   edx
 412:	50                   	push   eax
 413:	49                   	dec    ecx
 414:	44                   	inc    esp
 415:	00 6f 70             	add    BYTE PTR [edi+0x70],ch
 418:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 41a:	00 53 59             	add    BYTE PTR [ebx+0x59],dl
 41d:	53                   	push   ebx
 41e:	43                   	inc    ebx
 41f:	41                   	inc    ecx
 420:	4c                   	dec    esp
 421:	4c                   	dec    esp
 422:	5f                   	pop    edi
 423:	53                   	push   ebx
 424:	45                   	inc    ebp
 425:	54                   	push   esp
 426:	53                   	push   ebx
 427:	49                   	dec    ecx
 428:	47                   	inc    edi
 429:	41                   	inc    ecx
 42a:	43                   	inc    ebx
 42b:	54                   	push   esp
 42c:	49                   	dec    ecx
 42d:	4f                   	dec    edi
 42e:	4e                   	dec    esi
 42f:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 432:	72 65                	jb     499 <sysEnter_Vector-0x12fb67>
 434:	61                   	popa   
 435:	6d                   	ins    DWORD PTR es:[edi],dx
 436:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 439:	74 73                	je     4ae <sysEnter_Vector-0x12fb52>
 43b:	45                   	inc    ebp
 43c:	72 72                	jb     4b0 <sysEnter_Vector-0x12fb50>
 43e:	6f                   	outs   dx,DWORD PTR ds:[esi]
 43f:	72 00                	jb     441 <sysEnter_Vector-0x12fbbf>
 441:	6c                   	ins    BYTE PTR es:[edi],dx
 442:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 445:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 448:	63 2f                	arpl   WORD PTR [edi],bp
 44a:	69 6e 70 75 74 2f 69 	imul   ebp,DWORD PTR [esi+0x70],0x692f7475
 451:	6e                   	outs   dx,BYTE PTR ds:[esi]
 452:	70 75                	jo     4c9 <sysEnter_Vector-0x12fb37>
 454:	74 2e                	je     484 <sysEnter_Vector-0x12fb7c>
 456:	63 00                	arpl   WORD PTR [eax],ax
 458:	69 6e 63 68 61 72 00 	imul   ebp,DWORD PTR [esi+0x63],0x726168
 45f:	67                   	addr16
 460:	65                   	gs
 461:	74 63                	je     4c6 <sysEnter_Vector-0x12fb3a>
 463:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 466:	78 6c                	js     4d4 <sysEnter_Vector-0x12fb2c>
 468:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 46a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 46d:	74 73                	je     4e2 <sysEnter_Vector-0x12fb1e>
 46f:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 472:	74 63                	je     4d7 <sysEnter_Vector-0x12fb29>
 474:	00 70 75             	add    BYTE PTR [eax+0x75],dh
 477:	74 73                	je     4ec <sysEnter_Vector-0x12fb14>
 479:	00 72 65             	add    BYTE PTR [edx+0x65],dh
 47c:	74 56                	je     4d4 <sysEnter_Vector-0x12fb2c>
 47e:	61                   	popa   
 47f:	6c                   	ins    BYTE PTR es:[edi],dx
 480:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 483:	69 6e 74 00 6c 61 73 	imul   ebp,DWORD PTR [esi+0x74],0x73616c00
 48a:	74 53                	je     4df <sysEnter_Vector-0x12fb21>
 48c:	70 61                	jo     4ef <sysEnter_Vector-0x12fb11>
 48e:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 491:	74 72                	je     505 <sysEnter_Vector-0x12fafb>
 493:	00 73 69             	add    BYTE PTR [ebx+0x69],dh
 496:	7a 65                	jp     4fd <sysEnter_Vector-0x12fb03>
 498:	5f                   	pop    edi
 499:	74 00                	je     49b <sysEnter_Vector-0x12fb65>
 49b:	75 69                	jne    506 <sysEnter_Vector-0x12fafa>
 49d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 49e:	74 70                	je     510 <sysEnter_Vector-0x12faf0>
 4a0:	74 72                	je     514 <sysEnter_Vector-0x12faec>
 4a2:	5f                   	pop    edi
 4a3:	74 00                	je     4a5 <sysEnter_Vector-0x12fb5b>
 4a5:	73 69                	jae    510 <sysEnter_Vector-0x12faf0>
 4a7:	67 44                	addr16 inc esp
 4a9:	61                   	popa   
 4aa:	74 61                	je     50d <sysEnter_Vector-0x12faf3>
 4ac:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 4af:	67 76 50             	addr16 jbe 502 <sysEnter_Vector-0x12fafe>
 4b2:	74 72                	je     526 <sysEnter_Vector-0x12fada>
 4b4:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 4b7:	6f                   	outs   dx,DWORD PTR ds:[esi]
 4b8:	67 72 61             	addr16 jb 51c <sysEnter_Vector-0x12fae4>
 4bb:	6d                   	ins    DWORD PTR es:[edi],dx
 4bc:	00 6c 69 62          	add    BYTE PTR [ecx+ebp*2+0x62],ch
 4c0:	63 5f 69             	arpl   WORD PTR [edi+0x69],bx
 4c3:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4c4:	69 74 00 5f 5f 62 75 	imul   esi,DWORD PTR [eax+eax*1+0x5f],0x6975625f
 4cb:	69 
 4cc:	6c                   	ins    BYTE PTR es:[edi],dx
 4cd:	74 69                	je     538 <sysEnter_Vector-0x12fac8>
 4cf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4d0:	5f                   	pop    edi
 4d1:	76 61                	jbe    534 <sysEnter_Vector-0x12facc>
 4d3:	5f                   	pop    edi
 4d4:	6c                   	ins    BYTE PTR es:[edi],dx
 4d5:	69 73 74 00 66 6f 72 	imul   esi,DWORD PTR [ebx+0x74],0x726f6600
 4dc:	6b 00 73             	imul   eax,DWORD PTR [eax],0x73
 4df:	70 61                	jo     542 <sysEnter_Vector-0x12fabe>
 4e1:	63 65 50             	arpl   WORD PTR [ebp+0x50],sp
 4e4:	74 72                	je     558 <sysEnter_Vector-0x12faa8>
 4e6:	00 77 61             	add    BYTE PTR [edi+0x61],dh
 4e9:	69 74 70 69 64 00 44 	imul   esi,DWORD PTR [eax+esi*2+0x69],0x65440064
 4f0:	65 
 4f1:	62 75 67             	bound  esi,QWORD PTR [ebp+0x67]
 4f4:	4c                   	dec    esp
 4f5:	65                   	gs
 4f6:	76 65                	jbe    55d <sysEnter_Vector-0x12faa3>
 4f8:	6c                   	ins    BYTE PTR es:[edi],dx
 4f9:	00 63 61             	add    BYTE PTR [ebx+0x61],ah
 4fc:	6c                   	ins    BYTE PTR es:[edi],dx
 4fd:	6c                   	ins    BYTE PTR es:[edi],dx
 4fe:	6e                   	outs   dx,BYTE PTR ds:[esi]
 4ff:	75 6d                	jne    56e <sysEnter_Vector-0x12fa92>
 501:	00 73 6c             	add    BYTE PTR [ebx+0x6c],dh
 504:	65                   	gs
 505:	65                   	gs
 506:	70 00                	jo     508 <sysEnter_Vector-0x12faf8>
 508:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 50a:	5f                   	pop    edi
 50b:	73 79                	jae    586 <sysEnter_Vector-0x12fa7a>
 50d:	73 63                	jae    572 <sysEnter_Vector-0x12fa8e>
 50f:	61                   	popa   
 510:	6c                   	ins    BYTE PTR es:[edi],dx
 511:	6c                   	ins    BYTE PTR es:[edi],dx
 512:	30 00                	xor    BYTE PTR [eax],al
 514:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 516:	5f                   	pop    edi
 517:	73 79                	jae    592 <sysEnter_Vector-0x12fa6e>
 519:	73 63                	jae    57e <sysEnter_Vector-0x12fa82>
 51b:	61                   	popa   
 51c:	6c                   	ins    BYTE PTR es:[edi],dx
 51d:	6c                   	ins    BYTE PTR es:[edi],dx
 51e:	31 00                	xor    DWORD PTR [eax],eax
 520:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 522:	5f                   	pop    edi
 523:	73 79                	jae    59e <sysEnter_Vector-0x12fa62>
 525:	73 63                	jae    58a <sysEnter_Vector-0x12fa76>
 527:	61                   	popa   
 528:	6c                   	ins    BYTE PTR es:[edi],dx
 529:	6c                   	ins    BYTE PTR es:[edi],dx
 52a:	32 00                	xor    al,BYTE PTR [eax]
 52c:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 52e:	5f                   	pop    edi
 52f:	73 79                	jae    5aa <sysEnter_Vector-0x12fa56>
 531:	73 63                	jae    596 <sysEnter_Vector-0x12fa6a>
 533:	61                   	popa   
 534:	6c                   	ins    BYTE PTR es:[edi],dx
 535:	6c                   	ins    BYTE PTR es:[edi],dx
 536:	33 00                	xor    eax,DWORD PTR [eax]
 538:	64 6f                	outs   dx,DWORD PTR fs:[esi]
 53a:	5f                   	pop    edi
 53b:	73 79                	jae    5b6 <sysEnter_Vector-0x12fa4a>
 53d:	73 63                	jae    5a2 <sysEnter_Vector-0x12fa5e>
 53f:	61                   	popa   
 540:	6c                   	ins    BYTE PTR es:[edi],dx
 541:	6c                   	ins    BYTE PTR es:[edi],dx
 542:	34 00                	xor    al,0x0
 544:	6c                   	ins    BYTE PTR es:[edi],dx
 545:	69 62 63 49 6e 69 74 	imul   esp,DWORD PTR [edx+0x63],0x74696e49
 54c:	69 61 6c 69 7a 65 64 	imul   esp,DWORD PTR [ecx+0x6c],0x64657a69
 553:	00 5f 5f             	add    BYTE PTR [edi+0x5f],bl
 556:	67 6e                	outs   dx,BYTE PTR ds:[si]
 558:	75 63                	jne    5bd <sysEnter_Vector-0x12fa43>
 55a:	5f                   	pop    edi
 55b:	76 61                	jbe    5be <sysEnter_Vector-0x12fa42>
 55d:	5f                   	pop    edi
 55e:	6c                   	ins    BYTE PTR es:[edi],dx
 55f:	69 73 74 00 70 72 69 	imul   esi,DWORD PTR [ebx+0x74],0x69727000
 566:	6e                   	outs   dx,BYTE PTR ds:[esi]
 567:	74 64                	je     5cd <sysEnter_Vector-0x12fa33>
 569:	49                   	dec    ecx
 56a:	00 70 61             	add    BYTE PTR [eax+0x61],dh
 56d:	72 61                	jb     5d0 <sysEnter_Vector-0x12fa30>
 56f:	6d                   	ins    DWORD PTR es:[edi],dx
 570:	31 00                	xor    DWORD PTR [eax],eax
 572:	70 61                	jo     5d5 <sysEnter_Vector-0x12fa2b>
 574:	72 61                	jb     5d7 <sysEnter_Vector-0x12fa29>
 576:	6d                   	ins    DWORD PTR es:[edi],dx
 577:	32 00                	xor    al,BYTE PTR [eax]
 579:	70 61                	jo     5dc <sysEnter_Vector-0x12fa24>
 57b:	72 61                	jb     5de <sysEnter_Vector-0x12fa22>
 57d:	6d                   	ins    DWORD PTR es:[edi],dx
 57e:	33 00                	xor    eax,DWORD PTR [eax]
 580:	70 61                	jo     5e3 <sysEnter_Vector-0x12fa1d>
 582:	72 61                	jb     5e5 <sysEnter_Vector-0x12fa1b>
 584:	6d                   	ins    DWORD PTR es:[edi],dx
 585:	34 00                	xor    al,0x0
 587:	65                   	gs
 588:	78 65                	js     5ef <sysEnter_Vector-0x12fa11>
 58a:	63 61 00             	arpl   WORD PTR [ecx+0x0],sp
 58d:	66 6f                	outs   dx,WORD PTR ds:[esi]
 58f:	72 6d                	jb     5fe <sysEnter_Vector-0x12fa02>
 591:	61                   	popa   
 592:	74 00                	je     594 <sysEnter_Vector-0x12fa6c>
 594:	73 69                	jae    5ff <sysEnter_Vector-0x12fa01>
 596:	67 6e                	outs   dx,BYTE PTR ds:[si]
 598:	61                   	popa   
 599:	6c                   	ins    BYTE PTR es:[edi],dx
 59a:	00 65 78             	add    BYTE PTR [ebp+0x78],ah
 59d:	65 63 00             	arpl   WORD PTR gs:[eax],ax
 5a0:	5f                   	pop    edi
 5a1:	5f                   	pop    edi
 5a2:	73 65                	jae    609 <sysEnter_Vector-0x12f9f7>
 5a4:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 5a7:	64                   	fs
 5a8:	73 00                	jae    5aa <sysEnter_Vector-0x12fa56>
 5aa:	73 72                	jae    61e <sysEnter_Vector-0x12f9e2>
 5ac:	63 2f                	arpl   WORD PTR [edi],bp
 5ae:	6c                   	ins    BYTE PTR es:[edi],dx
 5af:	69 62 43 68 72 69 73 	imul   esp,DWORD PTR [edx+0x43],0x73697268
 5b6:	4f                   	dec    edi
 5b7:	53                   	push   ebx
 5b8:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 5bb:	61                   	popa   
 5bc:	72 67                	jb     625 <sysEnter_Vector-0x12f9db>
 5be:	63 00                	arpl   WORD PTR [eax],ax
 5c0:	6c                   	ins    BYTE PTR es:[edi],dx
 5c1:	69 62 63 5f 63 6c 65 	imul   esp,DWORD PTR [edx+0x63],0x656c635f
 5c8:	61                   	popa   
 5c9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5ca:	75 70                	jne    63c <sysEnter_Vector-0x12f9c4>
 5cc:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 5cf:	67 76 00             	addr16 jbe 5d2 <sysEnter_Vector-0x12fa2e>
 5d2:	73 69                	jae    63d <sysEnter_Vector-0x12f9c3>
 5d4:	67 48                	addr16 dec eax
 5d6:	61                   	popa   
 5d7:	6e                   	outs   dx,BYTE PTR ds:[esi]
 5d8:	64                   	fs
 5d9:	6c                   	ins    BYTE PTR es:[edi],dx
 5da:	65                   	gs
 5db:	72 00                	jb     5dd <sysEnter_Vector-0x12fa23>
 5dd:	6d                   	ins    DWORD PTR es:[edi],dx
 5de:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5df:	64 69 66 79 53 69 67 	imul   esp,DWORD PTR fs:[esi+0x79],0x6e676953
 5e6:	6e 
 5e7:	61                   	popa   
 5e8:	6c                   	ins    BYTE PTR es:[edi],dx
 5e9:	00 61 72             	add    BYTE PTR [ecx+0x72],ah
 5ec:	67 73 00             	addr16 jae 5ef <sysEnter_Vector-0x12fa11>
 5ef:	70 72                	jo     663 <sysEnter_Vector-0x12f99d>
 5f1:	69 6e 74 49 00 73 74 	imul   ebp,DWORD PTR [esi+0x74],0x74730049
 5f8:	6f                   	outs   dx,DWORD PTR ds:[esi]
 5f9:	70 00                	jo     5fb <sysEnter_Vector-0x12fa05>
 5fb:	67                   	addr16
 5fc:	65                   	gs
 5fd:	74 63                	je     662 <sysEnter_Vector-0x12f99e>
 5ff:	77 64                	ja     665 <sysEnter_Vector-0x12f99b>
 601:	00 61 6c             	add    BYTE PTR [ecx+0x6c],ah
 604:	6c                   	ins    BYTE PTR es:[edi],dx
 605:	6f                   	outs   dx,DWORD PTR ds:[esi]
 606:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 609:	65                   	gs
 60a:	64                   	fs
 60b:	50                   	push   eax
 60c:	74 72                	je     680 <sysEnter_Vector-0x12f980>
 60e:	00 66 70             	add    BYTE PTR [esi+0x70],ah
 611:	6f                   	outs   dx,DWORD PTR ds:[esi]
 612:	69 6e 74 65 72 00 6e 	imul   ebp,DWORD PTR [esi+0x74],0x6e007265
 619:	65                   	gs
 61a:	77 53                	ja     66f <sysEnter_Vector-0x12f991>
 61c:	69 7a 65 00 6d 61 6c 	imul   edi,DWORD PTR [edx+0x65],0x6c616d00
 623:	6c                   	ins    BYTE PTR es:[edi],dx
 624:	6f                   	outs   dx,DWORD PTR ds:[esi]
 625:	63 5f 63             	arpl   WORD PTR [edi+0x63],bx
 628:	6c                   	ins    BYTE PTR es:[edi],dx
 629:	65                   	gs
 62a:	61                   	popa   
 62b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 62c:	75 70                	jne    69e <sysEnter_Vector-0x12f962>
 62e:	00 6d 61             	add    BYTE PTR [ebp+0x61],ch
 631:	72 6b                	jb     69e <sysEnter_Vector-0x12f962>
 633:	65                   	gs
 634:	72 00                	jb     636 <sysEnter_Vector-0x12f9ca>
 636:	6d                   	ins    DWORD PTR es:[edi],dx
 637:	61                   	popa   
 638:	6c                   	ins    BYTE PTR es:[edi],dx
 639:	6c                   	ins    BYTE PTR es:[edi],dx
 63a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 63b:	63 49 00             	arpl   WORD PTR [ecx+0x0],cx
 63e:	68 65 61 70 50       	push   0x50706165
 643:	74 72                	je     6b7 <sysEnter_Vector-0x12f949>
 645:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 648:	6e                   	outs   dx,BYTE PTR ds:[esi]
 649:	74 38                	je     683 <sysEnter_Vector-0x12f97d>
 64b:	5f                   	pop    edi
 64c:	74 00                	je     64e <sysEnter_Vector-0x12f9b2>
 64e:	66                   	data16
 64f:	72 65                	jb     6b6 <sysEnter_Vector-0x12f94a>
 651:	65 00 6e 65          	add    BYTE PTR gs:[esi+0x65],ch
 655:	65 64 65 64 00 73 68 	gs fs gs add BYTE PTR fs:gs:[ebx+0x68],dh
 65c:	65                   	gs
 65d:	61                   	popa   
 65e:	70 00                	jo     660 <sysEnter_Vector-0x12f9a0>
 660:	69 6e 55 73 65 00 69 	imul   ebp,DWORD PTR [esi+0x55],0x69006573
 667:	6e                   	outs   dx,BYTE PTR ds:[esi]
 668:	69 74 6d 61 6c 6c 6f 	imul   esi,DWORD PTR [ebp+ebp*2+0x61],0x636f6c6c
 66f:	63 
 670:	00 67 6f             	add    BYTE PTR [edi+0x6f],ah
 673:	74 6f                	je     6e4 <sysEnter_Vector-0x12f91c>
 675:	48                   	dec    eax
 676:	65                   	gs
 677:	72 65                	jb     6de <sysEnter_Vector-0x12f922>
 679:	00 68 65             	add    BYTE PTR [eax+0x65],ch
 67c:	61                   	popa   
 67d:	70 50                	jo     6cf <sysEnter_Vector-0x12f931>
 67f:	74 72                	je     6f3 <sysEnter_Vector-0x12f90d>
 681:	4e                   	dec    esi
 682:	65                   	gs
 683:	78 74                	js     6f9 <sysEnter_Vector-0x12f907>
 685:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 688:	77 48                	ja     6d2 <sysEnter_Vector-0x12f92e>
 68a:	65                   	gs
 68b:	61                   	popa   
 68c:	70 52                	jo     6e0 <sysEnter_Vector-0x12f920>
 68e:	65                   	gs
 68f:	71 75                	jno    706 <sysEnter_Vector-0x12f8fa>
 691:	69 72 65 64 54 6f 46 	imul   esi,DWORD PTR [edx+0x65],0x466f5464
 698:	75 6c                	jne    706 <sysEnter_Vector-0x12f8fa>
 69a:	66 69 6c 6c 52 65 71 	imul   bp,WORD PTR [esp+ebp*2+0x52],0x7165
 6a1:	75 65                	jne    708 <sysEnter_Vector-0x12f8f8>
 6a3:	73 74                	jae    719 <sysEnter_Vector-0x12f8e7>
 6a5:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6a8:	63 2f                	arpl   WORD PTR [edi],bp
 6aa:	6d                   	ins    DWORD PTR es:[edi],dx
 6ab:	61                   	popa   
 6ac:	6c                   	ins    BYTE PTR es:[edi],dx
 6ad:	6c                   	ins    BYTE PTR es:[edi],dx
 6ae:	6f                   	outs   dx,DWORD PTR ds:[esi]
 6af:	63 2e                	arpl   WORD PTR [esi],bp
 6b1:	63 00                	arpl   WORD PTR [eax],ax
 6b3:	66                   	data16
 6b4:	72 65                	jb     71b <sysEnter_Vector-0x12f8e5>
 6b6:	65                   	gs
 6b7:	49                   	dec    ecx
 6b8:	00 70 72             	add    BYTE PTR [eax+0x72],dh
 6bb:	65                   	gs
 6bc:	76 00                	jbe    6be <sysEnter_Vector-0x12f942>
 6be:	68 65 61 70 72       	push   0x72706165
 6c3:	65 63 5f 74          	arpl   WORD PTR gs:[edi+0x74],bx
 6c7:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 6ca:	63 2f                	arpl   WORD PTR [edi],bp
 6cc:	6d                   	ins    DWORD PTR es:[edi],dx
 6cd:	65                   	gs
 6ce:	6d                   	ins    DWORD PTR es:[edi],dx
 6cf:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 6d2:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 6d5:	64                   	fs
 6d6:	65                   	gs
 6d7:	73 74                	jae    74d <sysEnter_Vector-0x12f8b3>
 6d9:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 6dc:	6d                   	ins    DWORD PTR es:[edi],dx
 6dd:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 6e0:	00 65 56             	add    BYTE PTR [ebp+0x56],ah
 6e3:	61                   	popa   
 6e4:	6c                   	ins    BYTE PTR es:[edi],dx
 6e5:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 6e8:	6d                   	ins    DWORD PTR es:[edi],dx
 6e9:	73 65                	jae    750 <sysEnter_Vector-0x12f8b0>
 6eb:	74 00                	je     6ed <sysEnter_Vector-0x12f913>
 6ed:	73 72                	jae    761 <sysEnter_Vector-0x12f89f>
 6ef:	63 2f                	arpl   WORD PTR [edi],bp
 6f1:	6d                   	ins    DWORD PTR es:[edi],dx
 6f2:	65                   	gs
 6f3:	6d                   	ins    DWORD PTR es:[edi],dx
 6f4:	73 65                	jae    75b <sysEnter_Vector-0x12f8a5>
 6f6:	74 2e                	je     726 <sysEnter_Vector-0x12f8da>
 6f8:	63 00                	arpl   WORD PTR [eax],ax
 6fa:	66 56                	push   si
 6fc:	61                   	popa   
 6fd:	6c                   	ins    BYTE PTR es:[edi],dx
 6fe:	00 6d 65             	add    BYTE PTR [ebp+0x65],ch
 701:	6d                   	ins    DWORD PTR es:[edi],dx
 702:	73 65                	jae    769 <sysEnter_Vector-0x12f897>
 704:	74 49                	je     74f <sysEnter_Vector-0x12f8b1>
 706:	00 75 69             	add    BYTE PTR [ebp+0x69],dh
 709:	6e                   	outs   dx,BYTE PTR ds:[esi]
 70a:	74 31                	je     73d <sysEnter_Vector-0x12f8c3>
 70c:	36                   	ss
 70d:	5f                   	pop    edi
 70e:	74 00                	je     710 <sysEnter_Vector-0x12f8f0>
 710:	61                   	popa   
 711:	64                   	fs
 712:	64                   	fs
 713:	72 00                	jb     715 <sysEnter_Vector-0x12f8eb>
 715:	6f                   	outs   dx,DWORD PTR ds:[esi]
 716:	66 66 5f             	data32 pop di
 719:	74 00                	je     71b <sysEnter_Vector-0x12f8e5>
 71b:	70 72                	jo     78f <sysEnter_Vector-0x12f871>
 71d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 71e:	74 00                	je     720 <sysEnter_Vector-0x12f8e0>
 720:	6f                   	outs   dx,DWORD PTR ds:[esi]
 721:	66                   	data16
 722:	66                   	data16
 723:	73 65                	jae    78a <sysEnter_Vector-0x12f876>
 725:	74 00                	je     727 <sysEnter_Vector-0x12f8d9>
 727:	6d                   	ins    DWORD PTR es:[edi],dx
 728:	6d                   	ins    DWORD PTR es:[edi],dx
 729:	61                   	popa   
 72a:	70 00                	jo     72c <sysEnter_Vector-0x12f8d4>
 72c:	73 72                	jae    7a0 <sysEnter_Vector-0x12f860>
 72e:	63 2f                	arpl   WORD PTR [edi],bp
 730:	6d                   	ins    DWORD PTR es:[edi],dx
 731:	6d                   	ins    DWORD PTR es:[edi],dx
 732:	61                   	popa   
 733:	70 2e                	jo     763 <sysEnter_Vector-0x12f89d>
 735:	63 00                	arpl   WORD PTR [eax],ax
 737:	73 72                	jae    7ab <sysEnter_Vector-0x12f855>
 739:	63 2f                	arpl   WORD PTR [edi],bp
 73b:	70 69                	jo     7a6 <sysEnter_Vector-0x12f85a>
 73d:	70 65                	jo     7a4 <sysEnter_Vector-0x12f85c>
 73f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 742:	70 69                	jo     7ad <sysEnter_Vector-0x12f853>
 744:	70 65                	jo     7ab <sysEnter_Vector-0x12f855>
 746:	00 70 69             	add    BYTE PTR [eax+0x69],dh
 749:	70 65                	jo     7b0 <sysEnter_Vector-0x12f850>
 74b:	66                   	data16
 74c:	64 00 73 5f          	add    BYTE PTR fs:[ebx+0x5f],dh
 750:	64                   	fs
 751:	65                   	gs
 752:	76 00                	jbe    754 <sysEnter_Vector-0x12f8ac>
 754:	75 69                	jne    7bf <sysEnter_Vector-0x12f841>
 756:	6e                   	outs   dx,BYTE PTR ds:[esi]
 757:	74 36                	je     78f <sysEnter_Vector-0x12f871>
 759:	34 5f                	xor    al,0x5f
 75b:	74 00                	je     75d <sysEnter_Vector-0x12f8a3>
 75d:	6d                   	ins    DWORD PTR es:[edi],dx
 75e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 75f:	74 5f                	je     7c0 <sysEnter_Vector-0x12f840>
 761:	66                   	data16
 762:	6c                   	ins    BYTE PTR es:[edi],dx
 763:	61                   	popa   
 764:	67 73 00             	addr16 jae 767 <sysEnter_Vector-0x12f899>
 767:	6d                   	ins    DWORD PTR es:[edi],dx
 768:	6b 6e 6f 64          	imul   ebp,DWORD PTR [esi+0x6f],0x64
 76c:	00 6e 65             	add    BYTE PTR [esi+0x65],ch
 76f:	78 74                	js     7e5 <sysEnter_Vector-0x12f81b>
 771:	00 6d 6b             	add    BYTE PTR [ebp+0x6b],ch
 774:	64 69 72 00 62 75 66 	imul   esi,DWORD PTR fs:[edx+0x0],0x66667562
 77b:	66 
 77c:	00 6d 6e             	add    BYTE PTR [ebp+0x6e],ch
 77f:	74 5f                	je     7e0 <sysEnter_Vector-0x12f820>
 781:	73 62                	jae    7e5 <sysEnter_Vector-0x12f81b>
 783:	00 73 5f             	add    BYTE PTR [ebx+0x5f],dh
 786:	6c                   	ins    BYTE PTR es:[edi],dx
 787:	69 73 74 00 73 75 70 	imul   esi,DWORD PTR [ebx+0x74],0x70757300
 78e:	65                   	gs
 78f:	72 5f                	jb     7f0 <sysEnter_Vector-0x12f810>
 791:	62 6c 6f 63          	bound  ebp,QWORD PTR [edi+ebp*2+0x63]
 795:	6b 00 69             	imul   eax,DWORD PTR [eax],0x69
 798:	5f                   	pop    edi
 799:	76 66                	jbe    801 <sysEnter_Vector-0x12f7ff>
 79b:	73 6d                	jae    80a <sysEnter_Vector-0x12f7f6>
 79d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 79e:	75 6e                	jne    80e <sysEnter_Vector-0x12f7f2>
 7a0:	74 00                	je     7a2 <sysEnter_Vector-0x12f85e>
 7a2:	72 65                	jb     809 <sysEnter_Vector-0x12f7f7>
 7a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7a5:	61                   	popa   
 7a6:	6d                   	ins    DWORD PTR es:[edi],dx
 7a7:	65 00 64 5f 6e       	add    BYTE PTR gs:[edi+ebx*2+0x6e],ah
 7ac:	61                   	popa   
 7ad:	6d                   	ins    DWORD PTR es:[edi],dx
 7ae:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 7b2:	63 2f                	arpl   WORD PTR [edi],bp
 7b4:	73 74                	jae    82a <sysEnter_Vector-0x12f7d6>
 7b6:	64 69 6f 2e 63 00 64 	imul   ebp,DWORD PTR fs:[edi+0x2e],0x65640063
 7bd:	65 
 7be:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7bf:	74 72                	je     833 <sysEnter_Vector-0x12f7cd>
 7c1:	79 00                	jns    7c3 <sysEnter_Vector-0x12f83d>
 7c3:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 7ca:	65                   	gs
 7cb:	72 61                	jb     82e <sysEnter_Vector-0x12f7d2>
 7cd:	74 69                	je     838 <sysEnter_Vector-0x12f7c8>
 7cf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7d0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7d1:	73 00                	jae    7d3 <sysEnter_Vector-0x12f82d>
 7d3:	72 6d                	jb     842 <sysEnter_Vector-0x12f7be>
 7d5:	64 69 72 00 69 5f 67 	imul   esi,DWORD PTR fs:[edx+0x0],0x69675f69
 7dc:	69 
 7dd:	64 00 64 6c 6c       	add    BYTE PTR fs:[esp+ebp*2+0x6c],ah
 7e2:	69 73 74 5f 74 00 69 	imul   esi,DWORD PTR [ebx+0x74],0x6900745f
 7e9:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7ea:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7eb:	64                   	fs
 7ec:	65                   	gs
 7ed:	5f                   	pop    edi
 7ee:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7ef:	70 65                	jo     856 <sysEnter_Vector-0x12f7aa>
 7f1:	72 61                	jb     854 <sysEnter_Vector-0x12f7ac>
 7f3:	74 69                	je     85e <sysEnter_Vector-0x12f7a2>
 7f5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 7f6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 7f7:	73 00                	jae    7f9 <sysEnter_Vector-0x12f807>
 7f9:	69 5f 6f 70 66 6c 61 	imul   ebx,DWORD PTR [edi+0x6f],0x616c6670
 800:	67 73 00             	addr16 jae 803 <sysEnter_Vector-0x12f7fd>
 803:	66 69 6c 65 5f 6f 70 	imul   bp,WORD PTR [ebp+eiz*2+0x5f],0x706f
 80a:	65                   	gs
 80b:	72 61                	jb     86e <sysEnter_Vector-0x12f792>
 80d:	74 69                	je     878 <sysEnter_Vector-0x12f788>
 80f:	6f                   	outs   dx,DWORD PTR ds:[esi]
 810:	6e                   	outs   dx,BYTE PTR ds:[esi]
 811:	73 5f                	jae    872 <sysEnter_Vector-0x12f78e>
 813:	74 00                	je     815 <sysEnter_Vector-0x12f7eb>
 815:	62 75 66             	bound  esi,QWORD PTR [ebp+0x66]
 818:	66 50                	push   ax
 81a:	74 72                	je     88e <sysEnter_Vector-0x12f772>
 81c:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 81f:	64                   	fs
 820:	65                   	gs
 821:	76 00                	jbe    823 <sysEnter_Vector-0x12f7dd>
 823:	70 61                	jo     886 <sysEnter_Vector-0x12f77a>
 825:	79 6c                	jns    893 <sysEnter_Vector-0x12f76d>
 827:	6f                   	outs   dx,DWORD PTR ds:[esi]
 828:	61                   	popa   
 829:	64 00 73 6c          	add    BYTE PTR fs:[ebx+0x6c],dh
 82d:	69 73 74 68 65 61 64 	imul   esi,DWORD PTR [ebx+0x74],0x64616568
 834:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 837:	6f                   	outs   dx,DWORD PTR ds:[esi]
 838:	70 00                	jo     83a <sysEnter_Vector-0x12f7c6>
 83a:	6d                   	ins    DWORD PTR es:[edi],dx
 83b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 83c:	74 5f                	je     89d <sysEnter_Vector-0x12f763>
 83e:	72 6f                	jb     8af <sysEnter_Vector-0x12f751>
 840:	6f                   	outs   dx,DWORD PTR ds:[esi]
 841:	74 00                	je     843 <sysEnter_Vector-0x12f7bd>
 843:	66 6f                	outs   dx,WORD PTR ds:[esi]
 845:	70 73                	jo     8ba <sysEnter_Vector-0x12f746>
 847:	00 66 69             	add    BYTE PTR [esi+0x69],ah
 84a:	6c                   	ins    BYTE PTR es:[edi],dx
 84b:	65                   	gs
 84c:	5f                   	pop    edi
 84d:	74 00                	je     84f <sysEnter_Vector-0x12f7b1>
 84f:	69 5f 66 6c 61 67 73 	imul   ebx,DWORD PTR [edi+0x66],0x7367616c
 856:	00 69 5f             	add    BYTE PTR [ecx+0x5f],ch
 859:	75 69                	jne    8c4 <sysEnter_Vector-0x12f73c>
 85b:	64 00 69 5f          	add    BYTE PTR fs:[ecx+0x5f],ch
 85f:	6d                   	ins    DWORD PTR es:[edi],dx
 860:	6f                   	outs   dx,DWORD PTR ds:[esi]
 861:	64 65 00 63 6f       	fs add BYTE PTR fs:gs:[ebx+0x6f],ah
 866:	6e                   	outs   dx,BYTE PTR ds:[esi]
 867:	73 6f                	jae    8d8 <sysEnter_Vector-0x12f728>
 869:	6c                   	ins    BYTE PTR es:[edi],dx
 86a:	65                   	gs
 86b:	5f                   	pop    edi
 86c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 86d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 86e:	64 65 00 69 6e       	fs add BYTE PTR fs:gs:[ecx+0x6e],ch
 873:	6f                   	outs   dx,DWORD PTR ds:[esi]
 874:	64                   	fs
 875:	65                   	gs
 876:	5f                   	pop    edi
 877:	74 00                	je     879 <sysEnter_Vector-0x12f787>
 879:	63 6f 6e             	arpl   WORD PTR [edi+0x6e],bp
 87c:	73 6f                	jae    8ed <sysEnter_Vector-0x12f713>
 87e:	6c                   	ins    BYTE PTR es:[edi],dx
 87f:	65                   	gs
 880:	5f                   	pop    edi
 881:	66 69 6c 65 00 73 5f 	imul   bp,WORD PTR [ebp+eiz*2+0x0],0x5f73
 888:	72 6f                	jb     8f9 <sysEnter_Vector-0x12f707>
 88a:	6f                   	outs   dx,DWORD PTR ds:[esi]
 88b:	74 00                	je     88d <sysEnter_Vector-0x12f773>
 88d:	64                   	fs
 88e:	5f                   	pop    edi
 88f:	69 6e 6f 64 65 00 72 	imul   ebp,DWORD PTR [esi+0x6f],0x72006564
 896:	65                   	gs
 897:	73 65                	jae    8fe <sysEnter_Vector-0x12f702>
 899:	74 52                	je     8ed <sysEnter_Vector-0x12f713>
 89b:	6f                   	outs   dx,DWORD PTR ds:[esi]
 89c:	77 00                	ja     89e <sysEnter_Vector-0x12f762>
 89e:	64                   	fs
 89f:	5f                   	pop    edi
 8a0:	70 61                	jo     903 <sysEnter_Vector-0x12f6fd>
 8a2:	72 65                	jb     909 <sysEnter_Vector-0x12f6f7>
 8a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8a5:	74 00                	je     8a7 <sysEnter_Vector-0x12f759>
 8a7:	66 5f                	pop    di
 8a9:	69 6e 6f 64 65 00 66 	imul   ebp,DWORD PTR [esi+0x6f],0x66006564
 8b0:	5f                   	pop    edi
 8b1:	70 61                	jo     914 <sysEnter_Vector-0x12f6ec>
 8b3:	74 68                	je     91d <sysEnter_Vector-0x12f6e3>
 8b5:	00 63 72             	add    BYTE PTR [ebx+0x72],ah
 8b8:	65                   	gs
 8b9:	61                   	popa   
 8ba:	74 65                	je     921 <sysEnter_Vector-0x12f6df>
 8bc:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 8bf:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8c0:	63 61 74             	arpl   WORD PTR [ecx+0x74],sp
 8c3:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 8c5:	61                   	popa   
 8c6:	74 65                	je     92d <sysEnter_Vector-0x12f6d3>
 8c8:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 8cb:	72 63                	jb     930 <sysEnter_Vector-0x12f6d0>
 8cd:	61                   	popa   
 8ce:	74 49                	je     919 <sysEnter_Vector-0x12f6e7>
 8d0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 8d3:	72 63                	jb     938 <sysEnter_Vector-0x12f6c8>
 8d5:	61                   	popa   
 8d6:	74 00                	je     8d8 <sysEnter_Vector-0x12f728>
 8d8:	73 72                	jae    94c <sysEnter_Vector-0x12f6b4>
 8da:	63 2f                	arpl   WORD PTR [edi],bp
 8dc:	73 74                	jae    952 <sysEnter_Vector-0x12f6ae>
 8de:	72 69                	jb     949 <sysEnter_Vector-0x12f6b7>
 8e0:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8e1:	67 73 2f             	addr16 jae 913 <sysEnter_Vector-0x12f6ed>
 8e4:	73 74                	jae    95a <sysEnter_Vector-0x12f6a6>
 8e6:	72 63                	jb     94b <sysEnter_Vector-0x12f6b5>
 8e8:	61                   	popa   
 8e9:	74 2e                	je     919 <sysEnter_Vector-0x12f6e7>
 8eb:	63 00                	arpl   WORD PTR [eax],ax
 8ed:	73 74                	jae    963 <sysEnter_Vector-0x12f69d>
 8ef:	72 63                	jb     954 <sysEnter_Vector-0x12f6ac>
 8f1:	6d                   	ins    DWORD PTR es:[edi],dx
 8f2:	70 00                	jo     8f4 <sysEnter_Vector-0x12f70c>
 8f4:	73 72                	jae    968 <sysEnter_Vector-0x12f698>
 8f6:	63 2f                	arpl   WORD PTR [edi],bp
 8f8:	73 74                	jae    96e <sysEnter_Vector-0x12f692>
 8fa:	72 69                	jb     965 <sysEnter_Vector-0x12f69b>
 8fc:	6e                   	outs   dx,BYTE PTR ds:[esi]
 8fd:	67 73 2f             	addr16 jae 92f <sysEnter_Vector-0x12f6d1>
 900:	73 74                	jae    976 <sysEnter_Vector-0x12f68a>
 902:	72 63                	jb     967 <sysEnter_Vector-0x12f699>
 904:	6d                   	ins    DWORD PTR es:[edi],dx
 905:	70 2e                	jo     935 <sysEnter_Vector-0x12f6cb>
 907:	63 00                	arpl   WORD PTR [eax],ax
 909:	73 74                	jae    97f <sysEnter_Vector-0x12f681>
 90b:	72 63                	jb     970 <sysEnter_Vector-0x12f690>
 90d:	70 79                	jo     988 <sysEnter_Vector-0x12f678>
 90f:	00 63 6f             	add    BYTE PTR [ebx+0x6f],ah
 912:	75 6e                	jne    982 <sysEnter_Vector-0x12f67e>
 914:	74 00                	je     916 <sysEnter_Vector-0x12f6ea>
 916:	73 74                	jae    98c <sysEnter_Vector-0x12f674>
 918:	72 63                	jb     97d <sysEnter_Vector-0x12f683>
 91a:	70 79                	jo     995 <sysEnter_Vector-0x12f66b>
 91c:	63 00                	arpl   WORD PTR [eax],ax
 91e:	73 74                	jae    994 <sysEnter_Vector-0x12f66c>
 920:	72 63                	jb     985 <sysEnter_Vector-0x12f67b>
 922:	70 79                	jo     99d <sysEnter_Vector-0x12f663>
 924:	49                   	dec    ecx
 925:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 928:	63 2f                	arpl   WORD PTR [edi],bp
 92a:	73 74                	jae    9a0 <sysEnter_Vector-0x12f660>
 92c:	72 69                	jb     997 <sysEnter_Vector-0x12f669>
 92e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 92f:	67 73 2f             	addr16 jae 961 <sysEnter_Vector-0x12f69f>
 932:	73 74                	jae    9a8 <sysEnter_Vector-0x12f658>
 934:	72 63                	jb     999 <sysEnter_Vector-0x12f667>
 936:	70 79                	jo     9b1 <sysEnter_Vector-0x12f64f>
 938:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 93b:	63 68 65             	arpl   WORD PTR [eax+0x65],bp
 93e:	63 6b 5f             	arpl   WORD PTR [ebx+0x5f],bp
 941:	64 69 67 69 74 00 73 	imul   esp,DWORD PTR fs:[edi+0x69],0x74730074
 948:	74 
 949:	72 69                	jb     9b4 <sysEnter_Vector-0x12f64c>
 94b:	73 6e                	jae    9bb <sysEnter_Vector-0x12f645>
 94d:	75 6d                	jne    9bc <sysEnter_Vector-0x12f644>
 94f:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 952:	63 2f                	arpl   WORD PTR [edi],bp
 954:	73 74                	jae    9ca <sysEnter_Vector-0x12f636>
 956:	72 69                	jb     9c1 <sysEnter_Vector-0x12f63f>
 958:	6e                   	outs   dx,BYTE PTR ds:[esi]
 959:	67 73 2f             	addr16 jae 98b <sysEnter_Vector-0x12f675>
 95c:	73 74                	jae    9d2 <sysEnter_Vector-0x12f62e>
 95e:	72 69                	jb     9c9 <sysEnter_Vector-0x12f637>
 960:	73 6e                	jae    9d0 <sysEnter_Vector-0x12f630>
 962:	75 6d                	jne    9d1 <sysEnter_Vector-0x12f62f>
 964:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 967:	73 74                	jae    9dd <sysEnter_Vector-0x12f623>
 969:	72 6c                	jb     9d7 <sysEnter_Vector-0x12f629>
 96b:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 96d:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 970:	63 2f                	arpl   WORD PTR [edi],bp
 972:	73 74                	jae    9e8 <sysEnter_Vector-0x12f618>
 974:	72 69                	jb     9df <sysEnter_Vector-0x12f621>
 976:	6e                   	outs   dx,BYTE PTR ds:[esi]
 977:	67 73 2f             	addr16 jae 9a9 <sysEnter_Vector-0x12f657>
 97a:	73 74                	jae    9f0 <sysEnter_Vector-0x12f610>
 97c:	72 6c                	jb     9ea <sysEnter_Vector-0x12f616>
 97e:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 980:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 983:	73 74                	jae    9f9 <sysEnter_Vector-0x12f607>
 985:	72 6c                	jb     9f3 <sysEnter_Vector-0x12f60d>
 987:	65 6e                	outs   dx,BYTE PTR gs:[esi]
 989:	49                   	dec    ecx
 98a:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 98d:	72 6e                	jb     9fd <sysEnter_Vector-0x12f603>
 98f:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 992:	49                   	dec    ecx
 993:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 996:	72 6e                	jb     a06 <sysEnter_Vector-0x12f5fa>
 998:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 99b:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 99e:	63 2f                	arpl   WORD PTR [edi],bp
 9a0:	73 74                	jae    a16 <sysEnter_Vector-0x12f5ea>
 9a2:	72 69                	jb     a0d <sysEnter_Vector-0x12f5f3>
 9a4:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9a5:	67 73 2f             	addr16 jae 9d7 <sysEnter_Vector-0x12f629>
 9a8:	73 74                	jae    a1e <sysEnter_Vector-0x12f5e2>
 9aa:	72 6e                	jb     a1a <sysEnter_Vector-0x12f5e6>
 9ac:	63 6d 70             	arpl   WORD PTR [ebp+0x70],bp
 9af:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9b2:	73 72                	jae    a26 <sysEnter_Vector-0x12f5da>
 9b4:	63 2f                	arpl   WORD PTR [edi],bp
 9b6:	73 74                	jae    a2c <sysEnter_Vector-0x12f5d4>
 9b8:	72 69                	jb     a23 <sysEnter_Vector-0x12f5dd>
 9ba:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9bb:	67 73 2f             	addr16 jae 9ed <sysEnter_Vector-0x12f613>
 9be:	73 74                	jae    a34 <sysEnter_Vector-0x12f5cc>
 9c0:	72 6e                	jb     a30 <sysEnter_Vector-0x12f5d0>
 9c2:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9c5:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9c8:	73 74                	jae    a3e <sysEnter_Vector-0x12f5c2>
 9ca:	72 6e                	jb     a3a <sysEnter_Vector-0x12f5c6>
 9cc:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9cf:	49                   	dec    ecx
 9d0:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 9d3:	72 6e                	jb     a43 <sysEnter_Vector-0x12f5bd>
 9d5:	63 70 79             	arpl   WORD PTR [eax+0x79],si
 9d8:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 9db:	63 2f                	arpl   WORD PTR [edi],bp
 9dd:	73 74                	jae    a53 <sysEnter_Vector-0x12f5ad>
 9df:	72 69                	jb     a4a <sysEnter_Vector-0x12f5b6>
 9e1:	6e                   	outs   dx,BYTE PTR ds:[esi]
 9e2:	67 73 2f             	addr16 jae a14 <sysEnter_Vector-0x12f5ec>
 9e5:	73 74                	jae    a5b <sysEnter_Vector-0x12f5a5>
 9e7:	72 6f                	jb     a58 <sysEnter_Vector-0x12f5a8>
 9e9:	75 6c                	jne    a57 <sysEnter_Vector-0x12f5a9>
 9eb:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 9ee:	63 75 74             	arpl   WORD PTR [ebp+0x74],si
 9f1:	6f                   	outs   dx,DWORD PTR ds:[esi]
 9f2:	66                   	data16
 9f3:	66                   	data16
 9f4:	00 63 75             	add    BYTE PTR [ebx+0x75],ah
 9f7:	74 6c                	je     a65 <sysEnter_Vector-0x12f59b>
 9f9:	69 6d 00 73 74 72 74 	imul   ebp,DWORD PTR [ebp+0x0],0x74727473
 a00:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a01:	75 6c                	jne    a6f <sysEnter_Vector-0x12f591>
 a03:	00 65 6e             	add    BYTE PTR [ebp+0x6e],ah
 a06:	64                   	fs
 a07:	70 74                	jo     a7d <sysEnter_Vector-0x12f583>
 a09:	72 00                	jb     a0b <sysEnter_Vector-0x12f5f5>
 a0b:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a0c:	70 74                	jo     a82 <sysEnter_Vector-0x12f57e>
 a0e:	72 00                	jb     a10 <sysEnter_Vector-0x12f5f0>
 a10:	62 61 73             	bound  esp,QWORD PTR [ecx+0x73]
 a13:	65 00 73 72          	add    BYTE PTR gs:[ebx+0x72],dh
 a17:	63 2f                	arpl   WORD PTR [edi],bp
 a19:	73 74                	jae    a8f <sysEnter_Vector-0x12f571>
 a1b:	72 69                	jb     a86 <sysEnter_Vector-0x12f57a>
 a1d:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a1e:	67 73 2f             	addr16 jae a50 <sysEnter_Vector-0x12f5b0>
 a21:	73 74                	jae    a97 <sysEnter_Vector-0x12f569>
 a23:	72 70                	jb     a95 <sysEnter_Vector-0x12f56b>
 a25:	61                   	popa   
 a26:	72 74                	jb     a9c <sysEnter_Vector-0x12f564>
 a28:	73 2e                	jae    a58 <sysEnter_Vector-0x12f5a8>
 a2a:	63 00                	arpl   WORD PTR [eax],ax
 a2c:	73 74                	jae    aa2 <sysEnter_Vector-0x12f55e>
 a2e:	72 6c                	jb     a9c <sysEnter_Vector-0x12f564>
 a30:	65                   	gs
 a31:	66                   	data16
 a32:	74 00                	je     a34 <sysEnter_Vector-0x12f5cc>
 a34:	73 72                	jae    aa8 <sysEnter_Vector-0x12f558>
 a36:	63 2f                	arpl   WORD PTR [edi],bp
 a38:	73 74                	jae    aae <sysEnter_Vector-0x12f552>
 a3a:	72 69                	jb     aa5 <sysEnter_Vector-0x12f55b>
 a3c:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a3d:	67 73 2f             	addr16 jae a6f <sysEnter_Vector-0x12f591>
 a40:	73 74                	jae    ab6 <sysEnter_Vector-0x12f54a>
 a42:	72 74                	jb     ab8 <sysEnter_Vector-0x12f548>
 a44:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a45:	6c                   	ins    BYTE PTR es:[edi],dx
 a46:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a49:	73 74                	jae    abf <sysEnter_Vector-0x12f541>
 a4b:	72 74                	jb     ac1 <sysEnter_Vector-0x12f53f>
 a4d:	6f                   	outs   dx,DWORD PTR ds:[esi]
 a4e:	6c                   	ins    BYTE PTR es:[edi],dx
 a4f:	00 69 6e             	add    BYTE PTR [ecx+0x6e],ch
 a52:	70 75                	jo     ac9 <sysEnter_Vector-0x12f537>
 a54:	74 00                	je     a56 <sysEnter_Vector-0x12f5aa>
 a56:	73 72                	jae    aca <sysEnter_Vector-0x12f536>
 a58:	63 2f                	arpl   WORD PTR [edi],bp
 a5a:	73 74                	jae    ad0 <sysEnter_Vector-0x12f530>
 a5c:	72 69                	jb     ac7 <sysEnter_Vector-0x12f539>
 a5e:	6e                   	outs   dx,BYTE PTR ds:[esi]
 a5f:	67 73 2f             	addr16 jae a91 <sysEnter_Vector-0x12f56f>
 a62:	73 74                	jae    ad8 <sysEnter_Vector-0x12f528>
 a64:	72 74                	jb     ada <sysEnter_Vector-0x12f526>
 a66:	72 69                	jb     ad1 <sysEnter_Vector-0x12f52f>
 a68:	6d                   	ins    DWORD PTR es:[edi],dx
 a69:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a6c:	73 74                	jae    ae2 <sysEnter_Vector-0x12f51e>
 a6e:	72 74                	jb     ae4 <sysEnter_Vector-0x12f51c>
 a70:	72 69                	jb     adb <sysEnter_Vector-0x12f525>
 a72:	6d                   	ins    DWORD PTR es:[edi],dx
 a73:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a76:	72 74                	jb     aec <sysEnter_Vector-0x12f514>
 a78:	72 69                	jb     ae3 <sysEnter_Vector-0x12f51d>
 a7a:	6d                   	ins    DWORD PTR es:[edi],dx
 a7b:	49                   	dec    ecx
 a7c:	00 73 74             	add    BYTE PTR [ebx+0x74],dh
 a7f:	72 73                	jb     af4 <sysEnter_Vector-0x12f50c>
 a81:	74 72                	je     af5 <sysEnter_Vector-0x12f50b>
 a83:	49                   	dec    ecx
 a84:	00 73 72             	add    BYTE PTR [ebx+0x72],dh
 a87:	63 2f                	arpl   WORD PTR [edi],bp
 a89:	73 74                	jae    aff <sysEnter_Vector-0x12f501>
 a8b:	72 73                	jb     b00 <sysEnter_Vector-0x12f500>
 a8d:	74 72                	je     b01 <sysEnter_Vector-0x12f4ff>
 a8f:	2e 63 00             	arpl   WORD PTR cs:[eax],ax
 a92:	73 74                	jae    b08 <sysEnter_Vector-0x12f4f8>
 a94:	72 73                	jb     b09 <sysEnter_Vector-0x12f4f7>
 a96:	74 72                	je     b0a <sysEnter_Vector-0x12f4f6>
 a98:	00 72 63             	add    BYTE PTR [edx+0x63],dh
 a9b:	73 69                	jae    b06 <sysEnter_Vector-0x12f4fa>
 a9d:	64 00 73 75          	add    BYTE PTR fs:[ebx+0x75],dh
 aa1:	62 73 74             	bound  esi,QWORD PTR [ebx+0x74]
 aa4:	72 69                	jb     b0f <sysEnter_Vector-0x12f4f1>
 aa6:	6e                   	outs   dx,BYTE PTR ds:[esi]
 aa7:	67 00 73 72          	add    BYTE PTR [bp+di+0x72],dh
 aab:	63 2f                	arpl   WORD PTR [edi],bp
 aad:	74 69                	je     b18 <sysEnter_Vector-0x12f4e8>
 aaf:	6d                   	ins    DWORD PTR es:[edi],dx
 ab0:	65 2e 63 00          	gs arpl WORD PTR cs:gs:[eax],ax
 ab4:	6c                   	ins    BYTE PTR es:[edi],dx
 ab5:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ab6:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 ab9:	74 69                	je     b24 <sysEnter_Vector-0x12f4dc>
 abb:	6d                   	ins    DWORD PTR es:[edi],dx
 abc:	65 00 74 6d 5f       	add    BYTE PTR gs:[ebp+ebp*2+0x5f],dh
 ac1:	68 6f 75 72 00       	push   0x72756f
 ac6:	67                   	addr16
 ac7:	65                   	gs
 ac8:	74 74                	je     b3e <sysEnter_Vector-0x12f4c2>
 aca:	69 63 6b 73 00 5f 64 	imul   esp,DWORD PTR [ebx+0x6b],0x645f0073
 ad1:	61                   	popa   
 ad2:	79 6c                	jns    b40 <sysEnter_Vector-0x12f4c0>
 ad4:	69 67 68 74 00 5f 74 	imul   esp,DWORD PTR [edi+0x68],0x745f0074
 adb:	7a 6e                	jp     b4b <sysEnter_Vector-0x12f4b5>
 add:	61                   	popa   
 ade:	6d                   	ins    DWORD PTR es:[edi],dx
 adf:	65 00 67 6d          	add    BYTE PTR gs:[edi+0x6d],ah
 ae3:	74 69                	je     b4e <sysEnter_Vector-0x12f4b2>
 ae5:	6d                   	ins    DWORD PTR es:[edi],dx
 ae6:	65                   	gs
 ae7:	5f                   	pop    edi
 ae8:	72 00                	jb     aea <sysEnter_Vector-0x12f516>
 aea:	74 69                	je     b55 <sysEnter_Vector-0x12f4ab>
 aec:	63 6b 73             	arpl   WORD PTR [ebx+0x73],bp
 aef:	54                   	push   esp
 af0:	6f                   	outs   dx,DWORD PTR ds:[esi]
 af1:	57                   	push   edi
 af2:	61                   	popa   
 af3:	69 74 00 74 6d 5f 6d 	imul   esi,DWORD PTR [eax+eax*1+0x74],0x6f6d5f6d
 afa:	6f 
 afb:	6e                   	outs   dx,BYTE PTR ds:[esi]
 afc:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b00:	79 65                	jns    b67 <sysEnter_Vector-0x12f499>
 b02:	61                   	popa   
 b03:	72 00                	jb     b05 <sysEnter_Vector-0x12f4fb>
 b05:	6d                   	ins    DWORD PTR es:[edi],dx
 b06:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b07:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b08:	74 68                	je     b72 <sysEnter_Vector-0x12f48e>
 b0a:	00 67 65             	add    BYTE PTR [edi+0x65],ah
 b0d:	74 74                	je     b83 <sysEnter_Vector-0x12f47d>
 b0f:	69 6d 65 00 74 6d 5f 	imul   ebp,DWORD PTR [ebp+0x65],0x5f6d7400
 b16:	69 73 64 73 74 00 64 	imul   esi,DWORD PTR [ebx+0x64],0x64007473
 b1d:	61                   	popa   
 b1e:	79 6e                	jns    b8e <sysEnter_Vector-0x12f472>
 b20:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b21:	00 67 6d             	add    BYTE PTR [edi+0x6d],ah
 b24:	74 69                	je     b8f <sysEnter_Vector-0x12f471>
 b26:	6d                   	ins    DWORD PTR es:[edi],dx
 b27:	65                   	gs
 b28:	5f                   	pop    edi
 b29:	72 49                	jb     b74 <sysEnter_Vector-0x12f48c>
 b2b:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b2f:	6d                   	ins    DWORD PTR es:[edi],dx
 b30:	69 6e 00 74 6d 5f 79 	imul   ebp,DWORD PTR [esi+0x0],0x795f6d74
 b37:	64                   	fs
 b38:	61                   	popa   
 b39:	79 00                	jns    b3b <sysEnter_Vector-0x12f4c5>
 b3b:	6c                   	ins    BYTE PTR es:[edi],dx
 b3c:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b3d:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b40:	54                   	push   esp
 b41:	69 6d 65 00 74 6d 62 	imul   ebp,DWORD PTR [ebp+0x65],0x626d7400
 b48:	75 66                	jne    bb0 <sysEnter_Vector-0x12f450>
 b4a:	00 74 69 6d          	add    BYTE PTR [ecx+ebp*2+0x6d],dh
 b4e:	65                   	gs
 b4f:	5f                   	pop    edi
 b50:	74 00                	je     b52 <sysEnter_Vector-0x12f4ae>
 b52:	6c                   	ins    BYTE PTR es:[edi],dx
 b53:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b54:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 b57:	74 69                	je     bc2 <sysEnter_Vector-0x12f43e>
 b59:	6d                   	ins    DWORD PTR es:[edi],dx
 b5a:	65                   	gs
 b5b:	5f                   	pop    edi
 b5c:	72 00                	jb     b5e <sysEnter_Vector-0x12f4a2>
 b5e:	64                   	fs
 b5f:	61                   	popa   
 b60:	79 63                	jns    bc5 <sysEnter_Vector-0x12f43b>
 b62:	6c                   	ins    BYTE PTR es:[edi],dx
 b63:	6f                   	outs   dx,DWORD PTR ds:[esi]
 b64:	63 6b 00             	arpl   WORD PTR [ebx+0x0],bp
 b67:	6d                   	ins    DWORD PTR es:[edi],dx
 b68:	6b 74 69 6d 65       	imul   esi,DWORD PTR [ecx+ebp*2+0x6d],0x65
 b6d:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b71:	67 6d                	ins    DWORD PTR es:[di],dx
 b73:	74 6f                	je     be4 <sysEnter_Vector-0x12f41c>
 b75:	66                   	data16
 b76:	66                   	data16
 b77:	00 74 6d 5f          	add    BYTE PTR [ebp+ebp*2+0x5f],dh
 b7b:	77 64                	ja     be1 <sysEnter_Vector-0x12f41f>
 b7d:	61                   	popa   
 b7e:	79 00                	jns    b80 <sysEnter_Vector-0x12f480>
 b80:	5f                   	pop    edi
 b81:	79 74                	jns    bf7 <sysEnter_Vector-0x12f409>
 b83:	61                   	popa   
 b84:	62 00                	bound  eax,QWORD PTR [eax]
 b86:	74 6d                	je     bf5 <sysEnter_Vector-0x12f40b>
 b88:	5f                   	pop    edi
 b89:	6d                   	ins    DWORD PTR es:[edi],dx
 b8a:	64                   	fs
 b8b:	61                   	popa   
 b8c:	79 00                	jns    b8e <sysEnter_Vector-0x12f472>
 b8e:	74 6d                	je     bfd <sysEnter_Vector-0x12f403>
 b90:	5f                   	pop    edi
 b91:	73 65                	jae    bf8 <sysEnter_Vector-0x12f408>
 b93:	63 00                	arpl   WORD PTR [eax],ax
 b95:	74 6d                	je     c04 <sysEnter_Vector-0x12f3fc>
 b97:	5f                   	pop    edi
 b98:	7a 6f                	jp     c09 <sysEnter_Vector-0x12f3f7>
 b9a:	6e                   	outs   dx,BYTE PTR ds:[esi]
 b9b:	65 00 74 69 6d       	add    BYTE PTR gs:[ecx+ebp*2+0x6d],dh
 ba0:	65                   	gs
 ba1:	72 00                	jb     ba3 <sysEnter_Vector-0x12f45d>
 ba3:	6c                   	ins    BYTE PTR es:[edi],dx
 ba4:	6f                   	outs   dx,DWORD PTR ds:[esi]
 ba5:	63 61 6c             	arpl   WORD PTR [ecx+0x6c],sp
 ba8:	74 69                	je     c13 <sysEnter_Vector-0x12f3ed>
 baa:	6d                   	ins    DWORD PTR es:[edi],dx
 bab:	65                   	gs
 bac:	5f                   	pop    edi
 bad:	72 49                	jb     bf8 <sysEnter_Vector-0x12f408>
 baf:	00 5f 64             	add    BYTE PTR [edi+0x64],bl
 bb2:	73 74                	jae    c28 <sysEnter_Vector-0x12f3d8>
 bb4:	62 69 61             	bound  ebp,QWORD PTR [ecx+0x61]
 bb7:	73 00                	jae    bb9 <sysEnter_Vector-0x12f447>
 bb9:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bba:	76 65                	jbe    c21 <sysEnter_Vector-0x12f3df>
 bbc:	72 66                	jb     c24 <sysEnter_Vector-0x12f3dc>
 bbe:	6c                   	ins    BYTE PTR es:[edi],dx
 bbf:	6f                   	outs   dx,DWORD PTR ds:[esi]
 bc0:	77 00                	ja     bc2 <sysEnter_Vector-0x12f43e>

Disassembly of section .comment:

00000000 <.comment>:
   0:	47                   	inc    edi
   1:	43                   	inc    ebx
   2:	43                   	inc    ebx
   3:	3a 20                	cmp    ah,BYTE PTR [eax]
   5:	28 47 4e             	sub    BYTE PTR [edi+0x4e],al
   8:	55                   	push   ebp
   9:	29 20                	sub    DWORD PTR [eax],esp
   b:	35 2e 33 2e 30       	xor    eax,0x302e332e
	...
