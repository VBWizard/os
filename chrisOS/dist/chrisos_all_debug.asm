
Debug/cross-Linux/chrisos:     file format elf32-i386


Disassembly of section .text:

00001000 <tos>:
tos():
/home/yogi/src/os/chrisOS/asm/boot.s:15
.att_syntax noprefix
.code16
.globl tos
.type tos, @function
tos:
    ljmp $0,$tos3
    1000:	ea 05 10 00 00 e9 da 	jmp    0xdae9:0x1005

00001005 <tos3>:
tos3():
/home/yogi/src/os/chrisOS/asm/boot.s:18
tos3:
.code32
        jmp	initAP	# initialize awakened AP
    1005:	e9 da 06 00 00       	jmp    16e4 <initAP>
    100a:	66 90                	xchg   ax,ax
    100c:	02 b0 ad 1b 03 00    	add    dh,BYTE PTR [eax+0x31bad]
    1012:	00 00                	add    BYTE PTR [eax],al
    1014:	fb                   	sti    
    1015:	4f                   	dec    edi
    1016:	52                   	push   edx
    1017:	e4 e8                	in     al,0xe8

00001018 <_start>:
_start():
/home/yogi/src/os/chrisOS/asm/boot.s:84
        //mov %esp, stack_top

	# We are now ready to actually execute C code. We cannot embed that in an
	# assembly file, so we'll create a kernel.c file in a moment. In that file,
	# we'll create a C entry point called kernel_main and call it here.
	call kernel_main
    1018:	e8 2e 35 02 00       	call   2454b <kernel_main>
/home/yogi/src/os/chrisOS/asm/boot.s:92
	# infinite loop. To do that, we use the clear interrupt ('cli') instruction
	# to disable interrupts, the halt instruction ('hlt') to stop the CPU until
	# the next interrupt arrives, and jumping to the halt instruction if it ever
	# continues execution, just to be safe. We will create a local label rather
	# than real symbol and jump to there endlessly.
	cli
    101d:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/boot.s:93
	hlt
    101e:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/boot.s:95
.Lhang:
	jmp .Lhang
    101f:	eb fe                	jmp    101f <_start+0x7>
    1021:	66 90                	xchg   ax,ax
    1023:	66 90                	xchg   ax,ax
    1025:	66 90                	xchg   ax,ax
    1027:	90                   	nop

00001028 <isE820Available>:
isE820Available():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:11

.globl isE820Available
.type isE820Available, @function
isE820Available:
.code32
mov eax,0x10
    1028:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:12
mov ds,eax
    102d:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:13
mov saveESP, esp
    102f:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:14
mov sp, 0xfffc
    1035:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:15
call leaveProtMode
    1039:	e8 67 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:17
.code16
mov ax, 0x8000
    103e:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:19
mov ss, ax
pusha
    1043:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:20
mov eax,0x0000E820
    1044:	66 b8 20 e8          	mov    ax,0xe820
    1048:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:21
mov edx, 0x534D4150
    104a:	66 ba 50 41          	mov    dx,0x4150
    104e:	4d                   	dec    ebp
    104f:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:22
mov ebx, 0
    1050:	66 bb 00 00          	mov    bx,0x0
    1054:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:23
mov ecx, 100
    1056:	66 b9 64 00          	mov    cx,0x64
    105a:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:24
lea di, e820data
    105c:	8d 3e                	lea    edi,[esi]
    105e:	dd 12                	fst    QWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:25
int 0x15
    1060:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:26
mov savedValue, eax
    1062:	66 a3 c5 12 61 e8    	mov    ds:0xe86112c5,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:29
popa
.code32
call reenterProtMode
    1068:	83 00 00             	add    DWORD PTR [eax],0x0
    106b:	00 c3                	add    bl,al

0000106d <getInt12Memory>:
getInt12Memory():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:37

.globl getInt12Memory
.type getInt12Memory, @function
getInt12Memory:
.code32
mov eax,0x10
    106d:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:38
mov ds,eax
    1072:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:39
mov saveESP, esp
    1074:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:40
mov sp, 0xfffc
    107a:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:41
call leaveProtMode
    107e:	e8 22 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:43
.code16
mov ax, 0x8000
    1083:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:45
mov ss, ax
int 0x12
    1088:	cd 12                	int    0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:46
movzx edx,ax
    108a:	66 0f b7 d0          	movzx  dx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:47
mov savedValue, edx
    108e:	66 89 16             	mov    WORD PTR [esi],dx
    1091:	c5 12                	lds    edx,FWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:48
mov ax, 0x1112    
    1093:	b8 12 11 30 db       	mov    eax,0xdb301112
/home/yogi/src/os/chrisOS/asm/bootCPU.s:50
xor bl, bl    
int 0x10 
    1098:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:52
.code32
call reenterProtMode
    109a:	e8 50 00 00 00       	call   10ef <reenterProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:53
ret
    109f:	c3                   	ret    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:54
jmp hang
    10a0:	e9 b6 00 00 00       	jmp    115b <hang>

000010a5 <leaveProtMode>:
leaveProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:60
//background, do on team, etc.
.globl leaveProtMode
.type leaveProtMode, @function
leaveProtMode:
.code32
lgdt [rmGdtp]
    10a5:	0f 01 15 3c 04 12 00 	lgdtd  ds:0x12043c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:61
jmp 0x8:Into16BitProt
    10ac:	ea b3 10 00 00 08 00 	jmp    0x8:0x10b3

000010b3 <Into16BitProt>:
Into16BitProt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:64
Into16BitProt:
.code16
mov ax,0x10
    10b3:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:66
mov ds, ax
mov gs, ax
    10b8:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:67
mov fs, ax
    10ba:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:68
mov es, ax
    10bc:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:70
.code32
mov eax, cr0
    10be:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:71
and al, 0xFe
    10c1:	24 fe                	and    al,0xfe
/home/yogi/src/os/chrisOS/asm/bootCPU.s:72
mov cr0, eax
    10c3:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:74
.code32
jmp 0:LeaveProtModeJmp
    10c6:	ea cd 10 00 00 00 00 	jmp    0x0:0x10cd

000010cd <LeaveProtModeJmp>:
LeaveProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:77
LeaveProtModeJmp:
.code16
mov ax, 0
    10cd:	b8 00 00 8e d8       	mov    eax,0xd88e0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:79
mov ds, ax
mov es, ax
    10d2:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:80
mov fs, ax
    10d4:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:81
mov gs, ax
    10d6:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:82
sidt [saved_idt]
    10d8:	0f 01 0e             	sidtd  [esi]
    10db:	d7                   	xlat   BYTE PTR ds:[ebx]
    10dc:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:83
lidt [idt_real]
    10de:	01 1e                	add    DWORD PTR [esi],ebx
    10e0:	cf                   	iret   
    10e1:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:84
sgdt [saved_gdt16_lo]
    10e3:	01 06                	add    DWORD PTR [esi],eax
    10e5:	bb 12 b8 00 00       	mov    ebx,0xb812
/home/yogi/src/os/chrisOS/asm/bootCPU.s:87
.code16
mov ax,0
mov ss,ax
    10ea:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:88
mov ds, ax
    10ec:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:90
.code32
ret
    10ee:	c3                   	ret    

000010ef <reenterProtMode>:
reenterProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:96

.globl reenterProtMode
.type reenterProtMode, @function
reenterProtMode:
.code16
lgdt [saved_gdt16_lo]
    10ef:	0f 01 16             	lgdtd  [esi]
    10f2:	bb 12 0f 01 1e       	mov    ebx,0x1e010f12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:97
lidt [saved_idt]
    10f7:	d7                   	xlat   BYTE PTR ds:[ebx]
    10f8:	12 0f                	adc    cl,BYTE PTR [edi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:99
.code32
mov eax, cr0
    10fa:	20 c0                	and    al,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:100
or  al, 0x1
    10fc:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:102
.code16
or  eax,0x10000   #clr 05/12/2016 - added wp bit
    10fe:	66 0d 00 00          	or     ax,0x0
    1102:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:104
.code32
mov cr0, eax
    1104:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:106
.code16
ljmp 0x18:reenterProtModeJmp
    1107:	ea 0c 11 18 00 66 b8 	jmp    0xb866:0x18110c

0000110c <reenterProtModeJmp>:
reenterProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:109
reenterProtModeJmp:
.code32
mov ax,0x10
    110c:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:110
mov ds,ax
    1110:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:111
mov es,ax
    1112:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:112
mov gs,ax
    1114:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:113
lgdt [kernelGDT]
    1116:	0f 01 15 4c 04 12 00 	lgdtd  ds:0x12044c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:114
ljmp 0x8:reenterProtMode32Jmp
    111d:	ea 24 11 00 00 08 00 	jmp    0x8:0x1124

00001124 <reenterProtMode32Jmp>:
reenterProtMode32Jmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:117
reenterProtMode32Jmp:
.code16
mov ax,0x10
    1124:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:119
mov ds,ax
mov ss,ax
    1129:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:120
mov es,ax
    112b:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:121
mov fs,ax
    112d:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:122
mov gs,ax
    112f:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:124
.code32
mov eax,savedValue
    1131:	a1 c5 12 00 00       	mov    eax,ds:0x12c5
/home/yogi/src/os/chrisOS/asm/bootCPU.s:125
mov esp,saveESP
    1136:	8b 25 c1 12 00 00    	mov    esp,DWORD PTR ds:0x12c1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:126
ret
    113c:	c3                   	ret    

0000113d <set_gdt>:
set_gdt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:132

.globl set_gdt
.type set_gdt, @function
set_gdt:
.code32
push eax
    113d:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:133
    mov eax, [esp + 0x8]
    113e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:134
    lgdt [eax]
    1142:	0f 01 10             	lgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:135
    pop eax
    1145:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:136
    jmp 0x08:.reload_CS
    1146:	ea 4d 11 00 00 08 00 	jmp    0x8:0x114d

0000114d <.reload_CS>:
.reload_CS():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:139
.reload_CS:
.code16
    mov ax, 0x10
    114d:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:141
    mov ds, ax
    mov es, ax
    1152:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:142
    mov fs, ax
    1154:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:143
    mov gs, ax
    1156:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:144
    mov ss, ax
    1158:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:146
.code32
    ret
    115a:	c3                   	ret    

0000115b <hang>:
hang():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:148
hang:
    hlt
    115b:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:149
    jmp hang
    115c:	eb fd                	jmp    115b <hang>

0000115e <idt_load>:
idt_load():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:156
// Loads the IDT defined in '_idtp' into the processor.
// This is declared in C as 'extern void idt_load();'
.globl idt_load
.type idt_load, @function
idt_load:
    push ebp
    115e:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:157
    mov ebp, esp
    115f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:158
    push eax
    1161:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:159
    push ebx
    1162:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:160
    cli
    1163:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:161
    mov eax,[ebp+12]    #size + bottom of offset
    1164:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:162
    mov ebx,[ebp+8]     #top of offset
    1167:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:163
    ror eax,16          #mov the size out of the way
    116a:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:164
    mov ax,bx           #move the top of the address
    116d:	66 89 d8             	mov    ax,bx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:165
    ror eax,16
    1170:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:166
    shr ebx,16
    1173:	c1 eb 10             	shr    ebx,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:167
    mov idtPtrToLoad,eax
    1176:	a3 56 15 00 00       	mov    ds:0x1556,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:168
    mov idtPtrToLoad+4,ebx
    117b:	89 1d 5a 15 00 00    	mov    DWORD PTR ds:0x155a,ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:171
    //we always put our IDT in idtPtrToLoad before calling idt_load
//    mov eax, word ptr idtPtrToLoad
    lidt [idtPtrToLoad]
    1181:	0f 01 1d 56 15 00 00 	lidtd  ds:0x1556
/home/yogi/src/os/chrisOS/asm/bootCPU.s:172
    sti
    1188:	fb                   	sti    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:173
    pop ebx
    1189:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:174
    pop eax
    118a:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:175
    pop ebp
    118b:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:176
    ret
    118c:	c3                   	ret    

0000118d <init_PIT>:
init_PIT():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:182
 #Input
 # ebx   Desired PIT frequency in Hz
 .globl init_PIT
.type init_PIT, @function
init_PIT:
    push ebp
    118d:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:183
    mov ebp, esp
    118e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:185
    # Do some checking
    mov ebx,[ebp+8]
    1190:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:186
    pushad
    1193:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:187
    mov eax,0x10000                   #eax = reload value for slowest possible frequency (65536)
    1194:	b8 00 00 01 00       	mov    eax,0x10000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:188
    cmp ebx,18                        #Is the requested frequency too low?
    1199:	83 fb 12             	cmp    ebx,0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:189
    jbe .gotReloadValue               # yes, use slowest possible frequency
    119c:	76 34                	jbe    11d2 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:191
 
    mov eax,1                         #ax = reload value for fastest possible frequency (1)
    119e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:192
    cmp ebx,1193181                   #Is the requested frequency too high?
    11a3:	81 fb dd 34 12 00    	cmp    ebx,0x1234dd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:193
    jae .gotReloadValue               # yes, use fastest possible frequency
    11a9:	73 27                	jae    11d2 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:197
 
    # Calculate the reload value
 
    mov eax,3579545
    11ab:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:198
    mov edx,0                         #edx:eax = 3579545
    11b0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:199
    div ebx                           #eax = 3579545 / frequency, edx = remainder
    11b5:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:200
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11b7:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:201
    jb .l1                            # no, round down
    11bd:	72 01                	jb     11c0 <.l1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:202
    inc eax                           # yes, round up
    11bf:	40                   	inc    eax

000011c0 <.l1>:
.l1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:204
 .l1:
    mov ebx,3
    11c0:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:205
    mov edx,0                         #edx:eax = 3579545 * 256 / frequency
    11c5:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:206
    div ebx                           #eax = (3579545 * 256 / 3 * 256) / frequency
    11ca:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:207
    cmp edx,3 / 2                     #Is the remainder more than half?
    11cc:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:208
    jb .l2                            # no, round down
    11cf:	72 01                	jb     11d2 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:209
    inc eax                           # yes, round up
    11d1:	40                   	inc    eax

000011d2 <.gotReloadValue>:
.gotReloadValue():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:216
 
 
 # Store the reload value and calculate the actual frequency
 
 .gotReloadValue:
    push eax                          #Store reload_value for later
    11d2:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:217
    mov [PIT_reload_value],ax         #Store the reload value for later
    11d3:	66 a3 1f 13 00 00    	mov    ds:0x131f,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:218
    mov ebx,eax                       #ebx = reload value
    11d9:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:220
 
    mov eax,3579545
    11db:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:221
    mov edx,0                         #edx:eax = 3579545
    11e0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:222
    div ebx                           #eax = 3579545 / reload_value, edx = remainder
    11e5:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:223
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11e7:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:224
    jb .l3                            # no, round down
    11ed:	72 01                	jb     11f0 <.l3>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:225
    inc eax                           # yes, round up
    11ef:	40                   	inc    eax

000011f0 <.l3>:
.l3():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:227
 .l3:
    mov ebx,3
    11f0:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:228
    mov edx,0                         #edx:eax = 3579545 / reload_value
    11f5:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:229
    div ebx                           #eax = (3579545 / 3) / frequency
    11fa:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:230
    cmp edx,3 / 2                     #Is the remainder more than half?
    11fc:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:231
    jb .l4                            # no, round down
    11ff:	72 01                	jb     1202 <.l4>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:232
    inc eax                           # yes, round up
    1201:	40                   	inc    eax

00001202 <.l4>:
.l4():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:234
 .l4:
    mov [IRQ0_frequency],eax          #Store the actual frequency for displaying later
    1202:	a3 17 13 00 00       	mov    ds:0x1317,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:248
 #           time in ms = reload_value * 3000 / 3579545 * (2^42)/(2^42)
 #           time in ms = reload_value * 3000 * (2^42) / 3579545 / (2^42)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^42) * (2^32)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^10)
 
    pop ebx                           #ebx = reload_value
    1207:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:249
    mov eax,0xDBB3A062                #eax = 3000 * (2^42) / 3579545
    1208:	b8 62 a0 b3 db       	mov    eax,0xdbb3a062
/home/yogi/src/os/chrisOS/asm/bootCPU.s:250
    mul ebx                           #edx:eax = reload_value * 3000 * (2^42) / 3579545
    120d:	f7 e3                	mul    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:251
    shrd eax,edx,10
    120f:	0f ac d0 0a          	shrd   eax,edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:252
    shr edx,10                        #edx:eax = reload_value * 3000 * (2^42) / 3579545 / (2^10)
    1213:	c1 ea 0a             	shr    edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:254
 
    mov [IRQ0_ms],edx                 #Set whole ms between IRQs
    1216:	89 15 0f 13 00 00    	mov    DWORD PTR ds:0x130f,edx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:255
    mov [IRQ0_fractions],eax          #Set fractions of 1 ms between IRQs
    121c:	a3 07 13 00 00       	mov    ds:0x1307,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:260
 
 
 # Program the PIT channel
 
    pushfd
    1221:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:261
    cli                               #Disabled interrupts (just in case)
    1222:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:263
 
    mov al,0b00110100                  #channel 0, lobyte/hibyte, rate generator
    1223:	b0 34                	mov    al,0x34
/home/yogi/src/os/chrisOS/asm/bootCPU.s:264
    out 0x43, al
    1225:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:266
 
    mov ax,[PIT_reload_value]         #ax = 16 bit reload value
    1227:	66 a1 1f 13 00 00    	mov    ax,ds:0x131f
/home/yogi/src/os/chrisOS/asm/bootCPU.s:267
    out 0x40,al                       #Set low byte of PIT reload value
    122d:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:268
    mov al,ah                         #ax = high 8 bits of reload value
    122f:	88 e0                	mov    al,ah
/home/yogi/src/os/chrisOS/asm/bootCPU.s:269
    out 0x40,al                       #Set high byte of PIT reload value
    1231:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:271
 
    popfd
    1233:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:273
 
    popad
    1234:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:274
    pop ebp
    1235:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:275
    sti
    1236:	fb                   	sti    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:276
    ret
    1237:	c3                   	ret    

00001238 <getE820Memory_asm>:
getE820Memory_asm():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:282

 .globl getE820Memory_asm
.type getE820Memory_asm, @function
getE820Memory_asm:
.code32
mov eax,0x10
    1238:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:283
mov ds,eax
    123d:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:284
mov saveESP, esp
    123f:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:285
mov sp, 0xfff7
    1245:	66 bc f7 ff          	mov    sp,0xfff7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:286
call leaveProtMode
    1249:	e8 57 fe ff ff       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:287
pusha
    124e:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:289
.code16
lea eax, word ptr lowSmapTbl
    124f:	66 8d 06             	lea    ax,[esi]
    1252:	76 13                	jbe    1267 <getE820Memory_asm+0x2f>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:291
.code32
movzx eax,ax
    1254:	0f b7 c0             	movzx  eax,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:292
mov lowSmapTablePtr,eax
    1257:	a3 6e 13 00 00       	mov    ds:0x136e,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:293
mov ax, 0
    125c:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:294
mov es, ax
    1260:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:295
mov ebx, 0
    1262:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:297
.code16
lea edi, word ptr [lowSmapTbl]
    1267:	66 8d 3e             	lea    di,[esi]
    126a:	76 13                	jbe    127f <getE820Memory_asm_getNext+0x13>

0000126c <getE820Memory_asm_getNext>:
.code32():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:300
.code32:
getE820Memory_asm_getNext:
mov eax, 0xe820
    126c:	66 b8 20 e8          	mov    ax,0xe820
    1270:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:301
mov edx, 0x534D4150
    1272:	66 ba 50 41          	mov    dx,0x4150
    1276:	4d                   	dec    ebp
    1277:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:302
mov ecx, 0x24
    1278:	66 b9 24 00          	mov    cx,0x24
    127c:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:303
int 0x15
    127e:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:304
add edi,24
    1280:	66 83 c7 18          	add    di,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:305
cmp eax, 0x534D4150
    1284:	66 3d 50 41          	cmp    ax,0x4150
    1288:	4d                   	dec    ebp
    1289:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:306
jne getE820Memory_asm_exit
    128a:	75 1c                	jne    12a8 <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:307
cmp ecx,20
    128c:	66 83 f9 14          	cmp    cx,0x14
/home/yogi/src/os/chrisOS/asm/bootCPU.s:308
jl getE820Memory_asm_exit
    1290:	7c 16                	jl     12a8 <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:309
push eax
    1292:	66 50                	push   ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:310
mov eax,recCnt
    1294:	66 a1 cd 12 66 40    	mov    ax,ds:0x406612cd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:312
inc eax
mov recCnt, eax
    129a:	66 a3 cd 12 66 58    	mov    ds:0x586612cd,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:314
pop eax
cmp ebx,0
    12a0:	66 83 fb 00          	cmp    bx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:315
je  getE820Memory_asm_exit
    12a4:	74 02                	je     12a8 <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:316
jmp getE820Memory_asm_getNext
    12a6:	eb c4                	jmp    126c <getE820Memory_asm_getNext>

000012a8 <getE820Memory_asm_exit>:
getE820Memory_asm_exit():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:318
getE820Memory_asm_exit:
mov eax,recCnt
    12a8:	66 a1 cd 12 66 a3    	mov    ax,ds:0xa36612cd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:319
mov savedValue, eax
    12ae:	c5 12                	lds    edx,FWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:322


popa
    12b0:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:323
mov eax, savedValue
    12b1:	66 a1 c5 12 e8 35    	mov    ax,ds:0x35e812c5
/home/yogi/src/os/chrisOS/asm/bootCPU.s:325
.code32
call reenterProtMode
    12b7:	fe                   	(bad)  
    12b8:	ff                   	(bad)  
    12b9:	ff c3                	inc    ebx

000012bb <saved_gdt16_lo>:
	...

000012bd <saved_gdt16_hi>:
	...

000012bf <saved_gdt16_hi2>:
	...

000012c1 <saveESP>:
saveESP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:326
ret
    12c1:	00 00                	add    BYTE PTR [eax],al
	...

000012c5 <savedValue>:
	...

000012cd <recCnt>:
	...

000012cf <idt_real>:
idt_real():
    12cf:	ff 03                	inc    DWORD PTR [ebx]
    12d1:	00 00                	add    BYTE PTR [eax],al
	...

000012d5 <retVal>:
	...

000012d7 <saved_idt>:
saved_idt():
    12d7:	00 00                	add    BYTE PTR [eax],al
    12d9:	00 00                	add    BYTE PTR [eax],al
	...

000012dd <e820data>:
	...

000012f7 <system_timer_fractions>:
	...

000012ff <system_timer_ms>:
	...

00001307 <IRQ0_fractions>:
	...

0000130f <IRQ0_ms>:
	...

00001317 <IRQ0_frequency>:
	...

0000131f <PIT_reload_value>:
PIT_reload_value():
    131f:	12 00                	adc    al,BYTE PTR [eax]
    1321:	00 00                	add    BYTE PTR [eax],al
    1323:	00 00                	add    BYTE PTR [eax],al
	...

00001327 <doPagingJump>:
doPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:371
                         .word 0
 .globl doPagingJump
.type doPagingJump, @function
doPagingJump:
.code32
cli #turn off interrupts until we get the IDT fixed up
    1327:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:372
ljmp 0x20:pagingEnableJmp
    1328:	ea 2f 13 00 00 20 00 	jmp    0x20:0x132f

0000132f <pagingEnableJmp>:
pagingEnableJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:374
pagingEnableJmp:
push eax
    132f:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:375
mov ax, 0x10
    1330:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:376
mov ds, ax
    1334:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:377
mov es, ax
    1336:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:378
mov gs, ax
    1338:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:379
mov fs, ax
    133a:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:380
pop eax
    133c:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:381
ret
    133d:	c3                   	ret    

0000133e <doNonPagingJump>:
doNonPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:385
 .globl doNonPagingJump
.type doNonPagingJump, @function
doNonPagingJump:
ljmp 0x28:pagingDisableJmp1
    133e:	ea 45 13 00 00 28 00 	jmp    0x28:0x1345

00001345 <pagingDisableJmp1>:
pagingDisableJmp1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:387
pagingDisableJmp1:
push eax
    1345:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:388
mov eax,cr0
    1346:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:389
and eax,0x7FFFFFFF
    1349:	25 ff ff ff 7f       	and    eax,0x7fffffff
/home/yogi/src/os/chrisOS/asm/bootCPU.s:390
mov cr0,eax
    134e:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:391
mov eax,0
    1351:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:392
mov cr3,eax
    1356:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:393
ljmp 0x28:pagingDisableJmp2
    1359:	ea 60 13 00 00 28 00 	jmp    0x28:0x1360

00001360 <pagingDisableJmp2>:
pagingDisableJmp2():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:395
pagingDisableJmp2:
mov ax, 0x18
    1360:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:396
mov ds, ax
    1364:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:397
mov es, ax
    1366:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:398
mov gs, ax
    1368:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:399
mov fs, ax
    136a:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:400
pop eax
    136c:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:401
ret
    136d:	c3                   	ret    

0000136e <lowSmapTablePtr>:
	...

00001376 <lowSmapTbl>:
	...

00001556 <idtPtrToLoad>:
	...

0000155e <msg>:
msg():
    155e:	48                   	dec    eax
    155f:	65                   	gs
    1560:	6c                   	ins    BYTE PTR es:[edi],dx
    1561:	6c                   	ins    BYTE PTR es:[edi],dx
    1562:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1563:	20 66 72             	and    BYTE PTR [esi+0x72],ah
    1566:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1567:	6d                   	ins    DWORD PTR es:[edi],dx
    1568:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    156b:	6f                   	outs   dx,DWORD PTR ds:[esi]
    156c:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    156f:	73 6f                	jae    15e0 <AP_startup+0x1a>
    1571:	72 20                	jb     1593 <msg2+0xa>

00001572 <pid>:
pid():
    1572:	20 20                	and    BYTE PTR [eax],ah
    1574:	20 43 52             	and    BYTE PTR [ebx+0x52],al
    1577:	30 3d 78 78 78 78    	xor    BYTE PTR ds:0x78787878,bh

00001579 <msw>:
msw():
    1579:	78 78                	js     15f3 <broadcast_AP_startup+0xa>
    157b:	78 78                	js     15f5 <broadcast_AP_startup+0xc>
    157d:	78 78                	js     15f7 <broadcast_AP_startup+0xe>
    157f:	78 78                	js     15f9 <broadcast_AP_startup+0x10>
    1581:	20 0a                	and    BYTE PTR [edx],cl
    1583:	0d 26 00 00 00       	or     eax,0x26

00001584 <len>:
len():
    1584:	26 00 00             	add    BYTE PTR es:[eax],al
	...

00001588 <att>:
att():
    1588:	0b 57 61             	or     edx,DWORD PTR [edi+0x61]

00001589 <msg2>:
msg2():
    1589:	57                   	push   edi
    158a:	61                   	popa   
    158b:	6b 69 6e 67          	imul   ebp,DWORD PTR [ecx+0x6e],0x67
    158f:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
    1592:	20 41 50             	and    BYTE PTR [ecx+0x50],al
    1595:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    1598:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1599:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    159c:	73 6f                	jae    160d <.B0+0xb>
    159e:	72 73                	jb     1613 <.B0+0x11>
    15a0:	0a 0d 19 00 00 00    	or     cl,BYTE PTR ds:0x19

000015a2 <len2>:
len2():
    15a2:	19 00                	sbb    DWORD PTR [eax],eax
	...

000015a6 <att2>:
att2():
    15a6:	0c 01                	or     al,0x1

000015a7 <mutex>:
mutex():
    15a7:	01 00                	add    DWORD PTR [eax],eax

000015a9 <smpBootCPUCount>:
	...

000015ab <smpBootCPUsStarted>:
	...

000015ad <newSS>:
newSS():
    15ad:	00 20                	add    BYTE PTR [eax],ah
	...

000015b0 <theGDT>:
	...
theGDT():
    15b8:	ff                   	(bad)  
    15b9:	ff 00                	inc    DWORD PTR [eax]
    15bb:	00 00                	add    BYTE PTR [eax],al
    15bd:	92                   	xchg   edx,eax
    15be:	8f 00                	pop    DWORD PTR [eax]

000015c0 <regGDT>:
regGDT():
    15c0:	0f 00                	(bad)  
    15c2:	b0 15                	mov    al,0x15
	...

000015c6 <AP_startup>:
AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:450
#-----------------------------------------------------------------
#-----------------------------------------------------------------#-----------------------------------------------------------------

.global AP_startup
AP_startup:
movl     %esp, saveESP
    15c6:	89 25 c1 12 00 00    	mov    DWORD PTR ds:0x12c1,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:452
//lea	tos, %esp		# and set up new stack
call    setup_timer_channel2
    15cc:	e8 7e 00 00 00       	call   164f <setup_timer_channel2>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:454
//call	display_APIC_LocalID
call	broadcast_AP_startup
    15d1:	e8 13 00 00 00       	call   15e9 <broadcast_AP_startup>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:455
call	delay_until_APs_halt
    15d6:	e8 64 00 00 00       	call   163f <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:456
mov     $0x10, %eax
    15db:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:457
mov     %eax, %ds
    15e0:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:458
mov     saveESP, %esp
    15e2:	8b 25 c1 12 00 00    	mov    esp,DWORD PTR ds:0x12c1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:459
ret
    15e8:	c3                   	ret    

000015e9 <broadcast_AP_startup>:
broadcast_AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:466
.global broadcast_AP_startup
broadcast_AP_startup:
#
# This procedure is called by the main CPU to awaken other CPUs.
#
	push	%ebx
    15e9:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:467
	push	%ds
    15ea:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:470

	# address the Local-APIC registers' page
	mov	$0x10, %ax
    15eb:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:471
	mov	%ax, %ds
    15ef:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:472
    	mov     kAPICRegisterRemapAddress, %ebx
    15f1:	8b 1d 30 03 12 00    	mov    ebx,DWORD PTR ds:0x120330
/home/yogi/src/os/chrisOS/asm/bootCPU.s:475

	# issue an 'INIT' Inter-Processor Interrupt command
	mov	$0x000C4500, %eax	# broadcase INIT-IPI
    15f7:	b8 00 45 0c 00       	mov    eax,0xc4500
/home/yogi/src/os/chrisOS/asm/bootCPU.s:476
	mov	%eax, 0x300(%ebx)	# to all-except-self
    15fc:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

00001602 <.B0>:
.B0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:477
.B0:	bt	$12, 0x300(%ebx)	# command in progress?
    1602:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    1609:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:478
	jc	.B0			# yes, spin till done
    160a:	72 f6                	jb     1602 <.B0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:481

	# do ten-millisecond delay, allow time for APs to awaken
	mov	$10000, %eax		# number of microseconds
    160c:	b8 10 27 00 00       	mov    eax,0x2710
/home/yogi/src/os/chrisOS/asm/bootCPU.s:482
	call	delay_EAX_micro_secs	# for a programmed delay
    1611:	e8 f9 00 00 00       	call   170f <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:485
	
	# finish the Intel 'MP Initialization Protocol'
	mov	$5, %ecx		# issue 'Startup' twice
    1616:	b9 05 00 00 00       	mov    ecx,0x5

0000161b <nxIPI>:
nxIPI():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:487
#nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI #startup IPI for base address of 4096
nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI 
    161b:	b8 01 46 0c 00       	mov    eax,0xc4601
/home/yogi/src/os/chrisOS/asm/bootCPU.s:488
	mov	%eax, 0x300(%ebx)	# to all-except-self
    1620:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

00001626 <.B1>:
.B1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:489
.B1:	bt	$12, 0x300(%ebx)	# command in progress?
    1626:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    162d:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:490
	jc	.B1			# yes, spin till done
    162e:	72 f6                	jb     1626 <.B1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:493

	# delay for 200 microseconds	
	mov	$200, %eax		# number of microseconds
    1630:	b8 c8 00 00 00       	mov    eax,0xc8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:494
	call	delay_EAX_micro_secs	# for a programmed delay
    1635:	e8 d5 00 00 00       	call   170f <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:495
	loop	nxIPI	
    163a:	e2 df                	loop   161b <nxIPI>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:497
		
	pop	%ds
    163c:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:498
	pop	%ebx
    163d:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:499
	ret
    163e:	c3                   	ret    

0000163f <delay_until_APs_halt>:
delay_until_APs_halt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:506
delay_until_APs_halt:
#
# This procedure is called by the main CPU so that it will not
# terminate our program until the other CPUs have been halted.
#
.W0:	mov	smpBootCPUCount, %ax		# number of APs awoken
    163f:	66 a1 a9 15 00 00    	mov    ax,ds:0x15a9
/home/yogi/src/os/chrisOS/asm/bootCPU.s:507
	sub	smpBootCPUsStarted, %ax		# less number finished
    1645:	66 2b 05 ab 15 00 00 	sub    ax,WORD PTR ds:0x15ab
/home/yogi/src/os/chrisOS/asm/bootCPU.s:508
	jnz	.W0			# spin unless all done
    164c:	75 f1                	jne    163f <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:509
	ret
    164e:	c3                   	ret    

0000164f <setup_timer_channel2>:
setup_timer_channel2():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:518
#
# This procedure initializes the 8254 Programmable Timer/Counter
# so Timer Channel 2 can be used in 'one-shot' timing durations.
#
	# enable the 8254 Channel-2 counter
	in	$0x61, %al		# get PORT_B settings
    164f:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:519
	and	$0xFD, %al		# turn PC speaker off
    1651:	24 fd                	and    al,0xfd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:520
	or	$0x01, %al		# turn on Gate2 input
    1653:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:521
	out	%al, $0x61		# output new settings
    1655:	e6 61                	out    0x61,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:524

	# program channel-2 for one-shot countdown
	mov	$0xB0, %al		# chn2, r/w LSB/MSB
    1657:	b0 b0                	mov    al,0xb0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:525
	out	%al, $0x43		# issue PIT command
    1659:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:526
	ret
    165b:	c3                   	ret    

0000165c <display_APIC_LocalID>:
display_APIC_LocalID():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:540
# video services.  Because ROM-BIOS routines are not 'reentrant'
# it is necessary to employ a 'spinlock' to insure that only one
# processor at a time will be executing these ROM-BIOS services. 
#
	# read the Local-APIC ID-register
	push	%ds
    165c:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:541
	xor	%ax, %ax
    165d:	31 c0                	xor    eax,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:542
	mov	%ax, %ds
    165f:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:543
	mov	$0xFEE00020, %ebx
    1661:	66 bb 20 00          	mov    bx,0x20
    1665:	e0 fe                	loopne 1665 <display_APIC_LocalID+0x9>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:544
	mov	(%ebx), %eax
    1667:	67 66 8b 03          	mov    ax,WORD PTR [bp+di]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:545
	pop	%ds
    166b:	1f                   	pop    ds

0000166c <spin>:
spin():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:548

	# acquire the spinlock -- allow only one CPU at a time
spin:	bt	$0, mutex
    166c:	0f ba 26 a7          	bt     DWORD PTR [esi],0xa7
    1670:	15 00 73 f8 f0       	adc    eax,0xf0f87300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:551
	jnc	spin
	lock	
	btr	$0, mutex
    1675:	0f ba 36 a7          	btr    DWORD PTR [esi],0xa7
    1679:	15 00 73 ef 66       	adc    eax,0x66ef7300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:555
	jnc	spin

	# write CPU Local-APIC ID-number into shared buffer
	rol	$8, %eax		# get ID-number in AL
    167e:	c1 c0 08             	rol    eax,0x8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:556
	and	$0xF, %al		# isolate lowest nybble
    1681:	24 0f                	and    al,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:559

#unremark to have the first CPu clear the screen
        pusha
    1683:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:560
        cmp $0x1,%al
    1684:	3c 01                	cmp    al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:561
        ja overClearScreen
    1686:	77 28                	ja     16b0 <overClearScreen>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:562
        call clearScreen
    1688:	e8 01 01 b4 0f       	call   fb4178e <_months_abbrev+0xfa212ae>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:565
#jmp overClearScreen
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    168d:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:567

	mov	$0x02, %ah		# set cursor position
    168f:	b4 02                	mov    ah,0x2
/home/yogi/src/os/chrisOS/asm/bootCPU.s:568
        mov     $0,%bh
    1691:	b7 00                	mov    bh,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:569
        mov     $0x2000,%dx
    1693:	ba 00 20 cd 10       	mov    edx,0x10cd2000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:571
	int	$0x10			# call video bios
        mov     $0x3,ah
    1698:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:572
        int     $0x10
    169a:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:573
	mov	$0x1301, %ax		# write_string
    169c:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:574
	lea	msg2, %bp		# point ES:BP to string
    16a1:	89 15 8b 0e a2 15    	mov    DWORD PTR ds:0x15a20e8b,edx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:576
	mov	len2, %cx		# number of characters
	mov	att2, %bl		# display attributes
    16a7:	8a 1e                	mov    bl,BYTE PTR [esi]
    16a9:	a6                   	cmps   BYTE PTR ds:[esi],BYTE PTR es:[edi]
    16aa:	15 b8 01 13 cd       	adc    eax,0xcd1301b8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:578
	mov	$0x1301, %ax		# write_string
	int	$0x10			# call video bios 
    16af:	10 61 0c             	adc    BYTE PTR [ecx+0xc],ah

000016b0 <overClearScreen>:
overClearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:581

overClearScreen:
        popa
    16b0:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:582
        or	$'0', %al		# convert to numeral	
    16b1:	0c 30                	or     al,0x30
/home/yogi/src/os/chrisOS/asm/bootCPU.s:583
	movb	%al, pid		# write to shared buffer	
    16b3:	a2 72 15 8d 3e       	mov    ds:0x3e8d1572,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:586
#jmp overPrinting
	# format the contents of register CR0 for display
	lea	msw, %di
    16b8:	79 15                	jns    16cf <overClearScreen+0x1f>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:587
	mov	%cr0, %eax
    16ba:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:588
	call	eax2hex
    16bd:	e8 a4 00 b4 0f       	call   fb41766 <_months_abbrev+0xfa21286>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:591
	# display the information using ROM-BIOS routines
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    16c2:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:593

	mov	$0x03, %ah		# get cursor position
    16c4:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:594
	int	$0x10			# call video bios
    16c6:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:596

	mov	$0x1301, %ax		# write_string
    16c8:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:597
	lea	msg, %bp		# point ES:BP to string
    16cd:	5e                   	pop    esi
    16ce:	15 8b 0e 84 15       	adc    eax,0x15840e8b
/home/yogi/src/os/chrisOS/asm/bootCPU.s:599
	mov	len, %cx		# number of characters
	mov	att, %bl		# display attributes
    16d3:	8a 1e                	mov    bl,BYTE PTR [esi]
    16d5:	88 15 b8 01 13 cd    	mov    BYTE PTR ds:0xcd1301b8,dl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:601
	mov	$0x1301, %ax		# write_string
	int	$0x10			# call video bios 
    16db:	10 f0                	adc    al,dh

000016dc <overPrinting>:
overPrinting():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:604
overPrinting:
	# release spinlock -- finished with 'non-reentrant' code
	lock 	
    16dc:	f0 0f ba 2e a7       	lock bts DWORD PTR [esi],0xa7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:605
	bts 	$0, mutex
    16e1:	15 00 c3 fa 8c       	adc    eax,0x8cfac300

000016e4 <initAP>:
initAP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:616
#=================================================================
#-----------------------------------------------------------------
.code16
.globl initAP
.type initAP, @function
initAP:	cli
    16e4:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:617
	mov	%cs, %ax		# address program's data
    16e5:	8c c8                	mov    eax,cs
/home/yogi/src/os/chrisOS/asm/bootCPU.s:618
	mov	%ax, %ds		#    with DS register
    16e7:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:619
	mov	%ax, %es		#    also ES register
    16e9:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:620
	lock				# insure 'atomic' update
    16eb:	f0 ff 06             	lock inc DWORD PTR [esi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:621
	incw	smpBootCPUCount			# increment count of APs
    16ee:	a9 15 b8 00 10       	test   eax,0x1000b815
/home/yogi/src/os/chrisOS/asm/bootCPU.s:625

	# setup an exclusive stack-area for this processor
	mov	$0x1000, %ax		# paragraphs in segment
	xadd	%ax, newSS		# 'atomic' xchg-and-add
    16f3:	0f c1 06             	xadd   DWORD PTR [esi],eax
    16f6:	ad                   	lods   eax,DWORD PTR ds:[esi]
    16f7:	15 8e d0 66 31       	adc    eax,0x3166d08e
/home/yogi/src/os/chrisOS/asm/bootCPU.s:627
	mov	%ax, %ss		# segment-address in SS
	xor	%esp, %esp		# top-of-stack into ESP
    16fc:	e4 66                	in     al,0x66
/home/yogi/src/os/chrisOS/asm/bootCPU.s:628
        mov     $0,%esp
    16fe:	bc 00 00 00 00       	mov    esp,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:629
	call	allow_4GB_addressing	# adjust DS's seg-limit
    1703:	e8 38 00 f0 ff       	call   fff01740 <CHECKSUM+0x1b9dc745>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:634
#	call	display_APIC_LocalID	# display this CPU's ID

	# put this processor to sleep
	lock				# insure 'atomic' update
	incw	smpBootCPUsStarted			# increment count of APs
    1708:	06                   	push   es
    1709:	ab                   	stos   DWORD PTR es:[edi],eax
    170a:	15 fa f4 eb fc       	adc    eax,0xfcebf4fa

0000170b <freeze>:
freeze():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:636

freeze:	cli				# do not awaken this CPU
    170b:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:637
	hlt				# 'fetch-execute' ceases	
    170c:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:638
	jmp	freeze			# just-in-case of an NMI
    170d:	eb fc                	jmp    170b <freeze>

0000170f <delay_EAX_micro_secs>:
delay_EAX_micro_secs():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:645
#-----------------------------------------------------------------
delay_EAX_micro_secs:
#
# This procedure creates a programmed delay for EAX microseconds.
#
	pushal
    170f:	66 60                	pushaw 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:647

	mov	%eax, %ecx		# number of microseconds
    1711:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:648
	mov	$100000, %eax		# microseconds-per-second
    1714:	66 b8 a0 86          	mov    ax,0x86a0
    1718:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:649
	xor	%edx, %edx		# is extended to quadword
    171a:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:650
	div	%ecx			# division by double-word
    171d:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:652
	
	mov	%eax, %ecx		# input-frequency divisor
    1720:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:653
	mov	$1193182, %eax		# timer's input-frequency
    1723:	66 b8 de 34          	mov    ax,0x34de
    1727:	12 00                	adc    al,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:654
	xor	%edx, %edx		# is extended to quadword
    1729:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:655
	div	%ecx			# division by double-word
    172c:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:657

	out	%al, $0x42		# transfer to Latch LSB
    172f:	e6 42                	out    0x42,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:658
	xchg	%al, %ah		# LSB swapped with MSB
    1731:	86 c4                	xchg   ah,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:659
	out	%al, $0x42		# transfer to Latch MSB
    1733:	e6 42                	out    0x42,al

00001735 <.T0>:
.T0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:661

.T0:	in	$0x61, %al		# check PORT_B settings
    1735:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:662
	test	$0x20, %al		# has counter2 expired?
    1737:	a8 20                	test   al,0x20
/home/yogi/src/os/chrisOS/asm/bootCPU.s:663
	jz	.T0			# no, continue polling
    1739:	74 fa                	je     1735 <.T0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:665
	
	popal
    173b:	66 61                	popaw  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:666
	ret
    173d:	c3                   	ret    

0000173e <allow_4GB_addressing>:
allow_4GB_addressing():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:675
#
# This procedure will be called by each processor in order to 
# raise the 'hidden' segment-limit in its DS segment-register
# which permits Local-APIC registers to be addressed with DS.   
#
	pushf				# preserve FLAGS settings
    173e:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:676
	push	%ds			# preserve DS contents
    173f:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:678

	cli				# no device interrupts
    1740:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:680

	mov	%cr0, %eax		# get machine status
    1741:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:681
	bts	$0, %eax		# set PE-bit to 1
    1744:	66 0f ba e8 00       	bts    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:682
	mov	%eax, %cr0		# enter protected mode
    1749:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:683
	lgdt	regGDT			# load GDTR register-image
    174c:	0f 01 16             	lgdtd  [esi]
    174f:	c0 15 b8 08 00 8e d8 	rcl    BYTE PTR ds:0x8e0008b8,0xd8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:687
	mov	$sel_FS, %ax		# address 4GB data-segment
	mov	%ax, %ds		#   with the DS register

	mov	%cr0, %eax		# get machine status
    1756:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:688
	btr	$0, %eax		# reset PE-bit to 0
    1759:	66 0f ba f0 00       	btr    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:689
	mov	%eax, %cr0		# leave protected mode
    175e:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:691
.code16		
	pop	%ds			# restore register DS
    1761:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:692
	popf				# restore FLAGS value
    1762:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:693
	ret				
    1763:	c3                   	ret    

00001764 <eax2hex>:
eax2hex():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:696
#-----------------------------------------------------------------
eax2hex:  # converts value in EAX to hexadecimal string at DS:DI
	pusha	
    1764:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:698

	mov	$8, %cx
    1765:	b9 08 00 66 c1       	mov    ecx,0xc1660008

00001768 <nxnyb>:
nxnyb():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:700
nxnyb:
	rol	$4, %eax
    1768:	66 c1 c0 04          	rol    ax,0x4
/home/yogi/src/os/chrisOS/asm/bootCPU.s:701
	mov	%al, %bl
    176c:	88 c3                	mov    bl,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:702
	and	$0xF, %bx
    176e:	83 e3 0f             	and    ebx,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:703
	mov	hex(%bx), %dl
    1771:	8a 97 7c 17 88 15    	mov    dl,BYTE PTR [edi+0x1588177c]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:705
	mov	%dl, (%di)
	inc	%di
    1777:	47                   	inc    edi
/home/yogi/src/os/chrisOS/asm/bootCPU.s:706
	loop	nxnyb	
    1778:	e2 ee                	loop   1768 <nxnyb>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:708

	popa
    177a:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:709
	ret
    177b:	c3                   	ret    

0000177c <hex>:
hex():
    177c:	30 31                	xor    BYTE PTR [ecx],dh
    177e:	32 33                	xor    dh,BYTE PTR [ebx]
    1780:	34 35                	xor    al,0x35
    1782:	36                   	ss
    1783:	37                   	aaa    
    1784:	38 39                	cmp    BYTE PTR [ecx],bh
    1786:	41                   	inc    ecx
    1787:	42                   	inc    edx
    1788:	43                   	inc    ebx
    1789:	44                   	inc    esp
    178a:	45                   	inc    ebp
    178b:	46                   	inc    esi

0000178c <clearScreen>:
clearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:715
#-----------------------------------------------------------------
hex:	.ascii	"0123456789ABCDEF"	# array of hex numerals

.intel_syntax noprefix
clearScreen:
    pusha
    178c:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:717

    mov ax, 0x0700  # function 07, AL=0 means scroll whole window
    178d:	b8 00 07 b7 07       	mov    eax,0x7b70700
/home/yogi/src/os/chrisOS/asm/bootCPU.s:719
    mov bh, 0x07    # character attribute = white on black
    mov cx, 0x0000  # row = 0, col = 0
    1792:	b9 00 00 ba 4f       	mov    ecx,0x4fba0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:720
    mov dx, 0x184f  # row = 24 (0x18), col = 79 (0x4f)
    1797:	18 cd                	sbb    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:721
    int 0x10        # call BIOS video interrupt
    1799:	10 b4 02 b7 00 ba 00 	adc    BYTE PTR [edx+eax*1+0xba00b7],dh
/home/yogi/src/os/chrisOS/asm/bootCPU.s:724
    mov ah,02
    mov bh,0
    mov dx,0
    17a0:	00 cd                	add    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:725
    int 0x10
    17a2:	10 61 c3             	adc    BYTE PTR [ecx-0x3d],ah
	...

0000fec5 <stk>:
stk():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:727
    popa
    ret
    fec5:	fa                   	cli    
    fec6:	fa                   	cli    
    fec7:	fa                   	cli    
    fec8:	fa                   	cli    
    fec9:	fa                   	cli    
    feca:	fa                   	cli    
    fecb:	fa                   	cli    
    fecc:	fa                   	cli    
    fecd:	fa                   	cli    
    fece:	fa                   	cli    
    fecf:	fa                   	cli    
    fed0:	fa                   	cli    
    fed1:	fa                   	cli    
    fed2:	fa                   	cli    
    fed3:	fa                   	cli    
    fed4:	fa                   	cli    
    fed5:	fa                   	cli    
    fed6:	fa                   	cli    
    fed7:	fa                   	cli    
    fed8:	fa                   	cli    
    fed9:	fa                   	cli    
    feda:	fa                   	cli    
    fedb:	fa                   	cli    
    fedc:	fa                   	cli    
    fedd:	fa                   	cli    
    fede:	fa                   	cli    
    fedf:	fa                   	cli    
    fee0:	fa                   	cli    
    fee1:	fa                   	cli    
    fee2:	fa                   	cli    
    fee3:	fa                   	cli    
    fee4:	fa                   	cli    
    fee5:	fa                   	cli    
    fee6:	fa                   	cli    
    fee7:	fa                   	cli    
    fee8:	fa                   	cli    
    fee9:	fa                   	cli    
    feea:	fa                   	cli    
    feeb:	fa                   	cli    
    feec:	fa                   	cli    
    feed:	fa                   	cli    
    feee:	fa                   	cli    
    feef:	fa                   	cli    
    fef0:	fa                   	cli    
    fef1:	fa                   	cli    
    fef2:	fa                   	cli    
    fef3:	fa                   	cli    
    fef4:	fa                   	cli    
    fef5:	fa                   	cli    
    fef6:	fa                   	cli    
    fef7:	fa                   	cli    
    fef8:	fa                   	cli    
    fef9:	fa                   	cli    
    fefa:	fa                   	cli    
    fefb:	fa                   	cli    
    fefc:	fa                   	cli    
    fefd:	fa                   	cli    
    fefe:	fa                   	cli    
    feff:	fa                   	cli    
    ff00:	fa                   	cli    
    ff01:	fa                   	cli    
    ff02:	fa                   	cli    
    ff03:	fa                   	cli    
    ff04:	fa                   	cli    
    ff05:	fa                   	cli    
    ff06:	fa                   	cli    
    ff07:	fa                   	cli    
    ff08:	fa                   	cli    
    ff09:	fa                   	cli    
    ff0a:	fa                   	cli    
    ff0b:	fa                   	cli    
    ff0c:	fa                   	cli    
    ff0d:	fa                   	cli    
    ff0e:	fa                   	cli    
    ff0f:	fa                   	cli    
    ff10:	fa                   	cli    
    ff11:	fa                   	cli    
    ff12:	fa                   	cli    
    ff13:	fa                   	cli    
    ff14:	fa                   	cli    
    ff15:	fa                   	cli    
    ff16:	fa                   	cli    
    ff17:	fa                   	cli    
    ff18:	fa                   	cli    
    ff19:	fa                   	cli    
    ff1a:	fa                   	cli    
    ff1b:	fa                   	cli    
    ff1c:	fa                   	cli    
    ff1d:	fa                   	cli    
    ff1e:	fa                   	cli    
    ff1f:	fa                   	cli    
    ff20:	fa                   	cli    
    ff21:	fa                   	cli    
    ff22:	fa                   	cli    
    ff23:	fa                   	cli    
    ff24:	fa                   	cli    
    ff25:	fa                   	cli    
    ff26:	fa                   	cli    
    ff27:	fa                   	cli    
    ff28:	fa                   	cli    
    ff29:	fa                   	cli    
    ff2a:	fa                   	cli    
    ff2b:	fa                   	cli    
    ff2c:	fa                   	cli    
    ff2d:	fa                   	cli    
    ff2e:	fa                   	cli    
    ff2f:	fa                   	cli    
    ff30:	fa                   	cli    
    ff31:	fa                   	cli    
    ff32:	fa                   	cli    
    ff33:	fa                   	cli    
    ff34:	fa                   	cli    
    ff35:	fa                   	cli    
    ff36:	fa                   	cli    
    ff37:	fa                   	cli    
    ff38:	fa                   	cli    
    ff39:	fa                   	cli    
    ff3a:	fa                   	cli    
    ff3b:	fa                   	cli    
    ff3c:	fa                   	cli    
    ff3d:	fa                   	cli    
    ff3e:	fa                   	cli    
    ff3f:	fa                   	cli    
    ff40:	fa                   	cli    
    ff41:	fa                   	cli    
    ff42:	fa                   	cli    
    ff43:	fa                   	cli    
    ff44:	fa                   	cli    
    ff45:	fa                   	cli    
    ff46:	fa                   	cli    
    ff47:	fa                   	cli    
    ff48:	fa                   	cli    
    ff49:	fa                   	cli    
    ff4a:	fa                   	cli    
    ff4b:	fa                   	cli    
    ff4c:	fa                   	cli    
    ff4d:	fa                   	cli    
    ff4e:	fa                   	cli    
    ff4f:	fa                   	cli    
    ff50:	fa                   	cli    
    ff51:	fa                   	cli    
    ff52:	fa                   	cli    
    ff53:	fa                   	cli    
    ff54:	fa                   	cli    
    ff55:	fa                   	cli    
    ff56:	fa                   	cli    
    ff57:	fa                   	cli    
    ff58:	fa                   	cli    
    ff59:	fa                   	cli    
    ff5a:	fa                   	cli    
    ff5b:	fa                   	cli    
    ff5c:	fa                   	cli    
    ff5d:	fa                   	cli    
    ff5e:	fa                   	cli    
    ff5f:	fa                   	cli    
    ff60:	fa                   	cli    
    ff61:	fa                   	cli    
    ff62:	fa                   	cli    
    ff63:	fa                   	cli    
    ff64:	fa                   	cli    
    ff65:	fa                   	cli    
    ff66:	fa                   	cli    
    ff67:	fa                   	cli    
    ff68:	fa                   	cli    
    ff69:	fa                   	cli    
    ff6a:	fa                   	cli    
    ff6b:	fa                   	cli    
    ff6c:	fa                   	cli    
    ff6d:	fa                   	cli    
    ff6e:	fa                   	cli    
    ff6f:	fa                   	cli    
    ff70:	fa                   	cli    
    ff71:	fa                   	cli    
    ff72:	fa                   	cli    
    ff73:	fa                   	cli    
    ff74:	fa                   	cli    
    ff75:	fa                   	cli    
    ff76:	fa                   	cli    
    ff77:	fa                   	cli    
    ff78:	fa                   	cli    
    ff79:	fa                   	cli    
    ff7a:	fa                   	cli    
    ff7b:	fa                   	cli    
    ff7c:	fa                   	cli    
    ff7d:	fa                   	cli    
    ff7e:	fa                   	cli    
    ff7f:	fa                   	cli    
    ff80:	fa                   	cli    
    ff81:	fa                   	cli    
    ff82:	fa                   	cli    
    ff83:	fa                   	cli    
    ff84:	fa                   	cli    
    ff85:	fa                   	cli    
    ff86:	fa                   	cli    
    ff87:	fa                   	cli    
    ff88:	fa                   	cli    
    ff89:	fa                   	cli    
    ff8a:	fa                   	cli    
    ff8b:	fa                   	cli    
    ff8c:	fa                   	cli    
    ff8d:	fa                   	cli    
    ff8e:	fa                   	cli    
    ff8f:	fa                   	cli    
    ff90:	fa                   	cli    
    ff91:	fa                   	cli    
    ff92:	fa                   	cli    
    ff93:	fa                   	cli    
    ff94:	fa                   	cli    
    ff95:	fa                   	cli    
    ff96:	fa                   	cli    
    ff97:	fa                   	cli    
    ff98:	fa                   	cli    
    ff99:	fa                   	cli    
    ff9a:	fa                   	cli    
    ff9b:	fa                   	cli    
    ff9c:	fa                   	cli    
    ff9d:	fa                   	cli    
    ff9e:	fa                   	cli    
    ff9f:	fa                   	cli    
    ffa0:	fa                   	cli    
    ffa1:	fa                   	cli    
    ffa2:	fa                   	cli    
    ffa3:	fa                   	cli    
    ffa4:	fa                   	cli    
    ffa5:	fa                   	cli    
    ffa6:	fa                   	cli    
    ffa7:	fa                   	cli    
    ffa8:	fa                   	cli    
    ffa9:	fa                   	cli    
    ffaa:	fa                   	cli    
    ffab:	fa                   	cli    
    ffac:	fa                   	cli    
    ffad:	fa                   	cli    
    ffae:	fa                   	cli    
    ffaf:	fa                   	cli    
    ffb0:	fa                   	cli    
    ffb1:	fa                   	cli    
    ffb2:	fa                   	cli    
    ffb3:	fa                   	cli    
    ffb4:	fa                   	cli    
    ffb5:	fa                   	cli    
    ffb6:	fa                   	cli    
    ffb7:	fa                   	cli    
    ffb8:	fa                   	cli    
    ffb9:	fa                   	cli    
    ffba:	fa                   	cli    
    ffbb:	fa                   	cli    
    ffbc:	fa                   	cli    
    ffbd:	fa                   	cli    
    ffbe:	fa                   	cli    
    ffbf:	fa                   	cli    
    ffc0:	fa                   	cli    
    ffc1:	fa                   	cli    
    ffc2:	fa                   	cli    
    ffc3:	fa                   	cli    

0000ffc4 <irq13ESP>:
irq13ESP():
    ffc4:	00 00                	add    BYTE PTR [eax],al
    ffc6:	10 00                	adc    BYTE PTR [eax],al
    ffc8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffcc <irq13SavedESP>:
	...

0000ffd4 <irq14ESP>:
irq14ESP():
    ffd4:	00 00                	add    BYTE PTR [eax],al
    ffd6:	10 00                	adc    BYTE PTR [eax],al
    ffd8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffdc <irq14SavedESP>:
	...

0000ffe4 <espForFatalExceptions>:
espForFatalExceptions():
    ffe4:	00 00                	add    BYTE PTR [eax],al
    ffe6:	10 00                	adc    BYTE PTR [eax],al
    ffe8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffec <savedESP>:
	...

0000fff4 <bufr>:
	...

00010004 <savedESP_irq0>:
	...

00010014 <debugReturnFlags>:
	...

0001001c <debugESP>:
debugESP():
   1001c:	00 00                	add    BYTE PTR [eax],al
	...

00010020 <_isr_00_wrapper>:
_isr_00_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:38
debugESP: .WORD 0,0


.global _isr_00_wrapper        
_isr_00_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   10020:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:39
        mov exceptionAX,eax
   10026:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:40
        mov exceptionBP, ebp
   1002b:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:41
        mov     ebp, esp
   10031:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:42
        mov     ax, 0x0                  # save exception number
   10033:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:43
        jmp isr_My_Common
   10037:	e9 5e 01 00 00       	jmp    1019a <isr_My_Common>

0001003c <_isr_02_wrapper>:
_isr_02_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:46
.global _isr_02_wrapper        
_isr_02_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   1003c:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:47
        mov exceptionAX,eax
   10042:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:48
        mov exceptionBP, ebp
   10047:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:49
        mov     ebp, esp
   1004d:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:50
        mov     ax, 0x2                  # save exception number
   1004f:	66 b8 02 00          	mov    ax,0x2
/home/yogi/src/os//chrisOS/asm/isr.s:51
        jmp isr_My_Common
   10053:	e9 42 01 00 00       	jmp    1019a <isr_My_Common>

00010058 <_isr_03_wrapper>:
_isr_03_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:60
        mov exceptionAX,eax
        mov exceptionBP, ebp
        mov     ebp, esp
        mov     ax, 0x3                  # save exception number
*/
        orw [esp+8],0x100
   10058:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:61
        pusha
   1005f:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:62
        call activateDebugger
   10060:	e8 47 ab 00 00       	call   1abac <activateDebugger>
/home/yogi/src/os//chrisOS/asm/isr.s:65
 /*       jmp isr_My_Common
*/
        popa
   10065:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:66
        sti
   10066:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:67
        iretd
   10067:	cf                   	iret   

00010068 <_isr_04_wrapper>:
_isr_04_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:70
.global _isr_04_wrapper        
_isr_04_wrapper:                #remapped to 0x0c
        mov exceptionSavedESP, esp
   10068:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:71
        mov exceptionAX,eax
   1006e:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:72
        mov exceptionBP, ebp
   10073:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:73
        mov     ebp, esp
   10079:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:74
        mov     ax, 0x4                  # save exception number
   1007b:	66 b8 04 00          	mov    ax,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:75
        jmp isr_My_Common
   1007f:	e9 16 01 00 00       	jmp    1019a <isr_My_Common>

00010084 <_isr_05_wrapper>:
_isr_05_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:78
.global _isr_05_wrapper        
_isr_05_wrapper:                #remapped to 0x0d
        mov exceptionSavedESP, esp
   10084:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:79
        mov exceptionAX,eax
   1008a:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:80
        mov exceptionBP, ebp
   1008f:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:81
        mov     ebp, esp
   10095:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:82
        mov     ax, 0x5                  # save exception number
   10097:	66 b8 05 00          	mov    ax,0x5
/home/yogi/src/os//chrisOS/asm/isr.s:83
        jmp isr_My_Common
   1009b:	e9 fa 00 00 00       	jmp    1019a <isr_My_Common>

000100a0 <_isr_06_wrapper>:
_isr_06_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:86
.global _isr_06_wrapper
_isr_06_wrapper:                #remapped to 0x0e
        mov exceptionSavedESP, esp
   100a0:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:87
        mov exceptionAX,eax
   100a6:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:88
        mov exceptionBP, ebp
   100ab:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:89
        mov     ebp, esp
   100b1:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:90
        mov     ax, 0x6                  # save exception number
   100b3:	66 b8 06 00          	mov    ax,0x6
/home/yogi/src/os//chrisOS/asm/isr.s:91
        jmp isr_My_Common
   100b7:	e9 de 00 00 00       	jmp    1019a <isr_My_Common>

000100bc <_isr_07_wrapper>:
_isr_07_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:94
.global _isr_07_wrapper        
_isr_07_wrapper:                #remapped to 0x0f
        mov exceptionSavedESP, esp
   100bc:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:95
        mov exceptionAX,eax
   100c2:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:96
        mov exceptionBP, ebp
   100c7:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:97
        mov     ebp, esp
   100cd:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:98
        mov     ax, 0x7                  # save exception number
   100cf:	66 b8 07 00          	mov    ax,0x7
/home/yogi/src/os//chrisOS/asm/isr.s:99
        jmp isr_My_Common
   100d3:	e9 c2 00 00 00       	jmp    1019a <isr_My_Common>

000100d8 <_isr_08_wrapper>:
_isr_08_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:102
.global _isr_08_wrapper                 #remapped to 0x10
_isr_08_wrapper:                
        mov exceptionSavedESP, esp
   100d8:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:103
        mov exceptionAX,eax
   100de:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:104
        mov exceptionBP, ebp
   100e3:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:105
        mov     ebp, esp
   100e9:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:106
        mov     ax, 0x8                  # save exception number
   100eb:	66 b8 08 00          	mov    ax,0x8
/home/yogi/src/os//chrisOS/asm/isr.s:107
        jmp isr_My_Common
   100ef:	e9 a6 00 00 00       	jmp    1019a <isr_My_Common>
/home/yogi/src/os//chrisOS/asm/isr.s:130
#        mov ebx, cr2
#        mov exceptionCR2, ebx
#        pop ebx
#        pop ebp
        //push bx                         #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        mov bx,10
   100f4:	66 bb 0a 00          	mov    bx,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:131
        mov ds,bx
   100f8:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:132
        mov es,bx
   100fa:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:133
        mov fs,bx
   100fc:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:134
        mov gs,bx
   100fe:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:136
        //pop bx                        #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        call    doubleFaultHandler     # jump to the common code
   10100:	e8 04 97 00 00       	call   19809 <doubleFaultHandler>

00010105 <_isr_09_wrapper>:
_isr_09_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:139
.global _isr_09_wrapper                 #remapped to 0x11
_isr_09_wrapper:
        mov exceptionSavedESP, esp
   10105:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:140
        mov exceptionAX,eax
   1010b:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:141
        mov exceptionBP, ebp
   10110:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:142
        mov     ebp, esp
   10116:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:143
        mov     ax, 0x9                  # save exception number
   10118:	66 b8 09 00          	mov    ax,0x9
/home/yogi/src/os//chrisOS/asm/isr.s:144
        jmp isr_My_Common
   1011c:	eb 7c                	jmp    1019a <isr_My_Common>

0001011e <_isr_10_wrapper>:
_isr_10_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:147
.global _isr_10_wrapper                 #remapped to 0x12
_isr_10_wrapper:                        
        mov exceptionSavedESP, esp
   1011e:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:148
        mov exceptionAX,eax
   10124:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:149
        mov exceptionBP, ebp
   10129:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:150
        mov     ebp, esp
   1012f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:151
        mov     ax, 0xa                  # save exception number
   10131:	66 b8 0a 00          	mov    ax,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:152
        jmp isr_My_Common
   10135:	eb 63                	jmp    1019a <isr_My_Common>

00010137 <_isr_11_wrapper>:
_isr_11_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:155
.global _isr_11_wrapper                 #remapped to 0x13
_isr_11_wrapper:
        mov exceptionSavedESP, esp
   10137:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:156
        mov exceptionAX,eax
   1013d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:157
        mov exceptionBP, ebp
   10142:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:158
        mov     ebp, esp
   10148:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:159
        mov     ax, 0x8                  # save exception number
   1014a:	66 b8 08 00          	mov    ax,0x8
/home/yogi/src/os//chrisOS/asm/isr.s:160
        jmp isr_My_Common
   1014e:	eb 4a                	jmp    1019a <isr_My_Common>

00010150 <_isr_12_wrapper>:
_isr_12_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:163
.global _isr_12_wrapper        
_isr_12_wrapper:                        #remapped to 0x14
        mov exceptionSavedESP, esp
   10150:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:164
        mov exceptionAX,eax
   10156:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:165
        mov exceptionBP, ebp
   1015b:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:166
        mov     ebp, esp
   10161:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:167
        mov     ax, 0xc                  # save exception number
   10163:	66 b8 0c 00          	mov    ax,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:168
        jmp isr_My_Common
   10167:	eb 31                	jmp    1019a <isr_My_Common>

00010169 <_isr_13_wrapper>:
_isr_13_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:171
.global _isr_13_wrapper                 #remapped to 0x15
_isr_13_wrapper:
cli;
   10169:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:172
        mov exceptionSavedESP, esp
   1016a:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:173
        mov exceptionAX,eax
   10170:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:174
        mov exceptionBP, ebp
   10175:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:175
        mov     ebp, esp
   1017b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:176
        mov     ax, 0xd                  # save exception number
   1017d:	66 b8 0d 00          	mov    ax,0xd
/home/yogi/src/os//chrisOS/asm/isr.s:177
        jmp isr_My_Common
   10181:	eb 17                	jmp    1019a <isr_My_Common>

00010183 <_isr_14_wrapper>:
_isr_14_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:181
.global _isr_14_wrapper                 #remapped to 0x16
_isr_14_wrapper:
#cli;hlt;
mov exceptionSavedESP, esp
   10183:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:182
        mov exceptionAX,eax
   10189:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:183
        mov exceptionBP, ebp
   1018e:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:184
        mov     ebp, esp
   10194:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:185
        mov     ax, 0xe                  # save exception number
   10196:	66 b8 0e 00          	mov    ax,0xe

0001019a <isr_My_Common>:
isr_My_Common():
/home/yogi/src/os//chrisOS/asm/isr.s:187
isr_My_Common:
        mov exceptionNumber,ax
   1019a:	66 a3 a4 01 12 00    	mov    ds:0x1201a4,ax
/home/yogi/src/os//chrisOS/asm/isr.s:188
        pushad                          # other regs because its an ISR
   101a0:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:189
        mov eax,ds
   101a1:	8c d8                	mov    eax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:190
        mov exceptionDS,eax
   101a3:	a3 d8 01 12 00       	mov    ds:0x1201d8,eax
/home/yogi/src/os//chrisOS/asm/isr.s:191
        mov exceptionBX, ebx
   101a8:	89 1d b4 01 12 00    	mov    DWORD PTR ds:0x1201b4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:192
        mov exceptionCX, ecx
   101ae:	89 0d b8 01 12 00    	mov    DWORD PTR ds:0x1201b8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:193
        mov exceptionDX, edx
   101b4:	89 15 bc 01 12 00    	mov    DWORD PTR ds:0x1201bc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:194
        mov exceptionSI, esi
   101ba:	89 35 c0 01 12 00    	mov    DWORD PTR ds:0x1201c0,esi
/home/yogi/src/os//chrisOS/asm/isr.s:195
        mov exceptionDI, edi
   101c0:	89 3d c4 01 12 00    	mov    DWORD PTR ds:0x1201c4,edi
/home/yogi/src/os//chrisOS/asm/isr.s:196
        mov eax, cr0
   101c6:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:197
        mov exceptionCR0, eax
   101c9:	a3 cc 01 12 00       	mov    ds:0x1201cc,eax
/home/yogi/src/os//chrisOS/asm/isr.s:198
        mov eax, cr3
   101ce:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:199
        mov exceptionCR3, eax
   101d1:	a3 d0 01 12 00       	mov    ds:0x1201d0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:200
        mov eax, cr4
   101d6:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:201
        mov exceptionCR4, eax
   101d9:	a3 d4 01 12 00       	mov    ds:0x1201d4,eax
/home/yogi/src/os//chrisOS/asm/isr.s:202
        mov eax,es
   101de:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:203
        mov exceptionES,eax
   101e0:	a3 dc 01 12 00       	mov    ds:0x1201dc,eax
/home/yogi/src/os//chrisOS/asm/isr.s:204
        mov eax,fs
   101e5:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:205
        mov exceptionFS,eax
   101e7:	a3 e0 01 12 00       	mov    ds:0x1201e0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:206
        mov eax,gs
   101ec:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:207
        mov exceptionGS,eax
   101ee:	a3 e4 01 12 00       	mov    ds:0x1201e4,eax
/home/yogi/src/os//chrisOS/asm/isr.s:208
        mov eax,ss
   101f3:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:209
        mov exceptionSS,eax
   101f5:	a3 e8 01 12 00       	mov    ds:0x1201e8,eax
/home/yogi/src/os//chrisOS/asm/isr.s:210
        mov eax, exceptionAX
   101fa:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
/home/yogi/src/os//chrisOS/asm/isr.s:211
        mov     bx, 0x10
   101ff:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:212
        mov     ds, bx
   10203:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:213
        mov     es, bx                  # load ds and es with valid selector
   10205:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:214
	mov     gs, bx
   10207:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:216
    
    mov ebx,exceptionNumber
   10209:	8b 1d a4 01 12 00    	mov    ebx,DWORD PTR ds:0x1201a4
/home/yogi/src/os//chrisOS/asm/isr.s:217
    mov bl,[_isr_has_errorCode+ebx]
   1020f:	8a 9b 83 06 01 00    	mov    bl,BYTE PTR [ebx+0x10683]
/home/yogi/src/os//chrisOS/asm/isr.s:218
    cmp bl,1
   10215:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:219
    je  getExceptionDetailsWithError
   10218:	74 1f                	je     10239 <getExceptionDetailsWithError>
/home/yogi/src/os//chrisOS/asm/isr.s:220
    mov ebx, [ebp+8]
   1021a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:221
    mov exceptionFlags, ebx
   1021d:	89 1d f0 01 12 00    	mov    DWORD PTR ds:0x1201f0,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:222
    mov bx, [ebp+4]
   10223:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:223
    mov exceptionCS, bx
   10227:	66 89 1d fc 01 12 00 	mov    WORD PTR ds:0x1201fc,bx
/home/yogi/src/os//chrisOS/asm/isr.s:224
    mov ebx, [ebp+0]
   1022e:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:225
    mov exceptionEIP, ebx
   10231:	89 1d f8 01 12 00    	mov    DWORD PTR ds:0x1201f8,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:226
    jmp saveTheStack
   10237:	eb 33                	jmp    1026c <saveTheStack>

00010239 <getExceptionDetailsWithError>:
getExceptionDetailsWithError():
/home/yogi/src/os//chrisOS/asm/isr.s:229

getExceptionDetailsWithError:
     mov ebx, [ebp+12]
   10239:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:230
     mov exceptionFlags, ebx
   1023c:	89 1d f0 01 12 00    	mov    DWORD PTR ds:0x1201f0,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:231
     mov bx, [ebp+8]
   10242:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:232
     mov exceptionCS, bx
   10246:	66 89 1d fc 01 12 00 	mov    WORD PTR ds:0x1201fc,bx
/home/yogi/src/os//chrisOS/asm/isr.s:233
     mov ebx, [ebp+4]
   1024d:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:234
     mov exceptionEIP, ebx
   10250:	89 1d f8 01 12 00    	mov    DWORD PTR ds:0x1201f8,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:235
     mov ebx, cr2
   10256:	0f 20 d3             	mov    ebx,cr2
/home/yogi/src/os//chrisOS/asm/isr.s:236
     mov exceptionCR2, ebx
   10259:	89 1d 00 02 12 00    	mov    DWORD PTR ds:0x120200,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:237
     mov ebx, [ebp]
   1025f:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:238
     movzx ebx,bx
   10262:	0f b7 db             	movzx  ebx,bx
/home/yogi/src/os//chrisOS/asm/isr.s:239
     mov exceptionErrorCode, bx
   10265:	66 89 1d f4 01 12 00 	mov    WORD PTR ds:0x1201f4,bx

0001026c <saveTheStack>:
saveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:242

saveTheStack:
jmp overSaveTheStack
   1026c:	eb 13                	jmp    10281 <overSaveTheStack>
/home/yogi/src/os//chrisOS/asm/isr.s:243
        mov esi, exceptionSavedESP
   1026e:	8b 35 ec 01 12 00    	mov    esi,DWORD PTR ds:0x1201ec
/home/yogi/src/os//chrisOS/asm/isr.s:245
//        add esi, 16 #drop the 4 dwords that are passed to the proc
        mov edi, exceptionSavedStack
   10274:	8b 3d a8 01 12 00    	mov    edi,DWORD PTR ds:0x1201a8
/home/yogi/src/os//chrisOS/asm/isr.s:246
        mov cx, 30
   1027a:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:247
        cld
   1027e:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:248
        rep movsd
   1027f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]

00010281 <overSaveTheStack>:
overSaveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:252

        #Figure out which exception handler to call
overSaveTheStack:
        mov ax,exceptionNumber
   10281:	66 a1 a4 01 12 00    	mov    ax,ds:0x1201a4
/home/yogi/src/os//chrisOS/asm/isr.s:253
        cmp ax,0xe
   10287:	66 83 f8 0e          	cmp    ax,0xe
/home/yogi/src/os//chrisOS/asm/isr.s:254
        jne notPagingHandler
   1028b:	75 09                	jne    10296 <notPagingHandler>
/home/yogi/src/os//chrisOS/asm/isr.s:255
        call 0x08:pagingExceptionHandler
   1028d:	9a fd 95 01 00 08 00 	call   0x8:0x195fd
/home/yogi/src/os//chrisOS/asm/isr.s:256
        jmp onTheWayOut
   10294:	eb 07                	jmp    1029d <onTheWayOut>

00010296 <notPagingHandler>:
notPagingHandler():
/home/yogi/src/os//chrisOS/asm/isr.s:260

notPagingHandler:
toDefaultHandler:
        call 0x08:defaultISRHandler
   10296:	9a b5 97 01 00 08 00 	call   0x8:0x197b5

0001029d <onTheWayOut>:
onTheWayOut():
/home/yogi/src/os//chrisOS/asm/isr.s:262
onTheWayOut:
        popad                           # restoring the regs
   1029d:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:263
        mov esp, exceptionSavedESP
   1029e:	8b 25 ec 01 12 00    	mov    esp,DWORD PTR ds:0x1201ec
/home/yogi/src/os//chrisOS/asm/isr.s:265
#        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
        mov ebx,exceptionNumber
   102a4:	8b 1d a4 01 12 00    	mov    ebx,DWORD PTR ds:0x1201a4
/home/yogi/src/os//chrisOS/asm/isr.s:266
        mov bl,[_isr_has_errorCode+ebx]
   102aa:	8a 9b 83 06 01 00    	mov    bl,BYTE PTR [ebx+0x10683]
/home/yogi/src/os//chrisOS/asm/isr.s:267
        cmp bl,1
   102b0:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:268
        jnz overCorrection
   102b3:	75 03                	jne    102b8 <overCorrection>
/home/yogi/src/os//chrisOS/asm/isr.s:269
        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
   102b5:	83 c4 04             	add    esp,0x4

000102b8 <overCorrection>:
overCorrection():
/home/yogi/src/os//chrisOS/asm/isr.s:271
overCorrection:
        mov     bx, exceptionDS
   102b8:	66 8b 1d d8 01 12 00 	mov    bx,WORD PTR ds:0x1201d8
/home/yogi/src/os//chrisOS/asm/isr.s:272
        mov     ds, bx
   102bf:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:273
        mov     bx, exceptionES
   102c1:	66 8b 1d dc 01 12 00 	mov    bx,WORD PTR ds:0x1201dc
/home/yogi/src/os//chrisOS/asm/isr.s:274
        mov     es, bx                  # load ds and es with valid selector
   102c8:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:275
        mov     bx, exceptionFS
   102ca:	66 8b 1d e0 01 12 00 	mov    bx,WORD PTR ds:0x1201e0
/home/yogi/src/os//chrisOS/asm/isr.s:276
        mov     fs,bx
   102d1:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:277
        mov     bx, exceptionGS
   102d3:	66 8b 1d e4 01 12 00 	mov    bx,WORD PTR ds:0x1201e4
/home/yogi/src/os//chrisOS/asm/isr.s:278
	mov     gs, bx
   102da:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:279
        mov ebp,exceptionBP
   102dc:	8b 2d c8 01 12 00    	mov    ebp,DWORD PTR ds:0x1201c8
/home/yogi/src/os//chrisOS/asm/isr.s:280
        mov ebx,exceptionBX
   102e2:	8b 1d b4 01 12 00    	mov    ebx,DWORD PTR ds:0x1201b4
/home/yogi/src/os//chrisOS/asm/isr.s:281
        mov eax, exceptionAX
   102e8:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
/home/yogi/src/os//chrisOS/asm/isr.s:282
        sti
   102ed:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:283
        iretd
   102ee:	cf                   	iret   

000102ef <_isr_15_wrapper>:
_isr_15_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:287

.global _isr_15_wrapper        
_isr_15_wrapper:
        mov exceptionSavedESP, esp
   102ef:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:288
        mov exceptionAX,eax
   102f5:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:289
        mov exceptionBP, ebp
   102fa:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:290
        mov     ebp, esp
   10300:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:291
        mov     ax, 0xf                  # save exception number
   10302:	66 b8 0f 00          	mov    ax,0xf
/home/yogi/src/os//chrisOS/asm/isr.s:292
        jmp isr_My_Common
   10306:	e9 8f fe ff ff       	jmp    1019a <isr_My_Common>

0001030b <_isr_16_wrapper>:
_isr_16_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:295
.global _isr_16_wrapper        
_isr_16_wrapper:
        mov exceptionSavedESP, esp
   1030b:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:296
        mov exceptionAX,eax
   10311:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:297
        mov exceptionBP, ebp
   10316:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:298
        mov     ebp, esp
   1031c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:299
        mov     ax, 0x10                  # save exception number
   1031e:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:300
        jmp isr_My_Common
   10322:	e9 73 fe ff ff       	jmp    1019a <isr_My_Common>

00010327 <_isr_17_wrapper>:
_isr_17_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:303
.global _isr_17_wrapper        
_isr_17_wrapper:
        mov exceptionSavedESP, esp
   10327:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:304
        mov exceptionAX,eax
   1032d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:305
        mov exceptionBP, ebp
   10332:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:306
        mov     ebp, esp
   10338:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:307
        mov     ax, 0x11                  # save exception number
   1033a:	66 b8 11 00          	mov    ax,0x11
/home/yogi/src/os//chrisOS/asm/isr.s:308
        jmp isr_My_Common
   1033e:	e9 57 fe ff ff       	jmp    1019a <isr_My_Common>

00010343 <_isr_18_wrapper>:
_isr_18_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:311
.global _isr_18_wrapper        
_isr_18_wrapper:
        mov exceptionSavedESP, esp
   10343:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:312
        mov exceptionAX,eax
   10349:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:313
        mov exceptionBP, ebp
   1034e:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:314
        mov     ebp, esp
   10354:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:315
        mov     ax, 0x12                  # save exception number
   10356:	66 b8 12 00          	mov    ax,0x12
/home/yogi/src/os//chrisOS/asm/isr.s:316
        jmp isr_My_Common
   1035a:	e9 3b fe ff ff       	jmp    1019a <isr_My_Common>

0001035f <_isr_19_wrapper>:
_isr_19_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:319
.global _isr_19_wrapper        
_isr_19_wrapper:
        mov exceptionSavedESP, esp
   1035f:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:320
        mov exceptionAX,eax
   10365:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:321
        mov exceptionBP, ebp
   1036a:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:322
        mov     ebp, esp
   10370:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:323
        mov     ax, 0x13                  # save exception number
   10372:	66 b8 13 00          	mov    ax,0x13
/home/yogi/src/os//chrisOS/asm/isr.s:324
        jmp isr_My_Common
   10376:	e9 1f fe ff ff       	jmp    1019a <isr_My_Common>

0001037b <_isr_20_wrapper>:
_isr_20_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:327
.global _isr_20_wrapper        #8 based exception 0x14
_isr_20_wrapper:
        mov exceptionSavedESP, esp
   1037b:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:328
        mov exceptionAX,eax
   10381:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:329
        mov exceptionBP, ebp
   10386:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:330
        mov     ebp, esp
   1038c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:331
        mov     ax, 0x14                  # save exception number
   1038e:	66 b8 14 00          	mov    ax,0x14
/home/yogi/src/os//chrisOS/asm/isr.s:332
        jmp isr_My_Common
   10392:	e9 03 fe ff ff       	jmp    1019a <isr_My_Common>

00010397 <_isr_21_wrapper>:
_isr_21_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:335
.global _isr_21_wrapper        
_isr_21_wrapper:
        mov exceptionSavedESP, esp
   10397:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:336
        mov exceptionAX,eax
   1039d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:337
        mov exceptionBP, ebp
   103a2:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:338
        mov     ebp, esp
   103a8:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:339
        mov     ax, 0x15                  # save exception number
   103aa:	66 b8 15 00          	mov    ax,0x15
/home/yogi/src/os//chrisOS/asm/isr.s:340
        jmp isr_My_Common
   103ae:	e9 e7 fd ff ff       	jmp    1019a <isr_My_Common>

000103b3 <_isr_22_wrapper>:
_isr_22_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:343
.global _isr_22_wrapper        
_isr_22_wrapper:
        mov exceptionSavedESP, esp
   103b3:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:344
        mov exceptionAX,eax
   103b9:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:345
        mov exceptionBP, ebp
   103be:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:346
        mov     ebp, esp
   103c4:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:347
        mov     ax, 0x16                  # save exception number
   103c6:	66 b8 16 00          	mov    ax,0x16
/home/yogi/src/os//chrisOS/asm/isr.s:348
        jmp isr_My_Common
   103ca:	e9 cb fd ff ff       	jmp    1019a <isr_My_Common>

000103cf <_isr_23_wrapper>:
_isr_23_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:351
.global _isr_23_wrapper        
_isr_23_wrapper:
        mov exceptionSavedESP, esp
   103cf:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:352
        mov exceptionAX,eax
   103d5:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:353
        mov exceptionBP, ebp
   103da:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:354
        mov     ebp, esp
   103e0:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:355
        mov     ax, 0x17                  # save exception number
   103e2:	66 b8 17 00          	mov    ax,0x17
/home/yogi/src/os//chrisOS/asm/isr.s:356
        jmp isr_My_Common
   103e6:	e9 af fd ff ff       	jmp    1019a <isr_My_Common>

000103eb <_isr_24_wrapper>:
_isr_24_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:359
.global _isr_24_wrapper        
_isr_24_wrapper:
        mov exceptionSavedESP, esp
   103eb:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:360
        mov exceptionAX,eax
   103f1:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:361
        mov exceptionBP, ebp
   103f6:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:362
        mov     ebp, esp
   103fc:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:363
        mov     ax, 0x18                  # save exception number
   103fe:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os//chrisOS/asm/isr.s:364
        jmp isr_My_Common
   10402:	e9 93 fd ff ff       	jmp    1019a <isr_My_Common>

00010407 <_isr_25_wrapper>:
_isr_25_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:367
.global _isr_25_wrapper        
_isr_25_wrapper:
        mov exceptionSavedESP, esp
   10407:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:368
        mov exceptionAX,eax
   1040d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:369
        mov exceptionBP, ebp
   10412:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:370
        mov     ebp, esp
   10418:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:371
        mov     ax, 0x19                  # save exception number
   1041a:	66 b8 19 00          	mov    ax,0x19
/home/yogi/src/os//chrisOS/asm/isr.s:372
        jmp isr_My_Common
   1041e:	e9 77 fd ff ff       	jmp    1019a <isr_My_Common>

00010423 <_isr_26_wrapper>:
_isr_26_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:375
.global _isr_26_wrapper        
_isr_26_wrapper:
        mov exceptionSavedESP, esp
   10423:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:376
        mov exceptionAX,eax
   10429:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:377
        mov exceptionBP, ebp
   1042e:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:378
        mov     ebp, esp
   10434:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:379
        mov     ax, 0x1a                  # save exception number
   10436:	66 b8 1a 00          	mov    ax,0x1a
/home/yogi/src/os//chrisOS/asm/isr.s:380
        jmp isr_My_Common
   1043a:	e9 5b fd ff ff       	jmp    1019a <isr_My_Common>

0001043f <_isr_27_wrapper>:
_isr_27_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:383
.global _isr_27_wrapper        
_isr_27_wrapper:
        mov exceptionSavedESP, esp
   1043f:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:384
        mov exceptionAX,eax
   10445:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:385
        mov exceptionBP, ebp
   1044a:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:386
        mov     ebp, esp
   10450:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:387
        mov     ax, 0x1b                  # save exception number
   10452:	66 b8 1b 00          	mov    ax,0x1b
/home/yogi/src/os//chrisOS/asm/isr.s:388
        jmp isr_My_Common
   10456:	e9 3f fd ff ff       	jmp    1019a <isr_My_Common>

0001045b <_isr_28_wrapper>:
_isr_28_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:391
.global _isr_28_wrapper        
_isr_28_wrapper:
        mov exceptionSavedESP, esp
   1045b:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:392
        mov exceptionAX,eax
   10461:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:393
        mov exceptionBP, ebp
   10466:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:394
        mov     ebp, esp
   1046c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:395
        mov     ax, 0x1c                  # save exception number
   1046e:	66 b8 1c 00          	mov    ax,0x1c
/home/yogi/src/os//chrisOS/asm/isr.s:396
        jmp isr_My_Common
   10472:	e9 23 fd ff ff       	jmp    1019a <isr_My_Common>

00010477 <_isr_29_wrapper>:
_isr_29_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:399
.global _isr_29_wrapper        
_isr_29_wrapper:
        mov exceptionSavedESP, esp
   10477:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:400
        mov exceptionAX,eax
   1047d:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:401
        mov exceptionBP, ebp
   10482:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:402
        mov     ebp, esp
   10488:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:403
        mov     ax, 0x1d                  # save exception number
   1048a:	66 b8 1d 00          	mov    ax,0x1d
/home/yogi/src/os//chrisOS/asm/isr.s:404
        jmp isr_My_Common
   1048e:	e9 07 fd ff ff       	jmp    1019a <isr_My_Common>

00010493 <_isr_30_wrapper>:
_isr_30_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:407
.global _isr_30_wrapper        
_isr_30_wrapper:
        mov exceptionSavedESP, esp
   10493:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:408
        mov exceptionAX,eax
   10499:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:409
        mov exceptionBP, ebp
   1049e:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:410
        mov     ebp, esp
   104a4:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:411
        mov     ax, 0x1e                  # save exception number
   104a6:	66 b8 1e 00          	mov    ax,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:412
        jmp isr_My_Common
   104aa:	e9 eb fc ff ff       	jmp    1019a <isr_My_Common>

000104af <_isr_31_wrapper>:
_isr_31_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:415
.global _isr_31_wrapper        
_isr_31_wrapper:                            #DEBUG EXCEPTION
cli
   104af:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:416
    mov debugBP,ebp
   104b0:	89 2d 1c 02 12 00    	mov    DWORD PTR ds:0x12021c,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:417
    mov debugSavedESP, esp
   104b6:	89 25 40 02 12 00    	mov    DWORD PTR ds:0x120240,esp
/home/yogi/src/os//chrisOS/asm/isr.s:418
    mov debugESP,esp
   104bc:	89 25 1c 00 01 00    	mov    DWORD PTR ds:0x1001c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:419
    pushad
   104c2:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:420
    mov ebp, debugESP
   104c3:	8b 2d 1c 00 01 00    	mov    ebp,DWORD PTR ds:0x1001c
/home/yogi/src/os//chrisOS/asm/isr.s:422
    
    mov debugBX, ebx
   104c9:	89 1d 08 02 12 00    	mov    DWORD PTR ds:0x120208,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:423
    mov ebx,debugSavedESP
   104cf:	8b 1d 40 02 12 00    	mov    ebx,DWORD PTR ds:0x120240
/home/yogi/src/os//chrisOS/asm/isr.s:424
    add ebx,12
   104d5:	83 c3 0c             	add    ebx,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:425
    mov debugSavedESP,ebx
   104d8:	89 1d 40 02 12 00    	mov    DWORD PTR ds:0x120240,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:426
    mov ebx, [ebp+8]
   104de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:427
    mov debugFlags, ebx
   104e1:	89 1d 44 02 12 00    	mov    DWORD PTR ds:0x120244,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:428
    mov debugReturnFlags,ebx
   104e7:	89 1d 14 00 01 00    	mov    DWORD PTR ds:0x10014,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:429
    movw bx, [ebp+4]
   104ed:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:430
    movw debugCS, bx
   104f1:	66 89 1d 4c 02 12 00 	mov    WORD PTR ds:0x12024c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:431
    mov ebx, [ebp+0]
   104f8:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:432
    mov debugEIP, ebx
   104fb:	89 1d 50 02 12 00    	mov    DWORD PTR ds:0x120250,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:434

    mov debugCX, ecx
   10501:	89 0d 0c 02 12 00    	mov    DWORD PTR ds:0x12020c,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:435
    mov debugDX, edx
   10507:	89 15 10 02 12 00    	mov    DWORD PTR ds:0x120210,edx
/home/yogi/src/os//chrisOS/asm/isr.s:436
    mov debugSI, esi
   1050d:	89 35 14 02 12 00    	mov    DWORD PTR ds:0x120214,esi
/home/yogi/src/os//chrisOS/asm/isr.s:437
    mov debugDI, edi
   10513:	89 3d 18 02 12 00    	mov    DWORD PTR ds:0x120218,edi
/home/yogi/src/os//chrisOS/asm/isr.s:438
    mov debugAX,eax
   10519:	a3 04 02 12 00       	mov    ds:0x120204,eax
/home/yogi/src/os//chrisOS/asm/isr.s:440

    movw ax,ds
   1051e:	66 8c d8             	mov    ax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:441
    movw debugDS,eax
   10521:	66 a3 2c 02 12 00    	mov    ds:0x12022c,ax
/home/yogi/src/os//chrisOS/asm/isr.s:442
    mov eax, cr0
   10527:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:443
    mov debugCR0, eax
   1052a:	a3 20 02 12 00       	mov    ds:0x120220,eax
/home/yogi/src/os//chrisOS/asm/isr.s:444
    mov eax, cr3
   1052f:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:445
    mov debugCR3, eax
   10532:	a3 24 02 12 00       	mov    ds:0x120224,eax
/home/yogi/src/os//chrisOS/asm/isr.s:446
    mov eax, cr4
   10537:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:447
    mov debugCR4, eax
   1053a:	a3 28 02 12 00       	mov    ds:0x120228,eax
/home/yogi/src/os//chrisOS/asm/isr.s:448
    mov eax,es
   1053f:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:449
    mov debugES,eax
   10541:	a3 30 02 12 00       	mov    ds:0x120230,eax
/home/yogi/src/os//chrisOS/asm/isr.s:450
    mov eax,fs
   10546:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:451
    mov debugFS,eax
   10548:	a3 34 02 12 00       	mov    ds:0x120234,eax
/home/yogi/src/os//chrisOS/asm/isr.s:452
    mov eax,gs
   1054d:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:453
    mov debugGS,eax
   1054f:	a3 38 02 12 00       	mov    ds:0x120238,eax
/home/yogi/src/os//chrisOS/asm/isr.s:454
    mov eax,ss
   10554:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:455
    mov debugSS,eax
   10556:	a3 3c 02 12 00       	mov    ds:0x12023c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:457

    mov esi, debugSavedESP
   1055b:	8b 35 40 02 12 00    	mov    esi,DWORD PTR ds:0x120240
/home/yogi/src/os//chrisOS/asm/isr.s:458
    mov edi, debugSavedStack
   10561:	8b 3d ac 01 12 00    	mov    edi,DWORD PTR ds:0x1201ac
/home/yogi/src/os//chrisOS/asm/isr.s:459
    mov cx, 30
   10567:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:460
    cld
   1056b:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:461
    rep movsd
   1056c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
/home/yogi/src/os//chrisOS/asm/isr.s:462
    call debugStep
   1056e:	e8 2a a7 00 00       	call   1ac9d <debugStep>
/home/yogi/src/os//chrisOS/asm/isr.s:463
    popa
   10573:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:464
    sti
   10574:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:465
    iretd
   10575:	cf                   	iret   

00010576 <_isr_32_wrapper>:
_isr_32_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:468
.global _isr_32_wrapper        
_isr_32_wrapper:
        mov exceptionSavedESP, esp
   10576:	89 25 ec 01 12 00    	mov    DWORD PTR ds:0x1201ec,esp
/home/yogi/src/os//chrisOS/asm/isr.s:469
        mov exceptionAX,eax
   1057c:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:470
        mov exceptionBP, ebp
   10581:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:471
        mov     ebp, esp
   10587:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:472
        mov     ax, 0x20                  # save exception number
   10589:	66 b8 20 00          	mov    ax,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:473
        jmp isr_My_Common
   1058d:	e9 08 fc ff ff       	jmp    1019a <isr_My_Common>

00010592 <_irq0_handler>:
_irq0_handler():
/home/yogi/src/os//chrisOS/asm/isr.s:478


.global _irq0_handler
_irq0_handler:                #remapped to 0x08
cli
   10592:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:480
#cli;hlt;
        push    ebp
   10593:	55                   	push   ebp
/home/yogi/src/os//chrisOS/asm/isr.s:481
        pushf
   10594:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:482
        mov     ebp, esp
   10595:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:483
        add ebp,4
   10597:	83 c5 04             	add    ebp,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:484
        push eax
   1059a:	50                   	push   eax
/home/yogi/src/os//chrisOS/asm/isr.s:485
        mov ax,0xFFFF
   1059b:	66 b8 ff ff          	mov    ax,0xffff
/home/yogi/src/os//chrisOS/asm/isr.s:486
cld
   1059f:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:488
#cld #C code following the sysV ABI requires DF to be clear on function entry
        push    ebx
   105a0:	53                   	push   ebx
/home/yogi/src/os//chrisOS/asm/isr.s:489
        mov ebx, [ebp+12]
   105a1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:490
        mov exceptionFlags, ebx
   105a4:	89 1d f0 01 12 00    	mov    DWORD PTR ds:0x1201f0,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:491
        mov bx, [ebp+8]
   105aa:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:492
        mov exceptionCS, bx
   105ae:	66 89 1d fc 01 12 00 	mov    WORD PTR ds:0x1201fc,bx
/home/yogi/src/os//chrisOS/asm/isr.s:493
        mov ebx, [ebp+4]
   105b5:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:494
        mov exceptionEIP, ebx
   105b8:	89 1d f8 01 12 00    	mov    DWORD PTR ds:0x1201f8,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:495
        pop ebx
   105be:	5b                   	pop    ebx
/home/yogi/src/os//chrisOS/asm/isr.s:496
        pushad                          # other regs because its an ISR
   105bf:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:497
         mov     bx, 0x10
   105c0:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:498
        mov     ds, bx
   105c4:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:499
        mov     es, bx                  # load ds and es with valid selector
   105c6:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:500
	mov     gs, bx
   105c8:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:501
        call    irq0_handler          # call actual ISR code
   105ca:	e8 25 8b 00 00       	call   190f4 <irq0_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:502
        popad  
   105cf:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:503
mov al,0x20
   105d0:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:504
out 0x20,al
   105d2:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:507
//mov eax,0
//mov [0xa000B0],eax
        pop eax
   105d4:	58                   	pop    eax
/home/yogi/src/os//chrisOS/asm/isr.s:508
        popf
   105d5:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:509
        pop ebp                         # restoring the regs
   105d6:	5d                   	pop    ebp
/home/yogi/src/os//chrisOS/asm/isr.s:510
        sti
   105d7:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:511
        iretd
   105d8:	cf                   	iret   

000105d9 <_isr_01_wrapper>:
_isr_01_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:514
.global _isr_01_wrapper        
_isr_01_wrapper:                #KEYBOARD HANDLER
cli
   105d9:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:519
#cli;hlt;
        //clear the trap flag if it is set
        //we'll re-set it later if need be
        //andw [esp+8],0xFEFF
        mov exceptionAX, eax
   105da:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:520
        mov exceptionBX, ebx
   105df:	89 1d b4 01 12 00    	mov    DWORD PTR ds:0x1201b4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:521
        mov exceptionCX, ecx
   105e5:	89 0d b8 01 12 00    	mov    DWORD PTR ds:0x1201b8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:522
        mov exceptionDX, edx
   105eb:	89 15 bc 01 12 00    	mov    DWORD PTR ds:0x1201bc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:523
        mov exceptionSI, esi
   105f1:	89 35 c0 01 12 00    	mov    DWORD PTR ds:0x1201c0,esi
/home/yogi/src/os//chrisOS/asm/isr.s:524
        mov exceptionDI, edi
   105f7:	89 3d c4 01 12 00    	mov    DWORD PTR ds:0x1201c4,edi
/home/yogi/src/os//chrisOS/asm/isr.s:525
        mov exceptionBP, ebp
   105fd:	89 2d c8 01 12 00    	mov    DWORD PTR ds:0x1201c8,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:526
        mov eax, cr0
   10603:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:527
        mov exceptionCR0, eax
   10606:	a3 cc 01 12 00       	mov    ds:0x1201cc,eax
/home/yogi/src/os//chrisOS/asm/isr.s:528
        mov eax, cr3
   1060b:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:529
        mov exceptionCR3, eax
   1060e:	a3 d0 01 12 00       	mov    ds:0x1201d0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:530
        mov eax, cr4
   10613:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:531
        mov exceptionCR4, eax
   10616:	a3 d4 01 12 00       	mov    ds:0x1201d4,eax
/home/yogi/src/os//chrisOS/asm/isr.s:532
        mov eax, exceptionAX
   1061b:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
/home/yogi/src/os//chrisOS/asm/isr.s:533
        pushad
   10620:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:534
        pushf
   10621:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:535
        mov     ebp, esp
   10622:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:536
        add ebp,36
   10624:	83 c5 24             	add    ebp,0x24
/home/yogi/src/os//chrisOS/asm/isr.s:537
        mov ax,0x0001
   10627:	66 b8 01 00          	mov    ax,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:538
cld
   1062b:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:540
#cld #C code following the sysV ABI requires DF to be clear on function entry
        mov ebx, [ebp+8]
   1062c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:541
        mov exceptionFlags, ebx
   1062f:	89 1d f0 01 12 00    	mov    DWORD PTR ds:0x1201f0,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:542
        mov bx, [ebp+4]
   10635:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:543
        mov exceptionCS, bx
   10639:	66 89 1d fc 01 12 00 	mov    WORD PTR ds:0x1201fc,bx
/home/yogi/src/os//chrisOS/asm/isr.s:544
        mov ebx, [ebp+0]
   10640:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:545
        mov exceptionEIP, ebx
   10643:	89 1d f8 01 12 00    	mov    DWORD PTR ds:0x1201f8,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:546
        mov     bx, 0x10
   10649:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:547
        mov     ds, bx
   1064d:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:548
        mov     es, bx                  # load ds and es with valid selector
   1064f:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:549
	mov     gs, bx
   10651:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:550
        call    kbd_handler          # call actual ISR code
   10653:	e8 e7 8b 00 00       	call   1923f <kbd_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:551
        popf
   10658:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:552
        popad  
   10659:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:553
mov al,0x20
   1065a:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:554
out 0x20,al
   1065c:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:555
        mov     al,kKbdHandlerActivateDebugger
   1065e:	a0 74 65 09 00       	mov    al,ds:0x96574
/home/yogi/src/os//chrisOS/asm/isr.s:556
        cmp     al,1
   10663:	3c 01                	cmp    al,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:557
        jne done
   10665:	75 13                	jne    1067a <done>
/home/yogi/src/os//chrisOS/asm/isr.s:558
        orw [esp+8],0x100
   10667:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:559
        mov al,0
   1066e:	b0 00                	mov    al,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:560
        mov kKbdHandlerActivateDebugger,al
   10670:	a2 74 65 09 00       	mov    ds:0x96574,al
/home/yogi/src/os//chrisOS/asm/isr.s:561
        mov eax,exceptionAX
   10675:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0

0001067a <done>:
done():
/home/yogi/src/os//chrisOS/asm/isr.s:563
done:
        sti
   1067a:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:564
        iretd
   1067b:	cf                   	iret   

0001067c <_call_gate_wrapper>:
_call_gate_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:570



.global _call_gate_wrapper
_call_gate_wrapper:
        push    ds
   1067c:	1e                   	push   ds
/home/yogi/src/os//chrisOS/asm/isr.s:571
        push    es                      # saving segment registers and
   1067d:	06                   	push   es
/home/yogi/src/os//chrisOS/asm/isr.s:572
        pushad                          # other regs because its an ISR
   1067e:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:574
 #       call    call_gate_proc
        popad                           # restoring the regs
   1067f:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:575
        pop     es
   10680:	07                   	pop    es
/home/yogi/src/os//chrisOS/asm/isr.s:576
        pop     ds
   10681:	1f                   	pop    ds
/home/yogi/src/os//chrisOS/asm/isr.s:577
        retf
   10682:	cb                   	retf   

00010683 <_isr_has_errorCode>:
	...
_isr_has_errorCode():
   1068b:	01 00                	add    DWORD PTR [eax],eax
   1068d:	01 01                	add    DWORD PTR [ecx],eax
   1068f:	01 01                	add    DWORD PTR [ecx],eax
   10691:	01 00                	add    DWORD PTR [eax],eax
   10693:	00 01                	add    BYTE PTR [ecx],al
	...

000106a3 <_ltr>:
_ltr():
/home/yogi/src/os//chrisOS/asm/isr.s:583

        _isr_has_errorCode:  .byte      0,0,0,0,0,0,0,0, 1,0,1,1,1,1,1,0
                             .byte      0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0
.global _ltr
_ltr:
		push ax
   106a3:	66 50                	push   ax
/home/yogi/src/os//chrisOS/asm/isr.s:584
		mov ax, 0x58
   106a5:	66 b8 58 00          	mov    ax,0x58
/home/yogi/src/os//chrisOS/asm/isr.s:585
        ltr     ax
   106a9:	0f 00 d8             	ltr    ax
/home/yogi/src/os//chrisOS/asm/isr.s:586
        pop ax
   106ac:	66 58                	pop    ax
/home/yogi/src/os//chrisOS/asm/isr.s:587
        ret
   106ae:	c3                   	ret    
   106af:	90                   	nop

000106b0 <strftime>:
strftime():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:58

static char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim);
static char *_conv(const int n, char *format, char *pt, const char *ptlim);
static char *_add(const char *str, char *pt, const char *ptlim);

size_t HIGH_CODE_SECTION strftime(char *s, size_t maxsize, const char *format, const struct tm *t) {
   106b0:	55                   	push   ebp
   106b1:	89 e5                	mov    ebp,esp
   106b3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61
  char *p;

  p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize);
   106b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106bc:	01 c2                	add    edx,eax
   106be:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   106c2:	74 05                	je     106c9 <strftime+0x19>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 1)
   106c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   106c7:	eb 05                	jmp    106ce <strftime+0x1e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 2)
   106c9:	b8 00 50 04 00       	mov    eax,0x45000
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 4)
   106ce:	52                   	push   edx
   106cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   106d2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   106d5:	50                   	push   eax
   106d6:	e8 2c 00 00 00       	call   10707 <_fmt>
   106db:	83 c4 10             	add    esp,0x10
   106de:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 4)
  if (p == s + maxsize) return 0;
   106e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106e7:	01 d0                	add    eax,edx
   106e9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   106ec:	75 07                	jne    106f5 <strftime+0x45>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 1)
   106ee:	b8 00 00 00 00       	mov    eax,0x0
   106f3:	eb 10                	jmp    10705 <strftime+0x55>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:63
  *p = '\0';
   106f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   106f8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:64
  return p - s;
   106fb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   106fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10701:	29 c2                	sub    edx,eax
   10703:	89 d0                	mov    eax,edx
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:65
}
   10705:	c9                   	leave  
   10706:	c3                   	ret    

00010707 <_fmt>:
_fmt():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:67

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
   10707:	55                   	push   ebp
   10708:	89 e5                	mov    ebp,esp
   1070a:	53                   	push   ebx
   1070b:	83 ec 74             	sub    esp,0x74
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  for ( ; *format; ++format) {
   1070e:	e9 68 0a 00 00       	jmp    1117b <_fmt+0xa74>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:69
    if (*format == '%') {
   10713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10716:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10719:	3c 25                	cmp    al,0x25
   1071b:	0f 85 3d 0a 00 00    	jne    1115e <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:70
      if (*format == 'E') {
   10721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10724:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10727:	3c 45                	cmp    al,0x45
   10729:	75 06                	jne    10731 <_fmt+0x2a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:71
        format++; // Alternate Era
   1072b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1072f:	eb 0e                	jmp    1073f <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:72
      } else if (*format == 'O') {
   10731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10734:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10737:	3c 4f                	cmp    al,0x4f
   10739:	75 04                	jne    1073f <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:73
        format++; // Alternate numeric symbols
   1073b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:76
      }

      switch (*++format) {
   1073f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   10743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10746:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10749:	0f be c0             	movsx  eax,al
   1074c:	83 f8 7a             	cmp    eax,0x7a
   1074f:	0f 87 08 0a 00 00    	ja     1115d <_fmt+0xa56>
   10755:	8b 04 85 94 50 04 00 	mov    eax,DWORD PTR [eax*4+0x45094]
   1075c:	ff e0                	jmp    eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:78
        case '\0':
          --format;
   1075e:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:79
          break;
   10762:	e9 f7 09 00 00       	jmp    1115e <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82

        case 'A':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days[t->tm_wday], pt, ptlim);
   10767:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1076a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1076d:	85 c0                	test   eax,eax
   1076f:	78 1a                	js     1078b <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 1)
   10771:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10774:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10777:	83 f8 06             	cmp    eax,0x6
   1077a:	7f 0f                	jg     1078b <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 3)
   1077c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1077f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10782:	8b 04 85 58 04 12 00 	mov    eax,DWORD PTR [eax*4+0x120458]
   10789:	eb 05                	jmp    10790 <_fmt+0x89>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 4)
   1078b:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 6)
   10790:	83 ec 04             	sub    esp,0x4
   10793:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10796:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10799:	50                   	push   eax
   1079a:	e8 27 0a 00 00       	call   111c6 <_add>
   1079f:	83 c4 10             	add    esp,0x10
   107a2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:83 (discriminator 6)
          continue;
   107a5:	e9 cd 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86

        case 'a':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days_abbrev[t->tm_wday], pt, ptlim);
   107aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107ad:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107b0:	85 c0                	test   eax,eax
   107b2:	78 1a                	js     107ce <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 1)
   107b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107b7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107ba:	83 f8 06             	cmp    eax,0x6
   107bd:	7f 0f                	jg     107ce <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 3)
   107bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107c2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107c5:	8b 04 85 74 04 12 00 	mov    eax,DWORD PTR [eax*4+0x120474]
   107cc:	eb 05                	jmp    107d3 <_fmt+0xcc>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 4)
   107ce:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 6)
   107d3:	83 ec 04             	sub    esp,0x4
   107d6:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   107d9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   107dc:	50                   	push   eax
   107dd:	e8 e4 09 00 00       	call   111c6 <_add>
   107e2:	83 c4 10             	add    esp,0x10
   107e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:87 (discriminator 6)
          continue;
   107e8:	e9 8a 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90

        case 'B':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months[t->tm_mon], pt, ptlim);
   107ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   107f3:	85 c0                	test   eax,eax
   107f5:	78 1a                	js     10811 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 1)
   107f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   107fd:	83 f8 0b             	cmp    eax,0xb
   10800:	7f 0f                	jg     10811 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 3)
   10802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10808:	8b 04 85 a0 04 12 00 	mov    eax,DWORD PTR [eax*4+0x1204a0]
   1080f:	eb 05                	jmp    10816 <_fmt+0x10f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 4)
   10811:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 6)
   10816:	83 ec 04             	sub    esp,0x4
   10819:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1081c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1081f:	50                   	push   eax
   10820:	e8 a1 09 00 00       	call   111c6 <_add>
   10825:	83 c4 10             	add    esp,0x10
   10828:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:91 (discriminator 6)
          continue;
   1082b:	e9 47 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95

        case 'b':
        case 'h':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months_abbrev[t->tm_mon], pt, ptlim);
   10830:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10833:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10836:	85 c0                	test   eax,eax
   10838:	78 1a                	js     10854 <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 1)
   1083a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1083d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10840:	83 f8 0b             	cmp    eax,0xb
   10843:	7f 0f                	jg     10854 <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 3)
   10845:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1084b:	8b 04 85 e0 04 12 00 	mov    eax,DWORD PTR [eax*4+0x1204e0]
   10852:	eb 05                	jmp    10859 <_fmt+0x152>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 4)
   10854:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 6)
   10859:	83 ec 04             	sub    esp,0x4
   1085c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1085f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10862:	50                   	push   eax
   10863:	e8 5e 09 00 00       	call   111c6 <_add>
   10868:	83 c4 10             	add    esp,0x10
   1086b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:96 (discriminator 6)
          continue;
   1086e:	e9 04 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:99

        case 'C':
          pt = _conv((t->tm_year + TM_YEAR_BASE) / 100, "%02d", pt, ptlim);
   10873:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10876:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10879:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1087f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10884:	89 c8                	mov    eax,ecx
   10886:	f7 ea                	imul   edx
   10888:	c1 fa 05             	sar    edx,0x5
   1088b:	89 c8                	mov    eax,ecx
   1088d:	c1 f8 1f             	sar    eax,0x1f
   10890:	29 c2                	sub    edx,eax
   10892:	89 d0                	mov    eax,edx
   10894:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10897:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1089a:	68 05 50 04 00       	push   0x45005
   1089f:	50                   	push   eax
   108a0:	e8 ef 08 00 00       	call   11194 <_conv>
   108a5:	83 c4 10             	add    esp,0x10
   108a8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:100
          continue;
   108ab:	e9 c7 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:103

        case 'c':
          pt = _fmt("%a %b %e %H:%M:%S %Y", t, pt, ptlim);
   108b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108b9:	68 0a 50 04 00       	push   0x4500a
   108be:	e8 44 fe ff ff       	call   10707 <_fmt>
   108c3:	83 c4 10             	add    esp,0x10
   108c6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:104
          continue;
   108c9:	e9 a9 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:107

        case 'D':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   108ce:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108d1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108d4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108d7:	68 1f 50 04 00       	push   0x4501f
   108dc:	e8 26 fe ff ff       	call   10707 <_fmt>
   108e1:	83 c4 10             	add    esp,0x10
   108e4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:108
          continue;
   108e7:	e9 8b 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:111

        case 'd':
          pt = _conv(t->tm_mday, "%02d", pt, ptlim);
   108ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   108ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   108f2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108f5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108f8:	68 05 50 04 00       	push   0x45005
   108fd:	50                   	push   eax
   108fe:	e8 91 08 00 00       	call   11194 <_conv>
   10903:	83 c4 10             	add    esp,0x10
   10906:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:112
          continue;
   10909:	e9 69 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:115

        case 'e':
          pt = _conv(t->tm_mday, "%2d", pt, ptlim);
   1090e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10911:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   10914:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10917:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1091a:	68 28 50 04 00       	push   0x45028
   1091f:	50                   	push   eax
   10920:	e8 6f 08 00 00       	call   11194 <_conv>
   10925:	83 c4 10             	add    esp,0x10
   10928:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:116
          continue;
   1092b:	e9 47 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:119

        case 'F':
          pt = _fmt("%Y-%m-%d", t, pt, ptlim);
   10930:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10933:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10936:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10939:	68 2c 50 04 00       	push   0x4502c
   1093e:	e8 c4 fd ff ff       	call   10707 <_fmt>
   10943:	83 c4 10             	add    esp,0x10
   10946:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:120
          continue;
   10949:	e9 29 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:123

        case 'H':
          pt = _conv(t->tm_hour, "%02d", pt, ptlim);
   1094e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10951:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10954:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10957:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1095a:	68 05 50 04 00       	push   0x45005
   1095f:	50                   	push   eax
   10960:	e8 2f 08 00 00       	call   11194 <_conv>
   10965:	83 c4 10             	add    esp,0x10
   10968:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:124
          continue;
   1096b:	e9 07 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127

        case 'I':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%02d", pt, ptlim);
   10970:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10973:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10976:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   1097b:	89 c8                	mov    eax,ecx
   1097d:	f7 ea                	imul   edx
   1097f:	d1 fa                	sar    edx,1
   10981:	89 c8                	mov    eax,ecx
   10983:	c1 f8 1f             	sar    eax,0x1f
   10986:	29 c2                	sub    edx,eax
   10988:	89 d0                	mov    eax,edx
   1098a:	01 c0                	add    eax,eax
   1098c:	01 d0                	add    eax,edx
   1098e:	c1 e0 02             	shl    eax,0x2
   10991:	29 c1                	sub    ecx,eax
   10993:	89 ca                	mov    edx,ecx
   10995:	85 d2                	test   edx,edx
   10997:	74 27                	je     109c0 <_fmt+0x2b9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 1)
   10999:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1099c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   1099f:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   109a4:	89 c8                	mov    eax,ecx
   109a6:	f7 ea                	imul   edx
   109a8:	d1 fa                	sar    edx,1
   109aa:	89 c8                	mov    eax,ecx
   109ac:	c1 f8 1f             	sar    eax,0x1f
   109af:	29 c2                	sub    edx,eax
   109b1:	89 d0                	mov    eax,edx
   109b3:	01 c0                	add    eax,eax
   109b5:	01 d0                	add    eax,edx
   109b7:	c1 e0 02             	shl    eax,0x2
   109ba:	29 c1                	sub    ecx,eax
   109bc:	89 ca                	mov    edx,ecx
   109be:	eb 05                	jmp    109c5 <_fmt+0x2be>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 2)
   109c0:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 4)
   109c5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109c8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109cb:	68 05 50 04 00       	push   0x45005
   109d0:	52                   	push   edx
   109d1:	e8 be 07 00 00       	call   11194 <_conv>
   109d6:	83 c4 10             	add    esp,0x10
   109d9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:128 (discriminator 4)
          continue;
   109dc:	e9 96 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:131

        case 'j':
          pt = _conv(t->tm_yday + 1, "%03d", pt, ptlim);
   109e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   109e4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   109e7:	83 c0 01             	add    eax,0x1
   109ea:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109ed:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109f0:	68 35 50 04 00       	push   0x45035
   109f5:	50                   	push   eax
   109f6:	e8 99 07 00 00       	call   11194 <_conv>
   109fb:	83 c4 10             	add    esp,0x10
   109fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:132
          continue;
   10a01:	e9 71 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:135

        case 'k':
          pt = _conv(t->tm_hour, "%2d", pt, ptlim);
   10a06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10a0c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a0f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a12:	68 28 50 04 00       	push   0x45028
   10a17:	50                   	push   eax
   10a18:	e8 77 07 00 00       	call   11194 <_conv>
   10a1d:	83 c4 10             	add    esp,0x10
   10a20:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:136
          continue;
   10a23:	e9 4f 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139

        case 'l':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%2d", pt, ptlim);
   10a28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a2b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a2e:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a33:	89 c8                	mov    eax,ecx
   10a35:	f7 ea                	imul   edx
   10a37:	d1 fa                	sar    edx,1
   10a39:	89 c8                	mov    eax,ecx
   10a3b:	c1 f8 1f             	sar    eax,0x1f
   10a3e:	29 c2                	sub    edx,eax
   10a40:	89 d0                	mov    eax,edx
   10a42:	01 c0                	add    eax,eax
   10a44:	01 d0                	add    eax,edx
   10a46:	c1 e0 02             	shl    eax,0x2
   10a49:	29 c1                	sub    ecx,eax
   10a4b:	89 ca                	mov    edx,ecx
   10a4d:	85 d2                	test   edx,edx
   10a4f:	74 27                	je     10a78 <_fmt+0x371>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 1)
   10a51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a54:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a57:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a5c:	89 c8                	mov    eax,ecx
   10a5e:	f7 ea                	imul   edx
   10a60:	d1 fa                	sar    edx,1
   10a62:	89 c8                	mov    eax,ecx
   10a64:	c1 f8 1f             	sar    eax,0x1f
   10a67:	29 c2                	sub    edx,eax
   10a69:	89 d0                	mov    eax,edx
   10a6b:	01 c0                	add    eax,eax
   10a6d:	01 d0                	add    eax,edx
   10a6f:	c1 e0 02             	shl    eax,0x2
   10a72:	29 c1                	sub    ecx,eax
   10a74:	89 ca                	mov    edx,ecx
   10a76:	eb 05                	jmp    10a7d <_fmt+0x376>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 2)
   10a78:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 4)
   10a7d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a80:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a83:	68 28 50 04 00       	push   0x45028
   10a88:	52                   	push   edx
   10a89:	e8 06 07 00 00       	call   11194 <_conv>
   10a8e:	83 c4 10             	add    esp,0x10
   10a91:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:140 (discriminator 4)
          continue;
   10a94:	e9 de 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:143

        case 'M':
          pt = _conv(t->tm_min, "%02d", pt, ptlim);
   10a99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   10a9f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10aa2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10aa5:	68 05 50 04 00       	push   0x45005
   10aaa:	50                   	push   eax
   10aab:	e8 e4 06 00 00       	call   11194 <_conv>
   10ab0:	83 c4 10             	add    esp,0x10
   10ab3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:144
          continue;
   10ab6:	e9 bc 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:148

        case 'm':
          //CLR 05/02/2016 - removed odd +1 after tm_mon
          pt = _conv(t->tm_mon, "%02d", pt, ptlim);
   10abb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10abe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10ac1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ac4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ac7:	68 05 50 04 00       	push   0x45005
   10acc:	50                   	push   eax
   10acd:	e8 c2 06 00 00       	call   11194 <_conv>
   10ad2:	83 c4 10             	add    esp,0x10
   10ad5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:149
          continue;
   10ad8:	e9 9a 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:152

        case 'n':
          pt = _add("\n", pt, ptlim);
   10add:	83 ec 04             	sub    esp,0x4
   10ae0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ae3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ae6:	68 3a 50 04 00       	push   0x4503a
   10aeb:	e8 d6 06 00 00       	call   111c6 <_add>
   10af0:	83 c4 10             	add    esp,0x10
   10af3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:153
          continue;
   10af6:	e9 7c 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156

        case 'p':
          pt = _add((t->tm_hour >= 12) ? "pm" : "am", pt, ptlim);
   10afb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10afe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10b01:	83 f8 0b             	cmp    eax,0xb
   10b04:	7e 07                	jle    10b0d <_fmt+0x406>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 1)
   10b06:	b8 3c 50 04 00       	mov    eax,0x4503c
   10b0b:	eb 05                	jmp    10b12 <_fmt+0x40b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 2)
   10b0d:	b8 3f 50 04 00       	mov    eax,0x4503f
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 4)
   10b12:	83 ec 04             	sub    esp,0x4
   10b15:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b18:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b1b:	50                   	push   eax
   10b1c:	e8 a5 06 00 00       	call   111c6 <_add>
   10b21:	83 c4 10             	add    esp,0x10
   10b24:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:157 (discriminator 4)
          continue;
   10b27:	e9 4b 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:160

        case 'R':
          pt = _fmt("%H:%M", t, pt, ptlim);
   10b2c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b2f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b32:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b35:	68 42 50 04 00       	push   0x45042
   10b3a:	e8 c8 fb ff ff       	call   10707 <_fmt>
   10b3f:	83 c4 10             	add    esp,0x10
   10b42:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:161
          continue;
   10b45:	e9 2d 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:164

        case 'r':
          pt = _fmt("%I:%M:%S %p", t, pt, ptlim);
   10b4a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b4d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b50:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b53:	68 48 50 04 00       	push   0x45048
   10b58:	e8 aa fb ff ff       	call   10707 <_fmt>
   10b5d:	83 c4 10             	add    esp,0x10
   10b60:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:165
          continue;
   10b63:	e9 0f 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:168

        case 'S':
          pt = _conv(t->tm_sec, "%02d", pt, ptlim);
   10b68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b6b:	8b 00                	mov    eax,DWORD PTR [eax]
   10b6d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b70:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b73:	68 05 50 04 00       	push   0x45005
   10b78:	50                   	push   eax
   10b79:	e8 16 06 00 00       	call   11194 <_conv>
   10b7e:	83 c4 10             	add    esp,0x10
   10b81:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:169
          continue;
   10b84:	e9 ee 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:176
        case 's': {
          struct tm  tm;
          char buf[32];
          time_t mkt;

          tm = *t;
   10b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b8c:	8b 10                	mov    edx,DWORD PTR [eax]
   10b8e:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   10b91:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   10b94:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
   10b97:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   10b9a:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
   10b9d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   10ba0:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
   10ba3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   10ba6:	89 55 b8             	mov    DWORD PTR [ebp-0x48],edx
   10ba9:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   10bac:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
   10baf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   10bb2:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
   10bb5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   10bb8:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
   10bbb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   10bbe:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
   10bc1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   10bc4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
   10bc7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   10bca:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:177
          mkt = mktime(&tm);
   10bcd:	83 ec 0c             	sub    esp,0xc
   10bd0:	8d 45 a8             	lea    eax,[ebp-0x58]
   10bd3:	50                   	push   eax
   10bd4:	e8 d6 6f 01 00       	call   27baf <mktime>
   10bd9:	83 c4 10             	add    esp,0x10
   10bdc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:178
          sprintf(buf, "%lu", mkt);
   10bdf:	83 ec 04             	sub    esp,0x4
   10be2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   10be5:	68 54 50 04 00       	push   0x45054
   10bea:	8d 45 88             	lea    eax,[ebp-0x78]
   10bed:	50                   	push   eax
   10bee:	e8 54 66 01 00       	call   27247 <sprintf>
   10bf3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:179
          pt = _add(buf, pt, ptlim);
   10bf6:	83 ec 04             	sub    esp,0x4
   10bf9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10bfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10bff:	8d 45 88             	lea    eax,[ebp-0x78]
   10c02:	50                   	push   eax
   10c03:	e8 be 05 00 00       	call   111c6 <_add>
   10c08:	83 c4 10             	add    esp,0x10
   10c0b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   10c0e:	e9 64 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:184
          continue;
        }

        case 'T':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10c13:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c16:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10c1c:	68 58 50 04 00       	push   0x45058
   10c21:	e8 e1 fa ff ff       	call   10707 <_fmt>
   10c26:	83 c4 10             	add    esp,0x10
   10c29:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:185
          continue;
   10c2c:	e9 46 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:188

        case 't':
          pt = _add("\t", pt, ptlim);
   10c31:	83 ec 04             	sub    esp,0x4
   10c34:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c37:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c3a:	68 61 50 04 00       	push   0x45061
   10c3f:	e8 82 05 00 00       	call   111c6 <_add>
   10c44:	83 c4 10             	add    esp,0x10
   10c47:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:189
          continue;
   10c4a:	e9 28 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:192

        case 'U':
          pt = _conv((t->tm_yday + 7 - t->tm_wday) / 7, "%02d", pt, ptlim);
   10c4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c52:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10c55:	8d 50 07             	lea    edx,[eax+0x7]
   10c58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c5b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c5e:	89 d1                	mov    ecx,edx
   10c60:	29 c1                	sub    ecx,eax
   10c62:	ba 93 24 49 92       	mov    edx,0x92492493
   10c67:	89 c8                	mov    eax,ecx
   10c69:	f7 ea                	imul   edx
   10c6b:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10c6e:	c1 f8 02             	sar    eax,0x2
   10c71:	89 c2                	mov    edx,eax
   10c73:	89 c8                	mov    eax,ecx
   10c75:	c1 f8 1f             	sar    eax,0x1f
   10c78:	29 c2                	sub    edx,eax
   10c7a:	89 d0                	mov    eax,edx
   10c7c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c7f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c82:	68 05 50 04 00       	push   0x45005
   10c87:	50                   	push   eax
   10c88:	e8 07 05 00 00       	call   11194 <_conv>
   10c8d:	83 c4 10             	add    esp,0x10
   10c90:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:193
          continue;
   10c93:	e9 df 04 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196

        case 'u':
          pt = _conv((t->tm_wday == 0) ? 7 : t->tm_wday, "%d", pt, ptlim);
   10c98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c9b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c9e:	85 c0                	test   eax,eax
   10ca0:	74 08                	je     10caa <_fmt+0x5a3>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 1)
   10ca2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ca5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10ca8:	eb 05                	jmp    10caf <_fmt+0x5a8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 2)
   10caa:	b8 07 00 00 00       	mov    eax,0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 4)
   10caf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10cb2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10cb5:	68 63 50 04 00       	push   0x45063
   10cba:	50                   	push   eax
   10cbb:	e8 d4 04 00 00       	call   11194 <_conv>
   10cc0:	83 c4 10             	add    esp,0x10
   10cc3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:197 (discriminator 4)
          continue;
   10cc6:	e9 ac 04 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:207
          int  year;
          int  yday;
          int  wday;
          int  w;

          year = t->tm_year + TM_YEAR_BASE;
   10ccb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10cd1:	05 6c 07 00 00       	add    eax,0x76c
   10cd6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:208
          yday = t->tm_yday;
   10cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cdc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10cdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:209
          wday = t->tm_wday;
   10ce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ce5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10ce8:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215
          while (1) {
            int  len;
            int  bot;
            int  top;

            len = LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10ceb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10cee:	83 e0 03             	and    eax,0x3
   10cf1:	85 c0                	test   eax,eax
   10cf3:	75 50                	jne    10d45 <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 1)
   10cf5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10cf8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10cfd:	89 c8                	mov    eax,ecx
   10cff:	f7 ea                	imul   edx
   10d01:	c1 fa 05             	sar    edx,0x5
   10d04:	89 c8                	mov    eax,ecx
   10d06:	c1 f8 1f             	sar    eax,0x1f
   10d09:	29 c2                	sub    edx,eax
   10d0b:	89 d0                	mov    eax,edx
   10d0d:	6b c0 64             	imul   eax,eax,0x64
   10d10:	29 c1                	sub    ecx,eax
   10d12:	89 c8                	mov    eax,ecx
   10d14:	85 c0                	test   eax,eax
   10d16:	75 26                	jne    10d3e <_fmt+0x637>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 4)
   10d18:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10d1b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10d20:	89 c8                	mov    eax,ecx
   10d22:	f7 ea                	imul   edx
   10d24:	c1 fa 07             	sar    edx,0x7
   10d27:	89 c8                	mov    eax,ecx
   10d29:	c1 f8 1f             	sar    eax,0x1f
   10d2c:	29 c2                	sub    edx,eax
   10d2e:	89 d0                	mov    eax,edx
   10d30:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10d36:	29 c1                	sub    ecx,eax
   10d38:	89 c8                	mov    eax,ecx
   10d3a:	85 c0                	test   eax,eax
   10d3c:	75 07                	jne    10d45 <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 5)
   10d3e:	b8 6e 01 00 00       	mov    eax,0x16e
   10d43:	eb 05                	jmp    10d4a <_fmt+0x643>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 6)
   10d45:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 8)
   10d4a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:216 (discriminator 8)
            bot = ((yday + 11 - wday) % DAYSPERWEEK) - 3;
   10d4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10d50:	83 c0 0b             	add    eax,0xb
   10d53:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   10d56:	89 c1                	mov    ecx,eax
   10d58:	ba 93 24 49 92       	mov    edx,0x92492493
   10d5d:	89 c8                	mov    eax,ecx
   10d5f:	f7 ea                	imul   edx
   10d61:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d64:	c1 f8 02             	sar    eax,0x2
   10d67:	89 c2                	mov    edx,eax
   10d69:	89 c8                	mov    eax,ecx
   10d6b:	c1 f8 1f             	sar    eax,0x1f
   10d6e:	29 c2                	sub    edx,eax
   10d70:	89 d0                	mov    eax,edx
   10d72:	89 c2                	mov    edx,eax
   10d74:	c1 e2 03             	shl    edx,0x3
   10d77:	29 c2                	sub    edx,eax
   10d79:	89 c8                	mov    eax,ecx
   10d7b:	29 d0                	sub    eax,edx
   10d7d:	83 e8 03             	sub    eax,0x3
   10d80:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:217 (discriminator 8)
            top = bot - (len % DAYSPERWEEK);
   10d83:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   10d86:	ba 93 24 49 92       	mov    edx,0x92492493
   10d8b:	89 c8                	mov    eax,ecx
   10d8d:	f7 ea                	imul   edx
   10d8f:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d92:	c1 f8 02             	sar    eax,0x2
   10d95:	89 c2                	mov    edx,eax
   10d97:	89 c8                	mov    eax,ecx
   10d99:	c1 f8 1f             	sar    eax,0x1f
   10d9c:	29 c2                	sub    edx,eax
   10d9e:	89 d0                	mov    eax,edx
   10da0:	89 c2                	mov    edx,eax
   10da2:	c1 e2 03             	shl    edx,0x3
   10da5:	29 c2                	sub    edx,eax
   10da7:	89 c8                	mov    eax,ecx
   10da9:	29 d0                	sub    eax,edx
   10dab:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   10dae:	29 c2                	sub    edx,eax
   10db0:	89 d0                	mov    eax,edx
   10db2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 8)
            if (top < -3) top += DAYSPERWEEK;
   10db5:	83 7d e8 fd          	cmp    DWORD PTR [ebp-0x18],0xfffffffd
   10db9:	7d 04                	jge    10dbf <_fmt+0x6b8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 1)
   10dbb:	83 45 e8 07          	add    DWORD PTR [ebp-0x18],0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:219
            top += len;
   10dbf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   10dc2:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:220
            if (yday >= top) {
   10dc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10dc8:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   10dcb:	7c 10                	jl     10ddd <_fmt+0x6d6>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:221
              ++year;
   10dcd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:222
              w = 1;
   10dd1:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:223
              break;
   10dd8:	e9 9d 00 00 00       	jmp    10e7a <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:225
            }
            if (yday >= bot) {
   10ddd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10de0:	3b 45 d4             	cmp    eax,DWORD PTR [ebp-0x2c]
   10de3:	7c 2a                	jl     10e0f <_fmt+0x708>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:226
              w = 1 + ((yday - bot) / DAYSPERWEEK);
   10de5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10de8:	2b 45 d4             	sub    eax,DWORD PTR [ebp-0x2c]
   10deb:	89 c1                	mov    ecx,eax
   10ded:	ba 93 24 49 92       	mov    edx,0x92492493
   10df2:	89 c8                	mov    eax,ecx
   10df4:	f7 ea                	imul   edx
   10df6:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10df9:	c1 f8 02             	sar    eax,0x2
   10dfc:	89 c2                	mov    edx,eax
   10dfe:	89 c8                	mov    eax,ecx
   10e00:	c1 f8 1f             	sar    eax,0x1f
   10e03:	29 c2                	sub    edx,eax
   10e05:	89 d0                	mov    eax,edx
   10e07:	83 c0 01             	add    eax,0x1
   10e0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:227
              break;
   10e0d:	eb 6b                	jmp    10e7a <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:229
            }
            --year;
   10e0f:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10e16:	83 e0 03             	and    eax,0x3
   10e19:	85 c0                	test   eax,eax
   10e1b:	75 50                	jne    10e6d <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 1)
   10e1d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e20:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e25:	89 c8                	mov    eax,ecx
   10e27:	f7 ea                	imul   edx
   10e29:	c1 fa 05             	sar    edx,0x5
   10e2c:	89 c8                	mov    eax,ecx
   10e2e:	c1 f8 1f             	sar    eax,0x1f
   10e31:	29 c2                	sub    edx,eax
   10e33:	89 d0                	mov    eax,edx
   10e35:	6b c0 64             	imul   eax,eax,0x64
   10e38:	29 c1                	sub    ecx,eax
   10e3a:	89 c8                	mov    eax,ecx
   10e3c:	85 c0                	test   eax,eax
   10e3e:	75 26                	jne    10e66 <_fmt+0x75f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 4)
   10e40:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e43:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e48:	89 c8                	mov    eax,ecx
   10e4a:	f7 ea                	imul   edx
   10e4c:	c1 fa 07             	sar    edx,0x7
   10e4f:	89 c8                	mov    eax,ecx
   10e51:	c1 f8 1f             	sar    eax,0x1f
   10e54:	29 c2                	sub    edx,eax
   10e56:	89 d0                	mov    eax,edx
   10e58:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10e5e:	29 c1                	sub    ecx,eax
   10e60:	89 c8                	mov    eax,ecx
   10e62:	85 c0                	test   eax,eax
   10e64:	75 07                	jne    10e6d <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 5)
   10e66:	b8 6e 01 00 00       	mov    eax,0x16e
   10e6b:	eb 05                	jmp    10e72 <_fmt+0x76b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 6)
   10e6d:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 8)
   10e72:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:231 (discriminator 8)
          }
   10e75:	e9 71 fe ff ff       	jmp    10ceb <_fmt+0x5e4>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:232
          if (*format == 'V') {
   10e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10e7d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10e80:	3c 56                	cmp    al,0x56
   10e82:	75 1e                	jne    10ea2 <_fmt+0x79b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:233
            pt = _conv(w, "%02d", pt, ptlim);
   10e84:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10e87:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10e8a:	68 05 50 04 00       	push   0x45005
   10e8f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   10e92:	e8 fd 02 00 00       	call   11194 <_conv>
   10e97:	83 c4 10             	add    esp,0x10
   10e9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10e9d:	e9 d5 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:234
            --year;
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
          }
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
   10ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10ea5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10ea8:	3c 67                	cmp    al,0x67
   10eaa:	75 3b                	jne    10ee7 <_fmt+0x7e0>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:235
            pt = _conv(year % 100, "%02d", pt, ptlim);
   10eac:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10eaf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10eb4:	89 c8                	mov    eax,ecx
   10eb6:	f7 ea                	imul   edx
   10eb8:	c1 fa 05             	sar    edx,0x5
   10ebb:	89 c8                	mov    eax,ecx
   10ebd:	c1 f8 1f             	sar    eax,0x1f
   10ec0:	29 c2                	sub    edx,eax
   10ec2:	89 d0                	mov    eax,edx
   10ec4:	6b c0 64             	imul   eax,eax,0x64
   10ec7:	29 c1                	sub    ecx,eax
   10ec9:	89 c8                	mov    eax,ecx
   10ecb:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ece:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ed1:	68 05 50 04 00       	push   0x45005
   10ed6:	50                   	push   eax
   10ed7:	e8 b8 02 00 00       	call   11194 <_conv>
   10edc:	83 c4 10             	add    esp,0x10
   10edf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10ee2:	e9 90 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:237
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
   10ee7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10eea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10eed:	68 66 50 04 00       	push   0x45066
   10ef2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   10ef5:	e8 9a 02 00 00       	call   11194 <_conv>
   10efa:	83 c4 10             	add    esp,0x10
   10efd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          }
          continue;
   10f00:	e9 72 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:243
        }

        case 'v':
          pt = _fmt("%e-%b-%Y", t, pt, ptlim);
   10f05:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f08:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10f0e:	68 6b 50 04 00       	push   0x4506b
   10f13:	e8 ef f7 ff ff       	call   10707 <_fmt>
   10f18:	83 c4 10             	add    esp,0x10
   10f1b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:244
          continue;
   10f1e:	e9 54 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247

        case 'W':
          pt = _conv((t->tm_yday + 7 - (t->tm_wday ? (t->tm_wday - 1) : 6)) / 7, "%02d", pt, ptlim);
   10f23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f26:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10f29:	8d 50 07             	lea    edx,[eax+0x7]
   10f2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f2f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f32:	85 c0                	test   eax,eax
   10f34:	74 0b                	je     10f41 <_fmt+0x83a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 1)
   10f36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f39:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f3c:	83 e8 01             	sub    eax,0x1
   10f3f:	eb 05                	jmp    10f46 <_fmt+0x83f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 2)
   10f41:	b8 06 00 00 00       	mov    eax,0x6
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 4)
   10f46:	89 d1                	mov    ecx,edx
   10f48:	29 c1                	sub    ecx,eax
   10f4a:	ba 93 24 49 92       	mov    edx,0x92492493
   10f4f:	89 c8                	mov    eax,ecx
   10f51:	f7 ea                	imul   edx
   10f53:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10f56:	c1 f8 02             	sar    eax,0x2
   10f59:	89 c2                	mov    edx,eax
   10f5b:	89 c8                	mov    eax,ecx
   10f5d:	c1 f8 1f             	sar    eax,0x1f
   10f60:	29 c2                	sub    edx,eax
   10f62:	89 d0                	mov    eax,edx
   10f64:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f67:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f6a:	68 05 50 04 00       	push   0x45005
   10f6f:	50                   	push   eax
   10f70:	e8 1f 02 00 00       	call   11194 <_conv>
   10f75:	83 c4 10             	add    esp,0x10
   10f78:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:248 (discriminator 4)
          continue;
   10f7b:	e9 f7 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:251

        case 'w':
          pt = _conv(t->tm_wday, "%d", pt, ptlim);
   10f80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f83:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f86:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f89:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f8c:	68 63 50 04 00       	push   0x45063
   10f91:	50                   	push   eax
   10f92:	e8 fd 01 00 00       	call   11194 <_conv>
   10f97:	83 c4 10             	add    esp,0x10
   10f9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:252
          continue;
   10f9d:	e9 d5 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:255

        case 'X':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10fa2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fa5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fa8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fab:	68 58 50 04 00       	push   0x45058
   10fb0:	e8 52 f7 ff ff       	call   10707 <_fmt>
   10fb5:	83 c4 10             	add    esp,0x10
   10fb8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:256
          continue;
   10fbb:	e9 b7 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:259

        case 'x':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   10fc0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fc3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fc6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fc9:	68 1f 50 04 00       	push   0x4501f
   10fce:	e8 34 f7 ff ff       	call   10707 <_fmt>
   10fd3:	83 c4 10             	add    esp,0x10
   10fd6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:260
          continue;
   10fd9:	e9 99 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:263

        case 'y':
          pt = _conv((t->tm_year + TM_YEAR_BASE) % 100, "%02d", pt, ptlim);
   10fde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10fe1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10fe4:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   10fea:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10fef:	89 c8                	mov    eax,ecx
   10ff1:	f7 ea                	imul   edx
   10ff3:	c1 fa 05             	sar    edx,0x5
   10ff6:	89 c8                	mov    eax,ecx
   10ff8:	c1 f8 1f             	sar    eax,0x1f
   10ffb:	29 c2                	sub    edx,eax
   10ffd:	89 d0                	mov    eax,edx
   10fff:	6b c0 64             	imul   eax,eax,0x64
   11002:	29 c1                	sub    ecx,eax
   11004:	89 c8                	mov    eax,ecx
   11006:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11009:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1100c:	68 05 50 04 00       	push   0x45005
   11011:	50                   	push   eax
   11012:	e8 7d 01 00 00       	call   11194 <_conv>
   11017:	83 c4 10             	add    esp,0x10
   1101a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:264
          continue;
   1101d:	e9 55 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:267

        case 'Y':
          pt = _conv(t->tm_year + TM_YEAR_BASE, "%04d", pt, ptlim);
   11022:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11025:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   11028:	05 6c 07 00 00       	add    eax,0x76c
   1102d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11030:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11033:	68 66 50 04 00       	push   0x45066
   11038:	50                   	push   eax
   11039:	e8 56 01 00 00       	call   11194 <_conv>
   1103e:	83 c4 10             	add    esp,0x10
   11041:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:268
          continue;
   11044:	e9 2e 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:271

        case 'Z':
          pt = _add("?", pt, ptlim);
   11049:	83 ec 04             	sub    esp,0x4
   1104c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1104f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11052:	68 03 50 04 00       	push   0x45003
   11057:	e8 6a 01 00 00       	call   111c6 <_add>
   1105c:	83 c4 10             	add    esp,0x10
   1105f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:272
          continue;
   11062:	e9 10 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:276

        case 'z': {
          long absoff;
          if (kTimeZone >= 0) {
   11067:	a1 90 02 12 00       	mov    eax,ds:0x120290
   1106c:	85 c0                	test   eax,eax
   1106e:	78 23                	js     11093 <_fmt+0x98c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:277
            absoff = kTimeZone;
   11070:	a1 90 02 12 00       	mov    eax,ds:0x120290
   11075:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:278
            pt = _add("+", pt, ptlim);
   11078:	83 ec 04             	sub    esp,0x4
   1107b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1107e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11081:	68 74 50 04 00       	push   0x45074
   11086:	e8 3b 01 00 00       	call   111c6 <_add>
   1108b:	83 c4 10             	add    esp,0x10
   1108e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   11091:	eb 21                	jmp    110b4 <_fmt+0x9ad>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:280
          } else {
            absoff = kTimeZone;
   11093:	a1 90 02 12 00       	mov    eax,ds:0x120290
   11098:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:281
            pt = _add("-", pt, ptlim);
   1109b:	83 ec 04             	sub    esp,0x4
   1109e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110a1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110a4:	68 76 50 04 00       	push   0x45076
   110a9:	e8 18 01 00 00       	call   111c6 <_add>
   110ae:	83 c4 10             	add    esp,0x10
   110b1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:283
          }
          pt = _conv(absoff / 3600, "%02d", pt, ptlim);
   110b4:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
   110b7:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110bc:	89 c8                	mov    eax,ecx
   110be:	f7 ea                	imul   edx
   110c0:	8d 04 0a             	lea    eax,[edx+ecx*1]
   110c3:	c1 f8 0b             	sar    eax,0xb
   110c6:	89 c2                	mov    edx,eax
   110c8:	89 c8                	mov    eax,ecx
   110ca:	c1 f8 1f             	sar    eax,0x1f
   110cd:	29 c2                	sub    edx,eax
   110cf:	89 d0                	mov    eax,edx
   110d1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110d4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110d7:	68 05 50 04 00       	push   0x45005
   110dc:	50                   	push   eax
   110dd:	e8 b2 00 00 00       	call   11194 <_conv>
   110e2:	83 c4 10             	add    esp,0x10
   110e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:284
          pt = _conv((absoff % 3600) / 60, "%02d", pt, ptlim);
   110e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   110eb:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110f0:	89 d8                	mov    eax,ebx
   110f2:	f7 ea                	imul   edx
   110f4:	8d 04 1a             	lea    eax,[edx+ebx*1]
   110f7:	c1 f8 0b             	sar    eax,0xb
   110fa:	89 c2                	mov    edx,eax
   110fc:	89 d8                	mov    eax,ebx
   110fe:	c1 f8 1f             	sar    eax,0x1f
   11101:	89 d1                	mov    ecx,edx
   11103:	29 c1                	sub    ecx,eax
   11105:	69 c1 10 0e 00 00    	imul   eax,ecx,0xe10
   1110b:	29 c3                	sub    ebx,eax
   1110d:	89 d9                	mov    ecx,ebx
   1110f:	ba 89 88 88 88       	mov    edx,0x88888889
   11114:	89 c8                	mov    eax,ecx
   11116:	f7 ea                	imul   edx
   11118:	8d 04 0a             	lea    eax,[edx+ecx*1]
   1111b:	c1 f8 05             	sar    eax,0x5
   1111e:	89 c2                	mov    edx,eax
   11120:	89 c8                	mov    eax,ecx
   11122:	c1 f8 1f             	sar    eax,0x1f
   11125:	29 c2                	sub    edx,eax
   11127:	89 d0                	mov    eax,edx
   11129:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1112c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1112f:	68 05 50 04 00       	push   0x45005
   11134:	50                   	push   eax
   11135:	e8 5a 00 00 00       	call   11194 <_conv>
   1113a:	83 c4 10             	add    esp,0x10
   1113d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:286

          continue;
   11140:	eb 35                	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:290
        }

        case '+':
          pt = _fmt("%a, %d %b %Y %H:%M:%S %z", t, pt, ptlim);
   11142:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11145:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11148:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1114b:	68 78 50 04 00       	push   0x45078
   11150:	e8 b2 f5 ff ff       	call   10707 <_fmt>
   11155:	83 c4 10             	add    esp,0x10
   11158:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:291
          continue;
   1115b:	eb 1a                	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:295

        case '%':
        default:
          break;
   1115d:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
      }
    }

    if (pt == ptlim) break;
   1115e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11161:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   11164:	74 25                	je     1118b <_fmt+0xa84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:300
    *pt++ = *format;
   11166:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11169:	8d 50 01             	lea    edx,[eax+0x1]
   1116c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   1116f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11172:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11175:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  *p = '\0';
  return p - s;
}

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
  for ( ; *format; ++format) {
   11177:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68 (discriminator 1)
   1117b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1117e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11181:	84 c0                	test   al,al
   11183:	0f 85 8a f5 ff ff    	jne    10713 <_fmt+0xc>
   11189:	eb 01                	jmp    1118c <_fmt+0xa85>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
        default:
          break;
      }
    }

    if (pt == ptlim) break;
   1118b:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:303
    *pt++ = *format;
  }

  return pt;
   1118c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:304
}
   1118f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11192:	c9                   	leave  
   11193:	c3                   	ret    

00011194 <_conv>:
_conv():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:306

static char *_conv(const int n, char *format, char *pt, const char *ptlim) {
   11194:	55                   	push   ebp
   11195:	89 e5                	mov    ebp,esp
   11197:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:309
  char  buf[32];

  sprintf(buf, format, n);
   1119a:	83 ec 04             	sub    esp,0x4
   1119d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   111a0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   111a3:	8d 45 d8             	lea    eax,[ebp-0x28]
   111a6:	50                   	push   eax
   111a7:	e8 9b 60 01 00       	call   27247 <sprintf>
   111ac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:310
  return _add(buf, pt, ptlim);
   111af:	83 ec 04             	sub    esp,0x4
   111b2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   111b5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   111b8:	8d 45 d8             	lea    eax,[ebp-0x28]
   111bb:	50                   	push   eax
   111bc:	e8 05 00 00 00       	call   111c6 <_add>
   111c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:311
}
   111c4:	c9                   	leave  
   111c5:	c3                   	ret    

000111c6 <_add>:
_add():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:313

static char *_add(const char *str, char *pt, const char *ptlim) {
   111c6:	55                   	push   ebp
   111c7:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314
  while (pt < ptlim && (*pt = *str++) != '\0') ++pt;
   111c9:	eb 04                	jmp    111cf <_add+0x9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 3)
   111cb:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 1)
   111cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111d2:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   111d5:	73 1b                	jae    111f2 <_add+0x2c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 2)
   111d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   111da:	8d 50 01             	lea    edx,[eax+0x1]
   111dd:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   111e0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   111e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111e6:	88 10                	mov    BYTE PTR [eax],dl
   111e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111eb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   111ee:	84 c0                	test   al,al
   111f0:	75 d9                	jne    111cb <_add+0x5>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:315
  return pt;
   111f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:316
}
   111f5:	5d                   	pop    ebp
   111f6:	c3                   	ret    
   111f7:	90                   	nop

000111f8 <keyboardGetKeyFromBuffer>:
keyboardGetKeyFromBuffer():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:17

//Get a key from the keyboard buffer
//Curr moves when a key is put into the buffer
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
   111f8:	55                   	push   ebp
   111f9:	89 e5                	mov    ebp,esp
   111fb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:18
    char lTemp=0;
   111fe:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:20
    //printd(DEBUG_KEYBOARD,"\nkKeyboardBuffer=0x%08X, kKeyboardBufferBase=0x%08X, &kKeyboardBufferBase=0x%08X\n",kKeyboardBuffer, kKeyboardBufferBase,&kKeyboardBufferBase);
    if (kKeyboardBufferBase<=kKeyboardBuffer)
   11202:	8b 15 24 04 12 00    	mov    edx,DWORD PTR ds:0x120424
   11208:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   1120d:	39 c2                	cmp    edx,eax
   1120f:	77 16                	ja     11227 <keyboardGetKeyFromBuffer+0x2f>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:22
    {
        __asm__("cli\n");
   11211:	fa                   	cli    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:23
        lTemp=*kKeyboardBufferBase++;
   11212:	a1 24 04 12 00       	mov    eax,ds:0x120424
   11217:	8d 50 01             	lea    edx,[eax+0x1]
   1121a:	89 15 24 04 12 00    	mov    DWORD PTR ds:0x120424,edx
   11220:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11223:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:24
        __asm__("sti\n");
   11226:	fb                   	sti    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:26
    }
    if (kKeyboardBufferBase>kKeyboardBuffer)
   11227:	8b 15 24 04 12 00    	mov    edx,DWORD PTR ds:0x120424
   1122d:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   11232:	39 c2                	cmp    edx,eax
   11234:	76 16                	jbe    1124c <keyboardGetKeyFromBuffer+0x54>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:28
    {
        __asm__("cli\n");
   11236:	fa                   	cli    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:29
        kKeyboardBufferBase=(char*)KEYBOARD_BUFFER_ADDRESS;
   11237:	c7 05 24 04 12 00 b0 	mov    DWORD PTR ds:0x120424,0x1524b0
   1123e:	24 15 00 
/home/yogi/src/os//chrisOS/src/char/keyboard.c:30
        kKeyboardBuffer=(char*)KEYBOARD_BUFFER_ADDRESS-1;
   11241:	c7 05 e0 03 12 00 af 	mov    DWORD PTR ds:0x1203e0,0x1524af
   11248:	24 15 00 
/home/yogi/src/os//chrisOS/src/char/keyboard.c:31
        __asm__("sti\n");
   1124b:	fb                   	sti    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:33
    }
    return lTemp;
   1124c:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:34
}
   11250:	c9                   	leave  
   11251:	c3                   	ret    

00011252 <waitForKeyboardKey>:
waitForKeyboardKey():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:37

char waitForKeyboardKey()
{
   11252:	55                   	push   ebp
   11253:	89 e5                	mov    ebp,esp
   11255:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:38
    printd(DEBUG_KEYBOARD,"gKbd-W, %04X\t", kKeyboardBuffer);
   11258:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   1125d:	83 ec 04             	sub    esp,0x4
   11260:	50                   	push   eax
   11261:	68 80 52 04 00       	push   0x45280
   11266:	6a 10                	push   0x10
   11268:	e8 a6 5f 01 00       	call   27213 <printd>
   1126d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:39
    char lTemp=0;
   11270:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:40
    printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);
   11274:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   11279:	83 ec 04             	sub    esp,0x4
   1127c:	50                   	push   eax
   1127d:	68 8e 52 04 00       	push   0x4528e
   11282:	6a 10                	push   0x10
   11284:	e8 8a 5f 01 00       	call   27213 <printd>
   11289:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:42

    while (kKeyboardBuffer==(char*)KEYBOARD_BUFFER_ADDRESS)
   1128c:	eb 26                	jmp    112b4 <waitForKeyboardKey+0x62>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:44
    {
        printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);
   1128e:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   11293:	83 ec 04             	sub    esp,0x4
   11296:	50                   	push   eax
   11297:	68 8e 52 04 00       	push   0x4528e
   1129c:	6a 10                	push   0x10
   1129e:	e8 70 5f 01 00       	call   27213 <printd>
   112a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:45
        __asm__("sti\n");
   112a6:	fb                   	sti    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:46
        waitTicks(1);
   112a7:	83 ec 0c             	sub    esp,0xc
   112aa:	6a 01                	push   0x1
   112ac:	e8 66 71 01 00       	call   28417 <waitTicks>
   112b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:42
{
    printd(DEBUG_KEYBOARD,"gKbd-W, %04X\t", kKeyboardBuffer);
    char lTemp=0;
    printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);

    while (kKeyboardBuffer==(char*)KEYBOARD_BUFFER_ADDRESS)
   112b4:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   112b9:	3d b0 24 15 00       	cmp    eax,0x1524b0
   112be:	74 ce                	je     1128e <waitForKeyboardKey+0x3c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:48
    {
        printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", kKeyboardBuffer);
        __asm__("sti\n");
        waitTicks(1);
    }
    lTemp=keyboardGetKeyFromBuffer();
   112c0:	e8 33 ff ff ff       	call   111f8 <keyboardGetKeyFromBuffer>
   112c5:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:49
    printd(DEBUG_KEYBOARD,"got a key %u!\n", lTemp);
   112c8:	0f be 45 f7          	movsx  eax,BYTE PTR [ebp-0x9]
   112cc:	83 ec 04             	sub    esp,0x4
   112cf:	50                   	push   eax
   112d0:	68 a4 52 04 00       	push   0x452a4
   112d5:	6a 10                	push   0x10
   112d7:	e8 37 5f 01 00       	call   27213 <printd>
   112dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:50
    return lTemp;
   112df:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:51
}
   112e3:	c9                   	leave  
   112e4:	c3                   	ret    

000112e5 <getKeyboardKey>:
getKeyboardKey():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:54

char getKeyboardKey()
{
   112e5:	55                   	push   ebp
   112e6:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/char/keyboard.c:55
        return keyboardGetKeyFromBuffer();
   112e8:	e8 0b ff ff ff       	call   111f8 <keyboardGetKeyFromBuffer>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:56
}
   112ed:	5d                   	pop    ebp
   112ee:	c3                   	ret    

000112ef <gets>:
gets():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:58
void gets(char* buffer, int len)
{
   112ef:	55                   	push   ebp
   112f0:	89 e5                	mov    ebp,esp
   112f2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:59
    volatile char inchar=0;
   112f5:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:60
    int cnt=0;
   112f9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:61
    memset(buffer,0,len);
   11300:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11303:	83 ec 04             	sub    esp,0x4
   11306:	50                   	push   eax
   11307:	6a 00                	push   0x0
   11309:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1130c:	e8 6c 3d 01 00       	call   2507d <memset>
   11311:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:64
    while (1==1)
    {
        inchar=getKeyboardKey();
   11314:	e8 cc ff ff ff       	call   112e5 <getKeyboardKey>
   11319:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:65
        if (inchar=='\b' && cnt>0)
   1131c:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11320:	3c 08                	cmp    al,0x8
   11322:	75 27                	jne    1134b <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:65 (discriminator 1)
   11324:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11328:	7e 21                	jle    1134b <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:67
        {
            buffer[cnt]=0;
   1132a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1132d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11330:	01 d0                	add    eax,edx
   11332:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:68
            cnt--;
   11335:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/keyboard.c:69
            puts("\b");
   11339:	83 ec 0c             	sub    esp,0xc
   1133c:	68 b3 52 04 00       	push   0x452b3
   11341:	e8 2c 6d 00 00       	call   18072 <puts>
   11346:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:66
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=getKeyboardKey();
        if (inchar=='\b' && cnt>0)
        {
   11349:	eb 63                	jmp    113ae <gets+0xbf>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:71
            buffer[cnt]=0;
            cnt--;
            puts("\b");
        }
        else if (inchar>0)
   1134b:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1134f:	84 c0                	test   al,al
   11351:	7e c1                	jle    11314 <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:73
        {
            if (inchar==0x0a)
   11353:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11357:	3c 0a                	cmp    al,0xa
   11359:	75 1a                	jne    11375 <gets+0x86>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:75
            {
                printk("%c",inchar);
   1135b:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1135f:	0f be c0             	movsx  eax,al
   11362:	83 ec 08             	sub    esp,0x8
   11365:	50                   	push   eax
   11366:	68 b5 52 04 00       	push   0x452b5
   1136b:	e8 83 5e 01 00       	call   271f3 <printk>
   11370:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:76
                return;
   11373:	eb 3e                	jmp    113b3 <gets+0xc4>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:78
            }
            if (cnt<len-2)
   11375:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11378:	83 e8 02             	sub    eax,0x2
   1137b:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1137e:	7e 94                	jle    11314 <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:80
            {
                printk("%c",inchar);
   11380:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11384:	0f be c0             	movsx  eax,al
   11387:	83 ec 08             	sub    esp,0x8
   1138a:	50                   	push   eax
   1138b:	68 b5 52 04 00       	push   0x452b5
   11390:	e8 5e 5e 01 00       	call   271f3 <printk>
   11395:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:81
                buffer[cnt++]=inchar;
   11398:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1139b:	8d 50 01             	lea    edx,[eax+0x1]
   1139e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   113a1:	89 c2                	mov    edx,eax
   113a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113a6:	01 c2                	add    edx,eax
   113a8:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   113ac:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:84
            }
        }
    }
   113ae:	e9 61 ff ff ff       	jmp    11314 <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:85
}
   113b3:	c9                   	leave  
   113b4:	c3                   	ret    

000113b5 <getc>:
getc():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:88

char getc()
{
   113b5:	55                   	push   ebp
   113b6:	89 e5                	mov    ebp,esp
   113b8:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:89
   int inchar=getKeyboardKey();
   113bb:	e8 25 ff ff ff       	call   112e5 <getKeyboardKey>
   113c0:	0f be c0             	movsx  eax,al
   113c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:91
   
   while (inchar==0)
   113c6:	eb 16                	jmp    113de <getc+0x29>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:93
   {
       inchar=getKeyboardKey();
   113c8:	e8 18 ff ff ff       	call   112e5 <getKeyboardKey>
   113cd:	0f be c0             	movsx  eax,al
   113d0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:94
        inchar=getKeyboardKey();
   113d3:	e8 0d ff ff ff       	call   112e5 <getKeyboardKey>
   113d8:	0f be c0             	movsx  eax,al
   113db:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:91

char getc()
{
   int inchar=getKeyboardKey();
   
   while (inchar==0)
   113de:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   113e2:	74 e4                	je     113c8 <getc+0x13>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:96
   {
       inchar=getKeyboardKey();
        inchar=getKeyboardKey();
   }
   return inchar;
   113e4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:97
}
   113e7:	c9                   	leave  
   113e8:	c3                   	ret    
   113e9:	66 90                	xchg   ax,ax
   113eb:	90                   	nop

000113ec <kPagingGet4kPDEntryValue>:
kPagingGet4kPDEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:19
extern uint32_t*  kKernelPageDir;
extern uint64_t kE820MemoryBytes;
extern uint32_t kDebugLevel;

uint32_t kPagingGet4kPDEntryValue(uint32_t address)
{
   113ec:	55                   	push   ebp
   113ed:	89 e5                	mov    ebp,esp
   113ef:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:20
    address&=0xFFFFF000;
   113f2:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:21
    uintptr_t* lTemp=(uint32_t*)((KERNEL_PAGE_DIR_ADDRESS + (((address & 0xFFC00000) >> 22) << 2)));
   113f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113fc:	c1 e8 16             	shr    eax,0x16
   113ff:	c1 e0 02             	shl    eax,0x2
   11402:	05 00 90 4a 00       	add    eax,0x4a9000
   11407:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:23
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1140a:	a1 38 03 12 00       	mov    eax,ds:0x120338
   1140f:	83 e0 40             	and    eax,0x40
   11412:	85 c0                	test   eax,eax
   11414:	74 16                	je     1142c <kPagingGet4kPDEntryValue+0x40>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:24
            printk("pagingGet4kPDEntryValue: dirAddressPtr=0x%08x\n", *lTemp);
   11416:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11419:	8b 00                	mov    eax,DWORD PTR [eax]
   1141b:	83 ec 08             	sub    esp,0x8
   1141e:	50                   	push   eax
   1141f:	68 c0 53 04 00       	push   0x453c0
   11424:	e8 ca 5d 01 00       	call   271f3 <printk>
   11429:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:26
#endif
    return (uint32_t)*lTemp;
   1142c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1142f:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:27
}
   11431:	c9                   	leave  
   11432:	c3                   	ret    

00011433 <kPagingGet4kPDEntryAddress>:
kPagingGet4kPDEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:30

uint32_t kPagingGet4kPDEntryAddress(uint32_t address)
{
   11433:	55                   	push   ebp
   11434:	89 e5                	mov    ebp,esp
   11436:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:31
    address&=0xFFFFF000;
   11439:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:32
    uintptr_t lTemp=((KERNEL_PAGE_DIR_ADDRESS  | (((address & 0xFFC00000) >> 22) << 2)));
   11440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11443:	c1 e8 16             	shr    eax,0x16
   11446:	c1 e0 02             	shl    eax,0x2
   11449:	0d 00 90 4a 00       	or     eax,0x4a9000
   1144e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:34
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11451:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11456:	83 e0 40             	and    eax,0x40
   11459:	85 c0                	test   eax,eax
   1145b:	74 13                	je     11470 <kPagingGet4kPDEntryAddress+0x3d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:35
            printk("dirEntryAddress=0x%08x\n", lTemp);
   1145d:	83 ec 08             	sub    esp,0x8
   11460:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11463:	68 ef 53 04 00       	push   0x453ef
   11468:	e8 86 5d 01 00       	call   271f3 <printk>
   1146d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:37
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
   11470:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:38
}
   11473:	c9                   	leave  
   11474:	c3                   	ret    

00011475 <kPagingGet4kPTEntryAddress>:
kPagingGet4kPTEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:41

uint32_t kPagingGet4kPTEntryAddress(uint32_t address)
{
   11475:	55                   	push   ebp
   11476:	89 e5                	mov    ebp,esp
   11478:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:42
    address&=0xFFFFF000;
   1147b:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:43
    uintptr_t pDirPtr=kPagingGet4kPDEntryValue(address) & 0xFFFFF000;
   11482:	83 ec 0c             	sub    esp,0xc
   11485:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11488:	e8 5f ff ff ff       	call   113ec <kPagingGet4kPDEntryValue>
   1148d:	83 c4 10             	add    esp,0x10
   11490:	25 00 f0 ff ff       	and    eax,0xfffff000
   11495:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:44
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
   11498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1149b:	25 00 f0 3f 00       	and    eax,0x3ff000
   114a0:	c1 e8 0c             	shr    eax,0xc
   114a3:	c1 e0 02             	shl    eax,0x2
   114a6:	0b 45 f4             	or     eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:45
}
   114a9:	c9                   	leave  
   114aa:	c3                   	ret    

000114ab <kPagingGet4kPTEntryValue>:
kPagingGet4kPTEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:48

uint32_t kPagingGet4kPTEntryValue(uint32_t address)
{
   114ab:	55                   	push   ebp
   114ac:	89 e5                	mov    ebp,esp
   114ae:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:49
    address&=0xFFFFF000;
   114b1:	81 65 08 00 f0 ff ff 	and    DWORD PTR [ebp+0x8],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:50
    uint32_t* pTablePtr=(uint32_t*)kPagingGet4kPTEntryAddress(address);
   114b8:	83 ec 0c             	sub    esp,0xc
   114bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114be:	e8 b2 ff ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   114c3:	83 c4 10             	add    esp,0x10
   114c6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:52
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   114c9:	a1 38 03 12 00       	mov    eax,ds:0x120338
   114ce:	83 e0 40             	and    eax,0x40
   114d1:	85 c0                	test   eax,eax
   114d3:	74 13                	je     114e8 <kPagingGet4kPTEntryValue+0x3d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:53
             printk("pagingGet4kPTEntryValue: pageEntryAddress=0x%08X\n", pTablePtr);
   114d5:	83 ec 08             	sub    esp,0x8
   114d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   114db:	68 08 54 04 00       	push   0x45408
   114e0:	e8 0e 5d 01 00       	call   271f3 <printk>
   114e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:56
             //printf("pageEntryValue=0x%08X\n", *pTablePtr);
#endif
    return *pTablePtr;
   114e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   114eb:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:57
}
   114ed:	c9                   	leave  
   114ee:	c3                   	ret    

000114ef <kPagingSetPageReadOnlyFlag>:
kPagingSetPageReadOnlyFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:60

void kPagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
   114ef:	55                   	push   ebp
   114f0:	89 e5                	mov    ebp,esp
   114f2:	83 ec 18             	sub    esp,0x18
   114f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   114f8:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:62
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   114fb:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11500:	83 e0 40             	and    eax,0x40
   11503:	85 c0                	test   eax,eax
   11505:	74 19                	je     11520 <kPagingSetPageReadOnlyFlag+0x31>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:63
            printk("pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   11507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1150a:	8b 00                	mov    eax,DWORD PTR [eax]
   1150c:	83 ec 04             	sub    esp,0x4
   1150f:	50                   	push   eax
   11510:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11513:	68 3c 54 04 00       	push   0x4543c
   11518:	e8 d6 5c 01 00       	call   271f3 <printk>
   1151d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:65
#endif
         if (readOnly)
   11520:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   11524:	74 11                	je     11537 <kPagingSetPageReadOnlyFlag+0x48>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:66
            *ptEntry&=0xFFFFFFFD;
   11526:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11529:	8b 00                	mov    eax,DWORD PTR [eax]
   1152b:	83 e0 fd             	and    eax,0xfffffffd
   1152e:	89 c2                	mov    edx,eax
   11530:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11533:	89 10                	mov    DWORD PTR [eax],edx
   11535:	eb 0f                	jmp    11546 <kPagingSetPageReadOnlyFlag+0x57>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:68
         else
            *ptEntry|=2; 
   11537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1153a:	8b 00                	mov    eax,DWORD PTR [eax]
   1153c:	83 c8 02             	or     eax,0x2
   1153f:	89 c2                	mov    edx,eax
   11541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11544:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:69
    RELOAD_CR3
   11546:	0f 20 d8             	mov    eax,cr3
   11549:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:71
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1154c:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11551:	83 e0 40             	and    eax,0x40
   11554:	85 c0                	test   eax,eax
   11556:	74 16                	je     1156e <kPagingSetPageReadOnlyFlag+0x7f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:72
            printk("0x%08X\n", *ptEntry);
   11558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1155b:	8b 00                	mov    eax,DWORD PTR [eax]
   1155d:	83 ec 08             	sub    esp,0x8
   11560:	50                   	push   eax
   11561:	68 73 54 04 00       	push   0x45473
   11566:	e8 88 5c 01 00       	call   271f3 <printk>
   1156b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:74
#endif
}
   1156e:	90                   	nop
   1156f:	c9                   	leave  
   11570:	c3                   	ret    

00011571 <kPagingUpdatePTEPresentFlag>:
kPagingUpdatePTEPresentFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:77

void kPagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
   11571:	55                   	push   ebp
   11572:	89 e5                	mov    ebp,esp
   11574:	83 ec 18             	sub    esp,0x18
   11577:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1157a:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:78
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   1157d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11580:	8b 00                	mov    eax,DWORD PTR [eax]
   11582:	50                   	push   eax
   11583:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11586:	68 7c 54 04 00       	push   0x4547c
   1158b:	6a 40                	push   0x40
   1158d:	e8 81 5c 01 00       	call   27213 <printd>
   11592:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:79
         if (present)
   11595:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   11599:	74 11                	je     115ac <kPagingUpdatePTEPresentFlag+0x3b>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:80
             *ptEntry=*ptEntry | 1;
   1159b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1159e:	8b 00                	mov    eax,DWORD PTR [eax]
   115a0:	83 c8 01             	or     eax,0x1
   115a3:	89 c2                	mov    edx,eax
   115a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115a8:	89 10                	mov    DWORD PTR [eax],edx
   115aa:	eb 0f                	jmp    115bb <kPagingUpdatePTEPresentFlag+0x4a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:82
         else
             *ptEntry&=0xFFFFFFFE;
   115ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115af:	8b 00                	mov    eax,DWORD PTR [eax]
   115b1:	83 e0 fe             	and    eax,0xfffffffe
   115b4:	89 c2                	mov    edx,eax
   115b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115b9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:83
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
   115bb:	0f 20 d8             	mov    eax,cr3
   115be:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:84
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
   115c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115c4:	8b 00                	mov    eax,DWORD PTR [eax]
   115c6:	83 ec 04             	sub    esp,0x4
   115c9:	50                   	push   eax
   115ca:	68 73 54 04 00       	push   0x45473
   115cf:	6a 40                	push   0x40
   115d1:	e8 3d 5c 01 00       	call   27213 <printd>
   115d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:85
}
   115d9:	90                   	nop
   115da:	c9                   	leave  
   115db:	c3                   	ret    

000115dc <kSetVirtualRangeRO>:
kSetVirtualRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:88

void kSetVirtualRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   115dc:	55                   	push   ebp
   115dd:	89 e5                	mov    ebp,esp
   115df:	83 ec 28             	sub    esp,0x28
   115e2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   115e5:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:91
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   115e8:	a1 38 03 12 00       	mov    eax,ds:0x120338
   115ed:	83 e0 40             	and    eax,0x40
   115f0:	85 c0                	test   eax,eax
   115f2:	74 16                	je     1160a <kSetVirtualRangeRO+0x2e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:92
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
   115f4:	83 ec 04             	sub    esp,0x4
   115f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   115fa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   115fd:	68 b8 54 04 00       	push   0x454b8
   11602:	e8 ec 5b 01 00       	call   271f3 <printk>
   11607:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:94
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   1160a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1160d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11610:	eb 64                	jmp    11676 <kSetVirtualRangeRO+0x9a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:96
    {
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
   11612:	83 ec 0c             	sub    esp,0xc
   11615:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11618:	e8 58 fe ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   1161d:	83 c4 10             	add    esp,0x10
   11620:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:98
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11623:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11628:	83 e0 40             	and    eax,0x40
   1162b:	85 c0                	test   eax,eax
   1162d:	74 26                	je     11655 <kSetVirtualRangeRO+0x79>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
   1162f:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11633:	74 07                	je     1163c <kSetVirtualRangeRO+0x60>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99 (discriminator 1)
   11635:	b8 e5 54 04 00       	mov    eax,0x454e5
   1163a:	eb 05                	jmp    11641 <kSetVirtualRangeRO+0x65>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99 (discriminator 2)
   1163c:	b8 e8 54 04 00       	mov    eax,0x454e8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99 (discriminator 4)
   11641:	50                   	push   eax
   11642:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   11645:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11648:	68 eb 54 04 00       	push   0x454eb
   1164d:	e8 a1 5b 01 00       	call   271f3 <printk>
   11652:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:101 (discriminator 2)
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
   11655:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   11659:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1165c:	8d 48 04             	lea    ecx,[eax+0x4]
   1165f:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   11662:	83 ec 08             	sub    esp,0x8
   11665:	52                   	push   edx
   11666:	50                   	push   eax
   11667:	e8 83 fe ff ff       	call   114ef <kPagingSetPageReadOnlyFlag>
   1166c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:94 (discriminator 2)
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   1166f:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:94 (discriminator 1)
   11676:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11679:	83 c0 01             	add    eax,0x1
   1167c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1167f:	73 91                	jae    11612 <kSetVirtualRangeRO+0x36>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:105
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
        //for cnt=0;cnt<=8192;cnt+=4096
}
   11681:	90                   	nop
   11682:	c9                   	leave  
   11683:	c3                   	ret    

00011684 <kpagingUpdatePresentFlagA>:
kpagingUpdatePresentFlagA():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:109

//Absolute version, page passed is already virtual
void kpagingUpdatePresentFlagA(uint32_t address, bool present)
{
   11684:	55                   	push   ebp
   11685:	89 e5                	mov    ebp,esp
   11687:	83 ec 28             	sub    esp,0x28
   1168a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1168d:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:111
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11690:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11695:	83 e0 40             	and    eax,0x40
   11698:	85 c0                	test   eax,eax
   1169a:	74 26                	je     116c2 <kpagingUpdatePresentFlagA+0x3e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:112
            printk("kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
   1169c:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   116a0:	74 07                	je     116a9 <kpagingUpdatePresentFlagA+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:112 (discriminator 1)
   116a2:	b8 03 55 04 00       	mov    eax,0x45503
   116a7:	eb 05                	jmp    116ae <kpagingUpdatePresentFlagA+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:112 (discriminator 2)
   116a9:	b8 0b 55 04 00       	mov    eax,0x4550b
/home/yogi/src/os//chrisOS/src/init/kpaging.c:112 (discriminator 4)
   116ae:	83 ec 04             	sub    esp,0x4
   116b1:	50                   	push   eax
   116b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   116b5:	68 18 55 04 00       	push   0x45518
   116ba:	e8 34 5b 01 00       	call   271f3 <printk>
   116bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:114
#endif
        uintptr_t* pagePTE= (uintptr_t*)kPagingGet4kPTEntryAddress(address&0xFFFFF000);
   116c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   116c5:	25 00 f0 ff ff       	and    eax,0xfffff000
   116ca:	83 ec 0c             	sub    esp,0xc
   116cd:	50                   	push   eax
   116ce:	e8 a2 fd ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   116d3:	83 c4 10             	add    esp,0x10
   116d6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:116
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   116d9:	a1 38 03 12 00       	mov    eax,ds:0x120338
   116de:	83 e0 40             	and    eax,0x40
   116e1:	85 c0                	test   eax,eax
   116e3:	74 13                	je     116f8 <kpagingUpdatePresentFlagA+0x74>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:117
            printk("kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
   116e5:	83 ec 08             	sub    esp,0x8
   116e8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   116eb:	68 44 55 04 00       	push   0x45544
   116f0:	e8 fe 5a 01 00       	call   271f3 <printk>
   116f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119
#endif
        kPagingUpdatePTEPresentFlag(pagePTE, present);
   116f8:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   116fc:	83 ec 08             	sub    esp,0x8
   116ff:	50                   	push   eax
   11700:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11703:	e8 69 fe ff ff       	call   11571 <kPagingUpdatePTEPresentFlag>
   11708:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:120
}
   1170b:	90                   	nop
   1170c:	c9                   	leave  
   1170d:	c3                   	ret    

0001170e <kpagingUpdatePresentFlagV>:
kpagingUpdatePresentFlagV():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:123

void kpagingUpdatePresentFlagV(uint32_t address, bool present)
{
   1170e:	55                   	push   ebp
   1170f:	89 e5                	mov    ebp,esp
   11711:	83 ec 18             	sub    esp,0x18
   11714:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11717:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124
    address+=KERNEL_PAGED_BASE_ADDRESS; 
   1171a:	81 6d 08 00 00 00 40 	sub    DWORD PTR [ebp+0x8],0x40000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:125
    kpagingUpdatePresentFlagA(address, present);
   11721:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11725:	83 ec 08             	sub    esp,0x8
   11728:	50                   	push   eax
   11729:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1172c:	e8 53 ff ff ff       	call   11684 <kpagingUpdatePresentFlagA>
   11731:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:126
}
   11734:	90                   	nop
   11735:	c9                   	leave  
   11736:	c3                   	ret    

00011737 <kMapPage>:
kMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:129

void kMapPage(uintptr_t mapTo, uintptr_t mapFrom, uint8_t flags)
{
   11737:	55                   	push   ebp
   11738:	89 e5                	mov    ebp,esp
   1173a:	53                   	push   ebx
   1173b:	83 ec 24             	sub    esp,0x24
   1173e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11741:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:133
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   11744:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   11749:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:134
    ptrVal=ptr[(mapTo>>22)];
   1174c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1174f:	c1 e8 16             	shr    eax,0x16
   11752:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11759:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1175c:	01 d0                	add    eax,edx
   1175e:	8b 00                	mov    eax,DWORD PTR [eax]
   11760:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:135
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   11763:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11767:	0f 85 cb 00 00 00    	jne    11838 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:135 (discriminator 1)
   1176d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   11770:	bb 00 00 00 00       	mov    ebx,0x0
   11775:	a1 48 00 12 00       	mov    eax,ds:0x120048
   1177a:	8b 15 4c 00 12 00    	mov    edx,DWORD PTR ds:0x12004c
   11780:	39 d3                	cmp    ebx,edx
   11782:	0f 87 b0 00 00 00    	ja     11838 <kMapPage+0x101>
   11788:	39 d3                	cmp    ebx,edx
   1178a:	72 08                	jb     11794 <kMapPage+0x5d>
   1178c:	39 c1                	cmp    ecx,eax
   1178e:	0f 83 a4 00 00 00    	jae    11838 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137
    {
        ptrT=(uint32_t*)0x20000000;
   11794:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:138
        ptr[(mapTo>>22)]=0x20000063;
   1179b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1179e:	c1 e8 16             	shr    eax,0x16
   117a1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   117ab:	01 d0                	add    eax,edx
   117ad:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:139
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
   117b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117b6:	25 ff 03 00 00       	and    eax,0x3ff
   117bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117c2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   117c5:	01 c2                	add    edx,eax
   117c7:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   117cb:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   117ce:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:141
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   117d0:	a1 38 03 12 00       	mov    eax,ds:0x120338
   117d5:	83 e0 40             	and    eax,0x40
   117d8:	85 c0                	test   eax,eax
   117da:	0f 84 41 01 00 00    	je     11921 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:142
            printk("kMapPage: Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)],ptrT[(mapTo&0x003FFFFF/4096)]);
   117e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117e3:	25 ff 03 00 00       	and    eax,0x3ff
   117e8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117ef:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   117f2:	01 d0                	add    eax,edx
   117f4:	8b 00                	mov    eax,DWORD PTR [eax]
   117f6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   117f9:	81 e2 ff 03 00 00    	and    edx,0x3ff
   117ff:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   11806:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   11809:	01 d1                	add    ecx,edx
   1180b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1180e:	c1 ea 16             	shr    edx,0x16
   11811:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11818:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1181b:	01 da                	add    edx,ebx
   1181d:	83 ec 0c             	sub    esp,0xc
   11820:	50                   	push   eax
   11821:	51                   	push   ecx
   11822:	52                   	push   edx
   11823:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11826:	68 78 55 04 00       	push   0x45578
   1182b:	e8 c3 59 01 00       	call   271f3 <printk>
   11830:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:141
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11833:	e9 e9 00 00 00       	jmp    11921 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:148
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11838:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   1183d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:149
        if (ptr[(mapTo>>22)]==0)
   11840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11843:	c1 e8 16             	shr    eax,0x16
   11846:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1184d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11850:	01 d0                	add    eax,edx
   11852:	8b 00                	mov    eax,DWORD PTR [eax]
   11854:	85 c0                	test   eax,eax
   11856:	75 29                	jne    11881 <kMapPage+0x14a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:150
            ptr[mapTo>>22]=(KERNEL_PAGE_TABLE_BASE_ADDRESS + ((mapTo&0x003FFFFF)/4096)) | 0x63;
   11858:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1185b:	c1 e8 16             	shr    eax,0x16
   1185e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11865:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11868:	01 d0                	add    eax,edx
   1186a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1186d:	81 e2 ff ff 3f 00    	and    edx,0x3fffff
   11873:	c1 ea 0c             	shr    edx,0xc
   11876:	81 c2 00 b0 4b 00    	add    edx,0x4bb000
   1187c:	83 ca 63             	or     edx,0x63
   1187f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:151
        ptrVal=ptr[mapTo>>22];
   11881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11884:	c1 e8 16             	shr    eax,0x16
   11887:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1188e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11891:	01 d0                	add    eax,edx
   11893:	8b 00                	mov    eax,DWORD PTR [eax]
   11895:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:152
        ptrVal=(ptrVal&0xFFFFF000);
   11898:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:153
        ptrT=(uint32_t*)ptrVal;
   1189f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118a2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:155
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   118a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118a8:	25 ff ff 3f 00       	and    eax,0x3fffff
   118ad:	c1 e8 0c             	shr    eax,0xc
   118b0:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:156
        ptrT[ptrVal]=mapFrom | flags;
   118b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118b6:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118bd:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   118c0:	01 c2                	add    edx,eax
   118c2:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   118c6:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   118c9:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:160
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   118cb:	a1 38 03 12 00       	mov    eax,ds:0x120338
   118d0:	83 e0 40             	and    eax,0x40
   118d3:	85 c0                	test   eax,eax
   118d5:	74 4a                	je     11921 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:161
            printk("2) Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal],ptrT[ptrVal]);
   118d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118da:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118e1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   118e4:	01 d0                	add    eax,edx
   118e6:	8b 00                	mov    eax,DWORD PTR [eax]
   118e8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   118eb:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   118f2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   118f5:	01 d1                	add    ecx,edx
   118f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   118fa:	c1 ea 16             	shr    edx,0x16
   118fd:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11904:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   11907:	01 da                	add    edx,ebx
   11909:	83 ec 0c             	sub    esp,0xc
   1190c:	50                   	push   eax
   1190d:	51                   	push   ecx
   1190e:	52                   	push   edx
   1190f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11912:	68 b8 55 04 00       	push   0x455b8
   11917:	e8 d7 58 01 00       	call   271f3 <printk>
   1191c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:165
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   1191f:	eb 00                	jmp    11921 <kMapPage+0x1ea>
   11921:	90                   	nop
   11922:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11925:	c9                   	leave  
   11926:	c3                   	ret    

00011927 <kIsPageMapped>:
kIsPageMapped():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:168

bool kIsPageMapped(uintptr_t Address)
{
   11927:	55                   	push   ebp
   11928:	89 e5                	mov    ebp,esp
   1192a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:169
    if (!kPagingGet4kPTEntryValue(Address))
   1192d:	83 ec 0c             	sub    esp,0xc
   11930:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11933:	e8 73 fb ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   11938:	83 c4 10             	add    esp,0x10
   1193b:	85 c0                	test   eax,eax
   1193d:	75 07                	jne    11946 <kIsPageMapped+0x1f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:170
        return false;
   1193f:	b8 00 00 00 00       	mov    eax,0x0
   11944:	eb 05                	jmp    1194b <kIsPageMapped+0x24>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:171
    return true;
   11946:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os//chrisOS/src/init/kpaging.c:172
}
   1194b:	c9                   	leave  
   1194c:	c3                   	ret    

0001194d <kUnMapPage>:
kUnMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:175

void kUnMapPage(uintptr_t mapTo)
{
   1194d:	55                   	push   ebp
   1194e:	89 e5                	mov    ebp,esp
   11950:	53                   	push   ebx
   11951:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os//chrisOS/src/init/kpaging.c:179
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   11954:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   11959:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:180
    ptrVal=ptr[(mapTo>>22)];
   1195c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1195f:	c1 e8 16             	shr    eax,0x16
   11962:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11969:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1196c:	01 d0                	add    eax,edx
   1196e:	8b 00                	mov    eax,DWORD PTR [eax]
   11970:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:181
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   11973:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11977:	0f 85 ad 00 00 00    	jne    11a2a <kUnMapPage+0xdd>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:181 (discriminator 1)
   1197d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   11980:	bb 00 00 00 00       	mov    ebx,0x0
   11985:	a1 48 00 12 00       	mov    eax,ds:0x120048
   1198a:	8b 15 4c 00 12 00    	mov    edx,DWORD PTR ds:0x12004c
   11990:	39 d3                	cmp    ebx,edx
   11992:	0f 87 92 00 00 00    	ja     11a2a <kUnMapPage+0xdd>
   11998:	39 d3                	cmp    ebx,edx
   1199a:	72 08                	jb     119a4 <kUnMapPage+0x57>
   1199c:	39 c1                	cmp    ecx,eax
   1199e:	0f 83 86 00 00 00    	jae    11a2a <kUnMapPage+0xdd>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:183
    {
        ptrT=(uint32_t*)0x20000000;
   119a4:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:184
        ptr[(mapTo>>22)]=0x20000063;
   119ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119ae:	c1 e8 16             	shr    eax,0x16
   119b1:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   119bb:	01 d0                	add    eax,edx
   119bd:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:185
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
   119c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119c6:	25 ff 03 00 00       	and    eax,0x3ff
   119cb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119d2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   119d5:	01 d0                	add    eax,edx
   119d7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/init/kpaging.c:187
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   119dd:	a1 38 03 12 00       	mov    eax,ds:0x120338
   119e2:	83 e0 40             	and    eax,0x40
   119e5:	85 c0                	test   eax,eax
   119e7:	0f 84 cd 00 00 00    	je     11aba <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:188
            printk("kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)]);
   119ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119f0:	25 ff 03 00 00       	and    eax,0x3ff
   119f5:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   119ff:	01 c2                	add    edx,eax
   11a01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a04:	c1 e8 16             	shr    eax,0x16
   11a07:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11a0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a11:	01 c8                	add    eax,ecx
   11a13:	52                   	push   edx
   11a14:	50                   	push   eax
   11a15:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11a18:	68 f4 55 04 00       	push   0x455f4
   11a1d:	e8 d1 57 01 00       	call   271f3 <printk>
   11a22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:187
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a25:	e9 90 00 00 00       	jmp    11aba <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:194
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11a2a:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   11a2f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:195
        ptrVal=ptr[mapTo>>22];
   11a32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a35:	c1 e8 16             	shr    eax,0x16
   11a38:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a42:	01 d0                	add    eax,edx
   11a44:	8b 00                	mov    eax,DWORD PTR [eax]
   11a46:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:196
        ptrVal=(ptrVal&0xFFFFF000);
   11a49:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:197
        ptrT=(uint32_t*)ptrVal;
   11a50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11a53:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:199
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   11a56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a59:	25 ff ff 3f 00       	and    eax,0x3fffff
   11a5e:	c1 e8 0c             	shr    eax,0xc
   11a61:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:200
        ptrT[ptrVal]=0;
   11a64:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11a67:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a71:	01 d0                	add    eax,edx
   11a73:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/init/kpaging.c:204
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a79:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11a7e:	83 e0 40             	and    eax,0x40
   11a81:	85 c0                	test   eax,eax
   11a83:	74 35                	je     11aba <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:205
            printk("2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal]);
   11a85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11a88:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a8f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a92:	01 c2                	add    edx,eax
   11a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a97:	c1 e8 16             	shr    eax,0x16
   11a9a:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11aa1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11aa4:	01 c8                	add    eax,ecx
   11aa6:	52                   	push   edx
   11aa7:	50                   	push   eax
   11aa8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11aab:	68 2c 56 04 00       	push   0x4562c
   11ab0:	e8 3e 57 01 00       	call   271f3 <printk>
   11ab5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:209
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   11ab8:	eb 00                	jmp    11aba <kUnMapPage+0x16d>
   11aba:	90                   	nop
   11abb:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11abe:	c9                   	leave  
   11abf:	c3                   	ret    

00011ac0 <kSetPhysicalRangeRO>:
kSetPhysicalRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:212

void kSetPhysicalRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   11ac0:	55                   	push   ebp
   11ac1:	89 e5                	mov    ebp,esp
   11ac3:	83 ec 18             	sub    esp,0x18
   11ac6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11ac9:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:214
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11acc:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11ad1:	83 e0 40             	and    eax,0x40
   11ad4:	85 c0                	test   eax,eax
   11ad6:	74 2a                	je     11b02 <kSetPhysicalRangeRO+0x42>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:215
            printk("kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
   11ad8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11adb:	25 00 f0 ff ff       	and    eax,0xfffff000
   11ae0:	89 c2                	mov    edx,eax
   11ae2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11ae5:	25 00 f0 ff ff       	and    eax,0xfffff000
   11aea:	83 ec 0c             	sub    esp,0xc
   11aed:	52                   	push   edx
   11aee:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11af1:	50                   	push   eax
   11af2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11af5:	68 5c 56 04 00       	push   0x4565c
   11afa:	e8 f4 56 01 00       	call   271f3 <printk>
   11aff:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:217
#endif
    kSetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
   11b02:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11b06:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11b09:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b0f:	89 d1                	mov    ecx,edx
   11b11:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
   11b17:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11b1a:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b20:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
   11b26:	83 ec 04             	sub    esp,0x4
   11b29:	50                   	push   eax
   11b2a:	51                   	push   ecx
   11b2b:	52                   	push   edx
   11b2c:	e8 ab fa ff ff       	call   115dc <kSetVirtualRangeRO>
   11b31:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:218
}
   11b34:	90                   	nop
   11b35:	c9                   	leave  
   11b36:	c3                   	ret    

00011b37 <mmKernelSetPageInUseFlag>:
mmKernelSetPageInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:221

void mmKernelSetPageInUseFlag(uintptr_t address, bool inUse)
{
   11b37:	55                   	push   ebp
   11b38:	89 e5                	mov    ebp,esp
   11b3a:	83 ec 28             	sub    esp,0x28
   11b3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11b40:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:224
    uintptr_t* ptEntry;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11b43:	a1 38 03 12 00       	mov    eax,ds:0x120338
   11b48:	83 e0 40             	and    eax,0x40
   11b4b:	85 c0                	test   eax,eax
   11b4d:	74 25                	je     11b74 <mmKernelSetPageInUseFlag+0x3d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225
           printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
   11b4f:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11b53:	74 07                	je     11b5c <mmKernelSetPageInUseFlag+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225 (discriminator 1)
   11b55:	b8 9a 56 04 00       	mov    eax,0x4569a
   11b5a:	eb 05                	jmp    11b61 <mmKernelSetPageInUseFlag+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225 (discriminator 2)
   11b5c:	b8 a1 56 04 00       	mov    eax,0x456a1
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225 (discriminator 4)
   11b61:	50                   	push   eax
   11b62:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b65:	68 ac 56 04 00       	push   0x456ac
   11b6a:	6a 40                	push   0x40
   11b6c:	e8 a2 56 01 00       	call   27213 <printd>
   11b71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:227
#endif
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
   11b74:	83 ec 0c             	sub    esp,0xc
   11b77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b7a:	e8 f6 f8 ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   11b7f:	83 c4 10             	add    esp,0x10
   11b82:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:228
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
   11b85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11b88:	8b 00                	mov    eax,DWORD PTR [eax]
   11b8a:	50                   	push   eax
   11b8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11b8e:	68 f0 56 04 00       	push   0x456f0
   11b93:	6a 40                	push   0x40
   11b95:	e8 79 56 01 00       	call   27213 <printd>
   11b9a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:229
        if (inUse)
   11b9d:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11ba1:	74 11                	je     11bb4 <mmKernelSetPageInUseFlag+0x7d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:230
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
   11ba3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11ba6:	8b 00                	mov    eax,DWORD PTR [eax]
   11ba8:	80 cc 08             	or     ah,0x8
   11bab:	89 c2                	mov    edx,eax
   11bad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bb0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:233
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}
   11bb2:	eb 0f                	jmp    11bc3 <mmKernelSetPageInUseFlag+0x8c>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:232
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
        if (inUse)
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
   11bb4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bb7:	8b 00                	mov    eax,DWORD PTR [eax]
   11bb9:	80 e4 f7             	and    ah,0xf7
   11bbc:	89 c2                	mov    edx,eax
   11bbe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bc1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:233
}
   11bc3:	90                   	nop
   11bc4:	c9                   	leave  
   11bc5:	c3                   	ret    

00011bc6 <mmKernelSetPageRangeInUseFlag>:
mmKernelSetPageRangeInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:236

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
   11bc6:	55                   	push   ebp
   11bc7:	89 e5                	mov    ebp,esp
   11bc9:	83 ec 28             	sub    esp,0x28
   11bcc:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   11bcf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:237
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11bd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11bd5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11bd8:	eb 19                	jmp    11bf3 <mmKernelSetPageRangeInUseFlag+0x2d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:238 (discriminator 3)
        mmKernelSetPageInUseFlag(cnt,inUse);
   11bda:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11bde:	83 ec 08             	sub    esp,0x8
   11be1:	50                   	push   eax
   11be2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11be5:	e8 4d ff ff ff       	call   11b37 <mmKernelSetPageInUseFlag>
   11bea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:237 (discriminator 3)
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11bed:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11bf0:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:237 (discriminator 1)
   11bf3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bf6:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   11bf9:	72 df                	jb     11bda <mmKernelSetPageRangeInUseFlag+0x14>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:239
        mmKernelSetPageInUseFlag(cnt,inUse);
}
   11bfb:	90                   	nop
   11bfc:	c9                   	leave  
   11bfd:	c3                   	ret    

00011bfe <mmUnusePageRange>:
mmUnusePageRange():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:242

void mmUnusePageRange()
{
   11bfe:	55                   	push   ebp
   11bff:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/init/kpaging.c:244
    
   11c01:	90                   	nop
   11c02:	5d                   	pop    ebp
   11c03:	c3                   	ret    

00011c04 <strncmp>:
strncmp():
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   11c04:	55                   	push   ebp
   11c05:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
   11c07:	eb 4b                	jmp    11c54 <strncmp+0x50>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
   11c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c0c:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c0f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c12:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c15:	38 c2                	cmp    dl,al
   11c17:	74 1e                	je     11c37 <strncmp+0x33>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
   11c19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c1c:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c22:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c25:	38 c2                	cmp    dl,al
   11c27:	73 07                	jae    11c30 <strncmp+0x2c>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 1)
   11c29:	b8 ff ff ff ff       	mov    eax,0xffffffff
   11c2e:	eb 2f                	jmp    11c5f <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 2)
   11c30:	b8 01 00 00 00       	mov    eax,0x1
   11c35:	eb 28                	jmp    11c5f <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
   11c37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c3a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c3d:	84 c0                	test   al,al
   11c3f:	75 07                	jne    11c48 <strncmp+0x44>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:18
	    return 0;
   11c41:	b8 00 00 00 00       	mov    eax,0x0
   11c46:	eb 17                	jmp    11c5f <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
   11c48:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   11c4c:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
   11c50:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14 (discriminator 1)
   11c54:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11c58:	75 af                	jne    11c09 <strncmp+0x5>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
   11c5a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:20
}
   11c5f:	5d                   	pop    ebp
   11c60:	c3                   	ret    
   11c61:	66 90                	xchg   ax,ax
   11c63:	90                   	nop

00011c64 <strncpy>:
strncpy():
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
   11c64:	55                   	push   ebp
   11c65:	89 e5                	mov    ebp,esp
   11c67:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:15
    char *s = s1;
   11c6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c6d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
   11c70:	eb 1b                	jmp    11c8d <strncpy+0x29>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
   11c72:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11c75:	8d 50 01             	lea    edx,[eax+0x1]
   11c78:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11c7b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11c7e:	8d 4a 01             	lea    ecx,[edx+0x1]
   11c81:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   11c84:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11c87:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:18
	--n;
   11c89:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
   11c8d:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11c91:	74 1c                	je     11caf <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16 (discriminator 1)
   11c93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c96:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c99:	84 c0                	test   al,al
   11c9b:	75 d5                	jne    11c72 <strncpy+0xe>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11c9d:	eb 10                	jmp    11caf <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
   11c9f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11ca2:	8d 50 01             	lea    edx,[eax+0x1]
   11ca5:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11ca8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:22
	--n;
   11cab:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11caf:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11cb3:	75 ea                	jne    11c9f <strncpy+0x3b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
   11cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:25
}
   11cb8:	c9                   	leave  
   11cb9:	c3                   	ret    
   11cba:	66 90                	xchg   ax,ax

00011cbc <dumpregs>:
dumpregs():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:22

.globl dumpregs
.type dumpregs, @function
dumpregs:
.code32
        mov exceptionAX, eax
   11cbc:	a3 b0 01 12 00       	mov    ds:0x1201b0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:23
        mov exceptionBX, ebx
   11cc1:	89 1d b4 01 12 00    	mov    DWORD PTR ds:0x1201b4,ebx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:24
        mov exceptionCX, ecx
   11cc7:	89 0d b8 01 12 00    	mov    DWORD PTR ds:0x1201b8,ecx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:25
        mov exceptionDX, edx
   11ccd:	89 15 bc 01 12 00    	mov    DWORD PTR ds:0x1201bc,edx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:26
        mov exceptionSI, esi
   11cd3:	89 35 c0 01 12 00    	mov    DWORD PTR ds:0x1201c0,esi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:27
        mov exceptionDI, edi
   11cd9:	89 3d c4 01 12 00    	mov    DWORD PTR ds:0x1201c4,edi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:28
        mov exceptionBP, eax
   11cdf:	a3 c8 01 12 00       	mov    ds:0x1201c8,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:29
        mov eax, cr0
   11ce4:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:30
        mov exceptionCR0, eax
   11ce7:	a3 cc 01 12 00       	mov    ds:0x1201cc,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:31
        mov eax, cr3
   11cec:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:32
        mov exceptionCR3, eax
   11cef:	a3 d0 01 12 00       	mov    ds:0x1201d0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:33
        mov eax, cr4
   11cf4:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:34
        mov exceptionCR4, eax
   11cf7:	a3 d4 01 12 00       	mov    ds:0x1201d4,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:35
        mov eax, exceptionAX
   11cfc:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:36
        ret 
   11d01:	c3                   	ret    

00011d02 <storeGDT>:
storeGDT():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:42

.global storeGDT
.type storeGDT, @function
storeGDT:
.code32
    mov eax,[esp+4]
   11d02:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:43
    sgdt [eax]
   11d06:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:44
    ret
   11d09:	c3                   	ret    

00011d0a <getCS>:
getCS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:50

.global getCS
.type getCS, @function
getCS:
.code32
    push cs
   11d0a:	0e                   	push   cs
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:51
    pop eax
   11d0b:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:52
    ret
   11d0c:	c3                   	ret    

00011d0d <enableCR0_WP>:
enableCR0_WP():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:57

.global enableCR0_WP
.type enableCR0_WP, @function
enableCR0_WP:
    push eax
   11d0d:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:58
    mov eax,cr0
   11d0e:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:59
    or eax,0x10000
   11d11:	0d 00 00 01 00       	or     eax,0x10000
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:60
    mov cr0,eax
   11d16:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:61
    pop eax
   11d19:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:62
    ret
   11d1a:	c3                   	ret    
   11d1b:	90                   	nop

00011d1c <selectHDNum>:
selectHDNum():
/home/yogi/src/os/chrisOS/src/bishell.c:491
    uintptr_t lAddress=strtoul(params[0],0,16);
    printk("\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
}

void HIGH_CODE_SECTION selectHDNum (char* cmdline)
{
   11d1c:	55                   	push   ebp
   11d1d:	89 e5                	mov    ebp,esp
   11d1f:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:493
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=0;
   11d25:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:494
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11d2c:	83 ec 04             	sub    esp,0x4
   11d2f:	68 00 14 00 00       	push   0x1400
   11d34:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11d3a:	50                   	push   eax
   11d3b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11d3e:	e8 1d 07 00 00       	call   12460 <parseParamsShell>
   11d43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:496

    lTemp =strtol(params[0],0,10);
   11d46:	83 ec 04             	sub    esp,0x4
   11d49:	6a 0a                	push   0xa
   11d4b:	6a 00                	push   0x0
   11d4d:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11d53:	50                   	push   eax
   11d54:	e8 1b 58 01 00       	call   27574 <strtol>
   11d59:	83 c4 10             	add    esp,0x10
   11d5c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:498
 
    if (lTemp<0 || lTemp>kATADeviceInfoCount)
   11d5f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11d63:	78 0a                	js     11d6f <selectHDNum+0x53>
/home/yogi/src/os/chrisOS/src/bishell.c:498 (discriminator 1)
   11d65:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   11d6a:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11d6d:	7e 1b                	jle    11d8a <selectHDNum+0x6e>
/home/yogi/src/os/chrisOS/src/bishell.c:499
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",lTemp,kATADeviceInfoCount);
   11d6f:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   11d74:	83 ec 04             	sub    esp,0x4
   11d77:	50                   	push   eax
   11d78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11d7b:	68 40 58 04 00       	push   0x45840
   11d80:	e8 6e 54 01 00       	call   271f3 <printk>
   11d85:	83 c4 10             	add    esp,0x10
   11d88:	eb 08                	jmp    11d92 <selectHDNum+0x76>
/home/yogi/src/os/chrisOS/src/bishell.c:501
    else
        kSelectedDiskNum=lTemp;
   11d8a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11d8d:	a3 08 04 12 00       	mov    ds:0x120408,eax
/home/yogi/src/os/chrisOS/src/bishell.c:502
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
   11d92:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   11d98:	a1 08 04 12 00       	mov    eax,ds:0x120408
   11d9d:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11da3:	01 d0                	add    eax,edx
   11da5:	83 ec 08             	sub    esp,0x8
   11da8:	68 40 5f 09 00       	push   0x95f40
   11dad:	50                   	push   eax
   11dae:	e8 38 f7 00 00       	call   214eb <parseMBR>
   11db3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:503
    printk("Disk %u selected\n",kSelectedDiskNum);
   11db6:	a1 08 04 12 00       	mov    eax,ds:0x120408
   11dbb:	83 ec 08             	sub    esp,0x8
   11dbe:	50                   	push   eax
   11dbf:	68 8a 58 04 00       	push   0x4588a
   11dc4:	e8 2a 54 01 00       	call   271f3 <printk>
   11dc9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:504
}
   11dcc:	90                   	nop
   11dcd:	c9                   	leave  
   11dce:	c3                   	ret    

00011dcf <selectPart>:
selectPart():
/home/yogi/src/os/chrisOS/src/bishell.c:533
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
    printMBR(&mbr);
}

void HIGH_CODE_SECTION selectPart(char* cmdline)
{
   11dcf:	55                   	push   ebp
   11dd0:	89 e5                	mov    ebp,esp
   11dd2:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:535
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=-1;
   11dd8:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:536
    if (kSelectedDiskNum==-1)
   11ddf:	a1 08 04 12 00       	mov    eax,ds:0x120408
   11de4:	83 f8 ff             	cmp    eax,0xffffffff
   11de7:	75 10                	jne    11df9 <selectPart+0x2a>
/home/yogi/src/os/chrisOS/src/bishell.c:538
    {
        printk("You must select a disk with 'disk' before selecting a partition");
   11de9:	83 ec 0c             	sub    esp,0xc
   11dec:	68 9c 58 04 00       	push   0x4589c
   11df1:	e8 fd 53 01 00       	call   271f3 <printk>
   11df6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:540
    }
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11df9:	83 ec 04             	sub    esp,0x4
   11dfc:	68 00 14 00 00       	push   0x1400
   11e01:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11e07:	50                   	push   eax
   11e08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11e0b:	e8 50 06 00 00       	call   12460 <parseParamsShell>
   11e10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:542

    lTemp =strtol(params[0],0,10);
   11e13:	83 ec 04             	sub    esp,0x4
   11e16:	6a 0a                	push   0xa
   11e18:	6a 00                	push   0x0
   11e1a:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11e20:	50                   	push   eax
   11e21:	e8 4e 57 01 00       	call   27574 <strtol>
   11e26:	83 c4 10             	add    esp,0x10
   11e29:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:544
    //printk("parameter 1=%u\n",lTemp);
    if (lTemp<0 || lTemp>mbr.partCount)
   11e2c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11e30:	78 0a                	js     11e3c <selectPart+0x6d>
/home/yogi/src/os/chrisOS/src/bishell.c:544 (discriminator 1)
   11e32:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11e37:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   11e3a:	7d 1b                	jge    11e57 <selectPart+0x88>
/home/yogi/src/os/chrisOS/src/bishell.c:546
    {
        printk("Error, selected partition number (%u) is not valid.  It must be >=1 and <=%u\n",lTemp,mbr.partCount);
   11e3c:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11e41:	83 ec 04             	sub    esp,0x4
   11e44:	50                   	push   eax
   11e45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11e48:	68 dc 58 04 00       	push   0x458dc
   11e4d:	e8 a1 53 01 00       	call   271f3 <printk>
   11e52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:547
        return;
   11e55:	eb 7d                	jmp    11ed4 <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:549
    }
    if (mbr.parts[lTemp].partTotalSectors==0)
   11e57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e5a:	c1 e0 04             	shl    eax,0x4
   11e5d:	05 40 5f 09 00       	add    eax,0x95f40
   11e62:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   11e65:	85 c0                	test   eax,eax
   11e67:	75 25                	jne    11e8e <selectPart+0xbf>
/home/yogi/src/os/chrisOS/src/bishell.c:551
    {
        printk("Error, selected partition (number %u) is not a valid partition as its total sector count is 0.",lTemp);
   11e69:	83 ec 08             	sub    esp,0x8
   11e6c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11e6f:	68 2c 59 04 00       	push   0x4592c
   11e74:	e8 7a 53 01 00       	call   271f3 <printk>
   11e79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:552
        printMBR(&mbr);   
   11e7c:	83 ec 0c             	sub    esp,0xc
   11e7f:	68 40 5f 09 00       	push   0x95f40
   11e84:	e8 87 f5 00 00       	call   21410 <printMBR>
   11e89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:553
        return;
   11e8c:	eb 46                	jmp    11ed4 <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:555
    }
    kSelectedPartNum = lTemp;
   11e8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e91:	a3 0c 04 12 00       	mov    ds:0x12040c,eax
/home/yogi/src/os/chrisOS/src/bishell.c:556
    ahciSetCurrentPart(mbr.parts[lTemp]);
   11e96:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11e99:	c1 e0 04             	shl    eax,0x4
   11e9c:	05 40 5f 09 00       	add    eax,0x95f40
   11ea1:	83 ec 10             	sub    esp,0x10
   11ea4:	89 e2                	mov    edx,esp
   11ea6:	8b 08                	mov    ecx,DWORD PTR [eax]
   11ea8:	89 0a                	mov    DWORD PTR [edx],ecx
   11eaa:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   11ead:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   11eb0:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   11eb3:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   11eb6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   11eb9:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
   11ebc:	e8 1c 31 00 00       	call   14fdd <ahciSetCurrentPart>
   11ec1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:558
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
   11ec4:	83 ec 0c             	sub    esp,0xc
   11ec7:	68 8b 59 04 00       	push   0x4598b
   11ecc:	e8 1a 01 00 00       	call   11feb <attach>
   11ed1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:559
}
   11ed4:	c9                   	leave  
   11ed5:	c3                   	ret    

00011ed6 <listParts>:
listParts():
/home/yogi/src/os/chrisOS/src/bishell.c:507
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
    printk("Disk %u selected\n",kSelectedDiskNum);
}

void HIGH_CODE_SECTION listParts(char* cmdline)
{
   11ed6:	55                   	push   ebp
   11ed7:	89 e5                	mov    ebp,esp
   11ed9:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:509
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11edf:	83 ec 04             	sub    esp,0x4
   11ee2:	68 00 14 00 00       	push   0x1400
   11ee7:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11eed:	50                   	push   eax
   11eee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11ef1:	e8 6a 05 00 00       	call   12460 <parseParamsShell>
   11ef6:	83 c4 10             	add    esp,0x10
   11ef9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:510
    int driveNo=-1;
   11efc:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:512

    if (paramCount>0)
   11f03:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11f07:	7e 1b                	jle    11f24 <listParts+0x4e>
/home/yogi/src/os/chrisOS/src/bishell.c:513
        driveNo=strtol(params[0],0,10);
   11f09:	83 ec 04             	sub    esp,0x4
   11f0c:	6a 0a                	push   0xa
   11f0e:	6a 00                	push   0x0
   11f10:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11f16:	50                   	push   eax
   11f17:	e8 58 56 01 00       	call   27574 <strtol>
   11f1c:	83 c4 10             	add    esp,0x10
   11f1f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11f22:	eb 08                	jmp    11f2c <listParts+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:515
    else
        driveNo=kSelectedDiskNum;
   11f24:	a1 08 04 12 00       	mov    eax,ds:0x120408
   11f29:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:516
    if (driveNo<0 || driveNo>kATADeviceInfoCount)
   11f2c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11f30:	78 0a                	js     11f3c <listParts+0x66>
/home/yogi/src/os/chrisOS/src/bishell.c:516 (discriminator 1)
   11f32:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   11f37:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11f3a:	7e 1e                	jle    11f5a <listParts+0x84>
/home/yogi/src/os/chrisOS/src/bishell.c:518
    {
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",driveNo,kATADeviceInfoCount);
   11f3c:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   11f41:	83 ec 04             	sub    esp,0x4
   11f44:	50                   	push   eax
   11f45:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11f48:	68 40 58 04 00       	push   0x45840
   11f4d:	e8 a1 52 01 00       	call   271f3 <printk>
   11f52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:519
        return;
   11f55:	e9 8f 00 00 00       	jmp    11fe9 <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:521
    }
    printk("Partitions for disk # %u\n",driveNo);
   11f5a:	83 ec 08             	sub    esp,0x8
   11f5d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11f60:	68 8c 59 04 00       	push   0x4598c
   11f65:	e8 89 52 01 00       	call   271f3 <printk>
   11f6a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:522
    port=(HBA_PORT*)kATADeviceInfo[driveNo].ioPort;
   11f6d:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   11f73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f76:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11f7c:	01 d0                	add    eax,edx
   11f7e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   11f84:	a3 5c 63 09 00       	mov    ds:0x9635c,eax
/home/yogi/src/os/chrisOS/src/bishell.c:523
    if (kATADeviceInfo[driveNo].ATADeviceType != ATA_DEVICE_TYPE_SATA_HD)
   11f89:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   11f8f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11f92:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11f98:	01 d0                	add    eax,edx
   11f9a:	8b 80 52 02 00 00    	mov    eax,DWORD PTR [eax+0x252]
   11fa0:	83 f8 02             	cmp    eax,0x2
   11fa3:	74 12                	je     11fb7 <listParts+0xe1>
/home/yogi/src/os/chrisOS/src/bishell.c:525
    {
        printk("Invalid device type.  Only SATA disks can be listed at the moment\n");
   11fa5:	83 ec 0c             	sub    esp,0xc
   11fa8:	68 a8 59 04 00       	push   0x459a8
   11fad:	e8 41 52 01 00       	call   271f3 <printk>
   11fb2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:526
        return;
   11fb5:	eb 32                	jmp    11fe9 <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:528
    }
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
   11fb7:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   11fbd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11fc0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11fc6:	01 d0                	add    eax,edx
   11fc8:	83 ec 08             	sub    esp,0x8
   11fcb:	68 40 5f 09 00       	push   0x95f40
   11fd0:	50                   	push   eax
   11fd1:	e8 15 f5 00 00       	call   214eb <parseMBR>
   11fd6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:529
    printMBR(&mbr);
   11fd9:	83 ec 0c             	sub    esp,0xc
   11fdc:	68 40 5f 09 00       	push   0x95f40
   11fe1:	e8 2a f4 00 00       	call   21410 <printMBR>
   11fe6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:530
}
   11fe9:	c9                   	leave  
   11fea:	c3                   	ret    

00011feb <attach>:
attach():
/home/yogi/src/os/chrisOS/src/bishell.c:562
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
}

void HIGH_CODE_SECTION attach(char* cmdline)
{
   11feb:	55                   	push   ebp
   11fec:	89 e5                	mov    ebp,esp
   11fee:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:564
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11ff4:	83 ec 04             	sub    esp,0x4
   11ff7:	68 00 14 00 00       	push   0x1400
   11ffc:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   12002:	50                   	push   eax
   12003:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12006:	e8 55 04 00 00       	call   12460 <parseParamsShell>
   1200b:	83 c4 10             	add    esp,0x10
   1200e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:566

    if (kSelectedDiskNum < 0 || kSelectedPartNum < 0)
   12011:	a1 08 04 12 00       	mov    eax,ds:0x120408
   12016:	85 c0                	test   eax,eax
   12018:	78 09                	js     12023 <attach+0x38>
/home/yogi/src/os/chrisOS/src/bishell.c:566 (discriminator 1)
   1201a:	a1 0c 04 12 00       	mov    eax,ds:0x12040c
   1201f:	85 c0                	test   eax,eax
   12021:	79 1d                	jns    12040 <attach+0x55>
/home/yogi/src/os/chrisOS/src/bishell.c:568
    {
        printk("Must first select a disk (%u) and a partition (%u) using 'selectpart'",kSelectedDiskNum,kSelectedPartNum);
   12023:	8b 15 0c 04 12 00    	mov    edx,DWORD PTR ds:0x12040c
   12029:	a1 08 04 12 00       	mov    eax,ds:0x120408
   1202e:	83 ec 04             	sub    esp,0x4
   12031:	52                   	push   edx
   12032:	50                   	push   eax
   12033:	68 ec 59 04 00       	push   0x459ec
   12038:	e8 b6 51 01 00       	call   271f3 <printk>
   1203d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:570
    }
    strcpy(selectedDir,"/");
   12040:	83 ec 08             	sub    esp,0x8
   12043:	68 32 5a 04 00       	push   0x45a32
   12048:	68 c0 b4 08 00       	push   0x8b4c0
   1204d:	e8 02 53 01 00       	call   27354 <strcpy>
   12052:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:571
    ahciSetCurrentDisk((HBA_PORT*)kATADeviceInfo[kSelectedDiskNum].ioPort);
   12055:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   1205b:	a1 08 04 12 00       	mov    eax,ds:0x120408
   12060:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   12066:	01 d0                	add    eax,edx
   12068:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   1206e:	83 ec 0c             	sub    esp,0xc
   12071:	50                   	push   eax
   12072:	e8 58 2f 00 00       	call   14fcf <ahciSetCurrentDisk>
   12077:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:572
    int lRetVal=fl_attach_media((fn_diskio_read)ahciBlockingRead28, (fn_diskio_write)ahciBlockingWrite28);
   1207a:	83 ec 08             	sub    esp,0x8
   1207d:	68 0e 53 01 00       	push   0x1530e
   12082:	68 3a 50 01 00       	push   0x1503a
   12087:	e8 0c b3 00 00       	call   1d398 <fl_attach_media>
   1208c:	83 c4 10             	add    esp,0x10
   1208f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:573
    if (lRetVal!=0)
   12092:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12096:	74 1f                	je     120b7 <attach+0xcc>
/home/yogi/src/os/chrisOS/src/bishell.c:575
    {
        printk("Error attaching to disk %u, partition %u.  Error number %u",kSelectedDiskNum,kSelectedPartNum,lRetVal);
   12098:	8b 15 0c 04 12 00    	mov    edx,DWORD PTR ds:0x12040c
   1209e:	a1 08 04 12 00       	mov    eax,ds:0x120408
   120a3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   120a6:	52                   	push   edx
   120a7:	50                   	push   eax
   120a8:	68 34 5a 04 00       	push   0x45a34
   120ad:	e8 41 51 01 00       	call   271f3 <printk>
   120b2:	83 c4 10             	add    esp,0x10
   120b5:	eb 1d                	jmp    120d4 <attach+0xe9>
/home/yogi/src/os/chrisOS/src/bishell.c:578
        return;
    }
    printk("Attached to disk %u, partition %u.\n",kSelectedDiskNum,kSelectedPartNum);
   120b7:	8b 15 0c 04 12 00    	mov    edx,DWORD PTR ds:0x12040c
   120bd:	a1 08 04 12 00       	mov    eax,ds:0x120408
   120c2:	83 ec 04             	sub    esp,0x4
   120c5:	52                   	push   edx
   120c6:	50                   	push   eax
   120c7:	68 70 5a 04 00       	push   0x45a70
   120cc:	e8 22 51 01 00       	call   271f3 <printk>
   120d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:581
    
    //fl_listdirectory(selectedDir);
}
   120d4:	c9                   	leave  
   120d5:	c3                   	ret    

000120d6 <listDir>:
listDir():
/home/yogi/src/os/chrisOS/src/bishell.c:584

void HIGH_CODE_SECTION listDir(char* cmdline)
{
   120d6:	55                   	push   ebp
   120d7:	89 e5                	mov    ebp,esp
   120d9:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:586
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   120df:	83 ec 04             	sub    esp,0x4
   120e2:	68 00 14 00 00       	push   0x1400
   120e7:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   120ed:	50                   	push   eax
   120ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   120f1:	e8 6a 03 00 00       	call   12460 <parseParamsShell>
   120f6:	83 c4 10             	add    esp,0x10
   120f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:590
    
    //printk("Kernel Debug: Listing of directory %s + %s\n",params[0],params[1]);
    
    fl_listdirectory(params[0]);
   120fc:	83 ec 0c             	sub    esp,0xc
   120ff:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12105:	50                   	push   eax
   12106:	e8 6d c1 00 00       	call   1e278 <fl_listdirectory>
   1210b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:591
}
   1210e:	90                   	nop
   1210f:	c9                   	leave  
   12110:	c3                   	ret    

00012111 <execProgram>:
execProgram():
/home/yogi/src/os/chrisOS/src/bishell.c:594

void HIGH_CODE_SECTION execProgram(char* cmdline)
{
   12111:	55                   	push   ebp
   12112:	89 e5                	mov    ebp,esp
   12114:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:596
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1211a:	83 ec 04             	sub    esp,0x4
   1211d:	68 00 14 00 00       	push   0x1400
   12122:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12128:	50                   	push   eax
   12129:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1212c:	e8 2f 03 00 00       	call   12460 <parseParamsShell>
   12131:	83 c4 10             	add    esp,0x10
   12134:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:599

    
    strcpy(sExecutingProgram,params[0]+1);
   12137:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1213d:	83 c0 01             	add    eax,0x1
   12140:	83 ec 08             	sub    esp,0x8
   12143:	50                   	push   eax
   12144:	68 40 b4 08 00       	push   0x8b440
   12149:	e8 06 52 01 00       	call   27354 <strcpy>
   1214e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:602
    //printk("execProgram: param count = %u\n",paramCount);

    lTemp=buildargv(cmdline);
   12151:	83 ec 0c             	sub    esp,0xc
   12154:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12157:	e8 4e 04 00 00       	call   125aa <buildargv>
   1215c:	83 c4 10             	add    esp,0x10
   1215f:	a3 20 b4 08 00       	mov    ds:0x8b420,eax
/home/yogi/src/os/chrisOS/src/bishell.c:609

//    printk("listing parameters:\n");
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("%u = '%s'\n",cnt,lTemp[cnt]);
   
    exec (params[0],paramCount,lTemp);
   12164:	a1 20 b4 08 00       	mov    eax,ds:0x8b420
   12169:	83 ec 04             	sub    esp,0x4
   1216c:	50                   	push   eax
   1216d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12170:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12176:	50                   	push   eax
   12177:	e8 bd 4a 01 00       	call   26c39 <exec>
   1217c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:610
    strcpy(sExecutingProgram,sbiShellProgramName);
   1217f:	83 ec 08             	sub    esp,0x8
   12182:	68 c0 89 02 00       	push   0x289c0
   12187:	68 40 b4 08 00       	push   0x8b440
   1218c:	e8 c3 51 01 00       	call   27354 <strcpy>
   12191:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:611
}
   12194:	90                   	nop
   12195:	c9                   	leave  
   12196:	c3                   	ret    

00012197 <displayGDTTable>:
displayGDTTable():
/home/yogi/src/os/chrisOS/src/bishell.c:211
  //printk("buildargv: exiting\n");
  return (argv);
}

void HIGH_CODE_SECTION displayGDTTable(char *cmdline)
{
   12197:	55                   	push   ebp
   12198:	89 e5                	mov    ebp,esp
   1219a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/bishell.c:212
    displayGDT();
   1219d:	e8 c7 38 01 00       	call   25a69 <displayGDT>
/home/yogi/src/os/chrisOS/src/bishell.c:213
}
   121a2:	90                   	nop
   121a3:	c9                   	leave  
   121a4:	c3                   	ret    

000121a5 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   121a5:	55                   	push   ebp
   121a6:	89 e5                	mov    ebp,esp
   121a8:	83 ec 08             	sub    esp,0x8
   121ab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   121ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   121b1:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   121b5:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   121b8:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   121bc:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   121c0:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   121c1:	90                   	nop
   121c2:	c9                   	leave  
   121c3:	c3                   	ret    

000121c4 <outw>:
outw():
/home/yogi/src/os/chrisOS/include/io.h:27

static __inline void outw(unsigned short __port, unsigned short __val)
{
   121c4:	55                   	push   ebp
   121c5:	89 e5                	mov    ebp,esp
   121c7:	83 ec 08             	sub    esp,0x8
   121ca:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   121cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   121d0:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   121d4:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
/home/yogi/src/os/chrisOS/include/io.h:28
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
   121d8:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
   121dc:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   121e0:	66 ef                	out    dx,ax
/home/yogi/src/os/chrisOS/include/io.h:29
}
   121e2:	90                   	nop
   121e3:	c9                   	leave  
   121e4:	c3                   	ret    

000121e5 <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32

static __inline void outl(unsigned short __port, unsigned int __val)
{
   121e5:	55                   	push   ebp
   121e6:	89 e5                	mov    ebp,esp
   121e8:	83 ec 04             	sub    esp,0x4
   121eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   121ee:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   121f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   121f5:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   121f9:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   121fa:	90                   	nop
   121fb:	c9                   	leave  
   121fc:	c3                   	ret    

000121fd <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37

static __inline unsigned char inb(unsigned short __port)
{
   121fd:	55                   	push   ebp
   121fe:	89 e5                	mov    ebp,esp
   12200:	83 ec 14             	sub    esp,0x14
   12203:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12206:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   1220a:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1220e:	89 c2                	mov    edx,eax
   12210:	ec                   	in     al,dx
   12211:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   12214:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   12218:	c9                   	leave  
   12219:	c3                   	ret    

0001221a <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   1221a:	55                   	push   ebp
   1221b:	89 e5                	mov    ebp,esp
   1221d:	83 ec 14             	sub    esp,0x14
   12220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12223:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   12227:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1222b:	89 c2                	mov    edx,eax
   1222d:	66 ed                	in     ax,dx
   1222f:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   12233:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   12237:	c9                   	leave  
   12238:	c3                   	ret    

00012239 <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51

static __inline unsigned int inl(unsigned short __port)
{
   12239:	55                   	push   ebp
   1223a:	89 e5                	mov    ebp,esp
   1223c:	83 ec 14             	sub    esp,0x14
   1223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12242:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   12246:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1224a:	89 c2                	mov    edx,eax
   1224c:	ed                   	in     eax,dx
   1224d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   12250:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   12253:	c9                   	leave  
   12254:	c3                   	ret    

00012255 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   12255:	55                   	push   ebp
   12256:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   12258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1225b:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   12262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12265:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   12268:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1226b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1226d:	90                   	nop
   1226e:	5d                   	pop    ebp
   1226f:	c3                   	ret    

00012270 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   12270:	55                   	push   ebp
   12271:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   12273:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12276:	8b 00                	mov    eax,DWORD PTR [eax]
   12278:	85 c0                	test   eax,eax
   1227a:	75 0d                	jne    12289 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1227c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1227f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   12282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12285:	89 10                	mov    DWORD PTR [eax],edx
   12287:	eb 0e                	jmp    12297 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   12289:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1228c:	8b 00                	mov    eax,DWORD PTR [eax]
   1228e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12291:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   12294:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   12297:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1229a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1229d:	85 c0                	test   eax,eax
   1229f:	75 0d                	jne    122ae <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   122a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122a4:	8b 10                	mov    edx,DWORD PTR [eax]
   122a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122a9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   122ac:	eb 0d                	jmp    122bb <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   122ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122b1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   122b4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   122b7:	8b 12                	mov    edx,DWORD PTR [edx]
   122b9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   122bb:	90                   	nop
   122bc:	5d                   	pop    ebp
   122bd:	c3                   	ret    

000122be <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   122be:	55                   	push   ebp
   122bf:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   122c1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   122c7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   122c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   122cf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   122d2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   122d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122d8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   122db:	85 c0                	test   eax,eax
   122dd:	75 0b                	jne    122ea <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   122df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122e2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   122e5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   122e8:	eb 0b                	jmp    122f5 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   122ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122ed:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   122f0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   122f3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   122f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122f8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   122fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   122fe:	90                   	nop
   122ff:	5d                   	pop    ebp
   12300:	c3                   	ret    

00012301 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   12301:	55                   	push   ebp
   12302:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12304:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12307:	8b 10                	mov    edx,DWORD PTR [eax]
   12309:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1230c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1230e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12311:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12314:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   12317:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1231a:	8b 00                	mov    eax,DWORD PTR [eax]
   1231c:	85 c0                	test   eax,eax
   1231e:	75 0a                	jne    1232a <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   12320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12323:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12326:	89 10                	mov    DWORD PTR [eax],edx
   12328:	eb 0b                	jmp    12335 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1232a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1232d:	8b 00                	mov    eax,DWORD PTR [eax]
   1232f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12332:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   12335:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12338:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1233b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1233d:	90                   	nop
   1233e:	5d                   	pop    ebp
   1233f:	c3                   	ret    

00012340 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   12340:	55                   	push   ebp
   12341:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12346:	8b 00                	mov    eax,DWORD PTR [eax]
   12348:	85 c0                	test   eax,eax
   1234a:	75 26                	jne    12372 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1234c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1234f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12352:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   12354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12357:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1235a:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1235d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12360:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   12366:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12369:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   12370:	eb 14                	jmp    12386 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   12372:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12375:	8b 00                	mov    eax,DWORD PTR [eax]
   12377:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1237a:	50                   	push   eax
   1237b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1237e:	e8 7e ff ff ff       	call   12301 <fat_list_insert_before>
   12383:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   12386:	90                   	nop
   12387:	c9                   	leave  
   12388:	c3                   	ret    

00012389 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   12389:	55                   	push   ebp
   1238a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1238c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1238f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12392:	85 c0                	test   eax,eax
   12394:	75 10                	jne    123a6 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   12396:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12399:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1239c:	e8 9f ff ff ff       	call   12340 <fat_list_insert_first>
   123a1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   123a4:	eb 15                	jmp    123bb <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   123a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123a9:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   123ac:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   123af:	50                   	push   eax
   123b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   123b3:	e8 06 ff ff ff       	call   122be <fat_list_insert_after>
   123b8:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   123bb:	90                   	nop
   123bc:	c9                   	leave  
   123bd:	c3                   	ret    

000123be <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   123be:	55                   	push   ebp
   123bf:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   123c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123c4:	8b 00                	mov    eax,DWORD PTR [eax]
   123c6:	85 c0                	test   eax,eax
   123c8:	0f 94 c0             	sete   al
   123cb:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   123ce:	5d                   	pop    ebp
   123cf:	c3                   	ret    

000123d0 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   123d0:	55                   	push   ebp
   123d1:	89 e5                	mov    ebp,esp
   123d3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   123d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123d9:	8b 00                	mov    eax,DWORD PTR [eax]
   123db:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   123de:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   123e2:	74 0e                	je     123f2 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   123e4:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   123e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   123ea:	e8 81 fe ff ff       	call   12270 <fat_list_remove>
   123ef:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   123f2:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   123f5:	c9                   	leave  
   123f6:	c3                   	ret    

000123f7 <findCommand>:
findCommand():
/home/yogi/src/os/chrisOS/src/bishell.c:37
char programParams[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
char** lTemp;


int HIGH_CODE_SECTION findCommand(char* command)
{
   123f7:	55                   	push   ebp
   123f8:	89 e5                	mov    ebp,esp
   123fa:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:41
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   123fd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12404:	eb 4d                	jmp    12453 <findCommand+0x5c>
/home/yogi/src/os/chrisOS/src/bishell.c:43
    {
        ret = strncmp(command, cmds[i].name,strlen(cmds[i].name));
   12406:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12409:	c1 e0 04             	shl    eax,0x4
   1240c:	05 00 88 02 00       	add    eax,0x28800
   12411:	8b 00                	mov    eax,DWORD PTR [eax]
   12413:	83 ec 0c             	sub    esp,0xc
   12416:	50                   	push   eax
   12417:	e8 a8 4f 01 00       	call   273c4 <strlen>
   1241c:	83 c4 10             	add    esp,0x10
   1241f:	89 c2                	mov    edx,eax
   12421:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12424:	c1 e0 04             	shl    eax,0x4
   12427:	05 00 88 02 00       	add    eax,0x28800
   1242c:	8b 00                	mov    eax,DWORD PTR [eax]
   1242e:	83 ec 04             	sub    esp,0x4
   12431:	52                   	push   edx
   12432:	50                   	push   eax
   12433:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12436:	e8 c9 f7 ff ff       	call   11c04 <strncmp>
   1243b:	83 c4 10             	add    esp,0x10
   1243e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:45
        //printk("findCommand compared %s and %s for %u, returned %u\n", command, cmds[i].name, strlen(cmds[i].name), ret);
        if(ret==0)
   12441:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12445:	75 08                	jne    1244f <findCommand+0x58>
/home/yogi/src/os/chrisOS/src/bishell.c:48
        {
            //printk("findCommand returning %u", i+1);
            return i+1;
   12447:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1244a:	83 c0 01             	add    eax,0x1
   1244d:	eb 0f                	jmp    1245e <findCommand+0x67>
/home/yogi/src/os/chrisOS/src/bishell.c:41 (discriminator 2)
int HIGH_CODE_SECTION findCommand(char* command)
{
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   1244f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:41 (discriminator 1)
   12453:	83 7d f4 1b          	cmp    DWORD PTR [ebp-0xc],0x1b
   12457:	76 ad                	jbe    12406 <findCommand+0xf>
/home/yogi/src/os/chrisOS/src/bishell.c:52
            //printk("findCommand returning %u", i+1);
            return i+1;
        }
    }
    //printk("findCommand returning -1");
            return -1;
   12459:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:53
}
   1245e:	c9                   	leave  
   1245f:	c3                   	ret    

00012460 <parseParamsShell>:
parseParamsShell():
/home/yogi/src/os/chrisOS/src/bishell.c:56

int HIGH_CODE_SECTION parseParamsShell(char* cmdLine, char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], int size)
    {
   12460:	55                   	push   ebp
   12461:	89 e5                	mov    ebp,esp
   12463:	53                   	push   ebx
   12464:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/bishell.c:57
    int x=0,y=0;
   12467:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1246e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:58
    int lRetVal=0,parsedChars=0;
   12475:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   1247c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:60
    
    memset(params,0, size);
   12483:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12486:	83 ec 04             	sub    esp,0x4
   12489:	50                   	push   eax
   1248a:	6a 00                	push   0x0
   1248c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1248f:	e8 e9 2b 01 00       	call   2507d <memset>
   12494:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:62
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   12497:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1249e:	e9 c9 00 00 00       	jmp    1256c <parseParamsShell+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:65
    {
        //printk("c=%c\n", cmdLine[cnt]);
        if ( (cmdLine[cnt]==' ' || cmdLine[cnt]=='-') || cmdLine[cnt]==',')
   124a3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124a6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124a9:	01 d0                	add    eax,edx
   124ab:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124ae:	3c 20                	cmp    al,0x20
   124b0:	74 1e                	je     124d0 <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:65 (discriminator 1)
   124b2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124b5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124b8:	01 d0                	add    eax,edx
   124ba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124bd:	3c 2d                	cmp    al,0x2d
   124bf:	74 0f                	je     124d0 <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:65 (discriminator 2)
   124c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124c4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124c7:	01 d0                	add    eax,edx
   124c9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124cc:	3c 2c                	cmp    al,0x2c
   124ce:	75 6f                	jne    1253f <parseParamsShell+0xdf>
/home/yogi/src/os/chrisOS/src/bishell.c:68
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
   124d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124d6:	01 d0                	add    eax,edx
   124d8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124db:	3c 2d                	cmp    al,0x2d
   124dd:	74 0f                	je     124ee <parseParamsShell+0x8e>
/home/yogi/src/os/chrisOS/src/bishell.c:68 (discriminator 1)
   124df:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124e2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124e5:	01 d0                	add    eax,edx
   124e7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   124ea:	3c 2f                	cmp    al,0x2f
   124ec:	75 25                	jne    12513 <parseParamsShell+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:69
                params[y][x++]=cmdLine[cnt];
   124ee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   124f1:	c1 e0 09             	shl    eax,0x9
   124f4:	89 c2                	mov    edx,eax
   124f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   124f9:	8d 0c 02             	lea    ecx,[edx+eax*1]
   124fc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   124ff:	8d 50 01             	lea    edx,[eax+0x1]
   12502:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12505:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   12508:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1250b:	01 da                	add    edx,ebx
   1250d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12510:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:70
            params[y][x]='\0';
   12513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12516:	c1 e0 09             	shl    eax,0x9
   12519:	89 c2                	mov    edx,eax
   1251b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1251e:	01 c2                	add    edx,eax
   12520:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12523:	01 d0                	add    eax,edx
   12525:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:71
            if (cnt>0)
   12528:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1252c:	74 36                	je     12564 <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:72
                {x=0;y++;lRetVal++;}
   1252e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12535:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
   12539:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:71
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
                params[y][x++]=cmdLine[cnt];
            params[y][x]='\0';
            if (cnt>0)
   1253d:	eb 25                	jmp    12564 <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:77
                {x=0;y++;lRetVal++;}
        }
        else
        {
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
   1253f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12542:	c1 e0 09             	shl    eax,0x9
   12545:	89 c2                	mov    edx,eax
   12547:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1254a:	8d 0c 02             	lea    ecx,[edx+eax*1]
   1254d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12550:	8d 50 01             	lea    edx,[eax+0x1]
   12553:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12556:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   12559:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1255c:	01 da                	add    edx,ebx
   1255e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12561:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:79 (discriminator 2)
        }
        parsedChars++;
   12564:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:62 (discriminator 2)
    int x=0,y=0;
    int lRetVal=0,parsedChars=0;
    
    memset(params,0, size);
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   12568:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:62 (discriminator 1)
   1256c:	83 ec 0c             	sub    esp,0xc
   1256f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12572:	e8 4d 4e 01 00       	call   273c4 <strlen>
   12577:	83 c4 10             	add    esp,0x10
   1257a:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1257d:	0f 87 20 ff ff ff    	ja     124a3 <parseParamsShell+0x43>
/home/yogi/src/os/chrisOS/src/bishell.c:81
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
        }
        parsedChars++;
    }
    if (parsedChars)
   12583:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   12587:	74 19                	je     125a2 <parseParamsShell+0x142>
/home/yogi/src/os/chrisOS/src/bishell.c:83
    {
        lRetVal++;
   12589:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:84
        params[y][x]='\0';
   1258d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12590:	c1 e0 09             	shl    eax,0x9
   12593:	89 c2                	mov    edx,eax
   12595:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12598:	01 c2                	add    edx,eax
   1259a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1259d:	01 d0                	add    eax,edx
   1259f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:89
    }
    //printk("Returning %u parameters:\n", lRetVal);
    //for (int cnt=0;cnt<lRetVal;cnt++)
        //printk("\tParameter %u: '%s'\n", cnt, params[cnt]);
    return lRetVal;
   125a2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/bishell.c:90
}
   125a5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   125a8:	c9                   	leave  
   125a9:	c3                   	ret    

000125aa <buildargv>:
buildargv():
/home/yogi/src/os/chrisOS/src/bishell.c:94

/*parts from http://*/
char **buildargv (const char *input)
{
   125aa:	55                   	push   ebp
   125ab:	89 e5                	mov    ebp,esp
   125ad:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/bishell.c:97
  char *arg;
  char *copybuf;
  int squote = 0;
   125b0:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:98
  int dquote = 0;
   125b7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:99
  int bsquote = 0;
   125be:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:100
  int argc = 0;
   125c5:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:101
  int maxargc = 0;
   125cc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:102
  char **argv = NULL;
   125d3:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:106
  char **nargv;
  //printk("buildargv: entering\n");
  
  if (input != NULL)
   125da:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   125de:	0f 84 17 02 00 00    	je     127fb <buildargv+0x251>
/home/yogi/src/os/chrisOS/src/bishell.c:109
    {
      //printk("buildargv: command to parse (%u chars) is: '%s'\n",strlen (input) + 1,input);
      copybuf = (char *) mallocTemp (strlen (input) + 1);
   125e4:	83 ec 0c             	sub    esp,0xc
   125e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   125ea:	e8 d5 4d 01 00       	call   273c4 <strlen>
   125ef:	83 c4 10             	add    esp,0x10
   125f2:	83 c0 01             	add    eax,0x1
   125f5:	83 ec 0c             	sub    esp,0xc
   125f8:	50                   	push   eax
   125f9:	e8 48 34 01 00       	call   25a46 <mallocTemp>
   125fe:	83 c4 10             	add    esp,0x10
   12601:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:117
	 argv, even for null strings.  See NOTES above, test case below. */
      do
	{
	  /* Pick off argv[argc] */

	  if ((maxargc == 0) || (argc >= (maxargc - 1)))
   12604:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   12608:	74 0b                	je     12615 <buildargv+0x6b>
/home/yogi/src/os/chrisOS/src/bishell.c:117 (discriminator 1)
   1260a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1260d:	83 e8 01             	sub    eax,0x1
   12610:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   12613:	7f 3d                	jg     12652 <buildargv+0xa8>
/home/yogi/src/os/chrisOS/src/bishell.c:120
	    {
	      /* argv needs initialization, or expansion */
	      if (argv == NULL)
   12615:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   12619:	75 1c                	jne    12637 <buildargv+0x8d>
/home/yogi/src/os/chrisOS/src/bishell.c:122
		{
		  maxargc = INITIAL_MAXARGC;
   1261b:	c7 45 dc 14 00 00 00 	mov    DWORD PTR [ebp-0x24],0x14
/home/yogi/src/os/chrisOS/src/bishell.c:123
		  nargv = (char **) mallocTemp (maxargc * sizeof (char *));
   12622:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12625:	c1 e0 02             	shl    eax,0x2
   12628:	83 ec 0c             	sub    esp,0xc
   1262b:	50                   	push   eax
   1262c:	e8 15 34 01 00       	call   25a46 <mallocTemp>
   12631:	83 c4 10             	add    esp,0x10
   12634:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:125
		}
	      argv = nargv;
   12637:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1263a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:126
	      argv[argc] = NULL;
   1263d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12640:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12647:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1264a:	01 d0                	add    eax,edx
   1264c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:129
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
   12652:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12655:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:130
	  while (*input != EOS)
   12658:	e9 ec 00 00 00       	jmp    12749 <buildargv+0x19f>
/home/yogi/src/os/chrisOS/src/bishell.c:132
	    {
	      if ((*input)==' ' && !squote && !dquote && !bsquote)
   1265d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12660:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12663:	3c 20                	cmp    al,0x20
   12665:	75 16                	jne    1267d <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:132 (discriminator 1)
   12667:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1266b:	75 10                	jne    1267d <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:132 (discriminator 2)
   1266d:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   12671:	75 0a                	jne    1267d <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:132 (discriminator 3)
   12673:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12677:	0f 84 da 00 00 00    	je     12757 <buildargv+0x1ad>
/home/yogi/src/os/chrisOS/src/bishell.c:138
		{
		  break;
		}
	      else
		{
		  if (bsquote)
   1267d:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12681:	74 1d                	je     126a0 <buildargv+0xf6>
/home/yogi/src/os/chrisOS/src/bishell.c:140
		    {
		      bsquote = 0;
   12683:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:141
		      *arg++ = *input;
   1268a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1268d:	8d 50 01             	lea    edx,[eax+0x1]
   12690:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12693:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12696:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12699:	88 10                	mov    BYTE PTR [eax],dl
   1269b:	e9 a5 00 00 00       	jmp    12745 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:143
		    }
		  else if (*input == '\\')
   126a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126a3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126a6:	3c 5c                	cmp    al,0x5c
   126a8:	75 0c                	jne    126b6 <buildargv+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:145
		    {
		      bsquote = 1;
   126aa:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
   126b1:	e9 8f 00 00 00       	jmp    12745 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:147
		    }
		  else if (squote)
   126b6:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   126ba:	74 26                	je     126e2 <buildargv+0x138>
/home/yogi/src/os/chrisOS/src/bishell.c:149
		    {
		      if (*input == '\'')
   126bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126bf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126c2:	3c 27                	cmp    al,0x27
   126c4:	75 09                	jne    126cf <buildargv+0x125>
/home/yogi/src/os/chrisOS/src/bishell.c:151
			{
			  squote = 0;
   126c6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   126cd:	eb 76                	jmp    12745 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:155
			}
		      else
			{
			  *arg++ = *input;
   126cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   126d2:	8d 50 01             	lea    edx,[eax+0x1]
   126d5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   126d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   126db:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   126de:	88 10                	mov    BYTE PTR [eax],dl
   126e0:	eb 63                	jmp    12745 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:158
			}
		    }
		  else if (dquote)
   126e2:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   126e6:	74 26                	je     1270e <buildargv+0x164>
/home/yogi/src/os/chrisOS/src/bishell.c:160
		    {
		      if (*input == '"')
   126e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126eb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126ee:	3c 22                	cmp    al,0x22
   126f0:	75 09                	jne    126fb <buildargv+0x151>
/home/yogi/src/os/chrisOS/src/bishell.c:162
			{
			  dquote = 0;
   126f2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   126f9:	eb 4a                	jmp    12745 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:166
			}
		      else
			{
			  *arg++ = *input;
   126fb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   126fe:	8d 50 01             	lea    edx,[eax+0x1]
   12701:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12704:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12707:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1270a:	88 10                	mov    BYTE PTR [eax],dl
   1270c:	eb 37                	jmp    12745 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:171
			}
		    }
		  else
		    {
		      if (*input == '\'')
   1270e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12711:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12714:	3c 27                	cmp    al,0x27
   12716:	75 09                	jne    12721 <buildargv+0x177>
/home/yogi/src/os/chrisOS/src/bishell.c:173
			{
			  squote = 1;
   12718:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
   1271f:	eb 24                	jmp    12745 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:175
			}
		      else if (*input == '"')
   12721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12724:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12727:	3c 22                	cmp    al,0x22
   12729:	75 09                	jne    12734 <buildargv+0x18a>
/home/yogi/src/os/chrisOS/src/bishell.c:177
			{
			  dquote = 1;
   1272b:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
   12732:	eb 11                	jmp    12745 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:181
			}
		      else
			{
			  *arg++ = *input;
   12734:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12737:	8d 50 01             	lea    edx,[eax+0x1]
   1273a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1273d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12740:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12743:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:185
                          //printk("Incremented input to %u, char=%u,value='%c'\n",input,*input,*input);
			}
		    }
		  input++;
   12745:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:130
	      argv = nargv;
	      argv[argc] = NULL;
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
	  while (*input != EOS)
   12749:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1274c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1274f:	84 c0                	test   al,al
   12751:	0f 85 06 ff ff ff    	jne    1265d <buildargv+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:188
			}
		    }
		  input++;
		}
	    }
	  *arg = EOS;
   12757:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1275a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:190
          //printk("Found an EOS\n");
          if (copybuf[0]!='\0')
   1275d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12760:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12763:	84 c0                	test   al,al
   12765:	0f 84 82 00 00 00    	je     127ed <buildargv+0x243>
/home/yogi/src/os/chrisOS/src/bishell.c:192
          {
            char* temp=mallocTemp(strlen(copybuf)+1);
   1276b:	83 ec 0c             	sub    esp,0xc
   1276e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12771:	e8 4e 4c 01 00       	call   273c4 <strlen>
   12776:	83 c4 10             	add    esp,0x10
   12779:	83 c0 01             	add    eax,0x1
   1277c:	83 ec 0c             	sub    esp,0xc
   1277f:	50                   	push   eax
   12780:	e8 c1 32 01 00       	call   25a46 <mallocTemp>
   12785:	83 c4 10             	add    esp,0x10
   12788:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:195
            //printk("*malloc'd temp to 0x%08X for %u characters\n",temp,strlen(copybuf));
            //printk("Copied copybuf @ 0x%08X to temp @ 0x%08X\n",copybuf,temp);
            strcpy(temp,copybuf);
   1278b:	83 ec 08             	sub    esp,0x8
   1278e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12791:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   12794:	e8 bb 4b 01 00       	call   27354 <strcpy>
   12799:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:196
            copybuf = (char *) mallocTemp (strlen (input) + 1);
   1279c:	83 ec 0c             	sub    esp,0xc
   1279f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   127a2:	e8 1d 4c 01 00       	call   273c4 <strlen>
   127a7:	83 c4 10             	add    esp,0x10
   127aa:	83 c0 01             	add    eax,0x1
   127ad:	83 ec 0c             	sub    esp,0xc
   127b0:	50                   	push   eax
   127b1:	e8 90 32 01 00       	call   25a46 <mallocTemp>
   127b6:	83 c4 10             	add    esp,0x10
   127b9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:197
            argv[argc] = temp;
   127bc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   127bf:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   127c6:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   127c9:	01 c2                	add    edx,eax
   127cb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   127ce:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/bishell.c:199
            //printk("set argv[%u] to 0x%08X\n",argc,temp);
            argc++;
   127d0:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:200
            argv[argc] = NULL;
   127d4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   127d7:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   127de:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   127e1:	01 d0                	add    eax,edx
   127e3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:201
            input++;
   127e9:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:204
          }
	}
      while (*input != EOS);
   127ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   127f0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127f3:	84 c0                	test   al,al
   127f5:	0f 85 09 fe ff ff    	jne    12604 <buildargv+0x5a>
/home/yogi/src/os/chrisOS/src/bishell.c:207
    }
  //printk("buildargv: exiting\n");
  return (argv);
   127fb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/chrisOS/src/bishell.c:208
}
   127fe:	c9                   	leave  
   127ff:	c3                   	ret    

00012800 <QueryBDF>:
QueryBDF():
/home/yogi/src/os/chrisOS/src/bishell.c:216
{
    displayGDT();
}

void HIGH_CODE_SECTION QueryBDF(char* cmdline)
{
   12800:	55                   	push   ebp
   12801:	89 e5                	mov    ebp,esp
   12803:	56                   	push   esi
   12804:	53                   	push   ebx
   12805:	81 ec 00 14 00 00    	sub    esp,0x1400
/home/yogi/src/os/chrisOS/src/bishell.c:219
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];

    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1280b:	83 ec 04             	sub    esp,0x4
   1280e:	68 00 14 00 00       	push   0x1400
   12813:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12819:	50                   	push   eax
   1281a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1281d:	e8 3e fc ff ff       	call   12460 <parseParamsShell>
   12822:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:221
    //printk("Params: 0=%u, 1=%u, 2=%u",strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
    pciQueryBDF(strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
   12825:	83 ec 04             	sub    esp,0x4
   12828:	6a 10                	push   0x10
   1282a:	6a 00                	push   0x0
   1282c:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12832:	05 00 04 00 00       	add    eax,0x400
   12837:	50                   	push   eax
   12838:	e8 af 4b 01 00       	call   273ec <strtoul>
   1283d:	83 c4 10             	add    esp,0x10
   12840:	0f b6 f0             	movzx  esi,al
   12843:	83 ec 04             	sub    esp,0x4
   12846:	6a 10                	push   0x10
   12848:	6a 00                	push   0x0
   1284a:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12850:	05 00 02 00 00       	add    eax,0x200
   12855:	50                   	push   eax
   12856:	e8 91 4b 01 00       	call   273ec <strtoul>
   1285b:	83 c4 10             	add    esp,0x10
   1285e:	0f b6 d8             	movzx  ebx,al
   12861:	83 ec 04             	sub    esp,0x4
   12864:	6a 10                	push   0x10
   12866:	6a 00                	push   0x0
   12868:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1286e:	50                   	push   eax
   1286f:	e8 78 4b 01 00       	call   273ec <strtoul>
   12874:	83 c4 10             	add    esp,0x10
   12877:	0f b6 c0             	movzx  eax,al
   1287a:	83 ec 04             	sub    esp,0x4
   1287d:	56                   	push   esi
   1287e:	53                   	push   ebx
   1287f:	50                   	push   eax
   12880:	e8 44 3e 00 00       	call   166c9 <pciQueryBDF>
   12885:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:222
}
   12888:	90                   	nop
   12889:	8d 65 f8             	lea    esp,[ebp-0x8]
   1288c:	5b                   	pop    ebx
   1288d:	5e                   	pop    esi
   1288e:	5d                   	pop    ebp
   1288f:	c3                   	ret    

00012890 <dumpP>:
dumpP():
/home/yogi/src/os/chrisOS/src/bishell.c:225

void HIGH_CODE_SECTION dumpP(char* cmdline)
{
   12890:	55                   	push   ebp
   12891:	89 e5                	mov    ebp,esp
   12893:	81 ec 48 16 00 00    	sub    esp,0x1648
/home/yogi/src/os/chrisOS/src/bishell.c:227
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12899:	83 ec 04             	sub    esp,0x4
   1289c:	68 00 14 00 00       	push   0x1400
   128a1:	8d 85 b8 eb ff ff    	lea    eax,[ebp-0x1448]
   128a7:	50                   	push   eax
   128a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   128ab:	e8 b0 fb ff ff       	call   12460 <parseParamsShell>
   128b0:	83 c4 10             	add    esp,0x10
   128b3:	89 45 c8             	mov    DWORD PTR [ebp-0x38],eax
/home/yogi/src/os/chrisOS/src/bishell.c:228
    int lCount=0;
   128b6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:229
    uint32_t lAddress=0;
   128bd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:230
    char lCharType=' ', lCharSize=' ';
   128c4:	c6 45 ef 20          	mov    BYTE PTR [ebp-0x11],0x20
   128c8:	c6 45 ee 20          	mov    BYTE PTR [ebp-0x12],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:231
    int lTemp=0;
   128cc:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:233
    char lTempS[MAX_PARAM_WIDTH];
    bool addrIsVirtual=false;
   128d3:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:237
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
   128d7:	83 ec 04             	sub    esp,0x4
   128da:	68 00 02 00 00       	push   0x200
   128df:	6a 00                	push   0x0
   128e1:	8d 85 b8 e9 ff ff    	lea    eax,[ebp-0x1648]
   128e7:	50                   	push   eax
   128e8:	e8 90 27 01 00       	call   2507d <memset>
   128ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:238
    for (int cnt=0;cnt<=paramCount;cnt++)
   128f0:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   128f7:	e9 15 01 00 00       	jmp    12a11 <dumpP+0x181>
/home/yogi/src/os/chrisOS/src/bishell.c:241
    {
        //printk("Processing parameter %u, value='%s'\n",cnt,params[cnt]);
        if (params[cnt][0]=='v')
   128fc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   128ff:	c1 e0 09             	shl    eax,0x9
   12902:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12905:	01 c8                	add    eax,ecx
   12907:	2d 40 14 00 00       	sub    eax,0x1440
   1290c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1290f:	3c 76                	cmp    al,0x76
   12911:	75 09                	jne    1291c <dumpP+0x8c>
/home/yogi/src/os/chrisOS/src/bishell.c:244
        {
            //printk("Address is virtual parameter found\n");
            addrIsVirtual=true;
   12913:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
   12917:	e9 f1 00 00 00       	jmp    12a0d <dumpP+0x17d>
/home/yogi/src/os/chrisOS/src/bishell.c:246
        }
        else if (params[cnt][0]=='/')
   1291c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1291f:	c1 e0 09             	shl    eax,0x9
   12922:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12925:	01 c8                	add    eax,ecx
   12927:	2d 40 14 00 00       	sub    eax,0x1440
   1292c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1292f:	3c 2f                	cmp    al,0x2f
   12931:	0f 85 af 00 00 00    	jne    129e6 <dumpP+0x156>
/home/yogi/src/os/chrisOS/src/bishell.c:248
        {
            lTemp=1;
   12937:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:249
            while (ISDIGIT(params[cnt][lTemp]))
   1293e:	eb 29                	jmp    12969 <dumpP+0xd9>
/home/yogi/src/os/chrisOS/src/bishell.c:251
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
   12940:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12943:	8d 50 ff             	lea    edx,[eax-0x1]
   12946:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12949:	c1 e0 09             	shl    eax,0x9
   1294c:	8d 4d f8             	lea    ecx,[ebp-0x8]
   1294f:	01 c1                	add    ecx,eax
   12951:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12954:	01 c8                	add    eax,ecx
   12956:	2d 40 14 00 00       	sub    eax,0x1440
   1295b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1295e:	88 84 15 b8 e9 ff ff 	mov    BYTE PTR [ebp+edx*1-0x1648],al
/home/yogi/src/os/chrisOS/src/bishell.c:252
                lTemp++;
   12965:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:249
            addrIsVirtual=true;
        }
        else if (params[cnt][0]=='/')
        {
            lTemp=1;
            while (ISDIGIT(params[cnt][lTemp]))
   12969:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1296c:	c1 e0 09             	shl    eax,0x9
   1296f:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12972:	8d 14 01             	lea    edx,[ecx+eax*1]
   12975:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12978:	01 d0                	add    eax,edx
   1297a:	2d 40 14 00 00       	sub    eax,0x1440
   1297f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12982:	0f be c0             	movsx  eax,al
   12985:	83 e8 30             	sub    eax,0x30
   12988:	83 f8 09             	cmp    eax,0x9
   1298b:	76 b3                	jbe    12940 <dumpP+0xb0>
/home/yogi/src/os/chrisOS/src/bishell.c:254
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
                lTemp++;
            }
            lCount=atoi(lTempS);
   1298d:	83 ec 0c             	sub    esp,0xc
   12990:	8d 85 b8 e9 ff ff    	lea    eax,[ebp-0x1648]
   12996:	50                   	push   eax
   12997:	e8 a9 25 01 00       	call   24f45 <atoi>
   1299c:	83 c4 10             	add    esp,0x10
   1299f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:255
            lCharSize=params[cnt][lTemp++];
   129a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   129a5:	8d 50 01             	lea    edx,[eax+0x1]
   129a8:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   129ab:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   129ae:	c1 e2 09             	shl    edx,0x9
   129b1:	8d 4d f8             	lea    ecx,[ebp-0x8]
   129b4:	01 ca                	add    edx,ecx
   129b6:	01 d0                	add    eax,edx
   129b8:	2d 40 14 00 00       	sub    eax,0x1440
   129bd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129c0:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/chrisOS/src/bishell.c:256
            lCharType=params[cnt][lTemp++];
   129c3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   129c6:	8d 50 01             	lea    edx,[eax+0x1]
   129c9:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   129cc:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   129cf:	c1 e2 09             	shl    edx,0x9
   129d2:	8d 4d f8             	lea    ecx,[ebp-0x8]
   129d5:	01 ca                	add    edx,ecx
   129d7:	01 d0                	add    eax,edx
   129d9:	2d 40 14 00 00       	sub    eax,0x1440
   129de:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129e1:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
   129e4:	eb 27                	jmp    12a0d <dumpP+0x17d>
/home/yogi/src/os/chrisOS/src/bishell.c:258
        }
        else if (lAddress==0)
   129e6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   129ea:	75 21                	jne    12a0d <dumpP+0x17d>
/home/yogi/src/os/chrisOS/src/bishell.c:260
        {
            lAddress=strtoul(params[cnt],0,16);
   129ec:	8d 85 b8 eb ff ff    	lea    eax,[ebp-0x1448]
   129f2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   129f5:	c1 e2 09             	shl    edx,0x9
   129f8:	01 d0                	add    eax,edx
   129fa:	83 ec 04             	sub    esp,0x4
   129fd:	6a 10                	push   0x10
   129ff:	6a 00                	push   0x0
   12a01:	50                   	push   eax
   12a02:	e8 e5 49 01 00       	call   273ec <strtoul>
   12a07:	83 c4 10             	add    esp,0x10
   12a0a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:238 (discriminator 2)
    bool addrIsVirtual=false;
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
    for (int cnt=0;cnt<=paramCount;cnt++)
   12a0d:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:238 (discriminator 1)
   12a11:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12a14:	3b 45 c8             	cmp    eax,DWORD PTR [ebp-0x38]
   12a17:	0f 8e df fe ff ff    	jle    128fc <dumpP+0x6c>
/home/yogi/src/os/chrisOS/src/bishell.c:269
//    {
//        printk("Converted 0x%08X to ",lAddress);
//        lAddress=__pa(lAddress);
//        printk("%0x%08X\n", lAddress);
//    }
    if (lCount>65535)
   12a1d:	81 7d f4 ff ff 00 00 	cmp    DWORD PTR [ebp-0xc],0xffff
   12a24:	7e 18                	jle    12a3e <dumpP+0x1ae>
/home/yogi/src/os/chrisOS/src/bishell.c:271
    {
        printk("Error: Count is too large (%u), max is 500, can't dump", lCount);
   12a26:	83 ec 08             	sub    esp,0x8
   12a29:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12a2c:	68 bc 5d 04 00       	push   0x45dbc
   12a31:	e8 bd 47 01 00       	call   271f3 <printk>
   12a36:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:272
        return;
   12a39:	e9 de 04 00 00       	jmp    12f1c <pEnableJmp+0x28>
/home/yogi/src/os/chrisOS/src/bishell.c:274
    }
    if (lCharSize!='b' && lCharSize!='h' && lCharSize!='w' && lCharSize!='d')
   12a3e:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12a42:	74 2c                	je     12a70 <dumpP+0x1e0>
/home/yogi/src/os/chrisOS/src/bishell.c:274 (discriminator 1)
   12a44:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12a48:	74 26                	je     12a70 <dumpP+0x1e0>
/home/yogi/src/os/chrisOS/src/bishell.c:274 (discriminator 2)
   12a4a:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12a4e:	74 20                	je     12a70 <dumpP+0x1e0>
/home/yogi/src/os/chrisOS/src/bishell.c:274 (discriminator 3)
   12a50:	80 7d ee 64          	cmp    BYTE PTR [ebp-0x12],0x64
   12a54:	74 1a                	je     12a70 <dumpP+0x1e0>
/home/yogi/src/os/chrisOS/src/bishell.c:276
    {
        printk("Error: Character size (%c) must be in bhwd", lCharSize);
   12a56:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12a5a:	83 ec 08             	sub    esp,0x8
   12a5d:	50                   	push   eax
   12a5e:	68 f4 5d 04 00       	push   0x45df4
   12a63:	e8 8b 47 01 00       	call   271f3 <printk>
   12a68:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:277
        return;
   12a6b:	e9 ac 04 00 00       	jmp    12f1c <pEnableJmp+0x28>
/home/yogi/src/os/chrisOS/src/bishell.c:279
    }
    if (lCharType!='x' && lCharType!='c' && lCharType!='e')
   12a70:	80 7d ef 78          	cmp    BYTE PTR [ebp-0x11],0x78
   12a74:	74 26                	je     12a9c <dumpP+0x20c>
/home/yogi/src/os/chrisOS/src/bishell.c:279 (discriminator 1)
   12a76:	80 7d ef 63          	cmp    BYTE PTR [ebp-0x11],0x63
   12a7a:	74 20                	je     12a9c <dumpP+0x20c>
/home/yogi/src/os/chrisOS/src/bishell.c:279 (discriminator 2)
   12a7c:	80 7d ef 65          	cmp    BYTE PTR [ebp-0x11],0x65
   12a80:	74 1a                	je     12a9c <dumpP+0x20c>
/home/yogi/src/os/chrisOS/src/bishell.c:281
    {
        printk("Error: Character type (%c) must be in xce", lCharType);
   12a82:	0f be 45 ef          	movsx  eax,BYTE PTR [ebp-0x11]
   12a86:	83 ec 08             	sub    esp,0x8
   12a89:	50                   	push   eax
   12a8a:	68 20 5e 04 00       	push   0x45e20
   12a8f:	e8 5f 47 01 00       	call   271f3 <printk>
   12a94:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:282
        return;
   12a97:	e9 80 04 00 00       	jmp    12f1c <pEnableJmp+0x28>
/home/yogi/src/os/chrisOS/src/bishell.c:289
/*    if ((lAddress>kE820MemoryBytes || lAddress+lCount>kE820MemoryBytes) && (!addrIsVirtual))
    {
        printk("Error: Requested address (0x%08X) or address+count (0x%08X) > memory size ()", lAddress, lAddress+lCount);
        return;
    }*/
    printk("dump");
   12a9c:	83 ec 0c             	sub    esp,0xc
   12a9f:	68 4a 5e 04 00       	push   0x45e4a
   12aa4:	e8 4a 47 01 00       	call   271f3 <printk>
   12aa9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:290
    if (addrIsVirtual)
   12aac:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   12ab0:	74 12                	je     12ac4 <dumpP+0x234>
/home/yogi/src/os/chrisOS/src/bishell.c:291
        printk("V");
   12ab2:	83 ec 0c             	sub    esp,0xc
   12ab5:	68 4f 5e 04 00       	push   0x45e4f
   12aba:	e8 34 47 01 00       	call   271f3 <printk>
   12abf:	83 c4 10             	add    esp,0x10
   12ac2:	eb 10                	jmp    12ad4 <dumpP+0x244>
/home/yogi/src/os/chrisOS/src/bishell.c:293
    else
        printk("P");
   12ac4:	83 ec 0c             	sub    esp,0xc
   12ac7:	68 51 5e 04 00       	push   0x45e51
   12acc:	e8 22 47 01 00       	call   271f3 <printk>
   12ad1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:294
    printk(": Dumping %u %c (%c) from 0x%08X\n", lCount, lCharSize , lCharType, lAddress);
   12ad4:	0f be 55 ef          	movsx  edx,BYTE PTR [ebp-0x11]
   12ad8:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12adc:	83 ec 0c             	sub    esp,0xc
   12adf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12ae2:	52                   	push   edx
   12ae3:	50                   	push   eax
   12ae4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12ae7:	68 54 5e 04 00       	push   0x45e54
   12aec:	e8 02 47 01 00       	call   271f3 <printk>
   12af1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:295
    uint8_t* mem=(uint8_t*)lAddress;
   12af4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12af7:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:296
    uint16_t* memw=(uint16_t*)lAddress;
   12afa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12afd:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
/home/yogi/src/os/chrisOS/src/bishell.c:297
    uint32_t* memd=(uint32_t*)lAddress;
   12b00:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12b03:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
/home/yogi/src/os/chrisOS/src/bishell.c:298
    uint32_t* memq=(uint32_t*)lAddress;
   12b06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12b09:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
/home/yogi/src/os/chrisOS/src/bishell.c:299
    int lineCount=0;
   12b0c:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:301
    int lEntriesPerLine;
    if (lCharSize=='b')
   12b13:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12b17:	75 07                	jne    12b20 <dumpP+0x290>
/home/yogi/src/os/chrisOS/src/bishell.c:302
        lEntriesPerLine=15;
   12b19:	c7 45 d8 0f 00 00 00 	mov    DWORD PTR [ebp-0x28],0xf
/home/yogi/src/os/chrisOS/src/bishell.c:303
    if (lCharSize=='h')
   12b20:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12b24:	75 09                	jne    12b2f <dumpP+0x29f>
/home/yogi/src/os/chrisOS/src/bishell.c:304
        lEntriesPerLine=8;
   12b26:	c7 45 d8 08 00 00 00 	mov    DWORD PTR [ebp-0x28],0x8
   12b2d:	eb 16                	jmp    12b45 <dumpP+0x2b5>
/home/yogi/src/os/chrisOS/src/bishell.c:305
    else if (lCharSize=='w')
   12b2f:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12b33:	75 09                	jne    12b3e <dumpP+0x2ae>
/home/yogi/src/os/chrisOS/src/bishell.c:306
        lEntriesPerLine=4;
   12b35:	c7 45 d8 04 00 00 00 	mov    DWORD PTR [ebp-0x28],0x4
   12b3c:	eb 07                	jmp    12b45 <dumpP+0x2b5>
/home/yogi/src/os/chrisOS/src/bishell.c:308
    else
        lEntriesPerLine=3;
   12b3e:	c7 45 d8 03 00 00 00 	mov    DWORD PTR [ebp-0x28],0x3
/home/yogi/src/os/chrisOS/src/bishell.c:309
    lTemp=0; //column
   12b45:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:310
    if (!addrIsVirtual)
   12b4c:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12b50:	83 f0 01             	xor    eax,0x1
   12b53:	84 c0                	test   al,al
   12b55:	74 27                	je     12b7e <dumpP+0x2ee>
/home/yogi/src/os/chrisOS/src/bishell.c:317
        //NOTE: Have to include SS here, as code below uses ebp references which implies SS
//        uint32_t cr0=0;
//        __asm__("mov %0,cs\n\cli\nhlt"::"r" (cr0));
//          printk("Paging disabled, CR==0x%08X",cr0);
        
        SWITCH_TO_NON_KERNEL_DATA_AND_STACK
   12b57:	50                   	push   eax
   12b58:	b8 18 00 00 00       	mov    eax,0x18
   12b5d:	8e d8                	mov    ds,eax
   12b5f:	8e c0                	mov    es,eax
   12b61:	8e e0                	mov    fs,eax
   12b63:	8e e8                	mov    gs,eax
   12b65:	8e d0                	mov    ss,eax
   12b67:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:318
        printk("Switching to 0 based GDT entry for DS,ES,FS,GS,SS\n");
   12b68:	83 ec 0c             	sub    esp,0xc
   12b6b:	68 78 5e 04 00       	push   0x45e78
   12b70:	e8 7e 46 01 00       	call   271f3 <printk>
   12b75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:319
        __asm__("cli\n");
   12b78:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/bishell.c:320
        doNonPagingJump();
   12b79:	e8 c0 e7 fe ff       	call   133e <doNonPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:322
    }
    if (lCharSize=='b')
   12b7e:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12b82:	0f 85 f6 01 00 00    	jne    12d7e <dumpP+0x4ee>
/home/yogi/src/os/chrisOS/src/bishell.c:324
    {
        printk("%08X:\t", &mem[0]);
   12b88:	83 ec 08             	sub    esp,0x8
   12b8b:	ff 75 c4             	push   DWORD PTR [ebp-0x3c]
   12b8e:	68 ab 5e 04 00       	push   0x45eab
   12b93:	e8 5b 46 01 00       	call   271f3 <printk>
   12b98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:325
        for (int cnt=0;cnt<lCount;cnt++)
   12b9b:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
   12ba2:	e9 c9 01 00 00       	jmp    12d70 <dumpP+0x4e0>
/home/yogi/src/os/chrisOS/src/bishell.c:328
        {
            //After every 16 bytes, print the character values, a newline, and the start address of the next 16 bytes
            if (lTemp==16)
   12ba7:	83 7d e8 10          	cmp    DWORD PTR [ebp-0x18],0x10
   12bab:	0f 85 81 01 00 00    	jne    12d32 <dumpP+0x4a2>
/home/yogi/src/os/chrisOS/src/bishell.c:330
            {
                puts("\t");
   12bb1:	83 ec 0c             	sub    esp,0xc
   12bb4:	68 b2 5e 04 00       	push   0x45eb2
   12bb9:	e8 b4 54 00 00       	call   18072 <puts>
   12bbe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:331
                for (int cnt2=0;cnt2<16;cnt2++)
   12bc1:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
   12bc8:	e9 05 01 00 00       	jmp    12cd2 <dumpP+0x442>
/home/yogi/src/os/chrisOS/src/bishell.c:333
                {
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
   12bcd:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12bd3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bd6:	01 d0                	add    eax,edx
   12bd8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12bdb:	83 c8 20             	or     eax,0x20
   12bde:	0f be c0             	movsx  eax,al
   12be1:	83 e8 61             	sub    eax,0x61
   12be4:	83 f8 19             	cmp    eax,0x19
   12be7:	0f 86 ad 00 00 00    	jbe    12c9a <dumpP+0x40a>
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 1)
   12bed:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12bf3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12bf6:	01 d0                	add    eax,edx
   12bf8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12bfb:	0f be c0             	movsx  eax,al
   12bfe:	83 e8 30             	sub    eax,0x30
   12c01:	83 f8 09             	cmp    eax,0x9
   12c04:	0f 86 90 00 00 00    	jbe    12c9a <dumpP+0x40a>
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 2)
   12c0a:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c10:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c13:	01 d0                	add    eax,edx
   12c15:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c18:	3c 1f                	cmp    al,0x1f
   12c1a:	7e 12                	jle    12c2e <dumpP+0x39e>
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 3)
   12c1c:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c22:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c25:	01 d0                	add    eax,edx
   12c27:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c2a:	3c 2f                	cmp    al,0x2f
   12c2c:	7e 6c                	jle    12c9a <dumpP+0x40a>
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 5)
   12c2e:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c34:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c37:	01 d0                	add    eax,edx
   12c39:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c3c:	3c 7a                	cmp    al,0x7a
   12c3e:	7e 12                	jle    12c52 <dumpP+0x3c2>
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 6)
   12c40:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c46:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c49:	01 d0                	add    eax,edx
   12c4b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c4e:	3c 7f                	cmp    al,0x7f
   12c50:	75 48                	jne    12c9a <dumpP+0x40a>
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 8)
   12c52:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c58:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c5b:	01 d0                	add    eax,edx
   12c5d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c60:	3c 5a                	cmp    al,0x5a
   12c62:	7e 12                	jle    12c76 <dumpP+0x3e6>
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 9)
   12c64:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c6a:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c6d:	01 d0                	add    eax,edx
   12c6f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c72:	3c 60                	cmp    al,0x60
   12c74:	7e 24                	jle    12c9a <dumpP+0x40a>
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 11)
   12c76:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c7c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c7f:	01 d0                	add    eax,edx
   12c81:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c84:	3c 39                	cmp    al,0x39
   12c86:	7e 36                	jle    12cbe <dumpP+0x42e>
/home/yogi/src/os/chrisOS/src/bishell.c:333 (discriminator 12)
   12c88:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12c8e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12c91:	01 d0                	add    eax,edx
   12c93:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12c96:	3c 40                	cmp    al,0x40
   12c98:	7f 24                	jg     12cbe <dumpP+0x42e>
/home/yogi/src/os/chrisOS/src/bishell.c:334
                        printk("%c",lTempS[cnt2]);
   12c9a:	8d 95 b8 e9 ff ff    	lea    edx,[ebp-0x1648]
   12ca0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12ca3:	01 d0                	add    eax,edx
   12ca5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12ca8:	0f be c0             	movsx  eax,al
   12cab:	83 ec 08             	sub    esp,0x8
   12cae:	50                   	push   eax
   12caf:	68 b4 5e 04 00       	push   0x45eb4
   12cb4:	e8 3a 45 01 00       	call   271f3 <printk>
   12cb9:	83 c4 10             	add    esp,0x10
   12cbc:	eb 10                	jmp    12cce <dumpP+0x43e>
/home/yogi/src/os/chrisOS/src/bishell.c:336
                    else
                        puts(".");
   12cbe:	83 ec 0c             	sub    esp,0xc
   12cc1:	68 b7 5e 04 00       	push   0x45eb7
   12cc6:	e8 a7 53 00 00       	call   18072 <puts>
   12ccb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:331 (discriminator 2)
        {
            //After every 16 bytes, print the character values, a newline, and the start address of the next 16 bytes
            if (lTemp==16)
            {
                puts("\t");
                for (int cnt2=0;cnt2<16;cnt2++)
   12cce:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:331 (discriminator 1)
   12cd2:	83 7d d0 0f          	cmp    DWORD PTR [ebp-0x30],0xf
   12cd6:	0f 8e f1 fe ff ff    	jle    12bcd <dumpP+0x33d>
/home/yogi/src/os/chrisOS/src/bishell.c:338
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
                        printk("%c",lTempS[cnt2]);
                    else
                        puts(".");
                }
                puts("\n");
   12cdc:	83 ec 0c             	sub    esp,0xc
   12cdf:	68 b9 5e 04 00       	push   0x45eb9
   12ce4:	e8 89 53 00 00       	call   18072 <puts>
   12ce9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:339
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12cec:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
   12cf0:	83 7d dc 31          	cmp    DWORD PTR [ebp-0x24],0x31
   12cf4:	75 1c                	jne    12d12 <dumpP+0x482>
/home/yogi/src/os/chrisOS/src/bishell.c:341
                {
                    if (pauseDisplay(true))
   12cf6:	83 ec 0c             	sub    esp,0xc
   12cf9:	6a 01                	push   0x1
   12cfb:	e8 c6 2c 01 00       	call   259c6 <pauseDisplay>
   12d00:	83 c4 10             	add    esp,0x10
   12d03:	84 c0                	test   al,al
   12d05:	0f 85 88 00 00 00    	jne    12d93 <dumpP+0x503>
/home/yogi/src/os/chrisOS/src/bishell.c:343
                        break;
                    lineCount=0;
   12d0b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:345
                }
                printk("%08X:\t", &mem[cnt]);
   12d12:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   12d15:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   12d18:	01 d0                	add    eax,edx
   12d1a:	83 ec 08             	sub    esp,0x8
   12d1d:	50                   	push   eax
   12d1e:	68 ab 5e 04 00       	push   0x45eab
   12d23:	e8 cb 44 01 00       	call   271f3 <printk>
   12d28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:346
                lTemp=0;
   12d2b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:348 (discriminator 2)
            }
            printk("%02X ",mem[cnt]);
   12d32:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   12d35:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   12d38:	01 d0                	add    eax,edx
   12d3a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d3d:	0f b6 c0             	movzx  eax,al
   12d40:	83 ec 08             	sub    esp,0x8
   12d43:	50                   	push   eax
   12d44:	68 bb 5e 04 00       	push   0x45ebb
   12d49:	e8 a5 44 01 00       	call   271f3 <printk>
   12d4e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:349 (discriminator 2)
            lTempS[lTemp++]=mem[cnt];
   12d51:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12d54:	8d 50 01             	lea    edx,[eax+0x1]
   12d57:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12d5a:	8b 4d d4             	mov    ecx,DWORD PTR [ebp-0x2c]
   12d5d:	8b 55 c4             	mov    edx,DWORD PTR [ebp-0x3c]
   12d60:	01 ca                	add    edx,ecx
   12d62:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12d65:	88 94 05 b8 e9 ff ff 	mov    BYTE PTR [ebp+eax*1-0x1648],dl
/home/yogi/src/os/chrisOS/src/bishell.c:325 (discriminator 2)
        doNonPagingJump();
    }
    if (lCharSize=='b')
    {
        printk("%08X:\t", &mem[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12d6c:	83 45 d4 01          	add    DWORD PTR [ebp-0x2c],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:325 (discriminator 1)
   12d70:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   12d73:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12d76:	0f 8c 2b fe ff ff    	jl     12ba7 <dumpP+0x317>
   12d7c:	eb 16                	jmp    12d94 <dumpP+0x504>
/home/yogi/src/os/chrisOS/src/bishell.c:353
            printk("%02X ",mem[cnt]);
            lTempS[lTemp++]=mem[cnt];
        }
    }
    else
        printk("%08X:", &memw[0]);
   12d7e:	83 ec 08             	sub    esp,0x8
   12d81:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
   12d84:	68 c1 5e 04 00       	push   0x45ec1
   12d89:	e8 65 44 01 00       	call   271f3 <printk>
   12d8e:	83 c4 10             	add    esp,0x10
   12d91:	eb 01                	jmp    12d94 <dumpP+0x504>
/home/yogi/src/os/chrisOS/src/bishell.c:342
                }
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12d93:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:354
            lTempS[lTemp++]=mem[cnt];
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12d94:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
   12d9b:	e9 0f 01 00 00       	jmp    12eaf <dumpP+0x61f>
/home/yogi/src/os/chrisOS/src/bishell.c:356
        {
            if (lTemp==lEntriesPerLine)
   12da0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12da3:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   12da6:	0f 85 a9 00 00 00    	jne    12e55 <dumpP+0x5c5>
/home/yogi/src/os/chrisOS/src/bishell.c:358
            {
                puts("\n");
   12dac:	83 ec 0c             	sub    esp,0xc
   12daf:	68 b9 5e 04 00       	push   0x45eb9
   12db4:	e8 b9 52 00 00       	call   18072 <puts>
   12db9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:359
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12dbc:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
   12dc0:	83 7d dc 31          	cmp    DWORD PTR [ebp-0x24],0x31
   12dc4:	75 1c                	jne    12de2 <dumpP+0x552>
/home/yogi/src/os/chrisOS/src/bishell.c:361
                {
                    if (pauseDisplay(true))
   12dc6:	83 ec 0c             	sub    esp,0xc
   12dc9:	6a 01                	push   0x1
   12dcb:	e8 f6 2b 01 00       	call   259c6 <pauseDisplay>
   12dd0:	83 c4 10             	add    esp,0x10
   12dd3:	84 c0                	test   al,al
   12dd5:	0f 85 e2 00 00 00    	jne    12ebd <dumpP+0x62d>
/home/yogi/src/os/chrisOS/src/bishell.c:363
                        break;
                    lineCount=0;
   12ddb:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:365
                }
                lTemp=0;
   12de2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:366
                if (lCharSize=='h')
   12de9:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12ded:	75 1e                	jne    12e0d <dumpP+0x57d>
/home/yogi/src/os/chrisOS/src/bishell.c:367
                    printk("%08X:", &memw[cnt]);
   12def:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12df2:	8d 14 00             	lea    edx,[eax+eax*1]
   12df5:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12df8:	01 d0                	add    eax,edx
   12dfa:	83 ec 08             	sub    esp,0x8
   12dfd:	50                   	push   eax
   12dfe:	68 c1 5e 04 00       	push   0x45ec1
   12e03:	e8 eb 43 01 00       	call   271f3 <printk>
   12e08:	83 c4 10             	add    esp,0x10
   12e0b:	eb 48                	jmp    12e55 <dumpP+0x5c5>
/home/yogi/src/os/chrisOS/src/bishell.c:368
                else if (lCharSize=='w')
   12e0d:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12e11:	75 22                	jne    12e35 <dumpP+0x5a5>
/home/yogi/src/os/chrisOS/src/bishell.c:369
                    printk("%08X:", &memd[cnt]);
   12e13:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e16:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12e1d:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12e20:	01 d0                	add    eax,edx
   12e22:	83 ec 08             	sub    esp,0x8
   12e25:	50                   	push   eax
   12e26:	68 c1 5e 04 00       	push   0x45ec1
   12e2b:	e8 c3 43 01 00       	call   271f3 <printk>
   12e30:	83 c4 10             	add    esp,0x10
   12e33:	eb 20                	jmp    12e55 <dumpP+0x5c5>
/home/yogi/src/os/chrisOS/src/bishell.c:371
                else
                    printk("%08X:", &memq[cnt]);
   12e35:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e38:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12e3f:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   12e42:	01 d0                	add    eax,edx
   12e44:	83 ec 08             	sub    esp,0x8
   12e47:	50                   	push   eax
   12e48:	68 c1 5e 04 00       	push   0x45ec1
   12e4d:	e8 a1 43 01 00       	call   271f3 <printk>
   12e52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:373
            }
            if (lCharSize=='h')
   12e55:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12e59:	75 24                	jne    12e7f <dumpP+0x5ef>
/home/yogi/src/os/chrisOS/src/bishell.c:374
                printk("%04X ",memw[cnt]);
   12e5b:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e5e:	8d 14 00             	lea    edx,[eax+eax*1]
   12e61:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12e64:	01 d0                	add    eax,edx
   12e66:	0f b7 00             	movzx  eax,WORD PTR [eax]
   12e69:	0f b7 c0             	movzx  eax,ax
   12e6c:	83 ec 08             	sub    esp,0x8
   12e6f:	50                   	push   eax
   12e70:	68 c7 5e 04 00       	push   0x45ec7
   12e75:	e8 79 43 01 00       	call   271f3 <printk>
   12e7a:	83 c4 10             	add    esp,0x10
   12e7d:	eb 28                	jmp    12ea7 <dumpP+0x617>
/home/yogi/src/os/chrisOS/src/bishell.c:375
            else if (lCharSize=='w')
   12e7f:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12e83:	75 22                	jne    12ea7 <dumpP+0x617>
/home/yogi/src/os/chrisOS/src/bishell.c:376
                printk("%08X ", memd[cnt]);
   12e85:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12e88:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12e8f:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12e92:	01 d0                	add    eax,edx
   12e94:	8b 00                	mov    eax,DWORD PTR [eax]
   12e96:	83 ec 08             	sub    esp,0x8
   12e99:	50                   	push   eax
   12e9a:	68 cd 5e 04 00       	push   0x45ecd
   12e9f:	e8 4f 43 01 00       	call   271f3 <printk>
   12ea4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:377 (discriminator 2)
            lTemp++;
   12ea7:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:354 (discriminator 2)
            lTempS[lTemp++]=mem[cnt];
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12eab:	83 45 cc 01          	add    DWORD PTR [ebp-0x34],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:354 (discriminator 1)
   12eaf:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12eb2:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12eb5:	0f 8c e5 fe ff ff    	jl     12da0 <dumpP+0x510>
   12ebb:	eb 01                	jmp    12ebe <dumpP+0x62e>
/home/yogi/src/os/chrisOS/src/bishell.c:362
            {
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12ebd:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:379
                printk("%04X ",memw[cnt]);
            else if (lCharSize=='w')
                printk("%08X ", memd[cnt]);
            lTemp++;
        }
    puts("\n");
   12ebe:	83 ec 0c             	sub    esp,0xc
   12ec1:	68 b9 5e 04 00       	push   0x45eb9
   12ec6:	e8 a7 51 00 00       	call   18072 <puts>
   12ecb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:380
    if (!addrIsVirtual)
   12ece:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12ed2:	83 f0 01             	xor    eax,0x1
   12ed5:	84 c0                	test   al,al
   12ed7:	74 43                	je     12f1c <pEnableJmp+0x28>
/home/yogi/src/os/chrisOS/src/bishell.c:382
    {
        __asm__("push eax\nmov eax,cr0\n or eax,0x80000000\n mov cr0,eax\nmov eax,0\nmov cr3,eax\nljmp 0x20:pEnableJmp\npEnableJmp:pop eax\n");
   12ed9:	50                   	push   eax
   12eda:	0f 20 c0             	mov    eax,cr0
   12edd:	0d 00 00 00 80       	or     eax,0x80000000
   12ee2:	0f 22 c0             	mov    cr0,eax
   12ee5:	b8 00 00 00 00       	mov    eax,0x0
   12eea:	0f 22 d8             	mov    cr3,eax
   12eed:	ea f4 2e 01 00 20 00 	jmp    0x20:0x12ef4

00012ef4 <pEnableJmp>:
   12ef4:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:383
       doPagingJump();
   12ef5:	e8 2d e4 fe ff       	call   1327 <doPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:384
        SWITCH_TO_KERNEL_DATA_AND_STACK
   12efa:	50                   	push   eax
   12efb:	b8 10 00 00 00       	mov    eax,0x10
   12f00:	8e d8                	mov    ds,eax
   12f02:	8e c0                	mov    es,eax
   12f04:	8e e0                	mov    fs,eax
   12f06:	8e e8                	mov    gs,eax
   12f08:	8e d0                	mov    ss,eax
   12f0a:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:385
        printk("Paging enabled");
   12f0b:	83 ec 0c             	sub    esp,0xc
   12f0e:	68 d3 5e 04 00       	push   0x45ed3
   12f13:	e8 db 42 01 00       	call   271f3 <printk>
   12f18:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:386
        __asm__("sti\n");
   12f1b:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/bishell.c:388
    }
}
   12f1c:	c9                   	leave  
   12f1d:	c3                   	ret    

00012f1e <dumpV>:
dumpV():
/home/yogi/src/os/chrisOS/src/bishell.c:391

void HIGH_CODE_SECTION dumpV(char* cmdline)
{
   12f1e:	55                   	push   ebp
   12f1f:	89 e5                	mov    ebp,esp
   12f21:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/bishell.c:392
    strcat(cmdline," v");
   12f24:	83 ec 08             	sub    esp,0x8
   12f27:	68 e2 5e 04 00       	push   0x45ee2
   12f2c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12f2f:	e8 38 43 01 00       	call   2726c <strcat>
   12f34:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:393
    dumpP(cmdline);
   12f37:	83 ec 0c             	sub    esp,0xc
   12f3a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12f3d:	e8 4e f9 ff ff       	call   12890 <dumpP>
   12f42:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:394
}
   12f45:	90                   	nop
   12f46:	c9                   	leave  
   12f47:	c3                   	ret    

00012f48 <helpMe>:
helpMe():
/home/yogi/src/os/chrisOS/src/bishell.c:397

void HIGH_CODE_SECTION helpMe()
{
   12f48:	55                   	push   ebp
   12f49:	89 e5                	mov    ebp,esp
   12f4b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:398
    printk("Help:\n");
   12f4e:	83 ec 0c             	sub    esp,0xc
   12f51:	68 e5 5e 04 00       	push   0x45ee5
   12f56:	e8 98 42 01 00       	call   271f3 <printk>
   12f5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:399
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   12f5e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12f65:	eb 30                	jmp    12f97 <helpMe+0x4f>
/home/yogi/src/os/chrisOS/src/bishell.c:400 (discriminator 3)
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
   12f67:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12f6a:	c1 e0 04             	shl    eax,0x4
   12f6d:	05 04 88 02 00       	add    eax,0x28804
   12f72:	8b 10                	mov    edx,DWORD PTR [eax]
   12f74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12f77:	c1 e0 04             	shl    eax,0x4
   12f7a:	05 00 88 02 00       	add    eax,0x28800
   12f7f:	8b 00                	mov    eax,DWORD PTR [eax]
   12f81:	83 ec 04             	sub    esp,0x4
   12f84:	52                   	push   edx
   12f85:	50                   	push   eax
   12f86:	68 ec 5e 04 00       	push   0x45eec
   12f8b:	e8 63 42 01 00       	call   271f3 <printk>
   12f90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:399 (discriminator 3)
}

void HIGH_CODE_SECTION helpMe()
{
    printk("Help:\n");
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   12f93:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:399 (discriminator 1)
   12f97:	83 7d f4 1b          	cmp    DWORD PTR [ebp-0xc],0x1b
   12f9b:	76 ca                	jbe    12f67 <helpMe+0x1f>
/home/yogi/src/os/chrisOS/src/bishell.c:401
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
}
   12f9d:	90                   	nop
   12f9e:	c9                   	leave  
   12f9f:	c3                   	ret    

00012fa0 <inPortB>:
inPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:404

void HIGH_CODE_SECTION inPortB(char* cmdline)
{
   12fa0:	55                   	push   ebp
   12fa1:	89 e5                	mov    ebp,esp
   12fa3:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:406
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12fa9:	83 ec 04             	sub    esp,0x4
   12fac:	68 00 14 00 00       	push   0x1400
   12fb1:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12fb7:	50                   	push   eax
   12fb8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12fbb:	e8 a0 f4 ff ff       	call   12460 <parseParamsShell>
   12fc0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:408
   
   uint8_t inVal=inb(strtoul(params[0],0,16));
   12fc3:	83 ec 04             	sub    esp,0x4
   12fc6:	6a 10                	push   0x10
   12fc8:	6a 00                	push   0x0
   12fca:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   12fd0:	50                   	push   eax
   12fd1:	e8 16 44 01 00       	call   273ec <strtoul>
   12fd6:	83 c4 10             	add    esp,0x10
   12fd9:	0f b7 c0             	movzx  eax,ax
   12fdc:	83 ec 0c             	sub    esp,0xc
   12fdf:	50                   	push   eax
   12fe0:	e8 18 f2 ff ff       	call   121fd <inb>
   12fe5:	83 c4 10             	add    esp,0x10
   12fe8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:409
   printk("0x%02X\n",inVal);
   12feb:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   12fef:	83 ec 08             	sub    esp,0x8
   12ff2:	50                   	push   eax
   12ff3:	68 f5 5e 04 00       	push   0x45ef5
   12ff8:	e8 f6 41 01 00       	call   271f3 <printk>
   12ffd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:410
}
   13000:	90                   	nop
   13001:	c9                   	leave  
   13002:	c3                   	ret    

00013003 <inPortW>:
inPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:413

void HIGH_CODE_SECTION inPortW(char* cmdline)
{
   13003:	55                   	push   ebp
   13004:	89 e5                	mov    ebp,esp
   13006:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:415
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1300c:	83 ec 04             	sub    esp,0x4
   1300f:	68 00 14 00 00       	push   0x1400
   13014:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   1301a:	50                   	push   eax
   1301b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1301e:	e8 3d f4 ff ff       	call   12460 <parseParamsShell>
   13023:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:417
   
   uint8_t inVal=inw(strtoul(params[0],0,16));
   13026:	83 ec 04             	sub    esp,0x4
   13029:	6a 10                	push   0x10
   1302b:	6a 00                	push   0x0
   1302d:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   13033:	50                   	push   eax
   13034:	e8 b3 43 01 00       	call   273ec <strtoul>
   13039:	83 c4 10             	add    esp,0x10
   1303c:	0f b7 c0             	movzx  eax,ax
   1303f:	83 ec 0c             	sub    esp,0xc
   13042:	50                   	push   eax
   13043:	e8 d2 f1 ff ff       	call   1221a <inw>
   13048:	83 c4 10             	add    esp,0x10
   1304b:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:418
   printk("0x%04X\n",inVal);
   1304e:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   13052:	83 ec 08             	sub    esp,0x8
   13055:	50                   	push   eax
   13056:	68 fd 5e 04 00       	push   0x45efd
   1305b:	e8 93 41 01 00       	call   271f3 <printk>
   13060:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:419
}
   13063:	90                   	nop
   13064:	c9                   	leave  
   13065:	c3                   	ret    

00013066 <inPortD>:
inPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:422

void HIGH_CODE_SECTION inPortD(char* cmdline)
{
   13066:	55                   	push   ebp
   13067:	89 e5                	mov    ebp,esp
   13069:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:424
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1306f:	83 ec 04             	sub    esp,0x4
   13072:	68 00 14 00 00       	push   0x1400
   13077:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   1307d:	50                   	push   eax
   1307e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13081:	e8 da f3 ff ff       	call   12460 <parseParamsShell>
   13086:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:426
   
   uint8_t inVal=inl(strtoul(params[0],0,16));
   13089:	83 ec 04             	sub    esp,0x4
   1308c:	6a 10                	push   0x10
   1308e:	6a 00                	push   0x0
   13090:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   13096:	50                   	push   eax
   13097:	e8 50 43 01 00       	call   273ec <strtoul>
   1309c:	83 c4 10             	add    esp,0x10
   1309f:	0f b7 c0             	movzx  eax,ax
   130a2:	83 ec 0c             	sub    esp,0xc
   130a5:	50                   	push   eax
   130a6:	e8 8e f1 ff ff       	call   12239 <inl>
   130ab:	83 c4 10             	add    esp,0x10
   130ae:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:427
   printk("0x%08X\n",inVal);
   130b1:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   130b5:	83 ec 08             	sub    esp,0x8
   130b8:	50                   	push   eax
   130b9:	68 05 5f 04 00       	push   0x45f05
   130be:	e8 30 41 01 00       	call   271f3 <printk>
   130c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:428
}
   130c6:	90                   	nop
   130c7:	c9                   	leave  
   130c8:	c3                   	ret    

000130c9 <outPortB>:
outPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:431

void HIGH_CODE_SECTION outPortB(char* cmdline)
{
   130c9:	55                   	push   ebp
   130ca:	89 e5                	mov    ebp,esp
   130cc:	53                   	push   ebx
   130cd:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:433
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   130d3:	83 ec 04             	sub    esp,0x4
   130d6:	68 00 14 00 00       	push   0x1400
   130db:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   130e1:	50                   	push   eax
   130e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   130e5:	e8 76 f3 ff ff       	call   12460 <parseParamsShell>
   130ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:435
   
   outb(strtoul(params[0],0,16),strtoul(params[1],0,16));
   130ed:	83 ec 04             	sub    esp,0x4
   130f0:	6a 10                	push   0x10
   130f2:	6a 00                	push   0x0
   130f4:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   130fa:	05 00 02 00 00       	add    eax,0x200
   130ff:	50                   	push   eax
   13100:	e8 e7 42 01 00       	call   273ec <strtoul>
   13105:	83 c4 10             	add    esp,0x10
   13108:	0f b6 d8             	movzx  ebx,al
   1310b:	83 ec 04             	sub    esp,0x4
   1310e:	6a 10                	push   0x10
   13110:	6a 00                	push   0x0
   13112:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13118:	50                   	push   eax
   13119:	e8 ce 42 01 00       	call   273ec <strtoul>
   1311e:	83 c4 10             	add    esp,0x10
   13121:	0f b7 c0             	movzx  eax,ax
   13124:	83 ec 08             	sub    esp,0x8
   13127:	53                   	push   ebx
   13128:	50                   	push   eax
   13129:	e8 77 f0 ff ff       	call   121a5 <outb>
   1312e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:436
}
   13131:	90                   	nop
   13132:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13135:	c9                   	leave  
   13136:	c3                   	ret    

00013137 <outPortW>:
outPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:439

void HIGH_CODE_SECTION outPortW(char* cmdline)
{
   13137:	55                   	push   ebp
   13138:	89 e5                	mov    ebp,esp
   1313a:	53                   	push   ebx
   1313b:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:441
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13141:	83 ec 04             	sub    esp,0x4
   13144:	68 00 14 00 00       	push   0x1400
   13149:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1314f:	50                   	push   eax
   13150:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13153:	e8 08 f3 ff ff       	call   12460 <parseParamsShell>
   13158:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:443
   
   outw(strtoul(params[0],0,16),strtoul(params[1],0,16));
   1315b:	83 ec 04             	sub    esp,0x4
   1315e:	6a 10                	push   0x10
   13160:	6a 00                	push   0x0
   13162:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13168:	05 00 02 00 00       	add    eax,0x200
   1316d:	50                   	push   eax
   1316e:	e8 79 42 01 00       	call   273ec <strtoul>
   13173:	83 c4 10             	add    esp,0x10
   13176:	0f b7 d8             	movzx  ebx,ax
   13179:	83 ec 04             	sub    esp,0x4
   1317c:	6a 10                	push   0x10
   1317e:	6a 00                	push   0x0
   13180:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13186:	50                   	push   eax
   13187:	e8 60 42 01 00       	call   273ec <strtoul>
   1318c:	83 c4 10             	add    esp,0x10
   1318f:	0f b7 c0             	movzx  eax,ax
   13192:	83 ec 08             	sub    esp,0x8
   13195:	53                   	push   ebx
   13196:	50                   	push   eax
   13197:	e8 28 f0 ff ff       	call   121c4 <outw>
   1319c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:444
}
   1319f:	90                   	nop
   131a0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   131a3:	c9                   	leave  
   131a4:	c3                   	ret    

000131a5 <outPortD>:
outPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:447

void HIGH_CODE_SECTION outPortD(char* cmdline)
{
   131a5:	55                   	push   ebp
   131a6:	89 e5                	mov    ebp,esp
   131a8:	53                   	push   ebx
   131a9:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:449
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   131af:	83 ec 04             	sub    esp,0x4
   131b2:	68 00 14 00 00       	push   0x1400
   131b7:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   131bd:	50                   	push   eax
   131be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   131c1:	e8 9a f2 ff ff       	call   12460 <parseParamsShell>
   131c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:451
   
   outl(strtoul(params[0],0,16),strtoul(params[1],0,16));
   131c9:	83 ec 04             	sub    esp,0x4
   131cc:	6a 10                	push   0x10
   131ce:	6a 00                	push   0x0
   131d0:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   131d6:	05 00 02 00 00       	add    eax,0x200
   131db:	50                   	push   eax
   131dc:	e8 0b 42 01 00       	call   273ec <strtoul>
   131e1:	83 c4 10             	add    esp,0x10
   131e4:	89 c3                	mov    ebx,eax
   131e6:	83 ec 04             	sub    esp,0x4
   131e9:	6a 10                	push   0x10
   131eb:	6a 00                	push   0x0
   131ed:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   131f3:	50                   	push   eax
   131f4:	e8 f3 41 01 00       	call   273ec <strtoul>
   131f9:	83 c4 10             	add    esp,0x10
   131fc:	0f b7 c0             	movzx  eax,ax
   131ff:	83 ec 08             	sub    esp,0x8
   13202:	53                   	push   ebx
   13203:	50                   	push   eax
   13204:	e8 dc ef ff ff       	call   121e5 <outl>
   13209:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:452
}
   1320c:	90                   	nop
   1320d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13210:	c9                   	leave  
   13211:	c3                   	ret    

00013212 <writeBytes>:
writeBytes():
/home/yogi/src/os/chrisOS/src/bishell.c:455

void HIGH_CODE_SECTION writeBytes(char* cmdline)
{
   13212:	55                   	push   ebp
   13213:	89 e5                	mov    ebp,esp
   13215:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:457
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1321b:	83 ec 04             	sub    esp,0x4
   1321e:	68 00 14 00 00       	push   0x1400
   13223:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13229:	50                   	push   eax
   1322a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1322d:	e8 2e f2 ff ff       	call   12460 <parseParamsShell>
   13232:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:459

    uint8_t* bytes=(uint8_t*)strtoul(params[0],0,16);
   13235:	83 ec 04             	sub    esp,0x4
   13238:	6a 10                	push   0x10
   1323a:	6a 00                	push   0x0
   1323c:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13242:	50                   	push   eax
   13243:	e8 a4 41 01 00       	call   273ec <strtoul>
   13248:	83 c4 10             	add    esp,0x10
   1324b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:460
    bytes[0]=strtoul(params[1],0,16);
   1324e:	83 ec 04             	sub    esp,0x4
   13251:	6a 10                	push   0x10
   13253:	6a 00                	push   0x0
   13255:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1325b:	05 00 02 00 00       	add    eax,0x200
   13260:	50                   	push   eax
   13261:	e8 86 41 01 00       	call   273ec <strtoul>
   13266:	83 c4 10             	add    esp,0x10
   13269:	89 c2                	mov    edx,eax
   1326b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1326e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:461
}
   13270:	90                   	nop
   13271:	c9                   	leave  
   13272:	c3                   	ret    

00013273 <writeWords>:
writeWords():
/home/yogi/src/os/chrisOS/src/bishell.c:464

void HIGH_CODE_SECTION writeWords(char* cmdline)
{
   13273:	55                   	push   ebp
   13274:	89 e5                	mov    ebp,esp
   13276:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:466
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1327c:	83 ec 04             	sub    esp,0x4
   1327f:	68 00 14 00 00       	push   0x1400
   13284:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1328a:	50                   	push   eax
   1328b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1328e:	e8 cd f1 ff ff       	call   12460 <parseParamsShell>
   13293:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:468

    uint16_t* words=(uint16_t*)strtoul(params[0],0,16);
   13296:	83 ec 04             	sub    esp,0x4
   13299:	6a 10                	push   0x10
   1329b:	6a 00                	push   0x0
   1329d:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   132a3:	50                   	push   eax
   132a4:	e8 43 41 01 00       	call   273ec <strtoul>
   132a9:	83 c4 10             	add    esp,0x10
   132ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:469
    words[0]=strtoul(params[1],0,16);
   132af:	83 ec 04             	sub    esp,0x4
   132b2:	6a 10                	push   0x10
   132b4:	6a 00                	push   0x0
   132b6:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   132bc:	05 00 02 00 00       	add    eax,0x200
   132c1:	50                   	push   eax
   132c2:	e8 25 41 01 00       	call   273ec <strtoul>
   132c7:	83 c4 10             	add    esp,0x10
   132ca:	89 c2                	mov    edx,eax
   132cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   132cf:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/bishell.c:470
}
   132d2:	90                   	nop
   132d3:	c9                   	leave  
   132d4:	c3                   	ret    

000132d5 <writeDWords>:
writeDWords():
/home/yogi/src/os/chrisOS/src/bishell.c:473

void HIGH_CODE_SECTION writeDWords(char* cmdline)
{
   132d5:	55                   	push   ebp
   132d6:	89 e5                	mov    ebp,esp
   132d8:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:475
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   132de:	83 ec 04             	sub    esp,0x4
   132e1:	68 00 14 00 00       	push   0x1400
   132e6:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   132ec:	50                   	push   eax
   132ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   132f0:	e8 6b f1 ff ff       	call   12460 <parseParamsShell>
   132f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:477

    uint32_t* dwords=(uint32_t*)strtoul(params[0],0,16);
   132f8:	83 ec 04             	sub    esp,0x4
   132fb:	6a 10                	push   0x10
   132fd:	6a 00                	push   0x0
   132ff:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13305:	50                   	push   eax
   13306:	e8 e1 40 01 00       	call   273ec <strtoul>
   1330b:	83 c4 10             	add    esp,0x10
   1330e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:478
    dwords[0]=strtoul(params[1],0,16);
   13311:	83 ec 04             	sub    esp,0x4
   13314:	6a 10                	push   0x10
   13316:	6a 00                	push   0x0
   13318:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1331e:	05 00 02 00 00       	add    eax,0x200
   13323:	50                   	push   eax
   13324:	e8 c3 40 01 00       	call   273ec <strtoul>
   13329:	83 c4 10             	add    esp,0x10
   1332c:	89 c2                	mov    edx,eax
   1332e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13331:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/bishell.c:479
}
   13333:	90                   	nop
   13334:	c9                   	leave  
   13335:	c3                   	ret    

00013336 <showMapping>:
showMapping():
/home/yogi/src/os/chrisOS/src/bishell.c:482

void HIGH_CODE_SECTION showMapping(char* cmdline)
{
   13336:	55                   	push   ebp
   13337:	89 e5                	mov    ebp,esp
   13339:	57                   	push   edi
   1333a:	56                   	push   esi
   1333b:	53                   	push   ebx
   1333c:	81 ec 2c 14 00 00    	sub    esp,0x142c
/home/yogi/src/os/chrisOS/src/bishell.c:484
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13342:	83 ec 04             	sub    esp,0x4
   13345:	68 00 14 00 00       	push   0x1400
   1334a:	8d 85 e4 eb ff ff    	lea    eax,[ebp-0x141c]
   13350:	50                   	push   eax
   13351:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13354:	e8 07 f1 ff ff       	call   12460 <parseParamsShell>
   13359:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:486

    uintptr_t lAddress=strtoul(params[0],0,16);
   1335c:	83 ec 04             	sub    esp,0x4
   1335f:	6a 10                	push   0x10
   13361:	6a 00                	push   0x0
   13363:	8d 85 e4 eb ff ff    	lea    eax,[ebp-0x141c]
   13369:	50                   	push   eax
   1336a:	e8 7d 40 01 00       	call   273ec <strtoul>
   1336f:	83 c4 10             	add    esp,0x10
   13372:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:487
    printk("\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
   13375:	83 ec 0c             	sub    esp,0xc
   13378:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1337b:	e8 2b e1 ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   13380:	83 c4 10             	add    esp,0x10
   13383:	25 00 f0 ff ff       	and    eax,0xfffff000
   13388:	89 c2                	mov    edx,eax
   1338a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1338d:	25 ff 0f 00 00       	and    eax,0xfff
   13392:	09 c2                	or     edx,eax
   13394:	89 d3                	mov    ebx,edx
   13396:	83 ec 0c             	sub    esp,0xc
   13399:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1339c:	e8 0a e1 ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   133a1:	83 c4 10             	add    esp,0x10
   133a4:	89 85 d4 eb ff ff    	mov    DWORD PTR [ebp-0x142c],eax
   133aa:	83 ec 0c             	sub    esp,0xc
   133ad:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   133b0:	e8 c0 e0 ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   133b5:	83 c4 10             	add    esp,0x10
   133b8:	89 c7                	mov    edi,eax
   133ba:	83 ec 0c             	sub    esp,0xc
   133bd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   133c0:	e8 27 e0 ff ff       	call   113ec <kPagingGet4kPDEntryValue>
   133c5:	83 c4 10             	add    esp,0x10
   133c8:	89 c6                	mov    esi,eax
   133ca:	83 ec 0c             	sub    esp,0xc
   133cd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   133d0:	e8 5e e0 ff ff       	call   11433 <kPagingGet4kPDEntryAddress>
   133d5:	83 c4 10             	add    esp,0x10
   133d8:	83 ec 08             	sub    esp,0x8
   133db:	53                   	push   ebx
   133dc:	ff b5 d4 eb ff ff    	push   DWORD PTR [ebp-0x142c]
   133e2:	57                   	push   edi
   133e3:	56                   	push   esi
   133e4:	50                   	push   eax
   133e5:	68 10 5f 04 00       	push   0x45f10
   133ea:	e8 04 3e 01 00       	call   271f3 <printk>
   133ef:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:488
}
   133f2:	90                   	nop
   133f3:	8d 65 f4             	lea    esp,[ebp-0xc]
   133f6:	5b                   	pop    ebx
   133f7:	5e                   	pop    esi
   133f8:	5f                   	pop    edi
   133f9:	5d                   	pop    ebp
   133fa:	c3                   	ret    

000133fb <biShell>:
biShell():
/home/yogi/src/os/chrisOS/src/bishell.c:614
    exec (params[0],paramCount,lTemp);
    strcpy(sExecutingProgram,sbiShellProgramName);
}

void HIGH_CODE_SECTION biShell()
{
   133fb:	55                   	push   ebp
   133fc:	89 e5                	mov    ebp,esp
   133fe:	53                   	push   ebx
   133ff:	81 ec f4 0a 00 00    	sub    esp,0xaf4
/home/yogi/src/os/chrisOS/src/bishell.c:616
    char lCommand[256];
    unsigned lCurrKey=0;
   13405:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:617
    int lCurrKeyCount=0;
   1340c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:619
    char commands[50][50];
    int commandsPtr=0;
   13413:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:620
    int commandBuffPtr=0;
   1341a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:621
    int commandWasFromThisBufferPtr=0;
   13421:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:622
    bool stopCountingKeys=false;
   13428:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:623
    strcpy(sExecutingProgram,sbiShellProgramName);
   1342c:	83 ec 08             	sub    esp,0x8
   1342f:	68 c0 89 02 00       	push   0x289c0
   13434:	68 40 b4 08 00       	push   0x8b440
   13439:	e8 16 3f 01 00       	call   27354 <strcpy>
   1343e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:624
    puts("\nWelcome to biShell ... hang a while!\n");
   13441:	83 ec 0c             	sub    esp,0xc
   13444:	68 78 5f 04 00       	push   0x45f78
   13449:	e8 24 4c 00 00       	call   18072 <puts>
   1344e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:628
    while (1==1)
    {
getACommand:
        lCurrKey=0;
   13451:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:629
        lCurrKeyCount=0;
   13458:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:630
        memset(lCommand,0,256);
   1345f:	83 ec 04             	sub    esp,0x4
   13462:	68 00 01 00 00       	push   0x100
   13467:	6a 00                	push   0x0
   13469:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1346f:	50                   	push   eax
   13470:	e8 08 1c 01 00       	call   2507d <memset>
   13475:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:631
        printk("%s> ",sExecutingProgram);
   13478:	83 ec 08             	sub    esp,0x8
   1347b:	68 40 b4 08 00       	push   0x8b440
   13480:	68 9f 5f 04 00       	push   0x45f9f
   13485:	e8 69 3d 01 00       	call   271f3 <printk>
   1348a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:633
getAKey:
        lCurrKey=0;
   1348d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:634
        while(lCurrKey==0)
   13494:	eb 0d                	jmp    134a3 <biShell+0xa8>
/home/yogi/src/os/chrisOS/src/bishell.c:636
        {
            __asm__("sti\nhlt\n");
   13496:	fb                   	sti    
   13497:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/bishell.c:637
            lCurrKey=getKeyboardKey();
   13498:	e8 48 de ff ff       	call   112e5 <getKeyboardKey>
   1349d:	0f b6 c0             	movzx  eax,al
   134a0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:634
        lCurrKeyCount=0;
        memset(lCommand,0,256);
        printk("%s> ",sExecutingProgram);
getAKey:
        lCurrKey=0;
        while(lCurrKey==0)
   134a3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   134a7:	74 ed                	je     13496 <biShell+0x9b>
/home/yogi/src/os/chrisOS/src/bishell.c:640
        {
            __asm__("sti\nhlt\n");
            lCurrKey=getKeyboardKey();
        }
        //printk("key='%08X'",lCurrKey);
        if(lCurrKey==0xc8) //up
   134a9:	81 7d f4 c8 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xc8
   134b0:	0f 85 8f 00 00 00    	jne    13545 <biShell+0x14a>
/home/yogi/src/os/chrisOS/src/bishell.c:642
        {
            if (commandBuffPtr>=0)
   134b6:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   134ba:	78 d1                	js     1348d <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:644
            {
                int lTemp=cursorGetPosY();
   134bc:	e8 22 4b 00 00       	call   17fe3 <cursorGetPosY>
   134c1:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/bishell.c:645
                strcpy(lCommand,commands[--commandBuffPtr]);
   134c4:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   134c8:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   134ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   134d1:	6b c0 32             	imul   eax,eax,0x32
   134d4:	01 d0                	add    eax,edx
   134d6:	83 ec 08             	sub    esp,0x8
   134d9:	50                   	push   eax
   134da:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   134e0:	50                   	push   eax
   134e1:	e8 6e 3e 01 00       	call   27354 <strcpy>
   134e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:646
                commandWasFromThisBufferPtr=commandBuffPtr;
   134e9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   134ec:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:647
                cursorMoveTo(4,lTemp);
   134ef:	83 ec 08             	sub    esp,0x8
   134f2:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   134f5:	6a 04                	push   0x4
   134f7:	e8 47 4a 00 00       	call   17f43 <cursorMoveTo>
   134fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:648
                printk("%s                                                                                ",lCommand);
   134ff:	83 ec 08             	sub    esp,0x8
   13502:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13508:	50                   	push   eax
   13509:	68 a4 5f 04 00       	push   0x45fa4
   1350e:	e8 e0 3c 01 00       	call   271f3 <printk>
   13513:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:649
                lCurrKeyCount=strlen(lCommand);
   13516:	83 ec 0c             	sub    esp,0xc
   13519:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1351f:	50                   	push   eax
   13520:	e8 9f 3e 01 00       	call   273c4 <strlen>
   13525:	83 c4 10             	add    esp,0x10
   13528:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:650
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   1352b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1352e:	83 c0 04             	add    eax,0x4
   13531:	83 ec 08             	sub    esp,0x8
   13534:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   13537:	50                   	push   eax
   13538:	e8 06 4a 00 00       	call   17f43 <cursorMoveTo>
   1353d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:651
                goto getAKey;
   13540:	e9 48 ff ff ff       	jmp    1348d <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:656
            }
            else
                goto getAKey;
        }
        if (lCurrKey==0xD0)  //down
   13545:	81 7d f4 d0 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xd0
   1354c:	0f 85 95 00 00 00    	jne    135e7 <biShell+0x1ec>
/home/yogi/src/os/chrisOS/src/bishell.c:658
        {
            if (commandBuffPtr<=commandsPtr)
   13552:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13555:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   13558:	0f 8f 2f ff ff ff    	jg     1348d <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:660
            {
                int lTemp=cursorGetPosY();
   1355e:	e8 80 4a 00 00       	call   17fe3 <cursorGetPosY>
   13563:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:661
                strcpy(lCommand,commands[++commandBuffPtr]);
   13566:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
   1356a:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13570:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13573:	6b c0 32             	imul   eax,eax,0x32
   13576:	01 d0                	add    eax,edx
   13578:	83 ec 08             	sub    esp,0x8
   1357b:	50                   	push   eax
   1357c:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13582:	50                   	push   eax
   13583:	e8 cc 3d 01 00       	call   27354 <strcpy>
   13588:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:662
                commandWasFromThisBufferPtr=commandBuffPtr;
   1358b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1358e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:663
                cursorMoveTo(4,lTemp);
   13591:	83 ec 08             	sub    esp,0x8
   13594:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   13597:	6a 04                	push   0x4
   13599:	e8 a5 49 00 00       	call   17f43 <cursorMoveTo>
   1359e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:664
                printk("%s                                                                                ",lCommand);
   135a1:	83 ec 08             	sub    esp,0x8
   135a4:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   135aa:	50                   	push   eax
   135ab:	68 a4 5f 04 00       	push   0x45fa4
   135b0:	e8 3e 3c 01 00       	call   271f3 <printk>
   135b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:665
                lCurrKeyCount=strlen(lCommand);
   135b8:	83 ec 0c             	sub    esp,0xc
   135bb:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   135c1:	50                   	push   eax
   135c2:	e8 fd 3d 01 00       	call   273c4 <strlen>
   135c7:	83 c4 10             	add    esp,0x10
   135ca:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:666
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   135cd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   135d0:	83 c0 04             	add    eax,0x4
   135d3:	83 ec 08             	sub    esp,0x8
   135d6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   135d9:	50                   	push   eax
   135da:	e8 64 49 00 00       	call   17f43 <cursorMoveTo>
   135df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:667
                goto getAKey;
   135e2:	e9 a6 fe ff ff       	jmp    1348d <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:673
            }
            else
                goto getAKey;
            
        }   
        if (lCurrKey==0xcb) //left
   135e7:	81 7d f4 cb 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xcb
   135ee:	75 33                	jne    13623 <biShell+0x228>
/home/yogi/src/os/chrisOS/src/bishell.c:675
        {
            if (cursorGetPosX()>4)
   135f0:	e8 aa 49 00 00       	call   17f9f <cursorGetPosX>
   135f5:	83 f8 04             	cmp    eax,0x4
   135f8:	0f 8e 8f fe ff ff    	jle    1348d <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:677
            {
                cursorMoveTo(cursorGetPosX()-1,cursorGetPosY());
   135fe:	e8 e0 49 00 00       	call   17fe3 <cursorGetPosY>
   13603:	89 c3                	mov    ebx,eax
   13605:	e8 95 49 00 00       	call   17f9f <cursorGetPosX>
   1360a:	83 e8 01             	sub    eax,0x1
   1360d:	83 ec 08             	sub    esp,0x8
   13610:	53                   	push   ebx
   13611:	50                   	push   eax
   13612:	e8 2c 49 00 00       	call   17f43 <cursorMoveTo>
   13617:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:678
                stopCountingKeys=true;
   1361a:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:680
            }
            goto getAKey;
   1361e:	e9 6a fe ff ff       	jmp    1348d <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:682
        }
        if (lCurrKey=='\b')
   13623:	83 7d f4 08          	cmp    DWORD PTR [ebp-0xc],0x8
   13627:	75 61                	jne    1368a <biShell+0x28f>
/home/yogi/src/os/chrisOS/src/bishell.c:684
        {
            if (lCurrKeyCount>=0)
   13629:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1362d:	0f 88 5a fe ff ff    	js     1348d <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:686
            {
                int lTemp=cursorGetPosY();
   13633:	e8 ab 49 00 00       	call   17fe3 <cursorGetPosY>
   13638:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:688

                lCommand[lCurrKeyCount]=' ';
   1363b:	8d 95 cc fe ff ff    	lea    edx,[ebp-0x134]
   13641:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13644:	01 d0                	add    eax,edx
   13646:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:689
                lCurrKeyCount--;
   13649:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:690
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   1364d:	e8 4d 49 00 00       	call   17f9f <cursorGetPosX>
   13652:	83 e8 01             	sub    eax,0x1
   13655:	83 ec 08             	sub    esp,0x8
   13658:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1365b:	50                   	push   eax
   1365c:	e8 e2 48 00 00       	call   17f43 <cursorMoveTo>
   13661:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:691
                putc(' ');
   13664:	83 ec 0c             	sub    esp,0xc
   13667:	6a 20                	push   0x20
   13669:	e8 34 4a 00 00       	call   180a2 <putc>
   1366e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:692
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   13671:	e8 29 49 00 00       	call   17f9f <cursorGetPosX>
   13676:	83 e8 01             	sub    eax,0x1
   13679:	83 ec 08             	sub    esp,0x8
   1367c:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1367f:	50                   	push   eax
   13680:	e8 be 48 00 00       	call   17f43 <cursorMoveTo>
   13685:	83 c4 10             	add    esp,0x10
   13688:	eb 61                	jmp    136eb <biShell+0x2f0>
/home/yogi/src/os/chrisOS/src/bishell.c:697
            }
            else
                goto getAKey;
        }
        else if (lCurrKey==0xa)
   1368a:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1368e:	75 30                	jne    136c0 <biShell+0x2c5>
/home/yogi/src/os/chrisOS/src/bishell.c:699
        {
            putc(lCurrKey);
   13690:	83 ec 0c             	sub    esp,0xc
   13693:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13696:	e8 07 4a 00 00       	call   180a2 <putc>
   1369b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:700
            lCommand[lCurrKeyCount++]='\0';
   1369e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   136a1:	8d 50 01             	lea    edx,[eax+0x1]
   136a4:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   136a7:	c6 84 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],0x0
   136ae:	00 
/home/yogi/src/os/chrisOS/src/bishell.c:701
            goto doneGettingKeys;
   136af:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:714
        }
        stopCountingKeys=false;
        goto getAKey;
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
   136b0:	0f b6 85 cc fe ff ff 	movzx  eax,BYTE PTR [ebp-0x134]
   136b7:	84 c0                	test   al,al
   136b9:	75 39                	jne    136f4 <biShell+0x2f9>
   136bb:	e9 91 fd ff ff       	jmp    13451 <biShell+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:705
            lCommand[lCurrKeyCount++]='\0';
            goto doneGettingKeys;
        }
        else
        {
            lCommand[lCurrKeyCount++]=lCurrKey;
   136c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   136c3:	8d 50 01             	lea    edx,[eax+0x1]
   136c6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   136c9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   136cc:	88 94 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],dl
/home/yogi/src/os/chrisOS/src/bishell.c:706
            if (stopCountingKeys)
   136d3:	80 7d e3 00          	cmp    BYTE PTR [ebp-0x1d],0x0
   136d7:	74 04                	je     136dd <biShell+0x2e2>
/home/yogi/src/os/chrisOS/src/bishell.c:707
                    lCurrKeyCount--;
   136d9:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:708
            putc(lCurrKey);
   136dd:	83 ec 0c             	sub    esp,0xc
   136e0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   136e3:	e8 ba 49 00 00       	call   180a2 <putc>
   136e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:710
        }
        stopCountingKeys=false;
   136eb:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:711
        goto getAKey;
   136ef:	e9 99 fd ff ff       	jmp    1348d <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:716
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
            goto getACommand;
        int i = findCommand(lCommand);
   136f4:	83 ec 0c             	sub    esp,0xc
   136f7:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   136fd:	50                   	push   eax
   136fe:	e8 f4 ec ff ff       	call   123f7 <findCommand>
   13703:	83 c4 10             	add    esp,0x10
   13706:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:718

        if(i>0)
   13709:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   1370d:	0f 8e f8 00 00 00    	jle    1380b <biShell+0x410>
/home/yogi/src/os/chrisOS/src/bishell.c:720
        {
            i--;
   13713:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:722
            //printk("Executing command # %u (%s)\n", i, cmds[i].name);
            command_function = cmds[i].function;
   13717:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1371a:	c1 e0 04             	shl    eax,0x4
   1371d:	05 08 88 02 00       	add    eax,0x28808
   13722:	8b 00                	mov    eax,DWORD PTR [eax]
   13724:	a3 58 63 09 00       	mov    ds:0x96358,eax
/home/yogi/src/os/chrisOS/src/bishell.c:723
            command_function_p = cmds[i].function;
   13729:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1372c:	c1 e0 04             	shl    eax,0x4
   1372f:	05 08 88 02 00       	add    eax,0x28808
   13734:	8b 00                	mov    eax,DWORD PTR [eax]
   13736:	a3 a4 b4 08 00       	mov    ds:0x8b4a4,eax
/home/yogi/src/os/chrisOS/src/bishell.c:724
            if (cmds[i].paramCount==0)
   1373b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1373e:	c1 e0 04             	shl    eax,0x4
   13741:	05 0c 88 02 00       	add    eax,0x2880c
   13746:	8b 00                	mov    eax,DWORD PTR [eax]
   13748:	85 c0                	test   eax,eax
   1374a:	75 09                	jne    13755 <biShell+0x35a>
/home/yogi/src/os/chrisOS/src/bishell.c:725
                command_function();
   1374c:	a1 58 63 09 00       	mov    eax,ds:0x96358
   13751:	ff d0                	call   eax
   13753:	eb 33                	jmp    13788 <biShell+0x38d>
/home/yogi/src/os/chrisOS/src/bishell.c:728
            else
            {
                command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
   13755:	8b 1d a4 b4 08 00    	mov    ebx,DWORD PTR ds:0x8b4a4
   1375b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1375e:	c1 e0 04             	shl    eax,0x4
   13761:	05 00 88 02 00       	add    eax,0x28800
   13766:	8b 00                	mov    eax,DWORD PTR [eax]
   13768:	83 ec 0c             	sub    esp,0xc
   1376b:	50                   	push   eax
   1376c:	e8 53 3c 01 00       	call   273c4 <strlen>
   13771:	83 c4 10             	add    esp,0x10
   13774:	8d 50 01             	lea    edx,[eax+0x1]
   13777:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1377d:	01 d0                	add    eax,edx
   1377f:	83 ec 0c             	sub    esp,0xc
   13782:	50                   	push   eax
   13783:	ff d3                	call   ebx
   13785:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:730
            }
            if (commandWasFromThisBufferPtr)
   13788:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1378c:	74 4b                	je     137d9 <biShell+0x3de>
/home/yogi/src/os/chrisOS/src/bishell.c:732
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   1378e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   13791:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
   13794:	eb 30                	jmp    137c6 <biShell+0x3cb>
/home/yogi/src/os/chrisOS/src/bishell.c:733 (discriminator 3)
                    strcpy(commands[cnt],commands[cnt+1]);
   13796:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   13799:	83 c0 01             	add    eax,0x1
   1379c:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   137a2:	6b c0 32             	imul   eax,eax,0x32
   137a5:	01 c2                	add    edx,eax
   137a7:	8d 8d 08 f5 ff ff    	lea    ecx,[ebp-0xaf8]
   137ad:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   137b0:	6b c0 32             	imul   eax,eax,0x32
   137b3:	01 c8                	add    eax,ecx
   137b5:	83 ec 08             	sub    esp,0x8
   137b8:	52                   	push   edx
   137b9:	50                   	push   eax
   137ba:	e8 95 3b 01 00       	call   27354 <strcpy>
   137bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:732 (discriminator 3)
            {
                command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
            }
            if (commandWasFromThisBufferPtr)
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   137c2:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:732 (discriminator 1)
   137c6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   137c9:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   137cc:	7e c8                	jle    13796 <biShell+0x39b>
/home/yogi/src/os/chrisOS/src/bishell.c:734
                    strcpy(commands[cnt],commands[cnt+1]);
                commandWasFromThisBufferPtr=0;
   137ce:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:735
                commandsPtr--;
   137d5:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:737
            }
            strcpy(commands[commandsPtr++],lCommand);
   137d9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   137dc:	8d 50 01             	lea    edx,[eax+0x1]
   137df:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   137e2:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   137e8:	6b c0 32             	imul   eax,eax,0x32
   137eb:	01 c2                	add    edx,eax
   137ed:	83 ec 08             	sub    esp,0x8
   137f0:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   137f6:	50                   	push   eax
   137f7:	52                   	push   edx
   137f8:	e8 57 3b 01 00       	call   27354 <strcpy>
   137fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:738
            commandBuffPtr=commandsPtr;
   13800:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13803:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   13806:	e9 46 fc ff ff       	jmp    13451 <biShell+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:742
        }
        else
        {
            printk("Invalid command '%s' ya dummy!\n",lCommand);
   1380b:	83 ec 08             	sub    esp,0x8
   1380e:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13814:	50                   	push   eax
   13815:	68 f8 5f 04 00       	push   0x45ff8
   1381a:	e8 d4 39 01 00       	call   271f3 <printk>
   1381f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:744
        }
    }
   13822:	e9 2a fc ff ff       	jmp    13451 <biShell+0x56>
   13827:	90                   	nop

00013828 <AhciIssueCmd>:
AhciIssueCmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:38


// Check device type

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
   13828:	55                   	push   ebp
   13829:	89 e5                	mov    ebp,esp
   1382b:	53                   	push   ebx
   1382c:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:40
    unsigned i;
    int delay = 0;
   1382f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:41
    int Status = true;
   13836:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:43

    port->cmd.ST=0;
   1383d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13840:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13843:	83 e2 fe             	and    edx,0xfffffffe
   13846:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:45
    //make sure bit0 Start set to enable process cmd list
    if (!(port->cmd.ST)) {
   13849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1384c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1384f:	83 e0 01             	and    eax,0x1
   13852:	84 c0                	test   al,al
   13854:	75 2d                	jne    13883 <AhciIssueCmd+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:46
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - ST was cleared, setting FRE and STE\n");
   13856:	83 ec 08             	sub    esp,0x8
   13859:	68 20 61 04 00       	push   0x46120
   1385e:	68 00 20 00 00       	push   0x2000
   13863:	e8 ab 39 01 00       	call   27213 <printd>
   13868:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:47
        port->cmd.FRE = 1;
   1386b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1386e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13871:	83 ca 10             	or     edx,0x10
   13874:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:48
        port->cmd.ST = 1;
   13877:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1387a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   1387d:	83 ca 01             	or     edx,0x1
   13880:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:52
    }

    //if err status or busy, reset PxCMD.
    if ((port->pxis.TFES || port->pxis.HBFS || port->pxis.HBDS || port->pxis.IFS || port->pxis.INFS || port->pxis.OFS || port->pxis.IPMS) || (port->tfd.BSY || port->tfd.BSY)) {
   13883:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13886:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13889:	c1 e8 1e             	shr    eax,0x1e
   1388c:	83 e0 01             	and    eax,0x1
   1388f:	84 c0                	test   al,al
   13891:	0f 85 84 00 00 00    	jne    1391b <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 1)
   13897:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1389a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1389d:	c1 e8 1d             	shr    eax,0x1d
   138a0:	83 e0 01             	and    eax,0x1
   138a3:	84 c0                	test   al,al
   138a5:	75 74                	jne    1391b <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 2)
   138a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138aa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   138ad:	c1 e8 1c             	shr    eax,0x1c
   138b0:	83 e0 01             	and    eax,0x1
   138b3:	84 c0                	test   al,al
   138b5:	75 64                	jne    1391b <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 3)
   138b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138ba:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   138bd:	c1 e8 1b             	shr    eax,0x1b
   138c0:	83 e0 01             	and    eax,0x1
   138c3:	84 c0                	test   al,al
   138c5:	75 54                	jne    1391b <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 4)
   138c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138ca:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   138cd:	c1 e8 1a             	shr    eax,0x1a
   138d0:	83 e0 01             	and    eax,0x1
   138d3:	84 c0                	test   al,al
   138d5:	75 44                	jne    1391b <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 5)
   138d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   138dd:	c1 e8 18             	shr    eax,0x18
   138e0:	83 e0 01             	and    eax,0x1
   138e3:	84 c0                	test   al,al
   138e5:	75 34                	jne    1391b <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 6)
   138e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138ea:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   138ed:	c1 e8 17             	shr    eax,0x17
   138f0:	83 e0 01             	and    eax,0x1
   138f3:	84 c0                	test   al,al
   138f5:	75 24                	jne    1391b <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 7)
   138f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   138fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   138fd:	c1 e8 07             	shr    eax,0x7
   13900:	83 e0 01             	and    eax,0x1
   13903:	84 c0                	test   al,al
   13905:	75 14                	jne    1391b <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 8)
   13907:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1390a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1390d:	c1 e8 07             	shr    eax,0x7
   13910:	83 e0 01             	and    eax,0x1
   13913:	84 c0                	test   al,al
   13915:	0f 84 8e 00 00 00    	je     139a9 <AhciIssueCmd+0x181>
/home/yogi/src/os/chrisOS/src/block/ahci.c:53
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - clearing error/busy\n");
   1391b:	83 ec 08             	sub    esp,0x8
   1391e:	68 5c 61 04 00       	push   0x4615c
   13923:	68 00 20 00 00       	push   0x2000
   13928:	e8 e6 38 01 00       	call   27213 <printd>
   1392d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:54
        port->cmd.ST &= ~port->cmd.ST;
   13930:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13933:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13936:	83 e0 01             	and    eax,0x1
   13939:	0f b6 c0             	movzx  eax,al
   1393c:	f7 d0                	not    eax
   1393e:	89 c2                	mov    edx,eax
   13940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13943:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13946:	83 e0 01             	and    eax,0x1
   13949:	89 c1                	mov    ecx,eax
   1394b:	89 d0                	mov    eax,edx
   1394d:	21 c8                	and    eax,ecx
   1394f:	83 e0 01             	and    eax,0x1
   13952:	89 c2                	mov    edx,eax
   13954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13957:	0f b6 d2             	movzx  edx,dl
   1395a:	89 d1                	mov    ecx,edx
   1395c:	83 e1 01             	and    ecx,0x1
   1395f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13962:	83 e2 fe             	and    edx,0xfffffffe
   13965:	09 ca                	or     edx,ecx
   13967:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:56
        //Start|Command List Override|FIS Receive Enable
        port->cmd.CLO=1;
   1396a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1396d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13970:	83 ca 08             	or     edx,0x8
   13973:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:57
        while (port->cmd.CLO);
   13976:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:57 (discriminator 1)
   13977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1397a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1397d:	c1 e8 03             	shr    eax,0x3
   13980:	83 e0 01             	and    eax,0x1
   13983:	84 c0                	test   al,al
   13985:	75 f0                	jne    13977 <AhciIssueCmd+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:58
        port->cmd.ST = 1;
   13987:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1398a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   1398d:	83 ca 01             	or     edx,0x1
   13990:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:59
        port->cmd.FRE = 1;
   13993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13996:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13999:	83 ca 10             	or     edx,0x10
   1399c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:60
        port->pxis.AsUlong = 0;
   1399f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139a2:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:64
    }

    //issue cmd
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
   139a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139ac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   139af:	83 ec 04             	sub    esp,0x4
   139b2:	50                   	push   eax
   139b3:	68 88 61 04 00       	push   0x46188
   139b8:	68 00 20 00 00       	push   0x2000
   139bd:	e8 51 38 01 00       	call   27213 <printd>
   139c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:65
    port->ci |= (1 << cmdslot);
   139c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139c8:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   139cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   139ce:	bb 01 00 00 00       	mov    ebx,0x1
   139d3:	89 c1                	mov    ecx,eax
   139d5:	d3 e3                	shl    ebx,cl
   139d7:	89 d8                	mov    eax,ebx
   139d9:	09 c2                	or     edx,eax
   139db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139de:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:66
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);
   139e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   139e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   139e7:	83 ec 04             	sub    esp,0x4
   139ea:	50                   	push   eax
   139eb:	68 bc 61 04 00       	push   0x461bc
   139f0:	68 00 20 00 00       	push   0x2000
   139f5:	e8 19 38 01 00       	call   27213 <printd>
   139fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:69

    //wait cmd
    for (i = 0; i < 100; i++) {
   139fd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   13a04:	eb 21                	jmp    13a27 <AhciIssueCmd+0x1ff>
/home/yogi/src/os/chrisOS/src/block/ahci.c:70
        wait(50);
   13a06:	83 ec 0c             	sub    esp,0xc
   13a09:	6a 32                	push   0x32
   13a0b:	e8 22 4a 01 00       	call   28432 <wait>
   13a10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:71
        if (!port->tfd.BSY)
   13a13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a16:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13a19:	c1 e8 07             	shr    eax,0x7
   13a1c:	83 e0 01             	and    eax,0x1
   13a1f:	84 c0                	test   al,al
   13a21:	74 0c                	je     13a2f <AhciIssueCmd+0x207>
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 2)
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
    port->ci |= (1 << cmdslot);
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);

    //wait cmd
    for (i = 0; i < 100; i++) {
   13a23:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 1)
   13a27:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
   13a2b:	76 d9                	jbe    13a06 <AhciIssueCmd+0x1de>
   13a2d:	eb 01                	jmp    13a30 <AhciIssueCmd+0x208>
/home/yogi/src/os/chrisOS/src/block/ahci.c:72
        wait(50);
        if (!port->tfd.BSY)
            break;
   13a2f:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:76
    }

    // Wait for completion
    delay = 5000;
   13a30:	c7 45 f0 88 13 00 00 	mov    DWORD PTR [ebp-0x10],0x1388
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
    while (delay > 0) {
   13a37:	eb 57                	jmp    13a90 <AhciIssueCmd+0x268>
/home/yogi/src/os/chrisOS/src/block/ahci.c:79

        if ((port->ci & (1 << cmdslot)) == 0)
   13a39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a3c:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13a3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13a42:	bb 01 00 00 00       	mov    ebx,0x1
   13a47:	89 c1                	mov    ecx,eax
   13a49:	d3 e3                	shl    ebx,cl
   13a4b:	89 d8                	mov    eax,ebx
   13a4d:	21 d0                	and    eax,edx
   13a4f:	85 c0                	test   eax,eax
   13a51:	74 45                	je     13a98 <AhciIssueCmd+0x270>
/home/yogi/src/os/chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
   13a53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a56:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13a59:	c1 e8 1e             	shr    eax,0x1e
   13a5c:	83 e0 01             	and    eax,0x1
   13a5f:	84 c0                	test   al,al
   13a61:	74 1c                	je     13a7f <AhciIssueCmd+0x257>
/home/yogi/src/os/chrisOS/src/block/ahci.c:85
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   13a63:	83 ec 08             	sub    esp,0x8
   13a66:	68 ef 61 04 00       	push   0x461ef
   13a6b:	68 00 20 00 00       	push   0x2000
   13a70:	e8 9e 37 01 00       	call   27213 <printd>
   13a75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:86
            return -1;
   13a78:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13a7d:	eb 37                	jmp    13ab6 <AhciIssueCmd+0x28e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:88
        }
        wait(20);
   13a7f:	83 ec 0c             	sub    esp,0xc
   13a82:	6a 14                	push   0x14
   13a84:	e8 a9 49 01 00       	call   28432 <wait>
   13a89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:89
        delay -= 1;
   13a8c:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
            break;
    }

    // Wait for completion
    delay = 5000;
    while (delay > 0) {
   13a90:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13a94:	7f a3                	jg     13a39 <AhciIssueCmd+0x211>
   13a96:	eb 01                	jmp    13a99 <AhciIssueCmd+0x271>
/home/yogi/src/os/chrisOS/src/block/ahci.c:80

        if ((port->ci & (1 << cmdslot)) == 0)
            break;
   13a98:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:92
        }
        wait(20);
        delay -= 1;
    }

    if (port->tfd.ERR || delay == 0)
   13a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a9c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13a9f:	83 e0 01             	and    eax,0x1
   13aa2:	84 c0                	test   al,al
   13aa4:	75 06                	jne    13aac <AhciIssueCmd+0x284>
/home/yogi/src/os/chrisOS/src/block/ahci.c:92 (discriminator 1)
   13aa6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13aaa:	75 07                	jne    13ab3 <AhciIssueCmd+0x28b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:93
        Status = -2;
   13aac:	c7 45 ec fe ff ff ff 	mov    DWORD PTR [ebp-0x14],0xfffffffe
/home/yogi/src/os/chrisOS/src/block/ahci.c:95

    return Status;
   13ab3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/block/ahci.c:96
}
   13ab6:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13ab9:	c9                   	leave  
   13aba:	c3                   	ret    

00013abb <check_type>:
check_type():
/home/yogi/src/os/chrisOS/src/block/ahci.c:98

int check_type(volatile HBA_PORT *port, uint32_t* sig) {
   13abb:	55                   	push   ebp
   13abc:	89 e5                	mov    ebp,esp
   13abe:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:99
    uint32_t ssts = port->ssts;
   13ac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ac4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13ac7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:100
    uint8_t ipm = (ssts >> 8) & 0x0F;
   13aca:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13acd:	c1 e8 08             	shr    eax,0x8
   13ad0:	83 e0 0f             	and    eax,0xf
   13ad3:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:101
    uint8_t det = ssts & 0x0F;
   13ad6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13ad9:	83 e0 0f             	and    eax,0xf
   13adc:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:103

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
   13adf:	80 7d fa 03          	cmp    BYTE PTR [ebp-0x6],0x3
   13ae3:	74 07                	je     13aec <check_type+0x31>
/home/yogi/src/os/chrisOS/src/block/ahci.c:104
        return AHCI_DEV_NULL;
   13ae5:	b8 00 00 00 00       	mov    eax,0x0
   13aea:	eb 64                	jmp    13b50 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:105
    if (ipm != HBA_PORT_IPM_ACTIVE)
   13aec:	80 7d fb 01          	cmp    BYTE PTR [ebp-0x5],0x1
   13af0:	74 07                	je     13af9 <check_type+0x3e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:106
        return AHCI_DEV_NULL;
   13af2:	b8 00 00 00 00       	mov    eax,0x0
   13af7:	eb 57                	jmp    13b50 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:108

    *sig = port->sig;
   13af9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13afc:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   13aff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13b02:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:109
    switch (port->sig) {
   13b04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b07:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   13b0a:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13b0f:	74 25                	je     13b36 <check_type+0x7b>
   13b11:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13b16:	77 09                	ja     13b21 <check_type+0x66>
   13b18:	3d 01 01 69 96       	cmp    eax,0x96690101
   13b1d:	74 1e                	je     13b3d <check_type+0x82>
   13b1f:	eb 2a                	jmp    13b4b <check_type+0x90>
   13b21:	3d 00 00 14 eb       	cmp    eax,0xeb140000
   13b26:	74 1c                	je     13b44 <check_type+0x89>
   13b28:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   13b2d:	75 1c                	jne    13b4b <check_type+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:111
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
   13b2f:	b8 04 00 00 00       	mov    eax,0x4
   13b34:	eb 1a                	jmp    13b50 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:113
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
   13b36:	b8 02 00 00 00       	mov    eax,0x2
   13b3b:	eb 13                	jmp    13b50 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:115
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
   13b3d:	b8 03 00 00 00       	mov    eax,0x3
   13b42:	eb 0c                	jmp    13b50 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:117
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
   13b44:	b8 04 00 00 00       	mov    eax,0x4
   13b49:	eb 05                	jmp    13b50 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:119
        default:
            return AHCI_DEV_SATA;
   13b4b:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:121
    }
}
   13b50:	c9                   	leave  
   13b51:	c3                   	ret    

00013b52 <ahciEnablePortMultiplier>:
ahciEnablePortMultiplier():
/home/yogi/src/os/chrisOS/src/block/ahci.c:123

void ahciEnablePortMultiplier(volatile HBA_PORT* port) {
   13b52:	55                   	push   ebp
   13b53:	89 e5                	mov    ebp,esp
   13b55:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:124
    HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   13b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b5b:	8b 00                	mov    eax,DWORD PTR [eax]
   13b5d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:126

    port->cmd.ST = 0;
   13b60:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b63:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13b66:	83 e2 fe             	and    edx,0xfffffffe
   13b69:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:130

    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
   13b6c:	83 ec 04             	sub    esp,0x4
   13b6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13b72:	68 08 62 04 00       	push   0x46208
   13b77:	68 00 20 00 00       	push   0x2000
   13b7c:	e8 92 36 01 00       	call   27213 <printd>
   13b81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:131
    int slot = find_cmdslot(port);
   13b84:	83 ec 0c             	sub    esp,0xc
   13b87:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13b8a:	e8 6a 13 00 00       	call   14ef9 <find_cmdslot>
   13b8f:	83 c4 10             	add    esp,0x10
   13b92:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:132
    if (slot == -1)
   13b95:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13b99:	0f 84 94 02 00 00    	je     13e33 <ahciEnablePortMultiplier+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:134
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13b9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ba2:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:135
    cmdheader += slot;
   13ba9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13bac:	c1 e0 05             	shl    eax,0x5
   13baf:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:136
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13bb2:	83 ec 04             	sub    esp,0x4
   13bb5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13bb8:	68 30 62 04 00       	push   0x46230
   13bbd:	68 00 20 00 00       	push   0x2000
   13bc2:	e8 4c 36 01 00       	call   27213 <printd>
   13bc7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:137
    cmdheader->prdtl = 1;
   13bca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13bcd:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:138
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13bd3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13bd6:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13bd9:	83 e2 e0             	and    edx,0xffffffe0
   13bdc:	83 ca 05             	or     edx,0x5
   13bdf:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:139
    cmdheader->w = 0;
   13be1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13be4:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13be7:	83 e2 bf             	and    edx,0xffffffbf
   13bea:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:140
    cmdheader->c = 1; //required for reset
   13bec:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13bef:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13bf3:	83 ca 04             	or     edx,0x4
   13bf6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:141
    cmdheader->p = 0;
   13bf9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13bfc:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13bff:	83 e2 7f             	and    edx,0x7f
   13c02:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:142
    cmdheader->r = 1; //srst field
   13c04:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13c07:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13c0b:	83 ca 01             	or     edx,0x1
   13c0e:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:144

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   13c11:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13c14:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13c17:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:145
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   13c1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13c1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13c20:	50                   	push   eax
   13c21:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   13c24:	68 48 62 04 00       	push   0x46248
   13c29:	68 00 20 00 00       	push   0x2000
   13c2e:	e8 e0 35 01 00       	call   27213 <printd>
   13c33:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:146
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   13c36:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13c39:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xa42000
   13c40:	20 a4 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:147
    cmdtbl->prdt_entry[0].dbc = 0;
   13c43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13c46:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   13c4c:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   13c52:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:148
    cmdtbl->prdt_entry[0].i = 0;
   13c58:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13c5b:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   13c62:	83 e2 7f             	and    edx,0x7f
   13c65:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:150

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   13c6b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13c6e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:151
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   13c71:	83 ec 04             	sub    esp,0x4
   13c74:	6a 14                	push   0x14
   13c76:	6a 00                	push   0x0
   13c78:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   13c7b:	e8 fd 13 01 00       	call   2507d <memset>
   13c80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:152
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   13c83:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c86:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:153
    cmdfis->c = 0; // Control
   13c89:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c8c:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13c90:	83 e2 7f             	and    edx,0x7f
   13c93:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:154
    cmdfis->control |= (1 << 2); //reset bit
   13c96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13c99:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   13c9d:	83 c8 04             	or     eax,0x4
   13ca0:	89 c2                	mov    edx,eax
   13ca2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13ca5:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:155
    cmdfis->pmport = 0xf;
   13ca8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13cab:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13caf:	83 ca 0f             	or     edx,0xf
   13cb2:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:156
    port->cmd.CLO = 1;
   13cb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cb8:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13cbb:	83 ca 08             	or     edx,0x8
   13cbe:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:157
    while (port->cmd.CLO);
   13cc1:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:157 (discriminator 1)
   13cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cc5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13cc8:	c1 e8 03             	shr    eax,0x3
   13ccb:	83 e0 01             	and    eax,0x1
   13cce:	84 c0                	test   al,al
   13cd0:	75 f0                	jne    13cc2 <ahciEnablePortMultiplier+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:158
    port->cmd.ST = 1;
   13cd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cd5:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13cd8:	83 ca 01             	or     edx,0x1
   13cdb:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:159
    port->ci |= slot;
   13cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ce1:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13ce4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13ce7:	09 c2                	or     edx,eax
   13ce9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cec:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:161

    slot = find_cmdslot(port);
   13cef:	83 ec 0c             	sub    esp,0xc
   13cf2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13cf5:	e8 ff 11 00 00       	call   14ef9 <find_cmdslot>
   13cfa:	83 c4 10             	add    esp,0x10
   13cfd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:162
    if (slot == -1)
   13d00:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13d04:	0f 84 2c 01 00 00    	je     13e36 <ahciEnablePortMultiplier+0x2e4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:164
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13d0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d0d:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:165
    cmdheader += slot;
   13d14:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13d17:	c1 e0 05             	shl    eax,0x5
   13d1a:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:166
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13d1d:	83 ec 04             	sub    esp,0x4
   13d20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13d23:	68 30 62 04 00       	push   0x46230
   13d28:	68 00 20 00 00       	push   0x2000
   13d2d:	e8 e1 34 01 00       	call   27213 <printd>
   13d32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:167
    cmdheader->prdtl = 1;
   13d35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d38:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:168
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13d3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d41:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13d44:	83 e2 e0             	and    edx,0xffffffe0
   13d47:	83 ca 05             	or     edx,0x5
   13d4a:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:169
    cmdheader->w = 0;
   13d4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d4f:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13d52:	83 e2 bf             	and    edx,0xffffffbf
   13d55:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:170
    cmdheader->c = 1; //required for reset
   13d57:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d5a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13d5e:	83 ca 04             	or     edx,0x4
   13d61:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:171
    cmdheader->p = 0;
   13d64:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d67:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13d6a:	83 e2 7f             	and    edx,0x7f
   13d6d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:172
    cmdheader->r = 0; //srst field
   13d6f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d72:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13d76:	83 e2 fe             	and    edx,0xfffffffe
   13d79:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:173
    cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   13d7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d7f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13d82:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:174
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   13d85:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13d88:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13d8b:	50                   	push   eax
   13d8c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   13d8f:	68 48 62 04 00       	push   0x46248
   13d94:	68 00 20 00 00       	push   0x2000
   13d99:	e8 75 34 01 00       	call   27213 <printd>
   13d9e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:175
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   13da1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13da4:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xa42000
   13dab:	20 a4 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:176
    cmdtbl->prdt_entry[0].dbc = 0;
   13dae:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13db1:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   13db7:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   13dbd:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:177
    cmdtbl->prdt_entry[0].i = 0;
   13dc3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13dc6:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   13dcd:	83 e2 7f             	and    edx,0x7f
   13dd0:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:179

    cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   13dd6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13dd9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:180
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   13ddc:	83 ec 04             	sub    esp,0x4
   13ddf:	6a 14                	push   0x14
   13de1:	6a 00                	push   0x0
   13de3:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   13de6:	e8 92 12 01 00       	call   2507d <memset>
   13deb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:181
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   13dee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13df1:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:182
    cmdfis->c = 0; // control
   13df4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13df7:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13dfb:	83 e2 7f             	and    edx,0x7f
   13dfe:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:183
    cmdfis->control &= ~(1 << 2); //reset bit
   13e01:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13e04:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   13e08:	83 e0 fb             	and    eax,0xfffffffb
   13e0b:	89 c2                	mov    edx,eax
   13e0d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13e10:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:184
    cmdfis->pmport = 0xf;
   13e13:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13e16:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13e1a:	83 ca 0f             	or     edx,0xf
   13e1d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:185
    port->ci |= slot;
   13e20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e23:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13e26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13e29:	09 c2                	or     edx,eax
   13e2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e2e:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
   13e31:	eb 04                	jmp    13e37 <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:133
    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   13e33:	90                   	nop
   13e34:	eb 01                	jmp    13e37 <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:163
    port->cmd.ST = 1;
    port->ci |= slot;

    slot = find_cmdslot(port);
    if (slot == -1)
        return;
   13e36:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:186
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
    cmdfis->c = 0; // control
    cmdfis->control &= ~(1 << 2); //reset bit
    cmdfis->pmport = 0xf;
    port->ci |= slot;
}
   13e37:	c9                   	leave  
   13e38:	c3                   	ret    

00013e39 <ahciSpinupDrive>:
ahciSpinupDrive():
/home/yogi/src/os/chrisOS/src/block/ahci.c:188

bool ahciSpinupDrive(volatile HBA_PORT* port, int portno) {
   13e39:	55                   	push   ebp
   13e3a:	89 e5                	mov    ebp,esp
   13e3c:	56                   	push   esi
   13e3d:	53                   	push   ebx
   13e3e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:189
    int waitMS = 0;
   13e41:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:190
    port->sctl.SPD = 1;
   13e48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e4b:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   13e4e:	80 e2 0f             	and    dl,0xf
   13e51:	83 ca 10             	or     edx,0x10
   13e54:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:199
    //stop_cmd(&abar->ports[i]);
    //port->cmd.PMA=1;
    //start_cmd(&abar->ports[i]);

    //Spin up the drive
    port->cmd.ST = 0;
   13e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e5a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13e5d:	83 e2 fe             	and    edx,0xfffffffe
   13e60:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:201

    port->sctl.DET = 1;
   13e63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e66:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   13e69:	83 e2 f0             	and    edx,0xfffffff0
   13e6c:	83 ca 01             	or     edx,0x1
   13e6f:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:202
    wait(100);
   13e72:	83 ec 0c             	sub    esp,0xc
   13e75:	6a 64                	push   0x64
   13e77:	e8 b6 45 01 00       	call   28432 <wait>
   13e7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:203
    port->sctl.DET = 0;
   13e7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13e82:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   13e85:	83 e2 f0             	and    edx,0xfffffff0
   13e88:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:206


    waitMS = 1000;
   13e8b:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   13e92:	eb 11                	jmp    13ea5 <ahciSpinupDrive+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:209
        wait(10);
   13e94:	83 ec 0c             	sub    esp,0xc
   13e97:	6a 0a                	push   0xa
   13e99:	e8 94 45 01 00       	call   28432 <wait>
   13e9e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:210
        waitMS -= 10;
   13ea1:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    port->sctl.DET = 0;


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   13ea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ea8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13eab:	83 e0 0f             	and    eax,0xf
   13eae:	83 f8 03             	cmp    eax,0x3
   13eb1:	74 14                	je     13ec7 <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 1)
   13eb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13eb6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13eb9:	83 e0 0f             	and    eax,0xf
   13ebc:	83 f8 01             	cmp    eax,0x1
   13ebf:	74 06                	je     13ec7 <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 2)
   13ec1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13ec5:	7f cd                	jg     13e94 <ahciSpinupDrive+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:212
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   13ec7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13ecb:	75 62                	jne    13f2f <ahciSpinupDrive+0xf6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:213
        printd(DEBUG_AHCI, "AHCI: Error spinning up device,  DET not cleared (0x%08X)\n", port->ssts);
   13ecd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ed0:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13ed3:	83 ec 04             	sub    esp,0x4
   13ed6:	50                   	push   eax
   13ed7:	68 6c 62 04 00       	push   0x4626c
   13edc:	68 00 20 00 00       	push   0x2000
   13ee1:	e8 2d 33 01 00       	call   27213 <printd>
   13ee6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:215
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   13ee9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13eec:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   13eef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ef2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13ef5:	83 ec 08             	sub    esp,0x8
   13ef8:	52                   	push   edx
   13ef9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   13efc:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   13eff:	52                   	push   edx
   13f00:	50                   	push   eax
   13f01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f04:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13f07:	50                   	push   eax
   13f08:	68 a8 62 04 00       	push   0x462a8
   13f0d:	68 00 20 00 00       	push   0x2000
   13f12:	e8 fc 32 01 00       	call   27213 <printd>
   13f17:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:216
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   13f1a:	83 ec 08             	sub    esp,0x8
   13f1d:	68 dc 62 04 00       	push   0x462dc
   13f22:	68 00 20 00 00       	push   0x2000
   13f27:	e8 e7 32 01 00       	call   27213 <printd>
   13f2c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:219
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
   13f2f:	a1 54 04 12 00       	mov    eax,ds:0x120454
   13f34:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   13f3a:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
   13f3d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   13f40:	be 01 00 00 00       	mov    esi,0x1
   13f45:	89 d1                	mov    ecx,edx
   13f47:	d3 e6                	shl    esi,cl
   13f49:	89 f2                	mov    edx,esi
   13f4b:	09 da                	or     edx,ebx
   13f4d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:220
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
   13f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f53:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   13f56:	83 ec 04             	sub    esp,0x4
   13f59:	50                   	push   eax
   13f5a:	68 f9 62 04 00       	push   0x462f9
   13f5f:	68 00 20 00 00       	push   0x2000
   13f64:	e8 aa 32 01 00       	call   27213 <printd>
   13f69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:221
    waitMS = 1000;
   13f6c:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   13f73:	eb 11                	jmp    13f86 <ahciSpinupDrive+0x14d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:224
        wait(10);
   13f75:	83 ec 0c             	sub    esp,0xc
   13f78:	6a 0a                	push   0xa
   13f7a:	e8 b3 44 01 00       	call   28432 <wait>
   13f7f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:225
        waitMS -= 10;
   13f82:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   13f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f89:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13f8c:	c1 e8 07             	shr    eax,0x7
   13f8f:	83 e0 01             	and    eax,0x1
   13f92:	84 c0                	test   al,al
   13f94:	75 0d                	jne    13fa3 <ahciSpinupDrive+0x16a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 2)
   13f96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f99:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13f9c:	83 e0 01             	and    eax,0x1
   13f9f:	84 c0                	test   al,al
   13fa1:	74 06                	je     13fa9 <ahciSpinupDrive+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 3)
   13fa3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13fa7:	7f cc                	jg     13f75 <ahciSpinupDrive+0x13c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:227
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   13fa9:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   13fad:	75 62                	jne    14011 <ahciSpinupDrive+0x1d8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:228
        printd(DEBUG_AHCI, "AHCI: Error spinning up device, BSY, DRQ OR ERR not cleared (0x%08X)\n", port->ssts);
   13faf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13fb2:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13fb5:	83 ec 04             	sub    esp,0x4
   13fb8:	50                   	push   eax
   13fb9:	68 08 63 04 00       	push   0x46308
   13fbe:	68 00 20 00 00       	push   0x2000
   13fc3:	e8 4b 32 01 00       	call   27213 <printd>
   13fc8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:230
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   13fcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13fce:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   13fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13fd4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13fd7:	83 ec 08             	sub    esp,0x8
   13fda:	52                   	push   edx
   13fdb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   13fde:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   13fe1:	52                   	push   edx
   13fe2:	50                   	push   eax
   13fe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13fe6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13fe9:	50                   	push   eax
   13fea:	68 a8 62 04 00       	push   0x462a8
   13fef:	68 00 20 00 00       	push   0x2000
   13ff4:	e8 1a 32 01 00       	call   27213 <printd>
   13ff9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:231
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   13ffc:	83 ec 08             	sub    esp,0x8
   13fff:	68 dc 62 04 00       	push   0x462dc
   14004:	68 00 20 00 00       	push   0x2000
   14009:	e8 05 32 01 00       	call   27213 <printd>
   1400e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:233
    }
    port->cmd.ST = 1;
   14011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14014:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14017:	83 ca 01             	or     edx,0x1
   1401a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:234
    if (waitMS == 0)
   1401d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   14021:	75 07                	jne    1402a <ahciSpinupDrive+0x1f1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:235
        return false;
   14023:	b8 00 00 00 00       	mov    eax,0x0
   14028:	eb 05                	jmp    1402f <ahciSpinupDrive+0x1f6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:236
    return true;
   1402a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:237
}
   1402f:	8d 65 f8             	lea    esp,[ebp-0x8]
   14032:	5b                   	pop    ebx
   14033:	5e                   	pop    esi
   14034:	5d                   	pop    ebp
   14035:	c3                   	ret    

00014036 <ahciProbePorts>:
ahciProbePorts():
/home/yogi/src/os/chrisOS/src/block/ahci.c:239

void ahciProbePorts(HBA_MEM *abar) {
   14036:	55                   	push   ebp
   14037:	89 e5                	mov    ebp,esp
   14039:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:241
    // Search disk in impelemented ports
    uint32_t pi = abar->pi;
   1403c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1403f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   14042:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:242
    int i = 0;
   14045:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:243
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
   1404c:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   14051:	c1 e0 10             	shl    eax,0x10
   14054:	05 00 20 90 00       	add    eax,0x902000
   14059:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:244
    if (pi > 0)
   1405c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   14060:	0f 84 4f 02 00 00    	je     142b5 <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:245
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
   14066:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14069:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1406c:	50                   	push   eax
   1406d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14070:	68 50 63 04 00       	push   0x46350
   14075:	68 00 20 00 00       	push   0x2000
   1407a:	e8 94 31 01 00       	call   27213 <printd>
   1407f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    while (i < 32) {
   14082:	e9 2e 02 00 00       	jmp    142b5 <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:247
        if (pi & 1) {
   14087:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1408a:	83 e0 01             	and    eax,0x1
   1408d:	85 c0                	test   eax,eax
   1408f:	0f 84 19 02 00 00    	je     142ae <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:248
        ahci_enable_port(abar,i);
   14095:	83 ec 08             	sub    esp,0x8
   14098:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1409b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1409e:	e8 d0 1b 00 00       	call   15c73 <ahci_enable_port>
   140a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:250
        //waitForPortIdle(&abar->ports[i]);
            uint32_t sig = 0;
   140a6:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:252
            //Get the SATA device signature
            int dt = check_type(&abar->ports[i], &sig);
   140ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   140b0:	83 c0 02             	add    eax,0x2
   140b3:	c1 e0 07             	shl    eax,0x7
   140b6:	89 c2                	mov    edx,eax
   140b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140bb:	01 c2                	add    edx,eax
   140bd:	83 ec 08             	sub    esp,0x8
   140c0:	8d 45 e4             	lea    eax,[ebp-0x1c]
   140c3:	50                   	push   eax
   140c4:	52                   	push   edx
   140c5:	e8 f1 f9 ff ff       	call   13abb <check_type>
   140ca:	83 c4 10             	add    esp,0x10
   140cd:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:253
            printd(DEBUG_AHCI, "AHCI: Checking port %u (0x%08X), sig=%08X\n", i, &abar->ports[i], sig);
   140d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   140d3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   140d6:	83 c2 02             	add    edx,0x2
   140d9:	89 d1                	mov    ecx,edx
   140db:	c1 e1 07             	shl    ecx,0x7
   140de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   140e1:	01 ca                	add    edx,ecx
   140e3:	83 ec 0c             	sub    esp,0xc
   140e6:	50                   	push   eax
   140e7:	52                   	push   edx
   140e8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   140eb:	68 84 63 04 00       	push   0x46384
   140f0:	68 00 20 00 00       	push   0x2000
   140f5:	e8 19 31 01 00       	call   27213 <printd>
   140fa:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:255
            //Found a SATA disk
            if (dt == AHCI_DEV_SATA) {
   140fd:	83 7d e8 01          	cmp    DWORD PTR [ebp-0x18],0x1
   14101:	0f 85 a3 00 00 00    	jne    141aa <ahciProbePorts+0x174>
/home/yogi/src/os/chrisOS/src/block/ahci.c:256
                printd(DEBUG_AHCI, "AHCI: SATA drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   14107:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1410a:	83 c0 02             	add    eax,0x2
   1410d:	c1 e0 07             	shl    eax,0x7
   14110:	89 c2                	mov    edx,eax
   14112:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14115:	01 d0                	add    eax,edx
   14117:	50                   	push   eax
   14118:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1411b:	68 b0 63 04 00       	push   0x463b0
   14120:	68 00 20 00 00       	push   0x2000
   14125:	e8 e9 30 01 00       	call   27213 <printd>
   1412a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:257
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   1412d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14130:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   14133:	83 c2 02             	add    edx,0x2
   14136:	c1 e2 07             	shl    edx,0x7
   14139:	01 d0                	add    eax,edx
   1413b:	83 c0 08             	add    eax,0x8
   1413e:	8b 10                	mov    edx,DWORD PTR [eax]
   14140:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14143:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   14146:	83 c1 02             	add    ecx,0x2
   14149:	c1 e1 07             	shl    ecx,0x7
   1414c:	01 c8                	add    eax,ecx
   1414e:	8b 00                	mov    eax,DWORD PTR [eax]
   14150:	52                   	push   edx
   14151:	50                   	push   eax
   14152:	68 dc 63 04 00       	push   0x463dc
   14157:	68 00 20 00 00       	push   0x2000
   1415c:	e8 b2 30 01 00       	call   27213 <printd>
   14161:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:258
                port_rebase(&abar->ports[i], i, rb);
   14164:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14167:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1416a:	83 c2 02             	add    edx,0x2
   1416d:	89 d1                	mov    ecx,edx
   1416f:	c1 e1 07             	shl    ecx,0x7
   14172:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14175:	01 ca                	add    edx,ecx
   14177:	83 ec 04             	sub    esp,0x4
   1417a:	50                   	push   eax
   1417b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1417e:	52                   	push   edx
   1417f:	e8 5c 07 00 00       	call   148e0 <port_rebase>
   14184:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:261
                	//det reset, disable slumber and Partial state
			//reset port, send COMRESET signal
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATA);
   14187:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1418a:	83 c0 02             	add    eax,0x2
   1418d:	c1 e0 07             	shl    eax,0x7
   14190:	89 c2                	mov    edx,eax
   14192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14195:	01 d0                	add    eax,edx
   14197:	83 ec 08             	sub    esp,0x8
   1419a:	6a 01                	push   0x1
   1419c:	50                   	push   eax
   1419d:	e8 b6 09 00 00       	call   14b58 <ahciIdentify>
   141a2:	83 c4 10             	add    esp,0x10
   141a5:	e9 04 01 00 00       	jmp    142ae <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:271
                    printk("AHCI: Successfully read sector 0 from device to 0x%08X\n",ahciReadBuff);
                    printk("AHCI: Read Buffer: %s\n",ahciReadBuff);
                    printk("sig=0x%08X\n",abar->ports[i].sig);
                }
                 */
            } else if (dt == AHCI_DEV_SATAPI) {
   141aa:	83 7d e8 04          	cmp    DWORD PTR [ebp-0x18],0x4
   141ae:	0f 85 a0 00 00 00    	jne    14254 <ahciProbePorts+0x21e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:272
                printd(DEBUG_AHCI, "AHCI:SATAPI drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   141b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   141b7:	83 c0 02             	add    eax,0x2
   141ba:	c1 e0 07             	shl    eax,0x7
   141bd:	89 c2                	mov    edx,eax
   141bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141c2:	01 d0                	add    eax,edx
   141c4:	50                   	push   eax
   141c5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   141c8:	68 fc 63 04 00       	push   0x463fc
   141cd:	68 00 20 00 00       	push   0x2000
   141d2:	e8 3c 30 01 00       	call   27213 <printd>
   141d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:273
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   141da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141dd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   141e0:	83 c2 02             	add    edx,0x2
   141e3:	c1 e2 07             	shl    edx,0x7
   141e6:	01 d0                	add    eax,edx
   141e8:	83 c0 08             	add    eax,0x8
   141eb:	8b 10                	mov    edx,DWORD PTR [eax]
   141ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141f0:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   141f3:	83 c1 02             	add    ecx,0x2
   141f6:	c1 e1 07             	shl    ecx,0x7
   141f9:	01 c8                	add    eax,ecx
   141fb:	8b 00                	mov    eax,DWORD PTR [eax]
   141fd:	52                   	push   edx
   141fe:	50                   	push   eax
   141ff:	68 dc 63 04 00       	push   0x463dc
   14204:	68 00 20 00 00       	push   0x2000
   14209:	e8 05 30 01 00       	call   27213 <printd>
   1420e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:274
                port_rebase(&abar->ports[i], i, rb);
   14211:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14214:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   14217:	83 c2 02             	add    edx,0x2
   1421a:	89 d1                	mov    ecx,edx
   1421c:	c1 e1 07             	shl    ecx,0x7
   1421f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14222:	01 ca                	add    edx,ecx
   14224:	83 ec 04             	sub    esp,0x4
   14227:	50                   	push   eax
   14228:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1422b:	52                   	push   edx
   1422c:	e8 af 06 00 00       	call   148e0 <port_rebase>
   14231:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:276
                //Run an ATA_IDENTIFY
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATAPI);
   14234:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14237:	83 c0 02             	add    eax,0x2
   1423a:	c1 e0 07             	shl    eax,0x7
   1423d:	89 c2                	mov    edx,eax
   1423f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14242:	01 d0                	add    eax,edx
   14244:	83 ec 08             	sub    esp,0x8
   14247:	6a 04                	push   0x4
   14249:	50                   	push   eax
   1424a:	e8 09 09 00 00       	call   14b58 <ahciIdentify>
   1424f:	83 c4 10             	add    esp,0x10
   14252:	eb 5a                	jmp    142ae <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:277
            } else if (dt == AHCI_DEV_SEMB) {
   14254:	83 7d e8 02          	cmp    DWORD PTR [ebp-0x18],0x2
   14258:	75 28                	jne    14282 <ahciProbePorts+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:278
                printd(DEBUG_AHCI, "AHCI: SEMB drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1425a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1425d:	83 c0 02             	add    eax,0x2
   14260:	c1 e0 07             	shl    eax,0x7
   14263:	89 c2                	mov    edx,eax
   14265:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14268:	01 d0                	add    eax,edx
   1426a:	50                   	push   eax
   1426b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1426e:	68 2c 64 04 00       	push   0x4642c
   14273:	68 00 20 00 00       	push   0x2000
   14278:	e8 96 2f 01 00       	call   27213 <printd>
   1427d:	83 c4 10             	add    esp,0x10
   14280:	eb 2c                	jmp    142ae <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:280
                //port_rebase(abar->ports,i,rb+=0x10000);
            } else if (dt == AHCI_DEV_PM) {
   14282:	83 7d e8 03          	cmp    DWORD PTR [ebp-0x18],0x3
   14286:	75 26                	jne    142ae <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:281
                printd(DEBUG_AHCI, "AHCI: PM drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   14288:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1428b:	83 c0 02             	add    eax,0x2
   1428e:	c1 e0 07             	shl    eax,0x7
   14291:	89 c2                	mov    edx,eax
   14293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14296:	01 d0                	add    eax,edx
   14298:	50                   	push   eax
   14299:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1429c:	68 58 64 04 00       	push   0x46458
   142a1:	68 00 20 00 00       	push   0x2000
   142a6:	e8 68 2f 01 00       	call   27213 <printd>
   142ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:290
            //			{
            //				printk("No drive found at port %d\n", i);
            //			}
        }

        pi >>= 1;
   142ae:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:291
        i++;
   142b1:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    uint32_t pi = abar->pi;
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
   142b5:	83 7d f0 1f          	cmp    DWORD PTR [ebp-0x10],0x1f
   142b9:	0f 8e c8 fd ff ff    	jle    14087 <ahciProbePorts+0x51>
/home/yogi/src/os/chrisOS/src/block/ahci.c:293
        }

        pi >>= 1;
        i++;
    }
}
   142bf:	90                   	nop
   142c0:	c9                   	leave  
   142c1:	c3                   	ret    

000142c2 <printAHCICaps>:
printAHCICaps():
/home/yogi/src/os/chrisOS/src/block/ahci.c:295

void printAHCICaps() {
   142c2:	55                   	push   ebp
   142c3:	89 e5                	mov    ebp,esp
   142c5:	57                   	push   edi
   142c6:	56                   	push   esi
   142c7:	53                   	push   ebx
   142c8:	81 ec 2c 02 00 00    	sub    esp,0x22c
/home/yogi/src/os/chrisOS/src/block/ahci.c:297
    //printk("ahciCaps=0x%08X, sizeof=%u\n",ahciCaps,sizeof(ahcicaps_t));
    terminal_clear();
   142ce:	e8 5b 39 00 00       	call   17c2e <terminal_clear>
/home/yogi/src/os/chrisOS/src/block/ahci.c:298
    printk("AHCI Caps:\n");
   142d3:	83 ec 0c             	sub    esp,0xc
   142d6:	68 82 64 04 00       	push   0x46482
   142db:	e8 13 2f 01 00       	call   271f3 <printk>
   142e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:299
    printk("\tSupports 64-bit Addressing (S64A):\t\t\t\t%s\n", ahciCaps->S64A ? "Yes" : "No");
   142e3:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   142e8:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   142ec:	83 e0 80             	and    eax,0xffffff80
   142ef:	84 c0                	test   al,al
   142f1:	74 07                	je     142fa <printAHCICaps+0x38>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 1)
   142f3:	b8 8e 64 04 00       	mov    eax,0x4648e
   142f8:	eb 05                	jmp    142ff <printAHCICaps+0x3d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 2)
   142fa:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 4)
   142ff:	83 ec 08             	sub    esp,0x8
   14302:	50                   	push   eax
   14303:	68 98 64 04 00       	push   0x46498
   14308:	e8 e6 2e 01 00       	call   271f3 <printk>
   1430d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
    printk("\tSupprorts Native Command Queueing (SNCQ):\t\t%s\n", ahciCaps->SNCQ ? "Yes" : "No");
   14310:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14315:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14319:	83 e0 40             	and    eax,0x40
   1431c:	84 c0                	test   al,al
   1431e:	74 07                	je     14327 <printAHCICaps+0x65>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 1)
   14320:	b8 8e 64 04 00       	mov    eax,0x4648e
   14325:	eb 05                	jmp    1432c <printAHCICaps+0x6a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 2)
   14327:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
   1432c:	83 ec 08             	sub    esp,0x8
   1432f:	50                   	push   eax
   14330:	68 c4 64 04 00       	push   0x464c4
   14335:	e8 b9 2e 01 00       	call   271f3 <printk>
   1433a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
    printk("\tSupports SNotification Register (SSNTF):\t\t%s\n", ahciCaps->SSNTF ? "Yes" : "No");
   1433d:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14342:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14346:	83 e0 20             	and    eax,0x20
   14349:	84 c0                	test   al,al
   1434b:	74 07                	je     14354 <printAHCICaps+0x92>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 1)
   1434d:	b8 8e 64 04 00       	mov    eax,0x4648e
   14352:	eb 05                	jmp    14359 <printAHCICaps+0x97>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 2)
   14354:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
   14359:	83 ec 08             	sub    esp,0x8
   1435c:	50                   	push   eax
   1435d:	68 f4 64 04 00       	push   0x464f4
   14362:	e8 8c 2e 01 00       	call   271f3 <printk>
   14367:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
    printk("\tSupports Mechanical Presence Switch (SMPS):\t\t%s\n", ahciCaps->SMPS ? "Yes" : "No");
   1436a:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1436f:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14373:	83 e0 10             	and    eax,0x10
   14376:	84 c0                	test   al,al
   14378:	74 07                	je     14381 <printAHCICaps+0xbf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 1)
   1437a:	b8 8e 64 04 00       	mov    eax,0x4648e
   1437f:	eb 05                	jmp    14386 <printAHCICaps+0xc4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 2)
   14381:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
   14386:	83 ec 08             	sub    esp,0x8
   14389:	50                   	push   eax
   1438a:	68 24 65 04 00       	push   0x46524
   1438f:	e8 5f 2e 01 00       	call   271f3 <printk>
   14394:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
    printk("\tSupports Staggered Spin-up (SSS):\t\t\t\t%s\n", ahciCaps->SSS ? "Yes" : "No");
   14397:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1439c:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   143a0:	83 e0 08             	and    eax,0x8
   143a3:	84 c0                	test   al,al
   143a5:	74 07                	je     143ae <printAHCICaps+0xec>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 1)
   143a7:	b8 8e 64 04 00       	mov    eax,0x4648e
   143ac:	eb 05                	jmp    143b3 <printAHCICaps+0xf1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 2)
   143ae:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
   143b3:	83 ec 08             	sub    esp,0x8
   143b6:	50                   	push   eax
   143b7:	68 58 65 04 00       	push   0x46558
   143bc:	e8 32 2e 01 00       	call   271f3 <printk>
   143c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
    printk("\tSupports Aggressive Link Power Management (SALP):\t%s\n", ahciCaps->SALP ? "Yes" : "No");
   143c4:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   143c9:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   143cd:	83 e0 04             	and    eax,0x4
   143d0:	84 c0                	test   al,al
   143d2:	74 07                	je     143db <printAHCICaps+0x119>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 1)
   143d4:	b8 8e 64 04 00       	mov    eax,0x4648e
   143d9:	eb 05                	jmp    143e0 <printAHCICaps+0x11e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 2)
   143db:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
   143e0:	83 ec 08             	sub    esp,0x8
   143e3:	50                   	push   eax
   143e4:	68 84 65 04 00       	push   0x46584
   143e9:	e8 05 2e 01 00       	call   271f3 <printk>
   143ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
    printk("\tSupports Active LED (SAL):\t\t\t\t\t%s\n", ahciCaps->SAL ? "Yes" : "No");
   143f1:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   143f6:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   143fa:	83 e0 02             	and    eax,0x2
   143fd:	84 c0                	test   al,al
   143ff:	74 07                	je     14408 <printAHCICaps+0x146>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 1)
   14401:	b8 8e 64 04 00       	mov    eax,0x4648e
   14406:	eb 05                	jmp    1440d <printAHCICaps+0x14b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 2)
   14408:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
   1440d:	83 ec 08             	sub    esp,0x8
   14410:	50                   	push   eax
   14411:	68 bc 65 04 00       	push   0x465bc
   14416:	e8 d8 2d 01 00       	call   271f3 <printk>
   1441b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
    printk("\tSupports Command List Override (SCLO):\t\t\t%s\n", ahciCaps->SCLO ? "Yes" : "No");
   1441e:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14423:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14427:	83 e0 01             	and    eax,0x1
   1442a:	84 c0                	test   al,al
   1442c:	74 07                	je     14435 <printAHCICaps+0x173>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 1)
   1442e:	b8 8e 64 04 00       	mov    eax,0x4648e
   14433:	eb 05                	jmp    1443a <printAHCICaps+0x178>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 2)
   14435:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
   1443a:	83 ec 08             	sub    esp,0x8
   1443d:	50                   	push   eax
   1443e:	68 e0 65 04 00       	push   0x465e0
   14443:	e8 ab 2d 01 00       	call   271f3 <printk>
   14448:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
    printk("\tInterface Speed Support (ISS):\t\t\t\t%s\n", ahciCaps->ISS == 1 ? "1.5 Gbps" : ahciCaps->ISS == 2 ? "3 Gbps" : ahciCaps->ISS == 3 ? "6 Gbps" : "Reserved");
   1444b:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14450:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14454:	83 e0 f0             	and    eax,0xfffffff0
   14457:	3c 10                	cmp    al,0x10
   14459:	74 35                	je     14490 <printAHCICaps+0x1ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 1)
   1445b:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14460:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14464:	83 e0 f0             	and    eax,0xfffffff0
   14467:	3c 20                	cmp    al,0x20
   14469:	74 1e                	je     14489 <printAHCICaps+0x1c7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 3)
   1446b:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14470:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14474:	83 e0 f0             	and    eax,0xfffffff0
   14477:	3c 30                	cmp    al,0x30
   14479:	75 07                	jne    14482 <printAHCICaps+0x1c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 5)
   1447b:	b8 0e 66 04 00       	mov    eax,0x4660e
   14480:	eb 13                	jmp    14495 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 6)
   14482:	b8 15 66 04 00       	mov    eax,0x46615
   14487:	eb 0c                	jmp    14495 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
   14489:	b8 1e 66 04 00       	mov    eax,0x4661e
   1448e:	eb 05                	jmp    14495 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 2)
   14490:	b8 25 66 04 00       	mov    eax,0x46625
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 12)
   14495:	83 ec 08             	sub    esp,0x8
   14498:	50                   	push   eax
   14499:	68 30 66 04 00       	push   0x46630
   1449e:	e8 50 2d 01 00       	call   271f3 <printk>
   144a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 12)
    printk("\tSupports AHCI mode only (SAM):\t\t\t\t%s\n", ahciCaps->SAM ? "Yes" : "No");
   144a6:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   144ab:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   144af:	83 e0 04             	and    eax,0x4
   144b2:	84 c0                	test   al,al
   144b4:	74 07                	je     144bd <printAHCICaps+0x1fb>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 1)
   144b6:	b8 8e 64 04 00       	mov    eax,0x4648e
   144bb:	eb 05                	jmp    144c2 <printAHCICaps+0x200>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 2)
   144bd:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 4)
   144c2:	83 ec 08             	sub    esp,0x8
   144c5:	50                   	push   eax
   144c6:	68 58 66 04 00       	push   0x46658
   144cb:	e8 23 2d 01 00       	call   271f3 <printk>
   144d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
    printk("\tSupports Port Multiplier (SPM):\t\t\t\t%s\n", ahciCaps->SPM ? "Yes" : "No");
   144d3:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   144d8:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   144dc:	83 e0 02             	and    eax,0x2
   144df:	84 c0                	test   al,al
   144e1:	74 07                	je     144ea <printAHCICaps+0x228>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 1)
   144e3:	b8 8e 64 04 00       	mov    eax,0x4648e
   144e8:	eb 05                	jmp    144ef <printAHCICaps+0x22d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 2)
   144ea:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
   144ef:	83 ec 08             	sub    esp,0x8
   144f2:	50                   	push   eax
   144f3:	68 80 66 04 00       	push   0x46680
   144f8:	e8 f6 2c 01 00       	call   271f3 <printk>
   144fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
    printk("\tFIS-based Switching Support (FBSS):\t\t\t%s\n", ahciCaps->FBSS ? "Yes" : "No");   
   14500:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14505:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14509:	83 e0 01             	and    eax,0x1
   1450c:	84 c0                	test   al,al
   1450e:	74 07                	je     14517 <printAHCICaps+0x255>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 1)
   14510:	b8 8e 64 04 00       	mov    eax,0x4648e
   14515:	eb 05                	jmp    1451c <printAHCICaps+0x25a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 2)
   14517:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
   1451c:	83 ec 08             	sub    esp,0x8
   1451f:	50                   	push   eax
   14520:	68 a8 66 04 00       	push   0x466a8
   14525:	e8 c9 2c 01 00       	call   271f3 <printk>
   1452a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
    printk("\tPIO Multiple DRQ Block (PMD):\t\t\t\t\t%s\n", ahciCaps->PMD ? "Yes" : "No");
   1452d:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14532:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14536:	83 e0 80             	and    eax,0xffffff80
   14539:	84 c0                	test   al,al
   1453b:	74 07                	je     14544 <printAHCICaps+0x282>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 1)
   1453d:	b8 8e 64 04 00       	mov    eax,0x4648e
   14542:	eb 05                	jmp    14549 <printAHCICaps+0x287>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 2)
   14544:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
   14549:	83 ec 08             	sub    esp,0x8
   1454c:	50                   	push   eax
   1454d:	68 d4 66 04 00       	push   0x466d4
   14552:	e8 9c 2c 01 00       	call   271f3 <printk>
   14557:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
    printk("\tSlumber State Capable (SSC):\t\t\t\t\t%s\n", ahciCaps->SSC ? "Yes" : "No");
   1455a:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1455f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14563:	83 e0 40             	and    eax,0x40
   14566:	84 c0                	test   al,al
   14568:	74 07                	je     14571 <printAHCICaps+0x2af>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 1)
   1456a:	b8 8e 64 04 00       	mov    eax,0x4648e
   1456f:	eb 05                	jmp    14576 <printAHCICaps+0x2b4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 2)
   14571:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
   14576:	83 ec 08             	sub    esp,0x8
   14579:	50                   	push   eax
   1457a:	68 fc 66 04 00       	push   0x466fc
   1457f:	e8 6f 2c 01 00       	call   271f3 <printk>
   14584:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
    printk("\tPartial State Capable (PSC):\t\t\t\t\t%s\n", ahciCaps->PSC ? "Yes" : "No");
   14587:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1458c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14590:	83 e0 20             	and    eax,0x20
   14593:	84 c0                	test   al,al
   14595:	74 07                	je     1459e <printAHCICaps+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 1)
   14597:	b8 8e 64 04 00       	mov    eax,0x4648e
   1459c:	eb 05                	jmp    145a3 <printAHCICaps+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 2)
   1459e:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
   145a3:	83 ec 08             	sub    esp,0x8
   145a6:	50                   	push   eax
   145a7:	68 24 67 04 00       	push   0x46724
   145ac:	e8 42 2c 01 00       	call   271f3 <printk>
   145b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:314 (discriminator 4)
    printk("\tNumber of Command Slots (NSC):\t\t\t\t%u\n", ahciCaps->NCS);
   145b4:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   145b9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   145bd:	83 e0 1f             	and    eax,0x1f
   145c0:	0f b6 c0             	movzx  eax,al
   145c3:	83 ec 08             	sub    esp,0x8
   145c6:	50                   	push   eax
   145c7:	68 4c 67 04 00       	push   0x4674c
   145cc:	e8 22 2c 01 00       	call   271f3 <printk>
   145d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
    printk("\tCommand Completion Coalescing Supported (CCCS):\t%s\n", ahciCaps->CCCS ? "Yes" : "No");
   145d4:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   145d9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   145dc:	83 e0 80             	and    eax,0xffffff80
   145df:	84 c0                	test   al,al
   145e1:	74 07                	je     145ea <printAHCICaps+0x328>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 1)
   145e3:	b8 8e 64 04 00       	mov    eax,0x4648e
   145e8:	eb 05                	jmp    145ef <printAHCICaps+0x32d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 2)
   145ea:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
   145ef:	83 ec 08             	sub    esp,0x8
   145f2:	50                   	push   eax
   145f3:	68 74 67 04 00       	push   0x46774
   145f8:	e8 f6 2b 01 00       	call   271f3 <printk>
   145fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
    printk("\tEnclosure Management Supported (EMS):\t\t\t%s\n", ahciCaps->EMS ? "Yes" : "No");
   14600:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14605:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14608:	83 e0 40             	and    eax,0x40
   1460b:	84 c0                	test   al,al
   1460d:	74 07                	je     14616 <printAHCICaps+0x354>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 1)
   1460f:	b8 8e 64 04 00       	mov    eax,0x4648e
   14614:	eb 05                	jmp    1461b <printAHCICaps+0x359>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 2)
   14616:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
   1461b:	83 ec 08             	sub    esp,0x8
   1461e:	50                   	push   eax
   1461f:	68 ac 67 04 00       	push   0x467ac
   14624:	e8 ca 2b 01 00       	call   271f3 <printk>
   14629:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
    printk("\tSupports External SATA (SXS):\t\t\t\t\t%s\n", ahciCaps->SXS ? "Yes" : "No");
   1462c:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   14631:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14634:	83 e0 20             	and    eax,0x20
   14637:	84 c0                	test   al,al
   14639:	74 07                	je     14642 <printAHCICaps+0x380>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 1)
   1463b:	b8 8e 64 04 00       	mov    eax,0x4648e
   14640:	eb 05                	jmp    14647 <printAHCICaps+0x385>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 2)
   14642:	b8 92 64 04 00       	mov    eax,0x46492
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
   14647:	83 ec 08             	sub    esp,0x8
   1464a:	50                   	push   eax
   1464b:	68 dc 67 04 00       	push   0x467dc
   14650:	e8 9e 2b 01 00       	call   271f3 <printk>
   14655:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:318 (discriminator 4)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
   14658:	a1 e8 03 12 00       	mov    eax,ds:0x1203e8
   1465d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14660:	83 e0 1f             	and    eax,0x1f
   14663:	0f b6 c0             	movzx  eax,al
   14666:	83 ec 08             	sub    esp,0x8
   14669:	50                   	push   eax
   1466a:	68 04 68 04 00       	push   0x46804
   1466f:	e8 7f 2b 01 00       	call   271f3 <printk>
   14674:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:321 (discriminator 4)
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
   14677:	83 ec 0c             	sub    esp,0xc
   1467a:	68 24 68 04 00       	push   0x46824
   1467f:	e8 6f 2b 01 00       	call   271f3 <printk>
   14684:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 4)
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   14687:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   1468e:	e9 3a 02 00 00       	jmp    148cd <printAHCICaps+0x60b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:324
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
   14693:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14699:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1469c:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   146a2:	01 d0                	add    eax,edx
   146a4:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   146ab:	84 c0                	test   al,al
   146ad:	0f 84 16 02 00 00    	je     148c9 <printAHCICaps+0x607>
/home/yogi/src/os/chrisOS/src/block/ahci.c:325
            memset(p1, 0, 512);
   146b3:	83 ec 04             	sub    esp,0x4
   146b6:	68 00 02 00 00       	push   0x200
   146bb:	6a 00                	push   0x0
   146bd:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   146c3:	50                   	push   eax
   146c4:	e8 b4 09 01 00       	call   2507d <memset>
   146c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:326
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
   146cc:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   146d2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   146d5:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   146db:	01 d0                	add    eax,edx
   146dd:	05 00 02 00 00       	add    eax,0x200
   146e2:	83 ec 08             	sub    esp,0x8
   146e5:	50                   	push   eax
   146e6:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   146ec:	50                   	push   eax
   146ed:	e8 62 2c 01 00       	call   27354 <strcpy>
   146f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:327
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
   146f5:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   146fb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   146fe:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14704:	01 d0                	add    eax,edx
   14706:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   1470d:	3c 01                	cmp    al,0x1
   1470f:	75 08                	jne    14719 <printAHCICaps+0x457>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 1)
   14711:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14717:	eb 05                	jmp    1471e <printAHCICaps+0x45c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 2)
   14719:	b8 37 68 04 00       	mov    eax,0x46837
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 4)
   1471e:	83 ec 04             	sub    esp,0x4
   14721:	50                   	push   eax
   14722:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   14725:	68 3d 68 04 00       	push   0x4683d
   1472a:	e8 c4 2a 01 00       	call   271f3 <printk>
   1472f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:335 (discriminator 4)
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
   14732:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14738:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1473b:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14741:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14743:	8b b8 69 02 00 00    	mov    edi,DWORD PTR [eax+0x269]
/home/yogi/src/os/chrisOS/src/block/ahci.c:334 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
   14749:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   1474f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14752:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14758:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   1475a:	8b b0 6f 02 00 00    	mov    esi,DWORD PTR [eax+0x26f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:333 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
   14760:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14766:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14769:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1476f:	01 d0                	add    eax,edx
   14771:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14778:	84 c0                	test   al,al
   1477a:	74 0c                	je     14788 <printAHCICaps+0x4c6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 1)
   1477c:	c7 85 d4 fd ff ff 52 	mov    DWORD PTR [ebp-0x22c],0x46852
   14783:	68 04 00 
   14786:	eb 0a                	jmp    14792 <printAHCICaps+0x4d0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 2)
   14788:	c7 85 d4 fd ff ff 57 	mov    DWORD PTR [ebp-0x22c],0x46857
   1478f:	68 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:332 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
   14792:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14798:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1479b:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   147a1:	01 d0                	add    eax,edx
   147a3:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   147aa:	84 c0                	test   al,al
   147ac:	74 0c                	je     147ba <printAHCICaps+0x4f8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 5)
   147ae:	c7 85 d0 fd ff ff 58 	mov    DWORD PTR [ebp-0x230],0x46858
   147b5:	68 04 00 
   147b8:	eb 0a                	jmp    147c4 <printAHCICaps+0x502>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 6)
   147ba:	c7 85 d0 fd ff ff 57 	mov    DWORD PTR [ebp-0x230],0x46857
   147c1:	68 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:331 (discriminator 8)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
   147c4:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   147ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   147cd:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   147d3:	01 d0                	add    eax,edx
   147d5:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 8)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   147dc:	84 c0                	test   al,al
   147de:	74 0c                	je     147ec <printAHCICaps+0x52a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 9)
   147e0:	c7 85 cc fd ff ff 5f 	mov    DWORD PTR [ebp-0x234],0x4685f
   147e7:	68 04 00 
   147ea:	eb 0a                	jmp    147f6 <printAHCICaps+0x534>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 10)
   147ec:	c7 85 cc fd ff ff 57 	mov    DWORD PTR [ebp-0x234],0x46857
   147f3:	68 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:330
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
   147f6:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   147fc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   147ff:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14805:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14807:	8b 98 5a 02 00 00    	mov    ebx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/block/ahci.c:329
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
   1480d:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14813:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14816:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1481c:	01 d0                	add    eax,edx
   1481e:	8b 88 56 02 00 00    	mov    ecx,DWORD PTR [eax+0x256]
   14824:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   1482a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1482d:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14833:	01 d0                	add    eax,edx
   14835:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   1483b:	0f af c1             	imul   eax,ecx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   1483e:	c1 e8 14             	shr    eax,0x14
   14841:	57                   	push   edi
   14842:	56                   	push   esi
   14843:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
   14849:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
   1484f:	ff b5 cc fd ff ff    	push   DWORD PTR [ebp-0x234]
   14855:	53                   	push   ebx
   14856:	50                   	push   eax
   14857:	68 64 68 04 00       	push   0x46864
   1485c:	e8 92 29 01 00       	call   271f3 <printk>
   14861:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:336
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
            volatile HBA_PORT* port = (HBA_PORT*) kATADeviceInfo[cnt].ioPort;
   14864:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   1486a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1486d:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14873:	01 d0                	add    eax,edx
   14875:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   1487b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:337
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   1487e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14881:	8b 00                	mov    eax,DWORD PTR [eax]
   14883:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:338
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14886:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   14889:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1488c:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:339
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
   1488f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14892:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14895:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14898:	8b 00                	mov    eax,DWORD PTR [eax]
   1489a:	83 ec 04             	sub    esp,0x4
   1489d:	52                   	push   edx
   1489e:	50                   	push   eax
   1489f:	68 96 68 04 00       	push   0x46896
   148a4:	e8 4a 29 01 00       	call   271f3 <printk>
   148a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:340
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
   148ac:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   148af:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   148b2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   148b5:	8b 00                	mov    eax,DWORD PTR [eax]
   148b7:	83 ec 04             	sub    esp,0x4
   148ba:	52                   	push   edx
   148bb:	50                   	push   eax
   148bc:	68 b0 68 04 00       	push   0x468b0
   148c1:	e8 2d 29 01 00       	call   271f3 <printk>
   148c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 2)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   148c9:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 1)
   148cd:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   148d1:	0f 8e bc fd ff ff    	jle    14693 <printAHCICaps+0x3d1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:342
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}
   148d7:	90                   	nop
   148d8:	8d 65 f4             	lea    esp,[ebp-0xc]
   148db:	5b                   	pop    ebx
   148dc:	5e                   	pop    esi
   148dd:	5f                   	pop    edi
   148de:	5d                   	pop    ebp
   148df:	c3                   	ret    

000148e0 <port_rebase>:
port_rebase():
/home/yogi/src/os/chrisOS/src/block/ahci.c:344

void port_rebase(volatile HBA_PORT *port, int portno, uintptr_t remapBase) {
   148e0:	55                   	push   ebp
   148e1:	89 e5                	mov    ebp,esp
   148e3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:346
    //each command list is 1k (32k possible per port))
    printd(DEBUG_AHCI, "AHCI: Rebasing port %u (0x%08X) clb/fb from 0x%08X/0x%08X\n\t", portno, port, port->clb, port->fb);
   148e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148e9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   148ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   148ef:	8b 00                	mov    eax,DWORD PTR [eax]
   148f1:	83 ec 08             	sub    esp,0x8
   148f4:	52                   	push   edx
   148f5:	50                   	push   eax
   148f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   148f9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   148fc:	68 d8 68 04 00       	push   0x468d8
   14901:	68 00 20 00 00       	push   0x2000
   14906:	e8 08 29 01 00       	call   27213 <printd>
   1490b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:347
    stop_cmd(port); // Stop command engine
   1490e:	83 ec 0c             	sub    esp,0xc
   14911:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14914:	e8 eb 01 00 00       	call   14b04 <stop_cmd>
   14919:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:353

    // Command list offset: 1K*portno
    // Command list entry size = 32
    // Command list entry maxim count = 32
    // Command list maxim size = 32*32 = 1K per port
    port->clbu = 0;
   1491c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1491f:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:354
    port->clb = (remapBase + (portno<<15) + 0x1000) & 0xFFFFF000;
   14926:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   14929:	c1 e0 0f             	shl    eax,0xf
   1492c:	89 c2                	mov    edx,eax
   1492e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14931:	01 d0                	add    eax,edx
   14933:	05 00 10 00 00       	add    eax,0x1000
   14938:	25 00 f0 ff ff       	and    eax,0xfffff000
   1493d:	89 c2                	mov    edx,eax
   1493f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14942:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:355
    memset((void*) (port->clb), 0, 1024);
   14944:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14947:	8b 00                	mov    eax,DWORD PTR [eax]
   14949:	83 ec 04             	sub    esp,0x4
   1494c:	68 00 04 00 00       	push   0x400
   14951:	6a 00                	push   0x0
   14953:	50                   	push   eax
   14954:	e8 24 07 01 00       	call   2507d <memset>
   14959:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:356
    kMapPage(port->clb,port->clb,0x73); //make un-cached
   1495c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1495f:	8b 10                	mov    edx,DWORD PTR [eax]
   14961:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14964:	8b 00                	mov    eax,DWORD PTR [eax]
   14966:	83 ec 04             	sub    esp,0x4
   14969:	6a 73                	push   0x73
   1496b:	52                   	push   edx
   1496c:	50                   	push   eax
   1496d:	e8 c5 cd ff ff       	call   11737 <kMapPage>
   14972:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:361
    
    //each FIS is 256 bytes
    // FIS offset: 32K+256*portno
    // FIS entry size = 256 bytes per port
    port->fbu = 0;
   14975:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14978:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:363
//    port->fb = (remapBase + (32 << 10) + (portno << 12) + 0x1000) & 0xFFFFF000;
    port->fb = (port->clb + 0x1000);
   1497f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14982:	8b 00                	mov    eax,DWORD PTR [eax]
   14984:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
   1498a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1498d:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:364
    memset((void*) (port->fb), 0, 256);
   14990:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14993:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14996:	83 ec 04             	sub    esp,0x4
   14999:	68 00 01 00 00       	push   0x100
   1499e:	6a 00                	push   0x0
   149a0:	50                   	push   eax
   149a1:	e8 d7 06 01 00       	call   2507d <memset>
   149a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:365
    kMapPage(port->fb,port->fb,0x73); //make un-cached
   149a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   149ac:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   149af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   149b2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   149b5:	83 ec 04             	sub    esp,0x4
   149b8:	6a 73                	push   0x73
   149ba:	52                   	push   edx
   149bb:	50                   	push   eax
   149bc:	e8 76 cd ff ff       	call   11737 <kMapPage>
   149c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:370


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
   149c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   149c7:	8b 00                	mov    eax,DWORD PTR [eax]
   149c9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:371
    for (int i = 0; i < 32; i++) {
   149cc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   149d3:	eb 79                	jmp    14a4e <port_rebase+0x16e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:372 (discriminator 3)
        cmdheader[i].prdtl = 8; // 8 prdt entries per command table
   149d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   149d8:	c1 e0 05             	shl    eax,0x5
   149db:	89 c2                	mov    edx,eax
   149dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   149e0:	01 d0                	add    eax,edx
   149e2:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:375 (discriminator 3)
        // 256 bytes per command table, 64+16+48+16*8
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
   149e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   149eb:	c1 e0 05             	shl    eax,0x5
   149ee:	89 c2                	mov    edx,eax
   149f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   149f3:	01 d0                	add    eax,edx
   149f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   149f8:	c1 e2 0d             	shl    edx,0xd
   149fb:	89 d1                	mov    ecx,edx
   149fd:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   14a00:	01 d1                	add    ecx,edx
   14a02:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   14a05:	c1 e2 08             	shl    edx,0x8
   14a08:	01 ca                	add    edx,ecx
   14a0a:	81 c2 00 a0 00 00    	add    edx,0xa000
   14a10:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:376 (discriminator 3)
        cmdheader[i].ctbau = 0;
   14a13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14a16:	c1 e0 05             	shl    eax,0x5
   14a19:	89 c2                	mov    edx,eax
   14a1b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14a1e:	01 d0                	add    eax,edx
   14a20:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:377 (discriminator 3)
        memset((void*) cmdheader[i].ctba, 0, 256);
   14a27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14a2a:	c1 e0 05             	shl    eax,0x5
   14a2d:	89 c2                	mov    edx,eax
   14a2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14a32:	01 d0                	add    eax,edx
   14a34:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14a37:	83 ec 04             	sub    esp,0x4
   14a3a:	68 00 01 00 00       	push   0x100
   14a3f:	6a 00                	push   0x0
   14a41:	50                   	push   eax
   14a42:	e8 36 06 01 00       	call   2507d <memset>
   14a47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 3)


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
    for (int i = 0; i < 32; i++) {
   14a4a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 1)
   14a4e:	83 7d f4 1f          	cmp    DWORD PTR [ebp-0xc],0x1f
   14a52:	7e 81                	jle    149d5 <port_rebase+0xf5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:379
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
        cmdheader[i].ctbau = 0;
        memset((void*) cmdheader[i].ctba, 0, 256);
    }
    printd(DEBUG_AHCI, " to 0x%08X/0x%08X\n", port->clb, port->fb);
   14a54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a57:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a5d:	8b 00                	mov    eax,DWORD PTR [eax]
   14a5f:	52                   	push   edx
   14a60:	50                   	push   eax
   14a61:	68 14 69 04 00       	push   0x46914
   14a66:	68 00 20 00 00       	push   0x2000
   14a6b:	e8 a3 27 01 00       	call   27213 <printd>
   14a70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:380
    start_cmd(port); // Start command engine
   14a73:	83 ec 0c             	sub    esp,0xc
   14a76:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14a79:	e8 06 00 00 00       	call   14a84 <start_cmd>
   14a7e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:381
}
   14a81:	90                   	nop
   14a82:	c9                   	leave  
   14a83:	c3                   	ret    

00014a84 <start_cmd>:
start_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:385

// Start command engine

void start_cmd(volatile HBA_PORT *port) {
   14a84:	55                   	push   ebp
   14a85:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:387
    // Wait until CR (bit15) is cleared
    while (port->cmd.CR);
   14a87:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:387 (discriminator 1)
   14a88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a8b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14a8e:	c1 e8 0f             	shr    eax,0xf
   14a91:	83 e0 01             	and    eax,0x1
   14a94:	84 c0                	test   al,al
   14a96:	75 f0                	jne    14a88 <start_cmd+0x4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:390

    // Set FRE (bit4) and ST (bit0)
    port->cmd.FRE = 1;
   14a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14a9b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14a9e:	83 ca 10             	or     edx,0x10
   14aa1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:391
    port->cmd.ST = 1;
   14aa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14aa7:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14aaa:	83 ca 01             	or     edx,0x1
   14aad:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:392
}
   14ab0:	90                   	nop
   14ab1:	5d                   	pop    ebp
   14ab2:	c3                   	ret    

00014ab3 <waitForPortIdle>:
waitForPortIdle():
/home/yogi/src/os/chrisOS/src/block/ahci.c:394

void waitForPortIdle(volatile HBA_PORT *port) {
   14ab3:	55                   	push   ebp
   14ab4:	89 e5                	mov    ebp,esp
   14ab6:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14ab9:	eb 0d                	jmp    14ac8 <waitForPortIdle+0x15>
/home/yogi/src/os/chrisOS/src/block/ahci.c:396
        waitTicks(20);
   14abb:	83 ec 0c             	sub    esp,0xc
   14abe:	6a 14                	push   0x14
   14ac0:	e8 52 39 01 00       	call   28417 <waitTicks>
   14ac5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    port->cmd.FRE = 1;
    port->cmd.ST = 1;
}

void waitForPortIdle(volatile HBA_PORT *port) {
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14ac8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14acb:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ace:	83 e0 01             	and    eax,0x1
   14ad1:	89 c2                	mov    edx,eax
   14ad3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ad6:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ad9:	c1 e8 0f             	shr    eax,0xf
   14adc:	83 e0 01             	and    eax,0x1
   14adf:	09 c2                	or     edx,eax
   14ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ae4:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ae7:	c1 e8 04             	shr    eax,0x4
   14aea:	83 e0 01             	and    eax,0x1
   14aed:	09 c2                	or     edx,eax
   14aef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14af2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14af5:	c1 e8 0e             	shr    eax,0xe
   14af8:	83 e0 01             	and    eax,0x1
   14afb:	09 d0                	or     eax,edx
   14afd:	84 c0                	test   al,al
   14aff:	75 ba                	jne    14abb <waitForPortIdle+0x8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:398
        waitTicks(20);
    }
}
   14b01:	90                   	nop
   14b02:	c9                   	leave  
   14b03:	c3                   	ret    

00014b04 <stop_cmd>:
stop_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:402

// Stop command engine

void stop_cmd(volatile volatile HBA_PORT *port) {
   14b04:	55                   	push   ebp
   14b05:	89 e5                	mov    ebp,esp
   14b07:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:404
    // Clear ST (bit0)
    port->cmd.ST = 0;
   14b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b0d:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14b10:	83 e2 fe             	and    edx,0xfffffffe
   14b13:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:407
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
   14b16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b19:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14b1c:	c1 e8 0e             	shr    eax,0xe
   14b1f:	83 e0 01             	and    eax,0x1
   14b22:	84 c0                	test   al,al
   14b24:	74 1f                	je     14b45 <stop_cmd+0x41>
/home/yogi/src/os/chrisOS/src/block/ahci.c:409
            break;
        if (!(port->cmd.CR))
   14b26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b29:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14b2c:	c1 e8 0f             	shr    eax,0xf
   14b2f:	83 e0 01             	and    eax,0x1
   14b32:	84 c0                	test   al,al
   14b34:	74 12                	je     14b48 <stop_cmd+0x44>
/home/yogi/src/os/chrisOS/src/block/ahci.c:411
            break;
        waitTicks(20);
   14b36:	83 ec 0c             	sub    esp,0xc
   14b39:	6a 14                	push   0x14
   14b3b:	e8 d7 38 01 00       	call   28417 <waitTicks>
   14b40:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:412
    }
   14b43:	eb d1                	jmp    14b16 <stop_cmd+0x12>
/home/yogi/src/os/chrisOS/src/block/ahci.c:408
    // Clear ST (bit0)
    port->cmd.ST = 0;
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
            break;
   14b45:	90                   	nop
   14b46:	eb 01                	jmp    14b49 <stop_cmd+0x45>
/home/yogi/src/os/chrisOS/src/block/ahci.c:410
        if (!(port->cmd.CR))
            break;
   14b48:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:415
        waitTicks(20);
    }

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
   14b49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b4c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14b4f:	83 e2 ef             	and    edx,0xffffffef
   14b52:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:416
}
   14b55:	90                   	nop
   14b56:	c9                   	leave  
   14b57:	c3                   	ret    

00014b58 <ahciIdentify>:
ahciIdentify():
/home/yogi/src/os/chrisOS/src/block/ahci.c:418

void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
   14b58:	55                   	push   ebp
   14b59:	89 e5                	mov    ebp,esp
   14b5b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:419
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
   14b5e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14b61:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14b66:	83 ec 0c             	sub    esp,0xc
   14b69:	52                   	push   edx
   14b6a:	50                   	push   eax
   14b6b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14b6e:	68 28 69 04 00       	push   0x46928
   14b73:	68 00 20 00 00       	push   0x2000
   14b78:	e8 96 26 01 00       	call   27213 <printd>
   14b7d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:420
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
   14b80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b83:	8b 00                	mov    eax,DWORD PTR [eax]
   14b85:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:421
    int slot = find_cmdslot(port);
   14b88:	83 ec 0c             	sub    esp,0xc
   14b8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14b8e:	e8 66 03 00 00       	call   14ef9 <find_cmdslot>
   14b93:	83 c4 10             	add    esp,0x10
   14b96:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:422
    if (slot == -1)
   14b99:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   14b9d:	0f 84 53 03 00 00    	je     14ef6 <ahciIdentify+0x39e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:424
        return;
    port->ie.AsUlong = 0xFFFFFFFF;
   14ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ba6:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:425
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   14bad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14bb0:	c1 e0 05             	shl    eax,0x5
   14bb3:	89 c2                	mov    edx,eax
   14bb5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14bb8:	01 d0                	add    eax,edx
   14bba:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:426
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   14bbd:	83 ec 04             	sub    esp,0x4
   14bc0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14bc3:	68 30 62 04 00       	push   0x46230
   14bc8:	68 00 20 00 00       	push   0x2000
   14bcd:	e8 41 26 01 00       	call   27213 <printd>
   14bd2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:427
    cmdheader->prdtl = 1;
   14bd5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14bd8:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:428
    cmdheader->cfl = 5; //sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   14bde:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14be1:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14be4:	83 e2 e0             	and    edx,0xffffffe0
   14be7:	83 ca 05             	or     edx,0x5
   14bea:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:429
    cmdheader->w = 0;
   14bec:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14bef:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14bf2:	83 e2 bf             	and    edx,0xffffffbf
   14bf5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:430
    cmdheader->a = 0;
   14bf7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14bfa:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14bfd:	83 e2 df             	and    edx,0xffffffdf
   14c00:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:431
    cmdheader->c = 0;
   14c02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14c05:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14c09:	83 e2 fb             	and    edx,0xfffffffb
   14c0c:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:432
    cmdheader->p = 0;
   14c0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14c12:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14c15:	83 e2 7f             	and    edx,0x7f
   14c18:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:433
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14c1a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14c1d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14c20:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:435
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   14c23:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14c26:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:434
    cmdheader->w = 0;
    cmdheader->a = 0;
    cmdheader->c = 0;
    cmdheader->p = 0;
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   14c2a:	0f b7 c0             	movzx  eax,ax
   14c2d:	83 c0 08             	add    eax,0x8
   14c30:	c1 e0 04             	shl    eax,0x4
   14c33:	83 ec 04             	sub    esp,0x4
   14c36:	50                   	push   eax
   14c37:	6a 00                	push   0x0
   14c39:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14c3c:	e8 3c 04 01 00       	call   2507d <memset>
   14c41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:436
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   14c44:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14c47:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14c4a:	50                   	push   eax
   14c4b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14c4e:	68 48 62 04 00       	push   0x46248
   14c53:	68 00 20 00 00       	push   0x2000
   14c58:	e8 b6 25 01 00       	call   27213 <printd>
   14c5d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:437
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   14c60:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14c63:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xa42000
   14c6a:	20 a4 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:438
    cmdtbl->prdt_entry[0].dbc = 0x1ff;
   14c6d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14c70:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   14c76:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   14c7c:	81 ca ff 01 00 00    	or     edx,0x1ff
   14c82:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:439
    cmdtbl->prdt_entry[0].i = 1;
   14c88:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14c8b:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   14c92:	83 ca 80             	or     edx,0xffffff80
   14c95:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:441

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   14c9b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14c9e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:442
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   14ca1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ca4:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:443
    cmdfis->c = 1; // Command
   14ca7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14caa:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14cae:	83 ca 80             	or     edx,0xffffff80
   14cb1:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:444
    if (deviceType == AHCI_DEV_SATAPI)
   14cb4:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   14cb8:	75 09                	jne    14cc3 <ahciIdentify+0x16b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:445
        cmdfis->command = ATA_IDENTIFY_CDROM_COMMAND;
   14cba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14cbd:	c6 40 02 a1          	mov    BYTE PTR [eax+0x2],0xa1
   14cc1:	eb 07                	jmp    14cca <ahciIdentify+0x172>
/home/yogi/src/os/chrisOS/src/block/ahci.c:447
    else
        cmdfis->command = ATA_IDENTIFY_COMMAND;
   14cc3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14cc6:	c6 40 02 ec          	mov    BYTE PTR [eax+0x2],0xec
/home/yogi/src/os/chrisOS/src/block/ahci.c:448
    cmdfis->lba0 = 0;
   14cca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ccd:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:449
    cmdfis->lba1 = 0;
   14cd1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14cd4:	c6 40 05 00          	mov    BYTE PTR [eax+0x5],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:450
    cmdfis->lba2 = 0;
   14cd8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14cdb:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:451
    cmdfis->lba3 = 0;
   14cdf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ce2:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:452
    cmdfis->lba4 = 0;
   14ce6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ce9:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:453
    cmdfis->lba5 = 0;
   14ced:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14cf0:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:454
    cmdfis->lba5 = 0;
   14cf4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14cf7:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:455
    cmdfis->pmport = 0;
   14cfb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14cfe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14d02:	83 e2 f0             	and    edx,0xfffffff0
   14d05:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:456
    cmdfis->device = 0;
   14d08:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14d0b:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:457
    cmdfis->countl = 1;
   14d0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14d12:	c6 40 0c 01          	mov    BYTE PTR [eax+0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:458
    cmdfis->counth = 0;
   14d16:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14d19:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:459
    int lCmdVal = AhciIssueCmd(port, slot);
   14d1d:	83 ec 08             	sub    esp,0x8
   14d20:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14d23:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14d26:	e8 fd ea ff ff       	call   13828 <AhciIssueCmd>
   14d2b:	83 c4 10             	add    esp,0x10
   14d2e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:460
    if (!lCmdVal) {
   14d31:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   14d35:	75 18                	jne    14d4f <ahciIdentify+0x1f7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:461
        printk("AHCI: ***Error identifying device (%u)***\n",lCmdVal);
   14d37:	83 ec 08             	sub    esp,0x8
   14d3a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   14d3d:	68 58 69 04 00       	push   0x46958
   14d42:	e8 ac 24 01 00       	call   271f3 <printk>
   14d47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:462
        return;
   14d4a:	e9 a8 01 00 00       	jmp    14ef7 <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:464
    }
    kATADeviceInfo[kATADeviceInfoCount].ATADeviceAvailable = true;
   14d4f:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14d55:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14d5a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d60:	01 d0                	add    eax,edx
   14d62:	c6 80 51 02 00 00 01 	mov    BYTE PTR [eax+0x251],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:465
    kATADeviceInfo[kATADeviceInfoCount].bus = SATA;
   14d69:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14d6f:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14d74:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d7a:	01 d0                	add    eax,edx
   14d7c:	c7 80 61 02 00 00 02 	mov    DWORD PTR [eax+0x261],0x2
   14d83:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:466
    kATADeviceInfo[kATADeviceInfoCount].driveNo = kATADeviceInfoCount;
   14d86:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14d8c:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14d91:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14d97:	01 d0                	add    eax,edx
   14d99:	8b 15 c4 02 12 00    	mov    edx,DWORD PTR ds:0x1202c4
   14d9f:	89 90 65 02 00 00    	mov    DWORD PTR [eax+0x265],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:467
    kATADeviceInfo[kATADeviceInfoCount].ioPort = (uintptr_t) port;
   14da5:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14dab:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14db0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14db6:	01 c2                	add    edx,eax
   14db8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14dbb:	89 82 69 02 00 00    	mov    DWORD PTR [edx+0x269],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:468
    kATADeviceInfo[kATADeviceInfoCount].irqNum = 0;
   14dc1:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14dc7:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14dcc:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14dd2:	01 d0                	add    eax,edx
   14dd4:	c6 80 6d 02 00 00 00 	mov    BYTE PTR [eax+0x26d],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:469
    kATADeviceInfo[kATADeviceInfoCount].driveHeadPortDesignation = 0x0;
   14ddb:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14de1:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14de6:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14dec:	01 d0                	add    eax,edx
   14dee:	c6 80 6e 02 00 00 00 	mov    BYTE PTR [eax+0x26e],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:470
    kATADeviceInfo[kATADeviceInfoCount].queryATAData = false;
   14df5:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14dfb:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14e00:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14e06:	01 d0                	add    eax,edx
   14e08:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:471
    if (deviceType == AHCI_DEV_SATAPI)
   14e0f:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   14e13:	75 1f                	jne    14e34 <ahciIdentify+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:472
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_CD;
   14e15:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14e1b:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14e20:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14e26:	01 d0                	add    eax,edx
   14e28:	c7 80 52 02 00 00 03 	mov    DWORD PTR [eax+0x252],0x3
   14e2f:	00 00 00 
   14e32:	eb 1d                	jmp    14e51 <ahciIdentify+0x2f9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:474
    else
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
   14e34:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14e3a:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14e3f:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14e45:	01 d0                	add    eax,edx
   14e47:	c7 80 52 02 00 00 02 	mov    DWORD PTR [eax+0x252],0x2
   14e4e:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:475
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
   14e51:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14e57:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14e5c:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14e62:	01 c2                	add    edx,eax
   14e64:	a1 54 04 12 00       	mov    eax,ds:0x120454
   14e69:	89 82 6f 02 00 00    	mov    DWORD PTR [edx+0x26f],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:476
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
   14e6f:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   14e75:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14e7a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14e80:	01 d0                	add    eax,edx
   14e82:	83 ec 04             	sub    esp,0x4
   14e85:	68 00 02 00 00       	push   0x200
   14e8a:	68 00 20 a4 00       	push   0xa42000
   14e8f:	50                   	push   eax
   14e90:	e8 c3 0c 01 00       	call   25b58 <memcpy>
   14e95:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:477
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
   14e98:	8b 0d c0 02 12 00    	mov    ecx,DWORD PTR ds:0x1202c0
   14e9e:	a1 c4 02 12 00       	mov    eax,ds:0x1202c4
   14ea3:	8d 50 01             	lea    edx,[eax+0x1]
   14ea6:	89 15 c4 02 12 00    	mov    DWORD PTR ds:0x1202c4,edx
   14eac:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14eb2:	01 c8                	add    eax,ecx
   14eb4:	83 ec 0c             	sub    esp,0xc
   14eb7:	50                   	push   eax
   14eb8:	e8 69 d6 00 00       	call   22526 <ataIdentify>
   14ebd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:478
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
   14ec0:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   14ec5:	8b 15 c4 02 12 00    	mov    edx,DWORD PTR ds:0x1202c4
   14ecb:	69 d2 73 02 00 00    	imul   edx,edx,0x273
   14ed1:	81 ea 73 02 00 00    	sub    edx,0x273
   14ed7:	01 d0                	add    eax,edx
   14ed9:	05 00 02 00 00       	add    eax,0x200
   14ede:	83 ec 04             	sub    esp,0x4
   14ee1:	50                   	push   eax
   14ee2:	68 84 69 04 00       	push   0x46984
   14ee7:	68 00 20 00 00       	push   0x2000
   14eec:	e8 22 23 01 00       	call   27213 <printd>
   14ef1:	83 c4 10             	add    esp,0x10
   14ef4:	eb 01                	jmp    14ef7 <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:423
void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   14ef6:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:479
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
}
   14ef7:	c9                   	leave  
   14ef8:	c3                   	ret    

00014ef9 <find_cmdslot>:
find_cmdslot():
/home/yogi/src/os/chrisOS/src/block/ahci.c:482
// Find a free command list slot

int find_cmdslot(volatile HBA_PORT *port) {
   14ef9:	55                   	push   ebp
   14efa:	89 e5                	mov    ebp,esp
   14efc:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:483
    printd(DEBUG_AHCI, "AHCI: find_cmdslot - finding a slot to use to execute a command\n");
   14eff:	83 ec 08             	sub    esp,0x8
   14f02:	68 a8 69 04 00       	push   0x469a8
   14f07:	68 00 20 00 00       	push   0x2000
   14f0c:	e8 02 23 01 00       	call   27213 <printd>
   14f11:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:487
    // An empty command slot has its respective bit cleared to �0� in both the PxCI and PxSACT registers.
    // If not set in SACT and CI, the slot is free // Checked
    
    uint32_t slots = (/*port->sact | */port->ci);
   14f14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14f17:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   14f1a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:488
    int num_of_slots = ahciABAR->cap.NCS;
   14f1d:	a1 54 04 12 00       	mov    eax,ds:0x120454
   14f22:	8b 00                	mov    eax,DWORD PTR [eax]
   14f24:	c1 e8 08             	shr    eax,0x8
   14f27:	83 e0 1f             	and    eax,0x1f
   14f2a:	0f b6 c0             	movzx  eax,al
   14f2d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:489
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
   14f30:	a1 54 04 12 00       	mov    eax,ds:0x120454
   14f35:	8b 00                	mov    eax,DWORD PTR [eax]
   14f37:	c1 e8 08             	shr    eax,0x8
   14f3a:	83 e0 1f             	and    eax,0x1f
   14f3d:	0f b6 d0             	movzx  edx,al
   14f40:	a1 54 04 12 00       	mov    eax,ds:0x120454
   14f45:	52                   	push   edx
   14f46:	50                   	push   eax
   14f47:	68 ec 69 04 00       	push   0x469ec
   14f4c:	68 00 20 00 00       	push   0x2000
   14f51:	e8 bd 22 01 00       	call   27213 <printd>
   14f56:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:491
    int i;
    for (i = 0; i < num_of_slots; i++) {
   14f59:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   14f60:	eb 46                	jmp    14fa8 <find_cmdslot+0xaf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:493

        if ((slots & 1) == 0) {
   14f62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14f65:	83 e0 01             	and    eax,0x1
   14f68:	85 c0                	test   eax,eax
   14f6a:	75 1d                	jne    14f89 <find_cmdslot+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:494
            printd(DEBUG_AHCI, "AHCI: [command slot is : %d]\n", i);
   14f6c:	83 ec 04             	sub    esp,0x4
   14f6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14f72:	68 18 6a 04 00       	push   0x46a18
   14f77:	68 00 20 00 00       	push   0x2000
   14f7c:	e8 92 22 01 00       	call   27213 <printd>
   14f81:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:495
            return i;
   14f84:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14f87:	eb 44                	jmp    14fcd <find_cmdslot+0xd4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:498 (discriminator 2)

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
   14f89:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   14f8c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14f8f:	68 36 6a 04 00       	push   0x46a36
   14f94:	68 00 20 00 00       	push   0x2000
   14f99:	e8 75 22 01 00       	call   27213 <printd>
   14f9e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:499 (discriminator 2)
        slots >>= 1;
   14fa1:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 2)
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
   14fa4:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 1)
   14fa8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14fab:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   14fae:	7c b2                	jl     14f62 <find_cmdslot+0x69>
/home/yogi/src/os/chrisOS/src/block/ahci.c:501

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
        slots >>= 1;
    }
    printd(DEBUG_AHCI, "AHCI: Cannot find free command list entry, count=%u, slots=0x%08X\n", num_of_slots, slots);
   14fb0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   14fb3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14fb6:	68 50 6a 04 00       	push   0x46a50
   14fbb:	68 00 20 00 00       	push   0x2000
   14fc0:	e8 4e 22 01 00       	call   27213 <printd>
   14fc5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:502
    return -1;
   14fc8:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:503
}
   14fcd:	c9                   	leave  
   14fce:	c3                   	ret    

00014fcf <ahciSetCurrentDisk>:
ahciSetCurrentDisk():
/home/yogi/src/os/chrisOS/src/block/ahci.c:508

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
   14fcf:	55                   	push   ebp
   14fd0:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:509
    kAHCICurrentDisk = port;
   14fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14fd5:	a3 10 04 12 00       	mov    ds:0x120410,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:510
}
   14fda:	90                   	nop
   14fdb:	5d                   	pop    ebp
   14fdc:	c3                   	ret    

00014fdd <ahciSetCurrentPart>:
ahciSetCurrentPart():
/home/yogi/src/os/chrisOS/src/block/ahci.c:513

void ahciSetCurrentPart(partEntry_t part) 
{
   14fdd:	55                   	push   ebp
   14fde:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:514
    kAHCICurrentPart = part;
   14fe0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14fe3:	a3 14 04 12 00       	mov    ds:0x120414,eax
   14fe8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   14feb:	a3 18 04 12 00       	mov    ds:0x120418,eax
   14ff0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14ff3:	a3 1c 04 12 00       	mov    ds:0x12041c,eax
   14ff8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   14ffb:	a3 20 04 12 00       	mov    ds:0x120420,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:515
}
   15000:	90                   	nop
   15001:	5d                   	pop    ebp
   15002:	c3                   	ret    

00015003 <ahciRead>:
ahciRead():
/home/yogi/src/os/chrisOS/src/block/ahci.c:517

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
   15003:	55                   	push   ebp
   15004:	89 e5                	mov    ebp,esp
   15006:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:518
    ahciSetCurrentDisk(port);
   15009:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1500c:	e8 be ff ff ff       	call   14fcf <ahciSetCurrentDisk>
   15011:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/block/ahci.c:519
    if (ahciBlockingRead28(sector, buffer, sector_count))
   15014:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   15017:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1501a:	83 ec 04             	sub    esp,0x4
   1501d:	52                   	push   edx
   1501e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   15021:	50                   	push   eax
   15022:	e8 13 00 00 00       	call   1503a <ahciBlockingRead28>
   15027:	83 c4 10             	add    esp,0x10
   1502a:	85 c0                	test   eax,eax
   1502c:	74 05                	je     15033 <ahciRead+0x30>
/home/yogi/src/os/chrisOS/src/block/ahci.c:520
        return sector_count;
   1502e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   15031:	eb 05                	jmp    15038 <ahciRead+0x35>
/home/yogi/src/os/chrisOS/src/block/ahci.c:522
    else
        return 0;
   15033:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:523
}
   15038:	c9                   	leave  
   15039:	c3                   	ret    

0001503a <ahciBlockingRead28>:
ahciBlockingRead28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:526

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   1503a:	55                   	push   ebp
   1503b:	89 e5                	mov    ebp,esp
   1503d:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/block/ahci.c:527
    int prdCntr = 0;
   15040:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:530

    //CLR 06/07/2016 - Must add partition start sector
    sector+=kAHCICurrentPart.partStartSector;
   15047:	a1 14 04 12 00       	mov    eax,ds:0x120414
   1504c:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:532
    
    memset(buffer,0,sector_count*512);
   1504f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15052:	c1 e0 09             	shl    eax,0x9
   15055:	83 ec 04             	sub    esp,0x4
   15058:	50                   	push   eax
   15059:	6a 00                	push   0x0
   1505b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1505e:	e8 1a 00 01 00       	call   2507d <memset>
   15063:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:534
    
    printd(DEBUG_AHCI, "AHCI: read on port=0x%08X,sector=0x%08X,buffer=0x%08X,sector_count=%u\n", kAHCICurrentDisk,sector,buffer,sector_count);
   15066:	a1 10 04 12 00       	mov    eax,ds:0x120410
   1506b:	83 ec 08             	sub    esp,0x8
   1506e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   15071:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15074:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15077:	50                   	push   eax
   15078:	68 94 6a 04 00       	push   0x46a94
   1507d:	68 00 20 00 00       	push   0x2000
   15082:	e8 8c 21 01 00       	call   27213 <printd>
   15087:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:536

    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
   1508a:	a1 10 04 12 00       	mov    eax,ds:0x120410
   1508f:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:537
    int spin = 0; // Spin lock timeout counter
   15096:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:539

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
   1509d:	a1 10 04 12 00       	mov    eax,ds:0x120410
   150a2:	8b 00                	mov    eax,DWORD PTR [eax]
   150a4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:540
    int slot = find_cmdslot(kAHCICurrentDisk);
   150a7:	a1 10 04 12 00       	mov    eax,ds:0x120410
   150ac:	83 ec 0c             	sub    esp,0xc
   150af:	50                   	push   eax
   150b0:	e8 44 fe ff ff       	call   14ef9 <find_cmdslot>
   150b5:	83 c4 10             	add    esp,0x10
   150b8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:541
    if (slot == -1)
   150bb:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   150bf:	75 0a                	jne    150cb <ahciBlockingRead28+0x91>
/home/yogi/src/os/chrisOS/src/block/ahci.c:542
        return false;
   150c1:	b8 00 00 00 00       	mov    eax,0x0
   150c6:	e9 41 02 00 00       	jmp    1530c <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:543
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   150cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   150ce:	c1 e0 05             	shl    eax,0x5
   150d1:	89 c2                	mov    edx,eax
   150d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   150d6:	01 d0                	add    eax,edx
   150d8:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:544
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   150db:	83 ec 04             	sub    esp,0x4
   150de:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   150e1:	68 30 62 04 00       	push   0x46230
   150e6:	68 00 20 00 00       	push   0x2000
   150eb:	e8 23 21 01 00       	call   27213 <printd>
   150f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:545
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count
   150f3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   150f6:	83 e8 01             	sub    eax,0x1
   150f9:	c1 e8 04             	shr    eax,0x4
   150fc:	8d 50 01             	lea    edx,[eax+0x1]
   150ff:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15102:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/block/ahci.c:547

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
   15106:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15109:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1510c:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:549
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   1510f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15112:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:548
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   15116:	0f b7 c0             	movzx  eax,ax
   15119:	83 c0 08             	add    eax,0x8
   1511c:	c1 e0 04             	shl    eax,0x4
   1511f:	83 ec 04             	sub    esp,0x4
   15122:	50                   	push   eax
   15123:	6a 00                	push   0x0
   15125:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   15128:	e8 50 ff 00 00       	call   2507d <memset>
   1512d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:550
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   15130:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15133:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   15136:	50                   	push   eax
   15137:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1513a:	68 dc 6a 04 00       	push   0x46adc
   1513f:	68 00 20 00 00       	push   0x2000
   15144:	e8 ca 20 01 00       	call   27213 <printd>
   15149:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:553

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   1514c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   15153:	eb 5b                	jmp    151b0 <ahciBlockingRead28+0x176>
/home/yogi/src/os/chrisOS/src/block/ahci.c:554 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   15155:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15158:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1515b:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1515e:	83 c1 08             	add    ecx,0x8
   15161:	c1 e1 04             	shl    ecx,0x4
   15164:	01 ca                	add    edx,ecx
   15166:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:555 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dbc = 8 * 1024; // 8K bytes
   15168:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1516b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1516e:	83 c2 08             	add    edx,0x8
   15171:	c1 e2 04             	shl    edx,0x4
   15174:	01 d0                	add    eax,edx
   15176:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   15179:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   1517f:	80 ce 20             	or     dh,0x20
   15182:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:556 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].i = 1;
   15185:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   15188:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1518b:	83 c2 08             	add    edx,0x8
   1518e:	c1 e2 04             	shl    edx,0x4
   15191:	01 d0                	add    eax,edx
   15193:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   15197:	83 ca 80             	or     edx,0xffffff80
   1519a:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:557 (discriminator 3)
        buffer += 4 * 1024; // 4K words
   1519d:	81 45 0c 00 10 00 00 	add    DWORD PTR [ebp+0xc],0x1000
/home/yogi/src/os/chrisOS/src/block/ahci.c:558 (discriminator 3)
        sector_count -= 16; // 16 sectors
   151a4:	83 6d 10 10          	sub    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:559 (discriminator 3)
        prdCntr++;
   151a8:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 3)
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   151ac:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 1)
   151b0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   151b3:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   151b7:	0f b7 c0             	movzx  eax,ax
   151ba:	83 e8 01             	sub    eax,0x1
   151bd:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   151c0:	7f 93                	jg     15155 <ahciBlockingRead28+0x11b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:562
        buffer += 4 * 1024; // 4K words
        sector_count -= 16; // 16 sectors
        prdCntr++;
    }
    // Last entry
    cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   151c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   151c5:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   151c8:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   151cb:	83 c1 08             	add    ecx,0x8
   151ce:	c1 e1 04             	shl    ecx,0x4
   151d1:	01 ca                	add    edx,ecx
   151d3:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:563
    cmdtbl->prdt_entry[prdCntr].dbc = sector_count << 9; // 512 bytes per sector
   151d5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   151d8:	c1 e0 09             	shl    eax,0x9
   151db:	25 ff ff 3f 00       	and    eax,0x3fffff
   151e0:	89 c1                	mov    ecx,eax
   151e2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   151e5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   151e8:	83 c2 08             	add    edx,0x8
   151eb:	c1 e2 04             	shl    edx,0x4
   151ee:	01 d0                	add    eax,edx
   151f0:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
   151f6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   151f9:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   151ff:	09 ca                	or     edx,ecx
   15201:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:564
    cmdtbl->prdt_entry[prdCntr].i = 1;
   15204:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   15207:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1520a:	83 c2 08             	add    edx,0x8
   1520d:	c1 e2 04             	shl    edx,0x4
   15210:	01 d0                	add    eax,edx
   15212:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   15216:	83 ca 80             	or     edx,0xffffff80
   15219:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:567

    // Setup command
    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   1521c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1521f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:569

    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   15222:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15225:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:570
    cmdfis->c = 1; // Command
   15228:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1522b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   1522f:	83 ca 80             	or     edx,0xffffff80
   15232:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:571
    cmdfis->command = ATA_CMD_READ_DMA_EX;
   15235:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15238:	c6 40 02 25          	mov    BYTE PTR [eax+0x2],0x25
/home/yogi/src/os/chrisOS/src/block/ahci.c:572
    cmdfis->lba0 = (uint8_t) sector;
   1523c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1523f:	89 c2                	mov    edx,eax
   15241:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15244:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:573
    cmdfis->lba1 = (uint8_t) (sector >> 8);
   15247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1524a:	c1 e8 08             	shr    eax,0x8
   1524d:	89 c2                	mov    edx,eax
   1524f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15252:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:574
    cmdfis->lba2 = (uint8_t) (sector >> 16);
   15255:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15258:	c1 e8 10             	shr    eax,0x10
   1525b:	89 c2                	mov    edx,eax
   1525d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15260:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:575
    cmdfis->device = 1 << 6; // LBA mode
   15263:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15266:	c6 40 07 40          	mov    BYTE PTR [eax+0x7],0x40
/home/yogi/src/os/chrisOS/src/block/ahci.c:577

    cmdfis->lba3 = (uint8_t) (sector >> 24);
   1526a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1526d:	c1 e8 18             	shr    eax,0x18
   15270:	89 c2                	mov    edx,eax
   15272:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15275:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:578
    cmdfis->lba4 = (uint8_t) 0;
   15278:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1527b:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:579
    cmdfis->lba5 = (uint8_t) 0;
   1527f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15282:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:581

    cmdfis->countl = LOBYTE((uint16_t) sector_count);
   15286:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15289:	89 c2                	mov    edx,eax
   1528b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1528e:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:582
    cmdfis->counth = HIBYTE((uint16_t) sector_count);
   15291:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15294:	0f b7 c0             	movzx  eax,ax
   15297:	c1 f8 08             	sar    eax,0x8
   1529a:	89 c2                	mov    edx,eax
   1529c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1529f:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:584

    int lCMdVal = AhciIssueCmd(kAHCICurrentDisk, slot);
   152a2:	a1 10 04 12 00       	mov    eax,ds:0x120410
   152a7:	83 ec 08             	sub    esp,0x8
   152aa:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   152ad:	50                   	push   eax
   152ae:	e8 75 e5 ff ff       	call   13828 <AhciIssueCmd>
   152b3:	83 c4 10             	add    esp,0x10
   152b6:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:585
    if (!lCMdVal) {
   152b9:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   152bd:	75 1c                	jne    152db <ahciBlockingRead28+0x2a1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:586
        printd(DEBUG_AHCI, "AHCI: ***Error reading from disk***\n");
   152bf:	83 ec 08             	sub    esp,0x8
   152c2:	68 08 6b 04 00       	push   0x46b08
   152c7:	68 00 20 00 00       	push   0x2000
   152cc:	e8 42 1f 01 00       	call   27213 <printd>
   152d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:587
        return -1;
   152d4:	b8 ff ff ff ff       	mov    eax,0xffffffff
   152d9:	eb 31                	jmp    1530c <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:591
    }

    // Check again
    if (kAHCICurrentDisk->pxis.TFES) {
   152db:	a1 10 04 12 00       	mov    eax,ds:0x120410
   152e0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   152e3:	c1 e8 1e             	shr    eax,0x1e
   152e6:	83 e0 01             	and    eax,0x1
   152e9:	84 c0                	test   al,al
   152eb:	74 1c                	je     15309 <ahciBlockingRead28+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:592
        printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   152ed:	83 ec 08             	sub    esp,0x8
   152f0:	68 ef 61 04 00       	push   0x461ef
   152f5:	68 00 20 00 00       	push   0x2000
   152fa:	e8 14 1f 01 00       	call   27213 <printd>
   152ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:593
        return false;
   15302:	b8 00 00 00 00       	mov    eax,0x0
   15307:	eb 03                	jmp    1530c <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:596
    }

    return sector_count;
   15309:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/block/ahci.c:597
}
   1530c:	c9                   	leave  
   1530d:	c3                   	ret    

0001530e <ahciBlockingWrite28>:
ahciBlockingWrite28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:599

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   1530e:	55                   	push   ebp
   1530f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:600
    return 0;
   15311:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:601
}
   15316:	5d                   	pop    ebp
   15317:	c3                   	ret    

00015318 <ahciInit>:
ahciInit():
/home/yogi/src/os/chrisOS/src/block/ahci.c:603

bool ahciInit() {
   15318:	55                   	push   ebp
   15319:	89 e5                	mov    ebp,esp
   1531b:	56                   	push   esi
   1531c:	53                   	push   ebx
   1531d:	81 ec b0 00 00 00    	sub    esp,0xb0
/home/yogi/src/os/chrisOS/src/block/ahci.c:604
    kATADeviceInfoCount = 4;
   15323:	c7 05 c4 02 12 00 04 	mov    DWORD PTR ds:0x1202c4,0x4
   1532a:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:605
    bool ahciDeviceFound = false;
   1532d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:608
    char buffer[150];

    memset(buffer, 0, 150);
   15331:	83 ec 04             	sub    esp,0x4
   15334:	68 96 00 00 00       	push   0x96
   15339:	6a 00                	push   0x0
   1533b:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   15341:	50                   	push   eax
   15342:	e8 36 fd 00 00       	call   2507d <memset>
   15347:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:610

    if (!kPCIDeviceCount) {
   1534a:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   15351:	84 c0                	test   al,al
   15353:	75 1f                	jne    15374 <ahciInit+0x5c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:611
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
   15355:	83 ec 08             	sub    esp,0x8
   15358:	68 30 6b 04 00       	push   0x46b30
   1535d:	68 00 20 00 00       	push   0x2000
   15362:	e8 ac 1e 01 00       	call   27213 <printd>
   15367:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:612
        return false;
   1536a:	b8 00 00 00 00       	mov    eax,0x0
   1536f:	e9 b1 04 00 00       	jmp    15825 <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:615
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15374:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1537b:	e9 35 02 00 00       	jmp    155b5 <ahciInit+0x29d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
   15380:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15386:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   15389:	89 d0                	mov    eax,edx
   1538b:	c1 e0 02             	shl    eax,0x2
   1538e:	01 d0                	add    eax,edx
   15390:	c1 e0 04             	shl    eax,0x4
   15393:	01 c8                	add    eax,ecx
   15395:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15398:	83 f8 01             	cmp    eax,0x1
   1539b:	0f 85 10 02 00 00    	jne    155b1 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616 (discriminator 1)
   153a1:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   153a7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   153aa:	89 d0                	mov    eax,edx
   153ac:	c1 e0 02             	shl    eax,0x2
   153af:	01 d0                	add    eax,edx
   153b1:	c1 e0 04             	shl    eax,0x4
   153b4:	01 c8                	add    eax,ecx
   153b6:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   153b9:	83 f8 06             	cmp    eax,0x6
   153bc:	0f 85 ef 01 00 00    	jne    155b1 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:618
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
   153c2:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   153c8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   153cb:	89 d0                	mov    eax,edx
   153cd:	c1 e0 02             	shl    eax,0x2
   153d0:	01 d0                	add    eax,edx
   153d2:	c1 e0 04             	shl    eax,0x4
   153d5:	01 c8                	add    eax,ecx
   153d7:	83 ec 04             	sub    esp,0x4
   153da:	6a 50                	push   0x50
   153dc:	50                   	push   eax
   153dd:	68 e0 02 12 00       	push   0x1202e0
   153e2:	e8 71 07 01 00       	call   25b58 <memcpy>
   153e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:619
            ahciDeviceFound = true;
   153ea:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:620
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (D) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceHeaders[cnt].class, kPCIDeviceHeaders[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   153ee:	83 ec 08             	sub    esp,0x8
   153f1:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   153f7:	50                   	push   eax
   153f8:	68 e0 02 12 00       	push   0x1202e0
   153fd:	e8 d8 14 00 00       	call   168da <getDeviceNameP>
   15402:	83 c4 10             	add    esp,0x10
   15405:	89 c6                	mov    esi,eax
   15407:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   1540d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   15410:	89 d0                	mov    eax,edx
   15412:	c1 e0 02             	shl    eax,0x2
   15415:	01 d0                	add    eax,edx
   15417:	c1 e0 04             	shl    eax,0x4
   1541a:	01 c8                	add    eax,ecx
   1541c:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   1541f:	8b 1d b4 02 12 00    	mov    ebx,DWORD PTR ds:0x1202b4
   15425:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   15428:	89 d0                	mov    eax,edx
   1542a:	c1 e0 02             	shl    eax,0x2
   1542d:	01 d0                	add    eax,edx
   1542f:	c1 e0 04             	shl    eax,0x4
   15432:	01 d8                	add    eax,ebx
   15434:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15437:	83 ec 08             	sub    esp,0x8
   1543a:	56                   	push   esi
   1543b:	51                   	push   ecx
   1543c:	50                   	push   eax
   1543d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15440:	68 64 6b 04 00       	push   0x46b64
   15445:	68 00 20 00 00       	push   0x2000
   1544a:	e8 c4 1d 01 00       	call   27213 <printd>
   1544f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:621
            printd(DEBUG_AHCI, "ABAR is at: before/remapped - 0x%08X/", kPCISATADevice.baseAdd[5]);
   15452:	a1 14 03 12 00       	mov    eax,ds:0x120314
   15457:	83 ec 04             	sub    esp,0x4
   1545a:	50                   	push   eax
   1545b:	68 9c 6b 04 00       	push   0x46b9c
   15460:	68 00 20 00 00       	push   0x2000
   15465:	e8 a9 1d 01 00       	call   27213 <printd>
   1546a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:622
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   1546d:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   15472:	c1 e0 0c             	shl    eax,0xc
   15475:	89 c2                	mov    edx,eax
   15477:	c1 e2 04             	shl    edx,0x4
   1547a:	01 d0                	add    eax,edx
   1547c:	05 00 20 8c 00       	add    eax,0x8c2000
   15481:	a3 54 04 12 00       	mov    ds:0x120454,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:623
                kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
   15486:	a1 14 03 12 00       	mov    eax,ds:0x120314
   1548b:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   15491:	83 ec 04             	sub    esp,0x4
   15494:	6a 73                	push   0x73
   15496:	50                   	push   eax
   15497:	52                   	push   edx
   15498:	e8 9a c2 ff ff       	call   11737 <kMapPage>
   1549d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:624
                kMapPage(kPCISATADevice.baseAdd[5],kPCISATADevice.baseAdd[5],0x73);
   154a0:	8b 15 14 03 12 00    	mov    edx,DWORD PTR ds:0x120314
   154a6:	a1 14 03 12 00       	mov    eax,ds:0x120314
   154ab:	83 ec 04             	sub    esp,0x4
   154ae:	6a 73                	push   0x73
   154b0:	52                   	push   edx
   154b1:	50                   	push   eax
   154b2:	e8 80 c2 ff ff       	call   11737 <kMapPage>
   154b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:625
            RELOAD_CR3
   154ba:	0f 20 d8             	mov    eax,cr3
   154bd:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:626
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   154c0:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   154c6:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   154cb:	8d 48 01             	lea    ecx,[eax+0x1]
   154ce:	89 0d 24 8a 02 00    	mov    DWORD PTR ds:0x28a24,ecx
   154d4:	c1 e0 08             	shl    eax,0x8
   154d7:	89 c1                	mov    ecx,eax
   154d9:	c1 e1 04             	shl    ecx,0x4
   154dc:	01 c8                	add    eax,ecx
   154de:	05 40 b5 08 00       	add    eax,0x8b540
   154e3:	83 ec 04             	sub    esp,0x4
   154e6:	68 00 11 00 00       	push   0x1100
   154eb:	52                   	push   edx
   154ec:	50                   	push   eax
   154ed:	e8 66 06 01 00       	call   25b58 <memcpy>
   154f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:627
            printd(DEBUG_AHCI, "0x%08X\n", ahciABAR);
   154f5:	a1 54 04 12 00       	mov    eax,ds:0x120454
   154fa:	83 ec 04             	sub    esp,0x4
   154fd:	50                   	push   eax
   154fe:	68 c2 6b 04 00       	push   0x46bc2
   15503:	68 00 20 00 00       	push   0x2000
   15508:	e8 06 1d 01 00       	call   27213 <printd>
   1550d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:628
            memcpy(&ahciCaps[ahciCapsCount++], (void*) ahciABAR, sizeof (ahcicaps_t));
   15510:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   15516:	8b 1d e8 03 12 00    	mov    ebx,DWORD PTR ds:0x1203e8
   1551c:	a1 ec 03 12 00       	mov    eax,ds:0x1203ec
   15521:	8d 48 01             	lea    ecx,[eax+0x1]
   15524:	89 0d ec 03 12 00    	mov    DWORD PTR ds:0x1203ec,ecx
   1552a:	c1 e0 02             	shl    eax,0x2
   1552d:	01 d8                	add    eax,ebx
   1552f:	83 ec 04             	sub    esp,0x4
   15532:	6a 04                	push   0x4
   15534:	52                   	push   edx
   15535:	50                   	push   eax
   15536:	e8 1d 06 01 00       	call   25b58 <memcpy>
   1553b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:629
            if (!(ahciABAR->ghc.AE)) {
   1553e:	a1 54 04 12 00       	mov    eax,ds:0x120454
   15543:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   15546:	c1 e8 1f             	shr    eax,0x1f
   15549:	84 c0                	test   al,al
   1554b:	75 26                	jne    15573 <ahciInit+0x25b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:630
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   1554d:	83 ec 08             	sub    esp,0x8
   15550:	68 ca 6b 04 00       	push   0x46bca
   15555:	68 00 20 00 00       	push   0x2000
   1555a:	e8 b4 1c 01 00       	call   27213 <printd>
   1555f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:631
                ahciABAR->ghc.AE=1;
   15562:	a1 54 04 12 00       	mov    eax,ds:0x120454
   15567:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1556a:	81 ca 00 00 00 80    	or     edx,0x80000000
   15570:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:633
            }
            ahciABAR->ghc.IE=1;
   15573:	a1 54 04 12 00       	mov    eax,ds:0x120454
   15578:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1557b:	83 ca 02             	or     edx,0x2
   1557e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:634
            if (ahciABAR->cap2 & 1) {
   15581:	a1 54 04 12 00       	mov    eax,ds:0x120454
   15586:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   15589:	83 e0 01             	and    eax,0x1
   1558c:	85 c0                	test   eax,eax
   1558e:	74 10                	je     155a0 <ahciInit+0x288>
/home/yogi/src/os/chrisOS/src/block/ahci.c:635
                panic("Write support for BIOS handoff!!!");
   15590:	83 ec 0c             	sub    esp,0xc
   15593:	68 e4 6b 04 00       	push   0x46be4
   15598:	e8 d7 17 01 00       	call   26d74 <panic>
   1559d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:637
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   155a0:	a1 54 04 12 00       	mov    eax,ds:0x120454
   155a5:	83 ec 0c             	sub    esp,0xc
   155a8:	50                   	push   eax
   155a9:	e8 88 ea ff ff       	call   14036 <ahciProbePorts>
   155ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 2)
    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   155b1:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 1)
   155b5:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   155bc:	0f b6 c0             	movzx  eax,al
   155bf:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   155c2:	0f 8f b8 fd ff ff    	jg     15380 <ahciInit+0x68>
/home/yogi/src/os/chrisOS/src/block/ahci.c:639
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   155c8:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   155cf:	e9 12 02 00 00       	jmp    157e6 <ahciInit+0x4ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
   155d4:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   155da:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   155dd:	89 d0                	mov    eax,edx
   155df:	c1 e0 02             	shl    eax,0x2
   155e2:	01 d0                	add    eax,edx
   155e4:	c1 e0 04             	shl    eax,0x4
   155e7:	01 c8                	add    eax,ecx
   155e9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   155ec:	83 f8 01             	cmp    eax,0x1
   155ef:	0f 85 ed 01 00 00    	jne    157e2 <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640 (discriminator 1)
   155f5:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   155fb:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   155fe:	89 d0                	mov    eax,edx
   15600:	c1 e0 02             	shl    eax,0x2
   15603:	01 d0                	add    eax,edx
   15605:	c1 e0 04             	shl    eax,0x4
   15608:	01 c8                	add    eax,ecx
   1560a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1560d:	83 f8 06             	cmp    eax,0x6
   15610:	0f 85 cc 01 00 00    	jne    157e2 <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:642
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
   15616:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   1561c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1561f:	89 d0                	mov    eax,edx
   15621:	c1 e0 02             	shl    eax,0x2
   15624:	01 d0                	add    eax,edx
   15626:	c1 e0 04             	shl    eax,0x4
   15629:	01 c8                	add    eax,ecx
   1562b:	83 ec 04             	sub    esp,0x4
   1562e:	6a 50                	push   0x50
   15630:	50                   	push   eax
   15631:	68 e0 02 12 00       	push   0x1202e0
   15636:	e8 1d 05 01 00       	call   25b58 <memcpy>
   1563b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:643
            ahciDeviceFound = true;
   1563e:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:644
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (F) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceFunctions[cnt].class, kPCIDeviceFunctions[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   15642:	83 ec 08             	sub    esp,0x8
   15645:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   1564b:	50                   	push   eax
   1564c:	68 e0 02 12 00       	push   0x1202e0
   15651:	e8 84 12 00 00       	call   168da <getDeviceNameP>
   15656:	83 c4 10             	add    esp,0x10
   15659:	89 c6                	mov    esi,eax
   1565b:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   15661:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15664:	89 d0                	mov    eax,edx
   15666:	c1 e0 02             	shl    eax,0x2
   15669:	01 d0                	add    eax,edx
   1566b:	c1 e0 04             	shl    eax,0x4
   1566e:	01 c8                	add    eax,ecx
   15670:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   15673:	8b 1d bc 02 12 00    	mov    ebx,DWORD PTR ds:0x1202bc
   15679:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1567c:	89 d0                	mov    eax,edx
   1567e:	c1 e0 02             	shl    eax,0x2
   15681:	01 d0                	add    eax,edx
   15683:	c1 e0 04             	shl    eax,0x4
   15686:	01 d8                	add    eax,ebx
   15688:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1568b:	83 ec 08             	sub    esp,0x8
   1568e:	56                   	push   esi
   1568f:	51                   	push   ecx
   15690:	50                   	push   eax
   15691:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   15694:	68 08 6c 04 00       	push   0x46c08
   15699:	68 00 20 00 00       	push   0x2000
   1569e:	e8 70 1b 01 00       	call   27213 <printd>
   156a3:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:645
            printd(DEBUG_AHCI, "ABAR is at: 0x%08X\n", kPCISATADevice.baseAdd[5]);
   156a6:	a1 14 03 12 00       	mov    eax,ds:0x120314
   156ab:	83 ec 04             	sub    esp,0x4
   156ae:	50                   	push   eax
   156af:	68 3f 6c 04 00       	push   0x46c3f
   156b4:	68 00 20 00 00       	push   0x2000
   156b9:	e8 55 1b 01 00       	call   27213 <printd>
   156be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:646
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   156c1:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   156c6:	c1 e0 0c             	shl    eax,0xc
   156c9:	89 c2                	mov    edx,eax
   156cb:	c1 e2 04             	shl    edx,0x4
   156ce:	01 d0                	add    eax,edx
   156d0:	05 00 20 8c 00       	add    eax,0x8c2000
   156d5:	a3 54 04 12 00       	mov    ds:0x120454,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:647
            kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
   156da:	a1 14 03 12 00       	mov    eax,ds:0x120314
   156df:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   156e5:	83 ec 04             	sub    esp,0x4
   156e8:	6a 73                	push   0x73
   156ea:	50                   	push   eax
   156eb:	52                   	push   edx
   156ec:	e8 46 c0 ff ff       	call   11737 <kMapPage>
   156f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:648
            RELOAD_CR3
   156f4:	0f 20 d8             	mov    eax,cr3
   156f7:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:649
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   156fa:	8b 15 54 04 12 00    	mov    edx,DWORD PTR ds:0x120454
   15700:	a1 24 8a 02 00       	mov    eax,ds:0x28a24
   15705:	8d 48 01             	lea    ecx,[eax+0x1]
   15708:	89 0d 24 8a 02 00    	mov    DWORD PTR ds:0x28a24,ecx
   1570e:	c1 e0 08             	shl    eax,0x8
   15711:	89 c1                	mov    ecx,eax
   15713:	c1 e1 04             	shl    ecx,0x4
   15716:	01 c8                	add    eax,ecx
   15718:	05 40 b5 08 00       	add    eax,0x8b540
   1571d:	83 ec 04             	sub    esp,0x4
   15720:	68 00 11 00 00       	push   0x1100
   15725:	52                   	push   edx
   15726:	50                   	push   eax
   15727:	e8 2c 04 01 00       	call   25b58 <memcpy>
   1572c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:650
            printd(DEBUG_AHCI, "Remapped ABAR is now at: 0x%08X\n", ahciABAR);
   1572f:	a1 54 04 12 00       	mov    eax,ds:0x120454
   15734:	83 ec 04             	sub    esp,0x4
   15737:	50                   	push   eax
   15738:	68 54 6c 04 00       	push   0x46c54
   1573d:	68 00 20 00 00       	push   0x2000
   15742:	e8 cc 1a 01 00       	call   27213 <printd>
   15747:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:651
            memcpy(&ahciCaps[ahciCapsCount], (void*) ahciABAR, sizeof (ahcicaps_t));
   1574a:	a1 54 04 12 00       	mov    eax,ds:0x120454
   1574f:	8b 15 e8 03 12 00    	mov    edx,DWORD PTR ds:0x1203e8
   15755:	8b 0d ec 03 12 00    	mov    ecx,DWORD PTR ds:0x1203ec
   1575b:	c1 e1 02             	shl    ecx,0x2
   1575e:	01 ca                	add    edx,ecx
   15760:	83 ec 04             	sub    esp,0x4
   15763:	6a 04                	push   0x4
   15765:	50                   	push   eax
   15766:	52                   	push   edx
   15767:	e8 ec 03 01 00       	call   25b58 <memcpy>
   1576c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:652
            if (!(ahciABAR->ghc.AE)) {
   1576f:	a1 54 04 12 00       	mov    eax,ds:0x120454
   15774:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   15777:	c1 e8 1f             	shr    eax,0x1f
   1577a:	84 c0                	test   al,al
   1577c:	75 26                	jne    157a4 <ahciInit+0x48c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:653
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   1577e:	83 ec 08             	sub    esp,0x8
   15781:	68 ca 6b 04 00       	push   0x46bca
   15786:	68 00 20 00 00       	push   0x2000
   1578b:	e8 83 1a 01 00       	call   27213 <printd>
   15790:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:654
                ahciABAR->ghc.AE=1;
   15793:	a1 54 04 12 00       	mov    eax,ds:0x120454
   15798:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1579b:	81 ca 00 00 00 80    	or     edx,0x80000000
   157a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:656
            }
            ahciABAR->ghc.IE=1;
   157a4:	a1 54 04 12 00       	mov    eax,ds:0x120454
   157a9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   157ac:	83 ca 02             	or     edx,0x2
   157af:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:657
            if (ahciABAR->cap2 & 1) {
   157b2:	a1 54 04 12 00       	mov    eax,ds:0x120454
   157b7:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   157ba:	83 e0 01             	and    eax,0x1
   157bd:	85 c0                	test   eax,eax
   157bf:	74 10                	je     157d1 <ahciInit+0x4b9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:658
                panic("Write support for BIOS handoff!!!");
   157c1:	83 ec 0c             	sub    esp,0xc
   157c4:	68 e4 6b 04 00       	push   0x46be4
   157c9:	e8 a6 15 01 00       	call   26d74 <panic>
   157ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:660
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   157d1:	a1 54 04 12 00       	mov    eax,ds:0x120454
   157d6:	83 ec 0c             	sub    esp,0xc
   157d9:	50                   	push   eax
   157da:	e8 57 e8 ff ff       	call   14036 <ahciProbePorts>
   157df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 2)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   157e2:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 1)
   157e6:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   157ed:	0f b6 c0             	movzx  eax,al
   157f0:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   157f3:	0f 8f db fd ff ff    	jg     155d4 <ahciInit+0x2bc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:662
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    if (!ahciDeviceFound) {
   157f9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   157fd:	83 f0 01             	xor    eax,0x1
   15800:	84 c0                	test   al,al
   15802:	74 1c                	je     15820 <ahciInit+0x508>
/home/yogi/src/os/chrisOS/src/block/ahci.c:663
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
   15804:	83 ec 08             	sub    esp,0x8
   15807:	68 75 6c 04 00       	push   0x46c75
   1580c:	68 00 20 00 00       	push   0x2000
   15811:	e8 fd 19 01 00       	call   27213 <printd>
   15816:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:664
        return false;
   15819:	b8 00 00 00 00       	mov    eax,0x0
   1581e:	eb 05                	jmp    15825 <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:668
    }


    return true;
   15820:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:669 (discriminator 1)
}
   15825:	8d 65 f8             	lea    esp,[ebp-0x8]
   15828:	5b                   	pop    ebx
   15829:	5e                   	pop    esi
   1582a:	5d                   	pop    ebp
   1582b:	c3                   	ret    

0001582c <ahci_port_activate_device>:
ahci_port_activate_device():
/home/yogi/src/os/chrisOS/src/block/ahci.c:672

void ahci_port_activate_device(HBA_MEM* h, HBA_PORT* p)
{
   1582c:	55                   	push   ebp
   1582d:	89 e5                	mov    ebp,esp
   1582f:	53                   	push   ebx
   15830:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:673
    printd(DEBUG_AHCI,"activate port %d @ 0x%08X:\n", p - h->ports,p);
   15833:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15836:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15839:	81 c2 00 01 00 00    	add    edx,0x100
   1583f:	29 d0                	sub    eax,edx
   15841:	c1 f8 07             	sar    eax,0x7
   15844:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15847:	50                   	push   eax
   15848:	68 92 6c 04 00       	push   0x46c92
   1584d:	68 00 20 00 00       	push   0x2000
   15852:	e8 bc 19 01 00       	call   27213 <printd>
   15857:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:675
    /* first check the presence flag */
    if ( (p->ssts & 0x7) == HBA_PORT_DET_NOT_PRESENT) { //check DET status
   1585a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1585d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15860:	83 e0 07             	and    eax,0x7
   15863:	85 c0                	test   eax,eax
   15865:	0f 85 38 02 00 00    	jne    15aa3 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:676
                    printd(DEBUG_AHCI,"activate: DET_NOT_PRESENT\n");
   1586b:	83 ec 08             	sub    esp,0x8
   1586e:	68 ae 6c 04 00       	push   0x46cae
   15873:	68 00 20 00 00       	push   0x2000
   15878:	e8 96 19 01 00       	call   27213 <printd>
   1587d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:678
                    /* nothing attached? */
                    if (p->cmd.CPD) { /* we rely on CPD */
   15880:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15883:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15886:	c1 e8 14             	shr    eax,0x14
   15889:	83 e0 01             	and    eax,0x1
   1588c:	84 c0                	test   al,al
   1588e:	74 65                	je     158f5 <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:679
                                    if (!p->cmd.CPS) {
   15890:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15893:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15896:	c1 e8 10             	shr    eax,0x10
   15899:	83 e0 01             	and    eax,0x1
   1589c:	84 c0                	test   al,al
   1589e:	75 1a                	jne    158ba <ahci_port_activate_device+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:680
                                                    printd(DEBUG_AHCI,"confirmed by CPD\n");
   158a0:	83 ec 08             	sub    esp,0x8
   158a3:	68 c9 6c 04 00       	push   0x46cc9
   158a8:	68 00 20 00 00       	push   0x2000
   158ad:	e8 61 19 01 00       	call   27213 <printd>
   158b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:681
                                                    return;
   158b5:	e9 b4 03 00 00       	jmp    15c6e <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:684
                                    }
                                    /* there's something */
                                    if (!p->cmd.POD) {
   158ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158bd:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   158c0:	c1 e8 02             	shr    eax,0x2
   158c3:	83 e0 01             	and    eax,0x1
   158c6:	84 c0                	test   al,al
   158c8:	75 19                	jne    158e3 <ahci_port_activate_device+0xb7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:685
                                                    p->cmd.POD = 1; /* power it */
   158ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158cd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   158d0:	83 ca 04             	or     edx,0x4
   158d3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:686
                                                    wait(20);
   158d6:	83 ec 0c             	sub    esp,0xc
   158d9:	6a 14                	push   0x14
   158db:	e8 52 2b 01 00       	call   28432 <wait>
   158e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:688
                                    }
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   158e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158e6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   158e9:	83 e0 07             	and    eax,0x7
   158ec:	85 c0                	test   eax,eax
   158ee:	74 05                	je     158f5 <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:689
                                                    goto next_step;
   158f0:	e9 ae 01 00 00       	jmp    15aa3 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:692
                    }
                    /* spin-up? */
                    if (!p->cmd.SUD) { /* always !1 if cap.sss == 0 */
   158f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   158f8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   158fb:	d1 e8                	shr    eax,1
   158fd:	83 e0 01             	and    eax,0x1
   15900:	84 c0                	test   al,al
   15902:	0f 85 f7 00 00 00    	jne    159ff <ahci_port_activate_device+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:693
                                    printd(DEBUG_AHCI,"not spun-up yet?\n");
   15908:	83 ec 08             	sub    esp,0x8
   1590b:	68 db 6c 04 00       	push   0x46cdb
   15910:	68 00 20 00 00       	push   0x2000
   15915:	e8 f9 18 01 00       	call   27213 <printd>
   1591a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:694
                                    if (p->serr.AsUlong & (1 << 26)) /* eXchange bit */
   1591d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15920:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15923:	25 00 00 00 04       	and    eax,0x4000000
   15928:	85 c0                	test   eax,eax
   1592a:	74 13                	je     1593f <ahci_port_activate_device+0x113>
/home/yogi/src/os/chrisOS/src/block/ahci.c:695
                                                    p->serr.AsUlong |= (1 << 26); /* RWC */
   1592c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1592f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15932:	0d 00 00 00 04       	or     eax,0x4000000
   15937:	89 c2                	mov    edx,eax
   15939:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1593c:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:696
                                    if ((p->ssts & 0x7) != 0) { /* set to 0 prior sud */
   1593f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15942:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15945:	83 e0 07             	and    eax,0x7
   15948:	85 c0                	test   eax,eax
   1594a:	74 19                	je     15965 <ahci_port_activate_device+0x139>
/home/yogi/src/os/chrisOS/src/block/ahci.c:697
                                                    p->sctl.DET = 0;
   1594c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1594f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15952:	83 e2 f0             	and    edx,0xfffffff0
   15955:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:698
                                                    wait(20);
   15958:	83 ec 0c             	sub    esp,0xc
   1595b:	6a 14                	push   0x14
   1595d:	e8 d0 2a 01 00       	call   28432 <wait>
   15962:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:700
                                    }
                                    p->cmd.SUD = 1;
   15965:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15968:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   1596b:	83 ca 02             	or     edx,0x2
   1596e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:701
                                    waitTicks(5); /* wait 50 mus */
   15971:	83 ec 0c             	sub    esp,0xc
   15974:	6a 05                	push   0x5
   15976:	e8 9c 2a 01 00       	call   28417 <waitTicks>
   1597b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:702
                                    if (p->serr.AsUlong & ((1 << 26) | (1 << 18))) { /* received sth. */
   1597e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15981:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15984:	25 00 00 04 04       	and    eax,0x4040000
   15989:	85 c0                	test   eax,eax
   1598b:	74 05                	je     15992 <ahci_port_activate_device+0x166>
/home/yogi/src/os/chrisOS/src/block/ahci.c:704
                                                    /* COMRESET, COMWAKE */
                                                    goto next_step;
   1598d:	e9 11 01 00 00       	jmp    15aa3 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:707
                                    }
                                    /* send the reset */
                                    p->sctl.DET = 1;
   15992:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15995:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15998:	83 e2 f0             	and    edx,0xfffffff0
   1599b:	83 ca 01             	or     edx,0x1
   1599e:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:708
                                    waitTicks(100);
   159a1:	83 ec 0c             	sub    esp,0xc
   159a4:	6a 64                	push   0x64
   159a6:	e8 6c 2a 01 00       	call   28417 <waitTicks>
   159ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:709
                                    p->sctl.DET = 0;
   159ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   159b1:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   159b4:	83 e2 f0             	and    edx,0xfffffff0
   159b7:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:710
                                    wait(20);
   159ba:	83 ec 0c             	sub    esp,0xc
   159bd:	6a 14                	push   0x14
   159bf:	e8 6e 2a 01 00       	call   28432 <wait>
   159c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:711
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   159c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   159ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   159cd:	83 e0 07             	and    eax,0x7
   159d0:	85 c0                	test   eax,eax
   159d2:	74 05                	je     159d9 <ahci_port_activate_device+0x1ad>
/home/yogi/src/os/chrisOS/src/block/ahci.c:712
                                                    goto next_step;
   159d4:	e9 ca 00 00 00       	jmp    15aa3 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:713
                                    p->cmd.SUD = 0; /* we're done enter listening mode */
   159d9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   159dc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   159df:	83 e2 fd             	and    edx,0xfffffffd
   159e2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:714
                                    printd(DEBUG_AHCI,"not present\n");
   159e5:	83 ec 08             	sub    esp,0x8
   159e8:	68 ed 6c 04 00       	push   0x46ced
   159ed:	68 00 20 00 00       	push   0x2000
   159f2:	e8 1c 18 01 00       	call   27213 <printd>
   159f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:715
                                    goto exit;
   159fa:	e9 47 02 00 00       	jmp    15c46 <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:718
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
   159ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a02:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15a05:	c1 e8 08             	shr    eax,0x8
   15a08:	83 e0 0f             	and    eax,0xf
   15a0b:	3c 01                	cmp    al,0x1
   15a0d:	0f 84 90 00 00 00    	je     15aa3 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:719
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
   15a13:	83 ec 08             	sub    esp,0x8
   15a16:	68 fa 6c 04 00       	push   0x46cfa
   15a1b:	68 00 20 00 00       	push   0x2000
   15a20:	e8 ee 17 01 00       	call   27213 <printd>
   15a25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:720
                                    int ct = 50;
   15a28:	c7 45 f4 32 00 00 00 	mov    DWORD PTR [ebp-0xc],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                                    while (p->cmd.ICC && ct--)
   15a2f:	eb 0d                	jmp    15a3e <ahci_port_activate_device+0x212>
/home/yogi/src/os/chrisOS/src/block/ahci.c:722
                                                    waitTicks(1);
   15a31:	83 ec 0c             	sub    esp,0xc
   15a34:	6a 01                	push   0x1
   15a36:	e8 dc 29 01 00       	call   28417 <waitTicks>
   15a3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
   15a3e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a41:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15a44:	c1 e8 1c             	shr    eax,0x1c
   15a47:	84 c0                	test   al,al
   15a49:	74 0d                	je     15a58 <ahci_port_activate_device+0x22c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:721 (discriminator 1)
   15a4b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15a4e:	8d 50 ff             	lea    edx,[eax-0x1]
   15a51:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   15a54:	85 c0                	test   eax,eax
   15a56:	75 d9                	jne    15a31 <ahci_port_activate_device+0x205>
/home/yogi/src/os/chrisOS/src/block/ahci.c:723
                                                    waitTicks(1);
                                    p->cmd.ICC = 1;
   15a58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a5b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15a5e:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15a64:	81 ca 00 00 00 10    	or     edx,0x10000000
   15a6a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:724
                                    wait(10);
   15a6d:	83 ec 0c             	sub    esp,0xc
   15a70:	6a 0a                	push   0xa
   15a72:	e8 bb 29 01 00       	call   28432 <wait>
   15a77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:725
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15a7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a7d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15a80:	83 e0 07             	and    eax,0x7
   15a83:	85 c0                	test   eax,eax
   15a85:	74 02                	je     15a89 <ahci_port_activate_device+0x25d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:726
                                                    goto next_step;
   15a87:	eb 1a                	jmp    15aa3 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:727
                                    printd(DEBUG_AHCI,"unable to set to active\n");
   15a89:	83 ec 08             	sub    esp,0x8
   15a8c:	68 09 6d 04 00       	push   0x46d09
   15a91:	68 00 20 00 00       	push   0x2000
   15a96:	e8 78 17 01 00       	call   27213 <printd>
   15a9b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:728
                                    goto exit;
   15a9e:	e9 a3 01 00 00       	jmp    15c46 <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:734
                    }
    }

    /* det != 1*/
next_step:
    if ((p->ssts & 0x7) == HBA_PORT_DET_PRESENT) {
   15aa3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15aa6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15aa9:	83 e0 07             	and    eax,0x7
   15aac:	83 f8 03             	cmp    eax,0x3
   15aaf:	0f 85 41 01 00 00    	jne    15bf6 <ahci_port_activate_device+0x3ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:736
                    /* almost done */
                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE) {
   15ab5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ab8:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15abb:	c1 e8 08             	shr    eax,0x8
   15abe:	83 e0 0f             	and    eax,0xf
   15ac1:	3c 01                	cmp    al,0x1
   15ac3:	0f 84 b8 00 00 00    	je     15b81 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:738
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
   15ac9:	83 ec 08             	sub    esp,0x8
   15acc:	68 22 6d 04 00       	push   0x46d22
   15ad1:	68 00 20 00 00       	push   0x2000
   15ad6:	e8 38 17 01 00       	call   27213 <printd>
   15adb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:740
activ:
                                    ct = 50, wc = 0;
   15ade:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
   15ae5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15aec:	eb 0d                	jmp    15afb <ahci_port_activate_device+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:743
                                                    waitTicks(1);
   15aee:	83 ec 0c             	sub    esp,0xc
   15af1:	6a 01                	push   0x1
   15af3:	e8 1f 29 01 00       	call   28417 <waitTicks>
   15af8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15afb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15afe:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15b01:	c1 e8 1c             	shr    eax,0x1c
   15b04:	84 c0                	test   al,al
   15b06:	74 0d                	je     15b15 <ahci_port_activate_device+0x2e9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:742 (discriminator 1)
   15b08:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15b0b:	8d 50 ff             	lea    edx,[eax-0x1]
   15b0e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   15b11:	85 c0                	test   eax,eax
   15b13:	75 d9                	jne    15aee <ahci_port_activate_device+0x2c2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
   15b15:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b18:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15b1b:	c1 e8 08             	shr    eax,0x8
   15b1e:	83 e0 0f             	and    eax,0xf
   15b21:	3c 01                	cmp    al,0x1
   15b23:	74 35                	je     15b5a <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744 (discriminator 1)
   15b25:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15b29:	75 2f                	jne    15b5a <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:745
                                                    p->cmd.ICC = 1;
   15b2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b2e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15b31:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15b37:	81 ca 00 00 00 10    	or     edx,0x10000000
   15b3d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:746
                                                    waitTicks(1);
   15b40:	83 ec 0c             	sub    esp,0xc
   15b43:	6a 01                	push   0x1
   15b45:	e8 cd 28 01 00       	call   28417 <waitTicks>
   15b4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:747
                                                    wc++; ct = 50;
   15b4d:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   15b51:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:748
                                                    goto rewait;
   15b58:	eb 92                	jmp    15aec <ahci_port_activate_device+0x2c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:750
                                    }
                                    if (wc) {
   15b5a:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15b5e:	74 21                	je     15b81 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:752
                                                    /* reset */
                                                    p->sctl.DET = 1;
   15b60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b63:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15b66:	83 e2 f0             	and    edx,0xfffffff0
   15b69:	83 ca 01             	or     edx,0x1
   15b6c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:753
                                                    waitTicks(100);
   15b6f:	83 ec 0c             	sub    esp,0xc
   15b72:	6a 64                	push   0x64
   15b74:	e8 9e 28 01 00       	call   28417 <waitTicks>
   15b79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:754
                                                    goto next_step;
   15b7c:	e9 22 ff ff ff       	jmp    15aa3 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:758
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
   15b81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b84:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15b87:	81 c2 00 01 00 00    	add    edx,0x100
   15b8d:	29 d0                	sub    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:757
                                                    p->sctl.DET = 1;
                                                    waitTicks(100);
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
   15b8f:	c1 f8 07             	sar    eax,0x7
   15b92:	83 ec 04             	sub    esp,0x4
   15b95:	50                   	push   eax
   15b96:	68 3c 6d 04 00       	push   0x46d3c
   15b9b:	68 00 20 00 00       	push   0x2000
   15ba0:	e8 6e 16 01 00       	call   27213 <printd>
   15ba5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15ba8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bab:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15bae:	c1 e8 08             	shr    eax,0x8
   15bb1:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15bb4:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15bb7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bba:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15bbd:	83 e0 07             	and    eax,0x7
   15bc0:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bc5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15bc8:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15bcb:	0f b6 d0             	movzx  edx,al
   15bce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bd1:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15bd4:	83 ec 04             	sub    esp,0x4
   15bd7:	51                   	push   ecx
   15bd8:	53                   	push   ebx
   15bd9:	52                   	push   edx
   15bda:	50                   	push   eax
   15bdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bde:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15be1:	50                   	push   eax
   15be2:	68 66 6d 04 00       	push   0x46d66
   15be7:	68 00 20 00 00       	push   0x2000
   15bec:	e8 22 16 01 00       	call   27213 <printd>
   15bf1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:761
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
                    return;
   15bf4:	eb 78                	jmp    15c6e <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:762
    } else if ((p->ssts & 0x7) == 4/*?*/) {
   15bf6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bf9:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15bfc:	83 e0 07             	and    eax,0x7
   15bff:	83 f8 04             	cmp    eax,0x4
   15c02:	75 1a                	jne    15c1e <ahci_port_activate_device+0x3f2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:764
                    /* just deactivated */
                    printd(DEBUG_AHCI,"PHY offline mode\n");
   15c04:	83 ec 08             	sub    esp,0x8
   15c07:	68 7f 6d 04 00       	push   0x46d7f
   15c0c:	68 00 20 00 00       	push   0x2000
   15c11:	e8 fd 15 01 00       	call   27213 <printd>
   15c16:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:765
                    goto activ;
   15c19:	e9 c0 fe ff ff       	jmp    15ade <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:766
    } else if ((p->ssts & 0x7) == 5/*DET_PRESENT_NO_PHY*/) {
   15c1e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c21:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15c24:	83 e0 07             	and    eax,0x7
   15c27:	83 f8 05             	cmp    eax,0x5
   15c2a:	75 1a                	jne    15c46 <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:767
                    printd(DEBUG_AHCI,"PRESENT_NO_PHY mode\n");
   15c2c:	83 ec 08             	sub    esp,0x8
   15c2f:	68 91 6d 04 00       	push   0x46d91
   15c34:	68 00 20 00 00       	push   0x2000
   15c39:	e8 d5 15 01 00       	call   27213 <printd>
   15c3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:768
                    goto activ; /* try the same */
   15c41:	e9 98 fe ff ff       	jmp    15ade <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:772
    }
exit:
                    /* we're really done */
                    printd(DEBUG_AHCI,"Not present at port %d\n", p - h->ports);
   15c46:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c49:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15c4c:	81 c2 00 01 00 00    	add    edx,0x100
   15c52:	29 d0                	sub    eax,edx
   15c54:	c1 f8 07             	sar    eax,0x7
   15c57:	83 ec 04             	sub    esp,0x4
   15c5a:	50                   	push   eax
   15c5b:	68 a6 6d 04 00       	push   0x46da6
   15c60:	68 00 20 00 00       	push   0x2000
   15c65:	e8 a9 15 01 00       	call   27213 <printd>
   15c6a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:773
                    return;
   15c6d:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:774
}
   15c6e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   15c71:	c9                   	leave  
   15c72:	c3                   	ret    

00015c73 <ahci_enable_port>:
ahci_enable_port():
/home/yogi/src/os/chrisOS/src/block/ahci.c:777

void ahci_enable_port(HBA_MEM* ad, int pt)
{
   15c73:	55                   	push   ebp
   15c74:	89 e5                	mov    ebp,esp
   15c76:	53                   	push   ebx
   15c77:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:778
        HBA_PORT* p = &ad->ports[pt];
   15c7a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c7d:	83 c0 02             	add    eax,0x2
   15c80:	c1 e0 07             	shl    eax,0x7
   15c83:	89 c2                	mov    edx,eax
   15c85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15c88:	01 d0                	add    eax,edx
   15c8a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:779
        int reset_ct = 0;
   15c8d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:782
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
   15c94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15c97:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   15c9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c9d:	bb 01 00 00 00       	mov    ebx,0x1
   15ca2:	89 c1                	mov    ecx,eax
   15ca4:	d3 e3                	shl    ebx,cl
   15ca6:	89 d8                	mov    eax,ebx
   15ca8:	21 d0                	and    eax,edx
   15caa:	85 c0                	test   eax,eax
   15cac:	0f 84 0c 02 00 00    	je     15ebe <ahci_enable_port+0x24b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:787
                return;
 
Pos1:
        /* clear old data */
        p->serr.AsUlong = 0xffffffff; /* 10.1.2 -> 6. */
   15cb2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15cb5:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:788
        p->pxis.AsUlong = 0xffffffff; /* clear all pending interrupts */
   15cbc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15cbf:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:791
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
   15cc6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15cc9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15ccc:	83 ca 10             	or     edx,0x10
   15ccf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:792
        wait(20); /* wait for BSY to show up */
   15cd2:	83 ec 0c             	sub    esp,0xc
   15cd5:	6a 14                	push   0x14
   15cd7:	e8 56 27 01 00       	call   28432 <wait>
   15cdc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:794
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
   15cdf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15ce2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15ce5:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:795
                if (sts & 1) {
   15ce8:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   15cec:	83 e0 01             	and    eax,0x1
   15cef:	85 c0                	test   eax,eax
   15cf1:	0f 84 da 00 00 00    	je     15dd1 <ahci_enable_port+0x15e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:797
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
   15cf7:	80 7d ef 7f          	cmp    BYTE PTR [ebp-0x11],0x7f
   15cfb:	0f 84 ef 00 00 00    	je     15df0 <ahci_enable_port+0x17d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
   15d01:	80 7d ef 41          	cmp    BYTE PTR [ebp-0x11],0x41
   15d05:	75 22                	jne    15d29 <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799 (discriminator 1)
   15d07:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d0a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15d0d:	83 e0 01             	and    eax,0x1
   15d10:	0f b6 c0             	movzx  eax,al
   15d13:	83 f8 20             	cmp    eax,0x20
   15d16:	75 11                	jne    15d29 <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:800
                                if (p->sig == SATA_SIG_ATAPI)
   15d18:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d1b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   15d1e:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   15d23:	0f 84 ca 00 00 00    	je     15df3 <ahci_enable_port+0x180>
/home/yogi/src/os/chrisOS/src/block/ahci.c:804
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
                                " while starting up.\n", pt, p->tfd.ERR);
   15d29:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d2c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15d2f:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:803
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
   15d32:	0f b6 c0             	movzx  eax,al
   15d35:	83 ec 04             	sub    esp,0x4
   15d38:	50                   	push   eax
   15d39:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15d3c:	68 c0 6d 04 00       	push   0x46dc0
   15d41:	e8 ad 14 01 00       	call   271f3 <printk>
   15d46:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:805
                                " while starting up.\n", pt, p->tfd.ERR);
                        printd(DEBUG_AHCI,"AHCI: scr1: %x %x\n", p->serr.AsUlong, p->tfd.ERR);
   15d49:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d4c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15d4f:	83 e0 01             	and    eax,0x1
   15d52:	0f b6 d0             	movzx  edx,al
   15d55:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d58:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15d5b:	52                   	push   edx
   15d5c:	50                   	push   eax
   15d5d:	68 f8 6d 04 00       	push   0x46df8
   15d62:	68 00 20 00 00       	push   0x2000
   15d67:	e8 a7 14 01 00       	call   27213 <printd>
   15d6c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:806
                        printd(DEBUG_AHCI,"AHCI: tfd: %x %x\n", p->tfd.AsUchar, p->tfd.ERR);
   15d6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d72:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15d75:	83 e0 01             	and    eax,0x1
   15d78:	0f b6 d0             	movzx  edx,al
   15d7b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d7e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15d81:	52                   	push   edx
   15d82:	50                   	push   eax
   15d83:	68 0b 6e 04 00       	push   0x46e0b
   15d88:	68 00 20 00 00       	push   0x2000
   15d8d:	e8 81 14 01 00       	call   27213 <printd>
   15d92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:807
                        p->serr.AsUlong = 0xffffffff;
   15d95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d98:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:808
                        if (!reset_ct++) {
   15d9f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15da2:	8d 50 01             	lea    edx,[eax+0x1]
   15da5:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   15da8:	85 c0                	test   eax,eax
   15daa:	75 16                	jne    15dc2 <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:809
                                ahci_port_activate_device(ad, p);
   15dac:	83 ec 08             	sub    esp,0x8
   15daf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15db2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15db5:	e8 72 fa ff ff       	call   1582c <ahci_port_activate_device>
   15dba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:810
                                goto Pos1;
   15dbd:	e9 f0 fe ff ff       	jmp    15cb2 <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:811
                        } else if (reset_ct == 1) {
   15dc2:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   15dc6:	0f 85 c7 00 00 00    	jne    15e93 <ahci_enable_port+0x220>
/home/yogi/src/os/chrisOS/src/block/ahci.c:813
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
   15dcc:	e9 e1 fe ff ff       	jmp    15cb2 <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:817
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
   15dd1:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   15dd5:	25 88 00 00 00       	and    eax,0x88
   15dda:	85 c0                	test   eax,eax
   15ddc:	74 18                	je     15df6 <ahci_enable_port+0x183>
/home/yogi/src/os/chrisOS/src/block/ahci.c:819
                        break;
                wait(50);
   15dde:	83 ec 0c             	sub    esp,0xc
   15de1:	6a 32                	push   0x32
   15de3:	e8 4a 26 01 00       	call   28432 <wait>
   15de8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:820
        }
   15deb:	e9 ef fe ff ff       	jmp    15cdf <ahci_enable_port+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:798
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
                if (sts & 1) {
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
                                break;
   15df0:	90                   	nop
   15df1:	eb 04                	jmp    15df7 <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:801
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
   15df3:	90                   	nop
   15df4:	eb 01                	jmp    15df7 <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:818
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
                        break;
   15df6:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:823
                wait(50);
        }
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
   15df7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15dfa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15dfd:	83 e0 07             	and    eax,0x7
   15e00:	83 f8 03             	cmp    eax,0x3
   15e03:	74 11                	je     15e16 <ahci_enable_port+0x1a3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:824
                ahci_port_activate_device(ad, p);
   15e05:	83 ec 08             	sub    esp,0x8
   15e08:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15e0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15e0e:	e8 19 fa ff ff       	call   1582c <ahci_port_activate_device>
   15e13:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:825
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
   15e16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e19:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15e1c:	25 88 00 00 00       	and    eax,0x88
   15e21:	85 c0                	test   eax,eax
   15e23:	75 71                	jne    15e96 <ahci_enable_port+0x223>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   15e25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e28:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15e2b:	83 e0 07             	and    eax,0x7
   15e2e:	83 f8 03             	cmp    eax,0x3
   15e31:	74 30                	je     15e63 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 1)
   15e33:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e36:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15e39:	c1 e8 08             	shr    eax,0x8
   15e3c:	83 e0 0f             	and    eax,0xf
   15e3f:	3c 02                	cmp    al,0x2
   15e41:	74 20                	je     15e63 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 2)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   15e43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e46:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15e49:	c1 e8 08             	shr    eax,0x8
   15e4c:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 2)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   15e4f:	3c 06                	cmp    al,0x6
   15e51:	74 10                	je     15e63 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 3)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   15e53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e56:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15e59:	c1 e8 08             	shr    eax,0x8
   15e5c:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 3)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   15e5f:	3c 08                	cmp    al,0x8
   15e61:	75 36                	jne    15e99 <ahci_enable_port+0x226>
/home/yogi/src/os/chrisOS/src/block/ahci.c:831
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
        /* we're allowed so set it */
        p->cmd.ST = 1;
   15e63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e66:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15e69:	83 ca 01             	or     edx,0x1
   15e6c:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:833
        /* Change in PhyRdy, CPS, TFS.err, PCS, DPS(I=1), UFS, HBFS, HBDS, IFS */
        p->ie.AsUlong = (1 << 22) | (1 << 6) | (1 << 31) | (1 << 30)
   15e6f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15e72:	c7 40 14 70 00 40 f8 	mov    DWORD PTR [eax+0x14],0xf8400070
/home/yogi/src/os/chrisOS/src/block/ahci.c:839
                | (1 << 5) | (1 << 4) | (1 << 29) | (1 << 28) | (1 << 27);
 
        ///* issue the IDENTIFY_(PACKET)_DEVICE command */
        //ahci_issue_command(ad, pt, 0, disk_cmd_identify, 0, 0, NULL, NULL /* wq_worker_ad*/);
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
   15e79:	83 ec 04             	sub    esp,0x4
   15e7c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15e7f:	68 20 6e 04 00       	push   0x46e20
   15e84:	68 00 20 00 00       	push   0x2000
   15e89:	e8 85 13 01 00       	call   27213 <printd>
   15e8e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:840
        return;
   15e91:	eb 2c                	jmp    15ebf <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:815
                                goto Pos1;
                        } else if (reset_ct == 1) {
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
   15e93:	90                   	nop
   15e94:	eb 04                	jmp    15e9a <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:826
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
   15e96:	90                   	nop
   15e97:	eb 01                	jmp    15e9a <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:829
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
   15e99:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:843
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
   15e9a:	83 ec 04             	sub    esp,0x4
   15e9d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15ea0:	68 4c 6e 04 00       	push   0x46e4c
   15ea5:	68 00 20 00 00       	push   0x2000
   15eaa:	e8 64 13 01 00       	call   27213 <printd>
   15eaf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:844
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
   15eb2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15eb5:	c7 40 14 40 00 40 80 	mov    DWORD PTR [eax+0x14],0x80400040
   15ebc:	eb 01                	jmp    15ebf <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:783
        HBA_PORT* p = &ad->ports[pt];
        int reset_ct = 0;
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
                return;
   15ebe:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:845
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
}
   15ebf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   15ec2:	c9                   	leave  
   15ec3:	c3                   	ret    

00015ec4 <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32
{
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
   15ec4:	55                   	push   ebp
   15ec5:	89 e5                	mov    ebp,esp
   15ec7:	83 ec 04             	sub    esp,0x4
   15eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15ecd:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   15ed1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ed4:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   15ed8:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   15ed9:	90                   	nop
   15eda:	c9                   	leave  
   15edb:	c3                   	ret    

00015edc <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
	return __val;
}

static __inline unsigned int inl(unsigned short __port)
{
   15edc:	55                   	push   ebp
   15edd:	89 e5                	mov    ebp,esp
   15edf:	83 ec 14             	sub    esp,0x14
   15ee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15ee5:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   15ee9:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   15eed:	89 c2                	mov    edx,eax
   15eef:	ed                   	in     eax,dx
   15ef0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   15ef3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   15ef6:	c9                   	leave  
   15ef7:	c3                   	ret    

00015ef8 <printPCIConfig>:
printPCIConfig():
/home/yogi/src/os/chrisOS/src/block/pci.c:26
extern struct pci_bridge_t* kPCIBridgeHeaders;
extern struct pci_device_t* kPCIDeviceFunctions;
extern uint32_t kDebugLevel;

void printPCIConfig()
{
   15ef8:	55                   	push   ebp
   15ef9:	89 e5                	mov    ebp,esp
   15efb:	57                   	push   edi
   15efc:	56                   	push   esi
   15efd:	53                   	push   ebx
   15efe:	81 ec dc 00 00 00    	sub    esp,0xdc
/home/yogi/src/os/chrisOS/src/block/pci.c:28
    char buffer[150];
    int totalCnt=0;
   15f04:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:30
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
   15f0b:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   15f12:	0f b6 d0             	movzx  edx,al
   15f15:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   15f1c:	0f b6 c0             	movzx  eax,al
   15f1f:	01 d0                	add    eax,edx
   15f21:	83 ec 08             	sub    esp,0x8
   15f24:	50                   	push   eax
   15f25:	68 14 24 08 00       	push   0x82414
   15f2a:	e8 c4 12 01 00       	call   271f3 <printk>
   15f2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:31
    puts("Devices:\n");
   15f32:	83 ec 0c             	sub    esp,0xc
   15f35:	68 3b 24 08 00       	push   0x8243b
   15f3a:	e8 33 21 00 00       	call   18072 <puts>
   15f3f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:32
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   15f42:	83 ec 0c             	sub    esp,0xc
   15f45:	68 48 24 08 00       	push   0x82448
   15f4a:	e8 a4 12 01 00       	call   271f3 <printk>
   15f4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   15f52:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   15f59:	e9 ed 01 00 00       	jmp    1614b <printPCIConfig+0x253>
/home/yogi/src/os/chrisOS/src/block/pci.c:37
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
   15f5e:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15f64:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f67:	89 d0                	mov    eax,edx
   15f69:	c1 e0 02             	shl    eax,0x2
   15f6c:	01 d0                	add    eax,edx
   15f6e:	c1 e0 04             	shl    eax,0x4
   15f71:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f73:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   15f76:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f7c:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15f82:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15f85:	89 d0                	mov    eax,edx
   15f87:	c1 e0 02             	shl    eax,0x2
   15f8a:	01 d0                	add    eax,edx
   15f8c:	c1 e0 04             	shl    eax,0x4
   15f8f:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15f91:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   15f94:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15f9a:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15fa0:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15fa3:	89 d0                	mov    eax,edx
   15fa5:	c1 e0 02             	shl    eax,0x2
   15fa8:	01 d0                	add    eax,edx
   15faa:	c1 e0 04             	shl    eax,0x4
   15fad:	01 c8                	add    eax,ecx
   15faf:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15fb3:	0f b7 f8             	movzx  edi,ax
   15fb6:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15fbc:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15fc2:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15fc5:	89 d0                	mov    eax,edx
   15fc7:	c1 e0 02             	shl    eax,0x2
   15fca:	01 d0                	add    eax,edx
   15fcc:	c1 e0 04             	shl    eax,0x4
   15fcf:	01 c8                	add    eax,ecx
   15fd1:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15fd5:	0f b7 d8             	movzx  ebx,ax
   15fd8:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   15fde:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   15fe4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   15fe7:	89 d0                	mov    eax,edx
   15fe9:	c1 e0 02             	shl    eax,0x2
   15fec:	01 d0                	add    eax,edx
   15fee:	c1 e0 04             	shl    eax,0x4
   15ff1:	01 c8                	add    eax,ecx
   15ff3:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   15ff7:	0f b6 c8             	movzx  ecx,al
   15ffa:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   16000:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   16006:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16009:	89 d0                	mov    eax,edx
   1600b:	c1 e0 02             	shl    eax,0x2
   1600e:	01 d0                	add    eax,edx
   16010:	c1 e0 04             	shl    eax,0x4
   16013:	01 c8                	add    eax,ecx
   16015:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   16019:	0f b6 f8             	movzx  edi,al
   1601c:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   16022:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16025:	89 d0                	mov    eax,edx
   16027:	c1 e0 02             	shl    eax,0x2
   1602a:	01 d0                	add    eax,edx
   1602c:	c1 e0 04             	shl    eax,0x4
   1602f:	01 c8                	add    eax,ecx
   16031:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   16035:	0f b6 f0             	movzx  esi,al
   16038:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   1603e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16041:	89 d0                	mov    eax,edx
   16043:	c1 e0 02             	shl    eax,0x2
   16046:	01 d0                	add    eax,edx
   16048:	c1 e0 04             	shl    eax,0x4
   1604b:	01 c8                	add    eax,ecx
   1604d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   16051:	0f b6 d8             	movzx  ebx,al
   16054:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   1605a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1605d:	89 d0                	mov    eax,edx
   1605f:	c1 e0 02             	shl    eax,0x2
   16062:	01 d0                	add    eax,edx
   16064:	c1 e0 04             	shl    eax,0x4
   16067:	01 c8                	add    eax,ecx
   16069:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1606c:	0f b6 c0             	movzx  eax,al
   1606f:	83 ec 08             	sub    esp,0x8
   16072:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   16078:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   1607e:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16084:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   1608a:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   16090:	57                   	push   edi
   16091:	56                   	push   esi
   16092:	53                   	push   ebx
   16093:	50                   	push   eax
   16094:	68 84 24 08 00       	push   0x82484
   16099:	e8 55 11 01 00       	call   271f3 <printk>
   1609e:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:40
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
   160a1:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   160a7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   160aa:	89 d0                	mov    eax,edx
   160ac:	c1 e0 02             	shl    eax,0x2
   160af:	01 d0                	add    eax,edx
   160b1:	c1 e0 04             	shl    eax,0x4
   160b4:	01 c8                	add    eax,ecx
   160b6:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   160ba:	0f b7 c8             	movzx  ecx,ax
   160bd:	8b 1d b4 02 12 00    	mov    ebx,DWORD PTR ds:0x1202b4
   160c3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   160c6:	89 d0                	mov    eax,edx
   160c8:	c1 e0 02             	shl    eax,0x2
   160cb:	01 d0                	add    eax,edx
   160cd:	c1 e0 04             	shl    eax,0x4
   160d0:	01 d8                	add    eax,ebx
   160d2:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   160d6:	0f b7 c0             	movzx  eax,ax
   160d9:	83 ec 04             	sub    esp,0x4
   160dc:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   160e2:	52                   	push   edx
   160e3:	51                   	push   ecx
   160e4:	50                   	push   eax
   160e5:	e8 63 07 00 00       	call   1684d <getDeviceName>
   160ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:41
        strleft(buffer,28);
   160ed:	83 ec 08             	sub    esp,0x8
   160f0:	6a 1c                	push   0x1c
   160f2:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   160f8:	50                   	push   eax
   160f9:	e8 62 14 01 00       	call   27560 <strleft>
   160fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:42
        printk("%s\n",buffer);
   16101:	83 ec 08             	sub    esp,0x8
   16104:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1610a:	50                   	push   eax
   1610b:	68 b8 24 08 00       	push   0x824b8
   16110:	e8 de 10 01 00       	call   271f3 <printk>
   16115:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:43
        totalCnt++;
   16118:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:44
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   1611c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   16120:	7e 25                	jle    16147 <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:44 (discriminator 1)
   16122:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16125:	8d 58 04             	lea    ebx,[eax+0x4]
   16128:	e8 86 1e 00 00       	call   17fb3 <cursorGetMaxY>
   1612d:	89 c1                	mov    ecx,eax
   1612f:	89 d8                	mov    eax,ebx
   16131:	99                   	cdq    
   16132:	f7 f9                	idiv   ecx
   16134:	89 d0                	mov    eax,edx
   16136:	85 c0                	test   eax,eax
   16138:	75 0d                	jne    16147 <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:45
            pauseDisplay(false);
   1613a:	83 ec 0c             	sub    esp,0xc
   1613d:	6a 00                	push   0x0
   1613f:	e8 82 f8 00 00       	call   259c6 <pauseDisplay>
   16144:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 2)
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   16147:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 1)
   1614b:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   16152:	0f b6 c0             	movzx  eax,al
   16155:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   16158:	0f 8f 00 fe ff ff    	jg     15f5e <printPCIConfig+0x66>
/home/yogi/src/os/chrisOS/src/block/pci.c:47
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
   1615e:	83 ec 0c             	sub    esp,0xc
   16161:	68 bc 24 08 00       	push   0x824bc
   16166:	e8 07 1f 00 00       	call   18072 <puts>
   1616b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   1616e:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   16175:	e9 ef 01 00 00       	jmp    16369 <printPCIConfig+0x471>
/home/yogi/src/os/chrisOS/src/block/pci.c:55
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1617a:	a1 b8 02 12 00       	mov    eax,ds:0x1202b8
   1617f:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16183:	0f b6 c0             	movzx  eax,al
   16186:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1618c:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16192:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16195:	6b c0 4e             	imul   eax,eax,0x4e
   16198:	01 d0                	add    eax,edx
   1619a:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1619e:	0f b6 f0             	movzx  esi,al
   161a1:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   161a7:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   161ad:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161b0:	6b c0 4e             	imul   eax,eax,0x4e
   161b3:	01 d0                	add    eax,edx
   161b5:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161b9:	0f b6 f8             	movzx  edi,al
   161bc:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   161c2:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   161c8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161cb:	6b c0 4e             	imul   eax,eax,0x4e
   161ce:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161d0:	8b 58 0d             	mov    ebx,DWORD PTR [eax+0xd]
   161d3:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   161d9:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   161df:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161e2:	6b c0 4e             	imul   eax,eax,0x4e
   161e5:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   161e7:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   161ea:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   161f0:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   161f6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   161f9:	6b c0 4e             	imul   eax,eax,0x4e
   161fc:	01 d0                	add    eax,edx
   161fe:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16202:	0f b7 d0             	movzx  edx,ax
   16205:	89 95 20 ff ff ff    	mov    DWORD PTR [ebp-0xe0],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   1620b:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16211:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16214:	6b c0 4e             	imul   eax,eax,0x4e
   16217:	01 d0                	add    eax,edx
   16219:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1621d:	0f b7 c0             	movzx  eax,ax
   16220:	89 85 1c ff ff ff    	mov    DWORD PTR [ebp-0xe4],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   16226:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   1622c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1622f:	6b c0 4e             	imul   eax,eax,0x4e
   16232:	01 d0                	add    eax,edx
   16234:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16238:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   1623b:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16241:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16244:	6b c0 4e             	imul   eax,eax,0x4e
   16247:	01 d0                	add    eax,edx
   16249:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1624d:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   16250:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16256:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16259:	6b c0 4e             	imul   eax,eax,0x4e
   1625c:	01 d0                	add    eax,edx
   1625e:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16262:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   16265:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   1626b:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1626e:	6b c0 4e             	imul   eax,eax,0x4e
   16271:	01 d0                	add    eax,edx
   16273:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16277:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   1627a:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   16280:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16283:	6b c0 4e             	imul   eax,eax,0x4e
   16286:	01 d0                	add    eax,edx
   16288:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1628b:	0f b6 c0             	movzx  eax,al
   1628e:	83 ec 0c             	sub    esp,0xc
   16291:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   16297:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   1629d:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   162a3:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   162a9:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   162af:	ff b5 20 ff ff ff    	push   DWORD PTR [ebp-0xe0]
   162b5:	ff b5 1c ff ff ff    	push   DWORD PTR [ebp-0xe4]
   162bb:	57                   	push   edi
   162bc:	56                   	push   esi
   162bd:	53                   	push   ebx
   162be:	51                   	push   ecx
   162bf:	50                   	push   eax
   162c0:	68 c8 24 08 00       	push   0x824c8
   162c5:	e8 29 0f 01 00       	call   271f3 <printk>
   162ca:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
   162cd:	8b 15 b8 02 12 00    	mov    edx,DWORD PTR ds:0x1202b8
   162d3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   162d6:	6b c0 4e             	imul   eax,eax,0x4e
   162d9:	01 d0                	add    eax,edx
   162db:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   162df:	0f b7 d0             	movzx  edx,ax
   162e2:	8b 0d b8 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b8
   162e8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   162eb:	6b c0 4e             	imul   eax,eax,0x4e
   162ee:	01 c8                	add    eax,ecx
   162f0:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   162f4:	0f b7 c0             	movzx  eax,ax
   162f7:	83 ec 04             	sub    esp,0x4
   162fa:	8d 8d 42 ff ff ff    	lea    ecx,[ebp-0xbe]
   16300:	51                   	push   ecx
   16301:	52                   	push   edx
   16302:	50                   	push   eax
   16303:	e8 45 05 00 00       	call   1684d <getDeviceName>
   16308:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:61
        strleft(buffer,28);
   1630b:	83 ec 08             	sub    esp,0x8
   1630e:	6a 1c                	push   0x1c
   16310:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16316:	50                   	push   eax
   16317:	e8 44 12 01 00       	call   27560 <strleft>
   1631c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:62
        printk("%s\n",buffer);
   1631f:	83 ec 08             	sub    esp,0x8
   16322:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16328:	50                   	push   eax
   16329:	68 b8 24 08 00       	push   0x824b8
   1632e:	e8 c0 0e 01 00       	call   271f3 <printk>
   16333:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:63
        totalCnt++;
   16336:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:64
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   1633a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1633e:	7e 25                	jle    16365 <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:64 (discriminator 1)
   16340:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16343:	8d 58 04             	lea    ebx,[eax+0x4]
   16346:	e8 68 1c 00 00       	call   17fb3 <cursorGetMaxY>
   1634b:	89 c1                	mov    ecx,eax
   1634d:	89 d8                	mov    eax,ebx
   1634f:	99                   	cdq    
   16350:	f7 f9                	idiv   ecx
   16352:	89 d0                	mov    eax,edx
   16354:	85 c0                	test   eax,eax
   16356:	75 0d                	jne    16365 <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:65
            pauseDisplay(false);
   16358:	83 ec 0c             	sub    esp,0xc
   1635b:	6a 00                	push   0x0
   1635d:	e8 64 f6 00 00       	call   259c6 <pauseDisplay>
   16362:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   16365:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 1)
   16369:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   16370:	0f b6 c0             	movzx  eax,al
   16373:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   16376:	0f 8f fe fd ff ff    	jg     1617a <printPCIConfig+0x282>
/home/yogi/src/os/chrisOS/src/block/pci.c:67
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
   1637c:	83 ec 0c             	sub    esp,0xc
   1637f:	68 0c 25 08 00       	push   0x8250c
   16384:	e8 e9 1c 00 00       	call   18072 <puts>
   16389:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   1638c:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
   16393:	e9 ed 01 00 00       	jmp    16585 <printPCIConfig+0x68d>
/home/yogi/src/os/chrisOS/src/block/pci.c:74
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
   16398:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   1639e:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163a1:	89 d0                	mov    eax,edx
   163a3:	c1 e0 02             	shl    eax,0x2
   163a6:	01 d0                	add    eax,edx
   163a8:	c1 e0 04             	shl    eax,0x4
   163ab:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   163ad:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   163b0:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   163b6:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   163bc:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163bf:	89 d0                	mov    eax,edx
   163c1:	c1 e0 02             	shl    eax,0x2
   163c4:	01 d0                	add    eax,edx
   163c6:	c1 e0 04             	shl    eax,0x4
   163c9:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   163cb:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   163ce:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   163d4:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   163da:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163dd:	89 d0                	mov    eax,edx
   163df:	c1 e0 02             	shl    eax,0x2
   163e2:	01 d0                	add    eax,edx
   163e4:	c1 e0 04             	shl    eax,0x4
   163e7:	01 c8                	add    eax,ecx
   163e9:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   163ed:	0f b7 f8             	movzx  edi,ax
   163f0:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   163f6:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   163fc:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   163ff:	89 d0                	mov    eax,edx
   16401:	c1 e0 02             	shl    eax,0x2
   16404:	01 d0                	add    eax,edx
   16406:	c1 e0 04             	shl    eax,0x4
   16409:	01 c8                	add    eax,ecx
   1640b:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   1640f:	0f b7 d8             	movzx  ebx,ax
   16412:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   16418:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   1641e:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16421:	89 d0                	mov    eax,edx
   16423:	c1 e0 02             	shl    eax,0x2
   16426:	01 d0                	add    eax,edx
   16428:	c1 e0 04             	shl    eax,0x4
   1642b:	01 c8                	add    eax,ecx
   1642d:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16431:	0f b6 c8             	movzx  ecx,al
   16434:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1643a:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   16440:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16443:	89 d0                	mov    eax,edx
   16445:	c1 e0 02             	shl    eax,0x2
   16448:	01 d0                	add    eax,edx
   1644a:	c1 e0 04             	shl    eax,0x4
   1644d:	01 c8                	add    eax,ecx
   1644f:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16453:	0f b6 f8             	movzx  edi,al
   16456:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   1645c:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   1645f:	89 d0                	mov    eax,edx
   16461:	c1 e0 02             	shl    eax,0x2
   16464:	01 d0                	add    eax,edx
   16466:	c1 e0 04             	shl    eax,0x4
   16469:	01 c8                	add    eax,ecx
   1646b:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1646f:	0f b6 f0             	movzx  esi,al
   16472:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   16478:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   1647b:	89 d0                	mov    eax,edx
   1647d:	c1 e0 02             	shl    eax,0x2
   16480:	01 d0                	add    eax,edx
   16482:	c1 e0 04             	shl    eax,0x4
   16485:	01 c8                	add    eax,ecx
   16487:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1648b:	0f b6 d8             	movzx  ebx,al
   1648e:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   16494:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16497:	89 d0                	mov    eax,edx
   16499:	c1 e0 02             	shl    eax,0x2
   1649c:	01 d0                	add    eax,edx
   1649e:	c1 e0 04             	shl    eax,0x4
   164a1:	01 c8                	add    eax,ecx
   164a3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   164a6:	0f b6 c0             	movzx  eax,al
   164a9:	83 ec 08             	sub    esp,0x8
   164ac:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   164b2:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   164b8:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   164be:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   164c4:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   164ca:	57                   	push   edi
   164cb:	56                   	push   esi
   164cc:	53                   	push   ebx
   164cd:	50                   	push   eax
   164ce:	68 84 24 08 00       	push   0x82484
   164d3:	e8 1b 0d 01 00       	call   271f3 <printk>
   164d8:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:77
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
   164db:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   164e1:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   164e4:	89 d0                	mov    eax,edx
   164e6:	c1 e0 02             	shl    eax,0x2
   164e9:	01 d0                	add    eax,edx
   164eb:	c1 e0 04             	shl    eax,0x4
   164ee:	01 c8                	add    eax,ecx
   164f0:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   164f4:	0f b7 c8             	movzx  ecx,ax
   164f7:	8b 1d bc 02 12 00    	mov    ebx,DWORD PTR ds:0x1202bc
   164fd:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16500:	89 d0                	mov    eax,edx
   16502:	c1 e0 02             	shl    eax,0x2
   16505:	01 d0                	add    eax,edx
   16507:	c1 e0 04             	shl    eax,0x4
   1650a:	01 d8                	add    eax,ebx
   1650c:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   16510:	0f b7 c0             	movzx  eax,ax
   16513:	83 ec 04             	sub    esp,0x4
   16516:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   1651c:	52                   	push   edx
   1651d:	51                   	push   ecx
   1651e:	50                   	push   eax
   1651f:	e8 29 03 00 00       	call   1684d <getDeviceName>
   16524:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:78
            strleft(buffer,28);
   16527:	83 ec 08             	sub    esp,0x8
   1652a:	6a 1c                	push   0x1c
   1652c:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16532:	50                   	push   eax
   16533:	e8 28 10 01 00       	call   27560 <strleft>
   16538:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:79
            printk("%s\n",buffer);
   1653b:	83 ec 08             	sub    esp,0x8
   1653e:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16544:	50                   	push   eax
   16545:	68 b8 24 08 00       	push   0x824b8
   1654a:	e8 a4 0c 01 00       	call   271f3 <printk>
   1654f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:80
            totalCnt++;
   16552:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:81
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   16556:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1655a:	7e 25                	jle    16581 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:81 (discriminator 1)
   1655c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1655f:	8d 58 04             	lea    ebx,[eax+0x4]
   16562:	e8 4c 1a 00 00       	call   17fb3 <cursorGetMaxY>
   16567:	89 c1                	mov    ecx,eax
   16569:	89 d8                	mov    eax,ebx
   1656b:	99                   	cdq    
   1656c:	f7 f9                	idiv   ecx
   1656e:	89 d0                	mov    eax,edx
   16570:	85 c0                	test   eax,eax
   16572:	75 0d                	jne    16581 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:82
            pauseDisplay(false);
   16574:	83 ec 0c             	sub    esp,0xc
   16577:	6a 00                	push   0x0
   16579:	e8 48 f4 00 00       	call   259c6 <pauseDisplay>
   1657e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   16581:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 1)
   16585:	0f b6 05 ae 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ae
   1658c:	0f b6 c0             	movzx  eax,al
   1658f:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   16592:	0f 8f 00 fe ff ff    	jg     16398 <printPCIConfig+0x4a0>
/home/yogi/src/os/chrisOS/src/block/pci.c:85
            totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
        }
    }
}
   16598:	90                   	nop
   16599:	8d 65 f4             	lea    esp,[ebp-0xc]
   1659c:	5b                   	pop    ebx
   1659d:	5e                   	pop    esi
   1659e:	5f                   	pop    edi
   1659f:	5d                   	pop    ebp
   165a0:	c3                   	ret    

000165a1 <pciConfigReadWord>:
pciConfigReadWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:90

//struct pci_device_id* pci_deviceList = (struct pci_device_id*)PCI_DEVICE_LIST_ADDRESS;
  uint16_t pciConfigReadWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   165a1:	55                   	push   ebp
   165a2:	89 e5                	mov    ebp,esp
   165a4:	53                   	push   ebx
   165a5:	83 ec 30             	sub    esp,0x30
   165a8:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   165ab:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   165ae:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   165b1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   165b4:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   165b7:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   165ba:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   165bd:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:92
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   165c0:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   165c4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:93
    uint32_t lslot = (uint32_t)slot;
   165c7:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   165cb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:94
    uint32_t lfunc = (uint32_t)func;
   165ce:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   165d2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:95
    uint16_t tmp = 0;
   165d5:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   165db:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   165de:	c1 e0 10             	shl    eax,0x10
   165e1:	89 c2                	mov    edx,eax
   165e3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   165e6:	c1 e0 0b             	shl    eax,0xb
   165e9:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   165eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   165ee:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   165f1:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   165f3:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   165f7:	25 fc 00 00 00       	and    eax,0xfc
   165fc:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   165fe:	0d 00 00 00 80       	or     eax,0x80000000
   16603:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:101
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   16606:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   16609:	68 f8 0c 00 00       	push   0xcf8
   1660e:	e8 b1 f8 ff ff       	call   15ec4 <outl>
   16613:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:104
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    tmp = (uint16_t)((inl (0xCFC) >> ((offset & 2) * 8)) & 0xffff);
   16616:	68 fc 0c 00 00       	push   0xcfc
   1661b:	e8 bc f8 ff ff       	call   15edc <inl>
   16620:	83 c4 04             	add    esp,0x4
   16623:	89 c2                	mov    edx,eax
   16625:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   16629:	83 e0 02             	and    eax,0x2
   1662c:	c1 e0 03             	shl    eax,0x3
   1662f:	89 c1                	mov    ecx,eax
   16631:	d3 ea                	shr    edx,cl
   16633:	89 d0                	mov    eax,edx
   16635:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:105
    return (tmp);
   16639:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
/home/yogi/src/os/chrisOS/src/block/pci.c:106
 }
   1663d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16640:	c9                   	leave  
   16641:	c3                   	ret    

00016642 <pciConfigReadDWord>:
pciConfigReadDWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:110

 uint32_t pciConfigReadDWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   16642:	55                   	push   ebp
   16643:	89 e5                	mov    ebp,esp
   16645:	53                   	push   ebx
   16646:	83 ec 30             	sub    esp,0x30
   16649:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1664c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   1664f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16652:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16655:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   16658:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   1665b:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   1665e:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:112
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   16661:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   16665:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:113
    uint32_t lslot = (uint32_t)slot;
   16668:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   1666c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:114
    uint32_t lfunc = (uint32_t)func;
   1666f:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   16673:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16676:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   16679:	c1 e0 10             	shl    eax,0x10
   1667c:	89 c2                	mov    edx,eax
   1667e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16681:	c1 e0 0b             	shl    eax,0xb
   16684:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16686:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16689:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   1668c:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   1668e:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   16692:	25 fc 00 00 00       	and    eax,0xfc
   16697:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16699:	0d 00 00 00 80       	or     eax,0x80000000
   1669e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:122
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   166a1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   166a4:	68 f8 0c 00 00       	push   0xcf8
   166a9:	e8 16 f8 ff ff       	call   15ec4 <outl>
   166ae:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:125
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    num = inl (0xCFC);
   166b1:	68 fc 0c 00 00       	push   0xcfc
   166b6:	e8 21 f8 ff ff       	call   15edc <inl>
   166bb:	83 c4 04             	add    esp,0x4
   166be:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:127
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
   166c1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/block/pci.c:128
 }
   166c4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   166c7:	c9                   	leave  
   166c8:	c3                   	ret    

000166c9 <pciQueryBDF>:
pciQueryBDF():
/home/yogi/src/os/chrisOS/src/block/pci.c:131

 void pciQueryBDF(uint8_t bus, uint8_t device, uint8_t function)
 {
   166c9:	55                   	push   ebp
   166ca:	89 e5                	mov    ebp,esp
   166cc:	81 ec b8 00 00 00    	sub    esp,0xb8
   166d2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   166d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   166d8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   166db:	88 8d 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],cl
   166e1:	88 95 50 ff ff ff    	mov    BYTE PTR [ebp-0xb0],dl
   166e7:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:135
     struct pci_device_t header;
     struct pci_bridge_t bridge;

     printk("Retrieving info for PCI address %02X:%02X:%02X\n",bus,device,function);
   166ed:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   166f4:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   166fb:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16702:	51                   	push   ecx
   16703:	52                   	push   edx
   16704:	50                   	push   eax
   16705:	68 18 25 08 00       	push   0x82518
   1670a:	e8 e4 0a 01 00       	call   271f3 <printk>
   1670f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:136
    if (!getDeviceHeader(&header, bus, device, function))
   16712:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16719:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16720:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16727:	51                   	push   ecx
   16728:	52                   	push   edx
   16729:	50                   	push   eax
   1672a:	8d 45 a8             	lea    eax,[ebp-0x58]
   1672d:	50                   	push   eax
   1672e:	e8 bd 02 00 00       	call   169f0 <getDeviceHeader>
   16733:	83 c4 10             	add    esp,0x10
   16736:	83 f0 01             	xor    eax,0x1
   16739:	84 c0                	test   al,al
   1673b:	74 15                	je     16752 <pciQueryBDF+0x89>
/home/yogi/src/os/chrisOS/src/block/pci.c:138
    {
        printk("No device at that address\n");
   1673d:	83 ec 0c             	sub    esp,0xc
   16740:	68 48 25 08 00       	push   0x82548
   16745:	e8 a9 0a 01 00       	call   271f3 <printk>
   1674a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:139
        return;
   1674d:	e9 83 00 00 00       	jmp    167d5 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:141
    }
    if (header.vendor==0xFFFF)
   16752:	0f b7 45 ae          	movzx  eax,WORD PTR [ebp-0x52]
   16756:	66 83 f8 ff          	cmp    ax,0xffff
   1675a:	75 27                	jne    16783 <pciQueryBDF+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:143
    {
        printk("Nothing found at %02X:%02X:%02X\n",bus,device,function);
   1675c:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16763:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   1676a:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16771:	51                   	push   ecx
   16772:	52                   	push   edx
   16773:	50                   	push   eax
   16774:	68 64 25 08 00       	push   0x82564
   16779:	e8 75 0a 01 00       	call   271f3 <printk>
   1677e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:144
        return;
   16781:	eb 52                	jmp    167d5 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:146
    }
     if (header.class==0x06)
   16783:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   16786:	83 f8 06             	cmp    eax,0x6
   16789:	75 3b                	jne    167c6 <pciQueryBDF+0xfd>
/home/yogi/src/os/chrisOS/src/block/pci.c:148
     {
         getBridgeHeader(&bridge,bus,device,function);
   1678b:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16792:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16799:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   167a0:	51                   	push   ecx
   167a1:	52                   	push   edx
   167a2:	50                   	push   eax
   167a3:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   167a9:	50                   	push   eax
   167aa:	e8 27 04 00 00       	call   16bd6 <getBridgeHeader>
   167af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:149
         printPCIBridgeHeader(&bridge);
   167b2:	83 ec 0c             	sub    esp,0xc
   167b5:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   167bb:	50                   	push   eax
   167bc:	e8 5d 07 00 00       	call   16f1e <printPCIBridgeHeader>
   167c1:	83 c4 10             	add    esp,0x10
   167c4:	eb 0f                	jmp    167d5 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:152
     }
     else
         printPCIHeader(&header);
   167c6:	83 ec 0c             	sub    esp,0xc
   167c9:	8d 45 a8             	lea    eax,[ebp-0x58]
   167cc:	50                   	push   eax
   167cd:	e8 a1 09 00 00       	call   17173 <printPCIHeader>
   167d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:153
 }
   167d5:	c9                   	leave  
   167d6:	c3                   	ret    

000167d7 <getVendorLongName>:
getVendorLongName():
/home/yogi/src/os/chrisOS/src/block/pci.c:162
    uint32_t subvendor, subdevice;  // Subsystem ID's or PCI_ANY_ID 
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
   167d7:	55                   	push   ebp
   167d8:	89 e5                	mov    ebp,esp
   167da:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:163
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   167dd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   167e4:	eb 49                	jmp    1682f <getVendorLongName+0x58>
/home/yogi/src/os/chrisOS/src/block/pci.c:164
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
   167e6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   167e9:	89 d0                	mov    eax,edx
   167eb:	01 c0                	add    eax,eax
   167ed:	01 d0                	add    eax,edx
   167ef:	c1 e0 02             	shl    eax,0x2
   167f2:	05 40 8a 02 00       	add    eax,0x28a40
   167f7:	0f b7 00             	movzx  eax,WORD PTR [eax]
   167fa:	0f b7 d0             	movzx  edx,ax
   167fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16800:	0f b7 c0             	movzx  eax,ax
   16803:	39 c2                	cmp    edx,eax
   16805:	75 24                	jne    1682b <getVendorLongName+0x54>
/home/yogi/src/os/chrisOS/src/block/pci.c:166
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
   16807:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1680a:	89 d0                	mov    eax,edx
   1680c:	01 c0                	add    eax,eax
   1680e:	01 d0                	add    eax,edx
   16810:	c1 e0 02             	shl    eax,0x2
   16813:	05 48 8a 02 00       	add    eax,0x28a48
   16818:	8b 00                	mov    eax,DWORD PTR [eax]
   1681a:	83 ec 08             	sub    esp,0x8
   1681d:	50                   	push   eax
   1681e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16821:	e8 2e 0b 01 00       	call   27354 <strcpy>
   16826:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:167
            return;
   16829:	eb 20                	jmp    1684b <getVendorLongName+0x74>
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 2)
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   1682b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 1)
   1682f:	81 7d f4 20 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x620
   16836:	76 ae                	jbe    167e6 <getVendorLongName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:169
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
            return;
        }
    strcpy(vendorLongName,"Not Found");
   16838:	83 ec 08             	sub    esp,0x8
   1683b:	68 85 25 08 00       	push   0x82585
   16840:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16843:	e8 0c 0b 01 00       	call   27354 <strcpy>
   16848:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:170
}
   1684b:	c9                   	leave  
   1684c:	c3                   	ret    

0001684d <getDeviceName>:
getDeviceName():
/home/yogi/src/os/chrisOS/src/block/pci.c:173

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
   1684d:	55                   	push   ebp
   1684e:	89 e5                	mov    ebp,esp
   16850:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:174
    for (int cnt=0; cnt<7000;cnt++)
   16853:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1685a:	eb 60                	jmp    168bc <getDeviceName+0x6f>
/home/yogi/src/os/chrisOS/src/block/pci.c:175
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
   1685c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1685f:	89 d0                	mov    eax,edx
   16861:	01 c0                	add    eax,eax
   16863:	01 d0                	add    eax,edx
   16865:	c1 e0 02             	shl    eax,0x2
   16868:	05 c0 da 02 00       	add    eax,0x2dac0
   1686d:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16870:	0f b7 c0             	movzx  eax,ax
   16873:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   16876:	75 40                	jne    168b8 <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:175 (discriminator 1)
   16878:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1687b:	89 d0                	mov    eax,edx
   1687d:	01 c0                	add    eax,eax
   1687f:	01 d0                	add    eax,edx
   16881:	c1 e0 02             	shl    eax,0x2
   16884:	05 c2 da 02 00       	add    eax,0x2dac2
   16889:	0f b7 00             	movzx  eax,WORD PTR [eax]
   1688c:	0f b7 c0             	movzx  eax,ax
   1688f:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   16892:	75 24                	jne    168b8 <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:177
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
   16894:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16897:	89 d0                	mov    eax,edx
   16899:	01 c0                	add    eax,eax
   1689b:	01 d0                	add    eax,edx
   1689d:	c1 e0 02             	shl    eax,0x2
   168a0:	05 c8 da 02 00       	add    eax,0x2dac8
   168a5:	8b 00                	mov    eax,DWORD PTR [eax]
   168a7:	83 ec 08             	sub    esp,0x8
   168aa:	50                   	push   eax
   168ab:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   168ae:	e8 a1 0a 01 00       	call   27354 <strcpy>
   168b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:178
            return;
   168b6:	eb 20                	jmp    168d8 <getDeviceName+0x8b>
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 2)
    strcpy(vendorLongName,"Not Found");
}

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
    for (int cnt=0; cnt<7000;cnt++)
   168b8:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 1)
   168bc:	81 7d f4 57 1b 00 00 	cmp    DWORD PTR [ebp-0xc],0x1b57
   168c3:	7e 97                	jle    1685c <getDeviceName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:180
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
            return;
        }
    strcpy(deviceName,"Not Found");
   168c5:	83 ec 08             	sub    esp,0x8
   168c8:	68 85 25 08 00       	push   0x82585
   168cd:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   168d0:	e8 7f 0a 01 00       	call   27354 <strcpy>
   168d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:181
}
   168d8:	c9                   	leave  
   168d9:	c3                   	ret    

000168da <getDeviceNameP>:
getDeviceNameP():
/home/yogi/src/os/chrisOS/src/block/pci.c:184

char* getDeviceNameP(struct pci_device_t* node, char* buffer)
{
   168da:	55                   	push   ebp
   168db:	89 e5                	mov    ebp,esp
   168dd:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:185
    getDeviceName(node->vendor, node->device, buffer);
   168e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   168e3:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   168e7:	0f b7 d0             	movzx  edx,ax
   168ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   168ed:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   168f1:	0f b7 c0             	movzx  eax,ax
   168f4:	83 ec 04             	sub    esp,0x4
   168f7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   168fa:	52                   	push   edx
   168fb:	50                   	push   eax
   168fc:	e8 4c ff ff ff       	call   1684d <getDeviceName>
   16901:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:186
    return buffer;
   16904:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/block/pci.c:187
}
   16907:	c9                   	leave  
   16908:	c3                   	ret    

00016909 <getClass>:
getClass():
/home/yogi/src/os/chrisOS/src/block/pci.c:190

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
   16909:	55                   	push   ebp
   1690a:	89 e5                	mov    ebp,esp
   1690c:	83 ec 28             	sub    esp,0x28
   1690f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16912:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16915:	88 55 e4             	mov    BYTE PTR [ebp-0x1c],dl
   16918:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
/home/yogi/src/os/chrisOS/src/block/pci.c:192
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   1691b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16922:	e9 80 00 00 00       	jmp    169a7 <getClass+0x9e>
/home/yogi/src/os/chrisOS/src/block/pci.c:194
    {
        if (PciClassCodeTable[cnt].BaseClass==class && PciClassCodeTable[cnt].SubClass==subClass /*&& PciClassCodeTable[cnt].ProgIf==prog*/ )
   16927:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1692a:	c1 e0 04             	shl    eax,0x4
   1692d:	05 e0 d3 02 00       	add    eax,0x2d3e0
   16932:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16935:	3a 45 e4             	cmp    al,BYTE PTR [ebp-0x1c]
   16938:	75 69                	jne    169a3 <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:194 (discriminator 1)
   1693a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1693d:	c1 e0 04             	shl    eax,0x4
   16940:	05 e1 d3 02 00       	add    eax,0x2d3e1
   16945:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16948:	3a 45 e0             	cmp    al,BYTE PTR [ebp-0x20]
   1694b:	75 56                	jne    169a3 <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:196
        {
            strcpy(BaseDesc,PciClassCodeTable[cnt].BaseDesc);
   1694d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16950:	c1 e0 04             	shl    eax,0x4
   16953:	05 e4 d3 02 00       	add    eax,0x2d3e4
   16958:	8b 00                	mov    eax,DWORD PTR [eax]
   1695a:	83 ec 08             	sub    esp,0x8
   1695d:	50                   	push   eax
   1695e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16961:	e8 ee 09 01 00       	call   27354 <strcpy>
   16966:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:197
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
   16969:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1696c:	c1 e0 04             	shl    eax,0x4
   1696f:	05 e8 d3 02 00       	add    eax,0x2d3e8
   16974:	8b 00                	mov    eax,DWORD PTR [eax]
   16976:	83 ec 08             	sub    esp,0x8
   16979:	50                   	push   eax
   1697a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1697d:	e8 d2 09 01 00       	call   27354 <strcpy>
   16982:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:198
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
   16985:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16988:	c1 e0 04             	shl    eax,0x4
   1698b:	05 ec d3 02 00       	add    eax,0x2d3ec
   16990:	8b 00                	mov    eax,DWORD PTR [eax]
   16992:	83 ec 08             	sub    esp,0x8
   16995:	50                   	push   eax
   16996:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   16999:	e8 b6 09 01 00       	call   27354 <strcpy>
   1699e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:199
            return;
   169a1:	eb 4b                	jmp    169ee <getClass+0xe5>
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 2)
}

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   169a3:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 1)
   169a7:	81 7d f4 28 1e 00 00 	cmp    DWORD PTR [ebp-0xc],0x1e28
   169ae:	0f 86 73 ff ff ff    	jbe    16927 <getClass+0x1e>
/home/yogi/src/os/chrisOS/src/block/pci.c:202
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
            return;
        }
    }
    strcpy(BaseDesc,notFound);
   169b4:	83 ec 08             	sub    esp,0x8
   169b7:	68 20 d9 02 00       	push   0x2d920
   169bc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   169bf:	e8 90 09 01 00       	call   27354 <strcpy>
   169c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:203
    strcpy(SubDesc,notFound);
   169c7:	83 ec 08             	sub    esp,0x8
   169ca:	68 20 d9 02 00       	push   0x2d920
   169cf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   169d2:	e8 7d 09 01 00       	call   27354 <strcpy>
   169d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:204
    strcpy(ProgDesc,notFound);
   169da:	83 ec 08             	sub    esp,0x8
   169dd:	68 20 d9 02 00       	push   0x2d920
   169e2:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   169e5:	e8 6a 09 01 00       	call   27354 <strcpy>
   169ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:205
    return;
   169ed:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:206
}
   169ee:	c9                   	leave  
   169ef:	c3                   	ret    

000169f0 <getDeviceHeader>:
getDeviceHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:209

bool getDeviceHeader(struct pci_device_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   169f0:	55                   	push   ebp
   169f1:	89 e5                	mov    ebp,esp
   169f3:	53                   	push   ebx
   169f4:	83 ec 24             	sub    esp,0x24
   169f7:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   169fa:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   169fd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16a00:	88 4d e4             	mov    BYTE PTR [ebp-0x1c],cl
   16a03:	88 55 e0             	mov    BYTE PTR [ebp-0x20],dl
   16a06:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
/home/yogi/src/os/chrisOS/src/block/pci.c:212
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
   16a09:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   16a0d:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16a11:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   16a15:	83 ec 0c             	sub    esp,0xc
   16a18:	51                   	push   ecx
   16a19:	52                   	push   edx
   16a1a:	50                   	push   eax
   16a1b:	68 90 25 08 00       	push   0x82590
   16a20:	68 00 01 00 00       	push   0x100
   16a25:	e8 e9 07 01 00       	call   27213 <printd>
   16a2a:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:214
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16a2d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16a34:	e9 6c 01 00 00       	jmp    16ba5 <getDeviceHeader+0x1b5>
/home/yogi/src/os/chrisOS/src/block/pci.c:216
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   16a39:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16a3c:	c1 e0 02             	shl    eax,0x2
   16a3f:	0f b6 d8             	movzx  ebx,al
   16a42:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   16a46:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16a4a:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   16a4e:	53                   	push   ebx
   16a4f:	51                   	push   ecx
   16a50:	52                   	push   edx
   16a51:	50                   	push   eax
   16a52:	e8 eb fb ff ff       	call   16642 <pciConfigReadDWord>
   16a57:	83 c4 10             	add    esp,0x10
   16a5a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:217
        if (value==0xFFFFFFFF)
   16a5d:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   16a61:	75 0a                	jne    16a6d <getDeviceHeader+0x7d>
/home/yogi/src/os/chrisOS/src/block/pci.c:218
            return false;
   16a63:	b8 00 00 00 00       	mov    eax,0x0
   16a68:	e9 64 01 00 00       	jmp    16bd1 <getDeviceHeader+0x1e1>
/home/yogi/src/os/chrisOS/src/block/pci.c:219
        switch(cnt)
   16a6d:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16a71:	0f 87 2a 01 00 00    	ja     16ba1 <getDeviceHeader+0x1b1>
   16a77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16a7a:	c1 e0 02             	shl    eax,0x2
   16a7d:	05 b8 25 08 00       	add    eax,0x825b8
   16a82:	8b 00                	mov    eax,DWORD PTR [eax]
   16a84:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:222
        {
            case 0:
                node->vendor=value;
   16a86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a89:	89 c2                	mov    edx,eax
   16a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a8e:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:223
                node->device=value >> 16;
   16a92:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16a95:	c1 e8 10             	shr    eax,0x10
   16a98:	89 c2                	mov    edx,eax
   16a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a9d:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:224
                break;
   16aa1:	e9 fb 00 00 00       	jmp    16ba1 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:226
            case 1:
                node->command=value&0xFFFF;
   16aa6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16aa9:	89 c2                	mov    edx,eax
   16aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16aae:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:227
                node->status=value>>16&0xFFFF;
   16ab2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ab5:	c1 e8 10             	shr    eax,0x10
   16ab8:	89 c2                	mov    edx,eax
   16aba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16abd:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:228
                break;
   16ac1:	e9 db 00 00 00       	jmp    16ba1 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:230
            case 2:
                node->class=value >> 24;
   16ac6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ac9:	c1 e8 18             	shr    eax,0x18
   16acc:	89 c2                	mov    edx,eax
   16ace:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ad1:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:231
                node->subClass=(value & 0x00FF0000) >> 16;
   16ad4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ad7:	25 00 00 ff 00       	and    eax,0xff0000
   16adc:	c1 e8 10             	shr    eax,0x10
   16adf:	89 c2                	mov    edx,eax
   16ae1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ae4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:232
                node->prog=(value & 0x0000FF00) >> 8;
   16ae7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16aea:	25 00 ff 00 00       	and    eax,0xff00
   16aef:	c1 e8 08             	shr    eax,0x8
   16af2:	89 c2                	mov    edx,eax
   16af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16af7:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:233
                break;
   16afa:	e9 a2 00 00 00       	jmp    16ba1 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:235
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16aff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b02:	c1 e8 10             	shr    eax,0x10
   16b05:	83 e0 7f             	and    eax,0x7f
   16b08:	89 c2                	mov    edx,eax
   16b0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b0d:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:236
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16b10:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b13:	25 00 00 80 00       	and    eax,0x800000
   16b18:	85 c0                	test   eax,eax
   16b1a:	0f 95 c2             	setne  dl
   16b1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b20:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:237
                node->cacheSize=value&0xFF;
   16b23:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b26:	89 c2                	mov    edx,eax
   16b28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b2b:	88 50 41             	mov    BYTE PTR [eax+0x41],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:238
                node->latencyTimer=value>>8;
   16b2e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b31:	c1 e8 08             	shr    eax,0x8
   16b34:	89 c2                	mov    edx,eax
   16b36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b39:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:239
                break;
   16b3c:	eb 63                	jmp    16ba1 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:241
            case 4: case 5: case 6: case 7: case 8: case 9:
                node->baseAdd[cnt+1-5]=value;
   16b3e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16b41:	8d 50 fc             	lea    edx,[eax-0x4]
   16b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b47:	8d 4a 08             	lea    ecx,[edx+0x8]
   16b4a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16b4d:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:242
                break;
   16b50:	eb 4f                	jmp    16ba1 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:244
            case 11:
                node->subdevice=value >> 16;
   16b52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b55:	c1 e8 10             	shr    eax,0x10
   16b58:	89 c2                	mov    edx,eax
   16b5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b5d:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:245
                node->subvendor=value & 0xFFFF;
   16b61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b64:	89 c2                	mov    edx,eax
   16b66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b69:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:246
                break;
   16b6d:	eb 32                	jmp    16ba1 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:248
            case 12:
                node->expROMAddress=value;
   16b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b72:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16b75:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:249
                break;
   16b78:	eb 27                	jmp    16ba1 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:251
            case 13:
                node->caps = value & 0xFF;
   16b7a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b7d:	89 c2                	mov    edx,eax
   16b7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b82:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:252
                break;
   16b85:	eb 1a                	jmp    16ba1 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:254
            case 15:
                node->interrupt_line=value&0xFF;
   16b87:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b8a:	89 c2                	mov    edx,eax
   16b8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b8f:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:255
                node->interrupt_pin=(value >> 8)&0xFF;
   16b92:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16b95:	c1 e8 08             	shr    eax,0x8
   16b98:	89 c2                	mov    edx,eax
   16b9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b9d:	88 50 3e             	mov    BYTE PTR [eax+0x3e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:256
                break;
   16ba0:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16ba1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 1)
   16ba5:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16ba9:	0f 8e 8a fe ff ff    	jle    16a39 <getDeviceHeader+0x49>
/home/yogi/src/os/chrisOS/src/block/pci.c:259
                node->interrupt_line=value&0xFF;
                node->interrupt_pin=(value >> 8)&0xFF;
                break;
        }
    }
    node->busNo=bus;
   16baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16bb2:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   16bb6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:260
    node->deviceNo=slot;
   16bb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16bbb:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16bbf:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:261
    node->funcNo=func;
   16bc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16bc5:	0f b6 55 dc          	movzx  edx,BYTE PTR [ebp-0x24]
   16bc9:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:262
    return true;
   16bcc:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:263
}
   16bd1:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16bd4:	c9                   	leave  
   16bd5:	c3                   	ret    

00016bd6 <getBridgeHeader>:
getBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:266

bool getBridgeHeader(struct pci_bridge_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16bd6:	55                   	push   ebp
   16bd7:	89 e5                	mov    ebp,esp
   16bd9:	57                   	push   edi
   16bda:	56                   	push   esi
   16bdb:	53                   	push   ebx
   16bdc:	83 ec 4c             	sub    esp,0x4c
   16bdf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16be2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16be5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16be8:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   16beb:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16bee:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:269
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
   16bf1:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16bf5:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16bf9:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16bfd:	83 ec 0c             	sub    esp,0xc
   16c00:	51                   	push   ecx
   16c01:	52                   	push   edx
   16c02:	50                   	push   eax
   16c03:	68 f8 25 08 00       	push   0x825f8
   16c08:	68 00 01 00 00       	push   0x100
   16c0d:	e8 01 06 01 00       	call   27213 <printd>
   16c12:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:271
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   16c15:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   16c1c:	e9 c9 02 00 00       	jmp    16eea <getBridgeHeader+0x314>
/home/yogi/src/os/chrisOS/src/block/pci.c:273
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   16c21:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16c24:	c1 e0 02             	shl    eax,0x2
   16c27:	0f b6 d8             	movzx  ebx,al
   16c2a:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16c2e:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16c32:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16c36:	53                   	push   ebx
   16c37:	51                   	push   ecx
   16c38:	52                   	push   edx
   16c39:	50                   	push   eax
   16c3a:	e8 03 fa ff ff       	call   16642 <pciConfigReadDWord>
   16c3f:	83 c4 10             	add    esp,0x10
   16c42:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:274
        if (value==0xFFFFFFFF)
   16c45:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   16c49:	75 0a                	jne    16c55 <getBridgeHeader+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:275
            return false;
   16c4b:	b8 00 00 00 00       	mov    eax,0x0
   16c50:	e9 c1 02 00 00       	jmp    16f16 <getBridgeHeader+0x340>
/home/yogi/src/os/chrisOS/src/block/pci.c:276
        switch(cnt)
   16c55:	83 7d e4 0f          	cmp    DWORD PTR [ebp-0x1c],0xf
   16c59:	0f 87 87 02 00 00    	ja     16ee6 <getBridgeHeader+0x310>
   16c5f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16c62:	c1 e0 02             	shl    eax,0x2
   16c65:	05 20 26 08 00       	add    eax,0x82620
   16c6a:	8b 00                	mov    eax,DWORD PTR [eax]
   16c6c:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:279
        {
            case 0:
                node->vendor=value;
   16c6e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c71:	89 c2                	mov    edx,eax
   16c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c76:	66 89 50 05          	mov    WORD PTR [eax+0x5],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:280
                node->device=value >> 16;
   16c7a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c7d:	c1 e8 10             	shr    eax,0x10
   16c80:	89 c2                	mov    edx,eax
   16c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c85:	66 89 50 07          	mov    WORD PTR [eax+0x7],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:281
                break;
   16c89:	e9 58 02 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:283
            case 1:
                node->command=value&0xFFFF;
   16c8e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c91:	89 c2                	mov    edx,eax
   16c93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16c96:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:284
                node->status=value>>16&0xFFFF;
   16c9a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16c9d:	c1 e8 10             	shr    eax,0x10
   16ca0:	89 c2                	mov    edx,eax
   16ca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ca5:	66 89 50 38          	mov    WORD PTR [eax+0x38],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:285
                break;
   16ca9:	e9 38 02 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:287
            case 2:
                node->class=value >> 24;
   16cae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cb1:	c1 e8 18             	shr    eax,0x18
   16cb4:	89 c2                	mov    edx,eax
   16cb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cb9:	89 50 09             	mov    DWORD PTR [eax+0x9],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:288
                node->subClass=(value & 0x00FF0000) >> 16;
   16cbc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cbf:	25 00 00 ff 00       	and    eax,0xff0000
   16cc4:	c1 e8 10             	shr    eax,0x10
   16cc7:	89 c2                	mov    edx,eax
   16cc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ccc:	89 50 0d             	mov    DWORD PTR [eax+0xd],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:289
                node->prog=(value & 0x0000FF00) >> 8;
   16ccf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cd2:	25 00 ff 00 00       	and    eax,0xff00
   16cd7:	c1 e8 08             	shr    eax,0x8
   16cda:	89 c2                	mov    edx,eax
   16cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cdf:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:290
                break;
   16ce2:	e9 ff 01 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:292
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16ce7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cea:	c1 e8 10             	shr    eax,0x10
   16ced:	83 e0 7f             	and    eax,0x7f
   16cf0:	89 c2                	mov    edx,eax
   16cf2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cf5:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:293
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16cf8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16cfb:	25 00 00 80 00       	and    eax,0x800000
   16d00:	85 c0                	test   eax,eax
   16d02:	0f 95 c2             	setne  dl
   16d05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d08:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:294
                node->cacheSize=value&0xFF;
   16d0b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d0e:	89 c2                	mov    edx,eax
   16d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d13:	88 50 2e             	mov    BYTE PTR [eax+0x2e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:295
                node->latencyTimer=value>>8;
   16d16:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d19:	c1 e8 08             	shr    eax,0x8
   16d1c:	89 c2                	mov    edx,eax
   16d1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d21:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:296
                break;
   16d24:	e9 bd 01 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:298
            case 4: 
                node->baseAdd[0]=value;
   16d29:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16d2c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d2f:	89 42 12             	mov    DWORD PTR [edx+0x12],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:299
                break;
   16d32:	e9 af 01 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:301
            case 5:
                node->baseAdd[1]=value;
   16d37:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16d3a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d3d:	89 42 16             	mov    DWORD PTR [edx+0x16],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:302
                break;
   16d40:	e9 a1 01 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:304
            case 6:
                node->secLatencyTimer=(value>>24);
   16d45:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d48:	c1 e8 18             	shr    eax,0x18
   16d4b:	89 c2                	mov    edx,eax
   16d4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d50:	88 50 31             	mov    BYTE PTR [eax+0x31],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:305
                node->subordinateBusNum=(value>>16) & 0xFF;
   16d53:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d56:	c1 e8 10             	shr    eax,0x10
   16d59:	89 c2                	mov    edx,eax
   16d5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d5e:	88 50 28             	mov    BYTE PTR [eax+0x28],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:306
                node->secondaryBusNum=(value >> 8) & 0xFF;
   16d61:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d64:	c1 e8 08             	shr    eax,0x8
   16d67:	89 c2                	mov    edx,eax
   16d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d6c:	88 50 26             	mov    BYTE PTR [eax+0x26],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:307
                node->primaryBusNum=value & 0xFF;
   16d6f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d72:	89 c2                	mov    edx,eax
   16d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d77:	88 50 27             	mov    BYTE PTR [eax+0x27],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:309
                //printk("pr:se:su %02X:%02X:%02X\n", node->primaryBusNum, node->secondaryBusNum, node->subordinateBusNum);
                break;
   16d7a:	e9 67 01 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:311
            case 7:
                node->secStatus=(value>>16);
   16d7f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d82:	c1 e8 10             	shr    eax,0x10
   16d85:	89 c2                	mov    edx,eax
   16d87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d8a:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:312
                node->ioLimit=(value>>8)&0xFF;
   16d8e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16d91:	c1 e8 08             	shr    eax,0x8
   16d94:	0f b6 d0             	movzx  edx,al
   16d97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d9a:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:313
                node->ioBase=value&0xFF;
   16d9d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16da0:	0f b6 d0             	movzx  edx,al
   16da3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16da6:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:314
                break;
   16da9:	e9 38 01 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:316
            case 8:
                node->memoryLimit=value>>16;
   16dae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16db1:	c1 e8 10             	shr    eax,0x10
   16db4:	89 c2                	mov    edx,eax
   16db6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16db9:	66 89 50 36          	mov    WORD PTR [eax+0x36],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:317
                node->memoryBase=value;
   16dbd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16dc0:	89 c2                	mov    edx,eax
   16dc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dc5:	66 89 50 34          	mov    WORD PTR [eax+0x34],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:318
                break;
   16dc9:	e9 18 01 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:320
            case 9:
                node->prefMemLimit=value>>16;
   16dce:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16dd1:	c1 e8 10             	shr    eax,0x10
   16dd4:	ba 00 00 00 00       	mov    edx,0x0
   16dd9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   16ddc:	89 41 3e             	mov    DWORD PTR [ecx+0x3e],eax
   16ddf:	89 51 42             	mov    DWORD PTR [ecx+0x42],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:321
                node->prefMemBase=value&0xFFFF;
   16de2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16de5:	ba 00 00 00 00       	mov    edx,0x0
   16dea:	0f b7 d8             	movzx  ebx,ax
   16ded:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
   16df0:	89 d0                	mov    eax,edx
   16df2:	83 e0 00             	and    eax,0x0
   16df5:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
   16df8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dfb:	8b 5d c0             	mov    ebx,DWORD PTR [ebp-0x40]
   16dfe:	8b 75 c4             	mov    esi,DWORD PTR [ebp-0x3c]
   16e01:	89 58 46             	mov    DWORD PTR [eax+0x46],ebx
   16e04:	89 70 4a             	mov    DWORD PTR [eax+0x4a],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:322
                break;
   16e07:	e9 da 00 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:324
            case 10:
                node->prefMemLimit|=value<<16;
   16e0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e0f:	8b 48 3e             	mov    ecx,DWORD PTR [eax+0x3e]
   16e12:	8b 58 42             	mov    ebx,DWORD PTR [eax+0x42]
   16e15:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e18:	c1 e0 10             	shl    eax,0x10
   16e1b:	ba 00 00 00 00       	mov    edx,0x0
   16e20:	89 cf                	mov    edi,ecx
   16e22:	09 c7                	or     edi,eax
   16e24:	89 7d b8             	mov    DWORD PTR [ebp-0x48],edi
   16e27:	89 de                	mov    esi,ebx
   16e29:	09 d6                	or     esi,edx
   16e2b:	89 75 bc             	mov    DWORD PTR [ebp-0x44],esi
   16e2e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e31:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
   16e34:	8b 5d bc             	mov    ebx,DWORD PTR [ebp-0x44]
   16e37:	89 48 3e             	mov    DWORD PTR [eax+0x3e],ecx
   16e3a:	89 58 42             	mov    DWORD PTR [eax+0x42],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:325
                break;
   16e3d:	e9 a4 00 00 00       	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:327
            case 11:
                node->prefMemBase|=value<<16;
   16e42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e45:	8b 48 46             	mov    ecx,DWORD PTR [eax+0x46]
   16e48:	8b 58 4a             	mov    ebx,DWORD PTR [eax+0x4a]
   16e4b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e4e:	c1 e0 10             	shl    eax,0x10
   16e51:	ba 00 00 00 00       	mov    edx,0x0
   16e56:	89 cf                	mov    edi,ecx
   16e58:	09 c7                	or     edi,eax
   16e5a:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   16e5d:	89 de                	mov    esi,ebx
   16e5f:	09 d6                	or     esi,edx
   16e61:	89 75 b4             	mov    DWORD PTR [ebp-0x4c],esi
   16e64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e67:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
   16e6a:	8b 5d b4             	mov    ebx,DWORD PTR [ebp-0x4c]
   16e6d:	89 48 46             	mov    DWORD PTR [eax+0x46],ecx
   16e70:	89 58 4a             	mov    DWORD PTR [eax+0x4a],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:328
                break;
   16e73:	eb 71                	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:330
            case 12:
                node->ioLimit|=(value&0xFFFF0000)>>8;
   16e75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e78:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   16e7b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e7e:	66 b8 00 00          	mov    ax,0x0
   16e82:	c1 e8 08             	shr    eax,0x8
   16e85:	09 c2                	or     edx,eax
   16e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e8a:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:331
                node->ioBase|=value&0xFFFF<<8;
   16e8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e90:	8b 50 22             	mov    edx,DWORD PTR [eax+0x22]
   16e93:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e96:	25 00 ff ff 00       	and    eax,0xffff00
   16e9b:	09 c2                	or     edx,eax
   16e9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ea0:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:332
                break;
   16ea3:	eb 41                	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:334
            case 13:
                node->caps = value & 0xFF;
   16ea5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ea8:	89 c2                	mov    edx,eax
   16eaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ead:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:335
                break;
   16eb0:	eb 34                	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:337
            case 14:
                node->expROMAddress=value;
   16eb2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16eb5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16eb8:	89 42 1a             	mov    DWORD PTR [edx+0x1a],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:338
                break;
   16ebb:	eb 29                	jmp    16ee6 <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:340
            case 15:
                node->interrupt_line=value&0xFF;
   16ebd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ec0:	89 c2                	mov    edx,eax
   16ec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ec5:	88 50 2a             	mov    BYTE PTR [eax+0x2a],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:341
                node->interrupt_pin=(value >> 8)&0xFF;
   16ec8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ecb:	c1 e8 08             	shr    eax,0x8
   16ece:	89 c2                	mov    edx,eax
   16ed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ed3:	88 50 2b             	mov    BYTE PTR [eax+0x2b],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:342
                node->bridgeControl=(value>>16)&0xFFFF;
   16ed6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ed9:	c1 e8 10             	shr    eax,0x10
   16edc:	89 c2                	mov    edx,eax
   16ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ee1:	66 89 50 32          	mov    WORD PTR [eax+0x32],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:343
                break;
   16ee5:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   16ee6:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 1)
   16eea:	83 7d e4 0d          	cmp    DWORD PTR [ebp-0x1c],0xd
   16eee:	0f 8e 2d fd ff ff    	jle    16c21 <getBridgeHeader+0x4b>
/home/yogi/src/os/chrisOS/src/block/pci.c:347
                node->bridgeControl=(value>>16)&0xFFFF;
                break;

        }
    }
    node->busNo=bus;
   16ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ef7:	0f b6 55 d4          	movzx  edx,BYTE PTR [ebp-0x2c]
   16efb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:348
    node->deviceNo=slot;
   16efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f00:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16f04:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:349
    node->funcNo=func;
   16f07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f0a:	0f b6 55 cc          	movzx  edx,BYTE PTR [ebp-0x34]
   16f0e:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:350
    return true;
   16f11:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:351
}
   16f16:	8d 65 f4             	lea    esp,[ebp-0xc]
   16f19:	5b                   	pop    ebx
   16f1a:	5e                   	pop    esi
   16f1b:	5f                   	pop    edi
   16f1c:	5d                   	pop    ebp
   16f1d:	c3                   	ret    

00016f1e <printPCIBridgeHeader>:
printPCIBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:353
void printPCIBridgeHeader(struct pci_bridge_t* node)
{          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
   16f1e:	55                   	push   ebp
   16f1f:	89 e5                	mov    ebp,esp
   16f21:	57                   	push   edi
   16f22:	56                   	push   esi
   16f23:	53                   	push   ebx
   16f24:	81 ec ac 06 00 00    	sub    esp,0x6ac
/home/yogi/src/os/chrisOS/src/block/pci.c:356
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   16f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f2d:	8b 40 0d             	mov    eax,DWORD PTR [eax+0xd]
   16f30:	0f b6 d0             	movzx  edx,al
   16f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f36:	8b 40 09             	mov    eax,DWORD PTR [eax+0x9]
   16f39:	0f b6 c0             	movzx  eax,al
   16f3c:	83 ec 0c             	sub    esp,0xc
   16f3f:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   16f45:	51                   	push   ecx
   16f46:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   16f4c:	51                   	push   ecx
   16f4d:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   16f53:	51                   	push   ecx
   16f54:	52                   	push   edx
   16f55:	50                   	push   eax
   16f56:	e8 ae f9 ff ff       	call   16909 <getClass>
   16f5b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:357
    printk("Bridge:\n");
   16f5e:	83 ec 0c             	sub    esp,0xc
   16f61:	68 60 26 08 00       	push   0x82660
   16f66:	e8 88 02 01 00       	call   271f3 <printk>
   16f6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:358
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   16f6e:	83 ec 0c             	sub    esp,0xc
   16f71:	68 48 24 08 00       	push   0x82448
   16f76:	e8 78 02 01 00       	call   271f3 <printk>
   16f7b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:364
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16f7e:	a1 b8 02 12 00       	mov    eax,ds:0x1202b8
   16f83:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f87:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16f8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f8d:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16f91:	0f b6 c0             	movzx  eax,al
   16f94:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   16f9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f9d:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16fa1:	0f b6 d8             	movzx  ebx,al
   16fa4:	89 9d 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],ebx
   16faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fad:	8b 70 0d             	mov    esi,DWORD PTR [eax+0xd]
   16fb0:	89 b5 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],esi
   16fb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fb9:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   16fbc:	89 8d 58 f9 ff ff    	mov    DWORD PTR [ebp-0x6a8],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   16fc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fc5:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16fc9:	0f b7 d0             	movzx  edx,ax
   16fcc:	89 95 54 f9 ff ff    	mov    DWORD PTR [ebp-0x6ac],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   16fd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fd5:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16fd9:	0f b7 c0             	movzx  eax,ax
   16fdc:	89 85 50 f9 ff ff    	mov    DWORD PTR [ebp-0x6b0],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   16fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fe5:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16fe9:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   16fec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fef:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16ff3:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   16ff6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ff9:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   16ffd:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   17000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17003:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17007:	0f b6 d0             	movzx  edx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   1700a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1700d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17010:	0f b6 c0             	movzx  eax,al
   17013:	83 ec 0c             	sub    esp,0xc
   17016:	57                   	push   edi
   17017:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   1701d:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   17023:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   17029:	ff b5 58 f9 ff ff    	push   DWORD PTR [ebp-0x6a8]
   1702f:	ff b5 54 f9 ff ff    	push   DWORD PTR [ebp-0x6ac]
   17035:	ff b5 50 f9 ff ff    	push   DWORD PTR [ebp-0x6b0]
   1703b:	56                   	push   esi
   1703c:	53                   	push   ebx
   1703d:	51                   	push   ecx
   1703e:	52                   	push   edx
   1703f:	50                   	push   eax
   17040:	68 6c 26 08 00       	push   0x8266c
   17045:	e8 a9 01 01 00       	call   271f3 <printk>
   1704a:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:366
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);

    getVendorLongName(node->vendor, tempString);
   1704d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17050:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   17054:	0f b7 c0             	movzx  eax,ax
   17057:	83 ec 08             	sub    esp,0x8
   1705a:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   17060:	52                   	push   edx
   17061:	50                   	push   eax
   17062:	e8 70 f7 ff ff       	call   167d7 <getVendorLongName>
   17067:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:367
    printk("Vendor: %s\t",tempString);
   1706a:	83 ec 08             	sub    esp,0x8
   1706d:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17073:	50                   	push   eax
   17074:	68 b0 26 08 00       	push   0x826b0
   17079:	e8 75 01 01 00       	call   271f3 <printk>
   1707e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:368
    getDeviceName(node->vendor, node->device, tempString);
   17081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17084:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   17088:	0f b7 d0             	movzx  edx,ax
   1708b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1708e:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   17092:	0f b7 c0             	movzx  eax,ax
   17095:	83 ec 04             	sub    esp,0x4
   17098:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   1709e:	51                   	push   ecx
   1709f:	52                   	push   edx
   170a0:	50                   	push   eax
   170a1:	e8 a7 f7 ff ff       	call   1684d <getDeviceName>
   170a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:369
    printk("Device: %s\n",tempString);
   170a9:	83 ec 08             	sub    esp,0x8
   170ac:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   170b2:	50                   	push   eax
   170b3:	68 bc 26 08 00       	push   0x826bc
   170b8:	e8 36 01 01 00       	call   271f3 <printk>
   170bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:370
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   170c0:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   170c6:	50                   	push   eax
   170c7:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   170cd:	50                   	push   eax
   170ce:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   170d4:	50                   	push   eax
   170d5:	68 c8 26 08 00       	push   0x826c8
   170da:	e8 14 01 01 00       	call   271f3 <printk>
   170df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:371
    printk("Base addresses:\n");
   170e2:	83 ec 0c             	sub    esp,0xc
   170e5:	68 e9 26 08 00       	push   0x826e9
   170ea:	e8 04 01 01 00       	call   271f3 <printk>
   170ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372
    for (int cnt=0;cnt<2;cnt++)
   170f2:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   170f9:	eb 25                	jmp    17120 <printPCIBridgeHeader+0x202>
/home/yogi/src/os/chrisOS/src/block/pci.c:373 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   170fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170fe:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   17101:	83 c2 04             	add    edx,0x4
   17104:	8b 44 90 02          	mov    eax,DWORD PTR [eax+edx*4+0x2]
   17108:	83 ec 04             	sub    esp,0x4
   1710b:	50                   	push   eax
   1710c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1710f:	68 fa 26 08 00       	push   0x826fa
   17114:	e8 da 00 01 00       	call   271f3 <printk>
   17119:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<2;cnt++)
   1711c:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 1)
   17120:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
   17124:	7e d5                	jle    170fb <printPCIBridgeHeader+0x1dd>
/home/yogi/src/os/chrisOS/src/block/pci.c:374
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("IO Base: 0x%04X\tIO Limit: 0x%04X\n",node->ioBase,node->ioLimit);
   17126:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17129:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   1712c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1712f:	8b 40 22             	mov    eax,DWORD PTR [eax+0x22]
   17132:	83 ec 04             	sub    esp,0x4
   17135:	52                   	push   edx
   17136:	50                   	push   eax
   17137:	68 0c 27 08 00       	push   0x8270c
   1713c:	e8 b2 00 01 00       	call   271f3 <printk>
   17141:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:375
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   17144:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17147:	0f b7 40 38          	movzx  eax,WORD PTR [eax+0x38]
   1714b:	0f b7 d0             	movzx  edx,ax
   1714e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17151:	0f b7 40 3a          	movzx  eax,WORD PTR [eax+0x3a]
   17155:	0f b7 c0             	movzx  eax,ax
   17158:	83 ec 04             	sub    esp,0x4
   1715b:	52                   	push   edx
   1715c:	50                   	push   eax
   1715d:	68 30 27 08 00       	push   0x82730
   17162:	e8 8c 00 01 00       	call   271f3 <printk>
   17167:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:376
}   
   1716a:	90                   	nop
   1716b:	8d 65 f4             	lea    esp,[ebp-0xc]
   1716e:	5b                   	pop    ebx
   1716f:	5e                   	pop    esi
   17170:	5f                   	pop    edi
   17171:	5d                   	pop    ebp
   17172:	c3                   	ret    

00017173 <printPCIHeader>:
printPCIHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:379

void printPCIHeader(struct pci_device_t* node)
{
   17173:	55                   	push   ebp
   17174:	89 e5                	mov    ebp,esp
   17176:	57                   	push   edi
   17177:	56                   	push   esi
   17178:	53                   	push   ebx
   17179:	81 ec 9c 06 00 00    	sub    esp,0x69c
/home/yogi/src/os/chrisOS/src/block/pci.c:382
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   1717f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17182:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   17185:	0f b6 d0             	movzx  edx,al
   17188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1718b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1718e:	0f b6 c0             	movzx  eax,al
   17191:	83 ec 0c             	sub    esp,0xc
   17194:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   1719a:	51                   	push   ecx
   1719b:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   171a1:	51                   	push   ecx
   171a2:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   171a8:	51                   	push   ecx
   171a9:	52                   	push   edx
   171aa:	50                   	push   eax
   171ab:	e8 59 f7 ff ff       	call   16909 <getClass>
   171b0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:386
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
   171b3:	83 ec 0c             	sub    esp,0xc
   171b6:	68 51 27 08 00       	push   0x82751
   171bb:	e8 33 00 01 00       	call   271f3 <printk>
   171c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:387
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   171c3:	83 ec 0c             	sub    esp,0xc
   171c6:	68 48 24 08 00       	push   0x82448
   171cb:	e8 23 00 01 00       	call   271f3 <printk>
   171d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:388
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   171d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171d6:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   171d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171dc:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   171df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171e2:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   171e6:	0f b7 c0             	movzx  eax,ax
   171e9:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   171ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171f2:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   171f6:	0f b7 f8             	movzx  edi,ax
   171f9:	89 bd 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   171ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17202:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   17206:	0f b6 c8             	movzx  ecx,al
   17209:	89 8d 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   1720f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17212:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   17216:	0f b6 f8             	movzx  edi,al
   17219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1721c:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   17220:	0f b6 c8             	movzx  ecx,al
   17223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17226:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1722a:	0f b6 d0             	movzx  edx,al
   1722d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17230:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17233:	0f b6 c0             	movzx  eax,al
   17236:	83 ec 08             	sub    esp,0x8
   17239:	53                   	push   ebx
   1723a:	56                   	push   esi
   1723b:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   17241:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   17247:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   1724d:	57                   	push   edi
   1724e:	51                   	push   ecx
   1724f:	52                   	push   edx
   17250:	50                   	push   eax
   17251:	68 5c 27 08 00       	push   0x8275c
   17256:	e8 98 ff 00 00       	call   271f3 <printk>
   1725b:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:391
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
                node->subClass);
    getVendorLongName(node->vendor, tempString);
   1725e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17261:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   17265:	0f b7 c0             	movzx  eax,ax
   17268:	83 ec 08             	sub    esp,0x8
   1726b:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   17271:	52                   	push   edx
   17272:	50                   	push   eax
   17273:	e8 5f f5 ff ff       	call   167d7 <getVendorLongName>
   17278:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:392
    printk("Vendor: %s\t",tempString);
   1727b:	83 ec 08             	sub    esp,0x8
   1727e:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17284:	50                   	push   eax
   17285:	68 b0 26 08 00       	push   0x826b0
   1728a:	e8 64 ff 00 00       	call   271f3 <printk>
   1728f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:393
    getDeviceName(node->vendor, node->device, tempString);
   17292:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17295:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   17299:	0f b7 d0             	movzx  edx,ax
   1729c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1729f:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   172a3:	0f b7 c0             	movzx  eax,ax
   172a6:	83 ec 04             	sub    esp,0x4
   172a9:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   172af:	51                   	push   ecx
   172b0:	52                   	push   edx
   172b1:	50                   	push   eax
   172b2:	e8 96 f5 ff ff       	call   1684d <getDeviceName>
   172b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:394
    printk("Device: %s\n",tempString);
   172ba:	83 ec 08             	sub    esp,0x8
   172bd:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   172c3:	50                   	push   eax
   172c4:	68 bc 26 08 00       	push   0x826bc
   172c9:	e8 25 ff 00 00       	call   271f3 <printk>
   172ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:395
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   172d1:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   172d7:	50                   	push   eax
   172d8:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   172de:	50                   	push   eax
   172df:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   172e5:	50                   	push   eax
   172e6:	68 c8 26 08 00       	push   0x826c8
   172eb:	e8 03 ff 00 00       	call   271f3 <printk>
   172f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:396
    printk("Base addresses:\n");
   172f3:	83 ec 0c             	sub    esp,0xc
   172f6:	68 e9 26 08 00       	push   0x826e9
   172fb:	e8 f3 fe 00 00       	call   271f3 <printk>
   17300:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397
    for (int cnt=0;cnt<6;cnt++)
   17303:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1730a:	eb 24                	jmp    17330 <printPCIHeader+0x1bd>
/home/yogi/src/os/chrisOS/src/block/pci.c:398 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   1730c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1730f:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   17312:	83 c2 08             	add    edx,0x8
   17315:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   17318:	83 ec 04             	sub    esp,0x4
   1731b:	50                   	push   eax
   1731c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1731f:	68 fa 26 08 00       	push   0x826fa
   17324:	e8 ca fe 00 00       	call   271f3 <printk>
   17329:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<6;cnt++)
   1732c:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 1)
   17330:	83 7d e4 05          	cmp    DWORD PTR [ebp-0x1c],0x5
   17334:	7e d6                	jle    1730c <printPCIHeader+0x199>
/home/yogi/src/os/chrisOS/src/block/pci.c:399
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
   17336:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17339:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
   1733d:	0f b7 d0             	movzx  edx,ax
   17340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17343:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
   17347:	0f b7 c0             	movzx  eax,ax
   1734a:	83 ec 04             	sub    esp,0x4
   1734d:	52                   	push   edx
   1734e:	50                   	push   eax
   1734f:	68 94 27 08 00       	push   0x82794
   17354:	e8 9a fe 00 00       	call   271f3 <printk>
   17359:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:400
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   1735c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1735f:	0f b7 40 4a          	movzx  eax,WORD PTR [eax+0x4a]
   17363:	0f b7 d0             	movzx  edx,ax
   17366:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17369:	0f b7 40 4c          	movzx  eax,WORD PTR [eax+0x4c]
   1736d:	0f b7 c0             	movzx  eax,ax
   17370:	83 ec 04             	sub    esp,0x4
   17373:	52                   	push   edx
   17374:	50                   	push   eax
   17375:	68 30 27 08 00       	push   0x82730
   1737a:	e8 74 fe 00 00       	call   271f3 <printk>
   1737f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:401
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
   17382:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17385:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
   17389:	0f b6 d0             	movzx  edx,al
   1738c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1738f:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
   17393:	0f b6 c0             	movzx  eax,al
   17396:	83 ec 04             	sub    esp,0x4
   17399:	52                   	push   edx
   1739a:	50                   	push   eax
   1739b:	68 bc 27 08 00       	push   0x827bc
   173a0:	e8 4e fe 00 00       	call   271f3 <printk>
   173a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:402
}
   173a8:	90                   	nop
   173a9:	8d 65 f4             	lea    esp,[ebp-0xc]
   173ac:	5b                   	pop    ebx
   173ad:	5e                   	pop    esi
   173ae:	5f                   	pop    edi
   173af:	5d                   	pop    ebp
   173b0:	c3                   	ret    

000173b1 <addFunction>:
addFunction():
/home/yogi/src/os/chrisOS/src/block/pci.c:404
void addFunction(struct pci_device_t* node)
{
   173b1:	55                   	push   ebp
   173b2:	89 e5                	mov    ebp,esp
   173b4:	53                   	push   ebx
   173b5:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/block/pci.c:405
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFound function: deviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", node->device, node->vendor, node->class, node->subClass);
   173b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173bb:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   173be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173c1:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   173c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173c7:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   173cb:	0f b7 d0             	movzx  edx,ax
   173ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173d1:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   173d5:	0f b7 c0             	movzx  eax,ax
   173d8:	83 ec 08             	sub    esp,0x8
   173db:	53                   	push   ebx
   173dc:	51                   	push   ecx
   173dd:	52                   	push   edx
   173de:	50                   	push   eax
   173df:	68 e0 27 08 00       	push   0x827e0
   173e4:	68 00 01 00 00       	push   0x100
   173e9:	e8 25 fe 00 00       	call   27213 <printd>
   173ee:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:406
    memcpy(&kPCIDeviceFunctions[kPCIFunctionCount++],node,sizeof(struct pci_bridge_t));
   173f1:	8b 0d bc 02 12 00    	mov    ecx,DWORD PTR ds:0x1202bc
   173f7:	0f b6 05 ae 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ae
   173fe:	8d 50 01             	lea    edx,[eax+0x1]
   17401:	88 15 ae 02 12 00    	mov    BYTE PTR ds:0x1202ae,dl
   17407:	0f b6 d0             	movzx  edx,al
   1740a:	89 d0                	mov    eax,edx
   1740c:	c1 e0 02             	shl    eax,0x2
   1740f:	01 d0                	add    eax,edx
   17411:	c1 e0 04             	shl    eax,0x4
   17414:	01 c8                	add    eax,ecx
   17416:	83 ec 04             	sub    esp,0x4
   17419:	6a 4e                	push   0x4e
   1741b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1741e:	50                   	push   eax
   1741f:	e8 34 e7 00 00       	call   25b58 <memcpy>
   17424:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:407
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFunction entry created\n");
   17427:	83 ec 08             	sub    esp,0x8
   1742a:	68 35 28 08 00       	push   0x82835
   1742f:	68 00 01 00 00       	push   0x100
   17434:	e8 da fd 00 00       	call   27213 <printd>
   17439:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:408
}
   1743c:	90                   	nop
   1743d:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17440:	c9                   	leave  
   17441:	c3                   	ret    

00017442 <addBridge>:
addBridge():
/home/yogi/src/os/chrisOS/src/block/pci.c:410
void addBridge(struct pci_device_t* node, uint8_t bus, uint8_t device, uint8_t function)
{
   17442:	55                   	push   ebp
   17443:	89 e5                	mov    ebp,esp
   17445:	57                   	push   edi
   17446:	56                   	push   esi
   17447:	53                   	push   ebx
   17448:	81 ec cc 00 00 00    	sub    esp,0xcc
   1744e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   17451:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   17454:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   17457:	88 8d 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],cl
   1745d:	88 95 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],dl
   17463:	88 85 3c ff ff ff    	mov    BYTE PTR [ebp-0xc4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:414
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
   17469:	0f b6 8d 3c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc4]
   17470:	0f b6 95 40 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xc0]
   17477:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   1747e:	51                   	push   ecx
   1747f:	52                   	push   edx
   17480:	50                   	push   eax
   17481:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   17487:	50                   	push   eax
   17488:	e8 49 f7 ff ff       	call   16bd6 <getBridgeHeader>
   1748d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:415
    if (bridge.vendor==0xFFFF)
   17490:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   17497:	66 83 f8 ff          	cmp    ax,0xffff
   1749b:	0f 84 0e 01 00 00    	je     175af <addBridge+0x16d>
/home/yogi/src/os/chrisOS/src/block/pci.c:418
        return;
    //         bridge.busNo=bus;bridge.deviceNo=device;bridge.funcNo=function;
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tFound bridge on %02X:%02X:%02X,Cls#%02XpBus#%02X,sBus#%02X,suBus# %02X,MF=%u\n",bus, device, function, bridge.class, bridge.primaryBusNum, bridge.secondaryBusNum, bridge.subordinateBusNum, bridge.multiFunction);
   174a1:	0f b6 85 4e ff ff ff 	movzx  eax,BYTE PTR [ebp-0xb2]
   174a8:	0f b6 d0             	movzx  edx,al
   174ab:	0f b6 85 72 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8e]
   174b2:	0f b6 c0             	movzx  eax,al
   174b5:	89 85 38 ff ff ff    	mov    DWORD PTR [ebp-0xc8],eax
   174bb:	0f b6 85 70 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x90]
   174c2:	0f b6 f0             	movzx  esi,al
   174c5:	89 b5 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],esi
   174cb:	0f b6 85 71 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8f]
   174d2:	0f b6 f8             	movzx  edi,al
   174d5:	8b b5 53 ff ff ff    	mov    esi,DWORD PTR [ebp-0xad]
   174db:	0f b6 9d 3c ff ff ff 	movzx  ebx,BYTE PTR [ebp-0xc4]
   174e2:	0f b6 8d 40 ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc0]
   174e9:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   174f0:	83 ec 08             	sub    esp,0x8
   174f3:	52                   	push   edx
   174f4:	ff b5 38 ff ff ff    	push   DWORD PTR [ebp-0xc8]
   174fa:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   17500:	57                   	push   edi
   17501:	56                   	push   esi
   17502:	53                   	push   ebx
   17503:	51                   	push   ecx
   17504:	50                   	push   eax
   17505:	68 54 28 08 00       	push   0x82854
   1750a:	68 00 01 00 00       	push   0x100
   1750f:	e8 ff fc 00 00       	call   27213 <printd>
   17514:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:419
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tdeviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", bridge.device, bridge.vendor, bridge.class, bridge.subClass);
   17517:	8b 9d 57 ff ff ff    	mov    ebx,DWORD PTR [ebp-0xa9]
   1751d:	8b 8d 53 ff ff ff    	mov    ecx,DWORD PTR [ebp-0xad]
   17523:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   1752a:	0f b7 d0             	movzx  edx,ax
   1752d:	0f b7 85 51 ff ff ff 	movzx  eax,WORD PTR [ebp-0xaf]
   17534:	0f b7 c0             	movzx  eax,ax
   17537:	83 ec 08             	sub    esp,0x8
   1753a:	53                   	push   ebx
   1753b:	51                   	push   ecx
   1753c:	52                   	push   edx
   1753d:	50                   	push   eax
   1753e:	68 a8 28 08 00       	push   0x828a8
   17543:	68 00 01 00 00       	push   0x100
   17548:	e8 c6 fc 00 00       	call   27213 <printd>
   1754d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:420
    memcpy(&kPCIBridgeHeaders[kPCIBridgeCount++],&bridge,sizeof(struct pci_bridge_t));
   17550:	8b 0d b8 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b8
   17556:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   1755d:	8d 50 01             	lea    edx,[eax+0x1]
   17560:	88 15 ad 02 12 00    	mov    BYTE PTR ds:0x1202ad,dl
   17566:	0f b6 c0             	movzx  eax,al
   17569:	6b c0 4e             	imul   eax,eax,0x4e
   1756c:	8d 14 01             	lea    edx,[ecx+eax*1]
   1756f:	83 ec 04             	sub    esp,0x4
   17572:	6a 4e                	push   0x4e
   17574:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   1757a:	50                   	push   eax
   1757b:	52                   	push   edx
   1757c:	e8 d7 e5 00 00       	call   25b58 <memcpy>
   17581:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:421
    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17584:	83 ec 04             	sub    esp,0x4
   17587:	6a 50                	push   0x50
   17589:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1758c:	8d 45 98             	lea    eax,[ebp-0x68]
   1758f:	50                   	push   eax
   17590:	e8 c3 e5 00 00       	call   25b58 <memcpy>
   17595:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:422
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tbridge entry created\n");
   17598:	83 ec 08             	sub    esp,0x8
   1759b:	68 ec 28 08 00       	push   0x828ec
   175a0:	68 00 01 00 00       	push   0x100
   175a5:	e8 69 fc 00 00       	call   27213 <printd>
   175aa:	83 c4 10             	add    esp,0x10
   175ad:	eb 01                	jmp    175b0 <addBridge+0x16e>
/home/yogi/src/os/chrisOS/src/block/pci.c:416
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
    if (bridge.vendor==0xFFFF)
        return;
   175af:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:438
//       checkBus(&newNode, bridge.secondaryBusNum);
//#ifndef DEBUG_NONE
//       printd(DEBUG_PCI_DISCOVERY,"Done checking bus %02X\n",bridge.secondaryBusNum);
//#endif
    }
}
   175b0:	8d 65 f4             	lea    esp,[ebp-0xc]
   175b3:	5b                   	pop    ebx
   175b4:	5e                   	pop    esi
   175b5:	5f                   	pop    edi
   175b6:	5d                   	pop    ebp
   175b7:	c3                   	ret    

000175b8 <checkFunctions>:
checkFunctions():
/home/yogi/src/os/chrisOS/src/block/pci.c:440

void checkFunctions(uint8_t bus, uint8_t device) {
   175b8:	55                   	push   ebp
   175b9:	89 e5                	mov    ebp,esp
   175bb:	83 ec 78             	sub    esp,0x78
   175be:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   175c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   175c4:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   175c7:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:443
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   175ca:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   175d1:	eb 4e                	jmp    17621 <checkFunctions+0x69>
/home/yogi/src/os/chrisOS/src/block/pci.c:445
    {
        getDeviceHeader(&funcDevice, bus, device, function);
   175d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   175d6:	0f b6 c8             	movzx  ecx,al
   175d9:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   175dd:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   175e1:	51                   	push   ecx
   175e2:	52                   	push   edx
   175e3:	50                   	push   eax
   175e4:	8d 45 a4             	lea    eax,[ebp-0x5c]
   175e7:	50                   	push   eax
   175e8:	e8 03 f4 ff ff       	call   169f0 <getDeviceHeader>
   175ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:446
        if (funcDevice.vendor!=0xFFFF)
   175f0:	0f b7 45 aa          	movzx  eax,WORD PTR [ebp-0x56]
   175f4:	66 83 f8 ff          	cmp    ax,0xffff
   175f8:	74 23                	je     1761d <checkFunctions+0x65>
/home/yogi/src/os/chrisOS/src/block/pci.c:448
        {
            funcDevice.busNo=bus;
   175fa:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   175fe:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:449
            funcDevice.deviceNo=device;
   17601:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   17605:	88 45 a5             	mov    BYTE PTR [ebp-0x5b],al
/home/yogi/src/os/chrisOS/src/block/pci.c:450
            funcDevice.funcNo=function;
   17608:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1760b:	88 45 a6             	mov    BYTE PTR [ebp-0x5a],al
/home/yogi/src/os/chrisOS/src/block/pci.c:451
            addFunction(&funcDevice);
   1760e:	83 ec 0c             	sub    esp,0xc
   17611:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17614:	50                   	push   eax
   17615:	e8 97 fd ff ff       	call   173b1 <addFunction>
   1761a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 2)
}

void checkFunctions(uint8_t bus, uint8_t device) {
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   1761d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 1)
   17621:	83 7d f4 07          	cmp    DWORD PTR [ebp-0xc],0x7
   17625:	7e ac                	jle    175d3 <checkFunctions+0x1b>
/home/yogi/src/os/chrisOS/src/block/pci.c:455
            funcDevice.funcNo=function;
            addFunction(&funcDevice);
        }
    }

 }
   17627:	90                   	nop
   17628:	c9                   	leave  
   17629:	c3                   	ret    

0001762a <addDevice>:
addDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:458

void addDevice(struct pci_device_t* node)
{
   1762a:	55                   	push   ebp
   1762b:	89 e5                	mov    ebp,esp
   1762d:	57                   	push   edi
   1762e:	56                   	push   esi
   1762f:	53                   	push   ebx
   17630:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/block/pci.c:460
#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\tFound device #%u on %02X:%02X:0, Ven# %04X Dev# %04X Cls# %02X MF=%u\n",kPCIDeviceCount, node->busNo, node->deviceNo, node->vendor, node->device, node->class, node->multiFunction);
   17633:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17636:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1763a:	0f b6 c0             	movzx  eax,al
   1763d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   17640:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17643:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
   17646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17649:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   1764d:	0f b7 f0             	movzx  esi,ax
   17650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17653:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   17657:	0f b7 d8             	movzx  ebx,ax
   1765a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1765d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   17661:	0f b6 c8             	movzx  ecx,al
   17664:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17667:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1766a:	0f b6 d0             	movzx  edx,al
   1766d:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   17674:	0f b6 c0             	movzx  eax,al
   17677:	83 ec 0c             	sub    esp,0xc
   1767a:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1767d:	57                   	push   edi
   1767e:	56                   	push   esi
   1767f:	53                   	push   ebx
   17680:	51                   	push   ecx
   17681:	52                   	push   edx
   17682:	50                   	push   eax
   17683:	68 08 29 08 00       	push   0x82908
   17688:	68 00 01 00 00       	push   0x100
   1768d:	e8 81 fb 00 00       	call   27213 <printd>
   17692:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:462
#endif
    memcpy(&kPCIDeviceHeaders[kPCIDeviceCount++],node,sizeof(struct pci_device_t));
   17695:	8b 0d b4 02 12 00    	mov    ecx,DWORD PTR ds:0x1202b4
   1769b:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   176a2:	8d 50 01             	lea    edx,[eax+0x1]
   176a5:	88 15 ac 02 12 00    	mov    BYTE PTR ds:0x1202ac,dl
   176ab:	0f b6 d0             	movzx  edx,al
   176ae:	89 d0                	mov    eax,edx
   176b0:	c1 e0 02             	shl    eax,0x2
   176b3:	01 d0                	add    eax,edx
   176b5:	c1 e0 04             	shl    eax,0x4
   176b8:	01 c8                	add    eax,ecx
   176ba:	83 ec 04             	sub    esp,0x4
   176bd:	6a 50                	push   0x50
   176bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   176c2:	50                   	push   eax
   176c3:	e8 90 e4 00 00       	call   25b58 <memcpy>
   176c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:463
    printd(DEBUG_PCI_DISCOVERY,"\tdevice entry created\n");
   176cb:	83 ec 08             	sub    esp,0x8
   176ce:	68 4f 29 08 00       	push   0x8294f
   176d3:	68 00 01 00 00       	push   0x100
   176d8:	e8 36 fb 00 00       	call   27213 <printd>
   176dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:464
}
   176e0:	90                   	nop
   176e1:	8d 65 f4             	lea    esp,[ebp-0xc]
   176e4:	5b                   	pop    ebx
   176e5:	5e                   	pop    esi
   176e6:	5f                   	pop    edi
   176e7:	5d                   	pop    ebp
   176e8:	c3                   	ret    

000176e9 <checkDevice>:
checkDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:467

bool checkDevice(struct pci_device_t* node, uint8_t bus, uint8_t device)
{
   176e9:	55                   	push   ebp
   176ea:	89 e5                	mov    ebp,esp
   176ec:	83 ec 78             	sub    esp,0x78
   176ef:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   176f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   176f5:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   176f8:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:468
    int func=0;
   176fb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:471
    struct pci_device_t newNode;

    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17702:	83 ec 04             	sub    esp,0x4
   17705:	6a 50                	push   0x50
   17707:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1770a:	8d 45 a4             	lea    eax,[ebp-0x5c]
   1770d:	50                   	push   eax
   1770e:	e8 45 e4 00 00       	call   25b58 <memcpy>
   17713:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:472
    if (getDeviceHeader(&newNode, bus, device, 0))
   17716:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   1771a:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   1771e:	6a 00                	push   0x0
   17720:	52                   	push   edx
   17721:	50                   	push   eax
   17722:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17725:	50                   	push   eax
   17726:	e8 c5 f2 ff ff       	call   169f0 <getDeviceHeader>
   1772b:	83 c4 10             	add    esp,0x10
   1772e:	84 c0                	test   al,al
   17730:	74 6c                	je     1779e <checkDevice+0xb5>
/home/yogi/src/os/chrisOS/src/block/pci.c:474
    {
        if (newNode.class!=6)
   17732:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   17735:	83 f8 06             	cmp    eax,0x6
   17738:	74 11                	je     1774b <checkDevice+0x62>
/home/yogi/src/os/chrisOS/src/block/pci.c:476
        {
            addDevice(&newNode);
   1773a:	83 ec 0c             	sub    esp,0xc
   1773d:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17740:	50                   	push   eax
   17741:	e8 e4 fe ff ff       	call   1762a <addDevice>
   17746:	83 c4 10             	add    esp,0x10
   17749:	eb 1d                	jmp    17768 <checkDevice+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:480
        }
        else
        {
            addBridge(&newNode, bus, device,func);
   1774b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1774e:	0f b6 c8             	movzx  ecx,al
   17751:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17755:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17759:	51                   	push   ecx
   1775a:	52                   	push   edx
   1775b:	50                   	push   eax
   1775c:	8d 45 a4             	lea    eax,[ebp-0x5c]
   1775f:	50                   	push   eax
   17760:	e8 dd fc ff ff       	call   17442 <addBridge>
   17765:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:483
        }
#ifndef DEBUG_NONE
        printd(DEBUG_PCI_DISCOVERY,"\tChecking functions\n",device);
   17768:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   1776c:	83 ec 04             	sub    esp,0x4
   1776f:	50                   	push   eax
   17770:	68 66 29 08 00       	push   0x82966
   17775:	68 00 01 00 00       	push   0x100
   1777a:	e8 94 fa 00 00       	call   27213 <printd>
   1777f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:485
#endif
        checkFunctions(bus, device);
   17782:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17786:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   1778a:	83 ec 08             	sub    esp,0x8
   1778d:	52                   	push   edx
   1778e:	50                   	push   eax
   1778f:	e8 24 fe ff ff       	call   175b8 <checkFunctions>
   17794:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:486
        return true;
   17797:	b8 01 00 00 00       	mov    eax,0x1
   1779c:	eb 05                	jmp    177a3 <checkDevice+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:488
    }
    return false;
   1779e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:489 (discriminator 1)
}
   177a3:	c9                   	leave  
   177a4:	c3                   	ret    

000177a5 <checkBus>:
checkBus():
/home/yogi/src/os/chrisOS/src/block/pci.c:491

void checkBus(struct pci_device_t* node, uint8_t bus) {
   177a5:	55                   	push   ebp
   177a6:	89 e5                	mov    ebp,esp
   177a8:	83 ec 28             	sub    esp,0x28
   177ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   177ae:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:495
 uint8_t device;

#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\n");
   177b1:	83 ec 08             	sub    esp,0x8
   177b4:	68 7b 29 08 00       	push   0x8297b
   177b9:	68 00 01 00 00       	push   0x100
   177be:	e8 50 fa 00 00       	call   27213 <printd>
   177c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:496
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
   177c6:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   177ca:	83 ec 04             	sub    esp,0x4
   177cd:	50                   	push   eax
   177ce:	68 7d 29 08 00       	push   0x8297d
   177d3:	68 00 01 00 00       	push   0x100
   177d8:	e8 36 fa 00 00       	call   27213 <printd>
   177dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   177e0:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   177e4:	eb 22                	jmp    17808 <checkBus+0x63>
/home/yogi/src/os/chrisOS/src/block/pci.c:508 (discriminator 2)
        if ((kDebugLevel & DEBUG_PCI_DISCOVERY) == DEBUG_PCI_DISCOVERY)
        {
            //waitForKeyboardKey();
        }
#endif
        checkDevice(node, bus, device);
   177e6:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   177ea:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   177ee:	83 ec 04             	sub    esp,0x4
   177f1:	52                   	push   edx
   177f2:	50                   	push   eax
   177f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   177f6:	e8 ee fe ff ff       	call   176e9 <checkDevice>
   177fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 2)
    printd(DEBUG_PCI_DISCOVERY,"\n");
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   177fe:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   17802:	83 c0 01             	add    eax,0x1
   17805:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 1)
   17808:	80 7d f7 1f          	cmp    BYTE PTR [ebp-0x9],0x1f
   1780c:	76 d8                	jbe    177e6 <checkBus+0x41>
/home/yogi/src/os/chrisOS/src/block/pci.c:511
        }
#endif
        checkDevice(node, bus, device);
     }
 }
}
   1780e:	90                   	nop
   1780f:	c9                   	leave  
   17810:	c3                   	ret    

00017811 <pciInitialize>:
pciInitialize():
/home/yogi/src/os/chrisOS/src/block/pci.c:514
    
 void pciInitialize()
 {
   17811:	55                   	push   ebp
   17812:	89 e5                	mov    ebp,esp
   17814:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/block/pci.c:517
    //Iterate Busses/Slots
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;
   1781a:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
   17820:	66 c7 45 f4 00 00    	mov    WORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:519

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
   17826:	c6 05 af 02 12 00 00 	mov    BYTE PTR ds:0x1202af,0x0
   1782d:	0f b6 05 af 02 12 00 	movzx  eax,BYTE PTR ds:0x1202af
   17834:	a2 ae 02 12 00       	mov    ds:0x1202ae,al
   17839:	0f b6 05 ae 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ae
   17840:	a2 ad 02 12 00       	mov    ds:0x1202ad,al
   17845:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   1784c:	a2 ac 02 12 00       	mov    ds:0x1202ac,al
/home/yogi/src/os/chrisOS/src/block/pci.c:520
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
   17851:	83 ec 08             	sub    esp,0x8
   17854:	68 90 29 08 00       	push   0x82990
   17859:	68 00 01 00 00       	push   0x100
   1785e:	e8 b0 f9 00 00       	call   27213 <printd>
   17863:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:521
     for (currBus=0;currBus<50;currBus++)
   17866:	c7 05 98 a4 09 00 00 	mov    DWORD PTR ds:0x9a498,0x0
   1786d:	00 00 00 
   17870:	e9 cc 01 00 00       	jmp    17a41 <pciInitialize+0x230>
/home/yogi/src/os/chrisOS/src/block/pci.c:523
     {
         for (currSlot=0;currSlot<32;currSlot++)
   17875:	c7 05 9c a4 09 00 00 	mov    DWORD PTR ds:0x9a49c,0x0
   1787c:	00 00 00 
   1787f:	e9 a2 01 00 00       	jmp    17a26 <pciInitialize+0x215>
/home/yogi/src/os/chrisOS/src/block/pci.c:526
         {
            //if device found print it
            currFunc=0;
   17884:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   1788b:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/pci.c:527
            prevDev=0;
   1788e:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:528
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
   17894:	8b 15 9c a4 09 00    	mov    edx,DWORD PTR ds:0x9a49c
   1789a:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   1789f:	52                   	push   edx
   178a0:	50                   	push   eax
   178a1:	68 ae 29 08 00       	push   0x829ae
   178a6:	68 00 01 00 00       	push   0x100
   178ab:	e8 63 f9 00 00       	call   27213 <printd>
   178b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:529
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
   178b3:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   178b8:	0f b6 c8             	movzx  ecx,al
   178bb:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   178c0:	0f b6 d0             	movzx  edx,al
   178c3:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   178c8:	0f b6 c0             	movzx  eax,al
   178cb:	51                   	push   ecx
   178cc:	52                   	push   edx
   178cd:	50                   	push   eax
   178ce:	8d 45 a4             	lea    eax,[ebp-0x5c]
   178d1:	50                   	push   eax
   178d2:	e8 19 f1 ff ff       	call   169f0 <getDeviceHeader>
   178d7:	83 c4 10             	add    esp,0x10
   178da:	84 c0                	test   al,al
   178dc:	0f 84 37 01 00 00    	je     17a19 <pciInitialize+0x208>
/home/yogi/src/os/chrisOS/src/block/pci.c:531
            {
                if (prevBus!=currBus)
   178e2:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   178e6:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   178eb:	39 c2                	cmp    edx,eax
   178ed:	74 18                	je     17907 <pciInitialize+0xf6>
/home/yogi/src/os/chrisOS/src/block/pci.c:533
                {
                    prevBus=currBus;
   178ef:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   178f4:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:534
                    kPCIBusCount++;
   178f8:	0f b6 05 af 02 12 00 	movzx  eax,BYTE PTR ds:0x1202af
   178ff:	83 c0 01             	add    eax,0x1
   17902:	a2 af 02 12 00       	mov    ds:0x1202af,al
/home/yogi/src/os/chrisOS/src/block/pci.c:537
                }
                //printPCIHeader(&device);
                if (device.class==0x06)
   17907:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   1790a:	83 f8 06             	cmp    eax,0x6
   1790d:	75 29                	jne    17938 <pciInitialize+0x127>
/home/yogi/src/os/chrisOS/src/block/pci.c:539
                {
                    addBridge(&device, currBus, currSlot, currFunc);
   1790f:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17914:	0f b6 c8             	movzx  ecx,al
   17917:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   1791c:	0f b6 d0             	movzx  edx,al
   1791f:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17924:	0f b6 c0             	movzx  eax,al
   17927:	51                   	push   ecx
   17928:	52                   	push   edx
   17929:	50                   	push   eax
   1792a:	8d 45 a4             	lea    eax,[ebp-0x5c]
   1792d:	50                   	push   eax
   1792e:	e8 0f fb ff ff       	call   17442 <addBridge>
   17933:	83 c4 10             	add    esp,0x10
   17936:	eb 0f                	jmp    17947 <pciInitialize+0x136>
/home/yogi/src/os/chrisOS/src/block/pci.c:542
                }
                else
                    addDevice(&device);
   17938:	83 ec 0c             	sub    esp,0xc
   1793b:	8d 45 a4             	lea    eax,[ebp-0x5c]
   1793e:	50                   	push   eax
   1793f:	e8 e6 fc ff ff       	call   1762a <addDevice>
   17944:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   17947:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   1794e:	00 00 00 
   17951:	e9 b5 00 00 00       	jmp    17a0b <pciInitialize+0x1fa>
/home/yogi/src/os/chrisOS/src/block/pci.c:547
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
   17956:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   1795b:	0f b6 c8             	movzx  ecx,al
   1795e:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17963:	0f b6 d0             	movzx  edx,al
   17966:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   1796b:	0f b6 c0             	movzx  eax,al
   1796e:	51                   	push   ecx
   1796f:	52                   	push   edx
   17970:	50                   	push   eax
   17971:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17977:	50                   	push   eax
   17978:	e8 73 f0 ff ff       	call   169f0 <getDeviceHeader>
   1797d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:548
                    if (funcDevice.vendor!=0xFFFF)
   17980:	0f b7 85 5a ff ff ff 	movzx  eax,WORD PTR [ebp-0xa6]
   17987:	66 83 f8 ff          	cmp    ax,0xffff
   1798b:	74 71                	je     179fe <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
   1798d:	0f b7 95 5c ff ff ff 	movzx  edx,WORD PTR [ebp-0xa4]
   17994:	0f b7 45 ac          	movzx  eax,WORD PTR [ebp-0x54]
   17998:	66 39 c2             	cmp    dx,ax
   1799b:	74 61                	je     179fe <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549 (discriminator 1)
   1799d:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   179a4:	66 3b 45 f6          	cmp    ax,WORD PTR [ebp-0xa]
   179a8:	74 54                	je     179fe <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:552
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
   179aa:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   179b1:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:553
                            if (funcDevice.class == 0x06)
   179b5:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
   179bb:	83 f8 06             	cmp    eax,0x6
   179be:	75 2c                	jne    179ec <pciInitialize+0x1db>
/home/yogi/src/os/chrisOS/src/block/pci.c:554
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
   179c0:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   179c5:	0f b6 c8             	movzx  ecx,al
   179c8:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   179cd:	0f b6 d0             	movzx  edx,al
   179d0:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   179d5:	0f b6 c0             	movzx  eax,al
   179d8:	51                   	push   ecx
   179d9:	52                   	push   edx
   179da:	50                   	push   eax
   179db:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   179e1:	50                   	push   eax
   179e2:	e8 5b fa ff ff       	call   17442 <addBridge>
   179e7:	83 c4 10             	add    esp,0x10
   179ea:	eb 12                	jmp    179fe <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:556
                            else
                                addFunction(&funcDevice);
   179ec:	83 ec 0c             	sub    esp,0xc
   179ef:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   179f5:	50                   	push   eax
   179f6:	e8 b6 f9 ff ff       	call   173b1 <addFunction>
   179fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 2)
                    addBridge(&device, currBus, currSlot, currFunc);
                }
                else
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   179fe:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17a03:	83 c0 01             	add    eax,0x1
   17a06:	a3 a0 a4 09 00       	mov    ds:0x9a4a0,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 1)
   17a0b:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17a10:	83 f8 07             	cmp    eax,0x7
   17a13:	0f 8e 3d ff ff ff    	jle    17956 <pciInitialize+0x145>
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 2)

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
   17a19:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17a1e:	83 c0 01             	add    eax,0x1
   17a21:	a3 9c a4 09 00       	mov    ds:0x9a49c,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 1)
   17a26:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17a2b:	83 f8 1f             	cmp    eax,0x1f
   17a2e:	0f 8e 50 fe ff ff    	jle    17884 <pciInitialize+0x73>
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 2)
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
   17a34:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17a39:	83 c0 01             	add    eax,0x1
   17a3c:	a3 98 a4 09 00       	mov    ds:0x9a498,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 1)
   17a41:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17a46:	83 f8 31             	cmp    eax,0x31
   17a49:	0f 8e 26 fe ff ff    	jle    17875 <pciInitialize+0x64>
/home/yogi/src/os/chrisOS/src/block/pci.c:563
                    }
            }
 
        }
     }
   17a4f:	90                   	nop
   17a50:	c9                   	leave  
   17a51:	c3                   	ret    
   17a52:	66 90                	xchg   ax,ax

00017a54 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   17a54:	55                   	push   ebp
   17a55:	89 e5                	mov    ebp,esp
   17a57:	83 ec 08             	sub    esp,0x8
   17a5a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17a5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17a60:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   17a64:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   17a67:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   17a6b:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   17a6f:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   17a70:	90                   	nop
   17a71:	c9                   	leave  
   17a72:	c3                   	ret    

00017a73 <update_cursor>:
update_cursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:25
KERNEL_DATA_SECTION uint8_t savedPosY[10];
KERNEL_DATA_SECTION int8_t savedPosPointer=0;
KERNEL_DATA_SECTION uint8_t kTerminalHeight;

void update_cursor()
 {
   17a73:	55                   	push   ebp
   17a74:	89 e5                	mov    ebp,esp
   17a76:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:26
    unsigned short position=(terminal_row*VGA_WIDTH) + terminal_column;
   17a79:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17a7e:	89 c2                	mov    edx,eax
   17a80:	b8 50 00 00 00       	mov    eax,0x50
   17a85:	0f af c2             	imul   eax,edx
   17a88:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17a8e:	01 d0                	add    eax,edx
   17a90:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:29
 
    // cursor LOW port to vga INDEX register
    outb(0x3D4, 0x0F);
   17a94:	6a 0f                	push   0xf
   17a96:	68 d4 03 00 00       	push   0x3d4
   17a9b:	e8 b4 ff ff ff       	call   17a54 <outb>
   17aa0:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:30
    outb(0x3D5, (unsigned char)(position&0xFF));
   17aa3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17aa7:	0f b6 c0             	movzx  eax,al
   17aaa:	50                   	push   eax
   17aab:	68 d5 03 00 00       	push   0x3d5
   17ab0:	e8 9f ff ff ff       	call   17a54 <outb>
   17ab5:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:32
    // cursor HIGH port to vga INDEX register
    outb(0x3D4, 0x0E);
   17ab8:	6a 0e                	push   0xe
   17aba:	68 d4 03 00 00       	push   0x3d4
   17abf:	e8 90 ff ff ff       	call   17a54 <outb>
   17ac4:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:33
    outb(0x3D5, (unsigned char )((position>>8)&0xFF));
   17ac7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17acb:	66 c1 e8 08          	shr    ax,0x8
   17acf:	0f b6 c0             	movzx  eax,al
   17ad2:	50                   	push   eax
   17ad3:	68 d5 03 00 00       	push   0x3d5
   17ad8:	e8 77 ff ff ff       	call   17a54 <outb>
   17add:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:35
    //Move the cursor in the bios data area
 }
   17ae0:	90                   	nop
   17ae1:	c9                   	leave  
   17ae2:	c3                   	ret    

00017ae3 <make_color>:
make_color():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:37

uint8_t make_color(enum vga_color fg, enum vga_color bg) {
   17ae3:	55                   	push   ebp
   17ae4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:38
        return fg | bg << 4;
   17ae6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17ae9:	c1 e0 04             	shl    eax,0x4
   17aec:	89 c2                	mov    edx,eax
   17aee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17af1:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:39
}
   17af3:	5d                   	pop    ebp
   17af4:	c3                   	ret    

00017af5 <make_vgaentry>:
make_vgaentry():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:41

uint16_t make_vgaentry(char c, uint8_t color) {
   17af5:	55                   	push   ebp
   17af6:	89 e5                	mov    ebp,esp
   17af8:	83 ec 18             	sub    esp,0x18
   17afb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17afe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17b01:	88 55 ec             	mov    BYTE PTR [ebp-0x14],dl
   17b04:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:42
        uint16_t c16 = c;
   17b07:	66 0f be 45 ec       	movsx  ax,BYTE PTR [ebp-0x14]
   17b0c:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:43
        uint16_t color16 = color;
   17b10:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   17b14:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:44
        return c16 | color16 << 8;
   17b18:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   17b1c:	c1 e0 08             	shl    eax,0x8
   17b1f:	89 c2                	mov    edx,eax
   17b21:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17b25:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:45
}
   17b27:	c9                   	leave  
   17b28:	c3                   	ret    

00017b29 <terminal_setcolor>:
terminal_setcolor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:48


void terminal_setcolor(uint8_t color) {
   17b29:	55                   	push   ebp
   17b2a:	89 e5                	mov    ebp,esp
   17b2c:	83 ec 04             	sub    esp,0x4
   17b2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17b32:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:49
        terminal_color = color;
   17b35:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17b39:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:50
}
   17b3e:	90                   	nop
   17b3f:	c9                   	leave  
   17b40:	c3                   	ret    

00017b41 <terminal_putentryat>:
terminal_putentryat():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:52

void terminal_putentryat(char c, uint8_t color, size_t x, size_t y) {
   17b41:	55                   	push   ebp
   17b42:	89 e5                	mov    ebp,esp
   17b44:	53                   	push   ebx
   17b45:	83 ec 18             	sub    esp,0x18
   17b48:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17b4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17b4e:	88 55 e8             	mov    BYTE PTR [ebp-0x18],dl
   17b51:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:53
    const size_t index = y * VGA_WIDTH + x;
   17b54:	b8 50 00 00 00       	mov    eax,0x50
   17b59:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
   17b5d:	89 c2                	mov    edx,eax
   17b5f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17b62:	01 d0                	add    eax,edx
   17b64:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:54
        terminal_buffer[index] = make_vgaentry(c, color);
   17b67:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17b6c:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   17b6f:	01 d2                	add    edx,edx
   17b71:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17b74:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   17b78:	0f be 45 e8          	movsx  eax,BYTE PTR [ebp-0x18]
   17b7c:	52                   	push   edx
   17b7d:	50                   	push   eax
   17b7e:	e8 72 ff ff ff       	call   17af5 <make_vgaentry>
   17b83:	83 c4 08             	add    esp,0x8
   17b86:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:55
}
   17b89:	90                   	nop
   17b8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17b8d:	c9                   	leave  
   17b8e:	c3                   	ret    

00017b8f <cursorSavePosition>:
cursorSavePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:58

void cursorSavePosition()
{
   17b8f:	55                   	push   ebp
   17b90:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:59
    if (savedPosPointer < 10)
   17b92:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17b99:	3c 09                	cmp    al,0x9
   17b9b:	7f 3b                	jg     17bd8 <cursorSavePosition+0x49>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:61
    {
        savedPosX[++savedPosPointer] = terminal_column;
   17b9d:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17ba4:	83 c0 01             	add    eax,0x1
   17ba7:	a2 26 00 12 00       	mov    ds:0x120026,al
   17bac:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17bb3:	0f be c0             	movsx  eax,al
   17bb6:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17bbc:	88 90 10 00 12 00    	mov    BYTE PTR [eax+0x120010],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:62
        savedPosY[savedPosPointer] = terminal_row;
   17bc2:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17bc9:	0f be c0             	movsx  eax,al
   17bcc:	8b 15 00 00 12 00    	mov    edx,DWORD PTR ds:0x120000
   17bd2:	88 90 1c 00 12 00    	mov    BYTE PTR [eax+0x12001c],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:64
    }
}
   17bd8:	90                   	nop
   17bd9:	5d                   	pop    ebp
   17bda:	c3                   	ret    

00017bdb <cursorRestorePosition>:
cursorRestorePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:67

void cursorRestorePosition()
{
   17bdb:	55                   	push   ebp
   17bdc:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:68
    if (savedPosPointer > 0)
   17bde:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17be5:	84 c0                	test   al,al
   17be7:	7e 42                	jle    17c2b <cursorRestorePosition+0x50>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:70
    {
        terminal_column = savedPosX[savedPosPointer];
   17be9:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17bf0:	0f be c0             	movsx  eax,al
   17bf3:	0f b6 80 10 00 12 00 	movzx  eax,BYTE PTR [eax+0x120010]
   17bfa:	0f b6 c0             	movzx  eax,al
   17bfd:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:71
        terminal_row = savedPosY[savedPosPointer--];
   17c02:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17c09:	89 c2                	mov    edx,eax
   17c0b:	83 ea 01             	sub    edx,0x1
   17c0e:	88 15 26 00 12 00    	mov    BYTE PTR ds:0x120026,dl
   17c14:	0f be c0             	movsx  eax,al
   17c17:	0f b6 80 1c 00 12 00 	movzx  eax,BYTE PTR [eax+0x12001c]
   17c1e:	0f b6 c0             	movzx  eax,al
   17c21:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:72
        update_cursor();
   17c26:	e8 48 fe ff ff       	call   17a73 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:74
    }
}
   17c2b:	90                   	nop
   17c2c:	5d                   	pop    ebp
   17c2d:	c3                   	ret    

00017c2e <terminal_clear>:
terminal_clear():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:77

void terminal_clear()
{
   17c2e:	55                   	push   ebp
   17c2f:	89 e5                	mov    ebp,esp
   17c31:	53                   	push   ebx
   17c32:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   17c35:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   17c3c:	eb 53                	jmp    17c91 <terminal_clear+0x63>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   17c3e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17c45:	eb 3c                	jmp    17c83 <terminal_clear+0x55>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:81 (discriminator 3)
                        const size_t index = y * VGA_WIDTH + x;
   17c47:	b8 50 00 00 00       	mov    eax,0x50
   17c4c:	0f af 45 f8          	imul   eax,DWORD PTR [ebp-0x8]
   17c50:	89 c2                	mov    edx,eax
   17c52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17c55:	01 d0                	add    eax,edx
   17c57:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:82 (discriminator 3)
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   17c5a:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17c5f:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   17c62:	01 d2                	add    edx,edx
   17c64:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17c67:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17c6e:	0f b6 c0             	movzx  eax,al
   17c71:	50                   	push   eax
   17c72:	6a 20                	push   0x20
   17c74:	e8 7c fe ff ff       	call   17af5 <make_vgaentry>
   17c79:	83 c4 08             	add    esp,0x8
   17c7c:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 3)

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   17c7f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 1)
   17c83:	b8 50 00 00 00       	mov    eax,0x50
   17c88:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   17c8b:	72 ba                	jb     17c47 <terminal_clear+0x19>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 2)
}

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   17c8d:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 1)
   17c91:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17c98:	0f b6 c0             	movzx  eax,al
   17c9b:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   17c9e:	77 9e                	ja     17c3e <terminal_clear+0x10>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:85
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
                }
        }
    terminal_column=0;
   17ca0:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   17ca7:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:86
    terminal_row=0;
   17caa:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   17cb1:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:87
    update_cursor();
   17cb4:	e8 ba fd ff ff       	call   17a73 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:88
}
   17cb9:	90                   	nop
   17cba:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17cbd:	c9                   	leave  
   17cbe:	c3                   	ret    

00017cbf <terminal_clear_line>:
terminal_clear_line():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:91

void terminal_clear_line(unsigned lineNo)
{
   17cbf:	55                   	push   ebp
   17cc0:	89 e5                	mov    ebp,esp
   17cc2:	53                   	push   ebx
   17cc3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:92
    if (lineNo>SYS_VGA_HEIGHT-1)
   17cc6:	83 7d 08 31          	cmp    DWORD PTR [ebp+0x8],0x31
   17cca:	77 51                	ja     17d1d <terminal_clear_line+0x5e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   17ccc:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   17cd3:	eb 3c                	jmp    17d11 <terminal_clear_line+0x52>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:96 (discriminator 3)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
   17cd5:	b8 50 00 00 00       	mov    eax,0x50
   17cda:	0f af 45 08          	imul   eax,DWORD PTR [ebp+0x8]
   17cde:	89 c2                	mov    edx,eax
   17ce0:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   17ce3:	01 d0                	add    eax,edx
   17ce5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:97 (discriminator 3)
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   17ce8:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17ced:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   17cf0:	01 d2                	add    edx,edx
   17cf2:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17cf5:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17cfc:	0f b6 c0             	movzx  eax,al
   17cff:	50                   	push   eax
   17d00:	6a 20                	push   0x20
   17d02:	e8 ee fd ff ff       	call   17af5 <make_vgaentry>
   17d07:	83 c4 08             	add    esp,0x8
   17d0a:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 3)

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   17d0d:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 1)
   17d11:	b8 50 00 00 00       	mov    eax,0x50
   17d16:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   17d19:	72 ba                	jb     17cd5 <terminal_clear_line+0x16>
   17d1b:	eb 01                	jmp    17d1e <terminal_clear_line+0x5f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:93
}

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
   17d1d:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:99
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
    }
}
   17d1e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17d21:	c9                   	leave  
   17d22:	c3                   	ret    

00017d23 <terminal_copyline>:
terminal_copyline():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:102

void terminal_copyline(unsigned dstLine, unsigned srcLine)
{
   17d23:	55                   	push   ebp
   17d24:	89 e5                	mov    ebp,esp
   17d26:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:103
    unsigned rowBytes = VGA_WIDTH*2;
   17d29:	b8 50 00 00 00       	mov    eax,0x50
   17d2e:	01 c0                	add    eax,eax
   17d30:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:104
    uintptr_t dest=(uintptr_t)TEXTMODE_MEMORY_START+(dstLine*rowBytes);
   17d33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17d36:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   17d3a:	05 00 80 0b 00       	add    eax,0xb8000
   17d3f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:105
    uintptr_t src=(uintptr_t)TEXTMODE_MEMORY_START+(srcLine*rowBytes);
   17d42:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17d45:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   17d49:	05 00 80 0b 00       	add    eax,0xb8000
   17d4e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:107
    
    memcpy((void*)dest,(void*)src,rowBytes);
   17d51:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   17d54:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   17d57:	83 ec 04             	sub    esp,0x4
   17d5a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   17d5d:	52                   	push   edx
   17d5e:	50                   	push   eax
   17d5f:	e8 f4 dd 00 00       	call   25b58 <memcpy>
   17d64:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:108
}
   17d67:	90                   	nop
   17d68:	c9                   	leave  
   17d69:	c3                   	ret    

00017d6a <terminal_putchar>:
terminal_putchar():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:110

void terminal_putchar(char c) {
   17d6a:	55                   	push   ebp
   17d6b:	89 e5                	mov    ebp,esp
   17d6d:	53                   	push   ebx
   17d6e:	83 ec 24             	sub    esp,0x24
   17d71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17d74:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:111
    if (c=='\n')
   17d77:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
   17d7b:	75 1c                	jne    17d99 <terminal_putchar+0x2f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:113
    {
            terminal_column = 0;
   17d7d:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   17d84:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:114
            terminal_row += 1;
   17d87:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17d8c:	83 c0 01             	add    eax,0x1
   17d8f:	a3 00 00 12 00       	mov    ds:0x120000,eax
   17d94:	e9 1f 01 00 00       	jmp    17eb8 <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:116
    }
    else if (c=='\b')
   17d99:	80 7d e4 08          	cmp    BYTE PTR [ebp-0x1c],0x8
   17d9d:	75 58                	jne    17df7 <terminal_putchar+0x8d>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:118
    {
        if (terminal_column > 1)
   17d9f:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17da4:	83 f8 01             	cmp    eax,0x1
   17da7:	76 0f                	jbe    17db8 <terminal_putchar+0x4e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:119
            terminal_column--;
   17da9:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17dae:	83 e8 01             	sub    eax,0x1
   17db1:	a3 04 00 12 00       	mov    ds:0x120004,eax
   17db6:	eb 17                	jmp    17dcf <terminal_putchar+0x65>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:122
        else
        {
            terminal_row--;
   17db8:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17dbd:	83 e8 01             	sub    eax,0x1
   17dc0:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:123
            terminal_column=VGA_WIDTH;
   17dc5:	b8 50 00 00 00       	mov    eax,0x50
   17dca:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:125
        }
        terminal_putentryat(' ', terminal_color, terminal_column, terminal_row);
   17dcf:	8b 0d 00 00 12 00    	mov    ecx,DWORD PTR ds:0x120000
   17dd5:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17ddb:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17de2:	0f b6 c0             	movzx  eax,al
   17de5:	51                   	push   ecx
   17de6:	52                   	push   edx
   17de7:	50                   	push   eax
   17de8:	6a 20                	push   0x20
   17dea:	e8 52 fd ff ff       	call   17b41 <terminal_putentryat>
   17def:	83 c4 10             	add    esp,0x10
   17df2:	e9 c1 00 00 00       	jmp    17eb8 <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:128
        
    }
    else if (c=='\t')
   17df7:	80 7d e4 09          	cmp    BYTE PTR [ebp-0x1c],0x9
   17dfb:	75 59                	jne    17e56 <terminal_putchar+0xec>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:130
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
   17dfd:	8b 1d 04 00 12 00    	mov    ebx,DWORD PTR ds:0x120004
   17e03:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   17e09:	ba cd cc cc cc       	mov    edx,0xcccccccd
   17e0e:	89 c8                	mov    eax,ecx
   17e10:	f7 e2                	mul    edx
   17e12:	c1 ea 02             	shr    edx,0x2
   17e15:	89 d0                	mov    eax,edx
   17e17:	c1 e0 02             	shl    eax,0x2
   17e1a:	01 d0                	add    eax,edx
   17e1c:	29 c1                	sub    ecx,eax
   17e1e:	89 ca                	mov    edx,ecx
   17e20:	89 d8                	mov    eax,ebx
   17e22:	29 d0                	sub    eax,edx
   17e24:	83 c0 05             	add    eax,0x5
   17e27:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:131
        if (goTo==terminal_column)
   17e2a:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17e2f:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   17e32:	75 16                	jne    17e4a <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:132
            goTo=SCREEN_SPACES_PER_TAB;
   17e34:	c7 45 f4 05 00 00 00 	mov    DWORD PTR [ebp-0xc],0x5
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
        
        while (terminal_column < goTo)
   17e3b:	eb 0d                	jmp    17e4a <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:135
            terminal_putchar(' ');;
   17e3d:	83 ec 0c             	sub    esp,0xc
   17e40:	6a 20                	push   0x20
   17e42:	e8 23 ff ff ff       	call   17d6a <terminal_putchar>
   17e47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
        
        while (terminal_column < goTo)
   17e4a:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17e4f:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   17e52:	72 e9                	jb     17e3d <terminal_putchar+0xd3>
   17e54:	eb 62                	jmp    17eb8 <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:141
    
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
   17e56:	80 7d e4 0d          	cmp    BYTE PTR [ebp-0x1c],0xd
   17e5a:	0f 84 b0 00 00 00    	je     17f10 <terminal_putchar+0x1a6>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:146
        return;

        else
        {
                terminal_putentryat(c, terminal_color, terminal_column, terminal_row);
   17e60:	8b 1d 00 00 12 00    	mov    ebx,DWORD PTR ds:0x120000
   17e66:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   17e6c:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17e73:	0f b6 d0             	movzx  edx,al
   17e76:	0f be 45 e4          	movsx  eax,BYTE PTR [ebp-0x1c]
   17e7a:	53                   	push   ebx
   17e7b:	51                   	push   ecx
   17e7c:	52                   	push   edx
   17e7d:	50                   	push   eax
   17e7e:	e8 be fc ff ff       	call   17b41 <terminal_putentryat>
   17e83:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:147
                if (++terminal_column == VGA_WIDTH) {
   17e86:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17e8b:	83 c0 01             	add    eax,0x1
   17e8e:	a3 04 00 12 00       	mov    ds:0x120004,eax
   17e93:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17e98:	ba 50 00 00 00       	mov    edx,0x50
   17e9d:	39 d0                	cmp    eax,edx
   17e9f:	75 17                	jne    17eb8 <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:148
                        terminal_column = 0;
   17ea1:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   17ea8:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:149
                        terminal_row++;
   17eab:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17eb0:	83 c0 01             	add    eax,0x1
   17eb3:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:152
                }
        }
    if (terminal_row == kTerminalHeight)
   17eb8:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17ebf:	0f b6 d0             	movzx  edx,al
   17ec2:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17ec7:	39 c2                	cmp    edx,eax
   17ec9:	75 3e                	jne    17f09 <terminal_putchar+0x19f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   17ecb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   17ed2:	eb 19                	jmp    17eed <terminal_putchar+0x183>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:155 (discriminator 3)
            terminal_copyline(row, row+1);
   17ed4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   17ed7:	83 c0 01             	add    eax,0x1
   17eda:	83 ec 08             	sub    esp,0x8
   17edd:	50                   	push   eax
   17ede:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   17ee1:	e8 3d fe ff ff       	call   17d23 <terminal_copyline>
   17ee6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 3)
                        terminal_row++;
                }
        }
    if (terminal_row == kTerminalHeight)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   17ee9:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 1)
   17eed:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17ef4:	0f b6 c0             	movzx  eax,al
   17ef7:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   17efa:	77 d8                	ja     17ed4 <terminal_putchar+0x16a>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:157
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
   17efc:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17f01:	83 e8 01             	sub    eax,0x1
   17f04:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:159
    }
    update_cursor();
   17f09:	e8 65 fb ff ff       	call   17a73 <update_cursor>
   17f0e:	eb 01                	jmp    17f11 <terminal_putchar+0x1a7>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:142
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
        return;
   17f10:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:160
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
    }
    update_cursor();
}
   17f11:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17f14:	c9                   	leave  
   17f15:	c3                   	ret    

00017f16 <cursorUpdateBiosCursor>:
cursorUpdateBiosCursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:163

void cursorUpdateBiosCursor()
{
   17f16:	55                   	push   ebp
   17f17:	89 e5                	mov    ebp,esp
   17f19:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:164
    uint8_t* bda=(uint8_t*)0x450;
   17f1c:	c7 45 fc 50 04 00 00 	mov    DWORD PTR [ebp-0x4],0x450
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:165
    *bda=(uint8_t)(terminal_column & 0xFF);
   17f23:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17f28:	89 c2                	mov    edx,eax
   17f2a:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   17f2d:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:166
    bda++;
   17f2f:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:167
    *bda=(uint8_t)((terminal_row+3) & 0xFF);
   17f33:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17f38:	8d 50 03             	lea    edx,[eax+0x3]
   17f3b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   17f3e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:168
}
   17f40:	90                   	nop
   17f41:	c9                   	leave  
   17f42:	c3                   	ret    

00017f43 <cursorMoveTo>:
cursorMoveTo():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:171

void cursorMoveTo(uint8_t x, uint8_t y)
{
   17f43:	55                   	push   ebp
   17f44:	89 e5                	mov    ebp,esp
   17f46:	83 ec 08             	sub    esp,0x8
   17f49:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17f4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17f4f:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   17f52:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:172
    terminal_row = y;
   17f55:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   17f59:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:173
    terminal_column = x;
   17f5e:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17f62:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:174
    update_cursor();
   17f67:	e8 07 fb ff ff       	call   17a73 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:175
}
   17f6c:	90                   	nop
   17f6d:	c9                   	leave  
   17f6e:	c3                   	ret    

00017f6f <cursorMoveToX>:
cursorMoveToX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:178

void cursorMoveToX(uint8_t x)
{
   17f6f:	55                   	push   ebp
   17f70:	89 e5                	mov    ebp,esp
   17f72:	83 ec 04             	sub    esp,0x4
   17f75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17f78:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:179
    terminal_column = x;
   17f7b:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17f7f:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:180
}
   17f84:	90                   	nop
   17f85:	c9                   	leave  
   17f86:	c3                   	ret    

00017f87 <cursorMoveToY>:
cursorMoveToY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:183

void cursorMoveToY(uint8_t y)
{
   17f87:	55                   	push   ebp
   17f88:	89 e5                	mov    ebp,esp
   17f8a:	83 ec 04             	sub    esp,0x4
   17f8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17f90:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:184
    terminal_row = y;
   17f93:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17f97:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:185
}
   17f9c:	90                   	nop
   17f9d:	c9                   	leave  
   17f9e:	c3                   	ret    

00017f9f <cursorGetPosX>:
cursorGetPosX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:188

uint8_t cursorGetPosX()
{
   17f9f:	55                   	push   ebp
   17fa0:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:189
    return terminal_column;
   17fa2:	a1 04 00 12 00       	mov    eax,ds:0x120004
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:190
}
   17fa7:	5d                   	pop    ebp
   17fa8:	c3                   	ret    

00017fa9 <cursorGetMaxX>:
cursorGetMaxX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:192
int cursorGetMaxX()
{
   17fa9:	55                   	push   ebp
   17faa:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:193
    return VGA_WIDTH;
   17fac:	b8 50 00 00 00       	mov    eax,0x50
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:194
}
   17fb1:	5d                   	pop    ebp
   17fb2:	c3                   	ret    

00017fb3 <cursorGetMaxY>:
cursorGetMaxY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:197

int cursorGetMaxY()
{
   17fb3:	55                   	push   ebp
   17fb4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:198
    return kTerminalHeight;
   17fb6:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17fbd:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:199
}
   17fc0:	5d                   	pop    ebp
   17fc1:	c3                   	ret    

00017fc2 <displayGetMaxXY>:
displayGetMaxXY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:202

void displayGetMaxXY(int* maxX, int* maxY)
{
   17fc2:	55                   	push   ebp
   17fc3:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:203
    *maxX=VGA_WIDTH;
   17fc5:	b8 50 00 00 00       	mov    eax,0x50
   17fca:	89 c2                	mov    edx,eax
   17fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17fcf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:204
    *maxY=kTerminalHeight;
   17fd1:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17fd8:	0f b6 d0             	movzx  edx,al
   17fdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17fde:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:205
    return;
   17fe0:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:206
}
   17fe1:	5d                   	pop    ebp
   17fe2:	c3                   	ret    

00017fe3 <cursorGetPosY>:
cursorGetPosY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:209

uint8_t cursorGetPosY()
{
   17fe3:	55                   	push   ebp
   17fe4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:210
    return terminal_row;
   17fe6:	a1 00 00 12 00       	mov    eax,ds:0x120000
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:211
}
   17feb:	5d                   	pop    ebp
   17fec:	c3                   	ret    

00017fed <kTermPrint>:
kTermPrint():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:213

void kTermPrint(const char* data) {
   17fed:	55                   	push   ebp
   17fee:	89 e5                	mov    ebp,esp
   17ff0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:214
        size_t datalen = strlen(data);
   17ff3:	83 ec 0c             	sub    esp,0xc
   17ff6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17ff9:	e8 c6 f3 00 00       	call   273c4 <strlen>
   17ffe:	83 c4 10             	add    esp,0x10
   18001:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215
        for (size_t i = 0; i < datalen; i++)
   18004:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1800b:	eb 1e                	jmp    1802b <kTermPrint+0x3e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:216 (discriminator 3)
                terminal_putchar(data[i]);
   1800d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18010:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18013:	01 d0                	add    eax,edx
   18015:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18018:	0f be c0             	movsx  eax,al
   1801b:	83 ec 0c             	sub    esp,0xc
   1801e:	50                   	push   eax
   1801f:	e8 46 fd ff ff       	call   17d6a <terminal_putchar>
   18024:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 3)
    return terminal_row;
}

void kTermPrint(const char* data) {
        size_t datalen = strlen(data);
        for (size_t i = 0; i < datalen; i++)
   18027:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 1)
   1802b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1802e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   18031:	72 da                	jb     1800d <kTermPrint+0x20>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:217
                terminal_putchar(data[i]);
}
   18033:	90                   	nop
   18034:	c9                   	leave  
   18035:	c3                   	ret    

00018036 <kTermInit>:
kTermInit():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:220


void kTermInit() {
   18036:	55                   	push   ebp
   18037:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:221
    kTerminalHeight=SYS_VGA_HEIGHT;
   18039:	c6 05 27 00 12 00 32 	mov    BYTE PTR ds:0x120027,0x32
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:222
    terminal_row = 0;
   18040:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   18047:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:223
    terminal_column = 0;
   1804a:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   18051:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:224
    terminal_color = make_color(COLOR_LIGHT_BROWN, COLOR_BLACK);
   18054:	6a 00                	push   0x0
   18056:	6a 0e                	push   0xe
   18058:	e8 86 fa ff ff       	call   17ae3 <make_color>
   1805d:	83 c4 08             	add    esp,0x8
   18060:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:225
    terminal_buffer = (uint16_t*) TEXTMODE_MEMORY_START;
   18065:	c7 05 0c 00 12 00 00 	mov    DWORD PTR ds:0x12000c,0xb8000
   1806c:	80 0b 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:227
    //terminal_clear();
}
   1806f:	90                   	nop
   18070:	c9                   	leave  
   18071:	c3                   	ret    

00018072 <puts>:
puts():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:230

void puts(char* in)
{
   18072:	55                   	push   ebp
   18073:	89 e5                	mov    ebp,esp
   18075:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    while (*in>'\0')
   18078:	eb 1b                	jmp    18095 <puts+0x23>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:233
    {
        terminal_putchar(*in++);
   1807a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1807d:	8d 50 01             	lea    edx,[eax+0x1]
   18080:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   18083:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18086:	0f be c0             	movsx  eax,al
   18089:	83 ec 0c             	sub    esp,0xc
   1808c:	50                   	push   eax
   1808d:	e8 d8 fc ff ff       	call   17d6a <terminal_putchar>
   18092:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    //terminal_clear();
}

void puts(char* in)
{
    while (*in>'\0')
   18095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18098:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1809b:	84 c0                	test   al,al
   1809d:	7f db                	jg     1807a <puts+0x8>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:235
    {
        terminal_putchar(*in++);
    }
}
   1809f:	90                   	nop
   180a0:	c9                   	leave  
   180a1:	c3                   	ret    

000180a2 <putc>:
putc():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:238

void putc(char c)
{
   180a2:	55                   	push   ebp
   180a3:	89 e5                	mov    ebp,esp
   180a5:	83 ec 18             	sub    esp,0x18
   180a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   180ab:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:239
    terminal_putchar(c);
   180ae:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]
   180b2:	83 ec 0c             	sub    esp,0xc
   180b5:	50                   	push   eax
   180b6:	e8 af fc ff ff       	call   17d6a <terminal_putchar>
   180bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:240
   180be:	90                   	nop
   180bf:	c9                   	leave  
   180c0:	c3                   	ret    
   180c1:	66 90                	xchg   ax,ax
   180c3:	90                   	nop

000180c4 <doRSDPSearch>:
doRSDPSearch():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:8
#include "i386/bits/types.h"

extern uint32_t kDebugLevel;

uint32_t doRSDPSearch(int from, int count)
{
   180c4:	55                   	push   ebp
   180c5:	89 e5                	mov    ebp,esp
   180c7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:9
    uint8_t* fromPtr=(uint8_t*)from;
   180ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   180cd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:12
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   180d0:	a1 38 03 12 00       	mov    eax,ds:0x120338
   180d5:	25 00 04 00 00       	and    eax,0x400
   180da:	85 c0                	test   eax,eax
   180dc:	74 1c                	je     180fa <doRSDPSearch+0x36>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:13
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
   180de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   180e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   180e4:	01 d0                	add    eax,edx
   180e6:	50                   	push   eax
   180e7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   180ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   180ed:	68 e8 2a 08 00       	push   0x82ae8
   180f2:	e8 fc f0 00 00       	call   271f3 <printk>
   180f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15
#endif
    for (int cnt=0;cnt<count;cnt++)
   180fa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18101:	e9 9f 00 00 00       	jmp    181a5 <doRSDPSearch+0xe1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
   18106:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18109:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1810c:	01 d0                	add    eax,edx
   1810e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18111:	3c 52                	cmp    al,0x52
   18113:	0f 85 88 00 00 00    	jne    181a1 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 1)
   18119:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1811c:	8d 50 01             	lea    edx,[eax+0x1]
   1811f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18122:	01 d0                	add    eax,edx
   18124:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18127:	3c 53                	cmp    al,0x53
   18129:	75 76                	jne    181a1 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 2)
   1812b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1812e:	8d 50 02             	lea    edx,[eax+0x2]
   18131:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18134:	01 d0                	add    eax,edx
   18136:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18139:	3c 44                	cmp    al,0x44
   1813b:	75 64                	jne    181a1 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 3)
   1813d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18140:	8d 50 03             	lea    edx,[eax+0x3]
   18143:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18146:	01 d0                	add    eax,edx
   18148:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1814b:	3c 20                	cmp    al,0x20
   1814d:	75 52                	jne    181a1 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 4)
   1814f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18152:	8d 50 04             	lea    edx,[eax+0x4]
   18155:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18158:	01 d0                	add    eax,edx
   1815a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1815d:	3c 50                	cmp    al,0x50
   1815f:	75 40                	jne    181a1 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 5)
   18161:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18164:	8d 50 05             	lea    edx,[eax+0x5]
   18167:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1816a:	01 d0                	add    eax,edx
   1816c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1816f:	3c 54                	cmp    al,0x54
   18171:	75 2e                	jne    181a1 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 6)
   18173:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18176:	8d 50 06             	lea    edx,[eax+0x6]
   18179:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1817c:	01 d0                	add    eax,edx
   1817e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18181:	3c 52                	cmp    al,0x52
   18183:	75 1c                	jne    181a1 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 7)
   18185:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18188:	8d 50 07             	lea    edx,[eax+0x7]
   1818b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1818e:	01 d0                	add    eax,edx
   18190:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18193:	3c 20                	cmp    al,0x20
   18195:	75 0a                	jne    181a1 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:18
        {
            return (uint32_t)&fromPtr[cnt];
   18197:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1819a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1819d:	01 d0                	add    eax,edx
   1819f:	eb 15                	jmp    181b6 <doRSDPSearch+0xf2>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 2)
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
#endif
    for (int cnt=0;cnt<count;cnt++)
   181a1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 1)
   181a5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   181a8:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   181ab:	0f 8c 55 ff ff ff    	jl     18106 <doRSDPSearch+0x42>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:20
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
        {
            return (uint32_t)&fromPtr[cnt];
        }
    return 0xFFFFFFFF;
   181b1:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:21
}
   181b6:	c9                   	leave  
   181b7:	c3                   	ret    

000181b8 <acpiFindTable>:
acpiFindTable():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:24

acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
   181b8:	55                   	push   ebp
   181b9:	89 e5                	mov    ebp,esp
   181bb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:25
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
   181be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   181c1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:26
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
   181c4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   181c7:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   181ca:	83 e8 24             	sub    eax,0x24
   181cd:	c1 e8 02             	shr    eax,0x2
   181d0:	83 c0 0a             	add    eax,0xa
   181d3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28
 
    for (int i = 0; i < entries; i++)
   181d6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   181dd:	eb 48                	jmp    18227 <acpiFindTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:30
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t*)rsdt->PointerToOtherSDT[i];
   181df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   181e2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   181e5:	83 c2 08             	add    edx,0x8
   181e8:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   181ec:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:31
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   181ef:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   181f2:	83 ec 04             	sub    esp,0x4
   181f5:	50                   	push   eax
   181f6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   181f9:	68 10 2b 08 00       	push   0x82b10
   181fe:	e8 f0 ef 00 00       	call   271f3 <printk>
   18203:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:32
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   18206:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18209:	83 ec 04             	sub    esp,0x4
   1820c:	6a 04                	push   0x4
   1820e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18211:	50                   	push   eax
   18212:	e8 ed 99 ff ff       	call   11c04 <strncmp>
   18217:	83 c4 10             	add    esp,0x10
   1821a:	85 c0                	test   eax,eax
   1821c:	75 05                	jne    18223 <acpiFindTable+0x6b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:33
            return (acpiFADT_t*)nextRSDT;
   1821e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18221:	eb 11                	jmp    18234 <acpiFindTable+0x7c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 2)
acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
 
    for (int i = 0; i < entries; i++)
   18223:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 1)
   18227:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1822a:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1822d:	7c b0                	jl     181df <acpiFindTable+0x27>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:37
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (acpiFADT_t*)nextRSDT;
    }
 
    // No FACP found
    return NULL;
   1822f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:38
}
   18234:	c9                   	leave  
   18235:	c3                   	ret    

00018236 <acpiFindTable2>:
acpiFindTable2():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:40
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
   18236:	55                   	push   ebp
   18237:	89 e5                	mov    ebp,esp
   18239:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:41
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
   1823c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1823f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:42
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
   18242:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18245:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   18248:	83 e8 24             	sub    eax,0x24
   1824b:	c1 e8 02             	shr    eax,0x2
   1824e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44
 
    for (int i = 0; i < entries; i++)
   18251:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18258:	eb 48                	jmp    182a2 <acpiFindTable2+0x6c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:46
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t *) rsdt->PointerToOtherSDT[i];
   1825a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1825d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18260:	83 c2 08             	add    edx,0x8
   18263:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   18267:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:47
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   1826a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1826d:	83 ec 04             	sub    esp,0x4
   18270:	50                   	push   eax
   18271:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18274:	68 10 2b 08 00       	push   0x82b10
   18279:	e8 75 ef 00 00       	call   271f3 <printk>
   1827e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:48
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   18281:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18284:	83 ec 04             	sub    esp,0x4
   18287:	6a 04                	push   0x4
   18289:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1828c:	50                   	push   eax
   1828d:	e8 72 99 ff ff       	call   11c04 <strncmp>
   18292:	83 c4 10             	add    esp,0x10
   18295:	85 c0                	test   eax,eax
   18297:	75 05                	jne    1829e <acpiFindTable2+0x68>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:49
            return (void *) nextRSDT;
   18299:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1829c:	eb 11                	jmp    182af <acpiFindTable2+0x79>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 2)
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
 
    for (int i = 0; i < entries; i++)
   1829e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 1)
   182a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   182a5:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   182a8:	7c b0                	jl     1825a <acpiFindTable2+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:53
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (void *) nextRSDT;
    }
 
    // No FACP found
    return NULL;
   182aa:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:54
}
   182af:	c9                   	leave  
   182b0:	c3                   	ret    

000182b1 <acpiFindTables>:
acpiFindTables():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:56
void acpiFindTables()
{
   182b1:	55                   	push   ebp
   182b2:	89 e5                	mov    ebp,esp
   182b4:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:61
    acpiRSDPHeader_t* lRSDPTable;
    acpiRSDT_t* lRootSDP;
    acpiFADT_t* lFADTSDP;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   182b7:	a1 38 03 12 00       	mov    eax,ds:0x120338
   182bc:	25 00 04 00 00       	and    eax,0x400
   182c1:	85 c0                	test   eax,eax
   182c3:	74 10                	je     182d5 <acpiFindTables+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:62
             printk("acpiFindTables: Looking for ACPI tables\n");
   182c5:	83 ec 0c             	sub    esp,0xc
   182c8:	68 38 2b 08 00       	push   0x82b38
   182cd:	e8 21 ef 00 00       	call   271f3 <printk>
   182d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:64
#endif
             uint16_t* lEBDABIOSPtr=(uint16_t*)0x40e;
   182d5:	c7 45 e8 0e 04 00 00 	mov    DWORD PTR [ebp-0x18],0x40e
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:65
    int32_t lRSDPPtr, lRSDPBaseAddress=0xFFFFFFFF;
   182dc:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:68
    
    //Start by looking in the bios for the extended bios data area (EBDA) segment address, and search there
    if (lEBDABIOSPtr != 0)
   182e3:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   182e7:	74 2b                	je     18314 <acpiFindTables+0x63>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:70
    {
        lRSDPPtr=*lEBDABIOSPtr*10;
   182e9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   182ec:	0f b7 00             	movzx  eax,WORD PTR [eax]
   182ef:	0f b7 d0             	movzx  edx,ax
   182f2:	89 d0                	mov    eax,edx
   182f4:	c1 e0 02             	shl    eax,0x2
   182f7:	01 d0                	add    eax,edx
   182f9:	01 c0                	add    eax,eax
   182fb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:71
        lRSDPBaseAddress = doRSDPSearch(lRSDPPtr, 0xFFFF);
   182fe:	83 ec 08             	sub    esp,0x8
   18301:	68 ff ff 00 00       	push   0xffff
   18306:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18309:	e8 b6 fd ff ff       	call   180c4 <doRSDPSearch>
   1830e:	83 c4 10             	add    esp,0x10
   18311:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:74
    }
    //If we didn't find the RSDP table there, look from 0xE0000->0xFFFFF
    if (lRSDPBaseAddress==0xFFFFFFFF)
   18314:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   18318:	75 18                	jne    18332 <acpiFindTables+0x81>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:76
    {
        lRSDPBaseAddress=doRSDPSearch(0xE0000, 0x1FFFF);
   1831a:	83 ec 08             	sub    esp,0x8
   1831d:	68 ff ff 01 00       	push   0x1ffff
   18322:	68 00 00 0e 00       	push   0xe0000
   18327:	e8 98 fd ff ff       	call   180c4 <doRSDPSearch>
   1832c:	83 c4 10             	add    esp,0x10
   1832f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:78
    }
    if (lRSDPBaseAddress==-1)
   18332:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   18336:	75 2a                	jne    18362 <acpiFindTables+0xb1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:81
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   18338:	a1 38 03 12 00       	mov    eax,ds:0x120338
   1833d:	25 00 04 00 00       	and    eax,0x400
   18342:	85 c0                	test   eax,eax
   18344:	0f 84 51 01 00 00    	je     1849b <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:82
           printk(" table not found\n", lRSDPPtr);
   1834a:	83 ec 08             	sub    esp,0x8
   1834d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18350:	68 61 2b 08 00       	push   0x82b61
   18355:	e8 99 ee 00 00       	call   271f3 <printk>
   1835a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
#endif
        return;
   1835d:	e9 39 01 00 00       	jmp    1849b <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:86
    }
    lRSDPTable=(acpiRSDPHeader_t*)lRSDPBaseAddress;
   18362:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   18365:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:88
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   18368:	a1 38 03 12 00       	mov    eax,ds:0x120338
   1836d:	25 00 04 00 00       	and    eax,0x400
   18372:	85 c0                	test   eax,eax
   18374:	74 42                	je     183b8 <acpiFindTables+0x107>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:90
    {
        printk(" table found at 0x%08X\n", lRSDPBaseAddress);
   18376:	83 ec 08             	sub    esp,0x8
   18379:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1837c:	68 73 2b 08 00       	push   0x82b73
   18381:	e8 6d ee 00 00       	call   271f3 <printk>
   18386:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91
        printk("ACPI version %s, RSPD OEM Id: %s\n", lRSDPTable->firstPart.Revision==0?"1.0":"2+", lRSDPTable->firstPart.OEMID);
   18389:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1838c:	8d 50 09             	lea    edx,[eax+0x9]
   1838f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18392:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   18396:	84 c0                	test   al,al
   18398:	75 07                	jne    183a1 <acpiFindTables+0xf0>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 1)
   1839a:	b8 8b 2b 08 00       	mov    eax,0x82b8b
   1839f:	eb 05                	jmp    183a6 <acpiFindTables+0xf5>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 2)
   183a1:	b8 8f 2b 08 00       	mov    eax,0x82b8f
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 4)
   183a6:	83 ec 04             	sub    esp,0x4
   183a9:	52                   	push   edx
   183aa:	50                   	push   eax
   183ab:	68 94 2b 08 00       	push   0x82b94
   183b0:	e8 3e ee 00 00       	call   271f3 <printk>
   183b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:93
    }
    if (lRSDPTable->firstPart.Revision==0)
   183b8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   183bb:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   183bf:	84 c0                	test   al,al
   183c1:	75 29                	jne    183ec <acpiFindTables+0x13b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:95
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->firstPart.RsdtAddress;
   183c3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   183c6:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   183c9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:96
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   183cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   183cf:	8d 50 24             	lea    edx,[eax+0x24]
   183d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   183d5:	83 c0 0a             	add    eax,0xa
   183d8:	52                   	push   edx
   183d9:	50                   	push   eax
   183da:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   183dd:	68 b8 2b 08 00       	push   0x82bb8
   183e2:	e8 0c ee 00 00       	call   271f3 <printk>
   183e7:	83 c4 10             	add    esp,0x10
   183ea:	eb 2a                	jmp    18416 <acpiFindTables+0x165>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:100
    }
    else
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->XsdtAddress;
   183ec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   183ef:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   183f2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   183f5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:101
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   183f8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   183fb:	8d 50 24             	lea    edx,[eax+0x24]
   183fe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18401:	83 c0 0a             	add    eax,0xa
   18404:	52                   	push   edx
   18405:	50                   	push   eax
   18406:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18409:	68 b8 2b 08 00       	push   0x82bb8
   1840e:	e8 e0 ed 00 00       	call   271f3 <printk>
   18413:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:103
    }
    lFADTSDP=acpiFindTable(lRootSDP,"FACP");
   18416:	83 ec 08             	sub    esp,0x8
   18419:	68 e4 2b 08 00       	push   0x82be4
   1841e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18421:	e8 92 fd ff ff       	call   181b8 <acpiFindTable>
   18426:	83 c4 10             	add    esp,0x10
   18429:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:104
    if (lFADTSDP!=NULL)
   1842c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   18430:	74 2e                	je     18460 <acpiFindTables+0x1af>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:106
    {
        printk("FACP found at 0x%08X. resetReg=0x%08X\n", lFADTSDP, lFADTSDP->ResetReg);
   18432:	83 ec 0c             	sub    esp,0xc
   18435:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   18438:	83 ec 0c             	sub    esp,0xc
   1843b:	89 e2                	mov    edx,esp
   1843d:	8b 48 74             	mov    ecx,DWORD PTR [eax+0x74]
   18440:	89 0a                	mov    DWORD PTR [edx],ecx
   18442:	8b 48 78             	mov    ecx,DWORD PTR [eax+0x78]
   18445:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   18448:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
   1844b:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
   1844e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18451:	68 ec 2b 08 00       	push   0x82bec
   18456:	e8 98 ed 00 00       	call   271f3 <printk>
   1845b:	83 c4 20             	add    esp,0x20
   1845e:	eb 10                	jmp    18470 <acpiFindTables+0x1bf>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:110
    }
    else
    {
        printk("Failed to find FACP table, cannot continue ACPI discovery.\n");
   18460:	83 ec 0c             	sub    esp,0xc
   18463:	68 14 2c 08 00       	push   0x82c14
   18468:	e8 86 ed 00 00       	call   271f3 <printk>
   1846d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:112
    }
    uint32_t* ltemp=acpiFindTable(lFADTSDP,"DSDT");
   18470:	83 ec 08             	sub    esp,0x8
   18473:	68 50 2c 08 00       	push   0x82c50
   18478:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1847b:	e8 38 fd ff ff       	call   181b8 <acpiFindTable>
   18480:	83 c4 10             	add    esp,0x10
   18483:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:113
    printk("lTemp=0x%08X\n", ltemp);
   18486:	83 ec 08             	sub    esp,0x8
   18489:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1848c:	68 55 2c 08 00       	push   0x82c55
   18491:	e8 5d ed 00 00       	call   271f3 <printk>
   18496:	83 c4 10             	add    esp,0x10
   18499:	eb 01                	jmp    1849c <acpiFindTables+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
           printk(" table not found\n", lRSDPPtr);
#endif
        return;
   1849b:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:118
    printk("lTemp=0x%08X\n", ltemp);
    
#endif
    
   
}
   1849c:	c9                   	leave  
   1849d:	c3                   	ret    

0001849e <acpiInitialize>:
acpiInitialize():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:122
    
   
void acpiInitialize()
{
   1849e:	55                   	push   ebp
   1849f:	89 e5                	mov    ebp,esp
   184a1:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:123
    acpiFindTables();
   184a4:	e8 08 fe ff ff       	call   182b1 <acpiFindTables>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:125
    
}
   184a9:	90                   	nop
   184aa:	c9                   	leave  
   184ab:	c3                   	ret    

000184ac <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   184ac:	55                   	push   ebp
   184ad:	89 e5                	mov    ebp,esp
   184af:	53                   	push   ebx
   184b0:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   184b3:	9c                   	pushf  
   184b4:	9c                   	pushf  
   184b5:	5a                   	pop    edx
   184b6:	89 d0                	mov    eax,edx
   184b8:	81 f2 00 00 20 00    	xor    edx,0x200000
   184be:	52                   	push   edx
   184bf:	9d                   	popf   
   184c0:	9c                   	pushf  
   184c1:	5a                   	pop    edx
   184c2:	9d                   	popf   
   184c3:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   184c6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   184c9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   184cc:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   184cf:	25 00 00 20 00       	and    eax,0x200000
   184d4:	85 c0                	test   eax,eax
   184d6:	75 07                	jne    184df <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   184d8:	b8 00 00 00 00       	mov    eax,0x0
   184dd:	eb 22                	jmp    18501 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   184df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   184e2:	0f a2                	cpuid  
   184e4:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   184e7:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   184ea:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   184ed:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   184f0:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   184f4:	74 08                	je     184fe <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   184f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   184f9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   184fc:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   184fe:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   18501:	83 c4 10             	add    esp,0x10
   18504:	5b                   	pop    ebx
   18505:	5d                   	pop    ebp
   18506:	c3                   	ret    

00018507 <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   18507:	55                   	push   ebp
   18508:	89 e5                	mov    ebp,esp
   1850a:	56                   	push   esi
   1850b:	53                   	push   ebx
   1850c:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   1850f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18512:	25 00 00 00 80       	and    eax,0x80000000
   18517:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   1851a:	6a 00                	push   0x0
   1851c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1851f:	e8 88 ff ff ff       	call   184ac <__get_cpuid_max>
   18524:	83 c4 08             	add    esp,0x8
   18527:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1852a:	73 07                	jae    18533 <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   1852c:	b8 00 00 00 00       	mov    eax,0x0
   18531:	eb 1e                	jmp    18551 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   18533:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18536:	0f a2                	cpuid  
   18538:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   1853b:	89 06                	mov    DWORD PTR [esi],eax
   1853d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18540:	89 18                	mov    DWORD PTR [eax],ebx
   18542:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18545:	89 08                	mov    DWORD PTR [eax],ecx
   18547:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   1854a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   1854c:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   18551:	8d 65 f8             	lea    esp,[ebp-0x8]
   18554:	5b                   	pop    ebx
   18555:	5e                   	pop    esi
   18556:	5d                   	pop    ebp
   18557:	c3                   	ret    

00018558 <rdtsc>:
rdtsc():
/home/yogi/src/os/chrisOS/include/utility.h:57
void displayGDT();

#if defined(__i386__)

static __inline__ unsigned long long rdtsc(void)
{
   18558:	55                   	push   ebp
   18559:	89 e5                	mov    ebp,esp
   1855b:	83 ec 10             	sub    esp,0x10
   1855e:	0f 31                	rdtsc  
/home/yogi/src/os/chrisOS/include/utility.h:59
    unsigned long long int x;
    __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
   18560:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18563:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/include/utility.h:60
    return x;
   18566:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18569:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/utility.h:61
}
   1856c:	c9                   	leave  
   1856d:	c3                   	ret    

0001856e <apicCheckFor>:
apicCheckFor():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:12
 *  and if the local APIC hasn't been disabled in MSRs
 *  note that this requires CPUID to be supported.
 */

extern cpu_t kCPU[];
bool apicCheckFor() {
   1856e:	55                   	push   ebp
   1856f:	89 e5                	mov    ebp,esp
   18571:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:13
   uint32_t eax=0, edx=0, notused=0;
   18574:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1857b:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   18582:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:14
   __get_cpuid(1, &eax, &notused, &notused, &edx);
   18589:	8d 45 f8             	lea    eax,[ebp-0x8]
   1858c:	50                   	push   eax
   1858d:	8d 45 f4             	lea    eax,[ebp-0xc]
   18590:	50                   	push   eax
   18591:	8d 45 f4             	lea    eax,[ebp-0xc]
   18594:	50                   	push   eax
   18595:	8d 45 fc             	lea    eax,[ebp-0x4]
   18598:	50                   	push   eax
   18599:	6a 01                	push   0x1
   1859b:	e8 67 ff ff ff       	call   18507 <__get_cpuid>
   185a0:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/apic.c:15
   return edx & CPUID_FLAG_APIC;
   185a3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   185a6:	25 00 02 00 00       	and    eax,0x200
   185ab:	85 c0                	test   eax,eax
   185ad:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/apic.c:16
}
   185b0:	c9                   	leave  
   185b1:	c3                   	ret    

000185b2 <acpiGetAPICVersion>:
acpiGetAPICVersion():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:19

uint8_t acpiGetAPICVersion()
{
   185b2:	55                   	push   ebp
   185b3:	89 e5                	mov    ebp,esp
   185b5:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:20
    return apicReadRegister(APIC_REGISTER_VERSION);
   185b8:	83 ec 0c             	sub    esp,0xc
   185bb:	6a 30                	push   0x30
   185bd:	e8 3f 00 00 00       	call   18601 <apicReadRegister>
   185c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:21
}
   185c5:	c9                   	leave  
   185c6:	c3                   	ret    

000185c7 <apciGetAPICID>:
apciGetAPICID():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:24

uint8_t apciGetAPICID(unsigned whichAPIC)
{
   185c7:	55                   	push   ebp
   185c8:	89 e5                	mov    ebp,esp
   185ca:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:25
    return apicReadRegister(APIC_REGISTER_APIC_ID_OFFSET);
   185cd:	83 ec 0c             	sub    esp,0xc
   185d0:	6a 20                	push   0x20
   185d2:	e8 2a 00 00 00       	call   18601 <apicReadRegister>
   185d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:26
}
   185da:	c9                   	leave  
   185db:	c3                   	ret    

000185dc <apicGetAPICBase>:
apicGetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:29

uint32_t apicGetAPICBase(void)
{
   185dc:	55                   	push   ebp
   185dd:	89 e5                	mov    ebp,esp
   185df:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:31
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   185e2:	83 ec 04             	sub    esp,0x4
   185e5:	8d 45 f0             	lea    eax,[ebp-0x10]
   185e8:	50                   	push   eax
   185e9:	8d 45 f4             	lea    eax,[ebp-0xc]
   185ec:	50                   	push   eax
   185ed:	6a 1b                	push   0x1b
   185ef:	e8 c7 12 00 00       	call   198bb <rdmsr32>
   185f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:33

   return (eax & 0xfffff000);
   185f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   185fa:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:34
}
   185ff:	c9                   	leave  
   18600:	c3                   	ret    

00018601 <apicReadRegister>:
apicReadRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:37

uint32_t apicReadRegister(uint32_t reg) 
{
   18601:	55                   	push   ebp
   18602:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:38
    return *((volatile uint32_t *) (kCPU[0].registerBase + reg));
   18604:	8b 15 64 03 12 00    	mov    edx,DWORD PTR ds:0x120364
   1860a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1860d:	01 d0                	add    eax,edx
   1860f:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:39
}
   18611:	5d                   	pop    ebp
   18612:	c3                   	ret    

00018613 <apicWriteRegister>:
apicWriteRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:41

void apicWriteRegister(uint32_t reg, uint32_t value) {
   18613:	55                   	push   ebp
   18614:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:42
    *((volatile uint32_t *) (kCPU[0].registerBase + reg)) = value;
   18616:	8b 15 64 03 12 00    	mov    edx,DWORD PTR ds:0x120364
   1861c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1861f:	01 d0                	add    eax,edx
   18621:	89 c2                	mov    edx,eax
   18623:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18626:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:43
}
   18628:	90                   	nop
   18629:	5d                   	pop    ebp
   1862a:	c3                   	ret    

0001862b <apicSetAPICBase>:
apicSetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:46

/* Set the physical address for local APIC registers */
void apicSetAPICBase(uintptr_t apic) {
   1862b:	55                   	push   ebp
   1862c:	89 e5                	mov    ebp,esp
   1862e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:47
   uint32_t edx = 0;
   18631:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:48
   uint32_t eax = (apic & 0xfffff100) | IA32_APIC_BASE_MSR_ENABLE;
   18638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1863b:	25 00 f1 ff ff       	and    eax,0xfffff100
   18640:	80 cc 08             	or     ah,0x8
   18643:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:54
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   edx = (apic >> 32) & 0x0f;
#endif
 
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   18646:	83 ec 04             	sub    esp,0x4
   18649:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1864c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1864f:	6a 1b                	push   0x1b
   18651:	e8 bb 12 00 00       	call   19911 <wrmsr32>
   18656:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:55
   kCPU[0].registerBase=apic;
   18659:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1865c:	a3 64 03 12 00       	mov    ds:0x120364,eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:56
}
   18661:	90                   	nop
   18662:	c9                   	leave  
   18663:	c3                   	ret    

00018664 <cpu_get_apic_base>:
cpu_get_apic_base():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:62
 
/**
 * Get the physical address of the APIC registers page
 * make sure you map it to virtual memory ;)
 */
uintptr_t cpu_get_apic_base() {
   18664:	55                   	push   ebp
   18665:	89 e5                	mov    ebp,esp
   18667:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:64
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   1866a:	83 ec 04             	sub    esp,0x4
   1866d:	8d 45 f0             	lea    eax,[ebp-0x10]
   18670:	50                   	push   eax
   18671:	8d 45 f4             	lea    eax,[ebp-0xc]
   18674:	50                   	push   eax
   18675:	6a 1b                	push   0x1b
   18677:	e8 3f 12 00 00       	call   198bb <rdmsr32>
   1867c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:69
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   return (eax & 0xfffff000) | ((edx & 0x0f) << 32);
#else
   return (eax & 0xfffff000);
   1867f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18682:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:71
#endif
}
   18687:	c9                   	leave  
   18688:	c3                   	ret    

00018689 <apicIsEnabled>:
apicIsEnabled():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:73

bool apicIsEnabled() {
   18689:	55                   	push   ebp
   1868a:	89 e5                	mov    ebp,esp
   1868c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:75
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   1868f:	83 ec 04             	sub    esp,0x4
   18692:	8d 45 f0             	lea    eax,[ebp-0x10]
   18695:	50                   	push   eax
   18696:	8d 45 f4             	lea    eax,[ebp-0xc]
   18699:	50                   	push   eax
   1869a:	6a 1b                	push   0x1b
   1869c:	e8 1a 12 00 00       	call   198bb <rdmsr32>
   186a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:76
   return (eax & (1<<11)) == (1<11);
   186a4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:77
} 
   186a9:	c9                   	leave  
   186aa:	c3                   	ret    

000186ab <apicEnable>:
apicEnable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:79

void apicEnable() {
   186ab:	55                   	push   ebp
   186ac:	89 e5                	mov    ebp,esp
   186ae:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:81
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   186b1:	83 ec 04             	sub    esp,0x4
   186b4:	8d 45 f0             	lea    eax,[ebp-0x10]
   186b7:	50                   	push   eax
   186b8:	8d 45 f4             	lea    eax,[ebp-0xc]
   186bb:	50                   	push   eax
   186bc:	6a 1b                	push   0x1b
   186be:	e8 f8 11 00 00       	call   198bb <rdmsr32>
   186c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:82
   eax |=IA32_APIC_BASE_MSR_ENABLE;
   186c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   186c9:	80 cc 08             	or     ah,0x8
   186cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:83
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   186cf:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   186d2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   186d5:	83 ec 04             	sub    esp,0x4
   186d8:	52                   	push   edx
   186d9:	50                   	push   eax
   186da:	6a 1b                	push   0x1b
   186dc:	e8 30 12 00 00       	call   19911 <wrmsr32>
   186e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:84
} 
   186e4:	90                   	nop
   186e5:	c9                   	leave  
   186e6:	c3                   	ret    

000186e7 <apicDisable>:
apicDisable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:86

void apicDisable() {
   186e7:	55                   	push   ebp
   186e8:	89 e5                	mov    ebp,esp
   186ea:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:88
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   186ed:	83 ec 04             	sub    esp,0x4
   186f0:	8d 45 f0             	lea    eax,[ebp-0x10]
   186f3:	50                   	push   eax
   186f4:	8d 45 f4             	lea    eax,[ebp-0xc]
   186f7:	50                   	push   eax
   186f8:	6a 1b                	push   0x1b
   186fa:	e8 bc 11 00 00       	call   198bb <rdmsr32>
   186ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:89
   eax&=!IA32_APIC_BASE_MSR_ENABLE;
   18702:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:90
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   18709:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1870c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1870f:	83 ec 04             	sub    esp,0x4
   18712:	52                   	push   edx
   18713:	50                   	push   eax
   18714:	6a 1b                	push   0x1b
   18716:	e8 f6 11 00 00       	call   19911 <wrmsr32>
   1871b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:91
} 
   1871e:	90                   	nop
   1871f:	c9                   	leave  
   18720:	c3                   	ret    

00018721 <apicGetHZ>:
apicGetHZ():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:92
uint32_t apicGetHZ() {
   18721:	55                   	push   ebp
   18722:	89 e5                	mov    ebp,esp
   18724:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:94

    int timerTimeout=500;
   18727:	c7 45 f4 f4 01 00 00 	mov    DWORD PTR [ebp-0xc],0x1f4
/home/yogi/src/os/chrisOS/src/cpu/apic.c:106
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
*/

    // Prepare the PIT to sleep for 10ms (10000µs)

    apicEnable();
   1872e:	e8 78 ff ff ff       	call   186ab <apicEnable>
/home/yogi/src/os/chrisOS/src/cpu/apic.c:107
    apicWriteRegister(APIC_REGISTER_SPURIOUS, 39+APIC_SW_ENABLE);
   18733:	83 ec 08             	sub    esp,0x8
   18736:	68 27 01 00 00       	push   0x127
   1873b:	68 f0 00 00 00       	push   0xf0
   18740:	e8 ce fe ff ff       	call   18613 <apicWriteRegister>
   18745:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:109
    // Set APIC init counter to -1
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32 | APIC_TIMER_MODE_ONESHOT );
   18748:	83 ec 08             	sub    esp,0x8
   1874b:	6a 20                	push   0x20
   1874d:	68 20 03 00 00       	push   0x320
   18752:	e8 bc fe ff ff       	call   18613 <apicWriteRegister>
   18757:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:111
    // Tell APIC timer to use divider 16
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x11);
   1875a:	83 ec 08             	sub    esp,0x8
   1875d:	6a 11                	push   0x11
   1875f:	68 e0 03 00 00       	push   0x3e0
   18764:	e8 aa fe ff ff       	call   18613 <apicWriteRegister>
   18769:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:112
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, 0xFFFFFFFF);
   1876c:	83 ec 08             	sub    esp,0x8
   1876f:	6a ff                	push   0xffffffff
   18771:	68 80 03 00 00       	push   0x380
   18776:	e8 98 fe ff ff       	call   18613 <apicWriteRegister>
   1877b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:115

    // Perform PIT-supported sleep
    wait(timerTimeout);
   1877e:	83 ec 0c             	sub    esp,0xc
   18781:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18784:	e8 a9 fc 00 00       	call   28432 <wait>
   18789:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:117

    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
   1878c:	83 ec 08             	sub    esp,0x8
   1878f:	68 00 00 01 00       	push   0x10000
   18794:	68 20 03 00 00       	push   0x320
   18799:	e8 75 fe ff ff       	call   18613 <apicWriteRegister>
   1879e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:119
    // Now we know how often the APIC timer has ticked in 10ms
    uint64_t ticksPer10ms = 0xFFFFFFFF - apicReadRegister(APIC_REGISTER_TIMER_CURRENT);
   187a1:	83 ec 0c             	sub    esp,0xc
   187a4:	68 90 03 00 00       	push   0x390
   187a9:	e8 53 fe ff ff       	call   18601 <apicReadRegister>
   187ae:	83 c4 10             	add    esp,0x10
   187b1:	f7 d0                	not    eax
   187b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   187b6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:120
    ticksPer10ms=ticksPer10ms/(timerTimeout/10);
   187bd:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   187c0:	ba 67 66 66 66       	mov    edx,0x66666667
   187c5:	89 c8                	mov    eax,ecx
   187c7:	f7 ea                	imul   edx
   187c9:	c1 fa 02             	sar    edx,0x2
   187cc:	89 c8                	mov    eax,ecx
   187ce:	c1 f8 1f             	sar    eax,0x1f
   187d1:	29 c2                	sub    edx,eax
   187d3:	89 d0                	mov    eax,edx
   187d5:	99                   	cdq    
   187d6:	52                   	push   edx
   187d7:	50                   	push   eax
   187d8:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   187db:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   187de:	e8 9d fd 00 00       	call   28580 <__udivdi3>
   187e3:	83 c4 10             	add    esp,0x10
   187e6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   187e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:124
    
    // Start timer as periodic on IRQ 0, divider 16, with the number of ticks we counted
//    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32  | APIC_TIMER_MODE_PERIODIC ); //clears the INT DISABLE pin
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x3);
   187ec:	83 ec 08             	sub    esp,0x8
   187ef:	6a 03                	push   0x3
   187f1:	68 e0 03 00 00       	push   0x3e0
   187f6:	e8 18 fe ff ff       	call   18613 <apicWriteRegister>
   187fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:125
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, ticksPer10ms);
   187fe:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18801:	83 ec 08             	sub    esp,0x8
   18804:	50                   	push   eax
   18805:	68 80 03 00 00       	push   0x380
   1880a:	e8 04 fe ff ff       	call   18613 <apicWriteRegister>
   1880f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:126
    return ticksPer10ms;
   18812:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:127
}
   18815:	c9                   	leave  
   18816:	c3                   	ret    

00018817 <tscGetTicksPerSecond>:
tscGetTicksPerSecond():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:130

int tscGetTicksPerSecond()
{
   18817:	55                   	push   ebp
   18818:	89 e5                	mov    ebp,esp
   1881a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:131
    uint64_t ticksBefore=rdtsc();
   1881d:	e8 36 fd ff ff       	call   18558 <rdtsc>
   18822:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   18825:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:132
    wait(1000);
   18828:	83 ec 0c             	sub    esp,0xc
   1882b:	68 e8 03 00 00       	push   0x3e8
   18830:	e8 fd fb 00 00       	call   28432 <wait>
   18835:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:133
    return rdtsc()-ticksBefore;
   18838:	e8 1b fd ff ff       	call   18558 <rdtsc>
   1883d:	89 c2                	mov    edx,eax
   1883f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18842:	29 c2                	sub    edx,eax
   18844:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:134
   18846:	c9                   	leave  
   18847:	c3                   	ret    

00018848 <bitsSet>:
bitsSet():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:5
#include <stdint.h>
#include <stdbool.h>

bool bitsSet(volatile uint32_t* array, uint32_t bit)
{
   18848:	55                   	push   ebp
   18849:	89 e5                	mov    ebp,esp
   1884b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:6
    int lRetVal=0;
   1884e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:7
    __asm__ volatile ("bts [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18855:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18858:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1885b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1885e:	0f ab 02             	bts    DWORD PTR [edx],eax
   18861:	b8 00 00 00 00       	mov    eax,0x0
   18866:	0f 92 c0             	setb   al
   18869:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:8
    return lRetVal;
   1886c:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18870:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:9
}
   18873:	c9                   	leave  
   18874:	c3                   	ret    

00018875 <bitsReset>:
bitsReset():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:11
bool bitsReset(volatile uint32_t* array, uint32_t bit)
{
   18875:	55                   	push   ebp
   18876:	89 e5                	mov    ebp,esp
   18878:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:12
    int lRetVal=0;
   1887b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:13
    __asm__ volatile ("btr [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18882:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18885:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18888:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1888b:	0f b3 02             	btr    DWORD PTR [edx],eax
   1888e:	b8 00 00 00 00       	mov    eax,0x0
   18893:	0f 92 c0             	setb   al
   18896:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:14
    return lRetVal;
   18899:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1889d:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:15
}
   188a0:	c9                   	leave  
   188a1:	c3                   	ret    

000188a2 <bitsTest>:
bitsTest():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:17
bool bitsTest(volatile uint32_t* array, uint32_t bit)
{
   188a2:	55                   	push   ebp
   188a3:	89 e5                	mov    ebp,esp
   188a5:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:18
    int lRetVal=0;
   188a8:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:19
    __asm__ volatile ("bt [%[array]],%[bit]\nmov eax,0\nsetc al\n" :[array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   188af:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   188b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   188b5:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   188b8:	0f a3 02             	bt     DWORD PTR [edx],eax
   188bb:	b8 00 00 00 00       	mov    eax,0x0
   188c0:	0f 92 c0             	setb   al
   188c3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:20
    return lRetVal;
   188c6:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   188ca:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:21
}
   188cd:	c9                   	leave  
   188ce:	c3                   	ret    

000188cf <bitsScanF>:
bitsScanF():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:24

int bitsScanF(volatile uint32_t* array)
{
   188cf:	55                   	push   ebp
   188d0:	89 e5                	mov    ebp,esp
   188d2:	53                   	push   ebx
   188d3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:25
    int lRetVal=0;
   188d6:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:26
    bool lErr=false;
   188dd:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:27
    __asm__ volatile ("bsf %[ret],[%[array]]\nsetz cl\n" : [ret] "=b" (lRetVal), [lErr] "=c" (lErr) : [array] "m" (*array));
   188e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   188e4:	0f bc 18             	bsf    ebx,DWORD PTR [eax]
   188e7:	0f 94 c1             	sete   cl
   188ea:	89 c8                	mov    eax,ecx
   188ec:	89 da                	mov    edx,ebx
   188ee:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   188f1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:28
    if (lErr==false)
   188f4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   188f8:	83 f0 01             	xor    eax,0x1
   188fb:	84 c0                	test   al,al
   188fd:	74 05                	je     18904 <bitsScanF+0x35>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:29
        return lRetVal;
   188ff:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18902:	eb 05                	jmp    18909 <bitsScanF+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:31
    else
        return -1;
   18904:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/bits.c:32
   18909:	83 c4 10             	add    esp,0x10
   1890c:	5b                   	pop    ebx
   1890d:	5d                   	pop    ebp
   1890e:	c3                   	ret    
   1890f:	90                   	nop

00018910 <gdtEntry>:
gdtEntry():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:12
extern struct KERNEL_DATA_SECTION GDT* bootGdt;
extern uint32_t* kGDTSlotAvailableInd;

//Create/modify entries in the protected mode GDT
void HIGH_CODE_SECTION gdtEntry(int entryNo, int base, int limit, char access, char flags,bool inUse)
{
   18910:	55                   	push   ebp
   18911:	89 e5                	mov    ebp,esp
   18913:	83 ec 18             	sub    esp,0x18
   18916:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
   18919:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
   1891c:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   1891f:	88 4d f4             	mov    BYTE PTR [ebp-0xc],cl
   18922:	88 55 f0             	mov    BYTE PTR [ebp-0x10],dl
   18925:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:13
    bootGdt[entryNo].base_low        = base & 0xFFFF;
   18928:	a1 48 04 12 00       	mov    eax,ds:0x120448
   1892d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18930:	c1 e2 03             	shl    edx,0x3
   18933:	01 d0                	add    eax,edx
   18935:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18938:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:14
    bootGdt[entryNo].base_middle     = base >> 16 & 0xFF;
   1893c:	a1 48 04 12 00       	mov    eax,ds:0x120448
   18941:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18944:	c1 e2 03             	shl    edx,0x3
   18947:	01 d0                	add    eax,edx
   18949:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1894c:	c1 fa 10             	sar    edx,0x10
   1894f:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:15
    bootGdt[entryNo].base_high       = base >> 24 & 0xFF;
   18952:	a1 48 04 12 00       	mov    eax,ds:0x120448
   18957:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1895a:	c1 e2 03             	shl    edx,0x3
   1895d:	01 d0                	add    eax,edx
   1895f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18962:	c1 ea 18             	shr    edx,0x18
   18965:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:16
    bootGdt[entryNo].limit_low       = limit & 0xFFFF;
   18968:	a1 48 04 12 00       	mov    eax,ds:0x120448
   1896d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18970:	c1 e2 03             	shl    edx,0x3
   18973:	01 d0                	add    eax,edx
   18975:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   18978:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:17
    bootGdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
   1897b:	a1 48 04 12 00       	mov    eax,ds:0x120448
   18980:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18983:	c1 e2 03             	shl    edx,0x3
   18986:	01 c2                	add    edx,eax
   18988:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1898b:	c1 f8 10             	sar    eax,0x10
   1898e:	83 e0 0f             	and    eax,0xf
   18991:	0a 45 f0             	or     al,BYTE PTR [ebp-0x10]
   18994:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:18
    bootGdt[entryNo].access          = access | 0x10;
   18997:	a1 48 04 12 00       	mov    eax,ds:0x120448
   1899c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1899f:	c1 e2 03             	shl    edx,0x3
   189a2:	01 d0                	add    eax,edx
   189a4:	0f b6 55 f4          	movzx  edx,BYTE PTR [ebp-0xc]
   189a8:	83 ca 10             	or     edx,0x10
   189ab:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:19
    if (inUse)
   189ae:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   189b2:	74 17                	je     189cb <gdtEntry+0xbb>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:20
        bitsReset(kGDTSlotAvailableInd,entryNo);
   189b4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189b7:	a1 f0 03 12 00       	mov    eax,ds:0x1203f0
   189bc:	83 ec 08             	sub    esp,0x8
   189bf:	52                   	push   edx
   189c0:	50                   	push   eax
   189c1:	e8 af fe ff ff       	call   18875 <bitsReset>
   189c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:23
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
}
   189c9:	eb 15                	jmp    189e0 <gdtEntry+0xd0>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:22
    bootGdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
    bootGdt[entryNo].access          = access | 0x10;
    if (inUse)
        bitsReset(kGDTSlotAvailableInd,entryNo);
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
   189cb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189ce:	a1 f0 03 12 00       	mov    eax,ds:0x1203f0
   189d3:	83 ec 08             	sub    esp,0x8
   189d6:	52                   	push   edx
   189d7:	50                   	push   eax
   189d8:	e8 6b fe ff ff       	call   18848 <bitsSet>
   189dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:23
}
   189e0:	90                   	nop
   189e1:	c9                   	leave  
   189e2:	c3                   	ret    

000189e3 <gdtEntryRM>:
gdtEntryRM():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:27

//Create entries in the real mode GDT table
void HIGH_CODE_SECTION gdtEntryRM(int entryNo, int base, int limit, char access, char flags)
{
   189e3:	55                   	push   ebp
   189e4:	89 e5                	mov    ebp,esp
   189e6:	83 ec 08             	sub    esp,0x8
   189e9:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   189ec:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   189ef:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   189f2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:28
    rmGdt[entryNo].base_low        = base & 0xFFFF;
   189f5:	a1 44 04 12 00       	mov    eax,ds:0x120444
   189fa:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   189fd:	c1 e2 03             	shl    edx,0x3
   18a00:	01 d0                	add    eax,edx
   18a02:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18a05:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:29
    rmGdt[entryNo].base_middle     = base >> 16 & 0xFF;
   18a09:	a1 44 04 12 00       	mov    eax,ds:0x120444
   18a0e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18a11:	c1 e2 03             	shl    edx,0x3
   18a14:	01 d0                	add    eax,edx
   18a16:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18a19:	c1 fa 10             	sar    edx,0x10
   18a1c:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:30
    rmGdt[entryNo].base_high       = base >> 24 & 0xFF;
   18a1f:	a1 44 04 12 00       	mov    eax,ds:0x120444
   18a24:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18a27:	c1 e2 03             	shl    edx,0x3
   18a2a:	01 d0                	add    eax,edx
   18a2c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18a2f:	c1 ea 18             	shr    edx,0x18
   18a32:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:31
    rmGdt[entryNo].limit_low       = limit & 0xFFFF;
   18a35:	a1 44 04 12 00       	mov    eax,ds:0x120444
   18a3a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18a3d:	c1 e2 03             	shl    edx,0x3
   18a40:	01 d0                	add    eax,edx
   18a42:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   18a45:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:32
    rmGdt[entryNo].flags_and_limit = flags | (limit >> 16 & 0xF);
   18a48:	a1 44 04 12 00       	mov    eax,ds:0x120444
   18a4d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18a50:	c1 e2 03             	shl    edx,0x3
   18a53:	01 c2                	add    edx,eax
   18a55:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18a58:	c1 f8 10             	sar    eax,0x10
   18a5b:	83 e0 0f             	and    eax,0xf
   18a5e:	0a 45 f8             	or     al,BYTE PTR [ebp-0x8]
   18a61:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:33
    rmGdt[entryNo].access          = access | 0x10;
   18a64:	a1 44 04 12 00       	mov    eax,ds:0x120444
   18a69:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18a6c:	c1 e2 03             	shl    edx,0x3
   18a6f:	01 d0                	add    eax,edx
   18a71:	0f b6 55 fc          	movzx  edx,BYTE PTR [ebp-0x4]
   18a75:	83 ca 10             	or     edx,0x10
   18a78:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:34
}
   18a7b:	90                   	nop
   18a7c:	c9                   	leave  
   18a7d:	c3                   	ret    
   18a7e:	66 90                	xchg   ax,ax

00018a80 <identifyCPUFeatures>:
identifyCPUFeatures():
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:8

extern cpuid_features_t kCPUFeatures;


void identifyCPUFeatures(cpuid_features_t* cpuFeatures)
{
   18a80:	55                   	push   ebp
   18a81:	89 e5                	mov    ebp,esp
   18a83:	53                   	push   ebx
   18a84:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:11
    uint32_t eax, ebx, ecx, edx;

    __cpuid(1, eax, ebx, cpuFeatures->cpuid_feature_bits_2.cpuid_feature_bits_ecx_reg, cpuFeatures->cpuid_feature_bits.cpuid_features_edx_reg);
   18a87:	b8 01 00 00 00       	mov    eax,0x1
   18a8c:	0f a2                	cpuid  
   18a8e:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18a91:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   18a94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a97:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
   18a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18a9d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:12
    __cpuid(7, eax, cpuFeatures->cpuid_extended_feature_bits_3.cpuid_extended_feature_bits_ebx_reg , ecx, edx);
   18a9f:	b8 07 00 00 00       	mov    eax,0x7
   18aa4:	0f a2                	cpuid  
   18aa6:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18aa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18aac:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
   18aaf:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18ab2:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:13
}
   18ab5:	90                   	nop
   18ab6:	83 c4 10             	add    esp,0x10
   18ab9:	5b                   	pop    ebx
   18aba:	5d                   	pop    ebp
   18abb:	c3                   	ret    

00018abc <idt_set_gate>:
idt_set_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:10
//extern void idt_load();//Defined in CPU.h

/* Use this function to set an entry in the IDT. Alot simpler
*  than twiddling with the GDT ;) */
void idt_set_gate(struct idt_entry *idt, unsigned short sel, uint32_t base, unsigned char flags)
{
   18abc:	55                   	push   ebp
   18abd:	89 e5                	mov    ebp,esp
   18abf:	83 ec 08             	sub    esp,0x8
   18ac2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18ac5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18ac8:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   18acc:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:11
  idt->base_lo = base & 0xFFFF;
   18acf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18ad2:	89 c2                	mov    edx,eax
   18ad4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18ad7:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:12
  idt->sel = sel;
   18ada:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18add:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   18ae1:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:13
  idt->flags = flags;
   18ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18ae8:	0f b6 55 f8          	movzx  edx,BYTE PTR [ebp-0x8]
   18aec:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:14
  idt->base_hi = (base >> 16) & 0xFFFF;}
   18aef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18af2:	c1 e8 10             	shr    eax,0x10
   18af5:	89 c2                	mov    edx,eax
   18af7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18afa:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
   18afe:	90                   	nop
   18aff:	c9                   	leave  
   18b00:	c3                   	ret    

00018b01 <idt_install>:
idt_install():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:18

/* Installs the IDT */
void idt_install(struct idt_ptr* idtp)
{
   18b01:	55                   	push   ebp
   18b02:	89 e5                	mov    ebp,esp
   18b04:	57                   	push   edi
   18b05:	56                   	push   esi
   18b06:	53                   	push   ebx
   18b07:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/cpu/idt.c:20
    /* Sets the special IDT pointer up, just like in 'gdt.c' */
    idtp->limit = (sizeof (struct idt_entry) * 256) - 1;
   18b0a:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18b0d:	66 c7 01 ff 07       	mov    WORD PTR [ecx],0x7ff
/home/yogi/src/os/chrisOS/src/cpu/idt.c:21
    idtp->base = (int)IDT_TABLE_ADDRESS;
   18b12:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18b15:	c7 41 02 00 30 15 00 	mov    DWORD PTR [ecx+0x2],0x153000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:29
    //memset(&idt, 0, sizeof(struct idt_entry) * 256);

    /* Add any new ISRs to the IDT here using idt_set_gate */

    /* Points the processor's internal register to the new IDT */
    idt_load((uint64_t)((uint64_t)(idtp->limit)<<32 | idtp->base));
   18b1c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18b1f:	0f b7 31             	movzx  esi,WORD PTR [ecx]
   18b22:	0f b7 ce             	movzx  ecx,si
   18b25:	bb 00 00 00 00       	mov    ebx,0x0
   18b2a:	89 cb                	mov    ebx,ecx
   18b2c:	b9 00 00 00 00       	mov    ecx,0x0
   18b31:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
   18b34:	8b 76 02             	mov    esi,DWORD PTR [esi+0x2]
   18b37:	bf 00 00 00 00       	mov    edi,0x0
   18b3c:	89 c8                	mov    eax,ecx
   18b3e:	09 f0                	or     eax,esi
   18b40:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   18b43:	89 d8                	mov    eax,ebx
   18b45:	09 f8                	or     eax,edi
   18b47:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   18b4a:	83 ec 08             	sub    esp,0x8
   18b4d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   18b50:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18b53:	e8 06 86 fe ff       	call   115e <idt_load>
   18b58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:30
}
   18b5b:	90                   	nop
   18b5c:	8d 65 f4             	lea    esp,[ebp-0xc]
   18b5f:	5b                   	pop    ebx
   18b60:	5e                   	pop    esi
   18b61:	5f                   	pop    edi
   18b62:	5d                   	pop    ebp
   18b63:	c3                   	ret    

00018b64 <idt_init>:
idt_init():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:33

void idt_init(struct idt_ptr* idtp, int remap_offset)
{
   18b64:	55                   	push   ebp
   18b65:	89 e5                	mov    ebp,esp
   18b67:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/idt.c:36
    //CLR 05/02/2016 - Left off here, ITD stuff isn't working, have an endless loop in cpuFunc.s idt_load
/* setting up the exception handlers and timer, keyboard ISRs */
    struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   18b6a:	c7 45 f0 00 30 15 00 	mov    DWORD PTR [ebp-0x10],0x153000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:37
    idt_set_gate (&idtTable[0], 0x08, (int)&_isr_00_wrapper, ACS_INT); //Move this out of the way of the exception handlers
   18b71:	b8 20 00 01 00       	mov    eax,0x10020
   18b76:	68 8e 00 00 00       	push   0x8e
   18b7b:	50                   	push   eax
   18b7c:	6a 08                	push   0x8
   18b7e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18b81:	e8 36 ff ff ff       	call   18abc <idt_set_gate>
   18b86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:38
    idt_set_gate (&idtTable[0+remap_offset], 0x08, (int)&_irq0_handler, ACS_INT); //Move this out of the way of the exception handlers
   18b89:	b9 92 05 01 00       	mov    ecx,0x10592
   18b8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18b91:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18b98:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18b9b:	01 d0                	add    eax,edx
   18b9d:	68 8e 00 00 00       	push   0x8e
   18ba2:	51                   	push   ecx
   18ba3:	6a 08                	push   0x8
   18ba5:	50                   	push   eax
   18ba6:	e8 11 ff ff ff       	call   18abc <idt_set_gate>
   18bab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:39
    idt_set_gate (&idtTable[1+remap_offset], 0x08, (int)&_isr_01_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18bae:	b9 d9 05 01 00       	mov    ecx,0x105d9
   18bb3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18bb6:	83 c0 01             	add    eax,0x1
   18bb9:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18bc0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18bc3:	01 d0                	add    eax,edx
   18bc5:	68 8e 00 00 00       	push   0x8e
   18bca:	51                   	push   ecx
   18bcb:	6a 08                	push   0x8
   18bcd:	50                   	push   eax
   18bce:	e8 e9 fe ff ff       	call   18abc <idt_set_gate>
   18bd3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:40
    idt_set_gate (&idtTable[1], 0x08, (int)&_isr_31_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18bd6:	ba af 04 01 00       	mov    edx,0x104af
   18bdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18bde:	83 c0 08             	add    eax,0x8
   18be1:	68 8e 00 00 00       	push   0x8e
   18be6:	52                   	push   edx
   18be7:	6a 08                	push   0x8
   18be9:	50                   	push   eax
   18bea:	e8 cd fe ff ff       	call   18abc <idt_set_gate>
   18bef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:41
    idt_set_gate (&idtTable[2], 0x08, (int)&_isr_02_wrapper, ACS_INT);
   18bf2:	ba 3c 00 01 00       	mov    edx,0x1003c
   18bf7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18bfa:	83 c0 10             	add    eax,0x10
   18bfd:	68 8e 00 00 00       	push   0x8e
   18c02:	52                   	push   edx
   18c03:	6a 08                	push   0x8
   18c05:	50                   	push   eax
   18c06:	e8 b1 fe ff ff       	call   18abc <idt_set_gate>
   18c0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:42
    idt_set_gate (&idtTable[3], 0x08, (int)&_isr_03_wrapper, ACS_INT);
   18c0e:	ba 58 00 01 00       	mov    edx,0x10058
   18c13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c16:	83 c0 18             	add    eax,0x18
   18c19:	68 8e 00 00 00       	push   0x8e
   18c1e:	52                   	push   edx
   18c1f:	6a 08                	push   0x8
   18c21:	50                   	push   eax
   18c22:	e8 95 fe ff ff       	call   18abc <idt_set_gate>
   18c27:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:43
    idt_set_gate (&idtTable[4], 0x08, (int)&_isr_04_wrapper, ACS_INT);
   18c2a:	ba 68 00 01 00       	mov    edx,0x10068
   18c2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c32:	83 c0 20             	add    eax,0x20
   18c35:	68 8e 00 00 00       	push   0x8e
   18c3a:	52                   	push   edx
   18c3b:	6a 08                	push   0x8
   18c3d:	50                   	push   eax
   18c3e:	e8 79 fe ff ff       	call   18abc <idt_set_gate>
   18c43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:44
    idt_set_gate (&idtTable[5], 0x08, (int)&_isr_05_wrapper, ACS_INT);
   18c46:	ba 84 00 01 00       	mov    edx,0x10084
   18c4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c4e:	83 c0 28             	add    eax,0x28
   18c51:	68 8e 00 00 00       	push   0x8e
   18c56:	52                   	push   edx
   18c57:	6a 08                	push   0x8
   18c59:	50                   	push   eax
   18c5a:	e8 5d fe ff ff       	call   18abc <idt_set_gate>
   18c5f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:45
    idt_set_gate (&idtTable[0x6], 0x08, (int)&_isr_06_wrapper, ACS_INT);    //Invalid Opcode
   18c62:	ba a0 00 01 00       	mov    edx,0x100a0
   18c67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c6a:	83 c0 30             	add    eax,0x30
   18c6d:	68 8e 00 00 00       	push   0x8e
   18c72:	52                   	push   edx
   18c73:	6a 08                	push   0x8
   18c75:	50                   	push   eax
   18c76:	e8 41 fe ff ff       	call   18abc <idt_set_gate>
   18c7b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:46
    idt_set_gate (&idtTable[0x7], 0x08, (int)&_isr_07_wrapper, ACS_INT);
   18c7e:	ba bc 00 01 00       	mov    edx,0x100bc
   18c83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18c86:	83 c0 38             	add    eax,0x38
   18c89:	68 8e 00 00 00       	push   0x8e
   18c8e:	52                   	push   edx
   18c8f:	6a 08                	push   0x8
   18c91:	50                   	push   eax
   18c92:	e8 25 fe ff ff       	call   18abc <idt_set_gate>
   18c97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:47
    idt_set_gate (&idtTable[0x8], 0x08, (int)&_isr_08_wrapper, ACS_INT);   //Double Fault
   18c9a:	ba d8 00 01 00       	mov    edx,0x100d8
   18c9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ca2:	83 c0 40             	add    eax,0x40
   18ca5:	68 8e 00 00 00       	push   0x8e
   18caa:	52                   	push   edx
   18cab:	6a 08                	push   0x8
   18cad:	50                   	push   eax
   18cae:	e8 09 fe ff ff       	call   18abc <idt_set_gate>
   18cb3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:48
    idt_set_gate (&idtTable[0x9], 0x08, (int)&_isr_09_wrapper, ACS_INT);
   18cb6:	ba 05 01 01 00       	mov    edx,0x10105
   18cbb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18cbe:	83 c0 48             	add    eax,0x48
   18cc1:	68 8e 00 00 00       	push   0x8e
   18cc6:	52                   	push   edx
   18cc7:	6a 08                	push   0x8
   18cc9:	50                   	push   eax
   18cca:	e8 ed fd ff ff       	call   18abc <idt_set_gate>
   18ccf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:49
    idt_set_gate (&idtTable[0xa], 0x08, (int)&_isr_10_wrapper, ACS_INT);
   18cd2:	ba 1e 01 01 00       	mov    edx,0x1011e
   18cd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18cda:	83 c0 50             	add    eax,0x50
   18cdd:	68 8e 00 00 00       	push   0x8e
   18ce2:	52                   	push   edx
   18ce3:	6a 08                	push   0x8
   18ce5:	50                   	push   eax
   18ce6:	e8 d1 fd ff ff       	call   18abc <idt_set_gate>
   18ceb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:50
    idt_set_gate (&idtTable[0xb], 0x08, (int)&_isr_11_wrapper, ACS_INT);
   18cee:	ba 37 01 01 00       	mov    edx,0x10137
   18cf3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18cf6:	83 c0 58             	add    eax,0x58
   18cf9:	68 8e 00 00 00       	push   0x8e
   18cfe:	52                   	push   edx
   18cff:	6a 08                	push   0x8
   18d01:	50                   	push   eax
   18d02:	e8 b5 fd ff ff       	call   18abc <idt_set_gate>
   18d07:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:51
    idt_set_gate (&idtTable[0xc], 0x08, (int)&_isr_12_wrapper, ACS_INT);
   18d0a:	ba 50 01 01 00       	mov    edx,0x10150
   18d0f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d12:	83 c0 60             	add    eax,0x60
   18d15:	68 8e 00 00 00       	push   0x8e
   18d1a:	52                   	push   edx
   18d1b:	6a 08                	push   0x8
   18d1d:	50                   	push   eax
   18d1e:	e8 99 fd ff ff       	call   18abc <idt_set_gate>
   18d23:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:52
    idt_set_gate (&idtTable[0xd/*+remap_offset*/], 0x08, (int)&_isr_13_wrapper, ACS_INT);
   18d26:	ba 69 01 01 00       	mov    edx,0x10169
   18d2b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d2e:	83 c0 68             	add    eax,0x68
   18d31:	68 8e 00 00 00       	push   0x8e
   18d36:	52                   	push   edx
   18d37:	6a 08                	push   0x8
   18d39:	50                   	push   eax
   18d3a:	e8 7d fd ff ff       	call   18abc <idt_set_gate>
   18d3f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:53
    idt_set_gate (&idtTable[0xe/*+remap_offset*/], 0x08, (int)&_isr_14_wrapper, ACS_INT);   //paging exception
   18d42:	ba 83 01 01 00       	mov    edx,0x10183
   18d47:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d4a:	83 c0 70             	add    eax,0x70
   18d4d:	68 8e 00 00 00       	push   0x8e
   18d52:	52                   	push   edx
   18d53:	6a 08                	push   0x8
   18d55:	50                   	push   eax
   18d56:	e8 61 fd ff ff       	call   18abc <idt_set_gate>
   18d5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:54
    idt_set_gate (&idtTable[0xf], 0x08, (int)&_isr_15_wrapper, ACS_INT);
   18d5e:	ba ef 02 01 00       	mov    edx,0x102ef
   18d63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d66:	83 c0 78             	add    eax,0x78
   18d69:	68 8e 00 00 00       	push   0x8e
   18d6e:	52                   	push   edx
   18d6f:	6a 08                	push   0x8
   18d71:	50                   	push   eax
   18d72:	e8 45 fd ff ff       	call   18abc <idt_set_gate>
   18d77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:55
    idt_set_gate (&idtTable[0x10], 0x08, (int)&_isr_16_wrapper, ACS_INT);
   18d7a:	ba 0b 03 01 00       	mov    edx,0x1030b
   18d7f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d82:	83 e8 80             	sub    eax,0xffffff80
   18d85:	68 8e 00 00 00       	push   0x8e
   18d8a:	52                   	push   edx
   18d8b:	6a 08                	push   0x8
   18d8d:	50                   	push   eax
   18d8e:	e8 29 fd ff ff       	call   18abc <idt_set_gate>
   18d93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:56
    idt_set_gate (&idtTable[0x11], 0x08, (int)&_isr_17_wrapper, ACS_INT);
   18d96:	ba 27 03 01 00       	mov    edx,0x10327
   18d9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18d9e:	05 88 00 00 00       	add    eax,0x88
   18da3:	68 8e 00 00 00       	push   0x8e
   18da8:	52                   	push   edx
   18da9:	6a 08                	push   0x8
   18dab:	50                   	push   eax
   18dac:	e8 0b fd ff ff       	call   18abc <idt_set_gate>
   18db1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:57
    idt_set_gate (&idtTable[0x12], 0x08, (int)&_isr_18_wrapper, ACS_INT);
   18db4:	ba 43 03 01 00       	mov    edx,0x10343
   18db9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18dbc:	05 90 00 00 00       	add    eax,0x90
   18dc1:	68 8e 00 00 00       	push   0x8e
   18dc6:	52                   	push   edx
   18dc7:	6a 08                	push   0x8
   18dc9:	50                   	push   eax
   18dca:	e8 ed fc ff ff       	call   18abc <idt_set_gate>
   18dcf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:58
    idt_set_gate (&idtTable[0x13], 0x08, (int)&_isr_19_wrapper, ACS_INT);
   18dd2:	ba 5f 03 01 00       	mov    edx,0x1035f
   18dd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18dda:	05 98 00 00 00       	add    eax,0x98
   18ddf:	68 8e 00 00 00       	push   0x8e
   18de4:	52                   	push   edx
   18de5:	6a 08                	push   0x8
   18de7:	50                   	push   eax
   18de8:	e8 cf fc ff ff       	call   18abc <idt_set_gate>
   18ded:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:59
    idt_set_gate (&idtTable[0x14+remap_offset], 0x08, (int)&_isr_20_wrapper, ACS_INT);   
   18df0:	b9 7b 03 01 00       	mov    ecx,0x1037b
   18df5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18df8:	83 c0 14             	add    eax,0x14
   18dfb:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18e02:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e05:	01 d0                	add    eax,edx
   18e07:	68 8e 00 00 00       	push   0x8e
   18e0c:	51                   	push   ecx
   18e0d:	6a 08                	push   0x8
   18e0f:	50                   	push   eax
   18e10:	e8 a7 fc ff ff       	call   18abc <idt_set_gate>
   18e15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:60
    idt_set_gate (&idtTable[0x15+remap_offset], 0x08, (int)&_isr_21_wrapper, ACS_INT);  //leave this alone because this is the initially remapped keyboard irq
   18e18:	b9 97 03 01 00       	mov    ecx,0x10397
   18e1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18e20:	83 c0 15             	add    eax,0x15
   18e23:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18e2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e2d:	01 d0                	add    eax,edx
   18e2f:	68 8e 00 00 00       	push   0x8e
   18e34:	51                   	push   ecx
   18e35:	6a 08                	push   0x8
   18e37:	50                   	push   eax
   18e38:	e8 7f fc ff ff       	call   18abc <idt_set_gate>
   18e3d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:61
    idt_set_gate (&idtTable[0x16], 0x08, (int)&_isr_22_wrapper, ACS_INT);
   18e40:	ba b3 03 01 00       	mov    edx,0x103b3
   18e45:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e48:	05 b0 00 00 00       	add    eax,0xb0
   18e4d:	68 8e 00 00 00       	push   0x8e
   18e52:	52                   	push   edx
   18e53:	6a 08                	push   0x8
   18e55:	50                   	push   eax
   18e56:	e8 61 fc ff ff       	call   18abc <idt_set_gate>
   18e5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:62
    idt_set_gate (&idtTable[0x17], 0x08, (int)&_isr_23_wrapper, ACS_INT);
   18e5e:	ba cf 03 01 00       	mov    edx,0x103cf
   18e63:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e66:	05 b8 00 00 00       	add    eax,0xb8
   18e6b:	68 8e 00 00 00       	push   0x8e
   18e70:	52                   	push   edx
   18e71:	6a 08                	push   0x8
   18e73:	50                   	push   eax
   18e74:	e8 43 fc ff ff       	call   18abc <idt_set_gate>
   18e79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:63
    idt_set_gate (&idtTable[0x18], 0x08, (int)&_isr_24_wrapper, ACS_INT);
   18e7c:	ba eb 03 01 00       	mov    edx,0x103eb
   18e81:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e84:	05 c0 00 00 00       	add    eax,0xc0
   18e89:	68 8e 00 00 00       	push   0x8e
   18e8e:	52                   	push   edx
   18e8f:	6a 08                	push   0x8
   18e91:	50                   	push   eax
   18e92:	e8 25 fc ff ff       	call   18abc <idt_set_gate>
   18e97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:64
    idt_set_gate (&idtTable[0x19], 0x08, (int)&_isr_25_wrapper, ACS_INT);
   18e9a:	ba 07 04 01 00       	mov    edx,0x10407
   18e9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ea2:	05 c8 00 00 00       	add    eax,0xc8
   18ea7:	68 8e 00 00 00       	push   0x8e
   18eac:	52                   	push   edx
   18ead:	6a 08                	push   0x8
   18eaf:	50                   	push   eax
   18eb0:	e8 07 fc ff ff       	call   18abc <idt_set_gate>
   18eb5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:65
    idt_set_gate (&idtTable[0x1a], 0x08, (int)&_isr_26_wrapper, ACS_INT);
   18eb8:	ba 23 04 01 00       	mov    edx,0x10423
   18ebd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ec0:	05 d0 00 00 00       	add    eax,0xd0
   18ec5:	68 8e 00 00 00       	push   0x8e
   18eca:	52                   	push   edx
   18ecb:	6a 08                	push   0x8
   18ecd:	50                   	push   eax
   18ece:	e8 e9 fb ff ff       	call   18abc <idt_set_gate>
   18ed3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:66
    idt_set_gate (&idtTable[0x1b], 0x08, (int)&_isr_27_wrapper, ACS_INT);
   18ed6:	ba 3f 04 01 00       	mov    edx,0x1043f
   18edb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ede:	05 d8 00 00 00       	add    eax,0xd8
   18ee3:	68 8e 00 00 00       	push   0x8e
   18ee8:	52                   	push   edx
   18ee9:	6a 08                	push   0x8
   18eeb:	50                   	push   eax
   18eec:	e8 cb fb ff ff       	call   18abc <idt_set_gate>
   18ef1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:67
    idt_set_gate (&idtTable[0x1c], 0x08, (int)&_isr_28_wrapper, ACS_INT);
   18ef4:	ba 5b 04 01 00       	mov    edx,0x1045b
   18ef9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18efc:	05 e0 00 00 00       	add    eax,0xe0
   18f01:	68 8e 00 00 00       	push   0x8e
   18f06:	52                   	push   edx
   18f07:	6a 08                	push   0x8
   18f09:	50                   	push   eax
   18f0a:	e8 ad fb ff ff       	call   18abc <idt_set_gate>
   18f0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:68
    idt_set_gate (&idtTable[0x1d], 0x08, (int)&_isr_29_wrapper, ACS_INT);
   18f12:	ba 77 04 01 00       	mov    edx,0x10477
   18f17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f1a:	05 e8 00 00 00       	add    eax,0xe8
   18f1f:	68 8e 00 00 00       	push   0x8e
   18f24:	52                   	push   edx
   18f25:	6a 08                	push   0x8
   18f27:	50                   	push   eax
   18f28:	e8 8f fb ff ff       	call   18abc <idt_set_gate>
   18f2d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:69
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
   18f30:	ba 93 04 01 00       	mov    edx,0x10493
   18f35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f38:	05 f0 00 00 00       	add    eax,0xf0
   18f3d:	68 8e 00 00 00       	push   0x8e
   18f42:	52                   	push   edx
   18f43:	6a 08                	push   0x8
   18f45:	50                   	push   eax
   18f46:	e8 71 fb ff ff       	call   18abc <idt_set_gate>
   18f4b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:70
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
   18f4e:	ba af 04 01 00       	mov    edx,0x104af
   18f53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f56:	05 f8 00 00 00       	add    eax,0xf8
   18f5b:	68 8e 00 00 00       	push   0x8e
   18f60:	52                   	push   edx
   18f61:	6a 08                	push   0x8
   18f63:	50                   	push   eax
   18f64:	e8 53 fb ff ff       	call   18abc <idt_set_gate>
   18f69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:71
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   18f6c:	b9 76 05 01 00       	mov    ecx,0x10576
   18f71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18f74:	83 c0 20             	add    eax,0x20
   18f77:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18f7e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f81:	01 d0                	add    eax,edx
   18f83:	68 8e 00 00 00       	push   0x8e
   18f88:	51                   	push   ecx
   18f89:	6a 08                	push   0x8
   18f8b:	50                   	push   eax
   18f8c:	e8 2b fb ff ff       	call   18abc <idt_set_gate>
   18f91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:72
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   18f94:	b9 76 05 01 00       	mov    ecx,0x10576
   18f99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18f9c:	83 c0 21             	add    eax,0x21
   18f9f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18fa6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18fa9:	01 d0                	add    eax,edx
   18fab:	68 8e 00 00 00       	push   0x8e
   18fb0:	51                   	push   ecx
   18fb1:	6a 08                	push   0x8
   18fb3:	50                   	push   eax
   18fb4:	e8 03 fb ff ff       	call   18abc <idt_set_gate>
   18fb9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74
    
    for (int cnt=0x22;cnt<0xff;cnt++)
   18fbc:	c7 45 f4 22 00 00 00 	mov    DWORD PTR [ebp-0xc],0x22
   18fc3:	eb 29                	jmp    18fee <idt_init+0x48a>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:75 (discriminator 3)
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
   18fc5:	b9 76 05 01 00       	mov    ecx,0x10576
   18fca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18fcd:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18fd4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18fd7:	01 d0                	add    eax,edx
   18fd9:	68 8e 00 00 00       	push   0x8e
   18fde:	51                   	push   ecx
   18fdf:	6a 08                	push   0x8
   18fe1:	50                   	push   eax
   18fe2:	e8 d5 fa ff ff       	call   18abc <idt_set_gate>
   18fe7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 3)
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
    
    for (int cnt=0x22;cnt<0xff;cnt++)
   18fea:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 1)
   18fee:	81 7d f4 fe 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xfe
   18ff5:	7e ce                	jle    18fc5 <idt_init+0x461>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:76
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
    idt_install(idtp);
   18ff7:	83 ec 0c             	sub    esp,0xc
   18ffa:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   18ffd:	e8 ff fa ff ff       	call   18b01 <idt_install>
   19002:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:78

}
   19005:	90                   	nop
   19006:	c9                   	leave  
   19007:	c3                   	ret    

00019008 <idt_get_gate>:
idt_get_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:82

//void idt_get_gate(struct idt_entry* idtTable, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned *char flags)
void idt_get_gate(struct idt_entry *idt, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned char *flags)
{
   19008:	55                   	push   ebp
   19009:	89 e5                	mov    ebp,esp
   1900b:	83 ec 04             	sub    esp,0x4
   1900e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19011:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:83
    *sel = idt[idtIndex].sel;
   19014:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   19018:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   1901f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19022:	01 d0                	add    eax,edx
   19024:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
   19028:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1902b:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:84
    *base = (idt[idtIndex].base_hi << 16) | idt[idtIndex].base_lo;
   1902e:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   19032:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19039:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1903c:	01 d0                	add    eax,edx
   1903e:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   19042:	0f b7 c0             	movzx  eax,ax
   19045:	c1 e0 10             	shl    eax,0x10
   19048:	89 c2                	mov    edx,eax
   1904a:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   1904e:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   19055:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19058:	01 c8                	add    eax,ecx
   1905a:	0f b7 00             	movzx  eax,WORD PTR [eax]
   1905d:	0f b7 c0             	movzx  eax,ax
   19060:	09 d0                	or     eax,edx
   19062:	89 c2                	mov    edx,eax
   19064:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   19067:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:85
    *flags = idt[idtIndex].flags;
   19069:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   1906d:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19077:	01 d0                	add    eax,edx
   19079:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
   1907d:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   19080:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:86
}
   19082:	90                   	nop
   19083:	c9                   	leave  
   19084:	c3                   	ret    

00019085 <idt_get_gate_address>:
idt_get_gate_address():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:89

uintptr_t idt_get_gate_address(int vector)
{
   19085:	55                   	push   ebp
   19086:	89 e5                	mov    ebp,esp
   19088:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:90
   struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   1908b:	c7 45 fc 00 30 15 00 	mov    DWORD PTR [ebp-0x4],0x153000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:94
    unsigned short sel;
    uint32_t base;
    unsigned char flags;
    idt_get_gate(idtTable,vector,&sel,&base,&flags);
   19092:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19095:	0f b6 c0             	movzx  eax,al
   19098:	8d 55 f3             	lea    edx,[ebp-0xd]
   1909b:	52                   	push   edx
   1909c:	8d 55 f4             	lea    edx,[ebp-0xc]
   1909f:	52                   	push   edx
   190a0:	8d 55 fa             	lea    edx,[ebp-0x6]
   190a3:	52                   	push   edx
   190a4:	50                   	push   eax
   190a5:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   190a8:	e8 5b ff ff ff       	call   19008 <idt_get_gate>
   190ad:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/idt.c:95
    return base;
   190b0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/cpu/idt.c:96
   190b3:	c9                   	leave  
   190b4:	c3                   	ret    
   190b5:	66 90                	xchg   ax,ax
   190b7:	90                   	nop

000190b8 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   190b8:	55                   	push   ebp
   190b9:	89 e5                	mov    ebp,esp
   190bb:	83 ec 08             	sub    esp,0x8
   190be:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   190c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   190c4:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   190c8:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   190cb:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   190cf:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   190d3:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   190d4:	90                   	nop
   190d5:	c9                   	leave  
   190d6:	c3                   	ret    

000190d7 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   190d7:	55                   	push   ebp
   190d8:	89 e5                	mov    ebp,esp
   190da:	83 ec 14             	sub    esp,0x14
   190dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   190e0:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   190e4:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   190e8:	89 c2                	mov    edx,eax
   190ea:	ec                   	in     al,dx
   190eb:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   190ee:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   190f2:	c9                   	leave  
   190f3:	c3                   	ret    

000190f4 <irq0_handler>:
irq0_handler():
unsigned volatile char kKeyStatus[11];
extern struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf);
extern void kpagingUpdatePresentFlagA(uint32_t address, bool present);

void irq0_handler()
{
   190f4:	55                   	push   ebp
   190f5:	89 e5                	mov    ebp,esp
   190f7:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:46
#ifndef DEBUG_NONE
static char currTime[50];
static struct tm theDateTime;
#endif
        *kTicksSinceStart=*kTicksSinceStart+1;
   190fa:	a1 60 02 12 00       	mov    eax,ds:0x120260
   190ff:	8b 15 60 02 12 00    	mov    edx,DWORD PTR ds:0x120260
   19105:	8b 12                	mov    edx,DWORD PTR [edx]
   19107:	83 c2 01             	add    edx,0x1
   1910a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:47
        if (*kTicksSinceStart % kTicksPerSecond == 0)
   1910c:	a1 60 02 12 00       	mov    eax,ds:0x120260
   19111:	8b 00                	mov    eax,DWORD PTR [eax]
   19113:	8b 15 80 02 12 00    	mov    edx,DWORD PTR ds:0x120280
   19119:	89 d1                	mov    ecx,edx
   1911b:	ba 00 00 00 00       	mov    edx,0x0
   19120:	f7 f1                	div    ecx
   19122:	89 d0                	mov    eax,edx
   19124:	85 c0                	test   eax,eax
   19126:	75 0d                	jne    19135 <irq0_handler+0x41>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:48
            kSystemCurrentTime++;
   19128:	a1 8c 02 12 00       	mov    eax,ds:0x12028c
   1912d:	83 c0 01             	add    eax,0x1
   19130:	a3 8c 02 12 00       	mov    ds:0x12028c,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:50
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_EXPANDED_TICK) == DEBUG_EXPANDED_TICK)
   19135:	a1 38 03 12 00       	mov    eax,ds:0x120338
   1913a:	83 e0 04             	and    eax,0x4
   1913d:	85 c0                	test   eax,eax
   1913f:	0f 84 83 00 00 00    	je     191c8 <irq0_handler+0xd4>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:52
        {
            cursorSavePosition();
   19145:	e8 45 ea ff ff       	call   17b8f <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:53
            gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   1914a:	83 ec 08             	sub    esp,0x8
   1914d:	68 e0 a4 09 00       	push   0x9a4e0
   19152:	68 8c 02 12 00       	push   0x12028c
   19157:	e8 f9 e6 00 00       	call   27855 <gmtime_r>
   1915c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:54
            strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   1915f:	68 e0 a4 09 00       	push   0x9a4e0
   19164:	68 80 2d 08 00       	push   0x82d80
   19169:	6a 32                	push   0x32
   1916b:	68 20 a5 09 00       	push   0x9a520
   19170:	e8 3b 75 ff ff       	call   106b0 <strftime>
   19175:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:55
            cursorMoveTo(0,24);
   19178:	83 ec 08             	sub    esp,0x8
   1917b:	6a 18                	push   0x18
   1917d:	6a 00                	push   0x0
   1917f:	e8 bf ed ff ff       	call   17f43 <cursorMoveTo>
   19184:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:56
            printk("The time is currently %s", &currTime);
   19187:	83 ec 08             	sub    esp,0x8
   1918a:	68 20 a5 09 00       	push   0x9a520
   1918f:	68 92 2d 08 00       	push   0x82d92
   19194:	e8 5a e0 00 00       	call   271f3 <printk>
   19199:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:57
            cursorMoveTo(65,24);
   1919c:	83 ec 08             	sub    esp,0x8
   1919f:	6a 18                	push   0x18
   191a1:	6a 41                	push   0x41
   191a3:	e8 9b ed ff ff       	call   17f43 <cursorMoveTo>
   191a8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:58
            printk("ticks=%d", *kTicksSinceStart);
   191ab:	a1 60 02 12 00       	mov    eax,ds:0x120260
   191b0:	8b 00                	mov    eax,DWORD PTR [eax]
   191b2:	83 ec 08             	sub    esp,0x8
   191b5:	50                   	push   eax
   191b6:	68 ab 2d 08 00       	push   0x82dab
   191bb:	e8 33 e0 00 00       	call   271f3 <printk>
   191c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:59
            cursorRestorePosition();
   191c3:	e8 13 ea ff ff       	call   17bdb <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:63
        }
#endif
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_TICK) == DEBUG_TICK)
   191c8:	a1 38 03 12 00       	mov    eax,ds:0x120338
   191cd:	83 e0 02             	and    eax,0x2
   191d0:	85 c0                	test   eax,eax
   191d2:	74 68                	je     1923c <irq0_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:65
        {
            cursorSavePosition();
   191d4:	e8 b6 e9 ff ff       	call   17b8f <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:66
            cursorMoveTo(55,SYS_VGA_HEIGHT-1);
   191d9:	83 ec 08             	sub    esp,0x8
   191dc:	6a 31                	push   0x31
   191de:	6a 37                	push   0x37
   191e0:	e8 5e ed ff ff       	call   17f43 <cursorMoveTo>
   191e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:69
            //printf("0x%04X:0x%08X 0x%08X",exceptionCS, exceptionEIP, exceptionFlags);
            //kTermMoveTo(65,0);
            printk("%u",*kTicksSinceStart);
   191e8:	a1 60 02 12 00       	mov    eax,ds:0x120260
   191ed:	8b 00                	mov    eax,DWORD PTR [eax]
   191ef:	83 ec 08             	sub    esp,0x8
   191f2:	50                   	push   eax
   191f3:	68 b4 2d 08 00       	push   0x82db4
   191f8:	e8 f6 df 00 00       	call   271f3 <printk>
   191fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70
            printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   19200:	8b 15 f8 01 12 00    	mov    edx,DWORD PTR ds:0x1201f8
   19206:	a1 fc 01 12 00       	mov    eax,ds:0x1201fc
   1920b:	8b 0d f0 01 12 00    	mov    ecx,DWORD PTR ds:0x1201f0
   19211:	81 e1 00 02 00 00    	and    ecx,0x200
   19217:	85 c9                	test   ecx,ecx
   19219:	74 07                	je     19222 <irq0_handler+0x12e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70 (discriminator 1)
   1921b:	b9 49 00 00 00       	mov    ecx,0x49
   19220:	eb 05                	jmp    19227 <irq0_handler+0x133>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70 (discriminator 2)
   19222:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70 (discriminator 4)
   19227:	52                   	push   edx
   19228:	50                   	push   eax
   19229:	51                   	push   ecx
   1922a:	68 b7 2d 08 00       	push   0x82db7
   1922f:	e8 bf df 00 00       	call   271f3 <printk>
   19234:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:75 (discriminator 4)
            //gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
            //strftime((char*)&currTime, 50, "%H:%M:%S", &theDateTime);
            //kTermMoveTo(65,0);
            //printf("%s",currTime);
            cursorRestorePosition();
   19237:	e8 9f e9 ff ff       	call   17bdb <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:78
        }
#endif
}
   1923c:	90                   	nop
   1923d:	c9                   	leave  
   1923e:	c3                   	ret    

0001923f <kbd_handler>:
kbd_handler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:81

void kbd_handler()
{
   1923f:	55                   	push   ebp
   19240:	89 e5                	mov    ebp,esp
   19242:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:82
    unsigned char lKeyControlVal=0;
   19245:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:83
    unsigned char rawKey=0;
   19249:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:84
    unsigned char translatedKeypress=0;
   1924d:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:88
    static char currTime[50];
    static struct tm theDateTime;
   
    rawKey = inb(KEYB_DATA_PORT);
   19251:	6a 60                	push   0x60
   19253:	e8 7f fe ff ff       	call   190d7 <inb>
   19258:	83 c4 04             	add    esp,0x4
   1925b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:89
    kKeyChar = rawKey;//& 0x80;
   1925e:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   19262:	a2 c0 a4 09 00       	mov    ds:0x9a4c0,al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:91

    __asm__("cli\n");
   19267:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:93
    
    switch(rawKey)  
   19268:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   1926c:	3d 9d 00 00 00       	cmp    eax,0x9d
   19271:	74 53                	je     192c6 <kbd_handler+0x87>
   19273:	3d 9d 00 00 00       	cmp    eax,0x9d
   19278:	7f 11                	jg     1928b <kbd_handler+0x4c>
   1927a:	83 f8 2a             	cmp    eax,0x2a
   1927d:	74 23                	je     192a2 <kbd_handler+0x63>
   1927f:	83 f8 38             	cmp    eax,0x38
   19282:	74 4e                	je     192d2 <kbd_handler+0x93>
   19284:	83 f8 1d             	cmp    eax,0x1d
   19287:	74 31                	je     192ba <kbd_handler+0x7b>
   19289:	eb 75                	jmp    19300 <kbd_handler+0xc1>
   1928b:	3d b8 00 00 00       	cmp    eax,0xb8
   19290:	74 4c                	je     192de <kbd_handler+0x9f>
   19292:	3d ba 00 00 00       	cmp    eax,0xba
   19297:	74 51                	je     192ea <kbd_handler+0xab>
   19299:	3d aa 00 00 00       	cmp    eax,0xaa
   1929e:	74 0e                	je     192ae <kbd_handler+0x6f>
   192a0:	eb 5e                	jmp    19300 <kbd_handler+0xc1>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:95
    {
        case KEY_SHIFT_DN: kKeyStatus[INDEX_SHIFT]=1;break;
   192a2:	c6 05 64 65 09 00 01 	mov    BYTE PTR ds:0x96564,0x1
   192a9:	e9 10 03 00 00       	jmp    195be <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:96
        case KEY_SHIFT_UP: kKeyStatus[INDEX_SHIFT]=0;break;
   192ae:	c6 05 64 65 09 00 00 	mov    BYTE PTR ds:0x96564,0x0
   192b5:	e9 04 03 00 00       	jmp    195be <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:97
        case KEY_CTRL_DN: kKeyStatus[INDEX_CTRL]=1;break;
   192ba:	c6 05 65 65 09 00 01 	mov    BYTE PTR ds:0x96565,0x1
   192c1:	e9 f8 02 00 00       	jmp    195be <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:98
        case KEY_CTRL_UP: kKeyStatus[INDEX_CTRL]=0;break;
   192c6:	c6 05 65 65 09 00 00 	mov    BYTE PTR ds:0x96565,0x0
   192cd:	e9 ec 02 00 00       	jmp    195be <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:99
        case KEY_ALT_DN: kKeyStatus[INDEX_ALT]=1;break;
   192d2:	c6 05 66 65 09 00 01 	mov    BYTE PTR ds:0x96566,0x1
   192d9:	e9 e0 02 00 00       	jmp    195be <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:100
        case KEY_ALT_UP: kKeyStatus[INDEX_ALT]=0;break;
   192de:	c6 05 66 65 09 00 00 	mov    BYTE PTR ds:0x96566,0x0
   192e5:	e9 d4 02 00 00       	jmp    195be <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:101
        case KEY_CAPSLOCK_UP: kKeyStatus[INDEX_CAPSLOCK]=!kKeyStatus[INDEX_CAPSLOCK];break;
   192ea:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   192f1:	84 c0                	test   al,al
   192f3:	0f 94 c0             	sete   al
   192f6:	a2 67 65 09 00       	mov    ds:0x96567,al
   192fb:	e9 be 02 00 00       	jmp    195be <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:109
//        case MAKE_UP: kKeyStatus[INDEX_UP]=0;break;
//        case MAKE_DOWN: kKeyStatus[INDEX_DOWN]=0;break;
       default:
//printk("%02X",rawKey);
           //changed from if rawkey & 0x80, so that keydown triggers the key being input
           if (rawKey==BREAK_RIGHT || rawKey==BREAK_LEFT || rawKey==BREAK_UP || rawKey==BREAK_DOWN)
   19300:	80 7d f5 cd          	cmp    BYTE PTR [ebp-0xb],0xcd
   19304:	74 12                	je     19318 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:109 (discriminator 1)
   19306:	80 7d f5 cb          	cmp    BYTE PTR [ebp-0xb],0xcb
   1930a:	74 0c                	je     19318 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:109 (discriminator 2)
   1930c:	80 7d f5 c8          	cmp    BYTE PTR [ebp-0xb],0xc8
   19310:	74 06                	je     19318 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:109 (discriminator 3)
   19312:	80 7d f5 d0          	cmp    BYTE PTR [ebp-0xb],0xd0
   19316:	75 2f                	jne    19347 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110
               if (kKeyboardBuffer<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   19318:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   1931d:	3d 2f 25 15 00       	cmp    eax,0x15252f
   19322:	77 23                	ja     19347 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 1)
   19324:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1932b:	84 c0                	test   al,al
   1932d:	75 18                	jne    19347 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:113
               //CLR 01/10/2017: Increment the buffer pointer first
               {    
                   kKeyboardBuffer++;
   1932f:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   19334:	83 c0 01             	add    eax,0x1
   19337:	a3 e0 03 12 00       	mov    ds:0x1203e0,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:114
                   *kKeyboardBuffer=rawKey;
   1933c:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   19341:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
   19345:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:116
               }
           if (!(rawKey & 0x80))
   19347:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   1934b:	84 c0                	test   al,al
   1934d:	0f 88 6a 02 00 00    	js     195bd <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:120
           {
                //rawKey &= 0x7f;
               //printk("%02X",rawKey); 48=up, 50=down
                 if (kKeyStatus[INDEX_SHIFT] || kKeyStatus[INDEX_CAPSLOCK])
   19353:	0f b6 05 64 65 09 00 	movzx  eax,BYTE PTR ds:0x96564
   1935a:	84 c0                	test   al,al
   1935c:	75 0b                	jne    19369 <kbd_handler+0x12a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:120 (discriminator 1)
   1935e:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   19365:	84 c0                	test   al,al
   19367:	74 10                	je     19379 <kbd_handler+0x13a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:122
                 {
                     translatedKeypress=keyboard_map_up[rawKey];
   19369:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   1936d:	0f b6 80 00 2d 08 00 	movzx  eax,BYTE PTR [eax+0x82d00]
   19374:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
   19377:	eb 0e                	jmp    19387 <kbd_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:125
                 }
                 else
                     translatedKeypress=keyboard_map[rawKey];
   19379:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   1937d:	0f b6 80 80 2c 08 00 	movzx  eax,BYTE PTR [eax+0x82c80]
   19384:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:132
//                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
//                 {
//                      printf("%u, %u, %c\n",kKeyChar, rawKey, translatedKeypress);
//                 }
#endif
                if (kKeyStatus[INDEX_CTRL])
   19387:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   1938e:	84 c0                	test   al,al
   19390:	74 14                	je     193a6 <kbd_handler+0x167>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:134
                {
                    printk("^");
   19392:	83 ec 0c             	sub    esp,0xc
   19395:	68 c5 2d 08 00       	push   0x82dc5
   1939a:	e8 54 de 00 00       	call   271f3 <printk>
   1939f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:135
                    translatedKeypress-=32;
   193a2:	80 6d f7 20          	sub    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:137
                }
            if (kKeyboardBuffer<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   193a6:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   193ab:	3d 2f 25 15 00       	cmp    eax,0x15252f
   193b0:	77 78                	ja     1942a <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:137 (discriminator 1)
   193b2:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   193b9:	84 c0                	test   al,al
   193bb:	75 6d                	jne    1942a <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:140
            {
                //CLR 01/10/2017: Increment the buffer pointer first
                {   kKeyboardBuffer++;
   193bd:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   193c2:	83 c0 01             	add    eax,0x1
   193c5:	a3 e0 03 12 00       	mov    ds:0x1203e0,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:141
                    *kKeyboardBuffer=translatedKeypress;
   193ca:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   193cf:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   193d3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:144
                }
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   193d5:	a1 38 03 12 00       	mov    eax,ds:0x120338
   193da:	83 e0 10             	and    eax,0x10
   193dd:	85 c0                	test   eax,eax
   193df:	74 1c                	je     193fd <kbd_handler+0x1be>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:145
                    printk("kbd_handler: %c-(%08X)\n",translatedKeypress, kKeyboardBuffer);
   193e1:	8b 15 e0 03 12 00    	mov    edx,DWORD PTR ds:0x1203e0
   193e7:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   193eb:	83 ec 04             	sub    esp,0x4
   193ee:	52                   	push   edx
   193ef:	50                   	push   eax
   193f0:	68 c7 2d 08 00       	push   0x82dc7
   193f5:	e8 f9 dd 00 00       	call   271f3 <printk>
   193fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:147
#endif
                cursorSavePosition();
   193fd:	e8 8d e7 ff ff       	call   17b8f <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:148
                cursorMoveTo(78,0);
   19402:	83 ec 08             	sub    esp,0x8
   19405:	6a 00                	push   0x0
   19407:	6a 4e                	push   0x4e
   19409:	e8 35 eb ff ff       	call   17f43 <cursorMoveTo>
   1940e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:149
                printk("%c",'k');
   19411:	83 ec 08             	sub    esp,0x8
   19414:	6a 6b                	push   0x6b
   19416:	68 df 2d 08 00       	push   0x82ddf
   1941b:	e8 d3 dd 00 00       	call   271f3 <printk>
   19420:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:150
                cursorRestorePosition();
   19423:	e8 b3 e7 ff ff       	call   17bdb <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:138
                {
                    printk("^");
                    translatedKeypress-=32;
                }
            if (kKeyboardBuffer<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
            {
   19428:	eb 4d                	jmp    19477 <kbd_handler+0x238>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:155
                cursorRestorePosition();
            }
            else
            {
#ifndef DEBUG_NONE
                if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   1942a:	a1 38 03 12 00       	mov    eax,ds:0x120338
   1942f:	83 e0 10             	and    eax,0x10
   19432:	85 c0                	test   eax,eax
   19434:	74 16                	je     1944c <kbd_handler+0x20d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:156
                      printk("noRoomForKey: %c\n",kKeyboardBuffer);
   19436:	a1 e0 03 12 00       	mov    eax,ds:0x1203e0
   1943b:	83 ec 08             	sub    esp,0x8
   1943e:	50                   	push   eax
   1943f:	68 e2 2d 08 00       	push   0x82de2
   19444:	e8 aa dd 00 00       	call   271f3 <printk>
   19449:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:158
#endif
                cursorSavePosition();
   1944c:	e8 3e e7 ff ff       	call   17b8f <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:159
                cursorMoveTo(78,0);
   19451:	83 ec 08             	sub    esp,0x8
   19454:	6a 00                	push   0x0
   19456:	6a 4e                	push   0x4e
   19458:	e8 e6 ea ff ff       	call   17f43 <cursorMoveTo>
   1945d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:160
                printk("%c",'K');
   19460:	83 ec 08             	sub    esp,0x8
   19463:	6a 4b                	push   0x4b
   19465:	68 df 2d 08 00       	push   0x82ddf
   1946a:	e8 84 dd 00 00       	call   271f3 <printk>
   1946f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:161
                cursorRestorePosition();
   19472:	e8 64 e7 ff ff       	call   17bdb <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:164
            }
                 //Debug
                 if (kKeyStatus[INDEX_ALT] && translatedKeypress==0x6A)
   19477:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1947e:	84 c0                	test   al,al
   19480:	74 07                	je     19489 <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:164 (discriminator 1)
   19482:	80 7d f7 6a          	cmp    BYTE PTR [ebp-0x9],0x6a
   19486:	75 01                	jne    19489 <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:166
                 {
                     __asm("int 0x3");
   19488:	cc                   	int3   
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:168
                 }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
   19489:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   19490:	84 c0                	test   al,al
   19492:	74 22                	je     194b6 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:168 (discriminator 1)
   19494:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   1949b:	84 c0                	test   al,al
   1949d:	74 17                	je     194b6 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:168 (discriminator 2)
   1949f:	80 7d f7 e0          	cmp    BYTE PTR [ebp-0x9],0xe0
   194a3:	75 11                	jne    194b6 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:170
            {
                translatedKeypress=0;
   194a5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:171
                reboot(false);
   194a9:	83 ec 0c             	sub    esp,0xc
   194ac:	6a 00                	push   0x0
   194ae:	e8 08 c2 00 00       	call   256bb <reboot>
   194b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:173
            }
            if (kKeyStatus[INDEX_ALT])
   194b6:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   194bd:	84 c0                	test   al,al
   194bf:	0f 84 f8 00 00 00    	je     195bd <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:175
            {
                if (translatedKeypress=='c')
   194c5:	80 7d f7 63          	cmp    BYTE PTR [ebp-0x9],0x63
   194c9:	75 4f                	jne    1951a <kbd_handler+0x2db>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:177
                {
                    printk("%u",*kTicksSinceStart);
   194cb:	a1 60 02 12 00       	mov    eax,ds:0x120260
   194d0:	8b 00                	mov    eax,DWORD PTR [eax]
   194d2:	83 ec 08             	sub    esp,0x8
   194d5:	50                   	push   eax
   194d6:	68 b4 2d 08 00       	push   0x82db4
   194db:	e8 13 dd 00 00       	call   271f3 <printk>
   194e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:178
                    printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   194e3:	8b 15 f8 01 12 00    	mov    edx,DWORD PTR ds:0x1201f8
   194e9:	a1 fc 01 12 00       	mov    eax,ds:0x1201fc
   194ee:	8b 0d f0 01 12 00    	mov    ecx,DWORD PTR ds:0x1201f0
   194f4:	81 e1 00 02 00 00    	and    ecx,0x200
   194fa:	85 c9                	test   ecx,ecx
   194fc:	74 07                	je     19505 <kbd_handler+0x2c6>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:178 (discriminator 1)
   194fe:	b9 49 00 00 00       	mov    ecx,0x49
   19503:	eb 05                	jmp    1950a <kbd_handler+0x2cb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:178 (discriminator 2)
   19505:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:178 (discriminator 4)
   1950a:	52                   	push   edx
   1950b:	50                   	push   eax
   1950c:	51                   	push   ecx
   1950d:	68 b7 2d 08 00       	push   0x82db7
   19512:	e8 dc dc 00 00       	call   271f3 <printk>
   19517:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:180
                }
                if (translatedKeypress=='b')
   1951a:	80 7d f7 62          	cmp    BYTE PTR [ebp-0x9],0x62
   1951e:	0f 85 83 00 00 00    	jne    195a7 <kbd_handler+0x368>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:182
                {
                    cursorSavePosition();
   19524:	e8 66 e6 ff ff       	call   17b8f <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:183
                    gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   19529:	83 ec 08             	sub    esp,0x8
   1952c:	68 60 a5 09 00       	push   0x9a560
   19531:	68 8c 02 12 00       	push   0x12028c
   19536:	e8 1a e3 00 00       	call   27855 <gmtime_r>
   1953b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:184
                    strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   1953e:	68 60 a5 09 00       	push   0x9a560
   19543:	68 80 2d 08 00       	push   0x82d80
   19548:	6a 32                	push   0x32
   1954a:	68 a0 a5 09 00       	push   0x9a5a0
   1954f:	e8 5c 71 ff ff       	call   106b0 <strftime>
   19554:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:185
                    cursorMoveTo(0,SYS_VGA_HEIGHT-1);
   19557:	83 ec 08             	sub    esp,0x8
   1955a:	6a 31                	push   0x31
   1955c:	6a 00                	push   0x0
   1955e:	e8 e0 e9 ff ff       	call   17f43 <cursorMoveTo>
   19563:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:186
                    printk("The time is currently %s", &currTime);
   19566:	83 ec 08             	sub    esp,0x8
   19569:	68 a0 a5 09 00       	push   0x9a5a0
   1956e:	68 92 2d 08 00       	push   0x82d92
   19573:	e8 7b dc 00 00       	call   271f3 <printk>
   19578:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:187
                    cursorMoveTo(65,SYS_VGA_HEIGHT-1);
   1957b:	83 ec 08             	sub    esp,0x8
   1957e:	6a 31                	push   0x31
   19580:	6a 41                	push   0x41
   19582:	e8 bc e9 ff ff       	call   17f43 <cursorMoveTo>
   19587:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:188
                    printk("ticks=%d", *kTicksSinceStart);
   1958a:	a1 60 02 12 00       	mov    eax,ds:0x120260
   1958f:	8b 00                	mov    eax,DWORD PTR [eax]
   19591:	83 ec 08             	sub    esp,0x8
   19594:	50                   	push   eax
   19595:	68 ab 2d 08 00       	push   0x82dab
   1959a:	e8 54 dc 00 00       	call   271f3 <printk>
   1959f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:189
                    cursorRestorePosition();
   195a2:	e8 34 e6 ff ff       	call   17bdb <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:191
                }
                if (translatedKeypress=='d')
   195a7:	80 7d f7 64          	cmp    BYTE PTR [ebp-0x9],0x64
   195ab:	75 05                	jne    195b2 <kbd_handler+0x373>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:193
                {
                    printDumpedRegs();
   195ad:	e8 cb bd 00 00       	call   2537d <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:195
                }
                if (translatedKeypress=='e')
   195b2:	80 7d f7 65          	cmp    BYTE PTR [ebp-0x9],0x65
   195b6:	75 05                	jne    195bd <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:197
                {
                    dumpKernelAddresses();
   195b8:	e8 7a c1 00 00       	call   25737 <dumpKernelAddresses>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:201
                }
            }
        }
        break;
   195bd:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:204
    }
        
    lKeyControlVal = inb(KEYB_CTRL_PORT);
   195be:	83 ec 0c             	sub    esp,0xc
   195c1:	6a 61                	push   0x61
   195c3:	e8 0f fb ff ff       	call   190d7 <inb>
   195c8:	83 c4 10             	add    esp,0x10
   195cb:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:205
    lKeyControlVal |= 0x82;
   195ce:	80 4d f6 82          	or     BYTE PTR [ebp-0xa],0x82
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:206
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   195d2:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   195d6:	83 ec 08             	sub    esp,0x8
   195d9:	50                   	push   eax
   195da:	6a 61                	push   0x61
   195dc:	e8 d7 fa ff ff       	call   190b8 <outb>
   195e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:207
    lKeyControlVal &= 0x7f;
   195e4:	80 65 f6 7f          	and    BYTE PTR [ebp-0xa],0x7f
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:208
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   195e8:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   195ec:	83 ec 08             	sub    esp,0x8
   195ef:	50                   	push   eax
   195f0:	6a 61                	push   0x61
   195f2:	e8 c1 fa ff ff       	call   190b8 <outb>
   195f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:209
    return;
   195fa:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:210
}
   195fb:	c9                   	leave  
   195fc:	c3                   	ret    

000195fd <pagingExceptionHandler>:
pagingExceptionHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:213

void pagingExceptionHandler()
{
   195fd:	55                   	push   ebp
   195fe:	89 e5                	mov    ebp,esp
   19600:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:214
    uint32_t lPDEValue=0;
   19603:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:215
    uint32_t lPTEValue=0;
   1960a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:216
    uint32_t lPDEAddress=0, lPTEAddress=0;
   19611:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   19618:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:217
    uint32_t lOldDebugLevel=0;
   1961f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:219

    if (exceptionNumber==0x0e)
   19626:	0f b7 05 a4 01 12 00 	movzx  eax,WORD PTR ds:0x1201a4
   1962d:	66 83 f8 0e          	cmp    ax,0xe
   19631:	75 14                	jne    19647 <pagingExceptionHandler+0x4a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:221
        //Get the address of the page table entry for the exception
        lPTEAddress=kPagingGet4kPTEntryAddress(exceptionCR2);
   19633:	a1 00 02 12 00       	mov    eax,ds:0x120200
   19638:	83 ec 0c             	sub    esp,0xc
   1963b:	50                   	push   eax
   1963c:	e8 34 7e ff ff       	call   11475 <kPagingGet4kPTEntryAddress>
   19641:	83 c4 10             	add    esp,0x10
   19644:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:224

#ifndef DEBUG_NONE
    if (!kPagingInitDone)
   19647:	0f b6 05 a1 02 12 00 	movzx  eax,BYTE PTR ds:0x1202a1
   1964e:	83 f0 01             	xor    eax,0x1
   19651:	84 c0                	test   al,al
   19653:	74 12                	je     19667 <pagingExceptionHandler+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:226
    {
        lOldDebugLevel=kDebugLevel;
   19655:	a1 38 03 12 00       	mov    eax,ds:0x120338
   1965a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:227
        kDebugLevel&=!DEBUG_EXCEPTIONS;
   1965d:	c7 05 38 03 12 00 00 	mov    DWORD PTR ds:0x120338,0x0
   19664:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:229
    }
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19667:	a1 38 03 12 00       	mov    eax,ds:0x120338
   1966c:	25 00 10 00 00       	and    eax,0x1000
   19671:	85 c0                	test   eax,eax
   19673:	0f 84 99 00 00 00    	je     19712 <pagingExceptionHandler+0x115>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:231
    {
        lPDEValue=kPagingGet4kPDEntryValue(exceptionCR2);
   19679:	a1 00 02 12 00       	mov    eax,ds:0x120200
   1967e:	83 ec 0c             	sub    esp,0xc
   19681:	50                   	push   eax
   19682:	e8 65 7d ff ff       	call   113ec <kPagingGet4kPDEntryValue>
   19687:	83 c4 10             	add    esp,0x10
   1968a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:232
        lPTEValue=kPagingGet4kPTEntryValue(exceptionCR2);
   1968d:	a1 00 02 12 00       	mov    eax,ds:0x120200
   19692:	83 ec 0c             	sub    esp,0xc
   19695:	50                   	push   eax
   19696:	e8 10 7e ff ff       	call   114ab <kPagingGet4kPTEntryValue>
   1969b:	83 c4 10             	add    esp,0x10
   1969e:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:233
        lPDEAddress=kPagingGet4kPDEntryAddress(exceptionCR2);
   196a1:	a1 00 02 12 00       	mov    eax,ds:0x120200
   196a6:	83 ec 0c             	sub    esp,0xc
   196a9:	50                   	push   eax
   196aa:	e8 84 7d ff ff       	call   11433 <kPagingGet4kPDEntryAddress>
   196af:	83 c4 10             	add    esp,0x10
   196b2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:234
        if (exceptionNumber==0x0e)
   196b5:	0f b7 05 a4 01 12 00 	movzx  eax,WORD PTR ds:0x1201a4
   196bc:	66 83 f8 0e          	cmp    ax,0xe
   196c0:	75 16                	jne    196d8 <pagingExceptionHandler+0xdb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:235
          printk("\nPaging handler called for virtual address 0x%02X\n",exceptionCR2);
   196c2:	a1 00 02 12 00       	mov    eax,ds:0x120200
   196c7:	83 ec 08             	sub    esp,0x8
   196ca:	50                   	push   eax
   196cb:	68 f4 2d 08 00       	push   0x82df4
   196d0:	e8 1e db 00 00       	call   271f3 <printk>
   196d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:236
          printk("PDE@0x%08X=0x%08X, PTE@0x%08X=0x%08X\n", lPDEAddress, lPDEValue, lPTEAddress, lPTEValue);
   196d8:	83 ec 0c             	sub    esp,0xc
   196db:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   196de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   196e1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   196e4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   196e7:	68 28 2e 08 00       	push   0x82e28
   196ec:	e8 02 db 00 00       	call   271f3 <printk>
   196f1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:237
          printDumpedRegs();
   196f4:	e8 84 bc 00 00       	call   2537d <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:238
          printk("handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   196f9:	a1 78 02 12 00       	mov    eax,ds:0x120278
   196fe:	83 c0 01             	add    eax,0x1
   19701:	83 ec 08             	sub    esp,0x8
   19704:	50                   	push   eax
   19705:	68 50 2e 08 00       	push   0x82e50
   1970a:	e8 e4 da 00 00       	call   271f3 <printk>
   1970f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:241
    }
#endif
    if (lOldDebugLevel)
   19712:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   19716:	74 08                	je     19720 <pagingExceptionHandler+0x123>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:242
        kDebugLevel=lOldDebugLevel;
   19718:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1971b:	a3 38 03 12 00       	mov    ds:0x120338,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:243
    if ((exceptionCR2&0xFFFFF000)==0xC0000000 && (!kPagingInitDone))
   19720:	a1 00 02 12 00       	mov    eax,ds:0x120200
   19725:	25 00 f0 ff ff       	and    eax,0xfffff000
   1972a:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   1972f:	75 41                	jne    19772 <pagingExceptionHandler+0x175>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:243 (discriminator 1)
   19731:	0f b6 05 a1 02 12 00 	movzx  eax,BYTE PTR ds:0x1202a1
   19738:	83 f0 01             	xor    eax,0x1
   1973b:	84 c0                	test   al,al
   1973d:	74 33                	je     19772 <pagingExceptionHandler+0x175>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:246
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1973f:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19744:	83 e0 40             	and    eax,0x40
   19747:	85 c0                	test   eax,eax
   19749:	74 16                	je     19761 <pagingExceptionHandler+0x164>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:247
            printk("\n\tpagingExceptionHandler: Updating 0x%08X to read/write for WP test ...\n\t",exceptionCR2);
   1974b:	a1 00 02 12 00       	mov    eax,ds:0x120200
   19750:	83 ec 08             	sub    esp,0x8
   19753:	50                   	push   eax
   19754:	68 7c 2e 08 00       	push   0x82e7c
   19759:	e8 95 da 00 00       	call   271f3 <printk>
   1975e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:249
#endif
        kPagingSetPageReadOnlyFlag((uintptr_t*)lPTEAddress, false);
   19761:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19764:	83 ec 08             	sub    esp,0x8
   19767:	6a 00                	push   0x0
   19769:	50                   	push   eax
   1976a:	e8 80 7d ff ff       	call   114ef <kPagingSetPageReadOnlyFlag>
   1976f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:252
    }
    
    kPagingExceptionsSinceStart++;
   19772:	a1 78 02 12 00       	mov    eax,ds:0x120278
   19777:	83 c0 01             	add    eax,0x1
   1977a:	a3 78 02 12 00       	mov    ds:0x120278,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:259
//    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
//    {
//        waitForKeyboardKey();
//    }
#endif
    __asm__("push eax\n mov eax,0\nmov cr2,eax\npop eax\n  #reset CR2 after paging exception handled");
   1977f:	50                   	push   eax
   19780:	b8 00 00 00 00       	mov    eax,0x0
   19785:	0f 22 d0             	mov    cr2,eax
   19788:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:260
    if ((!kPagingInitDone) && exceptionCR2==0xC0000000)
   19789:	0f b6 05 a1 02 12 00 	movzx  eax,BYTE PTR ds:0x1202a1
   19790:	83 f0 01             	xor    eax,0x1
   19793:	84 c0                	test   al,al
   19795:	74 18                	je     197af <pagingExceptionHandler+0x1b2>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:260 (discriminator 1)
   19797:	a1 00 02 12 00       	mov    eax,ds:0x120200
   1979c:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   197a1:	75 0c                	jne    197af <pagingExceptionHandler+0x1b2>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:262
    {
        exceptionCR2=0;
   197a3:	c7 05 00 02 12 00 00 	mov    DWORD PTR ds:0x120200,0x0
   197aa:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:263
        return;
   197ad:	eb 04                	jmp    197b3 <pagingExceptionHandler+0x1b6>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:265
    }
    __asm__("sti\n");
   197af:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:266 (discriminator 1)
    pagingExceptionStop: __asm__("hlt\n"); goto pagingExceptionStop;
   197b0:	f4                   	hlt    
   197b1:	eb fd                	jmp    197b0 <pagingExceptionHandler+0x1b3>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:269
    __asm__("cli");
    __asm__("hlt");
}
   197b3:	c9                   	leave  
   197b4:	c3                   	ret    

000197b5 <defaultISRHandler>:
defaultISRHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:272

void defaultISRHandler()
{
   197b5:	55                   	push   ebp
   197b6:	89 e5                	mov    ebp,esp
   197b8:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:275
    //terminal_clear();
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   197bb:	a1 38 03 12 00       	mov    eax,ds:0x120338
   197c0:	25 00 10 00 00       	and    eax,0x1000
   197c5:	85 c0                	test   eax,eax
   197c7:	74 3e                	je     19807 <defaultISRHandler+0x52>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:277
    {
        printk("Exception handler called for exception # 0x%02x\n\n", exceptionNumber);
   197c9:	0f b7 05 a4 01 12 00 	movzx  eax,WORD PTR ds:0x1201a4
   197d0:	0f b7 c0             	movzx  eax,ax
   197d3:	83 ec 08             	sub    esp,0x8
   197d6:	50                   	push   eax
   197d7:	68 c8 2e 08 00       	push   0x82ec8
   197dc:	e8 12 da 00 00       	call   271f3 <printk>
   197e1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:278
        printDumpedRegs();
   197e4:	e8 94 bb 00 00       	call   2537d <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:279
        printd(DEBUG_EXCEPTIONS,"handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   197e9:	a1 78 02 12 00       	mov    eax,ds:0x120278
   197ee:	83 c0 01             	add    eax,0x1
   197f1:	83 ec 04             	sub    esp,0x4
   197f4:	50                   	push   eax
   197f5:	68 50 2e 08 00       	push   0x82e50
   197fa:	68 00 10 00 00       	push   0x1000
   197ff:	e8 0f da 00 00       	call   27213 <printd>
   19804:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:293 (discriminator 1)

//    __asm__("mov eax,%0\nmov ebx,%1\n"::"r" (exceptionAX), "r" (exceptionEIP));
//    return;
    
defaultHandlerLoop:
    goto defaultHandlerLoop;
   19807:	eb fe                	jmp    19807 <defaultISRHandler+0x52>

00019809 <doubleFaultHandler>:
doubleFaultHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:297
}

void doubleFaultHandler()
{
   19809:	55                   	push   ebp
   1980a:	89 e5                	mov    ebp,esp
   1980c:	53                   	push   ebx
   1980d:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:298
    uint32_t esp = (uint32_t)exceptionSavedESP;
   19810:	a1 ec 01 12 00       	mov    eax,ds:0x1201ec
   19815:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:299
        terminal_clear();
   19818:	e8 11 e4 ff ff       	call   17c2e <terminal_clear>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:300
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
   1981d:	8b 1d 00 02 12 00    	mov    ebx,DWORD PTR ds:0x120200
   19823:	8b 0d f8 01 12 00    	mov    ecx,DWORD PTR ds:0x1201f8
   19829:	8b 15 fc 01 12 00    	mov    edx,DWORD PTR ds:0x1201fc
   1982f:	0f b7 05 a4 01 12 00 	movzx  eax,WORD PTR ds:0x1201a4
   19836:	0f b7 c0             	movzx  eax,ax
   19839:	83 ec 0c             	sub    esp,0xc
   1983c:	53                   	push   ebx
   1983d:	51                   	push   ecx
   1983e:	52                   	push   edx
   1983f:	50                   	push   eax
   19840:	68 fc 2e 08 00       	push   0x82efc
   19845:	e8 a9 d9 00 00       	call   271f3 <printk>
   1984a:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:301
        printk ("Stack:\n");
   1984d:	83 ec 0c             	sub    esp,0xc
   19850:	68 3f 2f 08 00       	push   0x82f3f
   19855:	e8 99 d9 00 00       	call   271f3 <printk>
   1985a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:302
        for (int cnt=0;cnt<10;cnt++)
   1985d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   19864:	eb 2b                	jmp    19891 <doubleFaultHandler+0x88>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:304 (discriminator 3)
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   19866:	a1 a8 01 12 00       	mov    eax,ds:0x1201a8
   1986b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1986e:	c1 e2 02             	shl    edx,0x2
   19871:	01 d0                	add    eax,edx
   19873:	8b 00                	mov    eax,DWORD PTR [eax]
   19875:	83 ec 04             	sub    esp,0x4
   19878:	50                   	push   eax
   19879:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1987c:	68 47 2f 08 00       	push   0x82f47
   19881:	e8 6d d9 00 00       	call   271f3 <printk>
   19886:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:305 (discriminator 3)
            esp+=4;
   19889:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:302 (discriminator 3)
{
    uint32_t esp = (uint32_t)exceptionSavedESP;
        terminal_clear();
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
        printk ("Stack:\n");
        for (int cnt=0;cnt<10;cnt++)
   1988d:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:302 (discriminator 1)
   19891:	83 7d f0 09          	cmp    DWORD PTR [ebp-0x10],0x9
   19895:	7e cf                	jle    19866 <doubleFaultHandler+0x5d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:307
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
            esp+=4;
        }
    __asm__("cli");
   19897:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:308
    __asm__("hlt");
   19898:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:309
   19899:	90                   	nop
   1989a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1989d:	c9                   	leave  
   1989e:	c3                   	ret    
   1989f:	90                   	nop

000198a0 <rdmsr64>:
rdmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:4
#include "i386/cpu.h"

uint64_t rdmsr64(unsigned index)
{
   198a0:	55                   	push   ebp
   198a1:	89 e5                	mov    ebp,esp
   198a3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:7
    unsigned long long ret;

    __asm__ ("rdmsr" : "=A"(ret) : "c"(index));
   198a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   198a9:	89 c1                	mov    ecx,eax
   198ab:	0f 32                	rdmsr  
   198ad:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   198b0:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:8
    return ret;
   198b3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   198b6:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/cpu/msr.c:9
}
   198b9:	c9                   	leave  
   198ba:	c3                   	ret    

000198bb <rdmsr32>:
rdmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:12

void rdmsr32(unsigned index,uint32_t* loVal, uint32_t* hiVal)
{
   198bb:	55                   	push   ebp
   198bc:	89 e5                	mov    ebp,esp
   198be:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:13
    unsigned long long lTemp = rdmsr64(index);
   198c1:	83 ec 04             	sub    esp,0x4
   198c4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   198c7:	e8 d4 ff ff ff       	call   198a0 <rdmsr64>
   198cc:	83 c4 08             	add    esp,0x8
   198cf:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   198d2:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:14
    *hiVal = lTemp >> 32;
   198d5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   198d8:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   198db:	89 d0                	mov    eax,edx
   198dd:	31 d2                	xor    edx,edx
   198df:	89 c2                	mov    edx,eax
   198e1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   198e4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:15
    *loVal = lTemp & 0xFFFFFFFF;
   198e6:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   198e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   198ec:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:16
}
   198ee:	90                   	nop
   198ef:	c9                   	leave  
   198f0:	c3                   	ret    

000198f1 <wrmsr64>:
wrmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:19

void wrmsr64(unsigned index, uint64_t val)
{
   198f1:	55                   	push   ebp
   198f2:	89 e5                	mov    ebp,esp
   198f4:	83 ec 08             	sub    esp,0x8
   198f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   198fa:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   198fd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   19900:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/msr.c:20
    __asm__ volatile ("wrmsr" : : "c"(index), "A"(val));
   19903:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   19906:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19909:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1990c:	0f 30                	wrmsr  
/home/yogi/src/os/chrisOS/src/cpu/msr.c:21
}
   1990e:	90                   	nop
   1990f:	c9                   	leave  
   19910:	c3                   	ret    

00019911 <wrmsr32>:
wrmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:24

void wrmsr32(unsigned index, uint32_t loVal, uint32_t hiVal)
{
   19911:	55                   	push   ebp
   19912:	89 e5                	mov    ebp,esp
   19914:	57                   	push   edi
   19915:	56                   	push   esi
   19916:	53                   	push   ebx
   19917:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/cpu/msr.c:27
    //NOTE: hiVal=EDX, loVal=EAX
    //asm volatile ("wrmsr" : : "c"(index), "a"(eaxVal), "d" edxVal);
    wrmsr64(index, ((uint64_t)hiVal << 32) | loVal);
   1991a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   1991d:	bb 00 00 00 00       	mov    ebx,0x0
   19922:	89 cb                	mov    ebx,ecx
   19924:	b9 00 00 00 00       	mov    ecx,0x0
   19929:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   1992c:	bf 00 00 00 00       	mov    edi,0x0
   19931:	89 c8                	mov    eax,ecx
   19933:	09 f0                	or     eax,esi
   19935:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   19938:	89 d8                	mov    eax,ebx
   1993a:	09 f8                	or     eax,edi
   1993c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   1993f:	83 ec 04             	sub    esp,0x4
   19942:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   19945:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   19948:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1994b:	e8 a1 ff ff ff       	call   198f1 <wrmsr64>
   19950:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:29
    
}
   19953:	90                   	nop
   19954:	8d 65 f4             	lea    esp,[ebp-0xc]
   19957:	5b                   	pop    ebx
   19958:	5e                   	pop    esi
   19959:	5f                   	pop    edi
   1995a:	5d                   	pop    ebp
   1995b:	c3                   	ret    

0001995c <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   1995c:	55                   	push   ebp
   1995d:	89 e5                	mov    ebp,esp
   1995f:	83 ec 08             	sub    esp,0x8
   19962:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19965:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19968:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   1996c:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   1996f:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   19973:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   19977:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   19978:	90                   	nop
   19979:	c9                   	leave  
   1997a:	c3                   	ret    

0001997b <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   1997b:	55                   	push   ebp
   1997c:	89 e5                	mov    ebp,esp
   1997e:	83 ec 14             	sub    esp,0x14
   19981:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19984:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19988:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1998c:	89 c2                	mov    edx,eax
   1998e:	ec                   	in     al,dx
   1998f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   19992:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   19996:	c9                   	leave  
   19997:	c3                   	ret    

00019998 <IRQ_set_mask>:
IRQ_set_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:4
#include "io.h"
#include "i386/bits/types.h"

void IRQ_set_mask(unsigned char IRQline) {
   19998:	55                   	push   ebp
   19999:	89 e5                	mov    ebp,esp
   1999b:	53                   	push   ebx
   1999c:	83 ec 14             	sub    esp,0x14
   1999f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   199a2:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:8
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   199a5:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   199a9:	77 08                	ja     199b3 <IRQ_set_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:9
        port = PIC1_DATA;
   199ab:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   199b1:	eb 0a                	jmp    199bd <IRQ_set_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:11
    } else {
        port = PIC2_DATA;
   199b3:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:12
        IRQline -= 8;
   199b9:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:14
    }
    value = inb(port) | (1 << IRQline);
   199bd:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   199c1:	50                   	push   eax
   199c2:	e8 b4 ff ff ff       	call   1997b <inb>
   199c7:	83 c4 04             	add    esp,0x4
   199ca:	89 c3                	mov    ebx,eax
   199cc:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   199d0:	ba 01 00 00 00       	mov    edx,0x1
   199d5:	89 c1                	mov    ecx,eax
   199d7:	d3 e2                	shl    edx,cl
   199d9:	89 d0                	mov    eax,edx
   199db:	09 d8                	or     eax,ebx
   199dd:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:15
    outb(port, value);        
   199e0:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   199e4:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   199e8:	52                   	push   edx
   199e9:	50                   	push   eax
   199ea:	e8 6d ff ff ff       	call   1995c <outb>
   199ef:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:16
}
   199f2:	90                   	nop
   199f3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   199f6:	c9                   	leave  
   199f7:	c3                   	ret    

000199f8 <IRQ_clear_mask>:
IRQ_clear_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:18
 
void IRQ_clear_mask(unsigned char IRQline) {
   199f8:	55                   	push   ebp
   199f9:	89 e5                	mov    ebp,esp
   199fb:	53                   	push   ebx
   199fc:	83 ec 14             	sub    esp,0x14
   199ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19a02:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:22
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   19a05:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19a09:	77 08                	ja     19a13 <IRQ_clear_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:23
        port = PIC1_DATA;
   19a0b:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19a11:	eb 0a                	jmp    19a1d <IRQ_clear_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:25
    } else {
        port = PIC2_DATA;
   19a13:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:26
        IRQline -= 8;
   19a19:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:28
    }
    value = inb(port) & ~(1 << IRQline);
   19a1d:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19a21:	50                   	push   eax
   19a22:	e8 54 ff ff ff       	call   1997b <inb>
   19a27:	83 c4 04             	add    esp,0x4
   19a2a:	89 c2                	mov    edx,eax
   19a2c:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19a30:	bb 01 00 00 00       	mov    ebx,0x1
   19a35:	89 c1                	mov    ecx,eax
   19a37:	d3 e3                	shl    ebx,cl
   19a39:	89 d8                	mov    eax,ebx
   19a3b:	f7 d0                	not    eax
   19a3d:	21 d0                	and    eax,edx
   19a3f:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:29
    outb(port, value);        
   19a42:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   19a46:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19a4a:	52                   	push   edx
   19a4b:	50                   	push   eax
   19a4c:	e8 0b ff ff ff       	call   1995c <outb>
   19a51:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:30
}
   19a54:	90                   	nop
   19a55:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19a58:	c9                   	leave  
   19a59:	c3                   	ret    

00019a5a <PIC_remap>:
PIC_remap():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:54
	offset1 - vector offset for master PIC
		vectors on the master become offset1..offset1+7
	offset2 - same for slave PIC: offset2..offset2+7
*/
void PIC_remap(int offset1, int offset2)
{
   19a5a:	55                   	push   ebp
   19a5b:	89 e5                	mov    ebp,esp
   19a5d:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/ports.c:57
	unsigned char a1, a2;
 
	a1 = inb(PIC1_DATA);                        // save masks
   19a60:	6a 21                	push   0x21
   19a62:	e8 14 ff ff ff       	call   1997b <inb>
   19a67:	83 c4 04             	add    esp,0x4
   19a6a:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:58
	a2 = inb(PIC2_DATA);
   19a6d:	68 a1 00 00 00       	push   0xa1
   19a72:	e8 04 ff ff ff       	call   1997b <inb>
   19a77:	83 c4 04             	add    esp,0x4
   19a7a:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:60
 
	outb(PIC1_CMD, ICW1_INIT+ICW1_ICW4);  // starts the initialization sequence (in cascade mode)
   19a7d:	6a 11                	push   0x11
   19a7f:	6a 20                	push   0x20
   19a81:	e8 d6 fe ff ff       	call   1995c <outb>
   19a86:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:61
	__asm__("nop;");
   19a89:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:62
	outb(PIC2_CMD, ICW1_INIT+ICW1_ICW4);
   19a8a:	6a 11                	push   0x11
   19a8c:	68 a0 00 00 00       	push   0xa0
   19a91:	e8 c6 fe ff ff       	call   1995c <outb>
   19a96:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:63
	__asm__("nop;");
   19a99:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:64
	outb(PIC1_DATA, offset1);                 // ICW2: Master PIC vector offset
   19a9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19a9d:	0f b6 c0             	movzx  eax,al
   19aa0:	50                   	push   eax
   19aa1:	6a 21                	push   0x21
   19aa3:	e8 b4 fe ff ff       	call   1995c <outb>
   19aa8:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:65
	__asm__("nop;");
   19aab:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:66
	outb(PIC2_DATA, offset2);                 // ICW2: Slave PIC vector offset
   19aac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19aaf:	0f b6 c0             	movzx  eax,al
   19ab2:	50                   	push   eax
   19ab3:	68 a1 00 00 00       	push   0xa1
   19ab8:	e8 9f fe ff ff       	call   1995c <outb>
   19abd:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:67
	__asm__("nop;");
   19ac0:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:68
	outb(PIC1_DATA, 4);                       // ICW3: tell Master PIC that there is a slave PIC at IRQ2 (0000 0100)
   19ac1:	6a 04                	push   0x4
   19ac3:	6a 21                	push   0x21
   19ac5:	e8 92 fe ff ff       	call   1995c <outb>
   19aca:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:69
	__asm__("nop;");
   19acd:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:70
	outb(PIC2_DATA, 2);                       // ICW3: tell Slave PIC its cascade identity (0000 0010)
   19ace:	6a 02                	push   0x2
   19ad0:	68 a1 00 00 00       	push   0xa1
   19ad5:	e8 82 fe ff ff       	call   1995c <outb>
   19ada:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:71
	__asm__("nop;");
   19add:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:73
 
	outb(PIC1_DATA, ICW4_8086);
   19ade:	6a 01                	push   0x1
   19ae0:	6a 21                	push   0x21
   19ae2:	e8 75 fe ff ff       	call   1995c <outb>
   19ae7:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:74
	__asm__("nop;");
   19aea:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:75
	outb(PIC2_DATA, ICW4_8086);
   19aeb:	6a 01                	push   0x1
   19aed:	68 a1 00 00 00       	push   0xa1
   19af2:	e8 65 fe ff ff       	call   1995c <outb>
   19af7:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:76
	__asm__("nop;");
   19afa:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:78
 
	outb(PIC1_DATA, a1);   // restore saved masks.
   19afb:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   19aff:	50                   	push   eax
   19b00:	6a 21                	push   0x21
   19b02:	e8 55 fe ff ff       	call   1995c <outb>
   19b07:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:79
	outb(PIC2_DATA, a2);
   19b0a:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   19b0e:	50                   	push   eax
   19b0f:	68 a1 00 00 00       	push   0xa1
   19b14:	e8 43 fe ff ff       	call   1995c <outb>
   19b19:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:80
   19b1c:	90                   	nop
   19b1d:	c9                   	leave  
   19b1e:	c3                   	ret    
   19b1f:	90                   	nop

00019b20 <mpScanForConfig>:
mpScanForConfig():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:19
extern uint32_t kDebugLevel;
extern mpConfig_t* kMPConfigTable;
extern uintptr_t* kIOAPICPtr;

bool HIGH_CODE_SECTION mpScanForConfig(int start, int length)
{
   19b20:	55                   	push   ebp
   19b21:	89 e5                	mov    ebp,esp
   19b23:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:22
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19b26:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19b2b:	25 00 08 00 00       	and    eax,0x800
   19b30:	85 c0                	test   eax,eax
   19b32:	74 1e                	je     19b52 <mpScanForConfig+0x32>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:23
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
   19b34:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19b37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19b3a:	01 d0                	add    eax,edx
   19b3c:	50                   	push   eax
   19b3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19b40:	68 60 30 08 00       	push   0x83060
   19b45:	68 00 08 00 00       	push   0x800
   19b4a:	e8 c4 d6 00 00       	call   27213 <printd>
   19b4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19b52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19b55:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   19b58:	eb 33                	jmp    19b8d <mpScanForConfig+0x6d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:27
    {
        lMP=(struct mpf_intel*)cnt;
   19b5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19b5d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:28
        if(!strncmp(lMP->signature,"_MP_",4))
   19b60:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19b63:	83 ec 04             	sub    esp,0x4
   19b66:	6a 04                	push   0x4
   19b68:	68 82 30 08 00       	push   0x83082
   19b6d:	50                   	push   eax
   19b6e:	e8 91 80 ff ff       	call   11c04 <strncmp>
   19b73:	83 c4 10             	add    esp,0x10
   19b76:	85 c0                	test   eax,eax
   19b78:	75 0f                	jne    19b89 <mpScanForConfig+0x69>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:30
        {
            mp=(struct mpf_intel*)cnt;
   19b7a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19b7d:	a3 70 65 09 00       	mov    ds:0x96570,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:31
            return true;
   19b82:	b8 01 00 00 00       	mov    eax,0x1
   19b87:	eb 16                	jmp    19b9f <mpScanForConfig+0x7f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 2)
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19b89:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 1)
   19b8d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19b90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19b93:	01 d0                	add    eax,edx
   19b95:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   19b98:	7f c0                	jg     19b5a <mpScanForConfig+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:34
        {
            mp=(struct mpf_intel*)cnt;
            return true;
        }
    }
    return false;
   19b9a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:35
}
   19b9f:	c9                   	leave  
   19ba0:	c3                   	ret    

00019ba1 <mpFindTables>:
mpFindTables():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:38

bool HIGH_CODE_SECTION  mpFindTables()
{
   19ba1:	55                   	push   ebp
   19ba2:	89 e5                	mov    ebp,esp
   19ba4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:39
    uint16_t* lEBDAPtr=(uint16_t*)0x40e;
   19ba7:	c7 45 f0 0e 04 00 00 	mov    DWORD PTR [ebp-0x10],0x40e
/home/yogi/src/os/chrisOS/src/cpu/smp.c:42
    bool lResult;
    
    if (lEBDAPtr != 0)
   19bae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   19bb2:	74 20                	je     19bd4 <mpFindTables+0x33>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:43
        lResult=mpScanForConfig(*lEBDAPtr<<4, 0x400);
   19bb4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19bb7:	0f b7 00             	movzx  eax,WORD PTR [eax]
   19bba:	0f b7 c0             	movzx  eax,ax
   19bbd:	c1 e0 04             	shl    eax,0x4
   19bc0:	83 ec 08             	sub    esp,0x8
   19bc3:	68 00 04 00 00       	push   0x400
   19bc8:	50                   	push   eax
   19bc9:	e8 52 ff ff ff       	call   19b20 <mpScanForConfig>
   19bce:	83 c4 10             	add    esp,0x10
   19bd1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:44
    if (!lResult)
   19bd4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   19bd8:	83 f0 01             	xor    eax,0x1
   19bdb:	84 c0                	test   al,al
   19bdd:	74 62                	je     19c41 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:45
        if (!mpScanForConfig(0x9fc00, 0x400))
   19bdf:	83 ec 08             	sub    esp,0x8
   19be2:	68 00 04 00 00       	push   0x400
   19be7:	68 00 fc 09 00       	push   0x9fc00
   19bec:	e8 2f ff ff ff       	call   19b20 <mpScanForConfig>
   19bf1:	83 c4 10             	add    esp,0x10
   19bf4:	83 f0 01             	xor    eax,0x1
   19bf7:	84 c0                	test   al,al
   19bf9:	74 46                	je     19c41 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:46
            if (!mpScanForConfig(0xF0000, 0xFFFF))
   19bfb:	83 ec 08             	sub    esp,0x8
   19bfe:	68 ff ff 00 00       	push   0xffff
   19c03:	68 00 00 0f 00       	push   0xf0000
   19c08:	e8 13 ff ff ff       	call   19b20 <mpScanForConfig>
   19c0d:	83 c4 10             	add    esp,0x10
   19c10:	83 f0 01             	xor    eax,0x1
   19c13:	84 c0                	test   al,al
   19c15:	74 2a                	je     19c41 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:49
            {
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19c17:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19c1c:	25 00 08 00 00       	and    eax,0x800
   19c21:	85 c0                	test   eax,eax
   19c23:	74 15                	je     19c3a <mpFindTables+0x99>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:50
                    printd(DEBUG_MP,"MP tables not found, MP not allowed, proceeding as single processor.\n");
   19c25:	83 ec 08             	sub    esp,0x8
   19c28:	68 88 30 08 00       	push   0x83088
   19c2d:	68 00 08 00 00       	push   0x800
   19c32:	e8 dc d5 00 00       	call   27213 <printd>
   19c37:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:52
#endif
                return false;
   19c3a:	b8 00 00 00 00       	mov    eax,0x0
   19c3f:	eb 38                	jmp    19c79 <mpFindTables+0xd8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:55
            }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19c41:	a1 38 03 12 00       	mov    eax,ds:0x120338
   19c46:	25 00 08 00 00       	and    eax,0x800
   19c4b:	85 c0                	test   eax,eax
   19c4d:	74 25                	je     19c74 <mpFindTables+0xd3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:56
        printd(DEBUG_MP,"MP tables found at 0x%08X, spec %c\n", mp, mp->specification);
   19c4f:	a1 70 65 09 00       	mov    eax,ds:0x96570
   19c54:	0f b6 40 09          	movzx  eax,BYTE PTR [eax+0x9]
   19c58:	0f b6 d0             	movzx  edx,al
   19c5b:	a1 70 65 09 00       	mov    eax,ds:0x96570
   19c60:	52                   	push   edx
   19c61:	50                   	push   eax
   19c62:	68 d0 30 08 00       	push   0x830d0
   19c67:	68 00 08 00 00       	push   0x800
   19c6c:	e8 a2 d5 00 00       	call   27213 <printd>
   19c71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:58
#endif
    return true;
   19c74:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:60
        
}
   19c79:	c9                   	leave  
   19c7a:	c3                   	ret    

00019c7b <printMPTable>:
printMPTable():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:63

void HIGH_CODE_SECTION printMPTable()
{
   19c7b:	55                   	push   ebp
   19c7c:	89 e5                	mov    ebp,esp
   19c7e:	57                   	push   edi
   19c7f:	56                   	push   esi
   19c80:	53                   	push   ebx
   19c81:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:64
    mpConfig_t* mpptr=kMPConfigTable;
   19c84:	a1 40 03 12 00       	mov    eax,ds:0x120340
   19c89:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:65
    int cnt=0;
   19c8c:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   19c93:	e9 d5 03 00 00       	jmp    1a06d <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:69
    {
        switch (mpptr->recType)
   19c98:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19c9b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   19c9e:	83 f8 04             	cmp    eax,0x4
   19ca1:	0f 87 d7 03 00 00    	ja     1a07e <printMPTable+0x403>
   19ca7:	8b 04 85 38 32 08 00 	mov    eax,DWORD PTR [eax*4+0x83238]
   19cae:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72
        {
            case CPU:
                printk("CPU: APICId=%u, Enabled=%s, %s\n", mpptr->cpu.apicid, (mpptr->cpu.cpuflag&0x1)?"yes":"no", (mpptr->cpu.cpuflag&0x2)?"BSP":"");
   19cb0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cb3:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19cb7:	0f b6 c0             	movzx  eax,al
   19cba:	83 e0 02             	and    eax,0x2
   19cbd:	85 c0                	test   eax,eax
   19cbf:	74 07                	je     19cc8 <printMPTable+0x4d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 1)
   19cc1:	b9 f4 30 08 00       	mov    ecx,0x830f4
   19cc6:	eb 05                	jmp    19ccd <printMPTable+0x52>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 2)
   19cc8:	b9 f8 30 08 00       	mov    ecx,0x830f8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 4)
   19ccd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19cd0:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19cd4:	0f b6 c0             	movzx  eax,al
   19cd7:	83 e0 01             	and    eax,0x1
   19cda:	85 c0                	test   eax,eax
   19cdc:	74 07                	je     19ce5 <printMPTable+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 5)
   19cde:	ba f9 30 08 00       	mov    edx,0x830f9
   19ce3:	eb 05                	jmp    19cea <printMPTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 6)
   19ce5:	ba fd 30 08 00       	mov    edx,0x830fd
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 8)
   19cea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ced:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19cf1:	0f b6 c0             	movzx  eax,al
   19cf4:	51                   	push   ecx
   19cf5:	52                   	push   edx
   19cf6:	50                   	push   eax
   19cf7:	68 00 31 08 00       	push   0x83100
   19cfc:	e8 f2 d4 00 00       	call   271f3 <printk>
   19d01:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:73 (discriminator 8)
                break;
   19d04:	e9 16 03 00 00       	jmp    1a01f <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:75
            case BUS:
                printk("BUS: ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", mpptr->bus.busid, mpptr->bus.bustype[0], mpptr->bus.bustype[1], mpptr->bus.bustype[2], mpptr->bus.bustype[3], mpptr->bus.bustype[4], mpptr->bus.bustype[5], mpptr->bus.type );
   19d09:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d0c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   19d0f:	0f b6 c8             	movzx  ecx,al
   19d12:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d15:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   19d19:	0f b6 c0             	movzx  eax,al
   19d1c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
   19d1f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d22:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   19d26:	0f b6 f0             	movzx  esi,al
   19d29:	89 75 d0             	mov    DWORD PTR [ebp-0x30],esi
   19d2c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d2f:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   19d33:	0f b6 f8             	movzx  edi,al
   19d36:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d39:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   19d3d:	0f b6 f0             	movzx  esi,al
   19d40:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d43:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19d47:	0f b6 d8             	movzx  ebx,al
   19d4a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d4d:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   19d51:	0f b6 d0             	movzx  edx,al
   19d54:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d57:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19d5b:	0f b6 c0             	movzx  eax,al
   19d5e:	83 ec 0c             	sub    esp,0xc
   19d61:	51                   	push   ecx
   19d62:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   19d65:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   19d68:	57                   	push   edi
   19d69:	56                   	push   esi
   19d6a:	53                   	push   ebx
   19d6b:	52                   	push   edx
   19d6c:	50                   	push   eax
   19d6d:	68 20 31 08 00       	push   0x83120
   19d72:	e8 7c d4 00 00       	call   271f3 <printk>
   19d77:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:76
                break;
   19d7a:	e9 a0 02 00 00       	jmp    1a01f <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
   19d7f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d82:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19d86:	0f b6 c0             	movzx  eax,al
   19d89:	83 e0 01             	and    eax,0x1
   19d8c:	85 c0                	test   eax,eax
   19d8e:	74 07                	je     19d97 <printMPTable+0x11c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 1)
   19d90:	b9 f9 30 08 00       	mov    ecx,0x830f9
   19d95:	eb 05                	jmp    19d9c <printMPTable+0x121>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 2)
   19d97:	b9 fd 30 08 00       	mov    ecx,0x830fd
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 4)
   19d9c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19d9f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   19da2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19da5:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19da9:	0f b6 c0             	movzx  eax,al
   19dac:	51                   	push   ecx
   19dad:	52                   	push   edx
   19dae:	50                   	push   eax
   19daf:	68 4c 31 08 00       	push   0x8314c
   19db4:	e8 3a d4 00 00       	call   271f3 <printk>
   19db9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:79 (discriminator 4)
                break;
   19dbc:	e9 5e 02 00 00       	jmp    1a01f <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19dc1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19dc4:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19dc8:	0f b6 c0             	movzx  eax,al
   19dcb:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19dce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19dd1:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19dd5:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19dd8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ddb:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19ddf:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   19de2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19de5:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19de9:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:90
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
   19dec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19def:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19df3:	0f b7 c0             	movzx  eax,ax
   19df6:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19df9:	85 c0                	test   eax,eax
   19dfb:	74 39                	je     19e36 <printMPTable+0x1bb>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:91
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
   19dfd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e00:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19e04:	0f b7 c0             	movzx  eax,ax
   19e07:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   19e0a:	83 f8 04             	cmp    eax,0x4
   19e0d:	74 20                	je     19e2f <printMPTable+0x1b4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 1)
   19e0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e12:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19e16:	0f b7 c0             	movzx  eax,ax
   19e19:	83 e0 0c             	and    eax,0xc
   19e1c:	83 f8 08             	cmp    eax,0x8
   19e1f:	75 07                	jne    19e28 <printMPTable+0x1ad>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 3)
   19e21:	b9 78 31 08 00       	mov    ecx,0x83178
   19e26:	eb 13                	jmp    19e3b <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 4)
   19e28:	b9 7a 31 08 00       	mov    ecx,0x8317a
   19e2d:	eb 0c                	jmp    19e3b <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 2)
   19e2f:	b9 7c 31 08 00       	mov    ecx,0x8317c
   19e34:	eb 05                	jmp    19e3b <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 1)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19e36:	b9 81 31 08 00       	mov    ecx,0x83181
/home/yogi/src/os/chrisOS/src/cpu/smp.c:87 (discriminator 3)
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
   19e3b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e3e:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19e42:	0f b7 c0             	movzx  eax,ax
   19e45:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 3)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19e48:	85 c0                	test   eax,eax
   19e4a:	74 39                	je     19e85 <printMPTable+0x20a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:88
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
   19e4c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e4f:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19e53:	0f b7 c0             	movzx  eax,ax
   19e56:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   19e59:	83 f8 01             	cmp    eax,0x1
   19e5c:	74 20                	je     19e7e <printMPTable+0x203>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 1)
   19e5e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e61:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19e65:	0f b7 c0             	movzx  eax,ax
   19e68:	83 e0 03             	and    eax,0x3
   19e6b:	83 f8 02             	cmp    eax,0x2
   19e6e:	75 07                	jne    19e77 <printMPTable+0x1fc>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 3)
   19e70:	ba 83 31 08 00       	mov    edx,0x83183
   19e75:	eb 13                	jmp    19e8a <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 4)
   19e77:	ba 87 31 08 00       	mov    edx,0x83187
   19e7c:	eb 0c                	jmp    19e8a <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 2)
   19e7e:	ba 8d 31 08 00       	mov    edx,0x8318d
   19e83:	eb 05                	jmp    19e8a <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 4)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19e85:	ba 90 31 08 00       	mov    edx,0x83190
/home/yogi/src/os/chrisOS/src/cpu/smp.c:82 (discriminator 6)
                        mpptr->irqSrc.irqtype==0?"INT"                      
   19e8a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e8d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 6)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19e91:	84 c0                	test   al,al
   19e93:	74 3d                	je     19ed2 <printMPTable+0x257>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:83
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
   19e95:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19e98:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84
                            :mpptr->irqSrc.irqtype==2?"SMI"
   19e9c:	3c 01                	cmp    al,0x1
   19e9e:	74 2b                	je     19ecb <printMPTable+0x250>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 1)
   19ea0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ea3:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 1)
                            :mpptr->irqSrc.irqtype==3?"Ext"
   19ea7:	3c 02                	cmp    al,0x2
   19ea9:	74 19                	je     19ec4 <printMPTable+0x249>
   19eab:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19eae:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 1)
                            :"unk",                                 //iType
   19eb2:	3c 03                	cmp    al,0x3
   19eb4:	75 07                	jne    19ebd <printMPTable+0x242>
   19eb6:	b8 93 31 08 00       	mov    eax,0x83193
   19ebb:	eb 1a                	jmp    19ed7 <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 2)
   19ebd:	b8 97 31 08 00       	mov    eax,0x83197
   19ec2:	eb 13                	jmp    19ed7 <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 2)
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
   19ec4:	b8 9b 31 08 00       	mov    eax,0x8319b
   19ec9:	eb 0c                	jmp    19ed7 <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 2)
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
   19ecb:	b8 9f 31 08 00       	mov    eax,0x8319f
   19ed0:	eb 05                	jmp    19ed7 <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 7)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   19ed2:	b8 a3 31 08 00       	mov    eax,0x831a3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 9)
   19ed7:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   19eda:	57                   	push   edi
   19edb:	56                   	push   esi
   19edc:	53                   	push   ebx
   19edd:	51                   	push   ecx
   19ede:	52                   	push   edx
   19edf:	50                   	push   eax
   19ee0:	68 a8 31 08 00       	push   0x831a8
   19ee5:	e8 09 d3 00 00       	call   271f3 <printk>
   19eea:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:94 (discriminator 9)
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
   19eed:	e9 2d 01 00 00       	jmp    1a01f <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19ef2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ef5:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19ef9:	0f b6 c0             	movzx  eax,al
   19efc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19eff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f02:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f06:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19f09:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f0c:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f10:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   19f13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f16:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f1a:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:105
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
   19f1d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f20:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19f24:	0f b7 c0             	movzx  eax,ax
   19f27:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f2a:	85 c0                	test   eax,eax
   19f2c:	74 39                	je     19f67 <printMPTable+0x2ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:106
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
   19f2e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f31:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19f35:	0f b7 c0             	movzx  eax,ax
   19f38:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   19f3b:	83 f8 04             	cmp    eax,0x4
   19f3e:	74 20                	je     19f60 <printMPTable+0x2e5>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 1)
   19f40:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f43:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19f47:	0f b7 c0             	movzx  eax,ax
   19f4a:	83 e0 0c             	and    eax,0xc
   19f4d:	83 f8 08             	cmp    eax,0x8
   19f50:	75 07                	jne    19f59 <printMPTable+0x2de>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 3)
   19f52:	b9 78 31 08 00       	mov    ecx,0x83178
   19f57:	eb 13                	jmp    19f6c <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 4)
   19f59:	b9 7a 31 08 00       	mov    ecx,0x8317a
   19f5e:	eb 0c                	jmp    19f6c <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 2)
   19f60:	b9 7c 31 08 00       	mov    ecx,0x8317c
   19f65:	eb 05                	jmp    19f6c <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 1)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f67:	b9 81 31 08 00       	mov    ecx,0x83181
/home/yogi/src/os/chrisOS/src/cpu/smp.c:102 (discriminator 3)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
   19f6c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f6f:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19f73:	0f b7 c0             	movzx  eax,ax
   19f76:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 3)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19f79:	85 c0                	test   eax,eax
   19f7b:	74 39                	je     19fb6 <printMPTable+0x33b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:103
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
   19f7d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f80:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19f84:	0f b7 c0             	movzx  eax,ax
   19f87:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   19f8a:	83 f8 01             	cmp    eax,0x1
   19f8d:	74 20                	je     19faf <printMPTable+0x334>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 1)
   19f8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f92:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   19f96:	0f b7 c0             	movzx  eax,ax
   19f99:	83 e0 03             	and    eax,0x3
   19f9c:	83 f8 02             	cmp    eax,0x2
   19f9f:	75 07                	jne    19fa8 <printMPTable+0x32d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 3)
   19fa1:	ba 83 31 08 00       	mov    edx,0x83183
   19fa6:	eb 13                	jmp    19fbb <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 4)
   19fa8:	ba 87 31 08 00       	mov    edx,0x83187
   19fad:	eb 0c                	jmp    19fbb <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 2)
   19faf:	ba 8d 31 08 00       	mov    edx,0x8318d
   19fb4:	eb 05                	jmp    19fbb <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 4)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19fb6:	ba 90 31 08 00       	mov    edx,0x83190
/home/yogi/src/os/chrisOS/src/cpu/smp.c:97 (discriminator 6)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
   19fbb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fbe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 6)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   19fc2:	84 c0                	test   al,al
   19fc4:	74 3d                	je     1a003 <printMPTable+0x388>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:98
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
   19fc6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fc9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99
                            :mpptr->lintSrc.irqtype==2?"SMI"
   19fcd:	3c 01                	cmp    al,0x1
   19fcf:	74 2b                	je     19ffc <printMPTable+0x381>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 1)
   19fd1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fd4:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 1)
                            :mpptr->lintSrc.irqtype==3?"Ext"
   19fd8:	3c 02                	cmp    al,0x2
   19fda:	74 19                	je     19ff5 <printMPTable+0x37a>
   19fdc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fdf:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 1)
                            :"unk", //iType
   19fe3:	3c 03                	cmp    al,0x3
   19fe5:	75 07                	jne    19fee <printMPTable+0x373>
   19fe7:	b8 93 31 08 00       	mov    eax,0x83193
   19fec:	eb 1a                	jmp    1a008 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 2)
   19fee:	b8 97 31 08 00       	mov    eax,0x83197
   19ff3:	eb 13                	jmp    1a008 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 2)
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
   19ff5:	b8 9b 31 08 00       	mov    eax,0x8319b
   19ffa:	eb 0c                	jmp    1a008 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 2)
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
   19ffc:	b8 9f 31 08 00       	mov    eax,0x8319f
   1a001:	eb 05                	jmp    1a008 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 7)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a003:	b8 a3 31 08 00       	mov    eax,0x831a3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 9)
   1a008:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a00b:	57                   	push   edi
   1a00c:	56                   	push   esi
   1a00d:	53                   	push   ebx
   1a00e:	51                   	push   ecx
   1a00f:	52                   	push   edx
   1a010:	50                   	push   eax
   1a011:	68 e0 31 08 00       	push   0x831e0
   1a016:	e8 d8 d1 00 00       	call   271f3 <printk>
   1a01b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:109 (discriminator 9)
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
   1a01e:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:113
            default:
                return;
        }
        mpptr++;
   1a01f:	83 45 e4 20          	add    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:114
        cnt++;
   1a023:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   1a027:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a02b:	7e 40                	jle    1a06d <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115 (discriminator 1)
   1a02d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1a030:	8d 58 02             	lea    ebx,[eax+0x2]
   1a033:	e8 7b df ff ff       	call   17fb3 <cursorGetMaxY>
   1a038:	89 c1                	mov    ecx,eax
   1a03a:	89 d8                	mov    eax,ebx
   1a03c:	99                   	cdq    
   1a03d:	f7 f9                	idiv   ecx
   1a03f:	89 d0                	mov    eax,edx
   1a041:	85 c0                	test   eax,eax
   1a043:	75 28                	jne    1a06d <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:117
        {
            puts("Paused, press a key to continue");
   1a045:	83 ec 0c             	sub    esp,0xc
   1a048:	68 18 32 08 00       	push   0x83218
   1a04d:	e8 20 e0 ff ff       	call   18072 <puts>
   1a052:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:118
            waitForKeyboardKey();
   1a055:	e8 f8 71 ff ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:119
            cursorMoveTo(0,cursorGetPosY());
   1a05a:	e8 84 df ff ff       	call   17fe3 <cursorGetPosY>
   1a05f:	83 ec 08             	sub    esp,0x8
   1a062:	50                   	push   eax
   1a063:	6a 00                	push   0x0
   1a065:	e8 d9 de ff ff       	call   17f43 <cursorMoveTo>
   1a06a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
void HIGH_CODE_SECTION printMPTable()
{
    mpConfig_t* mpptr=kMPConfigTable;
    int cnt=0;
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   1a06d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a070:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1a073:	83 f8 ff             	cmp    eax,0xffffffff
   1a076:	0f 85 1c fc ff ff    	jne    19c98 <printMPTable+0x1d>
   1a07c:	eb 01                	jmp    1a07f <printMPTable+0x404>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:111
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
            default:
                return;
   1a07e:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:123
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }

    }
}
   1a07f:	8d 65 f4             	lea    esp,[ebp-0xc]
   1a082:	5b                   	pop    ebx
   1a083:	5e                   	pop    esi
   1a084:	5f                   	pop    edi
   1a085:	5d                   	pop    ebp
   1a086:	c3                   	ret    

0001a087 <mpInit>:
mpInit():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:126

unsigned HIGH_CODE_SECTION mpInit()
{
   1a087:	55                   	push   ebp
   1a088:	89 e5                	mov    ebp,esp
   1a08a:	57                   	push   edi
   1a08b:	56                   	push   esi
   1a08c:	53                   	push   ebx
   1a08d:	83 ec 5c             	sub    esp,0x5c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:129
    uint8_t* recPtr;
    char lTempString[15];
    memset(lTempString, 0, 15);
   1a090:	83 ec 04             	sub    esp,0x4
   1a093:	6a 0f                	push   0xf
   1a095:	6a 00                	push   0x0
   1a097:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a09a:	50                   	push   eax
   1a09b:	e8 dd af 00 00       	call   2507d <memset>
   1a0a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:130
    mpFindTables();
   1a0a3:	e8 f9 fa ff ff       	call   19ba1 <mpFindTables>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:131
    printd(DEBUG_MP,"MP table found @ 0x%08X, sig=%c%c%c%c, features=%u/%u/%u/%u/%u, length=%u\n", mp, mp->signature[0], mp->signature[1], mp->signature[2], mp->signature[3], mp->feature1, mp->feature2, mp->feature3, mp->feature4, mp->feature5, mp->length);
   1a0a8:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0ad:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1a0b1:	0f b6 f0             	movzx  esi,al
   1a0b4:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0b9:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1a0bd:	0f b6 f8             	movzx  edi,al
   1a0c0:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0c5:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1a0c9:	0f b6 c0             	movzx  eax,al
   1a0cc:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a0cf:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0d4:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
   1a0d8:	0f b6 d8             	movzx  ebx,al
   1a0db:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
   1a0de:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0e3:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
   1a0e7:	0f b6 c8             	movzx  ecx,al
   1a0ea:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
   1a0ed:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a0f2:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a0f6:	0f b6 d0             	movzx  edx,al
   1a0f9:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   1a0fc:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a101:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a105:	0f be c0             	movsx  eax,al
   1a108:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
   1a10b:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a110:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a114:	0f be d8             	movsx  ebx,al
   1a117:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a11c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a120:	0f be c8             	movsx  ecx,al
   1a123:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a128:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a12b:	0f be d0             	movsx  edx,al
   1a12e:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a133:	83 ec 0c             	sub    esp,0xc
   1a136:	56                   	push   esi
   1a137:	57                   	push   edi
   1a138:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a13b:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a13e:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
   1a141:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
   1a144:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
   1a147:	53                   	push   ebx
   1a148:	51                   	push   ecx
   1a149:	52                   	push   edx
   1a14a:	50                   	push   eax
   1a14b:	68 4c 32 08 00       	push   0x8324c
   1a150:	68 00 08 00 00       	push   0x800
   1a155:	e8 b9 d0 00 00       	call   27213 <printd>
   1a15a:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/cpu/smp.c:132
    if (mp->feature1!=0)
   1a15d:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a162:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a166:	84 c0                	test   al,al
   1a168:	74 27                	je     1a191 <mpInit+0x10a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:134
    {
        printk("NOTE: need to implement Intel MP default configurations (%u)",mp->feature1);
   1a16a:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a16f:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a173:	0f b6 c0             	movzx  eax,al
   1a176:	83 ec 08             	sub    esp,0x8
   1a179:	50                   	push   eax
   1a17a:	68 98 32 08 00       	push   0x83298
   1a17f:	e8 6f d0 00 00       	call   271f3 <printk>
   1a184:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:135
        return false;
   1a187:	b8 00 00 00 00       	mov    eax,0x0
   1a18c:	e9 12 0a 00 00       	jmp    1aba3 <mpInit+0xb1c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:137
    }
    mc=(struct mpc_table*)mp->physptr;
   1a191:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a196:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a199:	a3 6c 65 09 00       	mov    ds:0x9656c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:138
    printd(DEBUG_MP,"MC table found @ 0x%08X, sig=%c%c%c%c, length=%u, lapic=0x%08X, OEM tbl=0x%08X\n", mc, mc->signature[0], mc->signature[1], mc->signature[2], mc->signature[3], mc->length, mc->lapic, mc->oemptr);
   1a19e:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1a3:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
   1a1a6:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1ab:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1a1ae:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a1b1:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1b6:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
   1a1ba:	0f b7 f0             	movzx  esi,ax
   1a1bd:	89 75 b0             	mov    DWORD PTR [ebp-0x50],esi
   1a1c0:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1c5:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a1c9:	0f be f8             	movsx  edi,al
   1a1cc:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1d1:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a1d5:	0f be f0             	movsx  esi,al
   1a1d8:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1dd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a1e1:	0f be d8             	movsx  ebx,al
   1a1e4:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1e9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a1ec:	0f be d0             	movsx  edx,al
   1a1ef:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a1f4:	83 ec 08             	sub    esp,0x8
   1a1f7:	51                   	push   ecx
   1a1f8:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a1fb:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a1fe:	57                   	push   edi
   1a1ff:	56                   	push   esi
   1a200:	53                   	push   ebx
   1a201:	52                   	push   edx
   1a202:	50                   	push   eax
   1a203:	68 d8 32 08 00       	push   0x832d8
   1a208:	68 00 08 00 00       	push   0x800
   1a20d:	e8 01 d0 00 00       	call   27213 <printd>
   1a212:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:139
    memcpy(lTempString, mc->oem,4);
   1a215:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a21a:	83 c0 08             	add    eax,0x8
   1a21d:	83 ec 04             	sub    esp,0x4
   1a220:	6a 04                	push   0x4
   1a222:	50                   	push   eax
   1a223:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a226:	50                   	push   eax
   1a227:	e8 2c b9 00 00       	call   25b58 <memcpy>
   1a22c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:140
    printd(DEBUG_MP,"\tMPC OEM '%s'", lTempString);
   1a22f:	83 ec 04             	sub    esp,0x4
   1a232:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a235:	50                   	push   eax
   1a236:	68 28 33 08 00       	push   0x83328
   1a23b:	68 00 08 00 00       	push   0x800
   1a240:	e8 ce cf 00 00       	call   27213 <printd>
   1a245:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:141
    memset(lTempString, 0, 15);
   1a248:	83 ec 04             	sub    esp,0x4
   1a24b:	6a 0f                	push   0xf
   1a24d:	6a 00                	push   0x0
   1a24f:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a252:	50                   	push   eax
   1a253:	e8 25 ae 00 00       	call   2507d <memset>
   1a258:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:142
        memcpy(lTempString, mc->productid,12);
   1a25b:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a260:	83 c0 10             	add    eax,0x10
   1a263:	83 ec 04             	sub    esp,0x4
   1a266:	6a 0c                	push   0xc
   1a268:	50                   	push   eax
   1a269:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a26c:	50                   	push   eax
   1a26d:	e8 e6 b8 00 00       	call   25b58 <memcpy>
   1a272:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:143
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
   1a275:	83 ec 04             	sub    esp,0x4
   1a278:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a27b:	50                   	push   eax
   1a27c:	68 36 33 08 00       	push   0x83336
   1a281:	68 00 08 00 00       	push   0x800
   1a286:	e8 88 cf 00 00       	call   27213 <printd>
   1a28b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:144
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
   1a28e:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a293:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a296:	83 c0 2c             	add    eax,0x2c
   1a299:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:145
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
   1a29c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a2a1:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a2a5:	0f b7 c0             	movzx  eax,ax
   1a2a8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a2ab:	50                   	push   eax
   1a2ac:	68 4c 33 08 00       	push   0x8334c
   1a2b1:	68 00 08 00 00       	push   0x800
   1a2b6:	e8 58 cf 00 00       	call   27213 <printd>
   1a2bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146
    for (int cnt=0;cnt< mc->count;cnt++)
   1a2be:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   1a2c5:	e9 6f 08 00 00       	jmp    1ab39 <mpInit+0xab2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:148
    {
        switch((int)*(uint8_t*)recPtr)
   1a2ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2cd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a2d0:	0f b6 c0             	movzx  eax,al
   1a2d3:	83 f8 04             	cmp    eax,0x4
   1a2d6:	0f 87 04 08 00 00    	ja     1aae0 <mpInit+0xa59>
   1a2dc:	8b 04 85 b8 34 08 00 	mov    eax,DWORD PTR [eax*4+0x834b8]
   1a2e3:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:152
        {
            case 0:
                //TODO: Add all this info to a kernel structure
                printd(DEBUG_MP,"\tCPU:  ");
   1a2e5:	83 ec 08             	sub    esp,0x8
   1a2e8:	68 73 33 08 00       	push   0x83373
   1a2ed:	68 00 08 00 00       	push   0x800
   1a2f2:	e8 1c cf 00 00       	call   27213 <printd>
   1a2f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:153
                struct mpc_cpu* cpu=(struct mpc_cpu*)recPtr;
   1a2fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a2fd:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:154
                memcpy(kMPConfigTable[cnt].rec,recPtr,20);
   1a300:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a305:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a308:	c1 e2 05             	shl    edx,0x5
   1a30b:	01 d0                	add    eax,edx
   1a30d:	83 ec 04             	sub    esp,0x4
   1a310:	6a 14                	push   0x14
   1a312:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a315:	50                   	push   eax
   1a316:	e8 3d b8 00 00       	call   25b58 <memcpy>
   1a31b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:155
                if (cnt==0)
   1a31e:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a322:	75 16                	jne    1a33a <mpInit+0x2b3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:156
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a324:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a329:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a32c:	c1 e2 05             	shl    edx,0x5
   1a32f:	01 d0                	add    eax,edx
   1a331:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a338:	eb 72                	jmp    1a3ac <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:157
                else if (cnt==mc->count-1)
   1a33a:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a33f:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a343:	0f b7 c0             	movzx  eax,ax
   1a346:	83 e8 01             	sub    eax,0x1
   1a349:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a34c:	75 16                	jne    1a364 <mpInit+0x2dd>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:158
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a34e:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a353:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a356:	c1 e2 05             	shl    edx,0x5
   1a359:	01 d0                	add    eax,edx
   1a35b:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a362:	eb 48                	jmp    1a3ac <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:161
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a364:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a369:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a36c:	c1 e2 05             	shl    edx,0x5
   1a36f:	01 d0                	add    eax,edx
   1a371:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a377:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a37a:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a380:	c1 e1 05             	shl    ecx,0x5
   1a383:	01 ca                	add    edx,ecx
   1a385:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:162
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a388:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a38d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a390:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a396:	c1 e2 05             	shl    edx,0x5
   1a399:	01 d0                	add    eax,edx
   1a39b:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a3a1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a3a4:	c1 e1 05             	shl    ecx,0x5
   1a3a7:	01 ca                	add    edx,ecx
   1a3a9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:164
                }
                kMPConfigTable[cnt].recType=CPU;
   1a3ac:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a3b1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a3b4:	c1 e2 05             	shl    edx,0x5
   1a3b7:	01 d0                	add    eax,edx
   1a3b9:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165
                printd(DEBUG_MP,"APICId=%u, Enabled=%s, %s\n", cpu->apicid, (cpu->cpuflag&0x1)?"yes":"no", (cpu->cpuflag&0x2)?"BSP":"");
   1a3c0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a3c3:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a3c7:	0f b6 c0             	movzx  eax,al
   1a3ca:	83 e0 02             	and    eax,0x2
   1a3cd:	85 c0                	test   eax,eax
   1a3cf:	74 07                	je     1a3d8 <mpInit+0x351>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 1)
   1a3d1:	b9 f4 30 08 00       	mov    ecx,0x830f4
   1a3d6:	eb 05                	jmp    1a3dd <mpInit+0x356>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 2)
   1a3d8:	b9 f8 30 08 00       	mov    ecx,0x830f8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 4)
   1a3dd:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a3e0:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a3e4:	0f b6 c0             	movzx  eax,al
   1a3e7:	83 e0 01             	and    eax,0x1
   1a3ea:	85 c0                	test   eax,eax
   1a3ec:	74 07                	je     1a3f5 <mpInit+0x36e>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 5)
   1a3ee:	ba f9 30 08 00       	mov    edx,0x830f9
   1a3f3:	eb 05                	jmp    1a3fa <mpInit+0x373>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 6)
   1a3f5:	ba fd 30 08 00       	mov    edx,0x830fd
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 8)
   1a3fa:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a3fd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a401:	0f b6 c0             	movzx  eax,al
   1a404:	83 ec 0c             	sub    esp,0xc
   1a407:	51                   	push   ecx
   1a408:	52                   	push   edx
   1a409:	50                   	push   eax
   1a40a:	68 7b 33 08 00       	push   0x8337b
   1a40f:	68 00 08 00 00       	push   0x800
   1a414:	e8 fa cd 00 00       	call   27213 <printd>
   1a419:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:166 (discriminator 8)
                recPtr+=20;
   1a41c:	83 45 e4 14          	add    DWORD PTR [ebp-0x1c],0x14
/home/yogi/src/os/chrisOS/src/cpu/smp.c:167 (discriminator 8)
                break;
   1a420:	e9 df 06 00 00       	jmp    1ab04 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:169
            case 1:
                printd(DEBUG_MP,"\tBus:  ");
   1a425:	83 ec 08             	sub    esp,0x8
   1a428:	68 96 33 08 00       	push   0x83396
   1a42d:	68 00 08 00 00       	push   0x800
   1a432:	e8 dc cd 00 00       	call   27213 <printd>
   1a437:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:170
                struct mpc_bus* bus=(struct mpc_bus*)recPtr;
   1a43a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a43d:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:171
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a440:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a445:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a448:	c1 e2 05             	shl    edx,0x5
   1a44b:	01 d0                	add    eax,edx
   1a44d:	83 ec 04             	sub    esp,0x4
   1a450:	6a 08                	push   0x8
   1a452:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a455:	50                   	push   eax
   1a456:	e8 fd b6 00 00       	call   25b58 <memcpy>
   1a45b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:172
                if (cnt==0)
   1a45e:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a462:	75 16                	jne    1a47a <mpInit+0x3f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:173
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a464:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a469:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a46c:	c1 e2 05             	shl    edx,0x5
   1a46f:	01 d0                	add    eax,edx
   1a471:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a478:	eb 72                	jmp    1a4ec <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:174
                else if (cnt==mc->count-1)
   1a47a:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a47f:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a483:	0f b7 c0             	movzx  eax,ax
   1a486:	83 e8 01             	sub    eax,0x1
   1a489:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a48c:	75 16                	jne    1a4a4 <mpInit+0x41d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:175
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a48e:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a493:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a496:	c1 e2 05             	shl    edx,0x5
   1a499:	01 d0                	add    eax,edx
   1a49b:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a4a2:	eb 48                	jmp    1a4ec <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:178
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a4a4:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a4a9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a4ac:	c1 e2 05             	shl    edx,0x5
   1a4af:	01 d0                	add    eax,edx
   1a4b1:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a4b7:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a4ba:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a4c0:	c1 e1 05             	shl    ecx,0x5
   1a4c3:	01 ca                	add    edx,ecx
   1a4c5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:179
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a4c8:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a4cd:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a4d0:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a4d6:	c1 e2 05             	shl    edx,0x5
   1a4d9:	01 d0                	add    eax,edx
   1a4db:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a4e1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a4e4:	c1 e1 05             	shl    ecx,0x5
   1a4e7:	01 ca                	add    edx,ecx
   1a4e9:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:181
                }
                recPtr+=8;
   1a4ec:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:182
                kMPConfigTable[cnt].recType=BUS;
   1a4f0:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a4f5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a4f8:	c1 e2 05             	shl    edx,0x5
   1a4fb:	01 d0                	add    eax,edx
   1a4fd:	c7 40 14 01 00 00 00 	mov    DWORD PTR [eax+0x14],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:183
                printd(DEBUG_MP,"ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", bus->busid, bus->bustype[0], bus->bustype[1], bus->bustype[2], bus->bustype[3], bus->bustype[4], bus->bustype[5], bus->type );
   1a504:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a507:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a50a:	0f b6 c8             	movzx  ecx,al
   1a50d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a510:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   1a514:	0f b6 c0             	movzx  eax,al
   1a517:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a51a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a51d:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   1a521:	0f b6 f8             	movzx  edi,al
   1a524:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   1a527:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a52a:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   1a52e:	0f b6 f8             	movzx  edi,al
   1a531:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a534:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1a538:	0f b6 f0             	movzx  esi,al
   1a53b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a53e:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a542:	0f b6 d8             	movzx  ebx,al
   1a545:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a548:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a54c:	0f b6 d0             	movzx  edx,al
   1a54f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a552:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a556:	0f b6 c0             	movzx  eax,al
   1a559:	83 ec 08             	sub    esp,0x8
   1a55c:	51                   	push   ecx
   1a55d:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a560:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a563:	57                   	push   edi
   1a564:	56                   	push   esi
   1a565:	53                   	push   ebx
   1a566:	52                   	push   edx
   1a567:	50                   	push   eax
   1a568:	68 a0 33 08 00       	push   0x833a0
   1a56d:	68 00 08 00 00       	push   0x800
   1a572:	e8 9c cc 00 00       	call   27213 <printd>
   1a577:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:184
                break;
   1a57a:	e9 85 05 00 00       	jmp    1ab04 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:186
            case 2:
                printd(DEBUG_MP,"\tAPIC: ");
   1a57f:	83 ec 08             	sub    esp,0x8
   1a582:	68 c6 33 08 00       	push   0x833c6
   1a587:	68 00 08 00 00       	push   0x800
   1a58c:	e8 82 cc 00 00       	call   27213 <printd>
   1a591:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:187
                struct mpc_ioapic* apic=(struct mpc_ioapic*)recPtr;
   1a594:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a597:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:188
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a59a:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a59f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a5a2:	c1 e2 05             	shl    edx,0x5
   1a5a5:	01 d0                	add    eax,edx
   1a5a7:	83 ec 04             	sub    esp,0x4
   1a5aa:	6a 08                	push   0x8
   1a5ac:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a5af:	50                   	push   eax
   1a5b0:	e8 a3 b5 00 00       	call   25b58 <memcpy>
   1a5b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:189
                if (cnt==0)
   1a5b8:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a5bc:	75 16                	jne    1a5d4 <mpInit+0x54d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:190
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a5be:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a5c3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a5c6:	c1 e2 05             	shl    edx,0x5
   1a5c9:	01 d0                	add    eax,edx
   1a5cb:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a5d2:	eb 72                	jmp    1a646 <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:191
                else if (cnt==mc->count-1)
   1a5d4:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a5d9:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a5dd:	0f b7 c0             	movzx  eax,ax
   1a5e0:	83 e8 01             	sub    eax,0x1
   1a5e3:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a5e6:	75 16                	jne    1a5fe <mpInit+0x577>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:192
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a5e8:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a5ed:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a5f0:	c1 e2 05             	shl    edx,0x5
   1a5f3:	01 d0                	add    eax,edx
   1a5f5:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a5fc:	eb 48                	jmp    1a646 <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:195
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a5fe:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a603:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a606:	c1 e2 05             	shl    edx,0x5
   1a609:	01 d0                	add    eax,edx
   1a60b:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a611:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a614:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a61a:	c1 e1 05             	shl    ecx,0x5
   1a61d:	01 ca                	add    edx,ecx
   1a61f:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:196
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a622:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a627:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a62a:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a630:	c1 e2 05             	shl    edx,0x5
   1a633:	01 d0                	add    eax,edx
   1a635:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a63b:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a63e:	c1 e1 05             	shl    ecx,0x5
   1a641:	01 ca                	add    edx,ecx
   1a643:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:198
                }
                kMPConfigTable[cnt].recType=IOAPIC;
   1a646:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a64b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a64e:	c1 e2 05             	shl    edx,0x5
   1a651:	01 d0                	add    eax,edx
   1a653:	c7 40 14 02 00 00 00 	mov    DWORD PTR [eax+0x14],0x2
/home/yogi/src/os/chrisOS/src/cpu/smp.c:199
                recPtr+=8;
   1a65a:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200
                printd(DEBUG_MP,"ID=%02X, Address=0x%08X, Enabled=%s\n",apic->apicid, apic->apicaddr, apic->flags&0x1?"yes":"no");
   1a65e:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a661:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a665:	0f b6 c0             	movzx  eax,al
   1a668:	83 e0 01             	and    eax,0x1
   1a66b:	85 c0                	test   eax,eax
   1a66d:	74 07                	je     1a676 <mpInit+0x5ef>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 1)
   1a66f:	b9 f9 30 08 00       	mov    ecx,0x830f9
   1a674:	eb 05                	jmp    1a67b <mpInit+0x5f4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 2)
   1a676:	b9 fd 30 08 00       	mov    ecx,0x830fd
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 4)
   1a67b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a67e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1a681:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a684:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a688:	0f b6 c0             	movzx  eax,al
   1a68b:	83 ec 0c             	sub    esp,0xc
   1a68e:	51                   	push   ecx
   1a68f:	52                   	push   edx
   1a690:	50                   	push   eax
   1a691:	68 d0 33 08 00       	push   0x833d0
   1a696:	68 00 08 00 00       	push   0x800
   1a69b:	e8 73 cb 00 00       	call   27213 <printd>
   1a6a0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:201 (discriminator 4)
                kIOAPICPtr=(uintptr_t*)apic->apicaddr;
   1a6a3:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a6a6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a6a9:	a3 3c 03 12 00       	mov    ds:0x12033c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:202 (discriminator 4)
                break;
   1a6ae:	e9 51 04 00 00       	jmp    1ab04 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:204
            case 3:
                printd(DEBUG_MP,"\tIRQ:  ");
   1a6b3:	83 ec 08             	sub    esp,0x8
   1a6b6:	68 f5 33 08 00       	push   0x833f5
   1a6bb:	68 00 08 00 00       	push   0x800
   1a6c0:	e8 4e cb 00 00       	call   27213 <printd>
   1a6c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:205
                struct mpc_intsrc*intr=(struct mpc_intsrc*)recPtr;
   1a6c8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a6cb:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:206
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a6ce:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a6d3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a6d6:	c1 e2 05             	shl    edx,0x5
   1a6d9:	01 d0                	add    eax,edx
   1a6db:	83 ec 04             	sub    esp,0x4
   1a6de:	6a 08                	push   0x8
   1a6e0:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a6e3:	50                   	push   eax
   1a6e4:	e8 6f b4 00 00       	call   25b58 <memcpy>
   1a6e9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:207
                if (cnt==0)
   1a6ec:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a6f0:	75 16                	jne    1a708 <mpInit+0x681>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:208
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a6f2:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a6f7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a6fa:	c1 e2 05             	shl    edx,0x5
   1a6fd:	01 d0                	add    eax,edx
   1a6ff:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a706:	eb 72                	jmp    1a77a <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:209
                else if (cnt==mc->count-1)
   1a708:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a70d:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a711:	0f b7 c0             	movzx  eax,ax
   1a714:	83 e8 01             	sub    eax,0x1
   1a717:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a71a:	75 16                	jne    1a732 <mpInit+0x6ab>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:210
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a71c:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a721:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a724:	c1 e2 05             	shl    edx,0x5
   1a727:	01 d0                	add    eax,edx
   1a729:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a730:	eb 48                	jmp    1a77a <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:213
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a732:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a737:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a73a:	c1 e2 05             	shl    edx,0x5
   1a73d:	01 d0                	add    eax,edx
   1a73f:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a745:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a748:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a74e:	c1 e1 05             	shl    ecx,0x5
   1a751:	01 ca                	add    edx,ecx
   1a753:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:214
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a756:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a75b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a75e:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a764:	c1 e2 05             	shl    edx,0x5
   1a767:	01 d0                	add    eax,edx
   1a769:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a76f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a772:	c1 e1 05             	shl    ecx,0x5
   1a775:	01 ca                	add    edx,ecx
   1a777:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:216
                }
                kMPConfigTable[cnt].recType = IOINTASS;
   1a77a:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a77f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a782:	c1 e2 05             	shl    edx,0x5
   1a785:	01 d0                	add    eax,edx
   1a787:	c7 40 14 03 00 00 00 	mov    DWORD PTR [eax+0x14],0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:217
                recPtr+=8;
   1a78e:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a792:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a795:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a799:	0f b6 c0             	movzx  eax,al
   1a79c:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a79f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7a2:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a7a6:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a7a9:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7ac:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a7b0:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1a7b3:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7b6:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a7ba:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:227
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
   1a7bd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7c0:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a7c4:	0f b7 c0             	movzx  eax,ax
   1a7c7:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a7ca:	85 c0                	test   eax,eax
   1a7cc:	74 39                	je     1a807 <mpInit+0x780>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:228
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
   1a7ce:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7d1:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a7d5:	0f b7 c0             	movzx  eax,ax
   1a7d8:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
   1a7db:	83 f8 04             	cmp    eax,0x4
   1a7de:	74 20                	je     1a800 <mpInit+0x779>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 1)
   1a7e0:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a7e3:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a7e7:	0f b7 c0             	movzx  eax,ax
   1a7ea:	83 e0 0c             	and    eax,0xc
   1a7ed:	83 f8 08             	cmp    eax,0x8
   1a7f0:	75 07                	jne    1a7f9 <mpInit+0x772>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 3)
   1a7f2:	b9 78 31 08 00       	mov    ecx,0x83178
   1a7f7:	eb 13                	jmp    1a80c <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 4)
   1a7f9:	b9 7a 31 08 00       	mov    ecx,0x8317a
   1a7fe:	eb 0c                	jmp    1a80c <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 2)
   1a800:	b9 7c 31 08 00       	mov    ecx,0x8317c
   1a805:	eb 05                	jmp    1a80c <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a807:	b9 81 31 08 00       	mov    ecx,0x83181
/home/yogi/src/os/chrisOS/src/cpu/smp.c:224 (discriminator 3)
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
   1a80c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a80f:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a813:	0f b7 c0             	movzx  eax,ax
   1a816:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a819:	85 c0                	test   eax,eax
   1a81b:	74 39                	je     1a856 <mpInit+0x7cf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:225
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
   1a81d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a820:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a824:	0f b7 c0             	movzx  eax,ax
   1a827:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a82a:	83 f8 01             	cmp    eax,0x1
   1a82d:	74 20                	je     1a84f <mpInit+0x7c8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 1)
   1a82f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a832:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a836:	0f b7 c0             	movzx  eax,ax
   1a839:	83 e0 03             	and    eax,0x3
   1a83c:	83 f8 02             	cmp    eax,0x2
   1a83f:	75 07                	jne    1a848 <mpInit+0x7c1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 3)
   1a841:	ba 83 31 08 00       	mov    edx,0x83183
   1a846:	eb 13                	jmp    1a85b <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 4)
   1a848:	ba 87 31 08 00       	mov    edx,0x83187
   1a84d:	eb 0c                	jmp    1a85b <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 2)
   1a84f:	ba 8d 31 08 00       	mov    edx,0x8318d
   1a854:	eb 05                	jmp    1a85b <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a856:	ba 90 31 08 00       	mov    edx,0x83190
/home/yogi/src/os/chrisOS/src/cpu/smp.c:219 (discriminator 6)
                        intr->irqtype==0?"INT"                      
   1a85b:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a85e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a862:	84 c0                	test   al,al
   1a864:	74 3d                	je     1a8a3 <mpInit+0x81c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:220
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
   1a866:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a869:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221
                            :intr->irqtype==2?"SMI"
   1a86d:	3c 01                	cmp    al,0x1
   1a86f:	74 2b                	je     1a89c <mpInit+0x815>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 1)
   1a871:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a874:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 1)
                            :intr->irqtype==3?"Ext"
   1a878:	3c 02                	cmp    al,0x2
   1a87a:	74 19                	je     1a895 <mpInit+0x80e>
   1a87c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1a87f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 1)
                            :"unk",                                 //iType
   1a883:	3c 03                	cmp    al,0x3
   1a885:	75 07                	jne    1a88e <mpInit+0x807>
   1a887:	b8 93 31 08 00       	mov    eax,0x83193
   1a88c:	eb 1a                	jmp    1a8a8 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 2)
   1a88e:	b8 97 31 08 00       	mov    eax,0x83197
   1a893:	eb 13                	jmp    1a8a8 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
   1a895:	b8 9b 31 08 00       	mov    eax,0x8319b
   1a89a:	eb 0c                	jmp    1a8a8 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 2)
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
   1a89c:	b8 9f 31 08 00       	mov    eax,0x8319f
   1a8a1:	eb 05                	jmp    1a8a8 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1a8a3:	b8 a3 31 08 00       	mov    eax,0x831a3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 9)
   1a8a8:	83 ec 0c             	sub    esp,0xc
   1a8ab:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a8ae:	57                   	push   edi
   1a8af:	56                   	push   esi
   1a8b0:	53                   	push   ebx
   1a8b1:	51                   	push   ecx
   1a8b2:	52                   	push   edx
   1a8b3:	50                   	push   eax
   1a8b4:	68 00 34 08 00       	push   0x83400
   1a8b9:	68 00 08 00 00       	push   0x800
   1a8be:	e8 50 c9 00 00       	call   27213 <printd>
   1a8c3:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:231 (discriminator 9)
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
                break;
   1a8c6:	e9 39 02 00 00       	jmp    1ab04 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:233
            case 4:
                printd(DEBUG_MP,"\tLINT: ");
   1a8cb:	83 ec 08             	sub    esp,0x8
   1a8ce:	68 3e 34 08 00       	push   0x8343e
   1a8d3:	68 00 08 00 00       	push   0x800
   1a8d8:	e8 36 c9 00 00       	call   27213 <printd>
   1a8dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:234
                struct mpc_lintsrc* lint=(struct mpc_lintsrc*)recPtr;
   1a8e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a8e3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:235
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a8e6:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a8eb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8ee:	c1 e2 05             	shl    edx,0x5
   1a8f1:	01 d0                	add    eax,edx
   1a8f3:	83 ec 04             	sub    esp,0x4
   1a8f6:	6a 08                	push   0x8
   1a8f8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a8fb:	50                   	push   eax
   1a8fc:	e8 57 b2 00 00       	call   25b58 <memcpy>
   1a901:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:236
                if (cnt==0)
   1a904:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a908:	75 16                	jne    1a920 <mpInit+0x899>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:237
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a90a:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a90f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a912:	c1 e2 05             	shl    edx,0x5
   1a915:	01 d0                	add    eax,edx
   1a917:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a91e:	eb 72                	jmp    1a992 <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:238
                else if (cnt==mc->count-1)
   1a920:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a925:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a929:	0f b7 c0             	movzx  eax,ax
   1a92c:	83 e8 01             	sub    eax,0x1
   1a92f:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a932:	75 16                	jne    1a94a <mpInit+0x8c3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:239
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a934:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a939:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a93c:	c1 e2 05             	shl    edx,0x5
   1a93f:	01 d0                	add    eax,edx
   1a941:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a948:	eb 48                	jmp    1a992 <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:242
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a94a:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a94f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a952:	c1 e2 05             	shl    edx,0x5
   1a955:	01 d0                	add    eax,edx
   1a957:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a95d:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a960:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a966:	c1 e1 05             	shl    ecx,0x5
   1a969:	01 ca                	add    edx,ecx
   1a96b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:243
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a96e:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a973:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a976:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a97c:	c1 e2 05             	shl    edx,0x5
   1a97f:	01 d0                	add    eax,edx
   1a981:	8b 15 40 03 12 00    	mov    edx,DWORD PTR ds:0x120340
   1a987:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a98a:	c1 e1 05             	shl    ecx,0x5
   1a98d:	01 ca                	add    edx,ecx
   1a98f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:245
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
   1a992:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1a997:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a99a:	c1 e2 05             	shl    edx,0x5
   1a99d:	01 d0                	add    eax,edx
   1a99f:	c7 40 14 04 00 00 00 	mov    DWORD PTR [eax+0x14],0x4
/home/yogi/src/os/chrisOS/src/cpu/smp.c:246
                recPtr+=8;
   1a9a6:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a9aa:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9ad:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a9b1:	0f b6 c0             	movzx  eax,al
   1a9b4:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a9b7:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9ba:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a9be:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a9c1:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9c4:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a9c8:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1a9cb:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9ce:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a9d2:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:256
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
   1a9d5:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9d8:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a9dc:	0f b7 c0             	movzx  eax,ax
   1a9df:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1a9e2:	85 c0                	test   eax,eax
   1a9e4:	74 39                	je     1aa1f <mpInit+0x998>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:257
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
   1a9e6:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9e9:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a9ed:	0f b7 c0             	movzx  eax,ax
   1a9f0:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
   1a9f3:	83 f8 04             	cmp    eax,0x4
   1a9f6:	74 20                	je     1aa18 <mpInit+0x991>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 1)
   1a9f8:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1a9fb:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a9ff:	0f b7 c0             	movzx  eax,ax
   1aa02:	83 e0 0c             	and    eax,0xc
   1aa05:	83 f8 08             	cmp    eax,0x8
   1aa08:	75 07                	jne    1aa11 <mpInit+0x98a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 3)
   1aa0a:	b9 78 31 08 00       	mov    ecx,0x83178
   1aa0f:	eb 13                	jmp    1aa24 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 4)
   1aa11:	b9 7a 31 08 00       	mov    ecx,0x8317a
   1aa16:	eb 0c                	jmp    1aa24 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 2)
   1aa18:	b9 7c 31 08 00       	mov    ecx,0x8317c
   1aa1d:	eb 05                	jmp    1aa24 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aa1f:	b9 81 31 08 00       	mov    ecx,0x83181
/home/yogi/src/os/chrisOS/src/cpu/smp.c:253 (discriminator 3)
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
   1aa24:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa27:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aa2b:	0f b7 c0             	movzx  eax,ax
   1aa2e:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aa31:	85 c0                	test   eax,eax
   1aa33:	74 39                	je     1aa6e <mpInit+0x9e7>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:254
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
   1aa35:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa38:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aa3c:	0f b7 c0             	movzx  eax,ax
   1aa3f:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1aa42:	83 f8 01             	cmp    eax,0x1
   1aa45:	74 20                	je     1aa67 <mpInit+0x9e0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 1)
   1aa47:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa4a:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aa4e:	0f b7 c0             	movzx  eax,ax
   1aa51:	83 e0 03             	and    eax,0x3
   1aa54:	83 f8 02             	cmp    eax,0x2
   1aa57:	75 07                	jne    1aa60 <mpInit+0x9d9>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 3)
   1aa59:	ba 83 31 08 00       	mov    edx,0x83183
   1aa5e:	eb 13                	jmp    1aa73 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 4)
   1aa60:	ba 87 31 08 00       	mov    edx,0x83187
   1aa65:	eb 0c                	jmp    1aa73 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 2)
   1aa67:	ba 8d 31 08 00       	mov    edx,0x8318d
   1aa6c:	eb 05                	jmp    1aa73 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aa6e:	ba 90 31 08 00       	mov    edx,0x83190
/home/yogi/src/os/chrisOS/src/cpu/smp.c:248 (discriminator 6)
                             lint->irqtype==0?"INT"                      //type
   1aa73:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa76:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aa7a:	84 c0                	test   al,al
   1aa7c:	74 3d                	je     1aabb <mpInit+0xa34>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:249
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
   1aa7e:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa81:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250
                            :lint->irqtype==2?"SMI"
   1aa85:	3c 01                	cmp    al,0x1
   1aa87:	74 2b                	je     1aab4 <mpInit+0xa2d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 1)
   1aa89:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa8c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 1)
                            :lint->irqtype==3?"Ext"
   1aa90:	3c 02                	cmp    al,0x2
   1aa92:	74 19                	je     1aaad <mpInit+0xa26>
   1aa94:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1aa97:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 1)
                            :"unk", //iType
   1aa9b:	3c 03                	cmp    al,0x3
   1aa9d:	75 07                	jne    1aaa6 <mpInit+0xa1f>
   1aa9f:	b8 93 31 08 00       	mov    eax,0x83193
   1aaa4:	eb 1a                	jmp    1aac0 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 2)
   1aaa6:	b8 97 31 08 00       	mov    eax,0x83197
   1aaab:	eb 13                	jmp    1aac0 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
   1aaad:	b8 9b 31 08 00       	mov    eax,0x8319b
   1aab2:	eb 0c                	jmp    1aac0 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 2)
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
   1aab4:	b8 9f 31 08 00       	mov    eax,0x8319f
   1aab9:	eb 05                	jmp    1aac0 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1aabb:	b8 a3 31 08 00       	mov    eax,0x831a3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 9)
   1aac0:	83 ec 0c             	sub    esp,0xc
   1aac3:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1aac6:	57                   	push   edi
   1aac7:	56                   	push   esi
   1aac8:	53                   	push   ebx
   1aac9:	51                   	push   ecx
   1aaca:	52                   	push   edx
   1aacb:	50                   	push   eax
   1aacc:	68 48 34 08 00       	push   0x83448
   1aad1:	68 00 08 00 00       	push   0x800
   1aad6:	e8 38 c7 00 00       	call   27213 <printd>
   1aadb:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:260 (discriminator 9)
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
                break;
   1aade:	eb 24                	jmp    1ab04 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:262
            default:
                printd(DEBUG_MP,"\tue %04X, ", (int)*(uint8_t*)recPtr);
   1aae0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1aae3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1aae6:	0f b6 c0             	movzx  eax,al
   1aae9:	83 ec 04             	sub    esp,0x4
   1aaec:	50                   	push   eax
   1aaed:	68 86 34 08 00       	push   0x83486
   1aaf2:	68 00 08 00 00       	push   0x800
   1aaf7:	e8 17 c7 00 00       	call   27213 <printd>
   1aafc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:263
                recPtr+=8;
   1aaff:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:264
                break;
   1ab03:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266
        }
        if (cnt > 0 && cnt%250==0)
   1ab04:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1ab08:	7e 2b                	jle    1ab35 <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266 (discriminator 1)
   1ab0a:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1ab0d:	ba d3 4d 62 10       	mov    edx,0x10624dd3
   1ab12:	89 c8                	mov    eax,ecx
   1ab14:	f7 ea                	imul   edx
   1ab16:	c1 fa 04             	sar    edx,0x4
   1ab19:	89 c8                	mov    eax,ecx
   1ab1b:	c1 f8 1f             	sar    eax,0x1f
   1ab1e:	29 c2                	sub    edx,eax
   1ab20:	89 d0                	mov    eax,edx
   1ab22:	69 c0 fa 00 00 00    	imul   eax,eax,0xfa
   1ab28:	29 c1                	sub    ecx,eax
   1ab2a:	89 c8                	mov    eax,ecx
   1ab2c:	85 c0                	test   eax,eax
   1ab2e:	75 05                	jne    1ab35 <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:267
            waitForKeyboardKey();
   1ab30:	e8 1d 67 ff ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 2)
    memset(lTempString, 0, 15);
        memcpy(lTempString, mc->productid,12);
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
    for (int cnt=0;cnt< mc->count;cnt++)
   1ab35:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 1)
   1ab39:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1ab3e:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1ab42:	0f b7 c0             	movzx  eax,ax
   1ab45:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1ab48:	0f 8f 7c f7 ff ff    	jg     1a2ca <mpInit+0x243>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:269
                break;
        }
        if (cnt > 0 && cnt%250==0)
            waitForKeyboardKey();
    }
    printd(DEBUG_MP,"rec5 pp=%08X(%08X),np=%08X(%08X)\n", kMPConfigTable[5].prevRecAddress, &kMPConfigTable[4], kMPConfigTable[5].nextRecAddress, &kMPConfigTable[6]);
   1ab4e:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1ab53:	8d 98 c0 00 00 00    	lea    ebx,[eax+0xc0]
   1ab59:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1ab5e:	05 a0 00 00 00       	add    eax,0xa0
   1ab63:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1ab66:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1ab6b:	8d 88 80 00 00 00    	lea    ecx,[eax+0x80]
   1ab71:	a1 40 03 12 00       	mov    eax,ds:0x120340
   1ab76:	05 a0 00 00 00       	add    eax,0xa0
   1ab7b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1ab7e:	83 ec 08             	sub    esp,0x8
   1ab81:	53                   	push   ebx
   1ab82:	52                   	push   edx
   1ab83:	51                   	push   ecx
   1ab84:	50                   	push   eax
   1ab85:	68 94 34 08 00       	push   0x83494
   1ab8a:	68 00 08 00 00       	push   0x800
   1ab8f:	e8 7f c6 00 00       	call   27213 <printd>
   1ab94:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:270
    return mc->count;
   1ab97:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1ab9c:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1aba0:	0f b7 c0             	movzx  eax,ax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:271 (discriminator 1)
   1aba3:	8d 65 f4             	lea    esp,[ebp-0xc]
   1aba6:	5b                   	pop    ebx
   1aba7:	5e                   	pop    esi
   1aba8:	5f                   	pop    edi
   1aba9:	5d                   	pop    ebp
   1abaa:	c3                   	ret    
   1abab:	90                   	nop

0001abac <activateDebugger>:
activateDebugger():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:19
extern uint8_t kTerminalHeight;
extern uint32_t exceptionCS;
extern uint32_t debugReturnFlags;

void activateDebugger()
{
   1abac:	55                   	push   ebp
   1abad:	89 e5                	mov    ebp,esp
   1abaf:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:20
    kDebuggerActive=!kDebuggerActive;
   1abb2:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1abb9:	0f b6 c0             	movzx  eax,al
   1abbc:	85 c0                	test   eax,eax
   1abbe:	0f 95 c0             	setne  al
   1abc1:	83 f0 01             	xor    eax,0x1
   1abc4:	0f b6 c0             	movzx  eax,al
   1abc7:	83 e0 01             	and    eax,0x1
   1abca:	a2 d4 a5 09 00       	mov    ds:0x9a5d4,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:21
    if (kDebuggerActive)
   1abcf:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1abd6:	84 c0                	test   al,al
   1abd8:	0f 84 87 00 00 00    	je     1ac65 <activateDebugger+0xb9>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:24
    {
        //Activate the debugger
        savedTermHeight=kTerminalHeight;
   1abde:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   1abe5:	a2 d5 a5 09 00       	mov    ds:0x9a5d5,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:25
        kTerminalHeight=20;
   1abea:	c6 05 27 00 12 00 14 	mov    BYTE PTR ds:0x120027,0x14
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:26
        cursorSavePosition();
   1abf1:	e8 99 cf ff ff       	call   17b8f <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:27
        cursorMoveTo(70,0);
   1abf6:	83 ec 08             	sub    esp,0x8
   1abf9:	6a 00                	push   0x0
   1abfb:	6a 46                	push   0x46
   1abfd:	e8 41 d3 ff ff       	call   17f43 <cursorMoveTo>
   1ac02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:28
        printk("D");
   1ac05:	83 ec 0c             	sub    esp,0xc
   1ac08:	68 e0 35 08 00       	push   0x835e0
   1ac0d:	e8 e1 c5 00 00       	call   271f3 <printk>
   1ac12:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1ac15:	c7 45 f4 15 00 00 00 	mov    DWORD PTR [ebp-0xc],0x15
   1ac1c:	eb 12                	jmp    1ac30 <activateDebugger+0x84>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:30 (discriminator 3)
            terminal_clear_line(cnt);
   1ac1e:	83 ec 0c             	sub    esp,0xc
   1ac21:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1ac24:	e8 96 d0 ff ff       	call   17cbf <terminal_clear_line>
   1ac29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 3)
        savedTermHeight=kTerminalHeight;
        kTerminalHeight=20;
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk("D");
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1ac2c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 1)
   1ac30:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1ac37:	0f b6 c0             	movzx  eax,al
   1ac3a:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1ac3d:	7f df                	jg     1ac1e <activateDebugger+0x72>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:31
            terminal_clear_line(cnt);
        cursorMoveTo(0,21);
   1ac3f:	83 ec 08             	sub    esp,0x8
   1ac42:	6a 15                	push   0x15
   1ac44:	6a 00                	push   0x0
   1ac46:	e8 f8 d2 ff ff       	call   17f43 <cursorMoveTo>
   1ac4b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:32
        printk("-------------------------------- DEBUG --------------------------------");
   1ac4e:	83 ec 0c             	sub    esp,0xc
   1ac51:	68 e4 35 08 00       	push   0x835e4
   1ac56:	e8 98 c5 00 00       	call   271f3 <printk>
   1ac5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:33
        cursorRestorePosition();
   1ac5e:	e8 78 cf ff ff       	call   17bdb <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk(" ");
        cursorRestorePosition();
    }
}
   1ac63:	eb 35                	jmp    1ac9a <activateDebugger+0xee>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:37
        printk("-------------------------------- DEBUG --------------------------------");
        cursorRestorePosition();
    }
    else    //Deactivate the debugger
    {
        kTerminalHeight=savedTermHeight;
   1ac65:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1ac6c:	a2 27 00 12 00       	mov    ds:0x120027,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:38
        cursorSavePosition();
   1ac71:	e8 19 cf ff ff       	call   17b8f <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:39
        cursorMoveTo(70,0);
   1ac76:	83 ec 08             	sub    esp,0x8
   1ac79:	6a 00                	push   0x0
   1ac7b:	6a 46                	push   0x46
   1ac7d:	e8 c1 d2 ff ff       	call   17f43 <cursorMoveTo>
   1ac82:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:40
        printk(" ");
   1ac85:	83 ec 0c             	sub    esp,0xc
   1ac88:	68 2c 36 08 00       	push   0x8362c
   1ac8d:	e8 61 c5 00 00       	call   271f3 <printk>
   1ac92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:41
        cursorRestorePosition();
   1ac95:	e8 41 cf ff ff       	call   17bdb <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
    }
}
   1ac9a:	90                   	nop
   1ac9b:	c9                   	leave  
   1ac9c:	c3                   	ret    

0001ac9d <debugStep>:
debugStep():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:46

void debugStep()
{
   1ac9d:	55                   	push   ebp
   1ac9e:	89 e5                	mov    ebp,esp
   1aca0:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:47
    cursorSavePosition();
   1aca3:	e8 e7 ce ff ff       	call   17b8f <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:48
    cursorMoveTo(0,22);
   1aca8:	83 ec 08             	sub    esp,0x8
   1acab:	6a 16                	push   0x16
   1acad:	6a 00                	push   0x0
   1acaf:	e8 8f d2 ff ff       	call   17f43 <cursorMoveTo>
   1acb4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:49
    printDebugRegs();
   1acb7:	e8 70 a8 00 00       	call   2552c <printDebugRegs>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:50
    cursorRestorePosition();
   1acbc:	e8 1a cf ff ff       	call   17bdb <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:51
    waitForKeyboardKey();
   1acc1:	e8 8c 65 ff ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:52
    return;
   1acc6:	90                   	nop
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:53
}
   1acc7:	c9                   	leave  
   1acc8:	c3                   	ret    
   1acc9:	66 90                	xchg   ax,ax
   1accb:	90                   	nop

0001accc <fatfs_init>:
fatfs_init():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:44

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
   1accc:	55                   	push   ebp
   1accd:	89 e5                	mov    ebp,esp
   1accf:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:52
    uint32 FATSz;
    uint32 root_dir_sectors;
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;
   1acd2:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:54

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1acd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1acd9:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1ace0:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:55
    fs->currentsector.dirty = 0;
   1ace3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ace6:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1aced:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:57

    fs->next_free_cluster = 0; // Invalid
   1acf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1acf3:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:59

    fatfs_fat_init(fs);
   1acfa:	83 ec 0c             	sub    esp,0xc
   1acfd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ad00:	e8 43 56 00 00       	call   20348 <fatfs_fat_init>
   1ad05:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:62

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
   1ad08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad0b:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ad0e:	85 c0                	test   eax,eax
   1ad10:	75 0a                	jne    1ad1c <fatfs_init+0x50>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:63
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1ad12:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ad17:	e9 46 05 00 00       	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:69

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
   1ad1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad1f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ad22:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ad25:	83 c2 44             	add    edx,0x44
   1ad28:	83 ec 04             	sub    esp,0x4
   1ad2b:	6a 01                	push   0x1
   1ad2d:	52                   	push   edx
   1ad2e:	6a 00                	push   0x0
   1ad30:	ff d0                	call   eax
   1ad32:	83 c4 10             	add    esp,0x10
   1ad35:	85 c0                	test   eax,eax
   1ad37:	75 0a                	jne    1ad43 <fatfs_init+0x77>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:70
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1ad39:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ad3e:	e9 1f 05 00 00       	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
   1ad43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad46:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1ad4d:	3c 55                	cmp    al,0x55
   1ad4f:	75 0e                	jne    1ad5f <fatfs_init+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74 (discriminator 1)
   1ad51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad54:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1ad5b:	3c aa                	cmp    al,0xaa
   1ad5d:	74 0a                	je     1ad69 <fatfs_init+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:75
        return FAT_INIT_INVALID_SIGNATURE;
   1ad5f:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1ad64:	e9 f9 04 00 00       	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:78

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
   1ad69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad6c:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1ad73:	0f b6 c0             	movzx  eax,al
   1ad76:	c1 e0 08             	shl    eax,0x8
   1ad79:	89 c2                	mov    edx,eax
   1ad7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad7e:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1ad85:	0f b6 c0             	movzx  eax,al
   1ad88:	01 d0                	add    eax,edx
   1ad8a:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1ad8f:	74 0a                	je     1ad9b <fatfs_init+0xcf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:79
        return FAT_INIT_ENDIAN_ERROR;
   1ad91:	b8 fc ff ff ff       	mov    eax,0xfffffffc
   1ad96:	e9 c7 04 00 00       	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:86
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
   1ad9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ad9e:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1ada5:	0f b6 c0             	movzx  eax,al
   1ada8:	83 f8 0f             	cmp    eax,0xf
   1adab:	77 15                	ja     1adc2 <fatfs_init+0xf6>
   1adad:	8b 04 85 30 36 08 00 	mov    eax,DWORD PTR [eax*4+0x83630]
   1adb4:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:94
        case 0x06:
        case 0x0C:
        case 0x0E:
        case 0x0F:
        case 0x05:
            valid_partition = 1;
   1adb6:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:95
        break;
   1adba:	eb 19                	jmp    1add5 <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:97
        case 0x00:
            valid_partition = 0;
   1adbc:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:98
            break;
   1adc0:	eb 13                	jmp    1add5 <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:100
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
   1adc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adc5:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1adcc:	3c 06                	cmp    al,0x6
   1adce:	77 04                	ja     1add4 <fatfs_init+0x108>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:101
                valid_partition = 1;
   1add0:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:102
        break;
   1add4:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:106
    }

    // Read LBA Begin for the file system
    if (valid_partition)
   1add5:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
   1add9:	74 4d                	je     1ae28 <fatfs_init+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:107
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
   1addb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adde:	0f b6 80 0d 02 00 00 	movzx  eax,BYTE PTR [eax+0x20d]
   1ade5:	0f b6 c0             	movzx  eax,al
   1ade8:	c1 e0 18             	shl    eax,0x18
   1adeb:	89 c2                	mov    edx,eax
   1aded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1adf0:	0f b6 80 0c 02 00 00 	movzx  eax,BYTE PTR [eax+0x20c]
   1adf7:	0f b6 c0             	movzx  eax,al
   1adfa:	c1 e0 10             	shl    eax,0x10
   1adfd:	01 c2                	add    edx,eax
   1adff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae02:	0f b6 80 0b 02 00 00 	movzx  eax,BYTE PTR [eax+0x20b]
   1ae09:	0f b6 c0             	movzx  eax,al
   1ae0c:	c1 e0 08             	shl    eax,0x8
   1ae0f:	01 c2                	add    edx,eax
   1ae11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae14:	0f b6 80 0a 02 00 00 	movzx  eax,BYTE PTR [eax+0x20a]
   1ae1b:	0f b6 c0             	movzx  eax,al
   1ae1e:	01 c2                	add    edx,eax
   1ae20:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae23:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
   1ae26:	eb 0a                	jmp    1ae32 <fatfs_init+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:110
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
   1ae28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae2b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:114

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
   1ae32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae35:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ae38:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ae3b:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ae3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ae41:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
   1ae44:	83 ec 04             	sub    esp,0x4
   1ae47:	6a 01                	push   0x1
   1ae49:	51                   	push   ecx
   1ae4a:	52                   	push   edx
   1ae4b:	ff d0                	call   eax
   1ae4d:	83 c4 10             	add    esp,0x10
   1ae50:	85 c0                	test   eax,eax
   1ae52:	75 0a                	jne    1ae5e <fatfs_init+0x192>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:115
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1ae54:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ae59:	e9 04 04 00 00       	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:118

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
   1ae5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae61:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1ae65:	0f b6 c0             	movzx  eax,al
   1ae68:	c1 e0 08             	shl    eax,0x8
   1ae6b:	89 c2                	mov    edx,eax
   1ae6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae70:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1ae74:	0f b6 c0             	movzx  eax,al
   1ae77:	01 d0                	add    eax,edx
   1ae79:	3d 00 02 00 00       	cmp    eax,0x200
   1ae7e:	74 0a                	je     1ae8a <fatfs_init+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:119
        return FAT_INIT_INVALID_SECTOR_SIZE;
   1ae80:	b8 fe ff ff ff       	mov    eax,0xfffffffe
   1ae85:	e9 d8 03 00 00       	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:122

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
   1ae8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae8d:	0f b6 50 51          	movzx  edx,BYTE PTR [eax+0x51]
   1ae91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae94:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:123
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
   1ae96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ae99:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1ae9d:	0f b6 c0             	movzx  eax,al
   1aea0:	c1 e0 08             	shl    eax,0x8
   1aea3:	89 c2                	mov    edx,eax
   1aea5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aea8:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1aeac:	0f b6 c0             	movzx  eax,al
   1aeaf:	01 d0                	add    eax,edx
   1aeb1:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:124
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
   1aeb5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aeb8:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1aebc:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:125
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
   1aebf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aec2:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1aec6:	0f b6 c0             	movzx  eax,al
   1aec9:	c1 e0 08             	shl    eax,0x8
   1aecc:	89 c2                	mov    edx,eax
   1aece:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aed1:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1aed5:	0f b6 c0             	movzx  eax,al
   1aed8:	01 c2                	add    edx,eax
   1aeda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aedd:	66 89 50 28          	mov    WORD PTR [eax+0x28],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:127

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1aee1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aee4:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1aee8:	0f b6 c0             	movzx  eax,al
   1aeeb:	c1 e0 08             	shl    eax,0x8
   1aeee:	89 c2                	mov    edx,eax
   1aef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aef3:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1aef7:	0f b6 c0             	movzx  eax,al
   1aefa:	01 d0                	add    eax,edx
   1aefc:	85 c0                	test   eax,eax
   1aefe:	74 25                	je     1af25 <fatfs_init+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:128
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1af00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af03:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1af07:	0f b6 c0             	movzx  eax,al
   1af0a:	c1 e0 08             	shl    eax,0x8
   1af0d:	89 c2                	mov    edx,eax
   1af0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af12:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1af16:	0f b6 c0             	movzx  eax,al
   1af19:	01 d0                	add    eax,edx
   1af1b:	89 c2                	mov    edx,eax
   1af1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af20:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
   1af23:	eb 3f                	jmp    1af64 <fatfs_init+0x298>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:130
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1af25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af28:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1af2c:	0f b6 c0             	movzx  eax,al
   1af2f:	c1 e0 18             	shl    eax,0x18
   1af32:	89 c2                	mov    edx,eax
   1af34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af37:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1af3b:	0f b6 c0             	movzx  eax,al
   1af3e:	c1 e0 10             	shl    eax,0x10
   1af41:	01 c2                	add    edx,eax
   1af43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af46:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1af4a:	0f b6 c0             	movzx  eax,al
   1af4d:	c1 e0 08             	shl    eax,0x8
   1af50:	01 c2                	add    edx,eax
   1af52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af55:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1af59:	0f b6 c0             	movzx  eax,al
   1af5c:	01 c2                	add    edx,eax
   1af5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af61:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:133

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
   1af64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af67:	0f b6 40 73          	movzx  eax,BYTE PTR [eax+0x73]
   1af6b:	0f b6 c0             	movzx  eax,al
   1af6e:	c1 e0 18             	shl    eax,0x18
   1af71:	89 c2                	mov    edx,eax
   1af73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af76:	0f b6 40 72          	movzx  eax,BYTE PTR [eax+0x72]
   1af7a:	0f b6 c0             	movzx  eax,al
   1af7d:	c1 e0 10             	shl    eax,0x10
   1af80:	01 c2                	add    edx,eax
   1af82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af85:	0f b6 40 71          	movzx  eax,BYTE PTR [eax+0x71]
   1af89:	0f b6 c0             	movzx  eax,al
   1af8c:	c1 e0 08             	shl    eax,0x8
   1af8f:	01 c2                	add    edx,eax
   1af91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af94:	0f b6 40 70          	movzx  eax,BYTE PTR [eax+0x70]
   1af98:	0f b6 c0             	movzx  eax,al
   1af9b:	01 c2                	add    edx,eax
   1af9d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afa0:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:134
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
   1afa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afa6:	0f b6 40 75          	movzx  eax,BYTE PTR [eax+0x75]
   1afaa:	0f b6 c0             	movzx  eax,al
   1afad:	c1 e0 08             	shl    eax,0x8
   1afb0:	89 c2                	mov    edx,eax
   1afb2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afb5:	0f b6 40 74          	movzx  eax,BYTE PTR [eax+0x74]
   1afb9:	0f b6 c0             	movzx  eax,al
   1afbc:	01 c2                	add    edx,eax
   1afbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afc1:	66 89 50 18          	mov    WORD PTR [eax+0x18],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:137

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
   1afc5:	0f b7 55 ec          	movzx  edx,WORD PTR [ebp-0x14]
   1afc9:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1afcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afd0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1afd3:	0f af c1             	imul   eax,ecx
   1afd6:	01 c2                	add    edx,eax
   1afd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afdb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:138
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1afde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afe1:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1afe5:	0f b7 c0             	movzx  eax,ax
   1afe8:	c1 e0 05             	shl    eax,0x5
   1afeb:	05 ff 01 00 00       	add    eax,0x1ff
   1aff0:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1aff6:	85 c0                	test   eax,eax
   1aff8:	0f 48 c2             	cmovs  eax,edx
   1affb:	c1 f8 09             	sar    eax,0x9
   1affe:	89 c2                	mov    edx,eax
   1b000:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b003:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:141

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
   1b006:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b009:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b00c:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1b010:	01 c2                	add    edx,eax
   1b012:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b015:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:144

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
   1b018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b01b:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1b01e:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1b022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b025:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1b028:	0f af c1             	imul   eax,ecx
   1b02b:	01 c2                	add    edx,eax
   1b02d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b030:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:146

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
   1b033:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b036:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1b03d:	0f b6 c0             	movzx  eax,al
   1b040:	c1 e0 08             	shl    eax,0x8
   1b043:	89 c2                	mov    edx,eax
   1b045:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b048:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1b04f:	0f b6 c0             	movzx  eax,al
   1b052:	01 d0                	add    eax,edx
   1b054:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1b059:	74 0a                	je     1b065 <fatfs_init+0x399>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:147
        return FAT_INIT_INVALID_SIGNATURE;
   1b05b:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1b060:	e9 fd 01 00 00       	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:150

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
   1b065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b068:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1b06c:	0f b6 c0             	movzx  eax,al
   1b06f:	c1 e0 08             	shl    eax,0x8
   1b072:	89 c2                	mov    edx,eax
   1b074:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b077:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1b07b:	0f b6 c0             	movzx  eax,al
   1b07e:	01 d0                	add    eax,edx
   1b080:	c1 e0 05             	shl    eax,0x5
   1b083:	89 c2                	mov    edx,eax
   1b085:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b088:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b08c:	0f b6 c0             	movzx  eax,al
   1b08f:	c1 e0 08             	shl    eax,0x8
   1b092:	89 c1                	mov    ecx,eax
   1b094:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b097:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b09b:	0f b6 c0             	movzx  eax,al
   1b09e:	01 c8                	add    eax,ecx
   1b0a0:	83 e8 01             	sub    eax,0x1
   1b0a3:	01 c2                	add    edx,eax
   1b0a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0a8:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b0ac:	0f b6 c0             	movzx  eax,al
   1b0af:	c1 e0 08             	shl    eax,0x8
   1b0b2:	89 c1                	mov    ecx,eax
   1b0b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0b7:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b0bb:	0f b6 c0             	movzx  eax,al
   1b0be:	01 c1                	add    ecx,eax
   1b0c0:	89 d0                	mov    eax,edx
   1b0c2:	99                   	cdq    
   1b0c3:	f7 f9                	idiv   ecx
   1b0c5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:152

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1b0c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0cb:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b0cf:	0f b6 c0             	movzx  eax,al
   1b0d2:	c1 e0 08             	shl    eax,0x8
   1b0d5:	89 c2                	mov    edx,eax
   1b0d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0da:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b0de:	0f b6 c0             	movzx  eax,al
   1b0e1:	01 d0                	add    eax,edx
   1b0e3:	85 c0                	test   eax,eax
   1b0e5:	74 20                	je     1b107 <fatfs_init+0x43b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:153
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1b0e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0ea:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b0ee:	0f b6 c0             	movzx  eax,al
   1b0f1:	c1 e0 08             	shl    eax,0x8
   1b0f4:	89 c2                	mov    edx,eax
   1b0f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0f9:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b0fd:	0f b6 c0             	movzx  eax,al
   1b100:	01 d0                	add    eax,edx
   1b102:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1b105:	eb 3c                	jmp    1b143 <fatfs_init+0x477>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:155
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1b107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b10a:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1b10e:	0f b6 c0             	movzx  eax,al
   1b111:	c1 e0 18             	shl    eax,0x18
   1b114:	89 c2                	mov    edx,eax
   1b116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b119:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1b11d:	0f b6 c0             	movzx  eax,al
   1b120:	c1 e0 10             	shl    eax,0x10
   1b123:	01 c2                	add    edx,eax
   1b125:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b128:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1b12c:	0f b6 c0             	movzx  eax,al
   1b12f:	c1 e0 08             	shl    eax,0x8
   1b132:	01 c2                	add    edx,eax
   1b134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b137:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1b13b:	0f b6 c0             	movzx  eax,al
   1b13e:	01 d0                	add    eax,edx
   1b140:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:157

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
   1b143:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b146:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b14a:	0f b6 c0             	movzx  eax,al
   1b14d:	c1 e0 08             	shl    eax,0x8
   1b150:	89 c2                	mov    edx,eax
   1b152:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b155:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b159:	0f b6 c0             	movzx  eax,al
   1b15c:	01 d0                	add    eax,edx
   1b15e:	85 c0                	test   eax,eax
   1b160:	74 20                	je     1b182 <fatfs_init+0x4b6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:158
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
   1b162:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b165:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b169:	0f b6 c0             	movzx  eax,al
   1b16c:	c1 e0 08             	shl    eax,0x8
   1b16f:	89 c2                	mov    edx,eax
   1b171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b174:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b178:	0f b6 c0             	movzx  eax,al
   1b17b:	01 d0                	add    eax,edx
   1b17d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1b180:	eb 3c                	jmp    1b1be <fatfs_init+0x4f2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:160
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
   1b182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b185:	0f b6 40 67          	movzx  eax,BYTE PTR [eax+0x67]
   1b189:	0f b6 c0             	movzx  eax,al
   1b18c:	c1 e0 18             	shl    eax,0x18
   1b18f:	89 c2                	mov    edx,eax
   1b191:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b194:	0f b6 40 66          	movzx  eax,BYTE PTR [eax+0x66]
   1b198:	0f b6 c0             	movzx  eax,al
   1b19b:	c1 e0 10             	shl    eax,0x10
   1b19e:	01 c2                	add    edx,eax
   1b1a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1a3:	0f b6 40 65          	movzx  eax,BYTE PTR [eax+0x65]
   1b1a7:	0f b6 c0             	movzx  eax,al
   1b1aa:	c1 e0 08             	shl    eax,0x8
   1b1ad:	01 c2                	add    edx,eax
   1b1af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1b2:	0f b6 40 64          	movzx  eax,BYTE PTR [eax+0x64]
   1b1b6:	0f b6 c0             	movzx  eax,al
   1b1b9:	01 d0                	add    eax,edx
   1b1bb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:162

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
   1b1be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1c1:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1b1c5:	0f b6 c0             	movzx  eax,al
   1b1c8:	c1 e0 08             	shl    eax,0x8
   1b1cb:	89 c2                	mov    edx,eax
   1b1cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1d0:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1b1d4:	0f b6 c0             	movzx  eax,al
   1b1d7:	01 d0                	add    eax,edx
   1b1d9:	89 c2                	mov    edx,eax
   1b1db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1de:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1b1e2:	0f b6 c0             	movzx  eax,al
   1b1e5:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   1b1e9:	01 c2                	add    edx,eax
   1b1eb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1b1ee:	01 c2                	add    edx,eax
   1b1f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b1f3:	29 d0                	sub    eax,edx
   1b1f5:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:165

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
   1b1f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1fb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b1fe:	84 c0                	test   al,al
   1b200:	74 5b                	je     1b25d <fatfs_init+0x591>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:167
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
   1b202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b205:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b208:	0f b6 c8             	movzx  ecx,al
   1b20b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1b20e:	ba 00 00 00 00       	mov    edx,0x0
   1b213:	f7 f1                	div    ecx
   1b215:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:169

        if(count_of_clusters < 4085)
   1b218:	81 7d dc f4 0f 00 00 	cmp    DWORD PTR [ebp-0x24],0xff4
   1b21f:	77 07                	ja     1b228 <fatfs_init+0x55c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:171
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
   1b221:	b8 fb ff ff ff       	mov    eax,0xfffffffb
   1b226:	eb 3a                	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:172
        else if(count_of_clusters < 65525)
   1b228:	81 7d dc f4 ff 00 00 	cmp    DWORD PTR [ebp-0x24],0xfff4
   1b22f:	77 1b                	ja     1b24c <fatfs_init+0x580>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:175
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
   1b231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b234:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:178

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
   1b23b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b23e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:179
            return FAT_INIT_OK;
   1b245:	b8 00 00 00 00       	mov    eax,0x0
   1b24a:	eb 16                	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:184
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
   1b24c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b24f:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:185
            return FAT_INIT_OK;
   1b256:	b8 00 00 00 00       	mov    eax,0x0
   1b25b:	eb 05                	jmp    1b262 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:189
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
   1b25d:	b8 fb ff ff ff       	mov    eax,0xfffffffb
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:190
}
   1b262:	c9                   	leave  
   1b263:	c3                   	ret    

0001b264 <fatfs_lba_of_cluster>:
fatfs_lba_of_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:196
//-----------------------------------------------------------------------------
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
   1b264:	55                   	push   ebp
   1b265:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:197
    if (fs->fat_type == FAT_TYPE_16)
   1b267:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b26a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b26d:	85 c0                	test   eax,eax
   1b26f:	75 39                	jne    1b2aa <fatfs_lba_of_cluster+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:198
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   1b271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b274:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b277:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b27a:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1b27e:	0f b7 c0             	movzx  eax,ax
   1b281:	c1 e0 05             	shl    eax,0x5
   1b284:	8d 88 ff 01 00 00    	lea    ecx,[eax+0x1ff]
   1b28a:	85 c0                	test   eax,eax
   1b28c:	0f 48 c1             	cmovs  eax,ecx
   1b28f:	c1 f8 09             	sar    eax,0x9
   1b292:	01 c2                	add    edx,eax
   1b294:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b297:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b29a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b29d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b2a0:	0f b6 c0             	movzx  eax,al
   1b2a3:	0f af c1             	imul   eax,ecx
   1b2a6:	01 d0                	add    eax,edx
   1b2a8:	eb 1a                	jmp    1b2c4 <fatfs_lba_of_cluster+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:200
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   1b2aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2ad:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b2b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b2b3:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b2b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2b9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b2bc:	0f b6 c0             	movzx  eax,al
   1b2bf:	0f af c1             	imul   eax,ecx
   1b2c2:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:201
}
   1b2c4:	5d                   	pop    ebp
   1b2c5:	c3                   	ret    

0001b2c6 <fatfs_sector_read>:
fatfs_sector_read():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:206
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b2c6:	55                   	push   ebp
   1b2c7:	89 e5                	mov    ebp,esp
   1b2c9:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:207
    return fs->disk_io.read_media(lba, target, count);
   1b2cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2cf:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b2d2:	83 ec 04             	sub    esp,0x4
   1b2d5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b2d8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b2db:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b2de:	ff d0                	call   eax
   1b2e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:208
}
   1b2e3:	c9                   	leave  
   1b2e4:	c3                   	ret    

0001b2e5 <fatfs_sector_write>:
fatfs_sector_write():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:213
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b2e5:	55                   	push   ebp
   1b2e6:	89 e5                	mov    ebp,esp
   1b2e8:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:214
    return fs->disk_io.write_media(lba, target, count);
   1b2eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2ee:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b2f1:	83 ec 04             	sub    esp,0x4
   1b2f4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b2f7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b2fa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b2fd:	ff d0                	call   eax
   1b2ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:215
}
   1b302:	c9                   	leave  
   1b303:	c3                   	ret    

0001b304 <fatfs_sector_reader>:
fatfs_sector_reader():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:221
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
   1b304:	55                   	push   ebp
   1b305:	89 e5                	mov    ebp,esp
   1b307:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:222
    uint32 sector_to_read = 0;
   1b30a:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:223
    uint32 cluster_to_read = 0;
   1b311:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:224
    uint32 cluster_chain = 0;
   1b318:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
   1b31f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b322:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b325:	85 c0                	test   eax,eax
   1b327:	75 36                	jne    1b35f <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229 (discriminator 1)
   1b329:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b32d:	75 30                	jne    1b35f <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    {
        if (offset < fs->rootdir_sectors)
   1b32f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b332:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b335:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b338:	76 1b                	jbe    1b355 <fatfs_sector_reader+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:232
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
   1b33a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b33d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b343:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b346:	01 c2                	add    edx,eax
   1b348:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b34b:	01 d0                	add    eax,edx
   1b34d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
   1b350:	e9 8e 00 00 00       	jmp    1b3e3 <fatfs_sector_reader+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:234
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
        else
            return 0;
   1b355:	b8 00 00 00 00       	mov    eax,0x0
   1b35a:	e9 e4 00 00 00       	jmp    1b443 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:240
    }
    // FAT16/32 Other
    else
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;
   1b35f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b362:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:243

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
   1b365:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b368:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b36b:	0f b6 c8             	movzx  ecx,al
   1b36e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b371:	ba 00 00 00 00       	mov    edx,0x0
   1b376:	f7 f1                	div    ecx
   1b378:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:244
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
   1b37b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b37e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b381:	0f b6 c0             	movzx  eax,al
   1b384:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
   1b388:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1b38b:	29 c2                	sub    edx,eax
   1b38d:	89 d0                	mov    eax,edx
   1b38f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b392:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1b399:	eb 18                	jmp    1b3b3 <fatfs_sector_reader+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:248 (discriminator 3)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
   1b39b:	83 ec 08             	sub    esp,0x8
   1b39e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b3a1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b3a4:	e8 f9 52 00 00       	call   206a2 <fatfs_find_next_cluster>
   1b3a9:	83 c4 10             	add    esp,0x10
   1b3ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 3)
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b3af:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 1)
   1b3b3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b3b6:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1b3b9:	72 e0                	jb     1b39b <fatfs_sector_reader+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:251
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
   1b3bb:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1b3bf:	75 07                	jne    1b3c8 <fatfs_sector_reader+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:252
            return 0;
   1b3c1:	b8 00 00 00 00       	mov    eax,0x0
   1b3c6:	eb 7b                	jmp    1b443 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:255

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
   1b3c8:	83 ec 08             	sub    esp,0x8
   1b3cb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b3ce:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b3d1:	e8 8e fe ff ff       	call   1b264 <fatfs_lba_of_cluster>
   1b3d6:	83 c4 10             	add    esp,0x10
   1b3d9:	89 c2                	mov    edx,eax
   1b3db:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1b3de:	01 d0                	add    eax,edx
   1b3e0:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:259
    }

    // User provided target array
    if (target)
   1b3e3:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b3e7:	74 18                	je     1b401 <fatfs_sector_reader+0xfd>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:260
        return fs->disk_io.read_media(lba, target, 1);
   1b3e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3ec:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b3ef:	83 ec 04             	sub    esp,0x4
   1b3f2:	6a 01                	push   0x1
   1b3f4:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b3f7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1b3fa:	ff d0                	call   eax
   1b3fc:	83 c4 10             	add    esp,0x10
   1b3ff:	eb 42                	jmp    1b443 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:262
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
   1b401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b404:	8b 80 44 02 00 00    	mov    eax,DWORD PTR [eax+0x244]
   1b40a:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1b40d:	74 2f                	je     1b43e <fatfs_sector_reader+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:264
    {
        fs->currentsector.address = lba;
   1b40f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b412:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1b415:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:265
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b41b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b41e:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b421:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b424:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b427:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b42a:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b430:	83 ec 04             	sub    esp,0x4
   1b433:	6a 01                	push   0x1
   1b435:	51                   	push   ecx
   1b436:	52                   	push   edx
   1b437:	ff d0                	call   eax
   1b439:	83 c4 10             	add    esp,0x10
   1b43c:	eb 05                	jmp    1b443 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:268
    }
    else
        return 1;
   1b43e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:269
}
   1b443:	c9                   	leave  
   1b444:	c3                   	ret    

0001b445 <fatfs_read_sector>:
fatfs_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:275
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b445:	55                   	push   ebp
   1b446:	89 e5                	mov    ebp,esp
   1b448:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b44b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b44e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b451:	85 c0                	test   eax,eax
   1b453:	0f 85 83 00 00 00    	jne    1b4dc <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277 (discriminator 1)
   1b459:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b45d:	75 7d                	jne    1b4dc <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:282
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
   1b45f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b462:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b465:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b468:	76 1e                	jbe    1b488 <fatfs_read_sector+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:283
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b46a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b46d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b470:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b473:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b476:	01 c2                	add    edx,eax
   1b478:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b47b:	01 d0                	add    eax,edx
   1b47d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:288
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b480:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b484:	74 27                	je     1b4ad <fatfs_read_sector+0x68>
   1b486:	eb 0a                	jmp    1b492 <fatfs_read_sector+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:285

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b488:	b8 00 00 00 00       	mov    eax,0x0
   1b48d:	e9 c5 00 00 00       	jmp    1b557 <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:291

        // User target buffer passed in
        if (target)
        {
            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b492:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b495:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b498:	83 ec 04             	sub    esp,0x4
   1b49b:	6a 01                	push   0x1
   1b49d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b4a0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b4a3:	ff d0                	call   eax
   1b4a5:	83 c4 10             	add    esp,0x10
   1b4a8:	e9 aa 00 00 00       	jmp    1b557 <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:296
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
   1b4ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4b0:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b4b3:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:299

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b4b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4bc:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b4bf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b4c2:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b4c5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b4c8:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b4ce:	83 ec 04             	sub    esp,0x4
   1b4d1:	6a 01                	push   0x1
   1b4d3:	51                   	push   ecx
   1b4d4:	52                   	push   edx
   1b4d5:	ff d0                	call   eax
   1b4d7:	83 c4 10             	add    esp,0x10
   1b4da:	eb 7b                	jmp    1b557 <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:306
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b4dc:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b4e0:	74 33                	je     1b515 <fatfs_read_sector+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:309
        {
            // Calculate read address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b4e2:	83 ec 08             	sub    esp,0x8
   1b4e5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b4e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b4eb:	e8 74 fd ff ff       	call   1b264 <fatfs_lba_of_cluster>
   1b4f0:	83 c4 10             	add    esp,0x10
   1b4f3:	89 c2                	mov    edx,eax
   1b4f5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b4f8:	01 d0                	add    eax,edx
   1b4fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:312

            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b500:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b503:	83 ec 04             	sub    esp,0x4
   1b506:	6a 01                	push   0x1
   1b508:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b50b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b50e:	ff d0                	call   eax
   1b510:	83 c4 10             	add    esp,0x10
   1b513:	eb 42                	jmp    1b557 <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:317
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b515:	83 ec 08             	sub    esp,0x8
   1b518:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b51b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b51e:	e8 41 fd ff ff       	call   1b264 <fatfs_lba_of_cluster>
   1b523:	83 c4 10             	add    esp,0x10
   1b526:	89 c2                	mov    edx,eax
   1b528:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b52b:	01 c2                	add    edx,eax
   1b52d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b530:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:320

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b536:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b539:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b53c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b53f:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b542:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b545:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b54b:	83 ec 04             	sub    esp,0x4
   1b54e:	6a 01                	push   0x1
   1b550:	51                   	push   ecx
   1b551:	52                   	push   edx
   1b552:	ff d0                	call   eax
   1b554:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:323
        }
    }
}
   1b557:	c9                   	leave  
   1b558:	c3                   	ret    

0001b559 <fatfs_write_sector>:
fatfs_write_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:330
// fatfs_write_sector: Write to the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b559:	55                   	push   ebp
   1b55a:	89 e5                	mov    ebp,esp
   1b55c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:332
    // No write access?
    if (!fs->disk_io.write_media)
   1b55f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b562:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b565:	85 c0                	test   eax,eax
   1b567:	75 0a                	jne    1b573 <fatfs_write_sector+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:333
        return 0;
   1b569:	b8 00 00 00 00       	mov    eax,0x0
   1b56e:	e9 0c 01 00 00       	jmp    1b67f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b573:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b576:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b579:	85 c0                	test   eax,eax
   1b57b:	0f 85 83 00 00 00    	jne    1b604 <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336 (discriminator 1)
   1b581:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b585:	75 7d                	jne    1b604 <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:341
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
   1b587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b58a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b58d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b590:	76 1e                	jbe    1b5b0 <fatfs_write_sector+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:342
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b595:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b598:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b59b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b59e:	01 c2                	add    edx,eax
   1b5a0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b5a3:	01 d0                	add    eax,edx
   1b5a5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:347
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b5a8:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b5ac:	74 27                	je     1b5d5 <fatfs_write_sector+0x7c>
   1b5ae:	eb 0a                	jmp    1b5ba <fatfs_write_sector+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:344

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b5b0:	b8 00 00 00 00       	mov    eax,0x0
   1b5b5:	e9 c5 00 00 00       	jmp    1b67f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:350

        // User target buffer passed in
        if (target)
        {
            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1b5ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5bd:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b5c0:	83 ec 04             	sub    esp,0x4
   1b5c3:	6a 01                	push   0x1
   1b5c5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b5c8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b5cb:	ff d0                	call   eax
   1b5cd:	83 c4 10             	add    esp,0x10
   1b5d0:	e9 aa 00 00 00       	jmp    1b67f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:355
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
   1b5d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5d8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b5db:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:358

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b5e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5e4:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b5e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b5ea:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b5ed:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b5f0:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b5f6:	83 ec 04             	sub    esp,0x4
   1b5f9:	6a 01                	push   0x1
   1b5fb:	51                   	push   ecx
   1b5fc:	52                   	push   edx
   1b5fd:	ff d0                	call   eax
   1b5ff:	83 c4 10             	add    esp,0x10
   1b602:	eb 7b                	jmp    1b67f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:365
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b604:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b608:	74 33                	je     1b63d <fatfs_write_sector+0xe4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:368
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b60a:	83 ec 08             	sub    esp,0x8
   1b60d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b610:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b613:	e8 4c fc ff ff       	call   1b264 <fatfs_lba_of_cluster>
   1b618:	83 c4 10             	add    esp,0x10
   1b61b:	89 c2                	mov    edx,eax
   1b61d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b620:	01 d0                	add    eax,edx
   1b622:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:371

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1b625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b628:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b62b:	83 ec 04             	sub    esp,0x4
   1b62e:	6a 01                	push   0x1
   1b630:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b633:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b636:	ff d0                	call   eax
   1b638:	83 c4 10             	add    esp,0x10
   1b63b:	eb 42                	jmp    1b67f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:376
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b63d:	83 ec 08             	sub    esp,0x8
   1b640:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b643:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b646:	e8 19 fc ff ff       	call   1b264 <fatfs_lba_of_cluster>
   1b64b:	83 c4 10             	add    esp,0x10
   1b64e:	89 c2                	mov    edx,eax
   1b650:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b653:	01 c2                	add    edx,eax
   1b655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b658:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:379

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b65e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b661:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b664:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b667:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b66a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b66d:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b673:	83 ec 04             	sub    esp,0x4
   1b676:	6a 01                	push   0x1
   1b678:	51                   	push   ecx
   1b679:	52                   	push   edx
   1b67a:	ff d0                	call   eax
   1b67c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:382
        }
    }
}
   1b67f:	c9                   	leave  
   1b680:	c3                   	ret    

0001b681 <fatfs_show_details>:
fatfs_show_details():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:388
#endif
//-----------------------------------------------------------------------------
// fatfs_show_details: Show the details about the filesystem
//-----------------------------------------------------------------------------
void fatfs_show_details(struct fatfs *fs)
{
   1b681:	55                   	push   ebp
   1b682:	89 e5                	mov    ebp,esp
   1b684:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:389
    FAT_PRINTF(("FAT details:\r\n"));
   1b687:	83 ec 0c             	sub    esp,0xc
   1b68a:	68 70 36 08 00       	push   0x83670
   1b68f:	e8 5f bb 00 00       	call   271f3 <printk>
   1b694:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
   1b697:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b69a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b69d:	83 f8 01             	cmp    eax,0x1
   1b6a0:	75 07                	jne    1b6a9 <fatfs_show_details+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 1)
   1b6a2:	b8 7f 36 08 00       	mov    eax,0x8367f
   1b6a7:	eb 05                	jmp    1b6ae <fatfs_show_details+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 2)
   1b6a9:	b8 85 36 08 00       	mov    eax,0x83685
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 4)
   1b6ae:	83 ec 08             	sub    esp,0x8
   1b6b1:	50                   	push   eax
   1b6b2:	68 8b 36 08 00       	push   0x8368b
   1b6b7:	e8 37 bb 00 00       	call   271f3 <printk>
   1b6bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:391 (discriminator 4)
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
   1b6bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1b6c5:	83 ec 08             	sub    esp,0x8
   1b6c8:	50                   	push   eax
   1b6c9:	68 98 36 08 00       	push   0x83698
   1b6ce:	e8 20 bb 00 00       	call   271f3 <printk>
   1b6d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:392 (discriminator 4)
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
   1b6d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6d9:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1b6dc:	83 ec 08             	sub    esp,0x8
   1b6df:	50                   	push   eax
   1b6e0:	68 b7 36 08 00       	push   0x836b7
   1b6e5:	e8 09 bb 00 00       	call   271f3 <printk>
   1b6ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:393 (discriminator 4)
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
   1b6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1b6f3:	83 ec 08             	sub    esp,0x8
   1b6f6:	50                   	push   eax
   1b6f7:	68 cf 36 08 00       	push   0x836cf
   1b6fc:	e8 f2 ba 00 00       	call   271f3 <printk>
   1b701:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:394 (discriminator 4)
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
   1b704:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b707:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b70a:	0f b6 c0             	movzx  eax,al
   1b70d:	83 ec 08             	sub    esp,0x8
   1b710:	50                   	push   eax
   1b711:	68 eb 36 08 00       	push   0x836eb
   1b716:	e8 d8 ba 00 00       	call   271f3 <printk>
   1b71b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:395 (discriminator 4)
}
   1b71e:	90                   	nop
   1b71f:	c9                   	leave  
   1b720:	c3                   	ret    

0001b721 <fatfs_get_root_cluster>:
fatfs_get_root_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:400
//-----------------------------------------------------------------------------
// fatfs_get_root_cluster: Get the root dir cluster
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
   1b721:	55                   	push   ebp
   1b722:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:402
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
   1b724:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b727:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:403
}
   1b72a:	5d                   	pop    ebp
   1b72b:	c3                   	ret    

0001b72c <fatfs_get_file_entry>:
fatfs_get_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:408
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
   1b72c:	55                   	push   ebp
   1b72d:	89 e5                	mov    ebp,esp
   1b72f:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:409
    uint8 item=0;
   1b735:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:410
    uint16 recordoffset = 0;
   1b739:	66 c7 45 ea 00 00    	mov    WORD PTR [ebp-0x16],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:411
    uint8 i=0;
   1b73f:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:412
    int x=0;
   1b743:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:413
    char *long_filename = NULL;
   1b74a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:416
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1b751:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:419
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
   1b758:	83 ec 08             	sub    esp,0x8
   1b75b:	6a 01                	push   0x1
   1b75d:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b763:	50                   	push   eax
   1b764:	e8 8f 39 00 00       	call   1f0f8 <fatfs_lfn_cache_init>
   1b769:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:425

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1b76c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b76f:	8d 50 01             	lea    edx,[eax+0x1]
   1b772:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1b775:	6a 00                	push   0x0
   1b777:	50                   	push   eax
   1b778:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b77b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b77e:	e8 81 fb ff ff       	call   1b304 <fatfs_sector_reader>
   1b783:	83 c4 10             	add    esp,0x10
   1b786:	85 c0                	test   eax,eax
   1b788:	0f 84 13 02 00 00    	je     1b9a1 <fatfs_get_file_entry+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b78e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1b792:	e9 fb 01 00 00       	jmp    1b992 <fatfs_get_file_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:431
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1b797:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b79b:	c1 e0 05             	shl    eax,0x5
   1b79e:	66 89 45 ea          	mov    WORD PTR [ebp-0x16],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:434

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1b7a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7a5:	8d 50 44             	lea    edx,[eax+0x44]
   1b7a8:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1b7ac:	01 d0                	add    eax,edx
   1b7ae:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:438

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1b7b1:	83 ec 0c             	sub    esp,0xc
   1b7b4:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b7b7:	e8 56 3c 00 00       	call   1f412 <fatfs_entry_lfn_text>
   1b7bc:	83 c4 10             	add    esp,0x10
   1b7bf:	85 c0                	test   eax,eax
   1b7c1:	74 24                	je     1b7e7 <fatfs_get_file_entry+0xbb>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:439
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1b7c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7c6:	8d 50 44             	lea    edx,[eax+0x44]
   1b7c9:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1b7cd:	01 d0                	add    eax,edx
   1b7cf:	83 ec 08             	sub    esp,0x8
   1b7d2:	50                   	push   eax
   1b7d3:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b7d9:	50                   	push   eax
   1b7da:	e8 6f 39 00 00       	call   1f14e <fatfs_lfn_cache_entry>
   1b7df:	83 c4 10             	add    esp,0x10
   1b7e2:	e9 a1 01 00 00       	jmp    1b988 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:442

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1b7e7:	83 ec 0c             	sub    esp,0xc
   1b7ea:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b7ed:	e8 43 3c 00 00       	call   1f435 <fatfs_entry_lfn_invalid>
   1b7f2:	83 c4 10             	add    esp,0x10
   1b7f5:	85 c0                	test   eax,eax
   1b7f7:	74 19                	je     1b812 <fatfs_get_file_entry+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:443
                    fatfs_lfn_cache_init(&lfn, 0);
   1b7f9:	83 ec 08             	sub    esp,0x8
   1b7fc:	6a 00                	push   0x0
   1b7fe:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b804:	50                   	push   eax
   1b805:	e8 ee 38 00 00       	call   1f0f8 <fatfs_lfn_cache_init>
   1b80a:	83 c4 10             	add    esp,0x10
   1b80d:	e9 76 01 00 00       	jmp    1b988 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:446

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1b812:	83 ec 08             	sub    esp,0x8
   1b815:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b818:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b81e:	50                   	push   eax
   1b81f:	e8 52 3c 00 00       	call   1f476 <fatfs_entry_lfn_exists>
   1b824:	83 c4 10             	add    esp,0x10
   1b827:	85 c0                	test   eax,eax
   1b829:	74 60                	je     1b88b <fatfs_get_file_entry+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:448
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1b82b:	83 ec 0c             	sub    esp,0xc
   1b82e:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b834:	50                   	push   eax
   1b835:	e8 80 3b 00 00       	call   1f3ba <fatfs_lfn_cache_get>
   1b83a:	83 c4 10             	add    esp,0x10
   1b83d:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:451

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find))
   1b840:	83 ec 08             	sub    esp,0x8
   1b843:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b846:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1b849:	e8 5d 47 00 00       	call   1ffab <fatfs_compare_names>
   1b84e:	83 c4 10             	add    esp,0x10
   1b851:	85 c0                	test   eax,eax
   1b853:	74 1d                	je     1b872 <fatfs_get_file_entry+0x146>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:453
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1b855:	83 ec 04             	sub    esp,0x4
   1b858:	6a 20                	push   0x20
   1b85a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b85d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b860:	e8 f3 a2 00 00       	call   25b58 <memcpy>
   1b865:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:454
                        return 1;
   1b868:	b8 01 00 00 00       	mov    eax,0x1
   1b86d:	e9 35 01 00 00       	jmp    1b9a7 <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:457
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1b872:	83 ec 08             	sub    esp,0x8
   1b875:	6a 00                	push   0x0
   1b877:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b87d:	50                   	push   eax
   1b87e:	e8 75 38 00 00       	call   1f0f8 <fatfs_lfn_cache_init>
   1b883:	83 c4 10             	add    esp,0x10
   1b886:	e9 fd 00 00 00       	jmp    1b988 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:462
                }
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1b88b:	83 ec 0c             	sub    esp,0xc
   1b88e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b891:	e8 3a 3c 00 00       	call   1f4d0 <fatfs_entry_sfn_only>
   1b896:	83 c4 10             	add    esp,0x10
   1b899:	85 c0                	test   eax,eax
   1b89b:	0f 84 e7 00 00 00    	je     1b988 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:464
                {
                    memset(short_filename, 0, sizeof(short_filename));
   1b8a1:	83 ec 04             	sub    esp,0x4
   1b8a4:	6a 0d                	push   0xd
   1b8a6:	6a 00                	push   0x0
   1b8a8:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1b8ab:	50                   	push   eax
   1b8ac:	e8 cc 97 00 00       	call   2507d <memset>
   1b8b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467

                    // Copy name to string
                    for (i=0; i<8; i++)
   1b8b4:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   1b8b8:	eb 1d                	jmp    1b8d7 <fatfs_get_file_entry+0x1ab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:468 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1b8ba:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b8be:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   1b8c2:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1b8c5:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1b8c9:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 3)
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1b8cd:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b8d1:	83 c0 01             	add    eax,0x1
   1b8d4:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 1)
   1b8d7:	80 7d f6 07          	cmp    BYTE PTR [ebp-0xa],0x7
   1b8db:	76 dd                	jbe    1b8ba <fatfs_get_file_entry+0x18e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:471
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1b8dd:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472
                    for (i=8; i<11; i++)
   1b8e4:	c6 45 f6 08          	mov    BYTE PTR [ebp-0xa],0x8
   1b8e8:	eb 36                	jmp    1b920 <fatfs_get_file_entry+0x1f4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:474
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1b8ea:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b8ee:	8d 48 01             	lea    ecx,[eax+0x1]
   1b8f1:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b8f5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1b8f8:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1b8fc:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:475
                        if (directoryEntry->Name[i] != ' ')
   1b900:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b904:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1b907:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1b90b:	3c 20                	cmp    al,0x20
   1b90d:	74 07                	je     1b916 <fatfs_get_file_entry+0x1ea>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:476
                            dotRequired = 1;
   1b90f:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1b916:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1b91a:	83 c0 01             	add    eax,0x1
   1b91d:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 1)
   1b920:	80 7d f6 0a          	cmp    BYTE PTR [ebp-0xa],0xa
   1b924:	76 c4                	jbe    1b8ea <fatfs_get_file_entry+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:480
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1b926:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1b92a:	74 14                	je     1b940 <fatfs_get_file_entry+0x214>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:483
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1b92c:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1b930:	3c 2e                	cmp    al,0x2e
   1b932:	74 06                	je     1b93a <fatfs_get_file_entry+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:484
                            short_filename[8] = '.';
   1b934:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1b938:	eb 0a                	jmp    1b944 <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:486
                        else
                            short_filename[8] = ' ';
   1b93a:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1b93e:	eb 04                	jmp    1b944 <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:489
                    }
                    else
                        short_filename[8] = ' ';
   1b940:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:492

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
   1b944:	83 ec 08             	sub    esp,0x8
   1b947:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b94a:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1b94d:	50                   	push   eax
   1b94e:	e8 58 46 00 00       	call   1ffab <fatfs_compare_names>
   1b953:	83 c4 10             	add    esp,0x10
   1b956:	85 c0                	test   eax,eax
   1b958:	74 1a                	je     1b974 <fatfs_get_file_entry+0x248>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:494
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1b95a:	83 ec 04             	sub    esp,0x4
   1b95d:	6a 20                	push   0x20
   1b95f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1b962:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b965:	e8 ee a1 00 00       	call   25b58 <memcpy>
   1b96a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:495
                        return 1;
   1b96d:	b8 01 00 00 00       	mov    eax,0x1
   1b972:	eb 33                	jmp    1b9a7 <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:498
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1b974:	83 ec 08             	sub    esp,0x8
   1b977:	6a 00                	push   0x0
   1b979:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1b97f:	50                   	push   eax
   1b980:	e8 73 37 00 00       	call   1f0f8 <fatfs_lfn_cache_init>
   1b985:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b988:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b98c:	83 c0 01             	add    eax,0x1
   1b98f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 1)
   1b992:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1b996:	0f 86 fb fd ff ff    	jbe    1b797 <fatfs_get_file_entry+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:504 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1b99c:	e9 cb fd ff ff       	jmp    1b76c <fatfs_get_file_entry+0x40>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:503
                    fatfs_lfn_cache_init(&lfn, 0);
                }
            } // End of if
        }
        else
            break;
   1b9a1:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:506
    } // End of while loop

    return 0;
   1b9a2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:507 (discriminator 2)
}
   1b9a7:	c9                   	leave  
   1b9a8:	c3                   	ret    

0001b9a9 <fatfs_sfn_exists>:
fatfs_sfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:514
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1b9a9:	55                   	push   ebp
   1b9aa:	89 e5                	mov    ebp,esp
   1b9ac:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:515
    uint8 item=0;
   1b9af:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:516
    uint16 recordoffset = 0;
   1b9b3:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:517
    int x=0;
   1b9b9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:524

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1b9c0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b9c3:	8d 50 01             	lea    edx,[eax+0x1]
   1b9c6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1b9c9:	6a 00                	push   0x0
   1b9cb:	50                   	push   eax
   1b9cc:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b9cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b9d2:	e8 2d f9 ff ff       	call   1b304 <fatfs_sector_reader>
   1b9d7:	83 c4 10             	add    esp,0x10
   1b9da:	85 c0                	test   eax,eax
   1b9dc:	0f 84 8a 00 00 00    	je     1ba6c <fatfs_sfn_exists+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1b9e2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1b9e6:	eb 79                	jmp    1ba61 <fatfs_sfn_exists+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:530
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1b9e8:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1b9ec:	c1 e0 05             	shl    eax,0x5
   1b9ef:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:533

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1b9f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9f6:	8d 50 44             	lea    edx,[eax+0x44]
   1b9f9:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1b9fd:	01 d0                	add    eax,edx
   1b9ff:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:537

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1ba02:	83 ec 0c             	sub    esp,0xc
   1ba05:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1ba08:	e8 05 3a 00 00       	call   1f412 <fatfs_entry_lfn_text>
   1ba0d:	83 c4 10             	add    esp,0x10
   1ba10:	85 c0                	test   eax,eax
   1ba12:	75 43                	jne    1ba57 <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:541
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1ba14:	83 ec 0c             	sub    esp,0xc
   1ba17:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1ba1a:	e8 16 3a 00 00       	call   1f435 <fatfs_entry_lfn_invalid>
   1ba1f:	83 c4 10             	add    esp,0x10
   1ba22:	85 c0                	test   eax,eax
   1ba24:	75 31                	jne    1ba57 <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:546
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1ba26:	83 ec 0c             	sub    esp,0xc
   1ba29:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1ba2c:	e8 9f 3a 00 00       	call   1f4d0 <fatfs_entry_sfn_only>
   1ba31:	83 c4 10             	add    esp,0x10
   1ba34:	85 c0                	test   eax,eax
   1ba36:	74 1f                	je     1ba57 <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:548
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1ba38:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1ba3b:	83 ec 04             	sub    esp,0x4
   1ba3e:	6a 0b                	push   0xb
   1ba40:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1ba43:	50                   	push   eax
   1ba44:	e8 bb 61 ff ff       	call   11c04 <strncmp>
   1ba49:	83 c4 10             	add    esp,0x10
   1ba4c:	85 c0                	test   eax,eax
   1ba4e:	75 07                	jne    1ba57 <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:549
                        return 1;
   1ba50:	b8 01 00 00 00       	mov    eax,0x1
   1ba55:	eb 1b                	jmp    1ba72 <fatfs_sfn_exists+0xc9>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1ba57:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1ba5b:	83 c0 01             	add    eax,0x1
   1ba5e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 1)
   1ba61:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1ba65:	76 81                	jbe    1b9e8 <fatfs_sfn_exists+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:555 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1ba67:	e9 54 ff ff ff       	jmp    1b9c0 <fatfs_sfn_exists+0x17>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:554
                        return 1;
                }
            } // End of if
        }
        else
            break;
   1ba6c:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:557
    } // End of while loop

    return 0;
   1ba6d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:558
}
   1ba72:	c9                   	leave  
   1ba73:	c3                   	ret    

0001ba74 <fatfs_update_timestamps>:
fatfs_update_timestamps():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:565
//-------------------------------------------------------------
// fatfs_update_timestamps: Update date/time details
//-------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access)
{
   1ba74:	55                   	push   ebp
   1ba75:	89 e5                	mov    ebp,esp
   1ba77:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:572
    struct tm * time_info;
    uint16 fat_time;
    uint16 fat_date;

    // Get system time
    time(&time_now);
   1ba7a:	83 ec 0c             	sub    esp,0xc
   1ba7d:	8d 45 ec             	lea    eax,[ebp-0x14]
   1ba80:	50                   	push   eax
   1ba81:	e8 ba bd 00 00       	call   27840 <time>
   1ba86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:575

    // Convert to local time
    time_info = localtime(&time_now);
   1ba89:	83 ec 0c             	sub    esp,0xc
   1ba8c:	8d 45 ec             	lea    eax,[ebp-0x14]
   1ba8f:	50                   	push   eax
   1ba90:	e8 c9 c0 00 00       	call   27b5e <localtime>
   1ba95:	83 c4 10             	add    esp,0x10
   1ba98:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:578

    // Convert time to FAT format
    fat_time = fatfs_convert_to_fat_time(time_info->tm_hour, time_info->tm_min, time_info->tm_sec);
   1ba9b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ba9e:	8b 08                	mov    ecx,DWORD PTR [eax]
   1baa0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1baa3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1baa6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1baa9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1baac:	83 ec 04             	sub    esp,0x4
   1baaf:	51                   	push   ecx
   1bab0:	52                   	push   edx
   1bab1:	50                   	push   eax
   1bab2:	e8 e9 40 00 00       	call   1fba0 <fatfs_convert_to_fat_time>
   1bab7:	83 c4 10             	add    esp,0x10
   1baba:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:581

    // Convert date to FAT format
    fat_date = fatfs_convert_to_fat_date(time_info->tm_mday, time_info->tm_mon + 1, time_info->tm_year + 1900);
   1babe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bac1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1bac4:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1baca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bacd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1bad0:	8d 50 01             	lea    edx,[eax+0x1]
   1bad3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bad6:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1bad9:	83 ec 04             	sub    esp,0x4
   1badc:	51                   	push   ecx
   1badd:	52                   	push   edx
   1bade:	50                   	push   eax
   1badf:	e8 0e 41 00 00       	call   1fbf2 <fatfs_convert_to_fat_date>
   1bae4:	83 c4 10             	add    esp,0x10
   1bae7:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:584

    // Update requested fields
    if (create)
   1baeb:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1baef:	74 38                	je     1bb29 <fatfs_update_timestamps+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:586
    {
        directoryEntry->CrtTime[1] = fat_time >> 8;
   1baf1:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1baf5:	66 c1 e8 08          	shr    ax,0x8
   1baf9:	89 c2                	mov    edx,eax
   1bafb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bafe:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:587
        directoryEntry->CrtTime[0] = fat_time >> 0;
   1bb01:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bb05:	89 c2                	mov    edx,eax
   1bb07:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb0a:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:588
        directoryEntry->CrtDate[1] = fat_date >> 8;
   1bb0d:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bb11:	66 c1 e8 08          	shr    ax,0x8
   1bb15:	89 c2                	mov    edx,eax
   1bb17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb1a:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:589
        directoryEntry->CrtDate[0] = fat_date >> 0;
   1bb1d:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bb21:	89 c2                	mov    edx,eax
   1bb23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb26:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:592
    }

    if (modify)
   1bb29:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1bb2d:	74 38                	je     1bb67 <fatfs_update_timestamps+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:594
    {
        directoryEntry->WrtTime[1] = fat_time >> 8;
   1bb2f:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bb33:	66 c1 e8 08          	shr    ax,0x8
   1bb37:	89 c2                	mov    edx,eax
   1bb39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb3c:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:595
        directoryEntry->WrtTime[0] = fat_time >> 0;
   1bb3f:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bb43:	89 c2                	mov    edx,eax
   1bb45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb48:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:596
        directoryEntry->WrtDate[1] = fat_date >> 8;
   1bb4b:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bb4f:	66 c1 e8 08          	shr    ax,0x8
   1bb53:	89 c2                	mov    edx,eax
   1bb55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb58:	88 50 19             	mov    BYTE PTR [eax+0x19],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:597
        directoryEntry->WrtDate[0] = fat_date >> 0;
   1bb5b:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bb5f:	89 c2                	mov    edx,eax
   1bb61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb64:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:600
    }

    if (access)
   1bb67:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1bb6b:	74 38                	je     1bba5 <fatfs_update_timestamps+0x131>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:602
    {
        directoryEntry->LstAccDate[1] = fat_time >> 8;
   1bb6d:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bb71:	66 c1 e8 08          	shr    ax,0x8
   1bb75:	89 c2                	mov    edx,eax
   1bb77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb7a:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:603
        directoryEntry->LstAccDate[0] = fat_time >> 0;
   1bb7d:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bb81:	89 c2                	mov    edx,eax
   1bb83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb86:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:604
        directoryEntry->LstAccDate[1] = fat_date >> 8;
   1bb89:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bb8d:	66 c1 e8 08          	shr    ax,0x8
   1bb91:	89 c2                	mov    edx,eax
   1bb93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bb96:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:605
        directoryEntry->LstAccDate[0] = fat_date >> 0;
   1bb99:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bb9d:	89 c2                	mov    edx,eax
   1bb9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bba2:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:608
    }

    return 1;
   1bba5:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:609
}
   1bbaa:	c9                   	leave  
   1bbab:	c3                   	ret    

0001bbac <fatfs_update_file_length>:
fatfs_update_file_length():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:617
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
   1bbac:	55                   	push   ebp
   1bbad:	89 e5                	mov    ebp,esp
   1bbaf:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:618
    uint8 item=0;
   1bbb2:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:619
    uint16 recordoffset = 0;
   1bbb6:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:620
    int x=0;
   1bbbc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:624
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1bbc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bbc6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bbc9:	85 c0                	test   eax,eax
   1bbcb:	75 0a                	jne    1bbd7 <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:625
        return 0;
   1bbcd:	b8 00 00 00 00       	mov    eax,0x0
   1bbd2:	e9 14 01 00 00       	jmp    1bceb <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:631

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bbd7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bbda:	8d 50 01             	lea    edx,[eax+0x1]
   1bbdd:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bbe0:	6a 00                	push   0x0
   1bbe2:	50                   	push   eax
   1bbe3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bbe6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bbe9:	e8 16 f7 ff ff       	call   1b304 <fatfs_sector_reader>
   1bbee:	83 c4 10             	add    esp,0x10
   1bbf1:	85 c0                	test   eax,eax
   1bbf3:	0f 84 ec 00 00 00    	je     1bce5 <fatfs_update_file_length+0x139>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bbf9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bbfd:	e9 d4 00 00 00       	jmp    1bcd6 <fatfs_update_file_length+0x12a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:637
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bc02:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bc06:	c1 e0 05             	shl    eax,0x5
   1bc09:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:640

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bc0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc10:	8d 50 44             	lea    edx,[eax+0x44]
   1bc13:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bc17:	01 d0                	add    eax,edx
   1bc19:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:644

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bc1c:	83 ec 0c             	sub    esp,0xc
   1bc1f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bc22:	e8 eb 37 00 00       	call   1f412 <fatfs_entry_lfn_text>
   1bc27:	83 c4 10             	add    esp,0x10
   1bc2a:	85 c0                	test   eax,eax
   1bc2c:	0f 85 9a 00 00 00    	jne    1bccc <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:648
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bc32:	83 ec 0c             	sub    esp,0xc
   1bc35:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bc38:	e8 f8 37 00 00       	call   1f435 <fatfs_entry_lfn_invalid>
   1bc3d:	83 c4 10             	add    esp,0x10
   1bc40:	85 c0                	test   eax,eax
   1bc42:	0f 85 84 00 00 00    	jne    1bccc <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:654
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bc48:	83 ec 0c             	sub    esp,0xc
   1bc4b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bc4e:	e8 7d 38 00 00       	call   1f4d0 <fatfs_entry_sfn_only>
   1bc53:	83 c4 10             	add    esp,0x10
   1bc56:	85 c0                	test   eax,eax
   1bc58:	74 72                	je     1bccc <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:656
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1bc5a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bc5d:	83 ec 04             	sub    esp,0x4
   1bc60:	6a 0b                	push   0xb
   1bc62:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bc65:	50                   	push   eax
   1bc66:	e8 99 5f ff ff       	call   11c04 <strncmp>
   1bc6b:	83 c4 10             	add    esp,0x10
   1bc6e:	85 c0                	test   eax,eax
   1bc70:	75 5a                	jne    1bccc <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:658
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
   1bc72:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bc75:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1bc78:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:662

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1bc7b:	6a 01                	push   0x1
   1bc7d:	6a 01                	push   0x1
   1bc7f:	6a 00                	push   0x0
   1bc81:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bc84:	e8 eb fd ff ff       	call   1ba74 <fatfs_update_timestamps>
   1bc89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:666
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1bc8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc8f:	8d 50 44             	lea    edx,[eax+0x44]
   1bc92:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bc96:	01 d0                	add    eax,edx
   1bc98:	83 ec 04             	sub    esp,0x4
   1bc9b:	6a 20                	push   0x20
   1bc9d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bca0:	50                   	push   eax
   1bca1:	e8 b2 9e 00 00       	call   25b58 <memcpy>
   1bca6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:669

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1bca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bcac:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bcaf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bcb2:	8d 4a 44             	lea    ecx,[edx+0x44]
   1bcb5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bcb8:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1bcbe:	83 ec 04             	sub    esp,0x4
   1bcc1:	6a 01                	push   0x1
   1bcc3:	51                   	push   ecx
   1bcc4:	52                   	push   edx
   1bcc5:	ff d0                	call   eax
   1bcc7:	83 c4 10             	add    esp,0x10
   1bcca:	eb 1f                	jmp    1bceb <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bccc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bcd0:	83 c0 01             	add    eax,0x1
   1bcd3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 1)
   1bcd6:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bcda:	0f 86 22 ff ff ff    	jbe    1bc02 <fatfs_update_file_length+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:676 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1bce0:	e9 f2 fe ff ff       	jmp    1bbd7 <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:675
                    }
                }
            } // End of if
        }
        else
            break;
   1bce5:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:678
    } // End of while loop

    return 0;
   1bce6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:679
}
   1bceb:	c9                   	leave  
   1bcec:	c3                   	ret    

0001bced <fatfs_mark_file_deleted>:
fatfs_mark_file_deleted():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:687
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1bced:	55                   	push   ebp
   1bcee:	89 e5                	mov    ebp,esp
   1bcf0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:688
    uint8 item=0;
   1bcf3:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:689
    uint16 recordoffset = 0;
   1bcf7:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:690
    int x=0;
   1bcfd:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:694
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1bd04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bd07:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bd0a:	85 c0                	test   eax,eax
   1bd0c:	75 0a                	jne    1bd18 <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:695
        return 0;
   1bd0e:	b8 00 00 00 00       	mov    eax,0x0
   1bd13:	e9 11 01 00 00       	jmp    1be29 <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:701

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bd18:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bd1b:	8d 50 01             	lea    edx,[eax+0x1]
   1bd1e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bd21:	6a 00                	push   0x0
   1bd23:	50                   	push   eax
   1bd24:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bd27:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bd2a:	e8 d5 f5 ff ff       	call   1b304 <fatfs_sector_reader>
   1bd2f:	83 c4 10             	add    esp,0x10
   1bd32:	85 c0                	test   eax,eax
   1bd34:	0f 84 e9 00 00 00    	je     1be23 <fatfs_mark_file_deleted+0x136>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bd3a:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bd3e:	e9 d1 00 00 00       	jmp    1be14 <fatfs_mark_file_deleted+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:707
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bd43:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bd47:	c1 e0 05             	shl    eax,0x5
   1bd4a:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:710

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bd4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bd51:	8d 50 44             	lea    edx,[eax+0x44]
   1bd54:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bd58:	01 d0                	add    eax,edx
   1bd5a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:714

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bd5d:	83 ec 0c             	sub    esp,0xc
   1bd60:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bd63:	e8 aa 36 00 00       	call   1f412 <fatfs_entry_lfn_text>
   1bd68:	83 c4 10             	add    esp,0x10
   1bd6b:	85 c0                	test   eax,eax
   1bd6d:	0f 85 97 00 00 00    	jne    1be0a <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:718
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bd73:	83 ec 0c             	sub    esp,0xc
   1bd76:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bd79:	e8 b7 36 00 00       	call   1f435 <fatfs_entry_lfn_invalid>
   1bd7e:	83 c4 10             	add    esp,0x10
   1bd81:	85 c0                	test   eax,eax
   1bd83:	0f 85 81 00 00 00    	jne    1be0a <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:724
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bd89:	83 ec 0c             	sub    esp,0xc
   1bd8c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bd8f:	e8 3c 37 00 00       	call   1f4d0 <fatfs_entry_sfn_only>
   1bd94:	83 c4 10             	add    esp,0x10
   1bd97:	85 c0                	test   eax,eax
   1bd99:	74 6f                	je     1be0a <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:726
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   1bd9b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bd9e:	83 ec 04             	sub    esp,0x4
   1bda1:	6a 0b                	push   0xb
   1bda3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bda6:	50                   	push   eax
   1bda7:	e8 58 5e ff ff       	call   11c04 <strncmp>
   1bdac:	83 c4 10             	add    esp,0x10
   1bdaf:	85 c0                	test   eax,eax
   1bdb1:	75 57                	jne    1be0a <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:729
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
   1bdb3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bdb6:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:733

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1bdb9:	6a 01                	push   0x1
   1bdbb:	6a 01                	push   0x1
   1bdbd:	6a 00                	push   0x0
   1bdbf:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bdc2:	e8 ad fc ff ff       	call   1ba74 <fatfs_update_timestamps>
   1bdc7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:737
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1bdca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bdcd:	8d 50 44             	lea    edx,[eax+0x44]
   1bdd0:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bdd4:	01 d0                	add    eax,edx
   1bdd6:	83 ec 04             	sub    esp,0x4
   1bdd9:	6a 20                	push   0x20
   1bddb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bdde:	50                   	push   eax
   1bddf:	e8 74 9d 00 00       	call   25b58 <memcpy>
   1bde4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:740

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1bde7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bdea:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bded:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bdf0:	8d 4a 44             	lea    ecx,[edx+0x44]
   1bdf3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bdf6:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1bdfc:	83 ec 04             	sub    esp,0x4
   1bdff:	6a 01                	push   0x1
   1be01:	51                   	push   ecx
   1be02:	52                   	push   edx
   1be03:	ff d0                	call   eax
   1be05:	83 c4 10             	add    esp,0x10
   1be08:	eb 1f                	jmp    1be29 <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1be0a:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1be0e:	83 c0 01             	add    eax,0x1
   1be11:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 1)
   1be14:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1be18:	0f 86 25 ff ff ff    	jbe    1bd43 <fatfs_mark_file_deleted+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:747 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1be1e:	e9 f5 fe ff ff       	jmp    1bd18 <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:746
                    }
                }
            } // End of if
        }
        else
            break;
   1be23:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:749
    } // End of while loop

    return 0;
   1be24:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:750
}
   1be29:	c9                   	leave  
   1be2a:	c3                   	ret    

0001be2b <fatfs_list_directory_start>:
fatfs_list_directory_start():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:757
//-----------------------------------------------------------------------------
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
   1be2b:	55                   	push   ebp
   1be2c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:758
    dirls->cluster = StartCluster;
   1be2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1be31:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1be34:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:759
    dirls->sector = 0;
   1be37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1be3a:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:760
    dirls->offset = 0;
   1be40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1be43:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:761
}
   1be47:	90                   	nop
   1be48:	5d                   	pop    ebp
   1be49:	c3                   	ret    

0001be4a <fatfs_list_directory_next>:
fatfs_list_directory_next():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:769
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
   1be4a:	55                   	push   ebp
   1be4b:	89 e5                	mov    ebp,esp
   1be4d:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:773
    uint8 i,item;
    uint16 recordoffset;
    struct fat_dir_entry *directoryEntry;
    char *long_filename = NULL;
   1be53:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:776
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1be5a:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:777
    int result = 0;
   1be61:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:780

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
   1be68:	83 ec 08             	sub    esp,0x8
   1be6b:	6a 00                	push   0x0
   1be6d:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1be73:	50                   	push   eax
   1be74:	e8 7f 32 00 00       	call   1f0f8 <fatfs_lfn_cache_init>
   1be79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:785

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
   1be7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1be7f:	8b 10                	mov    edx,DWORD PTR [eax]
   1be81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1be84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1be87:	6a 00                	push   0x0
   1be89:	52                   	push   edx
   1be8a:	50                   	push   eax
   1be8b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1be8e:	e8 71 f4 ff ff       	call   1b304 <fatfs_sector_reader>
   1be93:	83 c4 10             	add    esp,0x10
   1be96:	85 c0                	test   eax,eax
   1be98:	0f 84 56 04 00 00    	je     1c2f4 <fatfs_list_directory_next+0x4aa>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1be9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1bea1:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1bea5:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
   1bea8:	e9 24 04 00 00       	jmp    1c2d1 <fatfs_list_directory_next+0x487>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:791
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bead:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1beb1:	c1 e0 05             	shl    eax,0x5
   1beb4:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:794

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1beb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bebb:	8d 50 44             	lea    edx,[eax+0x44]
   1bebe:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1bec2:	01 d0                	add    eax,edx
   1bec4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:798

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
   1bec7:	83 ec 0c             	sub    esp,0xc
   1beca:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1becd:	e8 40 35 00 00       	call   1f412 <fatfs_entry_lfn_text>
   1bed2:	83 c4 10             	add    esp,0x10
   1bed5:	85 c0                	test   eax,eax
   1bed7:	74 24                	je     1befd <fatfs_list_directory_next+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:799
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1bed9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bedc:	8d 50 44             	lea    edx,[eax+0x44]
   1bedf:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1bee3:	01 d0                	add    eax,edx
   1bee5:	83 ec 08             	sub    esp,0x8
   1bee8:	50                   	push   eax
   1bee9:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1beef:	50                   	push   eax
   1bef0:	e8 59 32 00 00       	call   1f14e <fatfs_lfn_cache_entry>
   1bef5:	83 c4 10             	add    esp,0x10
   1bef8:	e9 ca 03 00 00       	jmp    1c2c7 <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:802

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
   1befd:	83 ec 0c             	sub    esp,0xc
   1bf00:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bf03:	e8 2d 35 00 00       	call   1f435 <fatfs_entry_lfn_invalid>
   1bf08:	83 c4 10             	add    esp,0x10
   1bf0b:	85 c0                	test   eax,eax
   1bf0d:	74 19                	je     1bf28 <fatfs_list_directory_next+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:803
                    fatfs_lfn_cache_init(&lfn, 0);
   1bf0f:	83 ec 08             	sub    esp,0x8
   1bf12:	6a 00                	push   0x0
   1bf14:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bf1a:	50                   	push   eax
   1bf1b:	e8 d8 31 00 00       	call   1f0f8 <fatfs_lfn_cache_init>
   1bf20:	83 c4 10             	add    esp,0x10
   1bf23:	e9 9f 03 00 00       	jmp    1c2c7 <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:806

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1bf28:	83 ec 08             	sub    esp,0x8
   1bf2b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bf2e:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bf34:	50                   	push   eax
   1bf35:	e8 3c 35 00 00       	call   1f476 <fatfs_entry_lfn_exists>
   1bf3a:	83 c4 10             	add    esp,0x10
   1bf3d:	85 c0                	test   eax,eax
   1bf3f:	0f 84 67 01 00 00    	je     1c0ac <fatfs_list_directory_next+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:809
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1bf45:	83 ec 0c             	sub    esp,0xc
   1bf48:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bf4e:	50                   	push   eax
   1bf4f:	e8 66 34 00 00       	call   1f3ba <fatfs_lfn_cache_get>
   1bf54:	83 c4 10             	add    esp,0x10
   1bf57:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:810
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
   1bf5a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf5d:	83 ec 04             	sub    esp,0x4
   1bf60:	6a 7f                	push   0x7f
   1bf62:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1bf65:	50                   	push   eax
   1bf66:	e8 f9 5c ff ff       	call   11c64 <strncpy>
   1bf6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:812

                    if (fatfs_entry_is_dir(directoryEntry))
   1bf6e:	83 ec 0c             	sub    esp,0xc
   1bf71:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bf74:	e8 a3 35 00 00       	call   1f51c <fatfs_entry_is_dir>
   1bf79:	83 c4 10             	add    esp,0x10
   1bf7c:	85 c0                	test   eax,eax
   1bf7e:	74 0c                	je     1bf8c <fatfs_list_directory_next+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:813
                        entry->is_dir = 1;
   1bf80:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf83:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1bf8a:	eb 0a                	jmp    1bf96 <fatfs_list_directory_next+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:815
                    else
                        entry->is_dir = 0;
   1bf8c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bf8f:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:819

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1bf96:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bf99:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1bf9d:	0f b6 c0             	movzx  eax,al
   1bfa0:	c1 e0 08             	shl    eax,0x8
   1bfa3:	89 c2                	mov    edx,eax
   1bfa5:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfa8:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1bfac:	0f b6 c0             	movzx  eax,al
   1bfaf:	09 d0                	or     eax,edx
   1bfb1:	89 c2                	mov    edx,eax
   1bfb3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bfb6:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:820
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1bfbd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfc0:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1bfc4:	0f b6 c0             	movzx  eax,al
   1bfc7:	c1 e0 08             	shl    eax,0x8
   1bfca:	89 c2                	mov    edx,eax
   1bfcc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfcf:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1bfd3:	0f b6 c0             	movzx  eax,al
   1bfd6:	09 d0                	or     eax,edx
   1bfd8:	89 c2                	mov    edx,eax
   1bfda:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1bfdd:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:821
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1bfe4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bfe7:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1bfeb:	0f b6 c0             	movzx  eax,al
   1bfee:	c1 e0 08             	shl    eax,0x8
   1bff1:	89 c2                	mov    edx,eax
   1bff3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1bff6:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1bffa:	0f b6 c0             	movzx  eax,al
   1bffd:	09 d0                	or     eax,edx
   1bfff:	89 c2                	mov    edx,eax
   1c001:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c004:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:822
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c00b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c00e:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c012:	0f b6 c0             	movzx  eax,al
   1c015:	c1 e0 08             	shl    eax,0x8
   1c018:	89 c2                	mov    edx,eax
   1c01a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c01d:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c021:	0f b6 c0             	movzx  eax,al
   1c024:	09 d0                	or     eax,edx
   1c026:	89 c2                	mov    edx,eax
   1c028:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c02b:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:823
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c032:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c035:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c039:	0f b6 c0             	movzx  eax,al
   1c03c:	c1 e0 08             	shl    eax,0x8
   1c03f:	89 c2                	mov    edx,eax
   1c041:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c044:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c048:	0f b6 c0             	movzx  eax,al
   1c04b:	09 d0                	or     eax,edx
   1c04d:	89 c2                	mov    edx,eax
   1c04f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c052:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:826
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c059:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c05c:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c05f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c062:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:827
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c068:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c06b:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c06f:	0f b7 c0             	movzx  eax,ax
   1c072:	c1 e0 10             	shl    eax,0x10
   1c075:	89 c2                	mov    edx,eax
   1c077:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c07a:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c07e:	0f b7 c0             	movzx  eax,ax
   1c081:	09 d0                	or     eax,edx
   1c083:	89 c2                	mov    edx,eax
   1c085:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c088:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:830

                    // Next starting position
                    dirls->offset = item + 1;
   1c08e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c092:	8d 50 01             	lea    edx,[eax+0x1]
   1c095:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c098:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:831
                    result = 1;
   1c09b:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:832
                    return 1;
   1c0a2:	b8 01 00 00 00       	mov    eax,0x1
   1c0a7:	e9 4c 02 00 00       	jmp    1c2f8 <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:837
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
   1c0ac:	83 ec 0c             	sub    esp,0xc
   1c0af:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c0b2:	e8 19 34 00 00       	call   1f4d0 <fatfs_entry_sfn_only>
   1c0b7:	83 c4 10             	add    esp,0x10
   1c0ba:	85 c0                	test   eax,eax
   1c0bc:	0f 84 05 02 00 00    	je     1c2c7 <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:839
                {
                    fatfs_lfn_cache_init(&lfn, 0);
   1c0c2:	83 ec 08             	sub    esp,0x8
   1c0c5:	6a 00                	push   0x0
   1c0c7:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c0cd:	50                   	push   eax
   1c0ce:	e8 25 30 00 00       	call   1f0f8 <fatfs_lfn_cache_init>
   1c0d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:841

                    memset(short_filename, 0, sizeof(short_filename));
   1c0d6:	83 ec 04             	sub    esp,0x4
   1c0d9:	6a 0d                	push   0xd
   1c0db:	6a 00                	push   0x0
   1c0dd:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1c0e0:	50                   	push   eax
   1c0e1:	e8 97 8f 00 00       	call   2507d <memset>
   1c0e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c0e9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c0ed:	eb 1d                	jmp    1c10c <fatfs_list_directory_next+0x2c2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:845 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1c0ef:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c0f3:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   1c0f7:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1c0fa:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1c0fe:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 3)
                    fatfs_lfn_cache_init(&lfn, 0);

                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c102:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c106:	83 c0 01             	add    eax,0x1
   1c109:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 1)
   1c10c:	80 7d f7 07          	cmp    BYTE PTR [ebp-0x9],0x7
   1c110:	76 dd                	jbe    1c0ef <fatfs_list_directory_next+0x2a5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:848
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1c112:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849
                    for (i=8; i<11; i++)
   1c119:	c6 45 f7 08          	mov    BYTE PTR [ebp-0x9],0x8
   1c11d:	eb 36                	jmp    1c155 <fatfs_list_directory_next+0x30b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:851
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1c11f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c123:	8d 48 01             	lea    ecx,[eax+0x1]
   1c126:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c12a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c12d:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c131:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:852
                        if (directoryEntry->Name[i] != ' ')
   1c135:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c139:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c13c:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c140:	3c 20                	cmp    al,0x20
   1c142:	74 07                	je     1c14b <fatfs_list_directory_next+0x301>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:853
                            dotRequired = 1;
   1c144:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1c14b:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c14f:	83 c0 01             	add    eax,0x1
   1c152:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 1)
   1c155:	80 7d f7 0a          	cmp    BYTE PTR [ebp-0x9],0xa
   1c159:	76 c4                	jbe    1c11f <fatfs_list_directory_next+0x2d5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:857
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1c15b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1c15f:	74 14                	je     1c175 <fatfs_list_directory_next+0x32b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:860
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1c161:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1c165:	3c 2e                	cmp    al,0x2e
   1c167:	74 06                	je     1c16f <fatfs_list_directory_next+0x325>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:861
                            short_filename[8] = '.';
   1c169:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1c16d:	eb 0a                	jmp    1c179 <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:863
                        else
                            short_filename[8] = ' ';
   1c16f:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1c173:	eb 04                	jmp    1c179 <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:866
                    }
                    else
                        short_filename[8] = ' ';
   1c175:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:868

                    fatfs_get_sfn_display_name(entry->filename, short_filename);
   1c179:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c17c:	83 ec 08             	sub    esp,0x8
   1c17f:	8d 55 d3             	lea    edx,[ebp-0x2d]
   1c182:	52                   	push   edx
   1c183:	50                   	push   eax
   1c184:	e8 d7 3f 00 00       	call   20160 <fatfs_get_sfn_display_name>
   1c189:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:870

                    if (fatfs_entry_is_dir(directoryEntry))
   1c18c:	83 ec 0c             	sub    esp,0xc
   1c18f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c192:	e8 85 33 00 00       	call   1f51c <fatfs_entry_is_dir>
   1c197:	83 c4 10             	add    esp,0x10
   1c19a:	85 c0                	test   eax,eax
   1c19c:	74 0c                	je     1c1aa <fatfs_list_directory_next+0x360>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:871
                        entry->is_dir = 1;
   1c19e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1a1:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1c1a8:	eb 0a                	jmp    1c1b4 <fatfs_list_directory_next+0x36a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:873
                    else
                        entry->is_dir = 0;
   1c1aa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1ad:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:877

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1c1b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1b7:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1c1bb:	0f b6 c0             	movzx  eax,al
   1c1be:	c1 e0 08             	shl    eax,0x8
   1c1c1:	89 c2                	mov    edx,eax
   1c1c3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1c6:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1c1ca:	0f b6 c0             	movzx  eax,al
   1c1cd:	09 d0                	or     eax,edx
   1c1cf:	89 c2                	mov    edx,eax
   1c1d1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1d4:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:878
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1c1db:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1de:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1c1e2:	0f b6 c0             	movzx  eax,al
   1c1e5:	c1 e0 08             	shl    eax,0x8
   1c1e8:	89 c2                	mov    edx,eax
   1c1ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c1ed:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1c1f1:	0f b6 c0             	movzx  eax,al
   1c1f4:	09 d0                	or     eax,edx
   1c1f6:	89 c2                	mov    edx,eax
   1c1f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1fb:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:879
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1c202:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c205:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1c209:	0f b6 c0             	movzx  eax,al
   1c20c:	c1 e0 08             	shl    eax,0x8
   1c20f:	89 c2                	mov    edx,eax
   1c211:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c214:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1c218:	0f b6 c0             	movzx  eax,al
   1c21b:	09 d0                	or     eax,edx
   1c21d:	89 c2                	mov    edx,eax
   1c21f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c222:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:880
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c229:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c22c:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c230:	0f b6 c0             	movzx  eax,al
   1c233:	c1 e0 08             	shl    eax,0x8
   1c236:	89 c2                	mov    edx,eax
   1c238:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c23b:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c23f:	0f b6 c0             	movzx  eax,al
   1c242:	09 d0                	or     eax,edx
   1c244:	89 c2                	mov    edx,eax
   1c246:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c249:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:881
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c250:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c253:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c257:	0f b6 c0             	movzx  eax,al
   1c25a:	c1 e0 08             	shl    eax,0x8
   1c25d:	89 c2                	mov    edx,eax
   1c25f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c262:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c266:	0f b6 c0             	movzx  eax,al
   1c269:	09 d0                	or     eax,edx
   1c26b:	89 c2                	mov    edx,eax
   1c26d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c270:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:884
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c277:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c27a:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c27d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c280:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:885
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c286:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c289:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c28d:	0f b7 c0             	movzx  eax,ax
   1c290:	c1 e0 10             	shl    eax,0x10
   1c293:	89 c2                	mov    edx,eax
   1c295:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c298:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c29c:	0f b7 c0             	movzx  eax,ax
   1c29f:	09 d0                	or     eax,edx
   1c2a1:	89 c2                	mov    edx,eax
   1c2a3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c2a6:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:888

                    // Next starting position
                    dirls->offset = item + 1;
   1c2ac:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c2b0:	8d 50 01             	lea    edx,[eax+0x1]
   1c2b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2b6:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:889
                    result = 1;
   1c2b9:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:890
                    return 1;
   1c2c0:	b8 01 00 00 00       	mov    eax,0x1
   1c2c5:	eb 31                	jmp    1c2f8 <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 2)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c2c7:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c2cb:	83 c0 01             	add    eax,0x1
   1c2ce:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 1)
   1c2d1:	80 7d f6 0f          	cmp    BYTE PTR [ebp-0xa],0xf
   1c2d5:	0f 86 d2 fb ff ff    	jbe    1bead <fatfs_list_directory_next+0x63>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:895
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
   1c2db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2de:	8b 00                	mov    eax,DWORD PTR [eax]
   1c2e0:	8d 50 01             	lea    edx,[eax+0x1]
   1c2e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2e6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:896
            dirls->offset = 0;
   1c2e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c2eb:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:900
        }
        else
            break;
    }
   1c2ef:	e9 88 fb ff ff       	jmp    1be7c <fatfs_list_directory_next+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:899
            // If reached end of the dir move onto next sector
            dirls->sector++;
            dirls->offset = 0;
        }
        else
            break;
   1c2f4:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:902
    }

    return result;
   1c2f5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:903 (discriminator 1)
}
   1c2f8:	c9                   	leave  
   1c2f9:	c3                   	ret    
   1c2fa:	66 90                	xchg   ax,ax

0001c2fc <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c2fc:	55                   	push   ebp
   1c2fd:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c2ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c302:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c30c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c30f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c312:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c314:	90                   	nop
   1c315:	5d                   	pop    ebp
   1c316:	c3                   	ret    

0001c317 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c317:	55                   	push   ebp
   1c318:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c31a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c31d:	8b 00                	mov    eax,DWORD PTR [eax]
   1c31f:	85 c0                	test   eax,eax
   1c321:	75 0d                	jne    1c330 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c323:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c326:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c329:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c32c:	89 10                	mov    DWORD PTR [eax],edx
   1c32e:	eb 0e                	jmp    1c33e <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c330:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c333:	8b 00                	mov    eax,DWORD PTR [eax]
   1c335:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c338:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c33b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c33e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c341:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c344:	85 c0                	test   eax,eax
   1c346:	75 0d                	jne    1c355 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c348:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c34b:	8b 10                	mov    edx,DWORD PTR [eax]
   1c34d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c350:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c353:	eb 0d                	jmp    1c362 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c355:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c358:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c35b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c35e:	8b 12                	mov    edx,DWORD PTR [edx]
   1c360:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1c362:	90                   	nop
   1c363:	5d                   	pop    ebp
   1c364:	c3                   	ret    

0001c365 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c365:	55                   	push   ebp
   1c366:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c368:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c36b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c36e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c370:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c373:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c376:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c379:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c37c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c37f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c382:	85 c0                	test   eax,eax
   1c384:	75 0b                	jne    1c391 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c386:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c389:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c38c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c38f:	eb 0b                	jmp    1c39c <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c391:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c394:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c397:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c39a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c39c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c39f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c3a2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1c3a5:	90                   	nop
   1c3a6:	5d                   	pop    ebp
   1c3a7:	c3                   	ret    

0001c3a8 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c3a8:	55                   	push   ebp
   1c3a9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c3ab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c3ae:	8b 10                	mov    edx,DWORD PTR [eax]
   1c3b0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c3b3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c3b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c3b8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c3bb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c3be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c3c1:	8b 00                	mov    eax,DWORD PTR [eax]
   1c3c3:	85 c0                	test   eax,eax
   1c3c5:	75 0a                	jne    1c3d1 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c3c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3ca:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c3cd:	89 10                	mov    DWORD PTR [eax],edx
   1c3cf:	eb 0b                	jmp    1c3dc <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c3d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c3d4:	8b 00                	mov    eax,DWORD PTR [eax]
   1c3d6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c3d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c3dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c3df:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c3e2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1c3e4:	90                   	nop
   1c3e5:	5d                   	pop    ebp
   1c3e6:	c3                   	ret    

0001c3e7 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c3e7:	55                   	push   ebp
   1c3e8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c3ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3ed:	8b 00                	mov    eax,DWORD PTR [eax]
   1c3ef:	85 c0                	test   eax,eax
   1c3f1:	75 26                	jne    1c419 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c3f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3f6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c3f9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c3fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c3fe:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c401:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c404:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c407:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c40d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c410:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c417:	eb 14                	jmp    1c42d <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c419:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c41c:	8b 00                	mov    eax,DWORD PTR [eax]
   1c41e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c421:	50                   	push   eax
   1c422:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c425:	e8 7e ff ff ff       	call   1c3a8 <fat_list_insert_before>
   1c42a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1c42d:	90                   	nop
   1c42e:	c9                   	leave  
   1c42f:	c3                   	ret    

0001c430 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c430:	55                   	push   ebp
   1c431:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c436:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c439:	85 c0                	test   eax,eax
   1c43b:	75 10                	jne    1c44d <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c43d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c440:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c443:	e8 9f ff ff ff       	call   1c3e7 <fat_list_insert_first>
   1c448:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c44b:	eb 15                	jmp    1c462 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c44d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c450:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c453:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c456:	50                   	push   eax
   1c457:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c45a:	e8 06 ff ff ff       	call   1c365 <fat_list_insert_after>
   1c45f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1c462:	90                   	nop
   1c463:	c9                   	leave  
   1c464:	c3                   	ret    

0001c465 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c465:	55                   	push   ebp
   1c466:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c46b:	8b 00                	mov    eax,DWORD PTR [eax]
   1c46d:	85 c0                	test   eax,eax
   1c46f:	0f 94 c0             	sete   al
   1c472:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1c475:	5d                   	pop    ebp
   1c476:	c3                   	ret    

0001c477 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c477:	55                   	push   ebp
   1c478:	89 e5                	mov    ebp,esp
   1c47a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c47d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c480:	8b 00                	mov    eax,DWORD PTR [eax]
   1c482:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c485:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c489:	74 0e                	je     1c499 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c48b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c48e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c491:	e8 81 fe ff ff       	call   1c317 <fat_list_remove>
   1c496:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1c499:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1c49c:	c9                   	leave  
   1c49d:	c3                   	ret    

0001c49e <fatfs_cache_init>:
fatfs_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:43

//-----------------------------------------------------------------------------
// fatfs_cache_init:
//-----------------------------------------------------------------------------
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
   1c49e:	55                   	push   ebp
   1c49f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:54
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
        file->cluster_cache_data[i] = 0;
    }
#endif

    return 1;
   1c4a1:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:55
}
   1c4a6:	5d                   	pop    ebp
   1c4a7:	c3                   	ret    

0001c4a8 <fatfs_cache_get_next_cluster>:
fatfs_cache_get_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:60
//-----------------------------------------------------------------------------
// fatfs_cache_get_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
   1c4a8:	55                   	push   ebp
   1c4a9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:71
        *pNextCluster = file->cluster_cache_data[slot];
        return 1;
    }
#endif

    return 0;
   1c4ab:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:72
}
   1c4b0:	5d                   	pop    ebp
   1c4b1:	c3                   	ret    

0001c4b2 <fatfs_cache_set_next_cluster>:
fatfs_cache_set_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:77
//-----------------------------------------------------------------------------
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
   1c4b2:	55                   	push   ebp
   1c4b3:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:90
        file->cluster_cache_idx[slot] = clusterIdx;
        file->cluster_cache_data[slot] = nextCluster;
    }
#endif

    return 1;
   1c4b5:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:91
}
   1c4ba:	5d                   	pop    ebp
   1c4bb:	c3                   	ret    

0001c4bc <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c4bc:	55                   	push   ebp
   1c4bd:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c4bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c4c2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c4c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c4cc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c4cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c4d2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c4d4:	90                   	nop
   1c4d5:	5d                   	pop    ebp
   1c4d6:	c3                   	ret    

0001c4d7 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c4d7:	55                   	push   ebp
   1c4d8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c4da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4dd:	8b 00                	mov    eax,DWORD PTR [eax]
   1c4df:	85 c0                	test   eax,eax
   1c4e1:	75 0d                	jne    1c4f0 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c4e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4e6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c4e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c4ec:	89 10                	mov    DWORD PTR [eax],edx
   1c4ee:	eb 0e                	jmp    1c4fe <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c4f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c4f3:	8b 00                	mov    eax,DWORD PTR [eax]
   1c4f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c4f8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c4fb:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c4fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c501:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c504:	85 c0                	test   eax,eax
   1c506:	75 0d                	jne    1c515 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c508:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c50b:	8b 10                	mov    edx,DWORD PTR [eax]
   1c50d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c510:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c513:	eb 0d                	jmp    1c522 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c515:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c518:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c51b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c51e:	8b 12                	mov    edx,DWORD PTR [edx]
   1c520:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1c522:	90                   	nop
   1c523:	5d                   	pop    ebp
   1c524:	c3                   	ret    

0001c525 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c525:	55                   	push   ebp
   1c526:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c528:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c52b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c52e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c530:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c533:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c536:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c539:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c53c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c53f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c542:	85 c0                	test   eax,eax
   1c544:	75 0b                	jne    1c551 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c546:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c549:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c54c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c54f:	eb 0b                	jmp    1c55c <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c551:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c554:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c557:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c55a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c55c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c55f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c562:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1c565:	90                   	nop
   1c566:	5d                   	pop    ebp
   1c567:	c3                   	ret    

0001c568 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c568:	55                   	push   ebp
   1c569:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c56b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c56e:	8b 10                	mov    edx,DWORD PTR [eax]
   1c570:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c573:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c575:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c578:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c57b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c57e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c581:	8b 00                	mov    eax,DWORD PTR [eax]
   1c583:	85 c0                	test   eax,eax
   1c585:	75 0a                	jne    1c591 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c587:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c58a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c58d:	89 10                	mov    DWORD PTR [eax],edx
   1c58f:	eb 0b                	jmp    1c59c <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c591:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c594:	8b 00                	mov    eax,DWORD PTR [eax]
   1c596:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c599:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c59c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c59f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c5a2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1c5a4:	90                   	nop
   1c5a5:	5d                   	pop    ebp
   1c5a6:	c3                   	ret    

0001c5a7 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c5a7:	55                   	push   ebp
   1c5a8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c5aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5ad:	8b 00                	mov    eax,DWORD PTR [eax]
   1c5af:	85 c0                	test   eax,eax
   1c5b1:	75 26                	jne    1c5d9 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c5b3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5b6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c5b9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c5bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5be:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c5c1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c5c4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c5c7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c5cd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c5d0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c5d7:	eb 14                	jmp    1c5ed <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c5d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5dc:	8b 00                	mov    eax,DWORD PTR [eax]
   1c5de:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c5e1:	50                   	push   eax
   1c5e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c5e5:	e8 7e ff ff ff       	call   1c568 <fat_list_insert_before>
   1c5ea:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1c5ed:	90                   	nop
   1c5ee:	c9                   	leave  
   1c5ef:	c3                   	ret    

0001c5f0 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c5f0:	55                   	push   ebp
   1c5f1:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c5f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c5f9:	85 c0                	test   eax,eax
   1c5fb:	75 10                	jne    1c60d <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c5fd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c600:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c603:	e8 9f ff ff ff       	call   1c5a7 <fat_list_insert_first>
   1c608:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c60b:	eb 15                	jmp    1c622 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c60d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c610:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c613:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c616:	50                   	push   eax
   1c617:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c61a:	e8 06 ff ff ff       	call   1c525 <fat_list_insert_after>
   1c61f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1c622:	90                   	nop
   1c623:	c9                   	leave  
   1c624:	c3                   	ret    

0001c625 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c625:	55                   	push   ebp
   1c626:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c628:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c62b:	8b 00                	mov    eax,DWORD PTR [eax]
   1c62d:	85 c0                	test   eax,eax
   1c62f:	0f 94 c0             	sete   al
   1c632:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1c635:	5d                   	pop    ebp
   1c636:	c3                   	ret    

0001c637 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c637:	55                   	push   ebp
   1c638:	89 e5                	mov    ebp,esp
   1c63a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c63d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c640:	8b 00                	mov    eax,DWORD PTR [eax]
   1c642:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c645:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c649:	74 0e                	je     1c659 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c64b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c64e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c651:	e8 81 fe ff ff       	call   1c4d7 <fat_list_remove>
   1c656:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1c659:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1c65c:	c9                   	leave  
   1c65d:	c3                   	ret    

0001c65e <_allocate_file>:
_allocate_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:72

//-----------------------------------------------------------------------------
// _allocate_file: Find a slot in the open files buffer for a new file
//-----------------------------------------------------------------------------
static FL_FILE* _allocate_file(void)
{
   1c65e:	55                   	push   ebp
   1c65f:	89 e5                	mov    ebp,esp
   1c661:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:74
    // Allocate free file
    struct fat_node *node = fat_list_pop_head(&_free_file_list);
   1c664:	68 10 eb 09 00       	push   0x9eb10
   1c669:	e8 c9 ff ff ff       	call   1c637 <fat_list_pop_head>
   1c66e:	83 c4 04             	add    esp,0x4
   1c671:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:77

    // Add to open list
    if (node)
   1c674:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c678:	74 10                	je     1c68a <_allocate_file+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:78
        fat_list_insert_last(&_open_file_list, node);
   1c67a:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c67d:	68 08 eb 09 00       	push   0x9eb08
   1c682:	e8 69 ff ff ff       	call   1c5f0 <fat_list_insert_last>
   1c687:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80

    return fat_list_entry(node, FL_FILE, list_node);
   1c68a:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c68e:	74 0a                	je     1c69a <_allocate_file+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 1)
   1c690:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1c693:	2d 34 03 00 00       	sub    eax,0x334
   1c698:	eb 05                	jmp    1c69f <_allocate_file+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 2)
   1c69a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:81 (discriminator 5)
}
   1c69f:	c9                   	leave  
   1c6a0:	c3                   	ret    

0001c6a1 <_check_file_open>:
_check_file_open():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:86
//-----------------------------------------------------------------------------
// _check_file_open: Returns true if the file is already open
//-----------------------------------------------------------------------------
static int _check_file_open(FL_FILE* file)
{
   1c6a1:	55                   	push   ebp
   1c6a2:	89 e5                	mov    ebp,esp
   1c6a4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1c6a7:	a1 08 eb 09 00       	mov    eax,ds:0x9eb08
   1c6ac:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1c6af:	eb 6f                	jmp    1c720 <_check_file_open+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   1c6b1:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1c6b5:	74 0a                	je     1c6c1 <_check_file_open+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 1)
   1c6b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1c6ba:	2d 34 03 00 00       	sub    eax,0x334
   1c6bf:	eb 05                	jmp    1c6c6 <_check_file_open+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 2)
   1c6c1:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 4)
   1c6c6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:95 (discriminator 4)

        // If not the current file
        if (openFile != file)
   1c6c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c6cc:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1c6cf:	74 46                	je     1c717 <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   1c6d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c6d4:	8d 50 14             	lea    edx,[eax+0x14]
   1c6d7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c6da:	83 c0 14             	add    eax,0x14
   1c6dd:	83 ec 08             	sub    esp,0x8
   1c6e0:	52                   	push   edx
   1c6e1:	50                   	push   eax
   1c6e2:	e8 c4 38 00 00       	call   1ffab <fatfs_compare_names>
   1c6e7:	83 c4 10             	add    esp,0x10
   1c6ea:	85 c0                	test   eax,eax
   1c6ec:	74 29                	je     1c717 <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98 (discriminator 1)
   1c6ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c6f1:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1c6f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c6fa:	05 94 00 00 00       	add    eax,0x94
   1c6ff:	83 ec 08             	sub    esp,0x8
   1c702:	52                   	push   edx
   1c703:	50                   	push   eax
   1c704:	e8 a2 38 00 00       	call   1ffab <fatfs_compare_names>
   1c709:	83 c4 10             	add    esp,0x10
   1c70c:	85 c0                	test   eax,eax
   1c70e:	74 07                	je     1c717 <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:99
                return 1;
   1c710:	b8 01 00 00 00       	mov    eax,0x1
   1c715:	eb 14                	jmp    1c72b <_check_file_open+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 2)
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1c717:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1c71a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c71d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 1)
   1c720:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1c724:	75 8b                	jne    1c6b1 <_check_file_open+0x10>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:103
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
        }
    }

    return 0;
   1c726:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:104
}
   1c72b:	c9                   	leave  
   1c72c:	c3                   	ret    

0001c72d <_free_file>:
_free_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:109
//-----------------------------------------------------------------------------
// _free_file: Free open file handle
//-----------------------------------------------------------------------------
static void _free_file(FL_FILE* file)
{
   1c72d:	55                   	push   ebp
   1c72e:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:111
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);
   1c730:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c733:	05 34 03 00 00       	add    eax,0x334
   1c738:	50                   	push   eax
   1c739:	68 08 eb 09 00       	push   0x9eb08
   1c73e:	e8 94 fd ff ff       	call   1c4d7 <fat_list_remove>
   1c743:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:114

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   1c746:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c749:	05 34 03 00 00       	add    eax,0x334
   1c74e:	50                   	push   eax
   1c74f:	68 10 eb 09 00       	push   0x9eb10
   1c754:	e8 97 fe ff ff       	call   1c5f0 <fat_list_insert_last>
   1c759:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:115
}
   1c75c:	90                   	nop
   1c75d:	c9                   	leave  
   1c75e:	c3                   	ret    

0001c75f <_open_directory>:
_open_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:126
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
   1c75f:	55                   	push   ebp
   1c760:	89 e5                	mov    ebp,esp
   1c762:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:134
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   1c768:	83 ec 0c             	sub    esp,0xc
   1c76b:	68 a0 e6 09 00       	push   0x9e6a0
   1c770:	e8 ac ef ff ff       	call   1b721 <fatfs_get_root_cluster>
   1c775:	83 c4 10             	add    esp,0x10
   1c778:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:137

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   1c77b:	83 ec 0c             	sub    esp,0xc
   1c77e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c781:	e8 c2 34 00 00       	call   1fc48 <fatfs_total_path_levels>
   1c786:	83 c4 10             	add    esp,0x10
   1c789:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1c78c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1c793:	e9 93 00 00 00       	jmp    1c82b <_open_directory+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:142
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   1c798:	68 80 00 00 00       	push   0x80
   1c79d:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1c7a3:	50                   	push   eax
   1c7a4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1c7a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c7aa:	e8 29 35 00 00       	call   1fcd8 <fatfs_get_substring>
   1c7af:	83 c4 10             	add    esp,0x10
   1c7b2:	83 f8 ff             	cmp    eax,0xffffffff
   1c7b5:	75 0a                	jne    1c7c1 <_open_directory+0x62>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:143
            return 0;
   1c7b7:	b8 00 00 00 00       	mov    eax,0x0
   1c7bc:	e9 86 00 00 00       	jmp    1c847 <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:146

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   1c7c1:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1c7c7:	50                   	push   eax
   1c7c8:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1c7ce:	50                   	push   eax
   1c7cf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1c7d2:	68 a0 e6 09 00       	push   0x9e6a0
   1c7d7:	e8 50 ef ff ff       	call   1b72c <fatfs_get_file_entry>
   1c7dc:	83 c4 10             	add    esp,0x10
   1c7df:	85 c0                	test   eax,eax
   1c7e1:	74 3d                	je     1c820 <_open_directory+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:149
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   1c7e3:	83 ec 0c             	sub    esp,0xc
   1c7e6:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1c7ec:	50                   	push   eax
   1c7ed:	e8 2a 2d 00 00       	call   1f51c <fatfs_entry_is_dir>
   1c7f2:	83 c4 10             	add    esp,0x10
   1c7f5:	85 c0                	test   eax,eax
   1c7f7:	74 20                	je     1c819 <_open_directory+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:150
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1c7f9:	0f b7 85 60 ff ff ff 	movzx  eax,WORD PTR [ebp-0xa0]
   1c800:	0f b7 c0             	movzx  eax,ax
   1c803:	c1 e0 10             	shl    eax,0x10
   1c806:	89 c2                	mov    edx,eax
   1c808:	0f b7 85 66 ff ff ff 	movzx  eax,WORD PTR [ebp-0x9a]
   1c80f:	0f b7 c0             	movzx  eax,ax
   1c812:	01 d0                	add    eax,edx
   1c814:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1c817:	eb 0e                	jmp    1c827 <_open_directory+0xc8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:152
            else
                return 0;
   1c819:	b8 00 00 00 00       	mov    eax,0x0
   1c81e:	eb 27                	jmp    1c847 <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:155
        }
        else
            return 0;
   1c820:	b8 00 00 00 00       	mov    eax,0x0
   1c825:	eb 20                	jmp    1c847 <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 2)

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1c827:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 1)
   1c82b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c82e:	83 c0 01             	add    eax,0x1
   1c831:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1c834:	0f 8f 5e ff ff ff    	jg     1c798 <_open_directory+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:158
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   1c83a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c83d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1c840:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:159
    return 1;
   1c842:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:160 (discriminator 1)
}
   1c847:	c9                   	leave  
   1c848:	c3                   	ret    

0001c849 <_create_directory>:
_create_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:166
//-----------------------------------------------------------------------------
// _create_directory: Cycle through path string and create the end directory
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static int _create_directory(char *path)
{
   1c849:	55                   	push   ebp
   1c84a:	89 e5                	mov    ebp,esp
   1c84c:	53                   	push   ebx
   1c84d:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:170
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1c850:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:174
    int i;

    // Allocate a new file handle
    file = _allocate_file();
   1c857:	e8 02 fe ff ff       	call   1c65e <_allocate_file>
   1c85c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:175
    if (!file)
   1c85f:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1c863:	75 0a                	jne    1c86f <_create_directory+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:176
        return 0;
   1c865:	b8 00 00 00 00       	mov    eax,0x0
   1c86a:	e9 94 03 00 00       	jmp    1cc03 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:179

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1c86f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c872:	83 c0 14             	add    eax,0x14
   1c875:	83 ec 04             	sub    esp,0x4
   1c878:	68 80 00 00 00       	push   0x80
   1c87d:	6a 00                	push   0x0
   1c87f:	50                   	push   eax
   1c880:	e8 f8 87 00 00       	call   2507d <memset>
   1c885:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:180
    memset(file->filename, '\0', sizeof(file->filename));
   1c888:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c88b:	05 94 00 00 00       	add    eax,0x94
   1c890:	83 ec 04             	sub    esp,0x4
   1c893:	68 80 00 00 00       	push   0x80
   1c898:	6a 00                	push   0x0
   1c89a:	50                   	push   eax
   1c89b:	e8 dd 87 00 00       	call   2507d <memset>
   1c8a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:183

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1c8a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c8a6:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1c8ac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c8af:	83 c0 14             	add    eax,0x14
   1c8b2:	83 ec 0c             	sub    esp,0xc
   1c8b5:	68 80 00 00 00       	push   0x80
   1c8ba:	52                   	push   edx
   1c8bb:	68 80 00 00 00       	push   0x80
   1c8c0:	50                   	push   eax
   1c8c1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c8c4:	e8 14 35 00 00       	call   1fddd <fatfs_split_path>
   1c8c9:	83 c4 20             	add    esp,0x20
   1c8cc:	83 f8 ff             	cmp    eax,0xffffffff
   1c8cf:	75 18                	jne    1c8e9 <_create_directory+0xa0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:185
    {
        _free_file(file);
   1c8d1:	83 ec 0c             	sub    esp,0xc
   1c8d4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c8d7:	e8 51 fe ff ff       	call   1c72d <_free_file>
   1c8dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:186
        return 0;
   1c8df:	b8 00 00 00 00       	mov    eax,0x0
   1c8e4:	e9 1a 03 00 00       	jmp    1cc03 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:190
    }

    // Check if file already open
    if (_check_file_open(file))
   1c8e9:	83 ec 0c             	sub    esp,0xc
   1c8ec:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c8ef:	e8 ad fd ff ff       	call   1c6a1 <_check_file_open>
   1c8f4:	83 c4 10             	add    esp,0x10
   1c8f7:	85 c0                	test   eax,eax
   1c8f9:	74 18                	je     1c913 <_create_directory+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:192
    {
        _free_file(file);
   1c8fb:	83 ec 0c             	sub    esp,0xc
   1c8fe:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c901:	e8 27 fe ff ff       	call   1c72d <_free_file>
   1c906:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:193
        return 0;
   1c909:	b8 00 00 00 00       	mov    eax,0x0
   1c90e:	e9 f0 02 00 00       	jmp    1cc03 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:197
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1c913:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c916:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1c91a:	84 c0                	test   al,al
   1c91c:	75 19                	jne    1c937 <_create_directory+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:198
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1c91e:	83 ec 0c             	sub    esp,0xc
   1c921:	68 a0 e6 09 00       	push   0x9e6a0
   1c926:	e8 f6 ed ff ff       	call   1b721 <fatfs_get_root_cluster>
   1c92b:	83 c4 10             	add    esp,0x10
   1c92e:	89 c2                	mov    edx,eax
   1c930:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c933:	89 10                	mov    DWORD PTR [eax],edx
   1c935:	eb 32                	jmp    1c969 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:202
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1c937:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c93a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1c93d:	83 c2 14             	add    edx,0x14
   1c940:	83 ec 08             	sub    esp,0x8
   1c943:	50                   	push   eax
   1c944:	52                   	push   edx
   1c945:	e8 15 fe ff ff       	call   1c75f <_open_directory>
   1c94a:	83 c4 10             	add    esp,0x10
   1c94d:	85 c0                	test   eax,eax
   1c94f:	75 18                	jne    1c969 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:204
        {
            _free_file(file);
   1c951:	83 ec 0c             	sub    esp,0xc
   1c954:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c957:	e8 d1 fd ff ff       	call   1c72d <_free_file>
   1c95c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:205
            return 0;
   1c95f:	b8 00 00 00 00       	mov    eax,0x0
   1c964:	e9 9a 02 00 00       	jmp    1cc03 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:210
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1c969:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c96c:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1c972:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c975:	8b 00                	mov    eax,DWORD PTR [eax]
   1c977:	8d 55 cc             	lea    edx,[ebp-0x34]
   1c97a:	52                   	push   edx
   1c97b:	51                   	push   ecx
   1c97c:	50                   	push   eax
   1c97d:	68 a0 e6 09 00       	push   0x9e6a0
   1c982:	e8 a5 ed ff ff       	call   1b72c <fatfs_get_file_entry>
   1c987:	83 c4 10             	add    esp,0x10
   1c98a:	83 f8 01             	cmp    eax,0x1
   1c98d:	75 18                	jne    1c9a7 <_create_directory+0x15e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:212
    {
        _free_file(file);
   1c98f:	83 ec 0c             	sub    esp,0xc
   1c992:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c995:	e8 93 fd ff ff       	call   1c72d <_free_file>
   1c99a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:213
        return 0;
   1c99d:	b8 00 00 00 00       	mov    eax,0x0
   1c9a2:	e9 5c 02 00 00       	jmp    1cc03 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:216
    }

    file->startcluster = 0;
   1c9a7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c9aa:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:219

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1c9b1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c9b4:	83 c0 04             	add    eax,0x4
   1c9b7:	6a 01                	push   0x1
   1c9b9:	50                   	push   eax
   1c9ba:	6a 01                	push   0x1
   1c9bc:	68 a0 e6 09 00       	push   0x9e6a0
   1c9c1:	e8 da 44 00 00       	call   20ea0 <fatfs_allocate_free_space>
   1c9c6:	83 c4 10             	add    esp,0x10
   1c9c9:	85 c0                	test   eax,eax
   1c9cb:	75 18                	jne    1c9e5 <_create_directory+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:221
    {
        _free_file(file);
   1c9cd:	83 ec 0c             	sub    esp,0xc
   1c9d0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c9d3:	e8 55 fd ff ff       	call   1c72d <_free_file>
   1c9d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:222
        return 0;
   1c9db:	b8 00 00 00 00       	mov    eax,0x0
   1c9e0:	e9 1e 02 00 00       	jmp    1cc03 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:226
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1c9e5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1c9e8:	05 28 01 00 00       	add    eax,0x128
   1c9ed:	83 ec 04             	sub    esp,0x4
   1c9f0:	68 00 02 00 00       	push   0x200
   1c9f5:	6a 00                	push   0x0
   1c9f7:	50                   	push   eax
   1c9f8:	e8 80 86 00 00       	call   2507d <memset>
   1c9fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1ca00:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1ca07:	eb 42                	jmp    1ca4b <_create_directory+0x202>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:229
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
   1ca09:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca0c:	8d 88 28 01 00 00    	lea    ecx,[eax+0x128]
   1ca12:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1ca15:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca18:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ca1b:	51                   	push   ecx
   1ca1c:	52                   	push   edx
   1ca1d:	50                   	push   eax
   1ca1e:	68 a0 e6 09 00       	push   0x9e6a0
   1ca23:	e8 31 eb ff ff       	call   1b559 <fatfs_write_sector>
   1ca28:	83 c4 10             	add    esp,0x10
   1ca2b:	85 c0                	test   eax,eax
   1ca2d:	75 18                	jne    1ca47 <_create_directory+0x1fe>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:231
        {
            _free_file(file);
   1ca2f:	83 ec 0c             	sub    esp,0xc
   1ca32:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ca35:	e8 f3 fc ff ff       	call   1c72d <_free_file>
   1ca3a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:232
            return 0;
   1ca3d:	b8 00 00 00 00       	mov    eax,0x0
   1ca42:	e9 bc 01 00 00       	jmp    1cc03 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 2)
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1ca47:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 1)
   1ca4b:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1ca52:	0f b6 c0             	movzx  eax,al
   1ca55:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1ca58:	7f af                	jg     1ca09 <_create_directory+0x1c0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:239
    }

#if FATFS_INC_LFN_SUPPORT

    // Generate a short filename & tail
    tailNum = 0;
   1ca5a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:243
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1ca61:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ca64:	05 94 00 00 00       	add    eax,0x94
   1ca69:	83 ec 08             	sub    esp,0x8
   1ca6c:	50                   	push   eax
   1ca6d:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1ca70:	50                   	push   eax
   1ca71:	e8 66 2d 00 00       	call   1f7dc <fatfs_lfn_create_sfn>
   1ca76:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:246

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1ca79:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1ca7d:	74 1f                	je     1ca9e <_create_directory+0x255>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:247
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1ca7f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ca82:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1ca85:	81 c2 14 01 00 00    	add    edx,0x114
   1ca8b:	83 ec 04             	sub    esp,0x4
   1ca8e:	50                   	push   eax
   1ca8f:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1ca92:	50                   	push   eax
   1ca93:	52                   	push   edx
   1ca94:	e8 c9 2f 00 00       	call   1fa62 <fatfs_lfn_generate_tail>
   1ca99:	83 c4 10             	add    esp,0x10
   1ca9c:	eb 1b                	jmp    1cab9 <_create_directory+0x270>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:250
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1ca9e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1caa1:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1caa7:	83 ec 04             	sub    esp,0x4
   1caaa:	6a 0b                	push   0xb
   1caac:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1caaf:	50                   	push   eax
   1cab0:	52                   	push   edx
   1cab1:	e8 a2 90 00 00       	call   25b58 <memcpy>
   1cab6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:253

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1cab9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cabc:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cac2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cac5:	8b 00                	mov    eax,DWORD PTR [eax]
   1cac7:	83 ec 04             	sub    esp,0x4
   1caca:	52                   	push   edx
   1cacb:	50                   	push   eax
   1cacc:	68 a0 e6 09 00       	push   0x9e6a0
   1cad1:	e8 d3 ee ff ff       	call   1b9a9 <fatfs_sfn_exists>
   1cad6:	83 c4 10             	add    esp,0x10
   1cad9:	85 c0                	test   eax,eax
   1cadb:	74 13                	je     1caf0 <_create_directory+0x2a7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:256
            break;

        tailNum++;
   1cadd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:258
    }
    while (tailNum < 9999);
   1cae1:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1cae8:	0f 8e 73 ff ff ff    	jle    1ca61 <_create_directory+0x218>
   1caee:	eb 01                	jmp    1caf1 <_create_directory+0x2a8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:254
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1caf0:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:261
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1caf1:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1caf8:	75 2f                	jne    1cb29 <_create_directory+0x2e0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:264
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1cafa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cafd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cb00:	83 ec 08             	sub    esp,0x8
   1cb03:	50                   	push   eax
   1cb04:	68 a0 e6 09 00       	push   0x9e6a0
   1cb09:	e8 d8 40 00 00       	call   20be6 <fatfs_free_cluster_chain>
   1cb0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:266

        _free_file(file);
   1cb11:	83 ec 0c             	sub    esp,0xc
   1cb14:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cb17:	e8 11 fc ff ff       	call   1c72d <_free_file>
   1cb1c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:267
        return 0;
   1cb1f:	b8 00 00 00 00       	mov    eax,0x0
   1cb24:	e9 da 00 00 00       	jmp    1cc03 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:295
        return 0;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
   1cb29:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb2c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1cb2f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb32:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1cb38:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb3b:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cb41:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb44:	8b 00                	mov    eax,DWORD PTR [eax]
   1cb46:	83 ec 04             	sub    esp,0x4
   1cb49:	6a 01                	push   0x1
   1cb4b:	6a 00                	push   0x0
   1cb4d:	52                   	push   edx
   1cb4e:	53                   	push   ebx
   1cb4f:	51                   	push   ecx
   1cb50:	50                   	push   eax
   1cb51:	68 a0 e6 09 00       	push   0x9e6a0
   1cb56:	e8 5d 46 00 00       	call   211b8 <fatfs_add_file_entry>
   1cb5b:	83 c4 20             	add    esp,0x20
   1cb5e:	85 c0                	test   eax,eax
   1cb60:	75 2c                	jne    1cb8e <_create_directory+0x345>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:298
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1cb62:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb65:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cb68:	83 ec 08             	sub    esp,0x8
   1cb6b:	50                   	push   eax
   1cb6c:	68 a0 e6 09 00       	push   0x9e6a0
   1cb71:	e8 70 40 00 00       	call   20be6 <fatfs_free_cluster_chain>
   1cb76:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:300

        _free_file(file);
   1cb79:	83 ec 0c             	sub    esp,0xc
   1cb7c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cb7f:	e8 a9 fb ff ff       	call   1c72d <_free_file>
   1cb84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:301
        return 0;
   1cb87:	b8 00 00 00 00       	mov    eax,0x0
   1cb8c:	eb 75                	jmp    1cc03 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:305
    }

    // General
    file->filelength = 0;
   1cb8e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb91:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:306
    file->bytenum = 0;
   1cb98:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb9b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:307
    file->file_data_address = 0xFFFFFFFF;
   1cba2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cba5:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1cbac:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:308
    file->file_data_dirty = 0;
   1cbaf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cbb2:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1cbb9:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:309
    file->filelength_changed = 0;
   1cbbc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cbbf:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:312

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1cbc6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cbc9:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1cbd0:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:313
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1cbd3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cbd6:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1cbdd:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:315

    fatfs_fat_purge(&_fs);
   1cbe0:	83 ec 0c             	sub    esp,0xc
   1cbe3:	68 a0 e6 09 00       	push   0x9e6a0
   1cbe8:	e8 5f 3a 00 00       	call   2064c <fatfs_fat_purge>
   1cbed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:317

    _free_file(file);
   1cbf0:	83 ec 0c             	sub    esp,0xc
   1cbf3:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cbf6:	e8 32 fb ff ff       	call   1c72d <_free_file>
   1cbfb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:318
    return 1;
   1cbfe:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:319 (discriminator 1)
}
   1cc03:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1cc06:	c9                   	leave  
   1cc07:	c3                   	ret    

0001cc08 <_open_file>:
_open_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:325
#endif
//-----------------------------------------------------------------------------
// _open_file: Open a file for reading
//-----------------------------------------------------------------------------
static FL_FILE* _open_file(const char *path)
{
   1cc08:	55                   	push   ebp
   1cc09:	89 e5                	mov    ebp,esp
   1cc0b:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:330
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
   1cc0e:	e8 4b fa ff ff       	call   1c65e <_allocate_file>
   1cc13:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:331
    if (!file)
   1cc16:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cc1a:	75 0a                	jne    1cc26 <_open_file+0x1e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:332
        return NULL;
   1cc1c:	b8 00 00 00 00       	mov    eax,0x0
   1cc21:	e9 fc 01 00 00       	jmp    1ce22 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:335

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1cc26:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc29:	83 c0 14             	add    eax,0x14
   1cc2c:	83 ec 04             	sub    esp,0x4
   1cc2f:	68 80 00 00 00       	push   0x80
   1cc34:	6a 00                	push   0x0
   1cc36:	50                   	push   eax
   1cc37:	e8 41 84 00 00       	call   2507d <memset>
   1cc3c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:336
    memset(file->filename, '\0', sizeof(file->filename));
   1cc3f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc42:	05 94 00 00 00       	add    eax,0x94
   1cc47:	83 ec 04             	sub    esp,0x4
   1cc4a:	68 80 00 00 00       	push   0x80
   1cc4f:	6a 00                	push   0x0
   1cc51:	50                   	push   eax
   1cc52:	e8 26 84 00 00       	call   2507d <memset>
   1cc57:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:339

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1cc5a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc5d:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1cc63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cc66:	83 c0 14             	add    eax,0x14
   1cc69:	83 ec 0c             	sub    esp,0xc
   1cc6c:	68 80 00 00 00       	push   0x80
   1cc71:	52                   	push   edx
   1cc72:	68 80 00 00 00       	push   0x80
   1cc77:	50                   	push   eax
   1cc78:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cc7b:	e8 5d 31 00 00       	call   1fddd <fatfs_split_path>
   1cc80:	83 c4 20             	add    esp,0x20
   1cc83:	83 f8 ff             	cmp    eax,0xffffffff
   1cc86:	75 18                	jne    1cca0 <_open_file+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:341
    {
        _free_file(file);
   1cc88:	83 ec 0c             	sub    esp,0xc
   1cc8b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cc8e:	e8 9a fa ff ff       	call   1c72d <_free_file>
   1cc93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:342
        return NULL;
   1cc96:	b8 00 00 00 00       	mov    eax,0x0
   1cc9b:	e9 82 01 00 00       	jmp    1ce22 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:346
    }

    // Check if file already open
    if (_check_file_open(file))
   1cca0:	83 ec 0c             	sub    esp,0xc
   1cca3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cca6:	e8 f6 f9 ff ff       	call   1c6a1 <_check_file_open>
   1ccab:	83 c4 10             	add    esp,0x10
   1ccae:	85 c0                	test   eax,eax
   1ccb0:	74 18                	je     1ccca <_open_file+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:348
    {
        _free_file(file);
   1ccb2:	83 ec 0c             	sub    esp,0xc
   1ccb5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1ccb8:	e8 70 fa ff ff       	call   1c72d <_free_file>
   1ccbd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:349
        return NULL;
   1ccc0:	b8 00 00 00 00       	mov    eax,0x0
   1ccc5:	e9 58 01 00 00       	jmp    1ce22 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:353
    }

    // If file is in the root dir
    if (file->path[0]==0)
   1ccca:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cccd:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1ccd1:	84 c0                	test   al,al
   1ccd3:	75 19                	jne    1ccee <_open_file+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:354
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1ccd5:	83 ec 0c             	sub    esp,0xc
   1ccd8:	68 a0 e6 09 00       	push   0x9e6a0
   1ccdd:	e8 3f ea ff ff       	call   1b721 <fatfs_get_root_cluster>
   1cce2:	83 c4 10             	add    esp,0x10
   1cce5:	89 c2                	mov    edx,eax
   1cce7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ccea:	89 10                	mov    DWORD PTR [eax],edx
   1ccec:	eb 32                	jmp    1cd20 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:358
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1ccee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ccf1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1ccf4:	83 c2 14             	add    edx,0x14
   1ccf7:	83 ec 08             	sub    esp,0x8
   1ccfa:	50                   	push   eax
   1ccfb:	52                   	push   edx
   1ccfc:	e8 5e fa ff ff       	call   1c75f <_open_directory>
   1cd01:	83 c4 10             	add    esp,0x10
   1cd04:	85 c0                	test   eax,eax
   1cd06:	75 18                	jne    1cd20 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:360
        {
            _free_file(file);
   1cd08:	83 ec 0c             	sub    esp,0xc
   1cd0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cd0e:	e8 1a fa ff ff       	call   1c72d <_free_file>
   1cd13:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:361
            return NULL;
   1cd16:	b8 00 00 00 00       	mov    eax,0x0
   1cd1b:	e9 02 01 00 00       	jmp    1ce22 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:366
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
   1cd20:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd23:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cd29:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd2c:	8b 00                	mov    eax,DWORD PTR [eax]
   1cd2e:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1cd31:	52                   	push   edx
   1cd32:	51                   	push   ecx
   1cd33:	50                   	push   eax
   1cd34:	68 a0 e6 09 00       	push   0x9e6a0
   1cd39:	e8 ee e9 ff ff       	call   1b72c <fatfs_get_file_entry>
   1cd3e:	83 c4 10             	add    esp,0x10
   1cd41:	85 c0                	test   eax,eax
   1cd43:	0f 84 c6 00 00 00    	je     1ce0f <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:368
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
   1cd49:	83 ec 0c             	sub    esp,0xc
   1cd4c:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1cd4f:	50                   	push   eax
   1cd50:	e8 e9 27 00 00       	call   1f53e <fatfs_entry_is_file>
   1cd55:	83 c4 10             	add    esp,0x10
   1cd58:	85 c0                	test   eax,eax
   1cd5a:	0f 84 af 00 00 00    	je     1ce0f <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:371
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   1cd60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd63:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cd69:	83 ec 04             	sub    esp,0x4
   1cd6c:	6a 0b                	push   0xb
   1cd6e:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1cd71:	50                   	push   eax
   1cd72:	52                   	push   edx
   1cd73:	e8 e0 8d 00 00       	call   25b58 <memcpy>
   1cd78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:372
            file->filelength = FAT_HTONL(sfEntry.FileSize);
   1cd7b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cd7e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd81:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:373
            file->bytenum = 0;
   1cd84:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd87:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:374
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1cd8e:	0f b7 45 e8          	movzx  eax,WORD PTR [ebp-0x18]
   1cd92:	0f b7 c0             	movzx  eax,ax
   1cd95:	c1 e0 10             	shl    eax,0x10
   1cd98:	89 c2                	mov    edx,eax
   1cd9a:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1cd9e:	0f b7 c0             	movzx  eax,ax
   1cda1:	01 c2                	add    edx,eax
   1cda3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cda6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:375
            file->file_data_address = 0xFFFFFFFF;
   1cda9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cdac:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1cdb3:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:376
            file->file_data_dirty = 0;
   1cdb6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cdb9:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1cdc0:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:377
            file->filelength_changed = 0;
   1cdc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cdc6:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:380

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1cdcd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cdd0:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1cdd7:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:381
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1cdda:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cddd:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1cde4:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:383

            fatfs_cache_init(&_fs, file);
   1cde7:	83 ec 08             	sub    esp,0x8
   1cdea:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cded:	68 a0 e6 09 00       	push   0x9e6a0
   1cdf2:	e8 a7 f6 ff ff       	call   1c49e <fatfs_cache_init>
   1cdf7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:385

            fatfs_fat_purge(&_fs);
   1cdfa:	83 ec 0c             	sub    esp,0xc
   1cdfd:	68 a0 e6 09 00       	push   0x9e6a0
   1ce02:	e8 45 38 00 00       	call   2064c <fatfs_fat_purge>
   1ce07:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:387

            return file;
   1ce0a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ce0d:	eb 13                	jmp    1ce22 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:390
        }

    _free_file(file);
   1ce0f:	83 ec 0c             	sub    esp,0xc
   1ce12:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1ce15:	e8 13 f9 ff ff       	call   1c72d <_free_file>
   1ce1a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:391
    return NULL;
   1ce1d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:392 (discriminator 1)
}
   1ce22:	c9                   	leave  
   1ce23:	c3                   	ret    

0001ce24 <_create_file>:
_create_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:398
//-----------------------------------------------------------------------------
// _create_file: Create a new file
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static FL_FILE* _create_file(const char *filename)
{
   1ce24:	55                   	push   ebp
   1ce25:	89 e5                	mov    ebp,esp
   1ce27:	53                   	push   ebx
   1ce28:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:402
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1ce2b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:405

    // No write access?
    if (!_fs.disk_io.write_media)
   1ce32:	a1 d8 e6 09 00       	mov    eax,ds:0x9e6d8
   1ce37:	85 c0                	test   eax,eax
   1ce39:	75 0a                	jne    1ce45 <_create_file+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:406
        return NULL;
   1ce3b:	b8 00 00 00 00       	mov    eax,0x0
   1ce40:	e9 3a 03 00 00       	jmp    1d17f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:409

    // Allocate a new file handle
    file = _allocate_file();
   1ce45:	e8 14 f8 ff ff       	call   1c65e <_allocate_file>
   1ce4a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:410
    if (!file)
   1ce4d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1ce51:	75 0a                	jne    1ce5d <_create_file+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:411
        return NULL;
   1ce53:	b8 00 00 00 00       	mov    eax,0x0
   1ce58:	e9 22 03 00 00       	jmp    1d17f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:414

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1ce5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce60:	83 c0 14             	add    eax,0x14
   1ce63:	83 ec 04             	sub    esp,0x4
   1ce66:	68 80 00 00 00       	push   0x80
   1ce6b:	6a 00                	push   0x0
   1ce6d:	50                   	push   eax
   1ce6e:	e8 0a 82 00 00       	call   2507d <memset>
   1ce73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:415
    memset(file->filename, '\0', sizeof(file->filename));
   1ce76:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce79:	05 94 00 00 00       	add    eax,0x94
   1ce7e:	83 ec 04             	sub    esp,0x4
   1ce81:	68 80 00 00 00       	push   0x80
   1ce86:	6a 00                	push   0x0
   1ce88:	50                   	push   eax
   1ce89:	e8 ef 81 00 00       	call   2507d <memset>
   1ce8e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:418

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1ce91:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce94:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1ce9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ce9d:	83 c0 14             	add    eax,0x14
   1cea0:	83 ec 0c             	sub    esp,0xc
   1cea3:	68 80 00 00 00       	push   0x80
   1cea8:	52                   	push   edx
   1cea9:	68 80 00 00 00       	push   0x80
   1ceae:	50                   	push   eax
   1ceaf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ceb2:	e8 26 2f 00 00       	call   1fddd <fatfs_split_path>
   1ceb7:	83 c4 20             	add    esp,0x20
   1ceba:	83 f8 ff             	cmp    eax,0xffffffff
   1cebd:	75 18                	jne    1ced7 <_create_file+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:420
    {
        _free_file(file);
   1cebf:	83 ec 0c             	sub    esp,0xc
   1cec2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cec5:	e8 63 f8 ff ff       	call   1c72d <_free_file>
   1ceca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:421
        return NULL;
   1cecd:	b8 00 00 00 00       	mov    eax,0x0
   1ced2:	e9 a8 02 00 00       	jmp    1d17f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:425
    }

    // Check if file already open
    if (_check_file_open(file))
   1ced7:	83 ec 0c             	sub    esp,0xc
   1ceda:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cedd:	e8 bf f7 ff ff       	call   1c6a1 <_check_file_open>
   1cee2:	83 c4 10             	add    esp,0x10
   1cee5:	85 c0                	test   eax,eax
   1cee7:	74 18                	je     1cf01 <_create_file+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:427
    {
        _free_file(file);
   1cee9:	83 ec 0c             	sub    esp,0xc
   1ceec:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ceef:	e8 39 f8 ff ff       	call   1c72d <_free_file>
   1cef4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:428
        return NULL;
   1cef7:	b8 00 00 00 00       	mov    eax,0x0
   1cefc:	e9 7e 02 00 00       	jmp    1d17f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:432
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1cf01:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf04:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1cf08:	84 c0                	test   al,al
   1cf0a:	75 19                	jne    1cf25 <_create_file+0x101>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:433
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1cf0c:	83 ec 0c             	sub    esp,0xc
   1cf0f:	68 a0 e6 09 00       	push   0x9e6a0
   1cf14:	e8 08 e8 ff ff       	call   1b721 <fatfs_get_root_cluster>
   1cf19:	83 c4 10             	add    esp,0x10
   1cf1c:	89 c2                	mov    edx,eax
   1cf1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf21:	89 10                	mov    DWORD PTR [eax],edx
   1cf23:	eb 32                	jmp    1cf57 <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:437
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1cf25:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf28:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cf2b:	83 c2 14             	add    edx,0x14
   1cf2e:	83 ec 08             	sub    esp,0x8
   1cf31:	50                   	push   eax
   1cf32:	52                   	push   edx
   1cf33:	e8 27 f8 ff ff       	call   1c75f <_open_directory>
   1cf38:	83 c4 10             	add    esp,0x10
   1cf3b:	85 c0                	test   eax,eax
   1cf3d:	75 18                	jne    1cf57 <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:439
        {
            _free_file(file);
   1cf3f:	83 ec 0c             	sub    esp,0xc
   1cf42:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cf45:	e8 e3 f7 ff ff       	call   1c72d <_free_file>
   1cf4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:440
            return NULL;
   1cf4d:	b8 00 00 00 00       	mov    eax,0x0
   1cf52:	e9 28 02 00 00       	jmp    1d17f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:445
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1cf57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf5a:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cf60:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf63:	8b 00                	mov    eax,DWORD PTR [eax]
   1cf65:	8d 55 d0             	lea    edx,[ebp-0x30]
   1cf68:	52                   	push   edx
   1cf69:	51                   	push   ecx
   1cf6a:	50                   	push   eax
   1cf6b:	68 a0 e6 09 00       	push   0x9e6a0
   1cf70:	e8 b7 e7 ff ff       	call   1b72c <fatfs_get_file_entry>
   1cf75:	83 c4 10             	add    esp,0x10
   1cf78:	83 f8 01             	cmp    eax,0x1
   1cf7b:	75 18                	jne    1cf95 <_create_file+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:447
    {
        _free_file(file);
   1cf7d:	83 ec 0c             	sub    esp,0xc
   1cf80:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cf83:	e8 a5 f7 ff ff       	call   1c72d <_free_file>
   1cf88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:448
        return NULL;
   1cf8b:	b8 00 00 00 00       	mov    eax,0x0
   1cf90:	e9 ea 01 00 00       	jmp    1d17f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:451
    }

    file->startcluster = 0;
   1cf95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cf98:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:454

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1cf9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cfa2:	83 c0 04             	add    eax,0x4
   1cfa5:	6a 01                	push   0x1
   1cfa7:	50                   	push   eax
   1cfa8:	6a 01                	push   0x1
   1cfaa:	68 a0 e6 09 00       	push   0x9e6a0
   1cfaf:	e8 ec 3e 00 00       	call   20ea0 <fatfs_allocate_free_space>
   1cfb4:	83 c4 10             	add    esp,0x10
   1cfb7:	85 c0                	test   eax,eax
   1cfb9:	75 18                	jne    1cfd3 <_create_file+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:456
    {
        _free_file(file);
   1cfbb:	83 ec 0c             	sub    esp,0xc
   1cfbe:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1cfc1:	e8 67 f7 ff ff       	call   1c72d <_free_file>
   1cfc6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:457
        return NULL;
   1cfc9:	b8 00 00 00 00       	mov    eax,0x0
   1cfce:	e9 ac 01 00 00       	jmp    1d17f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:462
    }

#if FATFS_INC_LFN_SUPPORT
    // Generate a short filename & tail
    tailNum = 0;
   1cfd3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:466
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1cfda:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1cfdd:	05 94 00 00 00       	add    eax,0x94
   1cfe2:	83 ec 08             	sub    esp,0x8
   1cfe5:	50                   	push   eax
   1cfe6:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1cfe9:	50                   	push   eax
   1cfea:	e8 ed 27 00 00       	call   1f7dc <fatfs_lfn_create_sfn>
   1cfef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:469

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1cff2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cff6:	74 1f                	je     1d017 <_create_file+0x1f3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:470
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1cff8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cffb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cffe:	81 c2 14 01 00 00    	add    edx,0x114
   1d004:	83 ec 04             	sub    esp,0x4
   1d007:	50                   	push   eax
   1d008:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d00b:	50                   	push   eax
   1d00c:	52                   	push   edx
   1d00d:	e8 50 2a 00 00       	call   1fa62 <fatfs_lfn_generate_tail>
   1d012:	83 c4 10             	add    esp,0x10
   1d015:	eb 1b                	jmp    1d032 <_create_file+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:473
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1d017:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d01a:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d020:	83 ec 04             	sub    esp,0x4
   1d023:	6a 0b                	push   0xb
   1d025:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d028:	50                   	push   eax
   1d029:	52                   	push   edx
   1d02a:	e8 29 8b 00 00       	call   25b58 <memcpy>
   1d02f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:476

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1d032:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d035:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d03b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d03e:	8b 00                	mov    eax,DWORD PTR [eax]
   1d040:	83 ec 04             	sub    esp,0x4
   1d043:	52                   	push   edx
   1d044:	50                   	push   eax
   1d045:	68 a0 e6 09 00       	push   0x9e6a0
   1d04a:	e8 5a e9 ff ff       	call   1b9a9 <fatfs_sfn_exists>
   1d04f:	83 c4 10             	add    esp,0x10
   1d052:	85 c0                	test   eax,eax
   1d054:	74 13                	je     1d069 <_create_file+0x245>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:479
            break;

        tailNum++;
   1d056:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:481
    }
    while (tailNum < 9999);
   1d05a:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1d061:	0f 8e 73 ff ff ff    	jle    1cfda <_create_file+0x1b6>
   1d067:	eb 01                	jmp    1d06a <_create_file+0x246>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:477
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1d069:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:484
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1d06a:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1d071:	75 2f                	jne    1d0a2 <_create_file+0x27e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:487
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d073:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d076:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d079:	83 ec 08             	sub    esp,0x8
   1d07c:	50                   	push   eax
   1d07d:	68 a0 e6 09 00       	push   0x9e6a0
   1d082:	e8 5f 3b 00 00       	call   20be6 <fatfs_free_cluster_chain>
   1d087:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:489

        _free_file(file);
   1d08a:	83 ec 0c             	sub    esp,0xc
   1d08d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d090:	e8 98 f6 ff ff       	call   1c72d <_free_file>
   1d095:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:490
        return NULL;
   1d098:	b8 00 00 00 00       	mov    eax,0x0
   1d09d:	e9 dd 00 00 00       	jmp    1d17f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:518
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
   1d0a2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0a5:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1d0a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0ab:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1d0b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0b4:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d0ba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0bd:	8b 00                	mov    eax,DWORD PTR [eax]
   1d0bf:	83 ec 04             	sub    esp,0x4
   1d0c2:	6a 00                	push   0x0
   1d0c4:	6a 00                	push   0x0
   1d0c6:	52                   	push   edx
   1d0c7:	53                   	push   ebx
   1d0c8:	51                   	push   ecx
   1d0c9:	50                   	push   eax
   1d0ca:	68 a0 e6 09 00       	push   0x9e6a0
   1d0cf:	e8 e4 40 00 00       	call   211b8 <fatfs_add_file_entry>
   1d0d4:	83 c4 20             	add    esp,0x20
   1d0d7:	85 c0                	test   eax,eax
   1d0d9:	75 2c                	jne    1d107 <_create_file+0x2e3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:521
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d0db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d0de:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d0e1:	83 ec 08             	sub    esp,0x8
   1d0e4:	50                   	push   eax
   1d0e5:	68 a0 e6 09 00       	push   0x9e6a0
   1d0ea:	e8 f7 3a 00 00       	call   20be6 <fatfs_free_cluster_chain>
   1d0ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:523

        _free_file(file);
   1d0f2:	83 ec 0c             	sub    esp,0xc
   1d0f5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d0f8:	e8 30 f6 ff ff       	call   1c72d <_free_file>
   1d0fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:524
        return NULL;
   1d100:	b8 00 00 00 00       	mov    eax,0x0
   1d105:	eb 78                	jmp    1d17f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:528
    }

    // General
    file->filelength = 0;
   1d107:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d10a:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:529
    file->bytenum = 0;
   1d111:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d114:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:530
    file->file_data_address = 0xFFFFFFFF;
   1d11b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d11e:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1d125:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:531
    file->file_data_dirty = 0;
   1d128:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d12b:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d132:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:532
    file->filelength_changed = 0;
   1d135:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d138:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:535

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d13f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d142:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1d149:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:536
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d14c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d14f:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1d156:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:538

    fatfs_cache_init(&_fs, file);
   1d159:	83 ec 08             	sub    esp,0x8
   1d15c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d15f:	68 a0 e6 09 00       	push   0x9e6a0
   1d164:	e8 35 f3 ff ff       	call   1c49e <fatfs_cache_init>
   1d169:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:540

    fatfs_fat_purge(&_fs);
   1d16c:	83 ec 0c             	sub    esp,0xc
   1d16f:	68 a0 e6 09 00       	push   0x9e6a0
   1d174:	e8 d3 34 00 00       	call   2064c <fatfs_fat_purge>
   1d179:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:542

    return file;
   1d17c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:543 (discriminator 1)
}
   1d17f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1d182:	c9                   	leave  
   1d183:	c3                   	ret    

0001d184 <_read_sectors>:
_read_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:549
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
   1d184:	55                   	push   ebp
   1d185:	89 e5                	mov    ebp,esp
   1d187:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:550
    uint32 Sector = 0;
   1d18a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:551
    uint32 ClusterIdx = 0;
   1d191:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:552
    uint32 Cluster = 0;
   1d198:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:557
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d19f:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d1a6:	0f b6 c8             	movzx  ecx,al
   1d1a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d1ac:	ba 00 00 00 00       	mov    edx,0x0
   1d1b1:	f7 f1                	div    ecx
   1d1b3:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:558
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d1b6:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d1bd:	0f b6 c0             	movzx  eax,al
   1d1c0:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d1c4:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d1c7:	29 c2                	sub    edx,eax
   1d1c9:	89 d0                	mov    eax,edx
   1d1cb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:561

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
   1d1ce:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d1d1:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d1d4:	01 c2                	add    edx,eax
   1d1d6:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d1dd:	0f b6 c0             	movzx  eax,al
   1d1e0:	39 c2                	cmp    edx,eax
   1d1e2:	76 10                	jbe    1d1f4 <_read_sectors+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:562
        count = _fs.sectors_per_cluster - Sector;
   1d1e4:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d1eb:	0f b6 c0             	movzx  eax,al
   1d1ee:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d1f1:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:565

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d1f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d1f7:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d1fd:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d200:	75 11                	jne    1d213 <_read_sectors+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:566
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d202:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d205:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d20b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d20e:	e9 bb 00 00 00       	jmp    1d2ce <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d213:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d217:	74 2b                	je     1d244 <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571 (discriminator 1)
   1d219:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d21c:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d222:	83 c0 01             	add    eax,0x1
   1d225:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d228:	75 1a                	jne    1d244 <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:573
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d22a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d22d:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d233:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:574
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d236:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d239:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d23f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d242:	eb 10                	jmp    1d254 <_read_sectors+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:580
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d244:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:581
            Cluster = file->startcluster;
   1d24b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d24e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d251:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d254:	eb 52                	jmp    1d2a8 <_read_sectors+0x124>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:590
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d256:	8d 45 e0             	lea    eax,[ebp-0x20]
   1d259:	50                   	push   eax
   1d25a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d25d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d260:	68 a0 e6 09 00       	push   0x9e6a0
   1d265:	e8 3e f2 ff ff       	call   1c4a8 <fatfs_cache_get_next_cluster>
   1d26a:	83 c4 10             	add    esp,0x10
   1d26d:	85 c0                	test   eax,eax
   1d26f:	75 2d                	jne    1d29e <_read_sectors+0x11a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:593
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d271:	83 ec 08             	sub    esp,0x8
   1d274:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d277:	68 a0 e6 09 00       	push   0x9e6a0
   1d27c:	e8 21 34 00 00       	call   206a2 <fatfs_find_next_cluster>
   1d281:	83 c4 10             	add    esp,0x10
   1d284:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:596

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d287:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d28a:	50                   	push   eax
   1d28b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d28e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d291:	68 a0 e6 09 00       	push   0x9e6a0
   1d296:	e8 17 f2 ff ff       	call   1c4b2 <fatfs_cache_set_next_cluster>
   1d29b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:599
            }

            Cluster = nextCluster;
   1d29e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d2a1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d2a4:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585 (discriminator 1)
   1d2a8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d2ab:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d2ae:	72 a6                	jb     1d256 <_read_sectors+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:603

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
   1d2b0:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d2b4:	74 18                	je     1d2ce <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:605
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
   1d2b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d2b9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d2bc:	89 90 24 01 00 00    	mov    DWORD PTR [eax+0x124],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:606
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1d2c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d2c5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1d2c8:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:611
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
   1d2ce:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d2d2:	75 07                	jne    1d2db <_read_sectors+0x157>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:612
        return 0;
   1d2d4:	b8 00 00 00 00       	mov    eax,0x0
   1d2d9:	eb 41                	jmp    1d31c <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:615

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
   1d2db:	83 ec 08             	sub    esp,0x8
   1d2de:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d2e1:	68 a0 e6 09 00       	push   0x9e6a0
   1d2e6:	e8 79 df ff ff       	call   1b264 <fatfs_lba_of_cluster>
   1d2eb:	83 c4 10             	add    esp,0x10
   1d2ee:	89 c2                	mov    edx,eax
   1d2f0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d2f3:	01 d0                	add    eax,edx
   1d2f5:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:618

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
   1d2f8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1d2fb:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d2fe:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1d301:	68 a0 e6 09 00       	push   0x9e6a0
   1d306:	e8 bb df ff ff       	call   1b2c6 <fatfs_sector_read>
   1d30b:	83 c4 10             	add    esp,0x10
   1d30e:	85 c0                	test   eax,eax
   1d310:	74 05                	je     1d317 <_read_sectors+0x193>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:619
        return count;
   1d312:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d315:	eb 05                	jmp    1d31c <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:621
    else
        return 0;
   1d317:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:622
}
   1d31c:	c9                   	leave  
   1d31d:	c3                   	ret    

0001d31e <fl_init>:
fl_init():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:632

//-----------------------------------------------------------------------------
// fl_init: Initialise library
//-----------------------------------------------------------------------------
void __attribute__ ((constructor)) fl_init(void)
{
   1d31e:	55                   	push   ebp
   1d31f:	89 e5                	mov    ebp,esp
   1d321:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:638
    int i;

    //printk("fl_init: Entered\n");
    
    //printk("fl_init: About to initialize free file list\n");
    fat_list_init(&_free_file_list);
   1d324:	68 10 eb 09 00       	push   0x9eb10
   1d329:	e8 8e f1 ff ff       	call   1c4bc <fat_list_init>
   1d32e:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:641
    //printk("fl_init: Initialized free file list\n");
    //printk("fl_init: About to initialize open file list\n");
    fat_list_init(&_open_file_list);
   1d331:	68 08 eb 09 00       	push   0x9eb08
   1d336:	e8 81 f1 ff ff       	call   1c4bc <fat_list_init>
   1d33b:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d33e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1d345:	eb 28                	jmp    1d36f <fl_init+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:647 (discriminator 3)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
   1d347:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1d34a:	69 c0 3c 03 00 00    	imul   eax,eax,0x33c
   1d350:	05 30 03 00 00       	add    eax,0x330
   1d355:	05 e0 a5 09 00       	add    eax,0x9a5e0
   1d35a:	83 c0 04             	add    eax,0x4
   1d35d:	50                   	push   eax
   1d35e:	68 10 eb 09 00       	push   0x9eb10
   1d363:	e8 88 f2 ff ff       	call   1c5f0 <fat_list_insert_last>
   1d368:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 3)
    fat_list_init(&_open_file_list);
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d36b:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 1)
   1d36f:	83 7d fc 13          	cmp    DWORD PTR [ebp-0x4],0x13
   1d373:	7e d2                	jle    1d347 <fl_init+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:650
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    //printk("fl_init: Returning\n");
    _filelib_init = 1;
   1d375:	c7 05 90 e6 09 00 01 	mov    DWORD PTR ds:0x9e690,0x1
   1d37c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:651
}
   1d37f:	90                   	nop
   1d380:	c9                   	leave  
   1d381:	c3                   	ret    

0001d382 <fl_attach_locks>:
fl_attach_locks():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:656
//-----------------------------------------------------------------------------
// fl_attach_locks:
//-----------------------------------------------------------------------------
void fl_attach_locks(void (*lock)(void), void (*unlock)(void))
{
   1d382:	55                   	push   ebp
   1d383:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:657
    _fs.fl_lock = lock;
   1d385:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d388:	a3 dc e6 09 00       	mov    ds:0x9e6dc,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:658
    _fs.fl_unlock = unlock;
   1d38d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d390:	a3 e0 e6 09 00       	mov    ds:0x9e6e0,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:659
}
   1d395:	90                   	nop
   1d396:	5d                   	pop    ebp
   1d397:	c3                   	ret    

0001d398 <fl_attach_media>:
fl_attach_media():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:664
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
   1d398:	55                   	push   ebp
   1d399:	89 e5                	mov    ebp,esp
   1d39b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669
    int res;

    //printk("fl_attach_media: Entered\n");
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d39e:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d3a3:	85 c0                	test   eax,eax
   1d3a5:	75 05                	jne    1d3ac <fl_attach_media+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669 (discriminator 1)
   1d3a7:	e8 72 ff ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:671
    //FAT_PRINTF(("fl_attach_media: CHEKC_FL_INIT returned\n")); //clr
    _fs.disk_io.read_media = rd;
   1d3ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d3af:	a3 d4 e6 09 00       	mov    ds:0x9e6d4,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:672
    _fs.disk_io.write_media = wr;
   1d3b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d3b7:	a3 d8 e6 09 00       	mov    ds:0x9e6d8,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:675

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
   1d3bc:	83 ec 0c             	sub    esp,0xc
   1d3bf:	68 a0 e6 09 00       	push   0x9e6a0
   1d3c4:	e8 03 d9 ff ff       	call   1accc <fatfs_init>
   1d3c9:	83 c4 10             	add    esp,0x10
   1d3cc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d3cf:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d3d3:	74 18                	je     1d3ed <fl_attach_media+0x55>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:677
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
   1d3d5:	83 ec 08             	sub    esp,0x8
   1d3d8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d3db:	68 08 37 08 00       	push   0x83708
   1d3e0:	e8 0e 9e 00 00       	call   271f3 <printk>
   1d3e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:678
        return res;
   1d3e8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d3eb:	eb 0f                	jmp    1d3fc <fl_attach_media+0x64>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:682
    }

    //FAT_PRINTF(("fl_attach_media: returning valid=1\n")); //clr
    _filelib_valid = 1;
   1d3ed:	c7 05 94 e6 09 00 01 	mov    DWORD PTR ds:0x9e694,0x1
   1d3f4:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:683
    return FAT_INIT_OK;
   1d3f7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:684
}
   1d3fc:	c9                   	leave  
   1d3fd:	c3                   	ret    

0001d3fe <fl_shutdown>:
fl_shutdown():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:689
//-----------------------------------------------------------------------------
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
 void __attribute__ ((destructor))fl_shutdown(void)
{
   1d3fe:	55                   	push   ebp
   1d3ff:	89 e5                	mov    ebp,esp
   1d401:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d404:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d409:	85 c0                	test   eax,eax
   1d40b:	75 05                	jne    1d412 <fl_shutdown+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691 (discriminator 1)
   1d40d:	e8 0c ff ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693

    FL_LOCK(&_fs);
   1d412:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d417:	85 c0                	test   eax,eax
   1d419:	74 07                	je     1d422 <fl_shutdown+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693 (discriminator 1)
   1d41b:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d420:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:694
    fatfs_fat_purge(&_fs);
   1d422:	83 ec 0c             	sub    esp,0xc
   1d425:	68 a0 e6 09 00       	push   0x9e6a0
   1d42a:	e8 1d 32 00 00       	call   2064c <fatfs_fat_purge>
   1d42f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695
    FL_UNLOCK(&_fs);
   1d432:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d437:	85 c0                	test   eax,eax
   1d439:	74 07                	je     1d442 <fl_shutdown+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695 (discriminator 1)
   1d43b:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d440:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:696
}
   1d442:	90                   	nop
   1d443:	c9                   	leave  
   1d444:	c3                   	ret    

0001d445 <fl_fopen>:
fl_fopen():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:701
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
   1d445:	55                   	push   ebp
   1d446:	89 e5                	mov    ebp,esp
   1d448:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:704
    int i;
    FL_FILE* file;
    uint8 flags = 0;
   1d44b:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d44f:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d454:	85 c0                	test   eax,eax
   1d456:	75 05                	jne    1d45d <fl_fopen+0x18>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707 (discriminator 1)
   1d458:	e8 c1 fe ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:709

    if (!_filelib_valid)
   1d45d:	a1 94 e6 09 00       	mov    eax,ds:0x9e694
   1d462:	85 c0                	test   eax,eax
   1d464:	75 0a                	jne    1d470 <fl_fopen+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:710
        return NULL;
   1d466:	b8 00 00 00 00       	mov    eax,0x0
   1d46b:	e9 8c 01 00 00       	jmp    1d5fc <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712

    if (!path || !mode)
   1d470:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1d474:	74 06                	je     1d47c <fl_fopen+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712 (discriminator 1)
   1d476:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1d47a:	75 0a                	jne    1d486 <fl_fopen+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:713
        return NULL;
   1d47c:	b8 00 00 00 00       	mov    eax,0x0
   1d481:	e9 76 01 00 00       	jmp    1d5fc <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d486:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1d48d:	e9 93 00 00 00       	jmp    1d525 <fl_fopen+0xe0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:735
    {
        switch (mode[i])
   1d492:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d495:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d498:	01 d0                	add    eax,edx
   1d49a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1d49d:	0f be c0             	movsx  eax,al
   1d4a0:	83 e8 2b             	sub    eax,0x2b
   1d4a3:	83 f8 4c             	cmp    eax,0x4c
   1d4a6:	77 79                	ja     1d521 <fl_fopen+0xdc>
   1d4a8:	8b 04 85 3c 37 08 00 	mov    eax,DWORD PTR [eax*4+0x8373c]
   1d4af:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:739
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
   1d4b1:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:740
            break;
   1d4b5:	eb 6a                	jmp    1d521 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:743
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
   1d4b7:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:744
            flags |= FILE_ERASE;
   1d4bb:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:745
            flags |= FILE_CREATE;
   1d4bf:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:746
            break;
   1d4c3:	eb 5c                	jmp    1d521 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:749
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
   1d4c5:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:750
            flags |= FILE_APPEND;
   1d4c9:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:751
            flags |= FILE_CREATE;
   1d4cd:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:752
            break;
   1d4d1:	eb 4e                	jmp    1d521 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:754
        case '+':
            if (flags & FILE_READ)
   1d4d3:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d4d7:	83 e0 01             	and    eax,0x1
   1d4da:	85 c0                	test   eax,eax
   1d4dc:	74 06                	je     1d4e4 <fl_fopen+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:755
                flags |= FILE_WRITE;
   1d4de:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d4e2:	eb 3c                	jmp    1d520 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:756
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
   1d4e4:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d4e8:	83 e0 02             	and    eax,0x2
   1d4eb:	85 c0                	test   eax,eax
   1d4ed:	74 0e                	je     1d4fd <fl_fopen+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:758
            {
                flags |= FILE_READ;
   1d4ef:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:759
                flags |= FILE_ERASE;
   1d4f3:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:760
                flags |= FILE_CREATE;
   1d4f7:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d4fb:	eb 23                	jmp    1d520 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:762
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
            }
            else if (flags & FILE_APPEND)
   1d4fd:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d501:	83 e0 04             	and    eax,0x4
   1d504:	85 c0                	test   eax,eax
   1d506:	74 18                	je     1d520 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:764
            {
                flags |= FILE_READ;
   1d508:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:765
                flags |= FILE_WRITE;
   1d50c:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:766
                flags |= FILE_APPEND;
   1d510:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:767
                flags |= FILE_CREATE;
   1d514:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
            }
            break;
   1d518:	eb 06                	jmp    1d520 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:772
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
   1d51a:	80 4d ef 08          	or     BYTE PTR [ebp-0x11],0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:773
            break;
   1d51e:	eb 01                	jmp    1d521 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d520:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 2)
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d521:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 1)
   1d525:	83 ec 0c             	sub    esp,0xc
   1d528:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1d52b:	e8 94 9e 00 00       	call   273c4 <strlen>
   1d530:	83 c4 10             	add    esp,0x10
   1d533:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1d536:	0f 8f 56 ff ff ff    	jg     1d492 <fl_fopen+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:777
            flags |= FILE_BINARY;
            break;
        }
    }

    file = NULL;
   1d53c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:785
    // No write support!
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
   1d543:	a1 d8 e6 09 00       	mov    eax,ds:0x9e6d8
   1d548:	85 c0                	test   eax,eax
   1d54a:	75 04                	jne    1d550 <fl_fopen+0x10b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:786
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
   1d54c:	80 65 ef d9          	and    BYTE PTR [ebp-0x11],0xd9
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788

    FL_LOCK(&_fs);
   1d550:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d555:	85 c0                	test   eax,eax
   1d557:	74 07                	je     1d560 <fl_fopen+0x11b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788 (discriminator 1)
   1d559:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d55e:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:791

    // Read
    if (flags & FILE_READ)
   1d560:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d564:	83 e0 01             	and    eax,0x1
   1d567:	85 c0                	test   eax,eax
   1d569:	74 11                	je     1d57c <fl_fopen+0x137>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:792
        file = _open_file(path);
   1d56b:	83 ec 0c             	sub    esp,0xc
   1d56e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d571:	e8 92 f6 ff ff       	call   1cc08 <_open_file>
   1d576:	83 c4 10             	add    esp,0x10
   1d579:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
   1d57c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d580:	75 1c                	jne    1d59e <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796 (discriminator 1)
   1d582:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d586:	83 e0 20             	and    eax,0x20
   1d589:	85 c0                	test   eax,eax
   1d58b:	74 11                	je     1d59e <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:797
        file = _create_file(path);
   1d58d:	83 ec 0c             	sub    esp,0xc
   1d590:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d593:	e8 8c f8 ff ff       	call   1ce24 <_create_file>
   1d598:	83 c4 10             	add    esp,0x10
   1d59b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:801
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
   1d59e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d5a2:	83 e0 01             	and    eax,0x1
   1d5a5:	85 c0                	test   eax,eax
   1d5a7:	75 2d                	jne    1d5d6 <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802
        if ((flags & FILE_CREATE) && !file)
   1d5a9:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d5ad:	83 e0 20             	and    eax,0x20
   1d5b0:	85 c0                	test   eax,eax
   1d5b2:	74 22                	je     1d5d6 <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802 (discriminator 1)
   1d5b4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d5b8:	75 1c                	jne    1d5d6 <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:803
            if (flags & (FILE_WRITE | FILE_APPEND))
   1d5ba:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d5be:	83 e0 06             	and    eax,0x6
   1d5c1:	85 c0                	test   eax,eax
   1d5c3:	74 11                	je     1d5d6 <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:804
                file = _open_file(path);
   1d5c5:	83 ec 0c             	sub    esp,0xc
   1d5c8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d5cb:	e8 38 f6 ff ff       	call   1cc08 <_open_file>
   1d5d0:	83 c4 10             	add    esp,0x10
   1d5d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:806

    if (file)
   1d5d6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d5da:	74 0d                	je     1d5e9 <fl_fopen+0x1a4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:807
        file->flags = flags;
   1d5dc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d5df:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
   1d5e3:	88 90 30 03 00 00    	mov    BYTE PTR [eax+0x330],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809

    FL_UNLOCK(&_fs);
   1d5e9:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d5ee:	85 c0                	test   eax,eax
   1d5f0:	74 07                	je     1d5f9 <fl_fopen+0x1b4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809 (discriminator 1)
   1d5f2:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d5f7:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:810
    return file;
   1d5f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:811
}
   1d5fc:	c9                   	leave  
   1d5fd:	c3                   	ret    

0001d5fe <_write_sectors>:
_write_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:817
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   1d5fe:	55                   	push   ebp
   1d5ff:	89 e5                	mov    ebp,esp
   1d601:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:818
    uint32 SectorNumber = 0;
   1d604:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:819
    uint32 ClusterIdx = 0;
   1d60b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:820
    uint32 Cluster = 0;
   1d612:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:821
    uint32 LastCluster = FAT32_LAST_CLUSTER;
   1d619:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [ebp-0x24],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:824
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;
   1d620:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d623:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:827

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d626:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d62d:	0f b6 c8             	movzx  ecx,al
   1d630:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d633:	ba 00 00 00 00       	mov    edx,0x0
   1d638:	f7 f1                	div    ecx
   1d63a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:828
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d63d:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d644:	0f b6 c0             	movzx  eax,al
   1d647:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d64b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d64e:	29 c2                	sub    edx,eax
   1d650:	89 d0                	mov    eax,edx
   1d652:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:831

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
   1d655:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d658:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d65b:	01 c2                	add    edx,eax
   1d65d:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d664:	0f b6 c0             	movzx  eax,al
   1d667:	39 c2                	cmp    edx,eax
   1d669:	76 10                	jbe    1d67b <_write_sectors+0x7d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:832
        count = _fs.sectors_per_cluster - SectorNumber;
   1d66b:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d672:	0f b6 c0             	movzx  eax,al
   1d675:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d678:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:835

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d67b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d67e:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d684:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d687:	75 11                	jne    1d69a <_write_sectors+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:836
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d68c:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d692:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d695:	e9 13 01 00 00       	jmp    1d7ad <_write_sectors+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d69a:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d69e:	74 2b                	je     1d6cb <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841 (discriminator 1)
   1d6a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d6a3:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d6a9:	83 c0 01             	add    eax,0x1
   1d6ac:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d6af:	75 1a                	jne    1d6cb <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:843
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d6b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d6b4:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d6ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:844
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d6bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d6c0:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d6c6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d6c9:	eb 10                	jmp    1d6db <_write_sectors+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:850
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d6cb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:851
            Cluster = file->startcluster;
   1d6d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d6d5:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d6d8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d6db:	eb 5e                	jmp    1d73b <_write_sectors+0x13d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:860
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d6dd:	8d 45 d8             	lea    eax,[ebp-0x28]
   1d6e0:	50                   	push   eax
   1d6e1:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d6e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d6e7:	68 a0 e6 09 00       	push   0x9e6a0
   1d6ec:	e8 b7 ed ff ff       	call   1c4a8 <fatfs_cache_get_next_cluster>
   1d6f1:	83 c4 10             	add    esp,0x10
   1d6f4:	85 c0                	test   eax,eax
   1d6f6:	75 2d                	jne    1d725 <_write_sectors+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:863
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d6f8:	83 ec 08             	sub    esp,0x8
   1d6fb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d6fe:	68 a0 e6 09 00       	push   0x9e6a0
   1d703:	e8 9a 2f 00 00       	call   206a2 <fatfs_find_next_cluster>
   1d708:	83 c4 10             	add    esp,0x10
   1d70b:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:866

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d70e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1d711:	50                   	push   eax
   1d712:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d715:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d718:	68 a0 e6 09 00       	push   0x9e6a0
   1d71d:	e8 90 ed ff ff       	call   1c4b2 <fatfs_cache_set_next_cluster>
   1d722:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:869
            }

            LastCluster = Cluster;
   1d725:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d728:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:870
            Cluster = nextCluster;
   1d72b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1d72e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:873

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
   1d731:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d735:	74 0e                	je     1d745 <_write_sectors+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d737:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855 (discriminator 1)
   1d73b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d73e:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d741:	72 9a                	jb     1d6dd <_write_sectors+0xdf>
   1d743:	eb 01                	jmp    1d746 <_write_sectors+0x148>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:874
            LastCluster = Cluster;
            Cluster = nextCluster;

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
   1d745:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:878
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
   1d746:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d74a:	75 49                	jne    1d795 <_write_sectors+0x197>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:881
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
   1d74c:	0f b6 05 a0 e6 09 00 	movzx  eax,BYTE PTR ds:0x9e6a0
   1d753:	0f b6 d0             	movzx  edx,al
   1d756:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1d759:	01 d0                	add    eax,edx
   1d75b:	83 e8 01             	sub    eax,0x1
   1d75e:	0f b6 15 a0 e6 09 00 	movzx  edx,BYTE PTR ds:0x9e6a0
   1d765:	0f b6 ca             	movzx  ecx,dl
   1d768:	ba 00 00 00 00       	mov    edx,0x0
   1d76d:	f7 f1                	div    ecx
   1d76f:	83 ec 04             	sub    esp,0x4
   1d772:	50                   	push   eax
   1d773:	8d 45 dc             	lea    eax,[ebp-0x24]
   1d776:	50                   	push   eax
   1d777:	68 a0 e6 09 00       	push   0x9e6a0
   1d77c:	e8 77 36 00 00       	call   20df8 <fatfs_add_free_space>
   1d781:	83 c4 10             	add    esp,0x10
   1d784:	85 c0                	test   eax,eax
   1d786:	75 07                	jne    1d78f <_write_sectors+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:882
                return 0;
   1d788:	b8 00 00 00 00       	mov    eax,0x0
   1d78d:	eb 5f                	jmp    1d7ee <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:884

            Cluster = LastCluster;
   1d78f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1d792:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:888
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
   1d795:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d798:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d79b:	89 90 24 01 00 00    	mov    DWORD PTR [eax+0x124],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:889
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1d7a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d7a4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1d7a7:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:893
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
   1d7ad:	83 ec 08             	sub    esp,0x8
   1d7b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d7b3:	68 a0 e6 09 00       	push   0x9e6a0
   1d7b8:	e8 a7 da ff ff       	call   1b264 <fatfs_lba_of_cluster>
   1d7bd:	83 c4 10             	add    esp,0x10
   1d7c0:	89 c2                	mov    edx,eax
   1d7c2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d7c5:	01 d0                	add    eax,edx
   1d7c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:895

    if (fatfs_sector_write(&_fs, lba, buf, count))
   1d7ca:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1d7cd:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d7d0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1d7d3:	68 a0 e6 09 00       	push   0x9e6a0
   1d7d8:	e8 08 db ff ff       	call   1b2e5 <fatfs_sector_write>
   1d7dd:	83 c4 10             	add    esp,0x10
   1d7e0:	85 c0                	test   eax,eax
   1d7e2:	74 05                	je     1d7e9 <_write_sectors+0x1eb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:896
        return count;
   1d7e4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d7e7:	eb 05                	jmp    1d7ee <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:898
    else
        return 0;
   1d7e9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:899 (discriminator 1)
}
   1d7ee:	c9                   	leave  
   1d7ef:	c3                   	ret    

0001d7f0 <fl_fflush>:
fl_fflush():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:905
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
   1d7f0:	55                   	push   ebp
   1d7f1:	89 e5                	mov    ebp,esp
   1d7f3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:907
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;
   1d7f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d7f9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d7fc:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d801:	85 c0                	test   eax,eax
   1d803:	75 05                	jne    1d80a <fl_fflush+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910 (discriminator 1)
   1d805:	e8 14 fb ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:912

    if (file)
   1d80a:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d80e:	74 5f                	je     1d86f <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914
    {
        FL_LOCK(&_fs);
   1d810:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d815:	85 c0                	test   eax,eax
   1d817:	74 07                	je     1d820 <fl_fflush+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914 (discriminator 1)
   1d819:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d81e:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:917

        // If some write data still in buffer
        if (file->file_data_dirty)
   1d820:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d823:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1d829:	85 c0                	test   eax,eax
   1d82b:	74 32                	je     1d85f <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:920
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   1d82d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d830:	8d 90 28 01 00 00    	lea    edx,[eax+0x128]
   1d836:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d839:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1d83f:	6a 01                	push   0x1
   1d841:	52                   	push   edx
   1d842:	50                   	push   eax
   1d843:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d846:	e8 b3 fd ff ff       	call   1d5fe <_write_sectors>
   1d84b:	83 c4 10             	add    esp,0x10
   1d84e:	85 c0                	test   eax,eax
   1d850:	74 0d                	je     1d85f <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:921
                file->file_data_dirty = 0;
   1d852:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d855:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d85c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924
        }

        FL_UNLOCK(&_fs);
   1d85f:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d864:	85 c0                	test   eax,eax
   1d866:	74 07                	je     1d86f <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924 (discriminator 1)
   1d868:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d86d:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:927
    }
#endif
    return 0;
   1d86f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:928
}
   1d874:	c9                   	leave  
   1d875:	c3                   	ret    

0001d876 <fl_fclose>:
fl_fclose():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:933
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
   1d876:	55                   	push   ebp
   1d877:	89 e5                	mov    ebp,esp
   1d879:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:934
    FL_FILE *file = (FL_FILE *)f;
   1d87c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d87f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d882:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1d887:	85 c0                	test   eax,eax
   1d889:	75 05                	jne    1d890 <fl_fclose+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937 (discriminator 1)
   1d88b:	e8 8e fa ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:939

    if (file)
   1d890:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d894:	0f 84 c6 00 00 00    	je     1d960 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941
    {
        FL_LOCK(&_fs);
   1d89a:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d89f:	85 c0                	test   eax,eax
   1d8a1:	74 07                	je     1d8aa <fl_fclose+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941 (discriminator 1)
   1d8a3:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1d8a8:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:944

        // Flush un-written data to file
        fl_fflush(f);
   1d8aa:	83 ec 0c             	sub    esp,0xc
   1d8ad:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d8b0:	e8 3b ff ff ff       	call   1d7f0 <fl_fflush>
   1d8b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:947

        // File size changed?
        if (file->filelength_changed)
   1d8b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8bb:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1d8be:	85 c0                	test   eax,eax
   1d8c0:	74 2e                	je     1d8f0 <fl_fclose+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:951
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
   1d8c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8c5:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1d8c8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8cb:	8d 88 14 01 00 00    	lea    ecx,[eax+0x114]
   1d8d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8d4:	8b 00                	mov    eax,DWORD PTR [eax]
   1d8d6:	52                   	push   edx
   1d8d7:	51                   	push   ecx
   1d8d8:	50                   	push   eax
   1d8d9:	68 a0 e6 09 00       	push   0x9e6a0
   1d8de:	e8 c9 e2 ff ff       	call   1bbac <fatfs_update_file_length>
   1d8e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:953
#endif
            file->filelength_changed = 0;
   1d8e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8e9:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:956
        }

        file->bytenum = 0;
   1d8f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8f3:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:957
        file->filelength = 0;
   1d8fa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d8fd:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:958
        file->startcluster = 0;
   1d904:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d907:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:959
        file->file_data_address = 0xFFFFFFFF;
   1d90e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d911:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1d918:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:960
        file->file_data_dirty = 0;
   1d91b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d91e:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d925:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:961
        file->filelength_changed = 0;
   1d928:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d92b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:964

        // Free file handle
        _free_file(file);
   1d932:	83 ec 0c             	sub    esp,0xc
   1d935:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d938:	e8 f0 ed ff ff       	call   1c72d <_free_file>
   1d93d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:966

        fatfs_fat_purge(&_fs);
   1d940:	83 ec 0c             	sub    esp,0xc
   1d943:	68 a0 e6 09 00       	push   0x9e6a0
   1d948:	e8 ff 2c 00 00       	call   2064c <fatfs_fat_purge>
   1d94d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968

        FL_UNLOCK(&_fs);
   1d950:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d955:	85 c0                	test   eax,eax
   1d957:	74 07                	je     1d960 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968 (discriminator 1)
   1d959:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1d95e:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:970
    }
}
   1d960:	90                   	nop
   1d961:	c9                   	leave  
   1d962:	c3                   	ret    

0001d963 <fl_fgetc>:
fl_fgetc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:975
//-----------------------------------------------------------------------------
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
   1d963:	55                   	push   ebp
   1d964:	89 e5                	mov    ebp,esp
   1d966:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:977
    int res;
    uint8 data = 0;
   1d969:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:979

    res = fl_fread(&data, 1, 1, f);
   1d96d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d970:	6a 01                	push   0x1
   1d972:	6a 01                	push   0x1
   1d974:	8d 45 f3             	lea    eax,[ebp-0xd]
   1d977:	50                   	push   eax
   1d978:	e8 95 00 00 00       	call   1da12 <fl_fread>
   1d97d:	83 c4 10             	add    esp,0x10
   1d980:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:980
    if (res == 1)
   1d983:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1d987:	75 09                	jne    1d992 <fl_fgetc+0x2f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:981
        return (int)data;
   1d989:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1d98d:	0f b6 c0             	movzx  eax,al
   1d990:	eb 03                	jmp    1d995 <fl_fgetc+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:983
    else
        return res;
   1d992:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:984 (discriminator 1)
}
   1d995:	c9                   	leave  
   1d996:	c3                   	ret    

0001d997 <fl_fgets>:
fl_fgets():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:989
//-----------------------------------------------------------------------------
// fl_fgets: Get a string from a stream
//-----------------------------------------------------------------------------
char *fl_fgets(char *s, int n, void *f)
{
   1d997:	55                   	push   ebp
   1d998:	89 e5                	mov    ebp,esp
   1d99a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:990
    int idx = 0;
   1d99d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:993

    // Space for null terminator?
    if (n > 0)
   1d9a4:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1d9a8:	7e 56                	jle    1da00 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1d9aa:	eb 32                	jmp    1d9de <fl_fgets+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:998
        {
            int ch = fl_fgetc(f);
   1d9ac:	83 ec 0c             	sub    esp,0xc
   1d9af:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d9b2:	e8 ac ff ff ff       	call   1d963 <fl_fgetc>
   1d9b7:	83 c4 10             	add    esp,0x10
   1d9ba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1001

            // EOF / Error?
            if (ch < 0)
   1d9bd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d9c1:	78 28                	js     1d9eb <fl_fgets+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1005
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
   1d9c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d9c6:	8d 50 01             	lea    edx,[eax+0x1]
   1d9c9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1d9cc:	89 c2                	mov    edx,eax
   1d9ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d9d1:	01 d0                	add    eax,edx
   1d9d3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d9d6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1008

            // End of line?
            if (ch == '\n')
   1d9d8:	83 7d f0 0a          	cmp    DWORD PTR [ebp-0x10],0xa
   1d9dc:	74 10                	je     1d9ee <fl_fgets+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1d9de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d9e1:	83 e8 01             	sub    eax,0x1
   1d9e4:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1d9e7:	7f c3                	jg     1d9ac <fl_fgets+0x15>
   1d9e9:	eb 04                	jmp    1d9ef <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1002
        {
            int ch = fl_fgetc(f);

            // EOF / Error?
            if (ch < 0)
                break;
   1d9eb:	90                   	nop
   1d9ec:	eb 01                	jmp    1d9ef <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1009
            // Store character read from stream
            s[idx++] = (char)ch;

            // End of line?
            if (ch == '\n')
                break;
   1d9ee:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1012
        }

        if (idx > 0)
   1d9ef:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d9f3:	7e 0b                	jle    1da00 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1013
            s[idx] = '\0';
   1d9f5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d9f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d9fb:	01 d0                	add    eax,edx
   1d9fd:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016
    }

    return (idx > 0) ? s : 0;
   1da00:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1da04:	7e 05                	jle    1da0b <fl_fgets+0x74>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 1)
   1da06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1da09:	eb 05                	jmp    1da10 <fl_fgets+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 2)
   1da0b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1017 (discriminator 5)
}
   1da10:	c9                   	leave  
   1da11:	c3                   	ret    

0001da12 <fl_fread>:
fl_fread():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1022
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
   1da12:	55                   	push   ebp
   1da13:	89 e5                	mov    ebp,esp
   1da15:	53                   	push   ebx
   1da16:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1026
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
   1da19:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1da1c:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1da20:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1027
    int bytesRead = 0;
   1da23:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1029

    FL_FILE *file = (FL_FILE *)f;
   1da2a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1da2d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032

    // If first call to library, initialise
    CHECK_FL_INIT();
   1da30:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1da35:	85 c0                	test   eax,eax
   1da37:	75 05                	jne    1da3e <fl_fread+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032 (discriminator 1)
   1da39:	e8 e0 f8 ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034

    if (buffer==NULL || file==NULL)
   1da3e:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1da42:	74 06                	je     1da4a <fl_fread+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034 (discriminator 1)
   1da44:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1da48:	75 0a                	jne    1da54 <fl_fread+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1035
        return -1;
   1da4a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1da4f:	e9 d8 01 00 00       	jmp    1dc2c <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1038

    // No read permissions
    if (!(file->flags & FILE_READ))
   1da54:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da57:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1da5e:	0f b6 c0             	movzx  eax,al
   1da61:	83 e0 01             	and    eax,0x1
   1da64:	85 c0                	test   eax,eax
   1da66:	75 0a                	jne    1da72 <fl_fread+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1039
        return -1;
   1da68:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1da6d:	e9 ba 01 00 00       	jmp    1dc2c <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1042

    // Nothing to be done
    if (!count)
   1da72:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1da76:	75 0a                	jne    1da82 <fl_fread+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1043
        return 0;
   1da78:	b8 00 00 00 00       	mov    eax,0x0
   1da7d:	e9 aa 01 00 00       	jmp    1dc2c <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1046

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
   1da82:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da85:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1da88:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da8b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1da8e:	39 c2                	cmp    edx,eax
   1da90:	72 0a                	jb     1da9c <fl_fread+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1047
        return -1;
   1da92:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1da97:	e9 90 01 00 00       	jmp    1dc2c <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1050

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
   1da9c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1da9f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1daa2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1daa5:	01 c2                	add    edx,eax
   1daa7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1daaa:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1daad:	39 c2                	cmp    edx,eax
   1daaf:	76 13                	jbe    1dac4 <fl_fread+0xb2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1051
        count = file->filelength - file->bytenum;
   1dab1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dab4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dab7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1daba:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dabd:	29 c2                	sub    edx,eax
   1dabf:	89 d0                	mov    eax,edx
   1dac1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1054

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1dac4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dac7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1daca:	c1 e8 09             	shr    eax,0x9
   1dacd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1057

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1dad0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dad3:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dad6:	25 ff 01 00 00       	and    eax,0x1ff
   1dadb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059

    while (bytesRead < count)
   1dade:	e9 34 01 00 00       	jmp    1dc17 <fl_fread+0x205>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
   1dae3:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dae7:	75 63                	jne    1db4c <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062 (discriminator 1)
   1dae9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1daec:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1daef:	3d ff 01 00 00       	cmp    eax,0x1ff
   1daf4:	7e 56                	jle    1db4c <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1065
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
   1daf6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1daf9:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1dafc:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1db02:	85 c0                	test   eax,eax
   1db04:	0f 48 c2             	cmovs  eax,edx
   1db07:	c1 f8 09             	sar    eax,0x9
   1db0a:	89 c1                	mov    ecx,eax
   1db0c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1db0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1db12:	01 d0                	add    eax,edx
   1db14:	51                   	push   ecx
   1db15:	50                   	push   eax
   1db16:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1db19:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1db1c:	e8 63 f6 ff ff       	call   1d184 <_read_sectors>
   1db21:	83 c4 10             	add    esp,0x10
   1db24:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1066
            if (sectorsRead)
   1db27:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   1db2b:	0f 84 f4 00 00 00    	je     1dc25 <fl_fread+0x213>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1069
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
   1db31:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1db34:	c1 e0 09             	shl    eax,0x9
   1db37:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1072

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
   1db3a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1db3d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1073
                offset = 0;
   1db40:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1063

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
   1db47:	e9 b4 00 00 00       	jmp    1dc00 <fl_fread+0x1ee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1081
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
   1db4c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db4f:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1db55:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1db58:	74 55                	je     1dbaf <fl_fread+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1084
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1db5a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db5d:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1db63:	85 c0                	test   eax,eax
   1db65:	74 0e                	je     1db75 <fl_fread+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1085
                    fl_fflush(file);
   1db67:	83 ec 0c             	sub    esp,0xc
   1db6a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1db6d:	e8 7e fc ff ff       	call   1d7f0 <fl_fflush>
   1db72:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1088

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1db75:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db78:	05 28 01 00 00       	add    eax,0x128
   1db7d:	6a 01                	push   0x1
   1db7f:	50                   	push   eax
   1db80:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1db83:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1db86:	e8 f9 f5 ff ff       	call   1d184 <_read_sectors>
   1db8b:	83 c4 10             	add    esp,0x10
   1db8e:	85 c0                	test   eax,eax
   1db90:	0f 84 92 00 00 00    	je     1dc28 <fl_fread+0x216>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1092
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
   1db96:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1db99:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1db9c:	89 90 28 03 00 00    	mov    DWORD PTR [eax+0x328],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1093
                file->file_data_dirty = 0;
   1dba2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dba5:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1dbac:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1097
            }

            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1dbaf:	b8 00 02 00 00       	mov    eax,0x200
   1dbb4:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1dbb7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1100

            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
   1dbba:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dbbd:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1dbc0:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1dbc3:	7d 09                	jge    1dbce <fl_fread+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1101
                copyCount = (count - bytesRead);
   1dbc5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dbc8:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1dbcb:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1104

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
   1dbce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1dbd1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1dbd4:	8d 8a 28 01 00 00    	lea    ecx,[edx+0x128]
   1dbda:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1dbdd:	01 d1                	add    ecx,edx
   1dbdf:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   1dbe2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1dbe5:	01 da                	add    edx,ebx
   1dbe7:	83 ec 04             	sub    esp,0x4
   1dbea:	50                   	push   eax
   1dbeb:	51                   	push   ecx
   1dbec:	52                   	push   edx
   1dbed:	e8 66 7f 00 00       	call   25b58 <memcpy>
   1dbf2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1107

            // Move onto next sector and reset copy offset
            sector++;
   1dbf5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1108
            offset = 0;
   1dbf9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1112
        }

        // Increase total read count
        bytesRead += copyCount;
   1dc00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1dc03:	01 45 e4             	add    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1115

        // Increment file pointer
        file->bytenum += copyCount;
   1dc06:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dc09:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dc0c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1dc0f:	01 c2                	add    edx,eax
   1dc11:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dc14:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   1dc17:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dc1a:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1dc1d:	0f 8c c0 fe ff ff    	jl     1dae3 <fl_fread+0xd1>
   1dc23:	eb 04                	jmp    1dc29 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1076
                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
                offset = 0;
            }
            else
                break;
   1dc25:	90                   	nop
   1dc26:	eb 01                	jmp    1dc29 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1090
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
                    // Read failed - out of range (probably)
                    break;
   1dc28:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1118

        // Increment file pointer
        file->bytenum += copyCount;
    }

    return bytesRead;
   1dc29:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1119
}
   1dc2c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1dc2f:	c9                   	leave  
   1dc30:	c3                   	ret    

0001dc31 <fl_fseek>:
fl_fseek():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1124
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
   1dc31:	55                   	push   ebp
   1dc32:	89 e5                	mov    ebp,esp
   1dc34:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1125
    FL_FILE *file = (FL_FILE *)f;
   1dc37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dc3a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1126
    int res = -1;
   1dc3d:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129

    // If first call to library, initialise
    CHECK_FL_INIT();
   1dc44:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1dc49:	85 c0                	test   eax,eax
   1dc4b:	75 05                	jne    1dc52 <fl_fseek+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129 (discriminator 1)
   1dc4d:	e8 cc f6 ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1131

    if (!file)
   1dc52:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dc56:	75 0a                	jne    1dc62 <fl_fseek+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1132
        return -1;
   1dc58:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dc5d:	e9 1d 01 00 00       	jmp    1dd7f <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134

    if (origin == SEEK_END && offset != 0)
   1dc62:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1dc66:	75 10                	jne    1dc78 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134 (discriminator 1)
   1dc68:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1dc6c:	74 0a                	je     1dc78 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1135
        return -1;
   1dc6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dc73:	e9 07 01 00 00       	jmp    1dd7f <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137

    FL_LOCK(&_fs);
   1dc78:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dc7d:	85 c0                	test   eax,eax
   1dc7f:	74 07                	je     1dc88 <fl_fseek+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137 (discriminator 1)
   1dc81:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dc86:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1140

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
   1dc88:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc8b:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1dc92:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1141
    file->file_data_dirty = 0;
   1dc95:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dc98:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1dc9f:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1143

    if (origin == SEEK_SET)
   1dca2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1dca6:	75 31                	jne    1dcd9 <fl_fseek+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1145
    {
        file->bytenum = (uint32)offset;
   1dca8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1dcab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcae:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1147

        if (file->bytenum > file->filelength)
   1dcb1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcb4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dcb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcba:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dcbd:	39 c2                	cmp    edx,eax
   1dcbf:	76 0c                	jbe    1dccd <fl_fseek+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1148
            file->bytenum = file->filelength;
   1dcc1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcc4:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dcc7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcca:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1150

        res = 0;
   1dccd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dcd4:	e9 93 00 00 00       	jmp    1dd6c <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1152
    }
    else if (origin == SEEK_CUR)
   1dcd9:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
   1dcdd:	75 6b                	jne    1dd4a <fl_fseek+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1155
    {
        // Positive shift
        if (offset >= 0)
   1dcdf:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1dce3:	78 2f                	js     1dd14 <fl_fseek+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1157
        {
            file->bytenum += offset;
   1dce5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dce8:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dceb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dcee:	01 c2                	add    edx,eax
   1dcf0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcf3:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1159

            if (file->bytenum > file->filelength)
   1dcf6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcf9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dcfc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dcff:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dd02:	39 c2                	cmp    edx,eax
   1dd04:	76 3b                	jbe    1dd41 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1160
                file->bytenum = file->filelength;
   1dd06:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd09:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dd0c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd0f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
   1dd12:	eb 2d                	jmp    1dd41 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1166
        }
        // Negative shift
        else
        {
            // Make shift positive
            offset = -offset;
   1dd14:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1169

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
   1dd17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd1a:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dd1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dd20:	39 c2                	cmp    edx,eax
   1dd22:	73 0c                	jae    1dd30 <fl_fseek+0xff>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1170
                file->bytenum = 0;
   1dd24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd27:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
   1dd2e:	eb 11                	jmp    1dd41 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1172
            else
                file->bytenum-= offset;
   1dd30:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd33:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dd36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dd39:	29 c2                	sub    edx,eax
   1dd3b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd3e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1175
        }

        res = 0;
   1dd41:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dd48:	eb 22                	jmp    1dd6c <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1177
    }
    else if (origin == SEEK_END)
   1dd4a:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1dd4e:	75 15                	jne    1dd65 <fl_fseek+0x134>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1179
    {
        file->bytenum = file->filelength;
   1dd50:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd53:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dd56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dd59:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1180
        res = 0;
   1dd5c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dd63:	eb 07                	jmp    1dd6c <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1183
    }
    else
        res = -1;
   1dd65:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185

    FL_UNLOCK(&_fs);
   1dd6c:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dd71:	85 c0                	test   eax,eax
   1dd73:	74 07                	je     1dd7c <fl_fseek+0x14b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185 (discriminator 1)
   1dd75:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1dd7a:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1187

    return res;
   1dd7c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1188
}
   1dd7f:	c9                   	leave  
   1dd80:	c3                   	ret    

0001dd81 <fl_fgetpos>:
fl_fgetpos():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1193
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
   1dd81:	55                   	push   ebp
   1dd82:	89 e5                	mov    ebp,esp
   1dd84:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1194
    FL_FILE *file = (FL_FILE *)f;
   1dd87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dd8a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1196

    if (!file)
   1dd8d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1dd91:	75 07                	jne    1dd9a <fl_fgetpos+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1197
        return -1;
   1dd93:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dd98:	eb 30                	jmp    1ddca <fl_fgetpos+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199

    FL_LOCK(&_fs);
   1dd9a:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dd9f:	85 c0                	test   eax,eax
   1dda1:	74 07                	je     1ddaa <fl_fgetpos+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199 (discriminator 1)
   1dda3:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dda8:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1202

    // Get position
    *position = file->bytenum;
   1ddaa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ddad:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1ddb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ddb3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204

    FL_UNLOCK(&_fs);
   1ddb5:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1ddba:	85 c0                	test   eax,eax
   1ddbc:	74 07                	je     1ddc5 <fl_fgetpos+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204 (discriminator 1)
   1ddbe:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1ddc3:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1206

    return 0;
   1ddc5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1207
}
   1ddca:	c9                   	leave  
   1ddcb:	c3                   	ret    

0001ddcc <fl_ftell>:
fl_ftell():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1212
//-----------------------------------------------------------------------------
// fl_ftell: Get the current file position
//-----------------------------------------------------------------------------
long fl_ftell(void *f)
{
   1ddcc:	55                   	push   ebp
   1ddcd:	89 e5                	mov    ebp,esp
   1ddcf:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1213
    uint32 pos = 0;
   1ddd2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1215

    fl_fgetpos(f, &pos);
   1ddd9:	83 ec 08             	sub    esp,0x8
   1dddc:	8d 45 f4             	lea    eax,[ebp-0xc]
   1dddf:	50                   	push   eax
   1dde0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dde3:	e8 99 ff ff ff       	call   1dd81 <fl_fgetpos>
   1dde8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1217

    return (long)pos;
   1ddeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1218
}
   1ddee:	c9                   	leave  
   1ddef:	c3                   	ret    

0001ddf0 <fl_feof>:
fl_feof():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1223
//-----------------------------------------------------------------------------
// fl_feof: Is the file pointer at the end of the stream?
//-----------------------------------------------------------------------------
int fl_feof(void *f)
{
   1ddf0:	55                   	push   ebp
   1ddf1:	89 e5                	mov    ebp,esp
   1ddf3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1224
    FL_FILE *file = (FL_FILE *)f;
   1ddf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ddf9:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1227
    int res;

    if (!file)
   1ddfc:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1de00:	75 07                	jne    1de09 <fl_feof+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1228
        return -1;
   1de02:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1de07:	eb 43                	jmp    1de4c <fl_feof+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230

    FL_LOCK(&_fs);
   1de09:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1de0e:	85 c0                	test   eax,eax
   1de10:	74 07                	je     1de19 <fl_feof+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230 (discriminator 1)
   1de12:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1de17:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1232

    if (file->bytenum == file->filelength)
   1de19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1de1c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1de1f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1de22:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1de25:	39 c2                	cmp    edx,eax
   1de27:	75 09                	jne    1de32 <fl_feof+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1233
        res = EOF;
   1de29:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
   1de30:	eb 07                	jmp    1de39 <fl_feof+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1235
    else
        res = 0;
   1de32:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237

    FL_UNLOCK(&_fs);
   1de39:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1de3e:	85 c0                	test   eax,eax
   1de40:	74 07                	je     1de49 <fl_feof+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237 (discriminator 1)
   1de42:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1de47:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1239

    return res;
   1de49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1240
}
   1de4c:	c9                   	leave  
   1de4d:	c3                   	ret    

0001de4e <fl_fputc>:
fl_fputc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1246
//-----------------------------------------------------------------------------
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
   1de4e:	55                   	push   ebp
   1de4f:	89 e5                	mov    ebp,esp
   1de51:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1247
    uint8 data = (uint8)c;
   1de54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1de57:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1250
    int res;

    res = fl_fwrite(&data, 1, 1, f);
   1de5a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1de5d:	6a 01                	push   0x1
   1de5f:	6a 01                	push   0x1
   1de61:	8d 45 f3             	lea    eax,[ebp-0xd]
   1de64:	50                   	push   eax
   1de65:	e8 16 00 00 00       	call   1de80 <fl_fwrite>
   1de6a:	83 c4 10             	add    esp,0x10
   1de6d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1251
    if (res == 1)
   1de70:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1de74:	75 05                	jne    1de7b <fl_fputc+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1252
        return c;
   1de76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1de79:	eb 03                	jmp    1de7e <fl_fputc+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1254
    else
        return res;
   1de7b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1255 (discriminator 1)
}
   1de7e:	c9                   	leave  
   1de7f:	c3                   	ret    

0001de80 <fl_fwrite>:
fl_fwrite():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
   1de80:	55                   	push   ebp
   1de81:	89 e5                	mov    ebp,esp
   1de83:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1263
    FL_FILE *file = (FL_FILE *)f;
   1de86:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1de89:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1266
    uint32 sector;
    uint32 offset;
    uint32 length = (size*count);
   1de8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1de8f:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1de93:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1267
    uint8 *buffer = (uint8 *)data;
   1de96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1de99:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1268
    uint32 bytesWritten = 0;
   1de9c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1dea3:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1dea8:	85 c0                	test   eax,eax
   1deaa:	75 05                	jne    1deb1 <fl_fwrite+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272 (discriminator 1)
   1deac:	e8 6d f4 ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1274

    if (!file)
   1deb1:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1deb5:	75 0a                	jne    1dec1 <fl_fwrite+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1275
        return -1;
   1deb7:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1debc:	e9 8a 02 00 00       	jmp    1e14b <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277

    FL_LOCK(&_fs);
   1dec1:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1dec6:	85 c0                	test   eax,eax
   1dec8:	74 07                	je     1ded1 <fl_fwrite+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277 (discriminator 1)
   1deca:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1decf:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1280

    // No write permissions
    if (!(file->flags & FILE_WRITE))
   1ded1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1ded4:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1dedb:	0f b6 c0             	movzx  eax,al
   1dede:	83 e0 02             	and    eax,0x2
   1dee1:	85 c0                	test   eax,eax
   1dee3:	75 1a                	jne    1deff <fl_fwrite+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282
    {
        FL_UNLOCK(&_fs);
   1dee5:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1deea:	85 c0                	test   eax,eax
   1deec:	74 07                	je     1def5 <fl_fwrite+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282 (discriminator 1)
   1deee:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1def3:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1283
        return -1;
   1def5:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1defa:	e9 4c 02 00 00       	jmp    1e14b <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1287
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
   1deff:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df02:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1df09:	0f b6 c0             	movzx  eax,al
   1df0c:	83 e0 04             	and    eax,0x4
   1df0f:	85 c0                	test   eax,eax
   1df11:	74 0c                	je     1df1f <fl_fwrite+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1288
        file->bytenum = file->filelength;
   1df13:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df16:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1df19:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df1c:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1292
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1df1f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df22:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1df25:	c1 e8 09             	shr    eax,0x9
   1df28:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1df2b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1df31:	25 ff 01 00 00       	and    eax,0x1ff
   1df36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
   1df39:	e9 b7 01 00 00       	jmp    1e0f5 <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
   1df3e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1df42:	0f 85 b6 00 00 00    	jne    1dffe <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300 (discriminator 1)
   1df48:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df4b:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1df4e:	3d ff 01 00 00       	cmp    eax,0x1ff
   1df53:	0f 86 a5 00 00 00    	jbe    1dffe <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1305
        {
            uint32 sectorsWrote;

            // Buffered sector, flush back to disk
            if (file->file_data_address != 0xFFFFFFFF)
   1df59:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df5c:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1df62:	83 f8 ff             	cmp    eax,0xffffffff
   1df65:	74 35                	je     1df9c <fl_fwrite+0x11c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1308
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1df67:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df6a:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1df70:	85 c0                	test   eax,eax
   1df72:	74 0e                	je     1df82 <fl_fwrite+0x102>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1309
                    fl_fflush(file);
   1df74:	83 ec 0c             	sub    esp,0xc
   1df77:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1df7a:	e8 71 f8 ff ff       	call   1d7f0 <fl_fflush>
   1df7f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1311

                file->file_data_address = 0xFFFFFFFF;
   1df82:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df85:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1df8c:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1312
                file->file_data_dirty = 0;
   1df8f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1df92:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1df99:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1316
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
   1df9c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1df9f:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1dfa2:	c1 e8 09             	shr    eax,0x9
   1dfa5:	89 c2                	mov    edx,eax
   1dfa7:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
   1dfaa:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1dfad:	01 c8                	add    eax,ecx
   1dfaf:	52                   	push   edx
   1dfb0:	50                   	push   eax
   1dfb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dfb4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1dfb7:	e8 42 f6 ff ff       	call   1d5fe <_write_sectors>
   1dfbc:	83 c4 10             	add    esp,0x10
   1dfbf:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1317
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;
   1dfc2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1dfc5:	c1 e0 09             	shl    eax,0x9
   1dfc8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1320

            // Increase total read count
            bytesWritten += copyCount;
   1dfcb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dfce:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1323

            // Increment file pointer
            file->bytenum += copyCount;
   1dfd1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dfd4:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dfd7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dfda:	01 c2                	add    edx,eax
   1dfdc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1dfdf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1326

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
   1dfe2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1dfe5:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1327
            offset = 0;
   1dfe8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1329

            if (!sectorsWrote)
   1dfef:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   1dff3:	0f 84 0a 01 00 00    	je     1e103 <fl_fwrite+0x283>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1301

    while (bytesWritten < length)
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
        {
   1dff9:	e9 f7 00 00 00       	jmp    1e0f5 <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1335
                break;
        }
        else
        {
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1dffe:	b8 00 02 00 00       	mov    eax,0x200
   1e003:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1e006:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1338

            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
   1e009:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e00c:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e00f:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1e012:	73 09                	jae    1e01d <fl_fwrite+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1339
                copyCount = (length - bytesWritten);
   1e014:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e017:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e01a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1342

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
   1e01d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e020:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1e026:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e029:	74 75                	je     1e0a0 <fl_fwrite+0x220>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1345
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1e02b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e02e:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1e034:	85 c0                	test   eax,eax
   1e036:	74 0e                	je     1e046 <fl_fwrite+0x1c6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1346
                    fl_fflush(file);
   1e038:	83 ec 0c             	sub    esp,0xc
   1e03b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e03e:	e8 ad f7 ff ff       	call   1d7f0 <fl_fflush>
   1e043:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1349

                // If we plan to overwrite the whole sector, we don't need to read it first!
                if (copyCount != FAT_SECTOR_SIZE)
   1e046:	81 7d e8 00 02 00 00 	cmp    DWORD PTR [ebp-0x18],0x200
   1e04d:	74 38                	je     1e087 <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1356
                    // NOTE: This does not have succeed; if last sector of file
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1e04f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e052:	05 28 01 00 00       	add    eax,0x128
   1e057:	6a 01                	push   0x1
   1e059:	50                   	push   eax
   1e05a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e05d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e060:	e8 1f f1 ff ff       	call   1d184 <_read_sectors>
   1e065:	83 c4 10             	add    esp,0x10
   1e068:	85 c0                	test   eax,eax
   1e06a:	75 1b                	jne    1e087 <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1357
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1e06c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e06f:	05 28 01 00 00       	add    eax,0x128
   1e074:	83 ec 04             	sub    esp,0x4
   1e077:	68 00 02 00 00       	push   0x200
   1e07c:	6a 00                	push   0x0
   1e07e:	50                   	push   eax
   1e07f:	e8 f9 6f 00 00       	call   2507d <memset>
   1e084:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1360
                }

                file->file_data_address = sector;
   1e087:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e08a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1e08d:	89 90 28 03 00 00    	mov    DWORD PTR [eax+0x328],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1361
                file->file_data_dirty = 0;
   1e093:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e096:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1e09d:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1365
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
   1e0a0:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1e0a3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e0a6:	01 c2                	add    edx,eax
   1e0a8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e0ab:	8d 88 28 01 00 00    	lea    ecx,[eax+0x128]
   1e0b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e0b4:	01 c8                	add    eax,ecx
   1e0b6:	83 ec 04             	sub    esp,0x4
   1e0b9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1e0bc:	52                   	push   edx
   1e0bd:	50                   	push   eax
   1e0be:	e8 95 7a 00 00       	call   25b58 <memcpy>
   1e0c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1368

            // Mark buffer as dirty
            file->file_data_dirty = 1;
   1e0c6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e0c9:	c7 80 2c 03 00 00 01 	mov    DWORD PTR [eax+0x32c],0x1
   1e0d0:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1371

            // Increase total read count
            bytesWritten += copyCount;
   1e0d3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e0d6:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1374

            // Increment file pointer
            file->bytenum += copyCount;
   1e0d9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e0dc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e0df:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e0e2:	01 c2                	add    edx,eax
   1e0e4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e0e7:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1377

            // Move onto next sector and reset copy offset
            sector++;
   1e0ea:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1378
            offset = 0;
   1e0ee:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   1e0f5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e0f8:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1e0fb:	0f 82 3d fe ff ff    	jb     1df3e <fl_fwrite+0xbe>
   1e101:	eb 01                	jmp    1e104 <fl_fwrite+0x284>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1330
            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
            offset = 0;

            if (!sectorsWrote)
                break;
   1e103:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1383
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
   1e104:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e107:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e10a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e10d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e110:	39 c2                	cmp    edx,eax
   1e112:	76 16                	jbe    1e12a <fl_fwrite+0x2aa>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1386
    {
        // Increase file size to new point
        file->filelength = file->bytenum;
   1e114:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e117:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e11a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e11d:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1390

        // We are changing the file length and this
        // will need to be writen back at some point
        file->filelength_changed = 1;
   1e120:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e123:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1396
    }

#if FATFS_INC_TIME_DATE_SUPPORT
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
   1e12a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e12d:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399
#endif

    FL_UNLOCK(&_fs);
   1e134:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e139:	85 c0                	test   eax,eax
   1e13b:	74 07                	je     1e144 <fl_fwrite+0x2c4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399 (discriminator 1)
   1e13d:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e142:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1401

    return (size*count);
   1e144:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e147:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1402
}
   1e14b:	c9                   	leave  
   1e14c:	c3                   	ret    

0001e14d <fl_fputs>:
fl_fputs():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1409
//-----------------------------------------------------------------------------
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
   1e14d:	55                   	push   ebp
   1e14e:	89 e5                	mov    ebp,esp
   1e150:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1410
    int len = (int)strlen(str);
   1e153:	83 ec 0c             	sub    esp,0xc
   1e156:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e159:	e8 66 92 00 00       	call   273c4 <strlen>
   1e15e:	83 c4 10             	add    esp,0x10
   1e161:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1411
    int res = fl_fwrite(str, 1, len, f);
   1e164:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e167:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e16a:	6a 01                	push   0x1
   1e16c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e16f:	e8 0c fd ff ff       	call   1de80 <fl_fwrite>
   1e174:	83 c4 10             	add    esp,0x10
   1e177:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1413

    if (res == len)
   1e17a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e17d:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e180:	75 05                	jne    1e187 <fl_fputs+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1414
        return len;
   1e182:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e185:	eb 03                	jmp    1e18a <fl_fputs+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1416
    else
        return res;
   1e187:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1417
}
   1e18a:	c9                   	leave  
   1e18b:	c3                   	ret    

0001e18c <fl_remove>:
fl_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1424
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
   1e18c:	55                   	push   ebp
   1e18d:	89 e5                	mov    ebp,esp
   1e18f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1426
    FL_FILE* file;
    int res = -1;
   1e192:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428

    FL_LOCK(&_fs);
   1e199:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e19e:	85 c0                	test   eax,eax
   1e1a0:	74 07                	je     1e1a9 <fl_remove+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428 (discriminator 1)
   1e1a2:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e1a7:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1431

    // Use read_file as this will check if the file is already open!
    file = fl_fopen((char*)filename, "r");
   1e1a9:	83 ec 08             	sub    esp,0x8
   1e1ac:	68 70 38 08 00       	push   0x83870
   1e1b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e1b4:	e8 8c f2 ff ff       	call   1d445 <fl_fopen>
   1e1b9:	83 c4 10             	add    esp,0x10
   1e1bc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1432
    if (file)
   1e1bf:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e1c3:	74 54                	je     1e219 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1435
    {
        // Delete allocated space
        if (fatfs_free_cluster_chain(&_fs, file->startcluster))
   1e1c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1c8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1e1cb:	83 ec 08             	sub    esp,0x8
   1e1ce:	50                   	push   eax
   1e1cf:	68 a0 e6 09 00       	push   0x9e6a0
   1e1d4:	e8 0d 2a 00 00       	call   20be6 <fatfs_free_cluster_chain>
   1e1d9:	83 c4 10             	add    esp,0x10
   1e1dc:	85 c0                	test   eax,eax
   1e1de:	74 39                	je     1e219 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1438
        {
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
   1e1e0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1e3:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1e1e9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e1ec:	8b 00                	mov    eax,DWORD PTR [eax]
   1e1ee:	83 ec 04             	sub    esp,0x4
   1e1f1:	52                   	push   edx
   1e1f2:	50                   	push   eax
   1e1f3:	68 a0 e6 09 00       	push   0x9e6a0
   1e1f8:	e8 f0 da ff ff       	call   1bced <fatfs_mark_file_deleted>
   1e1fd:	83 c4 10             	add    esp,0x10
   1e200:	85 c0                	test   eax,eax
   1e202:	74 15                	je     1e219 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1442
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
   1e204:	83 ec 0c             	sub    esp,0xc
   1e207:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1e20a:	e8 67 f6 ff ff       	call   1d876 <fl_fclose>
   1e20f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1444

                res = 0;
   1e212:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449
            }
        }
    }

    FL_UNLOCK(&_fs);
   1e219:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e21e:	85 c0                	test   eax,eax
   1e220:	74 07                	je     1e229 <fl_remove+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449 (discriminator 1)
   1e222:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e227:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1451

    return res;
   1e229:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1452
}
   1e22c:	c9                   	leave  
   1e22d:	c3                   	ret    

0001e22e <fl_createdirectory>:
fl_createdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1459
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
   1e22e:	55                   	push   ebp
   1e22f:	89 e5                	mov    ebp,esp
   1e231:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e234:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e239:	85 c0                	test   eax,eax
   1e23b:	75 05                	jne    1e242 <fl_createdirectory+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463 (discriminator 1)
   1e23d:	e8 dc f0 ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465

    FL_LOCK(&_fs);
   1e242:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e247:	85 c0                	test   eax,eax
   1e249:	74 07                	je     1e252 <fl_createdirectory+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465 (discriminator 1)
   1e24b:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e250:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1466
    res =_create_directory((char*)path);
   1e252:	83 ec 0c             	sub    esp,0xc
   1e255:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e258:	e8 ec e5 ff ff       	call   1c849 <_create_directory>
   1e25d:	83 c4 10             	add    esp,0x10
   1e260:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467
    FL_UNLOCK(&_fs);
   1e263:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e268:	85 c0                	test   eax,eax
   1e26a:	74 07                	je     1e273 <fl_createdirectory+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467 (discriminator 1)
   1e26c:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e271:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1469

    return res;
   1e273:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1470
}
   1e276:	c9                   	leave  
   1e277:	c3                   	ret    

0001e278 <fl_listdirectory>:
fl_listdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1477
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
   1e278:	55                   	push   ebp
   1e279:	89 e5                	mov    ebp,esp
   1e27b:	56                   	push   esi
   1e27c:	53                   	push   ebx
   1e27d:	81 ec c0 00 00 00    	sub    esp,0xc0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e283:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e288:	85 c0                	test   eax,eax
   1e28a:	75 05                	jne    1e291 <fl_listdirectory+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481 (discriminator 1)
   1e28c:	e8 8d f0 ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1483

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
   1e291:	83 ec 08             	sub    esp,0x8
   1e294:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e297:	68 72 38 08 00       	push   0x83872
   1e29c:	e8 52 8f 00 00       	call   271f3 <printk>
   1e2a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484
        FL_LOCK(&_fs);
   1e2a4:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e2a9:	85 c0                	test   eax,eax
   1e2ab:	74 07                	je     1e2b4 <fl_listdirectory+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484 (discriminator 1)
   1e2ad:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e2b2:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1487


        if (fl_opendir(path, &dirstat))
   1e2b4:	83 ec 08             	sub    esp,0x8
   1e2b7:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e2ba:	50                   	push   eax
   1e2bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e2be:	e8 ed 00 00 00       	call   1e3b0 <fl_opendir>
   1e2c3:	83 c4 10             	add    esp,0x10
   1e2c6:	85 c0                	test   eax,eax
   1e2c8:	0f 84 ca 00 00 00    	je     1e398 <fl_listdirectory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e2ce:	e9 98 00 00 00       	jmp    1e36b <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1495
        {
#if FATFS_INC_TIME_DATE_SUPPORT
            int d,m,y,h,mn,s;
            fatfs_convert_from_fat_time(dirent.write_time, &h,&m,&s);
   1e2d3:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
   1e2d7:	0f b7 c0             	movzx  eax,ax
   1e2da:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1e2dd:	52                   	push   edx
   1e2de:	8d 55 e4             	lea    edx,[ebp-0x1c]
   1e2e1:	52                   	push   edx
   1e2e2:	8d 55 dc             	lea    edx,[ebp-0x24]
   1e2e5:	52                   	push   edx
   1e2e6:	50                   	push   eax
   1e2e7:	e8 07 18 00 00       	call   1faf3 <fatfs_convert_from_fat_time>
   1e2ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1496
            fatfs_convert_from_fat_date(dirent.write_date, &d,&mn,&y);
   1e2ef:	0f b7 45 cc          	movzx  eax,WORD PTR [ebp-0x34]
   1e2f3:	0f b7 c0             	movzx  eax,ax
   1e2f6:	8d 55 e0             	lea    edx,[ebp-0x20]
   1e2f9:	52                   	push   edx
   1e2fa:	8d 55 d8             	lea    edx,[ebp-0x28]
   1e2fd:	52                   	push   edx
   1e2fe:	8d 55 e8             	lea    edx,[ebp-0x18]
   1e301:	52                   	push   edx
   1e302:	50                   	push   eax
   1e303:	e8 40 18 00 00       	call   1fb48 <fatfs_convert_from_fat_date>
   1e308:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1497
            FAT_PRINTF(("%02d/%02d/%04d  %02d:%02d      ", mn,d,y,h,m));
   1e30b:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   1e30e:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
   1e311:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1e314:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1e317:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e31a:	83 ec 08             	sub    esp,0x8
   1e31d:	56                   	push   esi
   1e31e:	53                   	push   ebx
   1e31f:	51                   	push   ecx
   1e320:	52                   	push   edx
   1e321:	50                   	push   eax
   1e322:	68 84 38 08 00       	push   0x83884
   1e327:	e8 c7 8e 00 00       	call   271f3 <printk>
   1e32c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1500
#endif

            if (dirent.is_dir)
   1e32f:	0f b6 45 bc          	movzx  eax,BYTE PTR [ebp-0x44]
   1e333:	84 c0                	test   al,al
   1e335:	74 19                	je     1e350 <fl_listdirectory+0xd8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1502
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
   1e337:	83 ec 08             	sub    esp,0x8
   1e33a:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e340:	50                   	push   eax
   1e341:	68 a4 38 08 00       	push   0x838a4
   1e346:	e8 a8 8e 00 00       	call   271f3 <printk>
   1e34b:	83 c4 10             	add    esp,0x10
   1e34e:	eb 1b                	jmp    1e36b <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1506
            }
            else
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
   1e350:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   1e353:	83 ec 04             	sub    esp,0x4
   1e356:	50                   	push   eax
   1e357:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e35d:	50                   	push   eax
   1e35e:	68 af 38 08 00       	push   0x838af
   1e363:	e8 8b 8e 00 00       	call   271f3 <printk>
   1e368:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491

        if (fl_opendir(path, &dirstat))
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e36b:	83 ec 08             	sub    esp,0x8
   1e36e:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e374:	50                   	push   eax
   1e375:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e378:	50                   	push   eax
   1e379:	e8 e9 00 00 00       	call   1e467 <fl_readdir>
   1e37e:	83 c4 10             	add    esp,0x10
   1e381:	85 c0                	test   eax,eax
   1e383:	0f 84 4a ff ff ff    	je     1e2d3 <fl_listdirectory+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1510
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
            }
        }

        fl_closedir(&dirstat);
   1e389:	83 ec 0c             	sub    esp,0xc
   1e38c:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e38f:	50                   	push   eax
   1e390:	e8 3a 01 00 00       	call   1e4cf <fl_closedir>
   1e395:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513
    }

    FL_UNLOCK(&_fs);
   1e398:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e39d:	85 c0                	test   eax,eax
   1e39f:	74 07                	je     1e3a8 <fl_listdirectory+0x130>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513 (discriminator 1)
   1e3a1:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e3a6:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1514
}
   1e3a8:	90                   	nop
   1e3a9:	8d 65 f8             	lea    esp,[ebp-0x8]
   1e3ac:	5b                   	pop    ebx
   1e3ad:	5e                   	pop    esi
   1e3ae:	5d                   	pop    ebp
   1e3af:	c3                   	ret    

0001e3b0 <fl_opendir>:
fl_opendir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1521
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
   1e3b0:	55                   	push   ebp
   1e3b1:	89 e5                	mov    ebp,esp
   1e3b3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1523
    int levels;
    int res = 1;
   1e3b6:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1524
    uint32 cluster = FAT32_INVALID_CLUSTER;
   1e3bd:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e3c4:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e3c9:	85 c0                	test   eax,eax
   1e3cb:	75 05                	jne    1e3d2 <fl_opendir+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527 (discriminator 1)
   1e3cd:	e8 4c ef ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529

    FL_LOCK(&_fs);
   1e3d2:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e3d7:	85 c0                	test   eax,eax
   1e3d9:	74 07                	je     1e3e2 <fl_opendir+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529 (discriminator 1)
   1e3db:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e3e0:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1531

    levels = fatfs_total_path_levels((char*)path) + 1;
   1e3e2:	83 ec 0c             	sub    esp,0xc
   1e3e5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e3e8:	e8 5b 18 00 00       	call   1fc48 <fatfs_total_path_levels>
   1e3ed:	83 c4 10             	add    esp,0x10
   1e3f0:	83 c0 01             	add    eax,0x1
   1e3f3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1534

    // If path is in the root dir
    if (levels == 0)
   1e3f6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e3fa:	75 15                	jne    1e411 <fl_opendir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1535
        cluster = fatfs_get_root_cluster(&_fs);
   1e3fc:	83 ec 0c             	sub    esp,0xc
   1e3ff:	68 a0 e6 09 00       	push   0x9e6a0
   1e404:	e8 18 d3 ff ff       	call   1b721 <fatfs_get_root_cluster>
   1e409:	83 c4 10             	add    esp,0x10
   1e40c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   1e40f:	eb 15                	jmp    1e426 <fl_opendir+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1538
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
   1e411:	83 ec 08             	sub    esp,0x8
   1e414:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e417:	50                   	push   eax
   1e418:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e41b:	e8 3f e3 ff ff       	call   1c75f <_open_directory>
   1e420:	83 c4 10             	add    esp,0x10
   1e423:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1540

    if (res)
   1e426:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e42a:	74 17                	je     1e443 <fl_opendir+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1541
        fatfs_list_directory_start(&_fs, dir, cluster);
   1e42c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e42f:	83 ec 04             	sub    esp,0x4
   1e432:	50                   	push   eax
   1e433:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e436:	68 a0 e6 09 00       	push   0x9e6a0
   1e43b:	e8 eb d9 ff ff       	call   1be2b <fatfs_list_directory_start>
   1e440:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543

    FL_UNLOCK(&_fs);
   1e443:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e448:	85 c0                	test   eax,eax
   1e44a:	74 07                	je     1e453 <fl_opendir+0xa3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543 (discriminator 1)
   1e44c:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e451:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
   1e453:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e456:	83 f8 ff             	cmp    eax,0xffffffff
   1e459:	74 05                	je     1e460 <fl_opendir+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 1)
   1e45b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e45e:	eb 05                	jmp    1e465 <fl_opendir+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 2)
   1e460:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1546
}
   1e465:	c9                   	leave  
   1e466:	c3                   	ret    

0001e467 <fl_readdir>:
fl_readdir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1553
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
   1e467:	55                   	push   ebp
   1e468:	89 e5                	mov    ebp,esp
   1e46a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1554
    int res = 0;
   1e46d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e474:	a1 90 e6 09 00       	mov    eax,ds:0x9e690
   1e479:	85 c0                	test   eax,eax
   1e47b:	75 05                	jne    1e482 <fl_readdir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557 (discriminator 1)
   1e47d:	e8 9c ee ff ff       	call   1d31e <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559

    FL_LOCK(&_fs);
   1e482:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e487:	85 c0                	test   eax,eax
   1e489:	74 07                	je     1e492 <fl_readdir+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559 (discriminator 1)
   1e48b:	a1 dc e6 09 00       	mov    eax,ds:0x9e6dc
   1e490:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1561

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   1e492:	83 ec 04             	sub    esp,0x4
   1e495:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e498:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e49b:	68 a0 e6 09 00       	push   0x9e6a0
   1e4a0:	e8 a5 d9 ff ff       	call   1be4a <fatfs_list_directory_next>
   1e4a5:	83 c4 10             	add    esp,0x10
   1e4a8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563

    FL_UNLOCK(&_fs);
   1e4ab:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e4b0:	85 c0                	test   eax,eax
   1e4b2:	74 07                	je     1e4bb <fl_readdir+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563 (discriminator 1)
   1e4b4:	a1 e0 e6 09 00       	mov    eax,ds:0x9e6e0
   1e4b9:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565

    return res ? 0 : -1;
   1e4bb:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e4bf:	74 07                	je     1e4c8 <fl_readdir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 1)
   1e4c1:	b8 00 00 00 00       	mov    eax,0x0
   1e4c6:	eb 05                	jmp    1e4cd <fl_readdir+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 2)
   1e4c8:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1566 (discriminator 5)
}
   1e4cd:	c9                   	leave  
   1e4ce:	c3                   	ret    

0001e4cf <fl_closedir>:
fl_closedir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1573
//-----------------------------------------------------------------------------
// fl_closedir: Close directory after listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_closedir(FL_DIR* dir)
{
   1e4cf:	55                   	push   ebp
   1e4d0:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1575
    // Not used
    return 0;
   1e4d2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1576
}
   1e4d7:	5d                   	pop    ebp
   1e4d8:	c3                   	ret    

0001e4d9 <fl_is_dir>:
fl_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1583
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
   1e4d9:	55                   	push   ebp
   1e4da:	89 e5                	mov    ebp,esp
   1e4dc:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1584
    int res = 0;
   1e4df:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1587
    FL_DIR dir;

    if (fl_opendir(path, &dir))
   1e4e6:	83 ec 08             	sub    esp,0x8
   1e4e9:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e4ec:	50                   	push   eax
   1e4ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e4f0:	e8 bb fe ff ff       	call   1e3b0 <fl_opendir>
   1e4f5:	83 c4 10             	add    esp,0x10
   1e4f8:	85 c0                	test   eax,eax
   1e4fa:	74 16                	je     1e512 <fl_is_dir+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1589
    {
        res = 1;
   1e4fc:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1590
        fl_closedir(&dir);
   1e503:	83 ec 0c             	sub    esp,0xc
   1e506:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e509:	50                   	push   eax
   1e50a:	e8 c0 ff ff ff       	call   1e4cf <fl_closedir>
   1e50f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1593
    }

    return res;
   1e512:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1594
}
   1e515:	c9                   	leave  
   1e516:	c3                   	ret    

0001e517 <fl_format>:
fl_format():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1601
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
   1e517:	55                   	push   ebp
   1e518:	89 e5                	mov    ebp,esp
   1e51a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1602
    return fatfs_format(&_fs, volume_sectors, name);
   1e51d:	83 ec 04             	sub    esp,0x4
   1e520:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e523:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e526:	68 a0 e6 09 00       	push   0x9e6a0
   1e52b:	e8 8a 0b 00 00       	call   1f0ba <fatfs_format>
   1e530:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1603
}
   1e533:	c9                   	leave  
   1e534:	c3                   	ret    
   1e535:	66 90                	xchg   ax,ax
   1e537:	90                   	nop

0001e538 <fatfs_calc_cluster_size>:
fatfs_calc_cluster_size():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:78

//-----------------------------------------------------------------------------
// fatfs_calc_cluster_size: Calculate what cluster size should be used
//-----------------------------------------------------------------------------
static uint8 fatfs_calc_cluster_size(uint32 sectors, int is_fat32)
{
   1e538:	55                   	push   ebp
   1e539:	89 e5                	mov    ebp,esp
   1e53b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:81
    int i;

    if (!is_fat32)
   1e53e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1e542:	75 3a                	jne    1e57e <fatfs_calc_cluster_size+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1e544:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1e54b:	eb 20                	jmp    1e56d <fatfs_calc_cluster_size+0x35>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:84
            if (sectors <= _cluster_size_table16[i].sectors)
   1e54d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e550:	8b 04 c5 60 d9 02 00 	mov    eax,DWORD PTR [eax*8+0x2d960]
   1e557:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1e55a:	72 0d                	jb     1e569 <fatfs_calc_cluster_size+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:85
                return _cluster_size_table16[i].sectors_per_cluster;
   1e55c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e55f:	0f b6 04 c5 64 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d964]
   1e566:	00 
   1e567:	eb 52                	jmp    1e5bb <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 2)
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1e569:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 1)
   1e56d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e570:	0f b6 04 c5 64 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d964]
   1e577:	00 
   1e578:	84 c0                	test   al,al
   1e57a:	75 d1                	jne    1e54d <fatfs_calc_cluster_size+0x15>
   1e57c:	eb 38                	jmp    1e5b6 <fatfs_calc_cluster_size+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1e57e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1e585:	eb 20                	jmp    1e5a7 <fatfs_calc_cluster_size+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:90
            if (sectors <= _cluster_size_table32[i].sectors)
   1e587:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e58a:	8b 04 c5 a0 d9 02 00 	mov    eax,DWORD PTR [eax*8+0x2d9a0]
   1e591:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1e594:	72 0d                	jb     1e5a3 <fatfs_calc_cluster_size+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:91
                return _cluster_size_table32[i].sectors_per_cluster;
   1e596:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e599:	0f b6 04 c5 a4 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d9a4]
   1e5a0:	00 
   1e5a1:	eb 18                	jmp    1e5bb <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 2)
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1e5a3:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 1)
   1e5a7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e5aa:	0f b6 04 c5 a4 d9 02 	movzx  eax,BYTE PTR [eax*8+0x2d9a4]
   1e5b1:	00 
   1e5b2:	84 c0                	test   al,al
   1e5b4:	75 d1                	jne    1e587 <fatfs_calc_cluster_size+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:94
            if (sectors <= _cluster_size_table32[i].sectors)
                return _cluster_size_table32[i].sectors_per_cluster;
    }

    return 0;
   1e5b6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:95
}
   1e5bb:	c9                   	leave  
   1e5bc:	c3                   	ret    

0001e5bd <fatfs_erase_sectors>:
fatfs_erase_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:100
//-----------------------------------------------------------------------------
// fatfs_erase_sectors: Erase a number of sectors
//-----------------------------------------------------------------------------
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
   1e5bd:	55                   	push   ebp
   1e5be:	89 e5                	mov    ebp,esp
   1e5c0:	53                   	push   ebx
   1e5c1:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:104
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1e5c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5c7:	83 c0 44             	add    eax,0x44
   1e5ca:	83 ec 04             	sub    esp,0x4
   1e5cd:	68 00 02 00 00       	push   0x200
   1e5d2:	6a 00                	push   0x0
   1e5d4:	50                   	push   eax
   1e5d5:	e8 a3 6a 00 00       	call   2507d <memset>
   1e5da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106

    for (i=0;i<count;i++)
   1e5dd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e5e4:	eb 2f                	jmp    1e615 <fatfs_erase_sectors+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:107
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   1e5e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e5e9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1e5ec:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1e5ef:	8d 4a 44             	lea    ecx,[edx+0x44]
   1e5f2:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   1e5f5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1e5f8:	01 da                	add    edx,ebx
   1e5fa:	83 ec 04             	sub    esp,0x4
   1e5fd:	6a 01                	push   0x1
   1e5ff:	51                   	push   ecx
   1e600:	52                   	push   edx
   1e601:	ff d0                	call   eax
   1e603:	83 c4 10             	add    esp,0x10
   1e606:	85 c0                	test   eax,eax
   1e608:	75 07                	jne    1e611 <fatfs_erase_sectors+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:108
            return 0;
   1e60a:	b8 00 00 00 00       	mov    eax,0x0
   1e60f:	eb 11                	jmp    1e622 <fatfs_erase_sectors+0x65>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 2)
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   1e611:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 1)
   1e615:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e618:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1e61b:	7c c9                	jl     1e5e6 <fatfs_erase_sectors+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:110
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1e61d:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:111
}
   1e622:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1e625:	c9                   	leave  
   1e626:	c3                   	ret    

0001e627 <fatfs_create_boot_sector>:
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:116
//-----------------------------------------------------------------------------
// fatfs_create_boot_sector: Create the boot sector
//-----------------------------------------------------------------------------
static int fatfs_create_boot_sector(struct fatfs *fs, uint32 boot_sector_lba, uint32 vol_sectors, const char *name, int is_fat32)
{
   1e627:	55                   	push   ebp
   1e628:	89 e5                	mov    ebp,esp
   1e62a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:121
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1e62d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e630:	83 c0 44             	add    eax,0x44
   1e633:	83 ec 04             	sub    esp,0x4
   1e636:	68 00 02 00 00       	push   0x200
   1e63b:	6a 00                	push   0x0
   1e63d:	50                   	push   eax
   1e63e:	e8 3a 6a 00 00       	call   2507d <memset>
   1e643:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   1e646:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e649:	c6 40 44 eb          	mov    BYTE PTR [eax+0x44],0xeb
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
   1e64d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e650:	c6 40 45 3c          	mov    BYTE PTR [eax+0x45],0x3c
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
   1e654:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e657:	c6 40 46 90          	mov    BYTE PTR [eax+0x46],0x90
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
   1e65b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e65e:	c6 40 47 4d          	mov    BYTE PTR [eax+0x47],0x4d
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
   1e662:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e665:	c6 40 48 53          	mov    BYTE PTR [eax+0x48],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
   1e669:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e66c:	c6 40 49 44          	mov    BYTE PTR [eax+0x49],0x44
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
   1e670:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e673:	c6 40 4a 4f          	mov    BYTE PTR [eax+0x4a],0x4f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
   1e677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e67a:	c6 40 4b 53          	mov    BYTE PTR [eax+0x4b],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
   1e67e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e681:	c6 40 4c 35          	mov    BYTE PTR [eax+0x4c],0x35
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
   1e685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e688:	c6 40 4d 2e          	mov    BYTE PTR [eax+0x4d],0x2e
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
   1e68c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e68f:	c6 40 4e 30          	mov    BYTE PTR [eax+0x4e],0x30
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
   1e693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e696:	c6 40 4f 00          	mov    BYTE PTR [eax+0x4f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
   1e69a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e69d:	c6 40 50 02          	mov    BYTE PTR [eax+0x50],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:141

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   1e6a1:	83 ec 08             	sub    esp,0x8
   1e6a4:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1e6a7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1e6aa:	e8 89 fe ff ff       	call   1e538 <fatfs_calc_cluster_size>
   1e6af:	83 c4 10             	add    esp,0x10
   1e6b2:	89 c2                	mov    edx,eax
   1e6b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6b7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:142
    if (!fs->sectors_per_cluster)
   1e6b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6bc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e6bf:	84 c0                	test   al,al
   1e6c1:	75 0a                	jne    1e6cd <fatfs_create_boot_sector+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:143
        return 0; // Invalid disk size
   1e6c3:	b8 00 00 00 00       	mov    eax,0x0
   1e6c8:	e9 dc 04 00 00       	jmp    1eba9 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:146

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
   1e6cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6d0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   1e6d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6d6:	88 50 51             	mov    BYTE PTR [eax+0x51],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:149

    // Reserved Sectors
    if (!is_fat32)
   1e6d9:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e6dd:	75 0b                	jne    1e6ea <fatfs_create_boot_sector+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:150
        fs->reserved_sectors = 8;
   1e6df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6e2:	66 c7 40 2a 08 00    	mov    WORD PTR [eax+0x2a],0x8
   1e6e8:	eb 09                	jmp    1e6f3 <fatfs_create_boot_sector+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:152
    else
        fs->reserved_sectors = 32;
   1e6ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6ed:	66 c7 40 2a 20 00    	mov    WORD PTR [eax+0x2a],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:153
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   1e6f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6f6:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1e6fa:	89 c2                	mov    edx,eax
   1e6fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e6ff:	88 50 52             	mov    BYTE PTR [eax+0x52],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   1e702:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e705:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1e709:	66 c1 e8 08          	shr    ax,0x8
   1e70d:	89 c2                	mov    edx,eax
   1e70f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e712:	88 50 53             	mov    BYTE PTR [eax+0x53],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
   1e715:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e718:	c6 40 2c 02          	mov    BYTE PTR [eax+0x2c],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
   1e71c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e71f:	0f b6 50 2c          	movzx  edx,BYTE PTR [eax+0x2c]
   1e723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e726:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:161

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
   1e729:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e72d:	75 2d                	jne    1e75c <fatfs_create_boot_sector+0x135>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:163
    {
        fs->root_entry_count = 512;
   1e72f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e732:	66 c7 40 28 00 02    	mov    WORD PTR [eax+0x28],0x200
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:164
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
   1e738:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e73b:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1e73f:	89 c2                	mov    edx,eax
   1e741:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e744:	88 50 55             	mov    BYTE PTR [eax+0x55],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:165
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
   1e747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e74a:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1e74e:	66 c1 e8 08          	shr    ax,0x8
   1e752:	89 c2                	mov    edx,eax
   1e754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e757:	88 50 56             	mov    BYTE PTR [eax+0x56],dl
   1e75a:	eb 17                	jmp    1e773 <fatfs_create_boot_sector+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:169
    }
    else
    {
        fs->root_entry_count = 0;
   1e75c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e75f:	66 c7 40 28 00 00    	mov    WORD PTR [eax+0x28],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:170
        fs->currentsector.sector[17] = 0;
   1e765:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e768:	c6 40 55 00          	mov    BYTE PTR [eax+0x55],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:171
        fs->currentsector.sector[18] = 0;
   1e76c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e76f:	c6 40 56 00          	mov    BYTE PTR [eax+0x56],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:175
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
   1e773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e776:	c6 40 57 00          	mov    BYTE PTR [eax+0x57],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
   1e77a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e77d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   1e781:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e784:	c6 40 59 f8          	mov    BYTE PTR [eax+0x59],0xf8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:183


    // FAT16 BS Details
    if (!is_fat32)
   1e788:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e78c:	0f 85 8c 01 00 00    	jne    1e91e <fatfs_create_boot_sector+0x2f7>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:186
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1e792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e795:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e798:	0f b6 c8             	movzx  ecx,al
   1e79b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e79e:	ba 00 00 00 00       	mov    edx,0x0
   1e7a3:	f7 f1                	div    ecx
   1e7a5:	83 c0 01             	add    eax,0x1
   1e7a8:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:187
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
   1e7ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e7ae:	c1 e8 08             	shr    eax,0x8
   1e7b1:	8d 50 01             	lea    edx,[eax+0x1]
   1e7b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7b7:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:188
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
   1e7ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7bd:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e7c0:	89 c2                	mov    edx,eax
   1e7c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7c5:	88 50 5a             	mov    BYTE PTR [eax+0x5a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:189
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
   1e7c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7cb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e7ce:	c1 e8 08             	shr    eax,0x8
   1e7d1:	89 c2                	mov    edx,eax
   1e7d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7d6:	88 50 5b             	mov    BYTE PTR [eax+0x5b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:192

        // Sectors per track
        fs->currentsector.sector[24] = 0x00;
   1e7d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7dc:	c6 40 5c 00          	mov    BYTE PTR [eax+0x5c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:193
        fs->currentsector.sector[25] = 0x00;
   1e7e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7e3:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:196

        // Heads
        fs->currentsector.sector[26] = 0x00;
   1e7e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7ea:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:197
        fs->currentsector.sector[27] = 0x00;
   1e7ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7f1:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:200

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
   1e7f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7f8:	c6 40 60 20          	mov    BYTE PTR [eax+0x60],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:201
        fs->currentsector.sector[29] = 0x00;
   1e7fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e7ff:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:202
        fs->currentsector.sector[30] = 0x00;
   1e803:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e806:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:203
        fs->currentsector.sector[31] = 0x00;
   1e80a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e80d:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:206

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1e811:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e814:	89 c2                	mov    edx,eax
   1e816:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e819:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:207
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1e81c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e81f:	c1 e8 08             	shr    eax,0x8
   1e822:	89 c2                	mov    edx,eax
   1e824:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e827:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:208
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1e82a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e82d:	c1 e8 10             	shr    eax,0x10
   1e830:	89 c2                	mov    edx,eax
   1e832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e835:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:209
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1e838:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e83b:	c1 e8 18             	shr    eax,0x18
   1e83e:	89 c2                	mov    edx,eax
   1e840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e843:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:212

        // Drive number
        fs->currentsector.sector[36] = 0x00;
   1e846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e849:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:215

        // Reserved
        fs->currentsector.sector[37] = 0x00;
   1e84d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e850:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:218

        // Boot signature
        fs->currentsector.sector[38] = 0x29;
   1e854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e857:	c6 40 6a 29          	mov    BYTE PTR [eax+0x6a],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:221

        // Volume ID
        fs->currentsector.sector[39] = 0x12;
   1e85b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e85e:	c6 40 6b 12          	mov    BYTE PTR [eax+0x6b],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:222
        fs->currentsector.sector[40] = 0x34;
   1e862:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e865:	c6 40 6c 34          	mov    BYTE PTR [eax+0x6c],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:223
        fs->currentsector.sector[41] = 0x56;
   1e869:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e86c:	c6 40 6d 56          	mov    BYTE PTR [eax+0x6d],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:224
        fs->currentsector.sector[42] = 0x78;
   1e870:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e873:	c6 40 6e 78          	mov    BYTE PTR [eax+0x6e],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227

        // Volume name
        for (i=0;i<11;i++)
   1e877:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e87e:	eb 41                	jmp    1e8c1 <fatfs_create_boot_sector+0x29a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:229
        {
            if (i < (int)strlen(name))
   1e880:	83 ec 0c             	sub    esp,0xc
   1e883:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1e886:	e8 39 8b 00 00       	call   273c4 <strlen>
   1e88b:	83 c4 10             	add    esp,0x10
   1e88e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e891:	7e 1c                	jle    1e8af <fatfs_create_boot_sector+0x288>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:230
                fs->currentsector.sector[i+43] = name[i];
   1e893:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e896:	8d 50 2b             	lea    edx,[eax+0x2b]
   1e899:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1e89c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1e89f:	01 c8                	add    eax,ecx
   1e8a1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e8a4:	89 c1                	mov    ecx,eax
   1e8a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8a9:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1e8ad:	eb 0e                	jmp    1e8bd <fatfs_create_boot_sector+0x296>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:232
            else
                fs->currentsector.sector[i+43] = ' ';
   1e8af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e8b2:	8d 50 2b             	lea    edx,[eax+0x2b]
   1e8b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8b8:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 2)
        fs->currentsector.sector[40] = 0x34;
        fs->currentsector.sector[41] = 0x56;
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1e8bd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 1)
   1e8c1:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1e8c5:	7e b9                	jle    1e880 <fatfs_create_boot_sector+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:236
            else
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
   1e8c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8ca:	c6 40 7a 46          	mov    BYTE PTR [eax+0x7a],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:237
        fs->currentsector.sector[55] = 'A';
   1e8ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8d1:	c6 40 7b 41          	mov    BYTE PTR [eax+0x7b],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:238
        fs->currentsector.sector[56] = 'T';
   1e8d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8d8:	c6 40 7c 54          	mov    BYTE PTR [eax+0x7c],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:239
        fs->currentsector.sector[57] = '1';
   1e8dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8df:	c6 40 7d 31          	mov    BYTE PTR [eax+0x7d],0x31
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:240
        fs->currentsector.sector[58] = '6';
   1e8e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8e6:	c6 40 7e 36          	mov    BYTE PTR [eax+0x7e],0x36
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:241
        fs->currentsector.sector[59] = ' ';
   1e8ea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8ed:	c6 40 7f 20          	mov    BYTE PTR [eax+0x7f],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:242
        fs->currentsector.sector[60] = ' ';
   1e8f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8f4:	c6 80 80 00 00 00 20 	mov    BYTE PTR [eax+0x80],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:243
        fs->currentsector.sector[61] = ' ';
   1e8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8fe:	c6 80 81 00 00 00 20 	mov    BYTE PTR [eax+0x81],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:246

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1e905:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e908:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:247
        fs->currentsector.sector[511] = 0xAA;
   1e90f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e912:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
   1e919:	e9 61 02 00 00       	jmp    1eb7f <fatfs_create_boot_sector+0x558>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:253
    }
    // FAT32 BS Details
    else
    {
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
   1e91e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e921:	c6 40 5a 00          	mov    BYTE PTR [eax+0x5a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:254
        fs->currentsector.sector[23] = 0;
   1e925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e928:	c6 40 5b 00          	mov    BYTE PTR [eax+0x5b],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:257

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
   1e92c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e92f:	c6 40 5c 3f          	mov    BYTE PTR [eax+0x5c],0x3f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:258
        fs->currentsector.sector[25] = 0x00;
   1e933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e936:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:261

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
   1e93a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e93d:	c6 40 5e ff          	mov    BYTE PTR [eax+0x5e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:262
        fs->currentsector.sector[27] = 0x00;
   1e941:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e944:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:265

        // Hidden sectors
        fs->currentsector.sector[28] = 0x00;
   1e948:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e94b:	c6 40 60 00          	mov    BYTE PTR [eax+0x60],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:266
        fs->currentsector.sector[29] = 0x00;
   1e94f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e952:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:267
        fs->currentsector.sector[30] = 0x00;
   1e956:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e959:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:268
        fs->currentsector.sector[31] = 0x00;
   1e95d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e960:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:271

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1e964:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e967:	89 c2                	mov    edx,eax
   1e969:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e96c:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:272
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1e96f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e972:	c1 e8 08             	shr    eax,0x8
   1e975:	89 c2                	mov    edx,eax
   1e977:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e97a:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:273
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1e97d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e980:	c1 e8 10             	shr    eax,0x10
   1e983:	89 c2                	mov    edx,eax
   1e985:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e988:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:274
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1e98b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e98e:	c1 e8 18             	shr    eax,0x18
   1e991:	89 c2                	mov    edx,eax
   1e993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e996:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:276

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1e999:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e99c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e99f:	0f b6 c8             	movzx  ecx,al
   1e9a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1e9a5:	ba 00 00 00 00       	mov    edx,0x0
   1e9aa:	f7 f1                	div    ecx
   1e9ac:	83 c0 01             	add    eax,0x1
   1e9af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:277
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
   1e9b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e9b5:	c1 e8 07             	shr    eax,0x7
   1e9b8:	8d 50 01             	lea    edx,[eax+0x1]
   1e9bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9be:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:280

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
   1e9c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9c4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e9c7:	89 c2                	mov    edx,eax
   1e9c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9cc:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:281
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
   1e9cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9d2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e9d5:	c1 e8 08             	shr    eax,0x8
   1e9d8:	89 c2                	mov    edx,eax
   1e9da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9dd:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:282
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
   1e9e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9e3:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e9e6:	c1 e8 10             	shr    eax,0x10
   1e9e9:	89 c2                	mov    edx,eax
   1e9eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9ee:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:283
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   1e9f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9f4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1e9f7:	c1 e8 18             	shr    eax,0x18
   1e9fa:	89 c2                	mov    edx,eax
   1e9fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9ff:	88 50 6b             	mov    BYTE PTR [eax+0x6b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:286

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
   1ea02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea05:	c6 40 6c 00          	mov    BYTE PTR [eax+0x6c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:287
        fs->currentsector.sector[41] = 0;
   1ea09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea0c:	c6 40 6d 00          	mov    BYTE PTR [eax+0x6d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:290

        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
   1ea10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea13:	c6 40 6e 00          	mov    BYTE PTR [eax+0x6e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:291
        fs->currentsector.sector[43] = 0;
   1ea17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea1a:	c6 40 6f 00          	mov    BYTE PTR [eax+0x6f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:294

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
   1ea1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea21:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ea24:	89 c2                	mov    edx,eax
   1ea26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea29:	88 50 70             	mov    BYTE PTR [eax+0x70],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:295
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
   1ea2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea2f:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ea32:	c1 e8 08             	shr    eax,0x8
   1ea35:	89 c2                	mov    edx,eax
   1ea37:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea3a:	88 50 71             	mov    BYTE PTR [eax+0x71],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:296
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
   1ea3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea40:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ea43:	c1 e8 10             	shr    eax,0x10
   1ea46:	89 c2                	mov    edx,eax
   1ea48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea4b:	88 50 72             	mov    BYTE PTR [eax+0x72],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:297
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
   1ea4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea51:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ea54:	c1 e8 18             	shr    eax,0x18
   1ea57:	89 c2                	mov    edx,eax
   1ea59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea5c:	88 50 73             	mov    BYTE PTR [eax+0x73],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:300

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
   1ea5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea62:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1ea66:	89 c2                	mov    edx,eax
   1ea68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea6b:	88 50 74             	mov    BYTE PTR [eax+0x74],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:301
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
   1ea6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea71:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1ea75:	66 c1 e8 08          	shr    ax,0x8
   1ea79:	89 c2                	mov    edx,eax
   1ea7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea7e:	88 50 75             	mov    BYTE PTR [eax+0x75],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:304

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
   1ea81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea84:	c6 40 76 06          	mov    BYTE PTR [eax+0x76],0x6
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:305
        fs->currentsector.sector[51] = 0;
   1ea88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea8b:	c6 40 77 00          	mov    BYTE PTR [eax+0x77],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:308

        // Drive number
        fs->currentsector.sector[64] = 0x00;
   1ea8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea92:	c6 80 84 00 00 00 00 	mov    BYTE PTR [eax+0x84],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:311

        // Boot signature
        fs->currentsector.sector[66] = 0x29;
   1ea99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea9c:	c6 80 86 00 00 00 29 	mov    BYTE PTR [eax+0x86],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:314

        // Volume ID
        fs->currentsector.sector[67] = 0x12;
   1eaa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaa6:	c6 80 87 00 00 00 12 	mov    BYTE PTR [eax+0x87],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:315
        fs->currentsector.sector[68] = 0x34;
   1eaad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eab0:	c6 80 88 00 00 00 34 	mov    BYTE PTR [eax+0x88],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:316
        fs->currentsector.sector[69] = 0x56;
   1eab7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaba:	c6 80 89 00 00 00 56 	mov    BYTE PTR [eax+0x89],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:317
        fs->currentsector.sector[70] = 0x78;
   1eac1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eac4:	c6 80 8a 00 00 00 78 	mov    BYTE PTR [eax+0x8a],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320

        // Volume name
        for (i=0;i<11;i++)
   1eacb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1ead2:	eb 41                	jmp    1eb15 <fatfs_create_boot_sector+0x4ee>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:322
        {
            if (i < (int)strlen(name))
   1ead4:	83 ec 0c             	sub    esp,0xc
   1ead7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1eada:	e8 e5 88 00 00       	call   273c4 <strlen>
   1eadf:	83 c4 10             	add    esp,0x10
   1eae2:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1eae5:	7e 1c                	jle    1eb03 <fatfs_create_boot_sector+0x4dc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:323
                fs->currentsector.sector[i+71] = name[i];
   1eae7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1eaea:	8d 50 47             	lea    edx,[eax+0x47]
   1eaed:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1eaf0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1eaf3:	01 c8                	add    eax,ecx
   1eaf5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1eaf8:	89 c1                	mov    ecx,eax
   1eafa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eafd:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1eb01:	eb 0e                	jmp    1eb11 <fatfs_create_boot_sector+0x4ea>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:325
            else
                fs->currentsector.sector[i+71] = ' ';
   1eb03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1eb06:	8d 50 47             	lea    edx,[eax+0x47]
   1eb09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb0c:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 2)
        fs->currentsector.sector[68] = 0x34;
        fs->currentsector.sector[69] = 0x56;
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1eb11:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 1)
   1eb15:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1eb19:	7e b9                	jle    1ead4 <fatfs_create_boot_sector+0x4ad>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:329
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
   1eb1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb1e:	c6 80 96 00 00 00 46 	mov    BYTE PTR [eax+0x96],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:330
        fs->currentsector.sector[83] = 'A';
   1eb25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb28:	c6 80 97 00 00 00 41 	mov    BYTE PTR [eax+0x97],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:331
        fs->currentsector.sector[84] = 'T';
   1eb2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb32:	c6 80 98 00 00 00 54 	mov    BYTE PTR [eax+0x98],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:332
        fs->currentsector.sector[85] = '3';
   1eb39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb3c:	c6 80 99 00 00 00 33 	mov    BYTE PTR [eax+0x99],0x33
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:333
        fs->currentsector.sector[86] = '2';
   1eb43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb46:	c6 80 9a 00 00 00 32 	mov    BYTE PTR [eax+0x9a],0x32
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:334
        fs->currentsector.sector[87] = ' ';
   1eb4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb50:	c6 80 9b 00 00 00 20 	mov    BYTE PTR [eax+0x9b],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:335
        fs->currentsector.sector[88] = ' ';
   1eb57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb5a:	c6 80 9c 00 00 00 20 	mov    BYTE PTR [eax+0x9c],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:336
        fs->currentsector.sector[89] = ' ';
   1eb61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb64:	c6 80 9d 00 00 00 20 	mov    BYTE PTR [eax+0x9d],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:339

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1eb6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb6e:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:340
        fs->currentsector.sector[511] = 0xAA;
   1eb75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb78:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:343
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   1eb7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb82:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1eb85:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1eb88:	83 c2 44             	add    edx,0x44
   1eb8b:	83 ec 04             	sub    esp,0x4
   1eb8e:	6a 01                	push   0x1
   1eb90:	52                   	push   edx
   1eb91:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1eb94:	ff d0                	call   eax
   1eb96:	83 c4 10             	add    esp,0x10
   1eb99:	85 c0                	test   eax,eax
   1eb9b:	74 07                	je     1eba4 <fatfs_create_boot_sector+0x57d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:344
        return 1;
   1eb9d:	b8 01 00 00 00       	mov    eax,0x1
   1eba2:	eb 05                	jmp    1eba9 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:346
    else
        return 0;
   1eba4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:347
}
   1eba9:	c9                   	leave  
   1ebaa:	c3                   	ret    

0001ebab <fatfs_create_fsinfo_sector>:
fatfs_create_fsinfo_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:352
//-----------------------------------------------------------------------------
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
   1ebab:	55                   	push   ebp
   1ebac:	89 e5                	mov    ebp,esp
   1ebae:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:354
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1ebb1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebb4:	83 c0 44             	add    eax,0x44
   1ebb7:	83 ec 04             	sub    esp,0x4
   1ebba:	68 00 02 00 00       	push   0x200
   1ebbf:	6a 00                	push   0x0
   1ebc1:	50                   	push   eax
   1ebc2:	e8 b6 64 00 00       	call   2507d <memset>
   1ebc7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:357

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
   1ebca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebcd:	c6 40 44 52          	mov    BYTE PTR [eax+0x44],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:358
    fs->currentsector.sector[1] = 0x52;
   1ebd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebd4:	c6 40 45 52          	mov    BYTE PTR [eax+0x45],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:359
    fs->currentsector.sector[2] = 0x61;
   1ebd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebdb:	c6 40 46 61          	mov    BYTE PTR [eax+0x46],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:360
    fs->currentsector.sector[3] = 0x41;
   1ebdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebe2:	c6 40 47 41          	mov    BYTE PTR [eax+0x47],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:363

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
   1ebe6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebe9:	c6 80 28 02 00 00 72 	mov    BYTE PTR [eax+0x228],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:364
    fs->currentsector.sector[485] = 0x72;
   1ebf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebf3:	c6 80 29 02 00 00 72 	mov    BYTE PTR [eax+0x229],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:365
    fs->currentsector.sector[486] = 0x41;
   1ebfa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebfd:	c6 80 2a 02 00 00 41 	mov    BYTE PTR [eax+0x22a],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:366
    fs->currentsector.sector[487] = 0x61;
   1ec04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec07:	c6 80 2b 02 00 00 61 	mov    BYTE PTR [eax+0x22b],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:369

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
   1ec0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec11:	c6 80 2c 02 00 00 ff 	mov    BYTE PTR [eax+0x22c],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:370
    fs->currentsector.sector[489] = 0xFF;
   1ec18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec1b:	c6 80 2d 02 00 00 ff 	mov    BYTE PTR [eax+0x22d],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:371
    fs->currentsector.sector[490] = 0xFF;
   1ec22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec25:	c6 80 2e 02 00 00 ff 	mov    BYTE PTR [eax+0x22e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:372
    fs->currentsector.sector[491] = 0xFF;
   1ec2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec2f:	c6 80 2f 02 00 00 ff 	mov    BYTE PTR [eax+0x22f],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:375

    // FSI_Nxt_Free
    fs->currentsector.sector[492] = 0xFF;
   1ec36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec39:	c6 80 30 02 00 00 ff 	mov    BYTE PTR [eax+0x230],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:376
    fs->currentsector.sector[493] = 0xFF;
   1ec40:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec43:	c6 80 31 02 00 00 ff 	mov    BYTE PTR [eax+0x231],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:377
    fs->currentsector.sector[494] = 0xFF;
   1ec4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec4d:	c6 80 32 02 00 00 ff 	mov    BYTE PTR [eax+0x232],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:378
    fs->currentsector.sector[495] = 0xFF;
   1ec54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec57:	c6 80 33 02 00 00 ff 	mov    BYTE PTR [eax+0x233],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:381

    // Signature
    fs->currentsector.sector[510] = 0x55;
   1ec5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec61:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:382
    fs->currentsector.sector[511] = 0xAA;
   1ec68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec6b:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:384

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   1ec72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec75:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ec78:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ec7b:	83 c2 44             	add    edx,0x44
   1ec7e:	83 ec 04             	sub    esp,0x4
   1ec81:	6a 01                	push   0x1
   1ec83:	52                   	push   edx
   1ec84:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ec87:	ff d0                	call   eax
   1ec89:	83 c4 10             	add    esp,0x10
   1ec8c:	85 c0                	test   eax,eax
   1ec8e:	74 07                	je     1ec97 <fatfs_create_fsinfo_sector+0xec>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:385
        return 1;
   1ec90:	b8 01 00 00 00       	mov    eax,0x1
   1ec95:	eb 05                	jmp    1ec9c <fatfs_create_fsinfo_sector+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:387
    else
        return 0;
   1ec97:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:388
}
   1ec9c:	c9                   	leave  
   1ec9d:	c3                   	ret    

0001ec9e <fatfs_erase_fat>:
fatfs_erase_fat():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:393
//-----------------------------------------------------------------------------
// fatfs_erase_fat: Erase FAT table using fs details in fs struct
//-----------------------------------------------------------------------------
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
   1ec9e:	55                   	push   ebp
   1ec9f:	89 e5                	mov    ebp,esp
   1eca1:	53                   	push   ebx
   1eca2:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:397
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1eca5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eca8:	83 c0 44             	add    eax,0x44
   1ecab:	83 ec 04             	sub    esp,0x4
   1ecae:	68 00 02 00 00       	push   0x200
   1ecb3:	6a 00                	push   0x0
   1ecb5:	50                   	push   eax
   1ecb6:	e8 c2 63 00 00       	call   2507d <memset>
   1ecbb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:400

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
   1ecbe:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ecc2:	75 1e                	jne    1ece2 <fatfs_erase_fat+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:402
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
   1ecc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecc7:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1eccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecce:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:403
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
   1ecd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecd5:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1ecd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecdc:	c6 40 47 ff          	mov    BYTE PTR [eax+0x47],0xff
   1ece0:	eb 54                	jmp    1ed36 <fatfs_erase_fat+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:407
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
   1ece2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ece5:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1ece9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecec:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
   1ecf0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecf3:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1ecf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecfa:	c6 40 47 0f          	mov    BYTE PTR [eax+0x47],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:408
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
   1ecfe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed01:	c6 40 48 ff          	mov    BYTE PTR [eax+0x48],0xff
   1ed05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed08:	c6 40 49 ff          	mov    BYTE PTR [eax+0x49],0xff
   1ed0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed0f:	c6 40 4a ff          	mov    BYTE PTR [eax+0x4a],0xff
   1ed13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed16:	c6 40 4b ff          	mov    BYTE PTR [eax+0x4b],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:409
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
   1ed1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed1d:	c6 40 4c ff          	mov    BYTE PTR [eax+0x4c],0xff
   1ed21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed24:	c6 40 4d ff          	mov    BYTE PTR [eax+0x4d],0xff
   1ed28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed2b:	c6 40 4e ff          	mov    BYTE PTR [eax+0x4e],0xff
   1ed2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed32:	c6 40 4f 0f          	mov    BYTE PTR [eax+0x4f],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:412
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   1ed36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed39:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ed3c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ed3f:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ed42:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ed45:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
   1ed48:	83 ec 04             	sub    esp,0x4
   1ed4b:	6a 01                	push   0x1
   1ed4d:	51                   	push   ecx
   1ed4e:	52                   	push   edx
   1ed4f:	ff d0                	call   eax
   1ed51:	83 c4 10             	add    esp,0x10
   1ed54:	85 c0                	test   eax,eax
   1ed56:	75 07                	jne    1ed5f <fatfs_erase_fat+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:413
        return 0;
   1ed58:	b8 00 00 00 00       	mov    eax,0x0
   1ed5d:	eb 71                	jmp    1edd0 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:416

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1ed5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed62:	83 c0 44             	add    eax,0x44
   1ed65:	83 ec 04             	sub    esp,0x4
   1ed68:	68 00 02 00 00       	push   0x200
   1ed6d:	6a 00                	push   0x0
   1ed6f:	50                   	push   eax
   1ed70:	e8 08 63 00 00       	call   2507d <memset>
   1ed75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1ed78:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   1ed7f:	eb 32                	jmp    1edb3 <fatfs_erase_fat+0x115>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:418
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   1ed81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed84:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ed87:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ed8a:	8d 4a 44             	lea    ecx,[edx+0x44]
   1ed8d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ed90:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
   1ed93:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1ed96:	01 da                	add    edx,ebx
   1ed98:	83 ec 04             	sub    esp,0x4
   1ed9b:	6a 01                	push   0x1
   1ed9d:	51                   	push   ecx
   1ed9e:	52                   	push   edx
   1ed9f:	ff d0                	call   eax
   1eda1:	83 c4 10             	add    esp,0x10
   1eda4:	85 c0                	test   eax,eax
   1eda6:	75 07                	jne    1edaf <fatfs_erase_fat+0x111>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:419
            return 0;
   1eda8:	b8 00 00 00 00       	mov    eax,0x0
   1edad:	eb 21                	jmp    1edd0 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 2)
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1edaf:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 1)
   1edb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edb6:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   1edb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edbc:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1edc0:	0f b6 c0             	movzx  eax,al
   1edc3:	0f af c2             	imul   eax,edx
   1edc6:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1edc9:	77 b6                	ja     1ed81 <fatfs_erase_fat+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:421
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1edcb:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:422
}
   1edd0:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1edd3:	c9                   	leave  
   1edd4:	c3                   	ret    

0001edd5 <fatfs_format_fat16>:
fatfs_format_fat16():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:427
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1edd5:	55                   	push   ebp
   1edd6:	89 e5                	mov    ebp,esp
   1edd8:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:428
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1eddb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edde:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1ede5:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:429
    fs->currentsector.dirty = 0;
   1ede8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edeb:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1edf2:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:431

    fs->next_free_cluster = 0; // Invalid
   1edf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edf8:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:433

    fatfs_fat_init(fs);
   1edff:	83 ec 0c             	sub    esp,0xc
   1ee02:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ee05:	e8 3e 15 00 00       	call   20348 <fatfs_fat_init>
   1ee0a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1ee0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee10:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ee13:	85 c0                	test   eax,eax
   1ee15:	74 0a                	je     1ee21 <fatfs_format_fat16+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436 (discriminator 1)
   1ee17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee1a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ee1d:	85 c0                	test   eax,eax
   1ee1f:	75 0a                	jne    1ee2b <fatfs_format_fat16+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:437
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1ee21:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ee26:	e9 29 01 00 00       	jmp    1ef54 <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:440

    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;
   1ee2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee2e:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:443

    // Not valid for FAT16
    fs->fs_info_sector = 0;
   1ee35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee38:	66 c7 40 18 00 00    	mov    WORD PTR [eax+0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:444
    fs->rootdir_first_cluster = 0;
   1ee3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee41:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:448

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1ee48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee4b:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:449
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
   1ee52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee55:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1ee58:	83 ec 0c             	sub    esp,0xc
   1ee5b:	6a 00                	push   0x0
   1ee5d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1ee60:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ee63:	50                   	push   eax
   1ee64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ee67:	e8 bb f7 ff ff       	call   1e627 <fatfs_create_boot_sector>
   1ee6c:	83 c4 20             	add    esp,0x20
   1ee6f:	85 c0                	test   eax,eax
   1ee71:	75 0a                	jne    1ee7d <fatfs_format_fat16+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:450
        return 0;
   1ee73:	b8 00 00 00 00       	mov    eax,0x0
   1ee78:	e9 d7 00 00 00       	jmp    1ef54 <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:453

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   1ee7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee80:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1ee84:	0f b7 d0             	movzx  edx,ax
   1ee87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee8a:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1ee8e:	0f b6 c8             	movzx  ecx,al
   1ee91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee94:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ee97:	0f af c1             	imul   eax,ecx
   1ee9a:	01 c2                	add    edx,eax
   1ee9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee9f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:454
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1eea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eea5:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1eea9:	0f b7 c0             	movzx  eax,ax
   1eeac:	c1 e0 05             	shl    eax,0x5
   1eeaf:	05 ff 01 00 00       	add    eax,0x1ff
   1eeb4:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1eeba:	85 c0                	test   eax,eax
   1eebc:	0f 48 c2             	cmovs  eax,edx
   1eebf:	c1 f8 09             	sar    eax,0x9
   1eec2:	89 c2                	mov    edx,eax
   1eec4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eec7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:457

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1eeca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eecd:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1eed0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eed3:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1eed7:	0f b7 c0             	movzx  eax,ax
   1eeda:	01 c2                	add    edx,eax
   1eedc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eedf:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:460

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1eee2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eee5:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1eee8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeeb:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1eeef:	0f b6 c8             	movzx  ecx,al
   1eef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eef5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1eef8:	0f af c1             	imul   eax,ecx
   1eefb:	01 c2                	add    edx,eax
   1eefd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef00:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:463

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
   1ef03:	83 ec 08             	sub    esp,0x8
   1ef06:	6a 00                	push   0x0
   1ef08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ef0b:	e8 8e fd ff ff       	call   1ec9e <fatfs_erase_fat>
   1ef10:	83 c4 10             	add    esp,0x10
   1ef13:	85 c0                	test   eax,eax
   1ef15:	75 07                	jne    1ef1e <fatfs_format_fat16+0x149>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:464
        return 0;
   1ef17:	b8 00 00 00 00       	mov    eax,0x0
   1ef1c:	eb 36                	jmp    1ef54 <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:467

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   1ef1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef21:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1ef24:	89 c1                	mov    ecx,eax
   1ef26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef29:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1ef2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef2f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1ef32:	01 d0                	add    eax,edx
   1ef34:	83 ec 04             	sub    esp,0x4
   1ef37:	51                   	push   ecx
   1ef38:	50                   	push   eax
   1ef39:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ef3c:	e8 7c f6 ff ff       	call   1e5bd <fatfs_erase_sectors>
   1ef41:	83 c4 10             	add    esp,0x10
   1ef44:	85 c0                	test   eax,eax
   1ef46:	75 07                	jne    1ef4f <fatfs_format_fat16+0x17a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:468
        return 0;
   1ef48:	b8 00 00 00 00       	mov    eax,0x0
   1ef4d:	eb 05                	jmp    1ef54 <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:470

    return 1;
   1ef4f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:471
}
   1ef54:	c9                   	leave  
   1ef55:	c3                   	ret    

0001ef56 <fatfs_format_fat32>:
fatfs_format_fat32():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:476
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1ef56:	55                   	push   ebp
   1ef57:	89 e5                	mov    ebp,esp
   1ef59:	53                   	push   ebx
   1ef5a:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:477
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1ef5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef60:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1ef67:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:478
    fs->currentsector.dirty = 0;
   1ef6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef6d:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1ef74:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:480

    fs->next_free_cluster = 0; // Invalid
   1ef77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef7a:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:482

    fatfs_fat_init(fs);
   1ef81:	83 ec 0c             	sub    esp,0xc
   1ef84:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ef87:	e8 bc 13 00 00       	call   20348 <fatfs_fat_init>
   1ef8c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1ef8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef92:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1ef95:	85 c0                	test   eax,eax
   1ef97:	74 0a                	je     1efa3 <fatfs_format_fat32+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485 (discriminator 1)
   1ef99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef9c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ef9f:	85 c0                	test   eax,eax
   1efa1:	75 0a                	jne    1efad <fatfs_format_fat32+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:486
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1efa3:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1efa8:	e9 08 01 00 00       	jmp    1f0b5 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:489

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
   1efad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efb0:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:492

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
   1efb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efba:	66 c7 40 18 01 00    	mov    WORD PTR [eax+0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:493
    fs->rootdir_first_cluster = 2;
   1efc0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efc3:	c7 40 08 02 00 00 00 	mov    DWORD PTR [eax+0x8],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:497

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1efca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efcd:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:498
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
   1efd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efd7:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1efda:	83 ec 0c             	sub    esp,0xc
   1efdd:	6a 01                	push   0x1
   1efdf:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1efe2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1efe5:	50                   	push   eax
   1efe6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1efe9:	e8 39 f6 ff ff       	call   1e627 <fatfs_create_boot_sector>
   1efee:	83 c4 20             	add    esp,0x20
   1eff1:	85 c0                	test   eax,eax
   1eff3:	75 0a                	jne    1efff <fatfs_format_fat32+0xa9>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:499
        return 0;
   1eff5:	b8 00 00 00 00       	mov    eax,0x0
   1effa:	e9 b6 00 00 00       	jmp    1f0b5 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:502

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1efff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f002:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f008:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f00c:	0f b7 c0             	movzx  eax,ax
   1f00f:	01 c2                	add    edx,eax
   1f011:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f014:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:505

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1f017:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f01a:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1f01d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f020:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f024:	0f b6 c8             	movzx  ecx,al
   1f027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f02a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f02d:	0f af c1             	imul   eax,ecx
   1f030:	01 c2                	add    edx,eax
   1f032:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f035:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:508

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
   1f038:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f03b:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1f03f:	0f b7 c0             	movzx  eax,ax
   1f042:	83 ec 08             	sub    esp,0x8
   1f045:	50                   	push   eax
   1f046:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f049:	e8 5d fb ff ff       	call   1ebab <fatfs_create_fsinfo_sector>
   1f04e:	83 c4 10             	add    esp,0x10
   1f051:	85 c0                	test   eax,eax
   1f053:	75 07                	jne    1f05c <fatfs_format_fat32+0x106>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:509
        return 0;
   1f055:	b8 00 00 00 00       	mov    eax,0x0
   1f05a:	eb 59                	jmp    1f0b5 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:512

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 1))
   1f05c:	83 ec 08             	sub    esp,0x8
   1f05f:	6a 01                	push   0x1
   1f061:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f064:	e8 35 fc ff ff       	call   1ec9e <fatfs_erase_fat>
   1f069:	83 c4 10             	add    esp,0x10
   1f06c:	85 c0                	test   eax,eax
   1f06e:	75 07                	jne    1f077 <fatfs_format_fat32+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:513
        return 0;
   1f070:	b8 00 00 00 00       	mov    eax,0x0
   1f075:	eb 3e                	jmp    1f0b5 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:516

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
   1f077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f07a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f07d:	0f b6 d8             	movzx  ebx,al
   1f080:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f083:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1f086:	83 ec 08             	sub    esp,0x8
   1f089:	50                   	push   eax
   1f08a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f08d:	e8 d2 c1 ff ff       	call   1b264 <fatfs_lba_of_cluster>
   1f092:	83 c4 10             	add    esp,0x10
   1f095:	83 ec 04             	sub    esp,0x4
   1f098:	53                   	push   ebx
   1f099:	50                   	push   eax
   1f09a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f09d:	e8 1b f5 ff ff       	call   1e5bd <fatfs_erase_sectors>
   1f0a2:	83 c4 10             	add    esp,0x10
   1f0a5:	85 c0                	test   eax,eax
   1f0a7:	75 07                	jne    1f0b0 <fatfs_format_fat32+0x15a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:517
        return 0;
   1f0a9:	b8 00 00 00 00       	mov    eax,0x0
   1f0ae:	eb 05                	jmp    1f0b5 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:519

    return 1;
   1f0b0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:520
}
   1f0b5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1f0b8:	c9                   	leave  
   1f0b9:	c3                   	ret    

0001f0ba <fatfs_format>:
fatfs_format():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:525
//-----------------------------------------------------------------------------
// fatfs_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f0ba:	55                   	push   ebp
   1f0bb:	89 e5                	mov    ebp,esp
   1f0bd:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:527
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
   1f0c0:	81 7d 0c 00 00 40 00 	cmp    DWORD PTR [ebp+0xc],0x400000
   1f0c7:	77 16                	ja     1f0df <fatfs_format+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:528
        return fatfs_format_fat16(fs, volume_sectors, name);
   1f0c9:	83 ec 04             	sub    esp,0x4
   1f0cc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f0cf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f0d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f0d5:	e8 fb fc ff ff       	call   1edd5 <fatfs_format_fat16>
   1f0da:	83 c4 10             	add    esp,0x10
   1f0dd:	eb 14                	jmp    1f0f3 <fatfs_format+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:530
    else
        return fatfs_format_fat32(fs, volume_sectors, name);
   1f0df:	83 ec 04             	sub    esp,0x4
   1f0e2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f0e5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f0e8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f0eb:	e8 66 fe ff ff       	call   1ef56 <fatfs_format_fat32>
   1f0f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:531
}
   1f0f3:	c9                   	leave  
   1f0f4:	c3                   	ret    
   1f0f5:	66 90                	xchg   ax,ax
   1f0f7:	90                   	nop

0001f0f8 <fatfs_lfn_cache_init>:
fatfs_lfn_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:40

//-----------------------------------------------------------------------------
// fatfs_lfn_cache_init: Clear long file name cache
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
   1f0f8:	55                   	push   ebp
   1f0f9:	89 e5                	mov    ebp,esp
   1f0fb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:41
    int i = 0;
   1f0fe:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:43

    lfn->no_of_strings = 0;
   1f105:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f108:	c6 80 05 01 00 00 00 	mov    BYTE PTR [eax+0x105],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:48

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
   1f10f:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1f113:	74 36                	je     1f14b <fatfs_lfn_cache_init+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f115:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f11c:	eb 27                	jmp    1f145 <fatfs_lfn_cache_init+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:50 (discriminator 3)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
   1f11e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f121:	89 d0                	mov    eax,edx
   1f123:	01 c0                	add    eax,eax
   1f125:	01 d0                	add    eax,edx
   1f127:	c1 e0 02             	shl    eax,0x2
   1f12a:	01 d0                	add    eax,edx
   1f12c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f12f:	01 d0                	add    eax,edx
   1f131:	83 ec 04             	sub    esp,0x4
   1f134:	6a 0d                	push   0xd
   1f136:	6a 00                	push   0x0
   1f138:	50                   	push   eax
   1f139:	e8 3f 5f 00 00       	call   2507d <memset>
   1f13e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 3)

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f141:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 1)
   1f145:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   1f149:	7e d3                	jle    1f11e <fatfs_lfn_cache_init+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:52
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
#endif
}
   1f14b:	90                   	nop
   1f14c:	c9                   	leave  
   1f14d:	c3                   	ret    

0001f14e <fatfs_lfn_cache_entry>:
fatfs_lfn_cache_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:59
// fatfs_lfn_cache_entry - Function extracts long file name text from sector
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
   1f14e:	55                   	push   ebp
   1f14f:	89 e5                	mov    ebp,esp
   1f151:	53                   	push   ebx
   1f152:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:61
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
   1f155:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f158:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f15b:	83 e0 1f             	and    eax,0x1f
   1f15e:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:64

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
   1f161:	80 7d fa 14          	cmp    BYTE PTR [ebp-0x6],0x14
   1f165:	0f 87 45 02 00 00    	ja     1f3b0 <fatfs_lfn_cache_entry+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:68
        return ;

    // This is an error condition
    if (LFNIndex == 0)
   1f16b:	80 7d fa 00          	cmp    BYTE PTR [ebp-0x6],0x0
   1f16f:	0f 84 3e 02 00 00    	je     1f3b3 <fatfs_lfn_cache_entry+0x265>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:71
        return ;

    if (lfn->no_of_strings == 0)
   1f175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f178:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f17f:	84 c0                	test   al,al
   1f181:	75 0d                	jne    1f190 <fatfs_lfn_cache_entry+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:72
        lfn->no_of_strings = LFNIndex;
   1f183:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f186:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   1f18a:	88 90 05 01 00 00    	mov    BYTE PTR [eax+0x105],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:74

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
   1f190:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f194:	8d 50 ff             	lea    edx,[eax-0x1]
   1f197:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f19a:	0f b6 48 01          	movzx  ecx,BYTE PTR [eax+0x1]
   1f19e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f1a1:	89 d0                	mov    eax,edx
   1f1a3:	01 c0                	add    eax,eax
   1f1a5:	01 d0                	add    eax,edx
   1f1a7:	c1 e0 02             	shl    eax,0x2
   1f1aa:	01 d0                	add    eax,edx
   1f1ac:	01 d8                	add    eax,ebx
   1f1ae:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:75
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
   1f1b0:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f1b4:	8d 50 ff             	lea    edx,[eax-0x1]
   1f1b7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f1ba:	0f b6 48 03          	movzx  ecx,BYTE PTR [eax+0x3]
   1f1be:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f1c1:	89 d0                	mov    eax,edx
   1f1c3:	01 c0                	add    eax,eax
   1f1c5:	01 d0                	add    eax,edx
   1f1c7:	c1 e0 02             	shl    eax,0x2
   1f1ca:	01 d0                	add    eax,edx
   1f1cc:	01 d8                	add    eax,ebx
   1f1ce:	83 c0 01             	add    eax,0x1
   1f1d1:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:76
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
   1f1d3:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f1d7:	8d 50 ff             	lea    edx,[eax-0x1]
   1f1da:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f1dd:	0f b6 48 05          	movzx  ecx,BYTE PTR [eax+0x5]
   1f1e1:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f1e4:	89 d0                	mov    eax,edx
   1f1e6:	01 c0                	add    eax,eax
   1f1e8:	01 d0                	add    eax,edx
   1f1ea:	c1 e0 02             	shl    eax,0x2
   1f1ed:	01 d0                	add    eax,edx
   1f1ef:	01 d8                	add    eax,ebx
   1f1f1:	83 c0 02             	add    eax,0x2
   1f1f4:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:77
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
   1f1f6:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f1fa:	8d 50 ff             	lea    edx,[eax-0x1]
   1f1fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f200:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
   1f204:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f207:	89 d0                	mov    eax,edx
   1f209:	01 c0                	add    eax,eax
   1f20b:	01 d0                	add    eax,edx
   1f20d:	c1 e0 02             	shl    eax,0x2
   1f210:	01 d0                	add    eax,edx
   1f212:	01 d8                	add    eax,ebx
   1f214:	83 c0 03             	add    eax,0x3
   1f217:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:78
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
   1f219:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f21d:	8d 50 ff             	lea    edx,[eax-0x1]
   1f220:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f223:	0f b6 48 09          	movzx  ecx,BYTE PTR [eax+0x9]
   1f227:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f22a:	89 d0                	mov    eax,edx
   1f22c:	01 c0                	add    eax,eax
   1f22e:	01 d0                	add    eax,edx
   1f230:	c1 e0 02             	shl    eax,0x2
   1f233:	01 d0                	add    eax,edx
   1f235:	01 d8                	add    eax,ebx
   1f237:	83 c0 04             	add    eax,0x4
   1f23a:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:79
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
   1f23c:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f240:	8d 50 ff             	lea    edx,[eax-0x1]
   1f243:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f246:	0f b6 48 0e          	movzx  ecx,BYTE PTR [eax+0xe]
   1f24a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f24d:	89 d0                	mov    eax,edx
   1f24f:	01 c0                	add    eax,eax
   1f251:	01 d0                	add    eax,edx
   1f253:	c1 e0 02             	shl    eax,0x2
   1f256:	01 d0                	add    eax,edx
   1f258:	01 d8                	add    eax,ebx
   1f25a:	83 c0 05             	add    eax,0x5
   1f25d:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:80
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
   1f25f:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f263:	8d 50 ff             	lea    edx,[eax-0x1]
   1f266:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f269:	0f b6 48 10          	movzx  ecx,BYTE PTR [eax+0x10]
   1f26d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f270:	89 d0                	mov    eax,edx
   1f272:	01 c0                	add    eax,eax
   1f274:	01 d0                	add    eax,edx
   1f276:	c1 e0 02             	shl    eax,0x2
   1f279:	01 d0                	add    eax,edx
   1f27b:	01 d8                	add    eax,ebx
   1f27d:	83 c0 06             	add    eax,0x6
   1f280:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:81
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
   1f282:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f286:	8d 50 ff             	lea    edx,[eax-0x1]
   1f289:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f28c:	0f b6 48 12          	movzx  ecx,BYTE PTR [eax+0x12]
   1f290:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f293:	89 d0                	mov    eax,edx
   1f295:	01 c0                	add    eax,eax
   1f297:	01 d0                	add    eax,edx
   1f299:	c1 e0 02             	shl    eax,0x2
   1f29c:	01 d0                	add    eax,edx
   1f29e:	01 d8                	add    eax,ebx
   1f2a0:	83 c0 07             	add    eax,0x7
   1f2a3:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:82
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
   1f2a5:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f2a9:	8d 50 ff             	lea    edx,[eax-0x1]
   1f2ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f2af:	0f b6 48 14          	movzx  ecx,BYTE PTR [eax+0x14]
   1f2b3:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f2b6:	89 d0                	mov    eax,edx
   1f2b8:	01 c0                	add    eax,eax
   1f2ba:	01 d0                	add    eax,edx
   1f2bc:	c1 e0 02             	shl    eax,0x2
   1f2bf:	01 d0                	add    eax,edx
   1f2c1:	01 d8                	add    eax,ebx
   1f2c3:	83 c0 08             	add    eax,0x8
   1f2c6:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:83
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
   1f2c8:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f2cc:	8d 50 ff             	lea    edx,[eax-0x1]
   1f2cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f2d2:	0f b6 48 16          	movzx  ecx,BYTE PTR [eax+0x16]
   1f2d6:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f2d9:	89 d0                	mov    eax,edx
   1f2db:	01 c0                	add    eax,eax
   1f2dd:	01 d0                	add    eax,edx
   1f2df:	c1 e0 02             	shl    eax,0x2
   1f2e2:	01 d0                	add    eax,edx
   1f2e4:	01 d8                	add    eax,ebx
   1f2e6:	83 c0 09             	add    eax,0x9
   1f2e9:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:84
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
   1f2eb:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f2ef:	8d 50 ff             	lea    edx,[eax-0x1]
   1f2f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f2f5:	0f b6 48 18          	movzx  ecx,BYTE PTR [eax+0x18]
   1f2f9:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f2fc:	89 d0                	mov    eax,edx
   1f2fe:	01 c0                	add    eax,eax
   1f300:	01 d0                	add    eax,edx
   1f302:	c1 e0 02             	shl    eax,0x2
   1f305:	01 d0                	add    eax,edx
   1f307:	01 d8                	add    eax,ebx
   1f309:	83 c0 0a             	add    eax,0xa
   1f30c:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:85
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
   1f30e:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f312:	8d 50 ff             	lea    edx,[eax-0x1]
   1f315:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f318:	0f b6 48 1c          	movzx  ecx,BYTE PTR [eax+0x1c]
   1f31c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f31f:	89 d0                	mov    eax,edx
   1f321:	01 c0                	add    eax,eax
   1f323:	01 d0                	add    eax,edx
   1f325:	c1 e0 02             	shl    eax,0x2
   1f328:	01 d0                	add    eax,edx
   1f32a:	01 d8                	add    eax,ebx
   1f32c:	83 c0 0b             	add    eax,0xb
   1f32f:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:86
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
   1f331:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f335:	8d 50 ff             	lea    edx,[eax-0x1]
   1f338:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f33b:	0f b6 48 1e          	movzx  ecx,BYTE PTR [eax+0x1e]
   1f33f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f342:	89 d0                	mov    eax,edx
   1f344:	01 c0                	add    eax,eax
   1f346:	01 d0                	add    eax,edx
   1f348:	c1 e0 02             	shl    eax,0x2
   1f34b:	01 d0                	add    eax,edx
   1f34d:	01 d8                	add    eax,ebx
   1f34f:	83 c0 0c             	add    eax,0xc
   1f352:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f354:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
   1f358:	eb 4e                	jmp    1f3a8 <fatfs_lfn_cache_entry+0x25a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:89
        if (lfn->String[LFNIndex-1][i]==0xFF)
   1f35a:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f35e:	8d 50 ff             	lea    edx,[eax-0x1]
   1f361:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f365:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f368:	89 d0                	mov    eax,edx
   1f36a:	01 c0                	add    eax,eax
   1f36c:	01 d0                	add    eax,edx
   1f36e:	c1 e0 02             	shl    eax,0x2
   1f371:	01 d0                	add    eax,edx
   1f373:	01 d8                	add    eax,ebx
   1f375:	01 c8                	add    eax,ecx
   1f377:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f37a:	3c ff                	cmp    al,0xff
   1f37c:	75 20                	jne    1f39e <fatfs_lfn_cache_entry+0x250>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:90
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   1f37e:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f382:	8d 50 ff             	lea    edx,[eax-0x1]
   1f385:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f389:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f38c:	89 d0                	mov    eax,edx
   1f38e:	01 c0                	add    eax,eax
   1f390:	01 d0                	add    eax,edx
   1f392:	c1 e0 02             	shl    eax,0x2
   1f395:	01 d0                	add    eax,edx
   1f397:	01 d8                	add    eax,ebx
   1f399:	01 c8                	add    eax,ecx
   1f39b:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 2)
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f39e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   1f3a2:	83 c0 01             	add    eax,0x1
   1f3a5:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 1)
   1f3a8:	80 7d fb 0c          	cmp    BYTE PTR [ebp-0x5],0xc
   1f3ac:	76 ac                	jbe    1f35a <fatfs_lfn_cache_entry+0x20c>
   1f3ae:	eb 04                	jmp    1f3b4 <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:65
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
        return ;
   1f3b0:	90                   	nop
   1f3b1:	eb 01                	jmp    1f3b4 <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:69

    // This is an error condition
    if (LFNIndex == 0)
        return ;
   1f3b3:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:91
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
}
   1f3b4:	83 c4 10             	add    esp,0x10
   1f3b7:	5b                   	pop    ebx
   1f3b8:	5d                   	pop    ebp
   1f3b9:	c3                   	ret    

0001f3ba <fatfs_lfn_cache_get>:
fatfs_lfn_cache_get():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:98
//-----------------------------------------------------------------------------
// fatfs_lfn_cache_get: Get a reference to the long filename
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
   1f3ba:	55                   	push   ebp
   1f3bb:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:100
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
   1f3bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3c0:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f3c7:	3c 14                	cmp    al,0x14
   1f3c9:	75 0c                	jne    1f3d7 <fatfs_lfn_cache_get+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:101
        lfn->Null = '\0';
   1f3cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3ce:	c6 80 04 01 00 00 00 	mov    BYTE PTR [eax+0x104],0x0
   1f3d5:	eb 36                	jmp    1f40d <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:102
    else if (lfn->no_of_strings)
   1f3d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3da:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f3e1:	84 c0                	test   al,al
   1f3e3:	74 22                	je     1f407 <fatfs_lfn_cache_get+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:103
        lfn->String[lfn->no_of_strings][0] = '\0';
   1f3e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3e8:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f3ef:	0f b6 d0             	movzx  edx,al
   1f3f2:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1f3f5:	89 d0                	mov    eax,edx
   1f3f7:	01 c0                	add    eax,eax
   1f3f9:	01 d0                	add    eax,edx
   1f3fb:	c1 e0 02             	shl    eax,0x2
   1f3fe:	01 d0                	add    eax,edx
   1f400:	01 c8                	add    eax,ecx
   1f402:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f405:	eb 06                	jmp    1f40d <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:105
    else
        lfn->String[0][0] = '\0';
   1f407:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f40a:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:107

    return (char*)&lfn->String[0][0];
   1f40d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:108
}
   1f410:	5d                   	pop    ebp
   1f411:	c3                   	ret    

0001f412 <fatfs_entry_lfn_text>:
fatfs_entry_lfn_text():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:115
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
   1f412:	55                   	push   ebp
   1f413:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:116
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT)
   1f415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f418:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f41c:	0f b6 c0             	movzx  eax,al
   1f41f:	83 e0 0f             	and    eax,0xf
   1f422:	83 f8 0f             	cmp    eax,0xf
   1f425:	75 07                	jne    1f42e <fatfs_entry_lfn_text+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:117
        return 1;
   1f427:	b8 01 00 00 00       	mov    eax,0x1
   1f42c:	eb 05                	jmp    1f433 <fatfs_entry_lfn_text+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:119
    else
        return 0;
   1f42e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:120
}
   1f433:	5d                   	pop    ebp
   1f434:	c3                   	ret    

0001f435 <fatfs_entry_lfn_invalid>:
fatfs_entry_lfn_invalid():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:127
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
   1f435:	55                   	push   ebp
   1f436:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f438:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f43b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f43e:	84 c0                	test   al,al
   1f440:	74 26                	je     1f468 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129 (discriminator 1)
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f442:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f445:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128 (discriminator 1)
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f448:	3c e5                	cmp    al,0xe5
   1f44a:	74 1c                	je     1f468 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f44c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f44f:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f453:	3c 08                	cmp    al,0x8
   1f455:	74 11                	je     1f468 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:131
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
         (entry->Attr & FILE_ATTR_SYSHID) )
   1f457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f45a:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f45e:	0f b6 c0             	movzx  eax,al
   1f461:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f464:	85 c0                	test   eax,eax
   1f466:	74 07                	je     1f46f <fatfs_entry_lfn_invalid+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:132
         (entry->Attr & FILE_ATTR_SYSHID) )
        return 1;
   1f468:	b8 01 00 00 00       	mov    eax,0x1
   1f46d:	eb 05                	jmp    1f474 <fatfs_entry_lfn_invalid+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:134
    else
        return 0;
   1f46f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:135
}
   1f474:	5d                   	pop    ebp
   1f475:	c3                   	ret    

0001f476 <fatfs_entry_lfn_exists>:
fatfs_entry_lfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:142
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
   1f476:	55                   	push   ebp
   1f477:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f479:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f47c:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f480:	3c 0f                	cmp    al,0xf
   1f482:	74 45                	je     1f4c9 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f484:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f487:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143 (discriminator 1)
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f48a:	84 c0                	test   al,al
   1f48c:	74 3b                	je     1f4c9 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f48e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f491:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f494:	3c e5                	cmp    al,0xe5
   1f496:	74 31                	je     1f4c9 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f498:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f49b:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f49f:	3c 08                	cmp    al,0x8
   1f4a1:	74 26                	je     1f4c9 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f4a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f4a6:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f4aa:	0f b6 c0             	movzx  eax,al
   1f4ad:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f4b0:	85 c0                	test   eax,eax
   1f4b2:	75 15                	jne    1f4c9 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:148
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
   1f4b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4b7:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f4be:	84 c0                	test   al,al
   1f4c0:	74 07                	je     1f4c9 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:149
         (lfn->no_of_strings) )
        return 1;
   1f4c2:	b8 01 00 00 00       	mov    eax,0x1
   1f4c7:	eb 05                	jmp    1f4ce <fatfs_entry_lfn_exists+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:151
    else
        return 0;
   1f4c9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:152
}
   1f4ce:	5d                   	pop    ebp
   1f4cf:	c3                   	ret    

0001f4d0 <fatfs_entry_sfn_only>:
fatfs_entry_sfn_only():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:158
#endif
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
   1f4d0:	55                   	push   ebp
   1f4d1:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f4d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4d6:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f4da:	3c 0f                	cmp    al,0xf
   1f4dc:	74 37                	je     1f515 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f4de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4e1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159 (discriminator 1)
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f4e4:	84 c0                	test   al,al
   1f4e6:	74 2d                	je     1f515 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f4e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4eb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f4ee:	3c e5                	cmp    al,0xe5
   1f4f0:	74 23                	je     1f515 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f4f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f4f5:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f4f9:	3c 08                	cmp    al,0x8
   1f4fb:	74 18                	je     1f515 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:163
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
   1f4fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f500:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f504:	0f b6 c0             	movzx  eax,al
   1f507:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f50a:	85 c0                	test   eax,eax
   1f50c:	75 07                	jne    1f515 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:164
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
   1f50e:	b8 01 00 00 00       	mov    eax,0x1
   1f513:	eb 05                	jmp    1f51a <fatfs_entry_sfn_only+0x4a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:166
    else
        return 0;
   1f515:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:167
}
   1f51a:	5d                   	pop    ebp
   1f51b:	c3                   	ret    

0001f51c <fatfs_entry_is_dir>:
fatfs_entry_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:173
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
   1f51c:	55                   	push   ebp
   1f51d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:174
    if (entry->Attr & FILE_TYPE_DIR)
   1f51f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f522:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f526:	0f b6 c0             	movzx  eax,al
   1f529:	83 e0 10             	and    eax,0x10
   1f52c:	85 c0                	test   eax,eax
   1f52e:	74 07                	je     1f537 <fatfs_entry_is_dir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:175
        return 1;
   1f530:	b8 01 00 00 00       	mov    eax,0x1
   1f535:	eb 05                	jmp    1f53c <fatfs_entry_is_dir+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:177
    else
        return 0;
   1f537:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:178
}
   1f53c:	5d                   	pop    ebp
   1f53d:	c3                   	ret    

0001f53e <fatfs_entry_is_file>:
fatfs_entry_is_file():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:183
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
   1f53e:	55                   	push   ebp
   1f53f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:184
    if (entry->Attr & FILE_TYPE_FILE)
   1f541:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f544:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f548:	0f b6 c0             	movzx  eax,al
   1f54b:	83 e0 20             	and    eax,0x20
   1f54e:	85 c0                	test   eax,eax
   1f550:	74 07                	je     1f559 <fatfs_entry_is_file+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:185
        return 1;
   1f552:	b8 01 00 00 00       	mov    eax,0x1
   1f557:	eb 05                	jmp    1f55e <fatfs_entry_is_file+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:187
    else
        return 0;
   1f559:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:188
}
   1f55e:	5d                   	pop    ebp
   1f55f:	c3                   	ret    

0001f560 <fatfs_lfn_entries_required>:
fatfs_lfn_entries_required():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:194
//-----------------------------------------------------------------------------
// fatfs_lfn_entries_required: Calculate number of 13 characters entries
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
   1f560:	55                   	push   ebp
   1f561:	89 e5                	mov    ebp,esp
   1f563:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:195
    int length = (int)strlen(filename);
   1f566:	83 ec 0c             	sub    esp,0xc
   1f569:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f56c:	e8 53 7e 00 00       	call   273c4 <strlen>
   1f571:	83 c4 10             	add    esp,0x10
   1f574:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:197

    if (length)
   1f577:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1f57b:	74 1d                	je     1f59a <fatfs_lfn_entries_required+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:198
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
   1f57d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f580:	8d 48 0c             	lea    ecx,[eax+0xc]
   1f583:	ba 4f ec c4 4e       	mov    edx,0x4ec4ec4f
   1f588:	89 c8                	mov    eax,ecx
   1f58a:	f7 ea                	imul   edx
   1f58c:	c1 fa 02             	sar    edx,0x2
   1f58f:	89 c8                	mov    eax,ecx
   1f591:	c1 f8 1f             	sar    eax,0x1f
   1f594:	29 c2                	sub    edx,eax
   1f596:	89 d0                	mov    eax,edx
   1f598:	eb 05                	jmp    1f59f <fatfs_lfn_entries_required+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:200
    else
        return 0;
   1f59a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:201
}
   1f59f:	c9                   	leave  
   1f5a0:	c3                   	ret    

0001f5a1 <fatfs_filename_to_lfn>:
fatfs_filename_to_lfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:208
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
   1f5a1:	55                   	push   ebp
   1f5a2:	89 e5                	mov    ebp,esp
   1f5a4:	83 ec 68             	sub    esp,0x68
   1f5a7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f5aa:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:210
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   1f5ad:	c7 45 b4 01 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x1
   1f5b4:	c7 45 b8 03 00 00 00 	mov    DWORD PTR [ebp-0x48],0x3
   1f5bb:	c7 45 bc 05 00 00 00 	mov    DWORD PTR [ebp-0x44],0x5
   1f5c2:	c7 45 c0 07 00 00 00 	mov    DWORD PTR [ebp-0x40],0x7
   1f5c9:	c7 45 c4 09 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x9
   1f5d0:	c7 45 c8 0e 00 00 00 	mov    DWORD PTR [ebp-0x38],0xe
   1f5d7:	c7 45 cc 10 00 00 00 	mov    DWORD PTR [ebp-0x34],0x10
   1f5de:	c7 45 d0 12 00 00 00 	mov    DWORD PTR [ebp-0x30],0x12
   1f5e5:	c7 45 d4 14 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x14
   1f5ec:	c7 45 d8 16 00 00 00 	mov    DWORD PTR [ebp-0x28],0x16
   1f5f3:	c7 45 dc 18 00 00 00 	mov    DWORD PTR [ebp-0x24],0x18
   1f5fa:	c7 45 e0 1c 00 00 00 	mov    DWORD PTR [ebp-0x20],0x1c
   1f601:	c7 45 e4 1e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:213

    // 13 characters entries
    int length = (int)strlen(filename);
   1f608:	83 ec 0c             	sub    esp,0xc
   1f60b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f60e:	e8 b1 7d 00 00       	call   273c4 <strlen>
   1f613:	83 c4 10             	add    esp,0x10
   1f616:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:214
    int entriesRequired = fatfs_lfn_entries_required(filename);
   1f619:	83 ec 0c             	sub    esp,0xc
   1f61c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f61f:	e8 3c ff ff ff       	call   1f560 <fatfs_lfn_entries_required>
   1f624:	83 c4 10             	add    esp,0x10
   1f627:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:217

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
   1f62a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1f62d:	89 d0                	mov    eax,edx
   1f62f:	01 c0                	add    eax,eax
   1f631:	01 d0                	add    eax,edx
   1f633:	c1 e0 02             	shl    eax,0x2
   1f636:	01 d0                	add    eax,edx
   1f638:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:220

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
   1f63b:	83 ec 04             	sub    esp,0x4
   1f63e:	6a 20                	push   0x20
   1f640:	6a 00                	push   0x0
   1f642:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f645:	e8 33 5a 00 00       	call   2507d <memset>
   1f64a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
   1f64d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f650:	83 e8 01             	sub    eax,0x1
   1f653:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1f656:	75 0d                	jne    1f665 <fatfs_filename_to_lfn+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 1)
   1f658:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f65b:	83 c0 01             	add    eax,0x1
   1f65e:	83 c8 40             	or     eax,0x40
   1f661:	89 c2                	mov    edx,eax
   1f663:	eb 06                	jmp    1f66b <fatfs_filename_to_lfn+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 2)
   1f665:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f668:	8d 50 01             	lea    edx,[eax+0x1]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 4)
   1f66b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f66e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:226 (discriminator 4)

    // LFN flag
    buffer[11] = 0x0F;
   1f670:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f673:	83 c0 0b             	add    eax,0xb
   1f676:	c6 00 0f             	mov    BYTE PTR [eax],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:229 (discriminator 4)

    // Checksum of short filename
    buffer[13] = sfnChk;
   1f679:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f67c:	8d 50 0d             	lea    edx,[eax+0xd]
   1f67f:	0f b6 45 a4          	movzx  eax,BYTE PTR [ebp-0x5c]
   1f683:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 4)

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1f685:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f68c:	eb 78                	jmp    1f706 <fatfs_filename_to_lfn+0x165>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:234
    {
        if ( (start+i) < length )
   1f68e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1f691:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f694:	01 d0                	add    eax,edx
   1f696:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1f699:	7d 24                	jge    1f6bf <fatfs_filename_to_lfn+0x11e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:235
            buffer[nameIndexes[i]] = filename[start+i];
   1f69b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f69e:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f6a2:	89 c2                	mov    edx,eax
   1f6a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f6a7:	01 d0                	add    eax,edx
   1f6a9:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
   1f6ac:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f6af:	01 ca                	add    edx,ecx
   1f6b1:	89 d1                	mov    ecx,edx
   1f6b3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f6b6:	01 ca                	add    edx,ecx
   1f6b8:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1f6bb:	88 10                	mov    BYTE PTR [eax],dl
   1f6bd:	eb 43                	jmp    1f702 <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:236
        else if ( (start+i) == length )
   1f6bf:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1f6c2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f6c5:	01 d0                	add    eax,edx
   1f6c7:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1f6ca:	75 13                	jne    1f6df <fatfs_filename_to_lfn+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:237
            buffer[nameIndexes[i]] = 0x00;
   1f6cc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f6cf:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f6d3:	89 c2                	mov    edx,eax
   1f6d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f6d8:	01 d0                	add    eax,edx
   1f6da:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f6dd:	eb 23                	jmp    1f702 <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:240
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1f6df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f6e2:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f6e6:	89 c2                	mov    edx,eax
   1f6e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f6eb:	01 d0                	add    eax,edx
   1f6ed:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:241
            buffer[nameIndexes[i]+1] = 0xFF;
   1f6f0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f6f3:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f6f7:	8d 50 01             	lea    edx,[eax+0x1]
   1f6fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f6fd:	01 d0                	add    eax,edx
   1f6ff:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 2)

    // Checksum of short filename
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1f702:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 1)
   1f706:	83 7d f4 0c          	cmp    DWORD PTR [ebp-0xc],0xc
   1f70a:	7e 82                	jle    1f68e <fatfs_filename_to_lfn+0xed>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:244
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
   1f70c:	90                   	nop
   1f70d:	c9                   	leave  
   1f70e:	c3                   	ret    

0001f70f <fatfs_sfn_create_entry>:
fatfs_sfn_create_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:251
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
   1f70f:	55                   	push   ebp
   1f710:	89 e5                	mov    ebp,esp
   1f712:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1f715:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1f71c:	eb 1b                	jmp    1f739 <fatfs_sfn_create_entry+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:256 (discriminator 3)
        entry->Name[i] = shortfilename[i];
   1f71e:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1f721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f724:	01 d0                	add    eax,edx
   1f726:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f729:	89 c1                	mov    ecx,eax
   1f72b:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1f72e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1f731:	01 d0                	add    eax,edx
   1f733:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 3)
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1f735:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 1)
   1f739:	83 7d fc 0a          	cmp    DWORD PTR [ebp-0x4],0xa
   1f73d:	7e df                	jle    1f71e <fatfs_sfn_create_entry+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:259
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
   1f73f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f742:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:260
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
   1f746:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f749:	c6 40 0e 00          	mov    BYTE PTR [eax+0xe],0x0
   1f74d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f750:	0f b6 50 0e          	movzx  edx,BYTE PTR [eax+0xe]
   1f754:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f757:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:261
    entry->CrtDate[1] = 0x00;
   1f75a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f75d:	c6 40 11 00          	mov    BYTE PTR [eax+0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:262
    entry->CrtDate[0] = 0x20;
   1f761:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f764:	c6 40 10 20          	mov    BYTE PTR [eax+0x10],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:263
    entry->LstAccDate[1] = 0x00;
   1f768:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f76b:	c6 40 13 00          	mov    BYTE PTR [eax+0x13],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:264
    entry->LstAccDate[0] = 0x20;
   1f76f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f772:	c6 40 12 20          	mov    BYTE PTR [eax+0x12],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:265
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
   1f776:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f779:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
   1f77d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f780:	0f b6 50 16          	movzx  edx,BYTE PTR [eax+0x16]
   1f784:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f787:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:266
    entry->WrtDate[1] = 0x00;
   1f78a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f78d:	c6 40 19 00          	mov    BYTE PTR [eax+0x19],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:267
    entry->WrtDate[0] = 0x20;
   1f791:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f794:	c6 40 18 20          	mov    BYTE PTR [eax+0x18],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:269

    if (!dir)
   1f798:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1f79c:	75 09                	jne    1f7a7 <fatfs_sfn_create_entry+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:270
        entry->Attr = FILE_TYPE_FILE;
   1f79e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f7a1:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
   1f7a5:	eb 07                	jmp    1f7ae <fatfs_sfn_create_entry+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:272
    else
        entry->Attr = FILE_TYPE_DIR;
   1f7a7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f7aa:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:274

    entry->NTRes = 0x00;
   1f7ae:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f7b1:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:276

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
   1f7b5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f7b8:	c1 e8 10             	shr    eax,0x10
   1f7bb:	89 c2                	mov    edx,eax
   1f7bd:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f7c0:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:277
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
   1f7c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f7c7:	89 c2                	mov    edx,eax
   1f7c9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f7cc:	66 89 50 1a          	mov    WORD PTR [eax+0x1a],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:278
    entry->FileSize = FAT_HTONL(size);
   1f7d0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f7d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1f7d6:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:279
}
   1f7d9:	90                   	nop
   1f7da:	c9                   	leave  
   1f7db:	c3                   	ret    

0001f7dc <fatfs_lfn_create_sfn>:
fatfs_lfn_create_sfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:286
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
   1f7dc:	55                   	push   ebp
   1f7dd:	89 e5                	mov    ebp,esp
   1f7df:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:288
    int i;
    int dotPos = -1;
   1f7e2:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:291
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
   1f7e9:	83 ec 0c             	sub    esp,0xc
   1f7ec:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f7ef:	e8 d0 7b 00 00       	call   273c4 <strlen>
   1f7f4:	83 c4 10             	add    esp,0x10
   1f7f7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:294

    // Invalid to start with .
    if (filename[0]=='.')
   1f7fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f7fd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f800:	3c 2e                	cmp    al,0x2e
   1f802:	75 0a                	jne    1f80e <fatfs_lfn_create_sfn+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:295
        return 0;
   1f804:	b8 00 00 00 00       	mov    eax,0x0
   1f809:	e9 a5 01 00 00       	jmp    1f9b3 <fatfs_lfn_create_sfn+0x1d7>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:297

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
   1f80e:	83 ec 04             	sub    esp,0x4
   1f811:	6a 0b                	push   0xb
   1f813:	6a 20                	push   0x20
   1f815:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f818:	e8 60 58 00 00       	call   2507d <memset>
   1f81d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:298
    memset(ext, ' ', 3);
   1f820:	83 ec 04             	sub    esp,0x4
   1f823:	6a 03                	push   0x3
   1f825:	6a 20                	push   0x20
   1f827:	8d 45 e5             	lea    eax,[ebp-0x1b]
   1f82a:	50                   	push   eax
   1f82b:	e8 4d 58 00 00       	call   2507d <memset>
   1f830:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301

    // Find dot seperator
    for (i = 0; i< len; i++)
   1f833:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f83a:	eb 19                	jmp    1f855 <fatfs_lfn_create_sfn+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:303
    {
        if (filename[i]=='.')
   1f83c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f83f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f842:	01 d0                	add    eax,edx
   1f844:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f847:	3c 2e                	cmp    al,0x2e
   1f849:	75 06                	jne    1f851 <fatfs_lfn_create_sfn+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:304
            dotPos = i;
   1f84b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f84e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 2)

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);

    // Find dot seperator
    for (i = 0; i< len; i++)
   1f851:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 1)
   1f855:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f858:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1f85b:	7c df                	jl     1f83c <fatfs_lfn_create_sfn+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:308
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
   1f85d:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1f861:	74 44                	je     1f8a7 <fatfs_lfn_create_sfn+0xcb>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1f863:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f866:	83 c0 01             	add    eax,0x1
   1f869:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1f86c:	eb 28                	jmp    1f896 <fatfs_lfn_create_sfn+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:312
            if (i<len)
   1f86e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f871:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1f874:	7d 1c                	jge    1f892 <fatfs_lfn_create_sfn+0xb6>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:313
                ext[i-(dotPos+1)] = filename[i];
   1f876:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f879:	8d 50 01             	lea    edx,[eax+0x1]
   1f87c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f87f:	29 d0                	sub    eax,edx
   1f881:	89 c2                	mov    edx,eax
   1f883:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f886:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f889:	01 c8                	add    eax,ecx
   1f88b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f88e:	88 44 15 e5          	mov    BYTE PTR [ebp+edx*1-0x1b],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 2)

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1f892:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 1)
   1f896:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f899:	83 c0 04             	add    eax,0x4
   1f89c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1f89f:	7f cd                	jg     1f86e <fatfs_lfn_create_sfn+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:316
            if (i<len)
                ext[i-(dotPos+1)] = filename[i];

        // Shorten the length to the dot position
        len = dotPos;
   1f8a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1f8a4:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:320
    }

    // Add filename part
    pos = 0;
   1f8a7:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321
    for (i=0;i<len;i++)
   1f8ae:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f8b5:	e9 85 00 00 00       	jmp    1f93f <fatfs_lfn_create_sfn+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
   1f8ba:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f8bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f8c0:	01 d0                	add    eax,edx
   1f8c2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f8c5:	3c 20                	cmp    al,0x20
   1f8c7:	74 6c                	je     1f935 <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323 (discriminator 1)
   1f8c9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f8cc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f8cf:	01 d0                	add    eax,edx
   1f8d1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f8d4:	3c 2e                	cmp    al,0x2e
   1f8d6:	74 5d                	je     1f935 <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
   1f8d8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f8db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f8de:	01 d0                	add    eax,edx
   1f8e0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f8e3:	3c 60                	cmp    al,0x60
   1f8e5:	7e 31                	jle    1f918 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325 (discriminator 1)
   1f8e7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f8ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f8ed:	01 d0                	add    eax,edx
   1f8ef:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f8f2:	3c 7a                	cmp    al,0x7a
   1f8f4:	7f 22                	jg     1f918 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:326
                sfn_output[pos++] = filename[i] - 'a' + 'A';
   1f8f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f8f9:	8d 50 01             	lea    edx,[eax+0x1]
   1f8fc:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1f8ff:	89 c2                	mov    edx,eax
   1f901:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f904:	01 d0                	add    eax,edx
   1f906:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f909:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1f90c:	01 ca                	add    edx,ecx
   1f90e:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1f911:	83 ea 20             	sub    edx,0x20
   1f914:	88 10                	mov    BYTE PTR [eax],dl
   1f916:	eb 1d                	jmp    1f935 <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:328
            else
                sfn_output[pos++] = filename[i];
   1f918:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f91b:	8d 50 01             	lea    edx,[eax+0x1]
   1f91e:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1f921:	89 c2                	mov    edx,eax
   1f923:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f926:	01 c2                	add    edx,eax
   1f928:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1f92b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f92e:	01 c8                	add    eax,ecx
   1f930:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f933:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:332
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
   1f935:	83 7d ec 08          	cmp    DWORD PTR [ebp-0x14],0x8
   1f939:	74 12                	je     1f94d <fatfs_lfn_create_sfn+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 2)
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
   1f93b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 1)
   1f93f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f942:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1f945:	0f 8c 6f ff ff ff    	jl     1f8ba <fatfs_lfn_create_sfn+0xde>
   1f94b:	eb 01                	jmp    1f94e <fatfs_lfn_create_sfn+0x172>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:333
                sfn_output[pos++] = filename[i];
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
   1f94d:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1f94e:	c7 45 f4 08 00 00 00 	mov    DWORD PTR [ebp-0xc],0x8
   1f955:	eb 51                	jmp    1f9a8 <fatfs_lfn_create_sfn+0x1cc>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   1f957:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f95a:	83 e8 08             	sub    eax,0x8
   1f95d:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1f962:	3c 60                	cmp    al,0x60
   1f964:	7e 29                	jle    1f98f <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339 (discriminator 1)
   1f966:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f969:	83 e8 08             	sub    eax,0x8
   1f96c:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1f971:	3c 7a                	cmp    al,0x7a
   1f973:	7f 1a                	jg     1f98f <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:340
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
   1f975:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f978:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f97b:	01 d0                	add    eax,edx
   1f97d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f980:	83 ea 08             	sub    edx,0x8
   1f983:	0f b6 54 15 e5       	movzx  edx,BYTE PTR [ebp+edx*1-0x1b]
   1f988:	83 ea 20             	sub    edx,0x20
   1f98b:	88 10                	mov    BYTE PTR [eax],dl
   1f98d:	eb 15                	jmp    1f9a4 <fatfs_lfn_create_sfn+0x1c8>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:342
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
   1f98f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f992:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f995:	01 c2                	add    edx,eax
   1f997:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f99a:	83 e8 08             	sub    eax,0x8
   1f99d:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1f9a2:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 2)
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1f9a4:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 1)
   1f9a8:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1f9ac:	7e a9                	jle    1f957 <fatfs_lfn_create_sfn+0x17b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:345
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
   1f9ae:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:346 (discriminator 1)
}
   1f9b3:	c9                   	leave  
   1f9b4:	c3                   	ret    

0001f9b5 <fatfs_itoa>:
fatfs_itoa():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:351
//-----------------------------------------------------------------------------
// fatfs_itoa:
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
   1f9b5:	55                   	push   ebp
   1f9b6:	89 e5                	mov    ebp,esp
   1f9b8:	53                   	push   ebx
   1f9b9:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:354
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   1f9bc:	c7 45 db 30 31 32 33 	mov    DWORD PTR [ebp-0x25],0x33323130
   1f9c3:	c7 45 df 34 35 36 37 	mov    DWORD PTR [ebp-0x21],0x37363534
   1f9ca:	c7 45 e3 38 39 41 42 	mov    DWORD PTR [ebp-0x1d],0x42413938
   1f9d1:	c7 45 e7 43 44 45 46 	mov    DWORD PTR [ebp-0x19],0x46454443
   1f9d8:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:357

    // Build string backwards
    cp = outbuf;
   1f9dc:	8d 45 ec             	lea    eax,[ebp-0x14]
   1f9df:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:360 (discriminator 1)
    do
    {
        *cp++ = digits[(int)(num % 10)];
   1f9e2:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   1f9e5:	8d 41 01             	lea    eax,[ecx+0x1]
   1f9e8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1f9eb:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f9ee:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1f9f3:	89 d8                	mov    eax,ebx
   1f9f5:	f7 e2                	mul    edx
   1f9f7:	c1 ea 03             	shr    edx,0x3
   1f9fa:	89 d0                	mov    eax,edx
   1f9fc:	c1 e0 02             	shl    eax,0x2
   1f9ff:	01 d0                	add    eax,edx
   1fa01:	01 c0                	add    eax,eax
   1fa03:	29 c3                	sub    ebx,eax
   1fa05:	89 da                	mov    edx,ebx
   1fa07:	89 d0                	mov    eax,edx
   1fa09:	0f b6 44 05 db       	movzx  eax,BYTE PTR [ebp+eax*1-0x25]
   1fa0e:	88 01                	mov    BYTE PTR [ecx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:362 (discriminator 1)
    }
    while ((num /= 10) > 0);
   1fa10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fa13:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1fa18:	f7 e2                	mul    edx
   1fa1a:	89 d0                	mov    eax,edx
   1fa1c:	c1 e8 03             	shr    eax,0x3
   1fa1f:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   1fa22:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1fa26:	75 ba                	jne    1f9e2 <fatfs_itoa+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:364

    *cp-- = 0;
   1fa28:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1fa2b:	8d 50 ff             	lea    edx,[eax-0x1]
   1fa2e:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   1fa31:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367

    // Copy in forwards
    while (cp >= outbuf)
   1fa34:	eb 17                	jmp    1fa4d <fatfs_itoa+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:368
        *s++ = *cp--;
   1fa36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fa39:	8d 50 01             	lea    edx,[eax+0x1]
   1fa3c:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   1fa3f:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1fa42:	8d 4a ff             	lea    ecx,[edx-0x1]
   1fa45:	89 4d f8             	mov    DWORD PTR [ebp-0x8],ecx
   1fa48:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1fa4b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
   1fa4d:	8d 45 ec             	lea    eax,[ebp-0x14]
   1fa50:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   1fa53:	73 e1                	jae    1fa36 <fatfs_itoa+0x81>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:370
        *s++ = *cp--;

    *s = 0;
   1fa55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fa58:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:371
}
   1fa5b:	90                   	nop
   1fa5c:	83 c4 30             	add    esp,0x30
   1fa5f:	5b                   	pop    ebx
   1fa60:	5d                   	pop    ebp
   1fa61:	c3                   	ret    

0001fa62 <fatfs_lfn_generate_tail>:
fatfs_lfn_generate_tail():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:381
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   1fa62:	55                   	push   ebp
   1fa63:	89 e5                	mov    ebp,esp
   1fa65:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:385
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   1fa68:	81 7d 10 9f 86 01 00 	cmp    DWORD PTR [ebp+0x10],0x1869f
   1fa6f:	76 07                	jbe    1fa78 <fatfs_lfn_generate_tail+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:386
        return 0;
   1fa71:	b8 00 00 00 00       	mov    eax,0x0
   1fa76:	eb 79                	jmp    1faf1 <fatfs_lfn_generate_tail+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:389

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
   1fa78:	83 ec 04             	sub    esp,0x4
   1fa7b:	6a 0c                	push   0xc
   1fa7d:	6a 00                	push   0x0
   1fa7f:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fa82:	50                   	push   eax
   1fa83:	e8 f5 55 00 00       	call   2507d <memset>
   1fa88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:390
    tail_str[0] = '~';
   1fa8b:	c6 45 e8 7e          	mov    BYTE PTR [ebp-0x18],0x7e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:391
    fatfs_itoa(tailNum, tail_str+1);
   1fa8f:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fa92:	83 c0 01             	add    eax,0x1
   1fa95:	83 ec 08             	sub    esp,0x8
   1fa98:	50                   	push   eax
   1fa99:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1fa9c:	e8 14 ff ff ff       	call   1f9b5 <fatfs_itoa>
   1faa1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:394

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
   1faa4:	83 ec 04             	sub    esp,0x4
   1faa7:	6a 0b                	push   0xb
   1faa9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1faac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1faaf:	e8 a4 60 00 00       	call   25b58 <memcpy>
   1fab4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:397

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
   1fab7:	83 ec 0c             	sub    esp,0xc
   1faba:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fabd:	50                   	push   eax
   1fabe:	e8 01 79 00 00       	call   273c4 <strlen>
   1fac3:	83 c4 10             	add    esp,0x10
   1fac6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:398
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
   1fac9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1facc:	ba 08 00 00 00       	mov    edx,0x8
   1fad1:	2b 55 f4             	sub    edx,DWORD PTR [ebp-0xc]
   1fad4:	89 d1                	mov    ecx,edx
   1fad6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1fad9:	01 ca                	add    edx,ecx
   1fadb:	83 ec 04             	sub    esp,0x4
   1fade:	50                   	push   eax
   1fadf:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fae2:	50                   	push   eax
   1fae3:	52                   	push   edx
   1fae4:	e8 6f 60 00 00       	call   25b58 <memcpy>
   1fae9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:400

    return 1;
   1faec:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:401 (discriminator 1)
}
   1faf1:	c9                   	leave  
   1faf2:	c3                   	ret    

0001faf3 <fatfs_convert_from_fat_time>:
fatfs_convert_from_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:409
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_time: Convert FAT time to h/m/s
//-----------------------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds)
{
   1faf3:	55                   	push   ebp
   1faf4:	89 e5                	mov    ebp,esp
   1faf6:	83 ec 04             	sub    esp,0x4
   1faf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fafc:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:410
    *hours = (fat_time >> FAT_TIME_HOURS_SHIFT) & FAT_TIME_HOURS_MASK;
   1fb00:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fb04:	66 c1 e8 0b          	shr    ax,0xb
   1fb08:	0f b7 c0             	movzx  eax,ax
   1fb0b:	83 e0 1f             	and    eax,0x1f
   1fb0e:	89 c2                	mov    edx,eax
   1fb10:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb13:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:411
    *minutes = (fat_time >> FAT_TIME_MINUTES_SHIFT) & FAT_TIME_MINUTES_MASK;
   1fb15:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fb19:	66 c1 e8 05          	shr    ax,0x5
   1fb1d:	0f b7 c0             	movzx  eax,ax
   1fb20:	83 e0 3f             	and    eax,0x3f
   1fb23:	89 c2                	mov    edx,eax
   1fb25:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb28:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:412
    *seconds = (fat_time >> FAT_TIME_SECONDS_SHIFT) & FAT_TIME_SECONDS_MASK;
   1fb2a:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fb2e:	83 e0 1f             	and    eax,0x1f
   1fb31:	89 c2                	mov    edx,eax
   1fb33:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb36:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:413
    *seconds = *seconds * FAT_TIME_SECONDS_SCALE;
   1fb38:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb3b:	8b 00                	mov    eax,DWORD PTR [eax]
   1fb3d:	8d 14 00             	lea    edx,[eax+eax*1]
   1fb40:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb43:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:414
}
   1fb45:	90                   	nop
   1fb46:	c9                   	leave  
   1fb47:	c3                   	ret    

0001fb48 <fatfs_convert_from_fat_date>:
fatfs_convert_from_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:419
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_date: Convert FAT date to d/m/y
//-----------------------------------------------------------------------------
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year)
{
   1fb48:	55                   	push   ebp
   1fb49:	89 e5                	mov    ebp,esp
   1fb4b:	83 ec 04             	sub    esp,0x4
   1fb4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fb51:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:420
    *day = (fat_date >> FAT_DATE_DAY_SHIFT) & FAT_DATE_DAY_MASK;
   1fb55:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fb59:	83 e0 1f             	and    eax,0x1f
   1fb5c:	89 c2                	mov    edx,eax
   1fb5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb61:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:421
    *month = (fat_date >> FAT_DATE_MONTH_SHIFT) & FAT_DATE_MONTH_MASK;
   1fb63:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fb67:	66 c1 e8 05          	shr    ax,0x5
   1fb6b:	0f b7 c0             	movzx  eax,ax
   1fb6e:	83 e0 0f             	and    eax,0xf
   1fb71:	89 c2                	mov    edx,eax
   1fb73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fb76:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:422
    *year = (fat_date >> FAT_DATE_YEAR_SHIFT) & FAT_DATE_YEAR_MASK;
   1fb78:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fb7c:	66 c1 e8 09          	shr    ax,0x9
   1fb80:	0f b7 c0             	movzx  eax,ax
   1fb83:	83 e0 7f             	and    eax,0x7f
   1fb86:	89 c2                	mov    edx,eax
   1fb88:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb8b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:423
    *year = *year + FAT_DATE_YEAR_OFFSET;
   1fb8d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb90:	8b 00                	mov    eax,DWORD PTR [eax]
   1fb92:	8d 90 bc 07 00 00    	lea    edx,[eax+0x7bc]
   1fb98:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fb9b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:424
}
   1fb9d:	90                   	nop
   1fb9e:	c9                   	leave  
   1fb9f:	c3                   	ret    

0001fba0 <fatfs_convert_to_fat_time>:
fatfs_convert_to_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:429
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_time: Convert h/m/s to FAT time
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds)
{
   1fba0:	55                   	push   ebp
   1fba1:	89 e5                	mov    ebp,esp
   1fba3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:430
    uint16 fat_time = 0;
   1fba6:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:433

    // Most FAT times are to a resolution of 2 seconds
    seconds /= FAT_TIME_SECONDS_SCALE;
   1fbac:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fbaf:	89 c2                	mov    edx,eax
   1fbb1:	c1 ea 1f             	shr    edx,0x1f
   1fbb4:	01 d0                	add    eax,edx
   1fbb6:	d1 f8                	sar    eax,1
   1fbb8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:435

    fat_time = (hours & FAT_TIME_HOURS_MASK) << FAT_TIME_HOURS_SHIFT;
   1fbbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fbbe:	c1 e0 0b             	shl    eax,0xb
   1fbc1:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:436
    fat_time|= (minutes & FAT_TIME_MINUTES_MASK) << FAT_TIME_MINUTES_SHIFT;
   1fbc5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fbc8:	83 e0 3f             	and    eax,0x3f
   1fbcb:	c1 e0 05             	shl    eax,0x5
   1fbce:	89 c2                	mov    edx,eax
   1fbd0:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fbd4:	09 d0                	or     eax,edx
   1fbd6:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:437
    fat_time|= (seconds & FAT_TIME_SECONDS_MASK) << FAT_TIME_SECONDS_SHIFT;
   1fbda:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fbdd:	83 e0 1f             	and    eax,0x1f
   1fbe0:	89 c2                	mov    edx,eax
   1fbe2:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fbe6:	09 d0                	or     eax,edx
   1fbe8:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:439

    return fat_time;
   1fbec:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:440
}
   1fbf0:	c9                   	leave  
   1fbf1:	c3                   	ret    

0001fbf2 <fatfs_convert_to_fat_date>:
fatfs_convert_to_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:445
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_date: Convert d/m/y to FAT date
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_date(int day, int month, int year)
{
   1fbf2:	55                   	push   ebp
   1fbf3:	89 e5                	mov    ebp,esp
   1fbf5:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:446
    uint16 fat_date = 0;
   1fbf8:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:449

    // FAT dates are relative to 1980
    if (year >= FAT_DATE_YEAR_OFFSET)
   1fbfe:	81 7d 10 bb 07 00 00 	cmp    DWORD PTR [ebp+0x10],0x7bb
   1fc05:	7e 07                	jle    1fc0e <fatfs_convert_to_fat_date+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:450
        year -= FAT_DATE_YEAR_OFFSET;
   1fc07:	81 6d 10 bc 07 00 00 	sub    DWORD PTR [ebp+0x10],0x7bc
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:452

    fat_date = (day & FAT_DATE_DAY_MASK) << FAT_DATE_DAY_SHIFT;
   1fc0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc11:	83 e0 1f             	and    eax,0x1f
   1fc14:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:453
    fat_date|= (month & FAT_DATE_MONTH_MASK) << FAT_DATE_MONTH_SHIFT;
   1fc18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fc1b:	83 e0 0f             	and    eax,0xf
   1fc1e:	c1 e0 05             	shl    eax,0x5
   1fc21:	89 c2                	mov    edx,eax
   1fc23:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fc27:	09 d0                	or     eax,edx
   1fc29:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:454
    fat_date|= (year & FAT_DATE_YEAR_MASK) << FAT_DATE_YEAR_SHIFT;
   1fc2d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fc30:	c1 e0 09             	shl    eax,0x9
   1fc33:	89 c2                	mov    edx,eax
   1fc35:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fc39:	09 d0                	or     eax,edx
   1fc3b:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:456

    return fat_date;
   1fc3f:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:457
}
   1fc43:	c9                   	leave  
   1fc44:	c3                   	ret    
   1fc45:	66 90                	xchg   ax,ax
   1fc47:	90                   	nop

0001fc48 <fatfs_total_path_levels>:
fatfs_total_path_levels():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:45
//        c:\folder\file.zip
//        /dev/etc/samba.conf
// Returns: -1 = Error, 0 or more = Ok
//-----------------------------------------------------------------------------
int fatfs_total_path_levels(char *path)
{
   1fc48:	55                   	push   ebp
   1fc49:	89 e5                	mov    ebp,esp
   1fc4b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:46
    int levels = 0;
   1fc4e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:49
    char expectedchar;

    if (!path)
   1fc55:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1fc59:	75 07                	jne    1fc62 <fatfs_total_path_levels+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:50
        return -1;
   1fc5b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fc60:	eb 74                	jmp    1fcd6 <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:55

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   1fc62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc65:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc68:	3c 2f                	cmp    al,0x2f
   1fc6a:	75 0a                	jne    1fc76 <fatfs_total_path_levels+0x2e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:57
    {
        expectedchar = '/';
   1fc6c:	c6 45 fb 2f          	mov    BYTE PTR [ebp-0x5],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:58
        path++;
   1fc70:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1fc74:	eb 50                	jmp    1fcc6 <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60
    }
    else if (path[1] == ':' || path[2] == '\\')
   1fc76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc79:	83 c0 01             	add    eax,0x1
   1fc7c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc7f:	3c 3a                	cmp    al,0x3a
   1fc81:	74 0d                	je     1fc90 <fatfs_total_path_levels+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60 (discriminator 1)
   1fc83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc86:	83 c0 02             	add    eax,0x2
   1fc89:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fc8c:	3c 5c                	cmp    al,0x5c
   1fc8e:	75 0a                	jne    1fc9a <fatfs_total_path_levels+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:62
    {
        expectedchar = '\\';
   1fc90:	c6 45 fb 5c          	mov    BYTE PTR [ebp-0x5],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:63
        path += 3;
   1fc94:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   1fc98:	eb 07                	jmp    1fca1 <fatfs_total_path_levels+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:66
    }
    else
        return -1;
   1fc9a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fc9f:	eb 35                	jmp    1fcd6 <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69

    // Count levels in path string
    while (*path)
   1fca1:	eb 23                	jmp    1fcc6 <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   1fca3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fca6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fca9:	3a 45 fb             	cmp    al,BYTE PTR [ebp-0x5]
   1fcac:	75 06                	jne    1fcb4 <fatfs_total_path_levels+0x6c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75 (discriminator 1)
   1fcae:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1fcb2:	eb 0e                	jmp    1fcc2 <fatfs_total_path_levels+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:76
            path++;
   1fcb4:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:72

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
   1fcb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fcbb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fcbe:	84 c0                	test   al,al
   1fcc0:	75 e1                	jne    1fca3 <fatfs_total_path_levels+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:80
            if (*path == expectedchar) { path++; break; }
            path++;
        }

        // Increase number of subdirs founds
        levels++;
   1fcc2:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   1fcc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fcc9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fccc:	84 c0                	test   al,al
   1fcce:	75 e8                	jne    1fcb8 <fatfs_total_path_levels+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:84
        // Increase number of subdirs founds
        levels++;
    }

    // Subtract the file itself
    return levels-1;
   1fcd0:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1fcd3:	83 e8 01             	sub    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:85
}
   1fcd6:	c9                   	leave  
   1fcd7:	c3                   	ret    

0001fcd8 <fatfs_get_substring>:
fatfs_get_substring():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:93
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
   1fcd8:	55                   	push   ebp
   1fcd9:	89 e5                	mov    ebp,esp
   1fcdb:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:95
    int i;
    int pathlen=0;
   1fcde:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:96
    int levels=0;
   1fce5:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:97
    int copypnt=0;
   1fcec:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100
    char expectedchar;

    if (!path || max_len <= 0)
   1fcf3:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1fcf7:	74 06                	je     1fcff <fatfs_get_substring+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100 (discriminator 1)
   1fcf9:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1fcfd:	7f 0a                	jg     1fd09 <fatfs_get_substring+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:101
        return -1;
   1fcff:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fd04:	e9 d2 00 00 00       	jmp    1fddb <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:106

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   1fd09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd0c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd0f:	3c 2f                	cmp    al,0x2f
   1fd11:	75 0a                	jne    1fd1d <fatfs_get_substring+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:108
    {
        expectedchar = '/';
   1fd13:	c6 45 eb 2f          	mov    BYTE PTR [ebp-0x15],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:109
        path++;
   1fd17:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1fd1b:	eb 2e                	jmp    1fd4b <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111
    }
    else if (path[1] == ':' || path[2] == '\\')
   1fd1d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd20:	83 c0 01             	add    eax,0x1
   1fd23:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd26:	3c 3a                	cmp    al,0x3a
   1fd28:	74 0d                	je     1fd37 <fatfs_get_substring+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111 (discriminator 1)
   1fd2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd2d:	83 c0 02             	add    eax,0x2
   1fd30:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd33:	3c 5c                	cmp    al,0x5c
   1fd35:	75 0a                	jne    1fd41 <fatfs_get_substring+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:113
    {
        expectedchar = '\\';
   1fd37:	c6 45 eb 5c          	mov    BYTE PTR [ebp-0x15],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:114
        path += 3;
   1fd3b:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   1fd3f:	eb 0a                	jmp    1fd4b <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:117
    }
    else
        return -1;
   1fd41:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fd46:	e9 90 00 00 00       	jmp    1fddb <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:120

    // Get string length of path
    pathlen = (int)strlen (path);
   1fd4b:	83 ec 0c             	sub    esp,0xc
   1fd4e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fd51:	e8 6e 76 00 00       	call   273c4 <strlen>
   1fd56:	83 c4 10             	add    esp,0x10
   1fd59:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   1fd5c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fd63:	eb 4d                	jmp    1fdb2 <fatfs_get_substring+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
   1fd65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd68:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd6b:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   1fd6e:	75 04                	jne    1fd74 <fatfs_get_substring+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126 (discriminator 1)
   1fd70:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   1fd74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fd77:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   1fd7a:	75 2e                	jne    1fdaa <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 1)
   1fd7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd7f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fd82:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   1fd85:	74 23                	je     1fdaa <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 2)
   1fd87:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fd8a:	83 e8 01             	sub    eax,0x1
   1fd8d:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1fd90:	7e 18                	jle    1fdaa <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:130
            output[copypnt++] = *path;
   1fd92:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fd95:	8d 50 01             	lea    edx,[eax+0x1]
   1fd98:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1fd9b:	89 c2                	mov    edx,eax
   1fd9d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fda0:	01 c2                	add    edx,eax
   1fda2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fda5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fda8:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:133 (discriminator 2)

        // Increment through path string
        path++;
   1fdaa:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 2)

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   1fdae:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 1)
   1fdb2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fdb5:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1fdb8:	7c ab                	jl     1fd65 <fatfs_get_substring+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:137
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
   1fdba:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1fdbd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fdc0:	01 d0                	add    eax,edx
   1fdc2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:140

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
   1fdc5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fdc8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fdcb:	84 c0                	test   al,al
   1fdcd:	74 07                	je     1fdd6 <fatfs_get_substring+0xfe>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:141
        return 0;    // OK
   1fdcf:	b8 00 00 00 00       	mov    eax,0x0
   1fdd4:	eb 05                	jmp    1fddb <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:143
    else
        return -1;    // Error
   1fdd6:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:144
}
   1fddb:	c9                   	leave  
   1fddc:	c3                   	ret    

0001fddd <fatfs_split_path>:
fatfs_split_path():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:152
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
   1fddd:	55                   	push   ebp
   1fdde:	89 e5                	mov    ebp,esp
   1fde0:	53                   	push   ebx
   1fde1:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:156
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
   1fde4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fde7:	e8 5c fe ff ff       	call   1fc48 <fatfs_total_path_levels>
   1fdec:	83 c4 04             	add    esp,0x4
   1fdef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:157
    if (levels == -1)
   1fdf2:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1fdf6:	75 0a                	jne    1fe02 <fatfs_split_path+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:158
        return -1;
   1fdf8:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fdfd:	e9 88 00 00 00       	jmp    1fe8a <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:161

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
   1fe02:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1fe05:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1fe08:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1fe0b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fe0e:	e8 c5 fe ff ff       	call   1fcd8 <fatfs_get_substring>
   1fe13:	83 c4 10             	add    esp,0x10
   1fe16:	85 c0                	test   eax,eax
   1fe18:	74 07                	je     1fe21 <fatfs_split_path+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:162
        return -1;
   1fe1a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1fe1f:	eb 69                	jmp    1fe8a <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:165

    // If root file
    if (levels == 0)
   1fe21:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1fe25:	75 08                	jne    1fe2f <fatfs_split_path+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:166
        path[0] = '\0';
   1fe27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe2a:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1fe2d:	eb 56                	jmp    1fe85 <fatfs_split_path+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:169
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
   1fe2f:	83 ec 0c             	sub    esp,0xc
   1fe32:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fe35:	e8 8a 75 00 00       	call   273c4 <strlen>
   1fe3a:	83 c4 10             	add    esp,0x10
   1fe3d:	89 c3                	mov    ebx,eax
   1fe3f:	83 ec 0c             	sub    esp,0xc
   1fe42:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1fe45:	e8 7a 75 00 00       	call   273c4 <strlen>
   1fe4a:	83 c4 10             	add    esp,0x10
   1fe4d:	29 c3                	sub    ebx,eax
   1fe4f:	89 d8                	mov    eax,ebx
   1fe51:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:170
        if (strindex > max_path)
   1fe54:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe57:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1fe5a:	7e 06                	jle    1fe62 <fatfs_split_path+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:171
            strindex = max_path;
   1fe5c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fe5f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:173

        memcpy(path, full_path, strindex);
   1fe62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe65:	83 ec 04             	sub    esp,0x4
   1fe68:	50                   	push   eax
   1fe69:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fe6c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fe6f:	e8 e4 5c 00 00       	call   25b58 <memcpy>
   1fe74:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:174
        path[strindex-1] = '\0';
   1fe77:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fe7a:	8d 50 ff             	lea    edx,[eax-0x1]
   1fe7d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe80:	01 d0                	add    eax,edx
   1fe82:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:177
    }

    return 0;
   1fe85:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:178
}
   1fe8a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1fe8d:	c9                   	leave  
   1fe8e:	c3                   	ret    

0001fe8f <FileString_StrCmpNoCase>:
FileString_StrCmpNoCase():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:183
//-----------------------------------------------------------------------------
// FileString_StrCmpNoCase: Compare two strings case with case sensitivity
//-----------------------------------------------------------------------------
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
   1fe8f:	55                   	push   ebp
   1fe90:	89 e5                	mov    ebp,esp
   1fe92:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
    int diff;
    char a,b;

    while (n--)
   1fe95:	eb 74                	jmp    1ff0b <FileString_StrCmpNoCase+0x7c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:189
    {
        a = *s1;
   1fe97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe9a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fe9d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:190
        b = *s2;
   1fea0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fea3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fea6:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   1fea9:	80 7d ff 40          	cmp    BYTE PTR [ebp-0x1],0x40
   1fead:	7e 10                	jle    1febf <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193 (discriminator 1)
   1feaf:	80 7d ff 5a          	cmp    BYTE PTR [ebp-0x1],0x5a
   1feb3:	7f 0a                	jg     1febf <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:194
            a+= 32;
   1feb5:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   1feb9:	83 c0 20             	add    eax,0x20
   1febc:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195
        if ((b>='A') && (b<='Z'))
   1febf:	80 7d fe 40          	cmp    BYTE PTR [ebp-0x2],0x40
   1fec3:	7e 10                	jle    1fed5 <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195 (discriminator 1)
   1fec5:	80 7d fe 5a          	cmp    BYTE PTR [ebp-0x2],0x5a
   1fec9:	7f 0a                	jg     1fed5 <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:196
            b+= 32;
   1fecb:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   1fecf:	83 c0 20             	add    eax,0x20
   1fed2:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:198

        diff = a - b;
   1fed5:	0f be 55 ff          	movsx  edx,BYTE PTR [ebp-0x1]
   1fed9:	0f be 45 fe          	movsx  eax,BYTE PTR [ebp-0x2]
   1fedd:	29 c2                	sub    edx,eax
   1fedf:	89 d0                	mov    eax,edx
   1fee1:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:201

        // If different
        if (diff)
   1fee4:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
   1fee8:	74 05                	je     1feef <FileString_StrCmpNoCase+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:202
            return diff;
   1feea:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1feed:	eb 32                	jmp    1ff21 <FileString_StrCmpNoCase+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
   1feef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fef2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fef5:	84 c0                	test   al,al
   1fef7:	74 23                	je     1ff1c <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205 (discriminator 1)
   1fef9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fefc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1feff:	84 c0                	test   al,al
   1ff01:	74 19                	je     1ff1c <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:208
            break;

        s1++;
   1ff03:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:209
        s2++;
   1ff07:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   1ff0b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ff0e:	8d 50 ff             	lea    edx,[eax-0x1]
   1ff11:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   1ff14:	85 c0                	test   eax,eax
   1ff16:	0f 85 7b ff ff ff    	jne    1fe97 <FileString_StrCmpNoCase+0x8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:211
            break;

        s1++;
        s2++;
    }
    return 0;
   1ff1c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:212
}
   1ff21:	c9                   	leave  
   1ff22:	c3                   	ret    

0001ff23 <FileString_GetExtension>:
FileString_GetExtension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:218
//-----------------------------------------------------------------------------
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
   1ff23:	55                   	push   ebp
   1ff24:	89 e5                	mov    ebp,esp
   1ff26:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:219
    int dotPos = -1;
   1ff29:	c7 45 fc ff ff ff ff 	mov    DWORD PTR [ebp-0x4],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:220
    char *strSrc = str;
   1ff30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff33:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223

    // Find last '.' in string (if at all)
    while (*strSrc)
   1ff36:	eb 1b                	jmp    1ff53 <FileString_GetExtension+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:225
    {
        if (*strSrc=='.')
   1ff38:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1ff3b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff3e:	3c 2e                	cmp    al,0x2e
   1ff40:	75 0d                	jne    1ff4f <FileString_GetExtension+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:226
            dotPos = (int)(strSrc-str);
   1ff42:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1ff45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff48:	29 c2                	sub    edx,eax
   1ff4a:	89 d0                	mov    eax,edx
   1ff4c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:228

        strSrc++;
   1ff4f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   1ff53:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1ff56:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff59:	84 c0                	test   al,al
   1ff5b:	75 db                	jne    1ff38 <FileString_GetExtension+0x15>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:231
            dotPos = (int)(strSrc-str);

        strSrc++;
    }

    return dotPos;
   1ff5d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:232
}
   1ff60:	c9                   	leave  
   1ff61:	c3                   	ret    

0001ff62 <FileString_TrimLength>:
FileString_TrimLength():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:238
//-----------------------------------------------------------------------------
// FileString_TrimLength: Get length of string excluding trailing spaces
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
   1ff62:	55                   	push   ebp
   1ff63:	89 e5                	mov    ebp,esp
   1ff65:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:239
    int length = strLen;
   1ff68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ff6b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:240
    char *strSrc = str+strLen-1;
   1ff6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1ff71:	8d 50 ff             	lea    edx,[eax-0x1]
   1ff74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff77:	01 d0                	add    eax,edx
   1ff79:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
   1ff7c:	eb 1f                	jmp    1ff9d <FileString_TrimLength+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
   1ff7e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1ff81:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff84:	3c 20                	cmp    al,0x20
   1ff86:	75 1d                	jne    1ffa5 <FileString_TrimLength+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
   1ff88:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1ff8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff8e:	29 c2                	sub    edx,eax
   1ff90:	89 d0                	mov    eax,edx
   1ff92:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:250
        else
            break;

        strSrc--;
   1ff95:	83 6d f8 01          	sub    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:251
        strLen--;
   1ff99:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   1ff9d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ffa1:	75 db                	jne    1ff7e <FileString_TrimLength+0x1c>
   1ffa3:	eb 01                	jmp    1ffa6 <FileString_TrimLength+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:248
    {
        if (*strSrc == ' ')
            length = (int)(strSrc - str);
        else
            break;
   1ffa5:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:254

        strSrc--;
        strLen--;
    }

    return length;
   1ffa6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:255
}
   1ffa9:	c9                   	leave  
   1ffaa:	c3                   	ret    

0001ffab <fatfs_compare_names>:
fatfs_compare_names():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:261
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
   1ffab:	55                   	push   ebp
   1ffac:	89 e5                	mov    ebp,esp
   1ffae:	53                   	push   ebx
   1ffaf:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:262
    char *ext1 = NULL;
   1ffb2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:263
    char *ext2 = NULL;
   1ffb9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:268
    int ext1Pos, ext2Pos;
    int file1Len, file2Len;

    // Get both files extension
    ext1Pos = FileString_GetExtension(strA);
   1ffc0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ffc3:	e8 5b ff ff ff       	call   1ff23 <FileString_GetExtension>
   1ffc8:	83 c4 04             	add    esp,0x4
   1ffcb:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:269
    ext2Pos = FileString_GetExtension(strB);
   1ffce:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ffd1:	e8 4d ff ff ff       	call   1ff23 <FileString_GetExtension>
   1ffd6:	83 c4 04             	add    esp,0x4
   1ffd9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
   1ffdc:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   1ffe0:	75 10                	jne    1fff2 <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274 (discriminator 1)
   1ffe2:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   1ffe6:	74 0a                	je     1fff2 <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:275
        return 0;
   1ffe8:	b8 00 00 00 00       	mov    eax,0x0
   1ffed:	e9 21 01 00 00       	jmp    20113 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276
    if ((ext2Pos==-1) && (ext1Pos!=-1))
   1fff2:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   1fff6:	75 10                	jne    20008 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276 (discriminator 1)
   1fff8:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   1fffc:	74 0a                	je     20008 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:277
        return 0;
   1fffe:	b8 00 00 00 00       	mov    eax,0x0
   20003:	e9 0b 01 00 00       	jmp    20113 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:280

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
   20008:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   2000c:	0f 84 84 00 00 00    	je     20096 <fatfs_compare_names+0xeb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:283
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
   20012:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20015:	8d 50 01             	lea    edx,[eax+0x1]
   20018:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2001b:	01 d0                	add    eax,edx
   2001d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:284
        ext2 = strB+ext2Pos+1;
   20020:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   20023:	8d 50 01             	lea    edx,[eax+0x1]
   20026:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20029:	01 d0                	add    eax,edx
   2002b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:287

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
   2002e:	83 ec 0c             	sub    esp,0xc
   20031:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   20034:	e8 8b 73 00 00       	call   273c4 <strlen>
   20039:	83 c4 10             	add    esp,0x10
   2003c:	89 c3                	mov    ebx,eax
   2003e:	83 ec 0c             	sub    esp,0xc
   20041:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   20044:	e8 7b 73 00 00       	call   273c4 <strlen>
   20049:	83 c4 10             	add    esp,0x10
   2004c:	39 c3                	cmp    ebx,eax
   2004e:	74 0a                	je     2005a <fatfs_compare_names+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:288
            return 0;
   20050:	b8 00 00 00 00       	mov    eax,0x0
   20055:	e9 b9 00 00 00       	jmp    20113 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:291

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
   2005a:	83 ec 0c             	sub    esp,0xc
   2005d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   20060:	e8 5f 73 00 00       	call   273c4 <strlen>
   20065:	83 c4 10             	add    esp,0x10
   20068:	83 ec 04             	sub    esp,0x4
   2006b:	50                   	push   eax
   2006c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   2006f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   20072:	e8 18 fe ff ff       	call   1fe8f <FileString_StrCmpNoCase>
   20077:	83 c4 10             	add    esp,0x10
   2007a:	85 c0                	test   eax,eax
   2007c:	74 0a                	je     20088 <fatfs_compare_names+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:292
            return 0;
   2007e:	b8 00 00 00 00       	mov    eax,0x0
   20083:	e9 8b 00 00 00       	jmp    20113 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:295

        // Filelength is upto extensions
        file1Len = ext1Pos;
   20088:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2008b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:296
        file2Len = ext2Pos;
   2008e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   20091:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   20094:	eb 22                	jmp    200b8 <fatfs_compare_names+0x10d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:302
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
   20096:	83 ec 0c             	sub    esp,0xc
   20099:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2009c:	e8 23 73 00 00       	call   273c4 <strlen>
   200a1:	83 c4 10             	add    esp,0x10
   200a4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:303
        file2Len = (int)strlen(strB);
   200a7:	83 ec 0c             	sub    esp,0xc
   200aa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   200ad:	e8 12 73 00 00       	call   273c4 <strlen>
   200b2:	83 c4 10             	add    esp,0x10
   200b5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:307
    }

    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
   200b8:	83 ec 08             	sub    esp,0x8
   200bb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   200be:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   200c1:	e8 9c fe ff ff       	call   1ff62 <FileString_TrimLength>
   200c6:	83 c4 10             	add    esp,0x10
   200c9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:308
    file2Len = FileString_TrimLength(strB, file2Len);
   200cc:	83 ec 08             	sub    esp,0x8
   200cf:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   200d2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   200d5:	e8 88 fe ff ff       	call   1ff62 <FileString_TrimLength>
   200da:	83 c4 10             	add    esp,0x10
   200dd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:311

    // Check the file lengths match
    if (file1Len!=file2Len)
   200e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   200e3:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   200e6:	74 07                	je     200ef <fatfs_compare_names+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:312
        return 0;
   200e8:	b8 00 00 00 00       	mov    eax,0x0
   200ed:	eb 24                	jmp    20113 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:315

    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
   200ef:	83 ec 04             	sub    esp,0x4
   200f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   200f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   200f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   200fb:	e8 8f fd ff ff       	call   1fe8f <FileString_StrCmpNoCase>
   20100:	83 c4 10             	add    esp,0x10
   20103:	85 c0                	test   eax,eax
   20105:	74 07                	je     2010e <fatfs_compare_names+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:316
        return 0;
   20107:	b8 00 00 00 00       	mov    eax,0x0
   2010c:	eb 05                	jmp    20113 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:318
    else
        return 1;
   2010e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:319
}
   20113:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   20116:	c9                   	leave  
   20117:	c3                   	ret    

00020118 <fatfs_string_ends_with_slash>:
fatfs_string_ends_with_slash():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:324
//-----------------------------------------------------------------------------
// fatfs_string_ends_with_slash: Does the string end with a slash (\ or /)
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
   20118:	55                   	push   ebp
   20119:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:325
    if (path)
   2011b:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2011f:	74 38                	je     20159 <fatfs_string_ends_with_slash+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
    {
        while (*path)
   20121:	eb 2c                	jmp    2014f <fatfs_string_ends_with_slash+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:330
        {
            // Last character?
            if (!(*(path+1)))
   20123:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20126:	83 c0 01             	add    eax,0x1
   20129:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2012c:	84 c0                	test   al,al
   2012e:	75 1b                	jne    2014b <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332
            {
                if (*path == '\\' || *path == '/')
   20130:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20133:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20136:	3c 5c                	cmp    al,0x5c
   20138:	74 0a                	je     20144 <fatfs_string_ends_with_slash+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332 (discriminator 1)
   2013a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2013d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20140:	3c 2f                	cmp    al,0x2f
   20142:	75 07                	jne    2014b <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:333
                    return 1;
   20144:	b8 01 00 00 00       	mov    eax,0x1
   20149:	eb 13                	jmp    2015e <fatfs_string_ends_with_slash+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:336
            }

            path++;
   2014b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
    if (path)
    {
        while (*path)
   2014f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20152:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20155:	84 c0                	test   al,al
   20157:	75 ca                	jne    20123 <fatfs_string_ends_with_slash+0xb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:340

            path++;
        }
    }

    return 0;
   20159:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:341
}
   2015e:	5d                   	pop    ebp
   2015f:	c3                   	ret    

00020160 <fatfs_get_sfn_display_name>:
fatfs_get_sfn_display_name():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:346
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
   20160:	55                   	push   ebp
   20161:	89 e5                	mov    ebp,esp
   20163:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:347
    int len = 0;
   20166:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
    while (*in && len <= 11)
   2016d:	eb 40                	jmp    201af <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:350
    {
        char a = *in++;
   2016f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20172:	8d 50 01             	lea    edx,[eax+0x1]
   20175:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   20178:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2017b:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:352

        if (a == ' ')
   2017e:	80 7d fb 20          	cmp    BYTE PTR [ebp-0x5],0x20
   20182:	75 02                	jne    20186 <fatfs_get_sfn_display_name+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:353
            continue;
   20184:	eb 29                	jmp    201af <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
   20186:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   2018a:	7e 10                	jle    2019c <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355 (discriminator 1)
   2018c:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   20190:	7f 0a                	jg     2019c <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:356
            a+= 32;
   20192:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   20196:	83 c0 20             	add    eax,0x20
   20199:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:358

        *out++ = a;
   2019c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2019f:	8d 50 01             	lea    edx,[eax+0x1]
   201a2:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   201a5:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   201a9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:359
        len++;
   201ab:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
   201af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   201b2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201b5:	84 c0                	test   al,al
   201b7:	74 06                	je     201bf <fatfs_get_sfn_display_name+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348 (discriminator 1)
   201b9:	83 7d fc 0b          	cmp    DWORD PTR [ebp-0x4],0xb
   201bd:	7e b0                	jle    2016f <fatfs_get_sfn_display_name+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:362

        *out++ = a;
        len++;
    }

    *out = '\0';
   201bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201c2:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:363
    return 1;
   201c5:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:364
}
   201ca:	c9                   	leave  
   201cb:	c3                   	ret    

000201cc <fatfs_get_extension>:
fatfs_get_extension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:371
// fatfs_get_extension: Get extension of filename passed in 'filename'.
// Returned extension is always lower case.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_get_extension(char* filename, char* out, int maxlen)
{
   201cc:	55                   	push   ebp
   201cd:	89 e5                	mov    ebp,esp
   201cf:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:372
    int len = 0;
   201d2:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:375

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);
   201d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   201dc:	e8 42 fd ff ff       	call   1ff23 <FileString_GetExtension>
   201e1:	83 c4 04             	add    esp,0x4
   201e4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377

    if (ext_pos > 0 && out && maxlen)
   201e7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   201eb:	7e 71                	jle    2025e <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 1)
   201ed:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   201f1:	74 6b                	je     2025e <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 2)
   201f3:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   201f7:	74 65                	je     2025e <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:379
    {
        filename += ext_pos + 1;
   201f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   201fc:	83 c0 01             	add    eax,0x1
   201ff:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

        while (*filename && len < (maxlen-1))
   20202:	eb 38                	jmp    2023c <fatfs_get_extension+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:383
        {
            char a = *filename++;
   20204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20207:	8d 50 01             	lea    edx,[eax+0x1]
   2020a:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   2020d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20210:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
   20213:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   20217:	7e 10                	jle    20229 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386 (discriminator 1)
   20219:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   2021d:	7f 0a                	jg     20229 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:387
                a+= 32;
   2021f:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   20223:	83 c0 20             	add    eax,0x20
   20226:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:389

            *out++ = a;
   20229:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2022c:	8d 50 01             	lea    edx,[eax+0x1]
   2022f:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   20232:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   20236:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:390
            len++;
   20238:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;

        while (*filename && len < (maxlen-1))
   2023c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2023f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20242:	84 c0                	test   al,al
   20244:	74 0b                	je     20251 <fatfs_get_extension+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381 (discriminator 1)
   20246:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20249:	83 e8 01             	sub    eax,0x1
   2024c:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   2024f:	7f b3                	jg     20204 <fatfs_get_extension+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:393

            *out++ = a;
            len++;
        }

        *out = '\0';
   20251:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20254:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:394
        return 1;
   20257:	b8 01 00 00 00       	mov    eax,0x1
   2025c:	eb 05                	jmp    20263 <fatfs_get_extension+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:397
    }

    return 0;
   2025e:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:398
}
   20263:	c9                   	leave  
   20264:	c3                   	ret    

00020265 <fatfs_create_path_string>:
fatfs_create_path_string():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:404
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
{
   20265:	55                   	push   ebp
   20266:	89 e5                	mov    ebp,esp
   20268:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:405
    int len = 0;
   2026b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:406
    char last = 0;
   20272:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:407
    char seperator = '/';
   20276:	c6 45 fa 2f          	mov    BYTE PTR [ebp-0x6],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409

    if (path && filename && out && maxlen > 0)
   2027a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2027e:	0f 84 bb 00 00 00    	je     2033f <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 1)
   20284:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20288:	0f 84 b1 00 00 00    	je     2033f <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 2)
   2028e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   20292:	0f 84 a7 00 00 00    	je     2033f <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 3)
   20298:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   2029c:	0f 8e 9d 00 00 00    	jle    2033f <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    {
        while (*path && len < (maxlen-2))
   202a2:	eb 2c                	jmp    202d0 <fatfs_create_path_string+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:413
        {
            last = *path++;
   202a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   202a7:	8d 50 01             	lea    edx,[eax+0x1]
   202aa:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   202ad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   202b0:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:414
            if (last == '\\')
   202b3:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   202b7:	75 04                	jne    202bd <fatfs_create_path_string+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:415
                seperator = '\\';
   202b9:	c6 45 fa 5c          	mov    BYTE PTR [ebp-0x6],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:416
            *out++ = last;
   202bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   202c0:	8d 50 01             	lea    edx,[eax+0x1]
   202c3:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   202c6:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   202ca:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:417
            len++;
   202cc:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   202d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   202d3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   202d6:	84 c0                	test   al,al
   202d8:	74 0b                	je     202e5 <fatfs_create_path_string+0x80>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411 (discriminator 1)
   202da:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   202dd:	83 e8 02             	sub    eax,0x2
   202e0:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   202e3:	7f bf                	jg     202a4 <fatfs_create_path_string+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421
            *out++ = last;
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
   202e5:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   202e9:	74 32                	je     2031d <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421 (discriminator 1)
   202eb:	80 7d fb 2f          	cmp    BYTE PTR [ebp-0x5],0x2f
   202ef:	74 2c                	je     2031d <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:422
            *out++ = seperator;
   202f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   202f4:	8d 50 01             	lea    edx,[eax+0x1]
   202f7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   202fa:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   202fe:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        while (*filename && len < (maxlen-1))
   20300:	eb 1b                	jmp    2031d <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:426
        {
            *out++ = *filename++;
   20302:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20305:	8d 50 01             	lea    edx,[eax+0x1]
   20308:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2030b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2030e:	8d 4a 01             	lea    ecx,[edx+0x1]
   20311:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   20314:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   20317:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:427
            len++;
   20319:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
   2031d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20320:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20323:	84 c0                	test   al,al
   20325:	74 0b                	je     20332 <fatfs_create_path_string+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424 (discriminator 1)
   20327:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2032a:	83 e8 01             	sub    eax,0x1
   2032d:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   20330:	7f d0                	jg     20302 <fatfs_create_path_string+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:430
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
   20332:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20335:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:432

        return 1;
   20338:	b8 01 00 00 00       	mov    eax,0x1
   2033d:	eb 05                	jmp    20344 <fatfs_create_path_string+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:435
    }

    return 0;
   2033f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:436
}
   20344:	c9                   	leave  
   20345:	c3                   	ret    
   20346:	66 90                	xchg   ax,ax

00020348 <fatfs_fat_init>:
fatfs_fat_init():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:61

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
   20348:	55                   	push   ebp
   20349:	89 e5                	mov    ebp,esp
   2034b:	53                   	push   ebx
   2034c:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:65
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
   2034f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20352:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   20359:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67

    for (i=0;i<FAT_BUFFERS;i++)
   2035c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20363:	e9 cf 00 00 00       	jmp    20437 <fatfs_fat_init+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:70 (discriminator 3)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   20368:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2036b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2036e:	c1 e0 04             	shl    eax,0x4
   20371:	89 c1                	mov    ecx,eax
   20373:	c1 e1 05             	shl    ecx,0x5
   20376:	01 c8                	add    eax,ecx
   20378:	01 d0                	add    eax,edx
   2037a:	05 58 04 00 00       	add    eax,0x458
   2037f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:71 (discriminator 3)
        fs->fat_buffers[i].dirty = 0;
   20385:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20388:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2038b:	c1 e0 04             	shl    eax,0x4
   2038e:	89 c1                	mov    ecx,eax
   20390:	c1 e1 05             	shl    ecx,0x5
   20393:	01 c8                	add    eax,ecx
   20395:	01 d0                	add    eax,edx
   20397:	05 5c 04 00 00       	add    eax,0x45c
   2039c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:72 (discriminator 3)
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   203a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   203a5:	c1 e0 04             	shl    eax,0x4
   203a8:	89 c2                	mov    edx,eax
   203aa:	c1 e2 05             	shl    edx,0x5
   203ad:	01 d0                	add    eax,edx
   203af:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   203b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203b8:	01 d0                	add    eax,edx
   203ba:	83 c0 08             	add    eax,0x8
   203bd:	83 ec 04             	sub    esp,0x4
   203c0:	68 00 02 00 00       	push   0x200
   203c5:	6a 00                	push   0x0
   203c7:	50                   	push   eax
   203c8:	e8 b0 4c 00 00       	call   2507d <memset>
   203cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:73 (discriminator 3)
        fs->fat_buffers[i].ptr = NULL;
   203d0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   203d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   203d6:	c1 e0 04             	shl    eax,0x4
   203d9:	89 c1                	mov    ecx,eax
   203db:	c1 e1 05             	shl    ecx,0x5
   203de:	01 c8                	add    eax,ecx
   203e0:	01 d0                	add    eax,edx
   203e2:	05 60 04 00 00       	add    eax,0x460
   203e7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:76 (discriminator 3)

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   203ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203f0:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   203f6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   203f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   203fc:	c1 e0 04             	shl    eax,0x4
   203ff:	89 c3                	mov    ebx,eax
   20401:	c1 e3 05             	shl    ebx,0x5
   20404:	01 d8                	add    eax,ebx
   20406:	01 c8                	add    eax,ecx
   20408:	05 64 04 00 00       	add    eax,0x464
   2040d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:77 (discriminator 3)
        fs->fat_buffer_head = &fs->fat_buffers[i];
   2040f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20412:	c1 e0 04             	shl    eax,0x4
   20415:	89 c2                	mov    edx,eax
   20417:	c1 e2 05             	shl    edx,0x5
   2041a:	01 d0                	add    eax,edx
   2041c:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   20422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20425:	01 d0                	add    eax,edx
   20427:	8d 50 08             	lea    edx,[eax+0x8]
   2042a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2042d:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 3)
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
   20433:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 1)
   20437:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   2043b:	0f 8e 27 ff ff ff    	jle    20368 <fatfs_fat_init+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:79

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
    }
}
   20441:	90                   	nop
   20442:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   20445:	c9                   	leave  
   20446:	c3                   	ret    

00020447 <fatfs_fat_writeback>:
fatfs_fat_writeback():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:84
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
   20447:	55                   	push   ebp
   20448:	89 e5                	mov    ebp,esp
   2044a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:85
    if (pcur)
   2044d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20451:	0f 84 9b 00 00 00    	je     204f2 <fatfs_fat_writeback+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:88
    {
        // Writeback sector if changed
        if (pcur->dirty)
   20457:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2045a:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20460:	85 c0                	test   eax,eax
   20462:	0f 84 83 00 00 00    	je     204eb <fatfs_fat_writeback+0xa4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:90
        {
            if (fs->disk_io.write_media)
   20468:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2046b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2046e:	85 c0                	test   eax,eax
   20470:	74 6c                	je     204de <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:92
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
   20472:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:93
                uint32 offset = pcur->address - fs->fat_begin_lba;
   20479:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2047c:	8b 90 00 02 00 00    	mov    edx,DWORD PTR [eax+0x200]
   20482:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20485:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   20488:	29 c2                	sub    edx,eax
   2048a:	89 d0                	mov    eax,edx
   2048c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:96

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   2048f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20492:	8d 50 01             	lea    edx,[eax+0x1]
   20495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20498:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   2049b:	39 c2                	cmp    edx,eax
   2049d:	77 09                	ja     204a8 <fatfs_fat_writeback+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:97
                    sectors = FAT_BUFFER_SECTORS;
   2049f:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   204a6:	eb 0c                	jmp    204b4 <fatfs_fat_writeback+0x6d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:99
                else
                    sectors = fs->fat_sectors - offset;
   204a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   204ab:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   204ae:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   204b1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:101

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
   204b4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   204b7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   204ba:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   204bd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   204c0:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   204c6:	83 ec 04             	sub    esp,0x4
   204c9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   204cc:	51                   	push   ecx
   204cd:	52                   	push   edx
   204ce:	ff d0                	call   eax
   204d0:	83 c4 10             	add    esp,0x10
   204d3:	85 c0                	test   eax,eax
   204d5:	75 07                	jne    204de <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:102
                    return 0;
   204d7:	b8 00 00 00 00       	mov    eax,0x0
   204dc:	eb 19                	jmp    204f7 <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:105
            }

            pcur->dirty = 0;
   204de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   204e1:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   204e8:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:108
        }

        return 1;
   204eb:	b8 01 00 00 00       	mov    eax,0x1
   204f0:	eb 05                	jmp    204f7 <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:111
    }
    else
        return 0;
   204f2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:112
}
   204f7:	c9                   	leave  
   204f8:	c3                   	ret    

000204f9 <fatfs_fat_read_sector>:
fatfs_fat_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:117
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
   204f9:	55                   	push   ebp
   204fa:	89 e5                	mov    ebp,esp
   204fc:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:118
    struct fat_buffer *last = NULL;
   204ff:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:119
    struct fat_buffer *pcur = fs->fat_buffer_head;
   20506:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20509:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   2050f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122

    // Itterate through sector buffer list
    while (pcur)
   20512:	eb 60                	jmp    20574 <fatfs_fat_read_sector+0x7b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
   20514:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20517:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   2051d:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   20520:	77 11                	ja     20533 <fatfs_fat_read_sector+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125 (discriminator 1)
   20522:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20525:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   2052b:	83 c0 01             	add    eax,0x1
   2052e:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   20531:	77 49                	ja     2057c <fatfs_fat_read_sector+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:129
            break;

        // End of list?
        if (pcur->next == NULL)
   20533:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20536:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   2053c:	85 c0                	test   eax,eax
   2053e:	75 22                	jne    20562 <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:132
        {
            // Remove buffer from list
            if (last)
   20540:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20544:	74 0f                	je     20555 <fatfs_fat_read_sector+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:133
                last->next = NULL;
   20546:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20549:	c7 80 0c 02 00 00 00 	mov    DWORD PTR [eax+0x20c],0x0
   20550:	00 00 00 
   20553:	eb 0d                	jmp    20562 <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:136
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
   20555:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20558:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   2055f:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:139
        }

        last = pcur;
   20562:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20565:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:140
        pcur = pcur->next;
   20568:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2056b:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20571:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   20574:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20578:	75 9a                	jne    20514 <fatfs_fat_read_sector+0x1b>
   2057a:	eb 01                	jmp    2057d <fatfs_fat_read_sector+0x84>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:126
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
            break;
   2057c:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:144
        last = pcur;
        pcur = pcur->next;
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
   2057d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20581:	74 29                	je     205ac <fatfs_fat_read_sector+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:146
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
   20583:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20586:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20589:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   2058f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   20592:	29 c1                	sub    ecx,eax
   20594:	89 c8                	mov    eax,ecx
   20596:	c1 e0 09             	shl    eax,0x9
   20599:	01 c2                	add    edx,eax
   2059b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2059e:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:147
        return pcur;
   205a4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   205a7:	e9 9e 00 00 00       	jmp    2064a <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:151
    }

    // Else, we removed the last item from the list
    pcur = last;
   205ac:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   205af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:154

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   205b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   205b5:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   205bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   205be:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:155
    fs->fat_buffer_head = pcur;
   205c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   205c7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   205ca:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:158

    // Writeback sector if changed
    if (pcur->dirty)
   205d0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   205d3:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   205d9:	85 c0                	test   eax,eax
   205db:	74 1c                	je     205f9 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:159
        if (!fatfs_fat_writeback(fs, pcur))
   205dd:	83 ec 08             	sub    esp,0x8
   205e0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   205e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   205e6:	e8 5c fe ff ff       	call   20447 <fatfs_fat_writeback>
   205eb:	83 c4 10             	add    esp,0x10
   205ee:	85 c0                	test   eax,eax
   205f0:	75 07                	jne    205f9 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:160
            return 0;
   205f2:	b8 00 00 00 00       	mov    eax,0x0
   205f7:	eb 51                	jmp    2064a <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:163

    // Address is now new sector
    pcur->address = sector;
   205f9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   205fc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   205ff:	89 90 00 02 00 00    	mov    DWORD PTR [eax+0x200],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:166

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
   20605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20608:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   2060b:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   2060e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20611:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   20617:	83 ec 04             	sub    esp,0x4
   2061a:	6a 01                	push   0x1
   2061c:	51                   	push   ecx
   2061d:	52                   	push   edx
   2061e:	ff d0                	call   eax
   20620:	83 c4 10             	add    esp,0x10
   20623:	85 c0                	test   eax,eax
   20625:	75 14                	jne    2063b <fatfs_fat_read_sector+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:169
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
   20627:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2062a:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   20631:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:170
        return NULL;
   20634:	b8 00 00 00 00       	mov    eax,0x0
   20639:	eb 0f                	jmp    2064a <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:173
    }

    pcur->ptr = pcur->sector;
   2063b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2063e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20641:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:174
    return pcur;
   20647:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:175
}
   2064a:	c9                   	leave  
   2064b:	c3                   	ret    

0002064c <fatfs_fat_purge>:
fatfs_fat_purge():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:180
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
   2064c:	55                   	push   ebp
   2064d:	89 e5                	mov    ebp,esp
   2064f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:181
    struct fat_buffer *pcur = fs->fat_buffer_head;
   20652:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20655:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   2065b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184

    // Itterate through sector buffer list
    while (pcur)
   2065e:	eb 35                	jmp    20695 <fatfs_fat_purge+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:187
    {
        // Writeback sector if changed
        if (pcur->dirty)
   20660:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20663:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20669:	85 c0                	test   eax,eax
   2066b:	74 1c                	je     20689 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:188
            if (!fatfs_fat_writeback(fs, pcur))
   2066d:	83 ec 08             	sub    esp,0x8
   20670:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20673:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20676:	e8 cc fd ff ff       	call   20447 <fatfs_fat_writeback>
   2067b:	83 c4 10             	add    esp,0x10
   2067e:	85 c0                	test   eax,eax
   20680:	75 07                	jne    20689 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:189
                return 0;
   20682:	b8 00 00 00 00       	mov    eax,0x0
   20687:	eb 17                	jmp    206a0 <fatfs_fat_purge+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:191

        pcur = pcur->next;
   20689:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2068c:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20692:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   20695:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20699:	75 c5                	jne    20660 <fatfs_fat_purge+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:194
                return 0;

        pcur = pcur->next;
    }

    return 1;
   2069b:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:195
}
   206a0:	c9                   	leave  
   206a1:	c3                   	ret    

000206a2 <fatfs_find_next_cluster>:
fatfs_find_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:206
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
   206a2:	55                   	push   ebp
   206a3:	89 e5                	mov    ebp,esp
   206a5:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:212
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
   206a8:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   206ac:	75 07                	jne    206b5 <fatfs_find_next_cluster+0x13>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:213
        current_cluster = 2;
   206ae:	c7 45 0c 02 00 00 00 	mov    DWORD PTR [ebp+0xc],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:216

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   206b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   206b8:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   206bb:	85 c0                	test   eax,eax
   206bd:	75 0b                	jne    206ca <fatfs_find_next_cluster+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:217
        fat_sector_offset = current_cluster / 256;
   206bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   206c2:	c1 e8 08             	shr    eax,0x8
   206c5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   206c8:	eb 09                	jmp    206d3 <fatfs_find_next_cluster+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:219
    else
        fat_sector_offset = current_cluster / 128;
   206ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   206cd:	c1 e8 07             	shr    eax,0x7
   206d0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:222

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   206d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   206d6:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   206d9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   206dc:	01 d0                	add    eax,edx
   206de:	83 ec 08             	sub    esp,0x8
   206e1:	50                   	push   eax
   206e2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   206e5:	e8 0f fe ff ff       	call   204f9 <fatfs_fat_read_sector>
   206ea:	83 c4 10             	add    esp,0x10
   206ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:223
    if (!pbuf)
   206f0:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   206f4:	75 0a                	jne    20700 <fatfs_find_next_cluster+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:224
        return (FAT32_LAST_CLUSTER);
   206f6:	b8 ff ff ff ff       	mov    eax,0xffffffff
   206fb:	e9 2a 01 00 00       	jmp    2082a <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:226

    if (fs->fat_type == FAT_TYPE_16)
   20700:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20703:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20706:	85 c0                	test   eax,eax
   20708:	75 71                	jne    2077b <fatfs_find_next_cluster+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:229
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;
   2070a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2070d:	c1 e0 08             	shl    eax,0x8
   20710:	89 c2                	mov    edx,eax
   20712:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20715:	29 d0                	sub    eax,edx
   20717:	01 c0                	add    eax,eax
   20719:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:232

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   2071c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2071f:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20725:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20728:	0f b7 d2             	movzx  edx,dx
   2072b:	83 c2 01             	add    edx,0x1
   2072e:	01 d0                	add    eax,edx
   20730:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20733:	0f b6 c0             	movzx  eax,al
   20736:	c1 e0 08             	shl    eax,0x8
   20739:	89 c1                	mov    ecx,eax
   2073b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2073e:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20744:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20747:	0f b7 c0             	movzx  eax,ax
   2074a:	01 d0                	add    eax,edx
   2074c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2074f:	0f b6 c0             	movzx  eax,al
   20752:	01 c8                	add    eax,ecx
   20754:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
   20757:	81 7d f0 f7 ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xfff7
   2075e:	0f 86 c3 00 00 00    	jbe    20827 <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235 (discriminator 1)
   20764:	81 7d f0 ff ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xffff
   2076b:	0f 87 b6 00 00 00    	ja     20827 <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:236
            return (FAT32_LAST_CLUSTER);
   20771:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20776:	e9 af 00 00 00       	jmp    2082a <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:241
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;
   2077b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2077e:	c1 e0 07             	shl    eax,0x7
   20781:	89 c2                	mov    edx,eax
   20783:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20786:	29 d0                	sub    eax,edx
   20788:	c1 e0 02             	shl    eax,0x2
   2078b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:244

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   2078e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20791:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20797:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   2079a:	0f b7 d2             	movzx  edx,dx
   2079d:	83 c2 03             	add    edx,0x3
   207a0:	01 d0                	add    eax,edx
   207a2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   207a5:	0f b6 c0             	movzx  eax,al
   207a8:	c1 e0 18             	shl    eax,0x18
   207ab:	89 c1                	mov    ecx,eax
   207ad:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   207b0:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   207b6:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   207b9:	0f b7 d2             	movzx  edx,dx
   207bc:	83 c2 02             	add    edx,0x2
   207bf:	01 d0                	add    eax,edx
   207c1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   207c4:	0f b6 c0             	movzx  eax,al
   207c7:	c1 e0 10             	shl    eax,0x10
   207ca:	01 c1                	add    ecx,eax
   207cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   207cf:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   207d5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   207d8:	0f b7 d2             	movzx  edx,dx
   207db:	83 c2 01             	add    edx,0x1
   207de:	01 d0                	add    eax,edx
   207e0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   207e3:	0f b6 c0             	movzx  eax,al
   207e6:	c1 e0 08             	shl    eax,0x8
   207e9:	01 c1                	add    ecx,eax
   207eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   207ee:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   207f4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   207f7:	0f b7 c0             	movzx  eax,ax
   207fa:	01 d0                	add    eax,edx
   207fc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   207ff:	0f b6 c0             	movzx  eax,al
   20802:	01 c8                	add    eax,ecx
   20804:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:247

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
   20807:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
   2080e:	81 7d f0 f7 ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xffffff7
   20815:	76 10                	jbe    20827 <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250 (discriminator 1)
   20817:	81 7d f0 ff ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xfffffff
   2081e:	77 07                	ja     20827 <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:251
            return (FAT32_LAST_CLUSTER);
   20820:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20825:	eb 03                	jmp    2082a <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:255
    }

    // Else return next cluster
    return (nextcluster);
   20827:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:256
}
   2082a:	c9                   	leave  
   2082b:	c3                   	ret    

0002082c <fatfs_set_fs_info_next_free_cluster>:
fatfs_set_fs_info_next_free_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:261
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
   2082c:	55                   	push   ebp
   2082d:	89 e5                	mov    ebp,esp
   2082f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:262
    if (fs->fat_type == FAT_TYPE_16)
   20832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20835:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20838:	85 c0                	test   eax,eax
   2083a:	0f 84 de 00 00 00    	je     2091e <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:267
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
   20840:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20843:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   20846:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20849:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   2084d:	0f b7 c0             	movzx  eax,ax
   20850:	01 d0                	add    eax,edx
   20852:	83 ec 08             	sub    esp,0x8
   20855:	50                   	push   eax
   20856:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20859:	e8 9b fc ff ff       	call   204f9 <fatfs_fat_read_sector>
   2085e:	83 c4 10             	add    esp,0x10
   20861:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:268
        if (!pbuf)
   20864:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20868:	0f 84 af 00 00 00    	je     2091d <fatfs_set_fs_info_next_free_cluster+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:272
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
   2086e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20871:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20877:	05 ec 01 00 00       	add    eax,0x1ec
   2087c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2087f:	88 10                	mov    BYTE PTR [eax],dl
   20881:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20884:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   2088a:	05 ed 01 00 00       	add    eax,0x1ed
   2088f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20892:	c1 ea 08             	shr    edx,0x8
   20895:	88 10                	mov    BYTE PTR [eax],dl
   20897:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2089a:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   208a0:	05 ee 01 00 00       	add    eax,0x1ee
   208a5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   208a8:	c1 ea 10             	shr    edx,0x10
   208ab:	88 10                	mov    BYTE PTR [eax],dl
   208ad:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208b0:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   208b6:	05 ef 01 00 00       	add    eax,0x1ef
   208bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   208be:	c1 ea 18             	shr    edx,0x18
   208c1:	88 10                	mov    BYTE PTR [eax],dl
   208c3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   208c6:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   208cd:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:273
        fs->next_free_cluster = newValue;
   208d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208d3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   208d6:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:276

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
   208d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208dc:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   208df:	85 c0                	test   eax,eax
   208e1:	74 1e                	je     20901 <fatfs_set_fs_info_next_free_cluster+0xd5>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:277
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);
   208e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208e6:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   208e9:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   208ec:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   208ef:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   208f5:	83 ec 04             	sub    esp,0x4
   208f8:	6a 01                	push   0x1
   208fa:	51                   	push   ecx
   208fb:	52                   	push   edx
   208fc:	ff d0                	call   eax
   208fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:280

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
   20901:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20904:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   2090b:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:281
        pbuf->dirty = 0;
   2090e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20911:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   20918:	00 00 00 
   2091b:	eb 01                	jmp    2091e <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:269
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
        if (!pbuf)
            return ;
   2091d:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:283

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
        pbuf->dirty = 0;
    }
}
   2091e:	c9                   	leave  
   2091f:	c3                   	ret    

00020920 <fatfs_find_blank_cluster>:
fatfs_find_blank_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:289
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
   20920:	55                   	push   ebp
   20921:	89 e5                	mov    ebp,esp
   20923:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:292
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    uint32 current_cluster = start_cluster;
   20926:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20929:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:298
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
   2092c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2092f:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20932:	85 c0                	test   eax,eax
   20934:	75 0b                	jne    20941 <fatfs_find_blank_cluster+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:299
            fat_sector_offset = current_cluster / 256;
   20936:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20939:	c1 e8 08             	shr    eax,0x8
   2093c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   2093f:	eb 09                	jmp    2094a <fatfs_find_blank_cluster+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:301
        else
            fat_sector_offset = current_cluster / 128;
   20941:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20944:	c1 e8 07             	shr    eax,0x7
   20947:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:303

        if ( fat_sector_offset < fs->fat_sectors)
   2094a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2094d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20950:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   20953:	0f 86 28 01 00 00    	jbe    20a81 <fatfs_find_blank_cluster+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:306
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2095c:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   2095f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20962:	01 d0                	add    eax,edx
   20964:	83 ec 08             	sub    esp,0x8
   20967:	50                   	push   eax
   20968:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2096b:	e8 89 fb ff ff       	call   204f9 <fatfs_fat_read_sector>
   20970:	83 c4 10             	add    esp,0x10
   20973:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:307
            if (!pbuf)
   20976:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   2097a:	75 0a                	jne    20986 <fatfs_find_blank_cluster+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:308
                return 0;
   2097c:	b8 00 00 00 00       	mov    eax,0x0
   20981:	e9 19 01 00 00       	jmp    20a9f <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:310

            if (fs->fat_type == FAT_TYPE_16)
   20986:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20989:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   2098c:	85 c0                	test   eax,eax
   2098e:	75 52                	jne    209e2 <fatfs_find_blank_cluster+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:313
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;
   20990:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20993:	c1 e0 08             	shl    eax,0x8
   20996:	89 c2                	mov    edx,eax
   20998:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2099b:	29 d0                	sub    eax,edx
   2099d:	01 c0                	add    eax,eax
   2099f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:316

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   209a2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   209a5:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   209ab:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   209ae:	0f b7 d2             	movzx  edx,dx
   209b1:	83 c2 01             	add    edx,0x1
   209b4:	01 d0                	add    eax,edx
   209b6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209b9:	0f b6 c0             	movzx  eax,al
   209bc:	c1 e0 08             	shl    eax,0x8
   209bf:	89 c1                	mov    ecx,eax
   209c1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   209c4:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   209ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   209cd:	0f b7 c0             	movzx  eax,ax
   209d0:	01 d0                	add    eax,edx
   209d2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209d5:	0f b6 c0             	movzx  eax,al
   209d8:	01 c8                	add    eax,ecx
   209da:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   209dd:	e9 93 00 00 00       	jmp    20a75 <fatfs_find_blank_cluster+0x155>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:321
            }
            else
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;
   209e2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   209e5:	c1 e0 07             	shl    eax,0x7
   209e8:	89 c2                	mov    edx,eax
   209ea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   209ed:	29 d0                	sub    eax,edx
   209ef:	c1 e0 02             	shl    eax,0x2
   209f2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:324

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   209f5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   209f8:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   209fe:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20a01:	0f b7 d2             	movzx  edx,dx
   20a04:	83 c2 03             	add    edx,0x3
   20a07:	01 d0                	add    eax,edx
   20a09:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20a0c:	0f b6 c0             	movzx  eax,al
   20a0f:	c1 e0 18             	shl    eax,0x18
   20a12:	89 c1                	mov    ecx,eax
   20a14:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20a17:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20a1d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20a20:	0f b7 d2             	movzx  edx,dx
   20a23:	83 c2 02             	add    edx,0x2
   20a26:	01 d0                	add    eax,edx
   20a28:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20a2b:	0f b6 c0             	movzx  eax,al
   20a2e:	c1 e0 10             	shl    eax,0x10
   20a31:	01 c1                	add    ecx,eax
   20a33:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20a36:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20a3c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20a3f:	0f b7 d2             	movzx  edx,dx
   20a42:	83 c2 01             	add    edx,0x1
   20a45:	01 d0                	add    eax,edx
   20a47:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20a4a:	0f b6 c0             	movzx  eax,al
   20a4d:	c1 e0 08             	shl    eax,0x8
   20a50:	01 c1                	add    ecx,eax
   20a52:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20a55:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20a5b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20a5e:	0f b7 c0             	movzx  eax,ax
   20a61:	01 d0                	add    eax,edx
   20a63:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20a66:	0f b6 c0             	movzx  eax,al
   20a69:	01 c8                	add    eax,ecx
   20a6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:327

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
   20a6e:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:330
            }

            if (nextcluster !=0 )
   20a75:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20a79:	74 0d                	je     20a88 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:331
                current_cluster++;
   20a7b:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   20a7f:	eb 07                	jmp    20a88 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:335
        }
        else
            // Otherwise, run out of FAT sectors to check...
            return 0;
   20a81:	b8 00 00 00 00       	mov    eax,0x0
   20a86:	eb 17                	jmp    20a9f <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:337
    }
    while (nextcluster != 0x0);
   20a88:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20a8c:	0f 85 9a fe ff ff    	jne    2092c <fatfs_find_blank_cluster+0xc>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:340

    // Found blank entry
    *free_cluster = current_cluster;
   20a92:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20a95:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20a98:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:341
    return 1;
   20a9a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:342
}
   20a9f:	c9                   	leave  
   20aa0:	c3                   	ret    

00020aa1 <fatfs_fat_set_cluster>:
fatfs_fat_set_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:350
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
   20aa1:	55                   	push   ebp
   20aa2:	89 e5                	mov    ebp,esp
   20aa4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:355
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   20aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20aaa:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20aad:	85 c0                	test   eax,eax
   20aaf:	75 0b                	jne    20abc <fatfs_fat_set_cluster+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:356
        fat_sector_offset = cluster / 256;
   20ab1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20ab4:	c1 e8 08             	shr    eax,0x8
   20ab7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20aba:	eb 09                	jmp    20ac5 <fatfs_fat_set_cluster+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:358
    else
        fat_sector_offset = cluster / 128;
   20abc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20abf:	c1 e8 07             	shr    eax,0x7
   20ac2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:361

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20ac5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20ac8:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20acb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20ace:	01 d0                	add    eax,edx
   20ad0:	83 ec 08             	sub    esp,0x8
   20ad3:	50                   	push   eax
   20ad4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20ad7:	e8 1d fa ff ff       	call   204f9 <fatfs_fat_read_sector>
   20adc:	83 c4 10             	add    esp,0x10
   20adf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:362
    if (!pbuf)
   20ae2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20ae6:	75 0a                	jne    20af2 <fatfs_fat_set_cluster+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:363
        return 0;
   20ae8:	b8 00 00 00 00       	mov    eax,0x0
   20aed:	e9 f2 00 00 00       	jmp    20be4 <fatfs_fat_set_cluster+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:365

    if (fs->fat_type == FAT_TYPE_16)
   20af2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20af5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20af8:	85 c0                	test   eax,eax
   20afa:	75 59                	jne    20b55 <fatfs_fat_set_cluster+0xb4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:368
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;
   20afc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20aff:	c1 e0 08             	shl    eax,0x8
   20b02:	89 c2                	mov    edx,eax
   20b04:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20b07:	29 d0                	sub    eax,edx
   20b09:	01 c0                	add    eax,eax
   20b0b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:371

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   20b0e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b11:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20b17:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20b1a:	0f b7 c0             	movzx  eax,ax
   20b1d:	01 d0                	add    eax,edx
   20b1f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b22:	88 10                	mov    BYTE PTR [eax],dl
   20b24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b27:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b2d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20b30:	0f b7 d2             	movzx  edx,dx
   20b33:	83 c2 01             	add    edx,0x1
   20b36:	01 d0                	add    eax,edx
   20b38:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b3b:	0f b7 d2             	movzx  edx,dx
   20b3e:	c1 fa 08             	sar    edx,0x8
   20b41:	88 10                	mov    BYTE PTR [eax],dl
   20b43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b46:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20b4d:	00 00 00 
   20b50:	e9 8a 00 00 00       	jmp    20bdf <fatfs_fat_set_cluster+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:376
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;
   20b55:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b58:	c1 e0 07             	shl    eax,0x7
   20b5b:	89 c2                	mov    edx,eax
   20b5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20b60:	29 d0                	sub    eax,edx
   20b62:	c1 e0 02             	shl    eax,0x2
   20b65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:379

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   20b68:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b6b:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20b71:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20b74:	0f b7 c0             	movzx  eax,ax
   20b77:	01 d0                	add    eax,edx
   20b79:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b7c:	88 10                	mov    BYTE PTR [eax],dl
   20b7e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b81:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b87:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20b8a:	0f b7 d2             	movzx  edx,dx
   20b8d:	83 c2 01             	add    edx,0x1
   20b90:	01 d0                	add    eax,edx
   20b92:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20b95:	c1 ea 08             	shr    edx,0x8
   20b98:	88 10                	mov    BYTE PTR [eax],dl
   20b9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20b9d:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20ba3:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20ba6:	0f b7 d2             	movzx  edx,dx
   20ba9:	83 c2 02             	add    edx,0x2
   20bac:	01 d0                	add    eax,edx
   20bae:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20bb1:	c1 ea 10             	shr    edx,0x10
   20bb4:	88 10                	mov    BYTE PTR [eax],dl
   20bb6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20bb9:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20bbf:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20bc2:	0f b7 d2             	movzx  edx,dx
   20bc5:	83 c2 03             	add    edx,0x3
   20bc8:	01 d0                	add    eax,edx
   20bca:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20bcd:	c1 ea 18             	shr    edx,0x18
   20bd0:	88 10                	mov    BYTE PTR [eax],dl
   20bd2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20bd5:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20bdc:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:382
    }

    return 1;
   20bdf:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:383
}
   20be4:	c9                   	leave  
   20be5:	c3                   	ret    

00020be6 <fatfs_free_cluster_chain>:
fatfs_free_cluster_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:390
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
   20be6:	55                   	push   ebp
   20be7:	89 e5                	mov    ebp,esp
   20be9:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:392
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
   20bec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20bef:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   20bf2:	eb 2d                	jmp    20c21 <fatfs_free_cluster_chain+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:397
    {
        last_cluster = next_cluster;
   20bf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20bf7:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:400

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   20bfa:	83 ec 08             	sub    esp,0x8
   20bfd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20c00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c03:	e8 9a fa ff ff       	call   206a2 <fatfs_find_next_cluster>
   20c08:	83 c4 10             	add    esp,0x10
   20c0b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:403

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
   20c0e:	83 ec 04             	sub    esp,0x4
   20c11:	6a 00                	push   0x0
   20c13:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20c16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c19:	e8 83 fe ff ff       	call   20aa1 <fatfs_fat_set_cluster>
   20c1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   20c21:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   20c25:	74 06                	je     20c2d <fatfs_free_cluster_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395 (discriminator 1)
   20c27:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20c2b:	75 c7                	jne    20bf4 <fatfs_free_cluster_chain+0xe>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:406

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
   20c2d:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:407
}
   20c32:	c9                   	leave  
   20c33:	c3                   	ret    

00020c34 <fatfs_fat_add_cluster_to_chain>:
fatfs_fat_add_cluster_to_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:415
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
   20c34:	55                   	push   ebp
   20c35:	89 e5                	mov    ebp,esp
   20c37:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:416
    uint32 last_cluster = FAT32_LAST_CLUSTER;
   20c3a:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:417
    uint32 next_cluster = start_cluster;
   20c41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20c44:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:419

    if (start_cluster == FAT32_LAST_CLUSTER)
   20c47:	83 7d 0c ff          	cmp    DWORD PTR [ebp+0xc],0xffffffff
   20c4b:	75 2e                	jne    20c7b <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:420
        return 0;
   20c4d:	b8 00 00 00 00       	mov    eax,0x0
   20c52:	eb 59                	jmp    20cad <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:425

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
    {
        last_cluster = next_cluster;
   20c54:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20c57:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:428

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   20c5a:	83 ec 08             	sub    esp,0x8
   20c5d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20c60:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c63:	e8 3a fa ff ff       	call   206a2 <fatfs_find_next_cluster>
   20c68:	83 c4 10             	add    esp,0x10
   20c6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:429
        if (!next_cluster)
   20c6e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20c72:	75 07                	jne    20c7b <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:430
            return 0;
   20c74:	b8 00 00 00 00       	mov    eax,0x0
   20c79:	eb 32                	jmp    20cad <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:423

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
   20c7b:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   20c7f:	75 d3                	jne    20c54 <fatfs_fat_add_cluster_to_chain+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:434
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
   20c81:	83 ec 04             	sub    esp,0x4
   20c84:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   20c87:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20c8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c8d:	e8 0f fe ff ff       	call   20aa1 <fatfs_fat_set_cluster>
   20c92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:437

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
   20c95:	83 ec 04             	sub    esp,0x4
   20c98:	6a ff                	push   0xffffffff
   20c9a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   20c9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20ca0:	e8 fc fd ff ff       	call   20aa1 <fatfs_fat_set_cluster>
   20ca5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:439

    return 1;
   20ca8:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:440
}
   20cad:	c9                   	leave  
   20cae:	c3                   	ret    

00020caf <fatfs_count_free_clusters>:
fatfs_count_free_clusters():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:446
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
   20caf:	55                   	push   ebp
   20cb0:	89 e5                	mov    ebp,esp
   20cb2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:448
    uint32 i,j;
    uint32 count = 0;
   20cb5:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   20cbc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20cc3:	e9 19 01 00 00       	jmp    20de1 <fatfs_count_free_clusters+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:454
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
   20cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20ccb:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20cce:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20cd1:	01 d0                	add    eax,edx
   20cd3:	83 ec 08             	sub    esp,0x8
   20cd6:	50                   	push   eax
   20cd7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20cda:	e8 1a f8 ff ff       	call   204f9 <fatfs_fat_read_sector>
   20cdf:	83 c4 10             	add    esp,0x10
   20ce2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:455
        if (!pbuf)
   20ce5:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   20ce9:	0f 84 03 01 00 00    	je     20df2 <fatfs_count_free_clusters+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   20cef:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   20cf6:	e9 d5 00 00 00       	jmp    20dd0 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:460
        {
            if (fs->fat_type == FAT_TYPE_16)
   20cfb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20cfe:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20d01:	85 c0                	test   eax,eax
   20d03:	75 49                	jne    20d4e <fatfs_count_free_clusters+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:462
            {
                if (FAT16_GET_16BIT_WORD(pbuf, (uint16)j) == 0)
   20d05:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d08:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d0e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20d11:	0f b7 d2             	movzx  edx,dx
   20d14:	83 c2 01             	add    edx,0x1
   20d17:	01 d0                	add    eax,edx
   20d19:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d1c:	0f b6 c0             	movzx  eax,al
   20d1f:	c1 e0 08             	shl    eax,0x8
   20d22:	89 c1                	mov    ecx,eax
   20d24:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d27:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20d2d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20d30:	0f b7 c0             	movzx  eax,ax
   20d33:	01 d0                	add    eax,edx
   20d35:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d38:	0f b6 c0             	movzx  eax,al
   20d3b:	01 c8                	add    eax,ecx
   20d3d:	85 c0                	test   eax,eax
   20d3f:	75 04                	jne    20d45 <fatfs_count_free_clusters+0x96>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:463
                    count++;
   20d41:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:465

                j += 2;
   20d45:	83 45 f0 02          	add    DWORD PTR [ebp-0x10],0x2
   20d49:	e9 82 00 00 00       	jmp    20dd0 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:469
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
   20d4e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d51:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d57:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20d5a:	0f b7 d2             	movzx  edx,dx
   20d5d:	83 c2 03             	add    edx,0x3
   20d60:	01 d0                	add    eax,edx
   20d62:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d65:	0f b6 c0             	movzx  eax,al
   20d68:	c1 e0 18             	shl    eax,0x18
   20d6b:	89 c1                	mov    ecx,eax
   20d6d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d70:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d76:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20d79:	0f b7 d2             	movzx  edx,dx
   20d7c:	83 c2 02             	add    edx,0x2
   20d7f:	01 d0                	add    eax,edx
   20d81:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d84:	0f b6 c0             	movzx  eax,al
   20d87:	c1 e0 10             	shl    eax,0x10
   20d8a:	01 c1                	add    ecx,eax
   20d8c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20d8f:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20d95:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20d98:	0f b7 d2             	movzx  edx,dx
   20d9b:	83 c2 01             	add    edx,0x1
   20d9e:	01 d0                	add    eax,edx
   20da0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20da3:	0f b6 c0             	movzx  eax,al
   20da6:	c1 e0 08             	shl    eax,0x8
   20da9:	01 c1                	add    ecx,eax
   20dab:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20dae:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20db4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20db7:	0f b7 c0             	movzx  eax,ax
   20dba:	01 d0                	add    eax,edx
   20dbc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20dbf:	0f b6 c0             	movzx  eax,al
   20dc2:	01 c8                	add    eax,ecx
   20dc4:	85 c0                	test   eax,eax
   20dc6:	75 04                	jne    20dcc <fatfs_count_free_clusters+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:470
                    count++;
   20dc8:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:472

                j += 4;
   20dcc:	83 45 f0 04          	add    DWORD PTR [ebp-0x10],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458 (discriminator 1)
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   20dd0:	81 7d f0 ff 01 00 00 	cmp    DWORD PTR [ebp-0x10],0x1ff
   20dd7:	0f 86 1e ff ff ff    	jbe    20cfb <fatfs_count_free_clusters+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 2)
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   20ddd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 1)
   20de1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20de4:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20de7:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   20dea:	0f 87 d8 fe ff ff    	ja     20cc8 <fatfs_count_free_clusters+0x19>
   20df0:	eb 01                	jmp    20df3 <fatfs_count_free_clusters+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:456
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;
   20df2:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:477
                j += 4;
            }
        }
    }

    return count;
   20df3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:478
}
   20df6:	c9                   	leave  
   20df7:	c3                   	ret    

00020df8 <fatfs_add_free_space>:
fatfs_add_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:46
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
   20df8:	55                   	push   ebp
   20df9:	89 e5                	mov    ebp,esp
   20dfb:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:49
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;
   20dfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20e01:	8b 00                	mov    eax,DWORD PTR [eax]
   20e03:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:52

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   20e06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e09:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   20e0c:	83 f8 ff             	cmp    eax,0xffffffff
   20e0f:	74 10                	je     20e21 <fatfs_add_free_space+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:53
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   20e11:	83 ec 08             	sub    esp,0x8
   20e14:	6a ff                	push   0xffffffff
   20e16:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e19:	e8 0e fa ff ff       	call   2082c <fatfs_set_fs_info_next_free_cluster>
   20e1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55

    for (i=0;i<clusters;i++)
   20e21:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20e28:	eb 67                	jmp    20e91 <fatfs_add_free_space+0x99>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:58
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   20e2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20e2d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   20e30:	83 ec 04             	sub    esp,0x4
   20e33:	8d 55 ec             	lea    edx,[ebp-0x14]
   20e36:	52                   	push   edx
   20e37:	50                   	push   eax
   20e38:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e3b:	e8 e0 fa ff ff       	call   20920 <fatfs_find_blank_cluster>
   20e40:	83 c4 10             	add    esp,0x10
   20e43:	85 c0                	test   eax,eax
   20e45:	74 3f                	je     20e86 <fatfs_add_free_space+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:61
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   20e47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e4a:	83 ec 04             	sub    esp,0x4
   20e4d:	50                   	push   eax
   20e4e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20e51:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e54:	e8 48 fc ff ff       	call   20aa1 <fatfs_fat_set_cluster>
   20e59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:64

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   20e5c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e5f:	83 ec 04             	sub    esp,0x4
   20e62:	6a ff                	push   0xffffffff
   20e64:	50                   	push   eax
   20e65:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20e68:	e8 34 fc ff ff       	call   20aa1 <fatfs_fat_set_cluster>
   20e6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:67

            // Adjust argument reference
            start = nextcluster;
   20e70:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e73:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:68
            if (i == 0)
   20e76:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20e7a:	75 11                	jne    20e8d <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:69
                *startCluster = nextcluster;
   20e7c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20e7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20e82:	89 10                	mov    DWORD PTR [eax],edx
   20e84:	eb 07                	jmp    20e8d <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:72
        }
        else
            return 0;
   20e86:	b8 00 00 00 00       	mov    eax,0x0
   20e8b:	eb 11                	jmp    20e9e <fatfs_add_free_space+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 2)

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   20e8d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 1)
   20e91:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20e94:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   20e97:	72 91                	jb     20e2a <fatfs_add_free_space+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:75
        }
        else
            return 0;
    }

    return 1;
   20e99:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:76 (discriminator 1)
}
   20e9e:	c9                   	leave  
   20e9f:	c3                   	ret    

00020ea0 <fatfs_allocate_free_space>:
fatfs_allocate_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:83
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
   20ea0:	55                   	push   ebp
   20ea1:	89 e5                	mov    ebp,esp
   20ea3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:88
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
   20ea6:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   20eaa:	75 0a                	jne    20eb6 <fatfs_allocate_free_space+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:89
        return 0;
   20eac:	b8 00 00 00 00       	mov    eax,0x0
   20eb1:	e9 c8 00 00 00       	jmp    20f7e <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:92

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   20eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20eb9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   20ebc:	83 f8 ff             	cmp    eax,0xffffffff
   20ebf:	74 10                	je     20ed1 <fatfs_allocate_free_space+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:93
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   20ec1:	83 ec 08             	sub    esp,0x8
   20ec4:	6a ff                	push   0xffffffff
   20ec6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20ec9:	e8 5e f9 ff ff       	call   2082c <fatfs_set_fs_info_next_free_cluster>
   20ece:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:96

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
   20ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20ed4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ed7:	0f b6 c0             	movzx  eax,al
   20eda:	c1 e0 09             	shl    eax,0x9
   20edd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:97
    clusterCount = (size / clusterSize);
   20ee0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   20ee3:	ba 00 00 00 00       	mov    edx,0x0
   20ee8:	f7 75 f0             	div    DWORD PTR [ebp-0x10]
   20eeb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:100

    // If any left over
    if (size-(clusterSize*clusterCount))
   20eee:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ef1:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   20ef5:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   20ef8:	74 04                	je     20efe <fatfs_allocate_free_space+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:101
        clusterCount++;
   20efa:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:104

    // Allocated first link in the chain if a new file
    if (newFile)
   20efe:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20f02:	74 4d                	je     20f51 <fatfs_allocate_free_space+0xb1>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:106
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   20f04:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20f07:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   20f0a:	83 ec 04             	sub    esp,0x4
   20f0d:	8d 55 ec             	lea    edx,[ebp-0x14]
   20f10:	52                   	push   edx
   20f11:	50                   	push   eax
   20f12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20f15:	e8 06 fa ff ff       	call   20920 <fatfs_find_blank_cluster>
   20f1a:	83 c4 10             	add    esp,0x10
   20f1d:	85 c0                	test   eax,eax
   20f1f:	75 07                	jne    20f28 <fatfs_allocate_free_space+0x88>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:107
            return 0;
   20f21:	b8 00 00 00 00       	mov    eax,0x0
   20f26:	eb 56                	jmp    20f7e <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:110

        // If this is all that is needed then all done
        if (clusterCount==1)
   20f28:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   20f2c:	75 2b                	jne    20f59 <fatfs_allocate_free_space+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:112
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   20f2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20f31:	83 ec 04             	sub    esp,0x4
   20f34:	6a ff                	push   0xffffffff
   20f36:	50                   	push   eax
   20f37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20f3a:	e8 62 fb ff ff       	call   20aa1 <fatfs_fat_set_cluster>
   20f3f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:113
            *startCluster = nextcluster;
   20f42:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20f45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20f48:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:114
            return 1;
   20f4a:	b8 01 00 00 00       	mov    eax,0x1
   20f4f:	eb 2d                	jmp    20f7e <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:119
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
   20f51:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20f54:	8b 00                	mov    eax,DWORD PTR [eax]
   20f56:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:121

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
   20f59:	83 ec 04             	sub    esp,0x4
   20f5c:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20f5f:	8d 45 ec             	lea    eax,[ebp-0x14]
   20f62:	50                   	push   eax
   20f63:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20f66:	e8 8d fe ff ff       	call   20df8 <fatfs_add_free_space>
   20f6b:	83 c4 10             	add    esp,0x10
   20f6e:	85 c0                	test   eax,eax
   20f70:	75 07                	jne    20f79 <fatfs_allocate_free_space+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:122
            return 0;
   20f72:	b8 00 00 00 00       	mov    eax,0x0
   20f77:	eb 05                	jmp    20f7e <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:124

    return 1;
   20f79:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:125 (discriminator 1)
}
   20f7e:	c9                   	leave  
   20f7f:	c3                   	ret    

00020f80 <fatfs_find_free_dir_offset>:
fatfs_find_free_dir_offset():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:131
//-----------------------------------------------------------------------------
// fatfs_find_free_dir_offset: Find a free space in the directory for a new entry
// which takes up 'entryCount' blocks (or allocate some more)
//-----------------------------------------------------------------------------
static int fatfs_find_free_dir_offset(struct fatfs *fs, uint32 dirCluster, int entryCount, uint32 *pSector, uint8 *pOffset)
{
   20f80:	55                   	push   ebp
   20f81:	89 e5                	mov    ebp,esp
   20f83:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:133
    struct fat_dir_entry *directoryEntry;
    uint8 item=0;
   20f86:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:134
    uint16 recordoffset = 0;
   20f8a:	66 c7 45 e6 00 00    	mov    WORD PTR [ebp-0x1a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:135
    uint8 i=0;
   20f90:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:136
    int x=0;
   20f94:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:137
    int possible_spaces = 0;
   20f9b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:138
    int start_recorded = 0;
   20fa2:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:141

    // No entries required?
    if (entryCount == 0)
   20fa9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   20fad:	75 0a                	jne    20fb9 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:142
        return 0;
   20faf:	b8 00 00 00 00       	mov    eax,0x0
   20fb4:	e9 fd 01 00 00       	jmp    211b6 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   20fb9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20fbc:	8d 50 01             	lea    edx,[eax+0x1]
   20fbf:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   20fc2:	6a 00                	push   0x0
   20fc4:	50                   	push   eax
   20fc5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20fc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20fcb:	e8 34 a3 ff ff       	call   1b304 <fatfs_sector_reader>
   20fd0:	83 c4 10             	add    esp,0x10
   20fd3:	85 c0                	test   eax,eax
   20fd5:	0f 84 1a 01 00 00    	je     210f5 <fatfs_find_free_dir_offset+0x175>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   20fdb:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   20fdf:	e9 02 01 00 00       	jmp    210e6 <fatfs_find_free_dir_offset+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:154
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   20fe4:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   20fe8:	c1 e0 05             	shl    eax,0x5
   20feb:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:157

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   20fef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20ff2:	8d 50 44             	lea    edx,[eax+0x44]
   20ff5:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   20ff9:	01 d0                	add    eax,edx
   20ffb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:160

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   20ffe:	83 ec 0c             	sub    esp,0xc
   21001:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   21004:	e8 09 e4 ff ff       	call   1f412 <fatfs_entry_lfn_text>
   21009:	83 c4 10             	add    esp,0x10
   2100c:	85 c0                	test   eax,eax
   2100e:	74 2c                	je     2103c <fatfs_find_free_dir_offset+0xbc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:163
                {
                    // First entry?
                    if (possible_spaces == 0)
   21010:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21014:	75 1d                	jne    21033 <fatfs_find_free_dir_offset+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:166
                    {
                        // Store start
                        *pSector = x-1;
   21016:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21019:	83 e8 01             	sub    eax,0x1
   2101c:	89 c2                	mov    edx,eax
   2101e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   21021:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:167
                        *pOffset = item;
   21023:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   21026:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2102a:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:168
                        start_recorded = 1;
   2102c:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:173
                    }

                    // Increment the count in-case the file turns
                    // out to be deleted...
                    possible_spaces++;
   21033:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   21037:	e9 a0 00 00 00       	jmp    210dc <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:179
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   2103c:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   21040:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21043:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   21048:	3c e5                	cmp    al,0xe5
   2104a:	75 39                	jne    21085 <fatfs_find_free_dir_offset+0x105>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:182
                    {
                        // First entry?
                        if (possible_spaces == 0)
   2104c:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21050:	75 1d                	jne    2106f <fatfs_find_free_dir_offset+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:185
                        {
                            // Store start
                            *pSector = x-1;
   21052:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21055:	83 e8 01             	sub    eax,0x1
   21058:	89 c2                	mov    edx,eax
   2105a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2105d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:186
                            *pOffset = item;
   2105f:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   21062:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   21066:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:187
                            start_recorded = 1;
   21068:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:190
                        }

                        possible_spaces++;
   2106f:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:193

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   21073:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21076:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   21079:	7c 61                	jl     210dc <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:194
                            return 1;
   2107b:	b8 01 00 00 00       	mov    eax,0x1
   21080:	e9 31 01 00 00       	jmp    211b6 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:199

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   21085:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   21089:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2108c:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   21091:	84 c0                	test   al,al
   21093:	75 39                	jne    210ce <fatfs_find_free_dir_offset+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:202
                    {
                        // First entry?
                        if (possible_spaces == 0)
   21095:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21099:	75 1d                	jne    210b8 <fatfs_find_free_dir_offset+0x138>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:205
                        {
                            // Store start
                            *pSector = x-1;
   2109b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2109e:	83 e8 01             	sub    eax,0x1
   210a1:	89 c2                	mov    edx,eax
   210a3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   210a6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:206
                            *pOffset = item;
   210a8:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   210ab:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   210af:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:207
                            start_recorded = 1;
   210b1:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:211
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   210b8:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:214

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   210bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   210bf:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   210c2:	7c 18                	jl     210dc <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:215
                            return 1;
   210c4:	b8 01 00 00 00       	mov    eax,0x1
   210c9:	e9 e8 00 00 00       	jmp    211b6 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:221
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   210ce:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:222
                        start_recorded = 0;
   210d5:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   210dc:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   210e0:	83 c0 01             	add    eax,0x1
   210e3:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 1)
   210e6:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   210ea:	0f 86 f4 fe ff ff    	jbe    20fe4 <fatfs_find_free_dir_offset+0x64>
   210f0:	e9 c4 fe ff ff       	jmp    20fb9 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:233
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
   210f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   210f8:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   210fb:	83 ec 04             	sub    esp,0x4
   210fe:	8d 55 dc             	lea    edx,[ebp-0x24]
   21101:	52                   	push   edx
   21102:	50                   	push   eax
   21103:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21106:	e8 15 f8 ff ff       	call   20920 <fatfs_find_blank_cluster>
   2110b:	83 c4 10             	add    esp,0x10
   2110e:	85 c0                	test   eax,eax
   21110:	75 0a                	jne    2111c <fatfs_find_free_dir_offset+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:234
                return 0;
   21112:	b8 00 00 00 00       	mov    eax,0x0
   21117:	e9 9a 00 00 00       	jmp    211b6 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:237

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
   2111c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   2111f:	83 ec 04             	sub    esp,0x4
   21122:	50                   	push   eax
   21123:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21126:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21129:	e8 06 fb ff ff       	call   20c34 <fatfs_fat_add_cluster_to_chain>
   2112e:	83 c4 10             	add    esp,0x10
   21131:	85 c0                	test   eax,eax
   21133:	75 07                	jne    2113c <fatfs_find_free_dir_offset+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:238
                return 0;
   21135:	b8 00 00 00 00       	mov    eax,0x0
   2113a:	eb 7a                	jmp    211b6 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:241

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
   2113c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2113f:	83 c0 44             	add    eax,0x44
   21142:	83 ec 04             	sub    esp,0x4
   21145:	68 00 02 00 00       	push   0x200
   2114a:	6a 00                	push   0x0
   2114c:	50                   	push   eax
   2114d:	e8 2b 3f 00 00       	call   2507d <memset>
   21152:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242
            for (i=0;i<fs->sectors_per_cluster;i++)
   21155:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   21159:	eb 2b                	jmp    21186 <fatfs_find_free_dir_offset+0x206>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:244
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
   2115b:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   2115f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   21162:	6a 00                	push   0x0
   21164:	52                   	push   edx
   21165:	50                   	push   eax
   21166:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21169:	e8 eb a3 ff ff       	call   1b559 <fatfs_write_sector>
   2116e:	83 c4 10             	add    esp,0x10
   21171:	85 c0                	test   eax,eax
   21173:	75 07                	jne    2117c <fatfs_find_free_dir_offset+0x1fc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:245
                    return 0;
   21175:	b8 00 00 00 00       	mov    eax,0x0
   2117a:	eb 3a                	jmp    211b6 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 2)
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
   2117c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   21180:	83 c0 01             	add    eax,0x1
   21183:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 1)
   21186:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21189:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2118c:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   2118f:	77 ca                	ja     2115b <fatfs_find_free_dir_offset+0x1db>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:249
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded)
   21191:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   21195:	75 1a                	jne    211b1 <fatfs_find_free_dir_offset+0x231>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:252
            {
                // Store start
                *pSector = (x-1);
   21197:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2119a:	83 e8 01             	sub    eax,0x1
   2119d:	89 c2                	mov    edx,eax
   2119f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   211a2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:253
                *pOffset = 0;
   211a4:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   211a7:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:254
                start_recorded = 1;
   211aa:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:257
            }

            return 1;
   211b1:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:262 (discriminator 2)
        }
    } // End of while loop

    return 0;
}
   211b6:	c9                   	leave  
   211b7:	c3                   	ret    

000211b8 <fatfs_add_file_entry>:
fatfs_add_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:267
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
   211b8:	55                   	push   ebp
   211b9:	89 e5                	mov    ebp,esp
   211bb:	83 ec 58             	sub    esp,0x58
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:268
    uint8 item=0;
   211be:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:269
    uint16 recordoffset = 0;
   211c2:	66 c7 45 da 00 00    	mov    WORD PTR [ebp-0x26],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:270
    uint8 i=0;
   211c8:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:271
    uint32 x=0;
   211cc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:274
    int entryCount;
    struct fat_dir_entry shortEntry;
    int dirtySector = 0;
   211d3:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:276

    uint32 dirSector = 0;
   211da:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:277
    uint8 dirOffset = 0;
   211e1:	c6 45 b3 00          	mov    BYTE PTR [ebp-0x4d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:278
    int foundEnd = 0;
   211e5:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:284

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
   211ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   211ef:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   211f2:	85 c0                	test   eax,eax
   211f4:	75 0a                	jne    21200 <fatfs_add_file_entry+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:285
        return 0;
   211f6:	b8 00 00 00 00       	mov    eax,0x0
   211fb:	e9 0c 02 00 00       	jmp    2140c <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:290

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
   21200:	83 ec 0c             	sub    esp,0xc
   21203:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   21206:	e8 55 e3 ff ff       	call   1f560 <fatfs_lfn_entries_required>
   2120b:	83 c4 10             	add    esp,0x10
   2120e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:291
    if (!entryCount)
   21211:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21215:	75 0a                	jne    21221 <fatfs_add_file_entry+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:292
        return 0;
   21217:	b8 00 00 00 00       	mov    eax,0x0
   2121c:	e9 eb 01 00 00       	jmp    2140c <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:299
    entryCount = 0;
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
   21221:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21224:	8d 50 01             	lea    edx,[eax+0x1]
   21227:	83 ec 0c             	sub    esp,0xc
   2122a:	8d 45 b3             	lea    eax,[ebp-0x4d]
   2122d:	50                   	push   eax
   2122e:	8d 45 b4             	lea    eax,[ebp-0x4c]
   21231:	50                   	push   eax
   21232:	52                   	push   edx
   21233:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21236:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21239:	e8 42 fd ff ff       	call   20f80 <fatfs_find_free_dir_offset>
   2123e:	83 c4 20             	add    esp,0x20
   21241:	85 c0                	test   eax,eax
   21243:	75 0a                	jne    2124f <fatfs_add_file_entry+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:300
        return 0;
   21245:	b8 00 00 00 00       	mov    eax,0x0
   2124a:	e9 bd 01 00 00       	jmp    2140c <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:303

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
   2124f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   21252:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:304
    checksum = 0;
   21255:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   21259:	c6 45 f6 0b          	mov    BYTE PTR [ebp-0xa],0xb
   2125d:	eb 3b                	jmp    2129a <fatfs_add_file_entry+0xe2>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 7)
   2125f:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   21263:	83 e0 01             	and    eax,0x1
   21266:	85 c0                	test   eax,eax
   21268:	74 07                	je     21271 <fatfs_add_file_entry+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 2)
   2126a:	ba 80 ff ff ff       	mov    edx,0xffffff80
   2126f:	eb 05                	jmp    21276 <fatfs_add_file_entry+0xbe>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 3)
   21271:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 5)
   21276:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   2127a:	d0 e8                	shr    al,1
   2127c:	8d 0c 02             	lea    ecx,[edx+eax*1]
   2127f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   21282:	8d 50 01             	lea    edx,[eax+0x1]
   21285:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
   21288:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2128b:	01 c8                	add    eax,ecx
   2128d:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
   21290:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   21294:	83 e8 01             	sub    eax,0x1
   21297:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 6)
   2129a:	80 7d f6 00          	cmp    BYTE PTR [ebp-0xa],0x0
   2129e:	75 bf                	jne    2125f <fatfs_add_file_entry+0xa7>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:308

    // Start from current sector where space was found!
    x = dirSector;
   212a0:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   212a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:314

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   212a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   212a9:	8d 50 01             	lea    edx,[eax+0x1]
   212ac:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   212af:	6a 00                	push   0x0
   212b1:	50                   	push   eax
   212b2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   212b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   212b8:	e8 47 a0 ff ff       	call   1b304 <fatfs_sector_reader>
   212bd:	83 c4 10             	add    esp,0x10
   212c0:	85 c0                	test   eax,eax
   212c2:	0f 84 3f 01 00 00    	je     21407 <fatfs_add_file_entry+0x24f>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   212c8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   212cc:	e9 ea 00 00 00       	jmp    213bb <fatfs_add_file_entry+0x203>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:320
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   212d1:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   212d5:	c1 e0 05             	shl    eax,0x5
   212d8:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:323

                // If the start position for the entry has been found
                if (foundEnd==0)
   212dc:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   212e0:	75 1d                	jne    212ff <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
   212e2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   212e5:	8d 50 ff             	lea    edx,[eax-0x1]
   212e8:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   212eb:	39 c2                	cmp    edx,eax
   212ed:	75 10                	jne    212ff <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324 (discriminator 1)
   212ef:	0f b6 45 b3          	movzx  eax,BYTE PTR [ebp-0x4d]
   212f3:	3a 45 f7             	cmp    al,BYTE PTR [ebp-0x9]
   212f6:	75 07                	jne    212ff <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:325
                        foundEnd = 1;
   212f8:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:328

                // Start adding filename
                if (foundEnd)
   212ff:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   21303:	0f 84 a8 00 00 00    	je     213b1 <fatfs_add_file_entry+0x1f9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:330
                {
                    if (entryCount==0)
   21309:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   2130d:	75 74                	jne    21383 <fatfs_add_file_entry+0x1cb>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:333
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
   2130f:	83 ec 0c             	sub    esp,0xc
   21312:	ff 75 20             	push   DWORD PTR [ebp+0x20]
   21315:	8d 45 ba             	lea    eax,[ebp-0x46]
   21318:	50                   	push   eax
   21319:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   2131c:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   2131f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   21322:	e8 e8 e3 ff ff       	call   1f70f <fatfs_sfn_create_entry>
   21327:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:337

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
   2132a:	6a 01                	push   0x1
   2132c:	6a 01                	push   0x1
   2132e:	6a 01                	push   0x1
   21330:	8d 45 ba             	lea    eax,[ebp-0x46]
   21333:	50                   	push   eax
   21334:	e8 3b a7 ff ff       	call   1ba74 <fatfs_update_timestamps>
   21339:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:340
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   2133c:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
   21340:	8d 50 40             	lea    edx,[eax+0x40]
   21343:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21346:	01 d0                	add    eax,edx
   21348:	8d 50 04             	lea    edx,[eax+0x4]
   2134b:	83 ec 04             	sub    esp,0x4
   2134e:	6a 20                	push   0x20
   21350:	8d 45 ba             	lea    eax,[ebp-0x46]
   21353:	50                   	push   eax
   21354:	52                   	push   edx
   21355:	e8 fe 47 00 00       	call   25b58 <memcpy>
   2135a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:343

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   2135d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21360:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   21363:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21366:	8d 4a 44             	lea    ecx,[edx+0x44]
   21369:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2136c:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   21372:	83 ec 04             	sub    esp,0x4
   21375:	6a 01                	push   0x1
   21377:	51                   	push   ecx
   21378:	52                   	push   edx
   21379:	ff d0                	call   eax
   2137b:	83 c4 10             	add    esp,0x10
   2137e:	e9 89 00 00 00       	jmp    2140c <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:348
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   21383:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:351

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   21387:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   2138b:	0f b7 55 da          	movzx  edx,WORD PTR [ebp-0x26]
   2138f:	8d 4a 40             	lea    ecx,[edx+0x40]
   21392:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21395:	01 ca                	add    edx,ecx
   21397:	83 c2 04             	add    edx,0x4
   2139a:	50                   	push   eax
   2139b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2139e:	52                   	push   edx
   2139f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   213a2:	e8 fa e1 ff ff       	call   1f5a1 <fatfs_filename_to_lfn>
   213a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:352
                        dirtySector = 1;
   213aa:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   213b1:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   213b5:	83 c0 01             	add    eax,0x1
   213b8:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 1)
   213bb:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   213bf:	0f 86 0c ff ff ff    	jbe    212d1 <fatfs_add_file_entry+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:359
#endif
                }
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
   213c5:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   213c9:	0f 84 d7 fe ff ff    	je     212a6 <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:361
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
   213cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213d2:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   213d5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   213d8:	8d 4a 44             	lea    ecx,[edx+0x44]
   213db:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   213de:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   213e4:	83 ec 04             	sub    esp,0x4
   213e7:	6a 01                	push   0x1
   213e9:	51                   	push   ecx
   213ea:	52                   	push   edx
   213eb:	ff d0                	call   eax
   213ed:	83 c4 10             	add    esp,0x10
   213f0:	85 c0                	test   eax,eax
   213f2:	75 07                	jne    213fb <fatfs_add_file_entry+0x243>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:362
                    return 0;
   213f4:	b8 00 00 00 00       	mov    eax,0x0
   213f9:	eb 11                	jmp    2140c <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:364

                dirtySector = 0;
   213fb:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   21402:	e9 9f fe ff ff       	jmp    212a6 <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:368
            }
        }
        else
            return 0;
   21407:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:372 (discriminator 2)
    } // End of while loop

    return 0;
}
   2140c:	c9                   	leave  
   2140d:	c3                   	ret    
   2140e:	66 90                	xchg   ax,ax

00021410 <printMBR>:
printMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:13
uint8_t partBuffer[512*20]; //10240
gptHeader_t* gptHdr;
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
   21410:	55                   	push   ebp
   21411:	89 e5                	mov    ebp,esp
   21413:	57                   	push   edi
   21414:	56                   	push   esi
   21415:	53                   	push   ebx
   21416:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:14
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
   21419:	83 ec 0c             	sub    esp,0xc
   2141c:	68 c0 38 08 00       	push   0x838c0
   21421:	e8 cd 5d 00 00       	call   271f3 <printk>
   21426:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   21429:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   21430:	e9 8b 00 00 00       	jmp    214c0 <printMBR+0xb0>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:17
    {
        if (mbr->parts[cnt].partStartSector>0)
   21435:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21438:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2143b:	c1 e2 04             	shl    edx,0x4
   2143e:	01 d0                	add    eax,edx
   21440:	8b 00                	mov    eax,DWORD PTR [eax]
   21442:	85 c0                	test   eax,eax
   21444:	74 76                	je     214bc <printMBR+0xac>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
   21446:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21449:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2144c:	c1 e2 04             	shl    edx,0x4
   2144f:	01 d0                	add    eax,edx
   21451:	83 c0 0c             	add    eax,0xc
   21454:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21457:	84 c0                	test   al,al
   21459:	74 07                	je     21462 <printMBR+0x52>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 1)
   2145b:	bf e7 38 08 00       	mov    edi,0x838e7
   21460:	eb 05                	jmp    21467 <printMBR+0x57>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 2)
   21462:	bf e9 38 08 00       	mov    edi,0x838e9
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 4)
   21467:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2146a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2146d:	c1 e2 04             	shl    edx,0x4
   21470:	01 d0                	add    eax,edx
   21472:	83 c0 0d             	add    eax,0xd
   21475:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21478:	0f b6 d8             	movzx  ebx,al
   2147b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2147e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21481:	c1 e2 04             	shl    edx,0x4
   21484:	01 d0                	add    eax,edx
   21486:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   21489:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2148c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2148f:	c1 e2 04             	shl    edx,0x4
   21492:	01 d0                	add    eax,edx
   21494:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   21497:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2149a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   2149d:	c1 e6 04             	shl    esi,0x4
   214a0:	01 f0                	add    eax,esi
   214a2:	8b 00                	mov    eax,DWORD PTR [eax]
   214a4:	83 ec 04             	sub    esp,0x4
   214a7:	57                   	push   edi
   214a8:	53                   	push   ebx
   214a9:	51                   	push   ecx
   214aa:	52                   	push   edx
   214ab:	50                   	push   eax
   214ac:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   214af:	68 eb 38 08 00       	push   0x838eb
   214b4:	e8 3a 5d 00 00       	call   271f3 <printk>
   214b9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 2)
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   214bc:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 1)
   214c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   214c3:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   214c9:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   214cc:	0f 8f 63 ff ff ff    	jg     21435 <printMBR+0x25>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:20
    {
        if (mbr->parts[cnt].partStartSector>0)
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
    }
    printk("\n");
   214d2:	83 ec 0c             	sub    esp,0xc
   214d5:	68 02 39 08 00       	push   0x83902
   214da:	e8 14 5d 00 00       	call   271f3 <printk>
   214df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:21
}
   214e2:	90                   	nop
   214e3:	8d 65 f4             	lea    esp,[ebp-0xc]
   214e6:	5b                   	pop    ebx
   214e7:	5e                   	pop    esi
   214e8:	5f                   	pop    edi
   214e9:	5d                   	pop    ebp
   214ea:	c3                   	ret    

000214eb <parseMBR>:
parseMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:24
    
bool parseMBR(struct ataDeviceInfo_t* devInfo, struct mbr_t* mbr)
{
   214eb:	55                   	push   ebp
   214ec:	89 e5                	mov    ebp,esp
   214ee:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:25
    HBA_PORT* port=(HBA_PORT*)devInfo->ioPort;
   214f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   214f4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   214fa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:27
    
    memset(mbr,0,sizeof(struct mbr_t));
   214fd:	83 ec 04             	sub    esp,0x4
   21500:	68 17 04 00 00       	push   0x417
   21505:	6a 00                	push   0x0
   21507:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2150a:	e8 6e 3b 00 00       	call   2507d <memset>
   2150f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:28
    mbr->parts[0].partStartSector=0;
   21512:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21515:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:29
    printd(DEBUG_HARDDRIVE,"devInfo->ABAR=0x%08X\n",devInfo->ABAR);
   2151b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2151e:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   21524:	83 ec 04             	sub    esp,0x4
   21527:	50                   	push   eax
   21528:	68 04 39 08 00       	push   0x83904
   2152d:	6a 08                	push   0x8
   2152f:	e8 df 5c 00 00       	call   27213 <printd>
   21534:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:30
    if (devInfo->ABAR)
   21537:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2153a:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   21540:	85 c0                	test   eax,eax
   21542:	74 66                	je     215aa <parseMBR+0xbf>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:32
    {
        printd(DEBUG_HARDDRIVE,"Disk is SATA\n");
   21544:	83 ec 08             	sub    esp,0x8
   21547:	68 1a 39 08 00       	push   0x8391a
   2154c:	6a 08                	push   0x8
   2154e:	e8 c0 5c 00 00       	call   27213 <printd>
   21553:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:33
        ahciSetCurrentDisk(port);
   21556:	83 ec 0c             	sub    esp,0xc
   21559:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2155c:	e8 6e 3a ff ff       	call   14fcf <ahciSetCurrentDisk>
   21561:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:34
        bool lResult=ahciRead(port,0,mbrBuffer,1);
   21564:	6a 01                	push   0x1
   21566:	68 a0 8d 09 00       	push   0x98da0
   2156b:	6a 00                	push   0x0
   2156d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21570:	e8 8e 3a ff ff       	call   15003 <ahciRead>
   21575:	83 c4 10             	add    esp,0x10
   21578:	85 c0                	test   eax,eax
   2157a:	0f 95 c0             	setne  al
   2157d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:35
        if (!lResult)
   21580:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   21584:	83 f0 01             	xor    eax,0x1
   21587:	84 c0                	test   al,al
   21589:	74 75                	je     21600 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:37
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   2158b:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   2158f:	83 ec 08             	sub    esp,0x8
   21592:	50                   	push   eax
   21593:	68 28 39 08 00       	push   0x83928
   21598:	e8 56 5c 00 00       	call   271f3 <printk>
   2159d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:38
            return false;
   215a0:	b8 00 00 00 00       	mov    eax,0x0
   215a5:	e9 98 03 00 00       	jmp    21942 <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:43
        }
    }
    else
    {
        printd(DEBUG_HARDDRIVE,"Disk is ATA\n");
   215aa:	83 ec 08             	sub    esp,0x8
   215ad:	68 48 39 08 00       	push   0x83948
   215b2:	6a 08                	push   0x8
   215b4:	e8 5a 5c 00 00       	call   27213 <printd>
   215b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:44
        int lResult=ataReadDisk(devInfo, mbr->parts, 0, mbrBuffer, 1);
   215bc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   215bf:	83 ec 0c             	sub    esp,0xc
   215c2:	6a 01                	push   0x1
   215c4:	68 a0 8d 09 00       	push   0x98da0
   215c9:	6a 00                	push   0x0
   215cb:	50                   	push   eax
   215cc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   215cf:	e8 ff 14 00 00       	call   22ad3 <ataReadDisk>
   215d4:	83 c4 20             	add    esp,0x20
   215d7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:45
        if (lResult!=512)
   215da:	81 7d ec 00 02 00 00 	cmp    DWORD PTR [ebp-0x14],0x200
   215e1:	74 1d                	je     21600 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:47
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   215e3:	83 ec 08             	sub    esp,0x8
   215e6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   215e9:	68 28 39 08 00       	push   0x83928
   215ee:	e8 00 5c 00 00       	call   271f3 <printk>
   215f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:48
            return false;
   215f6:	b8 00 00 00 00       	mov    eax,0x0
   215fb:	e9 42 03 00 00       	jmp    21942 <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:51
        }
    }
    memcpy(mbr->diskID, &mbrBuffer[0x1b4], 10);
   21600:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21603:	05 04 04 00 00       	add    eax,0x404
   21608:	83 ec 04             	sub    esp,0x4
   2160b:	6a 0a                	push   0xa
   2160d:	68 54 8f 09 00       	push   0x98f54
   21612:	50                   	push   eax
   21613:	e8 40 45 00 00       	call   25b58 <memcpy>
   21618:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52
    mbr->validBootSector=mbrBuffer[0x1FE]==0x55 && mbrBuffer[0x1FF]==0xAA;
   2161b:	0f b6 05 9e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9e
   21622:	3c 55                	cmp    al,0x55
   21624:	75 12                	jne    21638 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 1)
   21626:	0f b6 05 9f 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9f
   2162d:	3c aa                	cmp    al,0xaa
   2162f:	75 07                	jne    21638 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 3)
   21631:	b8 01 00 00 00       	mov    eax,0x1
   21636:	eb 05                	jmp    2163d <parseMBR+0x152>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 4)
   21638:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 6)
   2163d:	83 e0 01             	and    eax,0x1
   21640:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21643:	88 82 0e 04 00 00    	mov    BYTE PTR [edx+0x40e],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:53 (discriminator 6)
    mbr->parts[0].bootable = mbrBuffer[MBR_PART1_OFFSET+0]==0x80;
   21649:	0f b6 05 5e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f5e
   21650:	3c 80                	cmp    al,0x80
   21652:	0f 94 c2             	sete   dl
   21655:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21658:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:54 (discriminator 6)
    mbr->parts[0].systemID = mbrBuffer[MBR_PART1_OFFSET+4];
   2165b:	0f b6 15 62 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f62
   21662:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21665:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:55 (discriminator 6)
    mbr->parts[0].partStartSector = mbrBuffer[MBR_PART1_OFFSET+8] | (mbrBuffer[MBR_PART1_OFFSET+9]<<8) | (mbrBuffer[MBR_PART1_OFFSET+10]<<16) | (mbrBuffer[MBR_PART1_OFFSET+11]<<24);
   21668:	0f b6 05 66 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f66
   2166f:	0f b6 c0             	movzx  eax,al
   21672:	0f b6 15 67 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f67
   21679:	0f b6 d2             	movzx  edx,dl
   2167c:	c1 e2 08             	shl    edx,0x8
   2167f:	09 c2                	or     edx,eax
   21681:	0f b6 05 68 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f68
   21688:	0f b6 c0             	movzx  eax,al
   2168b:	c1 e0 10             	shl    eax,0x10
   2168e:	09 c2                	or     edx,eax
   21690:	0f b6 05 69 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f69
   21697:	0f b6 c0             	movzx  eax,al
   2169a:	c1 e0 18             	shl    eax,0x18
   2169d:	09 d0                	or     eax,edx
   2169f:	89 c2                	mov    edx,eax
   216a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   216a4:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:56 (discriminator 6)
    mbr->parts[0].partTotalSectors = mbrBuffer[MBR_PART1_OFFSET+12] | (mbrBuffer[MBR_PART1_OFFSET+13]<<8) | (mbrBuffer[MBR_PART1_OFFSET+14]<<16) | (mbrBuffer[MBR_PART1_OFFSET+15]<<24);
   216a6:	0f b6 05 6a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6a
   216ad:	0f b6 c0             	movzx  eax,al
   216b0:	0f b6 15 6b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f6b
   216b7:	0f b6 d2             	movzx  edx,dl
   216ba:	c1 e2 08             	shl    edx,0x8
   216bd:	09 c2                	or     edx,eax
   216bf:	0f b6 05 6c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6c
   216c6:	0f b6 c0             	movzx  eax,al
   216c9:	c1 e0 10             	shl    eax,0x10
   216cc:	09 c2                	or     edx,eax
   216ce:	0f b6 05 6d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6d
   216d5:	0f b6 c0             	movzx  eax,al
   216d8:	c1 e0 18             	shl    eax,0x18
   216db:	09 d0                	or     eax,edx
   216dd:	89 c2                	mov    edx,eax
   216df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   216e2:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:57 (discriminator 6)
    mbr->parts[0].partEndSector = mbr->parts[0].partStartSector + mbr->parts[0].partTotalSectors;
   216e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   216e8:	8b 10                	mov    edx,DWORD PTR [eax]
   216ea:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   216ed:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   216f0:	01 c2                	add    edx,eax
   216f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   216f5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:59 (discriminator 6)

    mbr->parts[1].bootable = mbrBuffer[MBR_PART2_OFFSET+0]==0x80;
   216f8:	0f b6 05 6e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6e
   216ff:	3c 80                	cmp    al,0x80
   21701:	0f 94 c2             	sete   dl
   21704:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21707:	88 50 1c             	mov    BYTE PTR [eax+0x1c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:60 (discriminator 6)
    mbr->parts[1].systemID = mbrBuffer[MBR_PART2_OFFSET+4];
   2170a:	0f b6 15 72 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f72
   21711:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21714:	88 50 1d             	mov    BYTE PTR [eax+0x1d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:61 (discriminator 6)
    mbr->parts[1].partStartSector = mbrBuffer[MBR_PART2_OFFSET+8] | (mbrBuffer[MBR_PART2_OFFSET+9]<<8) | (mbrBuffer[MBR_PART2_OFFSET+10]<<16) | (mbrBuffer[MBR_PART2_OFFSET+11]<<24);
   21717:	0f b6 05 76 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f76
   2171e:	0f b6 c0             	movzx  eax,al
   21721:	0f b6 15 77 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f77
   21728:	0f b6 d2             	movzx  edx,dl
   2172b:	c1 e2 08             	shl    edx,0x8
   2172e:	09 c2                	or     edx,eax
   21730:	0f b6 05 78 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f78
   21737:	0f b6 c0             	movzx  eax,al
   2173a:	c1 e0 10             	shl    eax,0x10
   2173d:	09 c2                	or     edx,eax
   2173f:	0f b6 05 79 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f79
   21746:	0f b6 c0             	movzx  eax,al
   21749:	c1 e0 18             	shl    eax,0x18
   2174c:	09 d0                	or     eax,edx
   2174e:	89 c2                	mov    edx,eax
   21750:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21753:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:62 (discriminator 6)
    mbr->parts[1].partTotalSectors = mbrBuffer[MBR_PART2_OFFSET+12] | (mbrBuffer[MBR_PART2_OFFSET+13]<<8) | (mbrBuffer[MBR_PART2_OFFSET+14]<<16) | (mbrBuffer[MBR_PART2_OFFSET+15]<<24);
   21756:	0f b6 05 7a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7a
   2175d:	0f b6 c0             	movzx  eax,al
   21760:	0f b6 15 7b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f7b
   21767:	0f b6 d2             	movzx  edx,dl
   2176a:	c1 e2 08             	shl    edx,0x8
   2176d:	09 c2                	or     edx,eax
   2176f:	0f b6 05 7c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7c
   21776:	0f b6 c0             	movzx  eax,al
   21779:	c1 e0 10             	shl    eax,0x10
   2177c:	09 c2                	or     edx,eax
   2177e:	0f b6 05 7d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7d
   21785:	0f b6 c0             	movzx  eax,al
   21788:	c1 e0 18             	shl    eax,0x18
   2178b:	09 d0                	or     eax,edx
   2178d:	89 c2                	mov    edx,eax
   2178f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21792:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:63 (discriminator 6)
    mbr->parts[1].partEndSector = mbr->parts[1].partStartSector + mbr->parts[1].partTotalSectors;
   21795:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21798:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   2179b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2179e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   217a1:	01 c2                	add    edx,eax
   217a3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217a6:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:65 (discriminator 6)

    mbr->parts[2].bootable = mbrBuffer[MBR_PART3_OFFSET+0]==0x80;
   217a9:	0f b6 05 7e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7e
   217b0:	3c 80                	cmp    al,0x80
   217b2:	0f 94 c2             	sete   dl
   217b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217b8:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:66 (discriminator 6)
    mbr->parts[2].systemID = mbrBuffer[MBR_PART3_OFFSET+4];
   217bb:	0f b6 15 82 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f82
   217c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217c5:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:67 (discriminator 6)
    mbr->parts[2].partStartSector = mbrBuffer[MBR_PART3_OFFSET+8] | (mbrBuffer[MBR_PART3_OFFSET+9]<<8) | (mbrBuffer[MBR_PART3_OFFSET+10]<<16) | (mbrBuffer[MBR_PART3_OFFSET+11]<<24);
   217c8:	0f b6 05 86 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f86
   217cf:	0f b6 c0             	movzx  eax,al
   217d2:	0f b6 15 87 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f87
   217d9:	0f b6 d2             	movzx  edx,dl
   217dc:	c1 e2 08             	shl    edx,0x8
   217df:	09 c2                	or     edx,eax
   217e1:	0f b6 05 88 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f88
   217e8:	0f b6 c0             	movzx  eax,al
   217eb:	c1 e0 10             	shl    eax,0x10
   217ee:	09 c2                	or     edx,eax
   217f0:	0f b6 05 89 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f89
   217f7:	0f b6 c0             	movzx  eax,al
   217fa:	c1 e0 18             	shl    eax,0x18
   217fd:	09 d0                	or     eax,edx
   217ff:	89 c2                	mov    edx,eax
   21801:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21804:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:68 (discriminator 6)
    mbr->parts[2].partTotalSectors = mbrBuffer[MBR_PART3_OFFSET+12] | (mbrBuffer[MBR_PART3_OFFSET+13]<<8) | (mbrBuffer[MBR_PART3_OFFSET+14]<<16) | (mbrBuffer[MBR_PART3_OFFSET+15]<<24);
   21807:	0f b6 05 8a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8a
   2180e:	0f b6 c0             	movzx  eax,al
   21811:	0f b6 15 8b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f8b
   21818:	0f b6 d2             	movzx  edx,dl
   2181b:	c1 e2 08             	shl    edx,0x8
   2181e:	09 c2                	or     edx,eax
   21820:	0f b6 05 8c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8c
   21827:	0f b6 c0             	movzx  eax,al
   2182a:	c1 e0 10             	shl    eax,0x10
   2182d:	09 c2                	or     edx,eax
   2182f:	0f b6 05 8d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8d
   21836:	0f b6 c0             	movzx  eax,al
   21839:	c1 e0 18             	shl    eax,0x18
   2183c:	09 d0                	or     eax,edx
   2183e:	89 c2                	mov    edx,eax
   21840:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21843:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:69 (discriminator 6)
    mbr->parts[2].partEndSector = mbr->parts[2].partStartSector + mbr->parts[2].partTotalSectors;
   21846:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21849:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   2184c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2184f:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   21852:	01 c2                	add    edx,eax
   21854:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21857:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:71 (discriminator 6)

    mbr->parts[3].bootable = mbrBuffer[MBR_PART4_OFFSET+0]==0x80;
   2185a:	0f b6 05 8e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8e
   21861:	3c 80                	cmp    al,0x80
   21863:	0f 94 c2             	sete   dl
   21866:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21869:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:72 (discriminator 6)
    mbr->parts[3].systemID = mbrBuffer[MBR_PART4_OFFSET+4];
   2186c:	0f b6 15 92 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f92
   21873:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21876:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:73 (discriminator 6)
    mbr->parts[3].partStartSector = mbrBuffer[MBR_PART4_OFFSET+8] | (mbrBuffer[MBR_PART4_OFFSET+9]<<8) | (mbrBuffer[MBR_PART4_OFFSET+10]<<16) | (mbrBuffer[MBR_PART4_OFFSET+11]<<24);
   21879:	0f b6 05 96 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f96
   21880:	0f b6 c0             	movzx  eax,al
   21883:	0f b6 15 97 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f97
   2188a:	0f b6 d2             	movzx  edx,dl
   2188d:	c1 e2 08             	shl    edx,0x8
   21890:	09 c2                	or     edx,eax
   21892:	0f b6 05 98 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f98
   21899:	0f b6 c0             	movzx  eax,al
   2189c:	c1 e0 10             	shl    eax,0x10
   2189f:	09 c2                	or     edx,eax
   218a1:	0f b6 05 99 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f99
   218a8:	0f b6 c0             	movzx  eax,al
   218ab:	c1 e0 18             	shl    eax,0x18
   218ae:	09 d0                	or     eax,edx
   218b0:	89 c2                	mov    edx,eax
   218b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218b5:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:74 (discriminator 6)
    mbr->parts[3].partTotalSectors = mbrBuffer[MBR_PART4_OFFSET+12] | (mbrBuffer[MBR_PART4_OFFSET+13]<<8) | (mbrBuffer[MBR_PART4_OFFSET+14]<<16) | (mbrBuffer[MBR_PART4_OFFSET+15]<<24);
   218b8:	0f b6 05 9a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9a
   218bf:	0f b6 c0             	movzx  eax,al
   218c2:	0f b6 15 9b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f9b
   218c9:	0f b6 d2             	movzx  edx,dl
   218cc:	c1 e2 08             	shl    edx,0x8
   218cf:	09 c2                	or     edx,eax
   218d1:	0f b6 05 9c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9c
   218d8:	0f b6 c0             	movzx  eax,al
   218db:	c1 e0 10             	shl    eax,0x10
   218de:	09 c2                	or     edx,eax
   218e0:	0f b6 05 9d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9d
   218e7:	0f b6 c0             	movzx  eax,al
   218ea:	c1 e0 18             	shl    eax,0x18
   218ed:	09 d0                	or     eax,edx
   218ef:	89 c2                	mov    edx,eax
   218f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218f4:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:75 (discriminator 6)
    mbr->parts[3].partEndSector = mbr->parts[3].partStartSector + mbr->parts[3].partTotalSectors;
   218f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218fa:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
   218fd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21900:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   21903:	01 c2                	add    edx,eax
   21905:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21908:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:76 (discriminator 6)
    mbr->partCount=4;
   2190b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2190e:	c7 80 00 04 00 00 04 	mov    DWORD PTR [eax+0x400],0x4
   21915:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:77 (discriminator 6)
    if (mbr->parts[0].systemID=0xEE)
   21918:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2191b:	c6 40 0d ee          	mov    BYTE PTR [eax+0xd],0xee
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:79 (discriminator 6)
    {
        printd(DEBUG_HARDDRIVE,"Found GPT partition table\n");
   2191f:	83 ec 08             	sub    esp,0x8
   21922:	68 55 39 08 00       	push   0x83955
   21927:	6a 08                	push   0x8
   21929:	e8 e5 58 00 00       	call   27213 <printd>
   2192e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:80 (discriminator 6)
        return parseGPT(port, mbr);
   21931:	83 ec 08             	sub    esp,0x8
   21934:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21937:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2193a:	e8 05 00 00 00       	call   21944 <parseGPT>
   2193f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:83
    }
    return true;
}
   21942:	c9                   	leave  
   21943:	c3                   	ret    

00021944 <parseGPT>:
parseGPT():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:86

bool parseGPT(HBA_PORT* port, struct mbr_t* mbr)
{
   21944:	55                   	push   ebp
   21945:	89 e5                	mov    ebp,esp
   21947:	53                   	push   ebx
   21948:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:87
int readLen=0;
   2194b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:89

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
   21952:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21955:	8b 00                	mov    eax,DWORD PTR [eax]
   21957:	6a 01                	push   0x1
   21959:	68 a0 8d 09 00       	push   0x98da0
   2195e:	50                   	push   eax
   2195f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21962:	e8 9c 36 ff ff       	call   15003 <ahciRead>
   21967:	83 c4 10             	add    esp,0x10
   2196a:	85 c0                	test   eax,eax
   2196c:	0f 95 c0             	setne  al
   2196f:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:90
    gptHdr=mbrBuffer;
   21972:	c7 05 84 8d 09 00 a0 	mov    DWORD PTR ds:0x98d84,0x98da0
   21979:	8d 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:96

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
   2197c:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21981:	8b 58 30             	mov    ebx,DWORD PTR [eax+0x30]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:95
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
   21984:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21989:	8b 48 54             	mov    ecx,DWORD PTR [eax+0x54]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:94
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
   2198c:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21991:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:93
            gptHdr->partEntryLBAL,
   21994:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21999:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   2199c:	83 ec 08             	sub    esp,0x8
   2199f:	53                   	push   ebx
   219a0:	51                   	push   ecx
   219a1:	52                   	push   edx
   219a2:	50                   	push   eax
   219a3:	68 70 39 08 00       	push   0x83970
   219a8:	6a 08                	push   0x8
   219aa:	e8 64 58 00 00       	call   27213 <printd>
   219af:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:97
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
    readLen=((gptHdr->partEntryCount*gptHdr->partEntrySize)/512)+1;
   219b2:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   219b7:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
   219ba:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   219bf:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
   219c2:	0f af c2             	imul   eax,edx
   219c5:	c1 e8 09             	shr    eax,0x9
   219c8:	83 c0 01             	add    eax,0x1
   219cb:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:99
    
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
   219ce:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   219d3:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   219d6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   219d9:	50                   	push   eax
   219da:	68 bc 39 08 00       	push   0x839bc
   219df:	6a 08                	push   0x8
   219e1:	e8 2d 58 00 00       	call   27213 <printd>
   219e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:100
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
   219e9:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   219ee:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   219f1:	6a 0a                	push   0xa
   219f3:	68 80 65 09 00       	push   0x96580
   219f8:	50                   	push   eax
   219f9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   219fc:	e8 02 36 ff ff       	call   15003 <ahciRead>
   21a01:	83 c4 10             	add    esp,0x10
   21a04:	85 c0                	test   eax,eax
   21a06:	0f 95 c0             	setne  al
   21a09:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:102
    
    gptPart=partBuffer;
   21a0c:	c7 05 80 8d 09 00 80 	mov    DWORD PTR ds:0x98d80,0x96580
   21a13:	65 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:103
    mbr->partCount=0;
   21a16:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a19:	c7 80 00 04 00 00 00 	mov    DWORD PTR [eax+0x400],0x0
   21a20:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104
    for (int cnt=0;cnt<20;cnt++)
   21a23:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   21a2a:	e9 b6 00 00 00       	jmp    21ae5 <parseGPT+0x1a1>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:106
    {
        printd(DEBUG_HARDDRIVE,"Part %u, first=%u\n",cnt,gptPart[cnt].partFirstLBAL);
   21a2f:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21a34:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21a37:	c1 e2 07             	shl    edx,0x7
   21a3a:	01 d0                	add    eax,edx
   21a3c:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21a3f:	50                   	push   eax
   21a40:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21a43:	68 f1 39 08 00       	push   0x839f1
   21a48:	6a 08                	push   0x8
   21a4a:	e8 c4 57 00 00       	call   27213 <printd>
   21a4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:107
        if (gptPart[cnt].partFirstLBAL>0)
   21a52:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21a57:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21a5a:	c1 e2 07             	shl    edx,0x7
   21a5d:	01 d0                	add    eax,edx
   21a5f:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21a62:	85 c0                	test   eax,eax
   21a64:	74 7b                	je     21ae1 <parseGPT+0x19d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:109
        {
            mbr->parts[cnt].partStartSector=gptPart[cnt].partFirstLBAL;
   21a66:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21a6b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21a6e:	c1 e2 07             	shl    edx,0x7
   21a71:	01 d0                	add    eax,edx
   21a73:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21a76:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21a79:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21a7c:	c1 e1 04             	shl    ecx,0x4
   21a7f:	01 ca                	add    edx,ecx
   21a81:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:110
            mbr->parts[cnt].partEndSector=gptPart[cnt].partLastLBAL;
   21a83:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21a88:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21a8b:	c1 e2 07             	shl    edx,0x7
   21a8e:	01 d0                	add    eax,edx
   21a90:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   21a93:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21a96:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21a99:	c1 e1 04             	shl    ecx,0x4
   21a9c:	01 ca                	add    edx,ecx
   21a9e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:111
            mbr->parts[cnt].partTotalSectors=mbr->parts[cnt].partEndSector-mbr->parts[cnt].partStartSector;
   21aa1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21aa4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21aa7:	c1 e2 04             	shl    edx,0x4
   21aaa:	01 d0                	add    eax,edx
   21aac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   21aaf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ab2:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21ab5:	c1 e1 04             	shl    ecx,0x4
   21ab8:	01 c8                	add    eax,ecx
   21aba:	8b 00                	mov    eax,DWORD PTR [eax]
   21abc:	29 c2                	sub    edx,eax
   21abe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ac1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21ac4:	c1 e1 04             	shl    ecx,0x4
   21ac7:	01 c8                	add    eax,ecx
   21ac9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:113
            //mbr->parts[cnt].systemID
            mbr->partCount++;
   21acc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21acf:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   21ad5:	8d 50 01             	lea    edx,[eax+0x1]
   21ad8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21adb:	89 90 00 04 00 00    	mov    DWORD PTR [eax+0x400],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 2)
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
    
    gptPart=partBuffer;
    mbr->partCount=0;
    for (int cnt=0;cnt<20;cnt++)
   21ae1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 1)
   21ae5:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   21ae9:	0f 8e 40 ff ff ff    	jle    21a2f <parseGPT+0xeb>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:118
            mbr->partCount++;
        }
    }


    return true;
   21aef:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:120
        
}
   21af4:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   21af7:	c9                   	leave  
   21af8:	c3                   	ret    
   21af9:	66 90                	xchg   ax,ax
   21afb:	90                   	nop

00021afc <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   21afc:	55                   	push   ebp
   21afd:	89 e5                	mov    ebp,esp
   21aff:	83 ec 08             	sub    esp,0x8
   21b02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21b05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b08:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   21b0c:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   21b0f:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   21b13:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   21b17:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   21b18:	90                   	nop
   21b19:	c9                   	leave  
   21b1a:	c3                   	ret    

00021b1b <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   21b1b:	55                   	push   ebp
   21b1c:	89 e5                	mov    ebp,esp
   21b1e:	83 ec 14             	sub    esp,0x14
   21b21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21b24:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   21b28:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   21b2c:	89 c2                	mov    edx,eax
   21b2e:	ec                   	in     al,dx
   21b2f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   21b32:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   21b36:	c9                   	leave  
   21b37:	c3                   	ret    

00021b38 <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   21b38:	55                   	push   ebp
   21b39:	89 e5                	mov    ebp,esp
   21b3b:	83 ec 14             	sub    esp,0x14
   21b3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21b41:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   21b45:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   21b49:	89 c2                	mov    edx,eax
   21b4b:	66 ed                	in     ax,dx
   21b4d:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   21b51:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   21b55:	c9                   	leave  
   21b56:	c3                   	ret    

00021b57 <insw>:
insw():
/home/yogi/src/os/chrisOS/include/io.h:86
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}

static __inline void insw(unsigned short __port, void *__buf, unsigned long __n)
{
   21b57:	55                   	push   ebp
   21b58:	89 e5                	mov    ebp,esp
   21b5a:	57                   	push   edi
   21b5b:	53                   	push   ebx
   21b5c:	83 ec 04             	sub    esp,0x4
   21b5f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21b62:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/include/io.h:87
	__asm__ volatile ("cld; rep; insw"
   21b66:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   21b6a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   21b6d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   21b70:	89 cb                	mov    ebx,ecx
   21b72:	89 df                	mov    edi,ebx
   21b74:	89 c1                	mov    ecx,eax
   21b76:	fc                   	cld    
   21b77:	f3 66 6d             	rep ins WORD PTR es:[edi],dx
   21b7a:	89 c8                	mov    eax,ecx
   21b7c:	89 fb                	mov    ebx,edi
   21b7e:	89 5d 0c             	mov    DWORD PTR [ebp+0xc],ebx
   21b81:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/include/io.h:90
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}
   21b84:	90                   	nop
   21b85:	83 c4 04             	add    esp,0x4
   21b88:	5b                   	pop    ebx
   21b89:	5f                   	pop    edi
   21b8a:	5d                   	pop    ebp
   21b8b:	c3                   	ret    

00021b8c <ataWaitForDRQ>:
ataWaitForDRQ():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:22
float ticks=0;
struct ataDeviceInfo_t* atablockingReadDev;

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
   21b8c:	55                   	push   ebp
   21b8d:	89 e5                	mov    ebp,esp
   21b8f:	83 ec 14             	sub    esp,0x14
   21b92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b95:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:23
    int ticks = forHowManyMS*kTicksPerMS;
   21b98:	a1 84 02 12 00       	mov    eax,ds:0x120284
   21b9d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   21ba0:	0f af c2             	imul   eax,edx
   21ba3:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:24
    uint8_t inValue=0;
   21ba6:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
    while (ticks > 0)
   21baa:	eb 57                	jmp    21c03 <ataWaitForDRQ+0x77>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:27
    {
        STI
   21bac:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:29
        //waitTicks(1);
        __asm__("sti\nhlt\n");
   21bad:	fb                   	sti    
   21bae:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:30
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21baf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21bb2:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21bb8:	83 c0 07             	add    eax,0x7
   21bbb:	0f b7 c0             	movzx  eax,ax
   21bbe:	50                   	push   eax
   21bbf:	e8 57 ff ff ff       	call   21b1b <inb>
   21bc4:	83 c4 04             	add    esp,0x4
   21bc7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
   21bca:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   21bce:	74 12                	je     21be2 <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31 (discriminator 1)
   21bd0:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   21bd4:	83 e0 08             	and    eax,0x8
   21bd7:	85 c0                	test   eax,eax
   21bd9:	74 07                	je     21be2 <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:32
                return 0;
   21bdb:	b8 00 00 00 00       	mov    eax,0x0
   21be0:	eb 5e                	jmp    21c40 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
   21be2:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
   21be6:	83 f0 01             	xor    eax,0x1
   21be9:	84 c0                	test   al,al
   21beb:	74 12                	je     21bff <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33 (discriminator 1)
   21bed:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   21bf1:	83 e0 08             	and    eax,0x8
   21bf4:	85 c0                	test   eax,eax
   21bf6:	75 07                	jne    21bff <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:34
                return 0;
   21bf8:	b8 00 00 00 00       	mov    eax,0x0
   21bfd:	eb 41                	jmp    21c40 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:35
        ticks--;
   21bff:	83 6d fc 01          	sub    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
   21c03:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   21c07:	7f a3                	jg     21bac <ataWaitForDRQ+0x20>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:37
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
                return 0;
        ticks--;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   21c09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21c0c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21c12:	83 c0 01             	add    eax,0x1
   21c15:	0f b7 c0             	movzx  eax,ax
   21c18:	50                   	push   eax
   21c19:	e8 fd fe ff ff       	call   21b1b <inb>
   21c1e:	83 c4 04             	add    esp,0x4
   21c21:	0f b6 c0             	movzx  eax,al
   21c24:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:38
    if ((hdError & 0x4)==0x4)
   21c29:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   21c2e:	83 e0 04             	and    eax,0x4
   21c31:	85 c0                	test   eax,eax
   21c33:	74 07                	je     21c3c <ataWaitForDRQ+0xb0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:39
        return 0;
   21c35:	b8 00 00 00 00       	mov    eax,0x0
   21c3a:	eb 04                	jmp    21c40 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:40
    return inValue;
   21c3c:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:41
}
   21c40:	c9                   	leave  
   21c41:	c3                   	ret    

00021c42 <ataWaitForIdle>:
ataWaitForIdle():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:44

uint8_t ataWaitForIdle(struct ataDeviceInfo_t* devInfo)
{
   21c42:	55                   	push   ebp
   21c43:	89 e5                	mov    ebp,esp
   21c45:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:45
    ticks = 0;
   21c48:	d9 ee                	fldz   
   21c4a:	d9 1d 28 eb 09 00    	fstp   DWORD PTR ds:0x9eb28
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:46
    uint8_t lValue=0;
   21c50:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:48
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21c54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21c57:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21c5d:	83 c0 07             	add    eax,0x7
   21c60:	0f b7 c0             	movzx  eax,ax
   21c63:	50                   	push   eax
   21c64:	e8 b2 fe ff ff       	call   21b1b <inb>
   21c69:	83 c4 04             	add    esp,0x4
   21c6c:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
   21c6f:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21c73:	83 e0 08             	and    eax,0x8
   21c76:	85 c0                	test   eax,eax
   21c78:	74 76                	je     21cf0 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49 (discriminator 1)
   21c7a:	d9 05 28 eb 09 00    	fld    DWORD PTR ds:0x9eb28
   21c80:	d9 ee                	fldz   
   21c82:	df e9                	fucomip st,st(1)
   21c84:	7a 0a                	jp     21c90 <ataWaitForIdle+0x4e>
   21c86:	d9 ee                	fldz   
   21c88:	df e9                	fucomip st,st(1)
   21c8a:	dd d8                	fstp   st(0)
   21c8c:	74 19                	je     21ca7 <ataWaitForIdle+0x65>
   21c8e:	eb 02                	jmp    21c92 <ataWaitForIdle+0x50>
   21c90:	dd d8                	fstp   st(0)
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:50
        inw(devInfo->ioPort+ATA_PORT_DATA);
   21c92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21c95:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21c9b:	0f b7 c0             	movzx  eax,ax
   21c9e:	50                   	push   eax
   21c9f:	e8 94 fe ff ff       	call   21b38 <inw>
   21ca4:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21ca7:	eb 47                	jmp    21cf0 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:53
    {
        __asm__("sti\nhlt\n");
   21ca9:	fb                   	sti    
   21caa:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:54
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21cab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21cae:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21cb4:	83 c0 07             	add    eax,0x7
   21cb7:	0f b7 c0             	movzx  eax,ax
   21cba:	50                   	push   eax
   21cbb:	e8 5b fe ff ff       	call   21b1b <inb>
   21cc0:	83 c4 04             	add    esp,0x4
   21cc3:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:56
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
   21cc6:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21cca:	25 88 00 00 00       	and    eax,0x88
   21ccf:	85 c0                	test   eax,eax
   21cd1:	75 07                	jne    21cda <ataWaitForIdle+0x98>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:57
                    return 0;
   21cd3:	b8 00 00 00 00       	mov    eax,0x0
   21cd8:	eb 73                	jmp    21d4d <ataWaitForIdle+0x10b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:58
        ticks++;
   21cda:	d9 05 28 eb 09 00    	fld    DWORD PTR ds:0x9eb28
   21ce0:	d9 e8                	fld1   
   21ce2:	de c1                	faddp  st(1),st
   21ce4:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21ce7:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21cea:	d9 1d 28 eb 09 00    	fstp   DWORD PTR ds:0x9eb28
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21cf0:	d9 05 28 eb 09 00    	fld    DWORD PTR ds:0x9eb28
   21cf6:	d9 c0                	fld    st(0)
   21cf8:	d9 e8                	fld1   
   21cfa:	de c1                	faddp  st(1),st
   21cfc:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21cff:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21d02:	d9 1d 28 eb 09 00    	fstp   DWORD PTR ds:0x9eb28
   21d08:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   21d0e:	89 d0                	mov    eax,edx
   21d10:	c1 e0 02             	shl    eax,0x2
   21d13:	01 d0                	add    eax,edx
   21d15:	01 c0                	add    eax,eax
   21d17:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   21d1a:	db 45 e8             	fild   DWORD PTR [ebp-0x18]
   21d1d:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21d20:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21d23:	df e9                	fucomip st,st(1)
   21d25:	dd d8                	fstp   st(0)
   21d27:	73 80                	jae    21ca9 <ataWaitForIdle+0x67>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:60
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
                    return 0;
        ticks++;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   21d29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21d2c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21d32:	83 c0 01             	add    eax,0x1
   21d35:	0f b7 c0             	movzx  eax,ax
   21d38:	50                   	push   eax
   21d39:	e8 dd fd ff ff       	call   21b1b <inb>
   21d3e:	83 c4 04             	add    esp,0x4
   21d41:	0f b6 c0             	movzx  eax,al
   21d44:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:61
    return lValue;
   21d49:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:62
}
   21d4d:	c9                   	leave  
   21d4e:	c3                   	ret    

00021d4f <ataControllerIsReady>:
ataControllerIsReady():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:66


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
   21d4f:	55                   	push   ebp
   21d50:	89 e5                	mov    ebp,esp
   21d52:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:67
    int ticks = 0;
   21d55:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:69
    
    int lStatus=0;
   21d5c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:70
    uint8_t err=0;
   21d63:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21d67:	eb 4a                	jmp    21db3 <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:74
    {
        lStatus=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21d69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21d6c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21d72:	83 c0 07             	add    eax,0x7
   21d75:	0f b7 c0             	movzx  eax,ax
   21d78:	50                   	push   eax
   21d79:	e8 9d fd ff ff       	call   21b1b <inb>
   21d7e:	83 c4 04             	add    esp,0x4
   21d81:	0f b6 c0             	movzx  eax,al
   21d84:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:75
        wait(1);
   21d87:	83 ec 0c             	sub    esp,0xc
   21d8a:	6a 01                	push   0x1
   21d8c:	e8 a1 66 00 00       	call   28432 <wait>
   21d91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:76
        ticks++;
   21d94:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:77
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
   21d98:	81 65 f0 d0 00 00 00 	and    DWORD PTR [ebp-0x10],0xd0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:78
        if (lStatus & ATA_STATUS_READY )
   21d9f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21da2:	83 e0 40             	and    eax,0x40
   21da5:	85 c0                	test   eax,eax
   21da7:	74 0a                	je     21db3 <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:79
                return true;
   21da9:	b8 01 00 00 00       	mov    eax,0x1
   21dae:	e9 9c 00 00 00       	jmp    21e4f <ataControllerIsReady+0x100>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72
    int ticks = 0;
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21db3:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21db6:	8d 42 01             	lea    eax,[edx+0x1]
   21db9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   21dbc:	8b 0d 84 02 12 00    	mov    ecx,DWORD PTR ds:0x120284
   21dc2:	89 c8                	mov    eax,ecx
   21dc4:	c1 e0 02             	shl    eax,0x2
   21dc7:	01 c8                	add    eax,ecx
   21dc9:	01 c0                	add    eax,eax
   21dcb:	39 c2                	cmp    edx,eax
   21dcd:	7e 9a                	jle    21d69 <ataControllerIsReady+0x1a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
        if (lStatus & ATA_STATUS_READY )
                return true;
    }

    if (lStatus==ATA_STATUS_ERROR || lStatus==ATA_STATUS_BUSY)
   21dcf:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
   21dd3:	74 09                	je     21dde <ataControllerIsReady+0x8f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82 (discriminator 1)
   21dd5:	81 7d f0 80 00 00 00 	cmp    DWORD PTR [ebp-0x10],0x80
   21ddc:	75 36                	jne    21e14 <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:84
    {
         err=inb(0x1f1);
   21dde:	83 ec 0c             	sub    esp,0xc
   21de1:	68 f1 01 00 00       	push   0x1f1
   21de6:	e8 30 fd ff ff       	call   21b1b <inb>
   21deb:	83 c4 10             	add    esp,0x10
   21dee:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:86
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21df1:	a1 38 03 12 00       	mov    eax,ds:0x120338
   21df6:	83 e0 08             	and    eax,0x8
   21df9:	85 c0                	test   eax,eax
   21dfb:	74 17                	je     21e14 <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:87
            printd(DEBUG_HARDDRIVE,"ataControllerIsReady: DRQ wait failed, lStatus=%02X, err=%02X\n",lStatus,err);
   21dfd:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   21e01:	50                   	push   eax
   21e02:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21e05:	68 20 3b 08 00       	push   0x83b20
   21e0a:	6a 08                	push   0x8
   21e0c:	e8 02 54 00 00       	call   27213 <printd>
   21e11:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90
#endif
    }
    if ( (lStatus & ATA_STATUS_READY)==0 && err==4)
   21e14:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21e17:	83 e0 40             	and    eax,0x40
   21e1a:	85 c0                	test   eax,eax
   21e1c:	75 0d                	jne    21e2b <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90 (discriminator 1)
   21e1e:	80 7d ef 04          	cmp    BYTE PTR [ebp-0x11],0x4
   21e22:	75 07                	jne    21e2b <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:91
        lStatus=ATA_STATUS_READY;
   21e24:	c7 45 f0 40 00 00 00 	mov    DWORD PTR [ebp-0x10],0x40
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:93
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21e2b:	a1 38 03 12 00       	mov    eax,ds:0x120338
   21e30:	83 e0 08             	and    eax,0x8
   21e33:	85 c0                	test   eax,eax
   21e35:	74 13                	je     21e4a <ataControllerIsReady+0xfb>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:94
            printk("ataControllerIsReady: returning %02X\n",lStatus);
   21e37:	83 ec 08             	sub    esp,0x8
   21e3a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21e3d:	68 60 3b 08 00       	push   0x83b60
   21e42:	e8 ac 53 00 00       	call   271f3 <printk>
   21e47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:96
#endif
    return true;
   21e4a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:97
}
   21e4f:	c9                   	leave  
   21e50:	c3                   	ret    

00021e51 <ataStatusIsOk>:
ataStatusIsOk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:100

static bool ataStatusIsOk(struct ataDeviceInfo_t* devInfo)
{
   21e51:	55                   	push   ebp
   21e52:	89 e5                	mov    ebp,esp
   21e54:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:101
	unsigned char status = inb(devInfo->ioPort+ATA_PORT_STATUS);
   21e57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21e5a:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21e60:	83 c0 07             	add    eax,0x7
   21e63:	0f b7 c0             	movzx  eax,ax
   21e66:	50                   	push   eax
   21e67:	e8 af fc ff ff       	call   21b1b <inb>
   21e6c:	83 c4 04             	add    esp,0x4
   21e6f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:103

	if (status & ATA_STATUS_BUSY)
   21e72:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21e76:	84 c0                	test   al,al
   21e78:	79 07                	jns    21e81 <ataStatusIsOk+0x30>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:104
		return false;
   21e7a:	b8 00 00 00 00       	mov    eax,0x0
   21e7f:	eb 3b                	jmp    21ebc <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:105
	if (status & ATA_STATUS_WRITE_ERROR)
   21e81:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21e85:	83 e0 20             	and    eax,0x20
   21e88:	85 c0                	test   eax,eax
   21e8a:	74 07                	je     21e93 <ataStatusIsOk+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:106
		return true;
   21e8c:	b8 01 00 00 00       	mov    eax,0x1
   21e91:	eb 29                	jmp    21ebc <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:107
	if (!(status & ATA_STATUS_READY))
   21e93:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21e97:	83 e0 40             	and    eax,0x40
   21e9a:	85 c0                	test   eax,eax
   21e9c:	75 07                	jne    21ea5 <ataStatusIsOk+0x54>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:108
		return true;
   21e9e:	b8 01 00 00 00       	mov    eax,0x1
   21ea3:	eb 17                	jmp    21ebc <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:109
	if (!(status & ATA_STATUS_SEEK))
   21ea5:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21ea9:	83 e0 10             	and    eax,0x10
   21eac:	85 c0                	test   eax,eax
   21eae:	75 07                	jne    21eb7 <ataStatusIsOk+0x66>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:110
		return true;
   21eb0:	b8 01 00 00 00       	mov    eax,0x1
   21eb5:	eb 05                	jmp    21ebc <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:111
	return 1;
   21eb7:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:112
}
   21ebc:	c9                   	leave  
   21ebd:	c3                   	ret    

00021ebe <ataSelectDrive>:
ataSelectDrive():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:115

bool ataSelectDrive(struct ataDeviceInfo_t* devInfo, uint8_t head)
{
   21ebe:	55                   	push   ebp
   21ebf:	89 e5                	mov    ebp,esp
   21ec1:	83 ec 28             	sub    esp,0x28
   21ec4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ec7:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:116
    ataWaitForIdle(devInfo);
   21eca:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21ecd:	e8 70 fd ff ff       	call   21c42 <ataWaitForIdle>
   21ed2:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:117
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
   21ed5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21ed8:	0f b6 80 6e 02 00 00 	movzx  eax,BYTE PTR [eax+0x26e]
   21edf:	89 c2                	mov    edx,eax
   21ee1:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   21ee5:	83 e0 0f             	and    eax,0xf
   21ee8:	09 d0                	or     eax,edx
   21eea:	0f b6 d0             	movzx  edx,al
   21eed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21ef0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21ef6:	83 c0 06             	add    eax,0x6
   21ef9:	0f b7 c0             	movzx  eax,ax
   21efc:	52                   	push   edx
   21efd:	50                   	push   eax
   21efe:	e8 f9 fb ff ff       	call   21afc <outb>
   21f03:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:119
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
   21f06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21f09:	e8 43 ff ff ff       	call   21e51 <ataStatusIsOk>
   21f0e:	83 c4 04             	add    esp,0x4
   21f11:	83 f0 01             	xor    eax,0x1
   21f14:	84 c0                	test   al,al
   21f16:	74 6e                	je     21f86 <ataSelectDrive+0xc8>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:122
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21f18:	a1 38 03 12 00       	mov    eax,ds:0x120338
   21f1d:	83 e0 08             	and    eax,0x8
   21f20:	85 c0                	test   eax,eax
   21f22:	74 3d                	je     21f61 <ataSelectDrive+0xa3>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:123
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
   21f24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f27:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f2d:	83 c0 07             	add    eax,0x7
   21f30:	0f b7 c0             	movzx  eax,ax
   21f33:	50                   	push   eax
   21f34:	e8 e2 fb ff ff       	call   21b1b <inb>
   21f39:	83 c4 04             	add    esp,0x4
   21f3c:	0f b6 c8             	movzx  ecx,al
   21f3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f42:	8b 90 61 02 00 00    	mov    edx,DWORD PTR [eax+0x261]
   21f48:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f4b:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   21f51:	51                   	push   ecx
   21f52:	52                   	push   edx
   21f53:	50                   	push   eax
   21f54:	68 88 3b 08 00       	push   0x83b88
   21f59:	e8 95 52 00 00       	call   271f3 <printk>
   21f5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:125
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
   21f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f64:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f6a:	83 c0 07             	add    eax,0x7
   21f6d:	0f b7 c0             	movzx  eax,ax
   21f70:	83 ec 0c             	sub    esp,0xc
   21f73:	50                   	push   eax
   21f74:	e8 a2 fb ff ff       	call   21b1b <inb>
   21f79:	83 c4 10             	add    esp,0x10
   21f7c:	84 c0                	test   al,al
   21f7e:	0f 95 c0             	setne  al
   21f81:	e9 96 00 00 00       	jmp    2201c <ataSelectDrive+0x15e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:128
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   21f86:	a1 38 03 12 00       	mov    eax,ds:0x120338
   21f8b:	83 e0 08             	and    eax,0x8
   21f8e:	85 c0                	test   eax,eax
   21f90:	0f 84 81 00 00 00    	je     22017 <ataSelectDrive+0x159>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:130
    {
        wait(10);
   21f96:	83 ec 0c             	sub    esp,0xc
   21f99:	6a 0a                	push   0xa
   21f9b:	e8 92 64 00 00       	call   28432 <wait>
   21fa0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:131
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
   21fa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21fa6:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21fac:	83 c0 06             	add    eax,0x6
   21faf:	0f b7 c0             	movzx  eax,ax
   21fb2:	83 ec 0c             	sub    esp,0xc
   21fb5:	50                   	push   eax
   21fb6:	e8 60 fb ff ff       	call   21b1b <inb>
   21fbb:	83 c4 10             	add    esp,0x10
   21fbe:	0f b6 c0             	movzx  eax,al
   21fc1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
   21fc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21fc7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21fcd:	83 c0 01             	add    eax,0x1
   21fd0:	0f b7 c0             	movzx  eax,ax
   21fd3:	83 ec 0c             	sub    esp,0xc
   21fd6:	50                   	push   eax
   21fd7:	e8 3f fb ff ff       	call   21b1b <inb>
   21fdc:	83 c4 10             	add    esp,0x10
   21fdf:	0f b6 d0             	movzx  edx,al
   21fe2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21fe5:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   21feb:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21fee:	83 e1 10             	and    ecx,0x10
   21ff1:	85 c9                	test   ecx,ecx
   21ff3:	74 07                	je     21ffc <ataSelectDrive+0x13e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 1)
   21ff5:	b9 d4 3b 08 00       	mov    ecx,0x83bd4
   21ffa:	eb 05                	jmp    22001 <ataSelectDrive+0x143>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 2)
   21ffc:	b9 da 3b 08 00       	mov    ecx,0x83bda
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 4)
   22001:	83 ec 0c             	sub    esp,0xc
   22004:	52                   	push   edx
   22005:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22008:	50                   	push   eax
   22009:	51                   	push   ecx
   2200a:	68 e4 3b 08 00       	push   0x83be4
   2200f:	e8 df 51 00 00       	call   271f3 <printk>
   22014:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:136
    }
#endif
        
    return 0;
   22017:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:137
}
   2201c:	c9                   	leave  
   2201d:	c3                   	ret    

0002201e <ataResetController>:
ataResetController():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:161
	outb(++port, 0xA0 |(drive<<4)|head);
	outb(++port, cmd);
}
*/
static void ataResetController(struct ataDeviceInfo_t* devInfo)
{
   2201e:	55                   	push   ebp
   2201f:	89 e5                	mov    ebp,esp
   22021:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:162
        outb(devInfo->ioPort+ATA_PORT_COMMAND, 4);
   22024:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22027:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2202d:	83 c0 07             	add    eax,0x7
   22030:	0f b7 c0             	movzx  eax,ax
   22033:	6a 04                	push   0x4
   22035:	50                   	push   eax
   22036:	e8 c1 fa ff ff       	call   21afc <outb>
   2203b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:163
        waitTicks(kTicksPerSecond/10);
   2203e:	8b 0d 80 02 12 00    	mov    ecx,DWORD PTR ds:0x120280
   22044:	ba 67 66 66 66       	mov    edx,0x66666667
   22049:	89 c8                	mov    eax,ecx
   2204b:	f7 ea                	imul   edx
   2204d:	c1 fa 02             	sar    edx,0x2
   22050:	89 c8                	mov    eax,ecx
   22052:	c1 f8 1f             	sar    eax,0x1f
   22055:	29 c2                	sub    edx,eax
   22057:	89 d0                	mov    eax,edx
   22059:	83 ec 0c             	sub    esp,0xc
   2205c:	50                   	push   eax
   2205d:	e8 b5 63 00 00       	call   28417 <waitTicks>
   22062:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:164
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 1<<2);
   22065:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22068:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2206e:	66 05 f6 03          	add    ax,0x3f6
   22072:	0f b7 c0             	movzx  eax,ax
   22075:	83 ec 08             	sub    esp,0x8
   22078:	6a 04                	push   0x4
   2207a:	50                   	push   eax
   2207b:	e8 7c fa ff ff       	call   21afc <outb>
   22080:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:165
        wait(10);
   22083:	83 ec 0c             	sub    esp,0xc
   22086:	6a 0a                	push   0xa
   22088:	e8 a5 63 00 00       	call   28432 <wait>
   2208d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:166
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 0);
   22090:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22093:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22099:	66 05 f6 03          	add    ax,0x3f6
   2209d:	0f b7 c0             	movzx  eax,ax
   220a0:	83 ec 08             	sub    esp,0x8
   220a3:	6a 00                	push   0x0
   220a5:	50                   	push   eax
   220a6:	e8 51 fa ff ff       	call   21afc <outb>
   220ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:167
        if (!ataControllerIsReady(devInfo))
   220ae:	83 ec 0c             	sub    esp,0xc
   220b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   220b4:	e8 96 fc ff ff       	call   21d4f <ataControllerIsReady>
   220b9:	83 c4 10             	add    esp,0x10
   220bc:	84 c0                	test   al,al
   220be:	75 1c                	jne    220dc <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:169
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   220c0:	a1 38 03 12 00       	mov    eax,ds:0x120338
   220c5:	83 e0 08             	and    eax,0x8
   220c8:	85 c0                	test   eax,eax
   220ca:	74 10                	je     220dc <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:170
            printk("HD-controller still busy\n");
   220cc:	83 ec 0c             	sub    esp,0xc
   220cf:	68 21 3c 08 00       	push   0x83c21
   220d4:	e8 1a 51 00 00       	call   271f3 <printk>
   220d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172
#endif
        if ((hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 0 && (hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 4)
   220dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   220df:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   220e5:	83 c0 01             	add    eax,0x1
   220e8:	0f b7 c0             	movzx  eax,ax
   220eb:	83 ec 0c             	sub    esp,0xc
   220ee:	50                   	push   eax
   220ef:	e8 27 fa ff ff       	call   21b1b <inb>
   220f4:	83 c4 10             	add    esp,0x10
   220f7:	0f b6 c0             	movzx  eax,al
   220fa:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
   220ff:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   22104:	85 c0                	test   eax,eax
   22106:	74 5d                	je     22165 <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172 (discriminator 1)
   22108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2210b:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22111:	83 c0 01             	add    eax,0x1
   22114:	0f b7 c0             	movzx  eax,ax
   22117:	83 ec 0c             	sub    esp,0xc
   2211a:	50                   	push   eax
   2211b:	e8 fb f9 ff ff       	call   21b1b <inb>
   22120:	83 c4 10             	add    esp,0x10
   22123:	0f b6 c0             	movzx  eax,al
   22126:	a3 1c eb 09 00       	mov    ds:0x9eb1c,eax
   2212b:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   22130:	83 f8 04             	cmp    eax,0x4
   22133:	74 30                	je     22165 <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173
            printk("Controller reset failed on %s bus: %02x\n",devInfo->bus==0?"Primary":"Secondary", hdError);
   22135:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   2213a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2213d:	8b 92 61 02 00 00    	mov    edx,DWORD PTR [edx+0x261]
   22143:	85 d2                	test   edx,edx
   22145:	75 07                	jne    2214e <ataResetController+0x130>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 1)
   22147:	ba 3b 3c 08 00       	mov    edx,0x83c3b
   2214c:	eb 05                	jmp    22153 <ataResetController+0x135>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 2)
   2214e:	ba 43 3c 08 00       	mov    edx,0x83c43
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 4)
   22153:	83 ec 04             	sub    esp,0x4
   22156:	50                   	push   eax
   22157:	52                   	push   edx
   22158:	68 50 3c 08 00       	push   0x83c50
   2215d:	e8 91 50 00 00       	call   271f3 <printk>
   22162:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:175
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22165:	a1 38 03 12 00       	mov    eax,ds:0x120338
   2216a:	83 e0 08             	and    eax,0x8
   2216d:	85 c0                	test   eax,eax
   2216f:	74 10                	je     22181 <ataResetController+0x163>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:176
            printk("ataResetController: controller is ready\n");
   22171:	83 ec 0c             	sub    esp,0xc
   22174:	68 7c 3c 08 00       	push   0x83c7c
   22179:	e8 75 50 00 00       	call   271f3 <printk>
   2217e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:178
#endif
}
   22181:	90                   	nop
   22182:	c9                   	leave  
   22183:	c3                   	ret    

00022184 <ataInit>:
ataInit():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:180
int ataInit(struct ataDeviceInfo_t* devInfo)
{
   22184:	55                   	push   ebp
   22185:	89 e5                	mov    ebp,esp
   22187:	53                   	push   ebx
   22188:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:181
    ataResetController(devInfo);
   2218b:	83 ec 0c             	sub    esp,0xc
   2218e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22191:	e8 88 fe ff ff       	call   2201e <ataResetController>
   22196:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:182
    int cStatus=0, ticks=0;
   22199:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   221a0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:183
    ataSelectDrive(devInfo,0);
   221a7:	83 ec 08             	sub    esp,0x8
   221aa:	6a 00                	push   0x0
   221ac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   221af:	e8 0a fd ff ff       	call   21ebe <ataSelectDrive>
   221b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:184
    outb(devInfo->ioPort+ATA_PORT_SECTORCOUNT, 0x55);
   221b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221ba:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221c0:	83 c0 02             	add    eax,0x2
   221c3:	0f b7 c0             	movzx  eax,ax
   221c6:	83 ec 08             	sub    esp,0x8
   221c9:	6a 55                	push   0x55
   221cb:	50                   	push   eax
   221cc:	e8 2b f9 ff ff       	call   21afc <outb>
   221d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:185
    outb(devInfo->ioPort+ATA_PORT_SECTOR_NUMBER, 0xAA);
   221d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221d7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221dd:	83 c0 03             	add    eax,0x3
   221e0:	0f b7 c0             	movzx  eax,ax
   221e3:	83 ec 08             	sub    esp,0x8
   221e6:	68 aa 00 00 00       	push   0xaa
   221eb:	50                   	push   eax
   221ec:	e8 0b f9 ff ff       	call   21afc <outb>
   221f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:186
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW,0x55);
   221f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221f7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221fd:	83 c0 04             	add    eax,0x4
   22200:	0f b7 c0             	movzx  eax,ax
   22203:	83 ec 08             	sub    esp,0x8
   22206:	6a 55                	push   0x55
   22208:	50                   	push   eax
   22209:	e8 ee f8 ff ff       	call   21afc <outb>
   2220e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:187
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH,0xAA);
   22211:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22214:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2221a:	83 c0 05             	add    eax,0x5
   2221d:	0f b7 c0             	movzx  eax,ax
   22220:	83 ec 08             	sub    esp,0x8
   22223:	68 aa 00 00 00       	push   0xaa
   22228:	50                   	push   eax
   22229:	e8 ce f8 ff ff       	call   21afc <outb>
   2222e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:188
    outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   22231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22234:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2223a:	83 c0 07             	add    eax,0x7
   2223d:	0f b7 c0             	movzx  eax,ax
   22240:	83 ec 08             	sub    esp,0x8
   22243:	68 ec 00 00 00       	push   0xec
   22248:	50                   	push   eax
   22249:	e8 ae f8 ff ff       	call   21afc <outb>
   2224e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:189
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22251:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   22257:	89 d0                	mov    eax,edx
   22259:	c1 e0 02             	shl    eax,0x2
   2225c:	01 d0                	add    eax,edx
   2225e:	01 c0                	add    eax,eax
   22260:	83 ec 0c             	sub    esp,0xc
   22263:	50                   	push   eax
   22264:	e8 c9 61 00 00       	call   28432 <wait>
   22269:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:190
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2226c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2226f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22275:	83 c0 07             	add    eax,0x7
   22278:	0f b7 c0             	movzx  eax,ax
   2227b:	83 ec 0c             	sub    esp,0xc
   2227e:	50                   	push   eax
   2227f:	e8 97 f8 ff ff       	call   21b1b <inb>
   22284:	83 c4 10             	add    esp,0x10
   22287:	0f b6 c0             	movzx  eax,al
   2228a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:191
    if (cStatus==0)
   2228d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   22291:	75 33                	jne    222c6 <ataInit+0x142>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:194
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22293:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22298:	83 e0 08             	and    eax,0x8
   2229b:	85 c0                	test   eax,eax
   2229d:	74 1d                	je     222bc <ataInit+0x138>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:195
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   2229f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   222a2:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   222a8:	83 ec 04             	sub    esp,0x4
   222ab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   222ae:	50                   	push   eax
   222af:	68 a5 3c 08 00       	push   0x83ca5
   222b4:	e8 3a 4f 00 00       	call   271f3 <printk>
   222b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:197
#endif
        return false;
   222bc:	b8 00 00 00 00       	mov    eax,0x0
   222c1:	e9 f3 01 00 00       	jmp    224b9 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:199
    }
    if ((cStatus & 1) == 1)
   222c6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   222c9:	83 e0 01             	and    eax,0x1
   222cc:	85 c0                	test   eax,eax
   222ce:	0f 84 bb 00 00 00    	je     2238f <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:201
    {
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
   222d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   222d7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   222dd:	83 c0 01             	add    eax,0x1
   222e0:	0f b7 c0             	movzx  eax,ax
   222e3:	83 ec 0c             	sub    esp,0xc
   222e6:	50                   	push   eax
   222e7:	e8 2f f8 ff ff       	call   21b1b <inb>
   222ec:	83 c4 10             	add    esp,0x10
   222ef:	0f b6 c0             	movzx  eax,al
   222f2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:203
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   222f5:	a1 38 03 12 00       	mov    eax,ds:0x120338
   222fa:	83 e0 08             	and    eax,0x8
   222fd:	85 c0                	test   eax,eax
   222ff:	74 1d                	je     2231e <ataInit+0x19a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:204
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
   22301:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22304:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   2230a:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2230d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22310:	50                   	push   eax
   22311:	68 c4 3c 08 00       	push   0x83cc4
   22316:	e8 d8 4e 00 00       	call   271f3 <printk>
   2231b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:206
#endif
        if (err!=4)
   2231e:	83 7d ec 04          	cmp    DWORD PTR [ebp-0x14],0x4
   22322:	74 0a                	je     2232e <ataInit+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:207
            return false;
   22324:	b8 00 00 00 00       	mov    eax,0x0
   22329:	e9 8b 01 00 00       	jmp    224b9 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:208
        useCDROMIdentify = true;
   2232e:	c6 05 18 eb 09 00 01 	mov    BYTE PTR ds:0x9eb18,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:209
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   22335:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22338:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2233e:	83 c0 07             	add    eax,0x7
   22341:	0f b7 c0             	movzx  eax,ax
   22344:	83 ec 0c             	sub    esp,0xc
   22347:	50                   	push   eax
   22348:	e8 ce f7 ff ff       	call   21b1b <inb>
   2234d:	83 c4 10             	add    esp,0x10
   22350:	0f b6 c0             	movzx  eax,al
   22353:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:210
        if (cStatus==0)
   22356:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   2235a:	75 33                	jne    2238f <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:213
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   2235c:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22361:	83 e0 08             	and    eax,0x8
   22364:	85 c0                	test   eax,eax
   22366:	74 1d                	je     22385 <ataInit+0x201>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:214
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   22368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2236b:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22371:	83 ec 04             	sub    esp,0x4
   22374:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22377:	50                   	push   eax
   22378:	68 a5 3c 08 00       	push   0x83ca5
   2237d:	e8 71 4e 00 00       	call   271f3 <printk>
   22382:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:216
#endif
            return false;
   22385:	b8 00 00 00 00       	mov    eax,0x0
   2238a:	e9 2a 01 00 00       	jmp    224b9 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:219
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
   2238f:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   22395:	89 d0                	mov    eax,edx
   22397:	c1 e0 02             	shl    eax,0x2
   2239a:	01 d0                	add    eax,edx
   2239c:	01 c0                	add    eax,eax
   2239e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   223a1:	eb 32                	jmp    223d5 <ataInit+0x251>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:222
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   223a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   223a6:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   223ac:	83 c0 07             	add    eax,0x7
   223af:	0f b7 c0             	movzx  eax,ax
   223b2:	83 ec 0c             	sub    esp,0xc
   223b5:	50                   	push   eax
   223b6:	e8 60 f7 ff ff       	call   21b1b <inb>
   223bb:	83 c4 10             	add    esp,0x10
   223be:	0f b6 c0             	movzx  eax,al
   223c1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:223
        wait(1);
   223c4:	83 ec 0c             	sub    esp,0xc
   223c7:	6a 01                	push   0x1
   223c9:	e8 64 60 00 00       	call   28432 <wait>
   223ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:224
        ticks--;
   223d1:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
#endif
            return false;
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   223d5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   223d8:	25 80 00 00 00       	and    eax,0x80
   223dd:	85 c0                	test   eax,eax
   223df:	74 06                	je     223e7 <ataInit+0x263>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220 (discriminator 1)
   223e1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   223e5:	7f bc                	jg     223a3 <ataInit+0x21f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
   223e7:	83 ec 0c             	sub    esp,0xc
   223ea:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   223ed:	e8 5d f9 ff ff       	call   21d4f <ataControllerIsReady>
   223f2:	83 c4 10             	add    esp,0x10
   223f5:	84 c0                	test   al,al
   223f7:	75 0a                	jne    22403 <ataInit+0x27f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:227
        return false;
   223f9:	b8 00 00 00 00       	mov    eax,0x0
   223fe:	e9 b6 00 00 00       	jmp    224b9 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228
    if (inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW)!=0x55 || inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH)!=0xaa)
   22403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22406:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2240c:	83 c0 04             	add    eax,0x4
   2240f:	0f b7 c0             	movzx  eax,ax
   22412:	83 ec 0c             	sub    esp,0xc
   22415:	50                   	push   eax
   22416:	e8 00 f7 ff ff       	call   21b1b <inb>
   2241b:	83 c4 10             	add    esp,0x10
   2241e:	3c 55                	cmp    al,0x55
   22420:	75 1f                	jne    22441 <ataInit+0x2bd>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228 (discriminator 1)
   22422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22425:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2242b:	83 c0 05             	add    eax,0x5
   2242e:	0f b7 c0             	movzx  eax,ax
   22431:	83 ec 0c             	sub    esp,0xc
   22434:	50                   	push   eax
   22435:	e8 e1 f6 ff ff       	call   21b1b <inb>
   2243a:	83 c4 10             	add    esp,0x10
   2243d:	3c aa                	cmp    al,0xaa
   2243f:	74 73                	je     224b4 <ataInit+0x330>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:231
    {
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22441:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22446:	83 e0 08             	and    eax,0x8
   22449:	85 c0                	test   eax,eax
   2244b:	74 4e                	je     2249b <ataInit+0x317>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:232
        printk("Cylinder port non-zero (%X,%X), device is non-ATA\n",inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW), inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH));
   2244d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22450:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22456:	83 c0 05             	add    eax,0x5
   22459:	0f b7 c0             	movzx  eax,ax
   2245c:	83 ec 0c             	sub    esp,0xc
   2245f:	50                   	push   eax
   22460:	e8 b6 f6 ff ff       	call   21b1b <inb>
   22465:	83 c4 10             	add    esp,0x10
   22468:	0f b6 d8             	movzx  ebx,al
   2246b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2246e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22474:	83 c0 04             	add    eax,0x4
   22477:	0f b7 c0             	movzx  eax,ax
   2247a:	83 ec 0c             	sub    esp,0xc
   2247d:	50                   	push   eax
   2247e:	e8 98 f6 ff ff       	call   21b1b <inb>
   22483:	83 c4 10             	add    esp,0x10
   22486:	0f b6 c0             	movzx  eax,al
   22489:	83 ec 04             	sub    esp,0x4
   2248c:	53                   	push   ebx
   2248d:	50                   	push   eax
   2248e:	68 ec 3c 08 00       	push   0x83cec
   22493:	e8 5b 4d 00 00       	call   271f3 <printk>
   22498:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:234
#endif
        if (useCDROMIdentify)
   2249b:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   224a2:	84 c0                	test   al,al
   224a4:	74 07                	je     224ad <ataInit+0x329>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:235
            return true;
   224a6:	b8 01 00 00 00       	mov    eax,0x1
   224ab:	eb 0c                	jmp    224b9 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:237
        else
            return false;
   224ad:	b8 00 00 00 00       	mov    eax,0x0
   224b2:	eb 05                	jmp    224b9 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:239
    }
    return true;
   224b4:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:240
}
   224b9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   224bc:	c9                   	leave  
   224bd:	c3                   	ret    

000224be <ataGetModelFromIdentify>:
ataGetModelFromIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:243

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
   224be:	55                   	push   ebp
   224bf:	89 e5                	mov    ebp,esp
   224c1:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:244
    uint16_t* ident=devInfo->ATAIdentifyData+27;
   224c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224c7:	83 c0 36             	add    eax,0x36
   224ca:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245
    for (int cnt=0;cnt<40;cnt+=2)
   224cd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   224d4:	eb 3d                	jmp    22513 <ataGetModelFromIdentify+0x55>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:247 (discriminator 3)
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
   224d6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   224d9:	0f b7 00             	movzx  eax,WORD PTR [eax]
   224dc:	66 c1 e8 08          	shr    ax,0x8
   224e0:	89 c1                	mov    ecx,eax
   224e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   224e5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   224e8:	01 d0                	add    eax,edx
   224ea:	05 00 02 00 00       	add    eax,0x200
   224ef:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:248 (discriminator 3)
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
   224f1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   224f4:	8d 48 01             	lea    ecx,[eax+0x1]
   224f7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   224fa:	8d 50 02             	lea    edx,[eax+0x2]
   224fd:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   22500:	0f b7 00             	movzx  eax,WORD PTR [eax]
   22503:	89 c2                	mov    edx,eax
   22505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22508:	88 94 08 00 02 00 00 	mov    BYTE PTR [eax+ecx*1+0x200],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 3)
}

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
    uint16_t* ident=devInfo->ATAIdentifyData+27;
    for (int cnt=0;cnt<40;cnt+=2)
   2250f:	83 45 f8 02          	add    DWORD PTR [ebp-0x8],0x2
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 1)
   22513:	83 7d f8 27          	cmp    DWORD PTR [ebp-0x8],0x27
   22517:	7e bd                	jle    224d6 <ataGetModelFromIdentify+0x18>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:250
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
    }
    devInfo->ATADeviceModel[79]='\0';
   22519:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2251c:	c6 80 4f 02 00 00 00 	mov    BYTE PTR [eax+0x24f],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:251
}
   22523:	90                   	nop
   22524:	c9                   	leave  
   22525:	c3                   	ret    

00022526 <ataIdentify>:
ataIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:254

int ataIdentify(struct ataDeviceInfo_t* devInfo)
{
   22526:	55                   	push   ebp
   22527:	89 e5                	mov    ebp,esp
   22529:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:256
    //For ATA devices, read the identity data.  For SATA, we've already read it into ATAIdentityData
    if (devInfo->queryATAData)
   2252c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2252f:	0f b6 80 50 02 00 00 	movzx  eax,BYTE PTR [eax+0x250]
   22536:	84 c0                	test   al,al
   22538:	0f 84 9c 00 00 00    	je     225da <ataIdentify+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:258
    {
        if (useCDROMIdentify)
   2253e:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   22545:	84 c0                	test   al,al
   22547:	74 1f                	je     22568 <ataIdentify+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:259
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
   22549:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2254c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22552:	83 c0 07             	add    eax,0x7
   22555:	0f b7 c0             	movzx  eax,ax
   22558:	68 a1 00 00 00       	push   0xa1
   2255d:	50                   	push   eax
   2255e:	e8 99 f5 ff ff       	call   21afc <outb>
   22563:	83 c4 08             	add    esp,0x8
   22566:	eb 1d                	jmp    22585 <ataIdentify+0x5f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:261
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   22568:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2256b:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22571:	83 c0 07             	add    eax,0x7
   22574:	0f b7 c0             	movzx  eax,ax
   22577:	68 ec 00 00 00       	push   0xec
   2257c:	50                   	push   eax
   2257d:	e8 7a f5 ff ff       	call   21afc <outb>
   22582:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:262
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22585:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   2258b:	89 d0                	mov    eax,edx
   2258d:	c1 e0 02             	shl    eax,0x2
   22590:	01 d0                	add    eax,edx
   22592:	01 c0                	add    eax,eax
   22594:	83 ec 0c             	sub    esp,0xc
   22597:	50                   	push   eax
   22598:	e8 95 5e 00 00       	call   28432 <wait>
   2259d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263
        for (int readCount=0;readCount<=255;readCount++)
   225a0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   225a7:	eb 28                	jmp    225d1 <ataIdentify+0xab>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:265 (discriminator 3)
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
   225a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225ac:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   225b2:	0f b7 c0             	movzx  eax,ax
   225b5:	83 ec 0c             	sub    esp,0xc
   225b8:	50                   	push   eax
   225b9:	e8 7a f5 ff ff       	call   21b38 <inw>
   225be:	83 c4 10             	add    esp,0x10
   225c1:	89 c1                	mov    ecx,eax
   225c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225c6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   225c9:	66 89 0c 50          	mov    WORD PTR [eax+edx*2],cx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 3)
        if (useCDROMIdentify)
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
        for (int readCount=0;readCount<=255;readCount++)
   225cd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 1)
   225d1:	81 7d f4 ff 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xff
   225d8:	7e cf                	jle    225a9 <ataIdentify+0x83>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:268
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
   225da:	83 ec 0c             	sub    esp,0xc
   225dd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   225e0:	e8 d9 fe ff ff       	call   224be <ataGetModelFromIdentify>
   225e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:269
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
   225e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225eb:	0f b7 40 78          	movzx  eax,WORD PTR [eax+0x78]
   225ef:	0f b7 d0             	movzx  edx,ax
   225f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225f5:	0f b7 40 7a          	movzx  eax,WORD PTR [eax+0x7a]
   225f9:	0f b7 c0             	movzx  eax,ax
   225fc:	c1 e0 10             	shl    eax,0x10
   225ff:	09 d0                	or     eax,edx
   22601:	89 c2                	mov    edx,eax
   22603:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22606:	89 90 56 02 00 00    	mov    DWORD PTR [eax+0x256],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   2260c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2260f:	0f b7 80 d4 00 00 00 	movzx  eax,WORD PTR [eax+0xd4]
   22616:	0f b7 c0             	movzx  eax,ax
   22619:	25 00 10 00 00       	and    eax,0x1000
   2261e:	85 c0                	test   eax,eax
   22620:	74 20                	je     22642 <ataIdentify+0x11c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:271 (discriminator 1)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
   22622:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22625:	0f b7 80 ea 00 00 00 	movzx  eax,WORD PTR [eax+0xea]
   2262c:	0f b7 d0             	movzx  edx,ax
   2262f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22632:	0f b7 40 24          	movzx  eax,WORD PTR [eax+0x24]
   22636:	0f b7 c0             	movzx  eax,ax
   22639:	c1 e0 10             	shl    eax,0x10
   2263c:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 1)
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   2263e:	89 c2                	mov    edx,eax
   22640:	eb 05                	jmp    22647 <ataIdentify+0x121>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 2)
   22642:	ba 00 02 00 00       	mov    edx,0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 4)
   22647:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2264a:	89 90 5a 02 00 00    	mov    DWORD PTR [eax+0x25a],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:273 (discriminator 4)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
            :512;
    devInfo->dmaSupported=devInfo->ATAIdentifyData[49]>>8 & 0x1;
   22650:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22653:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   22657:	66 c1 e8 08          	shr    ax,0x8
   2265b:	0f b7 c0             	movzx  eax,ax
   2265e:	83 e0 01             	and    eax,0x1
   22661:	85 c0                	test   eax,eax
   22663:	0f 95 c2             	setne  dl
   22666:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22669:	88 90 60 02 00 00    	mov    BYTE PTR [eax+0x260],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:274 (discriminator 4)
    devInfo->lbaSupported=devInfo->ATAIdentifyData[49]>>9 & 0x1;
   2266f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22672:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   22676:	66 c1 e8 09          	shr    ax,0x9
   2267a:	0f b7 c0             	movzx  eax,ax
   2267d:	83 e0 01             	and    eax,0x1
   22680:	85 c0                	test   eax,eax
   22682:	0f 95 c2             	setne  dl
   22685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22688:	88 90 5e 02 00 00    	mov    BYTE PTR [eax+0x25e],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:275 (discriminator 4)
    devInfo->lba48Supported=devInfo->ATAIdentifyData[83]>>10 & 0x1;
   2268e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22691:	0f b7 80 a6 00 00 00 	movzx  eax,WORD PTR [eax+0xa6]
   22698:	66 c1 e8 0a          	shr    ax,0xa
   2269c:	0f b7 c0             	movzx  eax,ax
   2269f:	83 e0 01             	and    eax,0x1
   226a2:	85 c0                	test   eax,eax
   226a4:	0f 95 c2             	setne  dl
   226a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226aa:	88 90 5f 02 00 00    	mov    BYTE PTR [eax+0x25f],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:278 (discriminator 4)
    
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   226b0:	a1 38 03 12 00       	mov    eax,ds:0x120338
   226b5:	83 e0 08             	and    eax,0x8
   226b8:	85 c0                	test   eax,eax
   226ba:	74 24                	je     226e0 <ataIdentify+0x1ba>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:279
        printk("drive %d, model=%s\n",devInfo->driveNo, devInfo->ATADeviceModel);
   226bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226bf:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   226c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226c8:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   226ce:	83 ec 04             	sub    esp,0x4
   226d1:	52                   	push   edx
   226d2:	50                   	push   eax
   226d3:	68 1f 3d 08 00       	push   0x83d1f
   226d8:	e8 16 4b 00 00       	call   271f3 <printk>
   226dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:281
#endif
    return 1;
   226e0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:282
}
   226e5:	c9                   	leave  
   226e6:	c3                   	ret    

000226e7 <ataScanForHarddrives>:
ataScanForHarddrives():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:285

int ataScanForHarddrives()
{
   226e7:	55                   	push   ebp
   226e8:	89 e5                	mov    ebp,esp
   226ea:	53                   	push   ebx
   226eb:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:286
    kATADeviceInfo[0].bus=ATAPrimary;
   226ee:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   226f3:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   226fa:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:287
    kATADeviceInfo[0].driveNo=0;
   226fd:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22702:	c7 80 65 02 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
   22709:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:288
    kATADeviceInfo[0].ioPort=0x1F0;
   2270c:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22711:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   22718:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:289
    kATADeviceInfo[0].irqNum=0x14;
   2271b:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22720:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:290
    kATADeviceInfo[0].driveHeadPortDesignation=0xA0;
   22727:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2272c:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:291
    kATADeviceInfo[0].queryATAData=true;
   22733:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22738:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:292
    kATADeviceInfo[0].ATADeviceAvailable=ataInit(&kATADeviceInfo[0]);
   2273f:	8b 1d c0 02 12 00    	mov    ebx,DWORD PTR ds:0x1202c0
   22745:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2274a:	83 ec 0c             	sub    esp,0xc
   2274d:	50                   	push   eax
   2274e:	e8 31 fa ff ff       	call   22184 <ataInit>
   22753:	83 c4 10             	add    esp,0x10
   22756:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:293
    if (kATADeviceInfo[0].ATADeviceAvailable)
   2275c:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22761:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22768:	84 c0                	test   al,al
   2276a:	74 3c                	je     227a8 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:295
    {
        ataIdentify(&kATADeviceInfo[0]);
   2276c:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22771:	83 ec 0c             	sub    esp,0xc
   22774:	50                   	push   eax
   22775:	e8 ac fd ff ff       	call   22526 <ataIdentify>
   2277a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:296
        if (useCDROMIdentify)
   2277d:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   22784:	84 c0                	test   al,al
   22786:	74 11                	je     22799 <ataScanForHarddrives+0xb2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:297
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22788:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2278d:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22794:	00 00 00 
   22797:	eb 0f                	jmp    227a8 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:299
        else
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22799:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2279e:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   227a5:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:301
    }
    useCDROMIdentify=false;
   227a8:	c6 05 18 eb 09 00 00 	mov    BYTE PTR ds:0x9eb18,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:303

    kATADeviceInfo[1].bus=ATAPrimary;
   227af:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   227b4:	05 73 02 00 00       	add    eax,0x273
   227b9:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   227c0:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:304
    kATADeviceInfo[1].driveNo=1;
   227c3:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   227c8:	05 73 02 00 00       	add    eax,0x273
   227cd:	c7 80 65 02 00 00 01 	mov    DWORD PTR [eax+0x265],0x1
   227d4:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:305
    kATADeviceInfo[1].ioPort=0x1F0;
   227d7:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   227dc:	05 73 02 00 00       	add    eax,0x273
   227e1:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   227e8:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:306
    kATADeviceInfo[1].irqNum=0x14;
   227eb:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   227f0:	05 73 02 00 00       	add    eax,0x273
   227f5:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:307
    kATADeviceInfo[1].driveHeadPortDesignation=0xB0;
   227fc:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22801:	05 73 02 00 00       	add    eax,0x273
   22806:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:308
    kATADeviceInfo[1].queryATAData=true;
   2280d:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22812:	05 73 02 00 00       	add    eax,0x273
   22817:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:309
    kATADeviceInfo[1].ATADeviceAvailable=ataInit(&kATADeviceInfo[1]);
   2281e:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22823:	8d 98 73 02 00 00    	lea    ebx,[eax+0x273]
   22829:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2282e:	05 73 02 00 00       	add    eax,0x273
   22833:	83 ec 0c             	sub    esp,0xc
   22836:	50                   	push   eax
   22837:	e8 48 f9 ff ff       	call   22184 <ataInit>
   2283c:	83 c4 10             	add    esp,0x10
   2283f:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:310
    if (kATADeviceInfo[1].ATADeviceAvailable)
   22845:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2284a:	05 73 02 00 00       	add    eax,0x273
   2284f:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22856:	84 c0                	test   al,al
   22858:	74 4b                	je     228a5 <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:312
    {
        ataIdentify(&kATADeviceInfo[1]);
   2285a:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2285f:	05 73 02 00 00       	add    eax,0x273
   22864:	83 ec 0c             	sub    esp,0xc
   22867:	50                   	push   eax
   22868:	e8 b9 fc ff ff       	call   22526 <ataIdentify>
   2286d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:313
        if (useCDROMIdentify)
   22870:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   22877:	84 c0                	test   al,al
   22879:	74 16                	je     22891 <ataScanForHarddrives+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:314
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_CD;
   2287b:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22880:	05 73 02 00 00       	add    eax,0x273
   22885:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   2288c:	00 00 00 
   2288f:	eb 14                	jmp    228a5 <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:316
        else
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22891:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22896:	05 73 02 00 00       	add    eax,0x273
   2289b:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   228a2:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:318
    }
    kATADeviceInfo[2].bus=ATASecondary;
   228a5:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228aa:	05 e6 04 00 00       	add    eax,0x4e6
   228af:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   228b6:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:319
    kATADeviceInfo[2].driveNo=2;
   228b9:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228be:	05 e6 04 00 00       	add    eax,0x4e6
   228c3:	c7 80 65 02 00 00 02 	mov    DWORD PTR [eax+0x265],0x2
   228ca:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:320
    kATADeviceInfo[2].ioPort=0x170;
   228cd:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228d2:	05 e6 04 00 00       	add    eax,0x4e6
   228d7:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   228de:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:321
    kATADeviceInfo[2].irqNum=0x15;
   228e1:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228e6:	05 e6 04 00 00       	add    eax,0x4e6
   228eb:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:322
    kATADeviceInfo[2].driveHeadPortDesignation=0xA0;
   228f2:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   228f7:	05 e6 04 00 00       	add    eax,0x4e6
   228fc:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:323
    kATADeviceInfo[2].queryATAData=false;
   22903:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22908:	05 e6 04 00 00       	add    eax,0x4e6
   2290d:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:324
    kATADeviceInfo[2].ATADeviceAvailable=ataInit(&kATADeviceInfo[2]);
   22914:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22919:	8d 98 e6 04 00 00    	lea    ebx,[eax+0x4e6]
   2291f:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22924:	05 e6 04 00 00       	add    eax,0x4e6
   22929:	83 ec 0c             	sub    esp,0xc
   2292c:	50                   	push   eax
   2292d:	e8 52 f8 ff ff       	call   22184 <ataInit>
   22932:	83 c4 10             	add    esp,0x10
   22935:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:325
    if (kATADeviceInfo[2].ATADeviceAvailable)
   2293b:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22940:	05 e6 04 00 00       	add    eax,0x4e6
   22945:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2294c:	84 c0                	test   al,al
   2294e:	74 4b                	je     2299b <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:327
    {
        ataIdentify(&kATADeviceInfo[2]);
   22950:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22955:	05 e6 04 00 00       	add    eax,0x4e6
   2295a:	83 ec 0c             	sub    esp,0xc
   2295d:	50                   	push   eax
   2295e:	e8 c3 fb ff ff       	call   22526 <ataIdentify>
   22963:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:328
        if (useCDROMIdentify)
   22966:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   2296d:	84 c0                	test   al,al
   2296f:	74 16                	je     22987 <ataScanForHarddrives+0x2a0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:329
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22971:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22976:	05 e6 04 00 00       	add    eax,0x4e6
   2297b:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22982:	00 00 00 
   22985:	eb 14                	jmp    2299b <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:331
        else
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22987:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2298c:	05 e6 04 00 00       	add    eax,0x4e6
   22991:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22998:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:334
    }

    kATADeviceInfo[3].bus=ATASecondary;
   2299b:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229a0:	05 59 07 00 00       	add    eax,0x759
   229a5:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   229ac:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:335
    kATADeviceInfo[3].driveNo=3;
   229af:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229b4:	05 59 07 00 00       	add    eax,0x759
   229b9:	c7 80 65 02 00 00 03 	mov    DWORD PTR [eax+0x265],0x3
   229c0:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:336
    kATADeviceInfo[3].ioPort=0x170;
   229c3:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229c8:	05 59 07 00 00       	add    eax,0x759
   229cd:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   229d4:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:337
    kATADeviceInfo[3].irqNum=0x15;
   229d7:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229dc:	05 59 07 00 00       	add    eax,0x759
   229e1:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:338
    kATADeviceInfo[3].driveHeadPortDesignation=0xB0;
   229e8:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229ed:	05 59 07 00 00       	add    eax,0x759
   229f2:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:339
    kATADeviceInfo[3].queryATAData=true;
   229f9:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   229fe:	05 59 07 00 00       	add    eax,0x759
   22a03:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:340
    kATADeviceInfo[3].ATADeviceAvailable=ataInit(&kATADeviceInfo[3]);
   22a0a:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a0f:	8d 98 59 07 00 00    	lea    ebx,[eax+0x759]
   22a15:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a1a:	05 59 07 00 00       	add    eax,0x759
   22a1f:	83 ec 0c             	sub    esp,0xc
   22a22:	50                   	push   eax
   22a23:	e8 5c f7 ff ff       	call   22184 <ataInit>
   22a28:	83 c4 10             	add    esp,0x10
   22a2b:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:341
    if (kATADeviceInfo[3].ATADeviceAvailable)
   22a31:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a36:	05 59 07 00 00       	add    eax,0x759
   22a3b:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22a42:	84 c0                	test   al,al
   22a44:	74 4b                	je     22a91 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:343
    {
        ataIdentify(&kATADeviceInfo[3]);
   22a46:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a4b:	05 59 07 00 00       	add    eax,0x759
   22a50:	83 ec 0c             	sub    esp,0xc
   22a53:	50                   	push   eax
   22a54:	e8 cd fa ff ff       	call   22526 <ataIdentify>
   22a59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:344
        if (useCDROMIdentify)
   22a5c:	0f b6 05 18 eb 09 00 	movzx  eax,BYTE PTR ds:0x9eb18
   22a63:	84 c0                	test   al,al
   22a65:	74 16                	je     22a7d <ataScanForHarddrives+0x396>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:345
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22a67:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a6c:	05 59 07 00 00       	add    eax,0x759
   22a71:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22a78:	00 00 00 
   22a7b:	eb 14                	jmp    22a91 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:347
        else
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22a7d:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22a82:	05 59 07 00 00       	add    eax,0x759
   22a87:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22a8e:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:351
    }

#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22a91:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22a96:	83 e0 08             	and    eax,0x8
   22a99:	85 c0                	test   eax,eax
   22a9b:	74 2c                	je     22ac9 <ataScanForHarddrives+0x3e2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:352
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
   22a9d:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22aa2:	05 73 02 00 00       	add    eax,0x273
   22aa7:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   22aad:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   22ab2:	05 00 02 00 00       	add    eax,0x200
   22ab7:	83 ec 04             	sub    esp,0x4
   22aba:	52                   	push   edx
   22abb:	50                   	push   eax
   22abc:	68 33 3d 08 00       	push   0x83d33
   22ac1:	e8 2d 47 00 00       	call   271f3 <printk>
   22ac6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:354
#endif
            return 0;
   22ac9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:355
}
   22ace:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   22ad1:	c9                   	leave  
   22ad2:	c3                   	ret    

00022ad3 <ataReadDisk>:
ataReadDisk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:357
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22ad3:	55                   	push   ebp
   22ad4:	89 e5                	mov    ebp,esp
   22ad6:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:358
    atablockingReadDev = devInfo;
   22ad9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22adc:	a3 a0 8f 09 00       	mov    ds:0x98fa0,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:359
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
   22ae1:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   22ae5:	75 07                	jne    22aee <ataReadDisk+0x1b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:360
        return -1;
   22ae7:	b8 ff ff ff ff       	mov    eax,0xffffffff
   22aec:	eb 14                	jmp    22b02 <ataReadDisk+0x2f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:361
    return ataBlockingRead28(sector, buffer, sector_count);
   22aee:	83 ec 04             	sub    esp,0x4
   22af1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   22af4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   22af7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   22afa:	e8 05 00 00 00       	call   22b04 <ataBlockingRead28>
   22aff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:362
}
   22b02:	c9                   	leave  
   22b03:	c3                   	ret    

00022b04 <ataBlockingRead28>:
ataBlockingRead28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:365

int ataBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22b04:	55                   	push   ebp
   22b05:	89 e5                	mov    ebp,esp
   22b07:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:367
    //For now if the FAT library calls this, we assume we've already read the same partition most recently
    int lResult=0;
   22b0a:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:368
    uint8_t* bufp=buffer;
   22b11:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22b14:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:369
    uint32_t lSectorsLeft=sector_count;
   22b17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22b1a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:370
    uint32_t lSector=sector+partOffset; //this represents the start of the partition
   22b1d:	a1 20 eb 09 00       	mov    eax,ds:0x9eb20
   22b22:	89 c2                	mov    edx,eax
   22b24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22b27:	01 d0                	add    eax,edx
   22b29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:373

#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22b2c:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22b31:	83 e0 08             	and    eax,0x8
   22b34:	85 c0                	test   eax,eax
   22b36:	74 1b                	je     22b53 <ataBlockingRead28+0x4f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:375
        {
            printk("ataBlockingRead28: sec: 0x%08X, buf 0x%08X, cnt 0x%08X\n", lSector, bufp, sector_count);
   22b38:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   22b3b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22b3e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   22b41:	68 50 3d 08 00       	push   0x83d50
   22b46:	e8 a8 46 00 00       	call   271f3 <printk>
   22b4b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:376
            waitForKeyboardKey();
   22b4e:	e8 ff e6 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:379
        }
#endif
    lResult=ataWaitForIdle(atablockingReadDev);
   22b53:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b58:	83 ec 0c             	sub    esp,0xc
   22b5b:	50                   	push   eax
   22b5c:	e8 e1 f0 ff ff       	call   21c42 <ataWaitForIdle>
   22b61:	83 c4 10             	add    esp,0x10
   22b64:	0f b6 c0             	movzx  eax,al
   22b67:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:380
    if (lResult)
   22b6a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22b6e:	74 13                	je     22b83 <ataBlockingRead28+0x7f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:381
        panic("ataBlockingRead28: Timeout waiting for DRQ and BSY to be clear (0x%02X)", lResult);
   22b70:	83 ec 08             	sub    esp,0x8
   22b73:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22b76:	68 88 3d 08 00       	push   0x83d88
   22b7b:	e8 f4 41 00 00       	call   26d74 <panic>
   22b80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:386
        //Select the drive we want
        //NOTE: Drive selected prior to calling this function
        //ataSelectDrive(drive,0);
        //Magic bit (6) to set LBA mode and top 4 bits of LBA28 sector # go in bottom 4
    outb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT, inb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT) | (1 << 6) | ((lSector >> 24) & 0x0F));
   22b83:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22b88:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22b8e:	83 c0 06             	add    eax,0x6
   22b91:	0f b7 c0             	movzx  eax,ax
   22b94:	83 ec 0c             	sub    esp,0xc
   22b97:	50                   	push   eax
   22b98:	e8 7e ef ff ff       	call   21b1b <inb>
   22b9d:	83 c4 10             	add    esp,0x10
   22ba0:	89 c2                	mov    edx,eax
   22ba2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22ba5:	c1 e8 18             	shr    eax,0x18
   22ba8:	83 e0 0f             	and    eax,0xf
   22bab:	09 d0                	or     eax,edx
   22bad:	83 c8 40             	or     eax,0x40
   22bb0:	0f b6 d0             	movzx  edx,al
   22bb3:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22bb8:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22bbe:	83 c0 06             	add    eax,0x6
   22bc1:	0f b7 c0             	movzx  eax,ax
   22bc4:	83 ec 08             	sub    esp,0x8
   22bc7:	52                   	push   edx
   22bc8:	50                   	push   eax
   22bc9:	e8 2e ef ff ff       	call   21afc <outb>
   22bce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:389

    //Send the sector count (8 bit))
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTORCOUNT, sector_count);
   22bd1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22bd4:	0f b6 d0             	movzx  edx,al
   22bd7:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22bdc:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22be2:	83 c0 02             	add    eax,0x2
   22be5:	0f b7 c0             	movzx  eax,ax
   22be8:	83 ec 08             	sub    esp,0x8
   22beb:	52                   	push   edx
   22bec:	50                   	push   eax
   22bed:	e8 0a ef ff ff       	call   21afc <outb>
   22bf2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:392

    //Send the LBA sector number in the next 3 fields + high bit in the 
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTOR_NUMBER, (lSector) & 0xFF);
   22bf5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22bf8:	0f b6 d0             	movzx  edx,al
   22bfb:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c00:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22c06:	83 c0 03             	add    eax,0x3
   22c09:	0f b7 c0             	movzx  eax,ax
   22c0c:	83 ec 08             	sub    esp,0x8
   22c0f:	52                   	push   edx
   22c10:	50                   	push   eax
   22c11:	e8 e6 ee ff ff       	call   21afc <outb>
   22c16:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:393
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_LOW, (lSector >> 8) & 0xFF);
   22c19:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22c1c:	c1 e8 08             	shr    eax,0x8
   22c1f:	0f b6 d0             	movzx  edx,al
   22c22:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c27:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22c2d:	83 c0 04             	add    eax,0x4
   22c30:	0f b7 c0             	movzx  eax,ax
   22c33:	83 ec 08             	sub    esp,0x8
   22c36:	52                   	push   edx
   22c37:	50                   	push   eax
   22c38:	e8 bf ee ff ff       	call   21afc <outb>
   22c3d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:394
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
   22c40:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22c43:	c1 e8 10             	shr    eax,0x10
   22c46:	0f b6 d0             	movzx  edx,al
   22c49:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c4e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22c54:	83 c0 05             	add    eax,0x5
   22c57:	0f b7 c0             	movzx  eax,ax
   22c5a:	83 ec 08             	sub    esp,0x8
   22c5d:	52                   	push   edx
   22c5e:	50                   	push   eax
   22c5f:	e8 98 ee ff ff       	call   21afc <outb>
   22c64:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:395
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
   22c67:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c6c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22c72:	83 c0 07             	add    eax,0x7
   22c75:	0f b7 c0             	movzx  eax,ax
   22c78:	83 ec 08             	sub    esp,0x8
   22c7b:	6a 20                	push   0x20
   22c7d:	50                   	push   eax
   22c7e:	e8 79 ee ff ff       	call   21afc <outb>
   22c83:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:396
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22c86:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   22c8c:	89 d0                	mov    eax,edx
   22c8e:	c1 e0 02             	shl    eax,0x2
   22c91:	01 d0                	add    eax,edx
   22c93:	01 c0                	add    eax,eax
   22c95:	89 c2                	mov    edx,eax
   22c97:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22c9c:	83 ec 04             	sub    esp,0x4
   22c9f:	52                   	push   edx
   22ca0:	6a 01                	push   0x1
   22ca2:	50                   	push   eax
   22ca3:	e8 e4 ee ff ff       	call   21b8c <ataWaitForDRQ>
   22ca8:	83 c4 10             	add    esp,0x10
   22cab:	0f b6 c0             	movzx  eax,al
   22cae:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:397
    if (lResult)
   22cb1:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22cb5:	0f 84 35 01 00 00    	je     22df0 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:398
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   22cbb:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   22cc0:	83 ec 04             	sub    esp,0x4
   22cc3:	50                   	push   eax
   22cc4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22cc7:	68 d0 3d 08 00       	push   0x83dd0
   22ccc:	e8 a3 40 00 00       	call   26d74 <panic>
   22cd1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    while (lSectorsLeft)
   22cd4:	e9 17 01 00 00       	jmp    22df0 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:401
    {
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
   22cd9:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22cde:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22ce4:	0f b7 c0             	movzx  eax,ax
   22ce7:	83 ec 04             	sub    esp,0x4
   22cea:	68 00 01 00 00       	push   0x100
   22cef:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22cf2:	50                   	push   eax
   22cf3:	e8 5f ee ff ff       	call   21b57 <insw>
   22cf8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:403
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22cfb:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22d00:	83 e0 08             	and    eax,0x8
   22d03:	85 c0                	test   eax,eax
   22d05:	74 52                	je     22d59 <ataBlockingRead28+0x255>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:405
            {
                printk("ataBlockingRead28: Debugging: ");
   22d07:	83 ec 0c             	sub    esp,0xc
   22d0a:	68 20 3e 08 00       	push   0x83e20
   22d0f:	e8 df 44 00 00       	call   271f3 <printk>
   22d14:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406
                for (int cnt2=0;cnt2<20;cnt2++)
   22d17:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   22d1e:	eb 23                	jmp    22d43 <ataBlockingRead28+0x23f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:407 (discriminator 3)
                    printk("%02X ", bufp[cnt2]);
   22d20:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   22d23:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22d26:	01 d0                	add    eax,edx
   22d28:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   22d2b:	0f b6 c0             	movzx  eax,al
   22d2e:	83 ec 08             	sub    esp,0x8
   22d31:	50                   	push   eax
   22d32:	68 3f 3e 08 00       	push   0x83e3f
   22d37:	e8 b7 44 00 00       	call   271f3 <printk>
   22d3c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 3)
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            {
                printk("ataBlockingRead28: Debugging: ");
                for (int cnt2=0;cnt2<20;cnt2++)
   22d3f:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 1)
   22d43:	83 7d e8 13          	cmp    DWORD PTR [ebp-0x18],0x13
   22d47:	7e d7                	jle    22d20 <ataBlockingRead28+0x21c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:408
                    printk("%02X ", bufp[cnt2]);
                printk("\n");
   22d49:	83 ec 0c             	sub    esp,0xc
   22d4c:	68 45 3e 08 00       	push   0x83e45
   22d51:	e8 9d 44 00 00       	call   271f3 <printk>
   22d56:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:411
            }
        #endif
        if (--lSectorsLeft>0) //zero based vs 1 based
   22d59:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
   22d5d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   22d61:	0f 84 89 00 00 00    	je     22df0 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:413
        {
            wait(50);
   22d67:	83 ec 0c             	sub    esp,0xc
   22d6a:	6a 32                	push   0x32
   22d6c:	e8 c1 56 00 00       	call   28432 <wait>
   22d71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:414
            lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22d74:	8b 15 84 02 12 00    	mov    edx,DWORD PTR ds:0x120284
   22d7a:	89 d0                	mov    eax,edx
   22d7c:	c1 e0 02             	shl    eax,0x2
   22d7f:	01 d0                	add    eax,edx
   22d81:	01 c0                	add    eax,eax
   22d83:	89 c2                	mov    edx,eax
   22d85:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22d8a:	83 ec 04             	sub    esp,0x4
   22d8d:	52                   	push   edx
   22d8e:	6a 01                	push   0x1
   22d90:	50                   	push   eax
   22d91:	e8 f6 ed ff ff       	call   21b8c <ataWaitForDRQ>
   22d96:	83 c4 10             	add    esp,0x10
   22d99:	0f b6 c0             	movzx  eax,al
   22d9c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:415
            bufp+=512;
   22d9f:	81 45 f4 00 02 00 00 	add    DWORD PTR [ebp-0xc],0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:416
            lSector++;
   22da6:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:417
            if (lResult)
   22daa:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22dae:	74 19                	je     22dc9 <ataBlockingRead28+0x2c5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:418
                panic("ataBlockingRead28: Timeout in read loop, waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   22db0:	a1 1c eb 09 00       	mov    eax,ds:0x9eb1c
   22db5:	83 ec 04             	sub    esp,0x4
   22db8:	50                   	push   eax
   22db9:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22dbc:	68 48 3e 08 00       	push   0x83e48
   22dc1:	e8 ae 3f 00 00       	call   26d74 <panic>
   22dc6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:420
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22dc9:	a1 38 03 12 00       	mov    eax,ds:0x120338
   22dce:	83 e0 08             	and    eax,0x8
   22dd1:	85 c0                	test   eax,eax
   22dd3:	74 1b                	je     22df0 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:422
        {
            printk("ataBlockingRead28: sec=0x%08X, buf=0x%08X, rep=0x%08X    \n", lSector, bufp, lSectorsLeft);
   22dd5:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   22dd8:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22ddb:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   22dde:	68 a4 3e 08 00       	push   0x83ea4
   22de3:	e8 0b 44 00 00       	call   271f3 <printk>
   22de8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:423
            waitForKeyboardKey();
   22deb:	e8 62 e4 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
    if (lResult)
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
    while (lSectorsLeft)
   22df0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   22df4:	0f 85 df fe ff ff    	jne    22cd9 <ataBlockingRead28+0x1d5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:428
            waitForKeyboardKey();
        }
#endif
        }
    }
    return 512*sector_count;
   22dfa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22dfd:	c1 e0 09             	shl    eax,0x9
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:429
}
   22e00:	c9                   	leave  
   22e01:	c3                   	ret    

00022e02 <ataBlockingWrite28>:
ataBlockingWrite28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:432

int ataBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22e02:	55                   	push   ebp
   22e03:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:468
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataBlockingWrite28: Finished sending data\n");
#endif
    return 512;
*/}
   22e05:	90                   	nop
   22e06:	5d                   	pop    ebp
   22e07:	c3                   	ret    

00022e08 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   22e08:	55                   	push   ebp
   22e09:	89 e5                	mov    ebp,esp
   22e0b:	53                   	push   ebx
   22e0c:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   22e0f:	9c                   	pushf  
   22e10:	9c                   	pushf  
   22e11:	5a                   	pop    edx
   22e12:	89 d0                	mov    eax,edx
   22e14:	81 f2 00 00 20 00    	xor    edx,0x200000
   22e1a:	52                   	push   edx
   22e1b:	9d                   	popf   
   22e1c:	9c                   	pushf  
   22e1d:	5a                   	pop    edx
   22e1e:	9d                   	popf   
   22e1f:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   22e22:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   22e25:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   22e28:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   22e2b:	25 00 00 20 00       	and    eax,0x200000
   22e30:	85 c0                	test   eax,eax
   22e32:	75 07                	jne    22e3b <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   22e34:	b8 00 00 00 00       	mov    eax,0x0
   22e39:	eb 22                	jmp    22e5d <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   22e3b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22e3e:	0f a2                	cpuid  
   22e40:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   22e43:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   22e46:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   22e49:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   22e4c:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   22e50:	74 08                	je     22e5a <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   22e52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22e55:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   22e58:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   22e5a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   22e5d:	83 c4 10             	add    esp,0x10
   22e60:	5b                   	pop    ebx
   22e61:	5d                   	pop    ebp
   22e62:	c3                   	ret    

00022e63 <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   22e63:	55                   	push   ebp
   22e64:	89 e5                	mov    ebp,esp
   22e66:	56                   	push   esi
   22e67:	53                   	push   ebx
   22e68:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   22e6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22e6e:	25 00 00 00 80       	and    eax,0x80000000
   22e73:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   22e76:	6a 00                	push   0x0
   22e78:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22e7b:	e8 88 ff ff ff       	call   22e08 <__get_cpuid_max>
   22e80:	83 c4 08             	add    esp,0x8
   22e83:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   22e86:	73 07                	jae    22e8f <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   22e88:	b8 00 00 00 00       	mov    eax,0x0
   22e8d:	eb 1e                	jmp    22ead <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   22e8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22e92:	0f a2                	cpuid  
   22e94:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   22e97:	89 06                	mov    DWORD PTR [esi],eax
   22e99:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22e9c:	89 18                	mov    DWORD PTR [eax],ebx
   22e9e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   22ea1:	89 08                	mov    DWORD PTR [eax],ecx
   22ea3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   22ea6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   22ea8:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   22ead:	8d 65 f8             	lea    esp,[ebp-0x8]
   22eb0:	5b                   	pop    ebx
   22eb1:	5e                   	pop    esi
   22eb2:	5d                   	pop    ebp
   22eb3:	c3                   	ret    

00022eb4 <detect_cpu>:
detect_cpu():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:45
void printregs(int eax, int ebx, int ecx, int edx);
extern struct cpuinfo_t kcpuInfo;


/* Simply call this function detect_cpu(); */
int HIGH_CODE_SECTION detect_cpu(void) { /* or main() if your trying to port this as an independant application */
   22eb4:	55                   	push   ebp
   22eb5:	89 e5                	mov    ebp,esp
   22eb7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:47
	unsigned int ebx, unused;
        __get_cpuid(0, &unused, &ebx, &unused, &unused);
   22eba:	8d 45 f0             	lea    eax,[ebp-0x10]
   22ebd:	50                   	push   eax
   22ebe:	8d 45 f0             	lea    eax,[ebp-0x10]
   22ec1:	50                   	push   eax
   22ec2:	8d 45 f4             	lea    eax,[ebp-0xc]
   22ec5:	50                   	push   eax
   22ec6:	8d 45 f0             	lea    eax,[ebp-0x10]
   22ec9:	50                   	push   eax
   22eca:	6a 00                	push   0x0
   22ecc:	e8 92 ff ff ff       	call   22e63 <__get_cpuid>
   22ed1:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:48
	switch(ebx) {
   22ed4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22ed7:	3d 41 75 74 68       	cmp    eax,0x68747541
   22edc:	74 0e                	je     22eec <detect_cpu+0x38>
   22ede:	3d 47 65 6e 75       	cmp    eax,0x756e6547
   22ee3:	75 0e                	jne    22ef3 <detect_cpu+0x3f>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:50
		case 0x756e6547: /* Intel Magic Code */
		do_intel();
   22ee5:	e8 2a 00 00 00       	call   22f14 <do_intel>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:51
		break;
   22eea:	eb 21                	jmp    22f0d <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:53
		case 0x68747541: /* AMD Magic Code */
		do_amd();
   22eec:	e8 27 06 00 00       	call   23518 <do_amd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:54
		break;
   22ef1:	eb 1a                	jmp    22f0d <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:56
		default:
		printk("Unknown x86 CPU Detected\n");
   22ef3:	83 ec 0c             	sub    esp,0xc
   22ef6:	68 e0 3e 08 00       	push   0x83ee0
   22efb:	e8 f3 42 00 00       	call   271f3 <printk>
   22f00:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:57
                __asm__("pushf\n pop eax\n and eax,0xFFDFFFFF\n push eax\n popf\n");
   22f03:	9c                   	pushf  
   22f04:	58                   	pop    eax
   22f05:	25 ff ff df ff       	and    eax,0xffdfffff
   22f0a:	50                   	push   eax
   22f0b:	9d                   	popf   
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:58
		break;
   22f0c:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:60
	}
	return 0;
   22f0d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:61
}
   22f12:	c9                   	leave  
   22f13:	c3                   	ret    

00022f14 <do_intel>:
do_intel():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:120
	"Reserved", 
	"Reserved"
};

/* Intel-specific information */
int HIGH_CODE_SECTION do_intel(void) {
   22f14:	55                   	push   ebp
   22f15:	89 e5                	mov    ebp,esp
   22f17:	53                   	push   ebx
   22f18:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:121
	unsigned int eax=0, ebx=0, ecx=0, edx=0, max_eax=0, signature, unused;
   22f1b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   22f22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   22f29:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   22f30:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   22f37:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:122
	sprintf(kcpuInfo.vendor,"Intel");
   22f3e:	83 ec 08             	sub    esp,0x8
   22f41:	68 37 41 08 00       	push   0x84137
   22f46:	68 78 00 12 00       	push   0x120078
   22f4b:	e8 f7 42 00 00       	call   27247 <sprintf>
   22f50:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:123
        __get_cpuid(1, &eax, &ebx, &unused, &unused);
   22f53:	83 ec 0c             	sub    esp,0xc
   22f56:	8d 45 dc             	lea    eax,[ebp-0x24]
   22f59:	50                   	push   eax
   22f5a:	8d 45 dc             	lea    eax,[ebp-0x24]
   22f5d:	50                   	push   eax
   22f5e:	8d 45 ec             	lea    eax,[ebp-0x14]
   22f61:	50                   	push   eax
   22f62:	8d 45 f0             	lea    eax,[ebp-0x10]
   22f65:	50                   	push   eax
   22f66:	6a 01                	push   0x1
   22f68:	e8 f6 fe ff ff       	call   22e63 <__get_cpuid>
   22f6d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:124
	kcpuInfo.model = (eax >> 4) & 0xf;
   22f70:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f73:	c1 e8 04             	shr    eax,0x4
   22f76:	83 e0 0f             	and    eax,0xf
   22f79:	a3 64 00 12 00       	mov    ds:0x120064,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:125
	kcpuInfo.family = (eax >> 8) & 0xf;
   22f7e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f81:	c1 e8 08             	shr    eax,0x8
   22f84:	83 e0 0f             	and    eax,0xf
   22f87:	a3 60 00 12 00       	mov    ds:0x120060,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:126
	kcpuInfo.type = (eax >> 12) & 0x3;
   22f8c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22f8f:	c1 e8 0c             	shr    eax,0xc
   22f92:	83 e0 03             	and    eax,0x3
   22f95:	a3 6c 00 12 00       	mov    ds:0x12006c,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:127
	kcpuInfo.brand = ebx & 0xff;
   22f9a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22f9d:	0f b6 c0             	movzx  eax,al
   22fa0:	a3 70 00 12 00       	mov    ds:0x120070,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:128
	kcpuInfo.stepping = eax & 0xf;
   22fa5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22fa8:	83 e0 0f             	and    eax,0xf
   22fab:	a3 68 00 12 00       	mov    ds:0x120068,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:129
	signature = eax;
   22fb0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22fb3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:130
	switch(kcpuInfo.type) {
   22fb6:	a1 6c 00 12 00       	mov    eax,ds:0x12006c
   22fbb:	83 f8 01             	cmp    eax,0x1
   22fbe:	74 2e                	je     22fee <do_intel+0xda>
   22fc0:	83 f8 01             	cmp    eax,0x1
   22fc3:	7f 06                	jg     22fcb <do_intel+0xb7>
   22fc5:	85 c0                	test   eax,eax
   22fc7:	74 0e                	je     22fd7 <do_intel+0xc3>
   22fc9:	eb 67                	jmp    23032 <do_intel+0x11e>
   22fcb:	83 f8 02             	cmp    eax,0x2
   22fce:	74 35                	je     23005 <do_intel+0xf1>
   22fd0:	83 f8 03             	cmp    eax,0x3
   22fd3:	74 47                	je     2301c <do_intel+0x108>
   22fd5:	eb 5b                	jmp    23032 <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:132
		case 0:
		sprintf(kcpuInfo.type_name,"Original OEM");
   22fd7:	83 ec 08             	sub    esp,0x8
   22fda:	68 3d 41 08 00       	push   0x8413d
   22fdf:	68 0e 01 12 00       	push   0x12010e
   22fe4:	e8 5e 42 00 00       	call   27247 <sprintf>
   22fe9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:133
		break;
   22fec:	eb 44                	jmp    23032 <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:135
		case 1:
		sprintf(kcpuInfo.type_name,"Overdrive");
   22fee:	83 ec 08             	sub    esp,0x8
   22ff1:	68 4a 41 08 00       	push   0x8414a
   22ff6:	68 0e 01 12 00       	push   0x12010e
   22ffb:	e8 47 42 00 00       	call   27247 <sprintf>
   23000:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:136
		break;
   23003:	eb 2d                	jmp    23032 <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:138
		case 2:
		sprintf(kcpuInfo.type_name,"Dual-capable");
   23005:	83 ec 08             	sub    esp,0x8
   23008:	68 54 41 08 00       	push   0x84154
   2300d:	68 0e 01 12 00       	push   0x12010e
   23012:	e8 30 42 00 00       	call   27247 <sprintf>
   23017:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:139
		break;
   2301a:	eb 16                	jmp    23032 <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:141
		case 3:
		sprintf(kcpuInfo.type_name,"Reserved");
   2301c:	83 ec 08             	sub    esp,0x8
   2301f:	68 7e 3f 08 00       	push   0x83f7e
   23024:	68 0e 01 12 00       	push   0x12010e
   23029:	e8 19 42 00 00       	call   27247 <sprintf>
   2302e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:142
		break;
   23031:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:144
	}
	switch(kcpuInfo.family) {
   23032:	a1 60 00 12 00       	mov    eax,ds:0x120060
   23037:	83 e8 03             	sub    eax,0x3
   2303a:	83 f8 0c             	cmp    eax,0xc
   2303d:	77 7a                	ja     230b9 <do_intel+0x1a5>
   2303f:	8b 04 85 8c 42 08 00 	mov    eax,DWORD PTR [eax*4+0x8428c]
   23046:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:146
		case 3:
		sprintf(kcpuInfo.family_name,"i386");
   23048:	83 ec 08             	sub    esp,0x8
   2304b:	68 61 41 08 00       	push   0x84161
   23050:	68 40 01 12 00       	push   0x120140
   23055:	e8 ed 41 00 00       	call   27247 <sprintf>
   2305a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:147
		break;
   2305d:	eb 5a                	jmp    230b9 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:149
		case 4:
		sprintf(kcpuInfo.family_name,"i486");
   2305f:	83 ec 08             	sub    esp,0x8
   23062:	68 66 41 08 00       	push   0x84166
   23067:	68 40 01 12 00       	push   0x120140
   2306c:	e8 d6 41 00 00       	call   27247 <sprintf>
   23071:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:150
		break;
   23074:	eb 43                	jmp    230b9 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:152
		case 5:
		sprintf(kcpuInfo.family_name,"Pentium");
   23076:	83 ec 08             	sub    esp,0x8
   23079:	68 6b 41 08 00       	push   0x8416b
   2307e:	68 40 01 12 00       	push   0x120140
   23083:	e8 bf 41 00 00       	call   27247 <sprintf>
   23088:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:153
		break;
   2308b:	eb 2c                	jmp    230b9 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:155
		case 6:
		sprintf(kcpuInfo.family_name,"Pentium Pro");
   2308d:	83 ec 08             	sub    esp,0x8
   23090:	68 73 41 08 00       	push   0x84173
   23095:	68 40 01 12 00       	push   0x120140
   2309a:	e8 a8 41 00 00       	call   27247 <sprintf>
   2309f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:156
		break;
   230a2:	eb 15                	jmp    230b9 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:158
		case 15:
		sprintf(kcpuInfo.family_name,"Pentium 4");
   230a4:	83 ec 08             	sub    esp,0x8
   230a7:	68 7f 41 08 00       	push   0x8417f
   230ac:	68 40 01 12 00       	push   0x120140
   230b1:	e8 91 41 00 00       	call   27247 <sprintf>
   230b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:160
	}
	if(kcpuInfo.family == 15) {
   230b9:	a1 60 00 12 00       	mov    eax,ds:0x120060
   230be:	83 f8 0f             	cmp    eax,0xf
   230c1:	75 0e                	jne    230d1 <do_intel+0x1bd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:161
		kcpuInfo.extended_family = (eax >> 20) & 0xff;
   230c3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   230c6:	c1 e8 14             	shr    eax,0x14
   230c9:	0f b6 c0             	movzx  eax,al
   230cc:	a3 74 00 12 00       	mov    ds:0x120074,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:163
	}
	switch(kcpuInfo.family) {
   230d1:	a1 60 00 12 00       	mov    eax,ds:0x120060
   230d6:	83 e8 03             	sub    eax,0x3
   230d9:	83 f8 0c             	cmp    eax,0xc
   230dc:	0f 87 f6 01 00 00    	ja     232d8 <do_intel+0x3c4>
   230e2:	8b 04 85 c0 42 08 00 	mov    eax,DWORD PTR [eax*4+0x842c0]
   230e9:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:167
		case 3:
		break;
		case 4:
		switch(kcpuInfo.model) {
   230eb:	a1 64 00 12 00       	mov    eax,ds:0x120064
   230f0:	83 f8 08             	cmp    eax,0x8
   230f3:	0f 87 db 01 00 00    	ja     232d4 <do_intel+0x3c0>
   230f9:	8b 04 85 f4 42 08 00 	mov    eax,DWORD PTR [eax*4+0x842f4]
   23100:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:170
			case 0:
			case 1:
			sprintf(kcpuInfo.model_name,"DX");
   23102:	83 ec 08             	sub    esp,0x8
   23105:	68 89 41 08 00       	push   0x84189
   2310a:	68 aa 00 12 00       	push   0x1200aa
   2310f:	e8 33 41 00 00       	call   27247 <sprintf>
   23114:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:171
			break;
   23117:	e9 89 00 00 00       	jmp    231a5 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:173
			case 2:
			sprintf(kcpuInfo.model_name,"SX");
   2311c:	83 ec 08             	sub    esp,0x8
   2311f:	68 8c 41 08 00       	push   0x8418c
   23124:	68 aa 00 12 00       	push   0x1200aa
   23129:	e8 19 41 00 00       	call   27247 <sprintf>
   2312e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:174
			break;
   23131:	eb 72                	jmp    231a5 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:176
			case 3:
			sprintf(kcpuInfo.model_name,"487/DX2");
   23133:	83 ec 08             	sub    esp,0x8
   23136:	68 8f 41 08 00       	push   0x8418f
   2313b:	68 aa 00 12 00       	push   0x1200aa
   23140:	e8 02 41 00 00       	call   27247 <sprintf>
   23145:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:177
			break;
   23148:	eb 5b                	jmp    231a5 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:179
			case 4:
			sprintf(kcpuInfo.model_name,"SL");
   2314a:	83 ec 08             	sub    esp,0x8
   2314d:	68 97 41 08 00       	push   0x84197
   23152:	68 aa 00 12 00       	push   0x1200aa
   23157:	e8 eb 40 00 00       	call   27247 <sprintf>
   2315c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:180
			break;
   2315f:	eb 44                	jmp    231a5 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:182
			case 5:
			sprintf(kcpuInfo.model_name,"SX2");
   23161:	83 ec 08             	sub    esp,0x8
   23164:	68 9a 41 08 00       	push   0x8419a
   23169:	68 aa 00 12 00       	push   0x1200aa
   2316e:	e8 d4 40 00 00       	call   27247 <sprintf>
   23173:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:183
			break;
   23176:	eb 2d                	jmp    231a5 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:185
			case 7:
			sprintf(kcpuInfo.model_name,"Write-back enhanced DX2");
   23178:	83 ec 08             	sub    esp,0x8
   2317b:	68 9e 41 08 00       	push   0x8419e
   23180:	68 aa 00 12 00       	push   0x1200aa
   23185:	e8 bd 40 00 00       	call   27247 <sprintf>
   2318a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:186
			break;
   2318d:	eb 16                	jmp    231a5 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:188
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
   2318f:	83 ec 08             	sub    esp,0x8
   23192:	68 b6 41 08 00       	push   0x841b6
   23197:	68 aa 00 12 00       	push   0x1200aa
   2319c:	e8 a6 40 00 00       	call   27247 <sprintf>
   231a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:189
			break;
   231a4:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
		}
		break;
   231a5:	e9 2a 01 00 00       	jmp    232d4 <do_intel+0x3c0>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
		case 5:
		switch(kcpuInfo.model) {
   231aa:	a1 64 00 12 00       	mov    eax,ds:0x120064
   231af:	83 f8 02             	cmp    eax,0x2
   231b2:	74 35                	je     231e9 <do_intel+0x2d5>
   231b4:	83 f8 02             	cmp    eax,0x2
   231b7:	7f 0a                	jg     231c3 <do_intel+0x2af>
   231b9:	83 f8 01             	cmp    eax,0x1
   231bc:	74 14                	je     231d2 <do_intel+0x2be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   231be:	e9 15 01 00 00       	jmp    232d8 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
   231c3:	83 f8 03             	cmp    eax,0x3
   231c6:	74 38                	je     23200 <do_intel+0x2ec>
   231c8:	83 f8 04             	cmp    eax,0x4
   231cb:	74 4a                	je     23217 <do_intel+0x303>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   231cd:	e9 06 01 00 00       	jmp    232d8 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:195
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
			case 1:
			sprintf(kcpuInfo.model_name,"60/66");
   231d2:	83 ec 08             	sub    esp,0x8
   231d5:	68 ba 41 08 00       	push   0x841ba
   231da:	68 aa 00 12 00       	push   0x1200aa
   231df:	e8 63 40 00 00       	call   27247 <sprintf>
   231e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:196
			break;
   231e7:	eb 44                	jmp    2322d <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:198
			case 2:
			sprintf(kcpuInfo.model_name,"75-200");
   231e9:	83 ec 08             	sub    esp,0x8
   231ec:	68 c0 41 08 00       	push   0x841c0
   231f1:	68 aa 00 12 00       	push   0x1200aa
   231f6:	e8 4c 40 00 00       	call   27247 <sprintf>
   231fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:199
			break;
   231fe:	eb 2d                	jmp    2322d <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:201
			case 3:
			sprintf(kcpuInfo.model_name,"for 486 system");
   23200:	83 ec 08             	sub    esp,0x8
   23203:	68 c7 41 08 00       	push   0x841c7
   23208:	68 aa 00 12 00       	push   0x1200aa
   2320d:	e8 35 40 00 00       	call   27247 <sprintf>
   23212:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:202
			break;
   23215:	eb 16                	jmp    2322d <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:204
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
   23217:	83 ec 08             	sub    esp,0x8
   2321a:	68 d6 41 08 00       	push   0x841d6
   2321f:	68 aa 00 12 00       	push   0x1200aa
   23224:	e8 1e 40 00 00       	call   27247 <sprintf>
   23229:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:205
			break;
   2322c:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
		}
		break;
   2322d:	e9 a6 00 00 00       	jmp    232d8 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:209
		case 6:
		switch(kcpuInfo.model) {
   23232:	a1 64 00 12 00       	mov    eax,ds:0x120064
   23237:	83 f8 08             	cmp    eax,0x8
   2323a:	0f 87 97 00 00 00    	ja     232d7 <do_intel+0x3c3>
   23240:	8b 04 85 18 43 08 00 	mov    eax,DWORD PTR [eax*4+0x84318]
   23247:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:211
			case 1:
			sprintf(kcpuInfo.model_name,"Pentium Pro");
   23249:	83 ec 08             	sub    esp,0x8
   2324c:	68 73 41 08 00       	push   0x84173
   23251:	68 aa 00 12 00       	push   0x1200aa
   23256:	e8 ec 3f 00 00       	call   27247 <sprintf>
   2325b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:212
			break;
   2325e:	eb 72                	jmp    232d2 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:214
			case 3:
			sprintf(kcpuInfo.model_name,"Pentium II Model 3");
   23260:	83 ec 08             	sub    esp,0x8
   23263:	68 da 41 08 00       	push   0x841da
   23268:	68 aa 00 12 00       	push   0x1200aa
   2326d:	e8 d5 3f 00 00       	call   27247 <sprintf>
   23272:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:215
			break;
   23275:	eb 5b                	jmp    232d2 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:217
			case 5:
			sprintf(kcpuInfo.model_name,"Pentium II Model 5/Xeon/Celeron");
   23277:	83 ec 08             	sub    esp,0x8
   2327a:	68 f0 41 08 00       	push   0x841f0
   2327f:	68 aa 00 12 00       	push   0x1200aa
   23284:	e8 be 3f 00 00       	call   27247 <sprintf>
   23289:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:218
			break;
   2328c:	eb 44                	jmp    232d2 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:220
			case 6:
			sprintf(kcpuInfo.model_name,"Celeron");
   2328e:	83 ec 08             	sub    esp,0x8
   23291:	68 10 42 08 00       	push   0x84210
   23296:	68 aa 00 12 00       	push   0x1200aa
   2329b:	e8 a7 3f 00 00       	call   27247 <sprintf>
   232a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:221
			break;
   232a3:	eb 2d                	jmp    232d2 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:223
			case 7:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - external L2 cache");
   232a5:	83 ec 08             	sub    esp,0x8
   232a8:	68 18 42 08 00       	push   0x84218
   232ad:	68 aa 00 12 00       	push   0x1200aa
   232b2:	e8 90 3f 00 00       	call   27247 <sprintf>
   232b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:224
			break;
   232ba:	eb 16                	jmp    232d2 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:226
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
   232bc:	83 ec 08             	sub    esp,0x8
   232bf:	68 4c 42 08 00       	push   0x8424c
   232c4:	68 aa 00 12 00       	push   0x1200aa
   232c9:	e8 79 3f 00 00       	call   27247 <sprintf>
   232ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:227
			break;
   232d1:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
		}
		break;
   232d2:	eb 03                	jmp    232d7 <do_intel+0x3c3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
   232d4:	90                   	nop
   232d5:	eb 01                	jmp    232d8 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
			break;
		}
		break;
   232d7:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:233
		case 15:
		break;
	}
	__get_cpuid(0x80000000, &max_eax, &unused, &unused, &unused);
   232d8:	83 ec 0c             	sub    esp,0xc
   232db:	8d 45 dc             	lea    eax,[ebp-0x24]
   232de:	50                   	push   eax
   232df:	8d 45 dc             	lea    eax,[ebp-0x24]
   232e2:	50                   	push   eax
   232e3:	8d 45 dc             	lea    eax,[ebp-0x24]
   232e6:	50                   	push   eax
   232e7:	8d 45 e0             	lea    eax,[ebp-0x20]
   232ea:	50                   	push   eax
   232eb:	68 00 00 00 80       	push   0x80000000
   232f0:	e8 6e fb ff ff       	call   22e63 <__get_cpuid>
   232f5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:239
	/* Quok said: If the max extended eax value is high enough to support the processor brand string
	(values 0x80000002 to 0x80000004), then we'll use that information to return the brand information. 
	Otherwise, we'll refer back to the brand tables above for backwards compatibility with older processors. 
	According to the Sept. 2006 Intel Arch Software Developer's Guide, if extended eax values are supported, 
	then all 3 values for the processor brand string are supported, but we'll test just to make sure and be safe. */
	if(max_eax >= 0x80000004) {
   232f8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   232fb:	3d 03 00 00 80       	cmp    eax,0x80000003
   23300:	0f 86 e1 00 00 00    	jbe    233e7 <do_intel+0x4d3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:240
		if(max_eax >= 0x80000002) {
   23306:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23309:	3d 01 00 00 80       	cmp    eax,0x80000001
   2330e:	76 3e                	jbe    2334e <do_intel+0x43a>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:241
			__get_cpuid(0x80000002, &eax, &ebx, &ecx, &edx);
   23310:	83 ec 0c             	sub    esp,0xc
   23313:	8d 45 e4             	lea    eax,[ebp-0x1c]
   23316:	50                   	push   eax
   23317:	8d 45 e8             	lea    eax,[ebp-0x18]
   2331a:	50                   	push   eax
   2331b:	8d 45 ec             	lea    eax,[ebp-0x14]
   2331e:	50                   	push   eax
   2331f:	8d 45 f0             	lea    eax,[ebp-0x10]
   23322:	50                   	push   eax
   23323:	68 02 00 00 80       	push   0x80000002
   23328:	e8 36 fb ff ff       	call   22e63 <__get_cpuid>
   2332d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:242
			printregs(eax, ebx, ecx, edx);
   23330:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   23333:	89 c3                	mov    ebx,eax
   23335:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23338:	89 c1                	mov    ecx,eax
   2333a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2333d:	89 c2                	mov    edx,eax
   2333f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23342:	53                   	push   ebx
   23343:	51                   	push   ecx
   23344:	52                   	push   edx
   23345:	50                   	push   eax
   23346:	e8 28 01 00 00       	call   23473 <printregs>
   2334b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:244
		}
		if(max_eax >= 0x80000003) {
   2334e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23351:	3d 02 00 00 80       	cmp    eax,0x80000002
   23356:	76 3e                	jbe    23396 <do_intel+0x482>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:245
			__get_cpuid(0x80000003, &eax, &ebx, &ecx, &edx);
   23358:	83 ec 0c             	sub    esp,0xc
   2335b:	8d 45 e4             	lea    eax,[ebp-0x1c]
   2335e:	50                   	push   eax
   2335f:	8d 45 e8             	lea    eax,[ebp-0x18]
   23362:	50                   	push   eax
   23363:	8d 45 ec             	lea    eax,[ebp-0x14]
   23366:	50                   	push   eax
   23367:	8d 45 f0             	lea    eax,[ebp-0x10]
   2336a:	50                   	push   eax
   2336b:	68 03 00 00 80       	push   0x80000003
   23370:	e8 ee fa ff ff       	call   22e63 <__get_cpuid>
   23375:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:246
			printregs(eax, ebx, ecx, edx);
   23378:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2337b:	89 c3                	mov    ebx,eax
   2337d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23380:	89 c1                	mov    ecx,eax
   23382:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23385:	89 c2                	mov    edx,eax
   23387:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2338a:	53                   	push   ebx
   2338b:	51                   	push   ecx
   2338c:	52                   	push   edx
   2338d:	50                   	push   eax
   2338e:	e8 e0 00 00 00       	call   23473 <printregs>
   23393:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:248
		}
		if(max_eax >= 0x80000004) {
   23396:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23399:	3d 03 00 00 80       	cmp    eax,0x80000003
   2339e:	0f 86 c5 00 00 00    	jbe    23469 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:249
			__get_cpuid(0x80000004, &eax, &ebx, &ecx, &edx);
   233a4:	83 ec 0c             	sub    esp,0xc
   233a7:	8d 45 e4             	lea    eax,[ebp-0x1c]
   233aa:	50                   	push   eax
   233ab:	8d 45 e8             	lea    eax,[ebp-0x18]
   233ae:	50                   	push   eax
   233af:	8d 45 ec             	lea    eax,[ebp-0x14]
   233b2:	50                   	push   eax
   233b3:	8d 45 f0             	lea    eax,[ebp-0x10]
   233b6:	50                   	push   eax
   233b7:	68 04 00 00 80       	push   0x80000004
   233bc:	e8 a2 fa ff ff       	call   22e63 <__get_cpuid>
   233c1:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:250
			printregs(eax, ebx, ecx, edx);
   233c4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   233c7:	89 c3                	mov    ebx,eax
   233c9:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   233cc:	89 c1                	mov    ecx,eax
   233ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   233d1:	89 c2                	mov    edx,eax
   233d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   233d6:	53                   	push   ebx
   233d7:	51                   	push   ecx
   233d8:	52                   	push   edx
   233d9:	50                   	push   eax
   233da:	e8 94 00 00 00       	call   23473 <printregs>
   233df:	83 c4 10             	add    esp,0x10
   233e2:	e9 82 00 00 00       	jmp    23469 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:252
		}
	} else if(kcpuInfo.brand > 0) {
   233e7:	a1 70 00 12 00       	mov    eax,ds:0x120070
   233ec:	85 c0                	test   eax,eax
   233ee:	7e 79                	jle    23469 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:253
		if(kcpuInfo.brand < 0x18) {
   233f0:	a1 70 00 12 00       	mov    eax,ds:0x120070
   233f5:	83 f8 17             	cmp    eax,0x17
   233f8:	7f 5a                	jg     23454 <do_intel+0x540>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254
			if(signature == 0x000006B1 || signature == 0x00000F13) {
   233fa:	81 7d f4 b1 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x6b1
   23401:	74 09                	je     2340c <do_intel+0x4f8>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254 (discriminator 1)
   23403:	81 7d f4 13 0f 00 00 	cmp    DWORD PTR [ebp-0xc],0xf13
   2340a:	75 24                	jne    23430 <do_intel+0x51c>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:255
				sprintf(kcpuInfo.brand_name,"%s\n", Intel_Other[kcpuInfo.brand]);
   2340c:	a1 70 00 12 00       	mov    eax,ds:0x120070
   23411:	8b 04 85 40 da 02 00 	mov    eax,DWORD PTR [eax*4+0x2da40]
   23418:	83 ec 04             	sub    esp,0x4
   2341b:	50                   	push   eax
   2341c:	68 7d 42 08 00       	push   0x8427d
   23421:	68 72 01 12 00       	push   0x120172
   23426:	e8 1c 3e 00 00       	call   27247 <sprintf>
   2342b:	83 c4 10             	add    esp,0x10
   2342e:	eb 39                	jmp    23469 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:257
			} else {
				sprintf(kcpuInfo.brand_name, "%s\n", Intel[kcpuInfo.brand]);
   23430:	a1 70 00 12 00       	mov    eax,ds:0x120070
   23435:	8b 04 85 e0 d9 02 00 	mov    eax,DWORD PTR [eax*4+0x2d9e0]
   2343c:	83 ec 04             	sub    esp,0x4
   2343f:	50                   	push   eax
   23440:	68 7d 42 08 00       	push   0x8427d
   23445:	68 72 01 12 00       	push   0x120172
   2344a:	e8 f8 3d 00 00       	call   27247 <sprintf>
   2344f:	83 c4 10             	add    esp,0x10
   23452:	eb 15                	jmp    23469 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:260
			}
		} else {
			sprintf(kcpuInfo.brand_name, "Reserved\n");
   23454:	83 ec 08             	sub    esp,0x8
   23457:	68 81 42 08 00       	push   0x84281
   2345c:	68 72 01 12 00       	push   0x120172
   23461:	e8 e1 3d 00 00       	call   27247 <sprintf>
   23466:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:263
		}
	}
	return 0;
   23469:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:264
}
   2346e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23471:	c9                   	leave  
   23472:	c3                   	ret    

00023473 <printregs>:
printregs():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:267

/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
   23473:	55                   	push   ebp
   23474:	89 e5                	mov    ebp,esp
   23476:	53                   	push   ebx
   23477:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:270
	int j;
	char string[17];
	string[16] = '\0';
   2347a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271
	for(j = 0; j < 4; j++) {
   2347e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   23485:	eb 6a                	jmp    234f1 <printregs+0x7e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:272 (discriminator 3)
		string[j] = eax >> (8 * j);
   23487:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2348a:	c1 e0 03             	shl    eax,0x3
   2348d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23490:	89 c1                	mov    ecx,eax
   23492:	d3 fa                	sar    edx,cl
   23494:	89 d0                	mov    eax,edx
   23496:	89 c1                	mov    ecx,eax
   23498:	8d 55 e3             	lea    edx,[ebp-0x1d]
   2349b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2349e:	01 d0                	add    eax,edx
   234a0:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:273 (discriminator 3)
		string[j + 4] = ebx >> (8 * j);
   234a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   234a5:	83 c0 04             	add    eax,0x4
   234a8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   234ab:	c1 e2 03             	shl    edx,0x3
   234ae:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
   234b1:	89 d1                	mov    ecx,edx
   234b3:	d3 fb                	sar    ebx,cl
   234b5:	89 da                	mov    edx,ebx
   234b7:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:274 (discriminator 3)
		string[j + 8] = ecx >> (8 * j);
   234bb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   234be:	83 c0 08             	add    eax,0x8
   234c1:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   234c4:	c1 e2 03             	shl    edx,0x3
   234c7:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
   234ca:	89 d1                	mov    ecx,edx
   234cc:	d3 fb                	sar    ebx,cl
   234ce:	89 da                	mov    edx,ebx
   234d0:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:275 (discriminator 3)
		string[j + 12] = edx >> (8 * j);
   234d4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   234d7:	83 c0 0c             	add    eax,0xc
   234da:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   234dd:	c1 e2 03             	shl    edx,0x3
   234e0:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
   234e3:	89 d1                	mov    ecx,edx
   234e5:	d3 fb                	sar    ebx,cl
   234e7:	89 da                	mov    edx,ebx
   234e9:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 3)
/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
	int j;
	char string[17];
	string[16] = '\0';
	for(j = 0; j < 4; j++) {
   234ed:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 1)
   234f1:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
   234f5:	7e 90                	jle    23487 <printregs+0x14>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:277
		string[j] = eax >> (8 * j);
		string[j + 4] = ebx >> (8 * j);
		string[j + 8] = ecx >> (8 * j);
		string[j + 12] = edx >> (8 * j);
	}
	sprintf(kcpuInfo.brand_name, "%s%s", kcpuInfo.brand_name, string);
   234f7:	8d 45 e3             	lea    eax,[ebp-0x1d]
   234fa:	50                   	push   eax
   234fb:	68 72 01 12 00       	push   0x120172
   23500:	68 3c 43 08 00       	push   0x8433c
   23505:	68 72 01 12 00       	push   0x120172
   2350a:	e8 38 3d 00 00       	call   27247 <sprintf>
   2350f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:278
}
   23512:	90                   	nop
   23513:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23516:	c9                   	leave  
   23517:	c3                   	ret    

00023518 <do_amd>:
do_amd():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:281

/* AMD-specific information */
int HIGH_CODE_SECTION do_amd(void) {
   23518:	55                   	push   ebp
   23519:	89 e5                	mov    ebp,esp
   2351b:	53                   	push   ebx
   2351c:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:283
	//printf("AMD Specific Features:\n");
	unsigned int extended=0, eax=0, ebx=0, ecx=0, edx=0, unused=0;
   2351f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   23526:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   2352d:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   23534:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   2353b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   23542:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:284
	__get_cpuid(1, &eax, &unused, &unused, &unused);
   23549:	8d 45 dc             	lea    eax,[ebp-0x24]
   2354c:	50                   	push   eax
   2354d:	8d 45 dc             	lea    eax,[ebp-0x24]
   23550:	50                   	push   eax
   23551:	8d 45 dc             	lea    eax,[ebp-0x24]
   23554:	50                   	push   eax
   23555:	8d 45 ec             	lea    eax,[ebp-0x14]
   23558:	50                   	push   eax
   23559:	6a 01                	push   0x1
   2355b:	e8 03 f9 ff ff       	call   22e63 <__get_cpuid>
   23560:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:285
	kcpuInfo.model = (eax >> 4) & 0xf;
   23563:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23566:	c1 e8 04             	shr    eax,0x4
   23569:	83 e0 0f             	and    eax,0xf
   2356c:	a3 64 00 12 00       	mov    ds:0x120064,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:286
	kcpuInfo.family = (eax >> 8) & 0xf;
   23571:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23574:	c1 e8 08             	shr    eax,0x8
   23577:	83 e0 0f             	and    eax,0xf
   2357a:	a3 60 00 12 00       	mov    ds:0x120060,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:287
	kcpuInfo.stepping = eax & 0xf;
   2357f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23582:	83 e0 0f             	and    eax,0xf
   23585:	a3 68 00 12 00       	mov    ds:0x120068,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:289
	//reserved = eax >> 12;
	sprintf(kcpuInfo.vendor, "AMD");
   2358a:	83 ec 08             	sub    esp,0x8
   2358d:	68 41 43 08 00       	push   0x84341
   23592:	68 78 00 12 00       	push   0x120078
   23597:	e8 ab 3c 00 00       	call   27247 <sprintf>
   2359c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:290
	switch(kcpuInfo.family) 
   2359f:	a1 60 00 12 00       	mov    eax,ds:0x120060
   235a4:	83 f8 05             	cmp    eax,0x5
   235a7:	74 46                	je     235ef <do_amd+0xd7>
   235a9:	83 f8 05             	cmp    eax,0x5
   235ac:	7f 0a                	jg     235b8 <do_amd+0xa0>
   235ae:	83 f8 04             	cmp    eax,0x4
   235b1:	74 1c                	je     235cf <do_amd+0xb7>
   235b3:	e9 a1 01 00 00       	jmp    23759 <do_amd+0x241>
   235b8:	83 f8 06             	cmp    eax,0x6
   235bb:	0f 84 ad 00 00 00    	je     2366e <do_amd+0x156>
   235c1:	83 f8 0f             	cmp    eax,0xf
   235c4:	0f 84 37 01 00 00    	je     23701 <do_amd+0x1e9>
   235ca:	e9 8a 01 00 00       	jmp    23759 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:293
        {
		case 4:
		sprintf(kcpuInfo.model_name, "486 Model %d", kcpuInfo.model);
   235cf:	a1 64 00 12 00       	mov    eax,ds:0x120064
   235d4:	83 ec 04             	sub    esp,0x4
   235d7:	50                   	push   eax
   235d8:	68 45 43 08 00       	push   0x84345
   235dd:	68 aa 00 12 00       	push   0x1200aa
   235e2:	e8 60 3c 00 00       	call   27247 <sprintf>
   235e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:294
		break;
   235ea:	e9 6a 01 00 00       	jmp    23759 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:296
		case 5:
		switch(kcpuInfo.model) {
   235ef:	a1 64 00 12 00       	mov    eax,ds:0x120064
   235f4:	83 f8 09             	cmp    eax,0x9
   235f7:	77 54                	ja     2364d <do_amd+0x135>
   235f9:	8b 04 85 9c 44 08 00 	mov    eax,DWORD PTR [eax*4+0x8449c]
   23600:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:304
			case 2:
			case 3:
			case 6:
			case 7:
			
                            sprintf(kcpuInfo.model_name, "K6 Model %d", kcpuInfo.model);
   23602:	a1 64 00 12 00       	mov    eax,ds:0x120064
   23607:	83 ec 04             	sub    esp,0x4
   2360a:	50                   	push   eax
   2360b:	68 52 43 08 00       	push   0x84352
   23610:	68 aa 00 12 00       	push   0x1200aa
   23615:	e8 2d 3c 00 00       	call   27247 <sprintf>
   2361a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:305
			break;
   2361d:	eb 4a                	jmp    23669 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:307
			case 8:
			sprintf(kcpuInfo.model_name, "K6-2 Model 8");
   2361f:	83 ec 08             	sub    esp,0x8
   23622:	68 5e 43 08 00       	push   0x8435e
   23627:	68 aa 00 12 00       	push   0x1200aa
   2362c:	e8 16 3c 00 00       	call   27247 <sprintf>
   23631:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:308
			break;
   23634:	eb 33                	jmp    23669 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:310
			case 9:
			sprintf(kcpuInfo.model_name, "K6-III Model 9");
   23636:	83 ec 08             	sub    esp,0x8
   23639:	68 6b 43 08 00       	push   0x8436b
   2363e:	68 aa 00 12 00       	push   0x1200aa
   23643:	e8 ff 3b 00 00       	call   27247 <sprintf>
   23648:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:311
			break;
   2364b:	eb 1c                	jmp    23669 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:313
			default:
			sprintf(kcpuInfo.model_name, "K5/K6 Model %d", kcpuInfo.model);
   2364d:	a1 64 00 12 00       	mov    eax,ds:0x120064
   23652:	83 ec 04             	sub    esp,0x4
   23655:	50                   	push   eax
   23656:	68 7a 43 08 00       	push   0x8437a
   2365b:	68 aa 00 12 00       	push   0x1200aa
   23660:	e8 e2 3b 00 00       	call   27247 <sprintf>
   23665:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:314
			break;
   23668:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:316
		}
		break;
   23669:	e9 eb 00 00 00       	jmp    23759 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:318
		case 6:
		switch(kcpuInfo.model) {
   2366e:	a1 64 00 12 00       	mov    eax,ds:0x120064
   23673:	83 f8 07             	cmp    eax,0x7
   23676:	77 6b                	ja     236e3 <do_amd+0x1cb>
   23678:	8b 04 85 c4 44 08 00 	mov    eax,DWORD PTR [eax*4+0x844c4]
   2367f:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:322
			case 1:
			case 2:
			case 4:
			sprintf(kcpuInfo.model_name, "Athlon Model %d", kcpuInfo.model);
   23681:	a1 64 00 12 00       	mov    eax,ds:0x120064
   23686:	83 ec 04             	sub    esp,0x4
   23689:	50                   	push   eax
   2368a:	68 89 43 08 00       	push   0x84389
   2368f:	68 aa 00 12 00       	push   0x1200aa
   23694:	e8 ae 3b 00 00       	call   27247 <sprintf>
   23699:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:323
			break;
   2369c:	eb 61                	jmp    236ff <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:325
			case 3:
			sprintf(kcpuInfo.model_name, "Duron Model 3");
   2369e:	83 ec 08             	sub    esp,0x8
   236a1:	68 99 43 08 00       	push   0x84399
   236a6:	68 aa 00 12 00       	push   0x1200aa
   236ab:	e8 97 3b 00 00       	call   27247 <sprintf>
   236b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:326
			break;
   236b3:	eb 4a                	jmp    236ff <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:328
			case 6:
			sprintf(kcpuInfo.model_name, "Athlon MP/Mobile Athlon Model 6");
   236b5:	83 ec 08             	sub    esp,0x8
   236b8:	68 a8 43 08 00       	push   0x843a8
   236bd:	68 aa 00 12 00       	push   0x1200aa
   236c2:	e8 80 3b 00 00       	call   27247 <sprintf>
   236c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:329
			break;
   236ca:	eb 33                	jmp    236ff <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:331
			case 7:
			sprintf(kcpuInfo.model_name, "Mobile Duron Model 7");
   236cc:	83 ec 08             	sub    esp,0x8
   236cf:	68 c8 43 08 00       	push   0x843c8
   236d4:	68 aa 00 12 00       	push   0x1200aa
   236d9:	e8 69 3b 00 00       	call   27247 <sprintf>
   236de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:332
			break;
   236e1:	eb 1c                	jmp    236ff <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:334
			default:
			sprintf(kcpuInfo.model_name, "Duron/Athlon Model %d", kcpuInfo.model);
   236e3:	a1 64 00 12 00       	mov    eax,ds:0x120064
   236e8:	83 ec 04             	sub    esp,0x4
   236eb:	50                   	push   eax
   236ec:	68 dd 43 08 00       	push   0x843dd
   236f1:	68 aa 00 12 00       	push   0x1200aa
   236f6:	e8 4c 3b 00 00       	call   27247 <sprintf>
   236fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:335
			break;
   236fe:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:337
		}
		break;
   236ff:	eb 58                	jmp    23759 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:339
                case 15:
                    switch(kcpuInfo.model)
   23701:	a1 64 00 12 00       	mov    eax,ds:0x120064
   23706:	83 f8 1e             	cmp    eax,0x1e
   23709:	77 4d                	ja     23758 <do_amd+0x240>
   2370b:	8b 04 85 e4 44 08 00 	mov    eax,DWORD PTR [eax*4+0x844e4]
   23712:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:343
                    {
                        case 1:
                        case 2:
                            sprintf(kcpuInfo.model_name, "FX Series/Opertron (Piledriver)");
   23714:	83 ec 08             	sub    esp,0x8
   23717:	68 f4 43 08 00       	push   0x843f4
   2371c:	68 aa 00 12 00       	push   0x1200aa
   23721:	e8 21 3b 00 00       	call   27247 <sprintf>
   23726:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:344
                            break;
   23729:	eb 2d                	jmp    23758 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:347
                        case 10:
                        case 13:
                            sprintf(kcpuInfo.model_name, "A/R-Series/Athlon/Semperon/Firepro (Piledriver)");
   2372b:	83 ec 08             	sub    esp,0x8
   2372e:	68 14 44 08 00       	push   0x84414
   23733:	68 aa 00 12 00       	push   0x1200aa
   23738:	e8 0a 3b 00 00       	call   27247 <sprintf>
   2373d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:348
                            break;
   23740:	eb 16                	jmp    23758 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:350
                        case 30:
                            sprintf(kcpuInfo.model_name, "Elite A-Series/R-Series/Opertron (SteamRoller)");
   23742:	83 ec 08             	sub    esp,0x8
   23745:	68 44 44 08 00       	push   0x84444
   2374a:	68 aa 00 12 00       	push   0x1200aa
   2374f:	e8 f3 3a 00 00       	call   27247 <sprintf>
   23754:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:351
                            break;
   23757:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:353
                    }
                    break;
   23758:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:355
	}
	__get_cpuid(0x80000000, &extended, &unused, &unused, &unused);
   23759:	83 ec 0c             	sub    esp,0xc
   2375c:	8d 45 dc             	lea    eax,[ebp-0x24]
   2375f:	50                   	push   eax
   23760:	8d 45 dc             	lea    eax,[ebp-0x24]
   23763:	50                   	push   eax
   23764:	8d 45 dc             	lea    eax,[ebp-0x24]
   23767:	50                   	push   eax
   23768:	8d 45 f0             	lea    eax,[ebp-0x10]
   2376b:	50                   	push   eax
   2376c:	68 00 00 00 80       	push   0x80000000
   23771:	e8 ed f6 ff ff       	call   22e63 <__get_cpuid>
   23776:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:356
	if(extended == 0) {
   23779:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2377c:	85 c0                	test   eax,eax
   2377e:	75 0a                	jne    2378a <do_amd+0x272>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:357
		return 0;
   23780:	b8 00 00 00 00       	mov    eax,0x0
   23785:	e9 a5 00 00 00       	jmp    2382f <do_amd+0x317>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:359
	}
	if(extended >= 0x80000002) {
   2378a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2378d:	3d 01 00 00 80       	cmp    eax,0x80000001
   23792:	76 52                	jbe    237e6 <do_amd+0x2ce>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   23794:	c7 45 f4 02 00 00 80 	mov    DWORD PTR [ebp-0xc],0x80000002
   2379b:	eb 40                	jmp    237dd <do_amd+0x2c5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:362 (discriminator 3)
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
   2379d:	83 ec 0c             	sub    esp,0xc
   237a0:	8d 45 e0             	lea    eax,[ebp-0x20]
   237a3:	50                   	push   eax
   237a4:	8d 45 e4             	lea    eax,[ebp-0x1c]
   237a7:	50                   	push   eax
   237a8:	8d 45 e8             	lea    eax,[ebp-0x18]
   237ab:	50                   	push   eax
   237ac:	8d 45 ec             	lea    eax,[ebp-0x14]
   237af:	50                   	push   eax
   237b0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   237b3:	e8 ab f6 ff ff       	call   22e63 <__get_cpuid>
   237b8:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:363 (discriminator 3)
			printregs(eax, ebx, ecx, edx);
   237bb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   237be:	89 c3                	mov    ebx,eax
   237c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   237c3:	89 c1                	mov    ecx,eax
   237c5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   237c8:	89 c2                	mov    edx,eax
   237ca:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   237cd:	53                   	push   ebx
   237ce:	51                   	push   ecx
   237cf:	52                   	push   edx
   237d0:	50                   	push   eax
   237d1:	e8 9d fc ff ff       	call   23473 <printregs>
   237d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 3)
	if(extended == 0) {
		return 0;
	}
	if(extended >= 0x80000002) {
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   237d9:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 1)
   237dd:	81 7d f4 04 00 00 80 	cmp    DWORD PTR [ebp-0xc],0x80000004
   237e4:	76 b7                	jbe    2379d <do_amd+0x285>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:366
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
			printregs(eax, ebx, ecx, edx);
		}
	}
	if(extended >= 0x80000007) {
   237e6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   237e9:	3d 06 00 00 80       	cmp    eax,0x80000006
   237ee:	76 3a                	jbe    2382a <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:367
		__get_cpuid(0x80000007, &unused, &unused, &unused, &edx);
   237f0:	83 ec 0c             	sub    esp,0xc
   237f3:	8d 45 e0             	lea    eax,[ebp-0x20]
   237f6:	50                   	push   eax
   237f7:	8d 45 dc             	lea    eax,[ebp-0x24]
   237fa:	50                   	push   eax
   237fb:	8d 45 dc             	lea    eax,[ebp-0x24]
   237fe:	50                   	push   eax
   237ff:	8d 45 dc             	lea    eax,[ebp-0x24]
   23802:	50                   	push   eax
   23803:	68 07 00 00 80       	push   0x80000007
   23808:	e8 56 f6 ff ff       	call   22e63 <__get_cpuid>
   2380d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:368
		if(edx & 1) {
   23810:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23813:	83 e0 01             	and    eax,0x1
   23816:	85 c0                	test   eax,eax
   23818:	74 10                	je     2382a <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:369
			printk("Temperature Sensing Diode Detected!\n");
   2381a:	83 ec 0c             	sub    esp,0xc
   2381d:	68 74 44 08 00       	push   0x84474
   23822:	e8 cc 39 00 00       	call   271f3 <printk>
   23827:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:372
		}
	}
	return 0;
   2382a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:373 (discriminator 1)
}
   2382f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23832:	c9                   	leave  
   23833:	c3                   	ret    

00023834 <print_e820_entry>:
print_e820_entry():
/home/yogi/src/os/chrisOS/src/init/e820.c:10

extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
   23834:	55                   	push   ebp
   23835:	89 e5                	mov    ebp,esp
   23837:	53                   	push   ebx
   23838:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/e820.c:13
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   2383b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
/home/yogi/src/os/chrisOS/src/init/e820.c:11
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   2383e:	83 f8 01             	cmp    eax,0x1
   23841:	74 34                	je     23877 <print_e820_entry+0x43>
/home/yogi/src/os/chrisOS/src/init/e820.c:13
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   23843:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23846:	83 f8 02             	cmp    eax,0x2
   23849:	74 25                	je     23870 <print_e820_entry+0x3c>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 1)
   2384b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2384e:	83 f8 03             	cmp    eax,0x3
   23851:	74 16                	je     23869 <print_e820_entry+0x35>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 3)
   23853:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23856:	83 f8 04             	cmp    eax,0x4
   23859:	75 07                	jne    23862 <print_e820_entry+0x2e>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 5)
   2385b:	b8 60 46 08 00       	mov    eax,0x84660
   23860:	eb 1a                	jmp    2387c <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 6)
   23862:	b8 64 46 08 00       	mov    eax,0x84664
   23867:	eb 13                	jmp    2387c <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 4)
   23869:	b8 69 46 08 00       	mov    eax,0x84669
   2386e:	eb 0c                	jmp    2387c <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 2)
   23870:	b8 6e 46 08 00       	mov    eax,0x8466e
   23875:	eb 05                	jmp    2387c <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 1)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23877:	b8 76 46 08 00       	mov    eax,0x84676
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
   2387c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/init/e820.c:12 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
   2387f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   23882:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23885:	01 da                	add    edx,ebx
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23887:	8d 5a ff             	lea    ebx,[edx-0x1]
   2388a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2388d:	83 ec 0c             	sub    esp,0xc
   23890:	50                   	push   eax
   23891:	51                   	push   ecx
   23892:	53                   	push   ebx
   23893:	52                   	push   edx
   23894:	68 7d 46 08 00       	push   0x8467d
   23899:	e8 55 39 00 00       	call   271f3 <printk>
   2389e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:14 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
}
   238a1:	90                   	nop
   238a2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   238a5:	c9                   	leave  
   238a6:	c3                   	ret    

000238a7 <printE820Map>:
printE820Map():
/home/yogi/src/os/chrisOS/src/init/e820.c:17

void printE820Map()
{
   238a7:	55                   	push   ebp
   238a8:	89 e5                	mov    ebp,esp
   238aa:	53                   	push   ebx
   238ab:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/e820.c:18
    SMAP_entry* buffer=smap_table;
   238ae:	a1 40 00 12 00       	mov    eax,ds:0x120040
   238b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:19
    int entryCount=kE820RecordCount;
   238b6:	0f b7 05 50 00 12 00 	movzx  eax,WORD PTR ds:0x120050
   238bd:	98                   	cwde   
   238be:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:20
    print_e820_map(smap_table, kE820RecordCount);
   238c1:	0f b7 05 50 00 12 00 	movzx  eax,WORD PTR ds:0x120050
   238c8:	0f bf d0             	movsx  edx,ax
   238cb:	a1 40 00 12 00       	mov    eax,ds:0x120040
   238d0:	83 ec 08             	sub    esp,0x8
   238d3:	52                   	push   edx
   238d4:	50                   	push   eax
   238d5:	e8 b4 00 00 00       	call   2398e <print_e820_map>
   238da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21
        for (int cnt=0;cnt<entryCount;cnt++)
   238dd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   238e4:	e9 93 00 00 00       	jmp    2397c <printE820Map+0xd5>
/home/yogi/src/os/chrisOS/src/init/e820.c:23
        {
        print_e820_entry(buffer[cnt]);
   238e9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   238ec:	89 d0                	mov    eax,edx
   238ee:	01 c0                	add    eax,eax
   238f0:	01 d0                	add    eax,edx
   238f2:	c1 e0 03             	shl    eax,0x3
   238f5:	89 c2                	mov    edx,eax
   238f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   238fa:	01 d0                	add    eax,edx
   238fc:	83 ec 08             	sub    esp,0x8
   238ff:	83 ec 18             	sub    esp,0x18
   23902:	89 e2                	mov    edx,esp
   23904:	8b 08                	mov    ecx,DWORD PTR [eax]
   23906:	89 0a                	mov    DWORD PTR [edx],ecx
   23908:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   2390b:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   2390e:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23911:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23914:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23917:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   2391a:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   2391d:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23920:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23923:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23926:	e8 09 ff ff ff       	call   23834 <print_e820_entry>
   2392b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:24
        cnt++;
   2392e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:25
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   23932:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   23936:	7e 40                	jle    23978 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:25 (discriminator 1)
   23938:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2393b:	8d 58 02             	lea    ebx,[eax+0x2]
   2393e:	e8 70 46 ff ff       	call   17fb3 <cursorGetMaxY>
   23943:	89 c1                	mov    ecx,eax
   23945:	89 d8                	mov    eax,ebx
   23947:	99                   	cdq    
   23948:	f7 f9                	idiv   ecx
   2394a:	89 d0                	mov    eax,edx
   2394c:	85 c0                	test   eax,eax
   2394e:	75 28                	jne    23978 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:27
        {
            puts("Paused, press a key to continue");
   23950:	83 ec 0c             	sub    esp,0xc
   23953:	68 9c 46 08 00       	push   0x8469c
   23958:	e8 15 47 ff ff       	call   18072 <puts>
   2395d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:28
            waitForKeyboardKey();
   23960:	e8 ed d8 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/e820.c:29
            cursorMoveTo(0,cursorGetPosY());
   23965:	e8 79 46 ff ff       	call   17fe3 <cursorGetPosY>
   2396a:	83 ec 08             	sub    esp,0x8
   2396d:	50                   	push   eax
   2396e:	6a 00                	push   0x0
   23970:	e8 ce 45 ff ff       	call   17f43 <cursorMoveTo>
   23975:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 2)
void printE820Map()
{
    SMAP_entry* buffer=smap_table;
    int entryCount=kE820RecordCount;
    print_e820_map(smap_table, kE820RecordCount);
        for (int cnt=0;cnt<entryCount;cnt++)
   23978:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 1)
   2397c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2397f:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   23982:	0f 8c 61 ff ff ff    	jl     238e9 <printE820Map+0x42>
/home/yogi/src/os/chrisOS/src/init/e820.c:32
            puts("Paused, press a key to continue");
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }
        }
}
   23988:	90                   	nop
   23989:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2398c:	c9                   	leave  
   2398d:	c3                   	ret    

0002398e <print_e820_map>:
print_e820_map():
/home/yogi/src/os/chrisOS/src/init/e820.c:35

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
   2398e:	55                   	push   ebp
   2398f:	89 e5                	mov    ebp,esp
   23991:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/e820.c:36
    bool printOnlyUsable=entryCount>10?true:false;
   23994:	83 7d 0c 0a          	cmp    DWORD PTR [ebp+0xc],0xa
   23998:	0f 9f c0             	setg   al
   2399b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/init/e820.c:38
    
        for (int cnt=0;cnt<entryCount;cnt++)
   2399e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   239a5:	e9 bc 00 00 00       	jmp    23a66 <print_e820_map+0xd8>
/home/yogi/src/os/chrisOS/src/init/e820.c:40
        {
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
   239aa:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   239ae:	83 f0 01             	xor    eax,0x1
   239b1:	84 c0                	test   al,al
   239b3:	75 21                	jne    239d6 <print_e820_map+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 1)
   239b5:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
   239b9:	74 62                	je     23a1d <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 2)
   239bb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   239be:	89 d0                	mov    eax,edx
   239c0:	01 c0                	add    eax,eax
   239c2:	01 d0                	add    eax,edx
   239c4:	c1 e0 03             	shl    eax,0x3
   239c7:	89 c2                	mov    edx,eax
   239c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   239cc:	01 d0                	add    eax,edx
   239ce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   239d1:	83 f8 01             	cmp    eax,0x1
   239d4:	75 47                	jne    23a1d <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:41
                print_e820_entry(buffer[cnt]);
   239d6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   239d9:	89 d0                	mov    eax,edx
   239db:	01 c0                	add    eax,eax
   239dd:	01 d0                	add    eax,edx
   239df:	c1 e0 03             	shl    eax,0x3
   239e2:	89 c2                	mov    edx,eax
   239e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   239e7:	01 d0                	add    eax,edx
   239e9:	83 ec 08             	sub    esp,0x8
   239ec:	83 ec 18             	sub    esp,0x18
   239ef:	89 e2                	mov    edx,esp
   239f1:	8b 08                	mov    ecx,DWORD PTR [eax]
   239f3:	89 0a                	mov    DWORD PTR [edx],ecx
   239f5:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   239f8:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   239fb:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   239fe:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23a01:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23a04:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23a07:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23a0a:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23a0d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23a10:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23a13:	e8 1c fe ff ff       	call   23834 <print_e820_entry>
   23a18:	83 c4 20             	add    esp,0x20
   23a1b:	eb 45                	jmp    23a62 <print_e820_map+0xd4>
/home/yogi/src/os/chrisOS/src/init/e820.c:43
            else
                print_e820_entry(buffer[cnt]);
   23a1d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23a20:	89 d0                	mov    eax,edx
   23a22:	01 c0                	add    eax,eax
   23a24:	01 d0                	add    eax,edx
   23a26:	c1 e0 03             	shl    eax,0x3
   23a29:	89 c2                	mov    edx,eax
   23a2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a2e:	01 d0                	add    eax,edx
   23a30:	83 ec 08             	sub    esp,0x8
   23a33:	83 ec 18             	sub    esp,0x18
   23a36:	89 e2                	mov    edx,esp
   23a38:	8b 08                	mov    ecx,DWORD PTR [eax]
   23a3a:	89 0a                	mov    DWORD PTR [edx],ecx
   23a3c:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23a3f:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23a42:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23a45:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23a48:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23a4b:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23a4e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23a51:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23a54:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23a57:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23a5a:	e8 d5 fd ff ff       	call   23834 <print_e820_entry>
   23a5f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 2)

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
    bool printOnlyUsable=entryCount>10?true:false;
    
        for (int cnt=0;cnt<entryCount;cnt++)
   23a62:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 1)
   23a66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23a69:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23a6c:	0f 8c 38 ff ff ff    	jl     239aa <print_e820_map+0x1c>
/home/yogi/src/os/chrisOS/src/init/e820.c:45
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
                print_e820_entry(buffer[cnt]);
            else
                print_e820_entry(buffer[cnt]);
        }
}
   23a72:	90                   	nop
   23a73:	c9                   	leave  
   23a74:	c3                   	ret    

00023a75 <sum_e820_usable_memory>:
sum_e820_usable_memory():
/home/yogi/src/os/chrisOS/src/init/e820.c:48

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
   23a75:	55                   	push   ebp
   23a76:	89 e5                	mov    ebp,esp
   23a78:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:49
    qword lRetVal = 0;
   23a7b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:51
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23a82:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   23a89:	eb 38                	jmp    23ac3 <sum_e820_usable_memory+0x4e>
/home/yogi/src/os/chrisOS/src/init/e820.c:53
    {
        if (buffer[cnt].Type==1)    
   23a8b:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23a8e:	89 d0                	mov    eax,edx
   23a90:	01 c0                	add    eax,eax
   23a92:	01 d0                	add    eax,edx
   23a94:	c1 e0 03             	shl    eax,0x3
   23a97:	89 c2                	mov    edx,eax
   23a99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23a9c:	01 d0                	add    eax,edx
   23a9e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23aa1:	83 f8 01             	cmp    eax,0x1
   23aa4:	75 19                	jne    23abf <sum_e820_usable_memory+0x4a>
/home/yogi/src/os/chrisOS/src/init/e820.c:54
            lRetVal += buffer[cnt].LengthL;
   23aa6:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23aa9:	89 d0                	mov    eax,edx
   23aab:	01 c0                	add    eax,eax
   23aad:	01 d0                	add    eax,edx
   23aaf:	c1 e0 03             	shl    eax,0x3
   23ab2:	89 c2                	mov    edx,eax
   23ab4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ab7:	01 d0                	add    eax,edx
   23ab9:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   23abc:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 2)

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
    qword lRetVal = 0;
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23abf:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 1)
   23ac3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   23ac6:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23ac9:	7c c0                	jl     23a8b <sum_e820_usable_memory+0x16>
/home/yogi/src/os/chrisOS/src/init/e820.c:56
    {
        if (buffer[cnt].Type==1)    
            lRetVal += buffer[cnt].LengthL;
    }
    return lRetVal;
   23acb:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   23ace:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:57
   23ad3:	c9                   	leave  
   23ad4:	c3                   	ret    
   23ad5:	66 90                	xchg   ax,ax
   23ad7:	90                   	nop

00023ad8 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   23ad8:	55                   	push   ebp
   23ad9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   23adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ade:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   23ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ae8:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23aee:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:51
}
   23af0:	90                   	nop
   23af1:	5d                   	pop    ebp
   23af2:	c3                   	ret    

00023af3 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   23af3:	55                   	push   ebp
   23af4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   23af6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23af9:	8b 00                	mov    eax,DWORD PTR [eax]
   23afb:	85 c0                	test   eax,eax
   23afd:	75 0d                	jne    23b0c <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:61
        list->head = node->next;
   23aff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b02:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23b05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b08:	89 10                	mov    DWORD PTR [eax],edx
   23b0a:	eb 0e                	jmp    23b1a <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:63
    else
        node->previous->next = node->next;
   23b0c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b0f:	8b 00                	mov    eax,DWORD PTR [eax]
   23b11:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23b14:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   23b17:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:65

    if(!node->next)
   23b1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b1d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23b20:	85 c0                	test   eax,eax
   23b22:	75 0d                	jne    23b31 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:66
        list->tail = node->previous;
   23b24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b27:	8b 10                	mov    edx,DWORD PTR [eax]
   23b29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b2c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   23b2f:	eb 0d                	jmp    23b3e <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   23b31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b34:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23b37:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23b3a:	8b 12                	mov    edx,DWORD PTR [edx]
   23b3c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
}
   23b3e:	90                   	nop
   23b3f:	5d                   	pop    ebp
   23b40:	c3                   	ret    

00023b41 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   23b41:	55                   	push   ebp
   23b42:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   23b44:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23b47:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23b4a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:80
    new_node->next = node->next;
   23b4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b4f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23b52:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23b55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:81
    if (!node->next)
   23b58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b5b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23b5e:	85 c0                	test   eax,eax
   23b60:	75 0b                	jne    23b6d <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:82
        list->tail = new_node;
   23b62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23b65:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b68:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   23b6b:	eb 0b                	jmp    23b78 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:84
    else
        node->next->previous = new_node;
   23b6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b70:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23b73:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b76:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:85
    node->next = new_node;
   23b78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b7b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b7e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:86
}
   23b81:	90                   	nop
   23b82:	5d                   	pop    ebp
   23b83:	c3                   	ret    

00023b84 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   23b84:	55                   	push   ebp
   23b85:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   23b87:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b8a:	8b 10                	mov    edx,DWORD PTR [eax]
   23b8c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23b8f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:97
    new_node->next = node;
   23b91:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23b94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23b97:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:98
    if (!node->previous)
   23b9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23b9d:	8b 00                	mov    eax,DWORD PTR [eax]
   23b9f:	85 c0                	test   eax,eax
   23ba1:	75 0a                	jne    23bad <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:99
        list->head = new_node;
   23ba3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ba6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23ba9:	89 10                	mov    DWORD PTR [eax],edx
   23bab:	eb 0b                	jmp    23bb8 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:101
    else
        node->previous->next = new_node;
   23bad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23bb0:	8b 00                	mov    eax,DWORD PTR [eax]
   23bb2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23bb5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:102
    node->previous = new_node;
   23bb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23bbb:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23bbe:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:103
}
   23bc0:	90                   	nop
   23bc1:	5d                   	pop    ebp
   23bc2:	c3                   	ret    

00023bc3 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   23bc3:	55                   	push   ebp
   23bc4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   23bc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23bc9:	8b 00                	mov    eax,DWORD PTR [eax]
   23bcb:	85 c0                	test   eax,eax
   23bcd:	75 26                	jne    23bf5 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:114
    {
        list->head = node;
   23bcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23bd2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23bd5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:115
        list->tail = node;
   23bd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23bda:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23bdd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:116
        node->previous = 0;
   23be0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23be3:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:117
        node->next = 0;
   23be9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23bec:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   23bf3:	eb 14                	jmp    23c09 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   23bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23bf8:	8b 00                	mov    eax,DWORD PTR [eax]
   23bfa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23bfd:	50                   	push   eax
   23bfe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23c01:	e8 7e ff ff ff       	call   23b84 <fat_list_insert_before>
   23c06:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
}
   23c09:	90                   	nop
   23c0a:	c9                   	leave  
   23c0b:	c3                   	ret    

00023c0c <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   23c0c:	55                   	push   ebp
   23c0d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   23c0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23c12:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23c15:	85 c0                	test   eax,eax
   23c17:	75 10                	jne    23c29 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:131
        fat_list_insert_first(list, node);
   23c19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23c1c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23c1f:	e8 9f ff ff ff       	call   23bc3 <fat_list_insert_first>
   23c24:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   23c27:	eb 15                	jmp    23c3e <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   23c29:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23c2c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23c2f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23c32:	50                   	push   eax
   23c33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23c36:	e8 06 ff ff ff       	call   23b41 <fat_list_insert_after>
   23c3b:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
}
   23c3e:	90                   	nop
   23c3f:	c9                   	leave  
   23c40:	c3                   	ret    

00023c41 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   23c41:	55                   	push   ebp
   23c42:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   23c44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23c47:	8b 00                	mov    eax,DWORD PTR [eax]
   23c49:	85 c0                	test   eax,eax
   23c4b:	0f 94 c0             	sete   al
   23c4e:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:143
}
   23c51:	5d                   	pop    ebp
   23c52:	c3                   	ret    

00023c53 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   23c53:	55                   	push   ebp
   23c54:	89 e5                	mov    ebp,esp
   23c56:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   23c59:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23c5c:	8b 00                	mov    eax,DWORD PTR [eax]
   23c5e:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:154
    if (node)
   23c61:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   23c65:	74 0e                	je     23c75 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:155
        fat_list_remove(list, node);
   23c67:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   23c6a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23c6d:	e8 81 fe ff ff       	call   23af3 <fat_list_remove>
   23c72:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:157

    return node;
   23c75:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:158
}
   23c78:	c9                   	leave  
   23c79:	c3                   	ret    

00023c7a <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   23c7a:	55                   	push   ebp
   23c7b:	89 e5                	mov    ebp,esp
   23c7d:	83 ec 08             	sub    esp,0x8
   23c80:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23c83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23c86:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   23c8a:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   23c8d:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   23c91:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   23c95:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   23c96:	90                   	nop
   23c97:	c9                   	leave  
   23c98:	c3                   	ret    

00023c99 <gdt_init>:
gdt_init():
/home/yogi/src/os/chrisOS/src/init/init.c:83
 3 (0x18) - data @ 0x0          <-- Non-kernel data (DS/ES/FS/GS/SS): Will always be 0x0
 4 (0x20) - code @ 0xC0000000   <-- will belong to the kernel proper
 5 (0x28) - code @ 0x0          <-- Non-kernel code (CS): Will always be 0x0
 */
void HIGH_CODE_SECTION gdt_init()
{
   23c99:	55                   	push   ebp
   23c9a:	89 e5                	mov    ebp,esp
   23c9c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:84
    gdtEntry(1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   23c9f:	83 ec 08             	sub    esp,0x8
   23ca2:	6a 01                	push   0x1
   23ca4:	6a c0                	push   0xffffffc0
   23ca6:	6a 88                	push   0xffffff88
   23ca8:	68 ff ff 0f 00       	push   0xfffff
   23cad:	6a 00                	push   0x0
   23caf:	6a 01                	push   0x1
   23cb1:	e8 5a 4c ff ff       	call   18910 <gdtEntry>
   23cb6:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:86
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   23cb9:	83 ec 08             	sub    esp,0x8
   23cbc:	6a 01                	push   0x1
   23cbe:	6a c0                	push   0xffffffc0
   23cc0:	6a 82                	push   0xffffff82
   23cc2:	68 ff ff 0f 00       	push   0xfffff
   23cc7:	6a 00                	push   0x0
   23cc9:	6a 02                	push   0x2
   23ccb:	e8 40 4c ff ff       	call   18910 <gdtEntry>
   23cd0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:88
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(3, 0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,      //this will stay at base 0x0, never 0xc0000000
   23cd3:	83 ec 08             	sub    esp,0x8
   23cd6:	6a 01                	push   0x1
   23cd8:	6a c0                	push   0xffffffc0
   23cda:	6a 82                	push   0xffffff82
   23cdc:	6a ff                	push   0xffffffff
   23cde:	6a 00                	push   0x0
   23ce0:	6a 03                	push   0x3
   23ce2:	e8 29 4c ff ff       	call   18910 <gdtEntry>
   23ce7:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:90
          GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(4, KERNEL_PAGED_BASE_ADDRESS , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   23cea:	83 ec 08             	sub    esp,0x8
   23ced:	6a 01                	push   0x1
   23cef:	6a c0                	push   0xffffffc0
   23cf1:	6a 88                	push   0xffffff88
   23cf3:	68 ff ff 0f 00       	push   0xfffff
   23cf8:	68 00 00 00 c0       	push   0xc0000000
   23cfd:	6a 04                	push   0x4
   23cff:	e8 0c 4c ff ff       	call   18910 <gdtEntry>
   23d04:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:92
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(5, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,       //this will always stay at base 0x0, never 0xC0000000
   23d07:	83 ec 08             	sub    esp,0x8
   23d0a:	6a 01                	push   0x1
   23d0c:	6a c0                	push   0xffffffc0
   23d0e:	6a 88                	push   0xffffff88
   23d10:	68 ff ff 0f 00       	push   0xfffff
   23d15:	6a 00                	push   0x0
   23d17:	6a 05                	push   0x5
   23d19:	e8 f2 4b ff ff       	call   18910 <gdtEntry>
   23d1e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:95
              GDT_GRANULAR | GDT_32BIT,true);
    
    gdtEntryRM(1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   23d21:	83 ec 0c             	sub    esp,0xc
   23d24:	68 80 00 00 00       	push   0x80
   23d29:	68 88 00 00 00       	push   0x88
   23d2e:	68 ff ff 0f 00       	push   0xfffff
   23d33:	6a 00                	push   0x0
   23d35:	6a 01                	push   0x1
   23d37:	e8 a7 4c ff ff       	call   189e3 <gdtEntryRM>
   23d3c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:97
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   23d3f:	83 ec 0c             	sub    esp,0xc
   23d42:	68 80 00 00 00       	push   0x80
   23d47:	68 82 00 00 00       	push   0x82
   23d4c:	68 ff ff 0f 00       	push   0xfffff
   23d51:	6a 00                	push   0x0
   23d53:	6a 02                	push   0x2
   23d55:	e8 89 4c ff ff       	call   189e3 <gdtEntryRM>
   23d5a:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:99
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(3, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_WRITABLE,
   23d5d:	83 ec 0c             	sub    esp,0xc
   23d60:	68 c0 00 00 00       	push   0xc0
   23d65:	68 8a 00 00 00       	push   0x8a
   23d6a:	68 ff ff 0f 00       	push   0xfffff
   23d6f:	6a 00                	push   0x0
   23d71:	6a 03                	push   0x3
   23d73:	e8 6b 4c ff ff       	call   189e3 <gdtEntryRM>
   23d78:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:102
              GDT_GRANULAR | GDT_32BIT);

    kernelGDT.limit = (sizeof(struct GDT) * GDT_ENTRIES) - 1;
   23d7b:	66 c7 05 4c 04 12 00 	mov    WORD PTR ds:0x12044c,0x31f
   23d82:	1f 03 
/home/yogi/src/os/chrisOS/src/init/init.c:103
    kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   23d84:	c7 05 4e 04 12 00 00 	mov    DWORD PTR ds:0x12044e,0x154000
   23d8b:	40 15 00 
/home/yogi/src/os/chrisOS/src/init/init.c:104
    rmGdtp.limit = sizeof(struct GDT) * GDT_ENTRIES - 1;
   23d8e:	66 c7 05 3c 04 12 00 	mov    WORD PTR ds:0x12043c,0x31f
   23d95:	1f 03 
/home/yogi/src/os/chrisOS/src/init/init.c:105
    rmGdtp.base = (unsigned int)rmGdt;
   23d97:	a1 44 04 12 00       	mov    eax,ds:0x120444
   23d9c:	a3 3e 04 12 00       	mov    ds:0x12043e,eax
/home/yogi/src/os/chrisOS/src/init/init.c:106
}
   23da1:	90                   	nop
   23da2:	c9                   	leave  
   23da3:	c3                   	ret    

00023da4 <quietHardware>:
quietHardware():
/home/yogi/src/os/chrisOS/src/init/init.c:109

void HIGH_CODE_SECTION quietHardware()
{
   23da4:	55                   	push   ebp
   23da5:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/init.c:110
    outb(0xa1, 0x7f);
   23da7:	6a 7f                	push   0x7f
   23da9:	68 a1 00 00 00       	push   0xa1
   23dae:	e8 c7 fe ff ff       	call   23c7a <outb>
   23db3:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:111
    outb(0x21, 0xff);
   23db6:	68 ff 00 00 00       	push   0xff
   23dbb:	6a 21                	push   0x21
   23dbd:	e8 b8 fe ff ff       	call   23c7a <outb>
   23dc2:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:112
}
   23dc5:	90                   	nop
   23dc6:	c9                   	leave  
   23dc7:	c3                   	ret    

00023dc8 <doHDSetup>:
doHDSetup():
/home/yogi/src/os/chrisOS/src/init/init.c:115

void doHDSetup()
{
   23dc8:	55                   	push   ebp
   23dc9:	89 e5                	mov    ebp,esp
   23dcb:	57                   	push   edi
   23dcc:	56                   	push   esi
   23dcd:	53                   	push   ebx
   23dce:	81 ec 2c 08 00 00    	sub    esp,0x82c
/home/yogi/src/os/chrisOS/src/init/init.c:116
    printk("ATA: Scanning for hard drives on primary bus ...\n");
   23dd4:	83 ec 0c             	sub    esp,0xc
   23dd7:	68 a0 48 08 00       	push   0x848a0
   23ddc:	e8 12 34 00 00       	call   271f3 <printk>
   23de1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:117
    ataScanForHarddrives();
   23de4:	e8 fe e8 ff ff       	call   226e7 <ataScanForHarddrives>
/home/yogi/src/os/chrisOS/src/init/init.c:119
    char* p1[512];
    memset(p1,0,512);
   23de9:	83 ec 04             	sub    esp,0x4
   23dec:	68 00 02 00 00       	push   0x200
   23df1:	6a 00                	push   0x0
   23df3:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23df9:	50                   	push   eax
   23dfa:	e8 7e 12 00 00       	call   2507d <memset>
   23dff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:121
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
   23e02:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e07:	05 00 02 00 00       	add    eax,0x200
   23e0c:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:122
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   23e12:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e17:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23e1e:	3c 01                	cmp    al,0x1
   23e20:	75 14                	jne    23e36 <doHDSetup+0x6e>
/home/yogi/src/os/chrisOS/src/init/init.c:122 (discriminator 1)
   23e22:	83 ec 0c             	sub    esp,0xc
   23e25:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23e2b:	50                   	push   eax
   23e2c:	e8 d7 38 00 00       	call   27708 <strtrim>
   23e31:	83 c4 10             	add    esp,0x10
   23e34:	eb 05                	jmp    23e3b <doHDSetup+0x73>
/home/yogi/src/os/chrisOS/src/init/init.c:122 (discriminator 2)
   23e36:	b8 d2 48 08 00       	mov    eax,0x848d2
/home/yogi/src/os/chrisOS/src/init/init.c:122 (discriminator 4)
   23e3b:	83 ec 08             	sub    esp,0x8
   23e3e:	50                   	push   eax
   23e3f:	68 d8 48 08 00       	push   0x848d8
   23e44:	e8 aa 33 00 00       	call   271f3 <printk>
   23e49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:123 (discriminator 4)
    if (kATADeviceInfo[0].ATADeviceAvailable)
   23e4c:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e51:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23e58:	84 c0                	test   al,al
   23e5a:	0f 84 92 00 00 00    	je     23ef2 <doHDSetup+0x12a>
/home/yogi/src/os/chrisOS/src/init/init.c:129
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
   23e60:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e65:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:125
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23e6c:	84 c0                	test   al,al
   23e6e:	74 07                	je     23e77 <doHDSetup+0xaf>
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 1)
   23e70:	bf e9 48 08 00       	mov    edi,0x848e9
   23e75:	eb 05                	jmp    23e7c <doHDSetup+0xb4>
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 2)
   23e77:	bf ee 48 08 00       	mov    edi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:128 (discriminator 4)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
   23e7c:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e81:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 4)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23e88:	84 c0                	test   al,al
   23e8a:	74 07                	je     23e93 <doHDSetup+0xcb>
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 5)
   23e8c:	be ef 48 08 00       	mov    esi,0x848ef
   23e91:	eb 05                	jmp    23e98 <doHDSetup+0xd0>
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 6)
   23e93:	be ee 48 08 00       	mov    esi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:127 (discriminator 8)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
   23e98:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23e9d:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 8)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23ea4:	84 c0                	test   al,al
   23ea6:	74 07                	je     23eaf <doHDSetup+0xe7>
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 9)
   23ea8:	bb f6 48 08 00       	mov    ebx,0x848f6
   23ead:	eb 05                	jmp    23eb4 <doHDSetup+0xec>
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 10)
   23eaf:	bb ee 48 08 00       	mov    ebx,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:126 (discriminator 12)
                kATADeviceInfo[0].sectorSize,
   23eb4:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
/home/yogi/src/os/chrisOS/src/init/init.c:125 (discriminator 12)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   23eb9:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   23ebf:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   23ec5:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   23ecb:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   23ed1:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   23ed7:	0f af d1             	imul   edx,ecx
   23eda:	c1 ea 14             	shr    edx,0x14
   23edd:	83 ec 08             	sub    esp,0x8
   23ee0:	57                   	push   edi
   23ee1:	56                   	push   esi
   23ee2:	53                   	push   ebx
   23ee3:	50                   	push   eax
   23ee4:	52                   	push   edx
   23ee5:	68 fb 48 08 00       	push   0x848fb
   23eea:	e8 04 33 00 00       	call   271f3 <printk>
   23eef:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:131
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
   23ef2:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23ef7:	05 73 02 00 00       	add    eax,0x273
   23efc:	05 00 02 00 00       	add    eax,0x200
   23f01:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:132
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   23f07:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23f0c:	05 73 02 00 00       	add    eax,0x273
   23f11:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23f18:	3c 01                	cmp    al,0x1
   23f1a:	75 14                	jne    23f30 <doHDSetup+0x168>
/home/yogi/src/os/chrisOS/src/init/init.c:132 (discriminator 1)
   23f1c:	83 ec 0c             	sub    esp,0xc
   23f1f:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   23f25:	50                   	push   eax
   23f26:	e8 dd 37 00 00       	call   27708 <strtrim>
   23f2b:	83 c4 10             	add    esp,0x10
   23f2e:	eb 05                	jmp    23f35 <doHDSetup+0x16d>
/home/yogi/src/os/chrisOS/src/init/init.c:132 (discriminator 2)
   23f30:	b8 d2 48 08 00       	mov    eax,0x848d2
/home/yogi/src/os/chrisOS/src/init/init.c:132 (discriminator 4)
   23f35:	83 ec 08             	sub    esp,0x8
   23f38:	50                   	push   eax
   23f39:	68 10 49 08 00       	push   0x84910
   23f3e:	e8 b0 32 00 00       	call   271f3 <printk>
   23f43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:133 (discriminator 4)
    if (kATADeviceInfo[1].ATADeviceAvailable)
   23f46:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23f4b:	05 73 02 00 00       	add    eax,0x273
   23f50:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   23f57:	84 c0                	test   al,al
   23f59:	0f 84 b2 00 00 00    	je     24011 <doHDSetup+0x249>
/home/yogi/src/os/chrisOS/src/init/init.c:139
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
   23f5f:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23f64:	05 73 02 00 00       	add    eax,0x273
   23f69:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:135
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23f70:	84 c0                	test   al,al
   23f72:	74 07                	je     23f7b <doHDSetup+0x1b3>
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 1)
   23f74:	bf e9 48 08 00       	mov    edi,0x848e9
   23f79:	eb 05                	jmp    23f80 <doHDSetup+0x1b8>
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 2)
   23f7b:	bf ee 48 08 00       	mov    edi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:138 (discriminator 4)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
   23f80:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23f85:	05 73 02 00 00       	add    eax,0x273
   23f8a:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 4)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23f91:	84 c0                	test   al,al
   23f93:	74 07                	je     23f9c <doHDSetup+0x1d4>
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 5)
   23f95:	be ef 48 08 00       	mov    esi,0x848ef
   23f9a:	eb 05                	jmp    23fa1 <doHDSetup+0x1d9>
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 6)
   23f9c:	be ee 48 08 00       	mov    esi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:137 (discriminator 8)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
   23fa1:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23fa6:	05 73 02 00 00       	add    eax,0x273
   23fab:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 8)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23fb2:	84 c0                	test   al,al
   23fb4:	74 07                	je     23fbd <doHDSetup+0x1f5>
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 9)
   23fb6:	bb f6 48 08 00       	mov    ebx,0x848f6
   23fbb:	eb 05                	jmp    23fc2 <doHDSetup+0x1fa>
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 10)
   23fbd:	bb ee 48 08 00       	mov    ebx,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:136 (discriminator 12)
                kATADeviceInfo[1].sectorSize,
   23fc2:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   23fc7:	05 73 02 00 00       	add    eax,0x273
/home/yogi/src/os/chrisOS/src/init/init.c:135 (discriminator 12)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   23fcc:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   23fd2:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   23fd8:	81 c2 73 02 00 00    	add    edx,0x273
   23fde:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   23fe4:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   23fea:	81 c2 73 02 00 00    	add    edx,0x273
   23ff0:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   23ff6:	0f af d1             	imul   edx,ecx
   23ff9:	c1 ea 14             	shr    edx,0x14
   23ffc:	83 ec 08             	sub    esp,0x8
   23fff:	57                   	push   edi
   24000:	56                   	push   esi
   24001:	53                   	push   ebx
   24002:	50                   	push   eax
   24003:	52                   	push   edx
   24004:	68 21 49 08 00       	push   0x84921
   24009:	e8 e5 31 00 00       	call   271f3 <printk>
   2400e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:141
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
    }
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
   24011:	83 ec 0c             	sub    esp,0xc
   24014:	68 38 49 08 00       	push   0x84938
   24019:	e8 d5 31 00 00       	call   271f3 <printk>
   2401e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:142
    *p1=kATADeviceInfo[2].ATADeviceModel;
   24021:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24026:	05 e6 04 00 00       	add    eax,0x4e6
   2402b:	05 00 02 00 00       	add    eax,0x200
   24030:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:143
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24036:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2403b:	05 e6 04 00 00       	add    eax,0x4e6
   24040:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24047:	3c 01                	cmp    al,0x1
   24049:	75 14                	jne    2405f <doHDSetup+0x297>
/home/yogi/src/os/chrisOS/src/init/init.c:143 (discriminator 1)
   2404b:	83 ec 0c             	sub    esp,0xc
   2404e:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24054:	50                   	push   eax
   24055:	e8 ae 36 00 00       	call   27708 <strtrim>
   2405a:	83 c4 10             	add    esp,0x10
   2405d:	eb 05                	jmp    24064 <doHDSetup+0x29c>
/home/yogi/src/os/chrisOS/src/init/init.c:143 (discriminator 2)
   2405f:	b8 d2 48 08 00       	mov    eax,0x848d2
/home/yogi/src/os/chrisOS/src/init/init.c:143 (discriminator 4)
   24064:	83 ec 08             	sub    esp,0x8
   24067:	50                   	push   eax
   24068:	68 d8 48 08 00       	push   0x848d8
   2406d:	e8 81 31 00 00       	call   271f3 <printk>
   24072:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:144 (discriminator 4)
    if (kATADeviceInfo[2].ATADeviceAvailable)
   24075:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2407a:	05 e6 04 00 00       	add    eax,0x4e6
   2407f:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24086:	84 c0                	test   al,al
   24088:	0f 84 b2 00 00 00    	je     24140 <doHDSetup+0x378>
/home/yogi/src/os/chrisOS/src/init/init.c:150
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
   2408e:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24093:	05 e6 04 00 00       	add    eax,0x4e6
   24098:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:146
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   2409f:	84 c0                	test   al,al
   240a1:	74 07                	je     240aa <doHDSetup+0x2e2>
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 1)
   240a3:	bf e9 48 08 00       	mov    edi,0x848e9
   240a8:	eb 05                	jmp    240af <doHDSetup+0x2e7>
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 2)
   240aa:	bf ee 48 08 00       	mov    edi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 4)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
   240af:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   240b4:	05 e6 04 00 00       	add    eax,0x4e6
   240b9:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 4)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   240c0:	84 c0                	test   al,al
   240c2:	74 07                	je     240cb <doHDSetup+0x303>
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 5)
   240c4:	be ef 48 08 00       	mov    esi,0x848ef
   240c9:	eb 05                	jmp    240d0 <doHDSetup+0x308>
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 6)
   240cb:	be ee 48 08 00       	mov    esi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:148 (discriminator 8)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
   240d0:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   240d5:	05 e6 04 00 00       	add    eax,0x4e6
   240da:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 8)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   240e1:	84 c0                	test   al,al
   240e3:	74 07                	je     240ec <doHDSetup+0x324>
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 9)
   240e5:	bb f6 48 08 00       	mov    ebx,0x848f6
   240ea:	eb 05                	jmp    240f1 <doHDSetup+0x329>
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 10)
   240ec:	bb ee 48 08 00       	mov    ebx,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:147 (discriminator 12)
                kATADeviceInfo[2].sectorSize,
   240f1:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   240f6:	05 e6 04 00 00       	add    eax,0x4e6
/home/yogi/src/os/chrisOS/src/init/init.c:146 (discriminator 12)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   240fb:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24101:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24107:	81 c2 e6 04 00 00    	add    edx,0x4e6
   2410d:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   24113:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24119:	81 c2 e6 04 00 00    	add    edx,0x4e6
   2411f:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   24125:	0f af d1             	imul   edx,ecx
   24128:	c1 ea 14             	shr    edx,0x14
   2412b:	83 ec 08             	sub    esp,0x8
   2412e:	57                   	push   edi
   2412f:	56                   	push   esi
   24130:	53                   	push   ebx
   24131:	50                   	push   eax
   24132:	52                   	push   edx
   24133:	68 fb 48 08 00       	push   0x848fb
   24138:	e8 b6 30 00 00       	call   271f3 <printk>
   2413d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:152
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
   24140:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24145:	05 59 07 00 00       	add    eax,0x759
   2414a:	05 00 02 00 00       	add    eax,0x200
   2414f:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:153
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24155:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   2415a:	05 59 07 00 00       	add    eax,0x759
   2415f:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24166:	3c 01                	cmp    al,0x1
   24168:	75 14                	jne    2417e <doHDSetup+0x3b6>
/home/yogi/src/os/chrisOS/src/init/init.c:153 (discriminator 1)
   2416a:	83 ec 0c             	sub    esp,0xc
   2416d:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24173:	50                   	push   eax
   24174:	e8 8f 35 00 00       	call   27708 <strtrim>
   24179:	83 c4 10             	add    esp,0x10
   2417c:	eb 05                	jmp    24183 <doHDSetup+0x3bb>
/home/yogi/src/os/chrisOS/src/init/init.c:153 (discriminator 2)
   2417e:	b8 d2 48 08 00       	mov    eax,0x848d2
/home/yogi/src/os/chrisOS/src/init/init.c:153 (discriminator 4)
   24183:	83 ec 08             	sub    esp,0x8
   24186:	50                   	push   eax
   24187:	68 10 49 08 00       	push   0x84910
   2418c:	e8 62 30 00 00       	call   271f3 <printk>
   24191:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:154 (discriminator 4)
    if (kATADeviceInfo[3].ATADeviceAvailable)
   24194:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24199:	05 59 07 00 00       	add    eax,0x759
   2419e:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   241a5:	84 c0                	test   al,al
   241a7:	0f 84 b2 00 00 00    	je     2425f <doHDSetup+0x497>
/home/yogi/src/os/chrisOS/src/init/init.c:160
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
   241ad:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   241b2:	05 59 07 00 00       	add    eax,0x759
   241b7:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:156
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   241be:	84 c0                	test   al,al
   241c0:	74 07                	je     241c9 <doHDSetup+0x401>
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 1)
   241c2:	bf e9 48 08 00       	mov    edi,0x848e9
   241c7:	eb 05                	jmp    241ce <doHDSetup+0x406>
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 2)
   241c9:	bf ee 48 08 00       	mov    edi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:159 (discriminator 4)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
   241ce:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   241d3:	05 59 07 00 00       	add    eax,0x759
   241d8:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 4)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   241df:	84 c0                	test   al,al
   241e1:	74 07                	je     241ea <doHDSetup+0x422>
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 5)
   241e3:	be ef 48 08 00       	mov    esi,0x848ef
   241e8:	eb 05                	jmp    241ef <doHDSetup+0x427>
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 6)
   241ea:	be ee 48 08 00       	mov    esi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:158 (discriminator 8)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
   241ef:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   241f4:	05 59 07 00 00       	add    eax,0x759
   241f9:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 8)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24200:	84 c0                	test   al,al
   24202:	74 07                	je     2420b <doHDSetup+0x443>
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 9)
   24204:	bb f6 48 08 00       	mov    ebx,0x848f6
   24209:	eb 05                	jmp    24210 <doHDSetup+0x448>
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 10)
   2420b:	bb ee 48 08 00       	mov    ebx,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:157 (discriminator 12)
                kATADeviceInfo[3].sectorSize,
   24210:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24215:	05 59 07 00 00       	add    eax,0x759
/home/yogi/src/os/chrisOS/src/init/init.c:156 (discriminator 12)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   2421a:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24220:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24226:	81 c2 59 07 00 00    	add    edx,0x759
   2422c:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   24232:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24238:	81 c2 59 07 00 00    	add    edx,0x759
   2423e:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   24244:	0f af d1             	imul   edx,ecx
   24247:	c1 ea 14             	shr    edx,0x14
   2424a:	83 ec 08             	sub    esp,0x8
   2424d:	57                   	push   edi
   2424e:	56                   	push   esi
   2424f:	53                   	push   ebx
   24250:	50                   	push   eax
   24251:	52                   	push   edx
   24252:	68 21 49 08 00       	push   0x84921
   24257:	e8 97 2f 00 00       	call   271f3 <printk>
   2425c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:162
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
   2425f:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24264:	83 ec 04             	sub    esp,0x4
   24267:	50                   	push   eax
   24268:	68 6c 49 08 00       	push   0x8496c
   2426d:	68 e0 8f 09 00       	push   0x98fe0
   24272:	e8 e0 01 00 00       	call   24457 <ParamExists>
   24277:	83 c4 10             	add    esp,0x10
   2427a:	84 c0                	test   al,al
   2427c:	74 15                	je     24293 <doHDSetup+0x4cb>
/home/yogi/src/os/chrisOS/src/init/init.c:163
        printk("AHCI: No scanning per parameter 'noahci'\n");
   2427e:	83 ec 0c             	sub    esp,0xc
   24281:	68 74 49 08 00       	push   0x84974
   24286:	e8 68 2f 00 00       	call   271f3 <printk>
   2428b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:183
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   2428e:	e9 bb 01 00 00       	jmp    2444e <doHDSetup+0x686>
/home/yogi/src/os/chrisOS/src/init/init.c:166
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
        printk("AHCI: No scanning per parameter 'noahci'\n");
    else
    {
        printk("AHCI: Initializing ...\n");
   24293:	83 ec 0c             	sub    esp,0xc
   24296:	68 9e 49 08 00       	push   0x8499e
   2429b:	e8 53 2f 00 00       	call   271f3 <printk>
   242a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:167
        ahciInit();
   242a3:	e8 70 10 ff ff       	call   15318 <ahciInit>
/home/yogi/src/os/chrisOS/src/init/init.c:168
        printk(" done\n");
   242a8:	83 ec 0c             	sub    esp,0xc
   242ab:	68 b6 49 08 00       	push   0x849b6
   242b0:	e8 3e 2f 00 00       	call   271f3 <printk>
   242b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:169
        printk("AHCI: SATA Disks:\n");
   242b8:	83 ec 0c             	sub    esp,0xc
   242bb:	68 bd 49 08 00       	push   0x849bd
   242c0:	e8 2e 2f 00 00       	call   271f3 <printk>
   242c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:170
        for (int cnt=4;cnt<10;cnt++)
   242c8:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   242cf:	e9 70 01 00 00       	jmp    24444 <doHDSetup+0x67c>
/home/yogi/src/os/chrisOS/src/init/init.c:171
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
   242d4:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   242da:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   242dd:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   242e3:	01 d0                	add    eax,edx
   242e5:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   242ec:	84 c0                	test   al,al
   242ee:	0f 84 4c 01 00 00    	je     24440 <doHDSetup+0x678>
/home/yogi/src/os/chrisOS/src/init/init.c:173
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
   242f4:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   242fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   242fd:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24303:	01 d0                	add    eax,edx
   24305:	05 00 02 00 00       	add    eax,0x200
   2430a:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:174
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24310:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24316:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24319:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2431f:	01 d0                	add    eax,edx
   24321:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24328:	3c 01                	cmp    al,0x1
   2432a:	75 14                	jne    24340 <doHDSetup+0x578>
/home/yogi/src/os/chrisOS/src/init/init.c:174 (discriminator 1)
   2432c:	83 ec 0c             	sub    esp,0xc
   2432f:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24335:	50                   	push   eax
   24336:	e8 cd 33 00 00       	call   27708 <strtrim>
   2433b:	83 c4 10             	add    esp,0x10
   2433e:	eb 05                	jmp    24345 <doHDSetup+0x57d>
/home/yogi/src/os/chrisOS/src/init/init.c:174 (discriminator 2)
   24340:	b8 d2 48 08 00       	mov    eax,0x848d2
/home/yogi/src/os/chrisOS/src/init/init.c:174 (discriminator 4)
   24345:	83 ec 04             	sub    esp,0x4
   24348:	50                   	push   eax
   24349:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   2434c:	68 d0 49 08 00       	push   0x849d0
   24351:	e8 9d 2e 00 00       	call   271f3 <printk>
   24356:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:180 (discriminator 4)
                printk("\t%uMB (%ubps %s%s%s)\n", 
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
   24359:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   2435f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24362:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24368:	01 d0                	add    eax,edx
   2436a:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24371:	84 c0                	test   al,al
   24373:	74 0c                	je     24381 <doHDSetup+0x5b9>
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 1)
   24375:	c7 85 d4 f7 ff ff e9 	mov    DWORD PTR [ebp-0x82c],0x848e9
   2437c:	48 08 00 
   2437f:	eb 0a                	jmp    2438b <doHDSetup+0x5c3>
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 2)
   24381:	c7 85 d4 f7 ff ff ee 	mov    DWORD PTR [ebp-0x82c],0x848ee
   24388:	48 08 00 
/home/yogi/src/os/chrisOS/src/init/init.c:179 (discriminator 4)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
   2438b:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   24391:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24394:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2439a:	01 d0                	add    eax,edx
   2439c:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   243a3:	84 c0                	test   al,al
   243a5:	74 07                	je     243ae <doHDSetup+0x5e6>
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 5)
   243a7:	bf ef 48 08 00       	mov    edi,0x848ef
   243ac:	eb 05                	jmp    243b3 <doHDSetup+0x5eb>
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 6)
   243ae:	bf ee 48 08 00       	mov    edi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:178 (discriminator 8)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
   243b3:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   243b9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   243bc:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   243c2:	01 d0                	add    eax,edx
   243c4:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 8)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   243cb:	84 c0                	test   al,al
   243cd:	74 07                	je     243d6 <doHDSetup+0x60e>
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 9)
   243cf:	be f6 48 08 00       	mov    esi,0x848f6
   243d4:	eb 05                	jmp    243db <doHDSetup+0x613>
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 10)
   243d6:	be ee 48 08 00       	mov    esi,0x848ee
/home/yogi/src/os/chrisOS/src/init/init.c:177 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
   243db:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   243e1:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   243e4:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   243ea:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   243ec:	8b 88 5a 02 00 00    	mov    ecx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/init/init.c:176 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
   243f2:	8b 15 c0 02 12 00    	mov    edx,DWORD PTR ds:0x1202c0
   243f8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   243fb:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24401:	01 d0                	add    eax,edx
   24403:	8b 90 56 02 00 00    	mov    edx,DWORD PTR [eax+0x256]
   24409:	8b 1d c0 02 12 00    	mov    ebx,DWORD PTR ds:0x1202c0
   2440f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24412:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24418:	01 d8                	add    eax,ebx
   2441a:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24420:	0f af c2             	imul   eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24423:	c1 e8 14             	shr    eax,0x14
   24426:	83 ec 08             	sub    esp,0x8
   24429:	ff b5 d4 f7 ff ff    	push   DWORD PTR [ebp-0x82c]
   2442f:	57                   	push   edi
   24430:	56                   	push   esi
   24431:	51                   	push   ecx
   24432:	50                   	push   eax
   24433:	68 21 49 08 00       	push   0x84921
   24438:	e8 b6 2d 00 00       	call   271f3 <printk>
   2443d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 2)
    {
        printk("AHCI: Initializing ...\n");
        ahciInit();
        printk(" done\n");
        printk("AHCI: SATA Disks:\n");
        for (int cnt=4;cnt<10;cnt++)
   24440:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 1)
   24444:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   24448:	0f 8e 86 fe ff ff    	jle    242d4 <doHDSetup+0x50c>
/home/yogi/src/os/chrisOS/src/init/init.c:183
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   2444e:	90                   	nop
   2444f:	8d 65 f4             	lea    esp,[ebp-0xc]
   24452:	5b                   	pop    ebx
   24453:	5e                   	pop    esi
   24454:	5f                   	pop    edi
   24455:	5d                   	pop    ebp
   24456:	c3                   	ret    

00024457 <ParamExists>:
ParamExists():
/home/yogi/src/os/chrisOS/src/init/init.c:186

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
   24457:	55                   	push   ebp
   24458:	89 e5                	mov    ebp,esp
   2445a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/init.c:187
    for (int cnt=0;cnt<paramCount+1;cnt++)
   2445d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24464:	eb 2b                	jmp    24491 <ParamExists+0x3a>
/home/yogi/src/os/chrisOS/src/init/init.c:188
        if (!strcmp(params[cnt],cmdToFind))
   24466:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24469:	c1 e0 09             	shl    eax,0x9
   2446c:	89 c2                	mov    edx,eax
   2446e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24471:	01 d0                	add    eax,edx
   24473:	83 ec 08             	sub    esp,0x8
   24476:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   24479:	50                   	push   eax
   2447a:	e8 81 2e 00 00       	call   27300 <strcmp>
   2447f:	83 c4 10             	add    esp,0x10
   24482:	85 c0                	test   eax,eax
   24484:	75 07                	jne    2448d <ParamExists+0x36>
/home/yogi/src/os/chrisOS/src/init/init.c:189
            return true;
   24486:	b8 01 00 00 00       	mov    eax,0x1
   2448b:	eb 14                	jmp    244a1 <ParamExists+0x4a>
/home/yogi/src/os/chrisOS/src/init/init.c:187 (discriminator 2)
    }
}

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
    for (int cnt=0;cnt<paramCount+1;cnt++)
   2448d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:187 (discriminator 1)
   24491:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   24494:	83 c0 01             	add    eax,0x1
   24497:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   2449a:	7f ca                	jg     24466 <ParamExists+0xf>
/home/yogi/src/os/chrisOS/src/init/init.c:190
        if (!strcmp(params[cnt],cmdToFind))
            return true;
    return false;
   2449c:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:191
}
   244a1:	c9                   	leave  
   244a2:	c3                   	ret    

000244a3 <testWPBit>:
testWPBit():
/home/yogi/src/os/chrisOS/src/init/init.c:195
void extern enableCR0_WP();

void HIGH_CODE_SECTION testWPBit()
{
   244a3:	55                   	push   ebp
   244a4:	89 e5                	mov    ebp,esp
   244a6:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:196
    enableCR0_WP();
   244a9:	e8 5f d8 fe ff       	call   11d0d <enableCR0_WP>
/home/yogi/src/os/chrisOS/src/init/init.c:197
    printk("PAGING: Kernel paged base: 0x%08X\n",KERNEL_PAGED_BASE_ADDRESS);
   244ae:	83 ec 08             	sub    esp,0x8
   244b1:	68 00 00 00 c0       	push   0xc0000000
   244b6:	68 e8 49 08 00       	push   0x849e8
   244bb:	e8 33 2d 00 00       	call   271f3 <printk>
   244c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:198
    printk("PAGING: Making page @ 0x00000000 read only\n");
   244c3:	83 ec 0c             	sub    esp,0xc
   244c6:	68 0c 4a 08 00       	push   0x84a0c
   244cb:	e8 23 2d 00 00       	call   271f3 <printk>
   244d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:199
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   244d3:	83 ec 04             	sub    esp,0x4
   244d6:	6a 01                	push   0x1
   244d8:	68 ff 0f 00 00       	push   0xfff
   244dd:	6a 00                	push   0x0
   244df:	e8 dc d5 fe ff       	call   11ac0 <kSetPhysicalRangeRO>
   244e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:200
    printk("PAGING: Testing whether CPU honors WP flag ... ");
   244e7:	83 ec 0c             	sub    esp,0xc
   244ea:	68 38 4a 08 00       	push   0x84a38
   244ef:	e8 ff 2c 00 00       	call   271f3 <printk>
   244f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:201
  __asm__("cli\n");
   244f7:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/init.c:202
  __asm__("mov %0,[0x0]\n":"=r" (kOriginalAddressZeroValue));
   244f8:	a1 00 00 00 00       	mov    eax,ds:0x0
   244fd:	a3 e4 03 12 00       	mov    ds:0x1203e4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:203
  __asm__("mov eax,0xdeadbeef\n mov [0x0],eax\n");    //purposely write address 0 which we made "read only"
   24502:	b8 ef be ad de       	mov    eax,0xdeadbeef
   24507:	a3 00 00 00 00       	mov    ds:0x0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:204
  __asm__("mov eax,cr0\n":::"eax");
   2450c:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/src/init/init.c:205
  if (kPagingExceptionsSinceStart==1)
   2450f:	a1 78 02 12 00       	mov    eax,ds:0x120278
   24514:	83 f8 01             	cmp    eax,0x1
   24517:	75 12                	jne    2452b <testWPBit+0x88>
/home/yogi/src/os/chrisOS/src/init/init.c:206
    printk("WP bit works!\n");
   24519:	83 ec 0c             	sub    esp,0xc
   2451c:	68 68 4a 08 00       	push   0x84a68
   24521:	e8 cd 2c 00 00       	call   271f3 <printk>
   24526:	83 c4 10             	add    esp,0x10
   24529:	eb 10                	jmp    2453b <testWPBit+0x98>
/home/yogi/src/os/chrisOS/src/init/init.c:208
  else
      printk("WP bit does not work\n");
   2452b:	83 ec 0c             	sub    esp,0xc
   2452e:	68 77 4a 08 00       	push   0x84a77
   24533:	e8 bb 2c 00 00       	call   271f3 <printk>
   24538:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:209
  kUnMapPage(0x0);
   2453b:	83 ec 0c             	sub    esp,0xc
   2453e:	6a 00                	push   0x0
   24540:	e8 08 d4 fe ff       	call   1194d <kUnMapPage>
   24545:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:210
}
   24548:	90                   	nop
   24549:	c9                   	leave  
   2454a:	c3                   	ret    

0002454b <kernel_main>:
kernel_main():
/home/yogi/src/os/chrisOS/src/init/init.c:212

void HIGH_CODE_SECTION kernel_main(/*multiboot_info_t* mbd, unsigned int magic*/) {
   2454b:	55                   	push   ebp
   2454c:	89 e5                	mov    ebp,esp
   2454e:	56                   	push   esi
   2454f:	53                   	push   ebx
   24550:	81 ec d0 00 00 00    	sub    esp,0xd0
/home/yogi/src/os/chrisOS/src/init/init.c:218
    
char currTime[150];
struct tm theDateTime;
    //Zero out all of the memory we will be using as rebooting a computer doesn't necessarily clear memory
    //memset(0x200000,0,0x1000000);
    kTicksPerSecond=TICKS_PER_SECOND;
   24556:	c7 05 80 02 12 00 64 	mov    DWORD PTR ds:0x120280,0x64
   2455d:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/init.c:219
    kTermInit();
   24560:	e8 d1 3a ff ff       	call   18036 <kTermInit>
/home/yogi/src/os/chrisOS/src/init/init.c:220
    kInitDone=false;
   24565:	c6 05 a0 02 12 00 00 	mov    BYTE PTR ds:0x1202a0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:221
    kPagingInitDone=false;
   2456c:	c6 05 a1 02 12 00 00 	mov    BYTE PTR ds:0x1202a1,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:222
    kTicksPerMS=1000/kTicksPerSecond;
   24573:	8b 35 80 02 12 00    	mov    esi,DWORD PTR ds:0x120280
   24579:	b8 e8 03 00 00       	mov    eax,0x3e8
   2457e:	99                   	cdq    
   2457f:	f7 fe                	idiv   esi
   24581:	a3 84 02 12 00       	mov    ds:0x120284,eax
/home/yogi/src/os/chrisOS/src/init/init.c:223
    kDebugStartsNow=false;
   24586:	c6 05 b0 02 12 00 00 	mov    BYTE PTR ds:0x1202b0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:224
    memset(kATADeviceInfo,0x0,sizeof(struct ataDeviceInfo_t)*20);
   2458d:	a1 c0 02 12 00       	mov    eax,ds:0x1202c0
   24592:	83 ec 04             	sub    esp,0x4
   24595:	68 fc 30 00 00       	push   0x30fc
   2459a:	6a 00                	push   0x0
   2459c:	50                   	push   eax
   2459d:	e8 db 0a 00 00       	call   2507d <memset>
   245a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:225
    memset(kGDTSlotAvailableInd,0xFF,GDT_TABLE_SIZE);
   245a5:	a1 f0 03 12 00       	mov    eax,ds:0x1203f0
   245aa:	83 ec 04             	sub    esp,0x4
   245ad:	68 00 08 00 00       	push   0x800
   245b2:	68 ff 00 00 00       	push   0xff
   245b7:	50                   	push   eax
   245b8:	e8 c0 0a 00 00       	call   2507d <memset>
   245bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:226
    memset(kTaskSlotAvailableInd,0xFF,TASK_TABLE_SIZE);
   245c0:	a1 f4 03 12 00       	mov    eax,ds:0x1203f4
   245c5:	83 ec 04             	sub    esp,0x4
   245c8:	68 00 00 19 00       	push   0x190000
   245cd:	68 ff 00 00 00       	push   0xff
   245d2:	50                   	push   eax
   245d3:	e8 a5 0a 00 00       	call   2507d <memset>
   245d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:228

    __asm__("mov esp,0xff00\n" /*\
   245db:	bc 00 ff 00 00       	mov    esp,0xff00
/home/yogi/src/os/chrisOS/src/init/init.c:231
            "mov eax,0\nmov dr6,eax":::"eax"*/);
    /* Initialize terminal interface */
    *kTicksSinceStart=0;
   245e0:	a1 60 02 12 00       	mov    eax,ds:0x120260
   245e5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/init.c:232
    identify_data_sizes(&kDataSizes);
   245eb:	83 ec 0c             	sub    esp,0xc
   245ee:	68 54 02 12 00       	push   0x120254
   245f3:	e8 53 0a 00 00       	call   2504b <identify_data_sizes>
   245f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:233
    terminal_clear();
   245fb:	e8 2e 36 ff ff       	call   17c2e <terminal_clear>
/home/yogi/src/os/chrisOS/src/init/init.c:234
    printk("Booting ...\n");
   24600:	83 ec 0c             	sub    esp,0xc
   24603:	68 8d 4a 08 00       	push   0x84a8d
   24608:	e8 e6 2b 00 00       	call   271f3 <printk>
   2460d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:235
    gdt_init();
   24610:	e8 84 f6 ff ff       	call   23c99 <gdt_init>
/home/yogi/src/os/chrisOS/src/init/init.c:237

    quietHardware();
   24615:	e8 8a f7 ff ff       	call   23da4 <quietHardware>
/home/yogi/src/os/chrisOS/src/init/init.c:238
    int lLowMemKB = getInt12Memory();
   2461a:	e8 4e ca fd ff       	call   106d <getInt12Memory>
   2461f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/init.c:239
    kE820Status = isE820Available(); //
   24622:	e8 01 ca fd ff       	call   1028 <isE820Available>
   24627:	a3 44 00 12 00       	mov    ds:0x120044,eax
/home/yogi/src/os/chrisOS/src/init/init.c:240
    if (kE820Status==0x534d4150)
   2462c:	a1 44 00 12 00       	mov    eax,ds:0x120044
   24631:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   24636:	75 0b                	jne    24643 <kernel_main+0xf8>
/home/yogi/src/os/chrisOS/src/init/init.c:241
        kE820RecordCount = getE820Memory_asm();
   24638:	e8 fb cb fd ff       	call   1238 <getE820Memory_asm>
   2463d:	66 a3 50 00 12 00    	mov    ds:0x120050,ax
/home/yogi/src/os/chrisOS/src/init/init.c:243
    //Move the SMAP table from low memory up to where we want it
    memcpy(smap_table, lowSmapTablePtr, kE820RecordCount*24);
   24643:	0f b7 05 50 00 12 00 	movzx  eax,WORD PTR ds:0x120050
   2464a:	0f bf d0             	movsx  edx,ax
   2464d:	89 d0                	mov    eax,edx
   2464f:	01 c0                	add    eax,eax
   24651:	01 d0                	add    eax,edx
   24653:	c1 e0 03             	shl    eax,0x3
   24656:	89 c1                	mov    ecx,eax
   24658:	8b 15 6e 13 00 00    	mov    edx,DWORD PTR ds:0x136e
   2465e:	a1 40 00 12 00       	mov    eax,ds:0x120040
   24663:	83 ec 04             	sub    esp,0x4
   24666:	51                   	push   ecx
   24667:	52                   	push   edx
   24668:	50                   	push   eax
   24669:	e8 ea 14 00 00       	call   25b58 <memcpy>
   2466e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:244
    idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   24671:	83 ec 08             	sub    esp,0x8
   24674:	6a 20                	push   0x20
   24676:	68 e0 a3 09 00       	push   0x9a3e0
   2467b:	e8 e4 44 ff ff       	call   18b64 <idt_init>
   24680:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:245
    init_PIT(kTicksPerSecond);
   24683:	a1 80 02 12 00       	mov    eax,ds:0x120280
   24688:	83 ec 0c             	sub    esp,0xc
   2468b:	50                   	push   eax
   2468c:	e8 fc ca fd ff       	call   118d <init_PIT>
   24691:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:247
    //Remap the exception vectors (0x0-0x1f)
    PIC_remap(0x00+PIC_REMAP_OFFSET, 0x8+PIC_REMAP_OFFSET);
   24694:	83 ec 08             	sub    esp,0x8
   24697:	6a 28                	push   0x28
   24699:	6a 20                	push   0x20
   2469b:	e8 ba 53 ff ff       	call   19a5a <PIC_remap>
   246a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:248
    IRQ_clear_mask(0);
   246a3:	83 ec 0c             	sub    esp,0xc
   246a6:	6a 00                	push   0x0
   246a8:	e8 4b 53 ff ff       	call   199f8 <IRQ_clear_mask>
   246ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:249
    IRQ_clear_mask(1);
   246b0:	83 ec 0c             	sub    esp,0xc
   246b3:	6a 01                	push   0x1
   246b5:	e8 3e 53 ff ff       	call   199f8 <IRQ_clear_mask>
   246ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:250
    initSystemDate();
   246bd:	e8 12 0b 00 00       	call   251d4 <initSystemDate>
/home/yogi/src/os/chrisOS/src/init/init.c:251
    gmtime_r(&kSystemStartTime,&theDateTime);
   246c2:	83 ec 08             	sub    esp,0x8
   246c5:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   246cb:	50                   	push   eax
   246cc:	68 88 02 12 00       	push   0x120288
   246d1:	e8 7f 31 00 00       	call   27855 <gmtime_r>
   246d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:252
    printk("Boot: ");
   246d9:	83 ec 0c             	sub    esp,0xc
   246dc:	68 9a 4a 08 00       	push   0x84a9a
   246e1:	e8 0d 2b 00 00       	call   271f3 <printk>
   246e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:253
    gets(kBootCmd,150);
   246e9:	83 ec 08             	sub    esp,0x8
   246ec:	68 96 00 00 00       	push   0x96
   246f1:	68 00 a4 09 00       	push   0x9a400
   246f6:	e8 f4 cb fe ff       	call   112ef <gets>
   246fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:254
    kBootParamCount=parseParamsShell(kBootCmd, kBootParams, MAX_PARAM_COUNT*MAX_PARAM_WIDTH);
   246fe:	83 ec 04             	sub    esp,0x4
   24701:	68 00 14 00 00       	push   0x1400
   24706:	68 e0 8f 09 00       	push   0x98fe0
   2470b:	68 00 a4 09 00       	push   0x9a400
   24710:	e8 4b dd fe ff       	call   12460 <parseParamsShell>
   24715:	83 c4 10             	add    esp,0x10
   24718:	a3 c8 8f 09 00       	mov    ds:0x98fc8,eax
/home/yogi/src/os/chrisOS/src/init/init.c:255
    strftime((char*)&currTime, 50, "%H:%M:%S on %m/%d/%y", &theDateTime);
   2471d:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   24723:	50                   	push   eax
   24724:	68 a1 4a 08 00       	push   0x84aa1
   24729:	6a 32                	push   0x32
   2472b:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24731:	50                   	push   eax
   24732:	e8 79 bf fe ff       	call   106b0 <strftime>
   24737:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:257
    //wait(50);
    printk("chrisOS %s booting @%s",  COMPLETE_VERSION, &currTime);
   2473a:	83 ec 04             	sub    esp,0x4
   2473d:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24743:	50                   	push   eax
   24744:	68 b6 4a 08 00       	push   0x84ab6
   24749:	68 ca 4a 08 00       	push   0x84aca
   2474e:	e8 a0 2a 00 00       	call   271f3 <printk>
   24753:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:259
#ifndef DEBUG_NONE
    if (kDebugLevel > 0)
   24756:	a1 38 03 12 00       	mov    eax,ds:0x120338
   2475b:	85 c0                	test   eax,eax
   2475d:	74 16                	je     24775 <kernel_main+0x22a>
/home/yogi/src/os/chrisOS/src/init/init.c:260
        printk ("(debug=%X)", kDebugLevel);
   2475f:	a1 38 03 12 00       	mov    eax,ds:0x120338
   24764:	83 ec 08             	sub    esp,0x8
   24767:	50                   	push   eax
   24768:	68 e1 4a 08 00       	push   0x84ae1
   2476d:	e8 81 2a 00 00       	call   271f3 <printk>
   24772:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:262
#endif
    printk("\n");
   24775:	83 ec 0c             	sub    esp,0xc
   24778:	68 ec 4a 08 00       	push   0x84aec
   2477d:	e8 71 2a 00 00       	call   271f3 <printk>
   24782:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:263
    if (kE820Status==0x534d4150)
   24785:	a1 44 00 12 00       	mov    eax,ds:0x120044
   2478a:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   2478f:	75 4f                	jne    247e0 <kernel_main+0x295>
/home/yogi/src/os/chrisOS/src/init/init.c:265
    {
        printk("E820: available (%08X), translating ...", kE820Status);
   24791:	a1 44 00 12 00       	mov    eax,ds:0x120044
   24796:	83 ec 08             	sub    esp,0x8
   24799:	50                   	push   eax
   2479a:	68 f0 4a 08 00       	push   0x84af0
   2479f:	e8 4f 2a 00 00       	call   271f3 <printk>
   247a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:266
        kE820MemoryBytes = sum_e820_usable_memory(smap_table,kE820RecordCount);
   247a7:	0f b7 05 50 00 12 00 	movzx  eax,WORD PTR ds:0x120050
   247ae:	0f bf d0             	movsx  edx,ax
   247b1:	a1 40 00 12 00       	mov    eax,ds:0x120040
   247b6:	83 ec 08             	sub    esp,0x8
   247b9:	52                   	push   edx
   247ba:	50                   	push   eax
   247bb:	e8 b5 f2 ff ff       	call   23a75 <sum_e820_usable_memory>
   247c0:	83 c4 10             	add    esp,0x10
   247c3:	a3 48 00 12 00       	mov    ds:0x120048,eax
   247c8:	89 15 4c 00 12 00    	mov    DWORD PTR ds:0x12004c,edx
/home/yogi/src/os/chrisOS/src/init/init.c:267
        printk("done\n");
   247ce:	83 ec 0c             	sub    esp,0xc
   247d1:	68 18 4b 08 00       	push   0x84b18
   247d6:	e8 18 2a 00 00       	call   271f3 <printk>
   247db:	83 c4 10             	add    esp,0x10
   247de:	eb 16                	jmp    247f6 <kernel_main+0x2ab>
/home/yogi/src/os/chrisOS/src/init/init.c:271
        //print_e820_map(smap_table, kE820RecordCount);
    }
    else
        printk("E820: not available (%08X ... looking for alternatives.\n", kE820Status);
   247e0:	a1 44 00 12 00       	mov    eax,ds:0x120044
   247e5:	83 ec 08             	sub    esp,0x8
   247e8:	50                   	push   eax
   247e9:	68 20 4b 08 00       	push   0x84b20
   247ee:	e8 00 2a 00 00       	call   271f3 <printk>
   247f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:273

    printk("E820: Usable memory: Low=%6d (INT12), Total=%10d (E820)\n",lLowMemKB * 1024, kE820MemoryBytes);
   247f6:	a1 48 00 12 00       	mov    eax,ds:0x120048
   247fb:	8b 15 4c 00 12 00    	mov    edx,DWORD PTR ds:0x12004c
   24801:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   24804:	c1 e1 0a             	shl    ecx,0xa
   24807:	52                   	push   edx
   24808:	50                   	push   eax
   24809:	51                   	push   ecx
   2480a:	68 5c 4b 08 00       	push   0x84b5c
   2480f:	e8 df 29 00 00       	call   271f3 <printk>
   24814:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:274
    if (kE820MemoryBytes < MINIMUM_USABLE_MEMORY)
   24817:	a1 48 00 12 00       	mov    eax,ds:0x120048
   2481c:	8b 15 4c 00 12 00    	mov    edx,DWORD PTR ds:0x12004c
   24822:	83 fa 00             	cmp    edx,0x0
   24825:	77 3d                	ja     24864 <kernel_main+0x319>
   24827:	83 fa 00             	cmp    edx,0x0
   2482a:	72 07                	jb     24833 <kernel_main+0x2e8>
   2482c:	3d ff ff ff 0f       	cmp    eax,0xfffffff
   24831:	77 31                	ja     24864 <kernel_main+0x319>
/home/yogi/src/os/chrisOS/src/init/init.c:276
    {
        printk("\n\nE820: Either the available memory is less than the minimum required of %d MB\nor memory capacity cannot be determined\n.", MINIMUM_USABLE_MEMORY / 1024 / 1024);
   24833:	83 ec 08             	sub    esp,0x8
   24836:	68 00 01 00 00       	push   0x100
   2483b:	68 98 4b 08 00       	push   0x84b98
   24840:	e8 ae 29 00 00       	call   271f3 <printk>
   24845:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:277
        printk("3820: Ignore? ");
   24848:	83 ec 0c             	sub    esp,0xc
   2484b:	68 11 4c 08 00       	push   0x84c11
   24850:	e8 9e 29 00 00       	call   271f3 <printk>
   24855:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:279
        
        while (getKeyboardKey()!='y')
   24858:	eb 01                	jmp    2485b <kernel_main+0x310>
/home/yogi/src/os/chrisOS/src/init/init.c:280
        {__asm("hlt\n");}
   2485a:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/init.c:279
    if (kE820MemoryBytes < MINIMUM_USABLE_MEMORY)
    {
        printk("\n\nE820: Either the available memory is less than the minimum required of %d MB\nor memory capacity cannot be determined\n.", MINIMUM_USABLE_MEMORY / 1024 / 1024);
        printk("3820: Ignore? ");
        
        while (getKeyboardKey()!='y')
   2485b:	e8 85 ca fe ff       	call   112e5 <getKeyboardKey>
   24860:	3c 79                	cmp    al,0x79
   24862:	75 f6                	jne    2485a <kernel_main+0x30f>
/home/yogi/src/os/chrisOS/src/init/init.c:282
        {__asm("hlt\n");}
    }
    __asm__ ("mov eax,%0\n push eax\n pop esp\n"::"r" (STACK_BASE_ADDRESS):"eax");
   24864:	ba e0 ff 99 00       	mov    edx,0x99ffe0
   24869:	89 d0                	mov    eax,edx
   2486b:	50                   	push   eax
   2486c:	5c                   	pop    esp
/home/yogi/src/os/chrisOS/src/init/init.c:283
    detect_cpu();
   2486d:	e8 42 e6 ff ff       	call   22eb4 <detect_cpu>
/home/yogi/src/os/chrisOS/src/init/init.c:284
    printk("CPU: Detected CPU: %s\n", kcpuInfo.brand_name);
   24872:	83 ec 08             	sub    esp,0x8
   24875:	68 72 01 12 00       	push   0x120172
   2487a:	68 20 4c 08 00       	push   0x84c20
   2487f:	e8 6f 29 00 00       	call   271f3 <printk>
   24884:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:285
    identifyCPUFeatures(&kCPUFeatures);
   24887:	83 ec 0c             	sub    esp,0xc
   2488a:	68 44 03 12 00       	push   0x120344
   2488f:	e8 ec 41 ff ff       	call   18a80 <identifyCPUFeatures>
   24894:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:286
    if (apicCheckFor())
   24897:	e8 d2 3c ff ff       	call   1856e <apicCheckFor>
   2489c:	84 c0                	test   al,al
   2489e:	0f 84 ad 00 00 00    	je     24951 <kernel_main+0x406>
/home/yogi/src/os/chrisOS/src/init/init.c:288
    {
        kCPU[0].apicID=apciGetAPICID(0);
   248a4:	83 ec 0c             	sub    esp,0xc
   248a7:	6a 00                	push   0x0
   248a9:	e8 19 3d ff ff       	call   185c7 <apciGetAPICID>
   248ae:	83 c4 10             	add    esp,0x10
   248b1:	0f b6 c0             	movzx  eax,al
   248b4:	a3 60 03 12 00       	mov    ds:0x120360,eax
/home/yogi/src/os/chrisOS/src/init/init.c:289
        kCPU[0].registerBase=apicGetAPICBase();
   248b9:	e8 1e 3d ff ff       	call   185dc <apicGetAPICBase>
   248be:	a3 64 03 12 00       	mov    ds:0x120364,eax
/home/yogi/src/os/chrisOS/src/init/init.c:290
        kCPU[0].ticksPerSecond=apicGetHZ();
   248c3:	e8 59 3e ff ff       	call   18721 <apicGetHZ>
   248c8:	ba 00 00 00 00       	mov    edx,0x0
   248cd:	a3 68 03 12 00       	mov    ds:0x120368,eax
   248d2:	89 15 6c 03 12 00    	mov    DWORD PTR ds:0x12036c,edx
/home/yogi/src/os/chrisOS/src/init/init.c:292
        //IRQ_set_mask(0);
        printk("APIC: %s APIC %u Found, address %08X, initializing ... ", acpiGetAPICVersion()==0?"Discrete":"Integrated", kCPU[0].apicID, kCPU[0].registerBase);
   248d8:	8b 35 64 03 12 00    	mov    esi,DWORD PTR ds:0x120364
   248de:	8b 1d 60 03 12 00    	mov    ebx,DWORD PTR ds:0x120360
   248e4:	e8 c9 3c ff ff       	call   185b2 <acpiGetAPICVersion>
   248e9:	84 c0                	test   al,al
   248eb:	75 07                	jne    248f4 <kernel_main+0x3a9>
/home/yogi/src/os/chrisOS/src/init/init.c:292 (discriminator 1)
   248ed:	b8 37 4c 08 00       	mov    eax,0x84c37
   248f2:	eb 05                	jmp    248f9 <kernel_main+0x3ae>
/home/yogi/src/os/chrisOS/src/init/init.c:292 (discriminator 2)
   248f4:	b8 40 4c 08 00       	mov    eax,0x84c40
/home/yogi/src/os/chrisOS/src/init/init.c:292 (discriminator 4)
   248f9:	56                   	push   esi
   248fa:	53                   	push   ebx
   248fb:	50                   	push   eax
   248fc:	68 4c 4c 08 00       	push   0x84c4c
   24901:	e8 ed 28 00 00       	call   271f3 <printk>
   24906:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:293 (discriminator 4)
        if (apicIsEnabled())
   24909:	e8 7b 3d ff ff       	call   18689 <apicIsEnabled>
   2490e:	84 c0                	test   al,al
   24910:	74 10                	je     24922 <kernel_main+0x3d7>
/home/yogi/src/os/chrisOS/src/init/init.c:294
            printk("enabled ... ");
   24912:	83 ec 0c             	sub    esp,0xc
   24915:	68 84 4c 08 00       	push   0x84c84
   2491a:	e8 d4 28 00 00       	call   271f3 <printk>
   2491f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:295
        printk("done\n");
   24922:	83 ec 0c             	sub    esp,0xc
   24925:	68 18 4b 08 00       	push   0x84b18
   2492a:	e8 c4 28 00 00       	call   271f3 <printk>
   2492f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:296
        printk("APIC: Timer running at %u hz.\n",kCPU[0].ticksPerSecond);
   24932:	a1 68 03 12 00       	mov    eax,ds:0x120368
   24937:	8b 15 6c 03 12 00    	mov    edx,DWORD PTR ds:0x12036c
   2493d:	83 ec 04             	sub    esp,0x4
   24940:	52                   	push   edx
   24941:	50                   	push   eax
   24942:	68 94 4c 08 00       	push   0x84c94
   24947:	e8 a7 28 00 00       	call   271f3 <printk>
   2494c:	83 c4 10             	add    esp,0x10
   2494f:	eb 10                	jmp    24961 <kernel_main+0x416>
/home/yogi/src/os/chrisOS/src/init/init.c:299
    }
    else
        printk("APIC: not found\n");
   24951:	83 ec 0c             	sub    esp,0xc
   24954:	68 b3 4c 08 00       	push   0x84cb3
   24959:	e8 95 28 00 00       	call   271f3 <printk>
   2495e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:300
    printk("TSC: ticks per 10 = %u\n", tscGetTicksPerSecond());
   24961:	e8 b1 3e ff ff       	call   18817 <tscGetTicksPerSecond>
   24966:	83 ec 08             	sub    esp,0x8
   24969:	50                   	push   eax
   2496a:	68 c4 4c 08 00       	push   0x84cc4
   2496f:	e8 7f 28 00 00       	call   271f3 <printk>
   24974:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:302
#ifndef DISABLE_PAGING
    kCPU[0].registerBase=apicGetAPICBase();
   24977:	e8 60 3c ff ff       	call   185dc <apicGetAPICBase>
   2497c:	a3 64 03 12 00       	mov    ds:0x120364,eax
/home/yogi/src/os/chrisOS/src/init/init.c:303
    printk("PAGING: enabling 4k paging\n");
   24981:	83 ec 0c             	sub    esp,0xc
   24984:	68 dc 4c 08 00       	push   0x84cdc
   24989:	e8 65 28 00 00       	call   271f3 <printk>
   2498e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:304
    initializeKernelPaging();
   24991:	e8 0a 02 00 00       	call   24ba0 <initializeKernelPaging>
/home/yogi/src/os/chrisOS/src/init/init.c:305
    printk("PAGING: remapping APIC from 0x%08X to 0x%08X\n", kCPU[0].registerBase, kAPICRegisterRemapAddress);
   24996:	8b 15 30 03 12 00    	mov    edx,DWORD PTR ds:0x120330
   2499c:	a1 64 03 12 00       	mov    eax,ds:0x120364
   249a1:	83 ec 04             	sub    esp,0x4
   249a4:	52                   	push   edx
   249a5:	50                   	push   eax
   249a6:	68 f8 4c 08 00       	push   0x84cf8
   249ab:	e8 43 28 00 00       	call   271f3 <printk>
   249b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:307
    //map APIC address 0xFEE00000 to 0x825000
    kMapPage(kAPICRegisterRemapAddress, kCPU[0].registerBase,0x13);  //0x63 + cache disabled
   249b3:	8b 15 64 03 12 00    	mov    edx,DWORD PTR ds:0x120364
   249b9:	a1 30 03 12 00       	mov    eax,ds:0x120330
   249be:	83 ec 04             	sub    esp,0x4
   249c1:	6a 13                	push   0x13
   249c3:	52                   	push   edx
   249c4:	50                   	push   eax
   249c5:	e8 6d cd fe ff       	call   11737 <kMapPage>
   249ca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:308
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   249cd:	83 ec 04             	sub    esp,0x4
   249d0:	6a 01                	push   0x1
   249d2:	68 ff 0f 00 00       	push   0xfff
   249d7:	6a 00                	push   0x0
   249d9:	e8 e2 d0 fe ff       	call   11ac0 <kSetPhysicalRangeRO>
   249de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:309
    testWPBit();
   249e1:	e8 bd fa ff ff       	call   244a3 <testWPBit>
/home/yogi/src/os/chrisOS/src/init/init.c:310
    kPagingInitDone=true;
   249e6:	c6 05 a1 02 12 00 01 	mov    BYTE PTR ds:0x1202a1,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:312
#endif
    printk("CLOCK: tick frequency is %uhz\n",kTicksPerSecond);
   249ed:	a1 80 02 12 00       	mov    eax,ds:0x120280
   249f2:	83 ec 08             	sub    esp,0x8
   249f5:	50                   	push   eax
   249f6:	68 28 4d 08 00       	push   0x84d28
   249fb:	e8 f3 27 00 00       	call   271f3 <printk>
   24a00:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:313
    printk("CLOCK: testing ... "); wait(100); printk("works\n");
   24a03:	83 ec 0c             	sub    esp,0xc
   24a06:	68 47 4d 08 00       	push   0x84d47
   24a0b:	e8 e3 27 00 00       	call   271f3 <printk>
   24a10:	83 c4 10             	add    esp,0x10
   24a13:	83 ec 0c             	sub    esp,0xc
   24a16:	6a 64                	push   0x64
   24a18:	e8 15 3a 00 00       	call   28432 <wait>
   24a1d:	83 c4 10             	add    esp,0x10
   24a20:	83 ec 0c             	sub    esp,0xc
   24a23:	68 5b 4d 08 00       	push   0x84d5b
   24a28:	e8 c6 27 00 00       	call   271f3 <printk>
   24a2d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:316

#ifdef __SMP__
    if (ParamExists(kBootParams,"nosmp",kBootParamCount))
   24a30:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24a35:	83 ec 04             	sub    esp,0x4
   24a38:	50                   	push   eax
   24a39:	68 62 4d 08 00       	push   0x84d62
   24a3e:	68 e0 8f 09 00       	push   0x98fe0
   24a43:	e8 0f fa ff ff       	call   24457 <ParamExists>
   24a48:	83 c4 10             	add    esp,0x10
   24a4b:	84 c0                	test   al,al
   24a4d:	74 12                	je     24a61 <kernel_main+0x516>
/home/yogi/src/os/chrisOS/src/init/init.c:317
        printk("SMP: No AP processor startup per 'nosmp' parameter\n");
   24a4f:	83 ec 0c             	sub    esp,0xc
   24a52:	68 68 4d 08 00       	push   0x84d68
   24a57:	e8 97 27 00 00       	call   271f3 <printk>
   24a5c:	83 c4 10             	add    esp,0x10
   24a5f:	eb 77                	jmp    24ad8 <kernel_main+0x58d>
/home/yogi/src/os/chrisOS/src/init/init.c:320
    else
    {
        printk("SMP: Initializing, ");
   24a61:	83 ec 0c             	sub    esp,0xc
   24a64:	68 9c 4d 08 00       	push   0x84d9c
   24a69:	e8 85 27 00 00       	call   271f3 <printk>
   24a6e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:321
        printk("%u MP records parsed\n",mpInit());
   24a71:	e8 11 56 ff ff       	call   1a087 <mpInit>
   24a76:	83 ec 08             	sub    esp,0x8
   24a79:	50                   	push   eax
   24a7a:	68 b0 4d 08 00       	push   0x84db0
   24a7f:	e8 6f 27 00 00       	call   271f3 <printk>
   24a84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:323
        //cursorUpdateBiosCursor();
        printk("SMP: Starting up AP processors\n");
   24a87:	83 ec 0c             	sub    esp,0xc
   24a8a:	68 c8 4d 08 00       	push   0x84dc8
   24a8f:	e8 5f 27 00 00       	call   271f3 <printk>
   24a94:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:324
        AP_startup();
   24a97:	e8 2a cb fd ff       	call   15c6 <AP_startup>
/home/yogi/src/os/chrisOS/src/init/init.c:325
        wait(500);
   24a9c:	83 ec 0c             	sub    esp,0xc
   24a9f:	68 f4 01 00 00       	push   0x1f4
   24aa4:	e8 89 39 00 00       	call   28432 <wait>
   24aa9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:326
        printk("SMP: CPUs 2 thru %u (of %u total) started... done\n",smpBootCPUsStarted+1, smpBootCPUCount+1);
   24aac:	0f b6 05 a9 15 00 00 	movzx  eax,BYTE PTR ds:0x15a9
   24ab3:	0f b6 c0             	movzx  eax,al
   24ab6:	8d 50 01             	lea    edx,[eax+0x1]
   24ab9:	0f b6 05 ab 15 00 00 	movzx  eax,BYTE PTR ds:0x15ab
   24ac0:	0f b6 c0             	movzx  eax,al
   24ac3:	83 c0 01             	add    eax,0x1
   24ac6:	83 ec 04             	sub    esp,0x4
   24ac9:	52                   	push   edx
   24aca:	50                   	push   eax
   24acb:	68 e8 4d 08 00       	push   0x84de8
   24ad0:	e8 1e 27 00 00       	call   271f3 <printk>
   24ad5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:331
        //if (kIOAPICPtr)
        //    kMapPage(CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS, (uintptr_t)kIOAPICPtr, 0x13);
    }
#endif
    if (ParamExists(kBootParams,"nopci",kBootParamCount))
   24ad8:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24add:	83 ec 04             	sub    esp,0x4
   24ae0:	50                   	push   eax
   24ae1:	68 1b 4e 08 00       	push   0x84e1b
   24ae6:	68 e0 8f 09 00       	push   0x98fe0
   24aeb:	e8 67 f9 ff ff       	call   24457 <ParamExists>
   24af0:	83 c4 10             	add    esp,0x10
   24af3:	84 c0                	test   al,al
   24af5:	74 12                	je     24b09 <kernel_main+0x5be>
/home/yogi/src/os/chrisOS/src/init/init.c:332
        printk("PCI: No scanning per parameter 'nopci'\n");
   24af7:	83 ec 0c             	sub    esp,0xc
   24afa:	68 24 4e 08 00       	push   0x84e24
   24aff:	e8 ef 26 00 00       	call   271f3 <printk>
   24b04:	83 c4 10             	add    esp,0x10
   24b07:	eb 6e                	jmp    24b77 <kernel_main+0x62c>
/home/yogi/src/os/chrisOS/src/init/init.c:335
    else
    {
        printk("PCI: initializing ...");
   24b09:	83 ec 0c             	sub    esp,0xc
   24b0c:	68 4c 4e 08 00       	push   0x84e4c
   24b11:	e8 dd 26 00 00       	call   271f3 <printk>
   24b16:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:336
        pciInitialize();
   24b19:	e8 f3 2c ff ff       	call   17811 <pciInitialize>
/home/yogi/src/os/chrisOS/src/init/init.c:337
        printk(" found %u %s, %u devices (%u bridges)\n",kPCIBusCount, kPCIBusCount<=1?"bus":"busses", kPCIDeviceCount, kPCIBridgeCount);
   24b1e:	0f b6 05 ad 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ad
   24b25:	0f b6 c8             	movzx  ecx,al
   24b28:	0f b6 05 ac 02 12 00 	movzx  eax,BYTE PTR ds:0x1202ac
   24b2f:	0f b6 d0             	movzx  edx,al
   24b32:	0f b6 05 af 02 12 00 	movzx  eax,BYTE PTR ds:0x1202af
   24b39:	3c 01                	cmp    al,0x1
   24b3b:	77 07                	ja     24b44 <kernel_main+0x5f9>
/home/yogi/src/os/chrisOS/src/init/init.c:337 (discriminator 1)
   24b3d:	bb 62 4e 08 00       	mov    ebx,0x84e62
   24b42:	eb 05                	jmp    24b49 <kernel_main+0x5fe>
/home/yogi/src/os/chrisOS/src/init/init.c:337 (discriminator 2)
   24b44:	bb 66 4e 08 00       	mov    ebx,0x84e66
/home/yogi/src/os/chrisOS/src/init/init.c:337 (discriminator 4)
   24b49:	0f b6 05 af 02 12 00 	movzx  eax,BYTE PTR ds:0x1202af
   24b50:	0f b6 c0             	movzx  eax,al
   24b53:	83 ec 0c             	sub    esp,0xc
   24b56:	51                   	push   ecx
   24b57:	52                   	push   edx
   24b58:	53                   	push   ebx
   24b59:	50                   	push   eax
   24b5a:	68 70 4e 08 00       	push   0x84e70
   24b5f:	e8 8f 26 00 00       	call   271f3 <printk>
   24b64:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:338 (discriminator 4)
        printk("PCI: initialization complete ...\n");
   24b67:	83 ec 0c             	sub    esp,0xc
   24b6a:	68 98 4e 08 00       	push   0x84e98
   24b6f:	e8 7f 26 00 00       	call   271f3 <printk>
   24b74:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:340
    }
    doHDSetup();
   24b77:	e8 4c f2 ff ff       	call   23dc8 <doHDSetup>
/home/yogi/src/os/chrisOS/src/init/init.c:341
kInitDone = true;
   24b7c:	c6 05 a0 02 12 00 01 	mov    BYTE PTR ds:0x1202a0,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:342
    goto overStuff; /*******************************************/
   24b83:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:394 (discriminator 1)
        //kpagingUpdatePresentFlagA(0x0,false);
//    __asm__("mov eax,0xdeadbead\n mov [0x0100],eax\n");    //purposely read address 0 which we made "read only"
        
//        terminal_clear();
MAINLOOPv:
        __asm__("nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n");
   24b84:	90                   	nop
   24b85:	90                   	nop
   24b86:	90                   	nop
   24b87:	90                   	nop
   24b88:	90                   	nop
   24b89:	90                   	nop
   24b8a:	90                   	nop
   24b8b:	90                   	nop
   24b8c:	90                   	nop
   24b8d:	90                   	nop
   24b8e:	90                   	nop
   24b8f:	90                   	nop
   24b90:	90                   	nop
   24b91:	90                   	nop
   24b92:	90                   	nop
   24b93:	90                   	nop
   24b94:	90                   	nop
   24b95:	90                   	nop
   24b96:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:398 (discriminator 1)
//    char a[255];
//    gets(a,255);
//    if (!strncmp(a,"debug",5))
        biShell();
   24b97:	e8 5f e8 fe ff       	call   133fb <biShell>
/home/yogi/src/os/chrisOS/src/init/init.c:402 (discriminator 1)
//    if (a>0)
//        printk("%c",a);
//    __asm__("hlt\n");
    goto MAINLOOPv;
   24b9c:	eb e6                	jmp    24b84 <kernel_main+0x639>
   24b9e:	66 90                	xchg   ax,ax

00024ba0 <initializeKernelPaging>:
initializeKernelPaging():
/home/yogi/src/os/chrisOS/src/init/initPaging.c:13
extern struct idt_entry kInitialIDT[0x30];
extern struct idt_ptr kInitialIDTReg;
extern struct gdt_ptr kernelGDT;

void initializeKernelPaging()
{
   24ba0:	55                   	push   ebp
   24ba1:	89 e5                	mov    ebp,esp
   24ba3:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/initPaging.c:18
        uint32_t *ptr;
        uint32_t *ptrT;
        uint32_t *ptr2;
        uint32_t *kKernelPageTables;
        uint16_t tempEntries = (0xFFFFFFFF/0x400000)+1;  //Map entire 4GB memory space 
   24ba6:	66 c7 45 e6 00 04    	mov    WORD PTR [ebp-0x1a],0x400
/home/yogi/src/os/chrisOS/src/init/initPaging.c:21

       
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
   24bac:	83 ec 08             	sub    esp,0x8
   24baf:	68 bc 4e 08 00       	push   0x84ebc
   24bb4:	6a 20                	push   0x20
   24bb6:	e8 58 26 00 00       	call   27213 <printd>
   24bbb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:22
        ptr=(uint32_t*)kKernelPageDir;
   24bbe:	a1 a4 02 12 00       	mov    eax,ds:0x1202a4
   24bc3:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:23
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   24bc6:	c7 45 f4 00 b0 4b 00 	mov    DWORD PTR [ebp-0xc],0x4bb000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:24
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
   24bcd:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   24bd0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   24bd3:	68 f0 4e 08 00       	push   0x84ef0
   24bd8:	6a 20                	push   0x20
   24bda:	e8 34 26 00 00       	call   27213 <printd>
   24bdf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:25
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
   24be2:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   24be6:	83 ec 04             	sub    esp,0x4
   24be9:	50                   	push   eax
   24bea:	68 2c 4f 08 00       	push   0x84f2c
   24bef:	6a 20                	push   0x20
   24bf1:	e8 1d 26 00 00       	call   27213 <printd>
   24bf6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   24bf9:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   24c00:	eb 65                	jmp    24c67 <initializeKernelPaging+0xc7>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:28
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
   24c02:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   24c05:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24c0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   24c0f:	01 d0                	add    eax,edx
   24c11:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24c14:	81 c2 bb 04 00 00    	add    edx,0x4bb
   24c1a:	c1 e2 0c             	shl    edx,0xc
   24c1d:	83 ca 03             	or     edx,0x3
   24c20:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   24c22:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   24c29:	eb 28                	jmp    24c53 <initializeKernelPaging+0xb3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:32 (discriminator 3)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
   24c2b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   24c2e:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24c35:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24c38:	01 d0                	add    eax,edx
   24c3a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24c3d:	89 d1                	mov    ecx,edx
   24c3f:	c1 e1 16             	shl    ecx,0x16
   24c42:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   24c45:	c1 e2 0c             	shl    edx,0xc
   24c48:	01 ca                	add    edx,ecx
   24c4a:	83 ca 03             	or     edx,0x3
   24c4d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 3)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   24c4f:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 1)
   24c53:	81 7d ec ff 03 00 00 	cmp    DWORD PTR [ebp-0x14],0x3ff
   24c5a:	7e cf                	jle    24c2b <initializeKernelPaging+0x8b>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:34 (discriminator 2)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
                }
                ptrT += 0x400;
   24c5c:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 2)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
        ptr=(uint32_t*)kKernelPageDir;
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   24c63:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 1)
   24c67:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   24c6b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   24c6e:	77 92                	ja     24c02 <initializeKernelPaging+0x62>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:36
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
                }
                ptrT += 0x400;
        }
        uint32_t pageDirEntrySize = 0x400000;
   24c70:	c7 45 dc 00 00 40 00 	mov    DWORD PTR [ebp-0x24],0x400000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:37
        ptr2=(void*)KERNEL_PAGE_DIR_ADDRESS + (KERNEL_PAGED_BASE_ADDRESS / 0x400000)*4; //(((uint32_t)KERNEL_PAGED_BASE_ADDRESS / (uint32_t)0x400000) * 4);
   24c77:	c7 45 d8 00 9c 4a 00 	mov    DWORD PTR [ebp-0x28],0x4a9c00
/home/yogi/src/os/chrisOS/src/init/initPaging.c:38
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   24c7e:	c7 45 d4 00 b0 4b 00 	mov    DWORD PTR [ebp-0x2c],0x4bb000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:40
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
   24c85:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   24c88:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
   24c8b:	68 5c 4f 08 00       	push   0x84f5c
   24c90:	6a 20                	push   0x20
   24c92:	e8 7c 25 00 00       	call   27213 <printd>
   24c97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:41
        uint32_t pageDirEntryCount= 0x40;   //Map C0000000-CFFFFFFF=00000000-0FFFFFFF 
   24c9a:	c7 45 d0 40 00 00 00 	mov    DWORD PTR [ebp-0x30],0x40
/home/yogi/src/os/chrisOS/src/init/initPaging.c:42
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
   24ca1:	83 ec 04             	sub    esp,0x4
   24ca4:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   24ca7:	68 98 4f 08 00       	push   0x84f98
   24cac:	6a 20                	push   0x20
   24cae:	e8 60 25 00 00       	call   27213 <printd>
   24cb3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   24cb6:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   24cbd:	eb 24                	jmp    24ce3 <initializeKernelPaging+0x143>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:45 (discriminator 3)
        {
                ptr2[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
   24cbf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   24cc2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24cc9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   24ccc:	01 d0                	add    eax,edx
   24cce:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   24cd1:	81 c2 bb 04 00 00    	add    edx,0x4bb
   24cd7:	c1 e2 0c             	shl    edx,0xc
   24cda:	83 ca 03             	or     edx,0x3
   24cdd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 3)
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
        uint32_t pageDirEntryCount= 0x40;   //Map C0000000-CFFFFFFF=00000000-0FFFFFFF 
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   24cdf:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 1)
   24ce3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   24ce6:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
   24ce9:	76 d4                	jbe    24cbf <initializeKernelPaging+0x11f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:47
        {
                ptr2[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x3;
        }
        __asm__("mov cr3,%0\n":: "a" (KERNEL_PAGE_DIR_ADDRESS));
   24ceb:	b8 00 90 4a 00       	mov    eax,0x4a9000
   24cf0:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:48
       __asm__("mov eax,cr0\n or eax,0x80000000\n mov cr0,eax\n");
   24cf3:	0f 20 c0             	mov    eax,cr0
   24cf6:	0d 00 00 00 80       	or     eax,0x80000000
   24cfb:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:57
/*BEFORE:
 0 - blank
 1 (0x08) - code @ 0x0
 2 (0x10) - data @ 0x0
*/
       gdtEntry(1, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   24cfe:	83 ec 08             	sub    esp,0x8
   24d01:	6a 01                	push   0x1
   24d03:	6a c0                	push   0xffffffc0
   24d05:	6a 88                	push   0xffffff88
   24d07:	68 ff ff 0f 00       	push   0xfffff
   24d0c:	68 00 00 00 c0       	push   0xc0000000
   24d11:	6a 01                	push   0x1
   24d13:	e8 f8 3b ff ff       	call   18910 <gdtEntry>
   24d18:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:59
                  GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(2, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   24d1b:	83 ec 08             	sub    esp,0x8
   24d1e:	6a 01                	push   0x1
   24d20:	6a c0                	push   0xffffffc0
   24d22:	6a 82                	push   0xffffff82
   24d24:	68 ff ff 0f 00       	push   0xfffff
   24d29:	68 00 00 00 c0       	push   0xc0000000
   24d2e:	6a 02                	push   0x2
   24d30:	e8 db 3b ff ff       	call   18910 <gdtEntry>
   24d35:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:67
 0 - blank
 1 (0x08) - code @ 0xC0000000
 2 (0x10) - data @ 0xC0000000
*/

        kernelGDT.limit = sizeof(struct GDT) * GDT_ENTRIES - 1;
   24d38:	66 c7 05 4c 04 12 00 	mov    WORD PTR ds:0x12044c,0x31f
   24d3f:	1f 03 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:68
        kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   24d41:	c7 05 4e 04 12 00 00 	mov    DWORD PTR ds:0x12044e,0x154000
   24d48:	40 15 00 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:69
        set_gdt(&kernelGDT);
   24d4b:	83 ec 0c             	sub    esp,0xc
   24d4e:	68 4c 04 12 00       	push   0x12044c
   24d53:	e8 e5 c3 fd ff       	call   113d <set_gdt>
   24d58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:70
        idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   24d5b:	83 ec 08             	sub    esp,0x8
   24d5e:	6a 20                	push   0x20
   24d60:	68 e0 a3 09 00       	push   0x9a3e0
   24d65:	e8 fa 3d ff ff       	call   18b64 <idt_init>
   24d6a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:71
        doPagingJump();
   24d6d:	e8 b5 c5 fd ff       	call   1327 <doPagingJump>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:75

    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   24d72:	a1 38 03 12 00       	mov    eax,ds:0x120338
   24d77:	83 e0 20             	and    eax,0x20
   24d7a:	85 c0                	test   eax,eax
   24d7c:	74 15                	je     24d93 <initializeKernelPaging+0x1f3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:76
            printk("Clearing up temporary low page entries at 0x%08X\n", KERNEL_TEMP_LOW_PAGE_TABLE_BASE_ADDRESS);
   24d7e:	83 ec 08             	sub    esp,0x8
   24d81:	68 00 00 09 05       	push   0x5090000
   24d86:	68 b8 4f 08 00       	push   0x84fb8
   24d8b:	e8 63 24 00 00       	call   271f3 <printk>
   24d90:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:80
#endif
        //Now that we've fixed our IDT, lets restart interrupts!
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   24d93:	a1 38 03 12 00       	mov    eax,ds:0x120338
   24d98:	83 e0 20             	and    eax,0x20
   24d9b:	85 c0                	test   eax,eax
   24d9d:	74 10                	je     24daf <initializeKernelPaging+0x20f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:81
            printk("Exiting setupKernelPaging module\n");
   24d9f:	83 ec 0c             	sub    esp,0xc
   24da2:	68 ec 4f 08 00       	push   0x84fec
   24da7:	e8 47 24 00 00       	call   271f3 <printk>
   24dac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:83
#endif
}
   24daf:	90                   	nop
   24db0:	c9                   	leave  
   24db1:	c3                   	ret    
   24db2:	66 90                	xchg   ax,ax

00024db4 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   24db4:	55                   	push   ebp
   24db5:	89 e5                	mov    ebp,esp
   24db7:	83 ec 08             	sub    esp,0x8
   24dba:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   24dbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24dc0:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   24dc4:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   24dc7:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   24dcb:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   24dcf:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   24dd0:	90                   	nop
   24dd1:	c9                   	leave  
   24dd2:	c3                   	ret    

00024dd3 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   24dd3:	55                   	push   ebp
   24dd4:	89 e5                	mov    ebp,esp
   24dd6:	83 ec 14             	sub    esp,0x14
   24dd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24ddc:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   24de0:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   24de4:	89 c2                	mov    edx,eax
   24de6:	ec                   	in     al,dx
   24de7:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   24dea:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   24dee:	c9                   	leave  
   24def:	c3                   	ret    

00024df0 <reverse>:
reverse():
/home/yogi/src/os/chrisOS/src/init/utility.c:30
//#include <string.h>

/* reverse:  reverse string s in place */
extern int strlen(char*);
 void reverse(char s[])
 {
   24df0:	55                   	push   ebp
   24df1:	89 e5                	mov    ebp,esp
   24df3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:34
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   24df6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24dfd:	83 ec 0c             	sub    esp,0xc
   24e00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   24e03:	e8 bc 25 00 00       	call   273c4 <strlen>
   24e08:	83 c4 10             	add    esp,0x10
   24e0b:	83 e8 01             	sub    eax,0x1
   24e0e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   24e11:	eb 39                	jmp    24e4c <reverse+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:35 (discriminator 3)
         c = s[i];
   24e13:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   24e16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24e19:	01 d0                	add    eax,edx
   24e1b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24e1e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/utility.c:36 (discriminator 3)
         s[i] = s[j];
   24e21:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   24e24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24e27:	01 c2                	add    edx,eax
   24e29:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   24e2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24e2f:	01 c8                	add    eax,ecx
   24e31:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24e34:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:37 (discriminator 3)
         s[j] = c;
   24e36:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24e39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24e3c:	01 c2                	add    edx,eax
   24e3e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   24e42:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:34 (discriminator 3)
 void reverse(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   24e44:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
   24e48:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:34 (discriminator 1)
   24e4c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24e4f:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   24e52:	7c bf                	jl     24e13 <reverse+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:39
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
   24e54:	90                   	nop
   24e55:	c9                   	leave  
   24e56:	c3                   	ret    

00024e57 <itoa>:
itoa():
/home/yogi/src/os/chrisOS/src/init/utility.c:41
 void itoa(int n, char s[])
 {
   24e57:	55                   	push   ebp
   24e58:	89 e5                	mov    ebp,esp
   24e5a:	53                   	push   ebx
   24e5b:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/utility.c:44
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
   24e5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24e61:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   24e64:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   24e68:	79 03                	jns    24e6d <itoa+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:45
         n = -n;          /* make n positive */
   24e6a:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:46
     i = 0;
   24e6d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:48 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
   24e74:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24e77:	8d 50 01             	lea    edx,[eax+0x1]
   24e7a:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   24e7d:	89 c2                	mov    edx,eax
   24e7f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24e82:	8d 1c 02             	lea    ebx,[edx+eax*1]
   24e85:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   24e88:	ba 67 66 66 66       	mov    edx,0x66666667
   24e8d:	89 c8                	mov    eax,ecx
   24e8f:	f7 ea                	imul   edx
   24e91:	c1 fa 02             	sar    edx,0x2
   24e94:	89 c8                	mov    eax,ecx
   24e96:	c1 f8 1f             	sar    eax,0x1f
   24e99:	29 c2                	sub    edx,eax
   24e9b:	89 d0                	mov    eax,edx
   24e9d:	c1 e0 02             	shl    eax,0x2
   24ea0:	01 d0                	add    eax,edx
   24ea2:	01 c0                	add    eax,eax
   24ea4:	29 c1                	sub    ecx,eax
   24ea6:	89 ca                	mov    edx,ecx
   24ea8:	89 d0                	mov    eax,edx
   24eaa:	83 c0 30             	add    eax,0x30
   24ead:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:49 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
   24eaf:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   24eb2:	ba 67 66 66 66       	mov    edx,0x66666667
   24eb7:	89 c8                	mov    eax,ecx
   24eb9:	f7 ea                	imul   edx
   24ebb:	c1 fa 02             	sar    edx,0x2
   24ebe:	89 c8                	mov    eax,ecx
   24ec0:	c1 f8 1f             	sar    eax,0x1f
   24ec3:	29 c2                	sub    edx,eax
   24ec5:	89 d0                	mov    eax,edx
   24ec7:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   24eca:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   24ece:	7f a4                	jg     24e74 <itoa+0x1d>
/home/yogi/src/os/chrisOS/src/init/utility.c:50
     if (sign < 0)
   24ed0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   24ed4:	79 13                	jns    24ee9 <itoa+0x92>
/home/yogi/src/os/chrisOS/src/init/utility.c:51
         s[i++] = '-';
   24ed6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24ed9:	8d 50 01             	lea    edx,[eax+0x1]
   24edc:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   24edf:	89 c2                	mov    edx,eax
   24ee1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24ee4:	01 d0                	add    eax,edx
   24ee6:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/chrisOS/src/init/utility.c:52
     s[i] = '\0';
   24ee9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   24eec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24eef:	01 d0                	add    eax,edx
   24ef1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:53
     reverse(s);
   24ef4:	83 ec 0c             	sub    esp,0xc
   24ef7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   24efa:	e8 f1 fe ff ff       	call   24df0 <reverse>
   24eff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:54
 }
   24f02:	90                   	nop
   24f03:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   24f06:	c9                   	leave  
   24f07:	c3                   	ret    

00024f08 <itox>:
itox():
/home/yogi/src/os/chrisOS/src/init/utility.c:56
void itox(unsigned int i, char *s)
{
   24f08:	55                   	push   ebp
   24f09:	89 e5                	mov    ebp,esp
   24f0b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:59
    unsigned char n;

    s += 4;
   24f0e:	83 45 0c 04          	add    DWORD PTR [ebp+0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:60
    *s = '\0';
   24f12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24f15:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:62

    for (n = 8; n != 0; --n) {
   24f18:	c6 45 ff 08          	mov    BYTE PTR [ebp-0x1],0x8
   24f1c:	eb 1e                	jmp    24f3c <itox+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:63 (discriminator 3)
        *--s = "0123456789ABCDEF"[i & 0x0F];
   24f1e:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
   24f22:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f25:	83 e0 0f             	and    eax,0xf
   24f28:	0f b6 90 20 51 08 00 	movzx  edx,BYTE PTR [eax+0x85120]
   24f2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   24f32:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:64 (discriminator 3)
        i >>= 4;
   24f34:	c1 6d 08 04          	shr    DWORD PTR [ebp+0x8],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:62 (discriminator 3)
    unsigned char n;

    s += 4;
    *s = '\0';

    for (n = 8; n != 0; --n) {
   24f38:	80 6d ff 01          	sub    BYTE PTR [ebp-0x1],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:62 (discriminator 1)
   24f3c:	80 7d ff 00          	cmp    BYTE PTR [ebp-0x1],0x0
   24f40:	75 dc                	jne    24f1e <itox+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:66
        *--s = "0123456789ABCDEF"[i & 0x0F];
        i >>= 4;
    }
}
   24f42:	90                   	nop
   24f43:	c9                   	leave  
   24f44:	c3                   	ret    

00024f45 <atoi>:
atoi():
/home/yogi/src/os/chrisOS/src/init/utility.c:69
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
   24f45:	55                   	push   ebp
   24f46:	89 e5                	mov    ebp,esp
   24f48:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:70
    int res = 0; // Initialize result
   24f4b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:74
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   24f52:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   24f59:	eb 28                	jmp    24f83 <atoi+0x3e>
/home/yogi/src/os/chrisOS/src/init/utility.c:75 (discriminator 3)
        res = res*10 + str[i] - '0';
   24f5b:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   24f5e:	89 d0                	mov    eax,edx
   24f60:	c1 e0 02             	shl    eax,0x2
   24f63:	01 d0                	add    eax,edx
   24f65:	01 c0                	add    eax,eax
   24f67:	89 c1                	mov    ecx,eax
   24f69:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   24f6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f6f:	01 d0                	add    eax,edx
   24f71:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24f74:	0f be c0             	movsx  eax,al
   24f77:	01 c8                	add    eax,ecx
   24f79:	83 e8 30             	sub    eax,0x30
   24f7c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:74 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   24f7f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:74 (discriminator 1)
   24f83:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   24f86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24f89:	01 d0                	add    eax,edx
   24f8b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   24f8e:	84 c0                	test   al,al
   24f90:	75 c9                	jne    24f5b <atoi+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:78
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
   24f92:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:79
}
   24f95:	c9                   	leave  
   24f96:	c3                   	ret    

00024f97 <convert>:
convert():
/home/yogi/src/os/chrisOS/src/init/utility.c:82

int convert(int s)
{
   24f97:	55                   	push   ebp
   24f98:	89 e5                	mov    ebp,esp
   24f9a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:84
  int c;
  char hex[] = {'A', 'B', 'C', 'D', 'E', 'F'};
   24f9d:	c6 45 f6 41          	mov    BYTE PTR [ebp-0xa],0x41
   24fa1:	c6 45 f7 42          	mov    BYTE PTR [ebp-0x9],0x42
   24fa5:	c6 45 f8 43          	mov    BYTE PTR [ebp-0x8],0x43
   24fa9:	c6 45 f9 44          	mov    BYTE PTR [ebp-0x7],0x44
   24fad:	c6 45 fa 45          	mov    BYTE PTR [ebp-0x6],0x45
   24fb1:	c6 45 fb 46          	mov    BYTE PTR [ebp-0x5],0x46
/home/yogi/src/os/chrisOS/src/init/utility.c:85
  c = (s >= 0 && s < 9) ? s + '0' : hex[s - 10];
   24fb5:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   24fb9:	78 0e                	js     24fc9 <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 1)
   24fbb:	83 7d 08 08          	cmp    DWORD PTR [ebp+0x8],0x8
   24fbf:	7f 08                	jg     24fc9 <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 3)
   24fc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24fc4:	83 c0 30             	add    eax,0x30
   24fc7:	eb 0e                	jmp    24fd7 <convert+0x40>
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 4)
   24fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   24fcc:	83 e8 0a             	sub    eax,0xa
   24fcf:	0f b6 44 05 f6       	movzx  eax,BYTE PTR [ebp+eax*1-0xa]
   24fd4:	0f be c0             	movsx  eax,al
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 6)
   24fd7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:86 (discriminator 6)
  return c;
   24fda:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:87 (discriminator 6)
}
   24fdd:	c9                   	leave  
   24fde:	c3                   	ret    

00024fdf <itoha>:
itoha():
/home/yogi/src/os/chrisOS/src/init/utility.c:90

void itoha(unsigned int n, char *buf)
{
   24fdf:	55                   	push   ebp
   24fe0:	89 e5                	mov    ebp,esp
   24fe2:	53                   	push   ebx
   24fe3:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:91
  int i = 0, j =0;
   24fe6:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24fed:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:92
  j=7;
   24ff4:	c7 45 f8 07 00 00 00 	mov    DWORD PTR [ebp-0x8],0x7
/home/yogi/src/os/chrisOS/src/init/utility.c:93
  while(n != 0)
   24ffb:	eb 37                	jmp    25034 <itoha+0x55>
/home/yogi/src/os/chrisOS/src/init/utility.c:95
  {
    i = n % 16;
   24ffd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25000:	83 e0 0f             	and    eax,0xf
   25003:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:96
      buf[j--] = convert(i);
   25006:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25009:	8d 50 ff             	lea    edx,[eax-0x1]
   2500c:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   2500f:	89 c2                	mov    edx,eax
   25011:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25014:	8d 1c 02             	lea    ebx,[edx+eax*1]
   25017:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2501a:	e8 78 ff ff ff       	call   24f97 <convert>
   2501f:	83 c4 04             	add    esp,0x4
   25022:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:97
      n = (n - i) / 16;
   25024:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25027:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2502a:	29 c2                	sub    edx,eax
   2502c:	89 d0                	mov    eax,edx
   2502e:	c1 e8 04             	shr    eax,0x4
   25031:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:93

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
  while(n != 0)
   25034:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   25038:	75 c3                	jne    24ffd <itoha+0x1e>
/home/yogi/src/os/chrisOS/src/init/utility.c:99
  {
    i = n % 16;
      buf[j--] = convert(i);
      n = (n - i) / 16;
  }
  buf[j] = '\0';
   2503a:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   2503d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25040:	01 d0                	add    eax,edx
   25042:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:100
}
   25045:	90                   	nop
   25046:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   25049:	c9                   	leave  
   2504a:	c3                   	ret    

0002504b <identify_data_sizes>:
identify_data_sizes():
/home/yogi/src/os/chrisOS/src/init/utility.c:103

void identify_data_sizes(sizeof_t* sizes)
{
   2504b:	55                   	push   ebp
   2504c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/utility.c:104
    sizes->shortSize = sizeof(short);
   2504e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25051:	66 c7 00 02 00       	mov    WORD PTR [eax],0x2
/home/yogi/src/os/chrisOS/src/init/utility.c:105
    sizes->intSize = sizeof(int);
   25056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25059:	66 c7 40 02 04 00    	mov    WORD PTR [eax+0x2],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:106
    sizes->longSize = sizeof(long);
   2505f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25062:	66 c7 40 04 04 00    	mov    WORD PTR [eax+0x4],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:107
    sizes->longLongSize = sizeof(long long);
   25068:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2506b:	66 c7 40 06 08 00    	mov    WORD PTR [eax+0x6],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:108
    sizes->longLongIntSize = sizeof(long long int);
   25071:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25074:	66 c7 40 08 08 00    	mov    WORD PTR [eax+0x8],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:109
}
   2507a:	90                   	nop
   2507b:	5d                   	pop    ebp
   2507c:	c3                   	ret    

0002507d <memset>:
memset():
/home/yogi/src/os/chrisOS/src/init/utility.c:112

void *memset(void *d1, int val, size_t len)
{
   2507d:	55                   	push   ebp
   2507e:	89 e5                	mov    ebp,esp
   25080:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:113
    uint8_t *d = d1;
   25083:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25086:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:114
    uint16_t*e = d1;
   25089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2508c:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:115
    uint16_t eVal=(val << 16) | (val << 8) | val;
   2508f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25092:	c1 e0 10             	shl    eax,0x10
   25095:	89 c2                	mov    edx,eax
   25097:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2509a:	c1 e0 08             	shl    eax,0x8
   2509d:	09 c2                	or     edx,eax
   2509f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   250a2:	09 d0                	or     eax,edx
   250a4:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/init/utility.c:116
    uint32_t*f = d1;
   250a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   250ab:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:117
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
   250ae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   250b1:	c1 e0 18             	shl    eax,0x18
   250b4:	89 c2                	mov    edx,eax
   250b6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   250b9:	c1 e0 10             	shl    eax,0x10
   250bc:	09 c2                	or     edx,eax
   250be:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   250c1:	c1 e0 08             	shl    eax,0x8
   250c4:	09 d0                	or     eax,edx
   250c6:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   250c9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:119
    
    if ((len%4)==0)
   250cc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   250cf:	83 e0 03             	and    eax,0x3
   250d2:	85 c0                	test   eax,eax
   250d4:	75 1c                	jne    250f2 <memset+0x75>
/home/yogi/src/os/chrisOS/src/init/utility.c:120
    while (len-=4) {
   250d6:	eb 0e                	jmp    250e6 <memset+0x69>
/home/yogi/src/os/chrisOS/src/init/utility.c:121
        *d++ = fVal;
   250d8:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   250db:	8d 50 01             	lea    edx,[eax+0x1]
   250de:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   250e1:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   250e4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:120
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
   250e6:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
   250ea:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   250ee:	75 e8                	jne    250d8 <memset+0x5b>
   250f0:	eb 42                	jmp    25134 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:123
        *d++ = fVal;
    }
    else if (((len%2)==0))
   250f2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   250f5:	83 e0 01             	and    eax,0x1
   250f8:	85 c0                	test   eax,eax
   250fa:	75 2b                	jne    25127 <memset+0xaa>
/home/yogi/src/os/chrisOS/src/init/utility.c:124
    while (len-=2) {
   250fc:	eb 0f                	jmp    2510d <memset+0x90>
/home/yogi/src/os/chrisOS/src/init/utility.c:125
        *d++ = eVal;
   250fe:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25101:	8d 50 01             	lea    edx,[eax+0x1]
   25104:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   25107:	0f b7 55 f6          	movzx  edx,WORD PTR [ebp-0xa]
   2510b:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:124
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
   2510d:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
   25111:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   25115:	75 e7                	jne    250fe <memset+0x81>
   25117:	eb 1b                	jmp    25134 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:129
        *d++ = eVal;
    }
    else
    while (len--) {
        *d++ = val;
   25119:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   2511c:	8d 50 01             	lea    edx,[eax+0x1]
   2511f:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   25122:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25125:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:128
    else if (((len%2)==0))
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
   25127:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2512a:	8d 50 ff             	lea    edx,[eax-0x1]
   2512d:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25130:	85 c0                	test   eax,eax
   25132:	75 e5                	jne    25119 <memset+0x9c>
/home/yogi/src/os/chrisOS/src/init/utility.c:131
        *d++ = val;
    }
    return d1;
   25134:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:132
}
   25137:	c9                   	leave  
   25138:	c3                   	ret    

00025139 <bcdToDec>:
bcdToDec():
/home/yogi/src/os/chrisOS/src/init/utility.c:135

uint8_t bcdToDec(uint8_t val)
{
   25139:	55                   	push   ebp
   2513a:	89 e5                	mov    ebp,esp
   2513c:	83 ec 04             	sub    esp,0x4
   2513f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25142:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/init/utility.c:136
  return ( (val/16*10) + (val%16) );
   25145:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   25149:	c0 e8 04             	shr    al,0x4
   2514c:	89 c2                	mov    edx,eax
   2514e:	89 d0                	mov    eax,edx
   25150:	c1 e0 02             	shl    eax,0x2
   25153:	01 d0                	add    eax,edx
   25155:	01 c0                	add    eax,eax
   25157:	89 c2                	mov    edx,eax
   25159:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   2515d:	83 e0 0f             	and    eax,0xf
   25160:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/utility.c:137
}
   25162:	c9                   	leave  
   25163:	c3                   	ret    

00025164 <decToBcd>:
decToBcd():
/home/yogi/src/os/chrisOS/src/init/utility.c:140

uint8_t decToBcd(uint8_t val)
{
   25164:	55                   	push   ebp
   25165:	89 e5                	mov    ebp,esp
   25167:	53                   	push   ebx
   25168:	83 ec 04             	sub    esp,0x4
   2516b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2516e:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/init/utility.c:141
  return ( (val/10*16) + (val%10) );
   25171:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   25175:	0f b6 d0             	movzx  edx,al
   25178:	89 d0                	mov    eax,edx
   2517a:	c1 e0 02             	shl    eax,0x2
   2517d:	01 d0                	add    eax,edx
   2517f:	c1 e0 03             	shl    eax,0x3
   25182:	01 d0                	add    eax,edx
   25184:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   2518b:	01 d0                	add    eax,edx
   2518d:	66 c1 e8 08          	shr    ax,0x8
   25191:	c0 e8 03             	shr    al,0x3
   25194:	c1 e0 04             	shl    eax,0x4
   25197:	89 c3                	mov    ebx,eax
   25199:	0f b6 4d f8          	movzx  ecx,BYTE PTR [ebp-0x8]
   2519d:	0f b6 d1             	movzx  edx,cl
   251a0:	89 d0                	mov    eax,edx
   251a2:	c1 e0 02             	shl    eax,0x2
   251a5:	01 d0                	add    eax,edx
   251a7:	c1 e0 03             	shl    eax,0x3
   251aa:	01 d0                	add    eax,edx
   251ac:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   251b3:	01 d0                	add    eax,edx
   251b5:	66 c1 e8 08          	shr    ax,0x8
   251b9:	89 c2                	mov    edx,eax
   251bb:	c0 ea 03             	shr    dl,0x3
   251be:	89 d0                	mov    eax,edx
   251c0:	c1 e0 02             	shl    eax,0x2
   251c3:	01 d0                	add    eax,edx
   251c5:	01 c0                	add    eax,eax
   251c7:	29 c1                	sub    ecx,eax
   251c9:	89 ca                	mov    edx,ecx
   251cb:	8d 04 13             	lea    eax,[ebx+edx*1]
/home/yogi/src/os/chrisOS/src/init/utility.c:142
}
   251ce:	83 c4 04             	add    esp,0x4
   251d1:	5b                   	pop    ebx
   251d2:	5d                   	pop    ebp
   251d3:	c3                   	ret    

000251d4 <initSystemDate>:
initSystemDate():
/home/yogi/src/os/chrisOS/src/init/utility.c:144
void initSystemDate()
{
   251d4:	55                   	push   ebp
   251d5:	89 e5                	mov    ebp,esp
   251d7:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/utility.c:147
    struct tm tmbuf;

    outb(0x70, 0x00);
   251da:	6a 00                	push   0x0
   251dc:	6a 70                	push   0x70
   251de:	e8 d1 fb ff ff       	call   24db4 <outb>
   251e3:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:148
    tmbuf.tm_sec = bcdToDec(inb(0x71));
   251e6:	6a 71                	push   0x71
   251e8:	e8 e6 fb ff ff       	call   24dd3 <inb>
   251ed:	83 c4 04             	add    esp,0x4
   251f0:	0f b6 c0             	movzx  eax,al
   251f3:	50                   	push   eax
   251f4:	e8 40 ff ff ff       	call   25139 <bcdToDec>
   251f9:	83 c4 04             	add    esp,0x4
   251fc:	0f b6 c0             	movzx  eax,al
   251ff:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:149
    outb(0x70, 0x02);
   25202:	6a 02                	push   0x2
   25204:	6a 70                	push   0x70
   25206:	e8 a9 fb ff ff       	call   24db4 <outb>
   2520b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:150
    tmbuf.tm_min = bcdToDec(inb(0x71));
   2520e:	6a 71                	push   0x71
   25210:	e8 be fb ff ff       	call   24dd3 <inb>
   25215:	83 c4 04             	add    esp,0x4
   25218:	0f b6 c0             	movzx  eax,al
   2521b:	50                   	push   eax
   2521c:	e8 18 ff ff ff       	call   25139 <bcdToDec>
   25221:	83 c4 04             	add    esp,0x4
   25224:	0f b6 c0             	movzx  eax,al
   25227:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:151
    outb(0x70, 0x04);
   2522a:	6a 04                	push   0x4
   2522c:	6a 70                	push   0x70
   2522e:	e8 81 fb ff ff       	call   24db4 <outb>
   25233:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:152
    tmbuf.tm_hour = bcdToDec(inb(0x71));
   25236:	6a 71                	push   0x71
   25238:	e8 96 fb ff ff       	call   24dd3 <inb>
   2523d:	83 c4 04             	add    esp,0x4
   25240:	0f b6 c0             	movzx  eax,al
   25243:	50                   	push   eax
   25244:	e8 f0 fe ff ff       	call   25139 <bcdToDec>
   25249:	83 c4 04             	add    esp,0x4
   2524c:	0f b6 c0             	movzx  eax,al
   2524f:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:153
    outb(0x70, 0x07);
   25252:	6a 07                	push   0x7
   25254:	6a 70                	push   0x70
   25256:	e8 59 fb ff ff       	call   24db4 <outb>
   2525b:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:154
    tmbuf.tm_mday = bcdToDec(inb(0x71));
   2525e:	6a 71                	push   0x71
   25260:	e8 6e fb ff ff       	call   24dd3 <inb>
   25265:	83 c4 04             	add    esp,0x4
   25268:	0f b6 c0             	movzx  eax,al
   2526b:	50                   	push   eax
   2526c:	e8 c8 fe ff ff       	call   25139 <bcdToDec>
   25271:	83 c4 04             	add    esp,0x4
   25274:	0f b6 c0             	movzx  eax,al
   25277:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:155
    outb(0x70, 0x08);
   2527a:	6a 08                	push   0x8
   2527c:	6a 70                	push   0x70
   2527e:	e8 31 fb ff ff       	call   24db4 <outb>
   25283:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:156
    tmbuf.tm_mon = bcdToDec(inb(0x71));
   25286:	6a 71                	push   0x71
   25288:	e8 46 fb ff ff       	call   24dd3 <inb>
   2528d:	83 c4 04             	add    esp,0x4
   25290:	0f b6 c0             	movzx  eax,al
   25293:	50                   	push   eax
   25294:	e8 a0 fe ff ff       	call   25139 <bcdToDec>
   25299:	83 c4 04             	add    esp,0x4
   2529c:	0f b6 c0             	movzx  eax,al
   2529f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:157
    outb(0x70, 0x09);
   252a2:	6a 09                	push   0x9
   252a4:	6a 70                	push   0x70
   252a6:	e8 09 fb ff ff       	call   24db4 <outb>
   252ab:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:158
    tmbuf.tm_year = bcdToDec(inb(0x71));
   252ae:	6a 71                	push   0x71
   252b0:	e8 1e fb ff ff       	call   24dd3 <inb>
   252b5:	83 c4 04             	add    esp,0x4
   252b8:	0f b6 c0             	movzx  eax,al
   252bb:	50                   	push   eax
   252bc:	e8 78 fe ff ff       	call   25139 <bcdToDec>
   252c1:	83 c4 04             	add    esp,0x4
   252c4:	0f b6 c0             	movzx  eax,al
   252c7:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:159
    tmbuf.tm_isdst = -1;
   252ca:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/init/utility.c:160
    tmbuf.tm_year += 2000;
   252d1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   252d4:	05 d0 07 00 00       	add    eax,0x7d0
   252d9:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:161
    tmbuf.tm_year = tmbuf.tm_year - 1900;
   252dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   252df:	2d 6c 07 00 00       	sub    eax,0x76c
   252e4:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:162
    kSystemStartTime = mktime(&tmbuf);
   252e7:	83 ec 0c             	sub    esp,0xc
   252ea:	8d 45 cc             	lea    eax,[ebp-0x34]
   252ed:	50                   	push   eax
   252ee:	e8 bc 28 00 00       	call   27baf <mktime>
   252f3:	83 c4 10             	add    esp,0x10
   252f6:	a3 88 02 12 00       	mov    ds:0x120288,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:163
    kSystemCurrentTime = kSystemStartTime;
   252fb:	a1 88 02 12 00       	mov    eax,ds:0x120288
   25300:	a3 8c 02 12 00       	mov    ds:0x12028c,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:165
//printf("System Date = %d/%d/%d %d:%d:%d\n", tmbuf.tm_mon, tmbuf.tm_mday, tmbuf.tm_year, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);
}
   25305:	90                   	nop
   25306:	c9                   	leave  
   25307:	c3                   	ret    

00025308 <strtoupper>:
strtoupper():
/home/yogi/src/os/chrisOS/src/init/utility.c:167
char * strtoupper(char* pointerToString)
{
   25308:	55                   	push   ebp
   25309:	89 e5                	mov    ebp,esp
   2530b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:168
    uint8_t start=0, length=strlen(pointerToString);
   2530e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   25312:	83 ec 0c             	sub    esp,0xc
   25315:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25318:	e8 a7 20 00 00       	call   273c4 <strlen>
   2531d:	83 c4 10             	add    esp,0x10
   25320:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/init/utility.c:169
    char* myPtr=pointerToString;
   25323:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25326:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:172
    
        // Trim.Start:
        while (start<length)
   25329:	eb 44                	jmp    2536f <strtoupper+0x67>
/home/yogi/src/os/chrisOS/src/init/utility.c:174
        {
            if (myPtr[start]>='a' && myPtr[start]<='z')
   2532b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2532f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25332:	01 d0                	add    eax,edx
   25334:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25337:	3c 60                	cmp    al,0x60
   25339:	7e 2a                	jle    25365 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:174 (discriminator 1)
   2533b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2533f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25342:	01 d0                	add    eax,edx
   25344:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25347:	3c 7a                	cmp    al,0x7a
   25349:	7f 1a                	jg     25365 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:175
                myPtr[start]-=32;
   2534b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2534f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25352:	01 d0                	add    eax,edx
   25354:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
   25358:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2535b:	01 ca                	add    edx,ecx
   2535d:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   25360:	83 ea 20             	sub    edx,0x20
   25363:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:176
            start++;
   25365:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25369:	83 c0 01             	add    eax,0x1
   2536c:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:172
{
    uint8_t start=0, length=strlen(pointerToString);
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
   2536f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25373:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   25376:	72 b3                	jb     2532b <strtoupper+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:179
            if (myPtr[start]>='a' && myPtr[start]<='z')
                myPtr[start]-=32;
            start++;
        }

    return pointerToString;
   25378:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:180
}
   2537b:	c9                   	leave  
   2537c:	c3                   	ret    

0002537d <printDumpedRegs>:
printDumpedRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:183

void printDumpedRegs()
{
   2537d:	55                   	push   ebp
   2537e:	89 e5                	mov    ebp,esp
   25380:	56                   	push   esi
   25381:	53                   	push   ebx
   25382:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:184
    uint32_t esp = exceptionSavedESP;
   25385:	a1 ec 01 12 00       	mov    eax,ds:0x1201ec
   2538a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:188
    uint8_t* lCSIPPtr;

    
    lCSIPPtr=(uint8_t*)(exceptionEIP);
   2538d:	a1 f8 01 12 00       	mov    eax,ds:0x1201f8
   25392:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:189
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", exceptionAX, exceptionBX, exceptionCX, exceptionDX,exceptionFlags);
   25395:	8b 35 f0 01 12 00    	mov    esi,DWORD PTR ds:0x1201f0
   2539b:	8b 1d bc 01 12 00    	mov    ebx,DWORD PTR ds:0x1201bc
   253a1:	8b 0d b8 01 12 00    	mov    ecx,DWORD PTR ds:0x1201b8
   253a7:	8b 15 b4 01 12 00    	mov    edx,DWORD PTR ds:0x1201b4
   253ad:	a1 b0 01 12 00       	mov    eax,ds:0x1201b0
   253b2:	83 ec 08             	sub    esp,0x8
   253b5:	56                   	push   esi
   253b6:	53                   	push   ebx
   253b7:	51                   	push   ecx
   253b8:	52                   	push   edx
   253b9:	50                   	push   eax
   253ba:	68 34 51 08 00       	push   0x85134
   253bf:	e8 2f 1e 00 00       	call   271f3 <printk>
   253c4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:190
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", exceptionBP, exceptionSI, exceptionDI, exceptionSavedESP);
   253c7:	8b 1d ec 01 12 00    	mov    ebx,DWORD PTR ds:0x1201ec
   253cd:	8b 0d c4 01 12 00    	mov    ecx,DWORD PTR ds:0x1201c4
   253d3:	8b 15 c0 01 12 00    	mov    edx,DWORD PTR ds:0x1201c0
   253d9:	a1 c8 01 12 00       	mov    eax,ds:0x1201c8
   253de:	83 ec 0c             	sub    esp,0xc
   253e1:	53                   	push   ebx
   253e2:	51                   	push   ecx
   253e3:	52                   	push   edx
   253e4:	50                   	push   eax
   253e5:	68 64 51 08 00       	push   0x85164
   253ea:	e8 04 1e 00 00       	call   271f3 <printk>
   253ef:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:191
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
   253f2:	8b 1d d4 01 12 00    	mov    ebx,DWORD PTR ds:0x1201d4
   253f8:	8b 0d d0 01 12 00    	mov    ecx,DWORD PTR ds:0x1201d0
   253fe:	8b 15 00 02 12 00    	mov    edx,DWORD PTR ds:0x120200
   25404:	a1 cc 01 12 00       	mov    eax,ds:0x1201cc
   25409:	83 ec 0c             	sub    esp,0xc
   2540c:	53                   	push   ebx
   2540d:	51                   	push   ecx
   2540e:	52                   	push   edx
   2540f:	50                   	push   eax
   25410:	68 8c 51 08 00       	push   0x8518c
   25415:	e8 d9 1d 00 00       	call   271f3 <printk>
   2541a:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:192
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionGS, exceptionFS);
   2541d:	8b 1d e0 01 12 00    	mov    ebx,DWORD PTR ds:0x1201e0
   25423:	8b 0d e4 01 12 00    	mov    ecx,DWORD PTR ds:0x1201e4
   25429:	8b 15 dc 01 12 00    	mov    edx,DWORD PTR ds:0x1201dc
   2542f:	a1 d8 01 12 00       	mov    eax,ds:0x1201d8
   25434:	83 ec 0c             	sub    esp,0xc
   25437:	53                   	push   ebx
   25438:	51                   	push   ecx
   25439:	52                   	push   edx
   2543a:	50                   	push   eax
   2543b:	68 b4 51 08 00       	push   0x851b4
   25440:	e8 ae 1d 00 00       	call   271f3 <printk>
   25445:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:193
    printk("GDT=%08X\n",kernelGDT.base);
   25448:	a1 4e 04 12 00       	mov    eax,ds:0x12044e
   2544d:	83 ec 08             	sub    esp,0x8
   25450:	50                   	push   eax
   25451:	68 d9 51 08 00       	push   0x851d9
   25456:	e8 98 1d 00 00       	call   271f3 <printk>
   2545b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:194
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
   2545e:	8b 0d f4 01 12 00    	mov    ecx,DWORD PTR ds:0x1201f4
   25464:	8b 15 f8 01 12 00    	mov    edx,DWORD PTR ds:0x1201f8
   2546a:	a1 fc 01 12 00       	mov    eax,ds:0x1201fc
   2546f:	51                   	push   ecx
   25470:	52                   	push   edx
   25471:	50                   	push   eax
   25472:	68 e4 51 08 00       	push   0x851e4
   25477:	e8 77 1d 00 00       	call   271f3 <printk>
   2547c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:195
          printk("Bytes at CS:EIP: ");
   2547f:	83 ec 0c             	sub    esp,0xc
   25482:	68 09 52 08 00       	push   0x85209
   25487:	e8 67 1d 00 00       	call   271f3 <printk>
   2548c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:196
          for (int cnt=0;cnt<19;cnt++)
   2548f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25496:	eb 23                	jmp    254bb <printDumpedRegs+0x13e>
/home/yogi/src/os/chrisOS/src/init/utility.c:197 (discriminator 3)
              printk("%02X ", lCSIPPtr[cnt]);
   25498:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2549b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2549e:	01 d0                	add    eax,edx
   254a0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   254a3:	0f b6 c0             	movzx  eax,al
   254a6:	83 ec 08             	sub    esp,0x8
   254a9:	50                   	push   eax
   254aa:	68 1b 52 08 00       	push   0x8521b
   254af:	e8 3f 1d 00 00       	call   271f3 <printk>
   254b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:196 (discriminator 3)
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionGS, exceptionFS);
    printk("GDT=%08X\n",kernelGDT.base);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
   254b7:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:196 (discriminator 1)
   254bb:	83 7d f0 12          	cmp    DWORD PTR [ebp-0x10],0x12
   254bf:	7e d7                	jle    25498 <printDumpedRegs+0x11b>
/home/yogi/src/os/chrisOS/src/init/utility.c:198
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
   254c1:	83 ec 0c             	sub    esp,0xc
   254c4:	68 21 52 08 00       	push   0x85221
   254c9:	e8 25 1d 00 00       	call   271f3 <printk>
   254ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:199
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
   254d1:	a1 e8 01 12 00       	mov    eax,ds:0x1201e8
   254d6:	83 ec 04             	sub    esp,0x4
   254d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   254dc:	50                   	push   eax
   254dd:	68 23 52 08 00       	push   0x85223
   254e2:	e8 0c 1d 00 00       	call   271f3 <printk>
   254e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:200
          for (int cnt=0;cnt<10;cnt++)
   254ea:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   254f1:	eb 2b                	jmp    2551e <printDumpedRegs+0x1a1>
/home/yogi/src/os/chrisOS/src/init/utility.c:202 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   254f3:	a1 a8 01 12 00       	mov    eax,ds:0x1201a8
   254f8:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   254fb:	c1 e2 02             	shl    edx,0x2
   254fe:	01 d0                	add    eax,edx
   25500:	8b 00                	mov    eax,DWORD PTR [eax]
   25502:	83 ec 04             	sub    esp,0x4
   25505:	50                   	push   eax
   25506:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25509:	68 3b 52 08 00       	push   0x8523b
   2550e:	e8 e0 1c 00 00       	call   271f3 <printk>
   25513:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:203 (discriminator 3)
              esp+=4;
   25516:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:200 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   2551a:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:200 (discriminator 1)
   2551e:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
   25522:	7e cf                	jle    254f3 <printDumpedRegs+0x176>
/home/yogi/src/os/chrisOS/src/init/utility.c:207
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
              esp+=4;
          }


}
   25524:	90                   	nop
   25525:	8d 65 f8             	lea    esp,[ebp-0x8]
   25528:	5b                   	pop    ebx
   25529:	5e                   	pop    esi
   2552a:	5d                   	pop    ebp
   2552b:	c3                   	ret    

0002552c <printDebugRegs>:
printDebugRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:210

void printDebugRegs()
{
   2552c:	55                   	push   ebp
   2552d:	89 e5                	mov    ebp,esp
   2552f:	56                   	push   esi
   25530:	53                   	push   ebx
   25531:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:211
    uint32_t esp = debugSavedESP;
   25534:	a1 40 02 12 00       	mov    eax,ds:0x120240
   25539:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:214
    uint8_t* lCSIPPtr;

    lCSIPPtr=(uint8_t*)(debugEIP);
   2553c:	a1 50 02 12 00       	mov    eax,ds:0x120250
   25541:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:215
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", debugAX, debugBX, debugCX, debugDX,debugFlags);
   25544:	8b 35 44 02 12 00    	mov    esi,DWORD PTR ds:0x120244
   2554a:	8b 1d 10 02 12 00    	mov    ebx,DWORD PTR ds:0x120210
   25550:	8b 0d 0c 02 12 00    	mov    ecx,DWORD PTR ds:0x12020c
   25556:	8b 15 08 02 12 00    	mov    edx,DWORD PTR ds:0x120208
   2555c:	a1 04 02 12 00       	mov    eax,ds:0x120204
   25561:	83 ec 08             	sub    esp,0x8
   25564:	56                   	push   esi
   25565:	53                   	push   ebx
   25566:	51                   	push   ecx
   25567:	52                   	push   edx
   25568:	50                   	push   eax
   25569:	68 34 51 08 00       	push   0x85134
   2556e:	e8 80 1c 00 00       	call   271f3 <printk>
   25573:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:216
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
   25576:	8b 1d 40 02 12 00    	mov    ebx,DWORD PTR ds:0x120240
   2557c:	8b 0d 18 02 12 00    	mov    ecx,DWORD PTR ds:0x120218
   25582:	8b 15 14 02 12 00    	mov    edx,DWORD PTR ds:0x120214
   25588:	a1 1c 02 12 00       	mov    eax,ds:0x12021c
   2558d:	83 ec 0c             	sub    esp,0xc
   25590:	53                   	push   ebx
   25591:	51                   	push   ecx
   25592:	52                   	push   edx
   25593:	50                   	push   eax
   25594:	68 64 51 08 00       	push   0x85164
   25599:	e8 55 1c 00 00       	call   271f3 <printk>
   2559e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:217
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
   255a1:	8b 0d 28 02 12 00    	mov    ecx,DWORD PTR ds:0x120228
   255a7:	8b 15 24 02 12 00    	mov    edx,DWORD PTR ds:0x120224
   255ad:	a1 20 02 12 00       	mov    eax,ds:0x120220
   255b2:	51                   	push   ecx
   255b3:	52                   	push   edx
   255b4:	50                   	push   eax
   255b5:	68 4d 52 08 00       	push   0x8524d
   255ba:	e8 34 1c 00 00       	call   271f3 <printk>
   255bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:218
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
   255c2:	8b 1d 34 02 12 00    	mov    ebx,DWORD PTR ds:0x120234
   255c8:	8b 0d 38 02 12 00    	mov    ecx,DWORD PTR ds:0x120238
   255ce:	8b 15 30 02 12 00    	mov    edx,DWORD PTR ds:0x120230
   255d4:	a1 2c 02 12 00       	mov    eax,ds:0x12022c
   255d9:	83 ec 0c             	sub    esp,0xc
   255dc:	53                   	push   ebx
   255dd:	51                   	push   ecx
   255de:	52                   	push   edx
   255df:	50                   	push   eax
   255e0:	68 b4 51 08 00       	push   0x851b4
   255e5:	e8 09 1c 00 00       	call   271f3 <printk>
   255ea:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:219
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
   255ed:	8b 0d 48 02 12 00    	mov    ecx,DWORD PTR ds:0x120248
   255f3:	8b 15 50 02 12 00    	mov    edx,DWORD PTR ds:0x120250
   255f9:	a1 4c 02 12 00       	mov    eax,ds:0x12024c
   255fe:	51                   	push   ecx
   255ff:	52                   	push   edx
   25600:	50                   	push   eax
   25601:	68 e4 51 08 00       	push   0x851e4
   25606:	e8 e8 1b 00 00       	call   271f3 <printk>
   2560b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:220
          printk("Bytes at CS:EIP: ");
   2560e:	83 ec 0c             	sub    esp,0xc
   25611:	68 09 52 08 00       	push   0x85209
   25616:	e8 d8 1b 00 00       	call   271f3 <printk>
   2561b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:221
          for (int cnt=0;cnt<19;cnt++)
   2561e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25625:	eb 23                	jmp    2564a <printDebugRegs+0x11e>
/home/yogi/src/os/chrisOS/src/init/utility.c:222 (discriminator 3)
              printk("%02X ", lCSIPPtr[cnt]);
   25627:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2562a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2562d:	01 d0                	add    eax,edx
   2562f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25632:	0f b6 c0             	movzx  eax,al
   25635:	83 ec 08             	sub    esp,0x8
   25638:	50                   	push   eax
   25639:	68 1b 52 08 00       	push   0x8521b
   2563e:	e8 b0 1b 00 00       	call   271f3 <printk>
   25643:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:221 (discriminator 3)
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
   25646:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:221 (discriminator 1)
   2564a:	83 7d f0 12          	cmp    DWORD PTR [ebp-0x10],0x12
   2564e:	7e d7                	jle    25627 <printDebugRegs+0xfb>
/home/yogi/src/os/chrisOS/src/init/utility.c:223
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
   25650:	83 ec 0c             	sub    esp,0xc
   25653:	68 21 52 08 00       	push   0x85221
   25658:	e8 96 1b 00 00       	call   271f3 <printk>
   2565d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:224
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
   25660:	a1 3c 02 12 00       	mov    eax,ds:0x12023c
   25665:	83 ec 04             	sub    esp,0x4
   25668:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2566b:	50                   	push   eax
   2566c:	68 23 52 08 00       	push   0x85223
   25671:	e8 7d 1b 00 00       	call   271f3 <printk>
   25676:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:225
          for (int cnt=0;cnt<10;cnt++)
   25679:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   25680:	eb 2b                	jmp    256ad <printDebugRegs+0x181>
/home/yogi/src/os/chrisOS/src/init/utility.c:227 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
   25682:	a1 ac 01 12 00       	mov    eax,ds:0x1201ac
   25687:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2568a:	c1 e2 02             	shl    edx,0x2
   2568d:	01 d0                	add    eax,edx
   2568f:	8b 00                	mov    eax,DWORD PTR [eax]
   25691:	83 ec 04             	sub    esp,0x4
   25694:	50                   	push   eax
   25695:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   25698:	68 3b 52 08 00       	push   0x8523b
   2569d:	e8 51 1b 00 00       	call   271f3 <printk>
   256a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:228 (discriminator 3)
              esp+=4;
   256a5:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:225 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   256a9:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:225 (discriminator 1)
   256ad:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
   256b1:	7e cf                	jle    25682 <printDebugRegs+0x156>
/home/yogi/src/os/chrisOS/src/init/utility.c:232
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
              esp+=4;
          }


}
   256b3:	90                   	nop
   256b4:	8d 65 f8             	lea    esp,[ebp-0x8]
   256b7:	5b                   	pop    ebx
   256b8:	5e                   	pop    esi
   256b9:	5d                   	pop    ebp
   256ba:	c3                   	ret    

000256bb <reboot>:
reboot():
/home/yogi/src/os/chrisOS/src/init/utility.c:240
/* keyboard interface IO port: data and control
   READ:   status port
   WRITE:  control register */
 
void reboot(bool waitFirst)
{
   256bb:	55                   	push   ebp
   256bc:	89 e5                	mov    ebp,esp
   256be:	83 ec 28             	sub    esp,0x28
   256c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   256c4:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:243
    uint8_t temp;
 
    if (waitFirst)
   256c7:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   256cb:	74 21                	je     256ee <reboot+0x33>
/home/yogi/src/os/chrisOS/src/init/utility.c:245
    {
        puts("Rebooting ... ");
   256cd:	83 ec 0c             	sub    esp,0xc
   256d0:	68 69 52 08 00       	push   0x85269
   256d5:	e8 98 29 ff ff       	call   18072 <puts>
   256da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:246
        __asm__("sti\n");
   256dd:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/utility.c:247
        wait(3000);
   256de:	83 ec 0c             	sub    esp,0xc
   256e1:	68 b8 0b 00 00       	push   0xbb8
   256e6:	e8 47 2d 00 00       	call   28432 <wait>
   256eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:249
    }
    __asm__ volatile ("cli"); /* disable all interrupts */
   256ee:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/utility.c:254
 
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
   256ef:	83 ec 0c             	sub    esp,0xc
   256f2:	6a 64                	push   0x64
   256f4:	e8 da f6 ff ff       	call   24dd3 <inb>
   256f9:	83 c4 10             	add    esp,0x10
   256fc:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:255
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
   256ff:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25703:	83 e0 01             	and    eax,0x1
   25706:	85 c0                	test   eax,eax
   25708:	74 0d                	je     25717 <reboot+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:256
            inb(KBRD_IO); /* empty keyboard data */
   2570a:	83 ec 0c             	sub    esp,0xc
   2570d:	6a 60                	push   0x60
   2570f:	e8 bf f6 ff ff       	call   24dd3 <inb>
   25714:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:257
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
   25717:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2571b:	83 e0 02             	and    eax,0x2
   2571e:	85 c0                	test   eax,eax
   25720:	75 cd                	jne    256ef <reboot+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:259
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
   25722:	83 ec 08             	sub    esp,0x8
   25725:	68 fe 00 00 00       	push   0xfe
   2572a:	6a 64                	push   0x64
   2572c:	e8 83 f6 ff ff       	call   24db4 <outb>
   25731:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:261 (discriminator 1)
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
   25734:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/utility.c:262 (discriminator 1)
    goto loop; /* if a NMI is received, halt again */
   25735:	eb fd                	jmp    25734 <reboot+0x79>

00025737 <dumpKernelAddresses>:
dumpKernelAddresses():
/home/yogi/src/os/chrisOS/src/init/utility.c:266
}

void dumpKernelAddresses()
{
   25737:	55                   	push   ebp
   25738:	89 e5                	mov    ebp,esp
   2573a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:267
printk("Kernel Variable List:\n");
   2573d:	83 ec 0c             	sub    esp,0xc
   25740:	68 78 52 08 00       	push   0x85278
   25745:	e8 a9 1a 00 00       	call   271f3 <printk>
   2574a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:268
printk("\tKERNEL_OBJECT_BASE_ADDRESS=0x%08x\n",KERNEL_OBJECT_BASE_ADDRESS);
   2574d:	83 ec 08             	sub    esp,0x8
   25750:	68 00 00 15 00       	push   0x150000
   25755:	68 90 52 08 00       	push   0x85290
   2575a:	e8 94 1a 00 00       	call   271f3 <printk>
   2575f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:269
printk("\tE820_TABLE_ADDRESS=0x%08x (0x%08X)\n",E820_TABLE_ADDRESS);
   25762:	83 ec 08             	sub    esp,0x8
   25765:	68 00 00 15 00       	push   0x150000
   2576a:	68 b4 52 08 00       	push   0x852b4
   2576f:	e8 7f 1a 00 00       	call   271f3 <printk>
   25774:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:270
printk("\tMP_CONFIG_TABLE_ADDRESS=0x%08x\n",MP_CONFIG_TABLE_ADDRESS);
   25777:	83 ec 08             	sub    esp,0x8
   2577a:	68 b0 04 15 00       	push   0x1504b0
   2577f:	68 dc 52 08 00       	push   0x852dc
   25784:	e8 6a 1a 00 00       	call   271f3 <printk>
   25789:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:271
printk("\tKEYBOARD_BUFFER_ADDRESS=0x%08x\n",KEYBOARD_BUFFER_ADDRESS);
   2578c:	83 ec 08             	sub    esp,0x8
   2578f:	68 b0 24 15 00       	push   0x1524b0
   25794:	68 00 53 08 00       	push   0x85300
   25799:	e8 55 1a 00 00       	call   271f3 <printk>
   2579e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:272
printk("\tIDT_TABLE_ADDRESS=0x%08x\n",IDT_TABLE_ADDRESS);
   257a1:	83 ec 08             	sub    esp,0x8
   257a4:	68 00 30 15 00       	push   0x153000
   257a9:	68 21 53 08 00       	push   0x85321
   257ae:	e8 40 1a 00 00       	call   271f3 <printk>
   257b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:273
printk("\tINIT_GDT_TABLE_ADDRESS=0x%08x\n",INIT_GDT_TABLE_ADDRESS);
   257b6:	83 ec 08             	sub    esp,0x8
   257b9:	68 00 40 15 00       	push   0x154000
   257be:	68 3c 53 08 00       	push   0x8533c
   257c3:	e8 2b 1a 00 00       	call   271f3 <printk>
   257c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:274
printk("\tTASK_TABLE_ADDRESS=0x%08x\n",TASK_TABLE_ADDRESS);
   257cb:	83 ec 08             	sub    esp,0x8
   257ce:	68 00 50 15 00       	push   0x155000
   257d3:	68 5c 53 08 00       	push   0x8535c
   257d8:	e8 16 1a 00 00       	call   271f3 <printk>
   257dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:275
printk("\tTSS_TABLE_ADDRESS=0x%08x\n",TSS_TABLE_ADDRESS);
   257e0:	83 ec 08             	sub    esp,0x8
   257e3:	68 00 60 2e 00       	push   0x2e6000
   257e8:	68 78 53 08 00       	push   0x85378
   257ed:	e8 01 1a 00 00       	call   271f3 <printk>
   257f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:276
printk("\tATA_MBR_ARRAY_ADDRESS=0x%08x\n",ATA_MBR_ARRAY_ADDRESS);
   257f5:	83 ec 08             	sub    esp,0x8
   257f8:	68 00 60 48 00       	push   0x486000
   257fd:	68 94 53 08 00       	push   0x85394
   25802:	e8 ec 19 00 00       	call   271f3 <printk>
   25807:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:277
printk("\tPCI_DEVICE_LIST_ADDRESS=0x%08x\n",PCI_DEVICE_LIST_ADDRESS);
   2580a:	83 ec 08             	sub    esp,0x8
   2580d:	68 00 70 48 00       	push   0x487000
   25812:	68 b4 53 08 00       	push   0x853b4
   25817:	e8 d7 19 00 00       	call   271f3 <printk>
   2581c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:278
printk("\tPCI_BRIDGE_LIST_ADDRESS=0x%08x\n",PCI_BRIDGE_LIST_ADDRESS);
   2581f:	83 ec 08             	sub    esp,0x8
   25822:	68 00 70 49 00       	push   0x497000
   25827:	68 d8 53 08 00       	push   0x853d8
   2582c:	e8 c2 19 00 00       	call   271f3 <printk>
   25831:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:279
printk("\tPCI_FUNCTION_LIST_ADDRESS=0x%08x\n",PCI_FUNCTION_LIST_ADDRESS);
   25834:	83 ec 08             	sub    esp,0x8
   25837:	68 00 70 4a 00       	push   0x4a7000
   2583c:	68 fc 53 08 00       	push   0x853fc
   25841:	e8 ad 19 00 00       	call   271f3 <printk>
   25846:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:280
printk("\tGDT_PMODE_16BIT_TABLE_ADDRESS=0x%08x\n",GDT_PMODE_16BIT_TABLE_ADDRESS);
   25849:	83 ec 08             	sub    esp,0x8
   2584c:	68 00 80 4a 00       	push   0x4a8000
   25851:	68 20 54 08 00       	push   0x85420
   25856:	e8 98 19 00 00       	call   271f3 <printk>
   2585b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:281
printk("\tKERNEL_PAGE_DIR_ADDRESS=0x%08x\n",KERNEL_PAGE_DIR_ADDRESS);
   2585e:	83 ec 08             	sub    esp,0x8
   25861:	68 00 90 4a 00       	push   0x4a9000
   25866:	68 48 54 08 00       	push   0x85448
   2586b:	e8 83 19 00 00       	call   271f3 <printk>
   25870:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:282
printk("\tKERNEL_PAGE_TABLE_BASE_ADDRESS=0x%08x\n",KERNEL_PAGE_TABLE_BASE_ADDRESS);
   25873:	83 ec 08             	sub    esp,0x8
   25876:	68 00 b0 4b 00       	push   0x4bb000
   2587b:	68 6c 54 08 00       	push   0x8546c
   25880:	e8 6e 19 00 00       	call   271f3 <printk>
   25885:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:283
printk("\tSAVED_STACK_FOR_EXCEPTIONS_ADDRESS=0x%08x\n",SAVED_STACK_FOR_EXCEPTIONS_ADDRESS);
   25888:	83 ec 08             	sub    esp,0x8
   2588b:	68 00 c0 8b 00       	push   0x8bc000
   25890:	68 94 54 08 00       	push   0x85494
   25895:	e8 59 19 00 00       	call   271f3 <printk>
   2589a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:284
printk("\tSAVED_STACK_FOR_DEBUGGING_ADDRESS=0x%08x\n",SAVED_STACK_FOR_DEBUGGING_ADDRESS);
   2589d:	83 ec 08             	sub    esp,0x8
   258a0:	68 00 e0 8b 00       	push   0x8be000
   258a5:	68 c0 54 08 00       	push   0x854c0
   258aa:	e8 44 19 00 00       	call   271f3 <printk>
   258af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:285
printk("\tCPU_APIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_APIC_REGISTER_REMAP_BASE_ADDRESS);
   258b2:	83 ec 08             	sub    esp,0x8
   258b5:	68 00 00 8c 00       	push   0x8c0000
   258ba:	68 ec 54 08 00       	push   0x854ec
   258bf:	e8 2f 19 00 00       	call   271f3 <printk>
   258c4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:286
printk("\tCPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS);
   258c7:	83 ec 08             	sub    esp,0x8
   258ca:	68 00 10 8c 00       	push   0x8c1000
   258cf:	68 1c 55 08 00       	push   0x8551c
   258d4:	e8 1a 19 00 00       	call   271f3 <printk>
   258d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:287
printk("\tKERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS=0x%08x\n",KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS);
   258dc:	83 ec 08             	sub    esp,0x8
   258df:	68 04 10 8c 00       	push   0x8c1004
   258e4:	68 4c 55 08 00       	push   0x8554c
   258e9:	e8 05 19 00 00       	call   271f3 <printk>
   258ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:288
printk("\tAHCI_ABAR_REMAPPED_ADDRESS=0x%08x\n",AHCI_ABAR_REMAPPED_ADDRESS);
   258f1:	83 ec 08             	sub    esp,0x8
   258f4:	68 00 20 8c 00       	push   0x8c2000
   258f9:	68 80 55 08 00       	push   0x85580
   258fe:	e8 f0 18 00 00       	call   271f3 <printk>
   25903:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:289
printk("\tAHCI_PORT_BASE_REMAP_ADDRESS=0x%08x\n",AHCI_PORT_BASE_REMAP_ADDRESS);
   25906:	83 ec 08             	sub    esp,0x8
   25909:	68 00 20 90 00       	push   0x902000
   2590e:	68 a4 55 08 00       	push   0x855a4
   25913:	e8 db 18 00 00       	call   271f3 <printk>
   25918:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:290
printk("\tAHCI_DISK_BUFFER_ADDRESS=0x%08x\n",AHCI_DISK_BUFFER_ADDRESS);
   2591b:	83 ec 08             	sub    esp,0x8
   2591e:	68 00 20 a4 00       	push   0xa42000
   25923:	68 cc 55 08 00       	push   0x855cc
   25928:	e8 c6 18 00 00       	call   271f3 <printk>
   2592d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:291
printk("\tATA_DEVICE_INFO_ADDRESS=0x%08x\n",ATA_DEVICE_INFO_ADDRESS);
   25930:	83 ec 08             	sub    esp,0x8
   25933:	68 00 20 b8 00       	push   0xb82000
   25938:	68 f0 55 08 00       	push   0x855f0
   2593d:	e8 b1 18 00 00       	call   271f3 <printk>
   25942:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:292
printk("\tAHCI_CAPS_ADDRESS=0x%08x\n",AHCI_CAPS_ADDRESS);
   25945:	83 ec 08             	sub    esp,0x8
   25948:	68 20 6e b8 00       	push   0xb86e20
   2594d:	68 11 56 08 00       	push   0x85611
   25952:	e8 9c 18 00 00       	call   271f3 <printk>
   25957:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:293
printk("\tTSS_AVAILABLE_ADDRESS=0x%08x\n",TASK_AVAILABLE_ADDRESS);
   2595a:	83 ec 08             	sub    esp,0x8
   2595d:	68 40 bc b8 00       	push   0xb8bc40
   25962:	68 2c 56 08 00       	push   0x8562c
   25967:	e8 87 18 00 00       	call   271f3 <printk>
   2596c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:294
printk("\tGDT_AVAILABLE_ADDRESS=0x%08x\n",GDT_AVAILABLE_ADDRESS);
   2596f:	83 ec 08             	sub    esp,0x8
   25972:	68 40 c4 b8 00       	push   0xb8c440
   25977:	68 4c 56 08 00       	push   0x8564c
   2597c:	e8 72 18 00 00       	call   271f3 <printk>
   25981:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:295
printk("\tEXEC_FILE_LOAD_INFO=0x%08x\n",EXEC_FILE_LOAD_INFO);
   25984:	83 ec 08             	sub    esp,0x8
   25987:	68 40 cc b8 00       	push   0xb8cc40
   2598c:	68 6b 56 08 00       	push   0x8566b
   25991:	e8 5d 18 00 00       	call   271f3 <printk>
   25996:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:296
printk("\tAHCI_ABAR_ADDRESS=0x%08x\n",AHCI_ABAR_ADDRESS);
   25999:	83 ec 08             	sub    esp,0x8
   2599c:	68 e0 52 ba 00       	push   0xba52e0
   259a1:	68 88 56 08 00       	push   0x85688
   259a6:	e8 48 18 00 00       	call   271f3 <printk>
   259ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:297
printk("\tEND_OF_KERNEL_OBJECTS_ADDRESS=0x%08x\n",END_OF_KERNEL_OBJECTS_ADDRESS);
   259ae:	83 ec 08             	sub    esp,0x8
   259b1:	68 e0 52 ca 00       	push   0xca52e0
   259b6:	68 a4 56 08 00       	push   0x856a4
   259bb:	e8 33 18 00 00       	call   271f3 <printk>
   259c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:298
}
   259c3:	90                   	nop
   259c4:	c9                   	leave  
   259c5:	c3                   	ret    

000259c6 <pauseDisplay>:
pauseDisplay():
/home/yogi/src/os/chrisOS/src/init/utility.c:301

bool pauseDisplay(bool offerToQuit)
{
   259c6:	55                   	push   ebp
   259c7:	89 e5                	mov    ebp,esp
   259c9:	83 ec 28             	sub    esp,0x28
   259cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   259cf:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:302
    if (offerToQuit)
   259d2:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   259d6:	74 12                	je     259ea <pauseDisplay+0x24>
/home/yogi/src/os/chrisOS/src/init/utility.c:303
        printk("Press q to quit, any other key to continue ...");
   259d8:	83 ec 0c             	sub    esp,0xc
   259db:	68 cc 56 08 00       	push   0x856cc
   259e0:	e8 0e 18 00 00       	call   271f3 <printk>
   259e5:	83 c4 10             	add    esp,0x10
   259e8:	eb 10                	jmp    259fa <pauseDisplay+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:305
    else
        printk("Press a key to continue ... ");
   259ea:	83 ec 0c             	sub    esp,0xc
   259ed:	68 fb 56 08 00       	push   0x856fb
   259f2:	e8 fc 17 00 00       	call   271f3 <printk>
   259f7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:306
    char lPressedKey=waitForKeyboardKey();
   259fa:	e8 53 b8 fe ff       	call   11252 <waitForKeyboardKey>
   259ff:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:307
    cursorMoveToX(0);
   25a02:	83 ec 0c             	sub    esp,0xc
   25a05:	6a 00                	push   0x0
   25a07:	e8 63 25 ff ff       	call   17f6f <cursorMoveToX>
   25a0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:308
    printk("                                           ");
   25a0f:	83 ec 0c             	sub    esp,0xc
   25a12:	68 18 57 08 00       	push   0x85718
   25a17:	e8 d7 17 00 00       	call   271f3 <printk>
   25a1c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:309
    cursorMoveToX(0);
   25a1f:	83 ec 0c             	sub    esp,0xc
   25a22:	6a 00                	push   0x0
   25a24:	e8 46 25 ff ff       	call   17f6f <cursorMoveToX>
   25a29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:310
    if (lPressedKey=='q' && offerToQuit)
   25a2c:	80 7d f7 71          	cmp    BYTE PTR [ebp-0x9],0x71
   25a30:	75 0d                	jne    25a3f <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:310 (discriminator 1)
   25a32:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25a36:	74 07                	je     25a3f <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:311
        return true;
   25a38:	b8 01 00 00 00       	mov    eax,0x1
   25a3d:	eb 05                	jmp    25a44 <pauseDisplay+0x7e>
/home/yogi/src/os/chrisOS/src/init/utility.c:312
    return false;
   25a3f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:313
}
   25a44:	c9                   	leave  
   25a45:	c3                   	ret    

00025a46 <mallocTemp>:
mallocTemp():
/home/yogi/src/os/chrisOS/src/init/utility.c:317

int memPtr=0xe00000;
uintptr_t* mallocTemp(int size)
{
   25a46:	55                   	push   ebp
   25a47:	89 e5                	mov    ebp,esp
   25a49:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:318
    uintptr_t lRetVal = memPtr;
   25a4c:	a1 a0 da 02 00       	mov    eax,ds:0x2daa0
   25a51:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:319
    memPtr+=size;
   25a54:	8b 15 a0 da 02 00    	mov    edx,DWORD PTR ds:0x2daa0
   25a5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25a5d:	01 d0                	add    eax,edx
   25a5f:	a3 a0 da 02 00       	mov    ds:0x2daa0,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:320
    return (uintptr_t*)lRetVal;
   25a64:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:321
}
   25a67:	c9                   	leave  
   25a68:	c3                   	ret    

00025a69 <displayGDT>:
displayGDT():
/home/yogi/src/os/chrisOS/src/init/utility.c:324

void displayGDT()
{
   25a69:	55                   	push   ebp
   25a6a:	89 e5                	mov    ebp,esp
   25a6c:	56                   	push   esi
   25a6d:	53                   	push   ebx
   25a6e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:325
    struct GDT* theGDT=bootGdt;
   25a71:	a1 48 04 12 00       	mov    eax,ds:0x120448
   25a76:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:328
    
    
    printk("Listing GDT Table\n");
   25a79:	83 ec 0c             	sub    esp,0xc
   25a7c:	68 44 57 08 00       	push   0x85744
   25a81:	e8 6d 17 00 00       	call   271f3 <printk>
   25a86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:329
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
   25a89:	83 ec 0c             	sub    esp,0xc
   25a8c:	68 58 57 08 00       	push   0x85758
   25a91:	e8 5d 17 00 00       	call   271f3 <printk>
   25a96:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:330
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(struct GDT));cnt++)
   25a99:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25aa0:	e9 94 00 00 00       	jmp    25b39 <displayGDT+0xd0>
/home/yogi/src/os/chrisOS/src/init/utility.c:332
    {
        if (theGDT->access!=0 || cnt==0)
   25aa5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25aa8:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   25aac:	84 c0                	test   al,al
   25aae:	75 06                	jne    25ab6 <displayGDT+0x4d>
/home/yogi/src/os/chrisOS/src/init/utility.c:332 (discriminator 1)
   25ab0:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   25ab4:	75 7b                	jne    25b31 <displayGDT+0xc8>
/home/yogi/src/os/chrisOS/src/init/utility.c:343
                    "0x%01X\n",  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
   25ab6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25ab9:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   25abd:	0f be c0             	movsx  eax,al
   25ac0:	25 f0 00 00 00       	and    eax,0xf0
   25ac5:	c1 f8 04             	sar    eax,0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(struct GDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"    /*GDT#*/
   25ac8:	0f b6 d0             	movzx  edx,al
/home/yogi/src/os/chrisOS/src/init/utility.c:342
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n",  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
   25acb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25ace:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(struct GDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"    /*GDT#*/
   25ad2:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/init/utility.c:341
                    "0x%08X\t" /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n",  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
   25ad5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25ad8:	0f b7 09             	movzx  ecx,WORD PTR [ecx]
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(struct GDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"    /*GDT#*/
   25adb:	0f b7 d9             	movzx  ebx,cx
/home/yogi/src/os/chrisOS/src/init/utility.c:341
                    "0x%08X\t" /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n",  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
   25ade:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25ae1:	0f b6 49 06          	movzx  ecx,BYTE PTR [ecx+0x6]
   25ae5:	0f be c9             	movsx  ecx,cl
   25ae8:	83 e1 0f             	and    ecx,0xf
   25aeb:	c1 e1 10             	shl    ecx,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(struct GDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"    /*GDT#*/
   25aee:	09 cb                	or     ebx,ecx
/home/yogi/src/os/chrisOS/src/init/utility.c:340
                    "0x%08X\t" /*base*/
                    "0x%08X\t" /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n",  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
   25af0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25af3:	0f b6 49 07          	movzx  ecx,BYTE PTR [ecx+0x7]
   25af7:	0f be c9             	movsx  ecx,cl
   25afa:	89 ce                	mov    esi,ecx
   25afc:	c1 e6 18             	shl    esi,0x18
   25aff:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25b02:	0f b6 49 04          	movzx  ecx,BYTE PTR [ecx+0x4]
   25b06:	0f be c9             	movsx  ecx,cl
   25b09:	c1 e1 10             	shl    ecx,0x10
   25b0c:	09 ce                	or     esi,ecx
   25b0e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25b11:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
/home/yogi/src/os/chrisOS/src/init/utility.c:334
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(struct GDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"    /*GDT#*/
   25b15:	0f b7 c9             	movzx  ecx,cx
   25b18:	09 f1                	or     ecx,esi
   25b1a:	83 ec 08             	sub    esp,0x8
   25b1d:	52                   	push   edx
   25b1e:	50                   	push   eax
   25b1f:	53                   	push   ebx
   25b20:	51                   	push   ecx
   25b21:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   25b24:	68 7c 57 08 00       	push   0x8577c
   25b29:	e8 c5 16 00 00       	call   271f3 <printk>
   25b2e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:345 (discriminator 2)
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
   25b31:	83 45 f4 08          	add    DWORD PTR [ebp-0xc],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:330 (discriminator 2)
    struct GDT* theGDT=bootGdt;
    
    
    printk("Listing GDT Table\n");
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(struct GDT));cnt++)
   25b35:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:330 (discriminator 1)
   25b39:	0f b7 05 4c 04 12 00 	movzx  eax,WORD PTR ds:0x12044c
   25b40:	66 c1 e8 03          	shr    ax,0x3
   25b44:	0f b7 c0             	movzx  eax,ax
   25b47:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   25b4a:	0f 8f 55 ff ff ff    	jg     25aa5 <displayGDT+0x3c>
/home/yogi/src/os/chrisOS/src/init/utility.c:347
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
    }
   25b50:	90                   	nop
   25b51:	8d 65 f8             	lea    esp,[ebp-0x8]
   25b54:	5b                   	pop    ebx
   25b55:	5e                   	pop    esi
   25b56:	5d                   	pop    ebp
   25b57:	c3                   	ret    

00025b58 <memcpy>:
memcpy():
/home/yogi/src/os/chrisOS/src/memcpy.c:12
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
void * memcpy(void *dest, const void *src, size_t n)
{
   25b58:	55                   	push   ebp
   25b59:	89 e5                	mov    ebp,esp
   25b5b:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
   25b5e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b61:	83 e0 03             	and    eax,0x3
   25b64:	85 c0                	test   eax,eax
   25b66:	0f 94 c0             	sete   al
   25b69:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/chrisOS/src/memcpy.c:16
    dw=n%2==0;
   25b6c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b6f:	83 e0 01             	and    eax,0x1
   25b72:	85 c0                	test   eax,eax
   25b74:	0f 94 c0             	sete   al
   25b77:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/memcpy.c:17
    if (dd)
   25b7a:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   25b7e:	74 7d                	je     25bfd <memcpy+0xa5>
/home/yogi/src/os/chrisOS/src/memcpy.c:19
    {
        n /=4;
   25b80:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25b83:	c1 e8 02             	shr    eax,0x2
   25b86:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:20
        const uint32_t *f = src;
   25b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25b8c:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:21
        uint32_t *t = dest;
   25b8f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25b92:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:23

        if (f < t) {
   25b95:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25b98:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   25b9b:	73 4b                	jae    25be8 <memcpy+0x90>
/home/yogi/src/os/chrisOS/src/memcpy.c:24
                f += n;
   25b9d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25ba0:	c1 e0 02             	shl    eax,0x2
   25ba3:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:25
                t += n;
   25ba6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25ba9:	c1 e0 02             	shl    eax,0x2
   25bac:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
   25baf:	eb 12                	jmp    25bc3 <memcpy+0x6b>
/home/yogi/src/os/chrisOS/src/memcpy.c:27
                        *--t = *--f;
   25bb1:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
   25bb5:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
   25bb9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25bbc:	8b 10                	mov    edx,DWORD PTR [eax]
   25bbe:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25bc1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   25bc3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25bc6:	8d 50 ff             	lea    edx,[eax-0x1]
   25bc9:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25bcc:	85 c0                	test   eax,eax
   25bce:	75 e1                	jne    25bb1 <memcpy+0x59>
   25bd0:	eb 23                	jmp    25bf5 <memcpy+0x9d>
/home/yogi/src/os/chrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   25bd2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25bd5:	8d 50 04             	lea    edx,[eax+0x4]
   25bd8:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   25bdb:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   25bde:	8d 4a 04             	lea    ecx,[edx+0x4]
   25be1:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
   25be4:	8b 12                	mov    edx,DWORD PTR [edx]
   25be6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   25be8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25beb:	8d 50 ff             	lea    edx,[eax-0x1]
   25bee:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25bf1:	85 c0                	test   eax,eax
   25bf3:	75 dd                	jne    25bd2 <memcpy+0x7a>
/home/yogi/src/os/chrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
   25bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25bf8:	e9 ea 00 00 00       	jmp    25ce7 <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:33
    }
    else if (dw)
   25bfd:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
   25c01:	74 79                	je     25c7c <memcpy+0x124>
/home/yogi/src/os/chrisOS/src/memcpy.c:35
    {
        n /=2;
   25c03:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c06:	d1 e8                	shr    eax,1
   25c08:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:36
        const uint32_t *f = src;
   25c0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c0e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:37
        uint32_t *t = dest;
   25c11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c14:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:39

        if (f < t) {
   25c17:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25c1a:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   25c1d:	73 4b                	jae    25c6a <memcpy+0x112>
/home/yogi/src/os/chrisOS/src/memcpy.c:40
                f += n;
   25c1f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c22:	c1 e0 02             	shl    eax,0x2
   25c25:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:41
                t += n;
   25c28:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c2b:	c1 e0 02             	shl    eax,0x2
   25c2e:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
   25c31:	eb 12                	jmp    25c45 <memcpy+0xed>
/home/yogi/src/os/chrisOS/src/memcpy.c:43
                        *--t = *--f;
   25c33:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
   25c37:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
   25c3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25c3e:	8b 10                	mov    edx,DWORD PTR [eax]
   25c40:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25c43:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   25c45:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c48:	8d 50 ff             	lea    edx,[eax-0x1]
   25c4b:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25c4e:	85 c0                	test   eax,eax
   25c50:	75 e1                	jne    25c33 <memcpy+0xdb>
   25c52:	eb 23                	jmp    25c77 <memcpy+0x11f>
/home/yogi/src/os/chrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   25c54:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25c57:	8d 50 04             	lea    edx,[eax+0x4]
   25c5a:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   25c5d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   25c60:	8d 4a 04             	lea    ecx,[edx+0x4]
   25c63:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
   25c66:	8b 12                	mov    edx,DWORD PTR [edx]
   25c68:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   25c6a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c6d:	8d 50 ff             	lea    edx,[eax-0x1]
   25c70:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25c73:	85 c0                	test   eax,eax
   25c75:	75 dd                	jne    25c54 <memcpy+0xfc>
/home/yogi/src/os/chrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
   25c77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c7a:	eb 6b                	jmp    25ce7 <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
   25c7c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25c7f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:52
        char *t = dest;
   25c82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25c85:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:54

        if (f < t) {
   25c88:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   25c8b:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   25c8e:	73 47                	jae    25cd7 <memcpy+0x17f>
/home/yogi/src/os/chrisOS/src/memcpy.c:55
                f += n;
   25c90:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c93:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:56
                t += n;
   25c96:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25c99:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:57
                while (n-- > 0)
   25c9c:	eb 13                	jmp    25cb1 <memcpy+0x159>
/home/yogi/src/os/chrisOS/src/memcpy.c:58
                        *--t = *--f;
   25c9e:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   25ca2:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
   25ca6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   25ca9:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   25cac:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25caf:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
   25cb1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25cb4:	8d 50 ff             	lea    edx,[eax-0x1]
   25cb7:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25cba:	85 c0                	test   eax,eax
   25cbc:	75 e0                	jne    25c9e <memcpy+0x146>
   25cbe:	eb 24                	jmp    25ce4 <memcpy+0x18c>
/home/yogi/src/os/chrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
   25cc0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25cc3:	8d 50 01             	lea    edx,[eax+0x1]
   25cc6:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   25cc9:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25ccc:	8d 4a 01             	lea    ecx,[edx+0x1]
   25ccf:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
   25cd2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   25cd5:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
   25cd7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25cda:	8d 50 ff             	lea    edx,[eax-0x1]
   25cdd:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25ce0:	85 c0                	test   eax,eax
   25ce2:	75 dc                	jne    25cc0 <memcpy+0x168>
/home/yogi/src/os/chrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
   25ce4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/memcpy.c:64
    }
   25ce7:	c9                   	leave  
   25ce8:	c3                   	ret    
   25ce9:	66 90                	xchg   ax,ax
   25ceb:	90                   	nop

00025cec <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   25cec:	55                   	push   ebp
   25ced:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   25cef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25cf2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   25cf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25cfc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25cff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d02:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   25d04:	90                   	nop
   25d05:	5d                   	pop    ebp
   25d06:	c3                   	ret    

00025d07 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   25d07:	55                   	push   ebp
   25d08:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   25d0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d0d:	8b 00                	mov    eax,DWORD PTR [eax]
   25d0f:	85 c0                	test   eax,eax
   25d11:	75 0d                	jne    25d20 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   25d13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d16:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25d19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d1c:	89 10                	mov    DWORD PTR [eax],edx
   25d1e:	eb 0e                	jmp    25d2e <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   25d20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d23:	8b 00                	mov    eax,DWORD PTR [eax]
   25d25:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25d28:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   25d2b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   25d2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d31:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25d34:	85 c0                	test   eax,eax
   25d36:	75 0d                	jne    25d45 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   25d38:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d3b:	8b 10                	mov    edx,DWORD PTR [eax]
   25d3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d40:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   25d43:	eb 0d                	jmp    25d52 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   25d45:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d48:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25d4b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25d4e:	8b 12                	mov    edx,DWORD PTR [edx]
   25d50:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   25d52:	90                   	nop
   25d53:	5d                   	pop    ebp
   25d54:	c3                   	ret    

00025d55 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   25d55:	55                   	push   ebp
   25d56:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   25d58:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25d5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25d5e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   25d60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d63:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   25d66:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25d69:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   25d6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d6f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25d72:	85 c0                	test   eax,eax
   25d74:	75 0b                	jne    25d81 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   25d76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d79:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25d7c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   25d7f:	eb 0b                	jmp    25d8c <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   25d81:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d84:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25d87:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25d8a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   25d8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d8f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25d92:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   25d95:	90                   	nop
   25d96:	5d                   	pop    ebp
   25d97:	c3                   	ret    

00025d98 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   25d98:	55                   	push   ebp
   25d99:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   25d9b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25d9e:	8b 10                	mov    edx,DWORD PTR [eax]
   25da0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25da3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   25da5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25da8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25dab:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   25dae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25db1:	8b 00                	mov    eax,DWORD PTR [eax]
   25db3:	85 c0                	test   eax,eax
   25db5:	75 0a                	jne    25dc1 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   25db7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25dba:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25dbd:	89 10                	mov    DWORD PTR [eax],edx
   25dbf:	eb 0b                	jmp    25dcc <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   25dc1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25dc4:	8b 00                	mov    eax,DWORD PTR [eax]
   25dc6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25dc9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   25dcc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25dcf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   25dd2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   25dd4:	90                   	nop
   25dd5:	5d                   	pop    ebp
   25dd6:	c3                   	ret    

00025dd7 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   25dd7:	55                   	push   ebp
   25dd8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   25dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ddd:	8b 00                	mov    eax,DWORD PTR [eax]
   25ddf:	85 c0                	test   eax,eax
   25de1:	75 26                	jne    25e09 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   25de3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25de6:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25de9:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   25deb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25dee:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25df1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   25df4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25df7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   25dfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25e00:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   25e07:	eb 14                	jmp    25e1d <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   25e09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e0c:	8b 00                	mov    eax,DWORD PTR [eax]
   25e0e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25e11:	50                   	push   eax
   25e12:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25e15:	e8 7e ff ff ff       	call   25d98 <fat_list_insert_before>
   25e1a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   25e1d:	90                   	nop
   25e1e:	c9                   	leave  
   25e1f:	c3                   	ret    

00025e20 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   25e20:	55                   	push   ebp
   25e21:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   25e23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e26:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25e29:	85 c0                	test   eax,eax
   25e2b:	75 10                	jne    25e3d <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   25e2d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25e30:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25e33:	e8 9f ff ff ff       	call   25dd7 <fat_list_insert_first>
   25e38:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   25e3b:	eb 15                	jmp    25e52 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   25e3d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e40:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25e43:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   25e46:	50                   	push   eax
   25e47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25e4a:	e8 06 ff ff ff       	call   25d55 <fat_list_insert_after>
   25e4f:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   25e52:	90                   	nop
   25e53:	c9                   	leave  
   25e54:	c3                   	ret    

00025e55 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   25e55:	55                   	push   ebp
   25e56:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   25e58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e5b:	8b 00                	mov    eax,DWORD PTR [eax]
   25e5d:	85 c0                	test   eax,eax
   25e5f:	0f 94 c0             	sete   al
   25e62:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   25e65:	5d                   	pop    ebp
   25e66:	c3                   	ret    

00025e67 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   25e67:	55                   	push   ebp
   25e68:	89 e5                	mov    ebp,esp
   25e6a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   25e6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e70:	8b 00                	mov    eax,DWORD PTR [eax]
   25e72:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   25e75:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   25e79:	74 0e                	je     25e89 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   25e7b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   25e7e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25e81:	e8 81 fe ff ff       	call   25d07 <fat_list_remove>
   25e86:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   25e89:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   25e8c:	c9                   	leave  
   25e8d:	c3                   	ret    

00025e8e <processELFDynamicSection>:
processELFDynamicSection():
/home/yogi/src/os/chrisOS/src/newloader.c:19
uint32_t libLoadOffset=LIBRARY_BASE_LOAD_ADDRESS;
extern int kExecLoadCount;
extern elfInfo_t* KERNEL_DATA_SECTION kExecLoadInfo;

void processELFDynamicSection(elfInfo_t* elfInfo)
{
   25e8e:	55                   	push   ebp
   25e8f:	89 e5                	mov    ebp,esp
   25e91:	57                   	push   edi
   25e92:	53                   	push   ebx
   25e93:	83 c4 80             	add    esp,0xffffff80
/home/yogi/src/os/chrisOS/src/newloader.c:20
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   25e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25e99:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   25e9f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:23

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
   25ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ea5:	c7 80 a0 18 00 00 00 	mov    DWORD PTR [eax+0x18a0],0x0
   25eac:	00 00 00 
/home/yogi/src/os/chrisOS/src/newloader.c:24
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   25eaf:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   25eb6:	e9 61 04 00 00       	jmp    2631c <processELFDynamicSection+0x48e>
/home/yogi/src/os/chrisOS/src/newloader.c:26
    {
        switch (dyn[cnt].d_tag)
   25ebb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25ebe:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   25ec5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25ec8:	01 d0                	add    eax,edx
   25eca:	8b 00                	mov    eax,DWORD PTR [eax]
   25ecc:	83 f8 1e             	cmp    eax,0x1e
   25ecf:	0f 87 3f 04 00 00    	ja     26314 <processELFDynamicSection+0x486>
   25ed5:	8b 04 85 bc 59 08 00 	mov    eax,DWORD PTR [eax*4+0x859bc]
   25edc:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/newloader.c:30
        {
            //DT_NEEDED is a library which we need to load
            case DT_NEEDED:
                printk("ELF at: 0x%08X, copy to: 0x%08X, neededCount=0x%08X\n",elfInfo, elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount],elfInfo->dynamicInfo.neededCount);
   25ede:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ee1:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   25ee7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25eea:	8b 92 a0 18 00 00    	mov    edx,DWORD PTR [edx+0x18a0]
   25ef0:	c1 e2 08             	shl    edx,0x8
   25ef3:	8d 8a 50 0e 00 00    	lea    ecx,[edx+0xe50]
   25ef9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25efc:	01 ca                	add    edx,ecx
   25efe:	83 c2 04             	add    edx,0x4
   25f01:	50                   	push   eax
   25f02:	52                   	push   edx
   25f03:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25f06:	68 a0 58 08 00       	push   0x858a0
   25f0b:	e8 e3 12 00 00       	call   271f3 <printk>
   25f10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:31
                strcpy(elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount++],(char*)(elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr));
   25f13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f16:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   25f1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25f1f:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   25f26:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25f29:	01 c8                	add    eax,ecx
   25f2b:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25f2e:	01 d0                	add    eax,edx
   25f30:	89 c3                	mov    ebx,eax
   25f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f35:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   25f3b:	8d 48 01             	lea    ecx,[eax+0x1]
   25f3e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25f41:	89 8a a0 18 00 00    	mov    DWORD PTR [edx+0x18a0],ecx
   25f47:	c1 e0 08             	shl    eax,0x8
   25f4a:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   25f50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f53:	01 d0                	add    eax,edx
   25f55:	83 c0 04             	add    eax,0x4
   25f58:	83 ec 08             	sub    esp,0x8
   25f5b:	53                   	push   ebx
   25f5c:	50                   	push   eax
   25f5d:	e8 f2 13 00 00       	call   27354 <strcpy>
   25f62:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:32
                char fileName[100]="/";
   25f65:	c7 45 84 2f 00 00 00 	mov    DWORD PTR [ebp-0x7c],0x2f
   25f6c:	8d 55 88             	lea    edx,[ebp-0x78]
   25f6f:	b8 00 00 00 00       	mov    eax,0x0
   25f74:	b9 18 00 00 00       	mov    ecx,0x18
   25f79:	89 d7                	mov    edi,edx
   25f7b:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/chrisOS/src/newloader.c:33
                strcat(fileName,elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount-1]);
   25f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f80:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   25f86:	83 e8 01             	sub    eax,0x1
   25f89:	c1 e0 08             	shl    eax,0x8
   25f8c:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   25f92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f95:	01 d0                	add    eax,edx
   25f97:	83 c0 04             	add    eax,0x4
   25f9a:	83 ec 08             	sub    esp,0x8
   25f9d:	50                   	push   eax
   25f9e:	8d 45 84             	lea    eax,[ebp-0x7c]
   25fa1:	50                   	push   eax
   25fa2:	e8 c5 12 00 00       	call   2726c <strcat>
   25fa7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:34
                printd(DEBUG_ELF_LOADER,"Found NEEDED, library name='%s', orig name='%s'\n",fileName,elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr);
   25faa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25fad:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   25fb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25fb6:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   25fbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25fc0:	01 c8                	add    eax,ecx
   25fc2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   25fc5:	01 d0                	add    eax,edx
   25fc7:	50                   	push   eax
   25fc8:	8d 45 84             	lea    eax,[ebp-0x7c]
   25fcb:	50                   	push   eax
   25fcc:	68 d8 58 08 00       	push   0x858d8
   25fd1:	68 00 02 00 00       	push   0x200
   25fd6:	e8 38 12 00 00       	call   27213 <printd>
   25fdb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:35
                if (kDebugLevel&DEBUG_ELF_LOADER)
   25fde:	a1 38 03 12 00       	mov    eax,ds:0x120338
   25fe3:	25 00 02 00 00       	and    eax,0x200
   25fe8:	85 c0                	test   eax,eax
   25fea:	74 1e                	je     2600a <processELFDynamicSection+0x17c>
/home/yogi/src/os/chrisOS/src/newloader.c:37
                {
                    printd(DEBUG_ELF_LOADER,"loadElf: Calling loadElf again to load '%s' ... press a key to continue\n",&fileName);
   25fec:	83 ec 04             	sub    esp,0x4
   25fef:	8d 45 84             	lea    eax,[ebp-0x7c]
   25ff2:	50                   	push   eax
   25ff3:	68 0c 59 08 00       	push   0x8590c
   25ff8:	68 00 02 00 00       	push   0x200
   25ffd:	e8 11 12 00 00       	call   27213 <printd>
   26002:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:38
                    waitForKeyboardKey();
   26005:	e8 48 b2 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/newloader.c:40
                }
                void* fPtr=fopen(fileName, "r");
   2600a:	83 ec 08             	sub    esp,0x8
   2600d:	68 55 59 08 00       	push   0x85955
   26012:	8d 45 84             	lea    eax,[ebp-0x7c]
   26015:	50                   	push   eax
   26016:	e8 2a 74 ff ff       	call   1d445 <fl_fopen>
   2601b:	83 c4 10             	add    esp,0x10
   2601e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:41
                if (fPtr==0)
   26021:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   26025:	75 23                	jne    2604a <processELFDynamicSection+0x1bc>
/home/yogi/src/os/chrisOS/src/newloader.c:43
                {
                    printk("Error opening file '%s', cannot exec\n",fileName);
   26027:	83 ec 08             	sub    esp,0x8
   2602a:	8d 45 84             	lea    eax,[ebp-0x7c]
   2602d:	50                   	push   eax
   2602e:	68 58 59 08 00       	push   0x85958
   26033:	e8 bb 11 00 00       	call   271f3 <printk>
   26038:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:44
                    elfInfo->loadCompleted=false;
   2603b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2603e:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:45
                    return;
   26045:	e9 e4 02 00 00       	jmp    2632e <processELFDynamicSection+0x4a0>
/home/yogi/src/os/chrisOS/src/newloader.c:47
                }   
                elfInfo->dynamicInfo.neededExecLoadNum[elfInfo->dynamicInfo.neededPtr++]=kExecLoadCount;
   2604a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2604d:	8b 80 54 18 00 00    	mov    eax,DWORD PTR [eax+0x1854]
   26053:	8d 48 01             	lea    ecx,[eax+0x1]
   26056:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   26059:	89 8a 54 18 00 00    	mov    DWORD PTR [edx+0x1854],ecx
   2605f:	8b 0d 04 04 12 00    	mov    ecx,DWORD PTR ds:0x120404
   26065:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   26068:	05 14 06 00 00       	add    eax,0x614
   2606d:	89 4c 82 08          	mov    DWORD PTR [edx+eax*4+0x8],ecx
/home/yogi/src/os/chrisOS/src/newloader.c:48
                elfInfo_t* elfLibPtr=&kExecLoadInfo[kExecLoadCount++];
   26071:	8b 0d 00 04 12 00    	mov    ecx,DWORD PTR ds:0x120400
   26077:	a1 04 04 12 00       	mov    eax,ds:0x120404
   2607c:	8d 50 01             	lea    edx,[eax+0x1]
   2607f:	89 15 04 04 12 00    	mov    DWORD PTR ds:0x120404,edx
   26085:	69 c0 d8 18 00 00    	imul   eax,eax,0x18d8
   2608b:	01 c8                	add    eax,ecx
   2608d:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/newloader.c:49
                loadElf(fPtr,elfLibPtr,true);
   26090:	83 ec 04             	sub    esp,0x4
   26093:	6a 01                	push   0x1
   26095:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   26098:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2609b:	e8 62 08 00 00       	call   26902 <loadElf>
   260a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:50
                fclose(fPtr);
   260a3:	83 ec 0c             	sub    esp,0xc
   260a6:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   260a9:	e8 c8 77 ff ff       	call   1d876 <fl_fclose>
   260ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:51
                if (!elfLibPtr->loadCompleted)
   260b1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   260b4:	0f b6 80 d4 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d4]
   260bb:	83 f0 01             	xor    eax,0x1
   260be:	84 c0                	test   al,al
   260c0:	0f 84 51 02 00 00    	je     26317 <processELFDynamicSection+0x489>
/home/yogi/src/os/chrisOS/src/newloader.c:53
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
   260c6:	83 ec 08             	sub    esp,0x8
   260c9:	68 80 59 08 00       	push   0x85980
   260ce:	68 00 02 00 00       	push   0x200
   260d3:	e8 3b 11 00 00       	call   27213 <printd>
   260d8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:54
                    elfInfo->loadCompleted=false;
   260db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260de:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:55
                    return;
   260e5:	90                   	nop
   260e6:	e9 43 02 00 00       	jmp    2632e <processELFDynamicSection+0x4a0>
/home/yogi/src/os/chrisOS/src/newloader.c:59
                }
                break;
            case DT_PLTRELSZ:
                elfInfo->dynamicInfo.pltGOTTableTableSize=dyn[cnt].d_un.d_val;
   260eb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   260ee:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   260f5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   260f8:	01 d0                	add    eax,edx
   260fa:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   260fd:	89 c2                	mov    edx,eax
   260ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26102:	89 90 98 18 00 00    	mov    DWORD PTR [eax+0x1898],edx
/home/yogi/src/os/chrisOS/src/newloader.c:60
                break;
   26108:	e9 0b 02 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:62
            case DT_PLTGOT:
                elfInfo->dynamicInfo.pltGOTTableAddress=dyn[cnt].d_un.d_ptr;
   2610d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26110:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26117:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2611a:	01 d0                	add    eax,edx
   2611c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2611f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26122:	89 90 b0 18 00 00    	mov    DWORD PTR [eax+0x18b0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:63
                break;
   26128:	e9 eb 01 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:65
            case DT_HASH:
                elfInfo->dynamicInfo.hashTableAddress=dyn[cnt].d_un.d_ptr;
   2612d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26130:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26137:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2613a:	01 d0                	add    eax,edx
   2613c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2613f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26142:	89 90 b4 18 00 00    	mov    DWORD PTR [eax+0x18b4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:66
                break;
   26148:	e9 cb 01 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:74
                break;
            case DT_SYMTAB:
                //Already found it above
                break;
            case DT_RELA:
                elfInfo->dynamicInfo.relATableAddress=dyn[cnt].d_un.d_ptr;
   2614d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26150:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26157:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2615a:	01 d0                	add    eax,edx
   2615c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2615f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26162:	89 90 c0 18 00 00    	mov    DWORD PTR [eax+0x18c0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:75
                break;
   26168:	e9 ab 01 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:77
            case DT_RELASZ:
                elfInfo->dynamicInfo.relATableSize=dyn[cnt].d_un.d_val;
   2616d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26170:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26177:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2617a:	01 d0                	add    eax,edx
   2617c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2617f:	89 c2                	mov    edx,eax
   26181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26184:	89 90 84 18 00 00    	mov    DWORD PTR [eax+0x1884],edx
/home/yogi/src/os/chrisOS/src/newloader.c:78
                break;
   2618a:	e9 89 01 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:80
            case DT_RELAENT:
                elfInfo->dynamicInfo.relAEntrySize=dyn[cnt].d_un.d_val;
   2618f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26192:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26199:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2619c:	01 d0                	add    eax,edx
   2619e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   261a1:	89 c2                	mov    edx,eax
   261a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261a6:	89 90 88 18 00 00    	mov    DWORD PTR [eax+0x1888],edx
/home/yogi/src/os/chrisOS/src/newloader.c:81
                break;
   261ac:	e9 67 01 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:83
            case DT_STRSZ:
                elfInfo->dynamicInfo.strTableSize=dyn[cnt].d_un.d_val;
   261b1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261b4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   261bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   261be:	01 d0                	add    eax,edx
   261c0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   261c3:	89 c2                	mov    edx,eax
   261c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261c8:	89 90 8c 18 00 00    	mov    DWORD PTR [eax+0x188c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:84
                break;
   261ce:	e9 45 01 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:86
            case DT_SYMENT:
                elfInfo->dynamicInfo.symEntrySize=dyn[cnt].d_un.d_val;
   261d3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261d6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   261dd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   261e0:	01 d0                	add    eax,edx
   261e2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   261e5:	89 c2                	mov    edx,eax
   261e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261ea:	89 90 90 18 00 00    	mov    DWORD PTR [eax+0x1890],edx
/home/yogi/src/os/chrisOS/src/newloader.c:87
                break;
   261f0:	e9 23 01 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:89
            case DT_INIT:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   261f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261f8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   261ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26202:	01 d0                	add    eax,edx
   26204:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26207:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2620a:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:90
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   26210:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26213:	8b 90 c4 18 00 00    	mov    edx,DWORD PTR [eax+0x18c4]
   26219:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   2621e:	01 c2                	add    edx,eax
   26220:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26223:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:91
                break;
   26229:	e9 ea 00 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:93
            case DT_FINI:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   2622e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26231:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26238:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2623b:	01 d0                	add    eax,edx
   2623d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26240:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26243:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:94
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   26249:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2624c:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   26252:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   26257:	01 c2                	add    edx,eax
   26259:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2625c:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:95
                break;
   26262:	e9 b1 00 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:105
                //Can't find the relocation section this way, using section headers
                //elfInfo->dynamicInfo.relTableAddress=dyn[cnt].d_un.d_ptr;
                //printk("%s: Found DT_REL, address=0x%08X (0x%08X)\n",isLibrary?"library":"executable",dyn[cnt].d_un.d_ptr,elfInfo->dynamicInfo.relTableAddress);
                break;
            case DT_RELSZ:
                elfInfo->dynamicInfo.relTableSize=dyn[cnt].d_un.d_val;
   26267:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2626a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26271:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26274:	01 d0                	add    eax,edx
   26276:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26279:	89 c2                	mov    edx,eax
   2627b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2627e:	89 90 94 18 00 00    	mov    DWORD PTR [eax+0x1894],edx
/home/yogi/src/os/chrisOS/src/newloader.c:106
                break;
   26284:	e9 8f 00 00 00       	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:108
            case DT_RELENT:
                elfInfo->dynamicInfo.relEntrySize=dyn[cnt].d_un.d_val;
   26289:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2628c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26293:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26296:	01 d0                	add    eax,edx
   26298:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2629b:	89 c2                	mov    edx,eax
   2629d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262a0:	89 90 9c 18 00 00    	mov    DWORD PTR [eax+0x189c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:109
                break;
   262a6:	eb 70                	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:121
            case DT_JMPREL:
                break;
            case DT_BIND_NOW:
                break;
            case DT_INIT_ARRAY:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   262a8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   262ab:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   262b2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   262b5:	01 d0                	add    eax,edx
   262b7:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   262ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262bd:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:122
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   262c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262c6:	8b 90 c4 18 00 00    	mov    edx,DWORD PTR [eax+0x18c4]
   262cc:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   262d1:	01 c2                	add    edx,eax
   262d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262d6:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:123
                break;
   262dc:	eb 3a                	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:125
            case DT_FINI_ARRAY:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   262de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   262e1:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   262e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   262eb:	01 d0                	add    eax,edx
   262ed:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   262f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262f3:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:126
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   262f9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262fc:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   26302:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   26307:	01 c2                	add    edx,eax
   26309:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2630c:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:127
                break;
   26312:	eb 04                	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:135
            case DT_FINI_ARRAYSZ:
                break;
            case DT_FLAGS:
                break;
            default:
                break;
   26314:	90                   	nop
   26315:	eb 01                	jmp    26318 <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:57
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
                    elfInfo->loadCompleted=false;
                    return;
                }
                break;
   26317:	90                   	nop
/home/yogi/src/os/chrisOS/src/newloader.c:24
{
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26318:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:24 (discriminator 1)
   2631c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2631f:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   26325:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   26328:	0f 8f 8d fb ff ff    	jg     25ebb <processELFDynamicSection+0x2d>
/home/yogi/src/os/chrisOS/src/newloader.c:139
            default:
                break;
        }
    }

}
   2632e:	8d 65 f8             	lea    esp,[ebp-0x8]
   26331:	5b                   	pop    ebx
   26332:	5f                   	pop    edi
   26333:	5d                   	pop    ebp
   26334:	c3                   	ret    

00026335 <loadSections>:
loadSections():
/home/yogi/src/os/chrisOS/src/newloader.c:142

void loadSections(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   26335:	55                   	push   ebp
   26336:	89 e5                	mov    ebp,esp
   26338:	53                   	push   ebx
   26339:	83 ec 24             	sub    esp,0x24
   2633c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2633f:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/newloader.c:146
    uint8_t* loadAddress;

    //Go to the beginning of the file and get the elf header
    fl_fseek(file, 0, SEEK_SET);
   26342:	83 ec 04             	sub    esp,0x4
   26345:	6a 00                	push   0x0
   26347:	6a 00                	push   0x0
   26349:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2634c:	e8 e0 78 ff ff       	call   1dc31 <fl_fseek>
   26351:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:147
    fl_fread(&elfInfo->hdr, sizeof(elfInfo->hdr),1,file);
   26354:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26357:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2635a:	6a 01                	push   0x1
   2635c:	6a 34                	push   0x34
   2635e:	50                   	push   eax
   2635f:	e8 ae 76 ff ff       	call   1da12 <fl_fread>
   26364:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:148
    if (elfInfo->hdr.e_ident[0] != 0x7F) 
   26367:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2636a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2636d:	3c 7f                	cmp    al,0x7f
   2636f:	74 66                	je     263d7 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:149
        if (elfInfo->hdr.e_ident[1] != 'E') 
   26371:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26374:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   26378:	3c 45                	cmp    al,0x45
   2637a:	74 5b                	je     263d7 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:150
            if (elfInfo->hdr.e_ident[1] != 'L') 
   2637c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2637f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   26383:	3c 4c                	cmp    al,0x4c
   26385:	74 50                	je     263d7 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:151
                if (elfInfo->hdr.e_ident[2] != 'F')
   26387:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2638a:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   2638e:	3c 46                	cmp    al,0x46
   26390:	74 45                	je     263d7 <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:153
                {
                    printd(DEBUG_ELF_LOADER,"Invalid ELF magic '%c' '%c' '%c', cannot load", elfInfo->hdr.e_ident[1], elfInfo->hdr.e_ident[2], elfInfo->hdr.e_ident[3]);
   26392:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26395:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   26399:	0f b6 c8             	movzx  ecx,al
   2639c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2639f:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   263a3:	0f b6 d0             	movzx  edx,al
   263a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263a9:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   263ad:	0f b6 c0             	movzx  eax,al
   263b0:	83 ec 0c             	sub    esp,0xc
   263b3:	51                   	push   ecx
   263b4:	52                   	push   edx
   263b5:	50                   	push   eax
   263b6:	68 38 5a 08 00       	push   0x85a38
   263bb:	68 00 02 00 00       	push   0x200
   263c0:	e8 4e 0e 00 00       	call   27213 <printd>
   263c5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:154
                    elfInfo->loadCompleted=false;
   263c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263cb:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:155
                    return;
   263d2:	e9 26 05 00 00       	jmp    268fd <loadSections+0x5c8>
/home/yogi/src/os/chrisOS/src/newloader.c:159
                }
    
    //Make sure the file is viable
    if (elfInfo->hdr.e_type!=ET_EXEC && elfInfo->hdr.e_type!=ET_DYN)
   263d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263da:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   263de:	66 83 f8 02          	cmp    ax,0x2
   263e2:	74 3c                	je     26420 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:159 (discriminator 1)
   263e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263e7:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   263eb:	66 83 f8 03          	cmp    ax,0x3
   263ef:	74 2f                	je     26420 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:161
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF type 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   263f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   263f4:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   263f8:	0f b7 c0             	movzx  eax,ax
   263fb:	83 ec 04             	sub    esp,0x4
   263fe:	50                   	push   eax
   263ff:	68 68 5a 08 00       	push   0x85a68
   26404:	68 00 02 00 00       	push   0x200
   26409:	e8 05 0e 00 00       	call   27213 <printd>
   2640e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:162
        elfInfo->loadCompleted=false;
   26411:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26414:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:163
        return;
   2641b:	e9 dd 04 00 00       	jmp    268fd <loadSections+0x5c8>
/home/yogi/src/os/chrisOS/src/newloader.c:165
    }
    if (elfInfo->hdr.e_machine!=EM_386)
   26420:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26423:	0f b7 40 12          	movzx  eax,WORD PTR [eax+0x12]
   26427:	66 83 f8 03          	cmp    ax,0x3
   2642b:	74 2f                	je     2645c <loadSections+0x127>
/home/yogi/src/os/chrisOS/src/newloader.c:167
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF architecture 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   2642d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26430:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26434:	0f b7 c0             	movzx  eax,ax
   26437:	83 ec 04             	sub    esp,0x4
   2643a:	50                   	push   eax
   2643b:	68 8c 5a 08 00       	push   0x85a8c
   26440:	68 00 02 00 00       	push   0x200
   26445:	e8 c9 0d 00 00       	call   27213 <printd>
   2644a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:168
        elfInfo->loadCompleted=false;
   2644d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26450:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:169
        return;
   26457:	e9 a1 04 00 00       	jmp    268fd <loadSections+0x5c8>
/home/yogi/src/os/chrisOS/src/newloader.c:173
    }
    
    //Get the section header table
    printd(DEBUG_ELF_LOADER,"section header record count= %u\n", elfInfo->hdr.e_shnum);
   2645c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2645f:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   26463:	0f b7 c0             	movzx  eax,ax
   26466:	83 ec 04             	sub    esp,0x4
   26469:	50                   	push   eax
   2646a:	68 b8 5a 08 00       	push   0x85ab8
   2646f:	68 00 02 00 00       	push   0x200
   26474:	e8 9a 0d 00 00       	call   27213 <printd>
   26479:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:174
    printd(DEBUG_ELF_LOADER,"e_shentsize=%u, oursize=%u\n", elfInfo->hdr.e_shentsize, sizeof(Elf32_Shdr) );
   2647c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2647f:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   26483:	0f b7 c0             	movzx  eax,ax
   26486:	6a 28                	push   0x28
   26488:	50                   	push   eax
   26489:	68 d9 5a 08 00       	push   0x85ad9
   2648e:	68 00 02 00 00       	push   0x200
   26493:	e8 7b 0d 00 00       	call   27213 <printd>
   26498:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:175
    fl_fseek(file, elfInfo->hdr.e_shoff,SEEK_SET);
   2649b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2649e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   264a1:	83 ec 04             	sub    esp,0x4
   264a4:	6a 00                	push   0x0
   264a6:	50                   	push   eax
   264a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   264aa:	e8 82 77 ff ff       	call   1dc31 <fl_fseek>
   264af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:176
    printd(DEBUG_ELF_LOADER,"reading SHOFF\n",elfInfo->hdr.e_shoff);
   264b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264b5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   264b8:	83 ec 04             	sub    esp,0x4
   264bb:	50                   	push   eax
   264bc:	68 f5 5a 08 00       	push   0x85af5
   264c1:	68 00 02 00 00       	push   0x200
   264c6:	e8 48 0d 00 00       	call   27213 <printd>
   264cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:177
    fl_fread(elfInfo->secHdrTable, sizeof(Elf32_Shdr),elfInfo->hdr.e_shnum,file);
   264ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264d1:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   264d5:	0f b7 c0             	movzx  eax,ax
   264d8:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   264db:	83 c2 34             	add    edx,0x34
   264de:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   264e1:	50                   	push   eax
   264e2:	6a 28                	push   0x28
   264e4:	52                   	push   edx
   264e5:	e8 28 75 ff ff       	call   1da12 <fl_fread>
   264ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:180
    
    //Get the program header table
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
   264ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   264f0:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   264f3:	83 ec 04             	sub    esp,0x4
   264f6:	50                   	push   eax
   264f7:	68 04 5b 08 00       	push   0x85b04
   264fc:	68 00 02 00 00       	push   0x200
   26501:	e8 0d 0d 00 00       	call   27213 <printd>
   26506:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:181
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
   26509:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2650c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   2650f:	83 ec 04             	sub    esp,0x4
   26512:	50                   	push   eax
   26513:	68 1a 5b 08 00       	push   0x85b1a
   26518:	68 00 02 00 00       	push   0x200
   2651d:	e8 f1 0c 00 00       	call   27213 <printd>
   26522:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:182
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
   26525:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26528:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   2652b:	83 ec 04             	sub    esp,0x4
   2652e:	6a 00                	push   0x0
   26530:	50                   	push   eax
   26531:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26534:	e8 f8 76 ff ff       	call   1dc31 <fl_fseek>
   26539:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:183
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
   2653c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2653f:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   26543:	0f b7 c0             	movzx  eax,ax
   26546:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26549:	81 c2 04 08 00 00    	add    edx,0x804
   2654f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26552:	50                   	push   eax
   26553:	6a 20                	push   0x20
   26555:	52                   	push   edx
   26556:	e8 b7 74 ff ff       	call   1da12 <fl_fread>
   2655b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:186
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   2655e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   26565:	e9 6b 03 00 00       	jmp    268d5 <loadSections+0x5a0>
/home/yogi/src/os/chrisOS/src/newloader.c:188
    {
        loadAddress = (uint8_t*)elfInfo->pgmHdrTable[cnt].p_vaddr;
   2656a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2656d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26570:	83 c2 40             	add    edx,0x40
   26573:	c1 e2 05             	shl    edx,0x5
   26576:	01 d0                	add    eax,edx
   26578:	83 c0 0c             	add    eax,0xc
   2657b:	8b 00                	mov    eax,DWORD PTR [eax]
   2657d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:189
        if (isLibrary)
   26580:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   26584:	74 1e                	je     265a4 <loadSections+0x26f>
/home/yogi/src/os/chrisOS/src/newloader.c:191
        {
            loadAddress+=libLoadOffset;
   26586:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   2658b:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:192
            elfInfo->pgmHdrTable[cnt].p_vaddr=loadAddress;
   2658e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26591:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26594:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26597:	83 c1 40             	add    ecx,0x40
   2659a:	c1 e1 05             	shl    ecx,0x5
   2659d:	01 ca                	add    edx,ecx
   2659f:	83 c2 0c             	add    edx,0xc
   265a2:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/newloader.c:195
        }

        if (elfInfo->pgmHdrTable[cnt].p_vaddr==KERNEL_DATA_LOAD_ADDRESS)
   265a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265a7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   265aa:	83 c2 40             	add    edx,0x40
   265ad:	c1 e2 05             	shl    edx,0x5
   265b0:	01 d0                	add    eax,edx
   265b2:	83 c0 0c             	add    eax,0xc
   265b5:	8b 10                	mov    edx,DWORD PTR [eax]
   265b7:	0f b6 05 00 00 12 00 	movzx  eax,BYTE PTR ds:0x120000
   265be:	0f be c0             	movsx  eax,al
   265c1:	39 c2                	cmp    edx,eax
   265c3:	75 1d                	jne    265e2 <loadSections+0x2ad>
/home/yogi/src/os/chrisOS/src/newloader.c:197
        {
            printd(DEBUG_ELF_LOADER,"Section %u load address is kernel data base address (0x%08X), skipping load\n",cnt,loadAddress);
   265c5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   265c8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   265cb:	68 2c 5b 08 00       	push   0x85b2c
   265d0:	68 00 02 00 00       	push   0x200
   265d5:	e8 39 0c 00 00       	call   27213 <printd>
   265da:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:198
            continue;
   265dd:	e9 ef 02 00 00       	jmp    268d1 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:200
        }
        else if (elfInfo->pgmHdrTable[cnt].p_offset==elfInfo->hdr.e_phoff)
   265e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265e5:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   265e8:	83 c2 40             	add    edx,0x40
   265eb:	c1 e2 05             	shl    edx,0x5
   265ee:	01 d0                	add    eax,edx
   265f0:	83 c0 08             	add    eax,0x8
   265f3:	8b 10                	mov    edx,DWORD PTR [eax]
   265f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   265f8:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   265fb:	39 c2                	cmp    edx,eax
   265fd:	75 2e                	jne    2662d <loadSections+0x2f8>
/home/yogi/src/os/chrisOS/src/newloader.c:202
        {
            printd(DEBUG_ELF_LOADER,"Section %u file offset is program header address (0x%08X),skipping load\n",cnt,elfInfo->pgmHdrTable[cnt].p_offset);
   265ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26602:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26605:	83 c2 40             	add    edx,0x40
   26608:	c1 e2 05             	shl    edx,0x5
   2660b:	01 d0                	add    eax,edx
   2660d:	83 c0 08             	add    eax,0x8
   26610:	8b 00                	mov    eax,DWORD PTR [eax]
   26612:	50                   	push   eax
   26613:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26616:	68 7c 5b 08 00       	push   0x85b7c
   2661b:	68 00 02 00 00       	push   0x200
   26620:	e8 ee 0b 00 00       	call   27213 <printd>
   26625:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:203
            continue;
   26628:	e9 a4 02 00 00       	jmp    268d1 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:205
        }
        if (loadAddress!=0 && elfInfo->libLoadAddress==0 && (elfInfo->hdr.e_type!=ET_REL && elfInfo->hdr.e_type!=ET_DYN))
   2662d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   26631:	74 4b                	je     2667e <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 1)
   26633:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26636:	8b 80 d0 18 00 00    	mov    eax,DWORD PTR [eax+0x18d0]
   2663c:	85 c0                	test   eax,eax
   2663e:	75 3e                	jne    2667e <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 2)
   26640:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26643:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26647:	66 83 f8 01          	cmp    ax,0x1
   2664b:	74 31                	je     2667e <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 3)
   2664d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26650:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26654:	66 83 f8 03          	cmp    ax,0x3
   26658:	74 24                	je     2667e <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:207
        {
            elfInfo->libLoadAddress=(uintptr_t)loadAddress;
   2665a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2665d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26660:	89 90 d0 18 00 00    	mov    DWORD PTR [eax+0x18d0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:208
            printd(DEBUG_ELF_LOADER,"Setting main load address to 0x%08X\n",loadAddress);
   26666:	83 ec 04             	sub    esp,0x4
   26669:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2666c:	68 c8 5b 08 00       	push   0x85bc8
   26671:	68 00 02 00 00       	push   0x200
   26676:	e8 98 0b 00 00       	call   27213 <printd>
   2667b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:212
            
        }
        //printd(DEBUG_ELF_LOADER,"Next load address is 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_vaddr);
        if (elfInfo->pgmHdrTable[cnt].p_filesz>0)
   2667e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26681:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26684:	c1 e2 05             	shl    edx,0x5
   26687:	01 d0                	add    eax,edx
   26689:	05 14 08 00 00       	add    eax,0x814
   2668e:	8b 00                	mov    eax,DWORD PTR [eax]
   26690:	85 c0                	test   eax,eax
   26692:	0f 84 9f 01 00 00    	je     26837 <loadSections+0x502>
/home/yogi/src/os/chrisOS/src/newloader.c:214
        {
            printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->pgmHdrTable[cnt].p_offset);
   26698:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2669b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2669e:	83 c2 40             	add    edx,0x40
   266a1:	c1 e2 05             	shl    edx,0x5
   266a4:	01 d0                	add    eax,edx
   266a6:	83 c0 08             	add    eax,0x8
   266a9:	8b 00                	mov    eax,DWORD PTR [eax]
   266ab:	83 ec 04             	sub    esp,0x4
   266ae:	50                   	push   eax
   266af:	68 04 5b 08 00       	push   0x85b04
   266b4:	68 00 02 00 00       	push   0x200
   266b9:	e8 55 0b 00 00       	call   27213 <printd>
   266be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:215
            fl_fseek(file, elfInfo->pgmHdrTable[cnt].p_offset, SEEK_SET);
   266c1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266c4:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   266c7:	83 c2 40             	add    edx,0x40
   266ca:	c1 e2 05             	shl    edx,0x5
   266cd:	01 d0                	add    eax,edx
   266cf:	83 c0 08             	add    eax,0x8
   266d2:	8b 00                	mov    eax,DWORD PTR [eax]
   266d4:	83 ec 04             	sub    esp,0x4
   266d7:	6a 00                	push   0x0
   266d9:	50                   	push   eax
   266da:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   266dd:	e8 4f 75 ff ff       	call   1dc31 <fl_fseek>
   266e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:216
            printd(DEBUG_ELF_LOADER,"reading %u bytes to 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_memsz,loadAddress);
   266e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266e8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   266eb:	c1 e2 05             	shl    edx,0x5
   266ee:	01 d0                	add    eax,edx
   266f0:	05 18 08 00 00       	add    eax,0x818
   266f5:	8b 00                	mov    eax,DWORD PTR [eax]
   266f7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   266fa:	50                   	push   eax
   266fb:	68 ed 5b 08 00       	push   0x85bed
   26700:	68 00 02 00 00       	push   0x200
   26705:	e8 09 0b 00 00       	call   27213 <printd>
   2670a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:217
            fl_fread(loadAddress, 1, elfInfo->pgmHdrTable[cnt].p_memsz, file);
   2670d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26710:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26713:	c1 e2 05             	shl    edx,0x5
   26716:	01 d0                	add    eax,edx
   26718:	05 18 08 00 00       	add    eax,0x818
   2671d:	8b 00                	mov    eax,DWORD PTR [eax]
   2671f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26722:	50                   	push   eax
   26723:	6a 01                	push   0x1
   26725:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26728:	e8 e5 72 ff ff       	call   1da12 <fl_fread>
   2672d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:218
            printd(DEBUG_ELF_LOADER,"Section %u loaded 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   26730:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26733:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26736:	c1 e2 05             	shl    edx,0x5
   26739:	01 d0                	add    eax,edx
   2673b:	05 18 08 00 00       	add    eax,0x818
   26740:	8b 00                	mov    eax,DWORD PTR [eax]
   26742:	83 ec 0c             	sub    esp,0xc
   26745:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26748:	50                   	push   eax
   26749:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2674c:	68 0c 5c 08 00       	push   0x85c0c
   26751:	68 00 02 00 00       	push   0x200
   26756:	e8 b8 0a 00 00       	call   27213 <printd>
   2675b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:219
            if (elfInfo->pgmHdrTable[cnt].p_filesz<elfInfo->pgmHdrTable[cnt].p_memsz)
   2675e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26761:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26764:	c1 e2 05             	shl    edx,0x5
   26767:	01 d0                	add    eax,edx
   26769:	05 14 08 00 00       	add    eax,0x814
   2676e:	8b 10                	mov    edx,DWORD PTR [eax]
   26770:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26773:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26776:	c1 e1 05             	shl    ecx,0x5
   26779:	01 c8                	add    eax,ecx
   2677b:	05 18 08 00 00       	add    eax,0x818
   26780:	8b 00                	mov    eax,DWORD PTR [eax]
   26782:	39 c2                	cmp    edx,eax
   26784:	0f 83 47 01 00 00    	jae    268d1 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:221
            {
                printd(DEBUG_ELF_LOADER,"Section %u has uninitialized data, zeroed 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz, loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz);
   2678a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2678d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26790:	c1 e2 05             	shl    edx,0x5
   26793:	01 d0                	add    eax,edx
   26795:	05 14 08 00 00       	add    eax,0x814
   2679a:	8b 10                	mov    edx,DWORD PTR [eax]
   2679c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2679f:	01 c2                	add    edx,eax
   267a1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   267a4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   267a7:	c1 e1 05             	shl    ecx,0x5
   267aa:	01 c8                	add    eax,ecx
   267ac:	05 18 08 00 00       	add    eax,0x818
   267b1:	8b 08                	mov    ecx,DWORD PTR [eax]
   267b3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   267b6:	8b 5d f0             	mov    ebx,DWORD PTR [ebp-0x10]
   267b9:	c1 e3 05             	shl    ebx,0x5
   267bc:	01 d8                	add    eax,ebx
   267be:	05 14 08 00 00       	add    eax,0x814
   267c3:	8b 00                	mov    eax,DWORD PTR [eax]
   267c5:	29 c1                	sub    ecx,eax
   267c7:	89 c8                	mov    eax,ecx
   267c9:	83 ec 0c             	sub    esp,0xc
   267cc:	52                   	push   edx
   267cd:	50                   	push   eax
   267ce:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   267d1:	68 38 5c 08 00       	push   0x85c38
   267d6:	68 00 02 00 00       	push   0x200
   267db:	e8 33 0a 00 00       	call   27213 <printd>
   267e0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:222
                memset(loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz+1,0,elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz);
   267e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   267e6:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   267e9:	c1 e2 05             	shl    edx,0x5
   267ec:	01 d0                	add    eax,edx
   267ee:	05 18 08 00 00       	add    eax,0x818
   267f3:	8b 10                	mov    edx,DWORD PTR [eax]
   267f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   267f8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   267fb:	c1 e1 05             	shl    ecx,0x5
   267fe:	01 c8                	add    eax,ecx
   26800:	05 14 08 00 00       	add    eax,0x814
   26805:	8b 00                	mov    eax,DWORD PTR [eax]
   26807:	29 c2                	sub    edx,eax
   26809:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2680c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   2680f:	c1 e1 05             	shl    ecx,0x5
   26812:	01 c8                	add    eax,ecx
   26814:	05 14 08 00 00       	add    eax,0x814
   26819:	8b 00                	mov    eax,DWORD PTR [eax]
   2681b:	8d 48 01             	lea    ecx,[eax+0x1]
   2681e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26821:	01 c8                	add    eax,ecx
   26823:	83 ec 04             	sub    esp,0x4
   26826:	52                   	push   edx
   26827:	6a 00                	push   0x0
   26829:	50                   	push   eax
   2682a:	e8 4e e8 ff ff       	call   2507d <memset>
   2682f:	83 c4 10             	add    esp,0x10
   26832:	e9 9a 00 00 00       	jmp    268d1 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:225
            }
        }
        else if (elfInfo->pgmHdrTable[cnt].p_memsz>0)
   26837:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2683a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2683d:	c1 e2 05             	shl    edx,0x5
   26840:	01 d0                	add    eax,edx
   26842:	05 18 08 00 00       	add    eax,0x818
   26847:	8b 00                	mov    eax,DWORD PTR [eax]
   26849:	85 c0                	test   eax,eax
   2684b:	74 30                	je     2687d <loadSections+0x548>
/home/yogi/src/os/chrisOS/src/newloader.c:227
        {
            printd(DEBUG_ELF_LOADER,"Section %u not loadable, zeroed 0x%08X bytes at 0x%08X\n",cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   2684d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26850:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26853:	c1 e2 05             	shl    edx,0x5
   26856:	01 d0                	add    eax,edx
   26858:	05 18 08 00 00       	add    eax,0x818
   2685d:	8b 00                	mov    eax,DWORD PTR [eax]
   2685f:	83 ec 0c             	sub    esp,0xc
   26862:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26865:	50                   	push   eax
   26866:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26869:	68 7c 5c 08 00       	push   0x85c7c
   2686e:	68 00 02 00 00       	push   0x200
   26873:	e8 9b 09 00 00       	call   27213 <printd>
   26878:	83 c4 20             	add    esp,0x20
   2687b:	eb 54                	jmp    268d1 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:231
        }
#ifndef DEBUG_NONE
        else
            if ((kDebugLevel & DEBUG_ELF_LOADER) == DEBUG_ELF_LOADER)
   2687d:	a1 38 03 12 00       	mov    eax,ds:0x120338
   26882:	25 00 02 00 00       	and    eax,0x200
   26887:	85 c0                	test   eax,eax
   26889:	74 46                	je     268d1 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:232
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
   2688b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2688e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26891:	c1 e2 05             	shl    edx,0x5
   26894:	01 d0                	add    eax,edx
   26896:	05 18 08 00 00       	add    eax,0x818
   2689b:	8b 10                	mov    edx,DWORD PTR [eax]
   2689d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268a0:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   268a3:	c1 e1 05             	shl    ecx,0x5
   268a6:	01 c8                	add    eax,ecx
   268a8:	05 14 08 00 00       	add    eax,0x814
   268ad:	8b 00                	mov    eax,DWORD PTR [eax]
   268af:	85 c0                	test   eax,eax
   268b1:	0f 95 c0             	setne  al
   268b4:	0f b6 c0             	movzx  eax,al
   268b7:	83 ec 0c             	sub    esp,0xc
   268ba:	52                   	push   edx
   268bb:	50                   	push   eax
   268bc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   268bf:	68 b4 5c 08 00       	push   0x85cb4
   268c4:	68 00 02 00 00       	push   0x200
   268c9:	e8 45 09 00 00       	call   27213 <printd>
   268ce:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 2)
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   268d1:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 1)
   268d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268d8:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   268dc:	0f b7 c0             	movzx  eax,ax
   268df:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   268e2:	0f 8f 82 fc ff ff    	jg     2656a <loadSections+0x235>
/home/yogi/src/os/chrisOS/src/newloader.c:237
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
#endif

    }
    //Done processing the program header table
    printd(DEBUG_ELF_LOADER,"LoadElf: done loading file\n");
   268e8:	83 ec 08             	sub    esp,0x8
   268eb:	68 e7 5c 08 00       	push   0x85ce7
   268f0:	68 00 02 00 00       	push   0x200
   268f5:	e8 19 09 00 00       	call   27213 <printd>
   268fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:239
    
}
   268fd:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   26900:	c9                   	leave  
   26901:	c3                   	ret    

00026902 <loadElf>:
loadElf():
/home/yogi/src/os/chrisOS/src/newloader.c:242

void loadElf(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   26902:	55                   	push   ebp
   26903:	89 e5                	mov    ebp,esp
   26905:	57                   	push   edi
   26906:	56                   	push   esi
   26907:	53                   	push   ebx
   26908:	83 ec 2c             	sub    esp,0x2c
   2690b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2690e:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/chrisOS/src/newloader.c:243
    char* sectStringTable=(char*)0x1900000;  //TODO: Fix this!!!
   26911:	c7 45 dc 00 00 90 01 	mov    DWORD PTR [ebp-0x24],0x1900000
/home/yogi/src/os/chrisOS/src/newloader.c:246

    //Initialize the structs we will be using
    memset(elfInfo,0,sizeof(elfInfo_t));
   26918:	83 ec 04             	sub    esp,0x4
   2691b:	68 d8 18 00 00       	push   0x18d8
   26920:	6a 00                	push   0x0
   26922:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26925:	e8 53 e7 ff ff       	call   2507d <memset>
   2692a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:247
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));
   2692d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26930:	05 54 0e 00 00       	add    eax,0xe54
   26935:	83 ec 04             	sub    esp,0x4
   26938:	68 7c 0a 00 00       	push   0xa7c
   2693d:	6a 00                	push   0x0
   2693f:	50                   	push   eax
   26940:	e8 38 e7 ff ff       	call   2507d <memset>
   26945:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:249

    elfInfo->loadCompleted=true;
   26948:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2694b:	c6 80 d4 18 00 00 01 	mov    BYTE PTR [eax+0x18d4],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:251
    //Load all of the sections in the file to memory
    loadSections(file,elfInfo,isLibrary);
   26952:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   26956:	83 ec 04             	sub    esp,0x4
   26959:	50                   	push   eax
   2695a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2695d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26960:	e8 d0 f9 ff ff       	call   26335 <loadSections>
   26965:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:255
    

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
   26968:	a1 38 03 12 00       	mov    eax,ds:0x120338
   2696d:	25 00 02 00 00       	and    eax,0x200
   26972:	85 c0                	test   eax,eax
   26974:	0f 84 12 01 00 00    	je     26a8c <loadElf+0x18a>
/home/yogi/src/os/chrisOS/src/newloader.c:257
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
   2697a:	83 ec 08             	sub    esp,0x8
   2697d:	68 04 5d 08 00       	push   0x85d04
   26982:	68 00 02 00 00       	push   0x200
   26987:	e8 87 08 00 00       	call   27213 <printd>
   2698c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:258
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   2698f:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   26996:	e9 c4 00 00 00       	jmp    26a5f <loadElf+0x15d>
/home/yogi/src/os/chrisOS/src/newloader.c:260
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
   2699b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   2699e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   269a1:	89 d0                	mov    eax,edx
   269a3:	c1 e0 02             	shl    eax,0x2
   269a6:	01 d0                	add    eax,edx
   269a8:	c1 e0 03             	shl    eax,0x3
   269ab:	01 c8                	add    eax,ecx
   269ad:	83 c0 34             	add    eax,0x34
   269b0:	8b 10                	mov    edx,DWORD PTR [eax]
   269b2:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   269b5:	01 d0                	add    eax,edx
   269b7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   269ba:	0f be c0             	movsx  eax,al
   269bd:	85 c0                	test   eax,eax
   269bf:	0f 84 96 00 00 00    	je     26a5b <loadElf+0x159>
/home/yogi/src/os/chrisOS/src/newloader.c:261
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   269c5:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   269c8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   269cb:	89 d0                	mov    eax,edx
   269cd:	c1 e0 02             	shl    eax,0x2
   269d0:	01 d0                	add    eax,edx
   269d2:	c1 e0 03             	shl    eax,0x3
   269d5:	01 c8                	add    eax,ecx
   269d7:	83 c0 38             	add    eax,0x38
   269da:	8b 38                	mov    edi,DWORD PTR [eax]
   269dc:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   269df:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   269e2:	89 d0                	mov    eax,edx
   269e4:	c1 e0 02             	shl    eax,0x2
   269e7:	01 d0                	add    eax,edx
   269e9:	c1 e0 03             	shl    eax,0x3
   269ec:	01 c8                	add    eax,ecx
   269ee:	83 c0 48             	add    eax,0x48
   269f1:	8b 30                	mov    esi,DWORD PTR [eax]
   269f3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   269f6:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   269f9:	89 d0                	mov    eax,edx
   269fb:	c1 e0 02             	shl    eax,0x2
   269fe:	01 d0                	add    eax,edx
   26a00:	c1 e0 03             	shl    eax,0x3
   26a03:	01 c8                	add    eax,ecx
   26a05:	83 c0 44             	add    eax,0x44
   26a08:	8b 18                	mov    ebx,DWORD PTR [eax]
   26a0a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26a0d:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26a10:	89 d0                	mov    eax,edx
   26a12:	c1 e0 02             	shl    eax,0x2
   26a15:	01 d0                	add    eax,edx
   26a17:	c1 e0 03             	shl    eax,0x3
   26a1a:	01 c8                	add    eax,ecx
   26a1c:	83 c0 40             	add    eax,0x40
   26a1f:	8b 08                	mov    ecx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:262
                        sectStringTable+elfInfo->secHdrTable[cnt].sh_name,
   26a21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a24:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
   26a27:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26a2a:	89 d0                	mov    eax,edx
   26a2c:	c1 e0 02             	shl    eax,0x2
   26a2f:	01 d0                	add    eax,edx
   26a31:	c1 e0 03             	shl    eax,0x3
   26a34:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
   26a37:	83 c0 34             	add    eax,0x34
   26a3a:	8b 10                	mov    edx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:261
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   26a3c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   26a3f:	01 d0                	add    eax,edx
   26a41:	83 ec 04             	sub    esp,0x4
   26a44:	57                   	push   edi
   26a45:	56                   	push   esi
   26a46:	53                   	push   ebx
   26a47:	51                   	push   ecx
   26a48:	50                   	push   eax
   26a49:	68 30 5d 08 00       	push   0x85d30
   26a4e:	68 00 02 00 00       	push   0x200
   26a53:	e8 bb 07 00 00       	call   27213 <printd>
   26a58:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 2)

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   26a5b:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 1)
   26a5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a62:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   26a66:	0f b7 c0             	movzx  eax,ax
   26a69:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   26a6c:	0f 8f 29 ff ff ff    	jg     2699b <loadElf+0x99>
/home/yogi/src/os/chrisOS/src/newloader.c:268
                        elfInfo->secHdrTable[cnt].sh_addr,
                        elfInfo->secHdrTable[cnt].sh_offset,
                        elfInfo->secHdrTable[cnt].sh_size, 
                        elfInfo->secHdrTable[cnt].sh_type);
        }
        printd(DEBUG_ELF_LOADER,"End of section table... press a key to continue\n");
   26a72:	83 ec 08             	sub    esp,0x8
   26a75:	68 54 5d 08 00       	push   0x85d54
   26a7a:	68 00 02 00 00       	push   0x200
   26a7f:	e8 8f 07 00 00       	call   27213 <printd>
   26a84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:269
        waitForKeyboardKey();
   26a87:	e8 c6 a7 fe ff       	call   11252 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/newloader.c:273
    }
    
    //Find the symbol and string tables in the dynamic section
    if (elfInfo->dynamicSectionAddress>0)
   26a8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a8f:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26a95:	85 c0                	test   eax,eax
   26a97:	0f 84 94 01 00 00    	je     26c31 <loadElf+0x32f>
/home/yogi/src/os/chrisOS/src/newloader.c:275
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
   26a9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26aa0:	8b 90 4c 0e 00 00    	mov    edx,DWORD PTR [eax+0xe4c]
   26aa6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26aa9:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26aaf:	52                   	push   edx
   26ab0:	50                   	push   eax
   26ab1:	68 88 5d 08 00       	push   0x85d88
   26ab6:	68 00 02 00 00       	push   0x200
   26abb:	e8 53 07 00 00       	call   27213 <printd>
   26ac0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:276
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   26ac3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ac6:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26acc:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/newloader.c:279

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26acf:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   26ad6:	e9 e4 00 00 00       	jmp    26bbf <loadElf+0x2bd>
/home/yogi/src/os/chrisOS/src/newloader.c:281
        {
            if (dyn[cnt].d_tag==DT_STRTAB)
   26adb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26ade:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26ae5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26ae8:	01 d0                	add    eax,edx
   26aea:	8b 00                	mov    eax,DWORD PTR [eax]
   26aec:	83 f8 05             	cmp    eax,0x5
   26aef:	75 5b                	jne    26b4c <loadElf+0x24a>
/home/yogi/src/os/chrisOS/src/newloader.c:283
            {
                elfInfo->dynamicInfo.strTableAddress=dyn[cnt].d_un.d_ptr;
   26af1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26af4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26afb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26afe:	01 d0                	add    eax,edx
   26b00:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26b03:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b06:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:284
                if (isLibrary)
   26b0c:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   26b10:	74 19                	je     26b2b <loadElf+0x229>
/home/yogi/src/os/chrisOS/src/newloader.c:285
                    elfInfo->dynamicInfo.strTableAddress+=libLoadOffset;
   26b12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b15:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   26b1b:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   26b20:	01 c2                	add    edx,eax
   26b22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b25:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:286
                printd(DEBUG_ELF_LOADER,"Found dynamic string table address 0x%08X\n",elfInfo->dynamicInfo.strTableAddress);
   26b2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b2e:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26b34:	83 ec 04             	sub    esp,0x4
   26b37:	50                   	push   eax
   26b38:	68 c4 5d 08 00       	push   0x85dc4
   26b3d:	68 00 02 00 00       	push   0x200
   26b42:	e8 cc 06 00 00       	call   27213 <printd>
   26b47:	83 c4 10             	add    esp,0x10
   26b4a:	eb 6f                	jmp    26bbb <loadElf+0x2b9>
/home/yogi/src/os/chrisOS/src/newloader.c:288
            }
            else if (dyn[cnt].d_tag==DT_SYMTAB)
   26b4c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26b4f:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26b56:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26b59:	01 d0                	add    eax,edx
   26b5b:	8b 00                	mov    eax,DWORD PTR [eax]
   26b5d:	83 f8 06             	cmp    eax,0x6
   26b60:	75 59                	jne    26bbb <loadElf+0x2b9>
/home/yogi/src/os/chrisOS/src/newloader.c:290
            {
                elfInfo->dynamicInfo.symTableAddress=dyn[cnt].d_un.d_ptr;
   26b62:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26b65:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26b6c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26b6f:	01 d0                	add    eax,edx
   26b71:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26b74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b77:	89 90 bc 18 00 00    	mov    DWORD PTR [eax+0x18bc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:291
                if (isLibrary)
   26b7d:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   26b81:	74 19                	je     26b9c <loadElf+0x29a>
/home/yogi/src/os/chrisOS/src/newloader.c:292
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
   26b83:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b86:	8b 90 bc 18 00 00    	mov    edx,DWORD PTR [eax+0x18bc]
   26b8c:	a1 a4 da 02 00       	mov    eax,ds:0x2daa4
   26b91:	01 c2                	add    edx,eax
   26b93:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b96:	89 90 bc 18 00 00    	mov    DWORD PTR [eax+0x18bc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:293
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
   26b9c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b9f:	8b 80 bc 18 00 00    	mov    eax,DWORD PTR [eax+0x18bc]
   26ba5:	83 ec 04             	sub    esp,0x4
   26ba8:	50                   	push   eax
   26ba9:	68 f0 5d 08 00       	push   0x85df0
   26bae:	68 00 02 00 00       	push   0x200
   26bb3:	e8 5b 06 00 00       	call   27213 <printd>
   26bb8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:279 (discriminator 2)
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26bbb:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:279 (discriminator 1)
   26bbf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bc2:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   26bc8:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   26bcb:	0f 8f 0a ff ff ff    	jg     26adb <loadElf+0x1d9>
/home/yogi/src/os/chrisOS/src/newloader.c:296
                if (isLibrary)
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
            }
        }
        if (!elfInfo->dynamicInfo.strTableAddress)
   26bd1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bd4:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26bda:	85 c0                	test   eax,eax
   26bdc:	75 1c                	jne    26bfa <loadElf+0x2f8>
/home/yogi/src/os/chrisOS/src/newloader.c:298
        {
            printk("EXEC: Dynamic loading, unable to find dynamic string table address, cannot execute.\n");
   26bde:	83 ec 0c             	sub    esp,0xc
   26be1:	68 1c 5e 08 00       	push   0x85e1c
   26be6:	e8 08 06 00 00       	call   271f3 <printk>
   26beb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:299
            elfInfo->loadCompleted=false;
   26bee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bf1:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:300
            return;
   26bf8:	eb 37                	jmp    26c31 <loadElf+0x32f>
/home/yogi/src/os/chrisOS/src/newloader.c:302
        }
        else if (!elfInfo->dynamicInfo.symTableAddress)
   26bfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bfd:	8b 80 bc 18 00 00    	mov    eax,DWORD PTR [eax+0x18bc]
   26c03:	85 c0                	test   eax,eax
   26c05:	75 1c                	jne    26c23 <loadElf+0x321>
/home/yogi/src/os/chrisOS/src/newloader.c:304
        {
            printk("EXEC: Dynamic loading, unable to find dynamic symbol table address, cannot execute.\n");
   26c07:	83 ec 0c             	sub    esp,0xc
   26c0a:	68 74 5e 08 00       	push   0x85e74
   26c0f:	e8 df 05 00 00       	call   271f3 <printk>
   26c14:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:305
            elfInfo->loadCompleted=false;
   26c17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c1a:	c6 80 d4 18 00 00 00 	mov    BYTE PTR [eax+0x18d4],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:306
            return;
   26c21:	eb 0e                	jmp    26c31 <loadElf+0x32f>
/home/yogi/src/os/chrisOS/src/newloader.c:309
        }

     processELFDynamicSection(elfInfo);   
   26c23:	83 ec 0c             	sub    esp,0xc
   26c26:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26c29:	e8 60 f2 ff ff       	call   25e8e <processELFDynamicSection>
   26c2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:312
    
    }
}
   26c31:	8d 65 f4             	lea    esp,[ebp-0xc]
   26c34:	5b                   	pop    ebx
   26c35:	5e                   	pop    esi
   26c36:	5f                   	pop    edi
   26c37:	5d                   	pop    ebp
   26c38:	c3                   	ret    

00026c39 <exec>:
exec():
/home/yogi/src/os/chrisOS/src/newloader.c:315

int exec(char* fileName,int argc,char** argv)
{
   26c39:	55                   	push   ebp
   26c3a:	89 e5                	mov    ebp,esp
   26c3c:	53                   	push   ebx
   26c3d:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/newloader.c:316
    int lRetVal=-1;
   26c40:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/newloader.c:320
    register int *eax __asm__("eax");
    
    //Open the executable
    void* fPtr=fopen(fileName, "r");
   26c47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26c4a:	83 ec 08             	sub    esp,0x8
   26c4d:	68 55 59 08 00       	push   0x85955
   26c52:	50                   	push   eax
   26c53:	e8 ed 67 ff ff       	call   1d445 <fl_fopen>
   26c58:	83 c4 10             	add    esp,0x10
   26c5b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:321
    if (fPtr==0)
   26c5e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   26c62:	75 21                	jne    26c85 <exec+0x4c>
/home/yogi/src/os/chrisOS/src/newloader.c:323
    {
        printk("Error opening file '%s' (0x%08X), cannot exec\n",fileName,fPtr);
   26c64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26c67:	83 ec 04             	sub    esp,0x4
   26c6a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26c6d:	50                   	push   eax
   26c6e:	68 cc 5e 08 00       	push   0x85ecc
   26c73:	e8 7b 05 00 00       	call   271f3 <printk>
   26c78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:324
        return -1;
   26c7b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   26c80:	e9 ea 00 00 00       	jmp    26d6f <exec+0x136>
/home/yogi/src/os/chrisOS/src/newloader.c:328
    } 
    
    //Get a slot in the load info
    elfInfo_t* elf=&kExecLoadInfo[kExecLoadCount++];
   26c85:	8b 0d 00 04 12 00    	mov    ecx,DWORD PTR ds:0x120400
   26c8b:	a1 04 04 12 00       	mov    eax,ds:0x120404
   26c90:	8d 50 01             	lea    edx,[eax+0x1]
   26c93:	89 15 04 04 12 00    	mov    DWORD PTR ds:0x120404,edx
   26c99:	69 c0 d8 18 00 00    	imul   eax,eax,0x18d8
   26c9f:	01 c8                	add    eax,ecx
   26ca1:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:331
    
    //Load the executable
    loadElf(fPtr,elf,false);
   26ca4:	83 ec 04             	sub    esp,0x4
   26ca7:	6a 00                	push   0x0
   26ca9:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   26cac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26caf:	e8 4e fc ff ff       	call   26902 <loadElf>
   26cb4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:332
    printd(DEBUG_ELF_LOADER,"exec: back from loading ELF file, result=%s\n",elf->loadCompleted?"Success":"Failure");;
   26cb7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26cba:	0f b6 80 d4 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d4]
   26cc1:	84 c0                	test   al,al
   26cc3:	74 07                	je     26ccc <exec+0x93>
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 1)
   26cc5:	b8 fb 5e 08 00       	mov    eax,0x85efb
   26cca:	eb 05                	jmp    26cd1 <exec+0x98>
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 2)
   26ccc:	b8 03 5f 08 00       	mov    eax,0x85f03
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 4)
   26cd1:	83 ec 04             	sub    esp,0x4
   26cd4:	50                   	push   eax
   26cd5:	68 0c 5f 08 00       	push   0x85f0c
   26cda:	68 00 02 00 00       	push   0x200
   26cdf:	e8 2f 05 00 00       	call   27213 <printd>
   26ce4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:333 (discriminator 4)
    fclose(fPtr);
   26ce7:	83 ec 0c             	sub    esp,0xc
   26cea:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26ced:	e8 84 6b ff ff       	call   1d876 <fl_fclose>
   26cf2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:336 (discriminator 4)
    
    //If loaded successfully then execute
    if (elf->loadCompleted)
   26cf5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26cf8:	0f b6 80 d4 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d4]
   26cff:	84 c0                	test   al,al
   26d01:	74 69                	je     26d6c <exec+0x133>
/home/yogi/src/os/chrisOS/src/newloader.c:338
    {
        printd(DEBUG_ELF_LOADER,"exec: Executing %s at 0x%08X, return address is =0x%08X\n", fileName, elf->hdr.e_entry, __builtin_return_address(0));
   26d03:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   26d06:	89 c1                	mov    ecx,eax
   26d08:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26d0b:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   26d0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26d11:	83 ec 0c             	sub    esp,0xc
   26d14:	51                   	push   ecx
   26d15:	52                   	push   edx
   26d16:	50                   	push   eax
   26d17:	68 3c 5f 08 00       	push   0x85f3c
   26d1c:	68 00 02 00 00       	push   0x200
   26d21:	e8 ed 04 00 00       	call   27213 <printd>
   26d26:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:339
        __asm__("push ebx\npush ecx\n"::[argvp] "b" (argv), [argcv] "c" (argc));
   26d29:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26d2c:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26d2f:	89 d3                	mov    ebx,edx
   26d31:	53                   	push   ebx
   26d32:	51                   	push   ecx
/home/yogi/src/os/chrisOS/src/newloader.c:340
        __asm__("mov edx,%[pgmptr]\n"::[pgmptr] "d" (elf->hdr.e_entry));
   26d33:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   26d36:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   26d39:	89 d2                	mov    edx,edx
/home/yogi/src/os/chrisOS/src/newloader.c:341
        __asm__("call edx\n"::[pgmptr] "d" (elf->hdr.e_entry));
   26d3b:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   26d3e:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   26d41:	ff d2                	call   edx
/home/yogi/src/os/chrisOS/src/newloader.c:342
        lRetVal=(uint32_t)eax;
   26d43:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:343
        printd(DEBUG_ELF_LOADER,"exec: Back from executing %s, return value is 0x%08X, 0x%08X, __bra=0x%08X\n", fileName, lRetVal, &fileName, __builtin_return_address(0));
   26d46:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   26d49:	89 c2                	mov    edx,eax
   26d4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26d4e:	83 ec 08             	sub    esp,0x8
   26d51:	52                   	push   edx
   26d52:	8d 55 08             	lea    edx,[ebp+0x8]
   26d55:	52                   	push   edx
   26d56:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26d59:	50                   	push   eax
   26d5a:	68 78 5f 08 00       	push   0x85f78
   26d5f:	68 00 02 00 00       	push   0x200
   26d64:	e8 aa 04 00 00       	call   27213 <printd>
   26d69:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:345
    }
    return lRetVal;
   26d6c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/newloader.c:346
}
   26d6f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   26d72:	c9                   	leave  
   26d73:	c3                   	ret    

00026d74 <panic>:
panic():
/home/yogi/src/os/chrisOS/src/panic.c:8
#include <stdarg.h>
#include <time.h>
#include "printf.h"

void __attribute__((noinline))panic(const char *format, ...)
{
   26d74:	55                   	push   ebp
   26d75:	89 e5                	mov    ebp,esp
   26d77:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/panic.c:10
    va_list args;
    va_start( args, format );
   26d7a:	8d 45 0c             	lea    eax,[ebp+0xc]
   26d7d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/panic.c:11
    printk("\n>>>panic at instruction prior to address 0x%08X<<<\n", __builtin_return_address(0));
   26d80:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   26d83:	83 ec 08             	sub    esp,0x8
   26d86:	50                   	push   eax
   26d87:	68 c4 5f 08 00       	push   0x85fc4
   26d8c:	e8 62 04 00 00       	call   271f3 <printk>
   26d91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:12
    printk("  >>>");
   26d94:	83 ec 0c             	sub    esp,0xc
   26d97:	68 f9 5f 08 00       	push   0x85ff9
   26d9c:	e8 52 04 00 00       	call   271f3 <printk>
   26da1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:13
    printk_valist( format,args);
   26da4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26da7:	83 ec 08             	sub    esp,0x8
   26daa:	50                   	push   eax
   26dab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26dae:	e8 25 04 00 00       	call   271d8 <printk_valist>
   26db3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:15 (discriminator 1)
    panicLoop: 
    __asm__("cli\nhlt\n");
   26db6:	fa                   	cli    
   26db7:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/panic.c:16 (discriminator 1)
    goto panicLoop;
   26db8:	eb fc                	jmp    26db6 <panic+0x42>
   26dba:	66 90                	xchg   ax,ax

00026dbc <printchar>:
printchar():
/home/yogi/src/os/chrisOS/src/printf.c:41
//extern bool pauseDisplay(bool offerToQuit);
extern uint32_t kDebugLevel;
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
   26dbc:	55                   	push   ebp
   26dbd:	89 e5                	mov    ebp,esp
   26dbf:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:43
	
	if (str) {
   26dc2:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   26dc6:	74 19                	je     26de1 <printchar+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:44
		**str = c;
   26dc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26dcb:	8b 00                	mov    eax,DWORD PTR [eax]
   26dcd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26dd0:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/printf.c:45
		++(*str);
   26dd2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26dd5:	8b 00                	mov    eax,DWORD PTR [eax]
   26dd7:	8d 50 01             	lea    edx,[eax+0x1]
   26dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26ddd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/printf.c:48
	}
	else terminal_putchar((unsigned char)c);
}
   26ddf:	eb 12                	jmp    26df3 <printchar+0x37>
/home/yogi/src/os/chrisOS/src/printf.c:47
	
	if (str) {
		**str = c;
		++(*str);
	}
	else terminal_putchar((unsigned char)c);
   26de1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26de4:	0f b6 c0             	movzx  eax,al
   26de7:	83 ec 0c             	sub    esp,0xc
   26dea:	50                   	push   eax
   26deb:	e8 7a 0f ff ff       	call   17d6a <terminal_putchar>
   26df0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:48
}
   26df3:	90                   	nop
   26df4:	c9                   	leave  
   26df5:	c3                   	ret    

00026df6 <prints>:
prints():
/home/yogi/src/os/chrisOS/src/printf.c:54

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   26df6:	55                   	push   ebp
   26df7:	89 e5                	mov    ebp,esp
   26df9:	57                   	push   edi
   26dfa:	56                   	push   esi
   26dfb:	53                   	push   ebx
   26dfc:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:55
	register int pc = 0, padchar = ' ';
   26dff:	bb 00 00 00 00       	mov    ebx,0x0
   26e04:	c7 45 e4 20 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/printf.c:57

	if (width > 0) {
   26e0b:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   26e0f:	7e 39                	jle    26e4a <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:58
		register int len = 0;
   26e11:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOS/src/printf.c:60
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   26e16:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
   26e19:	eb 06                	jmp    26e21 <prints+0x2b>
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 3)
   26e1b:	83 c6 01             	add    esi,0x1
   26e1e:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 1)
   26e21:	0f b6 07             	movzx  eax,BYTE PTR [edi]
   26e24:	84 c0                	test   al,al
   26e26:	75 f3                	jne    26e1b <prints+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:61
		if (len >= width) width = 0;
   26e28:	3b 75 10             	cmp    esi,DWORD PTR [ebp+0x10]
   26e2b:	7c 09                	jl     26e36 <prints+0x40>
/home/yogi/src/os/chrisOS/src/printf.c:61 (discriminator 1)
   26e2d:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
   26e34:	eb 03                	jmp    26e39 <prints+0x43>
/home/yogi/src/os/chrisOS/src/printf.c:62
		else width -= len;
   26e36:	29 75 10             	sub    DWORD PTR [ebp+0x10],esi
/home/yogi/src/os/chrisOS/src/printf.c:63
		if (pad & PAD_ZERO) padchar = '0';
   26e39:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   26e3c:	83 e0 02             	and    eax,0x2
   26e3f:	85 c0                	test   eax,eax
   26e41:	74 07                	je     26e4a <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:63 (discriminator 1)
   26e43:	c7 45 e4 30 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x30
/home/yogi/src/os/chrisOS/src/printf.c:65
	}
	if (!(pad & PAD_RIGHT)) {
   26e4a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   26e4d:	83 e0 01             	and    eax,0x1
   26e50:	85 c0                	test   eax,eax
   26e52:	75 41                	jne    26e95 <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:66
		for ( ; width > 0; --width) {
   26e54:	eb 18                	jmp    26e6e <prints+0x78>
/home/yogi/src/os/chrisOS/src/printf.c:67 (discriminator 2)
			printchar (out, padchar);
   26e56:	83 ec 08             	sub    esp,0x8
   26e59:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   26e5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26e5f:	e8 58 ff ff ff       	call   26dbc <printchar>
   26e64:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:68 (discriminator 2)
			++pc;
   26e67:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 2)
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
   26e6a:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 1)
   26e6e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   26e72:	7f e2                	jg     26e56 <prints+0x60>
/home/yogi/src/os/chrisOS/src/printf.c:71
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   26e74:	eb 1f                	jmp    26e95 <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:72 (discriminator 2)
		printchar (out, *string);
   26e76:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e79:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e7c:	0f be c0             	movsx  eax,al
   26e7f:	83 ec 08             	sub    esp,0x8
   26e82:	50                   	push   eax
   26e83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26e86:	e8 31 ff ff ff       	call   26dbc <printchar>
   26e8b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:73 (discriminator 2)
		++pc;
   26e8e:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   26e91:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 1)
   26e95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e98:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26e9b:	84 c0                	test   al,al
   26e9d:	75 d7                	jne    26e76 <prints+0x80>
/home/yogi/src/os/chrisOS/src/printf.c:75
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   26e9f:	eb 18                	jmp    26eb9 <prints+0xc3>
/home/yogi/src/os/chrisOS/src/printf.c:76 (discriminator 2)
		printchar (out, padchar);
   26ea1:	83 ec 08             	sub    esp,0x8
   26ea4:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   26ea7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26eaa:	e8 0d ff ff ff       	call   26dbc <printchar>
   26eaf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:77 (discriminator 2)
		++pc;
   26eb2:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 2)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   26eb5:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 1)
   26eb9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   26ebd:	7f e2                	jg     26ea1 <prints+0xab>
/home/yogi/src/os/chrisOS/src/printf.c:80
		printchar (out, padchar);
		++pc;
	}

	return pc;
   26ebf:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:81
}
   26ec1:	8d 65 f4             	lea    esp,[ebp-0xc]
   26ec4:	5b                   	pop    ebx
   26ec5:	5e                   	pop    esi
   26ec6:	5f                   	pop    edi
   26ec7:	5d                   	pop    ebp
   26ec8:	c3                   	ret    

00026ec9 <printi>:
printi():
/home/yogi/src/os/chrisOS/src/printf.c:87

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   26ec9:	55                   	push   ebp
   26eca:	89 e5                	mov    ebp,esp
   26ecc:	57                   	push   edi
   26ecd:	56                   	push   esi
   26ece:	53                   	push   ebx
   26ecf:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/printf.c:90
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
   26ed2:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
   26ed9:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
/home/yogi/src/os/chrisOS/src/printf.c:91
	register unsigned int u = i;
   26ee0:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/printf.c:93

	if (i == 0) {
   26ee3:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   26ee7:	75 22                	jne    26f0b <printi+0x42>
/home/yogi/src/os/chrisOS/src/printf.c:94
		print_buf[0] = '0';
   26ee9:	c6 45 dc 30          	mov    BYTE PTR [ebp-0x24],0x30
/home/yogi/src/os/chrisOS/src/printf.c:95
		print_buf[1] = '\0';
   26eed:	c6 45 dd 00          	mov    BYTE PTR [ebp-0x23],0x0
/home/yogi/src/os/chrisOS/src/printf.c:96
		return prints (out, print_buf, width, pad);
   26ef1:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   26ef4:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   26ef7:	8d 45 dc             	lea    eax,[ebp-0x24]
   26efa:	50                   	push   eax
   26efb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26efe:	e8 f3 fe ff ff       	call   26df6 <prints>
   26f03:	83 c4 10             	add    esp,0x10
   26f06:	e9 af 00 00 00       	jmp    26fba <printi+0xf1>
/home/yogi/src/os/chrisOS/src/printf.c:99
	}

	if (sg && b == 10 && i < 0) {
   26f0b:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   26f0f:	74 1a                	je     26f2b <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 1)
   26f11:	83 7d 10 0a          	cmp    DWORD PTR [ebp+0x10],0xa
   26f15:	75 14                	jne    26f2b <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 2)
   26f17:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   26f1b:	79 0e                	jns    26f2b <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:100
		neg = 1;
   26f1d:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x1
/home/yogi/src/os/chrisOS/src/printf.c:101
		u = -i;
   26f24:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f27:	f7 d8                	neg    eax
   26f29:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:104
	}

	s = print_buf + PRINT_BUF_LEN-1;
   26f2b:	8d 5d dc             	lea    ebx,[ebp-0x24]
   26f2e:	83 c3 0b             	add    ebx,0xb
/home/yogi/src/os/chrisOS/src/printf.c:105
	*s = '\0';
   26f31:	c6 03 00             	mov    BYTE PTR [ebx],0x0
/home/yogi/src/os/chrisOS/src/printf.c:107

	while (u) {
   26f34:	eb 35                	jmp    26f6b <printi+0xa2>
/home/yogi/src/os/chrisOS/src/printf.c:108
		t = u % b;
   26f36:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   26f39:	89 f0                	mov    eax,esi
   26f3b:	ba 00 00 00 00       	mov    edx,0x0
   26f40:	f7 f1                	div    ecx
   26f42:	89 d0                	mov    eax,edx
   26f44:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:109
		if( t >= 10 )
   26f46:	83 ff 09             	cmp    edi,0x9
   26f49:	7e 08                	jle    26f53 <printi+0x8a>
/home/yogi/src/os/chrisOS/src/printf.c:110
			t += letbase - '0' - 10;
   26f4b:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
   26f4e:	83 e8 3a             	sub    eax,0x3a
   26f51:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:111
		*--s = t + '0';
   26f53:	83 eb 01             	sub    ebx,0x1
   26f56:	89 f8                	mov    eax,edi
   26f58:	83 c0 30             	add    eax,0x30
   26f5b:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/printf.c:112
		u /= b;
   26f5d:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   26f60:	89 f0                	mov    eax,esi
   26f62:	ba 00 00 00 00       	mov    edx,0x0
   26f67:	f7 f1                	div    ecx
   26f69:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:107
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
   26f6b:	85 f6                	test   esi,esi
   26f6d:	75 c7                	jne    26f36 <printi+0x6d>
/home/yogi/src/os/chrisOS/src/printf.c:115
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
   26f6f:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   26f73:	74 30                	je     26fa5 <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:116
		if( width && (pad & PAD_ZERO) ) {
   26f75:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   26f79:	74 24                	je     26f9f <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:116 (discriminator 1)
   26f7b:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   26f7e:	83 e0 02             	and    eax,0x2
   26f81:	85 c0                	test   eax,eax
   26f83:	74 1a                	je     26f9f <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:117
			printchar (out, '-');
   26f85:	83 ec 08             	sub    esp,0x8
   26f88:	6a 2d                	push   0x2d
   26f8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26f8d:	e8 2a fe ff ff       	call   26dbc <printchar>
   26f92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:118
			++pc;
   26f95:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/printf.c:119
			--width;
   26f99:	83 6d 18 01          	sub    DWORD PTR [ebp+0x18],0x1
   26f9d:	eb 06                	jmp    26fa5 <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:122
		}
		else {
			*--s = '-';
   26f9f:	83 eb 01             	sub    ebx,0x1
   26fa2:	c6 03 2d             	mov    BYTE PTR [ebx],0x2d
/home/yogi/src/os/chrisOS/src/printf.c:126
		}
	}

	return pc + prints (out, s, width, pad);
   26fa5:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   26fa8:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   26fab:	53                   	push   ebx
   26fac:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26faf:	e8 42 fe ff ff       	call   26df6 <prints>
   26fb4:	83 c4 10             	add    esp,0x10
   26fb7:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
/home/yogi/src/os/chrisOS/src/printf.c:127 (discriminator 1)
}
   26fba:	8d 65 f4             	lea    esp,[ebp-0xc]
   26fbd:	5b                   	pop    ebx
   26fbe:	5e                   	pop    esi
   26fbf:	5f                   	pop    edi
   26fc0:	5d                   	pop    ebp
   26fc1:	c3                   	ret    

00026fc2 <print>:
print():
/home/yogi/src/os/chrisOS/src/printf.c:130

static int print(char **out, const char *format, va_list args )
{
   26fc2:	55                   	push   ebp
   26fc3:	89 e5                	mov    ebp,esp
   26fc5:	57                   	push   edi
   26fc6:	56                   	push   esi
   26fc7:	53                   	push   ebx
   26fc8:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:132
	register int width, pad;
	register int pc = 0;
   26fcb:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/src/printf.c:135
	char scr[2];

	for (; *format != 0; ++format) {
   26fd0:	e9 da 01 00 00       	jmp    271af <print+0x1ed>
/home/yogi/src/os/chrisOS/src/printf.c:136
		if (*format == '%') {
   26fd5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26fd8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26fdb:	3c 25                	cmp    al,0x25
   26fdd:	0f 85 ad 01 00 00    	jne    27190 <print+0x1ce>
/home/yogi/src/os/chrisOS/src/printf.c:137
			++format;
   26fe3:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:138
			width = pad = 0;
   26fe7:	bf 00 00 00 00       	mov    edi,0x0
   26fec:	89 fe                	mov    esi,edi
/home/yogi/src/os/chrisOS/src/printf.c:139
			if (*format == '\0') break;
   26fee:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ff1:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26ff4:	84 c0                	test   al,al
   26ff6:	0f 84 c3 01 00 00    	je     271bf <print+0x1fd>
/home/yogi/src/os/chrisOS/src/printf.c:140
			if (*format == '%') goto out;
   26ffc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26fff:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27002:	3c 25                	cmp    al,0x25
   27004:	0f 84 85 01 00 00    	je     2718f <print+0x1cd>
/home/yogi/src/os/chrisOS/src/printf.c:141
			if (*format == '-') {
   2700a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2700d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27010:	3c 2d                	cmp    al,0x2d
   27012:	75 12                	jne    27026 <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:142
				++format;
   27014:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:143
				pad = PAD_RIGHT;
   27018:	bf 01 00 00 00       	mov    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:145
			}
			while (*format == '0') {
   2701d:	eb 07                	jmp    27026 <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:146
				++format;
   2701f:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:147
				pad |= PAD_ZERO;
   27023:	83 cf 02             	or     edi,0x2
/home/yogi/src/os/chrisOS/src/printf.c:145
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
   27026:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27029:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2702c:	3c 30                	cmp    al,0x30
   2702e:	74 ef                	je     2701f <print+0x5d>
/home/yogi/src/os/chrisOS/src/printf.c:149
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   27030:	eb 1d                	jmp    2704f <print+0x8d>
/home/yogi/src/os/chrisOS/src/printf.c:150 (discriminator 3)
				width *= 10;
   27032:	89 f0                	mov    eax,esi
   27034:	c1 e0 02             	shl    eax,0x2
   27037:	01 f0                	add    eax,esi
   27039:	01 c0                	add    eax,eax
   2703b:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:151 (discriminator 3)
				width += *format - '0';
   2703d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27040:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27043:	0f be c0             	movsx  eax,al
   27046:	83 e8 30             	sub    eax,0x30
   27049:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 3)
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   2704b:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 1)
   2704f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27052:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27055:	3c 2f                	cmp    al,0x2f
   27057:	7e 0a                	jle    27063 <print+0xa1>
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 2)
   27059:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2705c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2705f:	3c 39                	cmp    al,0x39
   27061:	7e cf                	jle    27032 <print+0x70>
/home/yogi/src/os/chrisOS/src/printf.c:153
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
   27063:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27066:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27069:	3c 73                	cmp    al,0x73
   2706b:	75 2b                	jne    27098 <print+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:154
				register char *s = (char *)va_arg( args, int );
   2706d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27070:	8d 50 04             	lea    edx,[eax+0x4]
   27073:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27076:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/printf.c:155
				pc += prints (out, s?s:"(null)", width, pad);
   27078:	85 c0                	test   eax,eax
   2707a:	74 02                	je     2707e <print+0xbc>
   2707c:	eb 05                	jmp    27083 <print+0xc1>
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 2)
   2707e:	b8 ff 5f 08 00       	mov    eax,0x85fff
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 4)
   27083:	57                   	push   edi
   27084:	56                   	push   esi
   27085:	50                   	push   eax
   27086:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27089:	e8 68 fd ff ff       	call   26df6 <prints>
   2708e:	83 c4 10             	add    esp,0x10
   27091:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:156 (discriminator 4)
				continue;
   27093:	e9 13 01 00 00       	jmp    271ab <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:158
			}
			if( *format == 'd' ) {
   27098:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2709b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2709e:	3c 64                	cmp    al,0x64
   270a0:	75 29                	jne    270cb <print+0x109>
/home/yogi/src/os/chrisOS/src/printf.c:159
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   270a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   270a5:	8d 50 04             	lea    edx,[eax+0x4]
   270a8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   270ab:	8b 00                	mov    eax,DWORD PTR [eax]
   270ad:	83 ec 04             	sub    esp,0x4
   270b0:	6a 61                	push   0x61
   270b2:	57                   	push   edi
   270b3:	56                   	push   esi
   270b4:	6a 01                	push   0x1
   270b6:	6a 0a                	push   0xa
   270b8:	50                   	push   eax
   270b9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   270bc:	e8 08 fe ff ff       	call   26ec9 <printi>
   270c1:	83 c4 20             	add    esp,0x20
   270c4:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:160
				continue;
   270c6:	e9 e0 00 00 00       	jmp    271ab <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:162
			}
			if( *format == 'x' ) {
   270cb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   270ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   270d1:	3c 78                	cmp    al,0x78
   270d3:	75 29                	jne    270fe <print+0x13c>
/home/yogi/src/os/chrisOS/src/printf.c:163
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   270d5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   270d8:	8d 50 04             	lea    edx,[eax+0x4]
   270db:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   270de:	8b 00                	mov    eax,DWORD PTR [eax]
   270e0:	83 ec 04             	sub    esp,0x4
   270e3:	6a 61                	push   0x61
   270e5:	57                   	push   edi
   270e6:	56                   	push   esi
   270e7:	6a 00                	push   0x0
   270e9:	6a 10                	push   0x10
   270eb:	50                   	push   eax
   270ec:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   270ef:	e8 d5 fd ff ff       	call   26ec9 <printi>
   270f4:	83 c4 20             	add    esp,0x20
   270f7:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:164
				continue;
   270f9:	e9 ad 00 00 00       	jmp    271ab <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:166
			}
			if( *format == 'X' ) {
   270fe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27101:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27104:	3c 58                	cmp    al,0x58
   27106:	75 26                	jne    2712e <print+0x16c>
/home/yogi/src/os/chrisOS/src/printf.c:167
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   27108:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2710b:	8d 50 04             	lea    edx,[eax+0x4]
   2710e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27111:	8b 00                	mov    eax,DWORD PTR [eax]
   27113:	83 ec 04             	sub    esp,0x4
   27116:	6a 41                	push   0x41
   27118:	57                   	push   edi
   27119:	56                   	push   esi
   2711a:	6a 00                	push   0x0
   2711c:	6a 10                	push   0x10
   2711e:	50                   	push   eax
   2711f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27122:	e8 a2 fd ff ff       	call   26ec9 <printi>
   27127:	83 c4 20             	add    esp,0x20
   2712a:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:168
				continue;
   2712c:	eb 7d                	jmp    271ab <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:170
			}
			if( *format == 'u' ) {
   2712e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27131:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27134:	3c 75                	cmp    al,0x75
   27136:	75 26                	jne    2715e <print+0x19c>
/home/yogi/src/os/chrisOS/src/printf.c:171
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   27138:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2713b:	8d 50 04             	lea    edx,[eax+0x4]
   2713e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27141:	8b 00                	mov    eax,DWORD PTR [eax]
   27143:	83 ec 04             	sub    esp,0x4
   27146:	6a 61                	push   0x61
   27148:	57                   	push   edi
   27149:	56                   	push   esi
   2714a:	6a 00                	push   0x0
   2714c:	6a 0a                	push   0xa
   2714e:	50                   	push   eax
   2714f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27152:	e8 72 fd ff ff       	call   26ec9 <printi>
   27157:	83 c4 20             	add    esp,0x20
   2715a:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:172
				continue;
   2715c:	eb 4d                	jmp    271ab <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:174
			}
			if( *format == 'c' ) {
   2715e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27161:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27164:	3c 63                	cmp    al,0x63
   27166:	75 43                	jne    271ab <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:176
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   27168:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2716b:	8d 50 04             	lea    edx,[eax+0x4]
   2716e:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27171:	8b 00                	mov    eax,DWORD PTR [eax]
   27173:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/printf.c:177
				scr[1] = '\0';
   27176:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/printf.c:178
				pc += prints (out, scr, width, pad);
   2717a:	57                   	push   edi
   2717b:	56                   	push   esi
   2717c:	8d 45 e6             	lea    eax,[ebp-0x1a]
   2717f:	50                   	push   eax
   27180:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27183:	e8 6e fc ff ff       	call   26df6 <prints>
   27188:	83 c4 10             	add    esp,0x10
   2718b:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:179
				continue;
   2718d:	eb 1c                	jmp    271ab <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:140
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
   2718f:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:184
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
   27190:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27193:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27196:	0f be c0             	movsx  eax,al
   27199:	83 ec 08             	sub    esp,0x8
   2719c:	50                   	push   eax
   2719d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   271a0:	e8 17 fc ff ff       	call   26dbc <printchar>
   271a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:185
			++pc;
   271a8:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:135
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   271ab:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:135 (discriminator 1)
   271af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   271b2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   271b5:	84 c0                	test   al,al
   271b7:	0f 85 18 fe ff ff    	jne    26fd5 <print+0x13>
   271bd:	eb 01                	jmp    271c0 <print+0x1fe>
/home/yogi/src/os/chrisOS/src/printf.c:139
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
   271bf:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:188
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
   271c0:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   271c4:	74 08                	je     271ce <print+0x20c>
/home/yogi/src/os/chrisOS/src/printf.c:188 (discriminator 1)
   271c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   271c9:	8b 00                	mov    eax,DWORD PTR [eax]
   271cb:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/printf.c:190
	va_end( args );
	return pc;
   271ce:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:191
}
   271d0:	8d 65 f4             	lea    esp,[ebp-0xc]
   271d3:	5b                   	pop    ebx
   271d4:	5e                   	pop    esi
   271d5:	5f                   	pop    edi
   271d6:	5d                   	pop    ebp
   271d7:	c3                   	ret    

000271d8 <printk_valist>:
printk_valist():
/home/yogi/src/os/chrisOS/src/printf.c:194

int printk_valist(const char *format, va_list args)
{
   271d8:	55                   	push   ebp
   271d9:	89 e5                	mov    ebp,esp
   271db:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:195
    return print(0, format, args);
   271de:	83 ec 04             	sub    esp,0x4
   271e1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   271e4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   271e7:	6a 00                	push   0x0
   271e9:	e8 d4 fd ff ff       	call   26fc2 <print>
   271ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:196
}
   271f1:	c9                   	leave  
   271f2:	c3                   	ret    

000271f3 <printk>:
printk():
/home/yogi/src/os/chrisOS/src/printf.c:199

int printk(const char *format, ...)
{
   271f3:	55                   	push   ebp
   271f4:	89 e5                	mov    ebp,esp
   271f6:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:201
        va_list args;
        va_start( args, format );
   271f9:	8d 45 0c             	lea    eax,[ebp+0xc]
   271fc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:202
        return printk_valist(format, args);
   271ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27202:	83 ec 08             	sub    esp,0x8
   27205:	50                   	push   eax
   27206:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27209:	e8 ca ff ff ff       	call   271d8 <printk_valist>
   2720e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:203
}
   27211:	c9                   	leave  
   27212:	c3                   	ret    

00027213 <printd>:
printd():
/home/yogi/src/os/chrisOS/src/printf.c:209

#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
   27213:	55                   	push   ebp
   27214:	89 e5                	mov    ebp,esp
   27216:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:210
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
   27219:	a1 38 03 12 00       	mov    eax,ds:0x120338
   2721e:	23 45 08             	and    eax,DWORD PTR [ebp+0x8]
   27221:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   27224:	75 1a                	jne    27240 <printd+0x2d>
/home/yogi/src/os/chrisOS/src/printf.c:214
    {
        va_list args;

        va_start( args, format );
   27226:	8d 45 10             	lea    eax,[ebp+0x10]
   27229:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:220
//        if (++printDLineCount==SYS_VGA_HEIGHT-1)
//        {
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
   2722c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2722f:	83 ec 08             	sub    esp,0x8
   27232:	50                   	push   eax
   27233:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27236:	e8 9d ff ff ff       	call   271d8 <printk_valist>
   2723b:	83 c4 10             	add    esp,0x10
   2723e:	eb 05                	jmp    27245 <printd+0x32>
/home/yogi/src/os/chrisOS/src/printf.c:222
    }
    return 0;
   27240:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/printf.c:223 (discriminator 1)
}
   27245:	c9                   	leave  
   27246:	c3                   	ret    

00027247 <sprintf>:
sprintf():
/home/yogi/src/os/chrisOS/src/printf.c:227
#endif

int sprintf(char *out, const char *format, ...)
{
   27247:	55                   	push   ebp
   27248:	89 e5                	mov    ebp,esp
   2724a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:230
        va_list args;
        
        va_start( args, format );
   2724d:	8d 45 10             	lea    eax,[ebp+0x10]
   27250:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:231
        return print( &out, format, args );
   27253:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27256:	83 ec 04             	sub    esp,0x4
   27259:	50                   	push   eax
   2725a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2725d:	8d 45 08             	lea    eax,[ebp+0x8]
   27260:	50                   	push   eax
   27261:	e8 5c fd ff ff       	call   26fc2 <print>
   27266:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:232
}
   27269:	c9                   	leave  
   2726a:	c3                   	ret    
   2726b:	90                   	nop

0002726c <strcat>:
strcat():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   char *
   STRCAT (char *dest, const char *src)
   {
   2726c:	55                   	push   ebp
   2726d:	89 e5                	mov    ebp,esp
   2726f:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/strcat.c:31
     strcpy (dest + strlen (dest), src);
   27272:	83 ec 0c             	sub    esp,0xc
   27275:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27278:	e8 47 01 00 00       	call   273c4 <strlen>
   2727d:	83 c4 10             	add    esp,0x10
   27280:	89 c2                	mov    edx,eax
   27282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27285:	01 d0                	add    eax,edx
   27287:	83 ec 08             	sub    esp,0x8
   2728a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2728d:	50                   	push   eax
   2728e:	e8 c1 00 00 00       	call   27354 <strcpy>
   27293:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:32
     return dest;
   27296:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcat.c:33
   }
   27299:	c9                   	leave  
   2729a:	c3                   	ret    

0002729b <concatenate>:
concatenate():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:35

   void concatenate(char p[], char q[]) {
   2729b:	55                   	push   ebp
   2729c:	89 e5                	mov    ebp,esp
   2729e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:38
   int c, d;
 
   c = 0;
   272a1:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
 
   while (p[c] != '\0') {
   272a8:	eb 04                	jmp    272ae <concatenate+0x13>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:41
      c++;  	
   272aa:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
   272ae:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   272b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   272b4:	01 d0                	add    eax,edx
   272b6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   272b9:	84 c0                	test   al,al
   272bb:	75 ed                	jne    272aa <concatenate+0xf>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:44
      c++;  	
   }
 
   d = 0;
   272bd:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
 
   while (q[d] != '\0') {
   272c4:	eb 1d                	jmp    272e3 <concatenate+0x48>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:47
      p[c] = q[d];
   272c6:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   272c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   272cc:	01 c2                	add    edx,eax
   272ce:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   272d1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   272d4:	01 c8                	add    eax,ecx
   272d6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   272d9:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/strings/strcat.c:48
      d++;
   272db:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:49
      c++;	
   272df:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
   272e3:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   272e6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   272e9:	01 d0                	add    eax,edx
   272eb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   272ee:	84 c0                	test   al,al
   272f0:	75 d4                	jne    272c6 <concatenate+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:52
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
   272f2:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   272f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   272f8:	01 d0                	add    eax,edx
   272fa:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:53
   272fd:	90                   	nop
   272fe:	c9                   	leave  
   272ff:	c3                   	ret    

00027300 <strcmp>:
strcmp():
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
int strcmp (const char *p1, const char *p2)
{
   27300:	55                   	push   ebp
   27301:	89 e5                	mov    ebp,esp
   27303:	56                   	push   esi
   27304:	53                   	push   ebx
   27305:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
   27308:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
   2730b:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
   2730e:	89 d8                	mov    eax,ebx
   27310:	8d 58 01             	lea    ebx,[eax+0x1]
   27313:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27316:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
   27319:	89 f0                	mov    eax,esi
   2731b:	8d 70 01             	lea    esi,[eax+0x1]
   2731e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27321:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
   27324:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
   27328:	75 0e                	jne    27338 <strcmp+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:35
	return c1 - c2;
   2732a:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2732e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27332:	29 c2                	sub    edx,eax
   27334:	89 d0                	mov    eax,edx
   27336:	eb 15                	jmp    2734d <strcmp+0x4d>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
   27338:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2733c:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   2733f:	74 cd                	je     2730e <strcmp+0xe>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:39

  return c1 - c2;
   27341:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   27345:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27349:	29 c2                	sub    edx,eax
   2734b:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:40
}
   2734d:	83 c4 10             	add    esp,0x10
   27350:	5b                   	pop    ebx
   27351:	5e                   	pop    esi
   27352:	5d                   	pop    ebp
   27353:	c3                   	ret    

00027354 <strcpy>:
strcpy():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:5
#include "strings.h"

char *
strcpy(char *s1, const char *s2)
{
   27354:	55                   	push   ebp
   27355:	89 e5                	mov    ebp,esp
   27357:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:6
    char *s = s1;
   2735a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2735d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
   27360:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7 (discriminator 1)
   27361:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27364:	8d 50 01             	lea    edx,[eax+0x1]
   27367:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   2736a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2736d:	8d 4a 01             	lea    ecx,[edx+0x1]
   27370:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   27373:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   27376:	88 10                	mov    BYTE PTR [eax],dl
   27378:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2737b:	84 c0                	test   al,al
   2737d:	75 e2                	jne    27361 <strcpy+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:9
	;
    return (s1);
   2737f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:10
}
   27382:	c9                   	leave  
   27383:	c3                   	ret    

00027384 <strcpyc>:
strcpyc():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:14

char *
strcpyc(char *s1, const char *s2, unsigned count)
{
   27384:	55                   	push   ebp
   27385:	89 e5                	mov    ebp,esp
   27387:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:15
    char *s = s1;
   2738a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2738d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16
    while ((*s++ = *s2++) != 0 && count-->0)
   27390:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 2)
   27391:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27394:	8d 50 01             	lea    edx,[eax+0x1]
   27397:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   2739a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2739d:	8d 4a 01             	lea    ecx,[edx+0x1]
   273a0:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   273a3:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   273a6:	88 10                	mov    BYTE PTR [eax],dl
   273a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   273ab:	84 c0                	test   al,al
   273ad:	74 0d                	je     273bc <strcpyc+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 1)
   273af:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   273b2:	8d 50 ff             	lea    edx,[eax-0x1]
   273b5:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   273b8:	85 c0                	test   eax,eax
   273ba:	75 d5                	jne    27391 <strcpyc+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:18
	;
    return (s1);
   273bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:19
}
   273bf:	c9                   	leave  
   273c0:	c3                   	ret    
   273c1:	66 90                	xchg   ax,ax
   273c3:	90                   	nop

000273c4 <strlen>:
strlen():
/home/yogi/src/os/chrisOS/src/strings/strlen.c:3
#include <stddef.h>

size_t strlen(const char* str) {
   273c4:	55                   	push   ebp
   273c5:	89 e5                	mov    ebp,esp
   273c7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strlen.c:4
          size_t ret = 0;
   273ca:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
   273d1:	eb 04                	jmp    273d7 <strlen+0x13>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:6
                ret++;
   273d3:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
   273d7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   273da:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   273dd:	01 d0                	add    eax,edx
   273df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   273e2:	84 c0                	test   al,al
   273e4:	75 ed                	jne    273d3 <strlen+0xf>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
   273e6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/strings/strlen.c:8
}
   273e9:	c9                   	leave  
   273ea:	c3                   	ret    
   273eb:	90                   	nop

000273ec <strtoul>:
strtoul():
/home/yogi/src/os/chrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
strtoul(const char *nptr, char **endptr, register int base)
{
   273ec:	55                   	push   ebp
   273ed:	89 e5                	mov    ebp,esp
   273ef:	57                   	push   edi
   273f0:	56                   	push   esi
   273f1:	53                   	push   ebx
   273f2:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
   273f5:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   273f8:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   273ff:	89 f0                	mov    eax,esi
   27401:	8d 70 01             	lea    esi,[eax+0x1]
   27404:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27407:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
   2740a:	83 fb 20             	cmp    ebx,0x20
   2740d:	74 f0                	je     273ff <strtoul+0x13>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:73
	if (c == '-') {
   2740f:	83 fb 2d             	cmp    ebx,0x2d
   27412:	75 14                	jne    27428 <strtoul+0x3c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:74
		neg = 1;
   27414:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:75
		c = *s++;
   2741b:	89 f0                	mov    eax,esi
   2741d:	8d 70 01             	lea    esi,[eax+0x1]
   27420:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27423:	0f be d8             	movsx  ebx,al
   27426:	eb 10                	jmp    27438 <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:76
	} else if (c == '+')
   27428:	83 fb 2b             	cmp    ebx,0x2b
   2742b:	75 0b                	jne    27438 <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:77
		c = *s++;
   2742d:	89 f0                	mov    eax,esi
   2742f:	8d 70 01             	lea    esi,[eax+0x1]
   27432:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27435:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
   27438:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2743c:	74 06                	je     27444 <strtoul+0x58>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 2)
   2743e:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   27442:	75 26                	jne    2746a <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 3)
   27444:	83 fb 30             	cmp    ebx,0x30
   27447:	75 21                	jne    2746a <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
   27449:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   2744c:	3c 78                	cmp    al,0x78
   2744e:	74 07                	je     27457 <strtoul+0x6b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79 (discriminator 1)
   27450:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27453:	3c 58                	cmp    al,0x58
   27455:	75 13                	jne    2746a <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:80
		c = s[1];
   27457:	8d 46 01             	lea    eax,[esi+0x1]
   2745a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2745d:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:81
		s += 2;
   27460:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/stroul.c:82
		base = 16;
   27463:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
   2746a:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2746e:	75 14                	jne    27484 <strtoul+0x98>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
   27470:	83 fb 30             	cmp    ebx,0x30
   27473:	75 07                	jne    2747c <strtoul+0x90>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 1)
   27475:	b8 08 00 00 00       	mov    eax,0x8
   2747a:	eb 05                	jmp    27481 <strtoul+0x95>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 2)
   2747c:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 4)
   27481:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   27484:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27487:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2748c:	ba 00 00 00 00       	mov    edx,0x0
   27491:	f7 f1                	div    ecx
   27493:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   27496:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27499:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2749e:	ba 00 00 00 00       	mov    edx,0x0
   274a3:	f7 f1                	div    ecx
   274a5:	89 d0                	mov    eax,edx
   274a7:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
   274a9:	bf 00 00 00 00       	mov    edi,0x0
   274ae:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
   274b3:	8d 43 d0             	lea    eax,[ebx-0x30]
   274b6:	83 f8 09             	cmp    eax,0x9
   274b9:	77 05                	ja     274c0 <strtoul+0xd4>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:90
			c -= '0';
   274bb:	83 eb 30             	sub    ebx,0x30
   274be:	eb 25                	jmp    274e5 <strtoul+0xf9>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
   274c0:	89 d8                	mov    eax,ebx
   274c2:	83 c8 20             	or     eax,0x20
   274c5:	83 e8 61             	sub    eax,0x61
   274c8:	83 f8 19             	cmp    eax,0x19
   274cb:	77 56                	ja     27523 <strtoul+0x137>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   274cd:	83 fb 40             	cmp    ebx,0x40
   274d0:	7e 0c                	jle    274de <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 1)
   274d2:	83 fb 5a             	cmp    ebx,0x5a
   274d5:	7f 07                	jg     274de <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 3)
   274d7:	b8 37 00 00 00       	mov    eax,0x37
   274dc:	eb 05                	jmp    274e3 <strtoul+0xf7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 4)
   274de:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 6)
   274e3:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
   274e5:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   274e8:	7d 3c                	jge    27526 <strtoul+0x13a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   274ea:	89 c8                	mov    eax,ecx
   274ec:	85 c0                	test   eax,eax
   274ee:	78 10                	js     27500 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 1)
   274f0:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   274f3:	77 0b                	ja     27500 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 2)
   274f5:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   274f8:	75 0d                	jne    27507 <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 3)
   274fa:	89 d0                	mov    eax,edx
   274fc:	39 c3                	cmp    ebx,eax
   274fe:	7e 07                	jle    27507 <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:98
			any = -1;
   27500:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   27505:	eb 0f                	jmp    27516 <strtoul+0x12a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:100
		else {
			any = 1;
   27507:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:101
			acc *= base;
   2750c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2750f:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:102
			acc += c;
   27512:	89 d8                	mov    eax,ebx
   27514:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   27516:	89 f0                	mov    eax,esi
   27518:	8d 70 01             	lea    esi,[eax+0x1]
   2751b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2751e:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   27521:	eb 90                	jmp    274b3 <strtoul+0xc7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   27523:	90                   	nop
   27524:	eb 01                	jmp    27527 <strtoul+0x13b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
   27526:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   27527:	89 c8                	mov    eax,ecx
   27529:	85 c0                	test   eax,eax
   2752b:	79 07                	jns    27534 <strtoul+0x148>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
   2752d:	bf ff ff ff ff       	mov    edi,0xffffffff
   27532:	eb 08                	jmp    2753c <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:107
	} else if (neg)
   27534:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27538:	74 02                	je     2753c <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:108
		acc = -acc;
   2753a:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:109
	if (endptr != 0)
   2753c:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27540:	74 13                	je     27555 <strtoul+0x169>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
   27542:	89 c8                	mov    eax,ecx
   27544:	85 c0                	test   eax,eax
   27546:	74 05                	je     2754d <strtoul+0x161>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 1)
   27548:	8d 46 ff             	lea    eax,[esi-0x1]
   2754b:	eb 03                	jmp    27550 <strtoul+0x164>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 2)
   2754d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 4)
   27550:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27553:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:111
	return (acc);
   27555:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:112
}
   27557:	83 c4 08             	add    esp,0x8
   2755a:	5b                   	pop    ebx
   2755b:	5e                   	pop    esi
   2755c:	5f                   	pop    edi
   2755d:	5d                   	pop    ebp
   2755e:	c3                   	ret    
   2755f:	90                   	nop

00027560 <strleft>:
strleft():
/home/yogi/src/os/chrisOS/src/strings/strparts.c:2
char* strleft(char* val, int cnt)
{
   27560:	55                   	push   ebp
   27561:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
   27563:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27566:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27569:	01 d0                	add    eax,edx
   2756b:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strparts.c:4
    return val;
   2756e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strparts.c:5
}
   27571:	5d                   	pop    ebp
   27572:	c3                   	ret    
   27573:	90                   	nop

00027574 <strtol>:
strtol():
/home/yogi/src/os/chrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long
strtol(const char *nptr, char **endptr, register int base)
{
   27574:	55                   	push   ebp
   27575:	89 e5                	mov    ebp,esp
   27577:	57                   	push   edi
   27578:	56                   	push   esi
   27579:	53                   	push   ebx
   2757a:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
   2757d:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   27580:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   27587:	89 f0                	mov    eax,esi
   27589:	8d 70 01             	lea    esi,[eax+0x1]
   2758c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2758f:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
   27592:	83 fb 20             	cmp    ebx,0x20
   27595:	74 f0                	je     27587 <strtol+0x13>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:103
	if (c == '-') {
   27597:	83 fb 2d             	cmp    ebx,0x2d
   2759a:	75 14                	jne    275b0 <strtol+0x3c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:104
		neg = 1;
   2759c:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:105
		c = *s++;
   275a3:	89 f0                	mov    eax,esi
   275a5:	8d 70 01             	lea    esi,[eax+0x1]
   275a8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275ab:	0f be d8             	movsx  ebx,al
   275ae:	eb 10                	jmp    275c0 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:106
	} else if (c == '+')
   275b0:	83 fb 2b             	cmp    ebx,0x2b
   275b3:	75 0b                	jne    275c0 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:107
		c = *s++;
   275b5:	89 f0                	mov    eax,esi
   275b7:	8d 70 01             	lea    esi,[eax+0x1]
   275ba:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275bd:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
   275c0:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   275c4:	74 06                	je     275cc <strtol+0x58>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 2)
   275c6:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   275ca:	75 26                	jne    275f2 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 3)
   275cc:	83 fb 30             	cmp    ebx,0x30
   275cf:	75 21                	jne    275f2 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
   275d1:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   275d4:	3c 78                	cmp    al,0x78
   275d6:	74 07                	je     275df <strtol+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109 (discriminator 1)
   275d8:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   275db:	3c 58                	cmp    al,0x58
   275dd:	75 13                	jne    275f2 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:110
		c = s[1];
   275df:	8d 46 01             	lea    eax,[esi+0x1]
   275e2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275e5:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:111
		s += 2;
   275e8:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/strtol.c:112
		base = 16;
   275eb:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
   275f2:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   275f6:	75 14                	jne    2760c <strtol+0x98>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
   275f8:	83 fb 30             	cmp    ebx,0x30
   275fb:	75 07                	jne    27604 <strtol+0x90>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 1)
   275fd:	b8 08 00 00 00       	mov    eax,0x8
   27602:	eb 05                	jmp    27609 <strtol+0x95>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 2)
   27604:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 4)
   27609:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   2760c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27610:	74 07                	je     27619 <strtol+0xa5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 1)
   27612:	b8 00 00 00 80       	mov    eax,0x80000000
   27617:	eb 05                	jmp    2761e <strtol+0xaa>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 2)
   27619:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
   2761e:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27621:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   27624:	ba 00 00 00 00       	mov    edx,0x0
   27629:	f7 f1                	div    ecx
   2762b:	89 d1                	mov    ecx,edx
   2762d:	89 c8                	mov    eax,ecx
   2762f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
   27632:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
   27635:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   27638:	ba 00 00 00 00       	mov    edx,0x0
   2763d:	f7 f7                	div    edi
   2763f:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
   27642:	bf 00 00 00 00       	mov    edi,0x0
   27647:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
   2764c:	8d 43 d0             	lea    eax,[ebx-0x30]
   2764f:	83 f8 09             	cmp    eax,0x9
   27652:	77 05                	ja     27659 <strtol+0xe5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:139
			c -= '0';
   27654:	83 eb 30             	sub    ebx,0x30
   27657:	eb 25                	jmp    2767e <strtol+0x10a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
   27659:	89 d8                	mov    eax,ebx
   2765b:	83 c8 20             	or     eax,0x20
   2765e:	83 e8 61             	sub    eax,0x61
   27661:	83 f8 19             	cmp    eax,0x19
   27664:	77 55                	ja     276bb <strtol+0x147>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   27666:	83 fb 40             	cmp    ebx,0x40
   27669:	7e 0c                	jle    27677 <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 1)
   2766b:	83 fb 5a             	cmp    ebx,0x5a
   2766e:	7f 07                	jg     27677 <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 3)
   27670:	b8 37 00 00 00       	mov    eax,0x37
   27675:	eb 05                	jmp    2767c <strtol+0x108>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 4)
   27677:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 6)
   2767c:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
   2767e:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   27681:	7d 3b                	jge    276be <strtol+0x14a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   27683:	89 c8                	mov    eax,ecx
   27685:	85 c0                	test   eax,eax
   27687:	78 0f                	js     27698 <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 1)
   27689:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   2768c:	77 0a                	ja     27698 <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 2)
   2768e:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27691:	75 0c                	jne    2769f <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 3)
   27693:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
   27696:	7e 07                	jle    2769f <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:147
			any = -1;
   27698:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   2769d:	eb 0f                	jmp    276ae <strtol+0x13a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:149
		else {
			any = 1;
   2769f:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:150
			acc *= base;
   276a4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   276a7:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:151
			acc += c;
   276aa:	89 d8                	mov    eax,ebx
   276ac:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   276ae:	89 f0                	mov    eax,esi
   276b0:	8d 70 01             	lea    esi,[eax+0x1]
   276b3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276b6:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   276b9:	eb 91                	jmp    2764c <strtol+0xd8>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   276bb:	90                   	nop
   276bc:	eb 01                	jmp    276bf <strtol+0x14b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
   276be:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   276bf:	89 c8                	mov    eax,ecx
   276c1:	85 c0                	test   eax,eax
   276c3:	79 16                	jns    276db <strtol+0x167>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
   276c5:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   276c9:	74 07                	je     276d2 <strtol+0x15e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 1)
   276cb:	b8 00 00 00 80       	mov    eax,0x80000000
   276d0:	eb 05                	jmp    276d7 <strtol+0x163>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 2)
   276d2:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 4)
   276d7:	89 c7                	mov    edi,eax
   276d9:	eb 08                	jmp    276e3 <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:156
	} else if (neg)
   276db:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   276df:	74 02                	je     276e3 <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:157
		acc = -acc;
   276e1:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:158
	if (endptr != 0)
   276e3:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   276e7:	74 13                	je     276fc <strtol+0x188>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
   276e9:	89 c8                	mov    eax,ecx
   276eb:	85 c0                	test   eax,eax
   276ed:	74 05                	je     276f4 <strtol+0x180>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 1)
   276ef:	8d 46 ff             	lea    eax,[esi-0x1]
   276f2:	eb 03                	jmp    276f7 <strtol+0x183>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 2)
   276f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 4)
   276f7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   276fa:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:160
	return (acc);
   276fc:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:161
}
   276fe:	83 c4 0c             	add    esp,0xc
   27701:	5b                   	pop    ebx
   27702:	5e                   	pop    esi
   27703:	5f                   	pop    edi
   27704:	5d                   	pop    ebp
   27705:	c3                   	ret    
   27706:	66 90                	xchg   ax,ax

00027708 <strtrim>:
strtrim():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:5
#include "strings.h"

/*FROM: http://codereview.stackexchange.com/questions/20897/trim-function-in-c*/
char * strtrim(char * *pointerToString)
{
   27708:	55                   	push   ebp
   27709:	89 e5                	mov    ebp,esp
   2770b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:6
    uint8_t start=0, length=0;
   2770e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   27712:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:9

        // Trim.Start:
        length = strlen(*pointerToString);
   27716:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27719:	8b 00                	mov    eax,DWORD PTR [eax]
   2771b:	83 ec 0c             	sub    esp,0xc
   2771e:	50                   	push   eax
   2771f:	e8 a0 fc ff ff       	call   273c4 <strlen>
   27724:	83 c4 10             	add    esp,0x10
   27727:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10
        while ((*pointerToString)[start]==' ') start++;
   2772a:	eb 0a                	jmp    27736 <strtrim+0x2e>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 2)
   2772c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27730:	83 c0 01             	add    eax,0x1
   27733:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 1)
   27736:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27739:	8b 10                	mov    edx,DWORD PTR [eax]
   2773b:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2773f:	01 d0                	add    eax,edx
   27741:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27744:	3c 20                	cmp    al,0x20
   27746:	74 e4                	je     2772c <strtrim+0x24>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:11
        (*pointerToString) += start;
   27748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2774b:	8b 10                	mov    edx,DWORD PTR [eax]
   2774d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27751:	01 c2                	add    edx,eax
   27753:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27756:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:13

        if (start < length) // Required for empty (ex. "    ") input
   27758:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   2775c:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   2775f:	73 46                	jae    277a7 <strtrim+0x9f>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:16
        {
            // Trim.End:
            uint8_t end = strlen(*pointerToString)-1; // Get string length again (after Trim.Start)
   27761:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27764:	8b 00                	mov    eax,DWORD PTR [eax]
   27766:	83 ec 0c             	sub    esp,0xc
   27769:	50                   	push   eax
   2776a:	e8 55 fc ff ff       	call   273c4 <strlen>
   2776f:	83 c4 10             	add    esp,0x10
   27772:	83 e8 01             	sub    eax,0x1
   27775:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17
            while ((*pointerToString)[end]==' ') end--;
   27778:	eb 0a                	jmp    27784 <strtrim+0x7c>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 2)
   2777a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   2777e:	83 e8 01             	sub    eax,0x1
   27781:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 1)
   27784:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27787:	8b 10                	mov    edx,DWORD PTR [eax]
   27789:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   2778d:	01 d0                	add    eax,edx
   2778f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27792:	3c 20                	cmp    al,0x20
   27794:	74 e4                	je     2777a <strtrim+0x72>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:18
            (*pointerToString)[end+1] = 0;
   27796:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27799:	8b 00                	mov    eax,DWORD PTR [eax]
   2779b:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   2779f:	83 c2 01             	add    edx,0x1
   277a2:	01 d0                	add    eax,edx
   277a4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:21
        }

    return *pointerToString;
   277a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   277aa:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:22
}
   277ac:	c9                   	leave  
   277ad:	c3                   	ret    

000277ae <strtrim2>:
strtrim2():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:25

char * strtrim2(char* pointerToString)
{
   277ae:	55                   	push   ebp
   277af:	89 e5                	mov    ebp,esp
   277b1:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:26
    uint8_t start=0, length=0;
   277b4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   277b8:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:29

        // Trim.Start:
        length = strlen(pointerToString);
   277bc:	83 ec 0c             	sub    esp,0xc
   277bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   277c2:	e8 fd fb ff ff       	call   273c4 <strlen>
   277c7:	83 c4 10             	add    esp,0x10
   277ca:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30
        while ((pointerToString)[start]==' ') start++;
   277cd:	eb 0a                	jmp    277d9 <strtrim2+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 2)
   277cf:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   277d3:	83 c0 01             	add    eax,0x1
   277d6:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 1)
   277d9:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   277dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   277e0:	01 d0                	add    eax,edx
   277e2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   277e5:	3c 20                	cmp    al,0x20
   277e7:	74 e6                	je     277cf <strtrim2+0x21>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:31
        (pointerToString) += start;
   277e9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   277ed:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:33

        if (start < length) // Required for empty (ex. "    ") input
   277f0:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   277f4:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   277f7:	73 3f                	jae    27838 <strtrim2+0x8a>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:36
        {
            // Trim.End:
            uint8_t end = strlen(pointerToString)-1; // Get string length again (after Trim.Start)
   277f9:	83 ec 0c             	sub    esp,0xc
   277fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   277ff:	e8 c0 fb ff ff       	call   273c4 <strlen>
   27804:	83 c4 10             	add    esp,0x10
   27807:	83 e8 01             	sub    eax,0x1
   2780a:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37
            while ((pointerToString)[end]==' ') end--;
   2780d:	eb 0a                	jmp    27819 <strtrim2+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 2)
   2780f:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27813:	83 e8 01             	sub    eax,0x1
   27816:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 1)
   27819:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   2781d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27820:	01 d0                	add    eax,edx
   27822:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27825:	3c 20                	cmp    al,0x20
   27827:	74 e6                	je     2780f <strtrim2+0x61>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:38
            (pointerToString)[end+1] = 0;
   27829:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   2782d:	8d 50 01             	lea    edx,[eax+0x1]
   27830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27833:	01 d0                	add    eax,edx
   27835:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:41
        }

    return pointerToString;
   27838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:42
}
   2783b:	c9                   	leave  
   2783c:	c3                   	ret    
   2783d:	66 90                	xchg   ax,ax
   2783f:	90                   	nop

00027840 <time>:
time():
/home/yogi/src/os/chrisOS/src/time.c:83
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

extern time_t kSystemCurrentTime;
time_t time(time_t* arg)
{
   27840:	55                   	push   ebp
   27841:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:84
    *arg = kSystemCurrentTime;
   27843:	8b 15 8c 02 12 00    	mov    edx,DWORD PTR ds:0x12028c
   27849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2784c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:85
    return kSystemCurrentTime;
   2784e:	a1 8c 02 12 00       	mov    eax,ds:0x12028c
/home/yogi/src/os/chrisOS/src/time.c:86
}
   27853:	5d                   	pop    ebp
   27854:	c3                   	ret    

00027855 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/chrisOS/src/time.c:88

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
   27855:	55                   	push   ebp
   27856:	89 e5                	mov    ebp,esp
   27858:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:89
  time_t time = *timer;
   2785b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2785e:	8b 00                	mov    eax,DWORD PTR [eax]
   27860:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:91
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
   27863:	c7 45 f8 b2 07 00 00 	mov    DWORD PTR [ebp-0x8],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:93

  dayclock = (unsigned long) time % SECS_DAY;
   2786a:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   2786d:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   27872:	89 c8                	mov    eax,ecx
   27874:	f7 e2                	mul    edx
   27876:	89 d0                	mov    eax,edx
   27878:	c1 e8 10             	shr    eax,0x10
   2787b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   2787e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27881:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   27887:	29 c1                	sub    ecx,eax
   27889:	89 c8                	mov    eax,ecx
   2788b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:94
  dayno = (unsigned long) time / SECS_DAY;
   2788e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27891:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   27896:	f7 e2                	mul    edx
   27898:	89 d0                	mov    eax,edx
   2789a:	c1 e8 10             	shr    eax,0x10
   2789d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:96

  tmbuf->tm_sec = dayclock % 60;
   278a0:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   278a3:	ba 89 88 88 88       	mov    edx,0x88888889
   278a8:	89 c8                	mov    eax,ecx
   278aa:	f7 e2                	mul    edx
   278ac:	89 d0                	mov    eax,edx
   278ae:	c1 e8 05             	shr    eax,0x5
   278b1:	89 c2                	mov    edx,eax
   278b3:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   278ba:	89 c2                	mov    edx,eax
   278bc:	89 d0                	mov    eax,edx
   278be:	c1 e0 04             	shl    eax,0x4
   278c1:	29 d0                	sub    eax,edx
   278c3:	29 c1                	sub    ecx,eax
   278c5:	89 c8                	mov    eax,ecx
   278c7:	89 c2                	mov    edx,eax
   278c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   278cc:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:97
  tmbuf->tm_min = (dayclock % 3600) / 60;
   278ce:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   278d1:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   278d6:	89 c8                	mov    eax,ecx
   278d8:	f7 e2                	mul    edx
   278da:	89 d0                	mov    eax,edx
   278dc:	c1 e8 0b             	shr    eax,0xb
   278df:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
   278e5:	29 c1                	sub    ecx,eax
   278e7:	89 c8                	mov    eax,ecx
   278e9:	ba 89 88 88 88       	mov    edx,0x88888889
   278ee:	f7 e2                	mul    edx
   278f0:	89 d0                	mov    eax,edx
   278f2:	c1 e8 05             	shr    eax,0x5
   278f5:	89 c2                	mov    edx,eax
   278f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   278fa:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:98
  tmbuf->tm_hour = dayclock / 3600;
   278fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27900:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   27905:	f7 e2                	mul    edx
   27907:	89 d0                	mov    eax,edx
   27909:	c1 e8 0b             	shr    eax,0xb
   2790c:	89 c2                	mov    edx,eax
   2790e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27911:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:99
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
   27914:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27917:	8d 48 04             	lea    ecx,[eax+0x4]
   2791a:	ba 25 49 92 24       	mov    edx,0x24924925
   2791f:	89 c8                	mov    eax,ecx
   27921:	f7 e2                	mul    edx
   27923:	89 c8                	mov    eax,ecx
   27925:	29 d0                	sub    eax,edx
   27927:	d1 e8                	shr    eax,1
   27929:	01 d0                	add    eax,edx
   2792b:	c1 e8 02             	shr    eax,0x2
   2792e:	89 c2                	mov    edx,eax
   27930:	c1 e2 03             	shl    edx,0x3
   27933:	29 c2                	sub    edx,eax
   27935:	89 c8                	mov    eax,ecx
   27937:	29 d0                	sub    eax,edx
   27939:	89 c2                	mov    edx,eax
   2793b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2793e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/time.c:100
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   27941:	eb 66                	jmp    279a9 <gmtime_r+0x154>
/home/yogi/src/os/chrisOS/src/time.c:101
    dayno -= YEARSIZE(year);
   27943:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27946:	83 e0 03             	and    eax,0x3
   27949:	85 c0                	test   eax,eax
   2794b:	75 50                	jne    2799d <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 1)
   2794d:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27950:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27955:	89 c8                	mov    eax,ecx
   27957:	f7 ea                	imul   edx
   27959:	c1 fa 05             	sar    edx,0x5
   2795c:	89 c8                	mov    eax,ecx
   2795e:	c1 f8 1f             	sar    eax,0x1f
   27961:	29 c2                	sub    edx,eax
   27963:	89 d0                	mov    eax,edx
   27965:	6b c0 64             	imul   eax,eax,0x64
   27968:	29 c1                	sub    ecx,eax
   2796a:	89 c8                	mov    eax,ecx
   2796c:	85 c0                	test   eax,eax
   2796e:	75 26                	jne    27996 <gmtime_r+0x141>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 4)
   27970:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27973:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27978:	89 c8                	mov    eax,ecx
   2797a:	f7 ea                	imul   edx
   2797c:	c1 fa 07             	sar    edx,0x7
   2797f:	89 c8                	mov    eax,ecx
   27981:	c1 f8 1f             	sar    eax,0x1f
   27984:	29 c2                	sub    edx,eax
   27986:	89 d0                	mov    eax,edx
   27988:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2798e:	29 c1                	sub    ecx,eax
   27990:	89 c8                	mov    eax,ecx
   27992:	85 c0                	test   eax,eax
   27994:	75 07                	jne    2799d <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 5)
   27996:	b8 6e 01 00 00       	mov    eax,0x16e
   2799b:	eb 05                	jmp    279a2 <gmtime_r+0x14d>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 6)
   2799d:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 8)
   279a2:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:102 (discriminator 8)
    year++;
   279a5:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   279a9:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   279ac:	83 e0 03             	and    eax,0x3
   279af:	85 c0                	test   eax,eax
   279b1:	75 50                	jne    27a03 <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 1)
   279b3:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   279b6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   279bb:	89 c8                	mov    eax,ecx
   279bd:	f7 ea                	imul   edx
   279bf:	c1 fa 05             	sar    edx,0x5
   279c2:	89 c8                	mov    eax,ecx
   279c4:	c1 f8 1f             	sar    eax,0x1f
   279c7:	29 c2                	sub    edx,eax
   279c9:	89 d0                	mov    eax,edx
   279cb:	6b c0 64             	imul   eax,eax,0x64
   279ce:	29 c1                	sub    ecx,eax
   279d0:	89 c8                	mov    eax,ecx
   279d2:	85 c0                	test   eax,eax
   279d4:	75 26                	jne    279fc <gmtime_r+0x1a7>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 4)
   279d6:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   279d9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   279de:	89 c8                	mov    eax,ecx
   279e0:	f7 ea                	imul   edx
   279e2:	c1 fa 07             	sar    edx,0x7
   279e5:	89 c8                	mov    eax,ecx
   279e7:	c1 f8 1f             	sar    eax,0x1f
   279ea:	29 c2                	sub    edx,eax
   279ec:	89 d0                	mov    eax,edx
   279ee:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   279f4:	29 c1                	sub    ecx,eax
   279f6:	89 c8                	mov    eax,ecx
   279f8:	85 c0                	test   eax,eax
   279fa:	75 07                	jne    27a03 <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 5)
   279fc:	b8 6e 01 00 00       	mov    eax,0x16e
   27a01:	eb 05                	jmp    27a08 <gmtime_r+0x1b3>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 6)
   27a03:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 8)
   27a08:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   27a0b:	0f 86 32 ff ff ff    	jbe    27943 <gmtime_r+0xee>
/home/yogi/src/os/chrisOS/src/time.c:104
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
   27a11:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27a14:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
   27a1a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27a1d:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:105
  tmbuf->tm_yday = dayno;
   27a20:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27a23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27a26:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:106
  tmbuf->tm_mon = 0;
   27a29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27a2c:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:107
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   27a33:	e9 89 00 00 00       	jmp    27ac1 <gmtime_r+0x26c>
/home/yogi/src/os/chrisOS/src/time.c:108
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
   27a38:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27a3b:	83 e0 03             	and    eax,0x3
   27a3e:	85 c0                	test   eax,eax
   27a40:	75 50                	jne    27a92 <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 1)
   27a42:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27a45:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27a4a:	89 c8                	mov    eax,ecx
   27a4c:	f7 ea                	imul   edx
   27a4e:	c1 fa 05             	sar    edx,0x5
   27a51:	89 c8                	mov    eax,ecx
   27a53:	c1 f8 1f             	sar    eax,0x1f
   27a56:	29 c2                	sub    edx,eax
   27a58:	89 d0                	mov    eax,edx
   27a5a:	6b c0 64             	imul   eax,eax,0x64
   27a5d:	29 c1                	sub    ecx,eax
   27a5f:	89 c8                	mov    eax,ecx
   27a61:	85 c0                	test   eax,eax
   27a63:	75 26                	jne    27a8b <gmtime_r+0x236>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 4)
   27a65:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27a68:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27a6d:	89 c8                	mov    eax,ecx
   27a6f:	f7 ea                	imul   edx
   27a71:	c1 fa 07             	sar    edx,0x7
   27a74:	89 c8                	mov    eax,ecx
   27a76:	c1 f8 1f             	sar    eax,0x1f
   27a79:	29 c2                	sub    edx,eax
   27a7b:	89 d0                	mov    eax,edx
   27a7d:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27a83:	29 c1                	sub    ecx,eax
   27a85:	89 c8                	mov    eax,ecx
   27a87:	85 c0                	test   eax,eax
   27a89:	75 07                	jne    27a92 <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 5)
   27a8b:	ba 01 00 00 00       	mov    edx,0x1
   27a90:	eb 05                	jmp    27a97 <gmtime_r+0x242>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 6)
   27a92:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 8)
   27a97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27a9a:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27a9d:	89 d0                	mov    eax,edx
   27a9f:	01 c0                	add    eax,eax
   27aa1:	01 d0                	add    eax,edx
   27aa3:	c1 e0 02             	shl    eax,0x2
   27aa6:	01 c8                	add    eax,ecx
   27aa8:	8b 04 85 20 60 08 00 	mov    eax,DWORD PTR [eax*4+0x86020]
   27aaf:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:109 (discriminator 8)
    tmbuf->tm_mon++;
   27ab2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27ab5:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27ab8:	8d 50 01             	lea    edx,[eax+0x1]
   27abb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27abe:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   27ac1:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27ac4:	83 e0 03             	and    eax,0x3
   27ac7:	85 c0                	test   eax,eax
   27ac9:	75 50                	jne    27b1b <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 1)
   27acb:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27ace:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27ad3:	89 c8                	mov    eax,ecx
   27ad5:	f7 ea                	imul   edx
   27ad7:	c1 fa 05             	sar    edx,0x5
   27ada:	89 c8                	mov    eax,ecx
   27adc:	c1 f8 1f             	sar    eax,0x1f
   27adf:	29 c2                	sub    edx,eax
   27ae1:	89 d0                	mov    eax,edx
   27ae3:	6b c0 64             	imul   eax,eax,0x64
   27ae6:	29 c1                	sub    ecx,eax
   27ae8:	89 c8                	mov    eax,ecx
   27aea:	85 c0                	test   eax,eax
   27aec:	75 26                	jne    27b14 <gmtime_r+0x2bf>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 4)
   27aee:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27af1:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27af6:	89 c8                	mov    eax,ecx
   27af8:	f7 ea                	imul   edx
   27afa:	c1 fa 07             	sar    edx,0x7
   27afd:	89 c8                	mov    eax,ecx
   27aff:	c1 f8 1f             	sar    eax,0x1f
   27b02:	29 c2                	sub    edx,eax
   27b04:	89 d0                	mov    eax,edx
   27b06:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27b0c:	29 c1                	sub    ecx,eax
   27b0e:	89 c8                	mov    eax,ecx
   27b10:	85 c0                	test   eax,eax
   27b12:	75 07                	jne    27b1b <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 5)
   27b14:	ba 01 00 00 00       	mov    edx,0x1
   27b19:	eb 05                	jmp    27b20 <gmtime_r+0x2cb>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 6)
   27b1b:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 8)
   27b20:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27b23:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27b26:	89 d0                	mov    eax,edx
   27b28:	01 c0                	add    eax,eax
   27b2a:	01 d0                	add    eax,edx
   27b2c:	c1 e0 02             	shl    eax,0x2
   27b2f:	01 c8                	add    eax,ecx
   27b31:	8b 04 85 20 60 08 00 	mov    eax,DWORD PTR [eax*4+0x86020]
   27b38:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   27b3b:	0f 86 f7 fe ff ff    	jbe    27a38 <gmtime_r+0x1e3>
/home/yogi/src/os/chrisOS/src/time.c:111
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
   27b41:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27b44:	83 c0 01             	add    eax,0x1
   27b47:	89 c2                	mov    edx,eax
   27b49:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27b4c:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:112
  tmbuf->tm_isdst = 0;
   27b4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27b52:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/chrisOS/src/time.c:113
  return tmbuf;
   27b59:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/time.c:114
}
   27b5c:	c9                   	leave  
   27b5d:	c3                   	ret    

00027b5e <localtime>:
localtime():
/home/yogi/src/os/chrisOS/src/time.c:116

struct tm *localtime(const time_t *timer) {
   27b5e:	55                   	push   ebp
   27b5f:	89 e5                	mov    ebp,esp
   27b61:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/time.c:120
  time_t t;
  struct tm tmbuf;
  
  t = *timer - kTimeZone;
   27b64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b67:	8b 10                	mov    edx,DWORD PTR [eax]
   27b69:	a1 90 02 12 00       	mov    eax,ds:0x120290
   27b6e:	29 c2                	sub    edx,eax
   27b70:	89 d0                	mov    eax,edx
   27b72:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:121
  return gmtime_r(&t, &tmbuf);
   27b75:	8d 45 d0             	lea    eax,[ebp-0x30]
   27b78:	50                   	push   eax
   27b79:	8d 45 fc             	lea    eax,[ebp-0x4]
   27b7c:	50                   	push   eax
   27b7d:	e8 d3 fc ff ff       	call   27855 <gmtime_r>
   27b82:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:122
}
   27b85:	c9                   	leave  
   27b86:	c3                   	ret    

00027b87 <localtime_r>:
localtime_r():
/home/yogi/src/os/chrisOS/src/time.c:124

struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
   27b87:	55                   	push   ebp
   27b88:	89 e5                	mov    ebp,esp
   27b8a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:127
  time_t t;

  t = *timer - kTimeZone;
   27b8d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b90:	8b 10                	mov    edx,DWORD PTR [eax]
   27b92:	a1 90 02 12 00       	mov    eax,ds:0x120290
   27b97:	29 c2                	sub    edx,eax
   27b99:	89 d0                	mov    eax,edx
   27b9b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:128
  return gmtime_r(&t, tmbuf);
   27b9e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27ba1:	8d 45 fc             	lea    eax,[ebp-0x4]
   27ba4:	50                   	push   eax
   27ba5:	e8 ab fc ff ff       	call   27855 <gmtime_r>
   27baa:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:129
}
   27bad:	c9                   	leave  
   27bae:	c3                   	ret    

00027baf <mktime>:
mktime():
/home/yogi/src/os/chrisOS/src/time.c:131

time_t mktime(struct tm *tmbuf) {
   27baf:	55                   	push   ebp
   27bb0:	89 e5                	mov    ebp,esp
   27bb2:	56                   	push   esi
   27bb3:	53                   	push   ebx
   27bb4:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/time.c:139
  int yday, month;
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
   27bb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bba:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
   27bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27bc0:	8b 08                	mov    ecx,DWORD PTR [eax]
   27bc2:	ba 89 88 88 88       	mov    edx,0x88888889
   27bc7:	89 c8                	mov    eax,ecx
   27bc9:	f7 ea                	imul   edx
   27bcb:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27bce:	c1 f8 05             	sar    eax,0x5
   27bd1:	89 c2                	mov    edx,eax
   27bd3:	89 c8                	mov    eax,ecx
   27bd5:	c1 f8 1f             	sar    eax,0x1f
   27bd8:	29 c2                	sub    edx,eax
   27bda:	89 d0                	mov    eax,edx
   27bdc:	8d 14 03             	lea    edx,[ebx+eax*1]
   27bdf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27be2:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:140
  tmbuf->tm_sec %= 60;
   27be5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27be8:	8b 08                	mov    ecx,DWORD PTR [eax]
   27bea:	ba 89 88 88 88       	mov    edx,0x88888889
   27bef:	89 c8                	mov    eax,ecx
   27bf1:	f7 ea                	imul   edx
   27bf3:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27bf6:	c1 f8 05             	sar    eax,0x5
   27bf9:	89 c2                	mov    edx,eax
   27bfb:	89 c8                	mov    eax,ecx
   27bfd:	c1 f8 1f             	sar    eax,0x1f
   27c00:	29 c2                	sub    edx,eax
   27c02:	89 d0                	mov    eax,edx
   27c04:	89 c2                	mov    edx,eax
   27c06:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27c0d:	89 c2                	mov    edx,eax
   27c0f:	89 d0                	mov    eax,edx
   27c11:	c1 e0 04             	shl    eax,0x4
   27c14:	29 d0                	sub    eax,edx
   27c16:	29 c1                	sub    ecx,eax
   27c18:	89 c8                	mov    eax,ecx
   27c1a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27c1d:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/time.c:141
  if (tmbuf->tm_sec < 0) {
   27c1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c22:	8b 00                	mov    eax,DWORD PTR [eax]
   27c24:	85 c0                	test   eax,eax
   27c26:	79 1c                	jns    27c44 <mktime+0x95>
/home/yogi/src/os/chrisOS/src/time.c:142
    tmbuf->tm_sec += 60;
   27c28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c2b:	8b 00                	mov    eax,DWORD PTR [eax]
   27c2d:	8d 50 3c             	lea    edx,[eax+0x3c]
   27c30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c33:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:143
    tmbuf->tm_min--;
   27c35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c38:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27c3b:	8d 50 ff             	lea    edx,[eax-0x1]
   27c3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c41:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:145
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
   27c44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c47:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
   27c4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c4d:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   27c50:	ba 89 88 88 88       	mov    edx,0x88888889
   27c55:	89 c8                	mov    eax,ecx
   27c57:	f7 ea                	imul   edx
   27c59:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27c5c:	c1 f8 05             	sar    eax,0x5
   27c5f:	89 c2                	mov    edx,eax
   27c61:	89 c8                	mov    eax,ecx
   27c63:	c1 f8 1f             	sar    eax,0x1f
   27c66:	29 c2                	sub    edx,eax
   27c68:	89 d0                	mov    eax,edx
   27c6a:	8d 14 03             	lea    edx,[ebx+eax*1]
   27c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c70:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:146
  tmbuf->tm_min = tmbuf->tm_min % 60;
   27c73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27c76:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   27c79:	ba 89 88 88 88       	mov    edx,0x88888889
   27c7e:	89 c8                	mov    eax,ecx
   27c80:	f7 ea                	imul   edx
   27c82:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27c85:	c1 f8 05             	sar    eax,0x5
   27c88:	89 c2                	mov    edx,eax
   27c8a:	89 c8                	mov    eax,ecx
   27c8c:	c1 f8 1f             	sar    eax,0x1f
   27c8f:	29 c2                	sub    edx,eax
   27c91:	89 d0                	mov    eax,edx
   27c93:	89 c2                	mov    edx,eax
   27c95:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27c9c:	89 c2                	mov    edx,eax
   27c9e:	89 d0                	mov    eax,edx
   27ca0:	c1 e0 04             	shl    eax,0x4
   27ca3:	29 d0                	sub    eax,edx
   27ca5:	29 c1                	sub    ecx,eax
   27ca7:	89 c8                	mov    eax,ecx
   27ca9:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27cac:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:147
  if (tmbuf->tm_min < 0) {
   27caf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27cb5:	85 c0                	test   eax,eax
   27cb7:	79 1e                	jns    27cd7 <mktime+0x128>
/home/yogi/src/os/chrisOS/src/time.c:148
    tmbuf->tm_min += 60;
   27cb9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cbc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27cbf:	8d 50 3c             	lea    edx,[eax+0x3c]
   27cc2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cc5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:149
    tmbuf->tm_hour--;
   27cc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ccb:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27cce:	8d 50 ff             	lea    edx,[eax-0x1]
   27cd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cd4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:151
  }
  day = tmbuf->tm_hour / 24;
   27cd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cda:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   27cdd:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27ce2:	89 c8                	mov    eax,ecx
   27ce4:	f7 ea                	imul   edx
   27ce6:	c1 fa 02             	sar    edx,0x2
   27ce9:	89 c8                	mov    eax,ecx
   27ceb:	c1 f8 1f             	sar    eax,0x1f
   27cee:	29 c2                	sub    edx,eax
   27cf0:	89 d0                	mov    eax,edx
   27cf2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:152
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
   27cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27cf8:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   27cfb:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27d00:	89 c8                	mov    eax,ecx
   27d02:	f7 ea                	imul   edx
   27d04:	c1 fa 02             	sar    edx,0x2
   27d07:	89 c8                	mov    eax,ecx
   27d09:	c1 f8 1f             	sar    eax,0x1f
   27d0c:	29 c2                	sub    edx,eax
   27d0e:	89 d0                	mov    eax,edx
   27d10:	01 c0                	add    eax,eax
   27d12:	01 d0                	add    eax,edx
   27d14:	c1 e0 03             	shl    eax,0x3
   27d17:	29 c1                	sub    ecx,eax
   27d19:	89 ca                	mov    edx,ecx
   27d1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d1e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:153
  if (tmbuf->tm_hour < 0) {
   27d21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d24:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27d27:	85 c0                	test   eax,eax
   27d29:	79 13                	jns    27d3e <mktime+0x18f>
/home/yogi/src/os/chrisOS/src/time.c:154
    tmbuf->tm_hour += 24;
   27d2b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d2e:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27d31:	8d 50 18             	lea    edx,[eax+0x18]
   27d34:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d37:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:155
    day--;
   27d3a:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/time.c:157
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
   27d3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d41:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   27d44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d47:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27d4a:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27d4f:	89 c8                	mov    eax,ecx
   27d51:	f7 ea                	imul   edx
   27d53:	d1 fa                	sar    edx,1
   27d55:	89 c8                	mov    eax,ecx
   27d57:	c1 f8 1f             	sar    eax,0x1f
   27d5a:	29 c2                	sub    edx,eax
   27d5c:	89 d0                	mov    eax,edx
   27d5e:	8d 14 03             	lea    edx,[ebx+eax*1]
   27d61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d64:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:158
  tmbuf->tm_mon %= 12;
   27d67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d6a:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27d6d:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27d72:	89 c8                	mov    eax,ecx
   27d74:	f7 ea                	imul   edx
   27d76:	d1 fa                	sar    edx,1
   27d78:	89 c8                	mov    eax,ecx
   27d7a:	c1 f8 1f             	sar    eax,0x1f
   27d7d:	29 c2                	sub    edx,eax
   27d7f:	89 d0                	mov    eax,edx
   27d81:	01 c0                	add    eax,eax
   27d83:	01 d0                	add    eax,edx
   27d85:	c1 e0 02             	shl    eax,0x2
   27d88:	29 c1                	sub    ecx,eax
   27d8a:	89 ca                	mov    edx,ecx
   27d8c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d8f:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:159
  if (tmbuf->tm_mon < 0) {
   27d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d95:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27d98:	85 c0                	test   eax,eax
   27d9a:	79 1e                	jns    27dba <mktime+0x20b>
/home/yogi/src/os/chrisOS/src/time.c:160
    tmbuf->tm_mon += 12;
   27d9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27d9f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27da2:	8d 50 0c             	lea    edx,[eax+0xc]
   27da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27da8:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:161
    tmbuf->tm_year--;
   27dab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dae:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27db1:	8d 50 ff             	lea    edx,[eax-0x1]
   27db4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27db7:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:163
  }
  day += (tmbuf->tm_mday - 1);
   27dba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dbd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   27dc0:	83 e8 01             	sub    eax,0x1
   27dc3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  while (day < 0) {
   27dc6:	e9 c1 00 00 00       	jmp    27e8c <mktime+0x2dd>
/home/yogi/src/os/chrisOS/src/time.c:165
    if(--tmbuf->tm_mon < 0) {
   27dcb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dce:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27dd1:	8d 50 ff             	lea    edx,[eax-0x1]
   27dd4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27dd7:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   27dda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ddd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27de0:	85 c0                	test   eax,eax
   27de2:	79 19                	jns    27dfd <mktime+0x24e>
/home/yogi/src/os/chrisOS/src/time.c:166
      tmbuf->tm_year--;
   27de4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27de7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27dea:	8d 50 ff             	lea    edx,[eax-0x1]
   27ded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27df0:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:167
      tmbuf->tm_mon = 11;
   27df3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27df6:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/chrisOS/src/time.c:169
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   27dfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e00:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27e03:	83 e0 03             	and    eax,0x3
   27e06:	85 c0                	test   eax,eax
   27e08:	75 62                	jne    27e6c <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 1)
   27e0a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e0d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27e10:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27e16:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27e1b:	89 c8                	mov    eax,ecx
   27e1d:	f7 ea                	imul   edx
   27e1f:	c1 fa 05             	sar    edx,0x5
   27e22:	89 c8                	mov    eax,ecx
   27e24:	c1 f8 1f             	sar    eax,0x1f
   27e27:	29 c2                	sub    edx,eax
   27e29:	89 d0                	mov    eax,edx
   27e2b:	6b c0 64             	imul   eax,eax,0x64
   27e2e:	29 c1                	sub    ecx,eax
   27e30:	89 c8                	mov    eax,ecx
   27e32:	85 c0                	test   eax,eax
   27e34:	75 2f                	jne    27e65 <mktime+0x2b6>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 4)
   27e36:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e39:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27e3c:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27e42:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27e47:	89 c8                	mov    eax,ecx
   27e49:	f7 ea                	imul   edx
   27e4b:	c1 fa 07             	sar    edx,0x7
   27e4e:	89 c8                	mov    eax,ecx
   27e50:	c1 f8 1f             	sar    eax,0x1f
   27e53:	29 c2                	sub    edx,eax
   27e55:	89 d0                	mov    eax,edx
   27e57:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27e5d:	29 c1                	sub    ecx,eax
   27e5f:	89 c8                	mov    eax,ecx
   27e61:	85 c0                	test   eax,eax
   27e63:	75 07                	jne    27e6c <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 5)
   27e65:	ba 01 00 00 00       	mov    edx,0x1
   27e6a:	eb 05                	jmp    27e71 <mktime+0x2c2>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 6)
   27e6c:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 8)
   27e71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e74:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27e77:	89 d0                	mov    eax,edx
   27e79:	01 c0                	add    eax,eax
   27e7b:	01 d0                	add    eax,edx
   27e7d:	c1 e0 02             	shl    eax,0x2
   27e80:	01 c8                	add    eax,ecx
   27e82:	8b 04 85 20 60 08 00 	mov    eax,DWORD PTR [eax*4+0x86020]
   27e89:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
   27e8c:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   27e90:	0f 88 35 ff ff ff    	js     27dcb <mktime+0x21c>
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   27e96:	e9 c2 00 00 00       	jmp    27f5d <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:172
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   27e9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e9e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27ea1:	83 e0 03             	and    eax,0x3
   27ea4:	85 c0                	test   eax,eax
   27ea6:	75 62                	jne    27f0a <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 1)
   27ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27eab:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27eae:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27eb4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27eb9:	89 c8                	mov    eax,ecx
   27ebb:	f7 ea                	imul   edx
   27ebd:	c1 fa 05             	sar    edx,0x5
   27ec0:	89 c8                	mov    eax,ecx
   27ec2:	c1 f8 1f             	sar    eax,0x1f
   27ec5:	29 c2                	sub    edx,eax
   27ec7:	89 d0                	mov    eax,edx
   27ec9:	6b c0 64             	imul   eax,eax,0x64
   27ecc:	29 c1                	sub    ecx,eax
   27ece:	89 c8                	mov    eax,ecx
   27ed0:	85 c0                	test   eax,eax
   27ed2:	75 2f                	jne    27f03 <mktime+0x354>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 4)
   27ed4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ed7:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27eda:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27ee0:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27ee5:	89 c8                	mov    eax,ecx
   27ee7:	f7 ea                	imul   edx
   27ee9:	c1 fa 07             	sar    edx,0x7
   27eec:	89 c8                	mov    eax,ecx
   27eee:	c1 f8 1f             	sar    eax,0x1f
   27ef1:	29 c2                	sub    edx,eax
   27ef3:	89 d0                	mov    eax,edx
   27ef5:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27efb:	29 c1                	sub    ecx,eax
   27efd:	89 c8                	mov    eax,ecx
   27eff:	85 c0                	test   eax,eax
   27f01:	75 07                	jne    27f0a <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 5)
   27f03:	ba 01 00 00 00       	mov    edx,0x1
   27f08:	eb 05                	jmp    27f0f <mktime+0x360>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 6)
   27f0a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 8)
   27f0f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f12:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27f15:	89 d0                	mov    eax,edx
   27f17:	01 c0                	add    eax,eax
   27f19:	01 d0                	add    eax,edx
   27f1b:	c1 e0 02             	shl    eax,0x2
   27f1e:	01 c8                	add    eax,ecx
   27f20:	8b 04 85 20 60 08 00 	mov    eax,DWORD PTR [eax*4+0x86020]
   27f27:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:173 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
   27f2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f2d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27f30:	8d 50 01             	lea    edx,[eax+0x1]
   27f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f36:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   27f39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f3c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27f3f:	83 f8 0c             	cmp    eax,0xc
   27f42:	75 19                	jne    27f5d <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:174
      tmbuf->tm_mon = 0;
   27f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f47:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:175
      tmbuf->tm_year++;
   27f4e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f51:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27f54:	8d 50 01             	lea    edx,[eax+0x1]
   27f57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f5a:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   27f5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f60:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27f63:	83 e0 03             	and    eax,0x3
   27f66:	85 c0                	test   eax,eax
   27f68:	75 62                	jne    27fcc <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 1)
   27f6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f6d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27f70:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27f76:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27f7b:	89 c8                	mov    eax,ecx
   27f7d:	f7 ea                	imul   edx
   27f7f:	c1 fa 05             	sar    edx,0x5
   27f82:	89 c8                	mov    eax,ecx
   27f84:	c1 f8 1f             	sar    eax,0x1f
   27f87:	29 c2                	sub    edx,eax
   27f89:	89 d0                	mov    eax,edx
   27f8b:	6b c0 64             	imul   eax,eax,0x64
   27f8e:	29 c1                	sub    ecx,eax
   27f90:	89 c8                	mov    eax,ecx
   27f92:	85 c0                	test   eax,eax
   27f94:	75 2f                	jne    27fc5 <mktime+0x416>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 4)
   27f96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f99:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   27f9c:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   27fa2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27fa7:	89 c8                	mov    eax,ecx
   27fa9:	f7 ea                	imul   edx
   27fab:	c1 fa 07             	sar    edx,0x7
   27fae:	89 c8                	mov    eax,ecx
   27fb0:	c1 f8 1f             	sar    eax,0x1f
   27fb3:	29 c2                	sub    edx,eax
   27fb5:	89 d0                	mov    eax,edx
   27fb7:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27fbd:	29 c1                	sub    ecx,eax
   27fbf:	89 c8                	mov    eax,ecx
   27fc1:	85 c0                	test   eax,eax
   27fc3:	75 07                	jne    27fcc <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 5)
   27fc5:	ba 01 00 00 00       	mov    edx,0x1
   27fca:	eb 05                	jmp    27fd1 <mktime+0x422>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 6)
   27fcc:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 8)
   27fd1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27fd4:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27fd7:	89 d0                	mov    eax,edx
   27fd9:	01 c0                	add    eax,eax
   27fdb:	01 d0                	add    eax,edx
   27fdd:	c1 e0 02             	shl    eax,0x2
   27fe0:	01 c8                	add    eax,ecx
   27fe2:	8b 04 85 20 60 08 00 	mov    eax,DWORD PTR [eax*4+0x86020]
   27fe9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   27fec:	0f 8e a9 fe ff ff    	jle    27e9b <mktime+0x2ec>
/home/yogi/src/os/chrisOS/src/time.c:178
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
   27ff2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27ff5:	8d 50 01             	lea    edx,[eax+0x1]
   27ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ffb:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:179
  year = EPOCH_YR;
   27ffe:	c7 45 e0 b2 07 00 00 	mov    DWORD PTR [ebp-0x20],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:180
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
   28005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28008:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   2800b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   2800e:	81 ea 6c 07 00 00    	sub    edx,0x76c
   28014:	39 d0                	cmp    eax,edx
   28016:	7d 0a                	jge    28022 <mktime+0x473>
/home/yogi/src/os/chrisOS/src/time.c:180 (discriminator 1)
   28018:	b8 19 fc ff ff       	mov    eax,0xfffffc19
   2801d:	e9 c0 03 00 00       	jmp    283e2 <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:181
  seconds = 0;
   28022:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/time.c:182
  day = 0;                      // Means days since day 0 now
   28029:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:183
  overflow = 0;
   28030:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/time.c:190
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
   28037:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2803a:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   2803d:	05 6c 07 00 00       	add    eax,0x76c
   28042:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/time.c:192

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
   28045:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28048:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   2804b:	3d 7c c6 59 00       	cmp    eax,0x59c67c
   28050:	7e 07                	jle    28059 <mktime+0x4aa>
/home/yogi/src/os/chrisOS/src/time.c:192 (discriminator 1)
   28052:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/time.c:193
  day = (tm_year - year) * 365;
   28059:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2805c:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   2805f:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
   28065:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:194
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
   28068:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   2806d:	2b 45 f4             	sub    eax,DWORD PTR [ebp-0xc]
   28070:	89 c2                	mov    edx,eax
   28072:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28075:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   28078:	8d 48 03             	lea    ecx,[eax+0x3]
   2807b:	85 c0                	test   eax,eax
   2807d:	0f 48 c1             	cmovs  eax,ecx
   28080:	c1 f8 02             	sar    eax,0x2
   28083:	83 c0 01             	add    eax,0x1
   28086:	39 c2                	cmp    edx,eax
   28088:	7d 04                	jge    2808e <mktime+0x4df>
/home/yogi/src/os/chrisOS/src/time.c:194 (discriminator 1)
   2808a:	83 4d e8 02          	or     DWORD PTR [ebp-0x18],0x2
/home/yogi/src/os/chrisOS/src/time.c:195
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
   2808e:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28091:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   28094:	8d 50 03             	lea    edx,[eax+0x3]
   28097:	85 c0                	test   eax,eax
   28099:	0f 48 c2             	cmovs  eax,edx
   2809c:	c1 f8 02             	sar    eax,0x2
   2809f:	89 c1                	mov    ecx,eax
   280a1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   280a4:	83 e0 03             	and    eax,0x3
   280a7:	85 c0                	test   eax,eax
   280a9:	74 29                	je     280d4 <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 1)
   280ab:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   280ae:	99                   	cdq    
   280af:	c1 ea 1e             	shr    edx,0x1e
   280b2:	01 d0                	add    eax,edx
   280b4:	83 e0 03             	and    eax,0x3
   280b7:	29 d0                	sub    eax,edx
   280b9:	89 c3                	mov    ebx,eax
   280bb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   280be:	99                   	cdq    
   280bf:	c1 ea 1e             	shr    edx,0x1e
   280c2:	01 d0                	add    eax,edx
   280c4:	83 e0 03             	and    eax,0x3
   280c7:	29 d0                	sub    eax,edx
   280c9:	39 c3                	cmp    ebx,eax
   280cb:	7d 07                	jge    280d4 <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 3)
   280cd:	b8 01 00 00 00       	mov    eax,0x1
   280d2:	eb 05                	jmp    280d9 <mktime+0x52a>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 4)
   280d4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 6)
   280d9:	01 c8                	add    eax,ecx
   280db:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
   280de:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   280e1:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   280e4:	89 c1                	mov    ecx,eax
   280e6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   280eb:	89 c8                	mov    eax,ecx
   280ed:	f7 ea                	imul   edx
   280ef:	c1 fa 05             	sar    edx,0x5
   280f2:	89 c8                	mov    eax,ecx
   280f4:	c1 f8 1f             	sar    eax,0x1f
   280f7:	89 d6                	mov    esi,edx
   280f9:	29 c6                	sub    esi,eax
   280fb:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   280fe:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28103:	89 c8                	mov    eax,ecx
   28105:	f7 ea                	imul   edx
   28107:	c1 fa 05             	sar    edx,0x5
   2810a:	89 c8                	mov    eax,ecx
   2810c:	c1 f8 1f             	sar    eax,0x1f
   2810f:	29 c2                	sub    edx,eax
   28111:	89 d0                	mov    eax,edx
   28113:	6b c0 64             	imul   eax,eax,0x64
   28116:	29 c1                	sub    ecx,eax
   28118:	89 c8                	mov    eax,ecx
   2811a:	85 c0                	test   eax,eax
   2811c:	74 49                	je     28167 <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 1)
   2811e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28121:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28126:	89 c8                	mov    eax,ecx
   28128:	f7 ea                	imul   edx
   2812a:	c1 fa 05             	sar    edx,0x5
   2812d:	89 c8                	mov    eax,ecx
   2812f:	c1 f8 1f             	sar    eax,0x1f
   28132:	89 d3                	mov    ebx,edx
   28134:	29 c3                	sub    ebx,eax
   28136:	6b c3 64             	imul   eax,ebx,0x64
   28139:	89 cb                	mov    ebx,ecx
   2813b:	29 c3                	sub    ebx,eax
   2813d:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   28140:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28145:	89 c8                	mov    eax,ecx
   28147:	f7 ea                	imul   edx
   28149:	c1 fa 05             	sar    edx,0x5
   2814c:	89 c8                	mov    eax,ecx
   2814e:	c1 f8 1f             	sar    eax,0x1f
   28151:	29 c2                	sub    edx,eax
   28153:	89 d0                	mov    eax,edx
   28155:	6b c0 64             	imul   eax,eax,0x64
   28158:	29 c1                	sub    ecx,eax
   2815a:	89 c8                	mov    eax,ecx
   2815c:	39 c3                	cmp    ebx,eax
   2815e:	7d 07                	jge    28167 <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 3)
   28160:	b8 01 00 00 00       	mov    eax,0x1
   28165:	eb 05                	jmp    2816c <mktime+0x5bd>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 4)
   28167:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
   2816c:	01 f0                	add    eax,esi
   2816e:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
   28171:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28174:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   28177:	89 c1                	mov    ecx,eax
   28179:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2817e:	89 c8                	mov    eax,ecx
   28180:	f7 ea                	imul   edx
   28182:	c1 fa 07             	sar    edx,0x7
   28185:	89 c8                	mov    eax,ecx
   28187:	c1 f8 1f             	sar    eax,0x1f
   2818a:	89 d6                	mov    esi,edx
   2818c:	29 c6                	sub    esi,eax
   2818e:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28191:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28196:	89 c8                	mov    eax,ecx
   28198:	f7 ea                	imul   edx
   2819a:	c1 fa 07             	sar    edx,0x7
   2819d:	89 c8                	mov    eax,ecx
   2819f:	c1 f8 1f             	sar    eax,0x1f
   281a2:	29 c2                	sub    edx,eax
   281a4:	89 d0                	mov    eax,edx
   281a6:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   281ac:	29 c1                	sub    ecx,eax
   281ae:	89 c8                	mov    eax,ecx
   281b0:	85 c0                	test   eax,eax
   281b2:	74 4f                	je     28203 <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 1)
   281b4:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   281b7:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   281bc:	89 c8                	mov    eax,ecx
   281be:	f7 ea                	imul   edx
   281c0:	c1 fa 07             	sar    edx,0x7
   281c3:	89 c8                	mov    eax,ecx
   281c5:	c1 f8 1f             	sar    eax,0x1f
   281c8:	89 d3                	mov    ebx,edx
   281ca:	29 c3                	sub    ebx,eax
   281cc:	69 c3 90 01 00 00    	imul   eax,ebx,0x190
   281d2:	89 cb                	mov    ebx,ecx
   281d4:	29 c3                	sub    ebx,eax
   281d6:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   281d9:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   281de:	89 c8                	mov    eax,ecx
   281e0:	f7 ea                	imul   edx
   281e2:	c1 fa 07             	sar    edx,0x7
   281e5:	89 c8                	mov    eax,ecx
   281e7:	c1 f8 1f             	sar    eax,0x1f
   281ea:	29 c2                	sub    edx,eax
   281ec:	89 d0                	mov    eax,edx
   281ee:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   281f4:	29 c1                	sub    ecx,eax
   281f6:	89 c8                	mov    eax,ecx
   281f8:	39 c3                	cmp    ebx,eax
   281fa:	7d 07                	jge    28203 <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 3)
   281fc:	b8 01 00 00 00       	mov    eax,0x1
   28201:	eb 05                	jmp    28208 <mktime+0x659>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 4)
   28203:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
   28208:	01 f0                	add    eax,esi
   2820a:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:199 (discriminator 6)

  yday = month = 0;
   2820d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   28214:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   28217:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:200 (discriminator 6)
  while (month < tmbuf->tm_mon) {
   2821a:	eb 7b                	jmp    28297 <mktime+0x6e8>
/home/yogi/src/os/chrisOS/src/time.c:201
    yday += _ytab[LEAPYEAR(tm_year)][month];
   2821c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2821f:	83 e0 03             	and    eax,0x3
   28222:	85 c0                	test   eax,eax
   28224:	75 50                	jne    28276 <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 1)
   28226:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28229:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2822e:	89 c8                	mov    eax,ecx
   28230:	f7 ea                	imul   edx
   28232:	c1 fa 05             	sar    edx,0x5
   28235:	89 c8                	mov    eax,ecx
   28237:	c1 f8 1f             	sar    eax,0x1f
   2823a:	29 c2                	sub    edx,eax
   2823c:	89 d0                	mov    eax,edx
   2823e:	6b c0 64             	imul   eax,eax,0x64
   28241:	29 c1                	sub    ecx,eax
   28243:	89 c8                	mov    eax,ecx
   28245:	85 c0                	test   eax,eax
   28247:	75 26                	jne    2826f <mktime+0x6c0>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 4)
   28249:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   2824c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28251:	89 c8                	mov    eax,ecx
   28253:	f7 ea                	imul   edx
   28255:	c1 fa 07             	sar    edx,0x7
   28258:	89 c8                	mov    eax,ecx
   2825a:	c1 f8 1f             	sar    eax,0x1f
   2825d:	29 c2                	sub    edx,eax
   2825f:	89 d0                	mov    eax,edx
   28261:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28267:	29 c1                	sub    ecx,eax
   28269:	89 c8                	mov    eax,ecx
   2826b:	85 c0                	test   eax,eax
   2826d:	75 07                	jne    28276 <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 5)
   2826f:	ba 01 00 00 00       	mov    edx,0x1
   28274:	eb 05                	jmp    2827b <mktime+0x6cc>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 6)
   28276:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 8)
   2827b:	89 d0                	mov    eax,edx
   2827d:	01 c0                	add    eax,eax
   2827f:	01 d0                	add    eax,edx
   28281:	c1 e0 02             	shl    eax,0x2
   28284:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   28287:	01 d0                	add    eax,edx
   28289:	8b 04 85 20 60 08 00 	mov    eax,DWORD PTR [eax*4+0x86020]
   28290:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:202 (discriminator 8)
    month++;
   28293:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/time.c:200
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
   28297:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2829a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   2829d:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   282a0:	0f 8f 76 ff ff ff    	jg     2821c <mktime+0x66d>
/home/yogi/src/os/chrisOS/src/time.c:204
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
   282a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282a9:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   282ac:	83 e8 01             	sub    eax,0x1
   282af:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:205
  if (day + yday < 0) overflow|=4;
   282b2:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   282b5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   282b8:	01 d0                	add    eax,edx
   282ba:	85 c0                	test   eax,eax
   282bc:	79 04                	jns    282c2 <mktime+0x713>
/home/yogi/src/os/chrisOS/src/time.c:205 (discriminator 1)
   282be:	83 4d e8 04          	or     DWORD PTR [ebp-0x18],0x4
/home/yogi/src/os/chrisOS/src/time.c:206
  day += yday;
   282c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   282c5:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:208

  tmbuf->tm_yday = yday;
   282c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282cb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   282ce:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:209
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
   282d1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   282d4:	8d 48 04             	lea    ecx,[eax+0x4]
   282d7:	ba 93 24 49 92       	mov    edx,0x92492493
   282dc:	89 c8                	mov    eax,ecx
   282de:	f7 ea                	imul   edx
   282e0:	8d 04 0a             	lea    eax,[edx+ecx*1]
   282e3:	c1 f8 02             	sar    eax,0x2
   282e6:	89 c2                	mov    edx,eax
   282e8:	89 c8                	mov    eax,ecx
   282ea:	c1 f8 1f             	sar    eax,0x1f
   282ed:	29 c2                	sub    edx,eax
   282ef:	89 d0                	mov    eax,edx
   282f1:	89 c2                	mov    edx,eax
   282f3:	c1 e2 03             	shl    edx,0x3
   282f6:	29 c2                	sub    edx,eax
   282f8:	89 c8                	mov    eax,ecx
   282fa:	29 d0                	sub    eax,edx
   282fc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   282ff:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/chrisOS/src/time.c:211

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
   28302:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28305:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   28308:	c1 e0 02             	shl    eax,0x2
   2830b:	89 c2                	mov    edx,eax
   2830d:	c1 e2 04             	shl    edx,0x4
   28310:	29 c2                	sub    edx,eax
   28312:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28315:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   28318:	01 d0                	add    eax,edx
   2831a:	c1 e0 02             	shl    eax,0x2
   2831d:	89 c2                	mov    edx,eax
   2831f:	c1 e2 04             	shl    edx,0x4
   28322:	29 c2                	sub    edx,eax
   28324:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28327:	8b 00                	mov    eax,DWORD PTR [eax]
   28329:	01 d0                	add    eax,edx
   2832b:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:213

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
   2832e:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   28333:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   28336:	89 c1                	mov    ecx,eax
   28338:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   2833d:	89 c8                	mov    eax,ecx
   2833f:	f7 ea                	imul   edx
   28341:	8d 04 0a             	lea    eax,[edx+ecx*1]
   28344:	c1 f8 10             	sar    eax,0x10
   28347:	89 c2                	mov    edx,eax
   28349:	89 c8                	mov    eax,ecx
   2834b:	c1 f8 1f             	sar    eax,0x1f
   2834e:	29 c2                	sub    edx,eax
   28350:	89 d0                	mov    eax,edx
   28352:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   28355:	7d 04                	jge    2835b <mktime+0x7ac>
/home/yogi/src/os/chrisOS/src/time.c:213 (discriminator 1)
   28357:	83 4d e8 08          	or     DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/time.c:214
  seconds += day * SECS_DAY;
   2835b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2835e:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   28364:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:217

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   28367:	a1 90 02 12 00       	mov    eax,ds:0x120290
   2836c:	85 c0                	test   eax,eax
   2836e:	7e 13                	jle    28383 <mktime+0x7d4>
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 1)
   28370:	a1 90 02 12 00       	mov    eax,ds:0x120290
   28375:	ba ff ff ff 7f       	mov    edx,0x7fffffff
   2837a:	29 c2                	sub    edx,eax
   2837c:	89 d0                	mov    eax,edx
   2837e:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   28381:	7c 15                	jl     28398 <mktime+0x7e9>
/home/yogi/src/os/chrisOS/src/time.c:218 (discriminator 3)
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   28383:	a1 90 02 12 00       	mov    eax,ds:0x120290
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   28388:	85 c0                	test   eax,eax
   2838a:	79 10                	jns    2839c <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:218
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   2838c:	a1 90 02 12 00       	mov    eax,ds:0x120290
   28391:	f7 d8                	neg    eax
   28393:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   28396:	7e 04                	jle    2839c <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:219
          overflow|=16;
   28398:	83 4d e8 10          	or     DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/chrisOS/src/time.c:221
  }
  seconds += kTimeZone;
   2839c:	a1 90 02 12 00       	mov    eax,ds:0x120290
   283a1:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:223

  if (tmbuf->tm_isdst) {
   283a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   283a7:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   283aa:	85 c0                	test   eax,eax
   283ac:	74 0a                	je     283b8 <mktime+0x809>
/home/yogi/src/os/chrisOS/src/time.c:224
    dst = _dstbias;
   283ae:	a1 2c 04 12 00       	mov    eax,ds:0x12042c
   283b3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   283b6:	eb 07                	jmp    283bf <mktime+0x810>
/home/yogi/src/os/chrisOS/src/time.c:226
  } else {
    dst = 0;
   283b8:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:229
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
   283bf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   283c2:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   283c5:	7e 04                	jle    283cb <mktime+0x81c>
/home/yogi/src/os/chrisOS/src/time.c:229 (discriminator 1)
   283c7:	83 4d e8 20          	or     DWORD PTR [ebp-0x18],0x20
/home/yogi/src/os/chrisOS/src/time.c:230
  seconds -= dst;
   283cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   283ce:	29 45 dc             	sub    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:232

  if (overflow) return (time_t) overflow-2;
   283d1:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   283d5:	74 08                	je     283df <mktime+0x830>
/home/yogi/src/os/chrisOS/src/time.c:232 (discriminator 1)
   283d7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   283da:	83 e8 02             	sub    eax,0x2
   283dd:	eb 03                	jmp    283e2 <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:235

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
   283df:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/chrisOS/src/time.c:236
}
   283e2:	83 c4 20             	add    esp,0x20
   283e5:	5b                   	pop    ebx
   283e6:	5e                   	pop    esi
   283e7:	5d                   	pop    ebp
   283e8:	c3                   	ret    

000283e9 <_strdate>:
_strdate():
/home/yogi/src/os/chrisOS/src/time.c:241

#if !defined(KERNEL) && !defined(OS_LIB)


char *_strdate(char *s) {
   283e9:	55                   	push   ebp
   283ea:	89 e5                	mov    ebp,esp
   283ec:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:244
  time_t now;

  time(&now);
   283ef:	8d 45 fc             	lea    eax,[ebp-0x4]
   283f2:	50                   	push   eax
   283f3:	e8 48 f4 ff ff       	call   27840 <time>
   283f8:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:247
  //fix me!
  //  strftime(s, 9, "%D", localtime(&now));
  return s;
   283fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:248
}
   283fe:	c9                   	leave  
   283ff:	c3                   	ret    

00028400 <_strtime>:
_strtime():
/home/yogi/src/os/chrisOS/src/time.c:250

char *_strtime(char *s) {
   28400:	55                   	push   ebp
   28401:	89 e5                	mov    ebp,esp
   28403:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:253
  time_t now;

  time(&now);
   28406:	8d 45 fc             	lea    eax,[ebp-0x4]
   28409:	50                   	push   eax
   2840a:	e8 31 f4 ff ff       	call   27840 <time>
   2840f:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:256
  //fix me
  //  strftime(s, 9, "%T", localtime(&now));
  return s;
   28412:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:257
}
   28415:	c9                   	leave  
   28416:	c3                   	ret    

00028417 <waitTicks>:
waitTicks():
/home/yogi/src/os/chrisOS/src/time.c:260

void __attribute__((noinline))waitTicks(int TicksToWait)
{
   28417:	55                   	push   ebp
   28418:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:262
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
   2841a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2841e:	74 0f                	je     2842f <waitTicks+0x18>
/home/yogi/src/os/chrisOS/src/time.c:267 (discriminator 1)
        return;
    //printd(DEBUG_TIMER,"ttw=%08X", TicksToWait);
    do
    {
        __asm("sti\nhlt\n");
   28420:	fb                   	sti    
   28421:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:268 (discriminator 1)
        TicksToWait--;
   28422:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:269 (discriminator 1)
    } while (TicksToWait>0);
   28426:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2842a:	7f f4                	jg     28420 <waitTicks+0x9>
/home/yogi/src/os/chrisOS/src/time.c:270 (discriminator 2)
    return;
   2842c:	90                   	nop
   2842d:	eb 01                	jmp    28430 <waitTicks+0x19>
/home/yogi/src/os/chrisOS/src/time.c:263

void __attribute__((noinline))waitTicks(int TicksToWait)
{
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
        return;
   2842f:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:271
    {
        __asm("sti\nhlt\n");
        TicksToWait--;
    } while (TicksToWait>0);
    return;
}
   28430:	5d                   	pop    ebp
   28431:	c3                   	ret    

00028432 <wait>:
wait():
/home/yogi/src/os/chrisOS/src/time.c:274

void /*__attribute__((noinline))*/wait(int msToWait)
{
   28432:	55                   	push   ebp
   28433:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:277
    //printk("msToWait=%u, ticksperms=%u, ticksToWait=%u",msToWait, kTicksPerMS, msToWait*kTicksPerMS);
    //STOPHERE2
    waitTicks(msToWait/kTicksPerMS);
   28435:	8b 0d 84 02 12 00    	mov    ecx,DWORD PTR ds:0x120284
   2843b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2843e:	99                   	cdq    
   2843f:	f7 f9                	idiv   ecx
   28441:	50                   	push   eax
   28442:	e8 d0 ff ff ff       	call   28417 <waitTicks>
   28447:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:278
}
   2844a:	90                   	nop
   2844b:	c9                   	leave  
   2844c:	c3                   	ret    

0002844d <wait3>:
wait3():
/home/yogi/src/os/chrisOS/src/time.c:281

void wait3(double msToWait)
{
   2844d:	55                   	push   ebp
   2844e:	89 e5                	mov    ebp,esp
   28450:	83 ec 28             	sub    esp,0x28
   28453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28456:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   28459:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2845c:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:282
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);
   2845f:	a1 60 02 12 00       	mov    eax,ds:0x120260
   28464:	8b 00                	mov    eax,DWORD PTR [eax]
   28466:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28469:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28470:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   28473:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   28476:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   28479:	dd 45 e8             	fld    QWORD PTR [ebp-0x18]
   2847c:	8b 0d 80 02 12 00    	mov    ecx,DWORD PTR ds:0x120280
   28482:	b8 e8 03 00 00       	mov    eax,0x3e8
   28487:	ba 00 00 00 00       	mov    edx,0x0
   2848c:	f7 f1                	div    ecx
   2848e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28491:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28498:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   2849b:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   2849e:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   284a1:	de f9                	fdivp  st(1),st
   284a3:	de c1                	faddp  st(1),st
   284a5:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   284a8:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   284ab:	dd 5d f8             	fstp   QWORD PTR [ebp-0x8]
/home/yogi/src/os/chrisOS/src/time.c:284

while (endTicks > (double)*kTicksSinceStart)
   284ae:	eb 02                	jmp    284b2 <wait3+0x65>
/home/yogi/src/os/chrisOS/src/time.c:285
    {__asm__("sti\n hlt\n");}
   284b0:	fb                   	sti    
   284b1:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:284

void wait3(double msToWait)
{
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);

while (endTicks > (double)*kTicksSinceStart)
   284b2:	a1 60 02 12 00       	mov    eax,ds:0x120260
   284b7:	8b 00                	mov    eax,DWORD PTR [eax]
   284b9:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   284bc:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   284c3:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   284c6:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   284c9:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   284cc:	dd 45 f8             	fld    QWORD PTR [ebp-0x8]
   284cf:	df e9                	fucomip st,st(1)
   284d1:	dd d8                	fstp   st(0)
   284d3:	77 db                	ja     284b0 <wait3+0x63>
/home/yogi/src/os/chrisOS/src/time.c:287
    {__asm__("sti\n hlt\n");}
    
}
   284d5:	90                   	nop
   284d6:	c9                   	leave  
   284d7:	c3                   	ret    

000284d8 <wait2>:
wait2():
/home/yogi/src/os/chrisOS/src/time.c:290

void wait2(unsigned msToWait)
{
   284d8:	55                   	push   ebp
   284d9:	89 e5                	mov    ebp,esp
   284db:	53                   	push   ebx
   284dc:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/time.c:291
    uint64_t startTicks = *kTicksSinceStart;             //25
   284df:	a1 60 02 12 00       	mov    eax,ds:0x120260
   284e4:	8b 00                	mov    eax,DWORD PTR [eax]
   284e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   284e9:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:292
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
   284f0:	8b 1d 80 02 12 00    	mov    ebx,DWORD PTR ds:0x120280
   284f6:	b8 e8 03 00 00       	mov    eax,0x3e8
   284fb:	ba 00 00 00 00       	mov    edx,0x0
   28500:	f7 f3                	div    ebx
   28502:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:293
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
   28505:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28508:	ba 00 00 00 00       	mov    edx,0x0
   2850d:	f7 75 ec             	div    DWORD PTR [ebp-0x14]
   28510:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   28513:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:294
    uint64_t endTicks = startTicks + totalTicksToWait;
   2851a:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   2851d:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   28520:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   28523:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   28526:	01 c8                	add    eax,ecx
   28528:	11 da                	adc    edx,ebx
   2852a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   2852d:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
/home/yogi/src/os/chrisOS/src/time.c:296

    if (endTicks < *kTicksSinceStart)
   28530:	a1 60 02 12 00       	mov    eax,ds:0x120260
   28535:	8b 00                	mov    eax,DWORD PTR [eax]
   28537:	ba 00 00 00 00       	mov    edx,0x0
   2853c:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   2853f:	72 0d                	jb     2854e <wait2+0x76>
   28541:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28544:	77 25                	ja     2856b <wait2+0x93>
   28546:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   28549:	77 20                	ja     2856b <wait2+0x93>
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   2854b:	eb 01                	jmp    2854e <wait2+0x76>
/home/yogi/src/os/chrisOS/src/time.c:305
    {__asm__("hlt\n");}
   2854d:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   2854e:	a1 60 02 12 00       	mov    eax,ds:0x120260
   28553:	8b 00                	mov    eax,DWORD PTR [eax]
   28555:	ba 00 00 00 00       	mov    edx,0x0
   2855a:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   2855d:	72 ee                	jb     2854d <wait2+0x75>
   2855f:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28562:	77 08                	ja     2856c <wait2+0x94>
   28564:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   28567:	72 e4                	jb     2854d <wait2+0x75>
   28569:	eb 01                	jmp    2856c <wait2+0x94>
/home/yogi/src/os/chrisOS/src/time.c:297
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
    uint64_t endTicks = startTicks + totalTicksToWait;

    if (endTicks < *kTicksSinceStart)
        return;
   2856b:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:307
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
    {__asm__("hlt\n");}
    //printf("done waiting!\n");
}
   2856c:	83 c4 24             	add    esp,0x24
   2856f:	5b                   	pop    ebx
   28570:	5d                   	pop    ebp
   28571:	c3                   	ret    
   28572:	66 90                	xchg   ax,ax
   28574:	66 90                	xchg   ax,ax
   28576:	66 90                	xchg   ax,ax
   28578:	66 90                	xchg   ax,ax
   2857a:	66 90                	xchg   ax,ax
   2857c:	66 90                	xchg   ax,ax
   2857e:	66 90                	xchg   ax,ax

00028580 <__udivdi3>:
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   28580:	55                   	push   ebp
   28581:	57                   	push   edi
   28582:	56                   	push   esi
   28583:	53                   	push   ebx
   28584:	83 ec 1c             	sub    esp,0x1c
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
  const DWunion dd = {.ll = d};
   28587:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   2858b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
   2858f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
   28593:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   28597:	85 f6                	test   esi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1013
static inline __attribute__ ((__always_inline__))
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
   28599:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
   2859d:	89 ca                	mov    edx,ecx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
  const DWunion dd = {.ll = d};
   2859f:	89 f8                	mov    eax,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   285a1:	75 3d                	jne    285e0 <__udivdi3+0x60>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1028
    {
      if (d0 > n1)
   285a3:	39 cf                	cmp    edi,ecx
   285a5:	0f 87 c5 00 00 00    	ja     28670 <__udivdi3+0xf0>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1041
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
   285ab:	85 ff                	test   edi,edi
   285ad:	89 fd                	mov    ebp,edi
   285af:	75 0b                	jne    285bc <__udivdi3+0x3c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1042
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
   285b1:	b8 01 00 00 00       	mov    eax,0x1
   285b6:	31 d2                	xor    edx,edx
   285b8:	f7 f7                	div    edi
   285ba:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1044

	  udiv_qrnnd (q1, n1, 0, n1, d0);
   285bc:	89 c8                	mov    eax,ecx
   285be:	31 d2                	xor    edx,edx
   285c0:	f7 f5                	div    ebp
   285c2:	89 c1                	mov    ecx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1045
	  udiv_qrnnd (q0, n0, n1, n0, d0);
   285c4:	89 d8                	mov    eax,ebx
   285c6:	89 cf                	mov    edi,ecx
   285c8:	f7 f5                	div    ebp
   285ca:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   285cc:	89 d8                	mov    eax,ebx
   285ce:	89 fa                	mov    edx,edi
   285d0:	83 c4 1c             	add    esp,0x1c
   285d3:	5b                   	pop    ebx
   285d4:	5e                   	pop    esi
   285d5:	5f                   	pop    edi
   285d6:	5d                   	pop    ebp
   285d7:	c3                   	ret    
   285d8:	90                   	nop
   285d9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   285e0:	39 ce                	cmp    esi,ecx
   285e2:	77 74                	ja     28658 <__udivdi3+0xd8>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1155
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   285e4:	0f bd fe             	bsr    edi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1156
	  if (bm == 0)
   285e7:	83 f7 1f             	xor    edi,0x1f
   285ea:	0f 84 98 00 00 00    	je     28688 <__udivdi3+0x108>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   285f0:	bb 20 00 00 00       	mov    ebx,0x20
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   285f5:	89 f9                	mov    ecx,edi
   285f7:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   285f9:	29 fb                	sub    ebx,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   285fb:	d3 e6                	shl    esi,cl
   285fd:	89 d9                	mov    ecx,ebx
   285ff:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      d0 = d0 << bm;
   28601:	89 f9                	mov    ecx,edi
   28603:	d3 e0                	shl    eax,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
   28605:	09 ee                	or     esi,ebp
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28607:	89 d9                	mov    ecx,ebx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
   28609:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      n2 = n1 >> b;
   2860d:	89 d5                	mov    ebp,edx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   2860f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28613:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   28615:	89 f9                	mov    ecx,edi
   28617:	d3 e2                	shl    edx,cl
   28619:	89 d9                	mov    ecx,ebx
   2861b:	d3 e8                	shr    eax,cl
   2861d:	09 c2                	or     edx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1196
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   2861f:	89 d0                	mov    eax,edx
   28621:	89 ea                	mov    edx,ebp
   28623:	f7 f6                	div    esi
   28625:	89 d5                	mov    ebp,edx
   28627:	89 c3                	mov    ebx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1197
	      umul_ppmm (m1, m0, q0, d0);
   28629:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1199

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   2862d:	39 d5                	cmp    ebp,edx
   2862f:	72 10                	jb     28641 <__udivdi3+0xc1>
   28631:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
   28635:	89 f9                	mov    ecx,edi
   28637:	d3 e6                	shl    esi,cl
   28639:	39 c6                	cmp    esi,eax
   2863b:	73 07                	jae    28644 <__udivdi3+0xc4>
   2863d:	39 d5                	cmp    ebp,edx
   2863f:	75 03                	jne    28644 <__udivdi3+0xc4>
   28641:	83 eb 01             	sub    ebx,0x1
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1202
		{
		  q0--;
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
   28644:	31 ff                	xor    edi,edi
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28646:	89 d8                	mov    eax,ebx
   28648:	89 fa                	mov    edx,edi
   2864a:	83 c4 1c             	add    esp,0x1c
   2864d:	5b                   	pop    ebx
   2864e:	5e                   	pop    esi
   2864f:	5f                   	pop    edi
   28650:	5d                   	pop    ebp
   28651:	c3                   	ret    
   28652:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   28658:	31 ff                	xor    edi,edi
   2865a:	31 db                	xor    ebx,ebx
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   2865c:	89 d8                	mov    eax,ebx
   2865e:	89 fa                	mov    edx,edi
   28660:	83 c4 1c             	add    esp,0x1c
   28663:	5b                   	pop    ebx
   28664:	5e                   	pop    esi
   28665:	5f                   	pop    edi
   28666:	5d                   	pop    ebp
   28667:	c3                   	ret    
   28668:	90                   	nop
   28669:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1032
    {
      if (d0 > n1)
	{
	  /* 0q = nn / 0D */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   28670:	89 d8                	mov    eax,ebx
   28672:	f7 f7                	div    edi
   28674:	31 ff                	xor    edi,edi
   28676:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28678:	89 d8                	mov    eax,ebx
   2867a:	89 fa                	mov    edx,edi
   2867c:	83 c4 1c             	add    esp,0x1c
   2867f:	5b                   	pop    ebx
   28680:	5e                   	pop    esi
   28681:	5f                   	pop    edi
   28682:	5d                   	pop    ebp
   28683:	c3                   	ret    
   28684:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1166

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
   28688:	39 ce                	cmp    esi,ecx
   2868a:	72 0c                	jb     28698 <__udivdi3+0x118>
   2868c:	31 db                	xor    ebx,ebx
   2868e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
   28692:	0f 87 34 ff ff ff    	ja     285cc <__udivdi3+0x4c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1169
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
   28698:	bb 01 00 00 00       	mov    ebx,0x1
   2869d:	e9 2a ff ff ff       	jmp    285cc <__udivdi3+0x4c>
