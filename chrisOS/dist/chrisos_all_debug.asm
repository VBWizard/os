
Debug/cross-Linux/chrisos:     file format elf32-i386


Disassembly of section .text:

00001000 <tos>:
tos():
/home/yogi/src/os/chrisOS/asm/boot.s:15
.att_syntax noprefix
.code16
.globl tos
.type tos, @function
tos:
    ljmp $0,$tos3
    1000:	ea 05 10 00 00 e9 da 	jmp    0xdae9:0x1005

00001005 <tos3>:
tos3():
/home/yogi/src/os/chrisOS/asm/boot.s:18
tos3:
.code32
        jmp	initAP	# initialize awakened AP
    1005:	e9 da 06 00 00       	jmp    16e4 <initAP>
    100a:	66 90                	xchg   ax,ax
    100c:	02 b0 ad 1b 03 00    	add    dh,BYTE PTR [eax+0x31bad]
    1012:	00 00                	add    BYTE PTR [eax],al
    1014:	fb                   	sti    
    1015:	4f                   	dec    edi
    1016:	52                   	push   edx
    1017:	e4 e8                	in     al,0xe8

00001018 <_start>:
_start():
/home/yogi/src/os/chrisOS/asm/boot.s:84
        //mov %esp, stack_top

	# We are now ready to actually execute C code. We cannot embed that in an
	# assembly file, so we'll create a kernel.c file in a moment. In that file,
	# we'll create a C entry point called kernel_main and call it here.
	call kernel_main
    1018:	e8 6e 38 02 00       	call   2488b <kernel_main>
/home/yogi/src/os/chrisOS/asm/boot.s:92
	# infinite loop. To do that, we use the clear interrupt ('cli') instruction
	# to disable interrupts, the halt instruction ('hlt') to stop the CPU until
	# the next interrupt arrives, and jumping to the halt instruction if it ever
	# continues execution, just to be safe. We will create a local label rather
	# than real symbol and jump to there endlessly.
	cli
    101d:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/boot.s:93
	hlt
    101e:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/boot.s:95
.Lhang:
	jmp .Lhang
    101f:	eb fe                	jmp    101f <_start+0x7>
    1021:	66 90                	xchg   ax,ax
    1023:	66 90                	xchg   ax,ax
    1025:	66 90                	xchg   ax,ax
    1027:	90                   	nop

00001028 <isE820Available>:
isE820Available():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:11

.globl isE820Available
.type isE820Available, @function
isE820Available:
.code32
mov eax,0x10
    1028:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:12
mov ds,eax
    102d:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:13
mov saveESP, esp
    102f:	89 25 c3 12 00 00    	mov    DWORD PTR ds:0x12c3,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:14
mov sp, 0xfffc
    1035:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:15
call leaveProtMode
    1039:	e8 67 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:17
.code16
mov ax, 0x8000
    103e:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:19
mov ss, ax
pusha
    1043:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:20
mov eax,0x0000E820
    1044:	66 b8 20 e8          	mov    ax,0xe820
    1048:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:21
mov edx, 0x534D4150
    104a:	66 ba 50 41          	mov    dx,0x4150
    104e:	4d                   	dec    ebp
    104f:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:22
mov ebx, 0
    1050:	66 bb 00 00          	mov    bx,0x0
    1054:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:23
mov ecx, 100
    1056:	66 b9 64 00          	mov    cx,0x64
    105a:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:24
lea di, e820data
    105c:	8d 3e                	lea    edi,[esi]
    105e:	df 12                	fist   WORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:25
int 0x15
    1060:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:26
mov savedValue, eax
    1062:	66 a3 c7 12 61 e8    	mov    ds:0xe86112c7,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:29
popa
.code32
call reenterProtMode
    1068:	83 00 00             	add    DWORD PTR [eax],0x0
    106b:	00 c3                	add    bl,al

0000106d <getInt12Memory>:
getInt12Memory():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:37

.globl getInt12Memory
.type getInt12Memory, @function
getInt12Memory:
.code32
mov eax,0x10
    106d:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:38
mov ds,eax
    1072:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:39
mov saveESP, esp
    1074:	89 25 c3 12 00 00    	mov    DWORD PTR ds:0x12c3,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:40
mov sp, 0xfffc
    107a:	66 bc fc ff          	mov    sp,0xfffc
/home/yogi/src/os/chrisOS/asm/bootCPU.s:41
call leaveProtMode
    107e:	e8 22 00 00 00       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:43
.code16
mov ax, 0x8000
    1083:	b8 00 80 8e d0       	mov    eax,0xd08e8000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:45
mov ss, ax
int 0x12
    1088:	cd 12                	int    0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:46
movzx edx,ax
    108a:	66 0f b7 d0          	movzx  dx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:47
mov savedValue, edx
    108e:	66 89 16             	mov    WORD PTR [esi],dx
    1091:	c7                   	(bad)  
    1092:	12 b8 12 11 30 db    	adc    bh,BYTE PTR [eax-0x24cfeeee]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:50
mov ax, 0x1112    
xor bl, bl    
int 0x10 
    1098:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:52
.code32
call reenterProtMode
    109a:	e8 50 00 00 00       	call   10ef <reenterProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:53
ret
    109f:	c3                   	ret    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:54
jmp hang
    10a0:	e9 b8 00 00 00       	jmp    115d <hang>

000010a5 <leaveProtMode>:
leaveProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:60
//background, do on team, etc.
.globl leaveProtMode
.type leaveProtMode, @function
leaveProtMode:
.code32
lgdt [rmGdtp]
    10a5:	0f 01 15 78 49 12 00 	lgdtd  ds:0x124978
/home/yogi/src/os/chrisOS/asm/bootCPU.s:61
jmp 0x8:Into16BitProt
    10ac:	ea b3 10 00 00 08 00 	jmp    0x8:0x10b3

000010b3 <Into16BitProt>:
Into16BitProt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:64
Into16BitProt:
.code16
mov ax,0x10
    10b3:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:66
mov ds, ax
mov gs, ax
    10b8:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:67
mov fs, ax
    10ba:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:68
mov es, ax
    10bc:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:70
.code32
mov eax, cr0
    10be:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:71
and al, 0xFe
    10c1:	24 fe                	and    al,0xfe
/home/yogi/src/os/chrisOS/asm/bootCPU.s:72
mov cr0, eax
    10c3:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:74
.code32
jmp 0:LeaveProtModeJmp
    10c6:	ea cd 10 00 00 00 00 	jmp    0x0:0x10cd

000010cd <LeaveProtModeJmp>:
LeaveProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:77
LeaveProtModeJmp:
.code16
mov ax, 0
    10cd:	b8 00 00 8e d8       	mov    eax,0xd88e0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:79
mov ds, ax
mov es, ax
    10d2:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:80
mov fs, ax
    10d4:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:81
mov gs, ax
    10d6:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:82
sidt [saved_idt]
    10d8:	0f 01 0e             	sidtd  [esi]
    10db:	d9 12                	fst    DWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:83
lidt [idt_real]
    10dd:	0f 01 1e             	lidtd  [esi]
    10e0:	d1 12                	rcl    DWORD PTR [edx],1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:84
sgdt [saved_gdt16_lo]
    10e2:	0f 01 06             	sgdtd  [esi]
    10e5:	bd 12 b8 00 00       	mov    ebp,0xb812
/home/yogi/src/os/chrisOS/asm/bootCPU.s:87
.code16
mov ax,0
mov ss,ax
    10ea:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:88
mov ds, ax
    10ec:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:90
.code32
ret
    10ee:	c3                   	ret    

000010ef <reenterProtMode>:
reenterProtMode():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:96

.globl reenterProtMode
.type reenterProtMode, @function
reenterProtMode:
.code16
lgdt [saved_gdt16_lo]
    10ef:	0f 01 16             	lgdtd  [esi]
    10f2:	bd 12 0f 01 1e       	mov    ebp,0x1e010f12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:97
lidt [saved_idt]
    10f7:	d9 12                	fst    DWORD PTR [edx]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:99
.code32
mov eax, cr0
    10f9:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:100
or  al, 0x1
    10fc:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:102
.code16
or  eax,0x10000   #clr 05/12/2016 - added wp bit
    10fe:	66 0d 00 00          	or     ax,0x0
    1102:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:104
.code32
mov cr0, eax
    1104:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:106
.code16
ljmp 0x18:reenterProtModeJmp
    1107:	ea 0c 11 18 00 66 b8 	jmp    0xb866:0x18110c

0000110c <reenterProtModeJmp>:
reenterProtModeJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:109
reenterProtModeJmp:
.code32
mov ax,0x10
    110c:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:110
mov ds,ax
    1110:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:111
mov es,ax
    1112:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:112
mov gs,ax
    1114:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:113
lgdt [kernelGDT]
    1116:	0f 01 15 88 49 12 00 	lgdtd  ds:0x124988
/home/yogi/src/os/chrisOS/asm/bootCPU.s:114
ljmp 0x8:reenterProtMode32Jmp
    111d:	ea 24 11 00 00 08 00 	jmp    0x8:0x1124

00001124 <reenterProtMode32Jmp>:
reenterProtMode32Jmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:117
reenterProtMode32Jmp:
.code16
mov ax,0x10
    1124:	b8 10 00 8e d8       	mov    eax,0xd88e0010
/home/yogi/src/os/chrisOS/asm/bootCPU.s:119
mov ds,ax
mov ss,ax
    1129:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:120
mov es,ax
    112b:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:121
mov fs,ax
    112d:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:122
mov gs,ax
    112f:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:124
.code32
mov eax,savedValue
    1131:	a1 c7 12 00 00       	mov    eax,ds:0x12c7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:125
mov esp,saveESP
    1136:	8b 25 c3 12 00 00    	mov    esp,DWORD PTR ds:0x12c3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:126
ret
    113c:	c3                   	ret    

0000113d <set_gdt>:
set_gdt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:132

.globl set_gdt
.type set_gdt, @function
set_gdt:
.code32
push eax
    113d:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:133
    mov eax,[esp+8]
    113e:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:134
    lgdt [eax]
    1142:	0f 01 10             	lgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:135
    jmp 0x08:.reload_CS
    1145:	ea 4c 11 00 00 08 00 	jmp    0x8:0x114c

0000114c <.reload_CS>:
.reload_CS():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:137
.reload_CS:
    mov eax, 0x10
    114c:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:138
    mov ds, ax
    1151:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:139
    mov es, ax
    1153:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:140
    mov fs, ax
    1155:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:141
    mov gs, ax
    1157:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:142
    mov ss, ax
    1159:	8e d0                	mov    ss,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:143
    pop eax
    115b:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:144
    ret
    115c:	c3                   	ret    

0000115d <hang>:
hang():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:146
hang:
    hlt
    115d:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:147
    jmp hang
    115e:	eb fd                	jmp    115d <hang>

00001160 <idt_load>:
idt_load():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:154
// Loads the IDT defined in '_idtp' into the processor.
// This is declared in C as 'extern void idt_load();'
.globl idt_load
.type idt_load, @function
idt_load:
    push ebp
    1160:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:155
    mov ebp, esp
    1161:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:156
    push eax
    1163:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:157
    push ebx
    1164:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:158
    cli
    1165:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:159
    mov eax,[ebp+12]    #size + bottom of offset
    1166:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:160
    mov ebx,[ebp+8]     #top of offset
    1169:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:161
    ror eax,16          #mov the size out of the way
    116c:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:162
    mov ax,bx           #move the top of the address
    116f:	66 89 d8             	mov    ax,bx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:163
    ror eax,16
    1172:	c1 c8 10             	ror    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:164
    shr ebx,16
    1175:	c1 eb 10             	shr    ebx,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:165
    mov idtPtrToLoad,eax
    1178:	a3 50 15 00 00       	mov    ds:0x1550,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:166
    mov idtPtrToLoad+4,ebx
    117d:	89 1d 54 15 00 00    	mov    DWORD PTR ds:0x1554,ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:169
    //we always put our IDT in idtPtrToLoad before calling idt_load
//    mov eax, word ptr idtPtrToLoad
    lidt [idtPtrToLoad]
    1183:	0f 01 1d 50 15 00 00 	lidtd  ds:0x1550
/home/yogi/src/os/chrisOS/asm/bootCPU.s:170
    sti
    118a:	fb                   	sti    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:171
    pop ebx
    118b:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:172
    pop eax
    118c:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:173
    pop ebp
    118d:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:174
    ret
    118e:	c3                   	ret    

0000118f <init_PIT>:
init_PIT():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:180
 #Input
 # ebx   Desired PIT frequency in Hz
 .globl init_PIT
.type init_PIT, @function
init_PIT:
    push ebp
    118f:	55                   	push   ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:181
    mov ebp, esp
    1190:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:183
    # Do some checking
    mov ebx,[ebp+8]
    1192:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:184
    pushad
    1195:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:185
    mov eax,0x10000                   #eax = reload value for slowest possible frequency (65536)
    1196:	b8 00 00 01 00       	mov    eax,0x10000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:186
    cmp ebx,18                        #Is the requested frequency too low?
    119b:	83 fb 12             	cmp    ebx,0x12
/home/yogi/src/os/chrisOS/asm/bootCPU.s:187
    jbe .gotReloadValue               # yes, use slowest possible frequency
    119e:	76 34                	jbe    11d4 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:189
 
    mov eax,1                         #ax = reload value for fastest possible frequency (1)
    11a0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:190
    cmp ebx,1193181                   #Is the requested frequency too high?
    11a5:	81 fb dd 34 12 00    	cmp    ebx,0x1234dd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:191
    jae .gotReloadValue               # yes, use fastest possible frequency
    11ab:	73 27                	jae    11d4 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:195
 
    # Calculate the reload value
 
    mov eax,3579545
    11ad:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:196
    mov edx,0                         #edx:eax = 3579545
    11b2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:197
    div ebx                           #eax = 3579545 / frequency, edx = remainder
    11b7:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:198
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11b9:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:199
    jb .l1                            # no, round down
    11bf:	72 01                	jb     11c2 <.l1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:200
    inc eax                           # yes, round up
    11c1:	40                   	inc    eax

000011c2 <.l1>:
.l1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:202
 .l1:
    mov ebx,3
    11c2:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:203
    mov edx,0                         #edx:eax = 3579545 * 256 / frequency
    11c7:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:204
    div ebx                           #eax = (3579545 * 256 / 3 * 256) / frequency
    11cc:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:205
    cmp edx,3 / 2                     #Is the remainder more than half?
    11ce:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:206
    jb .l2                            # no, round down
    11d1:	72 01                	jb     11d4 <.gotReloadValue>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:207
    inc eax                           # yes, round up
    11d3:	40                   	inc    eax

000011d4 <.gotReloadValue>:
.gotReloadValue():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:214
 
 
 # Store the reload value and calculate the actual frequency
 
 .gotReloadValue:
    push eax                          #Store reload_value for later
    11d4:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:215
    mov [PIT_reload_value],ax         #Store the reload value for later
    11d5:	66 a3 21 13 00 00    	mov    ds:0x1321,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:216
    mov ebx,eax                       #ebx = reload value
    11db:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:218
 
    mov eax,3579545
    11dd:	b8 99 9e 36 00       	mov    eax,0x369e99
/home/yogi/src/os/chrisOS/asm/bootCPU.s:219
    mov edx,0                         #edx:eax = 3579545
    11e2:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:220
    div ebx                           #eax = 3579545 / reload_value, edx = remainder
    11e7:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:221
    cmp edx,3579545 / 2               #Is the remainder more than half?
    11e9:	81 fa 4c 4f 1b 00    	cmp    edx,0x1b4f4c
/home/yogi/src/os/chrisOS/asm/bootCPU.s:222
    jb .l3                            # no, round down
    11ef:	72 01                	jb     11f2 <.l3>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:223
    inc eax                           # yes, round up
    11f1:	40                   	inc    eax

000011f2 <.l3>:
.l3():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:225
 .l3:
    mov ebx,3
    11f2:	bb 03 00 00 00       	mov    ebx,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:226
    mov edx,0                         #edx:eax = 3579545 / reload_value
    11f7:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:227
    div ebx                           #eax = (3579545 / 3) / frequency
    11fc:	f7 f3                	div    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:228
    cmp edx,3 / 2                     #Is the remainder more than half?
    11fe:	83 fa 01             	cmp    edx,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:229
    jb .l4                            # no, round down
    1201:	72 01                	jb     1204 <.l4>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:230
    inc eax                           # yes, round up
    1203:	40                   	inc    eax

00001204 <.l4>:
.l4():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:232
 .l4:
    mov [IRQ0_frequency],eax          #Store the actual frequency for displaying later
    1204:	a3 19 13 00 00       	mov    ds:0x1319,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:246
 #           time in ms = reload_value * 3000 / 3579545 * (2^42)/(2^42)
 #           time in ms = reload_value * 3000 * (2^42) / 3579545 / (2^42)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^42) * (2^32)
 #           time in ms * 2^32 = reload_value * 3000 * (2^42) / 3579545 / (2^10)
 
    pop ebx                           #ebx = reload_value
    1209:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:247
    mov eax,0xDBB3A062                #eax = 3000 * (2^42) / 3579545
    120a:	b8 62 a0 b3 db       	mov    eax,0xdbb3a062
/home/yogi/src/os/chrisOS/asm/bootCPU.s:248
    mul ebx                           #edx:eax = reload_value * 3000 * (2^42) / 3579545
    120f:	f7 e3                	mul    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:249
    shrd eax,edx,10
    1211:	0f ac d0 0a          	shrd   eax,edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:250
    shr edx,10                        #edx:eax = reload_value * 3000 * (2^42) / 3579545 / (2^10)
    1215:	c1 ea 0a             	shr    edx,0xa
/home/yogi/src/os/chrisOS/asm/bootCPU.s:252
 
    mov [IRQ0_ms],edx                 #Set whole ms between IRQs
    1218:	89 15 11 13 00 00    	mov    DWORD PTR ds:0x1311,edx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:253
    mov [IRQ0_fractions],eax          #Set fractions of 1 ms between IRQs
    121e:	a3 09 13 00 00       	mov    ds:0x1309,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:258
 
 
 # Program the PIT channel
 
    pushfd
    1223:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:259
    cli                               #Disabled interrupts (just in case)
    1224:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:261
 
    mov al,0b00110100                  #channel 0, lobyte/hibyte, rate generator
    1225:	b0 34                	mov    al,0x34
/home/yogi/src/os/chrisOS/asm/bootCPU.s:262
    out 0x43, al
    1227:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:264
 
    mov ax,[PIT_reload_value]         #ax = 16 bit reload value
    1229:	66 a1 21 13 00 00    	mov    ax,ds:0x1321
/home/yogi/src/os/chrisOS/asm/bootCPU.s:265
    out 0x40,al                       #Set low byte of PIT reload value
    122f:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:266
    mov al,ah                         #ax = high 8 bits of reload value
    1231:	88 e0                	mov    al,ah
/home/yogi/src/os/chrisOS/asm/bootCPU.s:267
    out 0x40,al                       #Set high byte of PIT reload value
    1233:	e6 40                	out    0x40,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:269
 
    popfd
    1235:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:271
 
    popad
    1236:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:272
    pop ebp
    1237:	5d                   	pop    ebp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:273
    sti
    1238:	fb                   	sti    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:274
    ret
    1239:	c3                   	ret    

0000123a <getE820Memory_asm>:
getE820Memory_asm():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:280

 .globl getE820Memory_asm
.type getE820Memory_asm, @function
getE820Memory_asm:
.code32
mov eax,0x10
    123a:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:281
mov ds,eax
    123f:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:282
mov saveESP, esp
    1241:	89 25 c3 12 00 00    	mov    DWORD PTR ds:0x12c3,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:283
mov sp, 0xfff7
    1247:	66 bc f7 ff          	mov    sp,0xfff7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:284
call leaveProtMode
    124b:	e8 55 fe ff ff       	call   10a5 <leaveProtMode>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:285
pusha
    1250:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:287
.code16
lea eax, word ptr lowSmapTbl
    1251:	66 8d 06             	lea    ax,[esi]
    1254:	70 13                	jo     1269 <getE820Memory_asm+0x2f>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:289
.code32
movzx eax,ax
    1256:	0f b7 c0             	movzx  eax,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:290
mov lowSmapTablePtr,eax
    1259:	a3 68 13 00 00       	mov    ds:0x1368,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:291
mov ax, 0
    125e:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:292
mov es, ax
    1262:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:293
mov ebx, 0
    1264:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:295
.code16
lea edi, word ptr [lowSmapTbl]
    1269:	66 8d 3e             	lea    di,[esi]
    126c:	70 13                	jo     1281 <getE820Memory_asm_getNext+0x13>

0000126e <getE820Memory_asm_getNext>:
.code32():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:298
.code32:
getE820Memory_asm_getNext:
mov eax, 0xe820
    126e:	66 b8 20 e8          	mov    ax,0xe820
    1272:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:299
mov edx, 0x534D4150
    1274:	66 ba 50 41          	mov    dx,0x4150
    1278:	4d                   	dec    ebp
    1279:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:300
mov ecx, 0x24
    127a:	66 b9 24 00          	mov    cx,0x24
    127e:	00 00                	add    BYTE PTR [eax],al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:301
int 0x15
    1280:	cd 15                	int    0x15
/home/yogi/src/os/chrisOS/asm/bootCPU.s:302
add edi,24
    1282:	66 83 c7 18          	add    di,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:303
cmp eax, 0x534D4150
    1286:	66 3d 50 41          	cmp    ax,0x4150
    128a:	4d                   	dec    ebp
    128b:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:304
jne getE820Memory_asm_exit
    128c:	75 1c                	jne    12aa <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:305
cmp ecx,20
    128e:	66 83 f9 14          	cmp    cx,0x14
/home/yogi/src/os/chrisOS/asm/bootCPU.s:306
jl getE820Memory_asm_exit
    1292:	7c 16                	jl     12aa <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:307
push eax
    1294:	66 50                	push   ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:308
mov eax,recCnt
    1296:	66 a1 cf 12 66 40    	mov    ax,ds:0x406612cf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:310
inc eax
mov recCnt, eax
    129c:	66 a3 cf 12 66 58    	mov    ds:0x586612cf,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:312
pop eax
cmp ebx,0
    12a2:	66 83 fb 00          	cmp    bx,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:313
je  getE820Memory_asm_exit
    12a6:	74 02                	je     12aa <getE820Memory_asm_exit>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:314
jmp getE820Memory_asm_getNext
    12a8:	eb c4                	jmp    126e <getE820Memory_asm_getNext>

000012aa <getE820Memory_asm_exit>:
getE820Memory_asm_exit():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:316
getE820Memory_asm_exit:
mov eax,recCnt
    12aa:	66 a1 cf 12 66 a3    	mov    ax,ds:0xa36612cf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:317
mov savedValue, eax
    12b0:	c7                   	(bad)  
    12b1:	12 61 66             	adc    ah,BYTE PTR [ecx+0x66]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:321


popa
mov eax, savedValue
    12b4:	a1 c7 12 e8 33       	mov    eax,ds:0x33e812c7
/home/yogi/src/os/chrisOS/asm/bootCPU.s:323
.code32
call reenterProtMode
    12b9:	fe                   	(bad)  
    12ba:	ff                   	(bad)  
    12bb:	ff c3                	inc    ebx

000012bd <saved_gdt16_lo>:
	...

000012bf <saved_gdt16_hi>:
	...

000012c1 <saved_gdt16_hi2>:
	...

000012c3 <saveESP>:
saveESP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:324
ret
    12c3:	00 00                	add    BYTE PTR [eax],al
	...

000012c7 <savedValue>:
	...

000012cf <recCnt>:
	...

000012d1 <idt_real>:
idt_real():
    12d1:	ff 03                	inc    DWORD PTR [ebx]
    12d3:	00 00                	add    BYTE PTR [eax],al
	...

000012d7 <retVal>:
	...

000012d9 <saved_idt>:
saved_idt():
    12d9:	00 00                	add    BYTE PTR [eax],al
    12db:	00 00                	add    BYTE PTR [eax],al
	...

000012df <e820data>:
	...

000012f9 <system_timer_fractions>:
	...

00001301 <system_timer_ms>:
	...

00001309 <IRQ0_fractions>:
	...

00001311 <IRQ0_ms>:
	...

00001319 <IRQ0_frequency>:
	...

00001321 <PIT_reload_value>:
PIT_reload_value():
    1321:	12 00                	adc    al,BYTE PTR [eax]
    1323:	00 00                	add    BYTE PTR [eax],al
    1325:	00 00                	add    BYTE PTR [eax],al
	...

00001329 <doPagingJump>:
doPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:369
                         .word 0
 .globl doPagingJump
.type doPagingJump, @function
doPagingJump:
.code32
cli #turn off interrupts until we get the IDT fixed up
    1329:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:370
ljmp 0x20:pagingEnableJmp
    132a:	ea 31 13 00 00 20 00 	jmp    0x20:0x1331

00001331 <pagingEnableJmp>:
pagingEnableJmp():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:372
pagingEnableJmp:
push eax
    1331:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:373
mov ax, 0x10
    1332:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:374
mov ds, ax
    1336:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:375
mov es, ax
    1338:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:376
mov gs, ax
    133a:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:377
mov fs, ax
    133c:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:378
pop eax
    133e:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:379
ret
    133f:	c3                   	ret    

00001340 <doNonPagingJump>:
doNonPagingJump():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:383
 .globl doNonPagingJump
.type doNonPagingJump, @function
doNonPagingJump:
ljmp 0x28:pagingDisableJmp1
    1340:	ea 47 13 00 00 28 00 	jmp    0x28:0x1347

00001347 <pagingDisableJmp1>:
pagingDisableJmp1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:385
pagingDisableJmp1:
push eax
    1347:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:386
mov eax,cr0
    1348:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:387
and eax,0x7FFFFFFF
    134b:	25 ff ff ff 7f       	and    eax,0x7fffffff
/home/yogi/src/os/chrisOS/asm/bootCPU.s:388
mov cr0,eax
    1350:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:389
ljmp 0x28:pagingDisableJmp2
    1353:	ea 5a 13 00 00 28 00 	jmp    0x28:0x135a

0000135a <pagingDisableJmp2>:
pagingDisableJmp2():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:391
pagingDisableJmp2:
mov ax, 0x18
    135a:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os/chrisOS/asm/bootCPU.s:392
mov ds, ax
    135e:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:393
mov es, ax
    1360:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:394
mov gs, ax
    1362:	8e e8                	mov    gs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:395
mov fs, ax
    1364:	8e e0                	mov    fs,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:396
pop eax
    1366:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:397
ret
    1367:	c3                   	ret    

00001368 <lowSmapTablePtr>:
	...

00001370 <lowSmapTbl>:
	...

00001550 <idtPtrToLoad>:
	...

00001558 <msg>:
msg():
    1558:	48                   	dec    eax
    1559:	65                   	gs
    155a:	6c                   	ins    BYTE PTR es:[edi],dx
    155b:	6c                   	ins    BYTE PTR es:[edi],dx
    155c:	6f                   	outs   dx,DWORD PTR ds:[esi]
    155d:	20 66 72             	and    BYTE PTR [esi+0x72],ah
    1560:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1561:	6d                   	ins    DWORD PTR es:[edi],dx
    1562:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    1565:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1566:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    1569:	73 6f                	jae    15da <AP_startup+0x14>
    156b:	72 20                	jb     158d <msg2+0xa>

0000156c <pid>:
pid():
    156c:	20 20                	and    BYTE PTR [eax],ah
    156e:	20 43 52             	and    BYTE PTR [ebx+0x52],al
    1571:	30 3d 78 78 78 78    	xor    BYTE PTR ds:0x78787878,bh

00001573 <msw>:
msw():
    1573:	78 78                	js     15ed <broadcast_AP_startup+0x4>
    1575:	78 78                	js     15ef <broadcast_AP_startup+0x6>
    1577:	78 78                	js     15f1 <broadcast_AP_startup+0x8>
    1579:	78 78                	js     15f3 <broadcast_AP_startup+0xa>
    157b:	20 0a                	and    BYTE PTR [edx],cl
    157d:	0d 26 00 00 00       	or     eax,0x26

0000157e <len>:
len():
    157e:	26 00 00             	add    BYTE PTR es:[eax],al
	...

00001582 <att>:
att():
    1582:	0b 57 61             	or     edx,DWORD PTR [edi+0x61]

00001583 <msg2>:
msg2():
    1583:	57                   	push   edi
    1584:	61                   	popa   
    1585:	6b 69 6e 67          	imul   ebp,DWORD PTR [ecx+0x6e],0x67
    1589:	20 75 70             	and    BYTE PTR [ebp+0x70],dh
    158c:	20 41 50             	and    BYTE PTR [ecx+0x50],al
    158f:	20 70 72             	and    BYTE PTR [eax+0x72],dh
    1592:	6f                   	outs   dx,DWORD PTR ds:[esi]
    1593:	63 65 73             	arpl   WORD PTR [ebp+0x73],sp
    1596:	73 6f                	jae    1607 <.B0+0x5>
    1598:	72 73                	jb     160d <.B0+0xb>
    159a:	0a 0d 19 00 00 00    	or     cl,BYTE PTR ds:0x19

0000159c <len2>:
len2():
    159c:	19 00                	sbb    DWORD PTR [eax],eax
	...

000015a0 <att2>:
att2():
    15a0:	0c 01                	or     al,0x1

000015a1 <mutex>:
mutex():
    15a1:	01 00                	add    DWORD PTR [eax],eax

000015a3 <smpBootCPUCount>:
	...

000015a5 <smpBootCPUsStarted>:
	...

000015a7 <newSS>:
newSS():
    15a7:	00 20                	add    BYTE PTR [eax],ah
    15a9:	00 00                	add    BYTE PTR [eax],al
    15ab:	00 00                	add    BYTE PTR [eax],al
    15ad:	00 00                	add    BYTE PTR [eax],al
	...

000015b0 <theGDT>:
	...
theGDT():
    15b8:	ff                   	(bad)  
    15b9:	ff 00                	inc    DWORD PTR [eax]
    15bb:	00 00                	add    BYTE PTR [eax],al
    15bd:	92                   	xchg   edx,eax
    15be:	8f 00                	pop    DWORD PTR [eax]

000015c0 <regGDT>:
regGDT():
    15c0:	0f 00                	(bad)  
    15c2:	b0 15                	mov    al,0x15
	...

000015c6 <AP_startup>:
AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:446
#-----------------------------------------------------------------
#-----------------------------------------------------------------#-----------------------------------------------------------------

.global AP_startup
AP_startup:
movl     %esp, saveESP
    15c6:	89 25 c3 12 00 00    	mov    DWORD PTR ds:0x12c3,esp
/home/yogi/src/os/chrisOS/asm/bootCPU.s:448
//lea	tos, %esp		# and set up new stack
call    setup_timer_channel2
    15cc:	e8 7e 00 00 00       	call   164f <setup_timer_channel2>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:450
//call	display_APIC_LocalID
call	broadcast_AP_startup
    15d1:	e8 13 00 00 00       	call   15e9 <broadcast_AP_startup>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:451
call	delay_until_APs_halt
    15d6:	e8 64 00 00 00       	call   163f <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:452
mov     $0x10, %eax
    15db:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:453
mov     %eax, %ds
    15e0:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:454
mov     saveESP, %esp
    15e2:	8b 25 c3 12 00 00    	mov    esp,DWORD PTR ds:0x12c3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:455
ret
    15e8:	c3                   	ret    

000015e9 <broadcast_AP_startup>:
broadcast_AP_startup():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:462
.global broadcast_AP_startup
broadcast_AP_startup:
#
# This procedure is called by the main CPU to awaken other CPUs.
#
	push	%ebx
    15e9:	53                   	push   ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:463
	push	%ds
    15ea:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:466

	# address the Local-APIC registers' page
	mov	$0x10, %ax
    15eb:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:467
	mov	%ax, %ds
    15ef:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:468
    	mov     kAPICRegisterRemapAddress, %ebx
    15f1:	8b 1d 70 48 12 00    	mov    ebx,DWORD PTR ds:0x124870
/home/yogi/src/os/chrisOS/asm/bootCPU.s:471

	# issue an 'INIT' Inter-Processor Interrupt command
	mov	$0x000C4500, %eax	# broadcase INIT-IPI
    15f7:	b8 00 45 0c 00       	mov    eax,0xc4500
/home/yogi/src/os/chrisOS/asm/bootCPU.s:472
	mov	%eax, 0x300(%ebx)	# to all-except-self
    15fc:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

00001602 <.B0>:
.B0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:473
.B0:	bt	$12, 0x300(%ebx)	# command in progress?
    1602:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    1609:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:474
	jc	.B0			# yes, spin till done
    160a:	72 f6                	jb     1602 <.B0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:477

	# do ten-millisecond delay, allow time for APs to awaken
	mov	$10000, %eax		# number of microseconds
    160c:	b8 10 27 00 00       	mov    eax,0x2710
/home/yogi/src/os/chrisOS/asm/bootCPU.s:478
	call	delay_EAX_micro_secs	# for a programmed delay
    1611:	e8 f9 00 00 00       	call   170f <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:481
	
	# finish the Intel 'MP Initialization Protocol'
	mov	$5, %ecx		# issue 'Startup' twice
    1616:	b9 05 00 00 00       	mov    ecx,0x5

0000161b <nxIPI>:
nxIPI():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:483
#nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI #startup IPI for base address of 4096
nxIPI:	mov	$0x000C4601, %eax	# broadcast Startup-IPI 
    161b:	b8 01 46 0c 00       	mov    eax,0xc4601
/home/yogi/src/os/chrisOS/asm/bootCPU.s:484
	mov	%eax, 0x300(%ebx)	# to all-except-self
    1620:	89 83 00 03 00 00    	mov    DWORD PTR [ebx+0x300],eax

00001626 <.B1>:
.B1():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:485
.B1:	bt	$12, 0x300(%ebx)	# command in progress?
    1626:	0f ba a3 00 03 00 00 	bt     DWORD PTR [ebx+0x300],0xc
    162d:	0c 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:486
	jc	.B1			# yes, spin till done
    162e:	72 f6                	jb     1626 <.B1>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:489

	# delay for 200 microseconds	
	mov	$200, %eax		# number of microseconds
    1630:	b8 c8 00 00 00       	mov    eax,0xc8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:490
	call	delay_EAX_micro_secs	# for a programmed delay
    1635:	e8 d5 00 00 00       	call   170f <delay_EAX_micro_secs>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:491
	loop	nxIPI	
    163a:	e2 df                	loop   161b <nxIPI>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:493
		
	pop	%ds
    163c:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:494
	pop	%ebx
    163d:	5b                   	pop    ebx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:495
	ret
    163e:	c3                   	ret    

0000163f <delay_until_APs_halt>:
delay_until_APs_halt():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:502
delay_until_APs_halt:
#
# This procedure is called by the main CPU so that it will not
# terminate our program until the other CPUs have been halted.
#
.W0:	mov	smpBootCPUCount, %ax		# number of APs awoken
    163f:	66 a1 a3 15 00 00    	mov    ax,ds:0x15a3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:503
	sub	smpBootCPUsStarted, %ax		# less number finished
    1645:	66 2b 05 a5 15 00 00 	sub    ax,WORD PTR ds:0x15a5
/home/yogi/src/os/chrisOS/asm/bootCPU.s:504
	jnz	.W0			# spin unless all done
    164c:	75 f1                	jne    163f <delay_until_APs_halt>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:505
	ret
    164e:	c3                   	ret    

0000164f <setup_timer_channel2>:
setup_timer_channel2():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:514
#
# This procedure initializes the 8254 Programmable Timer/Counter
# so Timer Channel 2 can be used in 'one-shot' timing durations.
#
	# enable the 8254 Channel-2 counter
	in	$0x61, %al		# get PORT_B settings
    164f:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:515
	and	$0xFD, %al		# turn PC speaker off
    1651:	24 fd                	and    al,0xfd
/home/yogi/src/os/chrisOS/asm/bootCPU.s:516
	or	$0x01, %al		# turn on Gate2 input
    1653:	0c 01                	or     al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:517
	out	%al, $0x61		# output new settings
    1655:	e6 61                	out    0x61,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:520

	# program channel-2 for one-shot countdown
	mov	$0xB0, %al		# chn2, r/w LSB/MSB
    1657:	b0 b0                	mov    al,0xb0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:521
	out	%al, $0x43		# issue PIT command
    1659:	e6 43                	out    0x43,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:522
	ret
    165b:	c3                   	ret    

0000165c <display_APIC_LocalID>:
display_APIC_LocalID():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:536
# video services.  Because ROM-BIOS routines are not 'reentrant'
# it is necessary to employ a 'spinlock' to insure that only one
# processor at a time will be executing these ROM-BIOS services. 
#
	# read the Local-APIC ID-register
	push	%ds
    165c:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:537
	xor	%ax, %ax
    165d:	31 c0                	xor    eax,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:538
	mov	%ax, %ds
    165f:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:539
	mov	$0xFEE00020, %ebx
    1661:	66 bb 20 00          	mov    bx,0x20
    1665:	e0 fe                	loopne 1665 <display_APIC_LocalID+0x9>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:540
	mov	(%ebx), %eax
    1667:	67 66 8b 03          	mov    ax,WORD PTR [bp+di]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:541
	pop	%ds
    166b:	1f                   	pop    ds

0000166c <spin>:
spin():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:544

	# acquire the spinlock -- allow only one CPU at a time
spin:	bt	$0, mutex
    166c:	0f ba 26 a1          	bt     DWORD PTR [esi],0xa1
    1670:	15 00 73 f8 f0       	adc    eax,0xf0f87300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:547
	jnc	spin
	lock	
	btr	$0, mutex
    1675:	0f ba 36 a1          	btr    DWORD PTR [esi],0xa1
    1679:	15 00 73 ef 66       	adc    eax,0x66ef7300
/home/yogi/src/os/chrisOS/asm/bootCPU.s:551
	jnc	spin

	# write CPU Local-APIC ID-number into shared buffer
	rol	$8, %eax		# get ID-number in AL
    167e:	c1 c0 08             	rol    eax,0x8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:552
	and	$0xF, %al		# isolate lowest nybble
    1681:	24 0f                	and    al,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:555

#unremark to have the first CPu clear the screen
        pusha
    1683:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:556
        cmp $0x1,%al
    1684:	3c 01                	cmp    al,0x1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:557
        ja overClearScreen
    1686:	77 28                	ja     16b0 <overClearScreen>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:558
        call clearScreen
    1688:	e8 01 01 b4 0f       	call   fb4178e <_months_abbrev+0xfa1cd6e>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:561
#jmp overClearScreen
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    168d:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:563

	mov	$0x02, %ah		# set cursor position
    168f:	b4 02                	mov    ah,0x2
/home/yogi/src/os/chrisOS/asm/bootCPU.s:564
        mov     $0,%bh
    1691:	b7 00                	mov    bh,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:565
        mov     $0x2000,%dx
    1693:	ba 00 20 cd 10       	mov    edx,0x10cd2000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:567
	int	$0x10			# call video bios
        mov     $0x3,ah
    1698:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:568
        int     $0x10
    169a:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:569
	mov	$0x1301, %ax		# write_string
    169c:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:570
	lea	msg2, %bp		# point ES:BP to string
    16a1:	83 15 8b 0e 9c 15 8a 	adc    DWORD PTR ds:0x159c0e8b,0xffffff8a
/home/yogi/src/os/chrisOS/asm/bootCPU.s:572
	mov	len2, %cx		# number of characters
	mov	att2, %bl		# display attributes
    16a8:	1e                   	push   ds
    16a9:	a0 15 b8 01 13       	mov    al,ds:0x1301b815
/home/yogi/src/os/chrisOS/asm/bootCPU.s:574
	mov	$0x1301, %ax		# write_string
	int	$0x10			# call video bios 
    16ae:	cd 10                	int    0x10

000016b0 <overClearScreen>:
overClearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:577

overClearScreen:
        popa
    16b0:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:578
        or	$'0', %al		# convert to numeral	
    16b1:	0c 30                	or     al,0x30
/home/yogi/src/os/chrisOS/asm/bootCPU.s:579
	movb	%al, pid		# write to shared buffer	
    16b3:	a2 6c 15 8d 3e       	mov    ds:0x3e8d156c,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:582
#jmp overPrinting
	# format the contents of register CR0 for display
	lea	msw, %di
    16b8:	73 15                	jae    16cf <overClearScreen+0x1f>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:583
	mov	%cr0, %eax
    16ba:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:584
	call	eax2hex
    16bd:	e8 a4 00 b4 0f       	call   fb41766 <_months_abbrev+0xfa1cd46>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:587
	# display the information using ROM-BIOS routines
	mov	$0x0F, %ah		# get display-page
	int	$0x10			# call video bios
    16c2:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:589

	mov	$0x03, %ah		# get cursor position
    16c4:	b4 03                	mov    ah,0x3
/home/yogi/src/os/chrisOS/asm/bootCPU.s:590
	int	$0x10			# call video bios
    16c6:	cd 10                	int    0x10
/home/yogi/src/os/chrisOS/asm/bootCPU.s:592

	mov	$0x1301, %ax		# write_string
    16c8:	b8 01 13 8d 2e       	mov    eax,0x2e8d1301
/home/yogi/src/os/chrisOS/asm/bootCPU.s:593
	lea	msg, %bp		# point ES:BP to string
    16cd:	58                   	pop    eax
    16ce:	15 8b 0e 7e 15       	adc    eax,0x157e0e8b
/home/yogi/src/os/chrisOS/asm/bootCPU.s:595
	mov	len, %cx		# number of characters
	mov	att, %bl		# display attributes
    16d3:	8a 1e                	mov    bl,BYTE PTR [esi]
    16d5:	82                   	(bad)  
    16d6:	15 b8 01 13 cd       	adc    eax,0xcd1301b8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:597
	mov	$0x1301, %ax		# write_string
	int	$0x10			# call video bios 
    16db:	10 f0                	adc    al,dh

000016dc <overPrinting>:
overPrinting():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:600
overPrinting:
	# release spinlock -- finished with 'non-reentrant' code
	lock 	
    16dc:	f0 0f ba 2e a1       	lock bts DWORD PTR [esi],0xa1
/home/yogi/src/os/chrisOS/asm/bootCPU.s:601
	bts 	$0, mutex
    16e1:	15 00 c3 fa 8c       	adc    eax,0x8cfac300

000016e4 <initAP>:
initAP():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:612
#=================================================================
#-----------------------------------------------------------------
.code16
.globl initAP
.type initAP, @function
initAP:	cli
    16e4:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:613
	mov	%cs, %ax		# address program's data
    16e5:	8c c8                	mov    eax,cs
/home/yogi/src/os/chrisOS/asm/bootCPU.s:614
	mov	%ax, %ds		#    with DS register
    16e7:	8e d8                	mov    ds,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:615
	mov	%ax, %es		#    also ES register
    16e9:	8e c0                	mov    es,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:616
	lock				# insure 'atomic' update
    16eb:	f0 ff 06             	lock inc DWORD PTR [esi]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:617
	incw	smpBootCPUCount			# increment count of APs
    16ee:	a3 15 b8 00 10       	mov    ds:0x1000b815,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:621

	# setup an exclusive stack-area for this processor
	mov	$0x1000, %ax		# paragraphs in segment
	xadd	%ax, newSS		# 'atomic' xchg-and-add
    16f3:	0f c1 06             	xadd   DWORD PTR [esi],eax
    16f6:	a7                   	cmps   DWORD PTR ds:[esi],DWORD PTR es:[edi]
    16f7:	15 8e d0 66 31       	adc    eax,0x3166d08e
/home/yogi/src/os/chrisOS/asm/bootCPU.s:623
	mov	%ax, %ss		# segment-address in SS
	xor	%esp, %esp		# top-of-stack into ESP
    16fc:	e4 66                	in     al,0x66
/home/yogi/src/os/chrisOS/asm/bootCPU.s:624
        mov     $0,%esp
    16fe:	bc 00 00 00 00       	mov    esp,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:625
	call	allow_4GB_addressing	# adjust DS's seg-limit
    1703:	e8 38 00 f0 ff       	call   fff01740 <CHECKSUM+0x1b9dc745>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:630
#	call	display_APIC_LocalID	# display this CPU's ID

	# put this processor to sleep
	lock				# insure 'atomic' update
	incw	smpBootCPUsStarted			# increment count of APs
    1708:	06                   	push   es
    1709:	a5                   	movs   DWORD PTR es:[edi],DWORD PTR ds:[esi]
    170a:	15 fa f4 eb fc       	adc    eax,0xfcebf4fa

0000170b <freeze>:
freeze():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:632

freeze:	cli				# do not awaken this CPU
    170b:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:633
	hlt				# 'fetch-execute' ceases	
    170c:	f4                   	hlt    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:634
	jmp	freeze			# just-in-case of an NMI
    170d:	eb fc                	jmp    170b <freeze>

0000170f <delay_EAX_micro_secs>:
delay_EAX_micro_secs():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:641
#-----------------------------------------------------------------
delay_EAX_micro_secs:
#
# This procedure creates a programmed delay for EAX microseconds.
#
	pushal
    170f:	66 60                	pushaw 
/home/yogi/src/os/chrisOS/asm/bootCPU.s:643

	mov	%eax, %ecx		# number of microseconds
    1711:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:644
	mov	$100000, %eax		# microseconds-per-second
    1714:	66 b8 a0 86          	mov    ax,0x86a0
    1718:	01 00                	add    DWORD PTR [eax],eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:645
	xor	%edx, %edx		# is extended to quadword
    171a:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:646
	div	%ecx			# division by double-word
    171d:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:648
	
	mov	%eax, %ecx		# input-frequency divisor
    1720:	66 89 c1             	mov    cx,ax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:649
	mov	$1193182, %eax		# timer's input-frequency
    1723:	66 b8 de 34          	mov    ax,0x34de
    1727:	12 00                	adc    al,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:650
	xor	%edx, %edx		# is extended to quadword
    1729:	66 31 d2             	xor    dx,dx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:651
	div	%ecx			# division by double-word
    172c:	66 f7 f1             	div    cx
/home/yogi/src/os/chrisOS/asm/bootCPU.s:653

	out	%al, $0x42		# transfer to Latch LSB
    172f:	e6 42                	out    0x42,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:654
	xchg	%al, %ah		# LSB swapped with MSB
    1731:	86 c4                	xchg   ah,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:655
	out	%al, $0x42		# transfer to Latch MSB
    1733:	e6 42                	out    0x42,al

00001735 <.T0>:
.T0():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:657

.T0:	in	$0x61, %al		# check PORT_B settings
    1735:	e4 61                	in     al,0x61
/home/yogi/src/os/chrisOS/asm/bootCPU.s:658
	test	$0x20, %al		# has counter2 expired?
    1737:	a8 20                	test   al,0x20
/home/yogi/src/os/chrisOS/asm/bootCPU.s:659
	jz	.T0			# no, continue polling
    1739:	74 fa                	je     1735 <.T0>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:661
	
	popal
    173b:	66 61                	popaw  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:662
	ret
    173d:	c3                   	ret    

0000173e <allow_4GB_addressing>:
allow_4GB_addressing():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:671
#
# This procedure will be called by each processor in order to 
# raise the 'hidden' segment-limit in its DS segment-register
# which permits Local-APIC registers to be addressed with DS.   
#
	pushf				# preserve FLAGS settings
    173e:	9c                   	pushf  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:672
	push	%ds			# preserve DS contents
    173f:	1e                   	push   ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:674

	cli				# no device interrupts
    1740:	fa                   	cli    
/home/yogi/src/os/chrisOS/asm/bootCPU.s:676

	mov	%cr0, %eax		# get machine status
    1741:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:677
	bts	$0, %eax		# set PE-bit to 1
    1744:	66 0f ba e8 00       	bts    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:678
	mov	%eax, %cr0		# enter protected mode
    1749:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:679
	lgdt	regGDT			# load GDTR register-image
    174c:	0f 01 16             	lgdtd  [esi]
    174f:	c0 15 b8 08 00 8e d8 	rcl    BYTE PTR ds:0x8e0008b8,0xd8
/home/yogi/src/os/chrisOS/asm/bootCPU.s:683
	mov	$sel_FS, %ax		# address 4GB data-segment
	mov	%ax, %ds		#   with the DS register

	mov	%cr0, %eax		# get machine status
    1756:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:684
	btr	$0, %eax		# reset PE-bit to 0
    1759:	66 0f ba f0 00       	btr    ax,0x0
/home/yogi/src/os/chrisOS/asm/bootCPU.s:685
	mov	%eax, %cr0		# leave protected mode
    175e:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/bootCPU.s:687
.code16		
	pop	%ds			# restore register DS
    1761:	1f                   	pop    ds
/home/yogi/src/os/chrisOS/asm/bootCPU.s:688
	popf				# restore FLAGS value
    1762:	9d                   	popf   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:689
	ret				
    1763:	c3                   	ret    

00001764 <eax2hex>:
eax2hex():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:692
#-----------------------------------------------------------------
eax2hex:  # converts value in EAX to hexadecimal string at DS:DI
	pusha	
    1764:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:694

	mov	$8, %cx
    1765:	b9 08 00 66 c1       	mov    ecx,0xc1660008

00001768 <nxnyb>:
nxnyb():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:696
nxnyb:
	rol	$4, %eax
    1768:	66 c1 c0 04          	rol    ax,0x4
/home/yogi/src/os/chrisOS/asm/bootCPU.s:697
	mov	%al, %bl
    176c:	88 c3                	mov    bl,al
/home/yogi/src/os/chrisOS/asm/bootCPU.s:698
	and	$0xF, %bx
    176e:	83 e3 0f             	and    ebx,0xf
/home/yogi/src/os/chrisOS/asm/bootCPU.s:699
	mov	hex(%bx), %dl
    1771:	8a 97 7c 17 88 15    	mov    dl,BYTE PTR [edi+0x1588177c]
/home/yogi/src/os/chrisOS/asm/bootCPU.s:701
	mov	%dl, (%di)
	inc	%di
    1777:	47                   	inc    edi
/home/yogi/src/os/chrisOS/asm/bootCPU.s:702
	loop	nxnyb	
    1778:	e2 ee                	loop   1768 <nxnyb>
/home/yogi/src/os/chrisOS/asm/bootCPU.s:704

	popa
    177a:	61                   	popa   
/home/yogi/src/os/chrisOS/asm/bootCPU.s:705
	ret
    177b:	c3                   	ret    

0000177c <hex>:
hex():
    177c:	30 31                	xor    BYTE PTR [ecx],dh
    177e:	32 33                	xor    dh,BYTE PTR [ebx]
    1780:	34 35                	xor    al,0x35
    1782:	36                   	ss
    1783:	37                   	aaa    
    1784:	38 39                	cmp    BYTE PTR [ecx],bh
    1786:	41                   	inc    ecx
    1787:	42                   	inc    edx
    1788:	43                   	inc    ebx
    1789:	44                   	inc    esp
    178a:	45                   	inc    ebp
    178b:	46                   	inc    esi

0000178c <clearScreen>:
clearScreen():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:711
#-----------------------------------------------------------------
hex:	.ascii	"0123456789ABCDEF"	# array of hex numerals

.intel_syntax noprefix
clearScreen:
    pusha
    178c:	60                   	pusha  
/home/yogi/src/os/chrisOS/asm/bootCPU.s:713

    mov ax, 0x0700  # function 07, AL=0 means scroll whole window
    178d:	b8 00 07 b7 07       	mov    eax,0x7b70700
/home/yogi/src/os/chrisOS/asm/bootCPU.s:715
    mov bh, 0x07    # character attribute = white on black
    mov cx, 0x0000  # row = 0, col = 0
    1792:	b9 00 00 ba 4f       	mov    ecx,0x4fba0000
/home/yogi/src/os/chrisOS/asm/bootCPU.s:716
    mov dx, 0x184f  # row = 24 (0x18), col = 79 (0x4f)
    1797:	18 cd                	sbb    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:717
    int 0x10        # call BIOS video interrupt
    1799:	10 b4 02 b7 00 ba 00 	adc    BYTE PTR [edx+eax*1+0xba00b7],dh
/home/yogi/src/os/chrisOS/asm/bootCPU.s:720
    mov ah,02
    mov bh,0
    mov dx,0
    17a0:	00 cd                	add    ch,cl
/home/yogi/src/os/chrisOS/asm/bootCPU.s:721
    int 0x10
    17a2:	10 61 c3             	adc    BYTE PTR [ecx-0x3d],ah
	...

0000fec5 <stk>:
stk():
/home/yogi/src/os/chrisOS/asm/bootCPU.s:723
    popa
    ret
    fec5:	fa                   	cli    
    fec6:	fa                   	cli    
    fec7:	fa                   	cli    
    fec8:	fa                   	cli    
    fec9:	fa                   	cli    
    feca:	fa                   	cli    
    fecb:	fa                   	cli    
    fecc:	fa                   	cli    
    fecd:	fa                   	cli    
    fece:	fa                   	cli    
    fecf:	fa                   	cli    
    fed0:	fa                   	cli    
    fed1:	fa                   	cli    
    fed2:	fa                   	cli    
    fed3:	fa                   	cli    
    fed4:	fa                   	cli    
    fed5:	fa                   	cli    
    fed6:	fa                   	cli    
    fed7:	fa                   	cli    
    fed8:	fa                   	cli    
    fed9:	fa                   	cli    
    feda:	fa                   	cli    
    fedb:	fa                   	cli    
    fedc:	fa                   	cli    
    fedd:	fa                   	cli    
    fede:	fa                   	cli    
    fedf:	fa                   	cli    
    fee0:	fa                   	cli    
    fee1:	fa                   	cli    
    fee2:	fa                   	cli    
    fee3:	fa                   	cli    
    fee4:	fa                   	cli    
    fee5:	fa                   	cli    
    fee6:	fa                   	cli    
    fee7:	fa                   	cli    
    fee8:	fa                   	cli    
    fee9:	fa                   	cli    
    feea:	fa                   	cli    
    feeb:	fa                   	cli    
    feec:	fa                   	cli    
    feed:	fa                   	cli    
    feee:	fa                   	cli    
    feef:	fa                   	cli    
    fef0:	fa                   	cli    
    fef1:	fa                   	cli    
    fef2:	fa                   	cli    
    fef3:	fa                   	cli    
    fef4:	fa                   	cli    
    fef5:	fa                   	cli    
    fef6:	fa                   	cli    
    fef7:	fa                   	cli    
    fef8:	fa                   	cli    
    fef9:	fa                   	cli    
    fefa:	fa                   	cli    
    fefb:	fa                   	cli    
    fefc:	fa                   	cli    
    fefd:	fa                   	cli    
    fefe:	fa                   	cli    
    feff:	fa                   	cli    
    ff00:	fa                   	cli    
    ff01:	fa                   	cli    
    ff02:	fa                   	cli    
    ff03:	fa                   	cli    
    ff04:	fa                   	cli    
    ff05:	fa                   	cli    
    ff06:	fa                   	cli    
    ff07:	fa                   	cli    
    ff08:	fa                   	cli    
    ff09:	fa                   	cli    
    ff0a:	fa                   	cli    
    ff0b:	fa                   	cli    
    ff0c:	fa                   	cli    
    ff0d:	fa                   	cli    
    ff0e:	fa                   	cli    
    ff0f:	fa                   	cli    
    ff10:	fa                   	cli    
    ff11:	fa                   	cli    
    ff12:	fa                   	cli    
    ff13:	fa                   	cli    
    ff14:	fa                   	cli    
    ff15:	fa                   	cli    
    ff16:	fa                   	cli    
    ff17:	fa                   	cli    
    ff18:	fa                   	cli    
    ff19:	fa                   	cli    
    ff1a:	fa                   	cli    
    ff1b:	fa                   	cli    
    ff1c:	fa                   	cli    
    ff1d:	fa                   	cli    
    ff1e:	fa                   	cli    
    ff1f:	fa                   	cli    
    ff20:	fa                   	cli    
    ff21:	fa                   	cli    
    ff22:	fa                   	cli    
    ff23:	fa                   	cli    
    ff24:	fa                   	cli    
    ff25:	fa                   	cli    
    ff26:	fa                   	cli    
    ff27:	fa                   	cli    
    ff28:	fa                   	cli    
    ff29:	fa                   	cli    
    ff2a:	fa                   	cli    
    ff2b:	fa                   	cli    
    ff2c:	fa                   	cli    
    ff2d:	fa                   	cli    
    ff2e:	fa                   	cli    
    ff2f:	fa                   	cli    
    ff30:	fa                   	cli    
    ff31:	fa                   	cli    
    ff32:	fa                   	cli    
    ff33:	fa                   	cli    
    ff34:	fa                   	cli    
    ff35:	fa                   	cli    
    ff36:	fa                   	cli    
    ff37:	fa                   	cli    
    ff38:	fa                   	cli    
    ff39:	fa                   	cli    
    ff3a:	fa                   	cli    
    ff3b:	fa                   	cli    
    ff3c:	fa                   	cli    
    ff3d:	fa                   	cli    
    ff3e:	fa                   	cli    
    ff3f:	fa                   	cli    
    ff40:	fa                   	cli    
    ff41:	fa                   	cli    
    ff42:	fa                   	cli    
    ff43:	fa                   	cli    
    ff44:	fa                   	cli    
    ff45:	fa                   	cli    
    ff46:	fa                   	cli    
    ff47:	fa                   	cli    
    ff48:	fa                   	cli    
    ff49:	fa                   	cli    
    ff4a:	fa                   	cli    
    ff4b:	fa                   	cli    
    ff4c:	fa                   	cli    
    ff4d:	fa                   	cli    
    ff4e:	fa                   	cli    
    ff4f:	fa                   	cli    
    ff50:	fa                   	cli    
    ff51:	fa                   	cli    
    ff52:	fa                   	cli    
    ff53:	fa                   	cli    
    ff54:	fa                   	cli    
    ff55:	fa                   	cli    
    ff56:	fa                   	cli    
    ff57:	fa                   	cli    
    ff58:	fa                   	cli    
    ff59:	fa                   	cli    
    ff5a:	fa                   	cli    
    ff5b:	fa                   	cli    
    ff5c:	fa                   	cli    
    ff5d:	fa                   	cli    
    ff5e:	fa                   	cli    
    ff5f:	fa                   	cli    
    ff60:	fa                   	cli    
    ff61:	fa                   	cli    
    ff62:	fa                   	cli    
    ff63:	fa                   	cli    
    ff64:	fa                   	cli    
    ff65:	fa                   	cli    
    ff66:	fa                   	cli    
    ff67:	fa                   	cli    
    ff68:	fa                   	cli    
    ff69:	fa                   	cli    
    ff6a:	fa                   	cli    
    ff6b:	fa                   	cli    
    ff6c:	fa                   	cli    
    ff6d:	fa                   	cli    
    ff6e:	fa                   	cli    
    ff6f:	fa                   	cli    
    ff70:	fa                   	cli    
    ff71:	fa                   	cli    
    ff72:	fa                   	cli    
    ff73:	fa                   	cli    
    ff74:	fa                   	cli    
    ff75:	fa                   	cli    
    ff76:	fa                   	cli    
    ff77:	fa                   	cli    
    ff78:	fa                   	cli    
    ff79:	fa                   	cli    
    ff7a:	fa                   	cli    
    ff7b:	fa                   	cli    
    ff7c:	fa                   	cli    
    ff7d:	fa                   	cli    
    ff7e:	fa                   	cli    
    ff7f:	fa                   	cli    
    ff80:	fa                   	cli    
    ff81:	fa                   	cli    
    ff82:	fa                   	cli    
    ff83:	fa                   	cli    
    ff84:	fa                   	cli    
    ff85:	fa                   	cli    
    ff86:	fa                   	cli    
    ff87:	fa                   	cli    
    ff88:	fa                   	cli    
    ff89:	fa                   	cli    
    ff8a:	fa                   	cli    
    ff8b:	fa                   	cli    
    ff8c:	fa                   	cli    
    ff8d:	fa                   	cli    
    ff8e:	fa                   	cli    
    ff8f:	fa                   	cli    
    ff90:	fa                   	cli    
    ff91:	fa                   	cli    
    ff92:	fa                   	cli    
    ff93:	fa                   	cli    
    ff94:	fa                   	cli    
    ff95:	fa                   	cli    
    ff96:	fa                   	cli    
    ff97:	fa                   	cli    
    ff98:	fa                   	cli    
    ff99:	fa                   	cli    
    ff9a:	fa                   	cli    
    ff9b:	fa                   	cli    
    ff9c:	fa                   	cli    
    ff9d:	fa                   	cli    
    ff9e:	fa                   	cli    
    ff9f:	fa                   	cli    
    ffa0:	fa                   	cli    
    ffa1:	fa                   	cli    
    ffa2:	fa                   	cli    
    ffa3:	fa                   	cli    
    ffa4:	fa                   	cli    
    ffa5:	fa                   	cli    
    ffa6:	fa                   	cli    
    ffa7:	fa                   	cli    
    ffa8:	fa                   	cli    
    ffa9:	fa                   	cli    
    ffaa:	fa                   	cli    
    ffab:	fa                   	cli    
    ffac:	fa                   	cli    
    ffad:	fa                   	cli    
    ffae:	fa                   	cli    
    ffaf:	fa                   	cli    
    ffb0:	fa                   	cli    
    ffb1:	fa                   	cli    
    ffb2:	fa                   	cli    
    ffb3:	fa                   	cli    
    ffb4:	fa                   	cli    
    ffb5:	fa                   	cli    
    ffb6:	fa                   	cli    
    ffb7:	fa                   	cli    
    ffb8:	fa                   	cli    
    ffb9:	fa                   	cli    
    ffba:	fa                   	cli    
    ffbb:	fa                   	cli    
    ffbc:	fa                   	cli    
    ffbd:	fa                   	cli    
    ffbe:	fa                   	cli    
    ffbf:	fa                   	cli    
    ffc0:	fa                   	cli    
    ffc1:	fa                   	cli    
    ffc2:	fa                   	cli    
    ffc3:	fa                   	cli    

0000ffc4 <irq13ESP>:
irq13ESP():
    ffc4:	00 00                	add    BYTE PTR [eax],al
    ffc6:	10 00                	adc    BYTE PTR [eax],al
    ffc8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffcc <irq13SavedESP>:
	...

0000ffd4 <irq14ESP>:
irq14ESP():
    ffd4:	00 00                	add    BYTE PTR [eax],al
    ffd6:	10 00                	adc    BYTE PTR [eax],al
    ffd8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffdc <irq14SavedESP>:
	...

0000ffe4 <espForFatalExceptions>:
espForFatalExceptions():
    ffe4:	00 00                	add    BYTE PTR [eax],al
    ffe6:	10 00                	adc    BYTE PTR [eax],al
    ffe8:	10 00                	adc    BYTE PTR [eax],al
	...

0000ffec <savedESP>:
	...

0000fff4 <bufr>:
	...

00010004 <savedESP_irq0>:
	...

00010014 <debugReturnFlags>:
	...

0001001c <debugESP>:
debugESP():
   1001c:	00 00                	add    BYTE PTR [eax],al
	...

00010020 <_isr_00_wrapper>:
_isr_00_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:38
debugESP: .WORD 0,0


.global _isr_00_wrapper        
_isr_00_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   10020:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:39
        mov exceptionAX,eax
   10026:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:40
        mov exceptionBP, ebp
   1002b:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:41
        mov     ebp, esp
   10031:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:42
        mov     ax, 0x0                  # save exception number
   10033:	66 b8 00 00          	mov    ax,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:43
        jmp isr_My_Common
   10037:	e9 5e 01 00 00       	jmp    1019a <isr_My_Common>

0001003c <_isr_02_wrapper>:
_isr_02_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:46
.global _isr_02_wrapper        
_isr_02_wrapper:                #remapped to 0x0a
        mov exceptionSavedESP, esp
   1003c:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:47
        mov exceptionAX,eax
   10042:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:48
        mov exceptionBP, ebp
   10047:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:49
        mov     ebp, esp
   1004d:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:50
        mov     ax, 0x2                  # save exception number
   1004f:	66 b8 02 00          	mov    ax,0x2
/home/yogi/src/os//chrisOS/asm/isr.s:51
        jmp isr_My_Common
   10053:	e9 42 01 00 00       	jmp    1019a <isr_My_Common>

00010058 <_isr_03_wrapper>:
_isr_03_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:60
        mov exceptionAX,eax
        mov exceptionBP, ebp
        mov     ebp, esp
        mov     ax, 0x3                  # save exception number
*/
        orw [esp+8],0x100
   10058:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:61
        pusha
   1005f:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:62
        call activateDebugger
   10060:	e8 e7 ad 00 00       	call   1ae4c <activateDebugger>
/home/yogi/src/os//chrisOS/asm/isr.s:65
 /*       jmp isr_My_Common
*/
        popa
   10065:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:66
        sti
   10066:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:67
        iretd
   10067:	cf                   	iret   

00010068 <_isr_04_wrapper>:
_isr_04_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:70
.global _isr_04_wrapper        
_isr_04_wrapper:                #remapped to 0x0c
        mov exceptionSavedESP, esp
   10068:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:71
        mov exceptionAX,eax
   1006e:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:72
        mov exceptionBP, ebp
   10073:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:73
        mov     ebp, esp
   10079:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:74
        mov     ax, 0x4                  # save exception number
   1007b:	66 b8 04 00          	mov    ax,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:75
        jmp isr_My_Common
   1007f:	e9 16 01 00 00       	jmp    1019a <isr_My_Common>

00010084 <_isr_05_wrapper>:
_isr_05_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:78
.global _isr_05_wrapper        
_isr_05_wrapper:                #remapped to 0x0d
        mov exceptionSavedESP, esp
   10084:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:79
        mov exceptionAX,eax
   1008a:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:80
        mov exceptionBP, ebp
   1008f:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:81
        mov     ebp, esp
   10095:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:82
        mov     ax, 0x5                  # save exception number
   10097:	66 b8 05 00          	mov    ax,0x5
/home/yogi/src/os//chrisOS/asm/isr.s:83
        jmp isr_My_Common
   1009b:	e9 fa 00 00 00       	jmp    1019a <isr_My_Common>

000100a0 <_isr_06_wrapper>:
_isr_06_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:86
.global _isr_06_wrapper
_isr_06_wrapper:                #remapped to 0x0e
        mov exceptionSavedESP, esp
   100a0:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:87
        mov exceptionAX,eax
   100a6:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:88
        mov exceptionBP, ebp
   100ab:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:89
        mov     ebp, esp
   100b1:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:90
        mov     ax, 0x6                  # save exception number
   100b3:	66 b8 06 00          	mov    ax,0x6
/home/yogi/src/os//chrisOS/asm/isr.s:91
        jmp isr_My_Common
   100b7:	e9 de 00 00 00       	jmp    1019a <isr_My_Common>

000100bc <_isr_07_wrapper>:
_isr_07_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:94
.global _isr_07_wrapper        
_isr_07_wrapper:                #remapped to 0x0f
        mov exceptionSavedESP, esp
   100bc:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:95
        mov exceptionAX,eax
   100c2:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:96
        mov exceptionBP, ebp
   100c7:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:97
        mov     ebp, esp
   100cd:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:98
        mov     ax, 0x7                  # save exception number
   100cf:	66 b8 07 00          	mov    ax,0x7
/home/yogi/src/os//chrisOS/asm/isr.s:99
        jmp isr_My_Common
   100d3:	e9 c2 00 00 00       	jmp    1019a <isr_My_Common>

000100d8 <_isr_08_wrapper>:
_isr_08_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:102
.global _isr_08_wrapper                 #remapped to 0x10
_isr_08_wrapper:                
        mov exceptionSavedESP, esp
   100d8:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:103
        mov exceptionAX,eax
   100de:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:104
        mov exceptionBP, ebp
   100e3:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:105
        mov     ebp, esp
   100e9:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:106
        mov     ax, 0x8                  # save exception number
   100eb:	66 b8 08 00          	mov    ax,0x8
/home/yogi/src/os//chrisOS/asm/isr.s:107
        jmp isr_My_Common
   100ef:	e9 a6 00 00 00       	jmp    1019a <isr_My_Common>
/home/yogi/src/os//chrisOS/asm/isr.s:130
#        mov ebx, cr2
#        mov exceptionCR2, ebx
#        pop ebx
#        pop ebp
        //push bx                         #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        mov bx,10
   100f4:	66 bb 0a 00          	mov    bx,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:131
        mov ds,bx
   100f8:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:132
        mov es,bx
   100fa:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:133
        mov fs,bx
   100fc:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:134
        mov gs,bx
   100fe:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:136
        //pop bx                        #clr 05/20/2016- We're not going to recover from a double fault so don't try pushing things on the stack to save them because the stack may be corrupted
        call    doubleFaultHandler     # jump to the common code
   10100:	e8 a2 99 00 00       	call   19aa7 <doubleFaultHandler>

00010105 <_isr_09_wrapper>:
_isr_09_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:139
.global _isr_09_wrapper                 #remapped to 0x11
_isr_09_wrapper:
        mov exceptionSavedESP, esp
   10105:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:140
        mov exceptionAX,eax
   1010b:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:141
        mov exceptionBP, ebp
   10110:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:142
        mov     ebp, esp
   10116:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:143
        mov     ax, 0x9                  # save exception number
   10118:	66 b8 09 00          	mov    ax,0x9
/home/yogi/src/os//chrisOS/asm/isr.s:144
        jmp isr_My_Common
   1011c:	eb 7c                	jmp    1019a <isr_My_Common>

0001011e <_isr_10_wrapper>:
_isr_10_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:147
.global _isr_10_wrapper                 #remapped to 0x12
_isr_10_wrapper:                        
        mov exceptionSavedESP, esp
   1011e:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:148
        mov exceptionAX,eax
   10124:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:149
        mov exceptionBP, ebp
   10129:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:150
        mov     ebp, esp
   1012f:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:151
        mov     ax, 0xa                  # save exception number
   10131:	66 b8 0a 00          	mov    ax,0xa
/home/yogi/src/os//chrisOS/asm/isr.s:152
        jmp isr_My_Common
   10135:	eb 63                	jmp    1019a <isr_My_Common>

00010137 <_isr_11_wrapper>:
_isr_11_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:155
.global _isr_11_wrapper                 #remapped to 0x13
_isr_11_wrapper:
        mov exceptionSavedESP, esp
   10137:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:156
        mov exceptionAX,eax
   1013d:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:157
        mov exceptionBP, ebp
   10142:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:158
        mov     ebp, esp
   10148:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:159
        mov     ax, 0x8                  # save exception number
   1014a:	66 b8 08 00          	mov    ax,0x8
/home/yogi/src/os//chrisOS/asm/isr.s:160
        jmp isr_My_Common
   1014e:	eb 4a                	jmp    1019a <isr_My_Common>

00010150 <_isr_12_wrapper>:
_isr_12_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:163
.global _isr_12_wrapper        
_isr_12_wrapper:                        #remapped to 0x14
        mov exceptionSavedESP, esp
   10150:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:164
        mov exceptionAX,eax
   10156:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:165
        mov exceptionBP, ebp
   1015b:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:166
        mov     ebp, esp
   10161:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:167
        mov     ax, 0xc                  # save exception number
   10163:	66 b8 0c 00          	mov    ax,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:168
        jmp isr_My_Common
   10167:	eb 31                	jmp    1019a <isr_My_Common>

00010169 <_isr_13_wrapper>:
_isr_13_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:171
.global _isr_13_wrapper                 #remapped to 0x15
_isr_13_wrapper:
cli;
   10169:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:172
        mov exceptionSavedESP, esp
   1016a:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:173
        mov exceptionAX,eax
   10170:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:174
        mov exceptionBP, ebp
   10175:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:175
        mov     ebp, esp
   1017b:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:176
        mov     ax, 0xd                  # save exception number
   1017d:	66 b8 0d 00          	mov    ax,0xd
/home/yogi/src/os//chrisOS/asm/isr.s:177
        jmp isr_My_Common
   10181:	eb 17                	jmp    1019a <isr_My_Common>

00010183 <_isr_14_wrapper>:
_isr_14_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:181
.global _isr_14_wrapper                 #remapped to 0x16
_isr_14_wrapper:
#cli;hlt;
mov exceptionSavedESP, esp
   10183:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:182
        mov exceptionAX,eax
   10189:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:183
        mov exceptionBP, ebp
   1018e:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:184
        mov     ebp, esp
   10194:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:185
        mov     ax, 0xe                  # save exception number
   10196:	66 b8 0e 00          	mov    ax,0xe

0001019a <isr_My_Common>:
isr_My_Common():
/home/yogi/src/os//chrisOS/asm/isr.s:187
isr_My_Common:
        mov exceptionNumber,ax
   1019a:	66 a3 e4 46 12 00    	mov    ds:0x1246e4,ax
/home/yogi/src/os//chrisOS/asm/isr.s:188
        pushad                          # other regs because its an ISR
   101a0:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:189
        mov eax,ds
   101a1:	8c d8                	mov    eax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:190
        mov exceptionDS,eax
   101a3:	a3 18 47 12 00       	mov    ds:0x124718,eax
/home/yogi/src/os//chrisOS/asm/isr.s:191
        mov exceptionBX, ebx
   101a8:	89 1d f4 46 12 00    	mov    DWORD PTR ds:0x1246f4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:192
        mov exceptionCX, ecx
   101ae:	89 0d f8 46 12 00    	mov    DWORD PTR ds:0x1246f8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:193
        mov exceptionDX, edx
   101b4:	89 15 fc 46 12 00    	mov    DWORD PTR ds:0x1246fc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:194
        mov exceptionSI, esi
   101ba:	89 35 00 47 12 00    	mov    DWORD PTR ds:0x124700,esi
/home/yogi/src/os//chrisOS/asm/isr.s:195
        mov exceptionDI, edi
   101c0:	89 3d 04 47 12 00    	mov    DWORD PTR ds:0x124704,edi
/home/yogi/src/os//chrisOS/asm/isr.s:196
        mov eax, cr0
   101c6:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:197
        mov exceptionCR0, eax
   101c9:	a3 0c 47 12 00       	mov    ds:0x12470c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:198
        mov eax, cr3
   101ce:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:199
        mov exceptionCR3, eax
   101d1:	a3 10 47 12 00       	mov    ds:0x124710,eax
/home/yogi/src/os//chrisOS/asm/isr.s:200
        mov eax, cr4
   101d6:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:201
        mov exceptionCR4, eax
   101d9:	a3 14 47 12 00       	mov    ds:0x124714,eax
/home/yogi/src/os//chrisOS/asm/isr.s:202
        mov eax,es
   101de:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:203
        mov exceptionES,eax
   101e0:	a3 1c 47 12 00       	mov    ds:0x12471c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:204
        mov eax,fs
   101e5:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:205
        mov exceptionFS,eax
   101e7:	a3 20 47 12 00       	mov    ds:0x124720,eax
/home/yogi/src/os//chrisOS/asm/isr.s:206
        mov eax,gs
   101ec:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:207
        mov exceptionGS,eax
   101ee:	a3 24 47 12 00       	mov    ds:0x124724,eax
/home/yogi/src/os//chrisOS/asm/isr.s:208
        mov eax,ss
   101f3:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:209
        mov exceptionSS,eax
   101f5:	a3 28 47 12 00       	mov    ds:0x124728,eax
/home/yogi/src/os//chrisOS/asm/isr.s:210
        mov eax, exceptionAX
   101fa:	a1 f0 46 12 00       	mov    eax,ds:0x1246f0
/home/yogi/src/os//chrisOS/asm/isr.s:211
        mov     bx, 0x10
   101ff:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:212
        mov     ds, bx
   10203:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:213
        mov     es, bx                  # load ds and es with valid selector
   10205:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:214
	mov     gs, bx
   10207:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:216
    
    mov ebx,exceptionNumber
   10209:	8b 1d e4 46 12 00    	mov    ebx,DWORD PTR ds:0x1246e4
/home/yogi/src/os//chrisOS/asm/isr.s:217
    mov bl,[_isr_has_errorCode+ebx]
   1020f:	8a 9b 83 06 01 00    	mov    bl,BYTE PTR [ebx+0x10683]
/home/yogi/src/os//chrisOS/asm/isr.s:218
    cmp bl,1
   10215:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:219
    je  getExceptionDetailsWithError
   10218:	74 1f                	je     10239 <getExceptionDetailsWithError>
/home/yogi/src/os//chrisOS/asm/isr.s:220
    mov ebx, [ebp+8]
   1021a:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:221
    mov exceptionFlags, ebx
   1021d:	89 1d 30 47 12 00    	mov    DWORD PTR ds:0x124730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:222
    mov bx, [ebp+4]
   10223:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:223
    mov exceptionCS, bx
   10227:	66 89 1d 3c 47 12 00 	mov    WORD PTR ds:0x12473c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:224
    mov ebx, [ebp+0]
   1022e:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:225
    mov exceptionEIP, ebx
   10231:	89 1d 38 47 12 00    	mov    DWORD PTR ds:0x124738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:226
    jmp saveTheStack
   10237:	eb 33                	jmp    1026c <saveTheStack>

00010239 <getExceptionDetailsWithError>:
getExceptionDetailsWithError():
/home/yogi/src/os//chrisOS/asm/isr.s:229

getExceptionDetailsWithError:
     mov ebx, [ebp+12]
   10239:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:230
     mov exceptionFlags, ebx
   1023c:	89 1d 30 47 12 00    	mov    DWORD PTR ds:0x124730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:231
     mov bx, [ebp+8]
   10242:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:232
     mov exceptionCS, bx
   10246:	66 89 1d 3c 47 12 00 	mov    WORD PTR ds:0x12473c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:233
     mov ebx, [ebp+4]
   1024d:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:234
     mov exceptionEIP, ebx
   10250:	89 1d 38 47 12 00    	mov    DWORD PTR ds:0x124738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:235
     mov ebx, cr2
   10256:	0f 20 d3             	mov    ebx,cr2
/home/yogi/src/os//chrisOS/asm/isr.s:236
     mov exceptionCR2, ebx
   10259:	89 1d 40 47 12 00    	mov    DWORD PTR ds:0x124740,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:237
     mov ebx, [ebp]
   1025f:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:238
     movzx ebx,bx
   10262:	0f b7 db             	movzx  ebx,bx
/home/yogi/src/os//chrisOS/asm/isr.s:239
     mov exceptionErrorCode, bx
   10265:	66 89 1d 34 47 12 00 	mov    WORD PTR ds:0x124734,bx

0001026c <saveTheStack>:
saveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:242

saveTheStack:
jmp overSaveTheStack
   1026c:	eb 13                	jmp    10281 <overSaveTheStack>
/home/yogi/src/os//chrisOS/asm/isr.s:243
        mov esi, exceptionSavedESP
   1026e:	8b 35 2c 47 12 00    	mov    esi,DWORD PTR ds:0x12472c
/home/yogi/src/os//chrisOS/asm/isr.s:245
//        add esi, 16 #drop the 4 dwords that are passed to the proc
        mov edi, exceptionSavedStack
   10274:	8b 3d e8 46 12 00    	mov    edi,DWORD PTR ds:0x1246e8
/home/yogi/src/os//chrisOS/asm/isr.s:246
        mov cx, 30
   1027a:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:247
        cld
   1027e:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:248
        rep movsd
   1027f:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]

00010281 <overSaveTheStack>:
overSaveTheStack():
/home/yogi/src/os//chrisOS/asm/isr.s:252

        #Figure out which exception handler to call
overSaveTheStack:
        mov ax,exceptionNumber
   10281:	66 a1 e4 46 12 00    	mov    ax,ds:0x1246e4
/home/yogi/src/os//chrisOS/asm/isr.s:253
        cmp ax,0xe
   10287:	66 83 f8 0e          	cmp    ax,0xe
/home/yogi/src/os//chrisOS/asm/isr.s:254
        jne notPagingHandler
   1028b:	75 09                	jne    10296 <notPagingHandler>
/home/yogi/src/os//chrisOS/asm/isr.s:255
        call 0x08:pagingExceptionHandler
   1028d:	9a 99 98 01 00 08 00 	call   0x8:0x19899
/home/yogi/src/os//chrisOS/asm/isr.s:256
        jmp onTheWayOut
   10294:	eb 07                	jmp    1029d <onTheWayOut>

00010296 <notPagingHandler>:
notPagingHandler():
/home/yogi/src/os//chrisOS/asm/isr.s:260

notPagingHandler:
toDefaultHandler:
        call 0x08:defaultISRHandler
   10296:	9a 51 9a 01 00 08 00 	call   0x8:0x19a51

0001029d <onTheWayOut>:
onTheWayOut():
/home/yogi/src/os//chrisOS/asm/isr.s:262
onTheWayOut:
        popad                           # restoring the regs
   1029d:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:263
        mov esp, exceptionSavedESP
   1029e:	8b 25 2c 47 12 00    	mov    esp,DWORD PTR ds:0x12472c
/home/yogi/src/os//chrisOS/asm/isr.s:265
#        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
        mov ebx,exceptionNumber
   102a4:	8b 1d e4 46 12 00    	mov    ebx,DWORD PTR ds:0x1246e4
/home/yogi/src/os//chrisOS/asm/isr.s:266
        mov bl,[_isr_has_errorCode+ebx]
   102aa:	8a 9b 83 06 01 00    	mov    bl,BYTE PTR [ebx+0x10683]
/home/yogi/src/os//chrisOS/asm/isr.s:267
        cmp bl,1
   102b0:	80 fb 01             	cmp    bl,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:268
        jnz overCorrection
   102b3:	75 03                	jne    102b8 <overCorrection>
/home/yogi/src/os//chrisOS/asm/isr.s:269
        add esp, 4 #get rid of error code per prolog http://geezer.osdevbrasil.net/osd/intr/index.htm 9. If the exception pushed an error code, the handler must pop it now and discard it. 
   102b5:	83 c4 04             	add    esp,0x4

000102b8 <overCorrection>:
overCorrection():
/home/yogi/src/os//chrisOS/asm/isr.s:271
overCorrection:
        mov     bx, exceptionDS
   102b8:	66 8b 1d 18 47 12 00 	mov    bx,WORD PTR ds:0x124718
/home/yogi/src/os//chrisOS/asm/isr.s:272
        mov     ds, bx
   102bf:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:273
        mov     bx, exceptionES
   102c1:	66 8b 1d 1c 47 12 00 	mov    bx,WORD PTR ds:0x12471c
/home/yogi/src/os//chrisOS/asm/isr.s:274
        mov     es, bx                  # load ds and es with valid selector
   102c8:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:275
        mov     bx, exceptionFS
   102ca:	66 8b 1d 20 47 12 00 	mov    bx,WORD PTR ds:0x124720
/home/yogi/src/os//chrisOS/asm/isr.s:276
        mov     fs,bx
   102d1:	8e e3                	mov    fs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:277
        mov     bx, exceptionGS
   102d3:	66 8b 1d 24 47 12 00 	mov    bx,WORD PTR ds:0x124724
/home/yogi/src/os//chrisOS/asm/isr.s:278
	mov     gs, bx
   102da:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:279
        mov ebp,exceptionBP
   102dc:	8b 2d 08 47 12 00    	mov    ebp,DWORD PTR ds:0x124708
/home/yogi/src/os//chrisOS/asm/isr.s:280
        mov ebx,exceptionBX
   102e2:	8b 1d f4 46 12 00    	mov    ebx,DWORD PTR ds:0x1246f4
/home/yogi/src/os//chrisOS/asm/isr.s:281
        mov eax, exceptionAX
   102e8:	a1 f0 46 12 00       	mov    eax,ds:0x1246f0
/home/yogi/src/os//chrisOS/asm/isr.s:282
        sti
   102ed:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:283
        iretd
   102ee:	cf                   	iret   

000102ef <_isr_15_wrapper>:
_isr_15_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:287

.global _isr_15_wrapper        
_isr_15_wrapper:
        mov exceptionSavedESP, esp
   102ef:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:288
        mov exceptionAX,eax
   102f5:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:289
        mov exceptionBP, ebp
   102fa:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:290
        mov     ebp, esp
   10300:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:291
        mov     ax, 0xf                  # save exception number
   10302:	66 b8 0f 00          	mov    ax,0xf
/home/yogi/src/os//chrisOS/asm/isr.s:292
        jmp isr_My_Common
   10306:	e9 8f fe ff ff       	jmp    1019a <isr_My_Common>

0001030b <_isr_16_wrapper>:
_isr_16_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:295
.global _isr_16_wrapper        
_isr_16_wrapper:
        mov exceptionSavedESP, esp
   1030b:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:296
        mov exceptionAX,eax
   10311:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:297
        mov exceptionBP, ebp
   10316:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:298
        mov     ebp, esp
   1031c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:299
        mov     ax, 0x10                  # save exception number
   1031e:	66 b8 10 00          	mov    ax,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:300
        jmp isr_My_Common
   10322:	e9 73 fe ff ff       	jmp    1019a <isr_My_Common>

00010327 <_isr_17_wrapper>:
_isr_17_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:303
.global _isr_17_wrapper        
_isr_17_wrapper:
        mov exceptionSavedESP, esp
   10327:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:304
        mov exceptionAX,eax
   1032d:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:305
        mov exceptionBP, ebp
   10332:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:306
        mov     ebp, esp
   10338:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:307
        mov     ax, 0x11                  # save exception number
   1033a:	66 b8 11 00          	mov    ax,0x11
/home/yogi/src/os//chrisOS/asm/isr.s:308
        jmp isr_My_Common
   1033e:	e9 57 fe ff ff       	jmp    1019a <isr_My_Common>

00010343 <_isr_18_wrapper>:
_isr_18_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:311
.global _isr_18_wrapper        
_isr_18_wrapper:
        mov exceptionSavedESP, esp
   10343:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:312
        mov exceptionAX,eax
   10349:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:313
        mov exceptionBP, ebp
   1034e:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:314
        mov     ebp, esp
   10354:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:315
        mov     ax, 0x12                  # save exception number
   10356:	66 b8 12 00          	mov    ax,0x12
/home/yogi/src/os//chrisOS/asm/isr.s:316
        jmp isr_My_Common
   1035a:	e9 3b fe ff ff       	jmp    1019a <isr_My_Common>

0001035f <_isr_19_wrapper>:
_isr_19_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:319
.global _isr_19_wrapper        
_isr_19_wrapper:
        mov exceptionSavedESP, esp
   1035f:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:320
        mov exceptionAX,eax
   10365:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:321
        mov exceptionBP, ebp
   1036a:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:322
        mov     ebp, esp
   10370:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:323
        mov     ax, 0x13                  # save exception number
   10372:	66 b8 13 00          	mov    ax,0x13
/home/yogi/src/os//chrisOS/asm/isr.s:324
        jmp isr_My_Common
   10376:	e9 1f fe ff ff       	jmp    1019a <isr_My_Common>

0001037b <_isr_20_wrapper>:
_isr_20_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:327
.global _isr_20_wrapper        #8 based exception 0x14
_isr_20_wrapper:
        mov exceptionSavedESP, esp
   1037b:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:328
        mov exceptionAX,eax
   10381:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:329
        mov exceptionBP, ebp
   10386:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:330
        mov     ebp, esp
   1038c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:331
        mov     ax, 0x14                  # save exception number
   1038e:	66 b8 14 00          	mov    ax,0x14
/home/yogi/src/os//chrisOS/asm/isr.s:332
        jmp isr_My_Common
   10392:	e9 03 fe ff ff       	jmp    1019a <isr_My_Common>

00010397 <_isr_21_wrapper>:
_isr_21_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:335
.global _isr_21_wrapper        
_isr_21_wrapper:
        mov exceptionSavedESP, esp
   10397:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:336
        mov exceptionAX,eax
   1039d:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:337
        mov exceptionBP, ebp
   103a2:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:338
        mov     ebp, esp
   103a8:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:339
        mov     ax, 0x15                  # save exception number
   103aa:	66 b8 15 00          	mov    ax,0x15
/home/yogi/src/os//chrisOS/asm/isr.s:340
        jmp isr_My_Common
   103ae:	e9 e7 fd ff ff       	jmp    1019a <isr_My_Common>

000103b3 <_isr_22_wrapper>:
_isr_22_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:343
.global _isr_22_wrapper        
_isr_22_wrapper:
        mov exceptionSavedESP, esp
   103b3:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:344
        mov exceptionAX,eax
   103b9:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:345
        mov exceptionBP, ebp
   103be:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:346
        mov     ebp, esp
   103c4:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:347
        mov     ax, 0x16                  # save exception number
   103c6:	66 b8 16 00          	mov    ax,0x16
/home/yogi/src/os//chrisOS/asm/isr.s:348
        jmp isr_My_Common
   103ca:	e9 cb fd ff ff       	jmp    1019a <isr_My_Common>

000103cf <_isr_23_wrapper>:
_isr_23_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:351
.global _isr_23_wrapper        
_isr_23_wrapper:
        mov exceptionSavedESP, esp
   103cf:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:352
        mov exceptionAX,eax
   103d5:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:353
        mov exceptionBP, ebp
   103da:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:354
        mov     ebp, esp
   103e0:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:355
        mov     ax, 0x17                  # save exception number
   103e2:	66 b8 17 00          	mov    ax,0x17
/home/yogi/src/os//chrisOS/asm/isr.s:356
        jmp isr_My_Common
   103e6:	e9 af fd ff ff       	jmp    1019a <isr_My_Common>

000103eb <_isr_24_wrapper>:
_isr_24_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:359
.global _isr_24_wrapper        
_isr_24_wrapper:
        mov exceptionSavedESP, esp
   103eb:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:360
        mov exceptionAX,eax
   103f1:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:361
        mov exceptionBP, ebp
   103f6:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:362
        mov     ebp, esp
   103fc:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:363
        mov     ax, 0x18                  # save exception number
   103fe:	66 b8 18 00          	mov    ax,0x18
/home/yogi/src/os//chrisOS/asm/isr.s:364
        jmp isr_My_Common
   10402:	e9 93 fd ff ff       	jmp    1019a <isr_My_Common>

00010407 <_isr_25_wrapper>:
_isr_25_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:367
.global _isr_25_wrapper        
_isr_25_wrapper:
        mov exceptionSavedESP, esp
   10407:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:368
        mov exceptionAX,eax
   1040d:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:369
        mov exceptionBP, ebp
   10412:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:370
        mov     ebp, esp
   10418:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:371
        mov     ax, 0x19                  # save exception number
   1041a:	66 b8 19 00          	mov    ax,0x19
/home/yogi/src/os//chrisOS/asm/isr.s:372
        jmp isr_My_Common
   1041e:	e9 77 fd ff ff       	jmp    1019a <isr_My_Common>

00010423 <_isr_26_wrapper>:
_isr_26_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:375
.global _isr_26_wrapper        
_isr_26_wrapper:
        mov exceptionSavedESP, esp
   10423:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:376
        mov exceptionAX,eax
   10429:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:377
        mov exceptionBP, ebp
   1042e:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:378
        mov     ebp, esp
   10434:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:379
        mov     ax, 0x1a                  # save exception number
   10436:	66 b8 1a 00          	mov    ax,0x1a
/home/yogi/src/os//chrisOS/asm/isr.s:380
        jmp isr_My_Common
   1043a:	e9 5b fd ff ff       	jmp    1019a <isr_My_Common>

0001043f <_isr_27_wrapper>:
_isr_27_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:383
.global _isr_27_wrapper        
_isr_27_wrapper:
        mov exceptionSavedESP, esp
   1043f:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:384
        mov exceptionAX,eax
   10445:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:385
        mov exceptionBP, ebp
   1044a:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:386
        mov     ebp, esp
   10450:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:387
        mov     ax, 0x1b                  # save exception number
   10452:	66 b8 1b 00          	mov    ax,0x1b
/home/yogi/src/os//chrisOS/asm/isr.s:388
        jmp isr_My_Common
   10456:	e9 3f fd ff ff       	jmp    1019a <isr_My_Common>

0001045b <_isr_28_wrapper>:
_isr_28_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:391
.global _isr_28_wrapper        
_isr_28_wrapper:
        mov exceptionSavedESP, esp
   1045b:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:392
        mov exceptionAX,eax
   10461:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:393
        mov exceptionBP, ebp
   10466:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:394
        mov     ebp, esp
   1046c:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:395
        mov     ax, 0x1c                  # save exception number
   1046e:	66 b8 1c 00          	mov    ax,0x1c
/home/yogi/src/os//chrisOS/asm/isr.s:396
        jmp isr_My_Common
   10472:	e9 23 fd ff ff       	jmp    1019a <isr_My_Common>

00010477 <_isr_29_wrapper>:
_isr_29_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:399
.global _isr_29_wrapper        
_isr_29_wrapper:
        mov exceptionSavedESP, esp
   10477:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:400
        mov exceptionAX,eax
   1047d:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:401
        mov exceptionBP, ebp
   10482:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:402
        mov     ebp, esp
   10488:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:403
        mov     ax, 0x1d                  # save exception number
   1048a:	66 b8 1d 00          	mov    ax,0x1d
/home/yogi/src/os//chrisOS/asm/isr.s:404
        jmp isr_My_Common
   1048e:	e9 07 fd ff ff       	jmp    1019a <isr_My_Common>

00010493 <_isr_30_wrapper>:
_isr_30_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:407
.global _isr_30_wrapper        
_isr_30_wrapper:
        mov exceptionSavedESP, esp
   10493:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:408
        mov exceptionAX,eax
   10499:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:409
        mov exceptionBP, ebp
   1049e:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:410
        mov     ebp, esp
   104a4:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:411
        mov     ax, 0x1e                  # save exception number
   104a6:	66 b8 1e 00          	mov    ax,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:412
        jmp isr_My_Common
   104aa:	e9 eb fc ff ff       	jmp    1019a <isr_My_Common>

000104af <_isr_31_wrapper>:
_isr_31_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:415
.global _isr_31_wrapper        
_isr_31_wrapper:                            #DEBUG EXCEPTION
cli
   104af:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:416
    mov debugBP,ebp
   104b0:	89 2d 5c 47 12 00    	mov    DWORD PTR ds:0x12475c,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:417
    mov debugSavedESP, esp
   104b6:	89 25 80 47 12 00    	mov    DWORD PTR ds:0x124780,esp
/home/yogi/src/os//chrisOS/asm/isr.s:418
    mov debugESP,esp
   104bc:	89 25 1c 00 01 00    	mov    DWORD PTR ds:0x1001c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:419
    pushad
   104c2:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:420
    mov ebp, debugESP
   104c3:	8b 2d 1c 00 01 00    	mov    ebp,DWORD PTR ds:0x1001c
/home/yogi/src/os//chrisOS/asm/isr.s:422
    
    mov debugBX, ebx
   104c9:	89 1d 48 47 12 00    	mov    DWORD PTR ds:0x124748,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:423
    mov ebx,debugSavedESP
   104cf:	8b 1d 80 47 12 00    	mov    ebx,DWORD PTR ds:0x124780
/home/yogi/src/os//chrisOS/asm/isr.s:424
    add ebx,12
   104d5:	83 c3 0c             	add    ebx,0xc
/home/yogi/src/os//chrisOS/asm/isr.s:425
    mov debugSavedESP,ebx
   104d8:	89 1d 80 47 12 00    	mov    DWORD PTR ds:0x124780,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:426
    mov ebx, [ebp+8]
   104de:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:427
    mov debugFlags, ebx
   104e1:	89 1d 84 47 12 00    	mov    DWORD PTR ds:0x124784,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:428
    mov debugReturnFlags,ebx
   104e7:	89 1d 14 00 01 00    	mov    DWORD PTR ds:0x10014,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:429
    movw bx, [ebp+4]
   104ed:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:430
    movw debugCS, bx
   104f1:	66 89 1d 8c 47 12 00 	mov    WORD PTR ds:0x12478c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:431
    mov ebx, [ebp+0]
   104f8:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:432
    mov debugEIP, ebx
   104fb:	89 1d 90 47 12 00    	mov    DWORD PTR ds:0x124790,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:434

    mov debugCX, ecx
   10501:	89 0d 4c 47 12 00    	mov    DWORD PTR ds:0x12474c,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:435
    mov debugDX, edx
   10507:	89 15 50 47 12 00    	mov    DWORD PTR ds:0x124750,edx
/home/yogi/src/os//chrisOS/asm/isr.s:436
    mov debugSI, esi
   1050d:	89 35 54 47 12 00    	mov    DWORD PTR ds:0x124754,esi
/home/yogi/src/os//chrisOS/asm/isr.s:437
    mov debugDI, edi
   10513:	89 3d 58 47 12 00    	mov    DWORD PTR ds:0x124758,edi
/home/yogi/src/os//chrisOS/asm/isr.s:438
    mov debugAX,eax
   10519:	a3 44 47 12 00       	mov    ds:0x124744,eax
/home/yogi/src/os//chrisOS/asm/isr.s:440

    movw ax,ds
   1051e:	66 8c d8             	mov    ax,ds
/home/yogi/src/os//chrisOS/asm/isr.s:441
    movw debugDS,eax
   10521:	66 a3 6c 47 12 00    	mov    ds:0x12476c,ax
/home/yogi/src/os//chrisOS/asm/isr.s:442
    mov eax, cr0
   10527:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:443
    mov debugCR0, eax
   1052a:	a3 60 47 12 00       	mov    ds:0x124760,eax
/home/yogi/src/os//chrisOS/asm/isr.s:444
    mov eax, cr3
   1052f:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:445
    mov debugCR3, eax
   10532:	a3 64 47 12 00       	mov    ds:0x124764,eax
/home/yogi/src/os//chrisOS/asm/isr.s:446
    mov eax, cr4
   10537:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:447
    mov debugCR4, eax
   1053a:	a3 68 47 12 00       	mov    ds:0x124768,eax
/home/yogi/src/os//chrisOS/asm/isr.s:448
    mov eax,es
   1053f:	8c c0                	mov    eax,es
/home/yogi/src/os//chrisOS/asm/isr.s:449
    mov debugES,eax
   10541:	a3 70 47 12 00       	mov    ds:0x124770,eax
/home/yogi/src/os//chrisOS/asm/isr.s:450
    mov eax,fs
   10546:	8c e0                	mov    eax,fs
/home/yogi/src/os//chrisOS/asm/isr.s:451
    mov debugFS,eax
   10548:	a3 74 47 12 00       	mov    ds:0x124774,eax
/home/yogi/src/os//chrisOS/asm/isr.s:452
    mov eax,gs
   1054d:	8c e8                	mov    eax,gs
/home/yogi/src/os//chrisOS/asm/isr.s:453
    mov debugGS,eax
   1054f:	a3 78 47 12 00       	mov    ds:0x124778,eax
/home/yogi/src/os//chrisOS/asm/isr.s:454
    mov eax,ss
   10554:	8c d0                	mov    eax,ss
/home/yogi/src/os//chrisOS/asm/isr.s:455
    mov debugSS,eax
   10556:	a3 7c 47 12 00       	mov    ds:0x12477c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:457

    mov esi, debugSavedESP
   1055b:	8b 35 80 47 12 00    	mov    esi,DWORD PTR ds:0x124780
/home/yogi/src/os//chrisOS/asm/isr.s:458
    mov edi, debugSavedStack
   10561:	8b 3d ec 46 12 00    	mov    edi,DWORD PTR ds:0x1246ec
/home/yogi/src/os//chrisOS/asm/isr.s:459
    mov cx, 30
   10567:	66 b9 1e 00          	mov    cx,0x1e
/home/yogi/src/os//chrisOS/asm/isr.s:460
    cld
   1056b:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:461
    rep movsd
   1056c:	f3 a5                	rep movs DWORD PTR es:[edi],DWORD PTR ds:[esi]
/home/yogi/src/os//chrisOS/asm/isr.s:462
    call debugStep
   1056e:	e8 ca a9 00 00       	call   1af3d <debugStep>
/home/yogi/src/os//chrisOS/asm/isr.s:463
    popa
   10573:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:464
    sti
   10574:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:465
    iretd
   10575:	cf                   	iret   

00010576 <_isr_32_wrapper>:
_isr_32_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:468
.global _isr_32_wrapper        
_isr_32_wrapper:
        mov exceptionSavedESP, esp
   10576:	89 25 2c 47 12 00    	mov    DWORD PTR ds:0x12472c,esp
/home/yogi/src/os//chrisOS/asm/isr.s:469
        mov exceptionAX,eax
   1057c:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:470
        mov exceptionBP, ebp
   10581:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:471
        mov     ebp, esp
   10587:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:472
        mov     ax, 0x20                  # save exception number
   10589:	66 b8 20 00          	mov    ax,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:473
        jmp isr_My_Common
   1058d:	e9 08 fc ff ff       	jmp    1019a <isr_My_Common>

00010592 <_irq0_handler>:
_irq0_handler():
/home/yogi/src/os//chrisOS/asm/isr.s:478


.global _irq0_handler
_irq0_handler:                #remapped to 0x08
cli
   10592:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:480
#cli;hlt;
        push    ebp
   10593:	55                   	push   ebp
/home/yogi/src/os//chrisOS/asm/isr.s:481
        pushf
   10594:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:482
        mov     ebp, esp
   10595:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:483
        add ebp,4
   10597:	83 c5 04             	add    ebp,0x4
/home/yogi/src/os//chrisOS/asm/isr.s:484
        push eax
   1059a:	50                   	push   eax
/home/yogi/src/os//chrisOS/asm/isr.s:485
        mov ax,0xFFFF
   1059b:	66 b8 ff ff          	mov    ax,0xffff
/home/yogi/src/os//chrisOS/asm/isr.s:486
cld
   1059f:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:488
#cld #C code following the sysV ABI requires DF to be clear on function entry
        push    ebx
   105a0:	53                   	push   ebx
/home/yogi/src/os//chrisOS/asm/isr.s:489
        mov ebx, [ebp+12]
   105a1:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/asm/isr.s:490
        mov exceptionFlags, ebx
   105a4:	89 1d 30 47 12 00    	mov    DWORD PTR ds:0x124730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:491
        mov bx, [ebp+8]
   105aa:	66 8b 5d 08          	mov    bx,WORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:492
        mov exceptionCS, bx
   105ae:	66 89 1d 3c 47 12 00 	mov    WORD PTR ds:0x12473c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:493
        mov ebx, [ebp+4]
   105b5:	8b 5d 04             	mov    ebx,DWORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:494
        mov exceptionEIP, ebx
   105b8:	89 1d 38 47 12 00    	mov    DWORD PTR ds:0x124738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:495
        pop ebx
   105be:	5b                   	pop    ebx
/home/yogi/src/os//chrisOS/asm/isr.s:496
        pushad                          # other regs because its an ISR
   105bf:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:497
         mov     bx, 0x10
   105c0:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:498
        mov     ds, bx
   105c4:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:499
        mov     es, bx                  # load ds and es with valid selector
   105c6:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:500
	mov     gs, bx
   105c8:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:501
        call    irq0_handler          # call actual ISR code
   105ca:	e8 c1 8d 00 00       	call   19390 <irq0_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:502
        popad  
   105cf:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:503
mov al,0x20
   105d0:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:504
out 0x20,al
   105d2:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:507
//mov eax,0
//mov [0xa000B0],eax
        pop eax
   105d4:	58                   	pop    eax
/home/yogi/src/os//chrisOS/asm/isr.s:508
        popf
   105d5:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:509
        pop ebp                         # restoring the regs
   105d6:	5d                   	pop    ebp
/home/yogi/src/os//chrisOS/asm/isr.s:510
        sti
   105d7:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:511
        iretd
   105d8:	cf                   	iret   

000105d9 <_isr_01_wrapper>:
_isr_01_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:514
.global _isr_01_wrapper        
_isr_01_wrapper:                #KEYBOARD HANDLER
cli
   105d9:	fa                   	cli    
/home/yogi/src/os//chrisOS/asm/isr.s:519
#cli;hlt;
        //clear the trap flag if it is set
        //we'll re-set it later if need be
        //andw [esp+8],0xFEFF
        mov exceptionAX, eax
   105da:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os//chrisOS/asm/isr.s:520
        mov exceptionBX, ebx
   105df:	89 1d f4 46 12 00    	mov    DWORD PTR ds:0x1246f4,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:521
        mov exceptionCX, ecx
   105e5:	89 0d f8 46 12 00    	mov    DWORD PTR ds:0x1246f8,ecx
/home/yogi/src/os//chrisOS/asm/isr.s:522
        mov exceptionDX, edx
   105eb:	89 15 fc 46 12 00    	mov    DWORD PTR ds:0x1246fc,edx
/home/yogi/src/os//chrisOS/asm/isr.s:523
        mov exceptionSI, esi
   105f1:	89 35 00 47 12 00    	mov    DWORD PTR ds:0x124700,esi
/home/yogi/src/os//chrisOS/asm/isr.s:524
        mov exceptionDI, edi
   105f7:	89 3d 04 47 12 00    	mov    DWORD PTR ds:0x124704,edi
/home/yogi/src/os//chrisOS/asm/isr.s:525
        mov exceptionBP, ebp
   105fd:	89 2d 08 47 12 00    	mov    DWORD PTR ds:0x124708,ebp
/home/yogi/src/os//chrisOS/asm/isr.s:526
        mov eax, cr0
   10603:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os//chrisOS/asm/isr.s:527
        mov exceptionCR0, eax
   10606:	a3 0c 47 12 00       	mov    ds:0x12470c,eax
/home/yogi/src/os//chrisOS/asm/isr.s:528
        mov eax, cr3
   1060b:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os//chrisOS/asm/isr.s:529
        mov exceptionCR3, eax
   1060e:	a3 10 47 12 00       	mov    ds:0x124710,eax
/home/yogi/src/os//chrisOS/asm/isr.s:530
        mov eax, cr4
   10613:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os//chrisOS/asm/isr.s:531
        mov exceptionCR4, eax
   10616:	a3 14 47 12 00       	mov    ds:0x124714,eax
/home/yogi/src/os//chrisOS/asm/isr.s:532
        mov eax, exceptionAX
   1061b:	a1 f0 46 12 00       	mov    eax,ds:0x1246f0
/home/yogi/src/os//chrisOS/asm/isr.s:533
        pushad
   10620:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:534
        pushf
   10621:	9c                   	pushf  
/home/yogi/src/os//chrisOS/asm/isr.s:535
        mov     ebp, esp
   10622:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/asm/isr.s:536
        add ebp,36
   10624:	83 c5 24             	add    ebp,0x24
/home/yogi/src/os//chrisOS/asm/isr.s:537
        mov ax,0x0001
   10627:	66 b8 01 00          	mov    ax,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:538
cld
   1062b:	fc                   	cld    
/home/yogi/src/os//chrisOS/asm/isr.s:540
#cld #C code following the sysV ABI requires DF to be clear on function entry
        mov ebx, [ebp+8]
   1062c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/asm/isr.s:541
        mov exceptionFlags, ebx
   1062f:	89 1d 30 47 12 00    	mov    DWORD PTR ds:0x124730,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:542
        mov bx, [ebp+4]
   10635:	66 8b 5d 04          	mov    bx,WORD PTR [ebp+0x4]
/home/yogi/src/os//chrisOS/asm/isr.s:543
        mov exceptionCS, bx
   10639:	66 89 1d 3c 47 12 00 	mov    WORD PTR ds:0x12473c,bx
/home/yogi/src/os//chrisOS/asm/isr.s:544
        mov ebx, [ebp+0]
   10640:	8b 5d 00             	mov    ebx,DWORD PTR [ebp+0x0]
/home/yogi/src/os//chrisOS/asm/isr.s:545
        mov exceptionEIP, ebx
   10643:	89 1d 38 47 12 00    	mov    DWORD PTR ds:0x124738,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:546
        mov     bx, 0x10
   10649:	66 bb 10 00          	mov    bx,0x10
/home/yogi/src/os//chrisOS/asm/isr.s:547
        mov     ds, bx
   1064d:	8e db                	mov    ds,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:548
        mov     es, bx                  # load ds and es with valid selector
   1064f:	8e c3                	mov    es,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:549
	mov     gs, bx
   10651:	8e eb                	mov    gs,ebx
/home/yogi/src/os//chrisOS/asm/isr.s:550
        call    kbd_handler          # call actual ISR code
   10653:	e8 83 8e 00 00       	call   194db <kbd_handler>
/home/yogi/src/os//chrisOS/asm/isr.s:551
        popf
   10658:	9d                   	popf   
/home/yogi/src/os//chrisOS/asm/isr.s:552
        popad  
   10659:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:553
mov al,0x20
   1065a:	b0 20                	mov    al,0x20
/home/yogi/src/os//chrisOS/asm/isr.s:554
out 0x20,al
   1065c:	e6 20                	out    0x20,al
/home/yogi/src/os//chrisOS/asm/isr.s:555
        mov     al,kKbdHandlerActivateDebugger
   1065e:	a0 74 65 09 00       	mov    al,ds:0x96574
/home/yogi/src/os//chrisOS/asm/isr.s:556
        cmp     al,1
   10663:	3c 01                	cmp    al,0x1
/home/yogi/src/os//chrisOS/asm/isr.s:557
        jne done
   10665:	75 13                	jne    1067a <done>
/home/yogi/src/os//chrisOS/asm/isr.s:558
        orw [esp+8],0x100
   10667:	66 81 4c 24 08 00 01 	or     WORD PTR [esp+0x8],0x100
/home/yogi/src/os//chrisOS/asm/isr.s:559
        mov al,0
   1066e:	b0 00                	mov    al,0x0
/home/yogi/src/os//chrisOS/asm/isr.s:560
        mov kKbdHandlerActivateDebugger,al
   10670:	a2 74 65 09 00       	mov    ds:0x96574,al
/home/yogi/src/os//chrisOS/asm/isr.s:561
        mov eax,exceptionAX
   10675:	a1 f0 46 12 00       	mov    eax,ds:0x1246f0

0001067a <done>:
done():
/home/yogi/src/os//chrisOS/asm/isr.s:563
done:
        sti
   1067a:	fb                   	sti    
/home/yogi/src/os//chrisOS/asm/isr.s:564
        iretd
   1067b:	cf                   	iret   

0001067c <_call_gate_wrapper>:
_call_gate_wrapper():
/home/yogi/src/os//chrisOS/asm/isr.s:569


.global _call_gate_wrapper
_call_gate_wrapper:
        push    ds
   1067c:	1e                   	push   ds
/home/yogi/src/os//chrisOS/asm/isr.s:570
        push    es                      # saving segment registers and
   1067d:	06                   	push   es
/home/yogi/src/os//chrisOS/asm/isr.s:571
        pushad                          # other regs because its an ISR
   1067e:	60                   	pusha  
/home/yogi/src/os//chrisOS/asm/isr.s:573
 #       call    call_gate_proc
        popad                           # restoring the regs
   1067f:	61                   	popa   
/home/yogi/src/os//chrisOS/asm/isr.s:574
        pop     es
   10680:	07                   	pop    es
/home/yogi/src/os//chrisOS/asm/isr.s:575
        pop     ds
   10681:	1f                   	pop    ds
/home/yogi/src/os//chrisOS/asm/isr.s:576
        retf
   10682:	cb                   	retf   

00010683 <_isr_has_errorCode>:
	...
_isr_has_errorCode():
   1068b:	01 00                	add    DWORD PTR [eax],eax
   1068d:	01 01                	add    DWORD PTR [ecx],eax
   1068f:	01 01                	add    DWORD PTR [ecx],eax
   10691:	01 00                	add    DWORD PTR [eax],eax
   10693:	00 01                	add    BYTE PTR [ecx],al
	...

000106a3 <_ltr>:
_ltr():
/home/yogi/src/os//chrisOS/asm/isr.s:582

        _isr_has_errorCode:  .byte      0,0,0,0,0,0,0,0, 1,0,1,1,1,1,1,0
                             .byte      0,1,0,0,0,0,0,0, 0,0,0,0,0,0,0,0
.global _ltr
_ltr:
		push ax
   106a3:	66 50                	push   ax
/home/yogi/src/os//chrisOS/asm/isr.s:583
		mov ax, 0x58
   106a5:	66 b8 58 00          	mov    ax,0x58
/home/yogi/src/os//chrisOS/asm/isr.s:584
        ltr     ax
   106a9:	0f 00 d8             	ltr    ax
/home/yogi/src/os//chrisOS/asm/isr.s:585
        pop ax
   106ac:	66 58                	pop    ax
/home/yogi/src/os//chrisOS/asm/isr.s:586
        ret
   106ae:	c3                   	ret    
   106af:	90                   	nop

000106b0 <strftime>:
strftime():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:58

static char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim);
static char *_conv(const int n, char *format, char *pt, const char *ptlim);
static char *_add(const char *str, char *pt, const char *ptlim);

size_t HIGH_CODE_SECTION strftime(char *s, size_t maxsize, const char *format, const struct tm *t) {
   106b0:	55                   	push   ebp
   106b1:	89 e5                	mov    ebp,esp
   106b3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61
  char *p;

  p = _fmt(((format == NULL) ? "%c" : format), t, s, s + maxsize);
   106b6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106b9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106bc:	01 c2                	add    edx,eax
   106be:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   106c2:	74 05                	je     106c9 <strftime+0x19>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 1)
   106c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   106c7:	eb 05                	jmp    106ce <strftime+0x1e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 2)
   106c9:	b8 00 50 04 00       	mov    eax,0x45000
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:61 (discriminator 4)
   106ce:	52                   	push   edx
   106cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   106d2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   106d5:	50                   	push   eax
   106d6:	e8 2c 00 00 00       	call   10707 <_fmt>
   106db:	83 c4 10             	add    esp,0x10
   106de:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 4)
  if (p == s + maxsize) return 0;
   106e1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   106e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   106e7:	01 d0                	add    eax,edx
   106e9:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   106ec:	75 07                	jne    106f5 <strftime+0x45>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:62 (discriminator 1)
   106ee:	b8 00 00 00 00       	mov    eax,0x0
   106f3:	eb 10                	jmp    10705 <strftime+0x55>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:63
  *p = '\0';
   106f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   106f8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:64
  return p - s;
   106fb:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   106fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10701:	29 c2                	sub    edx,eax
   10703:	89 d0                	mov    eax,edx
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:65
}
   10705:	c9                   	leave  
   10706:	c3                   	ret    

00010707 <_fmt>:
_fmt():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:67

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
   10707:	55                   	push   ebp
   10708:	89 e5                	mov    ebp,esp
   1070a:	53                   	push   ebx
   1070b:	83 ec 74             	sub    esp,0x74
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  for ( ; *format; ++format) {
   1070e:	e9 68 0a 00 00       	jmp    1117b <_fmt+0xa74>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:69
    if (*format == '%') {
   10713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10716:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10719:	3c 25                	cmp    al,0x25
   1071b:	0f 85 3d 0a 00 00    	jne    1115e <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:70
      if (*format == 'E') {
   10721:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10724:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10727:	3c 45                	cmp    al,0x45
   10729:	75 06                	jne    10731 <_fmt+0x2a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:71
        format++; // Alternate Era
   1072b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1072f:	eb 0e                	jmp    1073f <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:72
      } else if (*format == 'O') {
   10731:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10734:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10737:	3c 4f                	cmp    al,0x4f
   10739:	75 04                	jne    1073f <_fmt+0x38>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:73
        format++; // Alternate numeric symbols
   1073b:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:76
      }

      switch (*++format) {
   1073f:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   10743:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10746:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10749:	0f be c0             	movsx  eax,al
   1074c:	83 f8 7a             	cmp    eax,0x7a
   1074f:	0f 87 08 0a 00 00    	ja     1115d <_fmt+0xa56>
   10755:	8b 04 85 94 50 04 00 	mov    eax,DWORD PTR [eax*4+0x45094]
   1075c:	ff e0                	jmp    eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:78
        case '\0':
          --format;
   1075e:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:79
          break;
   10762:	e9 f7 09 00 00       	jmp    1115e <_fmt+0xa57>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82

        case 'A':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days[t->tm_wday], pt, ptlim);
   10767:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1076a:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1076d:	85 c0                	test   eax,eax
   1076f:	78 1a                	js     1078b <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 1)
   10771:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10774:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10777:	83 f8 06             	cmp    eax,0x6
   1077a:	7f 0f                	jg     1078b <_fmt+0x84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 3)
   1077c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1077f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10782:	8b 04 85 94 49 12 00 	mov    eax,DWORD PTR [eax*4+0x124994]
   10789:	eb 05                	jmp    10790 <_fmt+0x89>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 4)
   1078b:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:82 (discriminator 6)
   10790:	83 ec 04             	sub    esp,0x4
   10793:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10796:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10799:	50                   	push   eax
   1079a:	e8 27 0a 00 00       	call   111c6 <_add>
   1079f:	83 c4 10             	add    esp,0x10
   107a2:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:83 (discriminator 6)
          continue;
   107a5:	e9 cd 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86

        case 'a':
          pt = _add((t->tm_wday < 0 || t->tm_wday > 6) ? "?" : _days_abbrev[t->tm_wday], pt, ptlim);
   107aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107ad:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107b0:	85 c0                	test   eax,eax
   107b2:	78 1a                	js     107ce <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 1)
   107b4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107b7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107ba:	83 f8 06             	cmp    eax,0x6
   107bd:	7f 0f                	jg     107ce <_fmt+0xc7>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 3)
   107bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107c2:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   107c5:	8b 04 85 b0 49 12 00 	mov    eax,DWORD PTR [eax*4+0x1249b0]
   107cc:	eb 05                	jmp    107d3 <_fmt+0xcc>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 4)
   107ce:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:86 (discriminator 6)
   107d3:	83 ec 04             	sub    esp,0x4
   107d6:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   107d9:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   107dc:	50                   	push   eax
   107dd:	e8 e4 09 00 00       	call   111c6 <_add>
   107e2:	83 c4 10             	add    esp,0x10
   107e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:87 (discriminator 6)
          continue;
   107e8:	e9 8a 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90

        case 'B':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months[t->tm_mon], pt, ptlim);
   107ed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107f0:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   107f3:	85 c0                	test   eax,eax
   107f5:	78 1a                	js     10811 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 1)
   107f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   107fa:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   107fd:	83 f8 0b             	cmp    eax,0xb
   10800:	7f 0f                	jg     10811 <_fmt+0x10a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 3)
   10802:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10805:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10808:	8b 04 85 e0 49 12 00 	mov    eax,DWORD PTR [eax*4+0x1249e0]
   1080f:	eb 05                	jmp    10816 <_fmt+0x10f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 4)
   10811:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:90 (discriminator 6)
   10816:	83 ec 04             	sub    esp,0x4
   10819:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1081c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1081f:	50                   	push   eax
   10820:	e8 a1 09 00 00       	call   111c6 <_add>
   10825:	83 c4 10             	add    esp,0x10
   10828:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:91 (discriminator 6)
          continue;
   1082b:	e9 47 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95

        case 'b':
        case 'h':
          pt = _add((t->tm_mon < 0 || t->tm_mon > 11) ? "?" : _months_abbrev[t->tm_mon], pt, ptlim);
   10830:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10833:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10836:	85 c0                	test   eax,eax
   10838:	78 1a                	js     10854 <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 1)
   1083a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1083d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10840:	83 f8 0b             	cmp    eax,0xb
   10843:	7f 0f                	jg     10854 <_fmt+0x14d>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 3)
   10845:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10848:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1084b:	8b 04 85 20 4a 12 00 	mov    eax,DWORD PTR [eax*4+0x124a20]
   10852:	eb 05                	jmp    10859 <_fmt+0x152>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 4)
   10854:	b8 03 50 04 00       	mov    eax,0x45003
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:95 (discriminator 6)
   10859:	83 ec 04             	sub    esp,0x4
   1085c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1085f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10862:	50                   	push   eax
   10863:	e8 5e 09 00 00       	call   111c6 <_add>
   10868:	83 c4 10             	add    esp,0x10
   1086b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:96 (discriminator 6)
          continue;
   1086e:	e9 04 09 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:99

        case 'C':
          pt = _conv((t->tm_year + TM_YEAR_BASE) / 100, "%02d", pt, ptlim);
   10873:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10876:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10879:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1087f:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10884:	89 c8                	mov    eax,ecx
   10886:	f7 ea                	imul   edx
   10888:	c1 fa 05             	sar    edx,0x5
   1088b:	89 c8                	mov    eax,ecx
   1088d:	c1 f8 1f             	sar    eax,0x1f
   10890:	29 c2                	sub    edx,eax
   10892:	89 d0                	mov    eax,edx
   10894:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10897:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1089a:	68 05 50 04 00       	push   0x45005
   1089f:	50                   	push   eax
   108a0:	e8 ef 08 00 00       	call   11194 <_conv>
   108a5:	83 c4 10             	add    esp,0x10
   108a8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:100
          continue;
   108ab:	e9 c7 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:103

        case 'c':
          pt = _fmt("%a %b %e %H:%M:%S %Y", t, pt, ptlim);
   108b0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108b3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108b6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108b9:	68 0a 50 04 00       	push   0x4500a
   108be:	e8 44 fe ff ff       	call   10707 <_fmt>
   108c3:	83 c4 10             	add    esp,0x10
   108c6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:104
          continue;
   108c9:	e9 a9 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:107

        case 'D':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   108ce:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108d1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108d4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   108d7:	68 1f 50 04 00       	push   0x4501f
   108dc:	e8 26 fe ff ff       	call   10707 <_fmt>
   108e1:	83 c4 10             	add    esp,0x10
   108e4:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:108
          continue;
   108e7:	e9 8b 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:111

        case 'd':
          pt = _conv(t->tm_mday, "%02d", pt, ptlim);
   108ec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   108ef:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   108f2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   108f5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   108f8:	68 05 50 04 00       	push   0x45005
   108fd:	50                   	push   eax
   108fe:	e8 91 08 00 00       	call   11194 <_conv>
   10903:	83 c4 10             	add    esp,0x10
   10906:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:112
          continue;
   10909:	e9 69 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:115

        case 'e':
          pt = _conv(t->tm_mday, "%2d", pt, ptlim);
   1090e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10911:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   10914:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10917:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1091a:	68 28 50 04 00       	push   0x45028
   1091f:	50                   	push   eax
   10920:	e8 6f 08 00 00       	call   11194 <_conv>
   10925:	83 c4 10             	add    esp,0x10
   10928:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:116
          continue;
   1092b:	e9 47 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:119

        case 'F':
          pt = _fmt("%Y-%m-%d", t, pt, ptlim);
   10930:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10933:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10936:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10939:	68 2c 50 04 00       	push   0x4502c
   1093e:	e8 c4 fd ff ff       	call   10707 <_fmt>
   10943:	83 c4 10             	add    esp,0x10
   10946:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:120
          continue;
   10949:	e9 29 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:123

        case 'H':
          pt = _conv(t->tm_hour, "%02d", pt, ptlim);
   1094e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10951:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10954:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10957:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1095a:	68 05 50 04 00       	push   0x45005
   1095f:	50                   	push   eax
   10960:	e8 2f 08 00 00       	call   11194 <_conv>
   10965:	83 c4 10             	add    esp,0x10
   10968:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:124
          continue;
   1096b:	e9 07 08 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127

        case 'I':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%02d", pt, ptlim);
   10970:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10973:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10976:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   1097b:	89 c8                	mov    eax,ecx
   1097d:	f7 ea                	imul   edx
   1097f:	d1 fa                	sar    edx,1
   10981:	89 c8                	mov    eax,ecx
   10983:	c1 f8 1f             	sar    eax,0x1f
   10986:	29 c2                	sub    edx,eax
   10988:	89 d0                	mov    eax,edx
   1098a:	01 c0                	add    eax,eax
   1098c:	01 d0                	add    eax,edx
   1098e:	c1 e0 02             	shl    eax,0x2
   10991:	29 c1                	sub    ecx,eax
   10993:	89 ca                	mov    edx,ecx
   10995:	85 d2                	test   edx,edx
   10997:	74 27                	je     109c0 <_fmt+0x2b9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 1)
   10999:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1099c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   1099f:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   109a4:	89 c8                	mov    eax,ecx
   109a6:	f7 ea                	imul   edx
   109a8:	d1 fa                	sar    edx,1
   109aa:	89 c8                	mov    eax,ecx
   109ac:	c1 f8 1f             	sar    eax,0x1f
   109af:	29 c2                	sub    edx,eax
   109b1:	89 d0                	mov    eax,edx
   109b3:	01 c0                	add    eax,eax
   109b5:	01 d0                	add    eax,edx
   109b7:	c1 e0 02             	shl    eax,0x2
   109ba:	29 c1                	sub    ecx,eax
   109bc:	89 ca                	mov    edx,ecx
   109be:	eb 05                	jmp    109c5 <_fmt+0x2be>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 2)
   109c0:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:127 (discriminator 4)
   109c5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109c8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109cb:	68 05 50 04 00       	push   0x45005
   109d0:	52                   	push   edx
   109d1:	e8 be 07 00 00       	call   11194 <_conv>
   109d6:	83 c4 10             	add    esp,0x10
   109d9:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:128 (discriminator 4)
          continue;
   109dc:	e9 96 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:131

        case 'j':
          pt = _conv(t->tm_yday + 1, "%03d", pt, ptlim);
   109e1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   109e4:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   109e7:	83 c0 01             	add    eax,0x1
   109ea:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   109ed:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   109f0:	68 35 50 04 00       	push   0x45035
   109f5:	50                   	push   eax
   109f6:	e8 99 07 00 00       	call   11194 <_conv>
   109fb:	83 c4 10             	add    esp,0x10
   109fe:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:132
          continue;
   10a01:	e9 71 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:135

        case 'k':
          pt = _conv(t->tm_hour, "%2d", pt, ptlim);
   10a06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a09:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10a0c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a0f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a12:	68 28 50 04 00       	push   0x45028
   10a17:	50                   	push   eax
   10a18:	e8 77 07 00 00       	call   11194 <_conv>
   10a1d:	83 c4 10             	add    esp,0x10
   10a20:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:136
          continue;
   10a23:	e9 4f 07 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139

        case 'l':
          pt = _conv((t->tm_hour % 12) ? (t->tm_hour % 12) : 12, "%2d", pt, ptlim);
   10a28:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a2b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a2e:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a33:	89 c8                	mov    eax,ecx
   10a35:	f7 ea                	imul   edx
   10a37:	d1 fa                	sar    edx,1
   10a39:	89 c8                	mov    eax,ecx
   10a3b:	c1 f8 1f             	sar    eax,0x1f
   10a3e:	29 c2                	sub    edx,eax
   10a40:	89 d0                	mov    eax,edx
   10a42:	01 c0                	add    eax,eax
   10a44:	01 d0                	add    eax,edx
   10a46:	c1 e0 02             	shl    eax,0x2
   10a49:	29 c1                	sub    ecx,eax
   10a4b:	89 ca                	mov    edx,ecx
   10a4d:	85 d2                	test   edx,edx
   10a4f:	74 27                	je     10a78 <_fmt+0x371>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 1)
   10a51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a54:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   10a57:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   10a5c:	89 c8                	mov    eax,ecx
   10a5e:	f7 ea                	imul   edx
   10a60:	d1 fa                	sar    edx,1
   10a62:	89 c8                	mov    eax,ecx
   10a64:	c1 f8 1f             	sar    eax,0x1f
   10a67:	29 c2                	sub    edx,eax
   10a69:	89 d0                	mov    eax,edx
   10a6b:	01 c0                	add    eax,eax
   10a6d:	01 d0                	add    eax,edx
   10a6f:	c1 e0 02             	shl    eax,0x2
   10a72:	29 c1                	sub    ecx,eax
   10a74:	89 ca                	mov    edx,ecx
   10a76:	eb 05                	jmp    10a7d <_fmt+0x376>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 2)
   10a78:	ba 0c 00 00 00       	mov    edx,0xc
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:139 (discriminator 4)
   10a7d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10a80:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10a83:	68 28 50 04 00       	push   0x45028
   10a88:	52                   	push   edx
   10a89:	e8 06 07 00 00       	call   11194 <_conv>
   10a8e:	83 c4 10             	add    esp,0x10
   10a91:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:140 (discriminator 4)
          continue;
   10a94:	e9 de 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:143

        case 'M':
          pt = _conv(t->tm_min, "%02d", pt, ptlim);
   10a99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10a9c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   10a9f:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10aa2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10aa5:	68 05 50 04 00       	push   0x45005
   10aaa:	50                   	push   eax
   10aab:	e8 e4 06 00 00       	call   11194 <_conv>
   10ab0:	83 c4 10             	add    esp,0x10
   10ab3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:144
          continue;
   10ab6:	e9 bc 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:148

        case 'm':
          //CLR 05/02/2016 - removed odd +1 after tm_mon
          pt = _conv(t->tm_mon, "%02d", pt, ptlim);
   10abb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10abe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   10ac1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ac4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ac7:	68 05 50 04 00       	push   0x45005
   10acc:	50                   	push   eax
   10acd:	e8 c2 06 00 00       	call   11194 <_conv>
   10ad2:	83 c4 10             	add    esp,0x10
   10ad5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:149
          continue;
   10ad8:	e9 9a 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:152

        case 'n':
          pt = _add("\n", pt, ptlim);
   10add:	83 ec 04             	sub    esp,0x4
   10ae0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ae3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ae6:	68 3a 50 04 00       	push   0x4503a
   10aeb:	e8 d6 06 00 00       	call   111c6 <_add>
   10af0:	83 c4 10             	add    esp,0x10
   10af3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:153
          continue;
   10af6:	e9 7c 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156

        case 'p':
          pt = _add((t->tm_hour >= 12) ? "pm" : "am", pt, ptlim);
   10afb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10afe:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   10b01:	83 f8 0b             	cmp    eax,0xb
   10b04:	7e 07                	jle    10b0d <_fmt+0x406>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 1)
   10b06:	b8 3c 50 04 00       	mov    eax,0x4503c
   10b0b:	eb 05                	jmp    10b12 <_fmt+0x40b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 2)
   10b0d:	b8 3f 50 04 00       	mov    eax,0x4503f
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:156 (discriminator 4)
   10b12:	83 ec 04             	sub    esp,0x4
   10b15:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b18:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b1b:	50                   	push   eax
   10b1c:	e8 a5 06 00 00       	call   111c6 <_add>
   10b21:	83 c4 10             	add    esp,0x10
   10b24:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:157 (discriminator 4)
          continue;
   10b27:	e9 4b 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:160

        case 'R':
          pt = _fmt("%H:%M", t, pt, ptlim);
   10b2c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b2f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b32:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b35:	68 42 50 04 00       	push   0x45042
   10b3a:	e8 c8 fb ff ff       	call   10707 <_fmt>
   10b3f:	83 c4 10             	add    esp,0x10
   10b42:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:161
          continue;
   10b45:	e9 2d 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:164

        case 'r':
          pt = _fmt("%I:%M:%S %p", t, pt, ptlim);
   10b4a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b4d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b50:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10b53:	68 48 50 04 00       	push   0x45048
   10b58:	e8 aa fb ff ff       	call   10707 <_fmt>
   10b5d:	83 c4 10             	add    esp,0x10
   10b60:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:165
          continue;
   10b63:	e9 0f 06 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:168

        case 'S':
          pt = _conv(t->tm_sec, "%02d", pt, ptlim);
   10b68:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b6b:	8b 00                	mov    eax,DWORD PTR [eax]
   10b6d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10b70:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10b73:	68 05 50 04 00       	push   0x45005
   10b78:	50                   	push   eax
   10b79:	e8 16 06 00 00       	call   11194 <_conv>
   10b7e:	83 c4 10             	add    esp,0x10
   10b81:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:169
          continue;
   10b84:	e9 ee 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:176
        case 's': {
          struct tm  tm;
          char buf[32];
          time_t mkt;

          tm = *t;
   10b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10b8c:	8b 10                	mov    edx,DWORD PTR [eax]
   10b8e:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   10b91:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   10b94:	89 55 ac             	mov    DWORD PTR [ebp-0x54],edx
   10b97:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   10b9a:	89 55 b0             	mov    DWORD PTR [ebp-0x50],edx
   10b9d:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   10ba0:	89 55 b4             	mov    DWORD PTR [ebp-0x4c],edx
   10ba3:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   10ba6:	89 55 b8             	mov    DWORD PTR [ebp-0x48],edx
   10ba9:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   10bac:	89 55 bc             	mov    DWORD PTR [ebp-0x44],edx
   10baf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   10bb2:	89 55 c0             	mov    DWORD PTR [ebp-0x40],edx
   10bb5:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   10bb8:	89 55 c4             	mov    DWORD PTR [ebp-0x3c],edx
   10bbb:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   10bbe:	89 55 c8             	mov    DWORD PTR [ebp-0x38],edx
   10bc1:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   10bc4:	89 55 cc             	mov    DWORD PTR [ebp-0x34],edx
   10bc7:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   10bca:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:177
          mkt = mktime(&tm);
   10bcd:	83 ec 0c             	sub    esp,0xc
   10bd0:	8d 45 a8             	lea    eax,[ebp-0x58]
   10bd3:	50                   	push   eax
   10bd4:	e8 ea 72 01 00       	call   27ec3 <mktime>
   10bd9:	83 c4 10             	add    esp,0x10
   10bdc:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:178
          sprintf(buf, "%lu", mkt);
   10bdf:	83 ec 04             	sub    esp,0x4
   10be2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   10be5:	68 54 50 04 00       	push   0x45054
   10bea:	8d 45 88             	lea    eax,[ebp-0x78]
   10bed:	50                   	push   eax
   10bee:	e8 68 69 01 00       	call   2755b <sprintf>
   10bf3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:179
          pt = _add(buf, pt, ptlim);
   10bf6:	83 ec 04             	sub    esp,0x4
   10bf9:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10bfc:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10bff:	8d 45 88             	lea    eax,[ebp-0x78]
   10c02:	50                   	push   eax
   10c03:	e8 be 05 00 00       	call   111c6 <_add>
   10c08:	83 c4 10             	add    esp,0x10
   10c0b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   10c0e:	e9 64 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:184
          continue;
        }

        case 'T':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10c13:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c16:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c19:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10c1c:	68 58 50 04 00       	push   0x45058
   10c21:	e8 e1 fa ff ff       	call   10707 <_fmt>
   10c26:	83 c4 10             	add    esp,0x10
   10c29:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:185
          continue;
   10c2c:	e9 46 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:188

        case 't':
          pt = _add("\t", pt, ptlim);
   10c31:	83 ec 04             	sub    esp,0x4
   10c34:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c37:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c3a:	68 61 50 04 00       	push   0x45061
   10c3f:	e8 82 05 00 00       	call   111c6 <_add>
   10c44:	83 c4 10             	add    esp,0x10
   10c47:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:189
          continue;
   10c4a:	e9 28 05 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:192

        case 'U':
          pt = _conv((t->tm_yday + 7 - t->tm_wday) / 7, "%02d", pt, ptlim);
   10c4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c52:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10c55:	8d 50 07             	lea    edx,[eax+0x7]
   10c58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c5b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c5e:	89 d1                	mov    ecx,edx
   10c60:	29 c1                	sub    ecx,eax
   10c62:	ba 93 24 49 92       	mov    edx,0x92492493
   10c67:	89 c8                	mov    eax,ecx
   10c69:	f7 ea                	imul   edx
   10c6b:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10c6e:	c1 f8 02             	sar    eax,0x2
   10c71:	89 c2                	mov    edx,eax
   10c73:	89 c8                	mov    eax,ecx
   10c75:	c1 f8 1f             	sar    eax,0x1f
   10c78:	29 c2                	sub    edx,eax
   10c7a:	89 d0                	mov    eax,edx
   10c7c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10c7f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10c82:	68 05 50 04 00       	push   0x45005
   10c87:	50                   	push   eax
   10c88:	e8 07 05 00 00       	call   11194 <_conv>
   10c8d:	83 c4 10             	add    esp,0x10
   10c90:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:193
          continue;
   10c93:	e9 df 04 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196

        case 'u':
          pt = _conv((t->tm_wday == 0) ? 7 : t->tm_wday, "%d", pt, ptlim);
   10c98:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10c9b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10c9e:	85 c0                	test   eax,eax
   10ca0:	74 08                	je     10caa <_fmt+0x5a3>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 1)
   10ca2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ca5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10ca8:	eb 05                	jmp    10caf <_fmt+0x5a8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 2)
   10caa:	b8 07 00 00 00       	mov    eax,0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:196 (discriminator 4)
   10caf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10cb2:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10cb5:	68 63 50 04 00       	push   0x45063
   10cba:	50                   	push   eax
   10cbb:	e8 d4 04 00 00       	call   11194 <_conv>
   10cc0:	83 c4 10             	add    esp,0x10
   10cc3:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:197 (discriminator 4)
          continue;
   10cc6:	e9 ac 04 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:207
          int  year;
          int  yday;
          int  wday;
          int  w;

          year = t->tm_year + TM_YEAR_BASE;
   10ccb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cce:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10cd1:	05 6c 07 00 00       	add    eax,0x76c
   10cd6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:208
          yday = t->tm_yday;
   10cd9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10cdc:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10cdf:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:209
          wday = t->tm_wday;
   10ce2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10ce5:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10ce8:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215
          while (1) {
            int  len;
            int  bot;
            int  top;

            len = LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10ceb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10cee:	83 e0 03             	and    eax,0x3
   10cf1:	85 c0                	test   eax,eax
   10cf3:	75 50                	jne    10d45 <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 1)
   10cf5:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10cf8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10cfd:	89 c8                	mov    eax,ecx
   10cff:	f7 ea                	imul   edx
   10d01:	c1 fa 05             	sar    edx,0x5
   10d04:	89 c8                	mov    eax,ecx
   10d06:	c1 f8 1f             	sar    eax,0x1f
   10d09:	29 c2                	sub    edx,eax
   10d0b:	89 d0                	mov    eax,edx
   10d0d:	6b c0 64             	imul   eax,eax,0x64
   10d10:	29 c1                	sub    ecx,eax
   10d12:	89 c8                	mov    eax,ecx
   10d14:	85 c0                	test   eax,eax
   10d16:	75 26                	jne    10d3e <_fmt+0x637>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 4)
   10d18:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10d1b:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10d20:	89 c8                	mov    eax,ecx
   10d22:	f7 ea                	imul   edx
   10d24:	c1 fa 07             	sar    edx,0x7
   10d27:	89 c8                	mov    eax,ecx
   10d29:	c1 f8 1f             	sar    eax,0x1f
   10d2c:	29 c2                	sub    edx,eax
   10d2e:	89 d0                	mov    eax,edx
   10d30:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10d36:	29 c1                	sub    ecx,eax
   10d38:	89 c8                	mov    eax,ecx
   10d3a:	85 c0                	test   eax,eax
   10d3c:	75 07                	jne    10d45 <_fmt+0x63e>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 5)
   10d3e:	b8 6e 01 00 00       	mov    eax,0x16e
   10d43:	eb 05                	jmp    10d4a <_fmt+0x643>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 6)
   10d45:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:215 (discriminator 8)
   10d4a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:216 (discriminator 8)
            bot = ((yday + 11 - wday) % DAYSPERWEEK) - 3;
   10d4d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10d50:	83 c0 0b             	add    eax,0xb
   10d53:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   10d56:	89 c1                	mov    ecx,eax
   10d58:	ba 93 24 49 92       	mov    edx,0x92492493
   10d5d:	89 c8                	mov    eax,ecx
   10d5f:	f7 ea                	imul   edx
   10d61:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d64:	c1 f8 02             	sar    eax,0x2
   10d67:	89 c2                	mov    edx,eax
   10d69:	89 c8                	mov    eax,ecx
   10d6b:	c1 f8 1f             	sar    eax,0x1f
   10d6e:	29 c2                	sub    edx,eax
   10d70:	89 d0                	mov    eax,edx
   10d72:	89 c2                	mov    edx,eax
   10d74:	c1 e2 03             	shl    edx,0x3
   10d77:	29 c2                	sub    edx,eax
   10d79:	89 c8                	mov    eax,ecx
   10d7b:	29 d0                	sub    eax,edx
   10d7d:	83 e8 03             	sub    eax,0x3
   10d80:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:217 (discriminator 8)
            top = bot - (len % DAYSPERWEEK);
   10d83:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   10d86:	ba 93 24 49 92       	mov    edx,0x92492493
   10d8b:	89 c8                	mov    eax,ecx
   10d8d:	f7 ea                	imul   edx
   10d8f:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10d92:	c1 f8 02             	sar    eax,0x2
   10d95:	89 c2                	mov    edx,eax
   10d97:	89 c8                	mov    eax,ecx
   10d99:	c1 f8 1f             	sar    eax,0x1f
   10d9c:	29 c2                	sub    edx,eax
   10d9e:	89 d0                	mov    eax,edx
   10da0:	89 c2                	mov    edx,eax
   10da2:	c1 e2 03             	shl    edx,0x3
   10da5:	29 c2                	sub    edx,eax
   10da7:	89 c8                	mov    eax,ecx
   10da9:	29 d0                	sub    eax,edx
   10dab:	8b 55 d4             	mov    edx,DWORD PTR [ebp-0x2c]
   10dae:	29 c2                	sub    edx,eax
   10db0:	89 d0                	mov    eax,edx
   10db2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 8)
            if (top < -3) top += DAYSPERWEEK;
   10db5:	83 7d e8 fd          	cmp    DWORD PTR [ebp-0x18],0xfffffffd
   10db9:	7d 04                	jge    10dbf <_fmt+0x6b8>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:218 (discriminator 1)
   10dbb:	83 45 e8 07          	add    DWORD PTR [ebp-0x18],0x7
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:219
            top += len;
   10dbf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   10dc2:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:220
            if (yday >= top) {
   10dc5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10dc8:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   10dcb:	7c 10                	jl     10ddd <_fmt+0x6d6>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:221
              ++year;
   10dcd:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:222
              w = 1;
   10dd1:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:223
              break;
   10dd8:	e9 9d 00 00 00       	jmp    10e7a <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:225
            }
            if (yday >= bot) {
   10ddd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10de0:	3b 45 d4             	cmp    eax,DWORD PTR [ebp-0x2c]
   10de3:	7c 2a                	jl     10e0f <_fmt+0x708>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:226
              w = 1 + ((yday - bot) / DAYSPERWEEK);
   10de5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   10de8:	2b 45 d4             	sub    eax,DWORD PTR [ebp-0x2c]
   10deb:	89 c1                	mov    ecx,eax
   10ded:	ba 93 24 49 92       	mov    edx,0x92492493
   10df2:	89 c8                	mov    eax,ecx
   10df4:	f7 ea                	imul   edx
   10df6:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10df9:	c1 f8 02             	sar    eax,0x2
   10dfc:	89 c2                	mov    edx,eax
   10dfe:	89 c8                	mov    eax,ecx
   10e00:	c1 f8 1f             	sar    eax,0x1f
   10e03:	29 c2                	sub    edx,eax
   10e05:	89 d0                	mov    eax,edx
   10e07:	83 c0 01             	add    eax,0x1
   10e0a:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:227
              break;
   10e0d:	eb 6b                	jmp    10e7a <_fmt+0x773>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:229
            }
            --year;
   10e0f:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
   10e13:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   10e16:	83 e0 03             	and    eax,0x3
   10e19:	85 c0                	test   eax,eax
   10e1b:	75 50                	jne    10e6d <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 1)
   10e1d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e20:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e25:	89 c8                	mov    eax,ecx
   10e27:	f7 ea                	imul   edx
   10e29:	c1 fa 05             	sar    edx,0x5
   10e2c:	89 c8                	mov    eax,ecx
   10e2e:	c1 f8 1f             	sar    eax,0x1f
   10e31:	29 c2                	sub    edx,eax
   10e33:	89 d0                	mov    eax,edx
   10e35:	6b c0 64             	imul   eax,eax,0x64
   10e38:	29 c1                	sub    ecx,eax
   10e3a:	89 c8                	mov    eax,ecx
   10e3c:	85 c0                	test   eax,eax
   10e3e:	75 26                	jne    10e66 <_fmt+0x75f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 4)
   10e40:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10e43:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10e48:	89 c8                	mov    eax,ecx
   10e4a:	f7 ea                	imul   edx
   10e4c:	c1 fa 07             	sar    edx,0x7
   10e4f:	89 c8                	mov    eax,ecx
   10e51:	c1 f8 1f             	sar    eax,0x1f
   10e54:	29 c2                	sub    edx,eax
   10e56:	89 d0                	mov    eax,edx
   10e58:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   10e5e:	29 c1                	sub    ecx,eax
   10e60:	89 c8                	mov    eax,ecx
   10e62:	85 c0                	test   eax,eax
   10e64:	75 07                	jne    10e6d <_fmt+0x766>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 5)
   10e66:	b8 6e 01 00 00       	mov    eax,0x16e
   10e6b:	eb 05                	jmp    10e72 <_fmt+0x76b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 6)
   10e6d:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:230 (discriminator 8)
   10e72:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:231 (discriminator 8)
          }
   10e75:	e9 71 fe ff ff       	jmp    10ceb <_fmt+0x5e4>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:232
          if (*format == 'V') {
   10e7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10e7d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10e80:	3c 56                	cmp    al,0x56
   10e82:	75 1e                	jne    10ea2 <_fmt+0x79b>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:233
            pt = _conv(w, "%02d", pt, ptlim);
   10e84:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10e87:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10e8a:	68 05 50 04 00       	push   0x45005
   10e8f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   10e92:	e8 fd 02 00 00       	call   11194 <_conv>
   10e97:	83 c4 10             	add    esp,0x10
   10e9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10e9d:	e9 d5 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:234
            --year;
            yday += LEAPYEAR(year) ? DAYSPERLYEAR : DAYSPERNYEAR;
          }
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
   10ea2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   10ea5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   10ea8:	3c 67                	cmp    al,0x67
   10eaa:	75 3b                	jne    10ee7 <_fmt+0x7e0>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:235
            pt = _conv(year % 100, "%02d", pt, ptlim);
   10eac:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   10eaf:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10eb4:	89 c8                	mov    eax,ecx
   10eb6:	f7 ea                	imul   edx
   10eb8:	c1 fa 05             	sar    edx,0x5
   10ebb:	89 c8                	mov    eax,ecx
   10ebd:	c1 f8 1f             	sar    eax,0x1f
   10ec0:	29 c2                	sub    edx,eax
   10ec2:	89 d0                	mov    eax,edx
   10ec4:	6b c0 64             	imul   eax,eax,0x64
   10ec7:	29 c1                	sub    ecx,eax
   10ec9:	89 c8                	mov    eax,ecx
   10ecb:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10ece:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10ed1:	68 05 50 04 00       	push   0x45005
   10ed6:	50                   	push   eax
   10ed7:	e8 b8 02 00 00       	call   11194 <_conv>
   10edc:	83 c4 10             	add    esp,0x10
   10edf:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
          }
          continue;
   10ee2:	e9 90 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:237
          if (*format == 'V') {
            pt = _conv(w, "%02d", pt, ptlim);
          } else if (*format == 'g') {
            pt = _conv(year % 100, "%02d", pt, ptlim);
          } else {
            pt = _conv(year, "%04d", pt, ptlim);
   10ee7:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10eea:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10eed:	68 66 50 04 00       	push   0x45066
   10ef2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   10ef5:	e8 9a 02 00 00       	call   11194 <_conv>
   10efa:	83 c4 10             	add    esp,0x10
   10efd:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:239
          }
          continue;
   10f00:	e9 72 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:243
        }

        case 'v':
          pt = _fmt("%e-%b-%Y", t, pt, ptlim);
   10f05:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f08:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10f0e:	68 6b 50 04 00       	push   0x4506b
   10f13:	e8 ef f7 ff ff       	call   10707 <_fmt>
   10f18:	83 c4 10             	add    esp,0x10
   10f1b:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:244
          continue;
   10f1e:	e9 54 02 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247

        case 'W':
          pt = _conv((t->tm_yday + 7 - (t->tm_wday ? (t->tm_wday - 1) : 6)) / 7, "%02d", pt, ptlim);
   10f23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f26:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   10f29:	8d 50 07             	lea    edx,[eax+0x7]
   10f2c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f2f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f32:	85 c0                	test   eax,eax
   10f34:	74 0b                	je     10f41 <_fmt+0x83a>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 1)
   10f36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f39:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f3c:	83 e8 01             	sub    eax,0x1
   10f3f:	eb 05                	jmp    10f46 <_fmt+0x83f>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 2)
   10f41:	b8 06 00 00 00       	mov    eax,0x6
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:247 (discriminator 4)
   10f46:	89 d1                	mov    ecx,edx
   10f48:	29 c1                	sub    ecx,eax
   10f4a:	ba 93 24 49 92       	mov    edx,0x92492493
   10f4f:	89 c8                	mov    eax,ecx
   10f51:	f7 ea                	imul   edx
   10f53:	8d 04 0a             	lea    eax,[edx+ecx*1]
   10f56:	c1 f8 02             	sar    eax,0x2
   10f59:	89 c2                	mov    edx,eax
   10f5b:	89 c8                	mov    eax,ecx
   10f5d:	c1 f8 1f             	sar    eax,0x1f
   10f60:	29 c2                	sub    edx,eax
   10f62:	89 d0                	mov    eax,edx
   10f64:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f67:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f6a:	68 05 50 04 00       	push   0x45005
   10f6f:	50                   	push   eax
   10f70:	e8 1f 02 00 00       	call   11194 <_conv>
   10f75:	83 c4 10             	add    esp,0x10
   10f78:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:248 (discriminator 4)
          continue;
   10f7b:	e9 f7 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:251

        case 'w':
          pt = _conv(t->tm_wday, "%d", pt, ptlim);
   10f80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10f83:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   10f86:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10f89:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10f8c:	68 63 50 04 00       	push   0x45063
   10f91:	50                   	push   eax
   10f92:	e8 fd 01 00 00       	call   11194 <_conv>
   10f97:	83 c4 10             	add    esp,0x10
   10f9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:252
          continue;
   10f9d:	e9 d5 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:255

        case 'X':
          pt = _fmt("%H:%M:%S", t, pt, ptlim);
   10fa2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fa5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fa8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fab:	68 58 50 04 00       	push   0x45058
   10fb0:	e8 52 f7 ff ff       	call   10707 <_fmt>
   10fb5:	83 c4 10             	add    esp,0x10
   10fb8:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:256
          continue;
   10fbb:	e9 b7 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:259

        case 'x':
          pt = _fmt("%m/%d/%y", t, pt, ptlim);
   10fc0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   10fc3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   10fc6:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   10fc9:	68 1f 50 04 00       	push   0x4501f
   10fce:	e8 34 f7 ff ff       	call   10707 <_fmt>
   10fd3:	83 c4 10             	add    esp,0x10
   10fd6:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:260
          continue;
   10fd9:	e9 99 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:263

        case 'y':
          pt = _conv((t->tm_year + TM_YEAR_BASE) % 100, "%02d", pt, ptlim);
   10fde:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   10fe1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   10fe4:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   10fea:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   10fef:	89 c8                	mov    eax,ecx
   10ff1:	f7 ea                	imul   edx
   10ff3:	c1 fa 05             	sar    edx,0x5
   10ff6:	89 c8                	mov    eax,ecx
   10ff8:	c1 f8 1f             	sar    eax,0x1f
   10ffb:	29 c2                	sub    edx,eax
   10ffd:	89 d0                	mov    eax,edx
   10fff:	6b c0 64             	imul   eax,eax,0x64
   11002:	29 c1                	sub    ecx,eax
   11004:	89 c8                	mov    eax,ecx
   11006:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11009:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1100c:	68 05 50 04 00       	push   0x45005
   11011:	50                   	push   eax
   11012:	e8 7d 01 00 00       	call   11194 <_conv>
   11017:	83 c4 10             	add    esp,0x10
   1101a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:264
          continue;
   1101d:	e9 55 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:267

        case 'Y':
          pt = _conv(t->tm_year + TM_YEAR_BASE, "%04d", pt, ptlim);
   11022:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11025:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   11028:	05 6c 07 00 00       	add    eax,0x76c
   1102d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11030:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11033:	68 66 50 04 00       	push   0x45066
   11038:	50                   	push   eax
   11039:	e8 56 01 00 00       	call   11194 <_conv>
   1103e:	83 c4 10             	add    esp,0x10
   11041:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:268
          continue;
   11044:	e9 2e 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:271

        case 'Z':
          pt = _add("?", pt, ptlim);
   11049:	83 ec 04             	sub    esp,0x4
   1104c:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1104f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11052:	68 03 50 04 00       	push   0x45003
   11057:	e8 6a 01 00 00       	call   111c6 <_add>
   1105c:	83 c4 10             	add    esp,0x10
   1105f:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:272
          continue;
   11062:	e9 10 01 00 00       	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:276

        case 'z': {
          long absoff;
          if (kTimeZone >= 0) {
   11067:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
   1106c:	85 c0                	test   eax,eax
   1106e:	78 23                	js     11093 <_fmt+0x98c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:277
            absoff = kTimeZone;
   11070:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
   11075:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:278
            pt = _add("+", pt, ptlim);
   11078:	83 ec 04             	sub    esp,0x4
   1107b:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1107e:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11081:	68 74 50 04 00       	push   0x45074
   11086:	e8 3b 01 00 00       	call   111c6 <_add>
   1108b:	83 c4 10             	add    esp,0x10
   1108e:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
   11091:	eb 21                	jmp    110b4 <_fmt+0x9ad>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:280
          } else {
            absoff = kTimeZone;
   11093:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
   11098:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:281
            pt = _add("-", pt, ptlim);
   1109b:	83 ec 04             	sub    esp,0x4
   1109e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110a1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110a4:	68 76 50 04 00       	push   0x45076
   110a9:	e8 18 01 00 00       	call   111c6 <_add>
   110ae:	83 c4 10             	add    esp,0x10
   110b1:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:283
          }
          pt = _conv(absoff / 3600, "%02d", pt, ptlim);
   110b4:	8b 4d e4             	mov    ecx,DWORD PTR [ebp-0x1c]
   110b7:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110bc:	89 c8                	mov    eax,ecx
   110be:	f7 ea                	imul   edx
   110c0:	8d 04 0a             	lea    eax,[edx+ecx*1]
   110c3:	c1 f8 0b             	sar    eax,0xb
   110c6:	89 c2                	mov    edx,eax
   110c8:	89 c8                	mov    eax,ecx
   110ca:	c1 f8 1f             	sar    eax,0x1f
   110cd:	29 c2                	sub    edx,eax
   110cf:	89 d0                	mov    eax,edx
   110d1:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   110d4:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   110d7:	68 05 50 04 00       	push   0x45005
   110dc:	50                   	push   eax
   110dd:	e8 b2 00 00 00       	call   11194 <_conv>
   110e2:	83 c4 10             	add    esp,0x10
   110e5:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:284
          pt = _conv((absoff % 3600) / 60, "%02d", pt, ptlim);
   110e8:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   110eb:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   110f0:	89 d8                	mov    eax,ebx
   110f2:	f7 ea                	imul   edx
   110f4:	8d 04 1a             	lea    eax,[edx+ebx*1]
   110f7:	c1 f8 0b             	sar    eax,0xb
   110fa:	89 c2                	mov    edx,eax
   110fc:	89 d8                	mov    eax,ebx
   110fe:	c1 f8 1f             	sar    eax,0x1f
   11101:	89 d1                	mov    ecx,edx
   11103:	29 c1                	sub    ecx,eax
   11105:	69 c1 10 0e 00 00    	imul   eax,ecx,0xe10
   1110b:	29 c3                	sub    ebx,eax
   1110d:	89 d9                	mov    ecx,ebx
   1110f:	ba 89 88 88 88       	mov    edx,0x88888889
   11114:	89 c8                	mov    eax,ecx
   11116:	f7 ea                	imul   edx
   11118:	8d 04 0a             	lea    eax,[edx+ecx*1]
   1111b:	c1 f8 05             	sar    eax,0x5
   1111e:	89 c2                	mov    edx,eax
   11120:	89 c8                	mov    eax,ecx
   11122:	c1 f8 1f             	sar    eax,0x1f
   11125:	29 c2                	sub    edx,eax
   11127:	89 d0                	mov    eax,edx
   11129:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1112c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1112f:	68 05 50 04 00       	push   0x45005
   11134:	50                   	push   eax
   11135:	e8 5a 00 00 00       	call   11194 <_conv>
   1113a:	83 c4 10             	add    esp,0x10
   1113d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:286

          continue;
   11140:	eb 35                	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:290
        }

        case '+':
          pt = _fmt("%a, %d %b %Y %H:%M:%S %z", t, pt, ptlim);
   11142:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   11145:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   11148:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1114b:	68 78 50 04 00       	push   0x45078
   11150:	e8 b2 f5 ff ff       	call   10707 <_fmt>
   11155:	83 c4 10             	add    esp,0x10
   11158:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:291
          continue;
   1115b:	eb 1a                	jmp    11177 <_fmt+0xa70>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:295

        case '%':
        default:
          break;
   1115d:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
      }
    }

    if (pt == ptlim) break;
   1115e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11161:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   11164:	74 25                	je     1118b <_fmt+0xa84>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:300
    *pt++ = *format;
   11166:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11169:	8d 50 01             	lea    edx,[eax+0x1]
   1116c:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   1116f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11172:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11175:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68
  *p = '\0';
  return p - s;
}

static HIGH_CODE_SECTION char *_fmt(const char *format, const struct tm *t, char *pt, const char *ptlim) {
  for ( ; *format; ++format) {
   11177:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:68 (discriminator 1)
   1117b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1117e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11181:	84 c0                	test   al,al
   11183:	0f 85 8a f5 ff ff    	jne    10713 <_fmt+0xc>
   11189:	eb 01                	jmp    1118c <_fmt+0xa85>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:299
        default:
          break;
      }
    }

    if (pt == ptlim) break;
   1118b:	90                   	nop
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:303
    *pt++ = *format;
  }

  return pt;
   1118c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:304
}
   1118f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11192:	c9                   	leave  
   11193:	c3                   	ret    

00011194 <_conv>:
_conv():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:306

static char *_conv(const int n, char *format, char *pt, const char *ptlim) {
   11194:	55                   	push   ebp
   11195:	89 e5                	mov    ebp,esp
   11197:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:309
  char  buf[32];

  sprintf(buf, format, n);
   1119a:	83 ec 04             	sub    esp,0x4
   1119d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   111a0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   111a3:	8d 45 d8             	lea    eax,[ebp-0x28]
   111a6:	50                   	push   eax
   111a7:	e8 af 63 01 00       	call   2755b <sprintf>
   111ac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:310
  return _add(buf, pt, ptlim);
   111af:	83 ec 04             	sub    esp,0x4
   111b2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   111b5:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   111b8:	8d 45 d8             	lea    eax,[ebp-0x28]
   111bb:	50                   	push   eax
   111bc:	e8 05 00 00 00       	call   111c6 <_add>
   111c1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:311
}
   111c4:	c9                   	leave  
   111c5:	c3                   	ret    

000111c6 <_add>:
_add():
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:313

static char *_add(const char *str, char *pt, const char *ptlim) {
   111c6:	55                   	push   ebp
   111c7:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314
  while (pt < ptlim && (*pt = *str++) != '\0') ++pt;
   111c9:	eb 04                	jmp    111cf <_add+0x9>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 3)
   111cb:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 1)
   111cf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111d2:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   111d5:	73 1b                	jae    111f2 <_add+0x2c>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:314 (discriminator 2)
   111d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   111da:	8d 50 01             	lea    edx,[eax+0x1]
   111dd:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   111e0:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   111e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111e6:	88 10                	mov    BYTE PTR [eax],dl
   111e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   111eb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   111ee:	84 c0                	test   al,al
   111f0:	75 d9                	jne    111cb <_add+0x5>
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:315
  return pt;
   111f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os//chrisOS/src/char/console/strftime.c:316
}
   111f5:	5d                   	pop    ebp
   111f6:	c3                   	ret    
   111f7:	90                   	nop

000111f8 <keyboardGetKeyFromBuffer>:
keyboardGetKeyFromBuffer():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:17

//Get a key from the keyboard buffer
//Curr moves when a key is put into the buffer
//Base moves when a key is taken from the buffer
uint8_t keyboardGetKeyFromBuffer()
{
   111f8:	55                   	push   ebp
   111f9:	89 e5                	mov    ebp,esp
   111fb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:18
    char lTemp=0;
   111fe:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:20
    //printd(DEBUG_KEYBOARD,"\nkKeyboardBuffer=0x%08X, kKeyboardBufferBase=0x%08X, &kKeyboardBufferBase=0x%08X\n",kKeyboardBuffer, kKeyboardBufferBase,&kKeyboardBufferBase);
    if (kKeyboardBufferPtr<(char*)(KEYBOARD_BUFFER_ADDRESS + KEYBOARD_BUFFER_SIZE))
   11202:	a1 60 49 12 00       	mov    eax,ds:0x124960
   11207:	3d 2f 25 16 00       	cmp    eax,0x16252f
   1120c:	77 14                	ja     11222 <keyboardGetKeyFromBuffer+0x2a>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:22
    {
        lTemp=*kKeyboardBufferPtr--;
   1120e:	a1 60 49 12 00       	mov    eax,ds:0x124960
   11213:	8d 50 ff             	lea    edx,[eax-0x1]
   11216:	89 15 60 49 12 00    	mov    DWORD PTR ds:0x124960,edx
   1121c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1121f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:24
    }
    return lTemp;
   11222:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:25
}
   11226:	c9                   	leave  
   11227:	c3                   	ret    

00011228 <waitForKeyboardKey>:
waitForKeyboardKey():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:28

volatile char waitForKeyboardKey()
{
   11228:	55                   	push   ebp
   11229:	89 e5                	mov    ebp,esp
   1122b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:29
    printd(DEBUG_KEYBOARD,"gKbd-W, %04X\t", KEYBOARD_BUFFER_ADDRESS);
   1122e:	83 ec 04             	sub    esp,0x4
   11231:	68 b0 24 16 00       	push   0x1624b0
   11236:	68 80 53 04 00       	push   0x45380
   1123b:	6a 10                	push   0x10
   1123d:	e8 e5 62 01 00       	call   27527 <printd>
   11242:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:30
    char lTemp=0;
   11245:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:31
    printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", KEYBOARD_BUFFER_ADDRESS);
   11249:	83 ec 04             	sub    esp,0x4
   1124c:	68 b0 24 16 00       	push   0x1624b0
   11251:	68 8e 53 04 00       	push   0x4538e
   11256:	6a 10                	push   0x10
   11258:	e8 ca 62 01 00       	call   27527 <printd>
   1125d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:33
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKeyboardBufferPtr<(char*)KEYBOARD_BUFFER_ADDRESS)
   11260:	eb 26                	jmp    11288 <waitForKeyboardKey+0x60>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:35
    {
        printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", KEYBOARD_BUFFER_ADDRESS);
   11262:	83 ec 04             	sub    esp,0x4
   11265:	68 b0 24 16 00       	push   0x1624b0
   1126a:	68 8e 53 04 00       	push   0x4538e
   1126f:	6a 10                	push   0x10
   11271:	e8 b1 62 01 00       	call   27527 <printd>
   11276:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:36
        __asm__("sti\nhlt\n");
   11279:	fb                   	sti    
   1127a:	f4                   	hlt    
/home/yogi/src/os//chrisOS/src/char/keyboard.c:37
        waitTicks(1);
   1127b:	83 ec 0c             	sub    esp,0xc
   1127e:	6a 01                	push   0x1
   11280:	e8 a6 74 01 00       	call   2872b <waitTicks>
   11285:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:33
{
    printd(DEBUG_KEYBOARD,"gKbd-W, %04X\t", KEYBOARD_BUFFER_ADDRESS);
    char lTemp=0;
    printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", KEYBOARD_BUFFER_ADDRESS);
    //CLR 02/19/2017 - Had to change the conditon because of modifications I made to how buffer & bufferbase are used.
    while (kKeyboardBufferPtr<(char*)KEYBOARD_BUFFER_ADDRESS)
   11288:	a1 60 49 12 00       	mov    eax,ds:0x124960
   1128d:	3d af 24 16 00       	cmp    eax,0x1624af
   11292:	76 ce                	jbe    11262 <waitForKeyboardKey+0x3a>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:39
    {
        printd(DEBUG_KEYBOARD,"kKeyboardBuffer=%04X\n", KEYBOARD_BUFFER_ADDRESS);
        __asm__("sti\nhlt\n");
        waitTicks(1);
    }
    lTemp=keyboardGetKeyFromBuffer();
   11294:	e8 5f ff ff ff       	call   111f8 <keyboardGetKeyFromBuffer>
   11299:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:40
    printd(DEBUG_KEYBOARD,"got a key %u!\n", lTemp);
   1129c:	0f be 45 f7          	movsx  eax,BYTE PTR [ebp-0x9]
   112a0:	83 ec 04             	sub    esp,0x4
   112a3:	50                   	push   eax
   112a4:	68 a4 53 04 00       	push   0x453a4
   112a9:	6a 10                	push   0x10
   112ab:	e8 77 62 01 00       	call   27527 <printd>
   112b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:41
    return lTemp;
   112b3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:42
}
   112b7:	c9                   	leave  
   112b8:	c3                   	ret    

000112b9 <gets>:
gets():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:45

void gets(char* buffer, int len)
{
   112b9:	55                   	push   ebp
   112ba:	89 e5                	mov    ebp,esp
   112bc:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:46
    volatile char inchar=0;
   112bf:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:47
    int cnt=0;
   112c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:48
    memset(buffer,0,len);
   112ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   112cd:	83 ec 04             	sub    esp,0x4
   112d0:	50                   	push   eax
   112d1:	6a 00                	push   0x0
   112d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   112d6:	e8 e6 40 01 00       	call   253c1 <memset>
   112db:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:51
    while (1==1)
    {
        inchar=waitForKeyboardKey();
   112de:	e8 45 ff ff ff       	call   11228 <waitForKeyboardKey>
   112e3:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:52
        if (inchar=='\b' && cnt>0)
   112e6:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   112ea:	3c 08                	cmp    al,0x8
   112ec:	75 27                	jne    11315 <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:52 (discriminator 1)
   112ee:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   112f2:	7e 21                	jle    11315 <gets+0x5c>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:54
        {
            buffer[cnt]=0;
   112f4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   112f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   112fa:	01 d0                	add    eax,edx
   112fc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/char/keyboard.c:55
            cnt--;
   112ff:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os//chrisOS/src/char/keyboard.c:56
            puts("\b");
   11303:	83 ec 0c             	sub    esp,0xc
   11306:	68 b3 53 04 00       	push   0x453b3
   1130b:	e8 76 6f 00 00       	call   18286 <puts>
   11310:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:53
    memset(buffer,0,len);
    while (1==1)
    {
        inchar=waitForKeyboardKey();
        if (inchar=='\b' && cnt>0)
        {
   11313:	eb 63                	jmp    11378 <gets+0xbf>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:58
            buffer[cnt]=0;
            cnt--;
            puts("\b");
        }
        else if (inchar>0)
   11315:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11319:	84 c0                	test   al,al
   1131b:	7e c1                	jle    112de <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:60
        {
            if (inchar==0x0a)
   1131d:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11321:	3c 0a                	cmp    al,0xa
   11323:	75 1a                	jne    1133f <gets+0x86>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:62
            {
                printk("%c",inchar);
   11325:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11329:	0f be c0             	movsx  eax,al
   1132c:	83 ec 08             	sub    esp,0x8
   1132f:	50                   	push   eax
   11330:	68 b5 53 04 00       	push   0x453b5
   11335:	e8 cd 61 01 00       	call   27507 <printk>
   1133a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:63
                return;
   1133d:	eb 3e                	jmp    1137d <gets+0xc4>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:65
            }
            if (cnt<len-2)
   1133f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11342:	83 e8 02             	sub    eax,0x2
   11345:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   11348:	7e 94                	jle    112de <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:67
            {
                printk("%c",inchar);
   1134a:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1134e:	0f be c0             	movsx  eax,al
   11351:	83 ec 08             	sub    esp,0x8
   11354:	50                   	push   eax
   11355:	68 b5 53 04 00       	push   0x453b5
   1135a:	e8 a8 61 01 00       	call   27507 <printk>
   1135f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/char/keyboard.c:68
                buffer[cnt++]=inchar;
   11362:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11365:	8d 50 01             	lea    edx,[eax+0x1]
   11368:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1136b:	89 c2                	mov    edx,eax
   1136d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11370:	01 c2                	add    edx,eax
   11372:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   11376:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os//chrisOS/src/char/keyboard.c:71
            }
        }
    }
   11378:	e9 61 ff ff ff       	jmp    112de <gets+0x25>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:72
}
   1137d:	c9                   	leave  
   1137e:	c3                   	ret    

0001137f <getc>:
getc():
/home/yogi/src/os//chrisOS/src/char/keyboard.c:75

char getc()
{
   1137f:	55                   	push   ebp
   11380:	89 e5                	mov    ebp,esp
   11382:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/char/keyboard.c:76
   int inchar=waitForKeyboardKey();
   11385:	e8 9e fe ff ff       	call   11228 <waitForKeyboardKey>
   1138a:	0f be c0             	movsx  eax,al
   1138d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:78
   
   while (inchar==0)
   11390:	eb 0b                	jmp    1139d <getc+0x1e>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:80
   {
       inchar=waitForKeyboardKey();
   11392:	e8 91 fe ff ff       	call   11228 <waitForKeyboardKey>
   11397:	0f be c0             	movsx  eax,al
   1139a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/char/keyboard.c:78

char getc()
{
   int inchar=waitForKeyboardKey();
   
   while (inchar==0)
   1139d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   113a1:	74 ef                	je     11392 <getc+0x13>
/home/yogi/src/os//chrisOS/src/char/keyboard.c:82
   {
       inchar=waitForKeyboardKey();
   }
   return inchar;
   113a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/char/keyboard.c:83
}
   113a6:	c9                   	leave  
   113a7:	c3                   	ret    

000113a8 <kPagingGet4kPDEntryValueCR3>:
kPagingGet4kPDEntryValueCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:21
extern uint32_t kDebugLevel;



uint32_t kPagingGet4kPDEntryValueCR3(uintptr_t PageDirAddress, uint32_t address)
{
   113a8:	55                   	push   ebp
   113a9:	89 e5                	mov    ebp,esp
   113ab:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:22
    address&=0xFFFFF000;
   113ae:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:23
    uintptr_t*pageDirEntry=((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
   113b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   113b8:	c1 e8 16             	shr    eax,0x16
   113bb:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   113c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113c5:	01 d0                	add    eax,edx
   113c7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:24
    uintptr_t* lTemp=(uint32_t*)((PageDirAddress + (((address & 0xFFC00000) >> 22) << 2)));
   113ca:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   113cd:	c1 e8 16             	shr    eax,0x16
   113d0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   113d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   113da:	01 d0                	add    eax,edx
   113dc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:26
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   113df:	a1 78 48 12 00       	mov    eax,ds:0x124878
   113e4:	83 e0 40             	and    eax,0x40
   113e7:	85 c0                	test   eax,eax
   113e9:	74 19                	je     11404 <kPagingGet4kPDEntryValueCR3+0x5c>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:27
            printk("kPagingGet4kPDEntryValueCR3: dirAddressPtr=0x%08x (PDIR=0x%08X)\n", *lTemp,PageDirAddress);
   113eb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   113ee:	8b 00                	mov    eax,DWORD PTR [eax]
   113f0:	83 ec 04             	sub    esp,0x4
   113f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   113f6:	50                   	push   eax
   113f7:	68 c0 54 04 00       	push   0x454c0
   113fc:	e8 06 61 01 00       	call   27507 <printk>
   11401:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:29
#endif
    return (uint32_t)*lTemp;
   11404:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11407:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:30
}
   11409:	c9                   	leave  
   1140a:	c3                   	ret    

0001140b <kPagingGet4kPDEntryValue>:
kPagingGet4kPDEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:33

uint32_t kPagingGet4kPDEntryValue(uint32_t address)
{
   1140b:	55                   	push   ebp
   1140c:	89 e5                	mov    ebp,esp
   1140e:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:34
    return kPagingGet4kPDEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   11411:	83 ec 08             	sub    esp,0x8
   11414:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11417:	68 00 a0 4b 00       	push   0x4ba000
   1141c:	e8 87 ff ff ff       	call   113a8 <kPagingGet4kPDEntryValueCR3>
   11421:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:35
}
   11424:	c9                   	leave  
   11425:	c3                   	ret    

00011426 <kPagingGet4kPDEntryAddressCR3>:
kPagingGet4kPDEntryAddressCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:38

uint32_t kPagingGet4kPDEntryAddressCR3(uintptr_t PageDirAddress, uint32_t address)
{
   11426:	55                   	push   ebp
   11427:	89 e5                	mov    ebp,esp
   11429:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:39
    address&=0xFFFFF000;
   1142c:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:40
    uintptr_t lTemp=((PageDirAddress  | (((address & 0xFFC00000) >> 22) << 2)));
   11433:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11436:	c1 e8 16             	shr    eax,0x16
   11439:	c1 e0 02             	shl    eax,0x2
   1143c:	0b 45 08             	or     eax,DWORD PTR [ebp+0x8]
   1143f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:42
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11442:	a1 78 48 12 00       	mov    eax,ds:0x124878
   11447:	83 e0 40             	and    eax,0x40
   1144a:	85 c0                	test   eax,eax
   1144c:	74 16                	je     11464 <kPagingGet4kPDEntryAddressCR3+0x3e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:43
            printk("kPagingGet4kPDEntryAddressCR3: dirEntryAddress=0x%08x  (PDIR=0x%08X)\n", lTemp, PageDirAddress);
   1144e:	83 ec 04             	sub    esp,0x4
   11451:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11454:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11457:	68 04 55 04 00       	push   0x45504
   1145c:	e8 a6 60 01 00       	call   27507 <printk>
   11461:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:45
#endif
    return (uint32_t)lTemp & 0xFFFFFFFF;
   11464:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:46
}
   11467:	c9                   	leave  
   11468:	c3                   	ret    

00011469 <kPagingGet4kPDEntryAddress>:
kPagingGet4kPDEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:49

uint32_t kPagingGet4kPDEntryAddress(uint32_t address)
{
   11469:	55                   	push   ebp
   1146a:	89 e5                	mov    ebp,esp
   1146c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:50
    return kPagingGet4kPDEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   1146f:	83 ec 08             	sub    esp,0x8
   11472:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11475:	68 00 a0 4b 00       	push   0x4ba000
   1147a:	e8 a7 ff ff ff       	call   11426 <kPagingGet4kPDEntryAddressCR3>
   1147f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:51
}
   11482:	c9                   	leave  
   11483:	c3                   	ret    

00011484 <kPagingGet4kPTEntryAddressCR3>:
kPagingGet4kPTEntryAddressCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:54

uint32_t kPagingGet4kPTEntryAddressCR3(uintptr_t pageDirAddress, uint32_t address)
{
   11484:	55                   	push   ebp
   11485:	89 e5                	mov    ebp,esp
   11487:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:55
    address&=0xFFFFF000;
   1148a:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:56
    uintptr_t pDirPtr=kPagingGet4kPDEntryValueCR3(pageDirAddress,address) & 0xFFFFF000;
   11491:	83 ec 08             	sub    esp,0x8
   11494:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11497:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1149a:	e8 09 ff ff ff       	call   113a8 <kPagingGet4kPDEntryValueCR3>
   1149f:	83 c4 10             	add    esp,0x10
   114a2:	25 00 f0 ff ff       	and    eax,0xfffff000
   114a7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:57
    return ((address & 0x3FF000) >> 12) << 2 | pDirPtr;
   114aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   114ad:	25 00 f0 3f 00       	and    eax,0x3ff000
   114b2:	c1 e8 0c             	shr    eax,0xc
   114b5:	c1 e0 02             	shl    eax,0x2
   114b8:	0b 45 f4             	or     eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:58
}
   114bb:	c9                   	leave  
   114bc:	c3                   	ret    

000114bd <kPagingGet4kPTEntryAddress>:
kPagingGet4kPTEntryAddress():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:61

uint32_t kPagingGet4kPTEntryAddress(uint32_t address)
{
   114bd:	55                   	push   ebp
   114be:	89 e5                	mov    ebp,esp
   114c0:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:62
    return kPagingGet4kPTEntryAddressCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   114c3:	83 ec 08             	sub    esp,0x8
   114c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114c9:	68 00 a0 4b 00       	push   0x4ba000
   114ce:	e8 b1 ff ff ff       	call   11484 <kPagingGet4kPTEntryAddressCR3>
   114d3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:63
}
   114d6:	c9                   	leave  
   114d7:	c3                   	ret    

000114d8 <kPagingGet4kPTEntryValueCR3>:
kPagingGet4kPTEntryValueCR3():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:66

uint32_t kPagingGet4kPTEntryValueCR3(uintptr_t pageDirAddress, uint32_t address)
{
   114d8:	55                   	push   ebp
   114d9:	89 e5                	mov    ebp,esp
   114db:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os//chrisOS/src/init/kpaging.c:67
    address&=0xFFFFF000;
   114de:	81 65 0c 00 f0 ff ff 	and    DWORD PTR [ebp+0xc],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:68
    uint32_t* pTablePtr=(uint32_t*)kPagingGet4kPTEntryAddressCR3(pageDirAddress,address);
   114e5:	83 ec 08             	sub    esp,0x8
   114e8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   114eb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   114ee:	e8 91 ff ff ff       	call   11484 <kPagingGet4kPTEntryAddressCR3>
   114f3:	83 c4 10             	add    esp,0x10
   114f6:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:70
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   114f9:	a1 78 48 12 00       	mov    eax,ds:0x124878
   114fe:	83 e0 40             	and    eax,0x40
   11501:	85 c0                	test   eax,eax
   11503:	74 19                	je     1151e <kPagingGet4kPTEntryValueCR3+0x46>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:71
             printk("kPagingGet4kPTEntryValueCR3: PTAddress=0x%08X, PTValue=0x%08X (PDIR=0x%08X)\n", pTablePtr,*pTablePtr,pageDirAddress);
   11505:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11508:	8b 00                	mov    eax,DWORD PTR [eax]
   1150a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1150d:	50                   	push   eax
   1150e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11511:	68 4c 55 04 00       	push   0x4554c
   11516:	e8 ec 5f 01 00       	call   27507 <printk>
   1151b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:73
#endif
    return *pTablePtr;
   1151e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11521:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os//chrisOS/src/init/kpaging.c:74
}
   11523:	c9                   	leave  
   11524:	c3                   	ret    

00011525 <kPagingGet4kPTEntryValue>:
kPagingGet4kPTEntryValue():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:77

uint32_t kPagingGet4kPTEntryValue(uint32_t address)
{
   11525:	55                   	push   ebp
   11526:	89 e5                	mov    ebp,esp
   11528:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:78
    return kPagingGet4kPTEntryValueCR3(KERNEL_PAGE_DIR_ADDRESS,address);
   1152b:	83 ec 08             	sub    esp,0x8
   1152e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11531:	68 00 a0 4b 00       	push   0x4ba000
   11536:	e8 9d ff ff ff       	call   114d8 <kPagingGet4kPTEntryValueCR3>
   1153b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:79
}
   1153e:	c9                   	leave  
   1153f:	c3                   	ret    

00011540 <kPagingSetPageReadOnlyFlag>:
kPagingSetPageReadOnlyFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:85




void kPagingSetPageReadOnlyFlag(uintptr_t* ptEntry, bool readOnly)
{
   11540:	55                   	push   ebp
   11541:	89 e5                	mov    ebp,esp
   11543:	83 ec 18             	sub    esp,0x18
   11546:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11549:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:87
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1154c:	a1 78 48 12 00       	mov    eax,ds:0x124878
   11551:	83 e0 40             	and    eax,0x40
   11554:	85 c0                	test   eax,eax
   11556:	74 19                	je     11571 <kPagingSetPageReadOnlyFlag+0x31>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:88
            printk("pagingMakePageReadOnly: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   11558:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1155b:	8b 00                	mov    eax,DWORD PTR [eax]
   1155d:	83 ec 04             	sub    esp,0x4
   11560:	50                   	push   eax
   11561:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11564:	68 9c 55 04 00       	push   0x4559c
   11569:	e8 99 5f 01 00       	call   27507 <printk>
   1156e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:90
#endif
         if (readOnly)
   11571:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   11575:	74 11                	je     11588 <kPagingSetPageReadOnlyFlag+0x48>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:91
            *ptEntry&=0xFFFFFFFD;
   11577:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1157a:	8b 00                	mov    eax,DWORD PTR [eax]
   1157c:	83 e0 fd             	and    eax,0xfffffffd
   1157f:	89 c2                	mov    edx,eax
   11581:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11584:	89 10                	mov    DWORD PTR [eax],edx
   11586:	eb 0f                	jmp    11597 <kPagingSetPageReadOnlyFlag+0x57>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:93
         else
            *ptEntry|=2; 
   11588:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1158b:	8b 00                	mov    eax,DWORD PTR [eax]
   1158d:	83 c8 02             	or     eax,0x2
   11590:	89 c2                	mov    edx,eax
   11592:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11595:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:94
    RELOAD_CR3
   11597:	0f 20 d8             	mov    eax,cr3
   1159a:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:96
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1159d:	a1 78 48 12 00       	mov    eax,ds:0x124878
   115a2:	83 e0 40             	and    eax,0x40
   115a5:	85 c0                	test   eax,eax
   115a7:	74 16                	je     115bf <kPagingSetPageReadOnlyFlag+0x7f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:97
            printk("0x%08X\n", *ptEntry);
   115a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115ac:	8b 00                	mov    eax,DWORD PTR [eax]
   115ae:	83 ec 08             	sub    esp,0x8
   115b1:	50                   	push   eax
   115b2:	68 d3 55 04 00       	push   0x455d3
   115b7:	e8 4b 5f 01 00       	call   27507 <printk>
   115bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:99
#endif
}
   115bf:	90                   	nop
   115c0:	c9                   	leave  
   115c1:	c3                   	ret    

000115c2 <kPagingUpdatePTEPresentFlag>:
kPagingUpdatePTEPresentFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:102

void kPagingUpdatePTEPresentFlag(uintptr_t* ptEntry, bool present)
{
   115c2:	55                   	push   ebp
   115c3:	89 e5                	mov    ebp,esp
   115c5:	83 ec 18             	sub    esp,0x18
   115c8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   115cb:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:103
         printd(DEBUG_PAGING,"pagingUpdatePTEPresentFlag: 0x%08X - before/after: 0x%08X/", ptEntry, *ptEntry);
   115ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115d1:	8b 00                	mov    eax,DWORD PTR [eax]
   115d3:	50                   	push   eax
   115d4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   115d7:	68 dc 55 04 00       	push   0x455dc
   115dc:	6a 40                	push   0x40
   115de:	e8 44 5f 01 00       	call   27527 <printd>
   115e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:104
         if (present)
   115e6:	80 7d f4 00          	cmp    BYTE PTR [ebp-0xc],0x0
   115ea:	74 11                	je     115fd <kPagingUpdatePTEPresentFlag+0x3b>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:105
             *ptEntry=*ptEntry | 1;
   115ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115ef:	8b 00                	mov    eax,DWORD PTR [eax]
   115f1:	83 c8 01             	or     eax,0x1
   115f4:	89 c2                	mov    edx,eax
   115f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   115f9:	89 10                	mov    DWORD PTR [eax],edx
   115fb:	eb 0f                	jmp    1160c <kPagingUpdatePTEPresentFlag+0x4a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:107
         else
             *ptEntry&=0xFFFFFFFE;
   115fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11600:	8b 00                	mov    eax,DWORD PTR [eax]
   11602:	83 e0 fe             	and    eax,0xfffffffe
   11605:	89 c2                	mov    edx,eax
   11607:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1160a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:108
         __asm__("mov eax,cr3\nmov cr3,eax\n":::"eax");
   1160c:	0f 20 d8             	mov    eax,cr3
   1160f:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:109
         printd(DEBUG_PAGING,"0x%08X\n", *ptEntry);
   11612:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11615:	8b 00                	mov    eax,DWORD PTR [eax]
   11617:	83 ec 04             	sub    esp,0x4
   1161a:	50                   	push   eax
   1161b:	68 d3 55 04 00       	push   0x455d3
   11620:	6a 40                	push   0x40
   11622:	e8 00 5f 01 00       	call   27527 <printd>
   11627:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:110
}
   1162a:	90                   	nop
   1162b:	c9                   	leave  
   1162c:	c3                   	ret    

0001162d <kSetVirtualRangeRO>:
kSetVirtualRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:113

void kSetVirtualRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   1162d:	55                   	push   ebp
   1162e:	89 e5                	mov    ebp,esp
   11630:	83 ec 28             	sub    esp,0x28
   11633:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11636:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:116
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11639:	a1 78 48 12 00       	mov    eax,ds:0x124878
   1163e:	83 e0 40             	and    eax,0x40
   11641:	85 c0                	test   eax,eax
   11643:	74 16                	je     1165b <kSetVirtualRangeRO+0x2e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:117
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
   11645:	83 ec 04             	sub    esp,0x4
   11648:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1164b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1164e:	68 18 56 04 00       	push   0x45618
   11653:	e8 af 5e 01 00       	call   27507 <printk>
   11658:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   1165b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1165e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11661:	eb 64                	jmp    116c7 <kSetVirtualRangeRO+0x9a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:121
    {
        startPTE=(uintptr_t*)kPagingGet4kPTEntryAddress(cnt);
   11663:	83 ec 0c             	sub    esp,0xc
   11666:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11669:	e8 4f fe ff ff       	call   114bd <kPagingGet4kPTEntryAddress>
   1166e:	83 c4 10             	add    esp,0x10
   11671:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:123
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11674:	a1 78 48 12 00       	mov    eax,ds:0x124878
   11679:	83 e0 40             	and    eax,0x40
   1167c:	85 c0                	test   eax,eax
   1167e:	74 26                	je     116a6 <kSetVirtualRangeRO+0x79>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124
            printk("0x%08X (0x%08X) %s --> ", cnt, startPTE, readOnly?"ro":"rw");
   11680:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11684:	74 07                	je     1168d <kSetVirtualRangeRO+0x60>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124 (discriminator 1)
   11686:	b8 45 56 04 00       	mov    eax,0x45645
   1168b:	eb 05                	jmp    11692 <kSetVirtualRangeRO+0x65>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124 (discriminator 2)
   1168d:	b8 48 56 04 00       	mov    eax,0x45648
/home/yogi/src/os//chrisOS/src/init/kpaging.c:124 (discriminator 4)
   11692:	50                   	push   eax
   11693:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   11696:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11699:	68 4b 56 04 00       	push   0x4564b
   1169e:	e8 64 5e 01 00       	call   27507 <printk>
   116a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:126 (discriminator 2)
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
   116a6:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   116aa:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   116ad:	8d 48 04             	lea    ecx,[eax+0x4]
   116b0:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   116b3:	83 ec 08             	sub    esp,0x8
   116b6:	52                   	push   edx
   116b7:	50                   	push   eax
   116b8:	e8 83 fe ff ff       	call   11540 <kPagingSetPageReadOnlyFlag>
   116bd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119 (discriminator 2)
    uintptr_t* startPTE;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
           printk("kMakeVirtualRangeRO: Make 0x%08X-0x%08X r/o\n", startAddy, endAddy);
#endif
    for (uint32_t cnt=(startAddy);cnt<=(endAddy)+1;cnt+=0x1000)
   116c0:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:119 (discriminator 1)
   116c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   116ca:	83 c0 01             	add    eax,0x1
   116cd:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   116d0:	73 91                	jae    11663 <kSetVirtualRangeRO+0x36>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:130
#endif
        kPagingSetPageReadOnlyFlag(startPTE++, readOnly);
            
    }
        //for cnt=0;cnt<=8192;cnt+=4096
}
   116d2:	90                   	nop
   116d3:	c9                   	leave  
   116d4:	c3                   	ret    

000116d5 <kpagingUpdatePresentFlagA>:
kpagingUpdatePresentFlagA():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:134

//Absolute version, page passed is already virtual
void kpagingUpdatePresentFlagA(uint32_t address, bool present)
{
   116d5:	55                   	push   ebp
   116d6:	89 e5                	mov    ebp,esp
   116d8:	83 ec 28             	sub    esp,0x28
   116db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   116de:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:136
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   116e1:	a1 78 48 12 00       	mov    eax,ds:0x124878
   116e6:	83 e0 40             	and    eax,0x40
   116e9:	85 c0                	test   eax,eax
   116eb:	74 26                	je     11713 <kpagingUpdatePresentFlagA+0x3e>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137
            printk("kpagingUpdatePresentFlagA: Make 0x%08X %s\n", address, present?"present":"not present");
   116ed:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   116f1:	74 07                	je     116fa <kpagingUpdatePresentFlagA+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137 (discriminator 1)
   116f3:	b8 63 56 04 00       	mov    eax,0x45663
   116f8:	eb 05                	jmp    116ff <kpagingUpdatePresentFlagA+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137 (discriminator 2)
   116fa:	b8 6b 56 04 00       	mov    eax,0x4566b
/home/yogi/src/os//chrisOS/src/init/kpaging.c:137 (discriminator 4)
   116ff:	83 ec 04             	sub    esp,0x4
   11702:	50                   	push   eax
   11703:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11706:	68 78 56 04 00       	push   0x45678
   1170b:	e8 f7 5d 01 00       	call   27507 <printk>
   11710:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:139
#endif
        uintptr_t* pagePTE= (uintptr_t*)kPagingGet4kPTEntryAddress(address&0xFFFFF000);
   11713:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11716:	25 00 f0 ff ff       	and    eax,0xfffff000
   1171b:	83 ec 0c             	sub    esp,0xc
   1171e:	50                   	push   eax
   1171f:	e8 99 fd ff ff       	call   114bd <kPagingGet4kPTEntryAddress>
   11724:	83 c4 10             	add    esp,0x10
   11727:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:141
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1172a:	a1 78 48 12 00       	mov    eax,ds:0x124878
   1172f:	83 e0 40             	and    eax,0x40
   11732:	85 c0                	test   eax,eax
   11734:	74 13                	je     11749 <kpagingUpdatePresentFlagA+0x74>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:142
            printk("kpagingUpdatePresentFlagA: updating entry 0x%08X\n", pagePTE);
   11736:	83 ec 08             	sub    esp,0x8
   11739:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1173c:	68 a4 56 04 00       	push   0x456a4
   11741:	e8 c1 5d 01 00       	call   27507 <printk>
   11746:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:144
#endif
        kPagingUpdatePTEPresentFlag(pagePTE, present);
   11749:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   1174d:	83 ec 08             	sub    esp,0x8
   11750:	50                   	push   eax
   11751:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11754:	e8 69 fe ff ff       	call   115c2 <kPagingUpdatePTEPresentFlag>
   11759:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:145
}
   1175c:	90                   	nop
   1175d:	c9                   	leave  
   1175e:	c3                   	ret    

0001175f <kpagingUpdatePresentFlagV>:
kpagingUpdatePresentFlagV():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:148

void kpagingUpdatePresentFlagV(uint32_t address, bool present)
{
   1175f:	55                   	push   ebp
   11760:	89 e5                	mov    ebp,esp
   11762:	83 ec 18             	sub    esp,0x18
   11765:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11768:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:149
    address+=KERNEL_PAGED_BASE_ADDRESS; 
   1176b:	81 6d 08 00 00 00 40 	sub    DWORD PTR [ebp+0x8],0x40000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:150
    kpagingUpdatePresentFlagA(address, present);
   11772:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11776:	83 ec 08             	sub    esp,0x8
   11779:	50                   	push   eax
   1177a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1177d:	e8 53 ff ff ff       	call   116d5 <kpagingUpdatePresentFlagA>
   11782:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:151
}
   11785:	90                   	nop
   11786:	c9                   	leave  
   11787:	c3                   	ret    

00011788 <kMapPage>:
kMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:154

void kMapPage(uintptr_t mapTo, uintptr_t mapFrom, uint8_t flags)
{
   11788:	55                   	push   ebp
   11789:	89 e5                	mov    ebp,esp
   1178b:	53                   	push   ebx
   1178c:	83 ec 24             	sub    esp,0x24
   1178f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11792:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:158
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   11795:	a1 e4 47 12 00       	mov    eax,ds:0x1247e4
   1179a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:159
    ptrVal=ptr[(mapTo>>22)];
   1179d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117a0:	c1 e8 16             	shr    eax,0x16
   117a3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   117ad:	01 d0                	add    eax,edx
   117af:	8b 00                	mov    eax,DWORD PTR [eax]
   117b1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:160
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   117b4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   117b8:	0f 85 cb 00 00 00    	jne    11889 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:160 (discriminator 1)
   117be:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   117c1:	bb 00 00 00 00       	mov    ebx,0x0
   117c6:	a1 88 45 12 00       	mov    eax,ds:0x124588
   117cb:	8b 15 8c 45 12 00    	mov    edx,DWORD PTR ds:0x12458c
   117d1:	39 d3                	cmp    ebx,edx
   117d3:	0f 87 b0 00 00 00    	ja     11889 <kMapPage+0x101>
   117d9:	39 d3                	cmp    ebx,edx
   117db:	72 08                	jb     117e5 <kMapPage+0x5d>
   117dd:	39 c1                	cmp    ecx,eax
   117df:	0f 83 a4 00 00 00    	jae    11889 <kMapPage+0x101>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:162
    {
        ptrT=(uint32_t*)0x20000000;
   117e5:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:163
        ptr[(mapTo>>22)]=0x20000063;
   117ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   117ef:	c1 e8 16             	shr    eax,0x16
   117f2:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   117f9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   117fc:	01 d0                	add    eax,edx
   117fe:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:164
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
   11804:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11807:	25 ff 03 00 00       	and    eax,0x3ff
   1180c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11813:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11816:	01 c2                	add    edx,eax
   11818:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   1181c:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   1181f:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:166
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11821:	a1 78 48 12 00       	mov    eax,ds:0x124878
   11826:	83 e0 40             	and    eax,0x40
   11829:	85 c0                	test   eax,eax
   1182b:	0f 84 41 01 00 00    	je     11972 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:167
            printk("kMapPage: Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)],ptrT[(mapTo&0x003FFFFF/4096)]);
   11831:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11834:	25 ff 03 00 00       	and    eax,0x3ff
   11839:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11840:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11843:	01 d0                	add    eax,edx
   11845:	8b 00                	mov    eax,DWORD PTR [eax]
   11847:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1184a:	81 e2 ff 03 00 00    	and    edx,0x3ff
   11850:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   11857:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1185a:	01 d1                	add    ecx,edx
   1185c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1185f:	c1 ea 16             	shr    edx,0x16
   11862:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11869:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1186c:	01 da                	add    edx,ebx
   1186e:	83 ec 0c             	sub    esp,0xc
   11871:	50                   	push   eax
   11872:	51                   	push   ecx
   11873:	52                   	push   edx
   11874:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11877:	68 d8 56 04 00       	push   0x456d8
   1187c:	e8 86 5c 01 00       	call   27507 <printk>
   11881:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:166
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=mapFrom | flags;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11884:	e9 e9 00 00 00       	jmp    11972 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:173
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11889:	a1 e4 47 12 00       	mov    eax,ds:0x1247e4
   1188e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:174
        if (ptr[(mapTo>>22)]==0)
   11891:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11894:	c1 e8 16             	shr    eax,0x16
   11897:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1189e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   118a1:	01 d0                	add    eax,edx
   118a3:	8b 00                	mov    eax,DWORD PTR [eax]
   118a5:	85 c0                	test   eax,eax
   118a7:	75 29                	jne    118d2 <kMapPage+0x14a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:175
            ptr[mapTo>>22]=(KERNEL_PAGE_TABLE_BASE_ADDRESS + ((mapTo&0x003FFFFF)/4096)) | 0x63;
   118a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118ac:	c1 e8 16             	shr    eax,0x16
   118af:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   118b9:	01 d0                	add    eax,edx
   118bb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   118be:	81 e2 ff ff 3f 00    	and    edx,0x3fffff
   118c4:	c1 ea 0c             	shr    edx,0xc
   118c7:	81 c2 00 c0 4c 00    	add    edx,0x4cc000
   118cd:	83 ca 63             	or     edx,0x63
   118d0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:176
        ptrVal=ptr[mapTo>>22];
   118d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118d5:	c1 e8 16             	shr    eax,0x16
   118d8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   118df:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   118e2:	01 d0                	add    eax,edx
   118e4:	8b 00                	mov    eax,DWORD PTR [eax]
   118e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:177
        ptrVal=(ptrVal&0xFFFFF000);
   118e9:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:178
        ptrT=(uint32_t*)ptrVal;
   118f0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   118f3:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:180
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   118f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   118f9:	25 ff ff 3f 00       	and    eax,0x3fffff
   118fe:	c1 e8 0c             	shr    eax,0xc
   11901:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:181
        ptrT[ptrVal]=mapFrom | flags;
   11904:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11907:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1190e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11911:	01 c2                	add    edx,eax
   11913:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11917:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   1191a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:185
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   1191c:	a1 78 48 12 00       	mov    eax,ds:0x124878
   11921:	83 e0 40             	and    eax,0x40
   11924:	85 c0                	test   eax,eax
   11926:	74 4a                	je     11972 <kMapPage+0x1ea>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:186
            printk("2) Mapped 0x%08X via dir=0x%08X, page=0x%08X, to 0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal],ptrT[ptrVal]);
   11928:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1192b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11932:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11935:	01 d0                	add    eax,edx
   11937:	8b 00                	mov    eax,DWORD PTR [eax]
   11939:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1193c:	8d 0c 95 00 00 00 00 	lea    ecx,[edx*4+0x0]
   11943:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   11946:	01 d1                	add    ecx,edx
   11948:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1194b:	c1 ea 16             	shr    edx,0x16
   1194e:	8d 1c 95 00 00 00 00 	lea    ebx,[edx*4+0x0]
   11955:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   11958:	01 da                	add    edx,ebx
   1195a:	83 ec 0c             	sub    esp,0xc
   1195d:	50                   	push   eax
   1195e:	51                   	push   ecx
   1195f:	52                   	push   edx
   11960:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11963:	68 18 57 04 00       	push   0x45718
   11968:	e8 9a 5b 01 00       	call   27507 <printk>
   1196d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:190
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   11970:	eb 00                	jmp    11972 <kMapPage+0x1ea>
   11972:	90                   	nop
   11973:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11976:	c9                   	leave  
   11977:	c3                   	ret    

00011978 <kIsPageMapped>:
kIsPageMapped():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:193

bool kIsPageMapped(uintptr_t Address)
{
   11978:	55                   	push   ebp
   11979:	89 e5                	mov    ebp,esp
   1197b:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os//chrisOS/src/init/kpaging.c:194
    if (!kPagingGet4kPTEntryValue(Address))
   1197e:	83 ec 0c             	sub    esp,0xc
   11981:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11984:	e8 9c fb ff ff       	call   11525 <kPagingGet4kPTEntryValue>
   11989:	83 c4 10             	add    esp,0x10
   1198c:	85 c0                	test   eax,eax
   1198e:	75 07                	jne    11997 <kIsPageMapped+0x1f>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:195
        return false;
   11990:	b8 00 00 00 00       	mov    eax,0x0
   11995:	eb 05                	jmp    1199c <kIsPageMapped+0x24>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:196
    return true;
   11997:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os//chrisOS/src/init/kpaging.c:197
}
   1199c:	c9                   	leave  
   1199d:	c3                   	ret    

0001199e <kUnMapPage>:
kUnMapPage():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:200

void kUnMapPage(uintptr_t mapTo)
{
   1199e:	55                   	push   ebp
   1199f:	89 e5                	mov    ebp,esp
   119a1:	53                   	push   ebx
   119a2:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os//chrisOS/src/init/kpaging.c:204
    uint32_t *ptr;
    uint32_t ptrVal;
    uint32_t *ptrT;
    ptr=(uint32_t*)kKernelPageDir;
   119a5:	a1 e4 47 12 00       	mov    eax,ds:0x1247e4
   119aa:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:205
    ptrVal=ptr[(mapTo>>22)];
   119ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119b0:	c1 e8 16             	shr    eax,0x16
   119b3:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   119ba:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   119bd:	01 d0                	add    eax,edx
   119bf:	8b 00                	mov    eax,DWORD PTR [eax]
   119c1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:206
    if (ptrVal==0 && mapTo < kE820MemoryBytes)
   119c4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   119c8:	0f 85 ad 00 00 00    	jne    11a7b <kUnMapPage+0xdd>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:206 (discriminator 1)
   119ce:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   119d1:	bb 00 00 00 00       	mov    ebx,0x0
   119d6:	a1 88 45 12 00       	mov    eax,ds:0x124588
   119db:	8b 15 8c 45 12 00    	mov    edx,DWORD PTR ds:0x12458c
   119e1:	39 d3                	cmp    ebx,edx
   119e3:	0f 87 92 00 00 00    	ja     11a7b <kUnMapPage+0xdd>
   119e9:	39 d3                	cmp    ebx,edx
   119eb:	72 08                	jb     119f5 <kUnMapPage+0x57>
   119ed:	39 c1                	cmp    ecx,eax
   119ef:	0f 83 86 00 00 00    	jae    11a7b <kUnMapPage+0xdd>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:208
    {
        ptrT=(uint32_t*)0x20000000;
   119f5:	c7 45 ec 00 00 00 20 	mov    DWORD PTR [ebp-0x14],0x20000000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:209
        ptr[(mapTo>>22)]=0x20000063;
   119fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   119ff:	c1 e8 16             	shr    eax,0x16
   11a02:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a09:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a0c:	01 d0                	add    eax,edx
   11a0e:	c7 00 63 00 00 20    	mov    DWORD PTR [eax],0x20000063
/home/yogi/src/os//chrisOS/src/init/kpaging.c:210
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
   11a14:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a17:	25 ff 03 00 00       	and    eax,0x3ff
   11a1c:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a23:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a26:	01 d0                	add    eax,edx
   11a28:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/init/kpaging.c:212
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a2e:	a1 78 48 12 00       	mov    eax,ds:0x124878
   11a33:	83 e0 40             	and    eax,0x40
   11a36:	85 c0                	test   eax,eax
   11a38:	0f 84 cd 00 00 00    	je     11b0b <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:213
            printk("kMapPage: Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[(mapTo&0x003FFFFF/4096)]);
   11a3e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a41:	25 ff 03 00 00       	and    eax,0x3ff
   11a46:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a4d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11a50:	01 c2                	add    edx,eax
   11a52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a55:	c1 e8 16             	shr    eax,0x16
   11a58:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11a5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a62:	01 c8                	add    eax,ecx
   11a64:	52                   	push   edx
   11a65:	50                   	push   eax
   11a66:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11a69:	68 54 57 04 00       	push   0x45754
   11a6e:	e8 94 5a 01 00       	call   27507 <printk>
   11a73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:212
    {
        ptrT=(uint32_t*)0x20000000;
        ptr[(mapTo>>22)]=0x20000063;
        ptrT[(mapTo&0x003FFFFF/4096)]=0;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11a76:	e9 90 00 00 00       	jmp    11b0b <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:219
#endif
    }
    else
    {
        //ptrVal right now points to the pdir entry
        ptr=(uint32_t*)kKernelPageDir;
   11a7b:	a1 e4 47 12 00       	mov    eax,ds:0x1247e4
   11a80:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:220
        ptrVal=ptr[mapTo>>22];
   11a83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11a86:	c1 e8 16             	shr    eax,0x16
   11a89:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11a90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11a93:	01 d0                	add    eax,edx
   11a95:	8b 00                	mov    eax,DWORD PTR [eax]
   11a97:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:221
        ptrVal=(ptrVal&0xFFFFF000);
   11a9a:	81 65 f0 00 f0 ff ff 	and    DWORD PTR [ebp-0x10],0xfffff000
/home/yogi/src/os//chrisOS/src/init/kpaging.c:222
        ptrT=(uint32_t*)ptrVal;
   11aa1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11aa4:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:224
        //Now ptrVal will point to offset within page table
        ptrVal=(mapTo&0x003FFFFF)/4096;
   11aa7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11aaa:	25 ff ff 3f 00       	and    eax,0x3fffff
   11aaf:	c1 e8 0c             	shr    eax,0xc
   11ab2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:225
        ptrT[ptrVal]=0;
   11ab5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11ab8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11abf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11ac2:	01 d0                	add    eax,edx
   11ac4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/init/kpaging.c:229
//                printk("ptrT=%X(%X)\n",&ptrT[ptrVal],ptrT[ptrVal]);
//                STOPHERE2
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11aca:	a1 78 48 12 00       	mov    eax,ds:0x124878
   11acf:	83 e0 40             	and    eax,0x40
   11ad2:	85 c0                	test   eax,eax
   11ad4:	74 35                	je     11b0b <kUnMapPage+0x16d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:230
            printk("2) Unmapped 0x%08X via dir=0x%08X, page=0x%08X\n", mapTo, &ptr[(mapTo>>22)], &ptrT[ptrVal]);
   11ad6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   11ad9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   11ae0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   11ae3:	01 c2                	add    edx,eax
   11ae5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11ae8:	c1 e8 16             	shr    eax,0x16
   11aeb:	8d 0c 85 00 00 00 00 	lea    ecx,[eax*4+0x0]
   11af2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11af5:	01 c8                	add    eax,ecx
   11af7:	52                   	push   edx
   11af8:	50                   	push   eax
   11af9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11afc:	68 8c 57 04 00       	push   0x4578c
   11b01:	e8 01 5a 01 00       	call   27507 <printk>
   11b06:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:234
#endif
    }
//    if (ptrT[(src&0x003FFFFF/1000)]==0)
}
   11b09:	eb 00                	jmp    11b0b <kUnMapPage+0x16d>
   11b0b:	90                   	nop
   11b0c:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   11b0f:	c9                   	leave  
   11b10:	c3                   	ret    

00011b11 <kSetPhysicalRangeRO>:
kSetPhysicalRangeRO():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:237

void kSetPhysicalRangeRO(uint32_t startAddy, uint32_t endAddy, bool readOnly)
{
   11b11:	55                   	push   ebp
   11b12:	89 e5                	mov    ebp,esp
   11b14:	83 ec 18             	sub    esp,0x18
   11b17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11b1a:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:239
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11b1d:	a1 78 48 12 00       	mov    eax,ds:0x124878
   11b22:	83 e0 40             	and    eax,0x40
   11b25:	85 c0                	test   eax,eax
   11b27:	74 2a                	je     11b53 <kSetPhysicalRangeRO+0x42>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:240
            printk("kMakePhysicalRangeRO: Make 0x%08X(0x%08X)-0x%08X(0x%08X) r/o\n", startAddy, startAddy&0xFffff000, endAddy, endAddy&0xFFFFF000);
   11b29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11b2c:	25 00 f0 ff ff       	and    eax,0xfffff000
   11b31:	89 c2                	mov    edx,eax
   11b33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11b36:	25 00 f0 ff ff       	and    eax,0xfffff000
   11b3b:	83 ec 0c             	sub    esp,0xc
   11b3e:	52                   	push   edx
   11b3f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   11b42:	50                   	push   eax
   11b43:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11b46:	68 bc 57 04 00       	push   0x457bc
   11b4b:	e8 b7 59 01 00       	call   27507 <printk>
   11b50:	83 c4 20             	add    esp,0x20
/home/yogi/src/os//chrisOS/src/init/kpaging.c:242
#endif
    kSetVirtualRangeRO((startAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, (endAddy + KERNEL_PAGED_BASE_ADDRESS) & 0xFFFFF000, readOnly);
   11b53:	0f b6 45 f4          	movzx  eax,BYTE PTR [ebp-0xc]
   11b57:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11b5a:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b60:	89 d1                	mov    ecx,edx
   11b62:	81 e1 00 f0 ff ff    	and    ecx,0xfffff000
   11b68:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   11b6b:	81 ea 00 00 00 40    	sub    edx,0x40000000
   11b71:	81 e2 00 f0 ff ff    	and    edx,0xfffff000
   11b77:	83 ec 04             	sub    esp,0x4
   11b7a:	50                   	push   eax
   11b7b:	51                   	push   ecx
   11b7c:	52                   	push   edx
   11b7d:	e8 ab fa ff ff       	call   1162d <kSetVirtualRangeRO>
   11b82:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:243
}
   11b85:	90                   	nop
   11b86:	c9                   	leave  
   11b87:	c3                   	ret    

00011b88 <mmKernelSetPageInUseFlag>:
mmKernelSetPageInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:246

void mmKernelSetPageInUseFlag(uintptr_t address, bool inUse)
{
   11b88:	55                   	push   ebp
   11b89:	89 e5                	mov    ebp,esp
   11b8b:	83 ec 28             	sub    esp,0x28
   11b8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11b91:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:249
    uintptr_t* ptEntry;
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   11b94:	a1 78 48 12 00       	mov    eax,ds:0x124878
   11b99:	83 e0 40             	and    eax,0x40
   11b9c:	85 c0                	test   eax,eax
   11b9e:	74 25                	je     11bc5 <mmKernelSetPageInUseFlag+0x3d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250
           printd(DEBUG_PAGING, "mmKernelSetPageInUseFlag: Marking page with address 0x%08X as %s\n", address, inUse?"in use":"not in use");
   11ba0:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11ba4:	74 07                	je     11bad <mmKernelSetPageInUseFlag+0x25>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250 (discriminator 1)
   11ba6:	b8 fa 57 04 00       	mov    eax,0x457fa
   11bab:	eb 05                	jmp    11bb2 <mmKernelSetPageInUseFlag+0x2a>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250 (discriminator 2)
   11bad:	b8 01 58 04 00       	mov    eax,0x45801
/home/yogi/src/os//chrisOS/src/init/kpaging.c:250 (discriminator 4)
   11bb2:	50                   	push   eax
   11bb3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11bb6:	68 0c 58 04 00       	push   0x4580c
   11bbb:	6a 40                	push   0x40
   11bbd:	e8 65 59 01 00       	call   27527 <printd>
   11bc2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:252
#endif
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
   11bc5:	83 ec 0c             	sub    esp,0xc
   11bc8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11bcb:	e8 ed f8 ff ff       	call   114bd <kPagingGet4kPTEntryAddress>
   11bd0:	83 c4 10             	add    esp,0x10
   11bd3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:253
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
   11bd6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bd9:	8b 00                	mov    eax,DWORD PTR [eax]
   11bdb:	50                   	push   eax
   11bdc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11bdf:	68 50 58 04 00       	push   0x45850
   11be4:	6a 40                	push   0x40
   11be6:	e8 3c 59 01 00       	call   27527 <printd>
   11beb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:254
        if (inUse)
   11bee:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   11bf2:	74 11                	je     11c05 <mmKernelSetPageInUseFlag+0x7d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:255
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
   11bf4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11bf7:	8b 00                	mov    eax,DWORD PTR [eax]
   11bf9:	80 cc 08             	or     ah,0x8
   11bfc:	89 c2                	mov    edx,eax
   11bfe:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c01:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:258
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}
   11c03:	eb 0f                	jmp    11c14 <mmKernelSetPageInUseFlag+0x8c>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:257
        ptEntry=(uintptr_t*)kPagingGet4kPTEntryAddress(address);
        printd(DEBUG_PAGING,"mmKernelSetPageInUseFlag: PTE=0x%08X, Before PTE value=0x%08X\n",ptEntry,*ptEntry);
        if (inUse)
            *ptEntry|=PAGING_IN_USE_FLAG_MASK;
        else
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
   11c05:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c08:	8b 00                	mov    eax,DWORD PTR [eax]
   11c0a:	80 e4 f7             	and    ah,0xf7
   11c0d:	89 c2                	mov    edx,eax
   11c0f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c12:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os//chrisOS/src/init/kpaging.c:258
}
   11c14:	90                   	nop
   11c15:	c9                   	leave  
   11c16:	c3                   	ret    

00011c17 <mmKernelSetPageRangeInUseFlag>:
mmKernelSetPageRangeInUseFlag():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:261

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
   11c17:	55                   	push   ebp
   11c18:	89 e5                	mov    ebp,esp
   11c1a:	83 ec 28             	sub    esp,0x28
   11c1d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   11c20:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os//chrisOS/src/init/kpaging.c:262
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11c23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c26:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11c29:	eb 19                	jmp    11c44 <mmKernelSetPageRangeInUseFlag+0x2d>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:263 (discriminator 3)
        mmKernelSetPageInUseFlag(cnt,inUse);
   11c2b:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   11c2f:	83 ec 08             	sub    esp,0x8
   11c32:	50                   	push   eax
   11c33:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11c36:	e8 4d ff ff ff       	call   11b88 <mmKernelSetPageInUseFlag>
   11c3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os//chrisOS/src/init/kpaging.c:262 (discriminator 3)
            *ptEntry&=~PAGING_IN_USE_FLAG_MASK;
}

void mmKernelSetPageRangeInUseFlag(uintptr_t startAddress, uintptr_t endAddress, int pageSize, bool inUse)
{
    for (uintptr_t cnt=startAddress;cnt<endAddress;cnt+=pageSize)
   11c3e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   11c41:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os//chrisOS/src/init/kpaging.c:262 (discriminator 1)
   11c44:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11c47:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   11c4a:	72 df                	jb     11c2b <mmKernelSetPageRangeInUseFlag+0x14>
/home/yogi/src/os//chrisOS/src/init/kpaging.c:264
        mmKernelSetPageInUseFlag(cnt,inUse);
}
   11c4c:	90                   	nop
   11c4d:	c9                   	leave  
   11c4e:	c3                   	ret    

00011c4f <mmUnusePageRange>:
mmUnusePageRange():
/home/yogi/src/os//chrisOS/src/init/kpaging.c:267

void mmUnusePageRange()
{
   11c4f:	55                   	push   ebp
   11c50:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/init/kpaging.c:269
    
}
   11c52:	90                   	nop
   11c53:	5d                   	pop    ebp
   11c54:	c3                   	ret    
   11c55:	66 90                	xchg   ax,ax
   11c57:	90                   	nop

00011c58 <strncmp>:
strncmp():
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:13
 *   array pointed to by `s2'.  [4.11.4.4]
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
   11c58:	55                   	push   ebp
   11c59:	89 e5                	mov    ebp,esp
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
    for ( ; n > 0; s1++, s2++, --n)
   11c5b:	eb 4b                	jmp    11ca8 <strncmp+0x50>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:15
	if (*s1 != *s2)
   11c5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c60:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c66:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c69:	38 c2                	cmp    dl,al
   11c6b:	74 1e                	je     11c8b <strncmp+0x33>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
   11c6d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c70:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   11c73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11c76:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c79:	38 c2                	cmp    dl,al
   11c7b:	73 07                	jae    11c84 <strncmp+0x2c>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 1)
   11c7d:	b8 ff ff ff ff       	mov    eax,0xffffffff
   11c82:	eb 2f                	jmp    11cb3 <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:16 (discriminator 2)
   11c84:	b8 01 00 00 00       	mov    eax,0x1
   11c89:	eb 28                	jmp    11cb3 <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:17
	else if (*s1 == '\0')
   11c8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11c8e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11c91:	84 c0                	test   al,al
   11c93:	75 07                	jne    11c9c <strncmp+0x44>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:18
	    return 0;
   11c95:	b8 00 00 00 00       	mov    eax,0x0
   11c9a:	eb 17                	jmp    11cb3 <strncmp+0x5b>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14
 */
#include <stddef.h>

int strncmp(const char *s1, const char *s2, size_t n)
{
    for ( ; n > 0; s1++, s2++, --n)
   11c9c:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   11ca0:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
   11ca4:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:14 (discriminator 1)
   11ca8:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11cac:	75 af                	jne    11c5d <strncmp+0x5>
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:19
	if (*s1 != *s2)
	    return ((*(unsigned char *)s1 < *(unsigned char *)s2) ? -1 : +1);
	else if (*s1 == '\0')
	    return 0;
    return 0;
   11cae:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os//chrisOS/src/strings/strncmp.c:20
}
   11cb3:	5d                   	pop    ebp
   11cb4:	c3                   	ret    
   11cb5:	66 90                	xchg   ax,ax
   11cb7:	90                   	nop

00011cb8 <strncpy>:
strncpy():
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:14
 *   The `strncpy' function returns the value of `s1'.  [4.11.2.4]
 */
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
   11cb8:	55                   	push   ebp
   11cb9:	89 e5                	mov    ebp,esp
   11cbb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:15
    char *s = s1;
   11cbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   11cc1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
    while (n > 0 && *s2 != '\0') {
   11cc4:	eb 1b                	jmp    11ce1 <strncpy+0x29>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:17
	*s++ = *s2++;
   11cc6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11cc9:	8d 50 01             	lea    edx,[eax+0x1]
   11ccc:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11ccf:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   11cd2:	8d 4a 01             	lea    ecx,[edx+0x1]
   11cd5:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   11cd8:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   11cdb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:18
	--n;
   11cdd:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16
#include <stddef.h>

char * strncpy(char *s1, const char *s2, size_t n)
{
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
   11ce1:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11ce5:	74 1c                	je     11d03 <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:16 (discriminator 1)
   11ce7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   11cea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   11ced:	84 c0                	test   al,al
   11cef:	75 d5                	jne    11cc6 <strncpy+0xe>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11cf1:	eb 10                	jmp    11d03 <strncpy+0x4b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:21
	*s++ = '\0';
   11cf3:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   11cf6:	8d 50 01             	lea    edx,[eax+0x1]
   11cf9:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   11cfc:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:22
	--n;
   11cff:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:20
    char *s = s1;
    while (n > 0 && *s2 != '\0') {
	*s++ = *s2++;
	--n;
    }
    while (n > 0) {
   11d03:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   11d07:	75 ea                	jne    11cf3 <strncpy+0x3b>
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:24
	*s++ = '\0';
	--n;
    }
    return s1;
   11d09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os//chrisOS/src/strings/strncpy.c:25
}
   11d0c:	c9                   	leave  
   11d0d:	c3                   	ret    
   11d0e:	66 90                	xchg   ax,ax

00011d10 <dumpregs>:
dumpregs():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:22

.globl dumpregs
.type dumpregs, @function
dumpregs:
.code32
        mov exceptionAX, eax
   11d10:	a3 f0 46 12 00       	mov    ds:0x1246f0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:23
        mov exceptionBX, ebx
   11d15:	89 1d f4 46 12 00    	mov    DWORD PTR ds:0x1246f4,ebx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:24
        mov exceptionCX, ecx
   11d1b:	89 0d f8 46 12 00    	mov    DWORD PTR ds:0x1246f8,ecx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:25
        mov exceptionDX, edx
   11d21:	89 15 fc 46 12 00    	mov    DWORD PTR ds:0x1246fc,edx
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:26
        mov exceptionSI, esi
   11d27:	89 35 00 47 12 00    	mov    DWORD PTR ds:0x124700,esi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:27
        mov exceptionDI, edi
   11d2d:	89 3d 04 47 12 00    	mov    DWORD PTR ds:0x124704,edi
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:28
        mov exceptionBP, eax
   11d33:	a3 08 47 12 00       	mov    ds:0x124708,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:29
        mov eax, cr0
   11d38:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:30
        mov exceptionCR0, eax
   11d3b:	a3 0c 47 12 00       	mov    ds:0x12470c,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:31
        mov eax, cr3
   11d40:	0f 20 d8             	mov    eax,cr3
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:32
        mov exceptionCR3, eax
   11d43:	a3 10 47 12 00       	mov    ds:0x124710,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:33
        mov eax, cr4
   11d48:	0f 20 e0             	mov    eax,cr4
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:34
        mov exceptionCR4, eax
   11d4b:	a3 14 47 12 00       	mov    ds:0x124714,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:35
        mov eax, exceptionAX
   11d50:	a1 f0 46 12 00       	mov    eax,ds:0x1246f0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:36
        ret 
   11d55:	c3                   	ret    

00011d56 <storeGDT>:
storeGDT():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:42

.global storeGDT
.type storeGDT, @function
storeGDT:
.code32
    mov eax,[esp+4]
   11d56:	8b 44 24 04          	mov    eax,DWORD PTR [esp+0x4]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:43
    sgdt [eax]
   11d5a:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:44
    ret
   11d5d:	c3                   	ret    

00011d5e <getCS>:
getCS():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:50

.global getCS
.type getCS, @function
getCS:
.code32
    push cs
   11d5e:	0e                   	push   cs
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:51
    pop eax
   11d5f:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:52
    ret
   11d60:	c3                   	ret    

00011d61 <enableCR0_WP>:
enableCR0_WP():
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:57

.global enableCR0_WP
.type enableCR0_WP, @function
enableCR0_WP:
    push eax
   11d61:	50                   	push   eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:58
    mov eax,cr0
   11d62:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:59
    or eax,0x10000
   11d65:	0d 00 00 01 00       	or     eax,0x10000
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:60
    mov cr0,eax
   11d6a:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:61
    pop eax
   11d6d:	58                   	pop    eax
/home/yogi/src/os/chrisOS/asm/asmFunctions.s:62
    ret
   11d6e:	c3                   	ret    
   11d6f:	90                   	nop

00011d70 <selectHDNum>:
selectHDNum():
/home/yogi/src/os/chrisOS/src/bishell.c:523
        printk("\tMapping based on current CR3\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
    }
}

void HIGH_CODE_SECTION selectHDNum (char* cmdline)
{
   11d70:	55                   	push   ebp
   11d71:	89 e5                	mov    ebp,esp
   11d73:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:525
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=0;
   11d79:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:526
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11d80:	83 ec 04             	sub    esp,0x4
   11d83:	68 00 14 00 00       	push   0x1400
   11d88:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11d8e:	50                   	push   eax
   11d8f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11d92:	e8 1d 07 00 00       	call   124b4 <parseParamsShell>
   11d97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:528

    lTemp =strtol(params[0],0,10);
   11d9a:	83 ec 04             	sub    esp,0x4
   11d9d:	6a 0a                	push   0xa
   11d9f:	6a 00                	push   0x0
   11da1:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11da7:	50                   	push   eax
   11da8:	e8 db 5a 01 00       	call   27888 <strtol>
   11dad:	83 c4 10             	add    esp,0x10
   11db0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:530
 
    if (lTemp<0 || lTemp>kATADeviceInfoCount)
   11db3:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11db7:	78 0a                	js     11dc3 <selectHDNum+0x53>
/home/yogi/src/os/chrisOS/src/bishell.c:530 (discriminator 1)
   11db9:	a1 04 48 12 00       	mov    eax,ds:0x124804
   11dbe:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11dc1:	7e 1b                	jle    11dde <selectHDNum+0x6e>
/home/yogi/src/os/chrisOS/src/bishell.c:531
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",lTemp,kATADeviceInfoCount);
   11dc3:	a1 04 48 12 00       	mov    eax,ds:0x124804
   11dc8:	83 ec 04             	sub    esp,0x4
   11dcb:	50                   	push   eax
   11dcc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11dcf:	68 a0 59 04 00       	push   0x459a0
   11dd4:	e8 2e 57 01 00       	call   27507 <printk>
   11dd9:	83 c4 10             	add    esp,0x10
   11ddc:	eb 08                	jmp    11de6 <selectHDNum+0x76>
/home/yogi/src/os/chrisOS/src/bishell.c:533
    else
        kSelectedDiskNum=lTemp;
   11dde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11de1:	a3 44 49 12 00       	mov    ds:0x124944,eax
/home/yogi/src/os/chrisOS/src/bishell.c:534
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
   11de6:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   11dec:	a1 44 49 12 00       	mov    eax,ds:0x124944
   11df1:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11df7:	01 d0                	add    eax,edx
   11df9:	83 ec 08             	sub    esp,0x8
   11dfc:	68 40 5f 09 00       	push   0x95f40
   11e01:	50                   	push   eax
   11e02:	e8 84 f9 00 00       	call   2178b <parseMBR>
   11e07:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:535
    printk("Disk %u selected\n",kSelectedDiskNum);
   11e0a:	a1 44 49 12 00       	mov    eax,ds:0x124944
   11e0f:	83 ec 08             	sub    esp,0x8
   11e12:	50                   	push   eax
   11e13:	68 ea 59 04 00       	push   0x459ea
   11e18:	e8 ea 56 01 00       	call   27507 <printk>
   11e1d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:536
}
   11e20:	90                   	nop
   11e21:	c9                   	leave  
   11e22:	c3                   	ret    

00011e23 <selectPart>:
selectPart():
/home/yogi/src/os/chrisOS/src/bishell.c:565
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
    printMBR(&mbr);
}

void HIGH_CODE_SECTION selectPart(char* cmdline)
{
   11e23:	55                   	push   ebp
   11e24:	89 e5                	mov    ebp,esp
   11e26:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:567
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int lTemp=-1;
   11e2c:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:568
    if (kSelectedDiskNum==-1)
   11e33:	a1 44 49 12 00       	mov    eax,ds:0x124944
   11e38:	83 f8 ff             	cmp    eax,0xffffffff
   11e3b:	75 10                	jne    11e4d <selectPart+0x2a>
/home/yogi/src/os/chrisOS/src/bishell.c:570
    {
        printk("You must select a disk with 'disk' before selecting a partition");
   11e3d:	83 ec 0c             	sub    esp,0xc
   11e40:	68 fc 59 04 00       	push   0x459fc
   11e45:	e8 bd 56 01 00       	call   27507 <printk>
   11e4a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:572
    }
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11e4d:	83 ec 04             	sub    esp,0x4
   11e50:	68 00 14 00 00       	push   0x1400
   11e55:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11e5b:	50                   	push   eax
   11e5c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11e5f:	e8 50 06 00 00       	call   124b4 <parseParamsShell>
   11e64:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:574

    lTemp =strtol(params[0],0,10);
   11e67:	83 ec 04             	sub    esp,0x4
   11e6a:	6a 0a                	push   0xa
   11e6c:	6a 00                	push   0x0
   11e6e:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   11e74:	50                   	push   eax
   11e75:	e8 0e 5a 01 00       	call   27888 <strtol>
   11e7a:	83 c4 10             	add    esp,0x10
   11e7d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:576
    //printk("parameter 1=%u\n",lTemp);
    if (lTemp<0 || lTemp>mbr.partCount)
   11e80:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11e84:	78 0a                	js     11e90 <selectPart+0x6d>
/home/yogi/src/os/chrisOS/src/bishell.c:576 (discriminator 1)
   11e86:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11e8b:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   11e8e:	7d 1b                	jge    11eab <selectPart+0x88>
/home/yogi/src/os/chrisOS/src/bishell.c:578
    {
        printk("Error, selected partition number (%u) is not valid.  It must be >=1 and <=%u\n",lTemp,mbr.partCount);
   11e90:	a1 40 63 09 00       	mov    eax,ds:0x96340
   11e95:	83 ec 04             	sub    esp,0x4
   11e98:	50                   	push   eax
   11e99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11e9c:	68 3c 5a 04 00       	push   0x45a3c
   11ea1:	e8 61 56 01 00       	call   27507 <printk>
   11ea6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:579
        return;
   11ea9:	eb 7d                	jmp    11f28 <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:581
    }
    if (mbr.parts[lTemp].partTotalSectors==0)
   11eab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11eae:	c1 e0 04             	shl    eax,0x4
   11eb1:	05 40 5f 09 00       	add    eax,0x95f40
   11eb6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   11eb9:	85 c0                	test   eax,eax
   11ebb:	75 25                	jne    11ee2 <selectPart+0xbf>
/home/yogi/src/os/chrisOS/src/bishell.c:583
    {
        printk("Error, selected partition (number %u) is not a valid partition as its total sector count is 0.",lTemp);
   11ebd:	83 ec 08             	sub    esp,0x8
   11ec0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11ec3:	68 8c 5a 04 00       	push   0x45a8c
   11ec8:	e8 3a 56 01 00       	call   27507 <printk>
   11ecd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:584
        printMBR(&mbr);   
   11ed0:	83 ec 0c             	sub    esp,0xc
   11ed3:	68 40 5f 09 00       	push   0x95f40
   11ed8:	e8 d3 f7 00 00       	call   216b0 <printMBR>
   11edd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:585
        return;
   11ee0:	eb 46                	jmp    11f28 <selectPart+0x105>
/home/yogi/src/os/chrisOS/src/bishell.c:587
    }
    kSelectedPartNum = lTemp;
   11ee2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11ee5:	a3 48 49 12 00       	mov    ds:0x124948,eax
/home/yogi/src/os/chrisOS/src/bishell.c:588
    ahciSetCurrentPart(mbr.parts[lTemp]);
   11eea:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11eed:	c1 e0 04             	shl    eax,0x4
   11ef0:	05 40 5f 09 00       	add    eax,0x95f40
   11ef5:	83 ec 10             	sub    esp,0x10
   11ef8:	89 e2                	mov    edx,esp
   11efa:	8b 08                	mov    ecx,DWORD PTR [eax]
   11efc:	89 0a                	mov    DWORD PTR [edx],ecx
   11efe:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   11f01:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   11f04:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   11f07:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   11f0a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   11f0d:	89 42 0c             	mov    DWORD PTR [edx+0xc],eax
   11f10:	e8 dc 32 00 00       	call   151f1 <ahciSetCurrentPart>
   11f15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:590
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
   11f18:	83 ec 0c             	sub    esp,0xc
   11f1b:	68 eb 5a 04 00       	push   0x45aeb
   11f20:	e8 1a 01 00 00       	call   1203f <attach>
   11f25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:591
}
   11f28:	c9                   	leave  
   11f29:	c3                   	ret    

00011f2a <listParts>:
listParts():
/home/yogi/src/os/chrisOS/src/bishell.c:539
    parseMBR(&kATADeviceInfo[kSelectedDiskNum],&mbr);
    printk("Disk %u selected\n",kSelectedDiskNum);
}

void HIGH_CODE_SECTION listParts(char* cmdline)
{
   11f2a:	55                   	push   ebp
   11f2b:	89 e5                	mov    ebp,esp
   11f2d:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:541
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   11f33:	83 ec 04             	sub    esp,0x4
   11f36:	68 00 14 00 00       	push   0x1400
   11f3b:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11f41:	50                   	push   eax
   11f42:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   11f45:	e8 6a 05 00 00       	call   124b4 <parseParamsShell>
   11f4a:	83 c4 10             	add    esp,0x10
   11f4d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:542
    int driveNo=-1;
   11f50:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:544

    if (paramCount>0)
   11f57:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   11f5b:	7e 1b                	jle    11f78 <listParts+0x4e>
/home/yogi/src/os/chrisOS/src/bishell.c:545
        driveNo=strtol(params[0],0,10);
   11f5d:	83 ec 04             	sub    esp,0x4
   11f60:	6a 0a                	push   0xa
   11f62:	6a 00                	push   0x0
   11f64:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   11f6a:	50                   	push   eax
   11f6b:	e8 18 59 01 00       	call   27888 <strtol>
   11f70:	83 c4 10             	add    esp,0x10
   11f73:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   11f76:	eb 08                	jmp    11f80 <listParts+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:547
    else
        driveNo=kSelectedDiskNum;
   11f78:	a1 44 49 12 00       	mov    eax,ds:0x124944
   11f7d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:548
    if (driveNo<0 || driveNo>kATADeviceInfoCount)
   11f80:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   11f84:	78 0a                	js     11f90 <listParts+0x66>
/home/yogi/src/os/chrisOS/src/bishell.c:548 (discriminator 1)
   11f86:	a1 04 48 12 00       	mov    eax,ds:0x124804
   11f8b:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   11f8e:	7e 1e                	jle    11fae <listParts+0x84>
/home/yogi/src/os/chrisOS/src/bishell.c:550
    {
        printk("Error, selected disk number (%u) is not valid.  It must be >=0 and <= %u\n",driveNo,kATADeviceInfoCount);
   11f90:	a1 04 48 12 00       	mov    eax,ds:0x124804
   11f95:	83 ec 04             	sub    esp,0x4
   11f98:	50                   	push   eax
   11f99:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11f9c:	68 a0 59 04 00       	push   0x459a0
   11fa1:	e8 61 55 01 00       	call   27507 <printk>
   11fa6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:551
        return;
   11fa9:	e9 8f 00 00 00       	jmp    1203d <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:553
    }
    printk("Partitions for disk # %u\n",driveNo);
   11fae:	83 ec 08             	sub    esp,0x8
   11fb1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   11fb4:	68 ec 5a 04 00       	push   0x45aec
   11fb9:	e8 49 55 01 00       	call   27507 <printk>
   11fbe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:554
    port=(HBA_PORT*)kATADeviceInfo[driveNo].ioPort;
   11fc1:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   11fc7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11fca:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11fd0:	01 d0                	add    eax,edx
   11fd2:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   11fd8:	a3 5c 63 09 00       	mov    ds:0x9635c,eax
/home/yogi/src/os/chrisOS/src/bishell.c:555
    if (kATADeviceInfo[driveNo].ATADeviceType != ATA_DEVICE_TYPE_SATA_HD)
   11fdd:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   11fe3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   11fe6:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   11fec:	01 d0                	add    eax,edx
   11fee:	8b 80 52 02 00 00    	mov    eax,DWORD PTR [eax+0x252]
   11ff4:	83 f8 02             	cmp    eax,0x2
   11ff7:	74 12                	je     1200b <listParts+0xe1>
/home/yogi/src/os/chrisOS/src/bishell.c:557
    {
        printk("Invalid device type.  Only SATA disks can be listed at the moment\n");
   11ff9:	83 ec 0c             	sub    esp,0xc
   11ffc:	68 08 5b 04 00       	push   0x45b08
   12001:	e8 01 55 01 00       	call   27507 <printk>
   12006:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:558
        return;
   12009:	eb 32                	jmp    1203d <listParts+0x113>
/home/yogi/src/os/chrisOS/src/bishell.c:560
    }
    parseMBR(&kATADeviceInfo[driveNo],&mbr);
   1200b:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   12011:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12014:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1201a:	01 d0                	add    eax,edx
   1201c:	83 ec 08             	sub    esp,0x8
   1201f:	68 40 5f 09 00       	push   0x95f40
   12024:	50                   	push   eax
   12025:	e8 61 f7 00 00       	call   2178b <parseMBR>
   1202a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:561
    printMBR(&mbr);
   1202d:	83 ec 0c             	sub    esp,0xc
   12030:	68 40 5f 09 00       	push   0x95f40
   12035:	e8 76 f6 00 00       	call   216b0 <printMBR>
   1203a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:562
}
   1203d:	c9                   	leave  
   1203e:	c3                   	ret    

0001203f <attach>:
attach():
/home/yogi/src/os/chrisOS/src/bishell.c:594
    //printk("Partition %u selected\n",kSelectedPartNum);
    attach("");
}

void HIGH_CODE_SECTION attach(char* cmdline)
{
   1203f:	55                   	push   ebp
   12040:	89 e5                	mov    ebp,esp
   12042:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:596
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12048:	83 ec 04             	sub    esp,0x4
   1204b:	68 00 14 00 00       	push   0x1400
   12050:	8d 85 f0 eb ff ff    	lea    eax,[ebp-0x1410]
   12056:	50                   	push   eax
   12057:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1205a:	e8 55 04 00 00       	call   124b4 <parseParamsShell>
   1205f:	83 c4 10             	add    esp,0x10
   12062:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:598

    if (kSelectedDiskNum < 0 || kSelectedPartNum < 0)
   12065:	a1 44 49 12 00       	mov    eax,ds:0x124944
   1206a:	85 c0                	test   eax,eax
   1206c:	78 09                	js     12077 <attach+0x38>
/home/yogi/src/os/chrisOS/src/bishell.c:598 (discriminator 1)
   1206e:	a1 48 49 12 00       	mov    eax,ds:0x124948
   12073:	85 c0                	test   eax,eax
   12075:	79 1d                	jns    12094 <attach+0x55>
/home/yogi/src/os/chrisOS/src/bishell.c:600
    {
        printk("Must first select a disk (%u) and a partition (%u) using 'selectpart'",kSelectedDiskNum,kSelectedPartNum);
   12077:	8b 15 48 49 12 00    	mov    edx,DWORD PTR ds:0x124948
   1207d:	a1 44 49 12 00       	mov    eax,ds:0x124944
   12082:	83 ec 04             	sub    esp,0x4
   12085:	52                   	push   edx
   12086:	50                   	push   eax
   12087:	68 4c 5b 04 00       	push   0x45b4c
   1208c:	e8 76 54 01 00       	call   27507 <printk>
   12091:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:602
    }
    strcpy(selectedDir,"/");
   12094:	83 ec 08             	sub    esp,0x8
   12097:	68 92 5b 04 00       	push   0x45b92
   1209c:	68 c0 b4 08 00       	push   0x8b4c0
   120a1:	e8 c2 55 01 00       	call   27668 <strcpy>
   120a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:603
    ahciSetCurrentDisk((HBA_PORT*)kATADeviceInfo[kSelectedDiskNum].ioPort);
   120a9:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   120af:	a1 44 49 12 00       	mov    eax,ds:0x124944
   120b4:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   120ba:	01 d0                	add    eax,edx
   120bc:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   120c2:	83 ec 0c             	sub    esp,0xc
   120c5:	50                   	push   eax
   120c6:	e8 18 31 00 00       	call   151e3 <ahciSetCurrentDisk>
   120cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:604
    int lRetVal=fl_attach_media((fn_diskio_read)ahciBlockingRead28, (fn_diskio_write)ahciBlockingWrite28);
   120ce:	83 ec 08             	sub    esp,0x8
   120d1:	68 22 55 01 00       	push   0x15522
   120d6:	68 4e 52 01 00       	push   0x1524e
   120db:	e8 58 b5 00 00       	call   1d638 <fl_attach_media>
   120e0:	83 c4 10             	add    esp,0x10
   120e3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:605
    if (lRetVal!=0)
   120e6:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   120ea:	74 1f                	je     1210b <attach+0xcc>
/home/yogi/src/os/chrisOS/src/bishell.c:607
    {
        printk("Error attaching to disk %u, partition %u.  Error number %u",kSelectedDiskNum,kSelectedPartNum,lRetVal);
   120ec:	8b 15 48 49 12 00    	mov    edx,DWORD PTR ds:0x124948
   120f2:	a1 44 49 12 00       	mov    eax,ds:0x124944
   120f7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   120fa:	52                   	push   edx
   120fb:	50                   	push   eax
   120fc:	68 94 5b 04 00       	push   0x45b94
   12101:	e8 01 54 01 00       	call   27507 <printk>
   12106:	83 c4 10             	add    esp,0x10
   12109:	eb 1d                	jmp    12128 <attach+0xe9>
/home/yogi/src/os/chrisOS/src/bishell.c:610
        return;
    }
    printk("Attached to disk %u, partition %u.\n",kSelectedDiskNum,kSelectedPartNum);
   1210b:	8b 15 48 49 12 00    	mov    edx,DWORD PTR ds:0x124948
   12111:	a1 44 49 12 00       	mov    eax,ds:0x124944
   12116:	83 ec 04             	sub    esp,0x4
   12119:	52                   	push   edx
   1211a:	50                   	push   eax
   1211b:	68 d0 5b 04 00       	push   0x45bd0
   12120:	e8 e2 53 01 00       	call   27507 <printk>
   12125:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:613
    
    //fl_listdirectory(selectedDir);
}
   12128:	c9                   	leave  
   12129:	c3                   	ret    

0001212a <listDir>:
listDir():
/home/yogi/src/os/chrisOS/src/bishell.c:616

void HIGH_CODE_SECTION listDir(char* cmdline)
{
   1212a:	55                   	push   ebp
   1212b:	89 e5                	mov    ebp,esp
   1212d:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:618
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   12133:	83 ec 04             	sub    esp,0x4
   12136:	68 00 14 00 00       	push   0x1400
   1213b:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12141:	50                   	push   eax
   12142:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12145:	e8 6a 03 00 00       	call   124b4 <parseParamsShell>
   1214a:	83 c4 10             	add    esp,0x10
   1214d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:622
    
    //printk("Kernel Debug: Listing of directory %s + %s\n",params[0],params[1]);
    
    fl_listdirectory(params[0]);
   12150:	83 ec 0c             	sub    esp,0xc
   12153:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12159:	50                   	push   eax
   1215a:	e8 b9 c3 00 00       	call   1e518 <fl_listdirectory>
   1215f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:623
}
   12162:	90                   	nop
   12163:	c9                   	leave  
   12164:	c3                   	ret    

00012165 <execProgram>:
execProgram():
/home/yogi/src/os/chrisOS/src/bishell.c:626

void HIGH_CODE_SECTION execProgram(char* cmdline)
{
   12165:	55                   	push   ebp
   12166:	89 e5                	mov    ebp,esp
   12168:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:628
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1216e:	83 ec 04             	sub    esp,0x4
   12171:	68 00 14 00 00       	push   0x1400
   12176:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1217c:	50                   	push   eax
   1217d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12180:	e8 2f 03 00 00       	call   124b4 <parseParamsShell>
   12185:	83 c4 10             	add    esp,0x10
   12188:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:631

    
    strcpy(sExecutingProgram,params[0]+1);
   1218b:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   12191:	83 c0 01             	add    eax,0x1
   12194:	83 ec 08             	sub    esp,0x8
   12197:	50                   	push   eax
   12198:	68 40 b4 08 00       	push   0x8b440
   1219d:	e8 c6 54 01 00       	call   27668 <strcpy>
   121a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:634
    //printk("execProgram: param count = %u\n",paramCount);

    lTemp=buildargv(cmdline);
   121a5:	83 ec 0c             	sub    esp,0xc
   121a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   121ab:	e8 4e 04 00 00       	call   125fe <buildargv>
   121b0:	83 c4 10             	add    esp,0x10
   121b3:	a3 20 b4 08 00       	mov    ds:0x8b420,eax
/home/yogi/src/os/chrisOS/src/bishell.c:641

//    printk("listing parameters:\n");
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("%u = '%s'\n",cnt,lTemp[cnt]);
   
    exec (params[0],paramCount,lTemp);
   121b8:	a1 20 b4 08 00       	mov    eax,ds:0x8b420
   121bd:	83 ec 04             	sub    esp,0x4
   121c0:	50                   	push   eax
   121c1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   121c4:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   121ca:	50                   	push   eax
   121cb:	e8 7d 4d 01 00       	call   26f4d <exec>
   121d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:642
    strcpy(sExecutingProgram,sbiShellProgramName);
   121d3:	83 ec 08             	sub    esp,0x8
   121d6:	68 c0 8d 02 00       	push   0x28dc0
   121db:	68 40 b4 08 00       	push   0x8b440
   121e0:	e8 83 54 01 00       	call   27668 <strcpy>
   121e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:643
}
   121e8:	90                   	nop
   121e9:	c9                   	leave  
   121ea:	c3                   	ret    

000121eb <displayGDTTable>:
displayGDTTable():
/home/yogi/src/os/chrisOS/src/bishell.c:212
  //printk("buildargv: exiting\n");
  return (argv);
}

void HIGH_CODE_SECTION displayGDTTable(char *cmdline)
{
   121eb:	55                   	push   ebp
   121ec:	89 e5                	mov    ebp,esp
   121ee:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/bishell.c:213
    displayGDT();
   121f1:	e8 85 3b 01 00       	call   25d7b <displayGDT>
/home/yogi/src/os/chrisOS/src/bishell.c:214
}
   121f6:	90                   	nop
   121f7:	c9                   	leave  
   121f8:	c3                   	ret    

000121f9 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   121f9:	55                   	push   ebp
   121fa:	89 e5                	mov    ebp,esp
   121fc:	83 ec 08             	sub    esp,0x8
   121ff:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12202:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12205:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   12209:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   1220c:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   12210:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   12214:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   12215:	90                   	nop
   12216:	c9                   	leave  
   12217:	c3                   	ret    

00012218 <outw>:
outw():
/home/yogi/src/os/chrisOS/include/io.h:27

static __inline void outw(unsigned short __port, unsigned short __val)
{
   12218:	55                   	push   ebp
   12219:	89 e5                	mov    ebp,esp
   1221b:	83 ec 08             	sub    esp,0x8
   1221e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12221:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12224:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   12228:	66 89 45 f8          	mov    WORD PTR [ebp-0x8],ax
/home/yogi/src/os/chrisOS/include/io.h:28
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
   1222c:	0f b7 45 f8          	movzx  eax,WORD PTR [ebp-0x8]
   12230:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   12234:	66 ef                	out    dx,ax
/home/yogi/src/os/chrisOS/include/io.h:29
}
   12236:	90                   	nop
   12237:	c9                   	leave  
   12238:	c3                   	ret    

00012239 <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32

static __inline void outl(unsigned short __port, unsigned int __val)
{
   12239:	55                   	push   ebp
   1223a:	89 e5                	mov    ebp,esp
   1223c:	83 ec 04             	sub    esp,0x4
   1223f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12242:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   12246:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12249:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   1224d:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   1224e:	90                   	nop
   1224f:	c9                   	leave  
   12250:	c3                   	ret    

00012251 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37

static __inline unsigned char inb(unsigned short __port)
{
   12251:	55                   	push   ebp
   12252:	89 e5                	mov    ebp,esp
   12254:	83 ec 14             	sub    esp,0x14
   12257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1225a:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   1225e:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   12262:	89 c2                	mov    edx,eax
   12264:	ec                   	in     al,dx
   12265:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   12268:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   1226c:	c9                   	leave  
   1226d:	c3                   	ret    

0001226e <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   1226e:	55                   	push   ebp
   1226f:	89 e5                	mov    ebp,esp
   12271:	83 ec 14             	sub    esp,0x14
   12274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12277:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   1227b:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1227f:	89 c2                	mov    edx,eax
   12281:	66 ed                	in     ax,dx
   12283:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   12287:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   1228b:	c9                   	leave  
   1228c:	c3                   	ret    

0001228d <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51

static __inline unsigned int inl(unsigned short __port)
{
   1228d:	55                   	push   ebp
   1228e:	89 e5                	mov    ebp,esp
   12290:	83 ec 14             	sub    esp,0x14
   12293:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12296:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   1229a:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1229e:	89 c2                	mov    edx,eax
   122a0:	ed                   	in     eax,dx
   122a1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   122a4:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   122a7:	c9                   	leave  
   122a8:	c3                   	ret    

000122a9 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   122a9:	55                   	push   ebp
   122aa:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   122ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122af:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   122b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122b9:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   122bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122bf:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   122c1:	90                   	nop
   122c2:	5d                   	pop    ebp
   122c3:	c3                   	ret    

000122c4 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   122c4:	55                   	push   ebp
   122c5:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   122c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122ca:	8b 00                	mov    eax,DWORD PTR [eax]
   122cc:	85 c0                	test   eax,eax
   122ce:	75 0d                	jne    122dd <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   122d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122d3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   122d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122d9:	89 10                	mov    DWORD PTR [eax],edx
   122db:	eb 0e                	jmp    122eb <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   122dd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122e0:	8b 00                	mov    eax,DWORD PTR [eax]
   122e2:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   122e5:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   122e8:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   122eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   122f1:	85 c0                	test   eax,eax
   122f3:	75 0d                	jne    12302 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   122f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   122f8:	8b 10                	mov    edx,DWORD PTR [eax]
   122fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   122fd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   12300:	eb 0d                	jmp    1230f <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   12302:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12305:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12308:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1230b:	8b 12                	mov    edx,DWORD PTR [edx]
   1230d:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1230f:	90                   	nop
   12310:	5d                   	pop    ebp
   12311:	c3                   	ret    

00012312 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   12312:	55                   	push   ebp
   12313:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   12315:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12318:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1231b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1231d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12320:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   12323:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12326:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   12329:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1232c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1232f:	85 c0                	test   eax,eax
   12331:	75 0b                	jne    1233e <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   12333:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12336:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12339:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1233c:	eb 0b                	jmp    12349 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1233e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12341:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12344:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12347:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   12349:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1234c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1234f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   12352:	90                   	nop
   12353:	5d                   	pop    ebp
   12354:	c3                   	ret    

00012355 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   12355:	55                   	push   ebp
   12356:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   12358:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1235b:	8b 10                	mov    edx,DWORD PTR [eax]
   1235d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12360:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   12362:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   12365:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   12368:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1236b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1236e:	8b 00                	mov    eax,DWORD PTR [eax]
   12370:	85 c0                	test   eax,eax
   12372:	75 0a                	jne    1237e <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   12374:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12377:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1237a:	89 10                	mov    DWORD PTR [eax],edx
   1237c:	eb 0b                	jmp    12389 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1237e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12381:	8b 00                	mov    eax,DWORD PTR [eax]
   12383:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   12386:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   12389:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1238c:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1238f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   12391:	90                   	nop
   12392:	5d                   	pop    ebp
   12393:	c3                   	ret    

00012394 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   12394:	55                   	push   ebp
   12395:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   12397:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1239a:	8b 00                	mov    eax,DWORD PTR [eax]
   1239c:	85 c0                	test   eax,eax
   1239e:	75 26                	jne    123c6 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   123a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123a3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   123a6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   123a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   123ae:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   123b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123b4:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   123ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   123bd:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   123c4:	eb 14                	jmp    123da <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   123c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123c9:	8b 00                	mov    eax,DWORD PTR [eax]
   123cb:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   123ce:	50                   	push   eax
   123cf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   123d2:	e8 7e ff ff ff       	call   12355 <fat_list_insert_before>
   123d7:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   123da:	90                   	nop
   123db:	c9                   	leave  
   123dc:	c3                   	ret    

000123dd <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   123dd:	55                   	push   ebp
   123de:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   123e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123e3:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   123e6:	85 c0                	test   eax,eax
   123e8:	75 10                	jne    123fa <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   123ea:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   123ed:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   123f0:	e8 9f ff ff ff       	call   12394 <fat_list_insert_first>
   123f5:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   123f8:	eb 15                	jmp    1240f <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   123fa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   123fd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   12400:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   12403:	50                   	push   eax
   12404:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12407:	e8 06 ff ff ff       	call   12312 <fat_list_insert_after>
   1240c:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1240f:	90                   	nop
   12410:	c9                   	leave  
   12411:	c3                   	ret    

00012412 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   12412:	55                   	push   ebp
   12413:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   12415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12418:	8b 00                	mov    eax,DWORD PTR [eax]
   1241a:	85 c0                	test   eax,eax
   1241c:	0f 94 c0             	sete   al
   1241f:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   12422:	5d                   	pop    ebp
   12423:	c3                   	ret    

00012424 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   12424:	55                   	push   ebp
   12425:	89 e5                	mov    ebp,esp
   12427:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1242a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1242d:	8b 00                	mov    eax,DWORD PTR [eax]
   1242f:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   12432:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   12436:	74 0e                	je     12446 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   12438:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1243b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1243e:	e8 81 fe ff ff       	call   122c4 <fat_list_remove>
   12443:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   12446:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   12449:	c9                   	leave  
   1244a:	c3                   	ret    

0001244b <findCommand>:
findCommand():
/home/yogi/src/os/chrisOS/src/bishell.c:38
char programParams[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
char** lTemp;


int HIGH_CODE_SECTION findCommand(char* command)
{
   1244b:	55                   	push   ebp
   1244c:	89 e5                	mov    ebp,esp
   1244e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:42
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   12451:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12458:	eb 4d                	jmp    124a7 <findCommand+0x5c>
/home/yogi/src/os/chrisOS/src/bishell.c:44
    {
        ret = strncmp(command, cmds[i].name,strlen(cmds[i].name));
   1245a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1245d:	c1 e0 04             	shl    eax,0x4
   12460:	05 00 8c 02 00       	add    eax,0x28c00
   12465:	8b 00                	mov    eax,DWORD PTR [eax]
   12467:	83 ec 0c             	sub    esp,0xc
   1246a:	50                   	push   eax
   1246b:	e8 68 52 01 00       	call   276d8 <strlen>
   12470:	83 c4 10             	add    esp,0x10
   12473:	89 c2                	mov    edx,eax
   12475:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12478:	c1 e0 04             	shl    eax,0x4
   1247b:	05 00 8c 02 00       	add    eax,0x28c00
   12480:	8b 00                	mov    eax,DWORD PTR [eax]
   12482:	83 ec 04             	sub    esp,0x4
   12485:	52                   	push   edx
   12486:	50                   	push   eax
   12487:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1248a:	e8 c9 f7 ff ff       	call   11c58 <strncmp>
   1248f:	83 c4 10             	add    esp,0x10
   12492:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:46
        //printk("findCommand compared %s and %s for %u, returned %u\n", command, cmds[i].name, strlen(cmds[i].name), ret);
        if(ret==0)
   12495:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12499:	75 08                	jne    124a3 <findCommand+0x58>
/home/yogi/src/os/chrisOS/src/bishell.c:49
        {
            //printk("findCommand returning %u", i+1);
            return i+1;
   1249b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1249e:	83 c0 01             	add    eax,0x1
   124a1:	eb 0f                	jmp    124b2 <findCommand+0x67>
/home/yogi/src/os/chrisOS/src/bishell.c:42 (discriminator 2)
int HIGH_CODE_SECTION findCommand(char* command)
{
    unsigned i;
    int ret;
    
    for(i = 0; i < NUMBER_OF_COMMANDS; i++)
   124a3:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:42 (discriminator 1)
   124a7:	83 7d f4 1b          	cmp    DWORD PTR [ebp-0xc],0x1b
   124ab:	76 ad                	jbe    1245a <findCommand+0xf>
/home/yogi/src/os/chrisOS/src/bishell.c:53
            //printk("findCommand returning %u", i+1);
            return i+1;
        }
    }
    //printk("findCommand returning -1");
            return -1;
   124ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/bishell.c:54
}
   124b2:	c9                   	leave  
   124b3:	c3                   	ret    

000124b4 <parseParamsShell>:
parseParamsShell():
/home/yogi/src/os/chrisOS/src/bishell.c:57

int HIGH_CODE_SECTION parseParamsShell(char* cmdLine, char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], int size)
    {
   124b4:	55                   	push   ebp
   124b5:	89 e5                	mov    ebp,esp
   124b7:	53                   	push   ebx
   124b8:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/bishell.c:58
    int x=0,y=0;
   124bb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   124c2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:59
    int lRetVal=0,parsedChars=0;
   124c9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   124d0:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:61
    
    memset(params,0, size);
   124d7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   124da:	83 ec 04             	sub    esp,0x4
   124dd:	50                   	push   eax
   124de:	6a 00                	push   0x0
   124e0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   124e3:	e8 d9 2e 01 00       	call   253c1 <memset>
   124e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:63
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   124eb:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   124f2:	e9 c9 00 00 00       	jmp    125c0 <parseParamsShell+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:66
    {
        //printk("c=%c\n", cmdLine[cnt]);
        if ( (cmdLine[cnt]==' ' || cmdLine[cnt]=='-') || cmdLine[cnt]==',')
   124f7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   124fa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   124fd:	01 d0                	add    eax,edx
   124ff:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12502:	3c 20                	cmp    al,0x20
   12504:	74 1e                	je     12524 <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:66 (discriminator 1)
   12506:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12509:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1250c:	01 d0                	add    eax,edx
   1250e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12511:	3c 2d                	cmp    al,0x2d
   12513:	74 0f                	je     12524 <parseParamsShell+0x70>
/home/yogi/src/os/chrisOS/src/bishell.c:66 (discriminator 2)
   12515:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12518:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1251b:	01 d0                	add    eax,edx
   1251d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12520:	3c 2c                	cmp    al,0x2c
   12522:	75 6f                	jne    12593 <parseParamsShell+0xdf>
/home/yogi/src/os/chrisOS/src/bishell.c:69
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
   12524:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12527:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1252a:	01 d0                	add    eax,edx
   1252c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1252f:	3c 2d                	cmp    al,0x2d
   12531:	74 0f                	je     12542 <parseParamsShell+0x8e>
/home/yogi/src/os/chrisOS/src/bishell.c:69 (discriminator 1)
   12533:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12536:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   12539:	01 d0                	add    eax,edx
   1253b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1253e:	3c 2f                	cmp    al,0x2f
   12540:	75 25                	jne    12567 <parseParamsShell+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:70
                params[y][x++]=cmdLine[cnt];
   12542:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12545:	c1 e0 09             	shl    eax,0x9
   12548:	89 c2                	mov    edx,eax
   1254a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1254d:	8d 0c 02             	lea    ecx,[edx+eax*1]
   12550:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12553:	8d 50 01             	lea    edx,[eax+0x1]
   12556:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12559:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1255c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1255f:	01 da                	add    edx,ebx
   12561:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12564:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:71
            params[y][x]='\0';
   12567:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1256a:	c1 e0 09             	shl    eax,0x9
   1256d:	89 c2                	mov    edx,eax
   1256f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   12572:	01 c2                	add    edx,eax
   12574:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12577:	01 d0                	add    eax,edx
   12579:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:72
            if (cnt>0)
   1257c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   12580:	74 36                	je     125b8 <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:73
                {x=0;y++;lRetVal++;}
   12582:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   12589:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
   1258d:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:72
        {
            //printk("Found a delimiter (%c), incrementing y to %u, setting x to 0\n",cmdLine[cnt],y+1);
            if (cmdLine[cnt]=='-' || cmdLine[cnt]=='/')
                params[y][x++]=cmdLine[cnt];
            params[y][x]='\0';
            if (cnt>0)
   12591:	eb 25                	jmp    125b8 <parseParamsShell+0x104>
/home/yogi/src/os/chrisOS/src/bishell.c:78
                {x=0;y++;lRetVal++;}
        }
        else
        {
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
   12593:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12596:	c1 e0 09             	shl    eax,0x9
   12599:	89 c2                	mov    edx,eax
   1259b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1259e:	8d 0c 02             	lea    ecx,[edx+eax*1]
   125a1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   125a4:	8d 50 01             	lea    edx,[eax+0x1]
   125a7:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   125aa:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   125ad:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   125b0:	01 da                	add    edx,ebx
   125b2:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   125b5:	88 14 01             	mov    BYTE PTR [ecx+eax*1],dl
/home/yogi/src/os/chrisOS/src/bishell.c:80 (discriminator 2)
        }
        parsedChars++;
   125b8:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:63 (discriminator 2)
    int x=0,y=0;
    int lRetVal=0,parsedChars=0;
    
    memset(params,0, size);
    //printk("commandLine=%s\n",cmdLine);
    for (unsigned cnt=0;cnt<strlen(cmdLine);cnt++)
   125bc:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:63 (discriminator 1)
   125c0:	83 ec 0c             	sub    esp,0xc
   125c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   125c6:	e8 0d 51 01 00       	call   276d8 <strlen>
   125cb:	83 c4 10             	add    esp,0x10
   125ce:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   125d1:	0f 87 20 ff ff ff    	ja     124f7 <parseParamsShell+0x43>
/home/yogi/src/os/chrisOS/src/bishell.c:82
            //printk("Found a character to put at position %u,%u\n",y,x);
            params[y][x++]=cmdLine[cnt];
        }
        parsedChars++;
    }
    if (parsedChars)
   125d7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   125db:	74 19                	je     125f6 <parseParamsShell+0x142>
/home/yogi/src/os/chrisOS/src/bishell.c:84
    {
        lRetVal++;
   125dd:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:85
        params[y][x]='\0';
   125e1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   125e4:	c1 e0 09             	shl    eax,0x9
   125e7:	89 c2                	mov    edx,eax
   125e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   125ec:	01 c2                	add    edx,eax
   125ee:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   125f1:	01 d0                	add    eax,edx
   125f3:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:90
    }
    //printk("Returning %u parameters:\n", lRetVal);
    //for (int cnt=0;cnt<lRetVal;cnt++)
        //printk("\tParameter %u: '%s'\n", cnt, params[cnt]);
    return lRetVal;
   125f6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/bishell.c:91
}
   125f9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   125fc:	c9                   	leave  
   125fd:	c3                   	ret    

000125fe <buildargv>:
buildargv():
/home/yogi/src/os/chrisOS/src/bishell.c:95

/*parts from http://*/
char **buildargv (const char *input)
{
   125fe:	55                   	push   ebp
   125ff:	89 e5                	mov    ebp,esp
   12601:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/bishell.c:98
  char *arg;
  char *copybuf;
  int squote = 0;
   12604:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:99
  int dquote = 0;
   1260b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:100
  int bsquote = 0;
   12612:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:101
  int argc = 0;
   12619:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:102
  int maxargc = 0;
   12620:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:103
  char **argv = NULL;
   12627:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:107
  char **nargv;
  //printk("buildargv: entering\n");
  
  if (input != NULL)
   1262e:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   12632:	0f 84 17 02 00 00    	je     1284f <buildargv+0x251>
/home/yogi/src/os/chrisOS/src/bishell.c:110
    {
      //printk("buildargv: command to parse (%u chars) is: '%s'\n",strlen (input) + 1,input);
      copybuf = (char *) mallocTemp (strlen (input) + 1);
   12638:	83 ec 0c             	sub    esp,0xc
   1263b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1263e:	e8 95 50 01 00       	call   276d8 <strlen>
   12643:	83 c4 10             	add    esp,0x10
   12646:	83 c0 01             	add    eax,0x1
   12649:	83 ec 0c             	sub    esp,0xc
   1264c:	50                   	push   eax
   1264d:	e8 06 37 01 00       	call   25d58 <mallocTemp>
   12652:	83 c4 10             	add    esp,0x10
   12655:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:118
	 argv, even for null strings.  See NOTES above, test case below. */
      do
	{
	  /* Pick off argv[argc] */

	  if ((maxargc == 0) || (argc >= (maxargc - 1)))
   12658:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   1265c:	74 0b                	je     12669 <buildargv+0x6b>
/home/yogi/src/os/chrisOS/src/bishell.c:118 (discriminator 1)
   1265e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12661:	83 e8 01             	sub    eax,0x1
   12664:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   12667:	7f 3d                	jg     126a6 <buildargv+0xa8>
/home/yogi/src/os/chrisOS/src/bishell.c:121
	    {
	      /* argv needs initialization, or expansion */
	      if (argv == NULL)
   12669:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   1266d:	75 1c                	jne    1268b <buildargv+0x8d>
/home/yogi/src/os/chrisOS/src/bishell.c:123
		{
		  maxargc = INITIAL_MAXARGC;
   1266f:	c7 45 dc 14 00 00 00 	mov    DWORD PTR [ebp-0x24],0x14
/home/yogi/src/os/chrisOS/src/bishell.c:124
		  nargv = (char **) mallocTemp (maxargc * sizeof (char *));
   12676:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12679:	c1 e0 02             	shl    eax,0x2
   1267c:	83 ec 0c             	sub    esp,0xc
   1267f:	50                   	push   eax
   12680:	e8 d3 36 01 00       	call   25d58 <mallocTemp>
   12685:	83 c4 10             	add    esp,0x10
   12688:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:126
		}
	      argv = nargv;
   1268b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1268e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:127
	      argv[argc] = NULL;
   12691:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12694:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1269b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1269e:	01 d0                	add    eax,edx
   126a0:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:130
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
   126a6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   126a9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:131
	  while (*input != EOS)
   126ac:	e9 ec 00 00 00       	jmp    1279d <buildargv+0x19f>
/home/yogi/src/os/chrisOS/src/bishell.c:133
	    {
	      if ((*input)==' ' && !squote && !dquote && !bsquote)
   126b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126b7:	3c 20                	cmp    al,0x20
   126b9:	75 16                	jne    126d1 <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:133 (discriminator 1)
   126bb:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   126bf:	75 10                	jne    126d1 <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:133 (discriminator 2)
   126c1:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   126c5:	75 0a                	jne    126d1 <buildargv+0xd3>
/home/yogi/src/os/chrisOS/src/bishell.c:133 (discriminator 3)
   126c7:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   126cb:	0f 84 da 00 00 00    	je     127ab <buildargv+0x1ad>
/home/yogi/src/os/chrisOS/src/bishell.c:139
		{
		  break;
		}
	      else
		{
		  if (bsquote)
   126d1:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   126d5:	74 1d                	je     126f4 <buildargv+0xf6>
/home/yogi/src/os/chrisOS/src/bishell.c:141
		    {
		      bsquote = 0;
   126d7:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:142
		      *arg++ = *input;
   126de:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   126e1:	8d 50 01             	lea    edx,[eax+0x1]
   126e4:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   126e7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   126ea:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   126ed:	88 10                	mov    BYTE PTR [eax],dl
   126ef:	e9 a5 00 00 00       	jmp    12799 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:144
		    }
		  else if (*input == '\\')
   126f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   126f7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   126fa:	3c 5c                	cmp    al,0x5c
   126fc:	75 0c                	jne    1270a <buildargv+0x10c>
/home/yogi/src/os/chrisOS/src/bishell.c:146
		    {
		      bsquote = 1;
   126fe:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
   12705:	e9 8f 00 00 00       	jmp    12799 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:148
		    }
		  else if (squote)
   1270a:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1270e:	74 26                	je     12736 <buildargv+0x138>
/home/yogi/src/os/chrisOS/src/bishell.c:150
		    {
		      if (*input == '\'')
   12710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12713:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12716:	3c 27                	cmp    al,0x27
   12718:	75 09                	jne    12723 <buildargv+0x125>
/home/yogi/src/os/chrisOS/src/bishell.c:152
			{
			  squote = 0;
   1271a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   12721:	eb 76                	jmp    12799 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:156
			}
		      else
			{
			  *arg++ = *input;
   12723:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12726:	8d 50 01             	lea    edx,[eax+0x1]
   12729:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1272c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1272f:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12732:	88 10                	mov    BYTE PTR [eax],dl
   12734:	eb 63                	jmp    12799 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:159
			}
		    }
		  else if (dquote)
   12736:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1273a:	74 26                	je     12762 <buildargv+0x164>
/home/yogi/src/os/chrisOS/src/bishell.c:161
		    {
		      if (*input == '"')
   1273c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1273f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12742:	3c 22                	cmp    al,0x22
   12744:	75 09                	jne    1274f <buildargv+0x151>
/home/yogi/src/os/chrisOS/src/bishell.c:163
			{
			  dquote = 0;
   12746:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   1274d:	eb 4a                	jmp    12799 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:167
			}
		      else
			{
			  *arg++ = *input;
   1274f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   12752:	8d 50 01             	lea    edx,[eax+0x1]
   12755:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12758:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1275b:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1275e:	88 10                	mov    BYTE PTR [eax],dl
   12760:	eb 37                	jmp    12799 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:172
			}
		    }
		  else
		    {
		      if (*input == '\'')
   12762:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12765:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12768:	3c 27                	cmp    al,0x27
   1276a:	75 09                	jne    12775 <buildargv+0x177>
/home/yogi/src/os/chrisOS/src/bishell.c:174
			{
			  squote = 1;
   1276c:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
   12773:	eb 24                	jmp    12799 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:176
			}
		      else if (*input == '"')
   12775:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12778:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1277b:	3c 22                	cmp    al,0x22
   1277d:	75 09                	jne    12788 <buildargv+0x18a>
/home/yogi/src/os/chrisOS/src/bishell.c:178
			{
			  dquote = 1;
   1277f:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
   12786:	eb 11                	jmp    12799 <buildargv+0x19b>
/home/yogi/src/os/chrisOS/src/bishell.c:182
			}
		      else
			{
			  *arg++ = *input;
   12788:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1278b:	8d 50 01             	lea    edx,[eax+0x1]
   1278e:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   12791:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   12794:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12797:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:186
                          //printk("Incremented input to %u, char=%u,value='%c'\n",input,*input,*input);
			}
		    }
		  input++;
   12799:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:131
	      argv = nargv;
	      argv[argc] = NULL;
	    }
	  /* Begin scanning arg */
	  arg = copybuf;
	  while (*input != EOS)
   1279d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   127a0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127a3:	84 c0                	test   al,al
   127a5:	0f 85 06 ff ff ff    	jne    126b1 <buildargv+0xb3>
/home/yogi/src/os/chrisOS/src/bishell.c:189
			}
		    }
		  input++;
		}
	    }
	  *arg = EOS;
   127ab:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   127ae:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:191
          //printk("Found an EOS\n");
          if (copybuf[0]!='\0')
   127b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   127b4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   127b7:	84 c0                	test   al,al
   127b9:	0f 84 82 00 00 00    	je     12841 <buildargv+0x243>
/home/yogi/src/os/chrisOS/src/bishell.c:193
          {
            char* temp=mallocTemp(strlen(copybuf)+1);
   127bf:	83 ec 0c             	sub    esp,0xc
   127c2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   127c5:	e8 0e 4f 01 00       	call   276d8 <strlen>
   127ca:	83 c4 10             	add    esp,0x10
   127cd:	83 c0 01             	add    eax,0x1
   127d0:	83 ec 0c             	sub    esp,0xc
   127d3:	50                   	push   eax
   127d4:	e8 7f 35 01 00       	call   25d58 <mallocTemp>
   127d9:	83 c4 10             	add    esp,0x10
   127dc:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:196
            //printk("*malloc'd temp to 0x%08X for %u characters\n",temp,strlen(copybuf));
            //printk("Copied copybuf @ 0x%08X to temp @ 0x%08X\n",copybuf,temp);
            strcpy(temp,copybuf);
   127df:	83 ec 08             	sub    esp,0x8
   127e2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   127e5:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   127e8:	e8 7b 4e 01 00       	call   27668 <strcpy>
   127ed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:197
            copybuf = (char *) mallocTemp (strlen (input) + 1);
   127f0:	83 ec 0c             	sub    esp,0xc
   127f3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   127f6:	e8 dd 4e 01 00       	call   276d8 <strlen>
   127fb:	83 c4 10             	add    esp,0x10
   127fe:	83 c0 01             	add    eax,0x1
   12801:	83 ec 0c             	sub    esp,0xc
   12804:	50                   	push   eax
   12805:	e8 4e 35 01 00       	call   25d58 <mallocTemp>
   1280a:	83 c4 10             	add    esp,0x10
   1280d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:198
            argv[argc] = temp;
   12810:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   12813:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   1281a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1281d:	01 c2                	add    edx,eax
   1281f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12822:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/bishell.c:200
            //printk("set argv[%u] to 0x%08X\n",argc,temp);
            argc++;
   12824:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:201
            argv[argc] = NULL;
   12828:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1282b:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12832:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   12835:	01 d0                	add    eax,edx
   12837:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:202
            input++;
   1283d:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:205
          }
	}
      while (*input != EOS);
   12841:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   12844:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12847:	84 c0                	test   al,al
   12849:	0f 85 09 fe ff ff    	jne    12658 <buildargv+0x5a>
/home/yogi/src/os/chrisOS/src/bishell.c:208
    }
  //printk("buildargv: exiting\n");
  return (argv);
   1284f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
/home/yogi/src/os/chrisOS/src/bishell.c:209
}
   12852:	c9                   	leave  
   12853:	c3                   	ret    

00012854 <QueryBDF>:
QueryBDF():
/home/yogi/src/os/chrisOS/src/bishell.c:217
{
    displayGDT();
}

void HIGH_CODE_SECTION QueryBDF(char* cmdline)
{
   12854:	55                   	push   ebp
   12855:	89 e5                	mov    ebp,esp
   12857:	56                   	push   esi
   12858:	53                   	push   ebx
   12859:	81 ec 00 14 00 00    	sub    esp,0x1400
/home/yogi/src/os/chrisOS/src/bishell.c:220
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];

    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1285f:	83 ec 04             	sub    esp,0x4
   12862:	68 00 14 00 00       	push   0x1400
   12867:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1286d:	50                   	push   eax
   1286e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   12871:	e8 3e fc ff ff       	call   124b4 <parseParamsShell>
   12876:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:222
    //printk("Params: 0=%u, 1=%u, 2=%u",strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
    pciQueryBDF(strtoul(params[0],0,16),strtoul(params[1],0,16),strtoul(params[2],0,16));
   12879:	83 ec 04             	sub    esp,0x4
   1287c:	6a 10                	push   0x10
   1287e:	6a 00                	push   0x0
   12880:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   12886:	05 00 04 00 00       	add    eax,0x400
   1288b:	50                   	push   eax
   1288c:	e8 6f 4e 01 00       	call   27700 <strtoul>
   12891:	83 c4 10             	add    esp,0x10
   12894:	0f b6 f0             	movzx  esi,al
   12897:	83 ec 04             	sub    esp,0x4
   1289a:	6a 10                	push   0x10
   1289c:	6a 00                	push   0x0
   1289e:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   128a4:	05 00 02 00 00       	add    eax,0x200
   128a9:	50                   	push   eax
   128aa:	e8 51 4e 01 00       	call   27700 <strtoul>
   128af:	83 c4 10             	add    esp,0x10
   128b2:	0f b6 d8             	movzx  ebx,al
   128b5:	83 ec 04             	sub    esp,0x4
   128b8:	6a 10                	push   0x10
   128ba:	6a 00                	push   0x0
   128bc:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   128c2:	50                   	push   eax
   128c3:	e8 38 4e 01 00       	call   27700 <strtoul>
   128c8:	83 c4 10             	add    esp,0x10
   128cb:	0f b6 c0             	movzx  eax,al
   128ce:	83 ec 04             	sub    esp,0x4
   128d1:	56                   	push   esi
   128d2:	53                   	push   ebx
   128d3:	50                   	push   eax
   128d4:	e8 04 40 00 00       	call   168dd <pciQueryBDF>
   128d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:223
}
   128dc:	90                   	nop
   128dd:	8d 65 f8             	lea    esp,[ebp-0x8]
   128e0:	5b                   	pop    ebx
   128e1:	5e                   	pop    esi
   128e2:	5d                   	pop    ebp
   128e3:	c3                   	ret    

000128e4 <dumpP>:
dumpP():
/home/yogi/src/os/chrisOS/src/bishell.c:226

void HIGH_CODE_SECTION dumpP(char* cmdline)
{
   128e4:	55                   	push   ebp
   128e5:	89 e5                	mov    ebp,esp
   128e7:	81 ec 58 16 00 00    	sub    esp,0x1658
/home/yogi/src/os/chrisOS/src/bishell.c:228
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   128ed:	83 ec 04             	sub    esp,0x4
   128f0:	68 00 14 00 00       	push   0x1400
   128f5:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   128fb:	50                   	push   eax
   128fc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   128ff:	e8 b0 fb ff ff       	call   124b4 <parseParamsShell>
   12904:	83 c4 10             	add    esp,0x10
   12907:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:229
    int lCount=0;
   1290a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:230
    uint32_t lAddress=0;
   12911:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:231
    char lCharType=' ', lCharSize=' ';
   12918:	c6 45 ef 20          	mov    BYTE PTR [ebp-0x11],0x20
   1291c:	c6 45 ee 20          	mov    BYTE PTR [ebp-0x12],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:232
    int lTemp=0;
   12920:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:234
    char lTempS[MAX_PARAM_WIDTH];
    bool addrIsVirtual=false;
   12927:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:235
    uint32_t cr3=0;
   1292b:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:240
    
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
   12932:	83 ec 04             	sub    esp,0x4
   12935:	68 00 02 00 00       	push   0x200
   1293a:	6a 00                	push   0x0
   1293c:	8d 85 b4 e9 ff ff    	lea    eax,[ebp-0x164c]
   12942:	50                   	push   eax
   12943:	e8 79 2a 01 00       	call   253c1 <memset>
   12948:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:241
    for (int cnt=0;cnt<=paramCount;cnt++)
   1294b:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   12952:	e9 84 01 00 00       	jmp    12adb <dumpP+0x1f7>
/home/yogi/src/os/chrisOS/src/bishell.c:243
    {
        printk("Processing parameter %u, value='%s'\n",cnt,params[cnt]);
   12957:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   1295d:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12960:	c1 e2 09             	shl    edx,0x9
   12963:	01 d0                	add    eax,edx
   12965:	83 ec 04             	sub    esp,0x4
   12968:	50                   	push   eax
   12969:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1296c:	68 44 5f 04 00       	push   0x45f44
   12971:	e8 91 4b 01 00       	call   27507 <printk>
   12976:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:244
        if (params[cnt][0]=='v')
   12979:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1297c:	c1 e0 09             	shl    eax,0x9
   1297f:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12982:	01 c8                	add    eax,ecx
   12984:	2d 44 14 00 00       	sub    eax,0x1444
   12989:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1298c:	3c 76                	cmp    al,0x76
   1298e:	75 09                	jne    12999 <dumpP+0xb5>
/home/yogi/src/os/chrisOS/src/bishell.c:247
        {
            //printk("Address is virtual parameter found\n");
            addrIsVirtual=true;
   12990:	c6 45 e7 01          	mov    BYTE PTR [ebp-0x19],0x1
   12994:	e9 3e 01 00 00       	jmp    12ad7 <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:249
        }
        else if (params[cnt][0]=='/')
   12999:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1299c:	c1 e0 09             	shl    eax,0x9
   1299f:	8d 4d f8             	lea    ecx,[ebp-0x8]
   129a2:	01 c8                	add    eax,ecx
   129a4:	2d 44 14 00 00       	sub    eax,0x1444
   129a9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129ac:	3c 2f                	cmp    al,0x2f
   129ae:	0f 85 af 00 00 00    	jne    12a63 <dumpP+0x17f>
/home/yogi/src/os/chrisOS/src/bishell.c:251
        {
            lTemp=1;
   129b4:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:252
            while (ISDIGIT(params[cnt][lTemp]))
   129bb:	eb 29                	jmp    129e6 <dumpP+0x102>
/home/yogi/src/os/chrisOS/src/bishell.c:254
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
   129bd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   129c0:	8d 50 ff             	lea    edx,[eax-0x1]
   129c3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   129c6:	c1 e0 09             	shl    eax,0x9
   129c9:	8d 4d f8             	lea    ecx,[ebp-0x8]
   129cc:	01 c1                	add    ecx,eax
   129ce:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   129d1:	01 c8                	add    eax,ecx
   129d3:	2d 44 14 00 00       	sub    eax,0x1444
   129d8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129db:	88 84 15 b4 e9 ff ff 	mov    BYTE PTR [ebp+edx*1-0x164c],al
/home/yogi/src/os/chrisOS/src/bishell.c:255
                lTemp++;
   129e2:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:252
            addrIsVirtual=true;
        }
        else if (params[cnt][0]=='/')
        {
            lTemp=1;
            while (ISDIGIT(params[cnt][lTemp]))
   129e6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   129e9:	c1 e0 09             	shl    eax,0x9
   129ec:	8d 4d f8             	lea    ecx,[ebp-0x8]
   129ef:	8d 14 01             	lea    edx,[ecx+eax*1]
   129f2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   129f5:	01 d0                	add    eax,edx
   129f7:	2d 44 14 00 00       	sub    eax,0x1444
   129fc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   129ff:	0f be c0             	movsx  eax,al
   12a02:	83 e8 30             	sub    eax,0x30
   12a05:	83 f8 09             	cmp    eax,0x9
   12a08:	76 b3                	jbe    129bd <dumpP+0xd9>
/home/yogi/src/os/chrisOS/src/bishell.c:257
            {
                lTempS[lTemp-1]=params[cnt][lTemp];
                lTemp++;
            }
            lCount=atoi(lTempS);
   12a0a:	83 ec 0c             	sub    esp,0xc
   12a0d:	8d 85 b4 e9 ff ff    	lea    eax,[ebp-0x164c]
   12a13:	50                   	push   eax
   12a14:	e8 70 28 01 00       	call   25289 <atoi>
   12a19:	83 c4 10             	add    esp,0x10
   12a1c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:258
            lCharSize=params[cnt][lTemp++];
   12a1f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a22:	8d 50 01             	lea    edx,[eax+0x1]
   12a25:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12a28:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12a2b:	c1 e2 09             	shl    edx,0x9
   12a2e:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a31:	01 ca                	add    edx,ecx
   12a33:	01 d0                	add    eax,edx
   12a35:	2d 44 14 00 00       	sub    eax,0x1444
   12a3a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12a3d:	88 45 ee             	mov    BYTE PTR [ebp-0x12],al
/home/yogi/src/os/chrisOS/src/bishell.c:259
            lCharType=params[cnt][lTemp++];
   12a40:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12a43:	8d 50 01             	lea    edx,[eax+0x1]
   12a46:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12a49:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12a4c:	c1 e2 09             	shl    edx,0x9
   12a4f:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a52:	01 ca                	add    edx,ecx
   12a54:	01 d0                	add    eax,edx
   12a56:	2d 44 14 00 00       	sub    eax,0x1444
   12a5b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12a5e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
   12a61:	eb 74                	jmp    12ad7 <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:261
        }
        else if (lAddress==0)
   12a63:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   12a67:	75 23                	jne    12a8c <dumpP+0x1a8>
/home/yogi/src/os/chrisOS/src/bishell.c:263
        {
            lAddress=strtoul(params[cnt],0,16);
   12a69:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   12a6f:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12a72:	c1 e2 09             	shl    edx,0x9
   12a75:	01 d0                	add    eax,edx
   12a77:	83 ec 04             	sub    esp,0x4
   12a7a:	6a 10                	push   0x10
   12a7c:	6a 00                	push   0x0
   12a7e:	50                   	push   eax
   12a7f:	e8 7c 4c 01 00       	call   27700 <strtoul>
   12a84:	83 c4 10             	add    esp,0x10
   12a87:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   12a8a:	eb 4b                	jmp    12ad7 <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:265
        }
        else if (params[cnt][0]!=0)
   12a8c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12a8f:	c1 e0 09             	shl    eax,0x9
   12a92:	8d 4d f8             	lea    ecx,[ebp-0x8]
   12a95:	01 c8                	add    eax,ecx
   12a97:	2d 44 14 00 00       	sub    eax,0x1444
   12a9c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12a9f:	84 c0                	test   al,al
   12aa1:	74 34                	je     12ad7 <dumpP+0x1f3>
/home/yogi/src/os/chrisOS/src/bishell.c:267
        {
            cr3=strtoul(params[cnt],0,16);
   12aa3:	8d 85 b4 eb ff ff    	lea    eax,[ebp-0x144c]
   12aa9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   12aac:	c1 e2 09             	shl    edx,0x9
   12aaf:	01 d0                	add    eax,edx
   12ab1:	83 ec 04             	sub    esp,0x4
   12ab4:	6a 10                	push   0x10
   12ab6:	6a 00                	push   0x0
   12ab8:	50                   	push   eax
   12ab9:	e8 42 4c 01 00       	call   27700 <strtoul>
   12abe:	83 c4 10             	add    esp,0x10
   12ac1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/bishell.c:268
            printk("Using CR3=0x%08X",cr3);
   12ac4:	83 ec 08             	sub    esp,0x8
   12ac7:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   12aca:	68 69 5f 04 00       	push   0x45f69
   12acf:	e8 33 4a 01 00       	call   27507 <printk>
   12ad4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:241 (discriminator 2)
    
//    for (int cnt=0;cnt<paramCount;cnt++)
//        printk("Param # %u is %s\n", cnt, params[cnt]);
    
    memset(lTempS,0,MAX_PARAM_WIDTH);
    for (int cnt=0;cnt<=paramCount;cnt++)
   12ad7:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:241 (discriminator 1)
   12adb:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   12ade:	3b 45 c4             	cmp    eax,DWORD PTR [ebp-0x3c]
   12ae1:	0f 8e 70 fe ff ff    	jle    12957 <dumpP+0x73>
/home/yogi/src/os/chrisOS/src/bishell.c:277
//    {
//        printk("Converted 0x%08X to ",lAddress);
//        lAddress=__pa(lAddress);
//        printk("%0x%08X\n", lAddress);
//    }
    if (lCount>65535)
   12ae7:	81 7d f4 ff ff 00 00 	cmp    DWORD PTR [ebp-0xc],0xffff
   12aee:	7e 18                	jle    12b08 <dumpP+0x224>
/home/yogi/src/os/chrisOS/src/bishell.c:279
    {
        printk("\nError: Count is too large (%u), max is 500, can't dump", lCount);
   12af0:	83 ec 08             	sub    esp,0x8
   12af3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12af6:	68 7c 5f 04 00       	push   0x45f7c
   12afb:	e8 07 4a 01 00       	call   27507 <printk>
   12b00:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:280
        return;
   12b03:	e9 1d 05 00 00       	jmp    13025 <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:282
    }
    if (lCharSize!='b' && lCharSize!='h' && lCharSize!='w' && lCharSize!='d')
   12b08:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12b0c:	74 2c                	je     12b3a <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:282 (discriminator 1)
   12b0e:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12b12:	74 26                	je     12b3a <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:282 (discriminator 2)
   12b14:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12b18:	74 20                	je     12b3a <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:282 (discriminator 3)
   12b1a:	80 7d ee 64          	cmp    BYTE PTR [ebp-0x12],0x64
   12b1e:	74 1a                	je     12b3a <dumpP+0x256>
/home/yogi/src/os/chrisOS/src/bishell.c:284
    {
        printk("\nError: Character size (%c) must be in bhwd", lCharSize);
   12b20:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12b24:	83 ec 08             	sub    esp,0x8
   12b27:	50                   	push   eax
   12b28:	68 b4 5f 04 00       	push   0x45fb4
   12b2d:	e8 d5 49 01 00       	call   27507 <printk>
   12b32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:285
        return;
   12b35:	e9 eb 04 00 00       	jmp    13025 <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:287
    }
    if (lCharType!='x' && lCharType!='c' && lCharType!='e')
   12b3a:	80 7d ef 78          	cmp    BYTE PTR [ebp-0x11],0x78
   12b3e:	74 26                	je     12b66 <dumpP+0x282>
/home/yogi/src/os/chrisOS/src/bishell.c:287 (discriminator 1)
   12b40:	80 7d ef 63          	cmp    BYTE PTR [ebp-0x11],0x63
   12b44:	74 20                	je     12b66 <dumpP+0x282>
/home/yogi/src/os/chrisOS/src/bishell.c:287 (discriminator 2)
   12b46:	80 7d ef 65          	cmp    BYTE PTR [ebp-0x11],0x65
   12b4a:	74 1a                	je     12b66 <dumpP+0x282>
/home/yogi/src/os/chrisOS/src/bishell.c:289
    {
        printk("\nError: Character type (%c) must be in xce", lCharType);
   12b4c:	0f be 45 ef          	movsx  eax,BYTE PTR [ebp-0x11]
   12b50:	83 ec 08             	sub    esp,0x8
   12b53:	50                   	push   eax
   12b54:	68 e0 5f 04 00       	push   0x45fe0
   12b59:	e8 a9 49 01 00       	call   27507 <printk>
   12b5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:290
        return;
   12b61:	e9 bf 04 00 00       	jmp    13025 <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:298
    {
        printk("Error: Requested address (0x%08X) or address+count (0x%08X) > memory size ()", lAddress, lAddress+lCount);
        return;
    }*/
    
    if (cr3!=0)
   12b66:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   12b6a:	74 37                	je     12ba3 <dumpP+0x2bf>
/home/yogi/src/os/chrisOS/src/bishell.c:300
    {
        lAddress=(kPagingGet4kPTEntryValueCR3(cr3,lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF) ;
   12b6c:	83 ec 08             	sub    esp,0x8
   12b6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12b72:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   12b75:	e8 5e e9 ff ff       	call   114d8 <kPagingGet4kPTEntryValueCR3>
   12b7a:	83 c4 10             	add    esp,0x10
   12b7d:	25 00 f0 ff ff       	and    eax,0xfffff000
   12b82:	89 c2                	mov    edx,eax
   12b84:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12b87:	25 ff 0f 00 00       	and    eax,0xfff
   12b8c:	09 d0                	or     eax,edx
   12b8e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:301
        printk(", physical address is 0x%08X\n");
   12b91:	83 ec 0c             	sub    esp,0xc
   12b94:	68 0b 60 04 00       	push   0x4600b
   12b99:	e8 69 49 01 00       	call   27507 <printk>
   12b9e:	83 c4 10             	add    esp,0x10
   12ba1:	eb 10                	jmp    12bb3 <dumpP+0x2cf>
/home/yogi/src/os/chrisOS/src/bishell.c:304
    }
    else
        printk("\n");
   12ba3:	83 ec 0c             	sub    esp,0xc
   12ba6:	68 29 60 04 00       	push   0x46029
   12bab:	e8 57 49 01 00       	call   27507 <printk>
   12bb0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:306
    
    printk("dump");
   12bb3:	83 ec 0c             	sub    esp,0xc
   12bb6:	68 2b 60 04 00       	push   0x4602b
   12bbb:	e8 47 49 01 00       	call   27507 <printk>
   12bc0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:307
    if (addrIsVirtual)
   12bc3:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   12bc7:	74 12                	je     12bdb <dumpP+0x2f7>
/home/yogi/src/os/chrisOS/src/bishell.c:308
        printk("V");
   12bc9:	83 ec 0c             	sub    esp,0xc
   12bcc:	68 30 60 04 00       	push   0x46030
   12bd1:	e8 31 49 01 00       	call   27507 <printk>
   12bd6:	83 c4 10             	add    esp,0x10
   12bd9:	eb 10                	jmp    12beb <dumpP+0x307>
/home/yogi/src/os/chrisOS/src/bishell.c:310
    else
        printk("P");
   12bdb:	83 ec 0c             	sub    esp,0xc
   12bde:	68 32 60 04 00       	push   0x46032
   12be3:	e8 1f 49 01 00       	call   27507 <printk>
   12be8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:311
    printk(": Dumping %u %c (%c) from 0x%08X\n", lCount, lCharSize , lCharType, lAddress);
   12beb:	0f be 55 ef          	movsx  edx,BYTE PTR [ebp-0x11]
   12bef:	0f be 45 ee          	movsx  eax,BYTE PTR [ebp-0x12]
   12bf3:	83 ec 0c             	sub    esp,0xc
   12bf6:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   12bf9:	52                   	push   edx
   12bfa:	50                   	push   eax
   12bfb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   12bfe:	68 34 60 04 00       	push   0x46034
   12c03:	e8 ff 48 01 00       	call   27507 <printk>
   12c08:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:312
    uint8_t* mem=(uint8_t*)lAddress;
   12c0b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12c0e:	89 45 c0             	mov    DWORD PTR [ebp-0x40],eax
/home/yogi/src/os/chrisOS/src/bishell.c:313
    uint16_t* memw=(uint16_t*)lAddress;
   12c11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12c14:	89 45 bc             	mov    DWORD PTR [ebp-0x44],eax
/home/yogi/src/os/chrisOS/src/bishell.c:314
    uint32_t* memd=(uint32_t*)lAddress;
   12c17:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12c1a:	89 45 b8             	mov    DWORD PTR [ebp-0x48],eax
/home/yogi/src/os/chrisOS/src/bishell.c:315
    uint32_t* memq=(uint32_t*)lAddress;
   12c1d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   12c20:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:316
    int lineCount=0;
   12c23:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:318
    int lEntriesPerLine;
    if (lCharSize=='b')
   12c2a:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12c2e:	75 07                	jne    12c37 <dumpP+0x353>
/home/yogi/src/os/chrisOS/src/bishell.c:319
        lEntriesPerLine=15;
   12c30:	c7 45 d4 0f 00 00 00 	mov    DWORD PTR [ebp-0x2c],0xf
/home/yogi/src/os/chrisOS/src/bishell.c:320
    if (lCharSize=='h')
   12c37:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12c3b:	75 09                	jne    12c46 <dumpP+0x362>
/home/yogi/src/os/chrisOS/src/bishell.c:321
        lEntriesPerLine=8;
   12c3d:	c7 45 d4 08 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x8
   12c44:	eb 16                	jmp    12c5c <dumpP+0x378>
/home/yogi/src/os/chrisOS/src/bishell.c:322
    else if (lCharSize=='w')
   12c46:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12c4a:	75 09                	jne    12c55 <dumpP+0x371>
/home/yogi/src/os/chrisOS/src/bishell.c:323
        lEntriesPerLine=4;
   12c4c:	c7 45 d4 04 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x4
   12c53:	eb 07                	jmp    12c5c <dumpP+0x378>
/home/yogi/src/os/chrisOS/src/bishell.c:325
    else
        lEntriesPerLine=3;
   12c55:	c7 45 d4 03 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x3
/home/yogi/src/os/chrisOS/src/bishell.c:326
    lTemp=0; //column
   12c5c:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:327
    if (!addrIsVirtual)
   12c63:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12c67:	83 f0 01             	xor    eax,0x1
   12c6a:	84 c0                	test   al,al
   12c6c:	74 17                	je     12c85 <dumpP+0x3a1>
/home/yogi/src/os/chrisOS/src/bishell.c:329
    {
        SWITCH_TO_NON_KERNEL_DATA_AND_STACK
   12c6e:	50                   	push   eax
   12c6f:	b8 18 00 00 00       	mov    eax,0x18
   12c74:	8e d8                	mov    ds,eax
   12c76:	8e c0                	mov    es,eax
   12c78:	8e e0                	mov    fs,eax
   12c7a:	8e e8                	mov    gs,eax
   12c7c:	8e d0                	mov    ss,eax
   12c7e:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:330
        __asm__("cli\n");
   12c7f:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/bishell.c:331
        doNonPagingJump();
   12c80:	e8 bb e6 fe ff       	call   1340 <doNonPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:333
    }
    if (lCharSize=='b')
   12c85:	80 7d ee 62          	cmp    BYTE PTR [ebp-0x12],0x62
   12c89:	0f 85 10 02 00 00    	jne    12e9f <dumpP+0x5bb>
/home/yogi/src/os/chrisOS/src/bishell.c:335
    {
        printk("%08X:\t", &mem[0]);
   12c8f:	83 ec 08             	sub    esp,0x8
   12c92:	ff 75 c0             	push   DWORD PTR [ebp-0x40]
   12c95:	68 56 60 04 00       	push   0x46056
   12c9a:	e8 68 48 01 00       	call   27507 <printk>
   12c9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:336
        for (int cnt=0;cnt<lCount;cnt++)
   12ca2:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
   12ca9:	e9 e3 01 00 00       	jmp    12e91 <dumpP+0x5ad>
/home/yogi/src/os/chrisOS/src/bishell.c:339
        {
            //After every 16 bytes, print the character values, a newline, and the start address of the next 16 bytes
            if (lTemp==16)
   12cae:	83 7d e8 10          	cmp    DWORD PTR [ebp-0x18],0x10
   12cb2:	0f 85 81 01 00 00    	jne    12e39 <dumpP+0x555>
/home/yogi/src/os/chrisOS/src/bishell.c:341
            {
                puts(" ");
   12cb8:	83 ec 0c             	sub    esp,0xc
   12cbb:	68 5d 60 04 00       	push   0x4605d
   12cc0:	e8 c1 55 00 00       	call   18286 <puts>
   12cc5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:342
                for (int cnt2=0;cnt2<16;cnt2++)
   12cc8:	c7 45 cc 00 00 00 00 	mov    DWORD PTR [ebp-0x34],0x0
   12ccf:	e9 05 01 00 00       	jmp    12dd9 <dumpP+0x4f5>
/home/yogi/src/os/chrisOS/src/bishell.c:344
                {
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
   12cd4:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12cda:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12cdd:	01 d0                	add    eax,edx
   12cdf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12ce2:	83 c8 20             	or     eax,0x20
   12ce5:	0f be c0             	movsx  eax,al
   12ce8:	83 e8 61             	sub    eax,0x61
   12ceb:	83 f8 19             	cmp    eax,0x19
   12cee:	0f 86 ad 00 00 00    	jbe    12da1 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 1)
   12cf4:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12cfa:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12cfd:	01 d0                	add    eax,edx
   12cff:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d02:	0f be c0             	movsx  eax,al
   12d05:	83 e8 30             	sub    eax,0x30
   12d08:	83 f8 09             	cmp    eax,0x9
   12d0b:	0f 86 90 00 00 00    	jbe    12da1 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 2)
   12d11:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d17:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d1a:	01 d0                	add    eax,edx
   12d1c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d1f:	3c 1f                	cmp    al,0x1f
   12d21:	7e 12                	jle    12d35 <dumpP+0x451>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 3)
   12d23:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d29:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d2c:	01 d0                	add    eax,edx
   12d2e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d31:	3c 2f                	cmp    al,0x2f
   12d33:	7e 6c                	jle    12da1 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 5)
   12d35:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d3b:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d3e:	01 d0                	add    eax,edx
   12d40:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d43:	3c 7a                	cmp    al,0x7a
   12d45:	7e 12                	jle    12d59 <dumpP+0x475>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 6)
   12d47:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d4d:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d50:	01 d0                	add    eax,edx
   12d52:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d55:	3c 7f                	cmp    al,0x7f
   12d57:	75 48                	jne    12da1 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 8)
   12d59:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d5f:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d62:	01 d0                	add    eax,edx
   12d64:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d67:	3c 5a                	cmp    al,0x5a
   12d69:	7e 12                	jle    12d7d <dumpP+0x499>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 9)
   12d6b:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d71:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d74:	01 d0                	add    eax,edx
   12d76:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d79:	3c 60                	cmp    al,0x60
   12d7b:	7e 24                	jle    12da1 <dumpP+0x4bd>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 11)
   12d7d:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d83:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d86:	01 d0                	add    eax,edx
   12d88:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d8b:	3c 39                	cmp    al,0x39
   12d8d:	7e 36                	jle    12dc5 <dumpP+0x4e1>
/home/yogi/src/os/chrisOS/src/bishell.c:344 (discriminator 12)
   12d8f:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12d95:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12d98:	01 d0                	add    eax,edx
   12d9a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12d9d:	3c 40                	cmp    al,0x40
   12d9f:	7f 24                	jg     12dc5 <dumpP+0x4e1>
/home/yogi/src/os/chrisOS/src/bishell.c:345
                        printk("%c",lTempS[cnt2]);
   12da1:	8d 95 b4 e9 ff ff    	lea    edx,[ebp-0x164c]
   12da7:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   12daa:	01 d0                	add    eax,edx
   12dac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12daf:	0f be c0             	movsx  eax,al
   12db2:	83 ec 08             	sub    esp,0x8
   12db5:	50                   	push   eax
   12db6:	68 5f 60 04 00       	push   0x4605f
   12dbb:	e8 47 47 01 00       	call   27507 <printk>
   12dc0:	83 c4 10             	add    esp,0x10
   12dc3:	eb 10                	jmp    12dd5 <dumpP+0x4f1>
/home/yogi/src/os/chrisOS/src/bishell.c:347
                    else
                        puts(".");
   12dc5:	83 ec 0c             	sub    esp,0xc
   12dc8:	68 62 60 04 00       	push   0x46062
   12dcd:	e8 b4 54 00 00       	call   18286 <puts>
   12dd2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:342 (discriminator 2)
        {
            //After every 16 bytes, print the character values, a newline, and the start address of the next 16 bytes
            if (lTemp==16)
            {
                puts(" ");
                for (int cnt2=0;cnt2<16;cnt2++)
   12dd5:	83 45 cc 01          	add    DWORD PTR [ebp-0x34],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:342 (discriminator 1)
   12dd9:	83 7d cc 0f          	cmp    DWORD PTR [ebp-0x34],0xf
   12ddd:	0f 8e f1 fe ff ff    	jle    12cd4 <dumpP+0x3f0>
/home/yogi/src/os/chrisOS/src/bishell.c:349
                    if (ISALPHA(lTempS[cnt2]) || ISDIGIT(lTempS[cnt2]) || (lTempS[cnt2]>=32&&lTempS[cnt2]<=47) || (lTempS[cnt2]>=123&&lTempS[cnt2]<=126) || (lTempS[cnt2]>=91&&lTempS[cnt2]<=96) || (lTempS[cnt2]>=58&&lTempS[cnt2]<=64) )
                        printk("%c",lTempS[cnt2]);
                    else
                        puts(".");
                }
                puts("\n");
   12de3:	83 ec 0c             	sub    esp,0xc
   12de6:	68 29 60 04 00       	push   0x46029
   12deb:	e8 96 54 00 00       	call   18286 <puts>
   12df0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:350
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12df3:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
   12df7:	83 7d d8 31          	cmp    DWORD PTR [ebp-0x28],0x31
   12dfb:	75 1c                	jne    12e19 <dumpP+0x535>
/home/yogi/src/os/chrisOS/src/bishell.c:352
                {
                    if (pauseDisplay(true))
   12dfd:	83 ec 0c             	sub    esp,0xc
   12e00:	6a 01                	push   0x1
   12e02:	e8 d1 2e 01 00       	call   25cd8 <pauseDisplay>
   12e07:	83 c4 10             	add    esp,0x10
   12e0a:	84 c0                	test   al,al
   12e0c:	0f 85 a2 00 00 00    	jne    12eb4 <dumpP+0x5d0>
/home/yogi/src/os/chrisOS/src/bishell.c:354
                        break;
                    lineCount=0;
   12e12:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:356
                }
                printk("%08X:\t", &mem[cnt]);
   12e19:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
   12e1c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12e1f:	01 d0                	add    eax,edx
   12e21:	83 ec 08             	sub    esp,0x8
   12e24:	50                   	push   eax
   12e25:	68 56 60 04 00       	push   0x46056
   12e2a:	e8 d8 46 01 00       	call   27507 <printk>
   12e2f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:357
                lTemp=0;
   12e32:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:359
            }
            printk("%02X ",mem[cnt]);
   12e39:	8b 55 d0             	mov    edx,DWORD PTR [ebp-0x30]
   12e3c:	8b 45 c0             	mov    eax,DWORD PTR [ebp-0x40]
   12e3f:	01 d0                	add    eax,edx
   12e41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   12e44:	0f b6 c0             	movzx  eax,al
   12e47:	83 ec 08             	sub    esp,0x8
   12e4a:	50                   	push   eax
   12e4b:	68 64 60 04 00       	push   0x46064
   12e50:	e8 b2 46 01 00       	call   27507 <printk>
   12e55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:360
            lTempS[lTemp++]=mem[cnt];
   12e58:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12e5b:	8d 50 01             	lea    edx,[eax+0x1]
   12e5e:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   12e61:	8b 4d d0             	mov    ecx,DWORD PTR [ebp-0x30]
   12e64:	8b 55 c0             	mov    edx,DWORD PTR [ebp-0x40]
   12e67:	01 ca                	add    edx,ecx
   12e69:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   12e6c:	88 94 05 b4 e9 ff ff 	mov    BYTE PTR [ebp+eax*1-0x164c],dl
/home/yogi/src/os/chrisOS/src/bishell.c:361
            if (lTemp%4==0)
   12e73:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12e76:	83 e0 03             	and    eax,0x3
   12e79:	85 c0                	test   eax,eax
   12e7b:	75 10                	jne    12e8d <dumpP+0x5a9>
/home/yogi/src/os/chrisOS/src/bishell.c:362
                printk(" ");
   12e7d:	83 ec 0c             	sub    esp,0xc
   12e80:	68 5d 60 04 00       	push   0x4605d
   12e85:	e8 7d 46 01 00       	call   27507 <printk>
   12e8a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:336 (discriminator 2)
        doNonPagingJump();
    }
    if (lCharSize=='b')
    {
        printk("%08X:\t", &mem[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12e8d:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:336 (discriminator 1)
   12e91:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   12e94:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12e97:	0f 8c 11 fe ff ff    	jl     12cae <dumpP+0x3ca>
   12e9d:	eb 16                	jmp    12eb5 <dumpP+0x5d1>
/home/yogi/src/os/chrisOS/src/bishell.c:366
            if (lTemp%4==0)
                printk(" ");
        }
    }
    else
        printk("%08X:", &memw[0]);
   12e9f:	83 ec 08             	sub    esp,0x8
   12ea2:	ff 75 bc             	push   DWORD PTR [ebp-0x44]
   12ea5:	68 6a 60 04 00       	push   0x4606a
   12eaa:	e8 58 46 01 00       	call   27507 <printk>
   12eaf:	83 c4 10             	add    esp,0x10
   12eb2:	eb 01                	jmp    12eb5 <dumpP+0x5d1>
/home/yogi/src/os/chrisOS/src/bishell.c:353
                }
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12eb4:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:367
                printk(" ");
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12eb5:	c7 45 c8 00 00 00 00 	mov    DWORD PTR [ebp-0x38],0x0
   12ebc:	e9 0f 01 00 00       	jmp    12fd0 <dumpP+0x6ec>
/home/yogi/src/os/chrisOS/src/bishell.c:369
        {
            if (lTemp==lEntriesPerLine)
   12ec1:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   12ec4:	3b 45 d4             	cmp    eax,DWORD PTR [ebp-0x2c]
   12ec7:	0f 85 a9 00 00 00    	jne    12f76 <dumpP+0x692>
/home/yogi/src/os/chrisOS/src/bishell.c:371
            {
                puts("\n");
   12ecd:	83 ec 0c             	sub    esp,0xc
   12ed0:	68 29 60 04 00       	push   0x46029
   12ed5:	e8 ac 53 00 00       	call   18286 <puts>
   12eda:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:372
                if (++lineCount==SYS_VGA_HEIGHT-1)
   12edd:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
   12ee1:	83 7d d8 31          	cmp    DWORD PTR [ebp-0x28],0x31
   12ee5:	75 1c                	jne    12f03 <dumpP+0x61f>
/home/yogi/src/os/chrisOS/src/bishell.c:374
                {
                    if (pauseDisplay(true))
   12ee7:	83 ec 0c             	sub    esp,0xc
   12eea:	6a 01                	push   0x1
   12eec:	e8 e7 2d 01 00       	call   25cd8 <pauseDisplay>
   12ef1:	83 c4 10             	add    esp,0x10
   12ef4:	84 c0                	test   al,al
   12ef6:	0f 85 e2 00 00 00    	jne    12fde <dumpP+0x6fa>
/home/yogi/src/os/chrisOS/src/bishell.c:376
                        break;
                    lineCount=0;
   12efc:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:378
                }
                lTemp=0;
   12f03:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:379
                if (lCharSize=='h')
   12f0a:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12f0e:	75 1e                	jne    12f2e <dumpP+0x64a>
/home/yogi/src/os/chrisOS/src/bishell.c:380
                    printk("%08X:", &memw[cnt]);
   12f10:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12f13:	8d 14 00             	lea    edx,[eax+eax*1]
   12f16:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12f19:	01 d0                	add    eax,edx
   12f1b:	83 ec 08             	sub    esp,0x8
   12f1e:	50                   	push   eax
   12f1f:	68 6a 60 04 00       	push   0x4606a
   12f24:	e8 de 45 01 00       	call   27507 <printk>
   12f29:	83 c4 10             	add    esp,0x10
   12f2c:	eb 48                	jmp    12f76 <dumpP+0x692>
/home/yogi/src/os/chrisOS/src/bishell.c:381
                else if (lCharSize=='w')
   12f2e:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12f32:	75 22                	jne    12f56 <dumpP+0x672>
/home/yogi/src/os/chrisOS/src/bishell.c:382
                    printk("%08X:", &memd[cnt]);
   12f34:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12f37:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12f3e:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   12f41:	01 d0                	add    eax,edx
   12f43:	83 ec 08             	sub    esp,0x8
   12f46:	50                   	push   eax
   12f47:	68 6a 60 04 00       	push   0x4606a
   12f4c:	e8 b6 45 01 00       	call   27507 <printk>
   12f51:	83 c4 10             	add    esp,0x10
   12f54:	eb 20                	jmp    12f76 <dumpP+0x692>
/home/yogi/src/os/chrisOS/src/bishell.c:384
                else
                    printk("%08X:", &memq[cnt]);
   12f56:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12f59:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12f60:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   12f63:	01 d0                	add    eax,edx
   12f65:	83 ec 08             	sub    esp,0x8
   12f68:	50                   	push   eax
   12f69:	68 6a 60 04 00       	push   0x4606a
   12f6e:	e8 94 45 01 00       	call   27507 <printk>
   12f73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:386
            }
            if (lCharSize=='h')
   12f76:	80 7d ee 68          	cmp    BYTE PTR [ebp-0x12],0x68
   12f7a:	75 24                	jne    12fa0 <dumpP+0x6bc>
/home/yogi/src/os/chrisOS/src/bishell.c:387
                printk("%04X ",memw[cnt]);
   12f7c:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12f7f:	8d 14 00             	lea    edx,[eax+eax*1]
   12f82:	8b 45 bc             	mov    eax,DWORD PTR [ebp-0x44]
   12f85:	01 d0                	add    eax,edx
   12f87:	0f b7 00             	movzx  eax,WORD PTR [eax]
   12f8a:	0f b7 c0             	movzx  eax,ax
   12f8d:	83 ec 08             	sub    esp,0x8
   12f90:	50                   	push   eax
   12f91:	68 70 60 04 00       	push   0x46070
   12f96:	e8 6c 45 01 00       	call   27507 <printk>
   12f9b:	83 c4 10             	add    esp,0x10
   12f9e:	eb 28                	jmp    12fc8 <dumpP+0x6e4>
/home/yogi/src/os/chrisOS/src/bishell.c:388
            else if (lCharSize=='w')
   12fa0:	80 7d ee 77          	cmp    BYTE PTR [ebp-0x12],0x77
   12fa4:	75 22                	jne    12fc8 <dumpP+0x6e4>
/home/yogi/src/os/chrisOS/src/bishell.c:389
                printk("%08X ", memd[cnt]);
   12fa6:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12fa9:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   12fb0:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   12fb3:	01 d0                	add    eax,edx
   12fb5:	8b 00                	mov    eax,DWORD PTR [eax]
   12fb7:	83 ec 08             	sub    esp,0x8
   12fba:	50                   	push   eax
   12fbb:	68 76 60 04 00       	push   0x46076
   12fc0:	e8 42 45 01 00       	call   27507 <printk>
   12fc5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:390 (discriminator 2)
            lTemp++;
   12fc8:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:367 (discriminator 2)
                printk(" ");
        }
    }
    else
        printk("%08X:", &memw[0]);
        for (int cnt=0;cnt<lCount;cnt++)
   12fcc:	83 45 c8 01          	add    DWORD PTR [ebp-0x38],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:367 (discriminator 1)
   12fd0:	8b 45 c8             	mov    eax,DWORD PTR [ebp-0x38]
   12fd3:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   12fd6:	0f 8c e5 fe ff ff    	jl     12ec1 <dumpP+0x5dd>
   12fdc:	eb 01                	jmp    12fdf <dumpP+0x6fb>
/home/yogi/src/os/chrisOS/src/bishell.c:375
            {
                puts("\n");
                if (++lineCount==SYS_VGA_HEIGHT-1)
                {
                    if (pauseDisplay(true))
                        break;
   12fde:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:392
                printk("%04X ",memw[cnt]);
            else if (lCharSize=='w')
                printk("%08X ", memd[cnt]);
            lTemp++;
        }
    puts("\n");
   12fdf:	83 ec 0c             	sub    esp,0xc
   12fe2:	68 29 60 04 00       	push   0x46029
   12fe7:	e8 9a 52 00 00       	call   18286 <puts>
   12fec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:393
    if (!addrIsVirtual)
   12fef:	0f b6 45 e7          	movzx  eax,BYTE PTR [ebp-0x19]
   12ff3:	83 f0 01             	xor    eax,0x1
   12ff6:	84 c0                	test   al,al
   12ff8:	74 2b                	je     13025 <pEnableJmp+0x18>
/home/yogi/src/os/chrisOS/src/bishell.c:395
    {
        __asm__("push eax\nmov eax,cr0\n or eax,0x80000000\n mov cr0,eax\nljmp 0x20:pEnableJmp\npEnableJmp:pop eax\n");
   12ffa:	50                   	push   eax
   12ffb:	0f 20 c0             	mov    eax,cr0
   12ffe:	0d 00 00 00 80       	or     eax,0x80000000
   13003:	0f 22 c0             	mov    cr0,eax
   13006:	ea 0d 30 01 00 20 00 	jmp    0x20:0x1300d

0001300d <pEnableJmp>:
   1300d:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:396
       doPagingJump();
   1300e:	e8 16 e3 fe ff       	call   1329 <doPagingJump>
/home/yogi/src/os/chrisOS/src/bishell.c:397
        SWITCH_TO_KERNEL_DATA_AND_STACK
   13013:	50                   	push   eax
   13014:	b8 10 00 00 00       	mov    eax,0x10
   13019:	8e d8                	mov    ds,eax
   1301b:	8e c0                	mov    es,eax
   1301d:	8e e0                	mov    fs,eax
   1301f:	8e e8                	mov    gs,eax
   13021:	8e d0                	mov    ss,eax
   13023:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/bishell.c:398
        __asm__("sti\n");
   13024:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/bishell.c:400
    }
}
   13025:	c9                   	leave  
   13026:	c3                   	ret    

00013027 <dumpV>:
dumpV():
/home/yogi/src/os/chrisOS/src/bishell.c:403

void HIGH_CODE_SECTION dumpV(char* cmdline)
{
   13027:	55                   	push   ebp
   13028:	89 e5                	mov    ebp,esp
   1302a:	81 ec 08 02 00 00    	sub    esp,0x208
/home/yogi/src/os/chrisOS/src/bishell.c:405
    char newCmdLine[MAX_PARAM_WIDTH];
    strcpy(newCmdLine,cmdline);
   13030:	83 ec 08             	sub    esp,0x8
   13033:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13036:	8d 85 f8 fd ff ff    	lea    eax,[ebp-0x208]
   1303c:	50                   	push   eax
   1303d:	e8 26 46 01 00       	call   27668 <strcpy>
   13042:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:406
    strcat(newCmdLine," v");
   13045:	83 ec 08             	sub    esp,0x8
   13048:	68 7c 60 04 00       	push   0x4607c
   1304d:	8d 85 f8 fd ff ff    	lea    eax,[ebp-0x208]
   13053:	50                   	push   eax
   13054:	e8 27 45 01 00       	call   27580 <strcat>
   13059:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:407
    dumpP(newCmdLine);
   1305c:	83 ec 0c             	sub    esp,0xc
   1305f:	8d 85 f8 fd ff ff    	lea    eax,[ebp-0x208]
   13065:	50                   	push   eax
   13066:	e8 79 f8 ff ff       	call   128e4 <dumpP>
   1306b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:408
}
   1306e:	90                   	nop
   1306f:	c9                   	leave  
   13070:	c3                   	ret    

00013071 <helpMe>:
helpMe():
/home/yogi/src/os/chrisOS/src/bishell.c:411

void HIGH_CODE_SECTION helpMe()
{
   13071:	55                   	push   ebp
   13072:	89 e5                	mov    ebp,esp
   13074:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/bishell.c:412
    printk("Help:\n");
   13077:	83 ec 0c             	sub    esp,0xc
   1307a:	68 7f 60 04 00       	push   0x4607f
   1307f:	e8 83 44 01 00       	call   27507 <printk>
   13084:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:413
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   13087:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1308e:	eb 30                	jmp    130c0 <helpMe+0x4f>
/home/yogi/src/os/chrisOS/src/bishell.c:414 (discriminator 3)
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
   13090:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13093:	c1 e0 04             	shl    eax,0x4
   13096:	05 04 8c 02 00       	add    eax,0x28c04
   1309b:	8b 10                	mov    edx,DWORD PTR [eax]
   1309d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   130a0:	c1 e0 04             	shl    eax,0x4
   130a3:	05 00 8c 02 00       	add    eax,0x28c00
   130a8:	8b 00                	mov    eax,DWORD PTR [eax]
   130aa:	83 ec 04             	sub    esp,0x4
   130ad:	52                   	push   edx
   130ae:	50                   	push   eax
   130af:	68 86 60 04 00       	push   0x46086
   130b4:	e8 4e 44 01 00       	call   27507 <printk>
   130b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:413 (discriminator 3)
}

void HIGH_CODE_SECTION helpMe()
{
    printk("Help:\n");
    for (unsigned cnt=0;cnt<sizeof(cmds)/sizeof(command_table_t);cnt++)
   130bc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:413 (discriminator 1)
   130c0:	83 7d f4 1b          	cmp    DWORD PTR [ebp-0xc],0x1b
   130c4:	76 ca                	jbe    13090 <helpMe+0x1f>
/home/yogi/src/os/chrisOS/src/bishell.c:415
        printk("\t%s: %s\n", cmds[cnt].name, cmds[cnt].description);
}
   130c6:	90                   	nop
   130c7:	c9                   	leave  
   130c8:	c3                   	ret    

000130c9 <inPortB>:
inPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:418

void HIGH_CODE_SECTION inPortB(char* cmdline)
{
   130c9:	55                   	push   ebp
   130ca:	89 e5                	mov    ebp,esp
   130cc:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:420
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   130d2:	83 ec 04             	sub    esp,0x4
   130d5:	68 00 14 00 00       	push   0x1400
   130da:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   130e0:	50                   	push   eax
   130e1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   130e4:	e8 cb f3 ff ff       	call   124b4 <parseParamsShell>
   130e9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:422
   
   uint8_t inVal=inb(strtoul(params[0],0,16));
   130ec:	83 ec 04             	sub    esp,0x4
   130ef:	6a 10                	push   0x10
   130f1:	6a 00                	push   0x0
   130f3:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   130f9:	50                   	push   eax
   130fa:	e8 01 46 01 00       	call   27700 <strtoul>
   130ff:	83 c4 10             	add    esp,0x10
   13102:	0f b7 c0             	movzx  eax,ax
   13105:	83 ec 0c             	sub    esp,0xc
   13108:	50                   	push   eax
   13109:	e8 43 f1 ff ff       	call   12251 <inb>
   1310e:	83 c4 10             	add    esp,0x10
   13111:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:423
   printk("0x%02X\n",inVal);
   13114:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   13118:	83 ec 08             	sub    esp,0x8
   1311b:	50                   	push   eax
   1311c:	68 8f 60 04 00       	push   0x4608f
   13121:	e8 e1 43 01 00       	call   27507 <printk>
   13126:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:424
}
   13129:	90                   	nop
   1312a:	c9                   	leave  
   1312b:	c3                   	ret    

0001312c <inPortW>:
inPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:427

void HIGH_CODE_SECTION inPortW(char* cmdline)
{
   1312c:	55                   	push   ebp
   1312d:	89 e5                	mov    ebp,esp
   1312f:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:429
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13135:	83 ec 04             	sub    esp,0x4
   13138:	68 00 14 00 00       	push   0x1400
   1313d:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   13143:	50                   	push   eax
   13144:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13147:	e8 68 f3 ff ff       	call   124b4 <parseParamsShell>
   1314c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:431
   
   uint8_t inVal=inw(strtoul(params[0],0,16));
   1314f:	83 ec 04             	sub    esp,0x4
   13152:	6a 10                	push   0x10
   13154:	6a 00                	push   0x0
   13156:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   1315c:	50                   	push   eax
   1315d:	e8 9e 45 01 00       	call   27700 <strtoul>
   13162:	83 c4 10             	add    esp,0x10
   13165:	0f b7 c0             	movzx  eax,ax
   13168:	83 ec 0c             	sub    esp,0xc
   1316b:	50                   	push   eax
   1316c:	e8 fd f0 ff ff       	call   1226e <inw>
   13171:	83 c4 10             	add    esp,0x10
   13174:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:432
   printk("0x%04X\n",inVal);
   13177:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1317b:	83 ec 08             	sub    esp,0x8
   1317e:	50                   	push   eax
   1317f:	68 97 60 04 00       	push   0x46097
   13184:	e8 7e 43 01 00       	call   27507 <printk>
   13189:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:433
}
   1318c:	90                   	nop
   1318d:	c9                   	leave  
   1318e:	c3                   	ret    

0001318f <inPortD>:
inPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:436

void HIGH_CODE_SECTION inPortD(char* cmdline)
{
   1318f:	55                   	push   ebp
   13190:	89 e5                	mov    ebp,esp
   13192:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:438
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13198:	83 ec 04             	sub    esp,0x4
   1319b:	68 00 14 00 00       	push   0x1400
   131a0:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   131a6:	50                   	push   eax
   131a7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   131aa:	e8 05 f3 ff ff       	call   124b4 <parseParamsShell>
   131af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:440
   
   uint8_t inVal=inl(strtoul(params[0],0,16));
   131b2:	83 ec 04             	sub    esp,0x4
   131b5:	6a 10                	push   0x10
   131b7:	6a 00                	push   0x0
   131b9:	8d 85 f7 eb ff ff    	lea    eax,[ebp-0x1409]
   131bf:	50                   	push   eax
   131c0:	e8 3b 45 01 00       	call   27700 <strtoul>
   131c5:	83 c4 10             	add    esp,0x10
   131c8:	0f b7 c0             	movzx  eax,ax
   131cb:	83 ec 0c             	sub    esp,0xc
   131ce:	50                   	push   eax
   131cf:	e8 b9 f0 ff ff       	call   1228d <inl>
   131d4:	83 c4 10             	add    esp,0x10
   131d7:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/bishell.c:441
   printk("0x%08X\n",inVal);
   131da:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   131de:	83 ec 08             	sub    esp,0x8
   131e1:	50                   	push   eax
   131e2:	68 9f 60 04 00       	push   0x4609f
   131e7:	e8 1b 43 01 00       	call   27507 <printk>
   131ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:442
}
   131ef:	90                   	nop
   131f0:	c9                   	leave  
   131f1:	c3                   	ret    

000131f2 <outPortB>:
outPortB():
/home/yogi/src/os/chrisOS/src/bishell.c:445

void HIGH_CODE_SECTION outPortB(char* cmdline)
{
   131f2:	55                   	push   ebp
   131f3:	89 e5                	mov    ebp,esp
   131f5:	53                   	push   ebx
   131f6:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:447
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   131fc:	83 ec 04             	sub    esp,0x4
   131ff:	68 00 14 00 00       	push   0x1400
   13204:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1320a:	50                   	push   eax
   1320b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1320e:	e8 a1 f2 ff ff       	call   124b4 <parseParamsShell>
   13213:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:449
   
   outb(strtoul(params[0],0,16),strtoul(params[1],0,16));
   13216:	83 ec 04             	sub    esp,0x4
   13219:	6a 10                	push   0x10
   1321b:	6a 00                	push   0x0
   1321d:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13223:	05 00 02 00 00       	add    eax,0x200
   13228:	50                   	push   eax
   13229:	e8 d2 44 01 00       	call   27700 <strtoul>
   1322e:	83 c4 10             	add    esp,0x10
   13231:	0f b6 d8             	movzx  ebx,al
   13234:	83 ec 04             	sub    esp,0x4
   13237:	6a 10                	push   0x10
   13239:	6a 00                	push   0x0
   1323b:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13241:	50                   	push   eax
   13242:	e8 b9 44 01 00       	call   27700 <strtoul>
   13247:	83 c4 10             	add    esp,0x10
   1324a:	0f b7 c0             	movzx  eax,ax
   1324d:	83 ec 08             	sub    esp,0x8
   13250:	53                   	push   ebx
   13251:	50                   	push   eax
   13252:	e8 a2 ef ff ff       	call   121f9 <outb>
   13257:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:450
}
   1325a:	90                   	nop
   1325b:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1325e:	c9                   	leave  
   1325f:	c3                   	ret    

00013260 <outPortW>:
outPortW():
/home/yogi/src/os/chrisOS/src/bishell.c:453

void HIGH_CODE_SECTION outPortW(char* cmdline)
{
   13260:	55                   	push   ebp
   13261:	89 e5                	mov    ebp,esp
   13263:	53                   	push   ebx
   13264:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:455
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1326a:	83 ec 04             	sub    esp,0x4
   1326d:	68 00 14 00 00       	push   0x1400
   13272:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13278:	50                   	push   eax
   13279:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1327c:	e8 33 f2 ff ff       	call   124b4 <parseParamsShell>
   13281:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:457
   
   outw(strtoul(params[0],0,16),strtoul(params[1],0,16));
   13284:	83 ec 04             	sub    esp,0x4
   13287:	6a 10                	push   0x10
   13289:	6a 00                	push   0x0
   1328b:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   13291:	05 00 02 00 00       	add    eax,0x200
   13296:	50                   	push   eax
   13297:	e8 64 44 01 00       	call   27700 <strtoul>
   1329c:	83 c4 10             	add    esp,0x10
   1329f:	0f b7 d8             	movzx  ebx,ax
   132a2:	83 ec 04             	sub    esp,0x4
   132a5:	6a 10                	push   0x10
   132a7:	6a 00                	push   0x0
   132a9:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   132af:	50                   	push   eax
   132b0:	e8 4b 44 01 00       	call   27700 <strtoul>
   132b5:	83 c4 10             	add    esp,0x10
   132b8:	0f b7 c0             	movzx  eax,ax
   132bb:	83 ec 08             	sub    esp,0x8
   132be:	53                   	push   ebx
   132bf:	50                   	push   eax
   132c0:	e8 53 ef ff ff       	call   12218 <outw>
   132c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:458
}
   132c8:	90                   	nop
   132c9:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   132cc:	c9                   	leave  
   132cd:	c3                   	ret    

000132ce <outPortD>:
outPortD():
/home/yogi/src/os/chrisOS/src/bishell.c:461

void HIGH_CODE_SECTION outPortD(char* cmdline)
{
   132ce:	55                   	push   ebp
   132cf:	89 e5                	mov    ebp,esp
   132d1:	53                   	push   ebx
   132d2:	81 ec 04 14 00 00    	sub    esp,0x1404
/home/yogi/src/os/chrisOS/src/bishell.c:463
     char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
   parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   132d8:	83 ec 04             	sub    esp,0x4
   132db:	68 00 14 00 00       	push   0x1400
   132e0:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   132e6:	50                   	push   eax
   132e7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   132ea:	e8 c5 f1 ff ff       	call   124b4 <parseParamsShell>
   132ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:465
   
   outl(strtoul(params[0],0,16),strtoul(params[1],0,16));
   132f2:	83 ec 04             	sub    esp,0x4
   132f5:	6a 10                	push   0x10
   132f7:	6a 00                	push   0x0
   132f9:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   132ff:	05 00 02 00 00       	add    eax,0x200
   13304:	50                   	push   eax
   13305:	e8 f6 43 01 00       	call   27700 <strtoul>
   1330a:	83 c4 10             	add    esp,0x10
   1330d:	89 c3                	mov    ebx,eax
   1330f:	83 ec 04             	sub    esp,0x4
   13312:	6a 10                	push   0x10
   13314:	6a 00                	push   0x0
   13316:	8d 85 f8 eb ff ff    	lea    eax,[ebp-0x1408]
   1331c:	50                   	push   eax
   1331d:	e8 de 43 01 00       	call   27700 <strtoul>
   13322:	83 c4 10             	add    esp,0x10
   13325:	0f b7 c0             	movzx  eax,ax
   13328:	83 ec 08             	sub    esp,0x8
   1332b:	53                   	push   ebx
   1332c:	50                   	push   eax
   1332d:	e8 07 ef ff ff       	call   12239 <outl>
   13332:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:466
}
   13335:	90                   	nop
   13336:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13339:	c9                   	leave  
   1333a:	c3                   	ret    

0001333b <writeBytes>:
writeBytes():
/home/yogi/src/os/chrisOS/src/bishell.c:469

void HIGH_CODE_SECTION writeBytes(char* cmdline)
{
   1333b:	55                   	push   ebp
   1333c:	89 e5                	mov    ebp,esp
   1333e:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:471
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13344:	83 ec 04             	sub    esp,0x4
   13347:	68 00 14 00 00       	push   0x1400
   1334c:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13352:	50                   	push   eax
   13353:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13356:	e8 59 f1 ff ff       	call   124b4 <parseParamsShell>
   1335b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:473

    uint8_t* bytes=(uint8_t*)strtoul(params[0],0,16);
   1335e:	83 ec 04             	sub    esp,0x4
   13361:	6a 10                	push   0x10
   13363:	6a 00                	push   0x0
   13365:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1336b:	50                   	push   eax
   1336c:	e8 8f 43 01 00       	call   27700 <strtoul>
   13371:	83 c4 10             	add    esp,0x10
   13374:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:474
    bytes[0]=strtoul(params[1],0,16);
   13377:	83 ec 04             	sub    esp,0x4
   1337a:	6a 10                	push   0x10
   1337c:	6a 00                	push   0x0
   1337e:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13384:	05 00 02 00 00       	add    eax,0x200
   13389:	50                   	push   eax
   1338a:	e8 71 43 01 00       	call   27700 <strtoul>
   1338f:	83 c4 10             	add    esp,0x10
   13392:	89 c2                	mov    edx,eax
   13394:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13397:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/bishell.c:475
}
   13399:	90                   	nop
   1339a:	c9                   	leave  
   1339b:	c3                   	ret    

0001339c <writeWords>:
writeWords():
/home/yogi/src/os/chrisOS/src/bishell.c:478

void HIGH_CODE_SECTION writeWords(char* cmdline)
{
   1339c:	55                   	push   ebp
   1339d:	89 e5                	mov    ebp,esp
   1339f:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:480
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   133a5:	83 ec 04             	sub    esp,0x4
   133a8:	68 00 14 00 00       	push   0x1400
   133ad:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   133b3:	50                   	push   eax
   133b4:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   133b7:	e8 f8 f0 ff ff       	call   124b4 <parseParamsShell>
   133bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:482

    uint16_t* words=(uint16_t*)strtoul(params[0],0,16);
   133bf:	83 ec 04             	sub    esp,0x4
   133c2:	6a 10                	push   0x10
   133c4:	6a 00                	push   0x0
   133c6:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   133cc:	50                   	push   eax
   133cd:	e8 2e 43 01 00       	call   27700 <strtoul>
   133d2:	83 c4 10             	add    esp,0x10
   133d5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:483
    words[0]=strtoul(params[1],0,16);
   133d8:	83 ec 04             	sub    esp,0x4
   133db:	6a 10                	push   0x10
   133dd:	6a 00                	push   0x0
   133df:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   133e5:	05 00 02 00 00       	add    eax,0x200
   133ea:	50                   	push   eax
   133eb:	e8 10 43 01 00       	call   27700 <strtoul>
   133f0:	83 c4 10             	add    esp,0x10
   133f3:	89 c2                	mov    edx,eax
   133f5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   133f8:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/bishell.c:484
}
   133fb:	90                   	nop
   133fc:	c9                   	leave  
   133fd:	c3                   	ret    

000133fe <writeDWords>:
writeDWords():
/home/yogi/src/os/chrisOS/src/bishell.c:487

void HIGH_CODE_SECTION writeDWords(char* cmdline)
{
   133fe:	55                   	push   ebp
   133ff:	89 e5                	mov    ebp,esp
   13401:	81 ec 18 14 00 00    	sub    esp,0x1418
/home/yogi/src/os/chrisOS/src/bishell.c:489
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   13407:	83 ec 04             	sub    esp,0x4
   1340a:	68 00 14 00 00       	push   0x1400
   1340f:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13415:	50                   	push   eax
   13416:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13419:	e8 96 f0 ff ff       	call   124b4 <parseParamsShell>
   1341e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:491

    uint32_t* dwords=(uint32_t*)strtoul(params[0],0,16);
   13421:	83 ec 04             	sub    esp,0x4
   13424:	6a 10                	push   0x10
   13426:	6a 00                	push   0x0
   13428:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   1342e:	50                   	push   eax
   1342f:	e8 cc 42 01 00       	call   27700 <strtoul>
   13434:	83 c4 10             	add    esp,0x10
   13437:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:492
    dwords[0]=strtoul(params[1],0,16);
   1343a:	83 ec 04             	sub    esp,0x4
   1343d:	6a 10                	push   0x10
   1343f:	6a 00                	push   0x0
   13441:	8d 85 f4 eb ff ff    	lea    eax,[ebp-0x140c]
   13447:	05 00 02 00 00       	add    eax,0x200
   1344c:	50                   	push   eax
   1344d:	e8 ae 42 01 00       	call   27700 <strtoul>
   13452:	83 c4 10             	add    esp,0x10
   13455:	89 c2                	mov    edx,eax
   13457:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1345a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/bishell.c:493
}
   1345c:	90                   	nop
   1345d:	c9                   	leave  
   1345e:	c3                   	ret    

0001345f <showMapping>:
showMapping():
/home/yogi/src/os/chrisOS/src/bishell.c:496

void HIGH_CODE_SECTION showMapping(char* cmdline)
{
   1345f:	55                   	push   ebp
   13460:	89 e5                	mov    ebp,esp
   13462:	57                   	push   edi
   13463:	56                   	push   esi
   13464:	53                   	push   ebx
   13465:	81 ec 2c 14 00 00    	sub    esp,0x142c
/home/yogi/src/os/chrisOS/src/bishell.c:498
    char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH];
    int paramCount=parseParamsShell(cmdline, params, MAX_PARAM_WIDTH*MAX_PARAM_COUNT);
   1346b:	83 ec 04             	sub    esp,0x4
   1346e:	68 00 14 00 00       	push   0x1400
   13473:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   13479:	50                   	push   eax
   1347a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1347d:	e8 32 f0 ff ff       	call   124b4 <parseParamsShell>
   13482:	83 c4 10             	add    esp,0x10
   13485:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:502

    uintptr_t CR3;
    uintptr_t lAddress;
    printk("Param count = %u\n",paramCount);
   13488:	83 ec 08             	sub    esp,0x8
   1348b:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1348e:	68 a7 60 04 00       	push   0x460a7
   13493:	e8 6f 40 01 00       	call   27507 <printk>
   13498:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:503
    if (paramCount==2)
   1349b:	83 7d e4 02          	cmp    DWORD PTR [ebp-0x1c],0x2
   1349f:	0f 85 cb 00 00 00    	jne    13570 <showMapping+0x111>
/home/yogi/src/os/chrisOS/src/bishell.c:505
    {
        CR3=strtoul(params[0],0,16);
   134a5:	83 ec 04             	sub    esp,0x4
   134a8:	6a 10                	push   0x10
   134aa:	6a 00                	push   0x0
   134ac:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   134b2:	50                   	push   eax
   134b3:	e8 48 42 01 00       	call   27700 <strtoul>
   134b8:	83 c4 10             	add    esp,0x10
   134bb:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/bishell.c:506
        lAddress=strtoul(params[1],0,16);
   134be:	83 ec 04             	sub    esp,0x4
   134c1:	6a 10                	push   0x10
   134c3:	6a 00                	push   0x0
   134c5:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   134cb:	05 00 02 00 00       	add    eax,0x200
   134d0:	50                   	push   eax
   134d1:	e8 2a 42 01 00       	call   27700 <strtoul>
   134d6:	83 c4 10             	add    esp,0x10
   134d9:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/bishell.c:513
                CR3,
                kPagingGet4kPDEntryAddressCR3(CR3,lAddress),
                kPagingGet4kPDEntryValueCR3(CR3,lAddress),
                kPagingGet4kPTEntryAddressCR3(CR3,lAddress),
                kPagingGet4kPTEntryValueCR3(CR3,lAddress),
                (kPagingGet4kPTEntryValueCR3(CR3,lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
   134dc:	83 ec 08             	sub    esp,0x8
   134df:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   134e2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   134e5:	e8 ee df ff ff       	call   114d8 <kPagingGet4kPTEntryValueCR3>
   134ea:	83 c4 10             	add    esp,0x10
   134ed:	25 00 f0 ff ff       	and    eax,0xfffff000
   134f2:	89 c2                	mov    edx,eax
   134f4:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   134f7:	25 ff 0f 00 00       	and    eax,0xfff
/home/yogi/src/os/chrisOS/src/bishell.c:507
    printk("Param count = %u\n",paramCount);
    if (paramCount==2)
    {
        CR3=strtoul(params[0],0,16);
        lAddress=strtoul(params[1],0,16);
        printk("\tMapping based on CR3=0x%08X\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",
   134fc:	09 c2                	or     edx,eax
   134fe:	89 d3                	mov    ebx,edx
   13500:	83 ec 08             	sub    esp,0x8
   13503:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13506:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   13509:	e8 ca df ff ff       	call   114d8 <kPagingGet4kPTEntryValueCR3>
   1350e:	83 c4 10             	add    esp,0x10
   13511:	89 85 d4 eb ff ff    	mov    DWORD PTR [ebp-0x142c],eax
   13517:	83 ec 08             	sub    esp,0x8
   1351a:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1351d:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   13520:	e8 5f df ff ff       	call   11484 <kPagingGet4kPTEntryAddressCR3>
   13525:	83 c4 10             	add    esp,0x10
   13528:	89 c7                	mov    edi,eax
   1352a:	83 ec 08             	sub    esp,0x8
   1352d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13530:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   13533:	e8 70 de ff ff       	call   113a8 <kPagingGet4kPDEntryValueCR3>
   13538:	83 c4 10             	add    esp,0x10
   1353b:	89 c6                	mov    esi,eax
   1353d:	83 ec 08             	sub    esp,0x8
   13540:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   13543:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   13546:	e8 db de ff ff       	call   11426 <kPagingGet4kPDEntryAddressCR3>
   1354b:	83 c4 10             	add    esp,0x10
   1354e:	83 ec 04             	sub    esp,0x4
   13551:	53                   	push   ebx
   13552:	ff b5 d4 eb ff ff    	push   DWORD PTR [ebp-0x142c]
   13558:	57                   	push   edi
   13559:	56                   	push   esi
   1355a:	50                   	push   eax
   1355b:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1355e:	68 bc 60 04 00       	push   0x460bc
   13563:	e8 9f 3f 01 00       	call   27507 <printk>
   13568:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:520
    else
    {
        lAddress=strtoul(params[0],0,16);
        printk("\tMapping based on current CR3\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
    }
}
   1356b:	e9 96 00 00 00       	jmp    13606 <showMapping+0x1a7>
/home/yogi/src/os/chrisOS/src/bishell.c:517
                kPagingGet4kPTEntryValueCR3(CR3,lAddress),
                (kPagingGet4kPTEntryValueCR3(CR3,lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
    }
    else
    {
        lAddress=strtoul(params[0],0,16);
   13570:	83 ec 04             	sub    esp,0x4
   13573:	6a 10                	push   0x10
   13575:	6a 00                	push   0x0
   13577:	8d 85 dc eb ff ff    	lea    eax,[ebp-0x1424]
   1357d:	50                   	push   eax
   1357e:	e8 7d 41 01 00       	call   27700 <strtoul>
   13583:	83 c4 10             	add    esp,0x10
   13586:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/bishell.c:518
        printk("\tMapping based on current CR3\n\tPD address=0x%08X, \n\tPD value=0x%08X, \n\tPT address=0x%08X, \n\tPT value=0x%08X\n\tPhysical Address=0x%08X\n",kPagingGet4kPDEntryAddress(lAddress),kPagingGet4kPDEntryValue(lAddress),kPagingGet4kPTEntryAddress(lAddress),kPagingGet4kPTEntryValue(lAddress),(kPagingGet4kPTEntryValue(lAddress) & 0xFFFFF000) | (lAddress & 0x00000FFF));
   13589:	83 ec 0c             	sub    esp,0xc
   1358c:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1358f:	e8 91 df ff ff       	call   11525 <kPagingGet4kPTEntryValue>
   13594:	83 c4 10             	add    esp,0x10
   13597:	25 00 f0 ff ff       	and    eax,0xfffff000
   1359c:	89 c2                	mov    edx,eax
   1359e:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   135a1:	25 ff 0f 00 00       	and    eax,0xfff
   135a6:	89 d3                	mov    ebx,edx
   135a8:	09 c3                	or     ebx,eax
   135aa:	83 ec 0c             	sub    esp,0xc
   135ad:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135b0:	e8 70 df ff ff       	call   11525 <kPagingGet4kPTEntryValue>
   135b5:	83 c4 10             	add    esp,0x10
   135b8:	89 85 d4 eb ff ff    	mov    DWORD PTR [ebp-0x142c],eax
   135be:	83 ec 0c             	sub    esp,0xc
   135c1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135c4:	e8 f4 de ff ff       	call   114bd <kPagingGet4kPTEntryAddress>
   135c9:	83 c4 10             	add    esp,0x10
   135cc:	89 c7                	mov    edi,eax
   135ce:	83 ec 0c             	sub    esp,0xc
   135d1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135d4:	e8 32 de ff ff       	call   1140b <kPagingGet4kPDEntryValue>
   135d9:	83 c4 10             	add    esp,0x10
   135dc:	89 c6                	mov    esi,eax
   135de:	83 ec 0c             	sub    esp,0xc
   135e1:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   135e4:	e8 80 de ff ff       	call   11469 <kPagingGet4kPDEntryAddress>
   135e9:	83 c4 10             	add    esp,0x10
   135ec:	83 ec 08             	sub    esp,0x8
   135ef:	53                   	push   ebx
   135f0:	ff b5 d4 eb ff ff    	push   DWORD PTR [ebp-0x142c]
   135f6:	57                   	push   edi
   135f7:	56                   	push   esi
   135f8:	50                   	push   eax
   135f9:	68 44 61 04 00       	push   0x46144
   135fe:	e8 04 3f 01 00       	call   27507 <printk>
   13603:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/bishell.c:520
    }
}
   13606:	90                   	nop
   13607:	8d 65 f4             	lea    esp,[ebp-0xc]
   1360a:	5b                   	pop    ebx
   1360b:	5e                   	pop    esi
   1360c:	5f                   	pop    edi
   1360d:	5d                   	pop    ebp
   1360e:	c3                   	ret    

0001360f <biShell>:
biShell():
/home/yogi/src/os/chrisOS/src/bishell.c:646
    exec (params[0],paramCount,lTemp);
    strcpy(sExecutingProgram,sbiShellProgramName);
}

void HIGH_CODE_SECTION biShell()
{
   1360f:	55                   	push   ebp
   13610:	89 e5                	mov    ebp,esp
   13612:	53                   	push   ebx
   13613:	81 ec f4 0a 00 00    	sub    esp,0xaf4
/home/yogi/src/os/chrisOS/src/bishell.c:648
    char lCommand[256];
    unsigned lCurrKey=0;
   13619:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:649
    int lCurrKeyCount=0;
   13620:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:651
    char commands[50][50];
    int commandsPtr=0;
   13627:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:652
    int commandBuffPtr=0;
   1362e:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:653
    int commandWasFromThisBufferPtr=0;
   13635:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:654
    bool stopCountingKeys=false;
   1363c:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:655
    strcpy(sExecutingProgram,sbiShellProgramName);
   13640:	83 ec 08             	sub    esp,0x8
   13643:	68 c0 8d 02 00       	push   0x28dc0
   13648:	68 40 b4 08 00       	push   0x8b440
   1364d:	e8 16 40 01 00       	call   27668 <strcpy>
   13652:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:656
    puts("\nWelcome to biShell ... hang a while!\n");
   13655:	83 ec 0c             	sub    esp,0xc
   13658:	68 cc 61 04 00       	push   0x461cc
   1365d:	e8 24 4c 00 00       	call   18286 <puts>
   13662:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:660
    while (1==1)
    {
getACommand:
        lCurrKey=0;
   13665:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:661
        lCurrKeyCount=0;
   1366c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:662
        memset(lCommand,0,256);
   13673:	83 ec 04             	sub    esp,0x4
   13676:	68 00 01 00 00       	push   0x100
   1367b:	6a 00                	push   0x0
   1367d:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13683:	50                   	push   eax
   13684:	e8 38 1d 01 00       	call   253c1 <memset>
   13689:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:663
        printk("%s> ",sExecutingProgram);
   1368c:	83 ec 08             	sub    esp,0x8
   1368f:	68 40 b4 08 00       	push   0x8b440
   13694:	68 f3 61 04 00       	push   0x461f3
   13699:	e8 69 3e 01 00       	call   27507 <printk>
   1369e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:665
getAKey:
        lCurrKey=0;
   136a1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:666
        while(lCurrKey==0)
   136a8:	eb 0b                	jmp    136b5 <biShell+0xa6>
/home/yogi/src/os/chrisOS/src/bishell.c:668
        {
            lCurrKey=waitForKeyboardKey();
   136aa:	e8 79 db ff ff       	call   11228 <waitForKeyboardKey>
   136af:	0f be c0             	movsx  eax,al
   136b2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/bishell.c:666
        lCurrKeyCount=0;
        memset(lCommand,0,256);
        printk("%s> ",sExecutingProgram);
getAKey:
        lCurrKey=0;
        while(lCurrKey==0)
   136b5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   136b9:	74 ef                	je     136aa <biShell+0x9b>
/home/yogi/src/os/chrisOS/src/bishell.c:671
        {
            lCurrKey=waitForKeyboardKey();
        }
        //printk("key='%08X'",lCurrKey);
        if(lCurrKey==0xc8) //up
   136bb:	81 7d f4 c8 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xc8
   136c2:	0f 85 8f 00 00 00    	jne    13757 <biShell+0x148>
/home/yogi/src/os/chrisOS/src/bishell.c:673
        {
            if (commandBuffPtr>=0)
   136c8:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   136cc:	78 d3                	js     136a1 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:675
            {
                int lTemp=cursorGetPosY();
   136ce:	e8 24 4b 00 00       	call   181f7 <cursorGetPosY>
   136d3:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/bishell.c:676
                strcpy(lCommand,commands[--commandBuffPtr]);
   136d6:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   136da:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   136e0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   136e3:	6b c0 32             	imul   eax,eax,0x32
   136e6:	01 d0                	add    eax,edx
   136e8:	83 ec 08             	sub    esp,0x8
   136eb:	50                   	push   eax
   136ec:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   136f2:	50                   	push   eax
   136f3:	e8 70 3f 01 00       	call   27668 <strcpy>
   136f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:677
                commandWasFromThisBufferPtr=commandBuffPtr;
   136fb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   136fe:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:678
                cursorMoveTo(4,lTemp);
   13701:	83 ec 08             	sub    esp,0x8
   13704:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   13707:	6a 04                	push   0x4
   13709:	e8 49 4a 00 00       	call   18157 <cursorMoveTo>
   1370e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:679
                printk("%s                                                                                ",lCommand);
   13711:	83 ec 08             	sub    esp,0x8
   13714:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1371a:	50                   	push   eax
   1371b:	68 f8 61 04 00       	push   0x461f8
   13720:	e8 e2 3d 01 00       	call   27507 <printk>
   13725:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:680
                lCurrKeyCount=strlen(lCommand);
   13728:	83 ec 0c             	sub    esp,0xc
   1372b:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13731:	50                   	push   eax
   13732:	e8 a1 3f 01 00       	call   276d8 <strlen>
   13737:	83 c4 10             	add    esp,0x10
   1373a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:681
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   1373d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13740:	83 c0 04             	add    eax,0x4
   13743:	83 ec 08             	sub    esp,0x8
   13746:	ff 75 cc             	push   DWORD PTR [ebp-0x34]
   13749:	50                   	push   eax
   1374a:	e8 08 4a 00 00       	call   18157 <cursorMoveTo>
   1374f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:682
                goto getAKey;
   13752:	e9 4a ff ff ff       	jmp    136a1 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:687
            }
            else
                goto getAKey;
        }
        if (lCurrKey==0xD0)  //down
   13757:	81 7d f4 d0 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xd0
   1375e:	0f 85 95 00 00 00    	jne    137f9 <biShell+0x1ea>
/home/yogi/src/os/chrisOS/src/bishell.c:689
        {
            if (commandBuffPtr<=commandsPtr)
   13764:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13767:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1376a:	0f 8f 31 ff ff ff    	jg     136a1 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:691
            {
                int lTemp=cursorGetPosY();
   13770:	e8 82 4a 00 00       	call   181f7 <cursorGetPosY>
   13775:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/bishell.c:692
                strcpy(lCommand,commands[++commandBuffPtr]);
   13778:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
   1377c:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   13782:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13785:	6b c0 32             	imul   eax,eax,0x32
   13788:	01 d0                	add    eax,edx
   1378a:	83 ec 08             	sub    esp,0x8
   1378d:	50                   	push   eax
   1378e:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13794:	50                   	push   eax
   13795:	e8 ce 3e 01 00       	call   27668 <strcpy>
   1379a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:693
                commandWasFromThisBufferPtr=commandBuffPtr;
   1379d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   137a0:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:694
                cursorMoveTo(4,lTemp);
   137a3:	83 ec 08             	sub    esp,0x8
   137a6:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   137a9:	6a 04                	push   0x4
   137ab:	e8 a7 49 00 00       	call   18157 <cursorMoveTo>
   137b0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:695
                printk("%s                                                                                ",lCommand);
   137b3:	83 ec 08             	sub    esp,0x8
   137b6:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   137bc:	50                   	push   eax
   137bd:	68 f8 61 04 00       	push   0x461f8
   137c2:	e8 40 3d 01 00       	call   27507 <printk>
   137c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:696
                lCurrKeyCount=strlen(lCommand);
   137ca:	83 ec 0c             	sub    esp,0xc
   137cd:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   137d3:	50                   	push   eax
   137d4:	e8 ff 3e 01 00       	call   276d8 <strlen>
   137d9:	83 c4 10             	add    esp,0x10
   137dc:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/bishell.c:697
                cursorMoveTo(4+lCurrKeyCount,lTemp);
   137df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   137e2:	83 c0 04             	add    eax,0x4
   137e5:	83 ec 08             	sub    esp,0x8
   137e8:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   137eb:	50                   	push   eax
   137ec:	e8 66 49 00 00       	call   18157 <cursorMoveTo>
   137f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:698
                goto getAKey;
   137f4:	e9 a8 fe ff ff       	jmp    136a1 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:704
            }
            else
                goto getAKey;
            
        }   
        if (lCurrKey==0xcb) //left
   137f9:	81 7d f4 cb 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xcb
   13800:	75 33                	jne    13835 <biShell+0x226>
/home/yogi/src/os/chrisOS/src/bishell.c:706
        {
            if (cursorGetPosX()>4)
   13802:	e8 ac 49 00 00       	call   181b3 <cursorGetPosX>
   13807:	83 f8 04             	cmp    eax,0x4
   1380a:	0f 8e 91 fe ff ff    	jle    136a1 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:708
            {
                cursorMoveTo(cursorGetPosX()-1,cursorGetPosY());
   13810:	e8 e2 49 00 00       	call   181f7 <cursorGetPosY>
   13815:	89 c3                	mov    ebx,eax
   13817:	e8 97 49 00 00       	call   181b3 <cursorGetPosX>
   1381c:	83 e8 01             	sub    eax,0x1
   1381f:	83 ec 08             	sub    esp,0x8
   13822:	53                   	push   ebx
   13823:	50                   	push   eax
   13824:	e8 2e 49 00 00       	call   18157 <cursorMoveTo>
   13829:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:709
                stopCountingKeys=true;
   1382c:	c6 45 e3 01          	mov    BYTE PTR [ebp-0x1d],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:711
            }
            goto getAKey;
   13830:	e9 6c fe ff ff       	jmp    136a1 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:713
        }
        if (lCurrKey=='\b')
   13835:	83 7d f4 08          	cmp    DWORD PTR [ebp-0xc],0x8
   13839:	75 61                	jne    1389c <biShell+0x28d>
/home/yogi/src/os/chrisOS/src/bishell.c:715
        {
            if (lCurrKeyCount>=0)
   1383b:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1383f:	0f 88 5c fe ff ff    	js     136a1 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:717
            {
                int lTemp=cursorGetPosY();
   13845:	e8 ad 49 00 00       	call   181f7 <cursorGetPosY>
   1384a:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/bishell.c:719

                lCommand[lCurrKeyCount]=' ';
   1384d:	8d 95 cc fe ff ff    	lea    edx,[ebp-0x134]
   13853:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13856:	01 d0                	add    eax,edx
   13858:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/bishell.c:720
                lCurrKeyCount--;
   1385b:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:721
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   1385f:	e8 4f 49 00 00       	call   181b3 <cursorGetPosX>
   13864:	83 e8 01             	sub    eax,0x1
   13867:	83 ec 08             	sub    esp,0x8
   1386a:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1386d:	50                   	push   eax
   1386e:	e8 e4 48 00 00       	call   18157 <cursorMoveTo>
   13873:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:722
                putc(' ');
   13876:	83 ec 0c             	sub    esp,0xc
   13879:	6a 20                	push   0x20
   1387b:	e8 36 4a 00 00       	call   182b6 <putc>
   13880:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:723
                cursorMoveTo(cursorGetPosX()-1,lTemp);
   13883:	e8 2b 49 00 00       	call   181b3 <cursorGetPosX>
   13888:	83 e8 01             	sub    eax,0x1
   1388b:	83 ec 08             	sub    esp,0x8
   1388e:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   13891:	50                   	push   eax
   13892:	e8 c0 48 00 00       	call   18157 <cursorMoveTo>
   13897:	83 c4 10             	add    esp,0x10
   1389a:	eb 61                	jmp    138fd <biShell+0x2ee>
/home/yogi/src/os/chrisOS/src/bishell.c:728
            }
            else
                goto getAKey;
        }
        else if (lCurrKey==0xa)
   1389c:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   138a0:	75 30                	jne    138d2 <biShell+0x2c3>
/home/yogi/src/os/chrisOS/src/bishell.c:730
        {
            putc(lCurrKey);
   138a2:	83 ec 0c             	sub    esp,0xc
   138a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   138a8:	e8 09 4a 00 00       	call   182b6 <putc>
   138ad:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:731
            lCommand[lCurrKeyCount++]='\0';
   138b0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   138b3:	8d 50 01             	lea    edx,[eax+0x1]
   138b6:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   138b9:	c6 84 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],0x0
   138c0:	00 
/home/yogi/src/os/chrisOS/src/bishell.c:732
            goto doneGettingKeys;
   138c1:	90                   	nop
/home/yogi/src/os/chrisOS/src/bishell.c:745
        }
        stopCountingKeys=false;
        goto getAKey;
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
   138c2:	0f b6 85 cc fe ff ff 	movzx  eax,BYTE PTR [ebp-0x134]
   138c9:	84 c0                	test   al,al
   138cb:	75 39                	jne    13906 <biShell+0x2f7>
   138cd:	e9 93 fd ff ff       	jmp    13665 <biShell+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:736
            lCommand[lCurrKeyCount++]='\0';
            goto doneGettingKeys;
        }
        else
        {
            lCommand[lCurrKeyCount++]=lCurrKey;
   138d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   138d5:	8d 50 01             	lea    edx,[eax+0x1]
   138d8:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   138db:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   138de:	88 94 05 cc fe ff ff 	mov    BYTE PTR [ebp+eax*1-0x134],dl
/home/yogi/src/os/chrisOS/src/bishell.c:737
            if (stopCountingKeys)
   138e5:	80 7d e3 00          	cmp    BYTE PTR [ebp-0x1d],0x0
   138e9:	74 04                	je     138ef <biShell+0x2e0>
/home/yogi/src/os/chrisOS/src/bishell.c:738
                    lCurrKeyCount--;
   138eb:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:739
            putc(lCurrKey);
   138ef:	83 ec 0c             	sub    esp,0xc
   138f2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   138f5:	e8 bc 49 00 00       	call   182b6 <putc>
   138fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:741
        }
        stopCountingKeys=false;
   138fd:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:742
        goto getAKey;
   13901:	e9 9b fd ff ff       	jmp    136a1 <biShell+0x92>
/home/yogi/src/os/chrisOS/src/bishell.c:747
//        gets(lCommand,50);
doneGettingKeys:
        if (lCommand[0]==0x0)
            goto getACommand;
        int i = findCommand(lCommand);
   13906:	83 ec 0c             	sub    esp,0xc
   13909:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1390f:	50                   	push   eax
   13910:	e8 36 eb ff ff       	call   1244b <findCommand>
   13915:	83 c4 10             	add    esp,0x10
   13918:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/bishell.c:749

        if(i>0)
   1391b:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   1391f:	0f 8e f8 00 00 00    	jle    13a1d <biShell+0x40e>
/home/yogi/src/os/chrisOS/src/bishell.c:751
        {
            i--;
   13925:	83 6d d8 01          	sub    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:753
            //printk("Executing command # %u (%s)\n", i, cmds[i].name);
            command_function = cmds[i].function;
   13929:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1392c:	c1 e0 04             	shl    eax,0x4
   1392f:	05 08 8c 02 00       	add    eax,0x28c08
   13934:	8b 00                	mov    eax,DWORD PTR [eax]
   13936:	a3 58 63 09 00       	mov    ds:0x96358,eax
/home/yogi/src/os/chrisOS/src/bishell.c:754
            command_function_p = cmds[i].function;
   1393b:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1393e:	c1 e0 04             	shl    eax,0x4
   13941:	05 08 8c 02 00       	add    eax,0x28c08
   13946:	8b 00                	mov    eax,DWORD PTR [eax]
   13948:	a3 a4 b4 08 00       	mov    ds:0x8b4a4,eax
/home/yogi/src/os/chrisOS/src/bishell.c:755
            if (cmds[i].paramCount==0)
   1394d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   13950:	c1 e0 04             	shl    eax,0x4
   13953:	05 0c 8c 02 00       	add    eax,0x28c0c
   13958:	8b 00                	mov    eax,DWORD PTR [eax]
   1395a:	85 c0                	test   eax,eax
   1395c:	75 09                	jne    13967 <biShell+0x358>
/home/yogi/src/os/chrisOS/src/bishell.c:756
                command_function();
   1395e:	a1 58 63 09 00       	mov    eax,ds:0x96358
   13963:	ff d0                	call   eax
   13965:	eb 33                	jmp    1399a <biShell+0x38b>
/home/yogi/src/os/chrisOS/src/bishell.c:759
            else
            {
                command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
   13967:	8b 1d a4 b4 08 00    	mov    ebx,DWORD PTR ds:0x8b4a4
   1396d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   13970:	c1 e0 04             	shl    eax,0x4
   13973:	05 00 8c 02 00       	add    eax,0x28c00
   13978:	8b 00                	mov    eax,DWORD PTR [eax]
   1397a:	83 ec 0c             	sub    esp,0xc
   1397d:	50                   	push   eax
   1397e:	e8 55 3d 01 00       	call   276d8 <strlen>
   13983:	83 c4 10             	add    esp,0x10
   13986:	8d 50 01             	lea    edx,[eax+0x1]
   13989:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   1398f:	01 d0                	add    eax,edx
   13991:	83 ec 0c             	sub    esp,0xc
   13994:	50                   	push   eax
   13995:	ff d3                	call   ebx
   13997:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:761
            }
            if (commandWasFromThisBufferPtr)
   1399a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1399e:	74 4b                	je     139eb <biShell+0x3dc>
/home/yogi/src/os/chrisOS/src/bishell.c:763
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   139a0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   139a3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
   139a6:	eb 30                	jmp    139d8 <biShell+0x3c9>
/home/yogi/src/os/chrisOS/src/bishell.c:764 (discriminator 3)
                    strcpy(commands[cnt],commands[cnt+1]);
   139a8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   139ab:	83 c0 01             	add    eax,0x1
   139ae:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   139b4:	6b c0 32             	imul   eax,eax,0x32
   139b7:	01 c2                	add    edx,eax
   139b9:	8d 8d 08 f5 ff ff    	lea    ecx,[ebp-0xaf8]
   139bf:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   139c2:	6b c0 32             	imul   eax,eax,0x32
   139c5:	01 c8                	add    eax,ecx
   139c7:	83 ec 08             	sub    esp,0x8
   139ca:	52                   	push   edx
   139cb:	50                   	push   eax
   139cc:	e8 97 3c 01 00       	call   27668 <strcpy>
   139d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:763 (discriminator 3)
            {
                command_function_p(&lCommand[strlen(cmds[i].name)+1]);  
            }
            if (commandWasFromThisBufferPtr)
            {
                for (int cnt=commandWasFromThisBufferPtr;cnt<=commandsPtr;cnt++)
   139d4:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:763 (discriminator 1)
   139d8:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   139db:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   139de:	7e c8                	jle    139a8 <biShell+0x399>
/home/yogi/src/os/chrisOS/src/bishell.c:765
                    strcpy(commands[cnt],commands[cnt+1]);
                commandWasFromThisBufferPtr=0;
   139e0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/bishell.c:766
                commandsPtr--;
   139e7:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/bishell.c:768
            }
            strcpy(commands[commandsPtr++],lCommand);
   139eb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   139ee:	8d 50 01             	lea    edx,[eax+0x1]
   139f1:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   139f4:	8d 95 08 f5 ff ff    	lea    edx,[ebp-0xaf8]
   139fa:	6b c0 32             	imul   eax,eax,0x32
   139fd:	01 c2                	add    edx,eax
   139ff:	83 ec 08             	sub    esp,0x8
   13a02:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13a08:	50                   	push   eax
   13a09:	52                   	push   edx
   13a0a:	e8 59 3c 01 00       	call   27668 <strcpy>
   13a0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:769
            commandBuffPtr=commandsPtr;
   13a12:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13a15:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   13a18:	e9 48 fc ff ff       	jmp    13665 <biShell+0x56>
/home/yogi/src/os/chrisOS/src/bishell.c:773
        }
        else
        {
            printk("Invalid command '%s' ya dummy!\n",lCommand);
   13a1d:	83 ec 08             	sub    esp,0x8
   13a20:	8d 85 cc fe ff ff    	lea    eax,[ebp-0x134]
   13a26:	50                   	push   eax
   13a27:	68 4c 62 04 00       	push   0x4624c
   13a2c:	e8 d6 3a 01 00       	call   27507 <printk>
   13a31:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/bishell.c:775
        }
    }
   13a34:	e9 2c fc ff ff       	jmp    13665 <biShell+0x56>
   13a39:	66 90                	xchg   ax,ax
   13a3b:	90                   	nop

00013a3c <AhciIssueCmd>:
AhciIssueCmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:38


// Check device type

int AhciIssueCmd(volatile HBA_PORT *port,int cmdslot) 
{
   13a3c:	55                   	push   ebp
   13a3d:	89 e5                	mov    ebp,esp
   13a3f:	53                   	push   ebx
   13a40:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:40
    unsigned i;
    int delay = 0;
   13a43:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:41
    int Status = true;
   13a4a:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:43

    port->cmd.ST=0;
   13a51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a54:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13a57:	83 e2 fe             	and    edx,0xfffffffe
   13a5a:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:45
    //make sure bit0 Start set to enable process cmd list
    if (!(port->cmd.ST)) {
   13a5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a60:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13a63:	83 e0 01             	and    eax,0x1
   13a66:	84 c0                	test   al,al
   13a68:	75 2d                	jne    13a97 <AhciIssueCmd+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:46
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - ST was cleared, setting FRE and STE\n");
   13a6a:	83 ec 08             	sub    esp,0x8
   13a6d:	68 80 63 04 00       	push   0x46380
   13a72:	68 00 20 00 00       	push   0x2000
   13a77:	e8 ab 3a 01 00       	call   27527 <printd>
   13a7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:47
        port->cmd.FRE = 1;
   13a7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a82:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13a85:	83 ca 10             	or     edx,0x10
   13a88:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:48
        port->cmd.ST = 1;
   13a8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a8e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13a91:	83 ca 01             	or     edx,0x1
   13a94:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:52
    }

    //if err status or busy, reset PxCMD.
    if ((port->pxis.TFES || port->pxis.HBFS || port->pxis.HBDS || port->pxis.IFS || port->pxis.INFS || port->pxis.OFS || port->pxis.IPMS) || (port->tfd.BSY || port->tfd.BSY)) {
   13a97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13a9a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13a9d:	c1 e8 1e             	shr    eax,0x1e
   13aa0:	83 e0 01             	and    eax,0x1
   13aa3:	84 c0                	test   al,al
   13aa5:	0f 85 84 00 00 00    	jne    13b2f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 1)
   13aab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13aae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13ab1:	c1 e8 1d             	shr    eax,0x1d
   13ab4:	83 e0 01             	and    eax,0x1
   13ab7:	84 c0                	test   al,al
   13ab9:	75 74                	jne    13b2f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 2)
   13abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13abe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13ac1:	c1 e8 1c             	shr    eax,0x1c
   13ac4:	83 e0 01             	and    eax,0x1
   13ac7:	84 c0                	test   al,al
   13ac9:	75 64                	jne    13b2f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 3)
   13acb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ace:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13ad1:	c1 e8 1b             	shr    eax,0x1b
   13ad4:	83 e0 01             	and    eax,0x1
   13ad7:	84 c0                	test   al,al
   13ad9:	75 54                	jne    13b2f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 4)
   13adb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ade:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13ae1:	c1 e8 1a             	shr    eax,0x1a
   13ae4:	83 e0 01             	and    eax,0x1
   13ae7:	84 c0                	test   al,al
   13ae9:	75 44                	jne    13b2f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 5)
   13aeb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13aee:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13af1:	c1 e8 18             	shr    eax,0x18
   13af4:	83 e0 01             	and    eax,0x1
   13af7:	84 c0                	test   al,al
   13af9:	75 34                	jne    13b2f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 6)
   13afb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13afe:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13b01:	c1 e8 17             	shr    eax,0x17
   13b04:	83 e0 01             	and    eax,0x1
   13b07:	84 c0                	test   al,al
   13b09:	75 24                	jne    13b2f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 7)
   13b0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b0e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13b11:	c1 e8 07             	shr    eax,0x7
   13b14:	83 e0 01             	and    eax,0x1
   13b17:	84 c0                	test   al,al
   13b19:	75 14                	jne    13b2f <AhciIssueCmd+0xf3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:52 (discriminator 8)
   13b1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b1e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13b21:	c1 e8 07             	shr    eax,0x7
   13b24:	83 e0 01             	and    eax,0x1
   13b27:	84 c0                	test   al,al
   13b29:	0f 84 8e 00 00 00    	je     13bbd <AhciIssueCmd+0x181>
/home/yogi/src/os/chrisOS/src/block/ahci.c:53
        printd(DEBUG_AHCI, "AHCI: ahciIssueCmd - clearing error/busy\n");
   13b2f:	83 ec 08             	sub    esp,0x8
   13b32:	68 bc 63 04 00       	push   0x463bc
   13b37:	68 00 20 00 00       	push   0x2000
   13b3c:	e8 e6 39 01 00       	call   27527 <printd>
   13b41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:54
        port->cmd.ST &= ~port->cmd.ST;
   13b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b47:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13b4a:	83 e0 01             	and    eax,0x1
   13b4d:	0f b6 c0             	movzx  eax,al
   13b50:	f7 d0                	not    eax
   13b52:	89 c2                	mov    edx,eax
   13b54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b57:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13b5a:	83 e0 01             	and    eax,0x1
   13b5d:	89 c1                	mov    ecx,eax
   13b5f:	89 d0                	mov    eax,edx
   13b61:	21 c8                	and    eax,ecx
   13b63:	83 e0 01             	and    eax,0x1
   13b66:	89 c2                	mov    edx,eax
   13b68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b6b:	0f b6 d2             	movzx  edx,dl
   13b6e:	89 d1                	mov    ecx,edx
   13b70:	83 e1 01             	and    ecx,0x1
   13b73:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13b76:	83 e2 fe             	and    edx,0xfffffffe
   13b79:	09 ca                	or     edx,ecx
   13b7b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:56
        //Start|Command List Override|FIS Receive Enable
        port->cmd.CLO=1;
   13b7e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b81:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13b84:	83 ca 08             	or     edx,0x8
   13b87:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:57
        while (port->cmd.CLO);
   13b8a:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:57 (discriminator 1)
   13b8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b8e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13b91:	c1 e8 03             	shr    eax,0x3
   13b94:	83 e0 01             	and    eax,0x1
   13b97:	84 c0                	test   al,al
   13b99:	75 f0                	jne    13b8b <AhciIssueCmd+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:58
        port->cmd.ST = 1;
   13b9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13b9e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13ba1:	83 ca 01             	or     edx,0x1
   13ba4:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:59
        port->cmd.FRE = 1;
   13ba7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13baa:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13bad:	83 ca 10             	or     edx,0x10
   13bb0:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:60
        port->pxis.AsUlong = 0;
   13bb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13bb6:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:64
    }

    //issue cmd
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
   13bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13bc0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   13bc3:	83 ec 04             	sub    esp,0x4
   13bc6:	50                   	push   eax
   13bc7:	68 e8 63 04 00       	push   0x463e8
   13bcc:	68 00 20 00 00       	push   0x2000
   13bd1:	e8 51 39 01 00       	call   27527 <printd>
   13bd6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:65
    port->ci |= (1 << cmdslot);
   13bd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13bdc:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13bdf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13be2:	bb 01 00 00 00       	mov    ebx,0x1
   13be7:	89 c1                	mov    ecx,eax
   13be9:	d3 e3                	shl    ebx,cl
   13beb:	89 d8                	mov    eax,ebx
   13bed:	09 c2                	or     edx,eax
   13bef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13bf2:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:66
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);
   13bf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13bf8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   13bfb:	83 ec 04             	sub    esp,0x4
   13bfe:	50                   	push   eax
   13bff:	68 1c 64 04 00       	push   0x4641c
   13c04:	68 00 20 00 00       	push   0x2000
   13c09:	e8 19 39 01 00       	call   27527 <printd>
   13c0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:69

    //wait cmd
    for (i = 0; i < 100; i++) {
   13c11:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   13c18:	eb 21                	jmp    13c3b <AhciIssueCmd+0x1ff>
/home/yogi/src/os/chrisOS/src/block/ahci.c:70
        wait(50);
   13c1a:	83 ec 0c             	sub    esp,0xc
   13c1d:	6a 32                	push   0x32
   13c1f:	e8 22 4b 01 00       	call   28746 <wait>
   13c24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:71
        if (!port->tfd.BSY)
   13c27:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c2a:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13c2d:	c1 e8 07             	shr    eax,0x7
   13c30:	83 e0 01             	and    eax,0x1
   13c33:	84 c0                	test   al,al
   13c35:	74 0c                	je     13c43 <AhciIssueCmd+0x207>
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 2)
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI before issuing command: 0x%08X\n", port->ci);
    port->ci |= (1 << cmdslot);
    printd(DEBUG_AHCI, "AHCI: issueCmd - CI after issuing command: 0x%08X\n", port->ci);

    //wait cmd
    for (i = 0; i < 100; i++) {
   13c37:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:69 (discriminator 1)
   13c3b:	83 7d f4 63          	cmp    DWORD PTR [ebp-0xc],0x63
   13c3f:	76 d9                	jbe    13c1a <AhciIssueCmd+0x1de>
   13c41:	eb 01                	jmp    13c44 <AhciIssueCmd+0x208>
/home/yogi/src/os/chrisOS/src/block/ahci.c:72
        wait(50);
        if (!port->tfd.BSY)
            break;
   13c43:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:76
    }

    // Wait for completion
    delay = 5000;
   13c44:	c7 45 f0 88 13 00 00 	mov    DWORD PTR [ebp-0x10],0x1388
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
    while (delay > 0) {
   13c4b:	eb 57                	jmp    13ca4 <AhciIssueCmd+0x268>
/home/yogi/src/os/chrisOS/src/block/ahci.c:79

        if ((port->ci & (1 << cmdslot)) == 0)
   13c4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c50:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13c53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13c56:	bb 01 00 00 00       	mov    ebx,0x1
   13c5b:	89 c1                	mov    ecx,eax
   13c5d:	d3 e3                	shl    ebx,cl
   13c5f:	89 d8                	mov    eax,ebx
   13c61:	21 d0                	and    eax,edx
   13c63:	85 c0                	test   eax,eax
   13c65:	74 45                	je     13cac <AhciIssueCmd+0x270>
/home/yogi/src/os/chrisOS/src/block/ahci.c:83
            break;
        // In some longer duration reads, it may be helpful to spin on the DPS bit 
        // in the PxIS port field as well (1 << 5)
        if (port->pxis.TFES) // Task file error
   13c67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13c6a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   13c6d:	c1 e8 1e             	shr    eax,0x1e
   13c70:	83 e0 01             	and    eax,0x1
   13c73:	84 c0                	test   al,al
   13c75:	74 1c                	je     13c93 <AhciIssueCmd+0x257>
/home/yogi/src/os/chrisOS/src/block/ahci.c:85
        {
            printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   13c77:	83 ec 08             	sub    esp,0x8
   13c7a:	68 4f 64 04 00       	push   0x4644f
   13c7f:	68 00 20 00 00       	push   0x2000
   13c84:	e8 9e 38 01 00       	call   27527 <printd>
   13c89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:86
            return -1;
   13c8c:	b8 ff ff ff ff       	mov    eax,0xffffffff
   13c91:	eb 37                	jmp    13cca <AhciIssueCmd+0x28e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:88
        }
        wait(20);
   13c93:	83 ec 0c             	sub    esp,0xc
   13c96:	6a 14                	push   0x14
   13c98:	e8 a9 4a 01 00       	call   28746 <wait>
   13c9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:89
        delay -= 1;
   13ca0:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:77
            break;
    }

    // Wait for completion
    delay = 5000;
    while (delay > 0) {
   13ca4:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13ca8:	7f a3                	jg     13c4d <AhciIssueCmd+0x211>
   13caa:	eb 01                	jmp    13cad <AhciIssueCmd+0x271>
/home/yogi/src/os/chrisOS/src/block/ahci.c:80

        if ((port->ci & (1 << cmdslot)) == 0)
            break;
   13cac:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:92
        }
        wait(20);
        delay -= 1;
    }

    if (port->tfd.ERR || delay == 0)
   13cad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cb0:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   13cb3:	83 e0 01             	and    eax,0x1
   13cb6:	84 c0                	test   al,al
   13cb8:	75 06                	jne    13cc0 <AhciIssueCmd+0x284>
/home/yogi/src/os/chrisOS/src/block/ahci.c:92 (discriminator 1)
   13cba:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   13cbe:	75 07                	jne    13cc7 <AhciIssueCmd+0x28b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:93
        Status = -2;
   13cc0:	c7 45 ec fe ff ff ff 	mov    DWORD PTR [ebp-0x14],0xfffffffe
/home/yogi/src/os/chrisOS/src/block/ahci.c:95

    return Status;
   13cc7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/block/ahci.c:96
}
   13cca:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   13ccd:	c9                   	leave  
   13cce:	c3                   	ret    

00013ccf <check_type>:
check_type():
/home/yogi/src/os/chrisOS/src/block/ahci.c:98

int check_type(volatile HBA_PORT *port, uint32_t* sig) {
   13ccf:	55                   	push   ebp
   13cd0:	89 e5                	mov    ebp,esp
   13cd2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:99
    uint32_t ssts = port->ssts;
   13cd5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13cd8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   13cdb:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:100
    uint8_t ipm = (ssts >> 8) & 0x0F;
   13cde:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13ce1:	c1 e8 08             	shr    eax,0x8
   13ce4:	83 e0 0f             	and    eax,0xf
   13ce7:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:101
    uint8_t det = ssts & 0x0F;
   13cea:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   13ced:	83 e0 0f             	and    eax,0xf
   13cf0:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:103

    if (det != HBA_PORT_DET_PRESENT) // Check drive status
   13cf3:	80 7d fa 03          	cmp    BYTE PTR [ebp-0x6],0x3
   13cf7:	74 07                	je     13d00 <check_type+0x31>
/home/yogi/src/os/chrisOS/src/block/ahci.c:104
        return AHCI_DEV_NULL;
   13cf9:	b8 00 00 00 00       	mov    eax,0x0
   13cfe:	eb 64                	jmp    13d64 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:105
    if (ipm != HBA_PORT_IPM_ACTIVE)
   13d00:	80 7d fb 01          	cmp    BYTE PTR [ebp-0x5],0x1
   13d04:	74 07                	je     13d0d <check_type+0x3e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:106
        return AHCI_DEV_NULL;
   13d06:	b8 00 00 00 00       	mov    eax,0x0
   13d0b:	eb 57                	jmp    13d64 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:108

    *sig = port->sig;
   13d0d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d10:	8b 50 24             	mov    edx,DWORD PTR [eax+0x24]
   13d13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   13d16:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:109
    switch (port->sig) {
   13d18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d1b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   13d1e:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13d23:	74 25                	je     13d4a <check_type+0x7b>
   13d25:	3d 01 01 3c c3       	cmp    eax,0xc33c0101
   13d2a:	77 09                	ja     13d35 <check_type+0x66>
   13d2c:	3d 01 01 69 96       	cmp    eax,0x96690101
   13d31:	74 1e                	je     13d51 <check_type+0x82>
   13d33:	eb 2a                	jmp    13d5f <check_type+0x90>
   13d35:	3d 00 00 14 eb       	cmp    eax,0xeb140000
   13d3a:	74 1c                	je     13d58 <check_type+0x89>
   13d3c:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   13d41:	75 1c                	jne    13d5f <check_type+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:111
        case SATA_SIG_ATAPI:
            return AHCI_DEV_SATAPI;
   13d43:	b8 04 00 00 00       	mov    eax,0x4
   13d48:	eb 1a                	jmp    13d64 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:113
        case SATA_SIG_SEMB:
            return AHCI_DEV_SEMB;
   13d4a:	b8 02 00 00 00       	mov    eax,0x2
   13d4f:	eb 13                	jmp    13d64 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:115
        case SATA_SIG_PM:
            return AHCI_DEV_PM;
   13d51:	b8 03 00 00 00       	mov    eax,0x3
   13d56:	eb 0c                	jmp    13d64 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:117
        case SATA_SIG_ATAPI & 0xFFFF0000:
            return AHCI_DEV_SATAPI;
   13d58:	b8 04 00 00 00       	mov    eax,0x4
   13d5d:	eb 05                	jmp    13d64 <check_type+0x95>
/home/yogi/src/os/chrisOS/src/block/ahci.c:119
        default:
            return AHCI_DEV_SATA;
   13d5f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:121
    }
}
   13d64:	c9                   	leave  
   13d65:	c3                   	ret    

00013d66 <ahciEnablePortMultiplier>:
ahciEnablePortMultiplier():
/home/yogi/src/os/chrisOS/src/block/ahci.c:123

void ahciEnablePortMultiplier(volatile HBA_PORT* port) {
   13d66:	55                   	push   ebp
   13d67:	89 e5                	mov    ebp,esp
   13d69:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:124
    HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   13d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d6f:	8b 00                	mov    eax,DWORD PTR [eax]
   13d71:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:126

    port->cmd.ST = 0;
   13d74:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13d77:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13d7a:	83 e2 fe             	and    edx,0xfffffffe
   13d7d:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:130

    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
   13d80:	83 ec 04             	sub    esp,0x4
   13d83:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13d86:	68 68 64 04 00       	push   0x46468
   13d8b:	68 00 20 00 00       	push   0x2000
   13d90:	e8 92 37 01 00       	call   27527 <printd>
   13d95:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:131
    int slot = find_cmdslot(port);
   13d98:	83 ec 0c             	sub    esp,0xc
   13d9b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13d9e:	e8 6a 13 00 00       	call   1510d <find_cmdslot>
   13da3:	83 c4 10             	add    esp,0x10
   13da6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:132
    if (slot == -1)
   13da9:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13dad:	0f 84 94 02 00 00    	je     14047 <ahciEnablePortMultiplier+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:134
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13db3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13db6:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:135
    cmdheader += slot;
   13dbd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13dc0:	c1 e0 05             	shl    eax,0x5
   13dc3:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:136
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13dc6:	83 ec 04             	sub    esp,0x4
   13dc9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13dcc:	68 90 64 04 00       	push   0x46490
   13dd1:	68 00 20 00 00       	push   0x2000
   13dd6:	e8 4c 37 01 00       	call   27527 <printd>
   13ddb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:137
    cmdheader->prdtl = 1;
   13dde:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13de1:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:138
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13de7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13dea:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13ded:	83 e2 e0             	and    edx,0xffffffe0
   13df0:	83 ca 05             	or     edx,0x5
   13df3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:139
    cmdheader->w = 0;
   13df5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13df8:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13dfb:	83 e2 bf             	and    edx,0xffffffbf
   13dfe:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:140
    cmdheader->c = 1; //required for reset
   13e00:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13e03:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13e07:	83 ca 04             	or     edx,0x4
   13e0a:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:141
    cmdheader->p = 0;
   13e0d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13e10:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13e13:	83 e2 7f             	and    edx,0x7f
   13e16:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:142
    cmdheader->r = 1; //srst field
   13e18:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13e1b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13e1f:	83 ca 01             	or     edx,0x1
   13e22:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:144

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   13e25:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13e28:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13e2b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:145
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   13e2e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13e31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13e34:	50                   	push   eax
   13e35:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   13e38:	68 a8 64 04 00       	push   0x464a8
   13e3d:	68 00 20 00 00       	push   0x2000
   13e42:	e8 e0 36 01 00       	call   27527 <printd>
   13e47:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:146
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   13e4a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13e4d:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xc53000
   13e54:	30 c5 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:147
    cmdtbl->prdt_entry[0].dbc = 0;
   13e57:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13e5a:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   13e60:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   13e66:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:148
    cmdtbl->prdt_entry[0].i = 0;
   13e6c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13e6f:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   13e76:	83 e2 7f             	and    edx,0x7f
   13e79:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:150

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   13e7f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13e82:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:151
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   13e85:	83 ec 04             	sub    esp,0x4
   13e88:	6a 14                	push   0x14
   13e8a:	6a 00                	push   0x0
   13e8c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   13e8f:	e8 2d 15 01 00       	call   253c1 <memset>
   13e94:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:152
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   13e97:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13e9a:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:153
    cmdfis->c = 0; // Control
   13e9d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13ea0:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13ea4:	83 e2 7f             	and    edx,0x7f
   13ea7:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:154
    cmdfis->control |= (1 << 2); //reset bit
   13eaa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13ead:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   13eb1:	83 c8 04             	or     eax,0x4
   13eb4:	89 c2                	mov    edx,eax
   13eb6:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13eb9:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:155
    cmdfis->pmport = 0xf;
   13ebc:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   13ebf:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13ec3:	83 ca 0f             	or     edx,0xf
   13ec6:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:156
    port->cmd.CLO = 1;
   13ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ecc:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13ecf:	83 ca 08             	or     edx,0x8
   13ed2:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:157
    while (port->cmd.CLO);
   13ed5:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:157 (discriminator 1)
   13ed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ed9:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   13edc:	c1 e8 03             	shr    eax,0x3
   13edf:	83 e0 01             	and    eax,0x1
   13ee2:	84 c0                	test   al,al
   13ee4:	75 f0                	jne    13ed6 <ahciEnablePortMultiplier+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:158
    port->cmd.ST = 1;
   13ee6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ee9:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   13eec:	83 ca 01             	or     edx,0x1
   13eef:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:159
    port->ci |= slot;
   13ef2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13ef5:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   13ef8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13efb:	09 c2                	or     edx,eax
   13efd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f00:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:161

    slot = find_cmdslot(port);
   13f03:	83 ec 0c             	sub    esp,0xc
   13f06:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   13f09:	e8 ff 11 00 00       	call   1510d <find_cmdslot>
   13f0e:	83 c4 10             	add    esp,0x10
   13f11:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:162
    if (slot == -1)
   13f14:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   13f18:	0f 84 2c 01 00 00    	je     1404a <ahciEnablePortMultiplier+0x2e4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:164
        return;
    port->ie.AsUlong = 0; //xffffffff;
   13f1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   13f21:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:165
    cmdheader += slot;
   13f28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   13f2b:	c1 e0 05             	shl    eax,0x5
   13f2e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:166
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   13f31:	83 ec 04             	sub    esp,0x4
   13f34:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   13f37:	68 90 64 04 00       	push   0x46490
   13f3c:	68 00 20 00 00       	push   0x2000
   13f41:	e8 e1 35 01 00       	call   27527 <printd>
   13f46:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:167
    cmdheader->prdtl = 1;
   13f49:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f4c:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:168
    cmdheader->cfl = sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   13f52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f55:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13f58:	83 e2 e0             	and    edx,0xffffffe0
   13f5b:	83 ca 05             	or     edx,0x5
   13f5e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:169
    cmdheader->w = 0;
   13f60:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f63:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13f66:	83 e2 bf             	and    edx,0xffffffbf
   13f69:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:170
    cmdheader->c = 1; //required for reset
   13f6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f6e:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13f72:	83 ca 04             	or     edx,0x4
   13f75:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:171
    cmdheader->p = 0;
   13f78:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f7b:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   13f7e:	83 e2 7f             	and    edx,0x7f
   13f81:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:172
    cmdheader->r = 0; //srst field
   13f83:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f86:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   13f8a:	83 e2 fe             	and    edx,0xfffffffe
   13f8d:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:173
    cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   13f90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f93:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13f96:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:174
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   13f99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   13f9c:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   13f9f:	50                   	push   eax
   13fa0:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   13fa3:	68 a8 64 04 00       	push   0x464a8
   13fa8:	68 00 20 00 00       	push   0x2000
   13fad:	e8 75 35 01 00       	call   27527 <printd>
   13fb2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:175
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   13fb5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13fb8:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xc53000
   13fbf:	30 c5 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:176
    cmdtbl->prdt_entry[0].dbc = 0;
   13fc2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13fc5:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   13fcb:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   13fd1:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:177
    cmdtbl->prdt_entry[0].i = 0;
   13fd7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13fda:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   13fe1:	83 e2 7f             	and    edx,0x7f
   13fe4:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:179

    cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   13fea:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   13fed:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:180
    memset(cmdfis, 0, sizeof (FIS_REG_H2D));
   13ff0:	83 ec 04             	sub    esp,0x4
   13ff3:	6a 14                	push   0x14
   13ff5:	6a 00                	push   0x0
   13ff7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   13ffa:	e8 c2 13 01 00       	call   253c1 <memset>
   13fff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:181
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   14002:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14005:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:182
    cmdfis->c = 0; // control
   14008:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1400b:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   1400f:	83 e2 7f             	and    edx,0x7f
   14012:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:183
    cmdfis->control &= ~(1 << 2); //reset bit
   14015:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14018:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1401c:	83 e0 fb             	and    eax,0xfffffffb
   1401f:	89 c2                	mov    edx,eax
   14021:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14024:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:184
    cmdfis->pmport = 0xf;
   14027:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1402a:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   1402e:	83 ca 0f             	or     edx,0xf
   14031:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:185
    port->ci |= slot;
   14034:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14037:	8b 50 38             	mov    edx,DWORD PTR [eax+0x38]
   1403a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1403d:	09 c2                	or     edx,eax
   1403f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14042:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
   14045:	eb 04                	jmp    1404b <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:133
    //waitForPortIdle(port);

    printd(DEBUG_AHCI, "AHCI: EnablePortMultipler: port=0x%08X\n", port);
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   14047:	90                   	nop
   14048:	eb 01                	jmp    1404b <ahciEnablePortMultiplier+0x2e5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:163
    port->cmd.ST = 1;
    port->ci |= slot;

    slot = find_cmdslot(port);
    if (slot == -1)
        return;
   1404a:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:186
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
    cmdfis->c = 0; // control
    cmdfis->control &= ~(1 << 2); //reset bit
    cmdfis->pmport = 0xf;
    port->ci |= slot;
}
   1404b:	c9                   	leave  
   1404c:	c3                   	ret    

0001404d <ahciSpinupDrive>:
ahciSpinupDrive():
/home/yogi/src/os/chrisOS/src/block/ahci.c:188

bool ahciSpinupDrive(volatile HBA_PORT* port, int portno) {
   1404d:	55                   	push   ebp
   1404e:	89 e5                	mov    ebp,esp
   14050:	56                   	push   esi
   14051:	53                   	push   ebx
   14052:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:189
    int waitMS = 0;
   14055:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:190
    port->sctl.SPD = 1;
   1405c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1405f:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   14062:	80 e2 0f             	and    dl,0xf
   14065:	83 ca 10             	or     edx,0x10
   14068:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:199
    //stop_cmd(&abar->ports[i]);
    //port->cmd.PMA=1;
    //start_cmd(&abar->ports[i]);

    //Spin up the drive
    port->cmd.ST = 0;
   1406b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1406e:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14071:	83 e2 fe             	and    edx,0xfffffffe
   14074:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:201

    port->sctl.DET = 1;
   14077:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1407a:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   1407d:	83 e2 f0             	and    edx,0xfffffff0
   14080:	83 ca 01             	or     edx,0x1
   14083:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:202
    wait(100);
   14086:	83 ec 0c             	sub    esp,0xc
   14089:	6a 64                	push   0x64
   1408b:	e8 b6 46 01 00       	call   28746 <wait>
   14090:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:203
    port->sctl.DET = 0;
   14093:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14096:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   14099:	83 e2 f0             	and    edx,0xfffffff0
   1409c:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:206


    waitMS = 1000;
   1409f:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   140a6:	eb 11                	jmp    140b9 <ahciSpinupDrive+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:209
        wait(10);
   140a8:	83 ec 0c             	sub    esp,0xc
   140ab:	6a 0a                	push   0xa
   140ad:	e8 94 46 01 00       	call   28746 <wait>
   140b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:210
        waitMS -= 10;
   140b5:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:208
    port->sctl.DET = 0;


    waitMS = 1000;
    //wait for DET to be set to 1 or 3
    while (((port->ssts & 0xF) != 3) && ((port->ssts & 0xF) != 1) && (waitMS > 0)) {
   140b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140bc:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   140bf:	83 e0 0f             	and    eax,0xf
   140c2:	83 f8 03             	cmp    eax,0x3
   140c5:	74 14                	je     140db <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 1)
   140c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140ca:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   140cd:	83 e0 0f             	and    eax,0xf
   140d0:	83 f8 01             	cmp    eax,0x1
   140d3:	74 06                	je     140db <ahciSpinupDrive+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:208 (discriminator 2)
   140d5:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   140d9:	7f cd                	jg     140a8 <ahciSpinupDrive+0x5b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:212
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   140db:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   140df:	75 62                	jne    14143 <ahciSpinupDrive+0xf6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:213
        printd(DEBUG_AHCI, "AHCI: Error spinning up device,  DET not cleared (0x%08X)\n", port->ssts);
   140e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   140e4:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   140e7:	83 ec 04             	sub    esp,0x4
   140ea:	50                   	push   eax
   140eb:	68 cc 64 04 00       	push   0x464cc
   140f0:	68 00 20 00 00       	push   0x2000
   140f5:	e8 2d 34 01 00       	call   27527 <printd>
   140fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:215
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   140fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14100:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   14103:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14106:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   14109:	83 ec 08             	sub    esp,0x8
   1410c:	52                   	push   edx
   1410d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14110:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   14113:	52                   	push   edx
   14114:	50                   	push   eax
   14115:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14118:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1411b:	50                   	push   eax
   1411c:	68 08 65 04 00       	push   0x46508
   14121:	68 00 20 00 00       	push   0x2000
   14126:	e8 fc 33 01 00       	call   27527 <printd>
   1412b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:216
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   1412e:	83 ec 08             	sub    esp,0x8
   14131:	68 3c 65 04 00       	push   0x4653c
   14136:	68 00 20 00 00       	push   0x2000
   1413b:	e8 e7 33 01 00       	call   27527 <printd>
   14140:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:219
    }
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
   14143:	a1 90 49 12 00       	mov    eax,ds:0x124990
   14148:	8b 15 90 49 12 00    	mov    edx,DWORD PTR ds:0x124990
   1414e:	8b 5a 0c             	mov    ebx,DWORD PTR [edx+0xc]
   14151:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   14154:	be 01 00 00 00       	mov    esi,0x1
   14159:	89 d1                	mov    ecx,edx
   1415b:	d3 e6                	shl    esi,cl
   1415d:	89 f2                	mov    edx,esi
   1415f:	09 da                	or     edx,ebx
   14161:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:220
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
   14164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14167:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1416a:	83 ec 04             	sub    esp,0x4
   1416d:	50                   	push   eax
   1416e:	68 59 65 04 00       	push   0x46559
   14173:	68 00 20 00 00       	push   0x2000
   14178:	e8 aa 33 01 00       	call   27527 <printd>
   1417d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:221
    waitMS = 1000;
   14180:	c7 45 f4 e8 03 00 00 	mov    DWORD PTR [ebp-0xc],0x3e8
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   14187:	eb 11                	jmp    1419a <ahciSpinupDrive+0x14d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:224
        wait(10);
   14189:	83 ec 0c             	sub    esp,0xc
   1418c:	6a 0a                	push   0xa
   1418e:	e8 b3 45 01 00       	call   28746 <wait>
   14193:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:225
        waitMS -= 10;
   14196:	83 6d f4 0a          	sub    DWORD PTR [ebp-0xc],0xa
/home/yogi/src/os/chrisOS/src/block/ahci.c:223
    //This should clear PxSERR
    ahciABAR->pi |= 1 << portno;
    printd(DEBUG_AHCI, "PxSERR=0x%08X\n", port->serr.AsUlong);
    waitMS = 1000;
    //Now wait for BSY(, DRQ and ERR to be cleared.
    while ((port->tfd.BSY || port->tfd.ERR) && waitMS > 0) {
   1419a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1419d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   141a0:	c1 e8 07             	shr    eax,0x7
   141a3:	83 e0 01             	and    eax,0x1
   141a6:	84 c0                	test   al,al
   141a8:	75 0d                	jne    141b7 <ahciSpinupDrive+0x16a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 2)
   141aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141ad:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   141b0:	83 e0 01             	and    eax,0x1
   141b3:	84 c0                	test   al,al
   141b5:	74 06                	je     141bd <ahciSpinupDrive+0x170>
/home/yogi/src/os/chrisOS/src/block/ahci.c:223 (discriminator 3)
   141b7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   141bb:	7f cc                	jg     14189 <ahciSpinupDrive+0x13c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:227
        wait(10);
        waitMS -= 10;
    }
    if (waitMS == 0) {
   141bd:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   141c1:	75 62                	jne    14225 <ahciSpinupDrive+0x1d8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:228
        printd(DEBUG_AHCI, "AHCI: Error spinning up device, BSY, DRQ OR ERR not cleared (0x%08X)\n", port->ssts);
   141c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141c6:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   141c9:	83 ec 04             	sub    esp,0x4
   141cc:	50                   	push   eax
   141cd:	68 68 65 04 00       	push   0x46568
   141d2:	68 00 20 00 00       	push   0x2000
   141d7:	e8 4b 33 01 00       	call   27527 <printd>
   141dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:230
        //printd(DEBUG_AHCI,"****status=0x%08X, error=0x%08X, count=0x%08X\n",rfis->status,rfis->error,rfis->countl);
        printd(DEBUG_AHCI, "***tfd=0x%08X, ssts=0x%08X, serr=0x%08X, is=0x%08X\n", port->tfd, port->ssts, port->serr, port->pxis.AsUlong);
   141df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141e2:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   141e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141e8:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   141eb:	83 ec 08             	sub    esp,0x8
   141ee:	52                   	push   edx
   141ef:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   141f2:	8b 52 30             	mov    edx,DWORD PTR [edx+0x30]
   141f5:	52                   	push   edx
   141f6:	50                   	push   eax
   141f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   141fa:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   141fd:	50                   	push   eax
   141fe:	68 08 65 04 00       	push   0x46508
   14203:	68 00 20 00 00       	push   0x2000
   14208:	e8 1a 33 01 00       	call   27527 <printd>
   1420d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:231
        printd(DEBUG_AHCI, "Attempting to continue ... \n");
   14210:	83 ec 08             	sub    esp,0x8
   14213:	68 3c 65 04 00       	push   0x4653c
   14218:	68 00 20 00 00       	push   0x2000
   1421d:	e8 05 33 01 00       	call   27527 <printd>
   14222:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:233
    }
    port->cmd.ST = 1;
   14225:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14228:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   1422b:	83 ca 01             	or     edx,0x1
   1422e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:234
    if (waitMS == 0)
   14231:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   14235:	75 07                	jne    1423e <ahciSpinupDrive+0x1f1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:235
        return false;
   14237:	b8 00 00 00 00       	mov    eax,0x0
   1423c:	eb 05                	jmp    14243 <ahciSpinupDrive+0x1f6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:236
    return true;
   1423e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:237
}
   14243:	8d 65 f8             	lea    esp,[ebp-0x8]
   14246:	5b                   	pop    ebx
   14247:	5e                   	pop    esi
   14248:	5d                   	pop    ebp
   14249:	c3                   	ret    

0001424a <ahciProbePorts>:
ahciProbePorts():
/home/yogi/src/os/chrisOS/src/block/ahci.c:239

void ahciProbePorts(HBA_MEM *abar) {
   1424a:	55                   	push   ebp
   1424b:	89 e5                	mov    ebp,esp
   1424d:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:241
    // Search disk in impelemented ports
    uint32_t pi = abar->pi;
   14250:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14253:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   14256:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:242
    int i = 0;
   14259:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:243
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
   14260:	a1 24 8e 02 00       	mov    eax,ds:0x28e24
   14265:	c1 e0 10             	shl    eax,0x10
   14268:	05 00 30 b1 00       	add    eax,0xb13000
   1426d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:244
    if (pi > 0)
   14270:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   14274:	0f 84 4f 02 00 00    	je     144c9 <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:245
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
   1427a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1427d:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   14280:	50                   	push   eax
   14281:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14284:	68 b0 65 04 00       	push   0x465b0
   14289:	68 00 20 00 00       	push   0x2000
   1428e:	e8 94 32 01 00       	call   27527 <printd>
   14293:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    while (i < 32) {
   14296:	e9 2e 02 00 00       	jmp    144c9 <ahciProbePorts+0x27f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:247
        if (pi & 1) {
   1429b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1429e:	83 e0 01             	and    eax,0x1
   142a1:	85 c0                	test   eax,eax
   142a3:	0f 84 19 02 00 00    	je     144c2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:248
        ahci_enable_port(abar,i);
   142a9:	83 ec 08             	sub    esp,0x8
   142ac:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   142af:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   142b2:	e8 d0 1b 00 00       	call   15e87 <ahci_enable_port>
   142b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:250
        //waitForPortIdle(&abar->ports[i]);
            uint32_t sig = 0;
   142ba:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:252
            //Get the SATA device signature
            int dt = check_type(&abar->ports[i], &sig);
   142c1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   142c4:	83 c0 02             	add    eax,0x2
   142c7:	c1 e0 07             	shl    eax,0x7
   142ca:	89 c2                	mov    edx,eax
   142cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   142cf:	01 c2                	add    edx,eax
   142d1:	83 ec 08             	sub    esp,0x8
   142d4:	8d 45 e4             	lea    eax,[ebp-0x1c]
   142d7:	50                   	push   eax
   142d8:	52                   	push   edx
   142d9:	e8 f1 f9 ff ff       	call   13ccf <check_type>
   142de:	83 c4 10             	add    esp,0x10
   142e1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:253
            printd(DEBUG_AHCI, "AHCI: Checking port %u (0x%08X), sig=%08X\n", i, &abar->ports[i], sig);
   142e4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   142e7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   142ea:	83 c2 02             	add    edx,0x2
   142ed:	89 d1                	mov    ecx,edx
   142ef:	c1 e1 07             	shl    ecx,0x7
   142f2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   142f5:	01 ca                	add    edx,ecx
   142f7:	83 ec 0c             	sub    esp,0xc
   142fa:	50                   	push   eax
   142fb:	52                   	push   edx
   142fc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   142ff:	68 e4 65 04 00       	push   0x465e4
   14304:	68 00 20 00 00       	push   0x2000
   14309:	e8 19 32 01 00       	call   27527 <printd>
   1430e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:255
            //Found a SATA disk
            if (dt == AHCI_DEV_SATA) {
   14311:	83 7d e8 01          	cmp    DWORD PTR [ebp-0x18],0x1
   14315:	0f 85 a3 00 00 00    	jne    143be <ahciProbePorts+0x174>
/home/yogi/src/os/chrisOS/src/block/ahci.c:256
                printd(DEBUG_AHCI, "AHCI: SATA drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1431b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1431e:	83 c0 02             	add    eax,0x2
   14321:	c1 e0 07             	shl    eax,0x7
   14324:	89 c2                	mov    edx,eax
   14326:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14329:	01 d0                	add    eax,edx
   1432b:	50                   	push   eax
   1432c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1432f:	68 10 66 04 00       	push   0x46610
   14334:	68 00 20 00 00       	push   0x2000
   14339:	e8 e9 31 01 00       	call   27527 <printd>
   1433e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:257
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   14341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14344:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   14347:	83 c2 02             	add    edx,0x2
   1434a:	c1 e2 07             	shl    edx,0x7
   1434d:	01 d0                	add    eax,edx
   1434f:	83 c0 08             	add    eax,0x8
   14352:	8b 10                	mov    edx,DWORD PTR [eax]
   14354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14357:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   1435a:	83 c1 02             	add    ecx,0x2
   1435d:	c1 e1 07             	shl    ecx,0x7
   14360:	01 c8                	add    eax,ecx
   14362:	8b 00                	mov    eax,DWORD PTR [eax]
   14364:	52                   	push   edx
   14365:	50                   	push   eax
   14366:	68 3c 66 04 00       	push   0x4663c
   1436b:	68 00 20 00 00       	push   0x2000
   14370:	e8 b2 31 01 00       	call   27527 <printd>
   14375:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:258
                port_rebase(&abar->ports[i], i, rb);
   14378:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1437b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1437e:	83 c2 02             	add    edx,0x2
   14381:	89 d1                	mov    ecx,edx
   14383:	c1 e1 07             	shl    ecx,0x7
   14386:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14389:	01 ca                	add    edx,ecx
   1438b:	83 ec 04             	sub    esp,0x4
   1438e:	50                   	push   eax
   1438f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14392:	52                   	push   edx
   14393:	e8 5c 07 00 00       	call   14af4 <port_rebase>
   14398:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:261
                	//det reset, disable slumber and Partial state
			//reset port, send COMRESET signal
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATA);
   1439b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1439e:	83 c0 02             	add    eax,0x2
   143a1:	c1 e0 07             	shl    eax,0x7
   143a4:	89 c2                	mov    edx,eax
   143a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   143a9:	01 d0                	add    eax,edx
   143ab:	83 ec 08             	sub    esp,0x8
   143ae:	6a 01                	push   0x1
   143b0:	50                   	push   eax
   143b1:	e8 b6 09 00 00       	call   14d6c <ahciIdentify>
   143b6:	83 c4 10             	add    esp,0x10
   143b9:	e9 04 01 00 00       	jmp    144c2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:271
                    printk("AHCI: Successfully read sector 0 from device to 0x%08X\n",ahciReadBuff);
                    printk("AHCI: Read Buffer: %s\n",ahciReadBuff);
                    printk("sig=0x%08X\n",abar->ports[i].sig);
                }
                 */
            } else if (dt == AHCI_DEV_SATAPI) {
   143be:	83 7d e8 04          	cmp    DWORD PTR [ebp-0x18],0x4
   143c2:	0f 85 a0 00 00 00    	jne    14468 <ahciProbePorts+0x21e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:272
                printd(DEBUG_AHCI, "AHCI:SATAPI drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   143c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   143cb:	83 c0 02             	add    eax,0x2
   143ce:	c1 e0 07             	shl    eax,0x7
   143d1:	89 c2                	mov    edx,eax
   143d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   143d6:	01 d0                	add    eax,edx
   143d8:	50                   	push   eax
   143d9:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   143dc:	68 5c 66 04 00       	push   0x4665c
   143e1:	68 00 20 00 00       	push   0x2000
   143e6:	e8 3c 31 01 00       	call   27527 <printd>
   143eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:273
                printd(DEBUG_AHCI, "AHCI:\tCLB=0x%08X, fb=0x%08X\n", abar->ports[i].clb, abar->ports[i].fb);
   143ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   143f1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   143f4:	83 c2 02             	add    edx,0x2
   143f7:	c1 e2 07             	shl    edx,0x7
   143fa:	01 d0                	add    eax,edx
   143fc:	83 c0 08             	add    eax,0x8
   143ff:	8b 10                	mov    edx,DWORD PTR [eax]
   14401:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14404:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   14407:	83 c1 02             	add    ecx,0x2
   1440a:	c1 e1 07             	shl    ecx,0x7
   1440d:	01 c8                	add    eax,ecx
   1440f:	8b 00                	mov    eax,DWORD PTR [eax]
   14411:	52                   	push   edx
   14412:	50                   	push   eax
   14413:	68 3c 66 04 00       	push   0x4663c
   14418:	68 00 20 00 00       	push   0x2000
   1441d:	e8 05 31 01 00       	call   27527 <printd>
   14422:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:274
                port_rebase(&abar->ports[i], i, rb);
   14425:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14428:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1442b:	83 c2 02             	add    edx,0x2
   1442e:	89 d1                	mov    ecx,edx
   14430:	c1 e1 07             	shl    ecx,0x7
   14433:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14436:	01 ca                	add    edx,ecx
   14438:	83 ec 04             	sub    esp,0x4
   1443b:	50                   	push   eax
   1443c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1443f:	52                   	push   edx
   14440:	e8 af 06 00 00       	call   14af4 <port_rebase>
   14445:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:276
                //Run an ATA_IDENTIFY
                ahciIdentify(&abar->ports[i], AHCI_DEV_SATAPI);
   14448:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1444b:	83 c0 02             	add    eax,0x2
   1444e:	c1 e0 07             	shl    eax,0x7
   14451:	89 c2                	mov    edx,eax
   14453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14456:	01 d0                	add    eax,edx
   14458:	83 ec 08             	sub    esp,0x8
   1445b:	6a 04                	push   0x4
   1445d:	50                   	push   eax
   1445e:	e8 09 09 00 00       	call   14d6c <ahciIdentify>
   14463:	83 c4 10             	add    esp,0x10
   14466:	eb 5a                	jmp    144c2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:277
            } else if (dt == AHCI_DEV_SEMB) {
   14468:	83 7d e8 02          	cmp    DWORD PTR [ebp-0x18],0x2
   1446c:	75 28                	jne    14496 <ahciProbePorts+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:278
                printd(DEBUG_AHCI, "AHCI: SEMB drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1446e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14471:	83 c0 02             	add    eax,0x2
   14474:	c1 e0 07             	shl    eax,0x7
   14477:	89 c2                	mov    edx,eax
   14479:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1447c:	01 d0                	add    eax,edx
   1447e:	50                   	push   eax
   1447f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14482:	68 8c 66 04 00       	push   0x4668c
   14487:	68 00 20 00 00       	push   0x2000
   1448c:	e8 96 30 01 00       	call   27527 <printd>
   14491:	83 c4 10             	add    esp,0x10
   14494:	eb 2c                	jmp    144c2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:280
                //port_rebase(abar->ports,i,rb+=0x10000);
            } else if (dt == AHCI_DEV_PM) {
   14496:	83 7d e8 03          	cmp    DWORD PTR [ebp-0x18],0x3
   1449a:	75 26                	jne    144c2 <ahciProbePorts+0x278>
/home/yogi/src/os/chrisOS/src/block/ahci.c:281
                printd(DEBUG_AHCI, "AHCI: PM drive found at port %d (0x%08X)\n", i, &abar->ports[i]);
   1449c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1449f:	83 c0 02             	add    eax,0x2
   144a2:	c1 e0 07             	shl    eax,0x7
   144a5:	89 c2                	mov    edx,eax
   144a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   144aa:	01 d0                	add    eax,edx
   144ac:	50                   	push   eax
   144ad:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   144b0:	68 b8 66 04 00       	push   0x466b8
   144b5:	68 00 20 00 00       	push   0x2000
   144ba:	e8 68 30 01 00       	call   27527 <printd>
   144bf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:290
            //			{
            //				printk("No drive found at port %d\n", i);
            //			}
        }

        pi >>= 1;
   144c2:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:291
        i++;
   144c5:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:246
    uint32_t pi = abar->pi;
    int i = 0;
    int rb = AHCI_PORT_BASE_REMAP_ADDRESS + (0x10000 * ahciHostCount); //probably only need 0xA000
    if (pi > 0)
        printd(DEBUG_AHCI, "AHCI: Probing ports via ABAR 0x%08X, value 0x%02X\n", abar, abar->pi);
    while (i < 32) {
   144c9:	83 7d f0 1f          	cmp    DWORD PTR [ebp-0x10],0x1f
   144cd:	0f 8e c8 fd ff ff    	jle    1429b <ahciProbePorts+0x51>
/home/yogi/src/os/chrisOS/src/block/ahci.c:293
        }

        pi >>= 1;
        i++;
    }
}
   144d3:	90                   	nop
   144d4:	c9                   	leave  
   144d5:	c3                   	ret    

000144d6 <printAHCICaps>:
printAHCICaps():
/home/yogi/src/os/chrisOS/src/block/ahci.c:295

void printAHCICaps() {
   144d6:	55                   	push   ebp
   144d7:	89 e5                	mov    ebp,esp
   144d9:	57                   	push   edi
   144da:	56                   	push   esi
   144db:	53                   	push   ebx
   144dc:	81 ec 2c 02 00 00    	sub    esp,0x22c
/home/yogi/src/os/chrisOS/src/block/ahci.c:297
    //printk("ahciCaps=0x%08X, sizeof=%u\n",ahciCaps,sizeof(ahcicaps_t));
    terminal_clear();
   144e2:	e8 5b 39 00 00       	call   17e42 <terminal_clear>
/home/yogi/src/os/chrisOS/src/block/ahci.c:298
    printk("AHCI Caps:\n");
   144e7:	83 ec 0c             	sub    esp,0xc
   144ea:	68 e2 66 04 00       	push   0x466e2
   144ef:	e8 13 30 01 00       	call   27507 <printk>
   144f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:299
    printk("\tSupports 64-bit Addressing (S64A):\t\t\t\t%s\n", ahciCaps->S64A ? "Yes" : "No");
   144f7:	a1 24 49 12 00       	mov    eax,ds:0x124924
   144fc:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14500:	83 e0 80             	and    eax,0xffffff80
   14503:	84 c0                	test   al,al
   14505:	74 07                	je     1450e <printAHCICaps+0x38>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 1)
   14507:	b8 ee 66 04 00       	mov    eax,0x466ee
   1450c:	eb 05                	jmp    14513 <printAHCICaps+0x3d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 2)
   1450e:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:299 (discriminator 4)
   14513:	83 ec 08             	sub    esp,0x8
   14516:	50                   	push   eax
   14517:	68 f8 66 04 00       	push   0x466f8
   1451c:	e8 e6 2f 01 00       	call   27507 <printk>
   14521:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
    printk("\tSupprorts Native Command Queueing (SNCQ):\t\t%s\n", ahciCaps->SNCQ ? "Yes" : "No");
   14524:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14529:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1452d:	83 e0 40             	and    eax,0x40
   14530:	84 c0                	test   al,al
   14532:	74 07                	je     1453b <printAHCICaps+0x65>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 1)
   14534:	b8 ee 66 04 00       	mov    eax,0x466ee
   14539:	eb 05                	jmp    14540 <printAHCICaps+0x6a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 2)
   1453b:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:300 (discriminator 4)
   14540:	83 ec 08             	sub    esp,0x8
   14543:	50                   	push   eax
   14544:	68 24 67 04 00       	push   0x46724
   14549:	e8 b9 2f 01 00       	call   27507 <printk>
   1454e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
    printk("\tSupports SNotification Register (SSNTF):\t\t%s\n", ahciCaps->SSNTF ? "Yes" : "No");
   14551:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14556:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1455a:	83 e0 20             	and    eax,0x20
   1455d:	84 c0                	test   al,al
   1455f:	74 07                	je     14568 <printAHCICaps+0x92>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 1)
   14561:	b8 ee 66 04 00       	mov    eax,0x466ee
   14566:	eb 05                	jmp    1456d <printAHCICaps+0x97>
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 2)
   14568:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:301 (discriminator 4)
   1456d:	83 ec 08             	sub    esp,0x8
   14570:	50                   	push   eax
   14571:	68 54 67 04 00       	push   0x46754
   14576:	e8 8c 2f 01 00       	call   27507 <printk>
   1457b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
    printk("\tSupports Mechanical Presence Switch (SMPS):\t\t%s\n", ahciCaps->SMPS ? "Yes" : "No");
   1457e:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14583:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   14587:	83 e0 10             	and    eax,0x10
   1458a:	84 c0                	test   al,al
   1458c:	74 07                	je     14595 <printAHCICaps+0xbf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 1)
   1458e:	b8 ee 66 04 00       	mov    eax,0x466ee
   14593:	eb 05                	jmp    1459a <printAHCICaps+0xc4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 2)
   14595:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:302 (discriminator 4)
   1459a:	83 ec 08             	sub    esp,0x8
   1459d:	50                   	push   eax
   1459e:	68 84 67 04 00       	push   0x46784
   145a3:	e8 5f 2f 01 00       	call   27507 <printk>
   145a8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
    printk("\tSupports Staggered Spin-up (SSS):\t\t\t\t%s\n", ahciCaps->SSS ? "Yes" : "No");
   145ab:	a1 24 49 12 00       	mov    eax,ds:0x124924
   145b0:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   145b4:	83 e0 08             	and    eax,0x8
   145b7:	84 c0                	test   al,al
   145b9:	74 07                	je     145c2 <printAHCICaps+0xec>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 1)
   145bb:	b8 ee 66 04 00       	mov    eax,0x466ee
   145c0:	eb 05                	jmp    145c7 <printAHCICaps+0xf1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 2)
   145c2:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:303 (discriminator 4)
   145c7:	83 ec 08             	sub    esp,0x8
   145ca:	50                   	push   eax
   145cb:	68 b8 67 04 00       	push   0x467b8
   145d0:	e8 32 2f 01 00       	call   27507 <printk>
   145d5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
    printk("\tSupports Aggressive Link Power Management (SALP):\t%s\n", ahciCaps->SALP ? "Yes" : "No");
   145d8:	a1 24 49 12 00       	mov    eax,ds:0x124924
   145dd:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   145e1:	83 e0 04             	and    eax,0x4
   145e4:	84 c0                	test   al,al
   145e6:	74 07                	je     145ef <printAHCICaps+0x119>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 1)
   145e8:	b8 ee 66 04 00       	mov    eax,0x466ee
   145ed:	eb 05                	jmp    145f4 <printAHCICaps+0x11e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 2)
   145ef:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:304 (discriminator 4)
   145f4:	83 ec 08             	sub    esp,0x8
   145f7:	50                   	push   eax
   145f8:	68 e4 67 04 00       	push   0x467e4
   145fd:	e8 05 2f 01 00       	call   27507 <printk>
   14602:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
    printk("\tSupports Active LED (SAL):\t\t\t\t\t%s\n", ahciCaps->SAL ? "Yes" : "No");
   14605:	a1 24 49 12 00       	mov    eax,ds:0x124924
   1460a:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1460e:	83 e0 02             	and    eax,0x2
   14611:	84 c0                	test   al,al
   14613:	74 07                	je     1461c <printAHCICaps+0x146>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 1)
   14615:	b8 ee 66 04 00       	mov    eax,0x466ee
   1461a:	eb 05                	jmp    14621 <printAHCICaps+0x14b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 2)
   1461c:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:305 (discriminator 4)
   14621:	83 ec 08             	sub    esp,0x8
   14624:	50                   	push   eax
   14625:	68 1c 68 04 00       	push   0x4681c
   1462a:	e8 d8 2e 01 00       	call   27507 <printk>
   1462f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
    printk("\tSupports Command List Override (SCLO):\t\t\t%s\n", ahciCaps->SCLO ? "Yes" : "No");
   14632:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14637:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1463b:	83 e0 01             	and    eax,0x1
   1463e:	84 c0                	test   al,al
   14640:	74 07                	je     14649 <printAHCICaps+0x173>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 1)
   14642:	b8 ee 66 04 00       	mov    eax,0x466ee
   14647:	eb 05                	jmp    1464e <printAHCICaps+0x178>
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 2)
   14649:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:306 (discriminator 4)
   1464e:	83 ec 08             	sub    esp,0x8
   14651:	50                   	push   eax
   14652:	68 40 68 04 00       	push   0x46840
   14657:	e8 ab 2e 01 00       	call   27507 <printk>
   1465c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
    printk("\tInterface Speed Support (ISS):\t\t\t\t%s\n", ahciCaps->ISS == 1 ? "1.5 Gbps" : ahciCaps->ISS == 2 ? "3 Gbps" : ahciCaps->ISS == 3 ? "6 Gbps" : "Reserved");
   1465f:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14664:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14668:	83 e0 f0             	and    eax,0xfffffff0
   1466b:	3c 10                	cmp    al,0x10
   1466d:	74 35                	je     146a4 <printAHCICaps+0x1ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 1)
   1466f:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14674:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14678:	83 e0 f0             	and    eax,0xfffffff0
   1467b:	3c 20                	cmp    al,0x20
   1467d:	74 1e                	je     1469d <printAHCICaps+0x1c7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 3)
   1467f:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14684:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   14688:	83 e0 f0             	and    eax,0xfffffff0
   1468b:	3c 30                	cmp    al,0x30
   1468d:	75 07                	jne    14696 <printAHCICaps+0x1c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 5)
   1468f:	b8 6e 68 04 00       	mov    eax,0x4686e
   14694:	eb 13                	jmp    146a9 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 6)
   14696:	b8 75 68 04 00       	mov    eax,0x46875
   1469b:	eb 0c                	jmp    146a9 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 4)
   1469d:	b8 7e 68 04 00       	mov    eax,0x4687e
   146a2:	eb 05                	jmp    146a9 <printAHCICaps+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 2)
   146a4:	b8 85 68 04 00       	mov    eax,0x46885
/home/yogi/src/os/chrisOS/src/block/ahci.c:307 (discriminator 12)
   146a9:	83 ec 08             	sub    esp,0x8
   146ac:	50                   	push   eax
   146ad:	68 90 68 04 00       	push   0x46890
   146b2:	e8 50 2e 01 00       	call   27507 <printk>
   146b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 12)
    printk("\tSupports AHCI mode only (SAM):\t\t\t\t%s\n", ahciCaps->SAM ? "Yes" : "No");
   146ba:	a1 24 49 12 00       	mov    eax,ds:0x124924
   146bf:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   146c3:	83 e0 04             	and    eax,0x4
   146c6:	84 c0                	test   al,al
   146c8:	74 07                	je     146d1 <printAHCICaps+0x1fb>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 1)
   146ca:	b8 ee 66 04 00       	mov    eax,0x466ee
   146cf:	eb 05                	jmp    146d6 <printAHCICaps+0x200>
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 2)
   146d1:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:308 (discriminator 4)
   146d6:	83 ec 08             	sub    esp,0x8
   146d9:	50                   	push   eax
   146da:	68 b8 68 04 00       	push   0x468b8
   146df:	e8 23 2e 01 00       	call   27507 <printk>
   146e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
    printk("\tSupports Port Multiplier (SPM):\t\t\t\t%s\n", ahciCaps->SPM ? "Yes" : "No");
   146e7:	a1 24 49 12 00       	mov    eax,ds:0x124924
   146ec:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   146f0:	83 e0 02             	and    eax,0x2
   146f3:	84 c0                	test   al,al
   146f5:	74 07                	je     146fe <printAHCICaps+0x228>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 1)
   146f7:	b8 ee 66 04 00       	mov    eax,0x466ee
   146fc:	eb 05                	jmp    14703 <printAHCICaps+0x22d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 2)
   146fe:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:309 (discriminator 4)
   14703:	83 ec 08             	sub    esp,0x8
   14706:	50                   	push   eax
   14707:	68 e0 68 04 00       	push   0x468e0
   1470c:	e8 f6 2d 01 00       	call   27507 <printk>
   14711:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
    printk("\tFIS-based Switching Support (FBSS):\t\t\t%s\n", ahciCaps->FBSS ? "Yes" : "No");   
   14714:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14719:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1471d:	83 e0 01             	and    eax,0x1
   14720:	84 c0                	test   al,al
   14722:	74 07                	je     1472b <printAHCICaps+0x255>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 1)
   14724:	b8 ee 66 04 00       	mov    eax,0x466ee
   14729:	eb 05                	jmp    14730 <printAHCICaps+0x25a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 2)
   1472b:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:310 (discriminator 4)
   14730:	83 ec 08             	sub    esp,0x8
   14733:	50                   	push   eax
   14734:	68 08 69 04 00       	push   0x46908
   14739:	e8 c9 2d 01 00       	call   27507 <printk>
   1473e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
    printk("\tPIO Multiple DRQ Block (PMD):\t\t\t\t\t%s\n", ahciCaps->PMD ? "Yes" : "No");
   14741:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14746:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1474a:	83 e0 80             	and    eax,0xffffff80
   1474d:	84 c0                	test   al,al
   1474f:	74 07                	je     14758 <printAHCICaps+0x282>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 1)
   14751:	b8 ee 66 04 00       	mov    eax,0x466ee
   14756:	eb 05                	jmp    1475d <printAHCICaps+0x287>
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 2)
   14758:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:311 (discriminator 4)
   1475d:	83 ec 08             	sub    esp,0x8
   14760:	50                   	push   eax
   14761:	68 34 69 04 00       	push   0x46934
   14766:	e8 9c 2d 01 00       	call   27507 <printk>
   1476b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
    printk("\tSlumber State Capable (SSC):\t\t\t\t\t%s\n", ahciCaps->SSC ? "Yes" : "No");
   1476e:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14773:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   14777:	83 e0 40             	and    eax,0x40
   1477a:	84 c0                	test   al,al
   1477c:	74 07                	je     14785 <printAHCICaps+0x2af>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 1)
   1477e:	b8 ee 66 04 00       	mov    eax,0x466ee
   14783:	eb 05                	jmp    1478a <printAHCICaps+0x2b4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 2)
   14785:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:312 (discriminator 4)
   1478a:	83 ec 08             	sub    esp,0x8
   1478d:	50                   	push   eax
   1478e:	68 5c 69 04 00       	push   0x4695c
   14793:	e8 6f 2d 01 00       	call   27507 <printk>
   14798:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
    printk("\tPartial State Capable (PSC):\t\t\t\t\t%s\n", ahciCaps->PSC ? "Yes" : "No");
   1479b:	a1 24 49 12 00       	mov    eax,ds:0x124924
   147a0:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   147a4:	83 e0 20             	and    eax,0x20
   147a7:	84 c0                	test   al,al
   147a9:	74 07                	je     147b2 <printAHCICaps+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 1)
   147ab:	b8 ee 66 04 00       	mov    eax,0x466ee
   147b0:	eb 05                	jmp    147b7 <printAHCICaps+0x2e1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 2)
   147b2:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:313 (discriminator 4)
   147b7:	83 ec 08             	sub    esp,0x8
   147ba:	50                   	push   eax
   147bb:	68 84 69 04 00       	push   0x46984
   147c0:	e8 42 2d 01 00       	call   27507 <printk>
   147c5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:314 (discriminator 4)
    printk("\tNumber of Command Slots (NSC):\t\t\t\t%u\n", ahciCaps->NCS);
   147c8:	a1 24 49 12 00       	mov    eax,ds:0x124924
   147cd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   147d1:	83 e0 1f             	and    eax,0x1f
   147d4:	0f b6 c0             	movzx  eax,al
   147d7:	83 ec 08             	sub    esp,0x8
   147da:	50                   	push   eax
   147db:	68 ac 69 04 00       	push   0x469ac
   147e0:	e8 22 2d 01 00       	call   27507 <printk>
   147e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
    printk("\tCommand Completion Coalescing Supported (CCCS):\t%s\n", ahciCaps->CCCS ? "Yes" : "No");
   147e8:	a1 24 49 12 00       	mov    eax,ds:0x124924
   147ed:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   147f0:	83 e0 80             	and    eax,0xffffff80
   147f3:	84 c0                	test   al,al
   147f5:	74 07                	je     147fe <printAHCICaps+0x328>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 1)
   147f7:	b8 ee 66 04 00       	mov    eax,0x466ee
   147fc:	eb 05                	jmp    14803 <printAHCICaps+0x32d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 2)
   147fe:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:315 (discriminator 4)
   14803:	83 ec 08             	sub    esp,0x8
   14806:	50                   	push   eax
   14807:	68 d4 69 04 00       	push   0x469d4
   1480c:	e8 f6 2c 01 00       	call   27507 <printk>
   14811:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
    printk("\tEnclosure Management Supported (EMS):\t\t\t%s\n", ahciCaps->EMS ? "Yes" : "No");
   14814:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14819:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1481c:	83 e0 40             	and    eax,0x40
   1481f:	84 c0                	test   al,al
   14821:	74 07                	je     1482a <printAHCICaps+0x354>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 1)
   14823:	b8 ee 66 04 00       	mov    eax,0x466ee
   14828:	eb 05                	jmp    1482f <printAHCICaps+0x359>
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 2)
   1482a:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:316 (discriminator 4)
   1482f:	83 ec 08             	sub    esp,0x8
   14832:	50                   	push   eax
   14833:	68 0c 6a 04 00       	push   0x46a0c
   14838:	e8 ca 2c 01 00       	call   27507 <printk>
   1483d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
    printk("\tSupports External SATA (SXS):\t\t\t\t\t%s\n", ahciCaps->SXS ? "Yes" : "No");
   14840:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14845:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14848:	83 e0 20             	and    eax,0x20
   1484b:	84 c0                	test   al,al
   1484d:	74 07                	je     14856 <printAHCICaps+0x380>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 1)
   1484f:	b8 ee 66 04 00       	mov    eax,0x466ee
   14854:	eb 05                	jmp    1485b <printAHCICaps+0x385>
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 2)
   14856:	b8 f2 66 04 00       	mov    eax,0x466f2
/home/yogi/src/os/chrisOS/src/block/ahci.c:317 (discriminator 4)
   1485b:	83 ec 08             	sub    esp,0x8
   1485e:	50                   	push   eax
   1485f:	68 3c 6a 04 00       	push   0x46a3c
   14864:	e8 9e 2c 01 00       	call   27507 <printk>
   14869:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:318 (discriminator 4)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
   1486c:	a1 24 49 12 00       	mov    eax,ds:0x124924
   14871:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   14874:	83 e0 1f             	and    eax,0x1f
   14877:	0f b6 c0             	movzx  eax,al
   1487a:	83 ec 08             	sub    esp,0x8
   1487d:	50                   	push   eax
   1487e:	68 64 6a 04 00       	push   0x46a64
   14883:	e8 7f 2c 01 00       	call   27507 <printk>
   14888:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:321 (discriminator 4)
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
   1488b:	83 ec 0c             	sub    esp,0xc
   1488e:	68 84 6a 04 00       	push   0x46a84
   14893:	e8 6f 2c 01 00       	call   27507 <printk>
   14898:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 4)
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   1489b:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   148a2:	e9 3a 02 00 00       	jmp    14ae1 <printAHCICaps+0x60b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:324
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
   148a7:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   148ad:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   148b0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   148b6:	01 d0                	add    eax,edx
   148b8:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   148bf:	84 c0                	test   al,al
   148c1:	0f 84 16 02 00 00    	je     14add <printAHCICaps+0x607>
/home/yogi/src/os/chrisOS/src/block/ahci.c:325
            memset(p1, 0, 512);
   148c7:	83 ec 04             	sub    esp,0x4
   148ca:	68 00 02 00 00       	push   0x200
   148cf:	6a 00                	push   0x0
   148d1:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   148d7:	50                   	push   eax
   148d8:	e8 e4 0a 01 00       	call   253c1 <memset>
   148dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:326
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
   148e0:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   148e6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   148e9:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   148ef:	01 d0                	add    eax,edx
   148f1:	05 00 02 00 00       	add    eax,0x200
   148f6:	83 ec 08             	sub    esp,0x8
   148f9:	50                   	push   eax
   148fa:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   14900:	50                   	push   eax
   14901:	e8 62 2d 01 00       	call   27668 <strcpy>
   14906:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:327
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
   14909:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   1490f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14912:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14918:	01 d0                	add    eax,edx
   1491a:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   14921:	3c 01                	cmp    al,0x1
   14923:	75 08                	jne    1492d <printAHCICaps+0x457>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 1)
   14925:	8d 85 d8 fd ff ff    	lea    eax,[ebp-0x228]
   1492b:	eb 05                	jmp    14932 <printAHCICaps+0x45c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 2)
   1492d:	b8 97 6a 04 00       	mov    eax,0x46a97
/home/yogi/src/os/chrisOS/src/block/ahci.c:327 (discriminator 4)
   14932:	83 ec 04             	sub    esp,0x4
   14935:	50                   	push   eax
   14936:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   14939:	68 9d 6a 04 00       	push   0x46a9d
   1493e:	e8 c4 2b 01 00       	call   27507 <printk>
   14943:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:335 (discriminator 4)
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
   14946:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   1494c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1494f:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14955:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14957:	8b b8 69 02 00 00    	mov    edi,DWORD PTR [eax+0x269]
/home/yogi/src/os/chrisOS/src/block/ahci.c:334 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
   1495d:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14963:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14966:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1496c:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   1496e:	8b b0 6f 02 00 00    	mov    esi,DWORD PTR [eax+0x26f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:333 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
   14974:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   1497a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1497d:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14983:	01 d0                	add    eax,edx
   14985:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   1498c:	84 c0                	test   al,al
   1498e:	74 0c                	je     1499c <printAHCICaps+0x4c6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 1)
   14990:	c7 85 d4 fd ff ff b2 	mov    DWORD PTR [ebp-0x22c],0x46ab2
   14997:	6a 04 00 
   1499a:	eb 0a                	jmp    149a6 <printAHCICaps+0x4d0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 2)
   1499c:	c7 85 d4 fd ff ff b7 	mov    DWORD PTR [ebp-0x22c],0x46ab7
   149a3:	6a 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:332 (discriminator 4)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
   149a6:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   149ac:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   149af:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   149b5:	01 d0                	add    eax,edx
   149b7:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 4)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   149be:	84 c0                	test   al,al
   149c0:	74 0c                	je     149ce <printAHCICaps+0x4f8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 5)
   149c2:	c7 85 d0 fd ff ff b8 	mov    DWORD PTR [ebp-0x230],0x46ab8
   149c9:	6a 04 00 
   149cc:	eb 0a                	jmp    149d8 <printAHCICaps+0x502>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 6)
   149ce:	c7 85 d0 fd ff ff b7 	mov    DWORD PTR [ebp-0x230],0x46ab7
   149d5:	6a 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:331 (discriminator 8)
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
   149d8:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   149de:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   149e1:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   149e7:	01 d0                	add    eax,edx
   149e9:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 8)
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   149f0:	84 c0                	test   al,al
   149f2:	74 0c                	je     14a00 <printAHCICaps+0x52a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 9)
   149f4:	c7 85 cc fd ff ff bf 	mov    DWORD PTR [ebp-0x234],0x46abf
   149fb:	6a 04 00 
   149fe:	eb 0a                	jmp    14a0a <printAHCICaps+0x534>
/home/yogi/src/os/chrisOS/src/block/ahci.c:328 (discriminator 10)
   14a00:	c7 85 cc fd ff ff b7 	mov    DWORD PTR [ebp-0x234],0x46ab7
   14a07:	6a 04 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:330
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
                    kATADeviceInfo[cnt].sectorSize,
   14a0a:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14a10:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14a13:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14a19:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14a1b:	8b 98 5a 02 00 00    	mov    ebx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/block/ahci.c:329
                    (kATADeviceInfo[cnt].totalSectorCount * kATADeviceInfo[cnt].sectorSize) / (1024 * 1024),
   14a21:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14a27:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14a2a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14a30:	01 d0                	add    eax,edx
   14a32:	8b 88 56 02 00 00    	mov    ecx,DWORD PTR [eax+0x256]
   14a38:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14a3e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14a41:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14a47:	01 d0                	add    eax,edx
   14a49:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   14a4f:	0f af c1             	imul   eax,ecx
/home/yogi/src/os/chrisOS/src/block/ahci.c:328
    for (int cnt = 4; cnt < 10; cnt++)
        if (kATADeviceInfo[cnt].ATADeviceAvailable) {
            memset(p1, 0, 512);
            strcpy(p1, kATADeviceInfo[cnt].ATADeviceModel);
            printk("AHCI: Device %u:  %s", cnt, kATADeviceInfo[cnt].ATADeviceAvailable == 1 ? p1 : "none\n");
            printk("\t%uMB (%ubps %s%s%s)\n\t* ABAR/port: 0x%08X/0x%08X\n",
   14a52:	c1 e8 14             	shr    eax,0x14
   14a55:	57                   	push   edi
   14a56:	56                   	push   esi
   14a57:	ff b5 d4 fd ff ff    	push   DWORD PTR [ebp-0x22c]
   14a5d:	ff b5 d0 fd ff ff    	push   DWORD PTR [ebp-0x230]
   14a63:	ff b5 cc fd ff ff    	push   DWORD PTR [ebp-0x234]
   14a69:	53                   	push   ebx
   14a6a:	50                   	push   eax
   14a6b:	68 c4 6a 04 00       	push   0x46ac4
   14a70:	e8 92 2a 01 00       	call   27507 <printk>
   14a75:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:336
                    kATADeviceInfo[cnt].lbaSupported ? ",LBA" : "",
                    kATADeviceInfo[cnt].lba48Supported ? ",LBA48" : "",
                    kATADeviceInfo[cnt].dmaSupported ? ",DMA" : "",
                    kATADeviceInfo[cnt].ABAR,
                    kATADeviceInfo[cnt].ioPort);
            volatile HBA_PORT* port = (HBA_PORT*) kATADeviceInfo[cnt].ioPort;
   14a78:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14a7e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14a81:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14a87:	01 d0                	add    eax,edx
   14a89:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   14a8f:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:337
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
   14a92:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14a95:	8b 00                	mov    eax,DWORD PTR [eax]
   14a97:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:338
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14a9a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   14a9d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14aa0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:339
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
   14aa3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14aa6:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14aa9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14aac:	8b 00                	mov    eax,DWORD PTR [eax]
   14aae:	83 ec 04             	sub    esp,0x4
   14ab1:	52                   	push   edx
   14ab2:	50                   	push   eax
   14ab3:	68 f6 6a 04 00       	push   0x46af6
   14ab8:	e8 4a 2a 01 00       	call   27507 <printk>
   14abd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:340
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
   14ac0:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   14ac3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14ac6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   14ac9:	8b 00                	mov    eax,DWORD PTR [eax]
   14acb:	83 ec 04             	sub    esp,0x4
   14ace:	52                   	push   edx
   14acf:	50                   	push   eax
   14ad0:	68 10 6b 04 00       	push   0x46b10
   14ad5:	e8 2d 2a 01 00       	call   27507 <printk>
   14ada:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 2)
    printk("\tNumber of Ports (NP):\t\t\t\t\t\t%u\n", ahciCaps->NP);
    //printk("Press a key for more ...");
    //waitForKeyboardKey();
    printk("AHCI: SATA Disks:\n");
    char p1[512];
    for (int cnt = 4; cnt < 10; cnt++)
   14add:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:323 (discriminator 1)
   14ae1:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   14ae5:	0f 8e bc fd ff ff    	jle    148a7 <printAHCICaps+0x3d1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:342
            HBA_CMD_HEADER* cmdheader = (HBA_CMD_HEADER*) port->clb;
            HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
            printk("\t\tCLB=0x%08X, FB=0x%08X\n",port->clb,port->fb);
            printk("\t\tCMDHeader=0x%08X, CMDTable=0x%08X\n", port->clb, cmdheader->ctba);
        }
}
   14aeb:	90                   	nop
   14aec:	8d 65 f4             	lea    esp,[ebp-0xc]
   14aef:	5b                   	pop    ebx
   14af0:	5e                   	pop    esi
   14af1:	5f                   	pop    edi
   14af2:	5d                   	pop    ebp
   14af3:	c3                   	ret    

00014af4 <port_rebase>:
port_rebase():
/home/yogi/src/os/chrisOS/src/block/ahci.c:344

void port_rebase(volatile HBA_PORT *port, int portno, uintptr_t remapBase) {
   14af4:	55                   	push   ebp
   14af5:	89 e5                	mov    ebp,esp
   14af7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:346
    //each command list is 1k (32k possible per port))
    printd(DEBUG_AHCI, "AHCI: Rebasing port %u (0x%08X) clb/fb from 0x%08X/0x%08X\n\t", portno, port, port->clb, port->fb);
   14afa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14afd:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14b00:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b03:	8b 00                	mov    eax,DWORD PTR [eax]
   14b05:	83 ec 08             	sub    esp,0x8
   14b08:	52                   	push   edx
   14b09:	50                   	push   eax
   14b0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14b0d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   14b10:	68 38 6b 04 00       	push   0x46b38
   14b15:	68 00 20 00 00       	push   0x2000
   14b1a:	e8 08 2a 01 00       	call   27527 <printd>
   14b1f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:347
    stop_cmd(port); // Stop command engine
   14b22:	83 ec 0c             	sub    esp,0xc
   14b25:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14b28:	e8 eb 01 00 00       	call   14d18 <stop_cmd>
   14b2d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:353

    // Command list offset: 1K*portno
    // Command list entry size = 32
    // Command list entry maxim count = 32
    // Command list maxim size = 32*32 = 1K per port
    port->clbu = 0;
   14b30:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b33:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:354
    port->clb = (remapBase + (portno<<15) + 0x1000) & 0xFFFFF000;
   14b3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   14b3d:	c1 e0 0f             	shl    eax,0xf
   14b40:	89 c2                	mov    edx,eax
   14b42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   14b45:	01 d0                	add    eax,edx
   14b47:	05 00 10 00 00       	add    eax,0x1000
   14b4c:	25 00 f0 ff ff       	and    eax,0xfffff000
   14b51:	89 c2                	mov    edx,eax
   14b53:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b56:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:355
    memset((void*) (port->clb), 0, 1024);
   14b58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b5b:	8b 00                	mov    eax,DWORD PTR [eax]
   14b5d:	83 ec 04             	sub    esp,0x4
   14b60:	68 00 04 00 00       	push   0x400
   14b65:	6a 00                	push   0x0
   14b67:	50                   	push   eax
   14b68:	e8 54 08 01 00       	call   253c1 <memset>
   14b6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:356
    kMapPage(port->clb,port->clb,0x73); //make un-cached
   14b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b73:	8b 10                	mov    edx,DWORD PTR [eax]
   14b75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b78:	8b 00                	mov    eax,DWORD PTR [eax]
   14b7a:	83 ec 04             	sub    esp,0x4
   14b7d:	6a 73                	push   0x73
   14b7f:	52                   	push   edx
   14b80:	50                   	push   eax
   14b81:	e8 02 cc ff ff       	call   11788 <kMapPage>
   14b86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:361
    
    //each FIS is 256 bytes
    // FIS offset: 32K+256*portno
    // FIS entry size = 256 bytes per port
    port->fbu = 0;
   14b89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b8c:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:363
//    port->fb = (remapBase + (32 << 10) + (portno << 12) + 0x1000) & 0xFFFFF000;
    port->fb = (port->clb + 0x1000);
   14b93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14b96:	8b 00                	mov    eax,DWORD PTR [eax]
   14b98:	8d 90 00 10 00 00    	lea    edx,[eax+0x1000]
   14b9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ba1:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:364
    memset((void*) (port->fb), 0, 256);
   14ba4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14ba7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14baa:	83 ec 04             	sub    esp,0x4
   14bad:	68 00 01 00 00       	push   0x100
   14bb2:	6a 00                	push   0x0
   14bb4:	50                   	push   eax
   14bb5:	e8 07 08 01 00       	call   253c1 <memset>
   14bba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:365
    kMapPage(port->fb,port->fb,0x73); //make un-cached
   14bbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14bc0:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14bc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14bc6:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14bc9:	83 ec 04             	sub    esp,0x4
   14bcc:	6a 73                	push   0x73
   14bce:	52                   	push   edx
   14bcf:	50                   	push   eax
   14bd0:	e8 b3 cb ff ff       	call   11788 <kMapPage>
   14bd5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:370


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
   14bd8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14bdb:	8b 00                	mov    eax,DWORD PTR [eax]
   14bdd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:371
    for (int i = 0; i < 32; i++) {
   14be0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   14be7:	eb 79                	jmp    14c62 <port_rebase+0x16e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:372 (discriminator 3)
        cmdheader[i].prdtl = 8; // 8 prdt entries per command table
   14be9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14bec:	c1 e0 05             	shl    eax,0x5
   14bef:	89 c2                	mov    edx,eax
   14bf1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14bf4:	01 d0                	add    eax,edx
   14bf6:	66 c7 40 02 08 00    	mov    WORD PTR [eax+0x2],0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:375 (discriminator 3)
        // 256 bytes per command table, 64+16+48+16*8
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
   14bfc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14bff:	c1 e0 05             	shl    eax,0x5
   14c02:	89 c2                	mov    edx,eax
   14c04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14c07:	01 d0                	add    eax,edx
   14c09:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   14c0c:	c1 e2 0d             	shl    edx,0xd
   14c0f:	89 d1                	mov    ecx,edx
   14c11:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   14c14:	01 d1                	add    ecx,edx
   14c16:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   14c19:	c1 e2 08             	shl    edx,0x8
   14c1c:	01 ca                	add    edx,ecx
   14c1e:	81 c2 00 a0 00 00    	add    edx,0xa000
   14c24:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:376 (discriminator 3)
        cmdheader[i].ctbau = 0;
   14c27:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14c2a:	c1 e0 05             	shl    eax,0x5
   14c2d:	89 c2                	mov    edx,eax
   14c2f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14c32:	01 d0                	add    eax,edx
   14c34:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:377 (discriminator 3)
        memset((void*) cmdheader[i].ctba, 0, 256);
   14c3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14c3e:	c1 e0 05             	shl    eax,0x5
   14c41:	89 c2                	mov    edx,eax
   14c43:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14c46:	01 d0                	add    eax,edx
   14c48:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14c4b:	83 ec 04             	sub    esp,0x4
   14c4e:	68 00 01 00 00       	push   0x100
   14c53:	6a 00                	push   0x0
   14c55:	50                   	push   eax
   14c56:	e8 66 07 01 00       	call   253c1 <memset>
   14c5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 3)


    // Command table offset: 40K + 8K*portno
    // Command table size = 256*32 = 8K per port
    HBA_CMD_HEADER *cmdheader = (HBA_CMD_HEADER*) (port->clb);
    for (int i = 0; i < 32; i++) {
   14c5e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:371 (discriminator 1)
   14c62:	83 7d f4 1f          	cmp    DWORD PTR [ebp-0xc],0x1f
   14c66:	7e 81                	jle    14be9 <port_rebase+0xf5>
/home/yogi/src/os/chrisOS/src/block/ahci.c:379
        // Command table offset: 40K + 8K*portno + cmdheader_index*256
        cmdheader[i].ctba = remapBase + (40 << 10) + (portno << 13) + (i << 8);
        cmdheader[i].ctbau = 0;
        memset((void*) cmdheader[i].ctba, 0, 256);
    }
    printd(DEBUG_AHCI, " to 0x%08X/0x%08X\n", port->clb, port->fb);
   14c68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14c6b:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   14c6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14c71:	8b 00                	mov    eax,DWORD PTR [eax]
   14c73:	52                   	push   edx
   14c74:	50                   	push   eax
   14c75:	68 74 6b 04 00       	push   0x46b74
   14c7a:	68 00 20 00 00       	push   0x2000
   14c7f:	e8 a3 28 01 00       	call   27527 <printd>
   14c84:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:380
    start_cmd(port); // Start command engine
   14c87:	83 ec 0c             	sub    esp,0xc
   14c8a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14c8d:	e8 06 00 00 00       	call   14c98 <start_cmd>
   14c92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:381
}
   14c95:	90                   	nop
   14c96:	c9                   	leave  
   14c97:	c3                   	ret    

00014c98 <start_cmd>:
start_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:385

// Start command engine

void start_cmd(volatile HBA_PORT *port) {
   14c98:	55                   	push   ebp
   14c99:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:387
    // Wait until CR (bit15) is cleared
    while (port->cmd.CR);
   14c9b:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:387 (discriminator 1)
   14c9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14c9f:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ca2:	c1 e8 0f             	shr    eax,0xf
   14ca5:	83 e0 01             	and    eax,0x1
   14ca8:	84 c0                	test   al,al
   14caa:	75 f0                	jne    14c9c <start_cmd+0x4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:390

    // Set FRE (bit4) and ST (bit0)
    port->cmd.FRE = 1;
   14cac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14caf:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14cb2:	83 ca 10             	or     edx,0x10
   14cb5:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:391
    port->cmd.ST = 1;
   14cb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cbb:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14cbe:	83 ca 01             	or     edx,0x1
   14cc1:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:392
}
   14cc4:	90                   	nop
   14cc5:	5d                   	pop    ebp
   14cc6:	c3                   	ret    

00014cc7 <waitForPortIdle>:
waitForPortIdle():
/home/yogi/src/os/chrisOS/src/block/ahci.c:394

void waitForPortIdle(volatile HBA_PORT *port) {
   14cc7:	55                   	push   ebp
   14cc8:	89 e5                	mov    ebp,esp
   14cca:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14ccd:	eb 0d                	jmp    14cdc <waitForPortIdle+0x15>
/home/yogi/src/os/chrisOS/src/block/ahci.c:396
        waitTicks(20);
   14ccf:	83 ec 0c             	sub    esp,0xc
   14cd2:	6a 14                	push   0x14
   14cd4:	e8 52 3a 01 00       	call   2872b <waitTicks>
   14cd9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:395
    port->cmd.FRE = 1;
    port->cmd.ST = 1;
}

void waitForPortIdle(volatile HBA_PORT *port) {
    while (port->cmd.ST | port->cmd.CR | port->cmd.FRE | port->cmd.FR) {
   14cdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cdf:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ce2:	83 e0 01             	and    eax,0x1
   14ce5:	89 c2                	mov    edx,eax
   14ce7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cea:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14ced:	c1 e8 0f             	shr    eax,0xf
   14cf0:	83 e0 01             	and    eax,0x1
   14cf3:	09 c2                	or     edx,eax
   14cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14cf8:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14cfb:	c1 e8 04             	shr    eax,0x4
   14cfe:	83 e0 01             	and    eax,0x1
   14d01:	09 c2                	or     edx,eax
   14d03:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d06:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14d09:	c1 e8 0e             	shr    eax,0xe
   14d0c:	83 e0 01             	and    eax,0x1
   14d0f:	09 d0                	or     eax,edx
   14d11:	84 c0                	test   al,al
   14d13:	75 ba                	jne    14ccf <waitForPortIdle+0x8>
/home/yogi/src/os/chrisOS/src/block/ahci.c:398
        waitTicks(20);
    }
}
   14d15:	90                   	nop
   14d16:	c9                   	leave  
   14d17:	c3                   	ret    

00014d18 <stop_cmd>:
stop_cmd():
/home/yogi/src/os/chrisOS/src/block/ahci.c:402

// Stop command engine

void stop_cmd(volatile volatile HBA_PORT *port) {
   14d18:	55                   	push   ebp
   14d19:	89 e5                	mov    ebp,esp
   14d1b:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:404
    // Clear ST (bit0)
    port->cmd.ST = 0;
   14d1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d21:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14d24:	83 e2 fe             	and    edx,0xfffffffe
   14d27:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:407
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
   14d2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d2d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14d30:	c1 e8 0e             	shr    eax,0xe
   14d33:	83 e0 01             	and    eax,0x1
   14d36:	84 c0                	test   al,al
   14d38:	74 1f                	je     14d59 <stop_cmd+0x41>
/home/yogi/src/os/chrisOS/src/block/ahci.c:409
            break;
        if (!(port->cmd.CR))
   14d3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d3d:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   14d40:	c1 e8 0f             	shr    eax,0xf
   14d43:	83 e0 01             	and    eax,0x1
   14d46:	84 c0                	test   al,al
   14d48:	74 12                	je     14d5c <stop_cmd+0x44>
/home/yogi/src/os/chrisOS/src/block/ahci.c:411
            break;
        waitTicks(20);
   14d4a:	83 ec 0c             	sub    esp,0xc
   14d4d:	6a 14                	push   0x14
   14d4f:	e8 d7 39 01 00       	call   2872b <waitTicks>
   14d54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:412
    }
   14d57:	eb d1                	jmp    14d2a <stop_cmd+0x12>
/home/yogi/src/os/chrisOS/src/block/ahci.c:408
    // Clear ST (bit0)
    port->cmd.ST = 0;
    // Wait until FR (bit14), CR (bit15) are cleared
    while (1) {
        if (!(port->cmd.FR))
            break;
   14d59:	90                   	nop
   14d5a:	eb 01                	jmp    14d5d <stop_cmd+0x45>
/home/yogi/src/os/chrisOS/src/block/ahci.c:410
        if (!(port->cmd.CR))
            break;
   14d5c:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:415
        waitTicks(20);
    }

    // Clear FRE (bit4)
    port->cmd.FRE = 0;
   14d5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d60:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   14d63:	83 e2 ef             	and    edx,0xffffffef
   14d66:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:416
}
   14d69:	90                   	nop
   14d6a:	c9                   	leave  
   14d6b:	c3                   	ret    

00014d6c <ahciIdentify>:
ahciIdentify():
/home/yogi/src/os/chrisOS/src/block/ahci.c:418

void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
   14d6c:	55                   	push   ebp
   14d6d:	89 e5                	mov    ebp,esp
   14d6f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/block/ahci.c:419
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
   14d72:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   14d75:	a1 04 48 12 00       	mov    eax,ds:0x124804
   14d7a:	83 ec 0c             	sub    esp,0xc
   14d7d:	52                   	push   edx
   14d7e:	50                   	push   eax
   14d7f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14d82:	68 88 6b 04 00       	push   0x46b88
   14d87:	68 00 20 00 00       	push   0x2000
   14d8c:	e8 96 27 01 00       	call   27527 <printd>
   14d91:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:420
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
   14d94:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14d97:	8b 00                	mov    eax,DWORD PTR [eax]
   14d99:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:421
    int slot = find_cmdslot(port);
   14d9c:	83 ec 0c             	sub    esp,0xc
   14d9f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14da2:	e8 66 03 00 00       	call   1510d <find_cmdslot>
   14da7:	83 c4 10             	add    esp,0x10
   14daa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:422
    if (slot == -1)
   14dad:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   14db1:	0f 84 53 03 00 00    	je     1510a <ahciIdentify+0x39e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:424
        return;
    port->ie.AsUlong = 0xFFFFFFFF;
   14db7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14dba:	c7 40 14 ff ff ff ff 	mov    DWORD PTR [eax+0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:425
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   14dc1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   14dc4:	c1 e0 05             	shl    eax,0x5
   14dc7:	89 c2                	mov    edx,eax
   14dc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   14dcc:	01 d0                	add    eax,edx
   14dce:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:426
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   14dd1:	83 ec 04             	sub    esp,0x4
   14dd4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   14dd7:	68 90 64 04 00       	push   0x46490
   14ddc:	68 00 20 00 00       	push   0x2000
   14de1:	e8 41 27 01 00       	call   27527 <printd>
   14de6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:427
    cmdheader->prdtl = 1;
   14de9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14dec:	66 c7 40 02 01 00    	mov    WORD PTR [eax+0x2],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:428
    cmdheader->cfl = 5; //sizeof (FIS_REG_H2D) / sizeof (uint32_t);
   14df2:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14df5:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14df8:	83 e2 e0             	and    edx,0xffffffe0
   14dfb:	83 ca 05             	or     edx,0x5
   14dfe:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:429
    cmdheader->w = 0;
   14e00:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14e03:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14e06:	83 e2 bf             	and    edx,0xffffffbf
   14e09:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:430
    cmdheader->a = 0;
   14e0b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14e0e:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14e11:	83 e2 df             	and    edx,0xffffffdf
   14e14:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:431
    cmdheader->c = 0;
   14e16:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14e19:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14e1d:	83 e2 fb             	and    edx,0xfffffffb
   14e20:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:432
    cmdheader->p = 0;
   14e23:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14e26:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   14e29:	83 e2 7f             	and    edx,0x7f
   14e2c:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:433
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
   14e2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14e31:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14e34:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:435
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   14e37:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14e3a:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:434
    cmdheader->w = 0;
    cmdheader->a = 0;
    cmdheader->c = 0;
    cmdheader->p = 0;
    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) cmdheader->ctba;
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   14e3e:	0f b7 c0             	movzx  eax,ax
   14e41:	83 c0 08             	add    eax,0x8
   14e44:	c1 e0 04             	shl    eax,0x4
   14e47:	83 ec 04             	sub    esp,0x4
   14e4a:	50                   	push   eax
   14e4b:	6a 00                	push   0x0
   14e4d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14e50:	e8 6c 05 01 00       	call   253c1 <memset>
   14e55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:436
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   14e58:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   14e5b:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   14e5e:	50                   	push   eax
   14e5f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   14e62:	68 a8 64 04 00       	push   0x464a8
   14e67:	68 00 20 00 00       	push   0x2000
   14e6c:	e8 b6 26 01 00       	call   27527 <printd>
   14e71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:437
    cmdtbl->prdt_entry[0].dba = AHCI_DISK_BUFFER_ADDRESS;
   14e74:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14e77:	c7 80 80 00 00 00 00 	mov    DWORD PTR [eax+0x80],0xc53000
   14e7e:	30 c5 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:438
    cmdtbl->prdt_entry[0].dbc = 0x1ff;
   14e81:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14e84:	8b 90 8c 00 00 00    	mov    edx,DWORD PTR [eax+0x8c]
   14e8a:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   14e90:	81 ca ff 01 00 00    	or     edx,0x1ff
   14e96:	89 90 8c 00 00 00    	mov    DWORD PTR [eax+0x8c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:439
    cmdtbl->prdt_entry[0].i = 1;
   14e9c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14e9f:	0f b6 90 8f 00 00 00 	movzx  edx,BYTE PTR [eax+0x8f]
   14ea6:	83 ca 80             	or     edx,0xffffff80
   14ea9:	88 90 8f 00 00 00    	mov    BYTE PTR [eax+0x8f],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:441

    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   14eaf:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   14eb2:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:442
    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   14eb5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14eb8:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:443
    cmdfis->c = 1; // Command
   14ebb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ebe:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14ec2:	83 ca 80             	or     edx,0xffffff80
   14ec5:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:444
    if (deviceType == AHCI_DEV_SATAPI)
   14ec8:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   14ecc:	75 09                	jne    14ed7 <ahciIdentify+0x16b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:445
        cmdfis->command = ATA_IDENTIFY_CDROM_COMMAND;
   14ece:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ed1:	c6 40 02 a1          	mov    BYTE PTR [eax+0x2],0xa1
   14ed5:	eb 07                	jmp    14ede <ahciIdentify+0x172>
/home/yogi/src/os/chrisOS/src/block/ahci.c:447
    else
        cmdfis->command = ATA_IDENTIFY_COMMAND;
   14ed7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14eda:	c6 40 02 ec          	mov    BYTE PTR [eax+0x2],0xec
/home/yogi/src/os/chrisOS/src/block/ahci.c:448
    cmdfis->lba0 = 0;
   14ede:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ee1:	c6 40 04 00          	mov    BYTE PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:449
    cmdfis->lba1 = 0;
   14ee5:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ee8:	c6 40 05 00          	mov    BYTE PTR [eax+0x5],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:450
    cmdfis->lba2 = 0;
   14eec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14eef:	c6 40 06 00          	mov    BYTE PTR [eax+0x6],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:451
    cmdfis->lba3 = 0;
   14ef3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14ef6:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:452
    cmdfis->lba4 = 0;
   14efa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14efd:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:453
    cmdfis->lba5 = 0;
   14f01:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14f04:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:454
    cmdfis->lba5 = 0;
   14f08:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14f0b:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:455
    cmdfis->pmport = 0;
   14f0f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14f12:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   14f16:	83 e2 f0             	and    edx,0xfffffff0
   14f19:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:456
    cmdfis->device = 0;
   14f1c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14f1f:	c6 40 07 00          	mov    BYTE PTR [eax+0x7],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:457
    cmdfis->countl = 1;
   14f23:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14f26:	c6 40 0c 01          	mov    BYTE PTR [eax+0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:458
    cmdfis->counth = 0;
   14f2a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   14f2d:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:459
    int lCmdVal = AhciIssueCmd(port, slot);
   14f31:	83 ec 08             	sub    esp,0x8
   14f34:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   14f37:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   14f3a:	e8 fd ea ff ff       	call   13a3c <AhciIssueCmd>
   14f3f:	83 c4 10             	add    esp,0x10
   14f42:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:460
    if (!lCmdVal) {
   14f45:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   14f49:	75 18                	jne    14f63 <ahciIdentify+0x1f7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:461
        printk("AHCI: ***Error identifying device (%u)***\n",lCmdVal);
   14f4b:	83 ec 08             	sub    esp,0x8
   14f4e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   14f51:	68 b8 6b 04 00       	push   0x46bb8
   14f56:	e8 ac 25 01 00       	call   27507 <printk>
   14f5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:462
        return;
   14f5e:	e9 a8 01 00 00       	jmp    1510b <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:464
    }
    kATADeviceInfo[kATADeviceInfoCount].ATADeviceAvailable = true;
   14f63:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14f69:	a1 04 48 12 00       	mov    eax,ds:0x124804
   14f6e:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14f74:	01 d0                	add    eax,edx
   14f76:	c6 80 51 02 00 00 01 	mov    BYTE PTR [eax+0x251],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:465
    kATADeviceInfo[kATADeviceInfoCount].bus = SATA;
   14f7d:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14f83:	a1 04 48 12 00       	mov    eax,ds:0x124804
   14f88:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14f8e:	01 d0                	add    eax,edx
   14f90:	c7 80 61 02 00 00 02 	mov    DWORD PTR [eax+0x261],0x2
   14f97:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:466
    kATADeviceInfo[kATADeviceInfoCount].driveNo = kATADeviceInfoCount;
   14f9a:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14fa0:	a1 04 48 12 00       	mov    eax,ds:0x124804
   14fa5:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14fab:	01 d0                	add    eax,edx
   14fad:	8b 15 04 48 12 00    	mov    edx,DWORD PTR ds:0x124804
   14fb3:	89 90 65 02 00 00    	mov    DWORD PTR [eax+0x265],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:467
    kATADeviceInfo[kATADeviceInfoCount].ioPort = (uintptr_t) port;
   14fb9:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14fbf:	a1 04 48 12 00       	mov    eax,ds:0x124804
   14fc4:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14fca:	01 c2                	add    edx,eax
   14fcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   14fcf:	89 82 69 02 00 00    	mov    DWORD PTR [edx+0x269],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:468
    kATADeviceInfo[kATADeviceInfoCount].irqNum = 0;
   14fd5:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14fdb:	a1 04 48 12 00       	mov    eax,ds:0x124804
   14fe0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   14fe6:	01 d0                	add    eax,edx
   14fe8:	c6 80 6d 02 00 00 00 	mov    BYTE PTR [eax+0x26d],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:469
    kATADeviceInfo[kATADeviceInfoCount].driveHeadPortDesignation = 0x0;
   14fef:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   14ff5:	a1 04 48 12 00       	mov    eax,ds:0x124804
   14ffa:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15000:	01 d0                	add    eax,edx
   15002:	c6 80 6e 02 00 00 00 	mov    BYTE PTR [eax+0x26e],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:470
    kATADeviceInfo[kATADeviceInfoCount].queryATAData = false;
   15009:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   1500f:	a1 04 48 12 00       	mov    eax,ds:0x124804
   15014:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1501a:	01 d0                	add    eax,edx
   1501c:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:471
    if (deviceType == AHCI_DEV_SATAPI)
   15023:	83 7d 0c 04          	cmp    DWORD PTR [ebp+0xc],0x4
   15027:	75 1f                	jne    15048 <ahciIdentify+0x2dc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:472
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_CD;
   15029:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   1502f:	a1 04 48 12 00       	mov    eax,ds:0x124804
   15034:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   1503a:	01 d0                	add    eax,edx
   1503c:	c7 80 52 02 00 00 03 	mov    DWORD PTR [eax+0x252],0x3
   15043:	00 00 00 
   15046:	eb 1d                	jmp    15065 <ahciIdentify+0x2f9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:474
    else
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
   15048:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   1504e:	a1 04 48 12 00       	mov    eax,ds:0x124804
   15053:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15059:	01 d0                	add    eax,edx
   1505b:	c7 80 52 02 00 00 02 	mov    DWORD PTR [eax+0x252],0x2
   15062:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:475
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
   15065:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   1506b:	a1 04 48 12 00       	mov    eax,ds:0x124804
   15070:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15076:	01 c2                	add    edx,eax
   15078:	a1 90 49 12 00       	mov    eax,ds:0x124990
   1507d:	89 82 6f 02 00 00    	mov    DWORD PTR [edx+0x26f],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:476
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
   15083:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   15089:	a1 04 48 12 00       	mov    eax,ds:0x124804
   1508e:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   15094:	01 d0                	add    eax,edx
   15096:	83 ec 04             	sub    esp,0x4
   15099:	68 00 02 00 00       	push   0x200
   1509e:	68 00 30 c5 00       	push   0xc53000
   150a3:	50                   	push   eax
   150a4:	e8 c3 0d 01 00       	call   25e6c <memcpy>
   150a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:477
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
   150ac:	8b 0d 00 48 12 00    	mov    ecx,DWORD PTR ds:0x124800
   150b2:	a1 04 48 12 00       	mov    eax,ds:0x124804
   150b7:	8d 50 01             	lea    edx,[eax+0x1]
   150ba:	89 15 04 48 12 00    	mov    DWORD PTR ds:0x124804,edx
   150c0:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   150c6:	01 c8                	add    eax,ecx
   150c8:	83 ec 0c             	sub    esp,0xc
   150cb:	50                   	push   eax
   150cc:	e8 f5 d6 00 00       	call   227c6 <ataIdentify>
   150d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:478
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
   150d4:	a1 00 48 12 00       	mov    eax,ds:0x124800
   150d9:	8b 15 04 48 12 00    	mov    edx,DWORD PTR ds:0x124804
   150df:	69 d2 73 02 00 00    	imul   edx,edx,0x273
   150e5:	81 ea 73 02 00 00    	sub    edx,0x273
   150eb:	01 d0                	add    eax,edx
   150ed:	05 00 02 00 00       	add    eax,0x200
   150f2:	83 ec 04             	sub    esp,0x4
   150f5:	50                   	push   eax
   150f6:	68 e4 6b 04 00       	push   0x46be4
   150fb:	68 00 20 00 00       	push   0x2000
   15100:	e8 22 24 01 00       	call   27527 <printd>
   15105:	83 c4 10             	add    esp,0x10
   15108:	eb 01                	jmp    1510b <ahciIdentify+0x39f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:423
void ahciIdentify(volatile HBA_PORT* port, int deviceType) {
    printd(DEBUG_AHCI, "AHCI: ahciIdentify, port@0x%08X(%u), 0x%08X\n", port, kATADeviceInfoCount, &port->clb);
    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) port->clb;
    int slot = find_cmdslot(port);
    if (slot == -1)
        return;
   1510a:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:479
        kATADeviceInfo[kATADeviceInfoCount].ATADeviceType=ATA_DEVICE_TYPE_SATA_HD;
    kATADeviceInfo[kATADeviceInfoCount].ABAR=ahciABAR;
    memcpy(kATADeviceInfo[kATADeviceInfoCount].ATAIdentifyData, (void*) AHCI_DISK_BUFFER_ADDRESS, 512);
    ataIdentify(&kATADeviceInfo[kATADeviceInfoCount++]);
    printd(DEBUG_AHCI, "AHCI: SATA device found, name=%s\n", kATADeviceInfo[kATADeviceInfoCount - 1].ATADeviceModel);
}
   1510b:	c9                   	leave  
   1510c:	c3                   	ret    

0001510d <find_cmdslot>:
find_cmdslot():
/home/yogi/src/os/chrisOS/src/block/ahci.c:482
// Find a free command list slot

int find_cmdslot(volatile HBA_PORT *port) {
   1510d:	55                   	push   ebp
   1510e:	89 e5                	mov    ebp,esp
   15110:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/ahci.c:483
    printd(DEBUG_AHCI, "AHCI: find_cmdslot - finding a slot to use to execute a command\n");
   15113:	83 ec 08             	sub    esp,0x8
   15116:	68 08 6c 04 00       	push   0x46c08
   1511b:	68 00 20 00 00       	push   0x2000
   15120:	e8 02 24 01 00       	call   27527 <printd>
   15125:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:487
    // An empty command slot has its respective bit cleared to �0� in both the PxCI and PxSACT registers.
    // If not set in SACT and CI, the slot is free // Checked
    
    uint32_t slots = (/*port->sact | */port->ci);
   15128:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1512b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1512e:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:488
    int num_of_slots = ahciABAR->cap.NCS;
   15131:	a1 90 49 12 00       	mov    eax,ds:0x124990
   15136:	8b 00                	mov    eax,DWORD PTR [eax]
   15138:	c1 e8 08             	shr    eax,0x8
   1513b:	83 e0 1f             	and    eax,0x1f
   1513e:	0f b6 c0             	movzx  eax,al
   15141:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:489
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
   15144:	a1 90 49 12 00       	mov    eax,ds:0x124990
   15149:	8b 00                	mov    eax,DWORD PTR [eax]
   1514b:	c1 e8 08             	shr    eax,0x8
   1514e:	83 e0 1f             	and    eax,0x1f
   15151:	0f b6 d0             	movzx  edx,al
   15154:	a1 90 49 12 00       	mov    eax,ds:0x124990
   15159:	52                   	push   edx
   1515a:	50                   	push   eax
   1515b:	68 4c 6c 04 00       	push   0x46c4c
   15160:	68 00 20 00 00       	push   0x2000
   15165:	e8 bd 23 01 00       	call   27527 <printd>
   1516a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:491
    int i;
    for (i = 0; i < num_of_slots; i++) {
   1516d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   15174:	eb 46                	jmp    151bc <find_cmdslot+0xaf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:493

        if ((slots & 1) == 0) {
   15176:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15179:	83 e0 01             	and    eax,0x1
   1517c:	85 c0                	test   eax,eax
   1517e:	75 1d                	jne    1519d <find_cmdslot+0x90>
/home/yogi/src/os/chrisOS/src/block/ahci.c:494
            printd(DEBUG_AHCI, "AHCI: [command slot is : %d]\n", i);
   15180:	83 ec 04             	sub    esp,0x4
   15183:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15186:	68 78 6c 04 00       	push   0x46c78
   1518b:	68 00 20 00 00       	push   0x2000
   15190:	e8 92 23 01 00       	call   27527 <printd>
   15195:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:495
            return i;
   15198:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1519b:	eb 44                	jmp    151e1 <find_cmdslot+0xd4>
/home/yogi/src/os/chrisOS/src/block/ahci.c:498 (discriminator 2)

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
   1519d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   151a0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   151a3:	68 96 6c 04 00       	push   0x46c96
   151a8:	68 00 20 00 00       	push   0x2000
   151ad:	e8 75 23 01 00       	call   27527 <printd>
   151b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:499 (discriminator 2)
        slots >>= 1;
   151b5:	d1 6d f4             	shr    DWORD PTR [ebp-0xc],1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 2)
    
    uint32_t slots = (/*port->sact | */port->ci);
    int num_of_slots = ahciABAR->cap.NCS;
    printd(DEBUG_AHCI,"ahciABAR = %08X, Total slots available: %d\n",ahciABAR, ahciABAR->cap.NCS);
    int i;
    for (i = 0; i < num_of_slots; i++) {
   151b8:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:491 (discriminator 1)
   151bc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   151bf:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   151c2:	7c b2                	jl     15176 <find_cmdslot+0x69>
/home/yogi/src/os/chrisOS/src/block/ahci.c:501

        }
        printd(DEBUG_AHCI, "Slot %u is busy (0x%08X)\n", i,slots);
        slots >>= 1;
    }
    printd(DEBUG_AHCI, "AHCI: Cannot find free command list entry, count=%u, slots=0x%08X\n", num_of_slots, slots);
   151c4:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   151c7:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   151ca:	68 b0 6c 04 00       	push   0x46cb0
   151cf:	68 00 20 00 00       	push   0x2000
   151d4:	e8 4e 23 01 00       	call   27527 <printd>
   151d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:502
    return -1;
   151dc:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:503
}
   151e1:	c9                   	leave  
   151e2:	c3                   	ret    

000151e3 <ahciSetCurrentDisk>:
ahciSetCurrentDisk():
/home/yogi/src/os/chrisOS/src/block/ahci.c:508

#define ATA_DEV_BUSY 0x80
#define ATA_DEV_DRQ 0x08

void ahciSetCurrentDisk(volatile HBA_PORT* port) {
   151e3:	55                   	push   ebp
   151e4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:509
    kAHCICurrentDisk = port;
   151e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151e9:	a3 4c 49 12 00       	mov    ds:0x12494c,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:510
}
   151ee:	90                   	nop
   151ef:	5d                   	pop    ebp
   151f0:	c3                   	ret    

000151f1 <ahciSetCurrentPart>:
ahciSetCurrentPart():
/home/yogi/src/os/chrisOS/src/block/ahci.c:513

void ahciSetCurrentPart(partEntry_t part) 
{
   151f1:	55                   	push   ebp
   151f2:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:514
    kAHCICurrentPart = part;
   151f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   151f7:	a3 50 49 12 00       	mov    ds:0x124950,eax
   151fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   151ff:	a3 54 49 12 00       	mov    ds:0x124954,eax
   15204:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15207:	a3 58 49 12 00       	mov    ds:0x124958,eax
   1520c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1520f:	a3 5c 49 12 00       	mov    ds:0x12495c,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:515
}
   15214:	90                   	nop
   15215:	5d                   	pop    ebp
   15216:	c3                   	ret    

00015217 <ahciRead>:
ahciRead():
/home/yogi/src/os/chrisOS/src/block/ahci.c:517

int ahciRead(volatile HBA_PORT* port, int sector, uint8_t* buffer, int sector_count) {
   15217:	55                   	push   ebp
   15218:	89 e5                	mov    ebp,esp
   1521a:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/ahci.c:518
    ahciSetCurrentDisk(port);
   1521d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15220:	e8 be ff ff ff       	call   151e3 <ahciSetCurrentDisk>
   15225:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/block/ahci.c:519
    if (ahciBlockingRead28(sector, buffer, sector_count))
   15228:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1522b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1522e:	83 ec 04             	sub    esp,0x4
   15231:	52                   	push   edx
   15232:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   15235:	50                   	push   eax
   15236:	e8 13 00 00 00       	call   1524e <ahciBlockingRead28>
   1523b:	83 c4 10             	add    esp,0x10
   1523e:	85 c0                	test   eax,eax
   15240:	74 05                	je     15247 <ahciRead+0x30>
/home/yogi/src/os/chrisOS/src/block/ahci.c:520
        return sector_count;
   15242:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   15245:	eb 05                	jmp    1524c <ahciRead+0x35>
/home/yogi/src/os/chrisOS/src/block/ahci.c:522
    else
        return 0;
   15247:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:523
}
   1524c:	c9                   	leave  
   1524d:	c3                   	ret    

0001524e <ahciBlockingRead28>:
ahciBlockingRead28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:526

///Read the current disk *partition* 
int ahciBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   1524e:	55                   	push   ebp
   1524f:	89 e5                	mov    ebp,esp
   15251:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/block/ahci.c:527
    int prdCntr = 0;
   15254:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:530

    //CLR 06/07/2016 - Must add partition start sector
    sector+=kAHCICurrentPart.partStartSector;
   1525b:	a1 50 49 12 00       	mov    eax,ds:0x124950
   15260:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:532
    
    memset(buffer,0,sector_count*512);
   15263:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   15266:	c1 e0 09             	shl    eax,0x9
   15269:	83 ec 04             	sub    esp,0x4
   1526c:	50                   	push   eax
   1526d:	6a 00                	push   0x0
   1526f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15272:	e8 4a 01 01 00       	call   253c1 <memset>
   15277:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:534
    
    printd(DEBUG_AHCI, "AHCI: read on port=0x%08X,sector=0x%08X,buffer=0x%08X,sector_count=%u\n", kAHCICurrentDisk,sector,buffer,sector_count);
   1527a:	a1 4c 49 12 00       	mov    eax,ds:0x12494c
   1527f:	83 ec 08             	sub    esp,0x8
   15282:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   15285:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15288:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1528b:	50                   	push   eax
   1528c:	68 f4 6c 04 00       	push   0x46cf4
   15291:	68 00 20 00 00       	push   0x2000
   15296:	e8 8c 22 01 00       	call   27527 <printd>
   1529b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:536

    kAHCICurrentDisk->pxis.AsUlong = (uint32_t) - 1; // Clear pending interrupt bits
   1529e:	a1 4c 49 12 00       	mov    eax,ds:0x12494c
   152a3:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:537
    int spin = 0; // Spin lock timeout counter
   152aa:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:539

    HBA_CMD_HEADER* cmdhdr = (HBA_CMD_HEADER*) kAHCICurrentDisk->clb;
   152b1:	a1 4c 49 12 00       	mov    eax,ds:0x12494c
   152b6:	8b 00                	mov    eax,DWORD PTR [eax]
   152b8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:540
    int slot = find_cmdslot(kAHCICurrentDisk);
   152bb:	a1 4c 49 12 00       	mov    eax,ds:0x12494c
   152c0:	83 ec 0c             	sub    esp,0xc
   152c3:	50                   	push   eax
   152c4:	e8 44 fe ff ff       	call   1510d <find_cmdslot>
   152c9:	83 c4 10             	add    esp,0x10
   152cc:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:541
    if (slot == -1)
   152cf:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   152d3:	75 0a                	jne    152df <ahciBlockingRead28+0x91>
/home/yogi/src/os/chrisOS/src/block/ahci.c:542
        return false;
   152d5:	b8 00 00 00 00       	mov    eax,0x0
   152da:	e9 41 02 00 00       	jmp    15520 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:543
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
   152df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   152e2:	c1 e0 05             	shl    eax,0x5
   152e5:	89 c2                	mov    edx,eax
   152e7:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   152ea:	01 d0                	add    eax,edx
   152ec:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:544
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
   152ef:	83 ec 04             	sub    esp,0x4
   152f2:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   152f5:	68 90 64 04 00       	push   0x46490
   152fa:	68 00 20 00 00       	push   0x2000
   152ff:	e8 23 22 01 00       	call   27527 <printd>
   15304:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:545
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count
   15307:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1530a:	83 e8 01             	sub    eax,0x1
   1530d:	c1 e8 04             	shr    eax,0x4
   15310:	8d 50 01             	lea    edx,[eax+0x1]
   15313:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15316:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/block/ahci.c:547

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
   1531a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1531d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   15320:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:549
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
   15323:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15326:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/ahci.c:548
    HBA_CMD_HEADER* cmdheader = cmdhdr + slot;
    printd(DEBUG_AHCI, "AHCI: cmdheader=0x%08X\n", cmdheader);
    cmdheader->prdtl = (uint16_t) ((sector_count - 1) >> 4) + 1; // PRDT entries count

    HBA_CMD_TBL *cmdtbl = (HBA_CMD_TBL*) (cmdheader->ctba);
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
   1532a:	0f b7 c0             	movzx  eax,ax
   1532d:	83 c0 08             	add    eax,0x8
   15330:	c1 e0 04             	shl    eax,0x4
   15333:	83 ec 04             	sub    esp,0x4
   15336:	50                   	push   eax
   15337:	6a 00                	push   0x0
   15339:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1533c:	e8 80 00 01 00       	call   253c1 <memset>
   15341:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:550
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);
   15344:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   15347:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1534a:	50                   	push   eax
   1534b:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   1534e:	68 3c 6d 04 00       	push   0x46d3c
   15353:	68 00 20 00 00       	push   0x2000
   15358:	e8 ca 21 01 00       	call   27527 <printd>
   1535d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:553

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   15360:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   15367:	eb 5b                	jmp    153c4 <ahciBlockingRead28+0x176>
/home/yogi/src/os/chrisOS/src/block/ahci.c:554 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   15369:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1536c:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1536f:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   15372:	83 c1 08             	add    ecx,0x8
   15375:	c1 e1 04             	shl    ecx,0x4
   15378:	01 ca                	add    edx,ecx
   1537a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:555 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].dbc = 8 * 1024; // 8K bytes
   1537c:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1537f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   15382:	83 c2 08             	add    edx,0x8
   15385:	c1 e2 04             	shl    edx,0x4
   15388:	01 d0                	add    eax,edx
   1538a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1538d:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15393:	80 ce 20             	or     dh,0x20
   15396:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:556 (discriminator 3)
        cmdtbl->prdt_entry[prdCntr].i = 1;
   15399:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1539c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1539f:	83 c2 08             	add    edx,0x8
   153a2:	c1 e2 04             	shl    edx,0x4
   153a5:	01 d0                	add    eax,edx
   153a7:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   153ab:	83 ca 80             	or     edx,0xffffff80
   153ae:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:557 (discriminator 3)
        buffer += 4 * 1024; // 4K words
   153b1:	81 45 0c 00 10 00 00 	add    DWORD PTR [ebp+0xc],0x1000
/home/yogi/src/os/chrisOS/src/block/ahci.c:558 (discriminator 3)
        sector_count -= 16; // 16 sectors
   153b8:	83 6d 10 10          	sub    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:559 (discriminator 3)
        prdCntr++;
   153bc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 3)
    memset(cmdtbl, 0, sizeof (HBA_CMD_TBL) +
            (cmdheader->prdtl - 1) * sizeof (HBA_PRDT_ENTRY));
    printd(DEBUG_AHCI, "AHCI: read - cmdtable=0x%08X,ctba=0x%08X\n", cmdtbl, cmdheader->ctba);

    // 8K bytes (16 sectors) per PRDT
    for (int i = 0; i < cmdheader->prdtl - 1; i++) {
   153c0:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:553 (discriminator 1)
   153c4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   153c7:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   153cb:	0f b7 c0             	movzx  eax,ax
   153ce:	83 e8 01             	sub    eax,0x1
   153d1:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   153d4:	7f 93                	jg     15369 <ahciBlockingRead28+0x11b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:562
        buffer += 4 * 1024; // 4K words
        sector_count -= 16; // 16 sectors
        prdCntr++;
    }
    // Last entry
    cmdtbl->prdt_entry[prdCntr].dba = (uint32_t) buffer;
   153d6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   153d9:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   153dc:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   153df:	83 c1 08             	add    ecx,0x8
   153e2:	c1 e1 04             	shl    ecx,0x4
   153e5:	01 ca                	add    edx,ecx
   153e7:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:563
    cmdtbl->prdt_entry[prdCntr].dbc = sector_count << 9; // 512 bytes per sector
   153e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   153ec:	c1 e0 09             	shl    eax,0x9
   153ef:	25 ff ff 3f 00       	and    eax,0x3fffff
   153f4:	89 c1                	mov    ecx,eax
   153f6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   153f9:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   153fc:	83 c2 08             	add    edx,0x8
   153ff:	c1 e2 04             	shl    edx,0x4
   15402:	01 d0                	add    eax,edx
   15404:	81 e1 ff ff 3f 00    	and    ecx,0x3fffff
   1540a:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1540d:	81 e2 00 00 c0 ff    	and    edx,0xffc00000
   15413:	09 ca                	or     edx,ecx
   15415:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:564
    cmdtbl->prdt_entry[prdCntr].i = 1;
   15418:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1541b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1541e:	83 c2 08             	add    edx,0x8
   15421:	c1 e2 04             	shl    edx,0x4
   15424:	01 d0                	add    eax,edx
   15426:	0f b6 50 0f          	movzx  edx,BYTE PTR [eax+0xf]
   1542a:	83 ca 80             	or     edx,0xffffff80
   1542d:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:567

    // Setup command
    FIS_REG_H2D *cmdfis = (FIS_REG_H2D*) (&cmdtbl->cfis);
   15430:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   15433:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:569

    cmdfis->fis_type = FIS_TYPE_REG_H2D;
   15436:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15439:	c6 00 27             	mov    BYTE PTR [eax],0x27
/home/yogi/src/os/chrisOS/src/block/ahci.c:570
    cmdfis->c = 1; // Command
   1543c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1543f:	0f b6 50 01          	movzx  edx,BYTE PTR [eax+0x1]
   15443:	83 ca 80             	or     edx,0xffffff80
   15446:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:571
    cmdfis->command = ATA_CMD_READ_DMA_EX;
   15449:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1544c:	c6 40 02 25          	mov    BYTE PTR [eax+0x2],0x25
/home/yogi/src/os/chrisOS/src/block/ahci.c:572
    cmdfis->lba0 = (uint8_t) sector;
   15450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15453:	89 c2                	mov    edx,eax
   15455:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15458:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:573
    cmdfis->lba1 = (uint8_t) (sector >> 8);
   1545b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1545e:	c1 e8 08             	shr    eax,0x8
   15461:	89 c2                	mov    edx,eax
   15463:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15466:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:574
    cmdfis->lba2 = (uint8_t) (sector >> 16);
   15469:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1546c:	c1 e8 10             	shr    eax,0x10
   1546f:	89 c2                	mov    edx,eax
   15471:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15474:	88 50 06             	mov    BYTE PTR [eax+0x6],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:575
    cmdfis->device = 1 << 6; // LBA mode
   15477:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1547a:	c6 40 07 40          	mov    BYTE PTR [eax+0x7],0x40
/home/yogi/src/os/chrisOS/src/block/ahci.c:577

    cmdfis->lba3 = (uint8_t) (sector >> 24);
   1547e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15481:	c1 e8 18             	shr    eax,0x18
   15484:	89 c2                	mov    edx,eax
   15486:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15489:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:578
    cmdfis->lba4 = (uint8_t) 0;
   1548c:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1548f:	c6 40 09 00          	mov    BYTE PTR [eax+0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:579
    cmdfis->lba5 = (uint8_t) 0;
   15493:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   15496:	c6 40 0a 00          	mov    BYTE PTR [eax+0xa],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:581

    cmdfis->countl = LOBYTE((uint16_t) sector_count);
   1549a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1549d:	89 c2                	mov    edx,eax
   1549f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   154a2:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:582
    cmdfis->counth = HIBYTE((uint16_t) sector_count);
   154a5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   154a8:	0f b7 c0             	movzx  eax,ax
   154ab:	c1 f8 08             	sar    eax,0x8
   154ae:	89 c2                	mov    edx,eax
   154b0:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   154b3:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/block/ahci.c:584

    int lCMdVal = AhciIssueCmd(kAHCICurrentDisk, slot);
   154b6:	a1 4c 49 12 00       	mov    eax,ds:0x12494c
   154bb:	83 ec 08             	sub    esp,0x8
   154be:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   154c1:	50                   	push   eax
   154c2:	e8 75 e5 ff ff       	call   13a3c <AhciIssueCmd>
   154c7:	83 c4 10             	add    esp,0x10
   154ca:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:585
    if (!lCMdVal) {
   154cd:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   154d1:	75 1c                	jne    154ef <ahciBlockingRead28+0x2a1>
/home/yogi/src/os/chrisOS/src/block/ahci.c:586
        printd(DEBUG_AHCI, "AHCI: ***Error reading from disk***\n");
   154d3:	83 ec 08             	sub    esp,0x8
   154d6:	68 68 6d 04 00       	push   0x46d68
   154db:	68 00 20 00 00       	push   0x2000
   154e0:	e8 42 20 01 00       	call   27527 <printd>
   154e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:587
        return -1;
   154e8:	b8 ff ff ff ff       	mov    eax,0xffffffff
   154ed:	eb 31                	jmp    15520 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:591
    }

    // Check again
    if (kAHCICurrentDisk->pxis.TFES) {
   154ef:	a1 4c 49 12 00       	mov    eax,ds:0x12494c
   154f4:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   154f7:	c1 e8 1e             	shr    eax,0x1e
   154fa:	83 e0 01             	and    eax,0x1
   154fd:	84 c0                	test   al,al
   154ff:	74 1c                	je     1551d <ahciBlockingRead28+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:592
        printd(DEBUG_AHCI, "AHCI: Read disk error\n");
   15501:	83 ec 08             	sub    esp,0x8
   15504:	68 4f 64 04 00       	push   0x4644f
   15509:	68 00 20 00 00       	push   0x2000
   1550e:	e8 14 20 01 00       	call   27527 <printd>
   15513:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:593
        return false;
   15516:	b8 00 00 00 00       	mov    eax,0x0
   1551b:	eb 03                	jmp    15520 <ahciBlockingRead28+0x2d2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:596
    }

    return sector_count;
   1551d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/block/ahci.c:597
}
   15520:	c9                   	leave  
   15521:	c3                   	ret    

00015522 <ahciBlockingWrite28>:
ahciBlockingWrite28():
/home/yogi/src/os/chrisOS/src/block/ahci.c:599

int ahciBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count) {
   15522:	55                   	push   ebp
   15523:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/block/ahci.c:600
    return 0;
   15525:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:601
}
   1552a:	5d                   	pop    ebp
   1552b:	c3                   	ret    

0001552c <ahciInit>:
ahciInit():
/home/yogi/src/os/chrisOS/src/block/ahci.c:603

bool ahciInit() {
   1552c:	55                   	push   ebp
   1552d:	89 e5                	mov    ebp,esp
   1552f:	56                   	push   esi
   15530:	53                   	push   ebx
   15531:	81 ec b0 00 00 00    	sub    esp,0xb0
/home/yogi/src/os/chrisOS/src/block/ahci.c:604
    kATADeviceInfoCount = 4;
   15537:	c7 05 04 48 12 00 04 	mov    DWORD PTR ds:0x124804,0x4
   1553e:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/ahci.c:605
    bool ahciDeviceFound = false;
   15541:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:608
    char buffer[150];

    memset(buffer, 0, 150);
   15545:	83 ec 04             	sub    esp,0x4
   15548:	68 96 00 00 00       	push   0x96
   1554d:	6a 00                	push   0x0
   1554f:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   15555:	50                   	push   eax
   15556:	e8 66 fe 00 00       	call   253c1 <memset>
   1555b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:610

    if (!kPCIDeviceCount) {
   1555e:	0f b6 05 ec 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ec
   15565:	84 c0                	test   al,al
   15567:	75 1f                	jne    15588 <ahciInit+0x5c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:611
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
   15569:	83 ec 08             	sub    esp,0x8
   1556c:	68 90 6d 04 00       	push   0x46d90
   15571:	68 00 20 00 00       	push   0x2000
   15576:	e8 ac 1f 01 00       	call   27527 <printd>
   1557b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:612
        return false;
   1557e:	b8 00 00 00 00       	mov    eax,0x0
   15583:	e9 b1 04 00 00       	jmp    15a39 <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:615
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   15588:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1558f:	e9 35 02 00 00       	jmp    157c9 <ahciInit+0x29d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616
        if (kPCIDeviceHeaders[cnt].class == 1 && kPCIDeviceHeaders[cnt].subClass == 6) 
   15594:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   1559a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1559d:	89 d0                	mov    eax,edx
   1559f:	c1 e0 02             	shl    eax,0x2
   155a2:	01 d0                	add    eax,edx
   155a4:	c1 e0 04             	shl    eax,0x4
   155a7:	01 c8                	add    eax,ecx
   155a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   155ac:	83 f8 01             	cmp    eax,0x1
   155af:	0f 85 10 02 00 00    	jne    157c5 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:616 (discriminator 1)
   155b5:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   155bb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   155be:	89 d0                	mov    eax,edx
   155c0:	c1 e0 02             	shl    eax,0x2
   155c3:	01 d0                	add    eax,edx
   155c5:	c1 e0 04             	shl    eax,0x4
   155c8:	01 c8                	add    eax,ecx
   155ca:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   155cd:	83 f8 06             	cmp    eax,0x6
   155d0:	0f 85 ef 01 00 00    	jne    157c5 <ahciInit+0x299>
/home/yogi/src/os/chrisOS/src/block/ahci.c:618
        {
            memcpy(&kPCISATADevice, &kPCIDeviceHeaders[cnt], sizeof (struct pci_device_t));
   155d6:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   155dc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   155df:	89 d0                	mov    eax,edx
   155e1:	c1 e0 02             	shl    eax,0x2
   155e4:	01 d0                	add    eax,edx
   155e6:	c1 e0 04             	shl    eax,0x4
   155e9:	01 c8                	add    eax,ecx
   155eb:	83 ec 04             	sub    esp,0x4
   155ee:	6a 50                	push   0x50
   155f0:	50                   	push   eax
   155f1:	68 20 48 12 00       	push   0x124820
   155f6:	e8 71 08 01 00       	call   25e6c <memcpy>
   155fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:619
            ahciDeviceFound = true;
   155fe:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:620
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (D) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceHeaders[cnt].class, kPCIDeviceHeaders[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   15602:	83 ec 08             	sub    esp,0x8
   15605:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   1560b:	50                   	push   eax
   1560c:	68 20 48 12 00       	push   0x124820
   15611:	e8 d8 14 00 00       	call   16aee <getDeviceNameP>
   15616:	83 c4 10             	add    esp,0x10
   15619:	89 c6                	mov    esi,eax
   1561b:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   15621:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   15624:	89 d0                	mov    eax,edx
   15626:	c1 e0 02             	shl    eax,0x2
   15629:	01 d0                	add    eax,edx
   1562b:	c1 e0 04             	shl    eax,0x4
   1562e:	01 c8                	add    eax,ecx
   15630:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   15633:	8b 1d f4 47 12 00    	mov    ebx,DWORD PTR ds:0x1247f4
   15639:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1563c:	89 d0                	mov    eax,edx
   1563e:	c1 e0 02             	shl    eax,0x2
   15641:	01 d0                	add    eax,edx
   15643:	c1 e0 04             	shl    eax,0x4
   15646:	01 d8                	add    eax,ebx
   15648:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1564b:	83 ec 08             	sub    esp,0x8
   1564e:	56                   	push   esi
   1564f:	51                   	push   ecx
   15650:	50                   	push   eax
   15651:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15654:	68 c4 6d 04 00       	push   0x46dc4
   15659:	68 00 20 00 00       	push   0x2000
   1565e:	e8 c4 1e 01 00       	call   27527 <printd>
   15663:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:621
            printd(DEBUG_AHCI, "ABAR is at: before/remapped - 0x%08X/", kPCISATADevice.baseAdd[5]);
   15666:	a1 54 48 12 00       	mov    eax,ds:0x124854
   1566b:	83 ec 04             	sub    esp,0x4
   1566e:	50                   	push   eax
   1566f:	68 fc 6d 04 00       	push   0x46dfc
   15674:	68 00 20 00 00       	push   0x2000
   15679:	e8 a9 1e 01 00       	call   27527 <printd>
   1567e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:622
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   15681:	a1 24 8e 02 00       	mov    eax,ds:0x28e24
   15686:	c1 e0 0c             	shl    eax,0xc
   15689:	89 c2                	mov    edx,eax
   1568b:	c1 e2 04             	shl    edx,0x4
   1568e:	01 d0                	add    eax,edx
   15690:	05 00 30 ad 00       	add    eax,0xad3000
   15695:	a3 90 49 12 00       	mov    ds:0x124990,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:623
                kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5] , 0x73); //0x63 + cache disabled
   1569a:	a1 54 48 12 00       	mov    eax,ds:0x124854
   1569f:	8b 15 90 49 12 00    	mov    edx,DWORD PTR ds:0x124990
   156a5:	83 ec 04             	sub    esp,0x4
   156a8:	6a 73                	push   0x73
   156aa:	50                   	push   eax
   156ab:	52                   	push   edx
   156ac:	e8 d7 c0 ff ff       	call   11788 <kMapPage>
   156b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:624
                kMapPage(kPCISATADevice.baseAdd[5],kPCISATADevice.baseAdd[5],0x73);
   156b4:	8b 15 54 48 12 00    	mov    edx,DWORD PTR ds:0x124854
   156ba:	a1 54 48 12 00       	mov    eax,ds:0x124854
   156bf:	83 ec 04             	sub    esp,0x4
   156c2:	6a 73                	push   0x73
   156c4:	52                   	push   edx
   156c5:	50                   	push   eax
   156c6:	e8 bd c0 ff ff       	call   11788 <kMapPage>
   156cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:625
            RELOAD_CR3
   156ce:	0f 20 d8             	mov    eax,cr3
   156d1:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:626
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   156d4:	8b 15 90 49 12 00    	mov    edx,DWORD PTR ds:0x124990
   156da:	a1 24 8e 02 00       	mov    eax,ds:0x28e24
   156df:	8d 48 01             	lea    ecx,[eax+0x1]
   156e2:	89 0d 24 8e 02 00    	mov    DWORD PTR ds:0x28e24,ecx
   156e8:	c1 e0 08             	shl    eax,0x8
   156eb:	89 c1                	mov    ecx,eax
   156ed:	c1 e1 04             	shl    ecx,0x4
   156f0:	01 c8                	add    eax,ecx
   156f2:	05 40 b5 08 00       	add    eax,0x8b540
   156f7:	83 ec 04             	sub    esp,0x4
   156fa:	68 00 11 00 00       	push   0x1100
   156ff:	52                   	push   edx
   15700:	50                   	push   eax
   15701:	e8 66 07 01 00       	call   25e6c <memcpy>
   15706:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:627
            printd(DEBUG_AHCI, "0x%08X\n", ahciABAR);
   15709:	a1 90 49 12 00       	mov    eax,ds:0x124990
   1570e:	83 ec 04             	sub    esp,0x4
   15711:	50                   	push   eax
   15712:	68 22 6e 04 00       	push   0x46e22
   15717:	68 00 20 00 00       	push   0x2000
   1571c:	e8 06 1e 01 00       	call   27527 <printd>
   15721:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:628
            memcpy(&ahciCaps[ahciCapsCount++], (void*) ahciABAR, sizeof (ahcicaps_t));
   15724:	8b 15 90 49 12 00    	mov    edx,DWORD PTR ds:0x124990
   1572a:	8b 1d 24 49 12 00    	mov    ebx,DWORD PTR ds:0x124924
   15730:	a1 28 49 12 00       	mov    eax,ds:0x124928
   15735:	8d 48 01             	lea    ecx,[eax+0x1]
   15738:	89 0d 28 49 12 00    	mov    DWORD PTR ds:0x124928,ecx
   1573e:	c1 e0 02             	shl    eax,0x2
   15741:	01 d8                	add    eax,ebx
   15743:	83 ec 04             	sub    esp,0x4
   15746:	6a 04                	push   0x4
   15748:	52                   	push   edx
   15749:	50                   	push   eax
   1574a:	e8 1d 07 01 00       	call   25e6c <memcpy>
   1574f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:629
            if (!(ahciABAR->ghc.AE)) {
   15752:	a1 90 49 12 00       	mov    eax,ds:0x124990
   15757:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1575a:	c1 e8 1f             	shr    eax,0x1f
   1575d:	84 c0                	test   al,al
   1575f:	75 26                	jne    15787 <ahciInit+0x25b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:630
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   15761:	83 ec 08             	sub    esp,0x8
   15764:	68 2a 6e 04 00       	push   0x46e2a
   15769:	68 00 20 00 00       	push   0x2000
   1576e:	e8 b4 1d 01 00       	call   27527 <printd>
   15773:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:631
                ahciABAR->ghc.AE=1;
   15776:	a1 90 49 12 00       	mov    eax,ds:0x124990
   1577b:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1577e:	81 ca 00 00 00 80    	or     edx,0x80000000
   15784:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:633
            }
            ahciABAR->ghc.IE=1;
   15787:	a1 90 49 12 00       	mov    eax,ds:0x124990
   1578c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1578f:	83 ca 02             	or     edx,0x2
   15792:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:634
            if (ahciABAR->cap2 & 1) {
   15795:	a1 90 49 12 00       	mov    eax,ds:0x124990
   1579a:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1579d:	83 e0 01             	and    eax,0x1
   157a0:	85 c0                	test   eax,eax
   157a2:	74 10                	je     157b4 <ahciInit+0x288>
/home/yogi/src/os/chrisOS/src/block/ahci.c:635
                panic("Write support for BIOS handoff!!!");
   157a4:	83 ec 0c             	sub    esp,0xc
   157a7:	68 44 6e 04 00       	push   0x46e44
   157ac:	e8 d7 18 01 00       	call   27088 <panic>
   157b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:637
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   157b4:	a1 90 49 12 00       	mov    eax,ds:0x124990
   157b9:	83 ec 0c             	sub    esp,0xc
   157bc:	50                   	push   eax
   157bd:	e8 88 ea ff ff       	call   1424a <ahciProbePorts>
   157c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 2)
    if (!kPCIDeviceCount) {
        printd(DEBUG_AHCI, "AHCI: PCI not initialized, cannot initialize AHCI.");
        return false;
    }

    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   157c5:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:615 (discriminator 1)
   157c9:	0f b6 05 ec 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ec
   157d0:	0f b6 c0             	movzx  eax,al
   157d3:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   157d6:	0f 8f b8 fd ff ff    	jg     15594 <ahciInit+0x68>
/home/yogi/src/os/chrisOS/src/block/ahci.c:639
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   157dc:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   157e3:	e9 12 02 00 00       	jmp    159fa <ahciInit+0x4ce>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640
        if (kPCIDeviceFunctions[cnt].class == 1 && kPCIDeviceFunctions[cnt].subClass == 6) 
   157e8:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   157ee:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   157f1:	89 d0                	mov    eax,edx
   157f3:	c1 e0 02             	shl    eax,0x2
   157f6:	01 d0                	add    eax,edx
   157f8:	c1 e0 04             	shl    eax,0x4
   157fb:	01 c8                	add    eax,ecx
   157fd:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   15800:	83 f8 01             	cmp    eax,0x1
   15803:	0f 85 ed 01 00 00    	jne    159f6 <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:640 (discriminator 1)
   15809:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   1580f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15812:	89 d0                	mov    eax,edx
   15814:	c1 e0 02             	shl    eax,0x2
   15817:	01 d0                	add    eax,edx
   15819:	c1 e0 04             	shl    eax,0x4
   1581c:	01 c8                	add    eax,ecx
   1581e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   15821:	83 f8 06             	cmp    eax,0x6
   15824:	0f 85 cc 01 00 00    	jne    159f6 <ahciInit+0x4ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:642
        {
            memcpy(&kPCISATADevice, &kPCIDeviceFunctions[cnt], sizeof (struct pci_device_t));
   1582a:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   15830:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15833:	89 d0                	mov    eax,edx
   15835:	c1 e0 02             	shl    eax,0x2
   15838:	01 d0                	add    eax,edx
   1583a:	c1 e0 04             	shl    eax,0x4
   1583d:	01 c8                	add    eax,ecx
   1583f:	83 ec 04             	sub    esp,0x4
   15842:	6a 50                	push   0x50
   15844:	50                   	push   eax
   15845:	68 20 48 12 00       	push   0x124820
   1584a:	e8 1d 06 01 00       	call   25e6c <memcpy>
   1584f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:643
            ahciDeviceFound = true;
   15852:	c6 45 f7 01          	mov    BYTE PTR [ebp-0x9],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:644
            printd(DEBUG_AHCI, "AHCI: Found AHCI controller (F) (%02X/%02X/%02X) '%s'\n", cnt, kPCIDeviceFunctions[cnt].class, kPCIDeviceFunctions[cnt].subClass, getDeviceNameP(&kPCISATADevice, buffer));
   15856:	83 ec 08             	sub    esp,0x8
   15859:	8d 85 56 ff ff ff    	lea    eax,[ebp-0xaa]
   1585f:	50                   	push   eax
   15860:	68 20 48 12 00       	push   0x124820
   15865:	e8 84 12 00 00       	call   16aee <getDeviceNameP>
   1586a:	83 c4 10             	add    esp,0x10
   1586d:	89 c6                	mov    esi,eax
   1586f:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   15875:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15878:	89 d0                	mov    eax,edx
   1587a:	c1 e0 02             	shl    eax,0x2
   1587d:	01 d0                	add    eax,edx
   1587f:	c1 e0 04             	shl    eax,0x4
   15882:	01 c8                	add    eax,ecx
   15884:	8b 48 14             	mov    ecx,DWORD PTR [eax+0x14]
   15887:	8b 1d fc 47 12 00    	mov    ebx,DWORD PTR ds:0x1247fc
   1588d:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   15890:	89 d0                	mov    eax,edx
   15892:	c1 e0 02             	shl    eax,0x2
   15895:	01 d0                	add    eax,edx
   15897:	c1 e0 04             	shl    eax,0x4
   1589a:	01 d8                	add    eax,ebx
   1589c:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1589f:	83 ec 08             	sub    esp,0x8
   158a2:	56                   	push   esi
   158a3:	51                   	push   ecx
   158a4:	50                   	push   eax
   158a5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   158a8:	68 68 6e 04 00       	push   0x46e68
   158ad:	68 00 20 00 00       	push   0x2000
   158b2:	e8 70 1c 01 00       	call   27527 <printd>
   158b7:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:645
            printd(DEBUG_AHCI, "ABAR is at: 0x%08X\n", kPCISATADevice.baseAdd[5]);
   158ba:	a1 54 48 12 00       	mov    eax,ds:0x124854
   158bf:	83 ec 04             	sub    esp,0x4
   158c2:	50                   	push   eax
   158c3:	68 9f 6e 04 00       	push   0x46e9f
   158c8:	68 00 20 00 00       	push   0x2000
   158cd:	e8 55 1c 01 00       	call   27527 <printd>
   158d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:646
            ahciABAR = (HBA_MEM*) AHCI_ABAR_REMAPPED_ADDRESS + (0x10 * ahciHostCount);
   158d5:	a1 24 8e 02 00       	mov    eax,ds:0x28e24
   158da:	c1 e0 0c             	shl    eax,0xc
   158dd:	89 c2                	mov    edx,eax
   158df:	c1 e2 04             	shl    edx,0x4
   158e2:	01 d0                	add    eax,edx
   158e4:	05 00 30 ad 00       	add    eax,0xad3000
   158e9:	a3 90 49 12 00       	mov    ds:0x124990,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:647
            kMapPage((uintptr_t) ahciABAR, kPCISATADevice.baseAdd[5], 0x73); //0x63 + cache disabled
   158ee:	a1 54 48 12 00       	mov    eax,ds:0x124854
   158f3:	8b 15 90 49 12 00    	mov    edx,DWORD PTR ds:0x124990
   158f9:	83 ec 04             	sub    esp,0x4
   158fc:	6a 73                	push   0x73
   158fe:	50                   	push   eax
   158ff:	52                   	push   edx
   15900:	e8 83 be ff ff       	call   11788 <kMapPage>
   15905:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:648
            RELOAD_CR3
   15908:	0f 20 d8             	mov    eax,cr3
   1590b:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:649
            memcpy((void*) &ABARs[ahciHostCount++], (void*) ahciABAR, sizeof (HBA_MEM));
   1590e:	8b 15 90 49 12 00    	mov    edx,DWORD PTR ds:0x124990
   15914:	a1 24 8e 02 00       	mov    eax,ds:0x28e24
   15919:	8d 48 01             	lea    ecx,[eax+0x1]
   1591c:	89 0d 24 8e 02 00    	mov    DWORD PTR ds:0x28e24,ecx
   15922:	c1 e0 08             	shl    eax,0x8
   15925:	89 c1                	mov    ecx,eax
   15927:	c1 e1 04             	shl    ecx,0x4
   1592a:	01 c8                	add    eax,ecx
   1592c:	05 40 b5 08 00       	add    eax,0x8b540
   15931:	83 ec 04             	sub    esp,0x4
   15934:	68 00 11 00 00       	push   0x1100
   15939:	52                   	push   edx
   1593a:	50                   	push   eax
   1593b:	e8 2c 05 01 00       	call   25e6c <memcpy>
   15940:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:650
            printd(DEBUG_AHCI, "Remapped ABAR is now at: 0x%08X\n", ahciABAR);
   15943:	a1 90 49 12 00       	mov    eax,ds:0x124990
   15948:	83 ec 04             	sub    esp,0x4
   1594b:	50                   	push   eax
   1594c:	68 b4 6e 04 00       	push   0x46eb4
   15951:	68 00 20 00 00       	push   0x2000
   15956:	e8 cc 1b 01 00       	call   27527 <printd>
   1595b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:651
            memcpy(&ahciCaps[ahciCapsCount], (void*) ahciABAR, sizeof (ahcicaps_t));
   1595e:	a1 90 49 12 00       	mov    eax,ds:0x124990
   15963:	8b 15 24 49 12 00    	mov    edx,DWORD PTR ds:0x124924
   15969:	8b 0d 28 49 12 00    	mov    ecx,DWORD PTR ds:0x124928
   1596f:	c1 e1 02             	shl    ecx,0x2
   15972:	01 ca                	add    edx,ecx
   15974:	83 ec 04             	sub    esp,0x4
   15977:	6a 04                	push   0x4
   15979:	50                   	push   eax
   1597a:	52                   	push   edx
   1597b:	e8 ec 04 01 00       	call   25e6c <memcpy>
   15980:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:652
            if (!(ahciABAR->ghc.AE)) {
   15983:	a1 90 49 12 00       	mov    eax,ds:0x124990
   15988:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1598b:	c1 e8 1f             	shr    eax,0x1f
   1598e:	84 c0                	test   al,al
   15990:	75 26                	jne    159b8 <ahciInit+0x48c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:653
                printd(DEBUG_AHCI,"switching to AHCI mode\n");
   15992:	83 ec 08             	sub    esp,0x8
   15995:	68 2a 6e 04 00       	push   0x46e2a
   1599a:	68 00 20 00 00       	push   0x2000
   1599f:	e8 83 1b 01 00       	call   27527 <printd>
   159a4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:654
                ahciABAR->ghc.AE=1;
   159a7:	a1 90 49 12 00       	mov    eax,ds:0x124990
   159ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   159af:	81 ca 00 00 00 80    	or     edx,0x80000000
   159b5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:656
            }
            ahciABAR->ghc.IE=1;
   159b8:	a1 90 49 12 00       	mov    eax,ds:0x124990
   159bd:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   159c0:	83 ca 02             	or     edx,0x2
   159c3:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:657
            if (ahciABAR->cap2 & 1) {
   159c6:	a1 90 49 12 00       	mov    eax,ds:0x124990
   159cb:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   159ce:	83 e0 01             	and    eax,0x1
   159d1:	85 c0                	test   eax,eax
   159d3:	74 10                	je     159e5 <ahciInit+0x4b9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:658
                panic("Write support for BIOS handoff!!!");
   159d5:	83 ec 0c             	sub    esp,0xc
   159d8:	68 44 6e 04 00       	push   0x46e44
   159dd:	e8 a6 16 01 00       	call   27088 <panic>
   159e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:660
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
   159e5:	a1 90 49 12 00       	mov    eax,ds:0x124990
   159ea:	83 ec 0c             	sub    esp,0xc
   159ed:	50                   	push   eax
   159ee:	e8 57 e8 ff ff       	call   1424a <ahciProbePorts>
   159f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 2)
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    for (int cnt = 0; cnt < kPCIDeviceCount; cnt++)
   159f6:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:639 (discriminator 1)
   159fa:	0f b6 05 ec 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ec
   15a01:	0f b6 c0             	movzx  eax,al
   15a04:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   15a07:	0f 8f db fd ff ff    	jg     157e8 <ahciInit+0x2bc>
/home/yogi/src/os/chrisOS/src/block/ahci.c:662
            if (ahciABAR->cap2 & 1) {
                panic("Write support for BIOS handoff!!!");
            }
            ahciProbePorts((HBA_MEM*) ahciABAR);
        }
    if (!ahciDeviceFound) {
   15a0d:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   15a11:	83 f0 01             	xor    eax,0x1
   15a14:	84 c0                	test   al,al
   15a16:	74 1c                	je     15a34 <ahciInit+0x508>
/home/yogi/src/os/chrisOS/src/block/ahci.c:663
        printd(DEBUG_AHCI, "AHCI: No AHCI devices found.");
   15a18:	83 ec 08             	sub    esp,0x8
   15a1b:	68 d5 6e 04 00       	push   0x46ed5
   15a20:	68 00 20 00 00       	push   0x2000
   15a25:	e8 fd 1a 01 00       	call   27527 <printd>
   15a2a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:664
        return false;
   15a2d:	b8 00 00 00 00       	mov    eax,0x0
   15a32:	eb 05                	jmp    15a39 <ahciInit+0x50d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:668
    }


    return true;
   15a34:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:669 (discriminator 1)
}
   15a39:	8d 65 f8             	lea    esp,[ebp-0x8]
   15a3c:	5b                   	pop    ebx
   15a3d:	5e                   	pop    esi
   15a3e:	5d                   	pop    ebp
   15a3f:	c3                   	ret    

00015a40 <ahci_port_activate_device>:
ahci_port_activate_device():
/home/yogi/src/os/chrisOS/src/block/ahci.c:672

void ahci_port_activate_device(HBA_MEM* h, HBA_PORT* p)
{
   15a40:	55                   	push   ebp
   15a41:	89 e5                	mov    ebp,esp
   15a43:	53                   	push   ebx
   15a44:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:673
    printd(DEBUG_AHCI,"activate port %d @ 0x%08X:\n", p - h->ports,p);
   15a47:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a4a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15a4d:	81 c2 00 01 00 00    	add    edx,0x100
   15a53:	29 d0                	sub    eax,edx
   15a55:	c1 f8 07             	sar    eax,0x7
   15a58:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15a5b:	50                   	push   eax
   15a5c:	68 f2 6e 04 00       	push   0x46ef2
   15a61:	68 00 20 00 00       	push   0x2000
   15a66:	e8 bc 1a 01 00       	call   27527 <printd>
   15a6b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:675
    /* first check the presence flag */
    if ( (p->ssts & 0x7) == HBA_PORT_DET_NOT_PRESENT) { //check DET status
   15a6e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a71:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15a74:	83 e0 07             	and    eax,0x7
   15a77:	85 c0                	test   eax,eax
   15a79:	0f 85 38 02 00 00    	jne    15cb7 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:676
                    printd(DEBUG_AHCI,"activate: DET_NOT_PRESENT\n");
   15a7f:	83 ec 08             	sub    esp,0x8
   15a82:	68 0e 6f 04 00       	push   0x46f0e
   15a87:	68 00 20 00 00       	push   0x2000
   15a8c:	e8 96 1a 01 00       	call   27527 <printd>
   15a91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:678
                    /* nothing attached? */
                    if (p->cmd.CPD) { /* we rely on CPD */
   15a94:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15a97:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15a9a:	c1 e8 14             	shr    eax,0x14
   15a9d:	83 e0 01             	and    eax,0x1
   15aa0:	84 c0                	test   al,al
   15aa2:	74 65                	je     15b09 <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:679
                                    if (!p->cmd.CPS) {
   15aa4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15aa7:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15aaa:	c1 e8 10             	shr    eax,0x10
   15aad:	83 e0 01             	and    eax,0x1
   15ab0:	84 c0                	test   al,al
   15ab2:	75 1a                	jne    15ace <ahci_port_activate_device+0x8e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:680
                                                    printd(DEBUG_AHCI,"confirmed by CPD\n");
   15ab4:	83 ec 08             	sub    esp,0x8
   15ab7:	68 29 6f 04 00       	push   0x46f29
   15abc:	68 00 20 00 00       	push   0x2000
   15ac1:	e8 61 1a 01 00       	call   27527 <printd>
   15ac6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:681
                                                    return;
   15ac9:	e9 b4 03 00 00       	jmp    15e82 <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:684
                                    }
                                    /* there's something */
                                    if (!p->cmd.POD) {
   15ace:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ad1:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15ad4:	c1 e8 02             	shr    eax,0x2
   15ad7:	83 e0 01             	and    eax,0x1
   15ada:	84 c0                	test   al,al
   15adc:	75 19                	jne    15af7 <ahci_port_activate_device+0xb7>
/home/yogi/src/os/chrisOS/src/block/ahci.c:685
                                                    p->cmd.POD = 1; /* power it */
   15ade:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ae1:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15ae4:	83 ca 04             	or     edx,0x4
   15ae7:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:686
                                                    wait(20);
   15aea:	83 ec 0c             	sub    esp,0xc
   15aed:	6a 14                	push   0x14
   15aef:	e8 52 2c 01 00       	call   28746 <wait>
   15af4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:688
                                    }
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15af7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15afa:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15afd:	83 e0 07             	and    eax,0x7
   15b00:	85 c0                	test   eax,eax
   15b02:	74 05                	je     15b09 <ahci_port_activate_device+0xc9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:689
                                                    goto next_step;
   15b04:	e9 ae 01 00 00       	jmp    15cb7 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:692
                    }
                    /* spin-up? */
                    if (!p->cmd.SUD) { /* always !1 if cap.sss == 0 */
   15b09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b0c:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15b0f:	d1 e8                	shr    eax,1
   15b11:	83 e0 01             	and    eax,0x1
   15b14:	84 c0                	test   al,al
   15b16:	0f 85 f7 00 00 00    	jne    15c13 <ahci_port_activate_device+0x1d3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:693
                                    printd(DEBUG_AHCI,"not spun-up yet?\n");
   15b1c:	83 ec 08             	sub    esp,0x8
   15b1f:	68 3b 6f 04 00       	push   0x46f3b
   15b24:	68 00 20 00 00       	push   0x2000
   15b29:	e8 f9 19 01 00       	call   27527 <printd>
   15b2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:694
                                    if (p->serr.AsUlong & (1 << 26)) /* eXchange bit */
   15b31:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b34:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15b37:	25 00 00 00 04       	and    eax,0x4000000
   15b3c:	85 c0                	test   eax,eax
   15b3e:	74 13                	je     15b53 <ahci_port_activate_device+0x113>
/home/yogi/src/os/chrisOS/src/block/ahci.c:695
                                                    p->serr.AsUlong |= (1 << 26); /* RWC */
   15b40:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b43:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15b46:	0d 00 00 00 04       	or     eax,0x4000000
   15b4b:	89 c2                	mov    edx,eax
   15b4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b50:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:696
                                    if ((p->ssts & 0x7) != 0) { /* set to 0 prior sud */
   15b53:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b56:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15b59:	83 e0 07             	and    eax,0x7
   15b5c:	85 c0                	test   eax,eax
   15b5e:	74 19                	je     15b79 <ahci_port_activate_device+0x139>
/home/yogi/src/os/chrisOS/src/block/ahci.c:697
                                                    p->sctl.DET = 0;
   15b60:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b63:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15b66:	83 e2 f0             	and    edx,0xfffffff0
   15b69:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:698
                                                    wait(20);
   15b6c:	83 ec 0c             	sub    esp,0xc
   15b6f:	6a 14                	push   0x14
   15b71:	e8 d0 2b 01 00       	call   28746 <wait>
   15b76:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:700
                                    }
                                    p->cmd.SUD = 1;
   15b79:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b7c:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15b7f:	83 ca 02             	or     edx,0x2
   15b82:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:701
                                    waitTicks(5); /* wait 50 mus */
   15b85:	83 ec 0c             	sub    esp,0xc
   15b88:	6a 05                	push   0x5
   15b8a:	e8 9c 2b 01 00       	call   2872b <waitTicks>
   15b8f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:702
                                    if (p->serr.AsUlong & ((1 << 26) | (1 << 18))) { /* received sth. */
   15b92:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15b95:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15b98:	25 00 00 04 04       	and    eax,0x4040000
   15b9d:	85 c0                	test   eax,eax
   15b9f:	74 05                	je     15ba6 <ahci_port_activate_device+0x166>
/home/yogi/src/os/chrisOS/src/block/ahci.c:704
                                                    /* COMRESET, COMWAKE */
                                                    goto next_step;
   15ba1:	e9 11 01 00 00       	jmp    15cb7 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:707
                                    }
                                    /* send the reset */
                                    p->sctl.DET = 1;
   15ba6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ba9:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15bac:	83 e2 f0             	and    edx,0xfffffff0
   15baf:	83 ca 01             	or     edx,0x1
   15bb2:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:708
                                    waitTicks(100);
   15bb5:	83 ec 0c             	sub    esp,0xc
   15bb8:	6a 64                	push   0x64
   15bba:	e8 6c 2b 01 00       	call   2872b <waitTicks>
   15bbf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:709
                                    p->sctl.DET = 0;
   15bc2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bc5:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15bc8:	83 e2 f0             	and    edx,0xfffffff0
   15bcb:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:710
                                    wait(20);
   15bce:	83 ec 0c             	sub    esp,0xc
   15bd1:	6a 14                	push   0x14
   15bd3:	e8 6e 2b 01 00       	call   28746 <wait>
   15bd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:711
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15bdb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bde:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15be1:	83 e0 07             	and    eax,0x7
   15be4:	85 c0                	test   eax,eax
   15be6:	74 05                	je     15bed <ahci_port_activate_device+0x1ad>
/home/yogi/src/os/chrisOS/src/block/ahci.c:712
                                                    goto next_step;
   15be8:	e9 ca 00 00 00       	jmp    15cb7 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:713
                                    p->cmd.SUD = 0; /* we're done enter listening mode */
   15bed:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15bf0:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15bf3:	83 e2 fd             	and    edx,0xfffffffd
   15bf6:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:714
                                    printd(DEBUG_AHCI,"not present\n");
   15bf9:	83 ec 08             	sub    esp,0x8
   15bfc:	68 4d 6f 04 00       	push   0x46f4d
   15c01:	68 00 20 00 00       	push   0x2000
   15c06:	e8 1c 19 01 00       	call   27527 <printd>
   15c0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:715
                                    goto exit;
   15c0e:	e9 47 02 00 00       	jmp    15e5a <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:718
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
   15c13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c16:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15c19:	c1 e8 08             	shr    eax,0x8
   15c1c:	83 e0 0f             	and    eax,0xf
   15c1f:	3c 01                	cmp    al,0x1
   15c21:	0f 84 90 00 00 00    	je     15cb7 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:719
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
   15c27:	83 ec 08             	sub    esp,0x8
   15c2a:	68 5a 6f 04 00       	push   0x46f5a
   15c2f:	68 00 20 00 00       	push   0x2000
   15c34:	e8 ee 18 01 00       	call   27527 <printd>
   15c39:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:720
                                    int ct = 50;
   15c3c:	c7 45 f4 32 00 00 00 	mov    DWORD PTR [ebp-0xc],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                                    while (p->cmd.ICC && ct--)
   15c43:	eb 0d                	jmp    15c52 <ahci_port_activate_device+0x212>
/home/yogi/src/os/chrisOS/src/block/ahci.c:722
                                                    waitTicks(1);
   15c45:	83 ec 0c             	sub    esp,0xc
   15c48:	6a 01                	push   0x1
   15c4a:	e8 dc 2a 01 00       	call   2872b <waitTicks>
   15c4f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:721
                    }
                    /* just try ICC */
                    if (p->sctl.IPM != 1) {
                                    printd(DEBUG_AHCI,"IPM != ACTIVE\n");
                                    int ct = 50;
                                    while (p->cmd.ICC && ct--)
   15c52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c55:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15c58:	c1 e8 1c             	shr    eax,0x1c
   15c5b:	84 c0                	test   al,al
   15c5d:	74 0d                	je     15c6c <ahci_port_activate_device+0x22c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:721 (discriminator 1)
   15c5f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15c62:	8d 50 ff             	lea    edx,[eax-0x1]
   15c65:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   15c68:	85 c0                	test   eax,eax
   15c6a:	75 d9                	jne    15c45 <ahci_port_activate_device+0x205>
/home/yogi/src/os/chrisOS/src/block/ahci.c:723
                                                    waitTicks(1);
                                    p->cmd.ICC = 1;
   15c6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c6f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15c72:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15c78:	81 ca 00 00 00 10    	or     edx,0x10000000
   15c7e:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:724
                                    wait(10);
   15c81:	83 ec 0c             	sub    esp,0xc
   15c84:	6a 0a                	push   0xa
   15c86:	e8 bb 2a 01 00       	call   28746 <wait>
   15c8b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:725
                                    if ((p->ssts & 0x7) != HBA_PORT_DET_NOT_PRESENT)
   15c8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15c91:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15c94:	83 e0 07             	and    eax,0x7
   15c97:	85 c0                	test   eax,eax
   15c99:	74 02                	je     15c9d <ahci_port_activate_device+0x25d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:726
                                                    goto next_step;
   15c9b:	eb 1a                	jmp    15cb7 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:727
                                    printd(DEBUG_AHCI,"unable to set to active\n");
   15c9d:	83 ec 08             	sub    esp,0x8
   15ca0:	68 69 6f 04 00       	push   0x46f69
   15ca5:	68 00 20 00 00       	push   0x2000
   15caa:	e8 78 18 01 00       	call   27527 <printd>
   15caf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:728
                                    goto exit;
   15cb2:	e9 a3 01 00 00       	jmp    15e5a <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:734
                    }
    }

    /* det != 1*/
next_step:
    if ((p->ssts & 0x7) == HBA_PORT_DET_PRESENT) {
   15cb7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15cba:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15cbd:	83 e0 07             	and    eax,0x7
   15cc0:	83 f8 03             	cmp    eax,0x3
   15cc3:	0f 85 41 01 00 00    	jne    15e0a <ahci_port_activate_device+0x3ca>
/home/yogi/src/os/chrisOS/src/block/ahci.c:736
                    /* almost done */
                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE) {
   15cc9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15ccc:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15ccf:	c1 e8 08             	shr    eax,0x8
   15cd2:	83 e0 0f             	and    eax,0xf
   15cd5:	3c 01                	cmp    al,0x1
   15cd7:	0f 84 b8 00 00 00    	je     15d95 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:738
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
   15cdd:	83 ec 08             	sub    esp,0x8
   15ce0:	68 82 6f 04 00       	push   0x46f82
   15ce5:	68 00 20 00 00       	push   0x2000
   15cea:	e8 38 18 01 00       	call   27527 <printd>
   15cef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:740
activ:
                                    ct = 50, wc = 0;
   15cf2:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
   15cf9:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15d00:	eb 0d                	jmp    15d0f <ahci_port_activate_device+0x2cf>
/home/yogi/src/os/chrisOS/src/block/ahci.c:743
                                                    waitTicks(1);
   15d02:	83 ec 0c             	sub    esp,0xc
   15d05:	6a 01                	push   0x1
   15d07:	e8 1f 2a 01 00       	call   2872b <waitTicks>
   15d0c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:742
                                    int ct, wc;
                                    printd(DEBUG_AHCI,"Present but not active.\n");
activ:
                                    ct = 50, wc = 0;
rewait:
                                    while (p->cmd.ICC && ct--) /* 500ms */
   15d0f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d12:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   15d15:	c1 e8 1c             	shr    eax,0x1c
   15d18:	84 c0                	test   al,al
   15d1a:	74 0d                	je     15d29 <ahci_port_activate_device+0x2e9>
/home/yogi/src/os/chrisOS/src/block/ahci.c:742 (discriminator 1)
   15d1c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15d1f:	8d 50 ff             	lea    edx,[eax-0x1]
   15d22:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   15d25:	85 c0                	test   eax,eax
   15d27:	75 d9                	jne    15d02 <ahci_port_activate_device+0x2c2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744
                                                    waitTicks(1);
                                    if (p->sctl.IPM != HBA_PORT_IPM_ACTIVE && !wc) {
   15d29:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d2c:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15d2f:	c1 e8 08             	shr    eax,0x8
   15d32:	83 e0 0f             	and    eax,0xf
   15d35:	3c 01                	cmp    al,0x1
   15d37:	74 35                	je     15d6e <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:744 (discriminator 1)
   15d39:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15d3d:	75 2f                	jne    15d6e <ahci_port_activate_device+0x32e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:745
                                                    p->cmd.ICC = 1;
   15d3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d42:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15d45:	81 e2 ff ff ff 0f    	and    edx,0xfffffff
   15d4b:	81 ca 00 00 00 10    	or     edx,0x10000000
   15d51:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:746
                                                    waitTicks(1);
   15d54:	83 ec 0c             	sub    esp,0xc
   15d57:	6a 01                	push   0x1
   15d59:	e8 cd 29 01 00       	call   2872b <waitTicks>
   15d5e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:747
                                                    wc++; ct = 50;
   15d61:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   15d65:	c7 45 f0 32 00 00 00 	mov    DWORD PTR [ebp-0x10],0x32
/home/yogi/src/os/chrisOS/src/block/ahci.c:748
                                                    goto rewait;
   15d6c:	eb 92                	jmp    15d00 <ahci_port_activate_device+0x2c0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:750
                                    }
                                    if (wc) {
   15d6e:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   15d72:	74 21                	je     15d95 <ahci_port_activate_device+0x355>
/home/yogi/src/os/chrisOS/src/block/ahci.c:752
                                                    /* reset */
                                                    p->sctl.DET = 1;
   15d74:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d77:	8b 50 2c             	mov    edx,DWORD PTR [eax+0x2c]
   15d7a:	83 e2 f0             	and    edx,0xfffffff0
   15d7d:	83 ca 01             	or     edx,0x1
   15d80:	89 50 2c             	mov    DWORD PTR [eax+0x2c],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:753
                                                    waitTicks(100);
   15d83:	83 ec 0c             	sub    esp,0xc
   15d86:	6a 64                	push   0x64
   15d88:	e8 9e 29 01 00       	call   2872b <waitTicks>
   15d8d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:754
                                                    goto next_step;
   15d90:	e9 22 ff ff ff       	jmp    15cb7 <ahci_port_activate_device+0x277>
/home/yogi/src/os/chrisOS/src/block/ahci.c:758
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
   15d95:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15d98:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15d9b:	81 c2 00 01 00 00    	add    edx,0x100
   15da1:	29 d0                	sub    eax,edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:757
                                                    p->sctl.DET = 1;
                                                    waitTicks(100);
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
   15da3:	c1 f8 07             	sar    eax,0x7
   15da6:	83 ec 04             	sub    esp,0x4
   15da9:	50                   	push   eax
   15daa:	68 9c 6f 04 00       	push   0x46f9c
   15daf:	68 00 20 00 00       	push   0x2000
   15db4:	e8 6e 17 01 00       	call   27527 <printd>
   15db9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15dbc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15dbf:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   15dc2:	c1 e8 08             	shr    eax,0x8
   15dc5:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15dc8:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15dcb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15dce:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15dd1:	83 e0 07             	and    eax,0x7
   15dd4:	89 c3                	mov    ebx,eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:760
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
   15dd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15dd9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15ddc:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:759
                                                    goto next_step;
                                    }
                    }
                    printd(DEBUG_AHCI,"Device at port %d is active and present.\n",
                                    p - h->ports);
                    printd(DEBUG_AHCI,"details: %x %x %x %u %u\n", p->serr, p->tfd.AsUchar,
   15ddf:	0f b6 d0             	movzx  edx,al
   15de2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15de5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15de8:	83 ec 04             	sub    esp,0x4
   15deb:	51                   	push   ecx
   15dec:	53                   	push   ebx
   15ded:	52                   	push   edx
   15dee:	50                   	push   eax
   15def:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15df2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15df5:	50                   	push   eax
   15df6:	68 c6 6f 04 00       	push   0x46fc6
   15dfb:	68 00 20 00 00       	push   0x2000
   15e00:	e8 22 17 01 00       	call   27527 <printd>
   15e05:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/ahci.c:761
                                    p->tfd.ERR, (p->ssts & 0x7), p->sctl.IPM);
                    return;
   15e08:	eb 78                	jmp    15e82 <ahci_port_activate_device+0x442>
/home/yogi/src/os/chrisOS/src/block/ahci.c:762
    } else if ((p->ssts & 0x7) == 4/*?*/) {
   15e0a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e0d:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15e10:	83 e0 07             	and    eax,0x7
   15e13:	83 f8 04             	cmp    eax,0x4
   15e16:	75 1a                	jne    15e32 <ahci_port_activate_device+0x3f2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:764
                    /* just deactivated */
                    printd(DEBUG_AHCI,"PHY offline mode\n");
   15e18:	83 ec 08             	sub    esp,0x8
   15e1b:	68 df 6f 04 00       	push   0x46fdf
   15e20:	68 00 20 00 00       	push   0x2000
   15e25:	e8 fd 16 01 00       	call   27527 <printd>
   15e2a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:765
                    goto activ;
   15e2d:	e9 c0 fe ff ff       	jmp    15cf2 <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:766
    } else if ((p->ssts & 0x7) == 5/*DET_PRESENT_NO_PHY*/) {
   15e32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e35:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   15e38:	83 e0 07             	and    eax,0x7
   15e3b:	83 f8 05             	cmp    eax,0x5
   15e3e:	75 1a                	jne    15e5a <ahci_port_activate_device+0x41a>
/home/yogi/src/os/chrisOS/src/block/ahci.c:767
                    printd(DEBUG_AHCI,"PRESENT_NO_PHY mode\n");
   15e40:	83 ec 08             	sub    esp,0x8
   15e43:	68 f1 6f 04 00       	push   0x46ff1
   15e48:	68 00 20 00 00       	push   0x2000
   15e4d:	e8 d5 16 01 00       	call   27527 <printd>
   15e52:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:768
                    goto activ; /* try the same */
   15e55:	e9 98 fe ff ff       	jmp    15cf2 <ahci_port_activate_device+0x2b2>
/home/yogi/src/os/chrisOS/src/block/ahci.c:772
    }
exit:
                    /* we're really done */
                    printd(DEBUG_AHCI,"Not present at port %d\n", p - h->ports);
   15e5a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e5d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   15e60:	81 c2 00 01 00 00    	add    edx,0x100
   15e66:	29 d0                	sub    eax,edx
   15e68:	c1 f8 07             	sar    eax,0x7
   15e6b:	83 ec 04             	sub    esp,0x4
   15e6e:	50                   	push   eax
   15e6f:	68 06 70 04 00       	push   0x47006
   15e74:	68 00 20 00 00       	push   0x2000
   15e79:	e8 a9 16 01 00       	call   27527 <printd>
   15e7e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:773
                    return;
   15e81:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:774
}
   15e82:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   15e85:	c9                   	leave  
   15e86:	c3                   	ret    

00015e87 <ahci_enable_port>:
ahci_enable_port():
/home/yogi/src/os/chrisOS/src/block/ahci.c:777

void ahci_enable_port(HBA_MEM* ad, int pt)
{
   15e87:	55                   	push   ebp
   15e88:	89 e5                	mov    ebp,esp
   15e8a:	53                   	push   ebx
   15e8b:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/block/ahci.c:778
        HBA_PORT* p = &ad->ports[pt];
   15e8e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15e91:	83 c0 02             	add    eax,0x2
   15e94:	c1 e0 07             	shl    eax,0x7
   15e97:	89 c2                	mov    edx,eax
   15e99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15e9c:	01 d0                	add    eax,edx
   15e9e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/ahci.c:779
        int reset_ct = 0;
   15ea1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/ahci.c:782
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
   15ea8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   15eab:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   15eae:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   15eb1:	bb 01 00 00 00       	mov    ebx,0x1
   15eb6:	89 c1                	mov    ecx,eax
   15eb8:	d3 e3                	shl    ebx,cl
   15eba:	89 d8                	mov    eax,ebx
   15ebc:	21 d0                	and    eax,edx
   15ebe:	85 c0                	test   eax,eax
   15ec0:	0f 84 0c 02 00 00    	je     160d2 <ahci_enable_port+0x24b>
/home/yogi/src/os/chrisOS/src/block/ahci.c:787
                return;
 
Pos1:
        /* clear old data */
        p->serr.AsUlong = 0xffffffff; /* 10.1.2 -> 6. */
   15ec6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15ec9:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:788
        p->pxis.AsUlong = 0xffffffff; /* clear all pending interrupts */
   15ed0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15ed3:	c7 40 10 ff ff ff ff 	mov    DWORD PTR [eax+0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:791
 
        /* first allow for the reception of FISes */
        p->cmd.FRE = 1;
   15eda:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15edd:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   15ee0:	83 ca 10             	or     edx,0x10
   15ee3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:792
        wait(20); /* wait for BSY to show up */
   15ee6:	83 ec 0c             	sub    esp,0xc
   15ee9:	6a 14                	push   0x14
   15eeb:	e8 56 28 01 00       	call   28746 <wait>
   15ef0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:794
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
   15ef3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15ef6:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15ef9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/block/ahci.c:795
                if (sts & 1) {
   15efc:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   15f00:	83 e0 01             	and    eax,0x1
   15f03:	85 c0                	test   eax,eax
   15f05:	0f 84 da 00 00 00    	je     15fe5 <ahci_enable_port+0x15e>
/home/yogi/src/os/chrisOS/src/block/ahci.c:797
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
   15f0b:	80 7d ef 7f          	cmp    BYTE PTR [ebp-0x11],0x7f
   15f0f:	0f 84 ef 00 00 00    	je     16004 <ahci_enable_port+0x17d>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
   15f15:	80 7d ef 41          	cmp    BYTE PTR [ebp-0x11],0x41
   15f19:	75 22                	jne    15f3d <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:799 (discriminator 1)
   15f1b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15f1e:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15f21:	83 e0 01             	and    eax,0x1
   15f24:	0f b6 c0             	movzx  eax,al
   15f27:	83 f8 20             	cmp    eax,0x20
   15f2a:	75 11                	jne    15f3d <ahci_enable_port+0xb6>
/home/yogi/src/os/chrisOS/src/block/ahci.c:800
                                if (p->sig == SATA_SIG_ATAPI)
   15f2c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15f2f:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   15f32:	3d 01 01 14 eb       	cmp    eax,0xeb140101
   15f37:	0f 84 ca 00 00 00    	je     16007 <ahci_enable_port+0x180>
/home/yogi/src/os/chrisOS/src/block/ahci.c:804
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
                                " while starting up.\n", pt, p->tfd.ERR);
   15f3d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15f40:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15f43:	83 e0 01             	and    eax,0x1
/home/yogi/src/os/chrisOS/src/block/ahci.c:803
                                break;
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
                        }
                        printk("port%d indicated task file error %x"
   15f46:	0f b6 c0             	movzx  eax,al
   15f49:	83 ec 04             	sub    esp,0x4
   15f4c:	50                   	push   eax
   15f4d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   15f50:	68 20 70 04 00       	push   0x47020
   15f55:	e8 ad 15 01 00       	call   27507 <printk>
   15f5a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:805
                                " while starting up.\n", pt, p->tfd.ERR);
                        printd(DEBUG_AHCI,"AHCI: scr1: %x %x\n", p->serr.AsUlong, p->tfd.ERR);
   15f5d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15f60:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15f63:	83 e0 01             	and    eax,0x1
   15f66:	0f b6 d0             	movzx  edx,al
   15f69:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15f6c:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   15f6f:	52                   	push   edx
   15f70:	50                   	push   eax
   15f71:	68 58 70 04 00       	push   0x47058
   15f76:	68 00 20 00 00       	push   0x2000
   15f7b:	e8 a7 15 01 00       	call   27527 <printd>
   15f80:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:806
                        printd(DEBUG_AHCI,"AHCI: tfd: %x %x\n", p->tfd.AsUchar, p->tfd.ERR);
   15f83:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15f86:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15f89:	83 e0 01             	and    eax,0x1
   15f8c:	0f b6 d0             	movzx  edx,al
   15f8f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15f92:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   15f95:	52                   	push   edx
   15f96:	50                   	push   eax
   15f97:	68 6b 70 04 00       	push   0x4706b
   15f9c:	68 00 20 00 00       	push   0x2000
   15fa1:	e8 81 15 01 00       	call   27527 <printd>
   15fa6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:807
                        p->serr.AsUlong = 0xffffffff;
   15fa9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   15fac:	c7 40 30 ff ff ff ff 	mov    DWORD PTR [eax+0x30],0xffffffff
/home/yogi/src/os/chrisOS/src/block/ahci.c:808
                        if (!reset_ct++) {
   15fb3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   15fb6:	8d 50 01             	lea    edx,[eax+0x1]
   15fb9:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   15fbc:	85 c0                	test   eax,eax
   15fbe:	75 16                	jne    15fd6 <ahci_enable_port+0x14f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:809
                                ahci_port_activate_device(ad, p);
   15fc0:	83 ec 08             	sub    esp,0x8
   15fc3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   15fc6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   15fc9:	e8 72 fa ff ff       	call   15a40 <ahci_port_activate_device>
   15fce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:810
                                goto Pos1;
   15fd1:	e9 f0 fe ff ff       	jmp    15ec6 <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:811
                        } else if (reset_ct == 1) {
   15fd6:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   15fda:	0f 85 c7 00 00 00    	jne    160a7 <ahci_enable_port+0x220>
/home/yogi/src/os/chrisOS/src/block/ahci.c:813
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
   15fe0:	e9 e1 fe ff ff       	jmp    15ec6 <ahci_enable_port+0x3f>
/home/yogi/src/os/chrisOS/src/block/ahci.c:817
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
   15fe5:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   15fe9:	25 88 00 00 00       	and    eax,0x88
   15fee:	85 c0                	test   eax,eax
   15ff0:	74 18                	je     1600a <ahci_enable_port+0x183>
/home/yogi/src/os/chrisOS/src/block/ahci.c:819
                        break;
                wait(50);
   15ff2:	83 ec 0c             	sub    esp,0xc
   15ff5:	6a 32                	push   0x32
   15ff7:	e8 4a 27 01 00       	call   28746 <wait>
   15ffc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:820
        }
   15fff:	e9 ef fe ff ff       	jmp    15ef3 <ahci_enable_port+0x6c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:798
        while (1) {
                uint8_t sts = p->tfd.AsUchar;
                if (sts & 1) {
                        /* something went wrong! */
                        if (sts == 0x7f) /* no device */
                                break;
   16004:	90                   	nop
   16005:	eb 04                	jmp    1600b <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:801
                        else if (sts == 0x41 && p->tfd.ERR == 0x20) {
                                if (p->sig == SATA_SIG_ATAPI)
                                        break; /* no medium */
   16007:	90                   	nop
   16008:	eb 01                	jmp    1600b <ahci_enable_port+0x184>
/home/yogi/src/os/chrisOS/src/block/ahci.c:818
                                goto Pos1;
                        } else
                                goto defer;
                }
                if (!(sts & (0x80 | 0x8)))
                        break;
   1600a:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:823
                wait(50);
        }
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
   1600b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1600e:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   16011:	83 e0 07             	and    eax,0x7
   16014:	83 f8 03             	cmp    eax,0x3
   16017:	74 11                	je     1602a <ahci_enable_port+0x1a3>
/home/yogi/src/os/chrisOS/src/block/ahci.c:824
                ahci_port_activate_device(ad, p);
   16019:	83 ec 08             	sub    esp,0x8
   1601c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1601f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   16022:	e8 19 fa ff ff       	call   15a40 <ahci_port_activate_device>
   16027:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:825
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
   1602a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1602d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   16030:	25 88 00 00 00       	and    eax,0x88
   16035:	85 c0                	test   eax,eax
   16037:	75 71                	jne    160aa <ahci_enable_port+0x223>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   16039:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1603c:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   1603f:	83 e0 07             	and    eax,0x7
   16042:	83 f8 03             	cmp    eax,0x3
   16045:	74 30                	je     16077 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 1)
   16047:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1604a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   1604d:	c1 e8 08             	shr    eax,0x8
   16050:	83 e0 0f             	and    eax,0xf
   16053:	3c 02                	cmp    al,0x2
   16055:	74 20                	je     16077 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 2)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   16057:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1605a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   1605d:	c1 e8 08             	shr    eax,0x8
   16060:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 2)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   16063:	3c 06                	cmp    al,0x6
   16065:	74 10                	je     16077 <ahci_enable_port+0x1f0>
/home/yogi/src/os/chrisOS/src/block/ahci.c:828 (discriminator 3)
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
   16067:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1606a:	8b 40 2c             	mov    eax,DWORD PTR [eax+0x2c]
   1606d:	c1 e8 08             	shr    eax,0x8
   16070:	83 e0 0f             	and    eax,0xf
/home/yogi/src/os/chrisOS/src/block/ahci.c:827 (discriminator 3)
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
   16073:	3c 08                	cmp    al,0x8
   16075:	75 36                	jne    160ad <ahci_enable_port+0x226>
/home/yogi/src/os/chrisOS/src/block/ahci.c:831
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
        /* we're allowed so set it */
        p->cmd.ST = 1;
   16077:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1607a:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   1607d:	83 ca 01             	or     edx,0x1
   16080:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/block/ahci.c:833
        /* Change in PhyRdy, CPS, TFS.err, PCS, DPS(I=1), UFS, HBFS, HBDS, IFS */
        p->ie.AsUlong = (1 << 22) | (1 << 6) | (1 << 31) | (1 << 30)
   16083:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16086:	c7 40 14 70 00 40 f8 	mov    DWORD PTR [eax+0x14],0xf8400070
/home/yogi/src/os/chrisOS/src/block/ahci.c:839
                | (1 << 5) | (1 << 4) | (1 << 29) | (1 << 28) | (1 << 27);
 
        ///* issue the IDENTIFY_(PACKET)_DEVICE command */
        //ahci_issue_command(ad, pt, 0, disk_cmd_identify, 0, 0, NULL, NULL /* wq_worker_ad*/);
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
   1608d:	83 ec 04             	sub    esp,0x4
   16090:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16093:	68 80 70 04 00       	push   0x47080
   16098:	68 00 20 00 00       	push   0x2000
   1609d:	e8 85 14 01 00       	call   27527 <printd>
   160a2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:840
        return;
   160a5:	eb 2c                	jmp    160d3 <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:815
                                goto Pos1;
                        } else if (reset_ct == 1) {
                                /*ahci_reset_port(ad->ptr, p);*/
                                goto Pos1;
                        } else
                                goto defer;
   160a7:	90                   	nop
   160a8:	eb 04                	jmp    160ae <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:826
 
        /* set ST only if BSY,DRQ and DET=3h or IPM=2,6,8 */
        if ((p->ssts & 0x7) != 3)
                ahci_port_activate_device(ad, p);
        if (p->tfd.AsUchar & (0x80 | 0x8))  //BSY | DRQ
                goto defer; /* listen */
   160aa:	90                   	nop
   160ab:	eb 01                	jmp    160ae <ahci_enable_port+0x227>
/home/yogi/src/os/chrisOS/src/block/ahci.c:829
        if (!(((p->ssts & 0x7) == 3) || (p->sctl.IPM == 2) ||
                (p->sctl.IPM == 6) || (p->sctl.IPM == 8)))
                goto defer;
   160ad:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:843
 
        printd(DEBUG_AHCI,"AHCI: port %d is now processing commands\n", pt);
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
   160ae:	83 ec 04             	sub    esp,0x4
   160b1:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   160b4:	68 ac 70 04 00       	push   0x470ac
   160b9:	68 00 20 00 00       	push   0x2000
   160be:	e8 64 14 01 00       	call   27527 <printd>
   160c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/ahci.c:844
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
   160c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   160c9:	c7 40 14 40 00 40 80 	mov    DWORD PTR [eax+0x14],0x80400040
   160d0:	eb 01                	jmp    160d3 <ahci_enable_port+0x24c>
/home/yogi/src/os/chrisOS/src/block/ahci.c:783
        HBA_PORT* p = &ad->ports[pt];
        int reset_ct = 0;
 
        /* skip non-implemented ports */
        if (!(ad->pi & (1 << pt)))
                return;
   160d2:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/ahci.c:845
        return;
 
defer: /* we're interested in status changes only */
        printd(DEBUG_AHCI,"AHCI: port %d set to listening mode\n", pt);
        p->ie.AsUlong = (1 << 22) | (1 << 31) | (1 << 6); /* PhyRdy change, CPS, CCS */
}
   160d3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   160d6:	c9                   	leave  
   160d7:	c3                   	ret    

000160d8 <outl>:
outl():
/home/yogi/src/os/chrisOS/include/io.h:32
{
	__asm__ volatile ("outw %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline void outl(unsigned short __port, unsigned int __val)
{
   160d8:	55                   	push   ebp
   160d9:	89 e5                	mov    ebp,esp
   160db:	83 ec 04             	sub    esp,0x4
   160de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   160e1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/include/io.h:33
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
   160e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   160e8:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   160ec:	ef                   	out    dx,eax
/home/yogi/src/os/chrisOS/include/io.h:34
}
   160ed:	90                   	nop
   160ee:	c9                   	leave  
   160ef:	c3                   	ret    

000160f0 <inl>:
inl():
/home/yogi/src/os/chrisOS/include/io.h:51
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
	return __val;
}

static __inline unsigned int inl(unsigned short __port)
{
   160f0:	55                   	push   ebp
   160f1:	89 e5                	mov    ebp,esp
   160f3:	83 ec 14             	sub    esp,0x14
   160f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   160f9:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:53
	unsigned int __val;
	__asm__ volatile ("ind %0, %1" : "=a" (__val) : "dN" (__port));
   160fd:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   16101:	89 c2                	mov    edx,eax
   16103:	ed                   	in     eax,dx
   16104:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/include/io.h:54
	return __val;
   16107:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/io.h:55
}
   1610a:	c9                   	leave  
   1610b:	c3                   	ret    

0001610c <printPCIConfig>:
printPCIConfig():
/home/yogi/src/os/chrisOS/src/block/pci.c:26
extern struct pci_bridge_t* kPCIBridgeHeaders;
extern struct pci_device_t* kPCIDeviceFunctions;
extern uint32_t kDebugLevel;

void printPCIConfig()
{
   1610c:	55                   	push   ebp
   1610d:	89 e5                	mov    ebp,esp
   1610f:	57                   	push   edi
   16110:	56                   	push   esi
   16111:	53                   	push   ebx
   16112:	81 ec dc 00 00 00    	sub    esp,0xdc
/home/yogi/src/os/chrisOS/src/block/pci.c:28
    char buffer[150];
    int totalCnt=0;
   16118:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:30
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
   1611f:	0f b6 05 ec 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ec
   16126:	0f b6 d0             	movzx  edx,al
   16129:	0f b6 05 ed 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ed
   16130:	0f b6 c0             	movzx  eax,al
   16133:	01 d0                	add    eax,edx
   16135:	83 ec 08             	sub    esp,0x8
   16138:	50                   	push   eax
   16139:	68 74 26 08 00       	push   0x82674
   1613e:	e8 c4 13 01 00       	call   27507 <printk>
   16143:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:31
    puts("Devices:\n");
   16146:	83 ec 0c             	sub    esp,0xc
   16149:	68 9b 26 08 00       	push   0x8269b
   1614e:	e8 33 21 00 00       	call   18286 <puts>
   16153:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:32
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   16156:	83 ec 0c             	sub    esp,0xc
   16159:	68 a8 26 08 00       	push   0x826a8
   1615e:	e8 a4 13 01 00       	call   27507 <printk>
   16163:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   16166:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   1616d:	e9 ed 01 00 00       	jmp    1635f <printPCIConfig+0x253>
/home/yogi/src/os/chrisOS/src/block/pci.c:37
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
   16172:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   16178:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1617b:	89 d0                	mov    eax,edx
   1617d:	c1 e0 02             	shl    eax,0x2
   16180:	01 d0                	add    eax,edx
   16182:	c1 e0 04             	shl    eax,0x4
   16185:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   16187:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1618a:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   16190:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   16196:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16199:	89 d0                	mov    eax,edx
   1619b:	c1 e0 02             	shl    eax,0x2
   1619e:	01 d0                	add    eax,edx
   161a0:	c1 e0 04             	shl    eax,0x4
   161a3:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   161a5:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   161a8:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   161ae:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   161b4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   161b7:	89 d0                	mov    eax,edx
   161b9:	c1 e0 02             	shl    eax,0x2
   161bc:	01 d0                	add    eax,edx
   161be:	c1 e0 04             	shl    eax,0x4
   161c1:	01 c8                	add    eax,ecx
   161c3:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   161c7:	0f b7 f8             	movzx  edi,ax
   161ca:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   161d0:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   161d6:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   161d9:	89 d0                	mov    eax,edx
   161db:	c1 e0 02             	shl    eax,0x2
   161de:	01 d0                	add    eax,edx
   161e0:	c1 e0 04             	shl    eax,0x4
   161e3:	01 c8                	add    eax,ecx
   161e5:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   161e9:	0f b7 d8             	movzx  ebx,ax
   161ec:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   161f2:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   161f8:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   161fb:	89 d0                	mov    eax,edx
   161fd:	c1 e0 02             	shl    eax,0x2
   16200:	01 d0                	add    eax,edx
   16202:	c1 e0 04             	shl    eax,0x4
   16205:	01 c8                	add    eax,ecx
   16207:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   1620b:	0f b6 c8             	movzx  ecx,al
   1620e:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:36
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
   16214:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   1621a:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1621d:	89 d0                	mov    eax,edx
   1621f:	c1 e0 02             	shl    eax,0x2
   16222:	01 d0                	add    eax,edx
   16224:	c1 e0 04             	shl    eax,0x4
   16227:	01 c8                	add    eax,ecx
   16229:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:35
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceHeaders[cnt].busNo, kPCIDeviceHeaders[cnt].deviceNo, kPCIDeviceHeaders[cnt].funcNo, 
   1622d:	0f b6 f8             	movzx  edi,al
   16230:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   16236:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16239:	89 d0                	mov    eax,edx
   1623b:	c1 e0 02             	shl    eax,0x2
   1623e:	01 d0                	add    eax,edx
   16240:	c1 e0 04             	shl    eax,0x4
   16243:	01 c8                	add    eax,ecx
   16245:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   16249:	0f b6 f0             	movzx  esi,al
   1624c:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   16252:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16255:	89 d0                	mov    eax,edx
   16257:	c1 e0 02             	shl    eax,0x2
   1625a:	01 d0                	add    eax,edx
   1625c:	c1 e0 04             	shl    eax,0x4
   1625f:	01 c8                	add    eax,ecx
   16261:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   16265:	0f b6 d8             	movzx  ebx,al
   16268:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   1626e:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   16271:	89 d0                	mov    eax,edx
   16273:	c1 e0 02             	shl    eax,0x2
   16276:	01 d0                	add    eax,edx
   16278:	c1 e0 04             	shl    eax,0x4
   1627b:	01 c8                	add    eax,ecx
   1627d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16280:	0f b6 c0             	movzx  eax,al
   16283:	83 ec 08             	sub    esp,0x8
   16286:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   1628c:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   16292:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   16298:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   1629e:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   162a4:	57                   	push   edi
   162a5:	56                   	push   esi
   162a6:	53                   	push   ebx
   162a7:	50                   	push   eax
   162a8:	68 e4 26 08 00       	push   0x826e4
   162ad:	e8 55 12 01 00       	call   27507 <printk>
   162b2:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:40
                kPCIDeviceHeaders[cnt].interrupt_line, kPCIDeviceHeaders[cnt].interrupt_pin, kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, kPCIDeviceHeaders[cnt].class, 
                kPCIDeviceHeaders[cnt].subClass);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //printk("%s",buffer);
        getDeviceName(kPCIDeviceHeaders[cnt].vendor, kPCIDeviceHeaders[cnt].device, buffer);
   162b5:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   162bb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   162be:	89 d0                	mov    eax,edx
   162c0:	c1 e0 02             	shl    eax,0x2
   162c3:	01 d0                	add    eax,edx
   162c5:	c1 e0 04             	shl    eax,0x4
   162c8:	01 c8                	add    eax,ecx
   162ca:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   162ce:	0f b7 c8             	movzx  ecx,ax
   162d1:	8b 1d f4 47 12 00    	mov    ebx,DWORD PTR ds:0x1247f4
   162d7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   162da:	89 d0                	mov    eax,edx
   162dc:	c1 e0 02             	shl    eax,0x2
   162df:	01 d0                	add    eax,edx
   162e1:	c1 e0 04             	shl    eax,0x4
   162e4:	01 d8                	add    eax,ebx
   162e6:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   162ea:	0f b7 c0             	movzx  eax,ax
   162ed:	83 ec 04             	sub    esp,0x4
   162f0:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   162f6:	52                   	push   edx
   162f7:	51                   	push   ecx
   162f8:	50                   	push   eax
   162f9:	e8 63 07 00 00       	call   16a61 <getDeviceName>
   162fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:41
        strleft(buffer,28);
   16301:	83 ec 08             	sub    esp,0x8
   16304:	6a 1c                	push   0x1c
   16306:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1630c:	50                   	push   eax
   1630d:	e8 62 15 01 00       	call   27874 <strleft>
   16312:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:42
        printk("%s\n",buffer);
   16315:	83 ec 08             	sub    esp,0x8
   16318:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1631e:	50                   	push   eax
   1631f:	68 18 27 08 00       	push   0x82718
   16324:	e8 de 11 01 00       	call   27507 <printk>
   16329:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:43
        totalCnt++;
   1632c:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:44
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   16330:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   16334:	7e 25                	jle    1635b <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:44 (discriminator 1)
   16336:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16339:	8d 58 04             	lea    ebx,[eax+0x4]
   1633c:	e8 86 1e 00 00       	call   181c7 <cursorGetMaxY>
   16341:	89 c1                	mov    ecx,eax
   16343:	89 d8                	mov    eax,ebx
   16345:	99                   	cdq    
   16346:	f7 f9                	idiv   ecx
   16348:	89 d0                	mov    eax,edx
   1634a:	85 c0                	test   eax,eax
   1634c:	75 0d                	jne    1635b <printPCIConfig+0x24f>
/home/yogi/src/os/chrisOS/src/block/pci.c:45
            pauseDisplay(false);
   1634e:	83 ec 0c             	sub    esp,0xc
   16351:	6a 00                	push   0x0
   16353:	e8 80 f9 00 00       	call   25cd8 <pauseDisplay>
   16358:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 2)
    int totalCnt=0;
    
    printk("PCI Configuration table: (%u objects)\n", kPCIDeviceCount+kPCIBridgeCount);
    puts("Devices:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    for (int cnt=0;cnt<kPCIDeviceCount;cnt++)
   1635b:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:33 (discriminator 1)
   1635f:	0f b6 05 ec 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ec
   16366:	0f b6 c0             	movzx  eax,al
   16369:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1636c:	0f 8f 00 fe ff ff    	jg     16172 <printPCIConfig+0x66>
/home/yogi/src/os/chrisOS/src/block/pci.c:47
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
   16372:	83 ec 0c             	sub    esp,0xc
   16375:	68 1c 27 08 00       	push   0x8271c
   1637a:	e8 07 1f 00 00       	call   18286 <puts>
   1637f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   16382:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   16389:	e9 ef 01 00 00       	jmp    1657d <printPCIConfig+0x471>
/home/yogi/src/os/chrisOS/src/block/pci.c:55
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1638e:	a1 f8 47 12 00       	mov    eax,ds:0x1247f8
   16393:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16397:	0f b6 c0             	movzx  eax,al
   1639a:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   163a0:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   163a6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   163a9:	6b c0 4e             	imul   eax,eax,0x4e
   163ac:	01 d0                	add    eax,edx
   163ae:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   163b2:	0f b6 f0             	movzx  esi,al
   163b5:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:55
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   163bb:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   163c1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   163c4:	6b c0 4e             	imul   eax,eax,0x4e
   163c7:	01 d0                	add    eax,edx
   163c9:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   163cd:	0f b6 f8             	movzx  edi,al
   163d0:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   163d6:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   163dc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   163df:	6b c0 4e             	imul   eax,eax,0x4e
   163e2:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   163e4:	8b 58 0d             	mov    ebx,DWORD PTR [eax+0xd]
   163e7:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:54
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
                kPCIBridgeHeaders[cnt].class, kPCIBridgeHeaders[cnt].subClass,
   163ed:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   163f3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   163f6:	6b c0 4e             	imul   eax,eax,0x4e
   163f9:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   163fb:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   163fe:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   16404:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   1640a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1640d:	6b c0 4e             	imul   eax,eax,0x4e
   16410:	01 d0                	add    eax,edx
   16412:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16416:	0f b7 d0             	movzx  edx,ax
   16419:	89 95 20 ff ff ff    	mov    DWORD PTR [ebp-0xe0],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:53
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
                kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, 
   1641f:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   16425:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16428:	6b c0 4e             	imul   eax,eax,0x4e
   1642b:	01 d0                	add    eax,edx
   1642d:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16431:	0f b7 c0             	movzx  eax,ax
   16434:	89 85 1c ff ff ff    	mov    DWORD PTR [ebp-0xe4],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   1643a:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   16440:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16443:	6b c0 4e             	imul   eax,eax,0x4e
   16446:	01 d0                	add    eax,edx
   16448:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1644c:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:52
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
                kPCIBridgeHeaders[cnt].interrupt_line, kPCIBridgeHeaders[cnt].interrupt_pin, 
   1644f:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   16455:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16458:	6b c0 4e             	imul   eax,eax,0x4e
   1645b:	01 d0                	add    eax,edx
   1645d:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16461:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   16464:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   1646a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1646d:	6b c0 4e             	imul   eax,eax,0x4e
   16470:	01 d0                	add    eax,edx
   16472:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   16476:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   16479:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   1647f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16482:	6b c0 4e             	imul   eax,eax,0x4e
   16485:	01 d0                	add    eax,edx
   16487:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1648b:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:51
                kPCIBridgeHeaders[cnt].busNo, kPCIBridgeHeaders[cnt].deviceNo, kPCIBridgeHeaders[cnt].funcNo, 
   1648e:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   16494:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   16497:	6b c0 4e             	imul   eax,eax,0x4e
   1649a:	01 d0                	add    eax,edx
   1649c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:50
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
        printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\t",
   1649f:	0f b6 c0             	movzx  eax,al
   164a2:	83 ec 0c             	sub    esp,0xc
   164a5:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   164ab:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   164b1:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   164b7:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   164bd:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   164c3:	ff b5 20 ff ff ff    	push   DWORD PTR [ebp-0xe0]
   164c9:	ff b5 1c ff ff ff    	push   DWORD PTR [ebp-0xe4]
   164cf:	57                   	push   edi
   164d0:	56                   	push   esi
   164d1:	53                   	push   ebx
   164d2:	51                   	push   ecx
   164d3:	50                   	push   eax
   164d4:	68 28 27 08 00       	push   0x82728
   164d9:	e8 29 10 01 00       	call   27507 <printk>
   164de:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:60
                kPCIBridgeHeaders[cnt].subordinateBusNum, kPCIBridgeHeaders[cnt].primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
        //getVendorLongName(kPCIDeviceHeaders[cnt].vendor, buffer);
        //strleft(buffer,10);
        //printk("%s",buffer);
//        strleft(buffer,20);
        getDeviceName(kPCIBridgeHeaders[cnt].vendor, kPCIBridgeHeaders[cnt].device, buffer);
   164e1:	8b 15 f8 47 12 00    	mov    edx,DWORD PTR ds:0x1247f8
   164e7:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   164ea:	6b c0 4e             	imul   eax,eax,0x4e
   164ed:	01 d0                	add    eax,edx
   164ef:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   164f3:	0f b7 d0             	movzx  edx,ax
   164f6:	8b 0d f8 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f8
   164fc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   164ff:	6b c0 4e             	imul   eax,eax,0x4e
   16502:	01 c8                	add    eax,ecx
   16504:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   16508:	0f b7 c0             	movzx  eax,ax
   1650b:	83 ec 04             	sub    esp,0x4
   1650e:	8d 8d 42 ff ff ff    	lea    ecx,[ebp-0xbe]
   16514:	51                   	push   ecx
   16515:	52                   	push   edx
   16516:	50                   	push   eax
   16517:	e8 45 05 00 00       	call   16a61 <getDeviceName>
   1651c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:61
        strleft(buffer,28);
   1651f:	83 ec 08             	sub    esp,0x8
   16522:	6a 1c                	push   0x1c
   16524:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1652a:	50                   	push   eax
   1652b:	e8 44 13 01 00       	call   27874 <strleft>
   16530:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:62
        printk("%s\n",buffer);
   16533:	83 ec 08             	sub    esp,0x8
   16536:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   1653c:	50                   	push   eax
   1653d:	68 18 27 08 00       	push   0x82718
   16542:	e8 c0 0f 01 00       	call   27507 <printk>
   16547:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:63
        totalCnt++;
   1654a:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:64
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   1654e:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   16552:	7e 25                	jle    16579 <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:64 (discriminator 1)
   16554:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16557:	8d 58 04             	lea    ebx,[eax+0x4]
   1655a:	e8 68 1c 00 00       	call   181c7 <cursorGetMaxY>
   1655f:	89 c1                	mov    ecx,eax
   16561:	89 d8                	mov    eax,ebx
   16563:	99                   	cdq    
   16564:	f7 f9                	idiv   ecx
   16566:	89 d0                	mov    eax,edx
   16568:	85 c0                	test   eax,eax
   1656a:	75 0d                	jne    16579 <printPCIConfig+0x46d>
/home/yogi/src/os/chrisOS/src/block/pci.c:65
            pauseDisplay(false);
   1656c:	83 ec 0c             	sub    esp,0xc
   1656f:	6a 00                	push   0x0
   16571:	e8 62 f7 00 00       	call   25cd8 <pauseDisplay>
   16576:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }
    puts("Bridges:\n");
    for (int cnt=0;cnt<kPCIBridgeCount;cnt++)
   16579:	83 45 dc 01          	add    DWORD PTR [ebp-0x24],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:48 (discriminator 1)
   1657d:	0f b6 05 ed 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ed
   16584:	0f b6 c0             	movzx  eax,al
   16587:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   1658a:	0f 8f fe fd ff ff    	jg     1638e <printPCIConfig+0x282>
/home/yogi/src/os/chrisOS/src/block/pci.c:67
        printk("%s\n",buffer);
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
   16590:	83 ec 0c             	sub    esp,0xc
   16593:	68 6c 27 08 00       	push   0x8276c
   16598:	e8 e9 1c 00 00       	call   18286 <puts>
   1659d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   165a0:	c7 45 d8 00 00 00 00 	mov    DWORD PTR [ebp-0x28],0x0
   165a7:	e9 ed 01 00 00       	jmp    16799 <printPCIConfig+0x68d>
/home/yogi/src/os/chrisOS/src/block/pci.c:74
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
   165ac:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   165b2:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   165b5:	89 d0                	mov    eax,edx
   165b7:	c1 e0 02             	shl    eax,0x2
   165ba:	01 d0                	add    eax,edx
   165bc:	c1 e0 04             	shl    eax,0x4
   165bf:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   165c1:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   165c4:	89 85 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   165ca:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   165d0:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   165d3:	89 d0                	mov    eax,edx
   165d5:	c1 e0 02             	shl    eax,0x2
   165d8:	01 d0                	add    eax,edx
   165da:	c1 e0 04             	shl    eax,0x4
   165dd:	01 c8                	add    eax,ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   165df:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
   165e2:	89 b5 30 ff ff ff    	mov    DWORD PTR [ebp-0xd0],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   165e8:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   165ee:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   165f1:	89 d0                	mov    eax,edx
   165f3:	c1 e0 02             	shl    eax,0x2
   165f6:	01 d0                	add    eax,edx
   165f8:	c1 e0 04             	shl    eax,0x4
   165fb:	01 c8                	add    eax,ecx
   165fd:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16601:	0f b7 f8             	movzx  edi,ax
   16604:	89 bd 2c ff ff ff    	mov    DWORD PTR [ebp-0xd4],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1660a:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   16610:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16613:	89 d0                	mov    eax,edx
   16615:	c1 e0 02             	shl    eax,0x2
   16618:	01 d0                	add    eax,edx
   1661a:	c1 e0 04             	shl    eax,0x4
   1661d:	01 c8                	add    eax,ecx
   1661f:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16623:	0f b7 d8             	movzx  ebx,ax
   16626:	89 9d 28 ff ff ff    	mov    DWORD PTR [ebp-0xd8],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1662c:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   16632:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16635:	89 d0                	mov    eax,edx
   16637:	c1 e0 02             	shl    eax,0x2
   1663a:	01 d0                	add    eax,edx
   1663c:	c1 e0 04             	shl    eax,0x4
   1663f:	01 c8                	add    eax,ecx
   16641:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16645:	0f b6 c8             	movzx  ecx,al
   16648:	89 8d 24 ff ff ff    	mov    DWORD PTR [ebp-0xdc],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:73
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
   1664e:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   16654:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16657:	89 d0                	mov    eax,edx
   16659:	c1 e0 02             	shl    eax,0x2
   1665c:	01 d0                	add    eax,edx
   1665e:	c1 e0 04             	shl    eax,0x4
   16661:	01 c8                	add    eax,ecx
   16663:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:72
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
    {          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN   PBN   SBN
//        if (kPCIDeviceFunctions[cnt].funcNo==0)
        {
            printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t",kPCIDeviceFunctions[cnt].busNo, kPCIDeviceFunctions[cnt].deviceNo, kPCIDeviceFunctions[cnt].funcNo, 
   16667:	0f b6 f8             	movzx  edi,al
   1666a:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   16670:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16673:	89 d0                	mov    eax,edx
   16675:	c1 e0 02             	shl    eax,0x2
   16678:	01 d0                	add    eax,edx
   1667a:	c1 e0 04             	shl    eax,0x4
   1667d:	01 c8                	add    eax,ecx
   1667f:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   16683:	0f b6 f0             	movzx  esi,al
   16686:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   1668c:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   1668f:	89 d0                	mov    eax,edx
   16691:	c1 e0 02             	shl    eax,0x2
   16694:	01 d0                	add    eax,edx
   16696:	c1 e0 04             	shl    eax,0x4
   16699:	01 c8                	add    eax,ecx
   1669b:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1669f:	0f b6 d8             	movzx  ebx,al
   166a2:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   166a8:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   166ab:	89 d0                	mov    eax,edx
   166ad:	c1 e0 02             	shl    eax,0x2
   166b0:	01 d0                	add    eax,edx
   166b2:	c1 e0 04             	shl    eax,0x4
   166b5:	01 c8                	add    eax,ecx
   166b7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   166ba:	0f b6 c0             	movzx  eax,al
   166bd:	83 ec 08             	sub    esp,0x8
   166c0:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   166c6:	ff b5 30 ff ff ff    	push   DWORD PTR [ebp-0xd0]
   166cc:	ff b5 2c ff ff ff    	push   DWORD PTR [ebp-0xd4]
   166d2:	ff b5 28 ff ff ff    	push   DWORD PTR [ebp-0xd8]
   166d8:	ff b5 24 ff ff ff    	push   DWORD PTR [ebp-0xdc]
   166de:	57                   	push   edi
   166df:	56                   	push   esi
   166e0:	53                   	push   ebx
   166e1:	50                   	push   eax
   166e2:	68 e4 26 08 00       	push   0x826e4
   166e7:	e8 1b 0e 01 00       	call   27507 <printk>
   166ec:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:77
                    kPCIDeviceFunctions[cnt].interrupt_line, kPCIDeviceFunctions[cnt].interrupt_pin, kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, kPCIDeviceFunctions[cnt].class, 
                    kPCIDeviceFunctions[cnt].subClass);
            //getVendorLongName(kPCIDeviceFunctions[cnt].vendor, buffer);
            //printk("%s",buffer);
            getDeviceName(kPCIDeviceFunctions[cnt].vendor, kPCIDeviceFunctions[cnt].device, buffer);
   166ef:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   166f5:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   166f8:	89 d0                	mov    eax,edx
   166fa:	c1 e0 02             	shl    eax,0x2
   166fd:	01 d0                	add    eax,edx
   166ff:	c1 e0 04             	shl    eax,0x4
   16702:	01 c8                	add    eax,ecx
   16704:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   16708:	0f b7 c8             	movzx  ecx,ax
   1670b:	8b 1d fc 47 12 00    	mov    ebx,DWORD PTR ds:0x1247fc
   16711:	8b 55 d8             	mov    edx,DWORD PTR [ebp-0x28]
   16714:	89 d0                	mov    eax,edx
   16716:	c1 e0 02             	shl    eax,0x2
   16719:	01 d0                	add    eax,edx
   1671b:	c1 e0 04             	shl    eax,0x4
   1671e:	01 d8                	add    eax,ebx
   16720:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   16724:	0f b7 c0             	movzx  eax,ax
   16727:	83 ec 04             	sub    esp,0x4
   1672a:	8d 95 42 ff ff ff    	lea    edx,[ebp-0xbe]
   16730:	52                   	push   edx
   16731:	51                   	push   ecx
   16732:	50                   	push   eax
   16733:	e8 29 03 00 00       	call   16a61 <getDeviceName>
   16738:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:78
            strleft(buffer,28);
   1673b:	83 ec 08             	sub    esp,0x8
   1673e:	6a 1c                	push   0x1c
   16740:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16746:	50                   	push   eax
   16747:	e8 28 11 01 00       	call   27874 <strleft>
   1674c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:79
            printk("%s\n",buffer);
   1674f:	83 ec 08             	sub    esp,0x8
   16752:	8d 85 42 ff ff ff    	lea    eax,[ebp-0xbe]
   16758:	50                   	push   eax
   16759:	68 18 27 08 00       	push   0x82718
   1675e:	e8 a4 0d 01 00       	call   27507 <printk>
   16763:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:80
            totalCnt++;
   16766:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:81
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
   1676a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1676e:	7e 25                	jle    16795 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:81 (discriminator 1)
   16770:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16773:	8d 58 04             	lea    ebx,[eax+0x4]
   16776:	e8 4c 1a 00 00       	call   181c7 <cursorGetMaxY>
   1677b:	89 c1                	mov    ecx,eax
   1677d:	89 d8                	mov    eax,ebx
   1677f:	99                   	cdq    
   16780:	f7 f9                	idiv   ecx
   16782:	89 d0                	mov    eax,edx
   16784:	85 c0                	test   eax,eax
   16786:	75 0d                	jne    16795 <printPCIConfig+0x689>
/home/yogi/src/os/chrisOS/src/block/pci.c:82
            pauseDisplay(false);
   16788:	83 ec 0c             	sub    esp,0xc
   1678b:	6a 00                	push   0x0
   1678d:	e8 46 f5 00 00       	call   25cd8 <pauseDisplay>
   16792:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 2)
        totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
    }   
    puts("Functions:\n");
    for (int cnt=0;cnt<kPCIFunctionCount;cnt++)
   16795:	83 45 d8 01          	add    DWORD PTR [ebp-0x28],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:68 (discriminator 1)
   16799:	0f b6 05 ee 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ee
   167a0:	0f b6 c0             	movzx  eax,al
   167a3:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   167a6:	0f 8f 00 fe ff ff    	jg     165ac <printPCIConfig+0x4a0>
/home/yogi/src/os/chrisOS/src/block/pci.c:85
            totalCnt++;
        if (totalCnt>0 && ((totalCnt+4)%cursorGetMaxY())==0)
            pauseDisplay(false);
        }
    }
}
   167ac:	90                   	nop
   167ad:	8d 65 f4             	lea    esp,[ebp-0xc]
   167b0:	5b                   	pop    ebx
   167b1:	5e                   	pop    esi
   167b2:	5f                   	pop    edi
   167b3:	5d                   	pop    ebp
   167b4:	c3                   	ret    

000167b5 <pciConfigReadWord>:
pciConfigReadWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:90

//struct pci_device_id* pci_deviceList = (struct pci_device_id*)PCI_DEVICE_LIST_ADDRESS;
  uint16_t pciConfigReadWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   167b5:	55                   	push   ebp
   167b6:	89 e5                	mov    ebp,esp
   167b8:	53                   	push   ebx
   167b9:	83 ec 30             	sub    esp,0x30
   167bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   167bf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   167c2:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   167c5:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   167c8:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   167cb:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   167ce:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   167d1:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:92
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   167d4:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   167d8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:93
    uint32_t lslot = (uint32_t)slot;
   167db:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   167df:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:94
    uint32_t lfunc = (uint32_t)func;
   167e2:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   167e6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:95
    uint16_t tmp = 0;
   167e9:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   167ef:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   167f2:	c1 e0 10             	shl    eax,0x10
   167f5:	89 c2                	mov    edx,eax
   167f7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   167fa:	c1 e0 0b             	shl    eax,0xb
   167fd:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   167ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16802:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16805:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:98
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   16807:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   1680b:	25 fc 00 00 00       	and    eax,0xfc
   16810:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:97
    uint32_t lbus  = (uint32_t)bus;
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint16_t tmp = 0;
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   16812:	0d 00 00 00 80       	or     eax,0x80000000
   16817:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:101
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   1681a:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1681d:	68 f8 0c 00 00       	push   0xcf8
   16822:	e8 b1 f8 ff ff       	call   160d8 <outl>
   16827:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:104
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    tmp = (uint16_t)((inl (0xCFC) >> ((offset & 2) * 8)) & 0xffff);
   1682a:	68 fc 0c 00 00       	push   0xcfc
   1682f:	e8 bc f8 ff ff       	call   160f0 <inl>
   16834:	83 c4 04             	add    esp,0x4
   16837:	89 c2                	mov    edx,eax
   16839:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   1683d:	83 e0 02             	and    eax,0x2
   16840:	c1 e0 03             	shl    eax,0x3
   16843:	89 c1                	mov    ecx,eax
   16845:	d3 ea                	shr    edx,cl
   16847:	89 d0                	mov    eax,edx
   16849:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:105
    return (tmp);
   1684d:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
/home/yogi/src/os/chrisOS/src/block/pci.c:106
 }
   16851:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16854:	c9                   	leave  
   16855:	c3                   	ret    

00016856 <pciConfigReadDWord>:
pciConfigReadDWord():
/home/yogi/src/os/chrisOS/src/block/pci.c:110

 uint32_t pciConfigReadDWord (uint8_t bus, uint8_t slot,
                             uint8_t func, uint8_t offset)
 {
   16856:	55                   	push   ebp
   16857:	89 e5                	mov    ebp,esp
   16859:	53                   	push   ebx
   1685a:	83 ec 30             	sub    esp,0x30
   1685d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   16860:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16863:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16866:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16869:	88 5d d8             	mov    BYTE PTR [ebp-0x28],bl
   1686c:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   1686f:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16872:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:112
    uint32_t address;
    uint32_t lbus  = (uint32_t)bus;
   16875:	0f b6 45 d8          	movzx  eax,BYTE PTR [ebp-0x28]
   16879:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:113
    uint32_t lslot = (uint32_t)slot;
   1687c:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16880:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:114
    uint32_t lfunc = (uint32_t)func;
   16883:	0f b6 45 d0          	movzx  eax,BYTE PTR [ebp-0x30]
   16887:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   1688a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1688d:	c1 e0 10             	shl    eax,0x10
   16890:	89 c2                	mov    edx,eax
   16892:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16895:	c1 e0 0b             	shl    eax,0xb
   16898:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   1689a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1689d:	c1 e0 08             	shl    eax,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   168a0:	09 c2                	or     edx,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:119
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
   168a2:	0f b6 45 cc          	movzx  eax,BYTE PTR [ebp-0x34]
   168a6:	25 fc 00 00 00       	and    eax,0xfc
   168ab:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/block/pci.c:118
    uint32_t lslot = (uint32_t)slot;
    uint32_t lfunc = (uint32_t)func;
    uint32_t num;
    
    /* create configuration address as per Figure 1 */
    address = (uint32_t)((lbus << 16) | (lslot << 11) |
   168ad:	0d 00 00 00 80       	or     eax,0x80000000
   168b2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:122
              (lfunc << 8) | (offset & 0xfc) | ((uint32_t)0x80000000));
 
    /* write out the address */
    outl (0xCF8, address);
   168b5:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   168b8:	68 f8 0c 00 00       	push   0xcf8
   168bd:	e8 16 f8 ff ff       	call   160d8 <outl>
   168c2:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:125
    /* read in the data */
    /* (offset & 2) * 8) = 0 will choose the first word of the 32 bits register */
    num = inl (0xCFC);
   168c5:	68 fc 0c 00 00       	push   0xcfc
   168ca:	e8 21 f8 ff ff       	call   160f0 <inl>
   168cf:	83 c4 04             	add    esp,0x4
   168d2:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:127
    //return ((num >> 24)) | ((num & 0x0000FF000) << 8) | ((num & 0x00FF0000)>>8) | ((num << 24));
    return num;
   168d5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/block/pci.c:128
 }
   168d8:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   168db:	c9                   	leave  
   168dc:	c3                   	ret    

000168dd <pciQueryBDF>:
pciQueryBDF():
/home/yogi/src/os/chrisOS/src/block/pci.c:131

 void pciQueryBDF(uint8_t bus, uint8_t device, uint8_t function)
 {
   168dd:	55                   	push   ebp
   168de:	89 e5                	mov    ebp,esp
   168e0:	81 ec b8 00 00 00    	sub    esp,0xb8
   168e6:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   168e9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   168ec:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   168ef:	88 8d 54 ff ff ff    	mov    BYTE PTR [ebp-0xac],cl
   168f5:	88 95 50 ff ff ff    	mov    BYTE PTR [ebp-0xb0],dl
   168fb:	88 85 4c ff ff ff    	mov    BYTE PTR [ebp-0xb4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:135
     struct pci_device_t header;
     struct pci_bridge_t bridge;

     printk("Retrieving info for PCI address %02X:%02X:%02X\n",bus,device,function);
   16901:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16908:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   1690f:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16916:	51                   	push   ecx
   16917:	52                   	push   edx
   16918:	50                   	push   eax
   16919:	68 78 27 08 00       	push   0x82778
   1691e:	e8 e4 0b 01 00       	call   27507 <printk>
   16923:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:136
    if (!getDeviceHeader(&header, bus, device, function))
   16926:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   1692d:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   16934:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   1693b:	51                   	push   ecx
   1693c:	52                   	push   edx
   1693d:	50                   	push   eax
   1693e:	8d 45 a8             	lea    eax,[ebp-0x58]
   16941:	50                   	push   eax
   16942:	e8 bd 02 00 00       	call   16c04 <getDeviceHeader>
   16947:	83 c4 10             	add    esp,0x10
   1694a:	83 f0 01             	xor    eax,0x1
   1694d:	84 c0                	test   al,al
   1694f:	74 15                	je     16966 <pciQueryBDF+0x89>
/home/yogi/src/os/chrisOS/src/block/pci.c:138
    {
        printk("No device at that address\n");
   16951:	83 ec 0c             	sub    esp,0xc
   16954:	68 a8 27 08 00       	push   0x827a8
   16959:	e8 a9 0b 01 00       	call   27507 <printk>
   1695e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:139
        return;
   16961:	e9 83 00 00 00       	jmp    169e9 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:141
    }
    if (header.vendor==0xFFFF)
   16966:	0f b7 45 ae          	movzx  eax,WORD PTR [ebp-0x52]
   1696a:	66 83 f8 ff          	cmp    ax,0xffff
   1696e:	75 27                	jne    16997 <pciQueryBDF+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:143
    {
        printk("Nothing found at %02X:%02X:%02X\n",bus,device,function);
   16970:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   16977:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   1697e:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   16985:	51                   	push   ecx
   16986:	52                   	push   edx
   16987:	50                   	push   eax
   16988:	68 c4 27 08 00       	push   0x827c4
   1698d:	e8 75 0b 01 00       	call   27507 <printk>
   16992:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:144
        return;
   16995:	eb 52                	jmp    169e9 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:146
    }
     if (header.class==0x06)
   16997:	8b 45 b8             	mov    eax,DWORD PTR [ebp-0x48]
   1699a:	83 f8 06             	cmp    eax,0x6
   1699d:	75 3b                	jne    169da <pciQueryBDF+0xfd>
/home/yogi/src/os/chrisOS/src/block/pci.c:148
     {
         getBridgeHeader(&bridge,bus,device,function);
   1699f:	0f b6 8d 4c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xb4]
   169a6:	0f b6 95 50 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xb0]
   169ad:	0f b6 85 54 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xac]
   169b4:	51                   	push   ecx
   169b5:	52                   	push   edx
   169b6:	50                   	push   eax
   169b7:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   169bd:	50                   	push   eax
   169be:	e8 27 04 00 00       	call   16dea <getBridgeHeader>
   169c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:149
         printPCIBridgeHeader(&bridge);
   169c6:	83 ec 0c             	sub    esp,0xc
   169c9:	8d 85 5a ff ff ff    	lea    eax,[ebp-0xa6]
   169cf:	50                   	push   eax
   169d0:	e8 5d 07 00 00       	call   17132 <printPCIBridgeHeader>
   169d5:	83 c4 10             	add    esp,0x10
   169d8:	eb 0f                	jmp    169e9 <pciQueryBDF+0x10c>
/home/yogi/src/os/chrisOS/src/block/pci.c:152
     }
     else
         printPCIHeader(&header);
   169da:	83 ec 0c             	sub    esp,0xc
   169dd:	8d 45 a8             	lea    eax,[ebp-0x58]
   169e0:	50                   	push   eax
   169e1:	e8 a1 09 00 00       	call   17387 <printPCIHeader>
   169e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:153
 }
   169e9:	c9                   	leave  
   169ea:	c3                   	ret    

000169eb <getVendorLongName>:
getVendorLongName():
/home/yogi/src/os/chrisOS/src/block/pci.c:162
    uint32_t subvendor, subdevice;  // Subsystem ID's or PCI_ANY_ID 
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
   169eb:	55                   	push   ebp
   169ec:	89 e5                	mov    ebp,esp
   169ee:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:163
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   169f1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   169f8:	eb 49                	jmp    16a43 <getVendorLongName+0x58>
/home/yogi/src/os/chrisOS/src/block/pci.c:164
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
   169fa:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   169fd:	89 d0                	mov    eax,edx
   169ff:	01 c0                	add    eax,eax
   16a01:	01 d0                	add    eax,edx
   16a03:	c1 e0 02             	shl    eax,0x2
   16a06:	05 40 8e 02 00       	add    eax,0x28e40
   16a0b:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16a0e:	0f b7 d0             	movzx  edx,ax
   16a11:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16a14:	0f b7 c0             	movzx  eax,ax
   16a17:	39 c2                	cmp    edx,eax
   16a19:	75 24                	jne    16a3f <getVendorLongName+0x54>
/home/yogi/src/os/chrisOS/src/block/pci.c:166
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
   16a1b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16a1e:	89 d0                	mov    eax,edx
   16a20:	01 c0                	add    eax,eax
   16a22:	01 d0                	add    eax,edx
   16a24:	c1 e0 02             	shl    eax,0x2
   16a27:	05 48 8e 02 00       	add    eax,0x28e48
   16a2c:	8b 00                	mov    eax,DWORD PTR [eax]
   16a2e:	83 ec 08             	sub    esp,0x8
   16a31:	50                   	push   eax
   16a32:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16a35:	e8 2e 0c 01 00       	call   27668 <strcpy>
   16a3a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:167
            return;
   16a3d:	eb 20                	jmp    16a5f <getVendorLongName+0x74>
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 2)
    uint32_t class, class_mask;     // (class,subclass,prog-if) triplet 
    unsigned long driver_data;      // Data private to the driver 
*/
void getVendorLongName(uint32_t vendorID, char* vendorLongName)
{
    for (unsigned cnt=0; cnt<PCI_VENTABLE_LEN;cnt++)
   16a3f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:163 (discriminator 1)
   16a43:	81 7d f4 20 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x620
   16a4a:	76 ae                	jbe    169fa <getVendorLongName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:169
        if (PciVenTable[cnt].VenId == (uint16_t)vendorID)
        {
            strcpy(vendorLongName, PciVenTable[cnt].VenFull);
            return;
        }
    strcpy(vendorLongName,"Not Found");
   16a4c:	83 ec 08             	sub    esp,0x8
   16a4f:	68 e5 27 08 00       	push   0x827e5
   16a54:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16a57:	e8 0c 0c 01 00       	call   27668 <strcpy>
   16a5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:170
}
   16a5f:	c9                   	leave  
   16a60:	c3                   	ret    

00016a61 <getDeviceName>:
getDeviceName():
/home/yogi/src/os/chrisOS/src/block/pci.c:173

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
   16a61:	55                   	push   ebp
   16a62:	89 e5                	mov    ebp,esp
   16a64:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/block/pci.c:174
    for (int cnt=0; cnt<7000;cnt++)
   16a67:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16a6e:	eb 60                	jmp    16ad0 <getDeviceName+0x6f>
/home/yogi/src/os/chrisOS/src/block/pci.c:175
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
   16a70:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16a73:	89 d0                	mov    eax,edx
   16a75:	01 c0                	add    eax,eax
   16a77:	01 d0                	add    eax,edx
   16a79:	c1 e0 02             	shl    eax,0x2
   16a7c:	05 c0 de 02 00       	add    eax,0x2dec0
   16a81:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16a84:	0f b7 c0             	movzx  eax,ax
   16a87:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   16a8a:	75 40                	jne    16acc <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:175 (discriminator 1)
   16a8c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16a8f:	89 d0                	mov    eax,edx
   16a91:	01 c0                	add    eax,eax
   16a93:	01 d0                	add    eax,edx
   16a95:	c1 e0 02             	shl    eax,0x2
   16a98:	05 c2 de 02 00       	add    eax,0x2dec2
   16a9d:	0f b7 00             	movzx  eax,WORD PTR [eax]
   16aa0:	0f b7 c0             	movzx  eax,ax
   16aa3:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   16aa6:	75 24                	jne    16acc <getDeviceName+0x6b>
/home/yogi/src/os/chrisOS/src/block/pci.c:177
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
   16aa8:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   16aab:	89 d0                	mov    eax,edx
   16aad:	01 c0                	add    eax,eax
   16aaf:	01 d0                	add    eax,edx
   16ab1:	c1 e0 02             	shl    eax,0x2
   16ab4:	05 c8 de 02 00       	add    eax,0x2dec8
   16ab9:	8b 00                	mov    eax,DWORD PTR [eax]
   16abb:	83 ec 08             	sub    esp,0x8
   16abe:	50                   	push   eax
   16abf:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16ac2:	e8 a1 0b 01 00       	call   27668 <strcpy>
   16ac7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:178
            return;
   16aca:	eb 20                	jmp    16aec <getDeviceName+0x8b>
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 2)
    strcpy(vendorLongName,"Not Found");
}

void getDeviceName(uint32_t vendorID, uint32_t deviceID, char* deviceName)
{
    for (int cnt=0; cnt<7000;cnt++)
   16acc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:174 (discriminator 1)
   16ad0:	81 7d f4 57 1b 00 00 	cmp    DWORD PTR [ebp-0xc],0x1b57
   16ad7:	7e 97                	jle    16a70 <getDeviceName+0xf>
/home/yogi/src/os/chrisOS/src/block/pci.c:180
        if (PciDevTable[cnt].VenId == vendorID && PciDevTable[cnt].DevId==deviceID)
        {
            strcpy(deviceName, PciDevTable[cnt].ChipDesc);
            return;
        }
    strcpy(deviceName,"Not Found");
   16ad9:	83 ec 08             	sub    esp,0x8
   16adc:	68 e5 27 08 00       	push   0x827e5
   16ae1:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16ae4:	e8 7f 0b 01 00       	call   27668 <strcpy>
   16ae9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:181
}
   16aec:	c9                   	leave  
   16aed:	c3                   	ret    

00016aee <getDeviceNameP>:
getDeviceNameP():
/home/yogi/src/os/chrisOS/src/block/pci.c:184

char* getDeviceNameP(struct pci_device_t* node, char* buffer)
{
   16aee:	55                   	push   ebp
   16aef:	89 e5                	mov    ebp,esp
   16af1:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/block/pci.c:185
    getDeviceName(node->vendor, node->device, buffer);
   16af4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16af7:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   16afb:	0f b7 d0             	movzx  edx,ax
   16afe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16b01:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   16b05:	0f b7 c0             	movzx  eax,ax
   16b08:	83 ec 04             	sub    esp,0x4
   16b0b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   16b0e:	52                   	push   edx
   16b0f:	50                   	push   eax
   16b10:	e8 4c ff ff ff       	call   16a61 <getDeviceName>
   16b15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:186
    return buffer;
   16b18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/block/pci.c:187
}
   16b1b:	c9                   	leave  
   16b1c:	c3                   	ret    

00016b1d <getClass>:
getClass():
/home/yogi/src/os/chrisOS/src/block/pci.c:190

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
   16b1d:	55                   	push   ebp
   16b1e:	89 e5                	mov    ebp,esp
   16b20:	83 ec 28             	sub    esp,0x28
   16b23:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16b26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   16b29:	88 55 e4             	mov    BYTE PTR [ebp-0x1c],dl
   16b2c:	88 45 e0             	mov    BYTE PTR [ebp-0x20],al
/home/yogi/src/os/chrisOS/src/block/pci.c:192
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   16b2f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16b36:	e9 80 00 00 00       	jmp    16bbb <getClass+0x9e>
/home/yogi/src/os/chrisOS/src/block/pci.c:194
    {
        if (PciClassCodeTable[cnt].BaseClass==class && PciClassCodeTable[cnt].SubClass==subClass /*&& PciClassCodeTable[cnt].ProgIf==prog*/ )
   16b3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16b3e:	c1 e0 04             	shl    eax,0x4
   16b41:	05 e0 d7 02 00       	add    eax,0x2d7e0
   16b46:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16b49:	3a 45 e4             	cmp    al,BYTE PTR [ebp-0x1c]
   16b4c:	75 69                	jne    16bb7 <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:194 (discriminator 1)
   16b4e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16b51:	c1 e0 04             	shl    eax,0x4
   16b54:	05 e1 d7 02 00       	add    eax,0x2d7e1
   16b59:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   16b5c:	3a 45 e0             	cmp    al,BYTE PTR [ebp-0x20]
   16b5f:	75 56                	jne    16bb7 <getClass+0x9a>
/home/yogi/src/os/chrisOS/src/block/pci.c:196
        {
            strcpy(BaseDesc,PciClassCodeTable[cnt].BaseDesc);
   16b61:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16b64:	c1 e0 04             	shl    eax,0x4
   16b67:	05 e4 d7 02 00       	add    eax,0x2d7e4
   16b6c:	8b 00                	mov    eax,DWORD PTR [eax]
   16b6e:	83 ec 08             	sub    esp,0x8
   16b71:	50                   	push   eax
   16b72:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16b75:	e8 ee 0a 01 00       	call   27668 <strcpy>
   16b7a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:197
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
   16b7d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16b80:	c1 e0 04             	shl    eax,0x4
   16b83:	05 e8 d7 02 00       	add    eax,0x2d7e8
   16b88:	8b 00                	mov    eax,DWORD PTR [eax]
   16b8a:	83 ec 08             	sub    esp,0x8
   16b8d:	50                   	push   eax
   16b8e:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   16b91:	e8 d2 0a 01 00       	call   27668 <strcpy>
   16b96:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:198
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
   16b99:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16b9c:	c1 e0 04             	shl    eax,0x4
   16b9f:	05 ec d7 02 00       	add    eax,0x2d7ec
   16ba4:	8b 00                	mov    eax,DWORD PTR [eax]
   16ba6:	83 ec 08             	sub    esp,0x8
   16ba9:	50                   	push   eax
   16baa:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   16bad:	e8 b6 0a 01 00       	call   27668 <strcpy>
   16bb2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:199
            return;
   16bb5:	eb 4b                	jmp    16c02 <getClass+0xe5>
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 2)
}

void getClass(uint8_t class, uint8_t subClass, char BaseDesc[], char SubDesc[] , char ProgDesc[])
{
    static char notFound[50] = "Not found\0";
    for (unsigned cnt=0;cnt<PCI_DEVTABLE_LEN;cnt++)
   16bb7:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:192 (discriminator 1)
   16bbb:	81 7d f4 28 1e 00 00 	cmp    DWORD PTR [ebp-0xc],0x1e28
   16bc2:	0f 86 73 ff ff ff    	jbe    16b3b <getClass+0x1e>
/home/yogi/src/os/chrisOS/src/block/pci.c:202
            strcpy(SubDesc,PciClassCodeTable[cnt].SubDesc);
            strcpy(ProgDesc,PciClassCodeTable[cnt].ProgDesc);
            return;
        }
    }
    strcpy(BaseDesc,notFound);
   16bc8:	83 ec 08             	sub    esp,0x8
   16bcb:	68 20 dd 02 00       	push   0x2dd20
   16bd0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   16bd3:	e8 90 0a 01 00       	call   27668 <strcpy>
   16bd8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:203
    strcpy(SubDesc,notFound);
   16bdb:	83 ec 08             	sub    esp,0x8
   16bde:	68 20 dd 02 00       	push   0x2dd20
   16be3:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   16be6:	e8 7d 0a 01 00       	call   27668 <strcpy>
   16beb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:204
    strcpy(ProgDesc,notFound);
   16bee:	83 ec 08             	sub    esp,0x8
   16bf1:	68 20 dd 02 00       	push   0x2dd20
   16bf6:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   16bf9:	e8 6a 0a 01 00       	call   27668 <strcpy>
   16bfe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:205
    return;
   16c01:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:206
}
   16c02:	c9                   	leave  
   16c03:	c3                   	ret    

00016c04 <getDeviceHeader>:
getDeviceHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:209

bool getDeviceHeader(struct pci_device_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16c04:	55                   	push   ebp
   16c05:	89 e5                	mov    ebp,esp
   16c07:	53                   	push   ebx
   16c08:	83 ec 24             	sub    esp,0x24
   16c0b:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16c0e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16c11:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16c14:	88 4d e4             	mov    BYTE PTR [ebp-0x1c],cl
   16c17:	88 55 e0             	mov    BYTE PTR [ebp-0x20],dl
   16c1a:	88 45 dc             	mov    BYTE PTR [ebp-0x24],al
/home/yogi/src/os/chrisOS/src/block/pci.c:212
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
   16c1d:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   16c21:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16c25:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   16c29:	83 ec 0c             	sub    esp,0xc
   16c2c:	51                   	push   ecx
   16c2d:	52                   	push   edx
   16c2e:	50                   	push   eax
   16c2f:	68 f0 27 08 00       	push   0x827f0
   16c34:	68 00 01 00 00       	push   0x100
   16c39:	e8 e9 08 01 00       	call   27527 <printd>
   16c3e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:214
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16c41:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   16c48:	e9 6c 01 00 00       	jmp    16db9 <getDeviceHeader+0x1b5>
/home/yogi/src/os/chrisOS/src/block/pci.c:216
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   16c4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16c50:	c1 e0 02             	shl    eax,0x2
   16c53:	0f b6 d8             	movzx  ebx,al
   16c56:	0f b6 4d dc          	movzx  ecx,BYTE PTR [ebp-0x24]
   16c5a:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16c5e:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   16c62:	53                   	push   ebx
   16c63:	51                   	push   ecx
   16c64:	52                   	push   edx
   16c65:	50                   	push   eax
   16c66:	e8 eb fb ff ff       	call   16856 <pciConfigReadDWord>
   16c6b:	83 c4 10             	add    esp,0x10
   16c6e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:217
        if (value==0xFFFFFFFF)
   16c71:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   16c75:	75 0a                	jne    16c81 <getDeviceHeader+0x7d>
/home/yogi/src/os/chrisOS/src/block/pci.c:218
            return false;
   16c77:	b8 00 00 00 00       	mov    eax,0x0
   16c7c:	e9 64 01 00 00       	jmp    16de5 <getDeviceHeader+0x1e1>
/home/yogi/src/os/chrisOS/src/block/pci.c:219
        switch(cnt)
   16c81:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16c85:	0f 87 2a 01 00 00    	ja     16db5 <getDeviceHeader+0x1b1>
   16c8b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16c8e:	c1 e0 02             	shl    eax,0x2
   16c91:	05 18 28 08 00       	add    eax,0x82818
   16c96:	8b 00                	mov    eax,DWORD PTR [eax]
   16c98:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:222
        {
            case 0:
                node->vendor=value;
   16c9a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16c9d:	89 c2                	mov    edx,eax
   16c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ca2:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:223
                node->device=value >> 16;
   16ca6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ca9:	c1 e8 10             	shr    eax,0x10
   16cac:	89 c2                	mov    edx,eax
   16cae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cb1:	66 89 50 08          	mov    WORD PTR [eax+0x8],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:224
                break;
   16cb5:	e9 fb 00 00 00       	jmp    16db5 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:226
            case 1:
                node->command=value&0xFFFF;
   16cba:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16cbd:	89 c2                	mov    edx,eax
   16cbf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cc2:	66 89 50 4c          	mov    WORD PTR [eax+0x4c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:227
                node->status=value>>16&0xFFFF;
   16cc6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16cc9:	c1 e8 10             	shr    eax,0x10
   16ccc:	89 c2                	mov    edx,eax
   16cce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cd1:	66 89 50 4a          	mov    WORD PTR [eax+0x4a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:228
                break;
   16cd5:	e9 db 00 00 00       	jmp    16db5 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:230
            case 2:
                node->class=value >> 24;
   16cda:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16cdd:	c1 e8 18             	shr    eax,0x18
   16ce0:	89 c2                	mov    edx,eax
   16ce2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ce5:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:231
                node->subClass=(value & 0x00FF0000) >> 16;
   16ce8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16ceb:	25 00 00 ff 00       	and    eax,0xff0000
   16cf0:	c1 e8 10             	shr    eax,0x10
   16cf3:	89 c2                	mov    edx,eax
   16cf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16cf8:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:232
                node->prog=(value & 0x0000FF00) >> 8;
   16cfb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16cfe:	25 00 ff 00 00       	and    eax,0xff00
   16d03:	c1 e8 08             	shr    eax,0x8
   16d06:	89 c2                	mov    edx,eax
   16d08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d0b:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:233
                break;
   16d0e:	e9 a2 00 00 00       	jmp    16db5 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:235
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16d13:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16d16:	c1 e8 10             	shr    eax,0x10
   16d19:	83 e0 7f             	and    eax,0x7f
   16d1c:	89 c2                	mov    edx,eax
   16d1e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d21:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:236
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16d24:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16d27:	25 00 00 80 00       	and    eax,0x800000
   16d2c:	85 c0                	test   eax,eax
   16d2e:	0f 95 c2             	setne  dl
   16d31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d34:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:237
                node->cacheSize=value&0xFF;
   16d37:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16d3a:	89 c2                	mov    edx,eax
   16d3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d3f:	88 50 41             	mov    BYTE PTR [eax+0x41],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:238
                node->latencyTimer=value>>8;
   16d42:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16d45:	c1 e8 08             	shr    eax,0x8
   16d48:	89 c2                	mov    edx,eax
   16d4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d4d:	88 50 40             	mov    BYTE PTR [eax+0x40],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:239
                break;
   16d50:	eb 63                	jmp    16db5 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:241
            case 4: case 5: case 6: case 7: case 8: case 9:
                node->baseAdd[cnt+1-5]=value;
   16d52:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   16d55:	8d 50 fc             	lea    edx,[eax-0x4]
   16d58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d5b:	8d 4a 08             	lea    ecx,[edx+0x8]
   16d5e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16d61:	89 14 88             	mov    DWORD PTR [eax+ecx*4],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:242
                break;
   16d64:	eb 4f                	jmp    16db5 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:244
            case 11:
                node->subdevice=value >> 16;
   16d66:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16d69:	c1 e8 10             	shr    eax,0x10
   16d6c:	89 c2                	mov    edx,eax
   16d6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d71:	66 89 50 0c          	mov    WORD PTR [eax+0xc],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:245
                node->subvendor=value & 0xFFFF;
   16d75:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16d78:	89 c2                	mov    edx,eax
   16d7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d7d:	66 89 50 0a          	mov    WORD PTR [eax+0xa],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:246
                break;
   16d81:	eb 32                	jmp    16db5 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:248
            case 12:
                node->expROMAddress=value;
   16d83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d86:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   16d89:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:249
                break;
   16d8c:	eb 27                	jmp    16db5 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:251
            case 13:
                node->caps = value & 0xFF;
   16d8e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16d91:	89 c2                	mov    edx,eax
   16d93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16d96:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:252
                break;
   16d99:	eb 1a                	jmp    16db5 <getDeviceHeader+0x1b1>
/home/yogi/src/os/chrisOS/src/block/pci.c:254
            case 15:
                node->interrupt_line=value&0xFF;
   16d9b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16d9e:	89 c2                	mov    edx,eax
   16da0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16da3:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:255
                node->interrupt_pin=(value >> 8)&0xFF;
   16da6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   16da9:	c1 e8 08             	shr    eax,0x8
   16dac:	89 c2                	mov    edx,eax
   16dae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16db1:	88 50 3e             	mov    BYTE PTR [eax+0x3e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:256
                break;
   16db4:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building device header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<16;cnt++)
   16db5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:214 (discriminator 1)
   16db9:	83 7d f4 0f          	cmp    DWORD PTR [ebp-0xc],0xf
   16dbd:	0f 8e 8a fe ff ff    	jle    16c4d <getDeviceHeader+0x49>
/home/yogi/src/os/chrisOS/src/block/pci.c:259
                node->interrupt_line=value&0xFF;
                node->interrupt_pin=(value >> 8)&0xFF;
                break;
        }
    }
    node->busNo=bus;
   16dc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dc6:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   16dca:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:260
    node->deviceNo=slot;
   16dcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dcf:	0f b6 55 e0          	movzx  edx,BYTE PTR [ebp-0x20]
   16dd3:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:261
    node->funcNo=func;
   16dd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16dd9:	0f b6 55 dc          	movzx  edx,BYTE PTR [ebp-0x24]
   16ddd:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:262
    return true;
   16de0:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:263
}
   16de5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   16de8:	c9                   	leave  
   16de9:	c3                   	ret    

00016dea <getBridgeHeader>:
getBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:266

bool getBridgeHeader(struct pci_bridge_t* node, uint8_t bus, uint8_t slot, uint8_t func)
{
   16dea:	55                   	push   ebp
   16deb:	89 e5                	mov    ebp,esp
   16ded:	57                   	push   edi
   16dee:	56                   	push   esi
   16def:	53                   	push   ebx
   16df0:	83 ec 4c             	sub    esp,0x4c
   16df3:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   16df6:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   16df9:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   16dfc:	88 4d d4             	mov    BYTE PTR [ebp-0x2c],cl
   16dff:	88 55 d0             	mov    BYTE PTR [ebp-0x30],dl
   16e02:	88 45 cc             	mov    BYTE PTR [ebp-0x34],al
/home/yogi/src/os/chrisOS/src/block/pci.c:269
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
   16e05:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16e09:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16e0d:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16e11:	83 ec 0c             	sub    esp,0xc
   16e14:	51                   	push   ecx
   16e15:	52                   	push   edx
   16e16:	50                   	push   eax
   16e17:	68 58 28 08 00       	push   0x82858
   16e1c:	68 00 01 00 00       	push   0x100
   16e21:	e8 01 07 01 00       	call   27527 <printd>
   16e26:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:271
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   16e29:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   16e30:	e9 c9 02 00 00       	jmp    170fe <getBridgeHeader+0x314>
/home/yogi/src/os/chrisOS/src/block/pci.c:273
    {
        value=pciConfigReadDWord(bus, slot, func, cnt*4);
   16e35:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16e38:	c1 e0 02             	shl    eax,0x2
   16e3b:	0f b6 d8             	movzx  ebx,al
   16e3e:	0f b6 4d cc          	movzx  ecx,BYTE PTR [ebp-0x34]
   16e42:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   16e46:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   16e4a:	53                   	push   ebx
   16e4b:	51                   	push   ecx
   16e4c:	52                   	push   edx
   16e4d:	50                   	push   eax
   16e4e:	e8 03 fa ff ff       	call   16856 <pciConfigReadDWord>
   16e53:	83 c4 10             	add    esp,0x10
   16e56:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:274
        if (value==0xFFFFFFFF)
   16e59:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   16e5d:	75 0a                	jne    16e69 <getBridgeHeader+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:275
            return false;
   16e5f:	b8 00 00 00 00       	mov    eax,0x0
   16e64:	e9 c1 02 00 00       	jmp    1712a <getBridgeHeader+0x340>
/home/yogi/src/os/chrisOS/src/block/pci.c:276
        switch(cnt)
   16e69:	83 7d e4 0f          	cmp    DWORD PTR [ebp-0x1c],0xf
   16e6d:	0f 87 87 02 00 00    	ja     170fa <getBridgeHeader+0x310>
   16e73:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   16e76:	c1 e0 02             	shl    eax,0x2
   16e79:	05 80 28 08 00       	add    eax,0x82880
   16e7e:	8b 00                	mov    eax,DWORD PTR [eax]
   16e80:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/block/pci.c:279
        {
            case 0:
                node->vendor=value;
   16e82:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e85:	89 c2                	mov    edx,eax
   16e87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e8a:	66 89 50 05          	mov    WORD PTR [eax+0x5],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:280
                node->device=value >> 16;
   16e8e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16e91:	c1 e8 10             	shr    eax,0x10
   16e94:	89 c2                	mov    edx,eax
   16e96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16e99:	66 89 50 07          	mov    WORD PTR [eax+0x7],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:281
                break;
   16e9d:	e9 58 02 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:283
            case 1:
                node->command=value&0xFFFF;
   16ea2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ea5:	89 c2                	mov    edx,eax
   16ea7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16eaa:	66 89 50 3a          	mov    WORD PTR [eax+0x3a],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:284
                node->status=value>>16&0xFFFF;
   16eae:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16eb1:	c1 e8 10             	shr    eax,0x10
   16eb4:	89 c2                	mov    edx,eax
   16eb6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16eb9:	66 89 50 38          	mov    WORD PTR [eax+0x38],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:285
                break;
   16ebd:	e9 38 02 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:287
            case 2:
                node->class=value >> 24;
   16ec2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ec5:	c1 e8 18             	shr    eax,0x18
   16ec8:	89 c2                	mov    edx,eax
   16eca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ecd:	89 50 09             	mov    DWORD PTR [eax+0x9],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:288
                node->subClass=(value & 0x00FF0000) >> 16;
   16ed0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ed3:	25 00 00 ff 00       	and    eax,0xff0000
   16ed8:	c1 e8 10             	shr    eax,0x10
   16edb:	89 c2                	mov    edx,eax
   16edd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ee0:	89 50 0d             	mov    DWORD PTR [eax+0xd],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:289
                node->prog=(value & 0x0000FF00) >> 8;
   16ee3:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ee6:	25 00 ff 00 00       	and    eax,0xff00
   16eeb:	c1 e8 08             	shr    eax,0x8
   16eee:	89 c2                	mov    edx,eax
   16ef0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16ef3:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:290
                break;
   16ef6:	e9 ff 01 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:292
            case 3:
                node->headerType=(value >> 16) & 0x7f;
   16efb:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16efe:	c1 e8 10             	shr    eax,0x10
   16f01:	83 e0 7f             	and    eax,0x7f
   16f04:	89 c2                	mov    edx,eax
   16f06:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f09:	88 50 03             	mov    BYTE PTR [eax+0x3],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:293
                node->multiFunction=(value & 0x00800000)==0x00800000;
   16f0c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f0f:	25 00 00 80 00       	and    eax,0x800000
   16f14:	85 c0                	test   eax,eax
   16f16:	0f 95 c2             	setne  dl
   16f19:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f1c:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:294
                node->cacheSize=value&0xFF;
   16f1f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f22:	89 c2                	mov    edx,eax
   16f24:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f27:	88 50 2e             	mov    BYTE PTR [eax+0x2e],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:295
                node->latencyTimer=value>>8;
   16f2a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f2d:	c1 e8 08             	shr    eax,0x8
   16f30:	89 c2                	mov    edx,eax
   16f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f35:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:296
                break;
   16f38:	e9 bd 01 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:298
            case 4: 
                node->baseAdd[0]=value;
   16f3d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16f40:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f43:	89 42 12             	mov    DWORD PTR [edx+0x12],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:299
                break;
   16f46:	e9 af 01 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:301
            case 5:
                node->baseAdd[1]=value;
   16f4b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   16f4e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f51:	89 42 16             	mov    DWORD PTR [edx+0x16],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:302
                break;
   16f54:	e9 a1 01 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:304
            case 6:
                node->secLatencyTimer=(value>>24);
   16f59:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f5c:	c1 e8 18             	shr    eax,0x18
   16f5f:	89 c2                	mov    edx,eax
   16f61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f64:	88 50 31             	mov    BYTE PTR [eax+0x31],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:305
                node->subordinateBusNum=(value>>16) & 0xFF;
   16f67:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f6a:	c1 e8 10             	shr    eax,0x10
   16f6d:	89 c2                	mov    edx,eax
   16f6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f72:	88 50 28             	mov    BYTE PTR [eax+0x28],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:306
                node->secondaryBusNum=(value >> 8) & 0xFF;
   16f75:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f78:	c1 e8 08             	shr    eax,0x8
   16f7b:	89 c2                	mov    edx,eax
   16f7d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f80:	88 50 26             	mov    BYTE PTR [eax+0x26],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:307
                node->primaryBusNum=value & 0xFF;
   16f83:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f86:	89 c2                	mov    edx,eax
   16f88:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f8b:	88 50 27             	mov    BYTE PTR [eax+0x27],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:309
                //printk("pr:se:su %02X:%02X:%02X\n", node->primaryBusNum, node->secondaryBusNum, node->subordinateBusNum);
                break;
   16f8e:	e9 67 01 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:311
            case 7:
                node->secStatus=(value>>16);
   16f93:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16f96:	c1 e8 10             	shr    eax,0x10
   16f99:	89 c2                	mov    edx,eax
   16f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16f9e:	66 89 50 3c          	mov    WORD PTR [eax+0x3c],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:312
                node->ioLimit=(value>>8)&0xFF;
   16fa2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16fa5:	c1 e8 08             	shr    eax,0x8
   16fa8:	0f b6 d0             	movzx  edx,al
   16fab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fae:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:313
                node->ioBase=value&0xFF;
   16fb1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16fb4:	0f b6 d0             	movzx  edx,al
   16fb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fba:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:314
                break;
   16fbd:	e9 38 01 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:316
            case 8:
                node->memoryLimit=value>>16;
   16fc2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16fc5:	c1 e8 10             	shr    eax,0x10
   16fc8:	89 c2                	mov    edx,eax
   16fca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fcd:	66 89 50 36          	mov    WORD PTR [eax+0x36],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:317
                node->memoryBase=value;
   16fd1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16fd4:	89 c2                	mov    edx,eax
   16fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   16fd9:	66 89 50 34          	mov    WORD PTR [eax+0x34],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:318
                break;
   16fdd:	e9 18 01 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:320
            case 9:
                node->prefMemLimit=value>>16;
   16fe2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16fe5:	c1 e8 10             	shr    eax,0x10
   16fe8:	ba 00 00 00 00       	mov    edx,0x0
   16fed:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   16ff0:	89 41 3e             	mov    DWORD PTR [ecx+0x3e],eax
   16ff3:	89 51 42             	mov    DWORD PTR [ecx+0x42],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:321
                node->prefMemBase=value&0xFFFF;
   16ff6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   16ff9:	ba 00 00 00 00       	mov    edx,0x0
   16ffe:	0f b7 d8             	movzx  ebx,ax
   17001:	89 5d c0             	mov    DWORD PTR [ebp-0x40],ebx
   17004:	89 d0                	mov    eax,edx
   17006:	83 e0 00             	and    eax,0x0
   17009:	89 45 c4             	mov    DWORD PTR [ebp-0x3c],eax
   1700c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1700f:	8b 5d c0             	mov    ebx,DWORD PTR [ebp-0x40]
   17012:	8b 75 c4             	mov    esi,DWORD PTR [ebp-0x3c]
   17015:	89 58 46             	mov    DWORD PTR [eax+0x46],ebx
   17018:	89 70 4a             	mov    DWORD PTR [eax+0x4a],esi
/home/yogi/src/os/chrisOS/src/block/pci.c:322
                break;
   1701b:	e9 da 00 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:324
            case 10:
                node->prefMemLimit|=value<<16;
   17020:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17023:	8b 48 3e             	mov    ecx,DWORD PTR [eax+0x3e]
   17026:	8b 58 42             	mov    ebx,DWORD PTR [eax+0x42]
   17029:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1702c:	c1 e0 10             	shl    eax,0x10
   1702f:	ba 00 00 00 00       	mov    edx,0x0
   17034:	89 cf                	mov    edi,ecx
   17036:	09 c7                	or     edi,eax
   17038:	89 7d b8             	mov    DWORD PTR [ebp-0x48],edi
   1703b:	89 de                	mov    esi,ebx
   1703d:	09 d6                	or     esi,edx
   1703f:	89 75 bc             	mov    DWORD PTR [ebp-0x44],esi
   17042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17045:	8b 4d b8             	mov    ecx,DWORD PTR [ebp-0x48]
   17048:	8b 5d bc             	mov    ebx,DWORD PTR [ebp-0x44]
   1704b:	89 48 3e             	mov    DWORD PTR [eax+0x3e],ecx
   1704e:	89 58 42             	mov    DWORD PTR [eax+0x42],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:325
                break;
   17051:	e9 a4 00 00 00       	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:327
            case 11:
                node->prefMemBase|=value<<16;
   17056:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17059:	8b 48 46             	mov    ecx,DWORD PTR [eax+0x46]
   1705c:	8b 58 4a             	mov    ebx,DWORD PTR [eax+0x4a]
   1705f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17062:	c1 e0 10             	shl    eax,0x10
   17065:	ba 00 00 00 00       	mov    edx,0x0
   1706a:	89 cf                	mov    edi,ecx
   1706c:	09 c7                	or     edi,eax
   1706e:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   17071:	89 de                	mov    esi,ebx
   17073:	09 d6                	or     esi,edx
   17075:	89 75 b4             	mov    DWORD PTR [ebp-0x4c],esi
   17078:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1707b:	8b 4d b0             	mov    ecx,DWORD PTR [ebp-0x50]
   1707e:	8b 5d b4             	mov    ebx,DWORD PTR [ebp-0x4c]
   17081:	89 48 46             	mov    DWORD PTR [eax+0x46],ecx
   17084:	89 58 4a             	mov    DWORD PTR [eax+0x4a],ebx
/home/yogi/src/os/chrisOS/src/block/pci.c:328
                break;
   17087:	eb 71                	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:330
            case 12:
                node->ioLimit|=(value&0xFFFF0000)>>8;
   17089:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1708c:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   1708f:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   17092:	66 b8 00 00          	mov    ax,0x0
   17096:	c1 e8 08             	shr    eax,0x8
   17099:	09 c2                	or     edx,eax
   1709b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1709e:	89 50 1e             	mov    DWORD PTR [eax+0x1e],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:331
                node->ioBase|=value&0xFFFF<<8;
   170a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170a4:	8b 50 22             	mov    edx,DWORD PTR [eax+0x22]
   170a7:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170aa:	25 00 ff ff 00       	and    eax,0xffff00
   170af:	09 c2                	or     edx,eax
   170b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170b4:	89 50 22             	mov    DWORD PTR [eax+0x22],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:332
                break;
   170b7:	eb 41                	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:334
            case 13:
                node->caps = value & 0xFF;
   170b9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170bc:	89 c2                	mov    edx,eax
   170be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170c1:	88 50 29             	mov    BYTE PTR [eax+0x29],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:335
                break;
   170c4:	eb 34                	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:337
            case 14:
                node->expROMAddress=value;
   170c6:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   170c9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170cc:	89 42 1a             	mov    DWORD PTR [edx+0x1a],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:338
                break;
   170cf:	eb 29                	jmp    170fa <getBridgeHeader+0x310>
/home/yogi/src/os/chrisOS/src/block/pci.c:340
            case 15:
                node->interrupt_line=value&0xFF;
   170d1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170d4:	89 c2                	mov    edx,eax
   170d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170d9:	88 50 2a             	mov    BYTE PTR [eax+0x2a],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:341
                node->interrupt_pin=(value >> 8)&0xFF;
   170dc:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170df:	c1 e8 08             	shr    eax,0x8
   170e2:	89 c2                	mov    edx,eax
   170e4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170e7:	88 50 2b             	mov    BYTE PTR [eax+0x2b],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:342
                node->bridgeControl=(value>>16)&0xFFFF;
   170ea:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   170ed:	c1 e8 10             	shr    eax,0x10
   170f0:	89 c2                	mov    edx,eax
   170f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   170f5:	66 89 50 32          	mov    WORD PTR [eax+0x32],dx
/home/yogi/src/os/chrisOS/src/block/pci.c:343
                break;
   170f9:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 2)
{
    uint32_t value;

    printd(DEBUG_PCI_DISCOVERY,"Building bridge header for %u:%u:%u\n",bus,slot,func);
    //Get the entire header
    for (int cnt=0;cnt<14;cnt++)
   170fa:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:271 (discriminator 1)
   170fe:	83 7d e4 0d          	cmp    DWORD PTR [ebp-0x1c],0xd
   17102:	0f 8e 2d fd ff ff    	jle    16e35 <getBridgeHeader+0x4b>
/home/yogi/src/os/chrisOS/src/block/pci.c:347
                node->bridgeControl=(value>>16)&0xFFFF;
                break;

        }
    }
    node->busNo=bus;
   17108:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1710b:	0f b6 55 d4          	movzx  edx,BYTE PTR [ebp-0x2c]
   1710f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:348
    node->deviceNo=slot;
   17111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17114:	0f b6 55 d0          	movzx  edx,BYTE PTR [ebp-0x30]
   17118:	88 50 01             	mov    BYTE PTR [eax+0x1],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:349
    node->funcNo=func;
   1711b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1711e:	0f b6 55 cc          	movzx  edx,BYTE PTR [ebp-0x34]
   17122:	88 50 02             	mov    BYTE PTR [eax+0x2],dl
/home/yogi/src/os/chrisOS/src/block/pci.c:350
    return true;
   17125:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:351
}
   1712a:	8d 65 f4             	lea    esp,[ebp-0xc]
   1712d:	5b                   	pop    ebx
   1712e:	5e                   	pop    esi
   1712f:	5f                   	pop    edi
   17130:	5d                   	pop    ebp
   17131:	c3                   	ret    

00017132 <printPCIBridgeHeader>:
printPCIBridgeHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:353
void printPCIBridgeHeader(struct pci_bridge_t* node)
{          //BU:Sl:Fu        IRQ / Pin  VEND/DEVC   CLS/SUB    SUBN    PBN/  SBN
   17132:	55                   	push   ebp
   17133:	89 e5                	mov    ebp,esp
   17135:	57                   	push   edi
   17136:	56                   	push   esi
   17137:	53                   	push   ebx
   17138:	81 ec ac 06 00 00    	sub    esp,0x6ac
/home/yogi/src/os/chrisOS/src/block/pci.c:356
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   1713e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17141:	8b 40 0d             	mov    eax,DWORD PTR [eax+0xd]
   17144:	0f b6 d0             	movzx  edx,al
   17147:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1714a:	8b 40 09             	mov    eax,DWORD PTR [eax+0x9]
   1714d:	0f b6 c0             	movzx  eax,al
   17150:	83 ec 0c             	sub    esp,0xc
   17153:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   17159:	51                   	push   ecx
   1715a:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   17160:	51                   	push   ecx
   17161:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   17167:	51                   	push   ecx
   17168:	52                   	push   edx
   17169:	50                   	push   eax
   1716a:	e8 ae f9 ff ff       	call   16b1d <getClass>
   1716f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:357
    printk("Bridge:\n");
   17172:	83 ec 0c             	sub    esp,0xc
   17175:	68 c0 28 08 00       	push   0x828c0
   1717a:	e8 88 03 01 00       	call   27507 <printk>
   1717f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:358
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   17182:	83 ec 0c             	sub    esp,0xc
   17185:	68 a8 26 08 00       	push   0x826a8
   1718a:	e8 78 03 01 00       	call   27507 <printk>
   1718f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:364
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   17192:	a1 f8 47 12 00       	mov    eax,ds:0x1247f8
   17197:	0f b6 40 26          	movzx  eax,BYTE PTR [eax+0x26]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   1719b:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   1719e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171a1:	0f b6 40 27          	movzx  eax,BYTE PTR [eax+0x27]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   171a5:	0f b6 c0             	movzx  eax,al
   171a8:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:364
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);
   171ae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171b1:	0f b6 40 28          	movzx  eax,BYTE PTR [eax+0x28]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   171b5:	0f b6 d8             	movzx  ebx,al
   171b8:	89 9d 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],ebx
   171be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171c1:	8b 70 0d             	mov    esi,DWORD PTR [eax+0xd]
   171c4:	89 b5 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],esi
   171ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171cd:	8b 48 09             	mov    ecx,DWORD PTR [eax+0x9]
   171d0:	89 8d 58 f9 ff ff    	mov    DWORD PTR [ebp-0x6a8],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   171d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171d9:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   171dd:	0f b7 d0             	movzx  edx,ax
   171e0:	89 95 54 f9 ff ff    	mov    DWORD PTR [ebp-0x6ac],edx
/home/yogi/src/os/chrisOS/src/block/pci.c:362
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
   171e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171e9:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   171ed:	0f b7 c0             	movzx  eax,ax
   171f0:	89 85 50 f9 ff ff    	mov    DWORD PTR [ebp-0x6b0],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   171f6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   171f9:	0f b6 40 2b          	movzx  eax,BYTE PTR [eax+0x2b]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   171fd:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/block/pci.c:361
            node->busNo, node->deviceNo, node->funcNo, 
            node->interrupt_line, node->interrupt_pin, 
   17200:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17203:	0f b6 40 2a          	movzx  eax,BYTE PTR [eax+0x2a]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17207:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   1720a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1720d:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17211:	0f b6 c8             	movzx  ecx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   17214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17217:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   1721b:	0f b6 d0             	movzx  edx,al
/home/yogi/src/os/chrisOS/src/block/pci.c:360
            node->busNo, node->deviceNo, node->funcNo, 
   1721e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17221:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/block/pci.c:359
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
    printk("Bridge:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X   %02X\t  %02X/%02X\n",
   17224:	0f b6 c0             	movzx  eax,al
   17227:	83 ec 0c             	sub    esp,0xc
   1722a:	57                   	push   edi
   1722b:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   17231:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   17237:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   1723d:	ff b5 58 f9 ff ff    	push   DWORD PTR [ebp-0x6a8]
   17243:	ff b5 54 f9 ff ff    	push   DWORD PTR [ebp-0x6ac]
   17249:	ff b5 50 f9 ff ff    	push   DWORD PTR [ebp-0x6b0]
   1724f:	56                   	push   esi
   17250:	53                   	push   ebx
   17251:	51                   	push   ecx
   17252:	52                   	push   edx
   17253:	50                   	push   eax
   17254:	68 cc 28 08 00       	push   0x828cc
   17259:	e8 a9 02 01 00       	call   27507 <printk>
   1725e:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/block/pci.c:366
            node->interrupt_line, node->interrupt_pin, 
            node->vendor, node->device, 
            node->class, node->subClass,
            node->subordinateBusNum, node->primaryBusNum, kPCIBridgeHeaders->secondaryBusNum);

    getVendorLongName(node->vendor, tempString);
   17261:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17264:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   17268:	0f b7 c0             	movzx  eax,ax
   1726b:	83 ec 08             	sub    esp,0x8
   1726e:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   17274:	52                   	push   edx
   17275:	50                   	push   eax
   17276:	e8 70 f7 ff ff       	call   169eb <getVendorLongName>
   1727b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:367
    printk("Vendor: %s\t",tempString);
   1727e:	83 ec 08             	sub    esp,0x8
   17281:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17287:	50                   	push   eax
   17288:	68 10 29 08 00       	push   0x82910
   1728d:	e8 75 02 01 00       	call   27507 <printk>
   17292:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:368
    getDeviceName(node->vendor, node->device, tempString);
   17295:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17298:	0f b7 40 07          	movzx  eax,WORD PTR [eax+0x7]
   1729c:	0f b7 d0             	movzx  edx,ax
   1729f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   172a2:	0f b7 40 05          	movzx  eax,WORD PTR [eax+0x5]
   172a6:	0f b7 c0             	movzx  eax,ax
   172a9:	83 ec 04             	sub    esp,0x4
   172ac:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   172b2:	51                   	push   ecx
   172b3:	52                   	push   edx
   172b4:	50                   	push   eax
   172b5:	e8 a7 f7 ff ff       	call   16a61 <getDeviceName>
   172ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:369
    printk("Device: %s\n",tempString);
   172bd:	83 ec 08             	sub    esp,0x8
   172c0:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   172c6:	50                   	push   eax
   172c7:	68 1c 29 08 00       	push   0x8291c
   172cc:	e8 36 02 01 00       	call   27507 <printk>
   172d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:370
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   172d4:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   172da:	50                   	push   eax
   172db:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   172e1:	50                   	push   eax
   172e2:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   172e8:	50                   	push   eax
   172e9:	68 28 29 08 00       	push   0x82928
   172ee:	e8 14 02 01 00       	call   27507 <printk>
   172f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:371
    printk("Base addresses:\n");
   172f6:	83 ec 0c             	sub    esp,0xc
   172f9:	68 49 29 08 00       	push   0x82949
   172fe:	e8 04 02 01 00       	call   27507 <printk>
   17303:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372
    for (int cnt=0;cnt<2;cnt++)
   17306:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1730d:	eb 25                	jmp    17334 <printPCIBridgeHeader+0x202>
/home/yogi/src/os/chrisOS/src/block/pci.c:373 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   1730f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17312:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   17315:	83 c2 04             	add    edx,0x4
   17318:	8b 44 90 02          	mov    eax,DWORD PTR [eax+edx*4+0x2]
   1731c:	83 ec 04             	sub    esp,0x4
   1731f:	50                   	push   eax
   17320:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17323:	68 5a 29 08 00       	push   0x8295a
   17328:	e8 da 01 01 00       	call   27507 <printk>
   1732d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<2;cnt++)
   17330:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:372 (discriminator 1)
   17334:	83 7d e4 01          	cmp    DWORD PTR [ebp-0x1c],0x1
   17338:	7e d5                	jle    1730f <printPCIBridgeHeader+0x1dd>
/home/yogi/src/os/chrisOS/src/block/pci.c:374
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("IO Base: 0x%04X\tIO Limit: 0x%04X\n",node->ioBase,node->ioLimit);
   1733a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1733d:	8b 50 1e             	mov    edx,DWORD PTR [eax+0x1e]
   17340:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17343:	8b 40 22             	mov    eax,DWORD PTR [eax+0x22]
   17346:	83 ec 04             	sub    esp,0x4
   17349:	52                   	push   edx
   1734a:	50                   	push   eax
   1734b:	68 6c 29 08 00       	push   0x8296c
   17350:	e8 b2 01 01 00       	call   27507 <printk>
   17355:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:375
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   17358:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1735b:	0f b7 40 38          	movzx  eax,WORD PTR [eax+0x38]
   1735f:	0f b7 d0             	movzx  edx,ax
   17362:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17365:	0f b7 40 3a          	movzx  eax,WORD PTR [eax+0x3a]
   17369:	0f b7 c0             	movzx  eax,ax
   1736c:	83 ec 04             	sub    esp,0x4
   1736f:	52                   	push   edx
   17370:	50                   	push   eax
   17371:	68 90 29 08 00       	push   0x82990
   17376:	e8 8c 01 01 00       	call   27507 <printk>
   1737b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:376
}   
   1737e:	90                   	nop
   1737f:	8d 65 f4             	lea    esp,[ebp-0xc]
   17382:	5b                   	pop    ebx
   17383:	5e                   	pop    esi
   17384:	5f                   	pop    edi
   17385:	5d                   	pop    ebp
   17386:	c3                   	ret    

00017387 <printPCIHeader>:
printPCIHeader():
/home/yogi/src/os/chrisOS/src/block/pci.c:379

void printPCIHeader(struct pci_device_t* node)
{
   17387:	55                   	push   ebp
   17388:	89 e5                	mov    ebp,esp
   1738a:	57                   	push   edi
   1738b:	56                   	push   esi
   1738c:	53                   	push   ebx
   1738d:	81 ec 9c 06 00 00    	sub    esp,0x69c
/home/yogi/src/os/chrisOS/src/block/pci.c:382
    char baseClassDesc[500], subClassDesc[500], progDesc[500];
    char tempString[150];
    getClass(node->class, node->subClass, baseClassDesc, subClassDesc, progDesc);
   17393:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17396:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   17399:	0f b6 d0             	movzx  edx,al
   1739c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1739f:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   173a2:	0f b6 c0             	movzx  eax,al
   173a5:	83 ec 0c             	sub    esp,0xc
   173a8:	8d 8d 08 fa ff ff    	lea    ecx,[ebp-0x5f8]
   173ae:	51                   	push   ecx
   173af:	8d 8d fc fb ff ff    	lea    ecx,[ebp-0x404]
   173b5:	51                   	push   ecx
   173b6:	8d 8d f0 fd ff ff    	lea    ecx,[ebp-0x210]
   173bc:	51                   	push   ecx
   173bd:	52                   	push   edx
   173be:	50                   	push   eax
   173bf:	e8 59 f7 ff ff       	call   16b1d <getClass>
   173c4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:386
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
   173c7:	83 ec 0c             	sub    esp,0xc
   173ca:	68 b1 29 08 00       	push   0x829b1
   173cf:	e8 33 01 01 00       	call   27507 <printk>
   173d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:387
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
   173d7:	83 ec 0c             	sub    esp,0xc
   173da:	68 a8 26 08 00       	push   0x826a8
   173df:	e8 23 01 01 00       	call   27507 <printk>
   173e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:388
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   173e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173ea:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   173ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173f0:	8b 70 10             	mov    esi,DWORD PTR [eax+0x10]
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   173f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   173f6:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   173fa:	0f b7 c0             	movzx  eax,ax
   173fd:	89 85 64 f9 ff ff    	mov    DWORD PTR [ebp-0x69c],eax
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17403:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17406:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1740a:	0f b7 f8             	movzx  edi,ax
   1740d:	89 bd 60 f9 ff ff    	mov    DWORD PTR [ebp-0x6a0],edi
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17416:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1741a:	0f b6 c8             	movzx  ecx,al
   1741d:	89 8d 5c f9 ff ff    	mov    DWORD PTR [ebp-0x6a4],ecx
/home/yogi/src/os/chrisOS/src/block/pci.c:389
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
   17423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17426:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
/home/yogi/src/os/chrisOS/src/block/pci.c:388
//    printk("%04X:%04X:%04X\t0x%08X %s\t%02X:%02X:%02X\t%s\n", 
//        currBus, currSlot, currFunc, node->headerType, node->multiFunction?"yes":"no ", 
//        node->class, node->subClass, node->prog, subClassDesc );
    printk("Device:\n");
    printk("Bu:Sl:Fu\tIRQ/Pin VEND/DEVC CLS/SUB SUBN PBN/SBN\tDeviceName\n");
    printk("%02X:%02X:%02X\t%02X / %02X %04X/%04X  %02X/%02X \t\t\t\n",node->busNo, node->deviceNo, node->funcNo, 
   1742a:	0f b6 f8             	movzx  edi,al
   1742d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17430:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   17434:	0f b6 c8             	movzx  ecx,al
   17437:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1743a:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1743e:	0f b6 d0             	movzx  edx,al
   17441:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17444:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   17447:	0f b6 c0             	movzx  eax,al
   1744a:	83 ec 08             	sub    esp,0x8
   1744d:	53                   	push   ebx
   1744e:	56                   	push   esi
   1744f:	ff b5 64 f9 ff ff    	push   DWORD PTR [ebp-0x69c]
   17455:	ff b5 60 f9 ff ff    	push   DWORD PTR [ebp-0x6a0]
   1745b:	ff b5 5c f9 ff ff    	push   DWORD PTR [ebp-0x6a4]
   17461:	57                   	push   edi
   17462:	51                   	push   ecx
   17463:	52                   	push   edx
   17464:	50                   	push   eax
   17465:	68 bc 29 08 00       	push   0x829bc
   1746a:	e8 98 00 01 00       	call   27507 <printk>
   1746f:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:391
                node->interrupt_line, node->interrupt_pin, node->vendor, node->device, node->class, 
                node->subClass);
    getVendorLongName(node->vendor, tempString);
   17472:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17475:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   17479:	0f b7 c0             	movzx  eax,ax
   1747c:	83 ec 08             	sub    esp,0x8
   1747f:	8d 95 72 f9 ff ff    	lea    edx,[ebp-0x68e]
   17485:	52                   	push   edx
   17486:	50                   	push   eax
   17487:	e8 5f f5 ff ff       	call   169eb <getVendorLongName>
   1748c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:392
    printk("Vendor: %s\t",tempString);
   1748f:	83 ec 08             	sub    esp,0x8
   17492:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   17498:	50                   	push   eax
   17499:	68 10 29 08 00       	push   0x82910
   1749e:	e8 64 00 01 00       	call   27507 <printk>
   174a3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:393
    getDeviceName(node->vendor, node->device, tempString);
   174a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   174a9:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   174ad:	0f b7 d0             	movzx  edx,ax
   174b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   174b3:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   174b7:	0f b7 c0             	movzx  eax,ax
   174ba:	83 ec 04             	sub    esp,0x4
   174bd:	8d 8d 72 f9 ff ff    	lea    ecx,[ebp-0x68e]
   174c3:	51                   	push   ecx
   174c4:	52                   	push   edx
   174c5:	50                   	push   eax
   174c6:	e8 96 f5 ff ff       	call   16a61 <getDeviceName>
   174cb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:394
    printk("Device: %s\n",tempString);
   174ce:	83 ec 08             	sub    esp,0x8
   174d1:	8d 85 72 f9 ff ff    	lea    eax,[ebp-0x68e]
   174d7:	50                   	push   eax
   174d8:	68 1c 29 08 00       	push   0x8291c
   174dd:	e8 25 00 01 00       	call   27507 <printk>
   174e2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:395
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
   174e5:	8d 85 08 fa ff ff    	lea    eax,[ebp-0x5f8]
   174eb:	50                   	push   eax
   174ec:	8d 85 fc fb ff ff    	lea    eax,[ebp-0x404]
   174f2:	50                   	push   eax
   174f3:	8d 85 f0 fd ff ff    	lea    eax,[ebp-0x210]
   174f9:	50                   	push   eax
   174fa:	68 28 29 08 00       	push   0x82928
   174ff:	e8 03 00 01 00       	call   27507 <printk>
   17504:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:396
    printk("Base addresses:\n");
   17507:	83 ec 0c             	sub    esp,0xc
   1750a:	68 49 29 08 00       	push   0x82949
   1750f:	e8 f3 ff 00 00       	call   27507 <printk>
   17514:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397
    for (int cnt=0;cnt<6;cnt++)
   17517:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   1751e:	eb 24                	jmp    17544 <printPCIHeader+0x1bd>
/home/yogi/src/os/chrisOS/src/block/pci.c:398 (discriminator 3)
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
   17520:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17523:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   17526:	83 c2 08             	add    edx,0x8
   17529:	8b 04 90             	mov    eax,DWORD PTR [eax+edx*4]
   1752c:	83 ec 04             	sub    esp,0x4
   1752f:	50                   	push   eax
   17530:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17533:	68 5a 29 08 00       	push   0x8295a
   17538:	e8 ca ff 00 00       	call   27507 <printk>
   1753d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 3)
    printk("Vendor: %s\t",tempString);
    getDeviceName(node->vendor, node->device, tempString);
    printk("Device: %s\n",tempString);
    printk("Class: %s\tSubClass: %s\nProg: %s\n",baseClassDesc,subClassDesc,progDesc);
    printk("Base addresses:\n");
    for (int cnt=0;cnt<6;cnt++)
   17540:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:397 (discriminator 1)
   17544:	83 7d e4 05          	cmp    DWORD PTR [ebp-0x1c],0x5
   17548:	7e d6                	jle    17520 <printPCIHeader+0x199>
/home/yogi/src/os/chrisOS/src/block/pci.c:399
        printk("\tBAR%u: 0x%08X\n", cnt, node->baseAdd[cnt]);
    printk("Subsystem: %04X\tSubsys Vendor: %04X\n",node->subdevice,node->subvendor);
   1754a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1754d:	0f b7 40 0a          	movzx  eax,WORD PTR [eax+0xa]
   17551:	0f b7 d0             	movzx  edx,ax
   17554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17557:	0f b7 40 0c          	movzx  eax,WORD PTR [eax+0xc]
   1755b:	0f b7 c0             	movzx  eax,ax
   1755e:	83 ec 04             	sub    esp,0x4
   17561:	52                   	push   edx
   17562:	50                   	push   eax
   17563:	68 f4 29 08 00       	push   0x829f4
   17568:	e8 9a ff 00 00       	call   27507 <printk>
   1756d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:400
    printk("Command: 0x%04X, Status: 0x%04X\n",node->command,node->status);
   17570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17573:	0f b7 40 4a          	movzx  eax,WORD PTR [eax+0x4a]
   17577:	0f b7 d0             	movzx  edx,ax
   1757a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1757d:	0f b7 40 4c          	movzx  eax,WORD PTR [eax+0x4c]
   17581:	0f b7 c0             	movzx  eax,ax
   17584:	83 ec 04             	sub    esp,0x4
   17587:	52                   	push   edx
   17588:	50                   	push   eax
   17589:	68 90 29 08 00       	push   0x82990
   1758e:	e8 74 ff 00 00       	call   27507 <printk>
   17593:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:401
    printk("Interrupt Pin/Line: 0x%04X/0x%04X\n",node->interrupt_pin,node->interrupt_line);
   17596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17599:	0f b6 40 3d          	movzx  eax,BYTE PTR [eax+0x3d]
   1759d:	0f b6 d0             	movzx  edx,al
   175a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175a3:	0f b6 40 3e          	movzx  eax,BYTE PTR [eax+0x3e]
   175a7:	0f b6 c0             	movzx  eax,al
   175aa:	83 ec 04             	sub    esp,0x4
   175ad:	52                   	push   edx
   175ae:	50                   	push   eax
   175af:	68 1c 2a 08 00       	push   0x82a1c
   175b4:	e8 4e ff 00 00       	call   27507 <printk>
   175b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:402
}
   175bc:	90                   	nop
   175bd:	8d 65 f4             	lea    esp,[ebp-0xc]
   175c0:	5b                   	pop    ebx
   175c1:	5e                   	pop    esi
   175c2:	5f                   	pop    edi
   175c3:	5d                   	pop    ebp
   175c4:	c3                   	ret    

000175c5 <addFunction>:
addFunction():
/home/yogi/src/os/chrisOS/src/block/pci.c:404
void addFunction(struct pci_device_t* node)
{
   175c5:	55                   	push   ebp
   175c6:	89 e5                	mov    ebp,esp
   175c8:	53                   	push   ebx
   175c9:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/block/pci.c:405
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFound function: deviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", node->device, node->vendor, node->class, node->subClass);
   175cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175cf:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   175d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175d5:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   175d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175db:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   175df:	0f b7 d0             	movzx  edx,ax
   175e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   175e5:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   175e9:	0f b7 c0             	movzx  eax,ax
   175ec:	83 ec 08             	sub    esp,0x8
   175ef:	53                   	push   ebx
   175f0:	51                   	push   ecx
   175f1:	52                   	push   edx
   175f2:	50                   	push   eax
   175f3:	68 40 2a 08 00       	push   0x82a40
   175f8:	68 00 01 00 00       	push   0x100
   175fd:	e8 25 ff 00 00       	call   27527 <printd>
   17602:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:406
    memcpy(&kPCIDeviceFunctions[kPCIFunctionCount++],node,sizeof(struct pci_bridge_t));
   17605:	8b 0d fc 47 12 00    	mov    ecx,DWORD PTR ds:0x1247fc
   1760b:	0f b6 05 ee 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ee
   17612:	8d 50 01             	lea    edx,[eax+0x1]
   17615:	88 15 ee 47 12 00    	mov    BYTE PTR ds:0x1247ee,dl
   1761b:	0f b6 d0             	movzx  edx,al
   1761e:	89 d0                	mov    eax,edx
   17620:	c1 e0 02             	shl    eax,0x2
   17623:	01 d0                	add    eax,edx
   17625:	c1 e0 04             	shl    eax,0x4
   17628:	01 c8                	add    eax,ecx
   1762a:	83 ec 04             	sub    esp,0x4
   1762d:	6a 4e                	push   0x4e
   1762f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17632:	50                   	push   eax
   17633:	e8 34 e8 00 00       	call   25e6c <memcpy>
   17638:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:407
    printd(DEBUG_PCI_DISCOVERY,"\t\t\t\tFunction entry created\n");
   1763b:	83 ec 08             	sub    esp,0x8
   1763e:	68 95 2a 08 00       	push   0x82a95
   17643:	68 00 01 00 00       	push   0x100
   17648:	e8 da fe 00 00       	call   27527 <printd>
   1764d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:408
}
   17650:	90                   	nop
   17651:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17654:	c9                   	leave  
   17655:	c3                   	ret    

00017656 <addBridge>:
addBridge():
/home/yogi/src/os/chrisOS/src/block/pci.c:410
void addBridge(struct pci_device_t* node, uint8_t bus, uint8_t device, uint8_t function)
{
   17656:	55                   	push   ebp
   17657:	89 e5                	mov    ebp,esp
   17659:	57                   	push   edi
   1765a:	56                   	push   esi
   1765b:	53                   	push   ebx
   1765c:	81 ec cc 00 00 00    	sub    esp,0xcc
   17662:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   17665:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   17668:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1766b:	88 8d 44 ff ff ff    	mov    BYTE PTR [ebp-0xbc],cl
   17671:	88 95 40 ff ff ff    	mov    BYTE PTR [ebp-0xc0],dl
   17677:	88 85 3c ff ff ff    	mov    BYTE PTR [ebp-0xc4],al
/home/yogi/src/os/chrisOS/src/block/pci.c:414
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
   1767d:	0f b6 8d 3c ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc4]
   17684:	0f b6 95 40 ff ff ff 	movzx  edx,BYTE PTR [ebp-0xc0]
   1768b:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   17692:	51                   	push   ecx
   17693:	52                   	push   edx
   17694:	50                   	push   eax
   17695:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   1769b:	50                   	push   eax
   1769c:	e8 49 f7 ff ff       	call   16dea <getBridgeHeader>
   176a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:415
    if (bridge.vendor==0xFFFF)
   176a4:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   176ab:	66 83 f8 ff          	cmp    ax,0xffff
   176af:	0f 84 0e 01 00 00    	je     177c3 <addBridge+0x16d>
/home/yogi/src/os/chrisOS/src/block/pci.c:418
        return;
    //         bridge.busNo=bus;bridge.deviceNo=device;bridge.funcNo=function;
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tFound bridge on %02X:%02X:%02X,Cls#%02XpBus#%02X,sBus#%02X,suBus# %02X,MF=%u\n",bus, device, function, bridge.class, bridge.primaryBusNum, bridge.secondaryBusNum, bridge.subordinateBusNum, bridge.multiFunction);
   176b5:	0f b6 85 4e ff ff ff 	movzx  eax,BYTE PTR [ebp-0xb2]
   176bc:	0f b6 d0             	movzx  edx,al
   176bf:	0f b6 85 72 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8e]
   176c6:	0f b6 c0             	movzx  eax,al
   176c9:	89 85 38 ff ff ff    	mov    DWORD PTR [ebp-0xc8],eax
   176cf:	0f b6 85 70 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x90]
   176d6:	0f b6 f0             	movzx  esi,al
   176d9:	89 b5 34 ff ff ff    	mov    DWORD PTR [ebp-0xcc],esi
   176df:	0f b6 85 71 ff ff ff 	movzx  eax,BYTE PTR [ebp-0x8f]
   176e6:	0f b6 f8             	movzx  edi,al
   176e9:	8b b5 53 ff ff ff    	mov    esi,DWORD PTR [ebp-0xad]
   176ef:	0f b6 9d 3c ff ff ff 	movzx  ebx,BYTE PTR [ebp-0xc4]
   176f6:	0f b6 8d 40 ff ff ff 	movzx  ecx,BYTE PTR [ebp-0xc0]
   176fd:	0f b6 85 44 ff ff ff 	movzx  eax,BYTE PTR [ebp-0xbc]
   17704:	83 ec 08             	sub    esp,0x8
   17707:	52                   	push   edx
   17708:	ff b5 38 ff ff ff    	push   DWORD PTR [ebp-0xc8]
   1770e:	ff b5 34 ff ff ff    	push   DWORD PTR [ebp-0xcc]
   17714:	57                   	push   edi
   17715:	56                   	push   esi
   17716:	53                   	push   ebx
   17717:	51                   	push   ecx
   17718:	50                   	push   eax
   17719:	68 b4 2a 08 00       	push   0x82ab4
   1771e:	68 00 01 00 00       	push   0x100
   17723:	e8 ff fd 00 00       	call   27527 <printd>
   17728:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:419
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tdeviceID: %04X, vendorID: %04X, class: %04X, subclass %04X:%04X\n", bridge.device, bridge.vendor, bridge.class, bridge.subClass);
   1772b:	8b 9d 57 ff ff ff    	mov    ebx,DWORD PTR [ebp-0xa9]
   17731:	8b 8d 53 ff ff ff    	mov    ecx,DWORD PTR [ebp-0xad]
   17737:	0f b7 85 4f ff ff ff 	movzx  eax,WORD PTR [ebp-0xb1]
   1773e:	0f b7 d0             	movzx  edx,ax
   17741:	0f b7 85 51 ff ff ff 	movzx  eax,WORD PTR [ebp-0xaf]
   17748:	0f b7 c0             	movzx  eax,ax
   1774b:	83 ec 08             	sub    esp,0x8
   1774e:	53                   	push   ebx
   1774f:	51                   	push   ecx
   17750:	52                   	push   edx
   17751:	50                   	push   eax
   17752:	68 08 2b 08 00       	push   0x82b08
   17757:	68 00 01 00 00       	push   0x100
   1775c:	e8 c6 fd 00 00       	call   27527 <printd>
   17761:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/block/pci.c:420
    memcpy(&kPCIBridgeHeaders[kPCIBridgeCount++],&bridge,sizeof(struct pci_bridge_t));
   17764:	8b 0d f8 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f8
   1776a:	0f b6 05 ed 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ed
   17771:	8d 50 01             	lea    edx,[eax+0x1]
   17774:	88 15 ed 47 12 00    	mov    BYTE PTR ds:0x1247ed,dl
   1777a:	0f b6 c0             	movzx  eax,al
   1777d:	6b c0 4e             	imul   eax,eax,0x4e
   17780:	8d 14 01             	lea    edx,[ecx+eax*1]
   17783:	83 ec 04             	sub    esp,0x4
   17786:	6a 4e                	push   0x4e
   17788:	8d 85 4a ff ff ff    	lea    eax,[ebp-0xb6]
   1778e:	50                   	push   eax
   1778f:	52                   	push   edx
   17790:	e8 d7 e6 00 00       	call   25e6c <memcpy>
   17795:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:421
    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17798:	83 ec 04             	sub    esp,0x4
   1779b:	6a 50                	push   0x50
   1779d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   177a0:	8d 45 98             	lea    eax,[ebp-0x68]
   177a3:	50                   	push   eax
   177a4:	e8 c3 e6 00 00       	call   25e6c <memcpy>
   177a9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:422
    printd(DEBUG_PCI_DISCOVERY,"\t\t\tbridge entry created\n");
   177ac:	83 ec 08             	sub    esp,0x8
   177af:	68 4c 2b 08 00       	push   0x82b4c
   177b4:	68 00 01 00 00       	push   0x100
   177b9:	e8 69 fd 00 00       	call   27527 <printd>
   177be:	83 c4 10             	add    esp,0x10
   177c1:	eb 01                	jmp    177c4 <addBridge+0x16e>
/home/yogi/src/os/chrisOS/src/block/pci.c:416
    struct pci_device_t newNode;
    struct pci_bridge_t bridge;
    //int lastSubBridgeNum=0;
    getBridgeHeader(&bridge, bus, device, function);
    if (bridge.vendor==0xFFFF)
        return;
   177c3:	90                   	nop
/home/yogi/src/os/chrisOS/src/block/pci.c:438
//       checkBus(&newNode, bridge.secondaryBusNum);
//#ifndef DEBUG_NONE
//       printd(DEBUG_PCI_DISCOVERY,"Done checking bus %02X\n",bridge.secondaryBusNum);
//#endif
    }
}
   177c4:	8d 65 f4             	lea    esp,[ebp-0xc]
   177c7:	5b                   	pop    ebx
   177c8:	5e                   	pop    esi
   177c9:	5f                   	pop    edi
   177ca:	5d                   	pop    ebp
   177cb:	c3                   	ret    

000177cc <checkFunctions>:
checkFunctions():
/home/yogi/src/os/chrisOS/src/block/pci.c:440

void checkFunctions(uint8_t bus, uint8_t device) {
   177cc:	55                   	push   ebp
   177cd:	89 e5                	mov    ebp,esp
   177cf:	83 ec 78             	sub    esp,0x78
   177d2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   177d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   177d8:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   177db:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:443
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   177de:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   177e5:	eb 4e                	jmp    17835 <checkFunctions+0x69>
/home/yogi/src/os/chrisOS/src/block/pci.c:445
    {
        getDeviceHeader(&funcDevice, bus, device, function);
   177e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   177ea:	0f b6 c8             	movzx  ecx,al
   177ed:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   177f1:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   177f5:	51                   	push   ecx
   177f6:	52                   	push   edx
   177f7:	50                   	push   eax
   177f8:	8d 45 a4             	lea    eax,[ebp-0x5c]
   177fb:	50                   	push   eax
   177fc:	e8 03 f4 ff ff       	call   16c04 <getDeviceHeader>
   17801:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:446
        if (funcDevice.vendor!=0xFFFF)
   17804:	0f b7 45 aa          	movzx  eax,WORD PTR [ebp-0x56]
   17808:	66 83 f8 ff          	cmp    ax,0xffff
   1780c:	74 23                	je     17831 <checkFunctions+0x65>
/home/yogi/src/os/chrisOS/src/block/pci.c:448
        {
            funcDevice.busNo=bus;
   1780e:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17812:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:449
            funcDevice.deviceNo=device;
   17815:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   17819:	88 45 a5             	mov    BYTE PTR [ebp-0x5b],al
/home/yogi/src/os/chrisOS/src/block/pci.c:450
            funcDevice.funcNo=function;
   1781c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1781f:	88 45 a6             	mov    BYTE PTR [ebp-0x5a],al
/home/yogi/src/os/chrisOS/src/block/pci.c:451
            addFunction(&funcDevice);
   17822:	83 ec 0c             	sub    esp,0xc
   17825:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17828:	50                   	push   eax
   17829:	e8 97 fd ff ff       	call   175c5 <addFunction>
   1782e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 2)
}

void checkFunctions(uint8_t bus, uint8_t device) {
    struct pci_device_t funcDevice;

    for (int function=0;function<8;function++)
   17831:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/block/pci.c:443 (discriminator 1)
   17835:	83 7d f4 07          	cmp    DWORD PTR [ebp-0xc],0x7
   17839:	7e ac                	jle    177e7 <checkFunctions+0x1b>
/home/yogi/src/os/chrisOS/src/block/pci.c:455
            funcDevice.funcNo=function;
            addFunction(&funcDevice);
        }
    }

 }
   1783b:	90                   	nop
   1783c:	c9                   	leave  
   1783d:	c3                   	ret    

0001783e <addDevice>:
addDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:458

void addDevice(struct pci_device_t* node)
{
   1783e:	55                   	push   ebp
   1783f:	89 e5                	mov    ebp,esp
   17841:	57                   	push   edi
   17842:	56                   	push   esi
   17843:	53                   	push   ebx
   17844:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/block/pci.c:460
#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\tFound device #%u on %02X:%02X:0, Ven# %04X Dev# %04X Cls# %02X MF=%u\n",kPCIDeviceCount, node->busNo, node->deviceNo, node->vendor, node->device, node->class, node->multiFunction);
   17847:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1784a:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1784e:	0f b6 c0             	movzx  eax,al
   17851:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   17854:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17857:	8b 78 10             	mov    edi,DWORD PTR [eax+0x10]
   1785a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1785d:	0f b7 40 08          	movzx  eax,WORD PTR [eax+0x8]
   17861:	0f b7 f0             	movzx  esi,ax
   17864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17867:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   1786b:	0f b7 d8             	movzx  ebx,ax
   1786e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17871:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   17875:	0f b6 c8             	movzx  ecx,al
   17878:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1787b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1787e:	0f b6 d0             	movzx  edx,al
   17881:	0f b6 05 ec 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ec
   17888:	0f b6 c0             	movzx  eax,al
   1788b:	83 ec 0c             	sub    esp,0xc
   1788e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   17891:	57                   	push   edi
   17892:	56                   	push   esi
   17893:	53                   	push   ebx
   17894:	51                   	push   ecx
   17895:	52                   	push   edx
   17896:	50                   	push   eax
   17897:	68 68 2b 08 00       	push   0x82b68
   1789c:	68 00 01 00 00       	push   0x100
   178a1:	e8 81 fc 00 00       	call   27527 <printd>
   178a6:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/block/pci.c:462
#endif
    memcpy(&kPCIDeviceHeaders[kPCIDeviceCount++],node,sizeof(struct pci_device_t));
   178a9:	8b 0d f4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247f4
   178af:	0f b6 05 ec 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ec
   178b6:	8d 50 01             	lea    edx,[eax+0x1]
   178b9:	88 15 ec 47 12 00    	mov    BYTE PTR ds:0x1247ec,dl
   178bf:	0f b6 d0             	movzx  edx,al
   178c2:	89 d0                	mov    eax,edx
   178c4:	c1 e0 02             	shl    eax,0x2
   178c7:	01 d0                	add    eax,edx
   178c9:	c1 e0 04             	shl    eax,0x4
   178cc:	01 c8                	add    eax,ecx
   178ce:	83 ec 04             	sub    esp,0x4
   178d1:	6a 50                	push   0x50
   178d3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   178d6:	50                   	push   eax
   178d7:	e8 90 e5 00 00       	call   25e6c <memcpy>
   178dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:463
    printd(DEBUG_PCI_DISCOVERY,"\tdevice entry created\n");
   178df:	83 ec 08             	sub    esp,0x8
   178e2:	68 af 2b 08 00       	push   0x82baf
   178e7:	68 00 01 00 00       	push   0x100
   178ec:	e8 36 fc 00 00       	call   27527 <printd>
   178f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:464
}
   178f4:	90                   	nop
   178f5:	8d 65 f4             	lea    esp,[ebp-0xc]
   178f8:	5b                   	pop    ebx
   178f9:	5e                   	pop    esi
   178fa:	5f                   	pop    edi
   178fb:	5d                   	pop    ebp
   178fc:	c3                   	ret    

000178fd <checkDevice>:
checkDevice():
/home/yogi/src/os/chrisOS/src/block/pci.c:467

bool checkDevice(struct pci_device_t* node, uint8_t bus, uint8_t device)
{
   178fd:	55                   	push   ebp
   178fe:	89 e5                	mov    ebp,esp
   17900:	83 ec 78             	sub    esp,0x78
   17903:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   17906:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17909:	88 55 94             	mov    BYTE PTR [ebp-0x6c],dl
   1790c:	88 45 90             	mov    BYTE PTR [ebp-0x70],al
/home/yogi/src/os/chrisOS/src/block/pci.c:468
    int func=0;
   1790f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:471
    struct pci_device_t newNode;

    memcpy(&newNode,node,sizeof(struct pci_device_t));
   17916:	83 ec 04             	sub    esp,0x4
   17919:	6a 50                	push   0x50
   1791b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1791e:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17921:	50                   	push   eax
   17922:	e8 45 e5 00 00       	call   25e6c <memcpy>
   17927:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:472
    if (getDeviceHeader(&newNode, bus, device, 0))
   1792a:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   1792e:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   17932:	6a 00                	push   0x0
   17934:	52                   	push   edx
   17935:	50                   	push   eax
   17936:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17939:	50                   	push   eax
   1793a:	e8 c5 f2 ff ff       	call   16c04 <getDeviceHeader>
   1793f:	83 c4 10             	add    esp,0x10
   17942:	84 c0                	test   al,al
   17944:	74 6c                	je     179b2 <checkDevice+0xb5>
/home/yogi/src/os/chrisOS/src/block/pci.c:474
    {
        if (newNode.class!=6)
   17946:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   17949:	83 f8 06             	cmp    eax,0x6
   1794c:	74 11                	je     1795f <checkDevice+0x62>
/home/yogi/src/os/chrisOS/src/block/pci.c:476
        {
            addDevice(&newNode);
   1794e:	83 ec 0c             	sub    esp,0xc
   17951:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17954:	50                   	push   eax
   17955:	e8 e4 fe ff ff       	call   1783e <addDevice>
   1795a:	83 c4 10             	add    esp,0x10
   1795d:	eb 1d                	jmp    1797c <checkDevice+0x7f>
/home/yogi/src/os/chrisOS/src/block/pci.c:480
        }
        else
        {
            addBridge(&newNode, bus, device,func);
   1795f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17962:	0f b6 c8             	movzx  ecx,al
   17965:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   17969:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   1796d:	51                   	push   ecx
   1796e:	52                   	push   edx
   1796f:	50                   	push   eax
   17970:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17973:	50                   	push   eax
   17974:	e8 dd fc ff ff       	call   17656 <addBridge>
   17979:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:483
        }
#ifndef DEBUG_NONE
        printd(DEBUG_PCI_DISCOVERY,"\tChecking functions\n",device);
   1797c:	0f b6 45 90          	movzx  eax,BYTE PTR [ebp-0x70]
   17980:	83 ec 04             	sub    esp,0x4
   17983:	50                   	push   eax
   17984:	68 c6 2b 08 00       	push   0x82bc6
   17989:	68 00 01 00 00       	push   0x100
   1798e:	e8 94 fb 00 00       	call   27527 <printd>
   17993:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:485
#endif
        checkFunctions(bus, device);
   17996:	0f b6 55 90          	movzx  edx,BYTE PTR [ebp-0x70]
   1799a:	0f b6 45 94          	movzx  eax,BYTE PTR [ebp-0x6c]
   1799e:	83 ec 08             	sub    esp,0x8
   179a1:	52                   	push   edx
   179a2:	50                   	push   eax
   179a3:	e8 24 fe ff ff       	call   177cc <checkFunctions>
   179a8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:486
        return true;
   179ab:	b8 01 00 00 00       	mov    eax,0x1
   179b0:	eb 05                	jmp    179b7 <checkDevice+0xba>
/home/yogi/src/os/chrisOS/src/block/pci.c:488
    }
    return false;
   179b2:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:489 (discriminator 1)
}
   179b7:	c9                   	leave  
   179b8:	c3                   	ret    

000179b9 <checkBus>:
checkBus():
/home/yogi/src/os/chrisOS/src/block/pci.c:491

void checkBus(struct pci_device_t* node, uint8_t bus) {
   179b9:	55                   	push   ebp
   179ba:	89 e5                	mov    ebp,esp
   179bc:	83 ec 28             	sub    esp,0x28
   179bf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   179c2:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/block/pci.c:495
 uint8_t device;

#ifndef DEBUG_NONE
    printd(DEBUG_PCI_DISCOVERY,"\n");
   179c5:	83 ec 08             	sub    esp,0x8
   179c8:	68 db 2b 08 00       	push   0x82bdb
   179cd:	68 00 01 00 00       	push   0x100
   179d2:	e8 50 fb 00 00       	call   27527 <printd>
   179d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:496
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
   179da:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   179de:	83 ec 04             	sub    esp,0x4
   179e1:	50                   	push   eax
   179e2:	68 dd 2b 08 00       	push   0x82bdd
   179e7:	68 00 01 00 00       	push   0x100
   179ec:	e8 36 fb 00 00       	call   27527 <printd>
   179f1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   179f4:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   179f8:	eb 22                	jmp    17a1c <checkBus+0x63>
/home/yogi/src/os/chrisOS/src/block/pci.c:508 (discriminator 2)
        if ((kDebugLevel & DEBUG_PCI_DISCOVERY) == DEBUG_PCI_DISCOVERY)
        {
            //waitForKeyboardKey();
        }
#endif
        checkDevice(node, bus, device);
   179fa:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   179fe:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   17a02:	83 ec 04             	sub    esp,0x4
   17a05:	52                   	push   edx
   17a06:	50                   	push   eax
   17a07:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   17a0a:	e8 ee fe ff ff       	call   178fd <checkDevice>
   17a0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 2)
    printd(DEBUG_PCI_DISCOVERY,"\n");
    printd(DEBUG_PCI_DISCOVERY,"Checking bus %02X\n", bus);
#endif
//    printk("\n");
//    printk("Checking bus %02X\n", bus);
    for(device = 0; device < 32; device++) {
   17a12:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   17a16:	83 c0 01             	add    eax,0x1
   17a19:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/block/pci.c:500 (discriminator 1)
   17a1c:	80 7d f7 1f          	cmp    BYTE PTR [ebp-0x9],0x1f
   17a20:	76 d8                	jbe    179fa <checkBus+0x41>
/home/yogi/src/os/chrisOS/src/block/pci.c:511
        }
#endif
        checkDevice(node, bus, device);
     }
 }
}
   17a22:	90                   	nop
   17a23:	c9                   	leave  
   17a24:	c3                   	ret    

00017a25 <pciInitialize>:
pciInitialize():
/home/yogi/src/os/chrisOS/src/block/pci.c:514
    
 void pciInitialize()
 {
   17a25:	55                   	push   ebp
   17a26:	89 e5                	mov    ebp,esp
   17a28:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/block/pci.c:517
    //Iterate Busses/Slots
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;
   17a2e:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
   17a34:	66 c7 45 f4 00 00    	mov    WORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:519

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
   17a3a:	c6 05 ef 47 12 00 00 	mov    BYTE PTR ds:0x1247ef,0x0
   17a41:	0f b6 05 ef 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ef
   17a48:	a2 ee 47 12 00       	mov    ds:0x1247ee,al
   17a4d:	0f b6 05 ee 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ee
   17a54:	a2 ed 47 12 00       	mov    ds:0x1247ed,al
   17a59:	0f b6 05 ed 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ed
   17a60:	a2 ec 47 12 00       	mov    ds:0x1247ec,al
/home/yogi/src/os/chrisOS/src/block/pci.c:520
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
   17a65:	83 ec 08             	sub    esp,0x8
   17a68:	68 f0 2b 08 00       	push   0x82bf0
   17a6d:	68 00 01 00 00       	push   0x100
   17a72:	e8 b0 fa 00 00       	call   27527 <printd>
   17a77:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:521
     for (currBus=0;currBus<50;currBus++)
   17a7a:	c7 05 98 a4 09 00 00 	mov    DWORD PTR ds:0x9a498,0x0
   17a81:	00 00 00 
   17a84:	e9 cc 01 00 00       	jmp    17c55 <pciInitialize+0x230>
/home/yogi/src/os/chrisOS/src/block/pci.c:523
     {
         for (currSlot=0;currSlot<32;currSlot++)
   17a89:	c7 05 9c a4 09 00 00 	mov    DWORD PTR ds:0x9a49c,0x0
   17a90:	00 00 00 
   17a93:	e9 a2 01 00 00       	jmp    17c3a <pciInitialize+0x215>
/home/yogi/src/os/chrisOS/src/block/pci.c:526
         {
            //if device found print it
            currFunc=0;
   17a98:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   17a9f:	00 00 00 
/home/yogi/src/os/chrisOS/src/block/pci.c:527
            prevDev=0;
   17aa2:	66 c7 45 f6 00 00    	mov    WORD PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/block/pci.c:528
            printd(DEBUG_PCI_DISCOVERY,"Current bus=%u, slot=%u\n",currBus,currSlot);
   17aa8:	8b 15 9c a4 09 00    	mov    edx,DWORD PTR ds:0x9a49c
   17aae:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17ab3:	52                   	push   edx
   17ab4:	50                   	push   eax
   17ab5:	68 0e 2c 08 00       	push   0x82c0e
   17aba:	68 00 01 00 00       	push   0x100
   17abf:	e8 63 fa 00 00       	call   27527 <printd>
   17ac4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:529
            if (getDeviceHeader(&device, currBus, currSlot, currFunc)==true)
   17ac7:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17acc:	0f b6 c8             	movzx  ecx,al
   17acf:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17ad4:	0f b6 d0             	movzx  edx,al
   17ad7:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17adc:	0f b6 c0             	movzx  eax,al
   17adf:	51                   	push   ecx
   17ae0:	52                   	push   edx
   17ae1:	50                   	push   eax
   17ae2:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17ae5:	50                   	push   eax
   17ae6:	e8 19 f1 ff ff       	call   16c04 <getDeviceHeader>
   17aeb:	83 c4 10             	add    esp,0x10
   17aee:	84 c0                	test   al,al
   17af0:	0f 84 37 01 00 00    	je     17c2d <pciInitialize+0x208>
/home/yogi/src/os/chrisOS/src/block/pci.c:531
            {
                if (prevBus!=currBus)
   17af6:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   17afa:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17aff:	39 c2                	cmp    edx,eax
   17b01:	74 18                	je     17b1b <pciInitialize+0xf6>
/home/yogi/src/os/chrisOS/src/block/pci.c:533
                {
                    prevBus=currBus;
   17b03:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17b08:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:534
                    kPCIBusCount++;
   17b0c:	0f b6 05 ef 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ef
   17b13:	83 c0 01             	add    eax,0x1
   17b16:	a2 ef 47 12 00       	mov    ds:0x1247ef,al
/home/yogi/src/os/chrisOS/src/block/pci.c:537
                }
                //printPCIHeader(&device);
                if (device.class==0x06)
   17b1b:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   17b1e:	83 f8 06             	cmp    eax,0x6
   17b21:	75 29                	jne    17b4c <pciInitialize+0x127>
/home/yogi/src/os/chrisOS/src/block/pci.c:539
                {
                    addBridge(&device, currBus, currSlot, currFunc);
   17b23:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17b28:	0f b6 c8             	movzx  ecx,al
   17b2b:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17b30:	0f b6 d0             	movzx  edx,al
   17b33:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17b38:	0f b6 c0             	movzx  eax,al
   17b3b:	51                   	push   ecx
   17b3c:	52                   	push   edx
   17b3d:	50                   	push   eax
   17b3e:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17b41:	50                   	push   eax
   17b42:	e8 0f fb ff ff       	call   17656 <addBridge>
   17b47:	83 c4 10             	add    esp,0x10
   17b4a:	eb 0f                	jmp    17b5b <pciInitialize+0x136>
/home/yogi/src/os/chrisOS/src/block/pci.c:542
                }
                else
                    addDevice(&device);
   17b4c:	83 ec 0c             	sub    esp,0xc
   17b4f:	8d 45 a4             	lea    eax,[ebp-0x5c]
   17b52:	50                   	push   eax
   17b53:	e8 e6 fc ff ff       	call   1783e <addDevice>
   17b58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   17b5b:	c7 05 a0 a4 09 00 00 	mov    DWORD PTR ds:0x9a4a0,0x0
   17b62:	00 00 00 
   17b65:	e9 b5 00 00 00       	jmp    17c1f <pciInitialize+0x1fa>
/home/yogi/src/os/chrisOS/src/block/pci.c:547
                {
                    //printd(DEBUG_PCI_DISCOVERY,"Current function=%u\n",currFunc);
                    getDeviceHeader(&funcDevice, currBus, currSlot, currFunc);
   17b6a:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17b6f:	0f b6 c8             	movzx  ecx,al
   17b72:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17b77:	0f b6 d0             	movzx  edx,al
   17b7a:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17b7f:	0f b6 c0             	movzx  eax,al
   17b82:	51                   	push   ecx
   17b83:	52                   	push   edx
   17b84:	50                   	push   eax
   17b85:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17b8b:	50                   	push   eax
   17b8c:	e8 73 f0 ff ff       	call   16c04 <getDeviceHeader>
   17b91:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:548
                    if (funcDevice.vendor!=0xFFFF)
   17b94:	0f b7 85 5a ff ff ff 	movzx  eax,WORD PTR [ebp-0xa6]
   17b9b:	66 83 f8 ff          	cmp    ax,0xffff
   17b9f:	74 71                	je     17c12 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549
                        if (funcDevice.device != device.device && funcDevice.device != prevDev)
   17ba1:	0f b7 95 5c ff ff ff 	movzx  edx,WORD PTR [ebp-0xa4]
   17ba8:	0f b7 45 ac          	movzx  eax,WORD PTR [ebp-0x54]
   17bac:	66 39 c2             	cmp    dx,ax
   17baf:	74 61                	je     17c12 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:549 (discriminator 1)
   17bb1:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17bb8:	66 3b 45 f6          	cmp    ax,WORD PTR [ebp-0xa]
   17bbc:	74 54                	je     17c12 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:552
                        {
                            //printk("funcDevice=%X, device=%X, prevDev=%X\n",funcDevice.device, device.device, prevDev);
                            prevDev=funcDevice.device;
   17bbe:	0f b7 85 5c ff ff ff 	movzx  eax,WORD PTR [ebp-0xa4]
   17bc5:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/block/pci.c:553
                            if (funcDevice.class == 0x06)
   17bc9:	8b 85 64 ff ff ff    	mov    eax,DWORD PTR [ebp-0x9c]
   17bcf:	83 f8 06             	cmp    eax,0x6
   17bd2:	75 2c                	jne    17c00 <pciInitialize+0x1db>
/home/yogi/src/os/chrisOS/src/block/pci.c:554
                                addBridge(&funcDevice, currBus, currSlot, currFunc);
   17bd4:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17bd9:	0f b6 c8             	movzx  ecx,al
   17bdc:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17be1:	0f b6 d0             	movzx  edx,al
   17be4:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17be9:	0f b6 c0             	movzx  eax,al
   17bec:	51                   	push   ecx
   17bed:	52                   	push   edx
   17bee:	50                   	push   eax
   17bef:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17bf5:	50                   	push   eax
   17bf6:	e8 5b fa ff ff       	call   17656 <addBridge>
   17bfb:	83 c4 10             	add    esp,0x10
   17bfe:	eb 12                	jmp    17c12 <pciInitialize+0x1ed>
/home/yogi/src/os/chrisOS/src/block/pci.c:556
                            else
                                addFunction(&funcDevice);
   17c00:	83 ec 0c             	sub    esp,0xc
   17c03:	8d 85 54 ff ff ff    	lea    eax,[ebp-0xac]
   17c09:	50                   	push   eax
   17c0a:	e8 b6 f9 ff ff       	call   175c5 <addFunction>
   17c0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 2)
                    addBridge(&device, currBus, currSlot, currFunc);
                }
                else
                    addDevice(&device);
  //if found device is multi-function, iterate all of the functions
                for (currFunc=0;currFunc<8;currFunc++)
   17c12:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17c17:	83 c0 01             	add    eax,0x1
   17c1a:	a3 a0 a4 09 00       	mov    ds:0x9a4a0,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:544 (discriminator 1)
   17c1f:	a1 a0 a4 09 00       	mov    eax,ds:0x9a4a0
   17c24:	83 f8 07             	cmp    eax,0x7
   17c27:	0f 8e 3d ff ff ff    	jle    17b6a <pciInitialize+0x145>
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 2)

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
     {
         for (currSlot=0;currSlot<32;currSlot++)
   17c2d:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17c32:	83 c0 01             	add    eax,0x1
   17c35:	a3 9c a4 09 00       	mov    ds:0x9a49c,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:523 (discriminator 1)
   17c3a:	a1 9c a4 09 00       	mov    eax,ds:0x9a49c
   17c3f:	83 f8 1f             	cmp    eax,0x1f
   17c42:	0f 8e 50 fe ff ff    	jle    17a98 <pciInitialize+0x73>
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 2)
     struct pci_device_t device, funcDevice;
     uint16_t prevDev=0,prevBus=0;

     kPCIDeviceCount=kPCIBridgeCount=kPCIFunctionCount=kPCIBusCount=0;
     printd(DEBUG_PCI_DISCOVERY,"Iterating the PCI busses ...\n");
     for (currBus=0;currBus<50;currBus++)
   17c48:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17c4d:	83 c0 01             	add    eax,0x1
   17c50:	a3 98 a4 09 00       	mov    ds:0x9a498,eax
/home/yogi/src/os/chrisOS/src/block/pci.c:521 (discriminator 1)
   17c55:	a1 98 a4 09 00       	mov    eax,ds:0x9a498
   17c5a:	83 f8 31             	cmp    eax,0x31
   17c5d:	0f 8e 26 fe ff ff    	jle    17a89 <pciInitialize+0x64>
/home/yogi/src/os/chrisOS/src/block/pci.c:563
                    }
            }
 
        }
     }
   17c63:	90                   	nop
   17c64:	c9                   	leave  
   17c65:	c3                   	ret    
   17c66:	66 90                	xchg   ax,ax

00017c68 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   17c68:	55                   	push   ebp
   17c69:	89 e5                	mov    ebp,esp
   17c6b:	83 ec 08             	sub    esp,0x8
   17c6e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17c71:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17c74:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   17c78:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   17c7b:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   17c7f:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   17c83:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   17c84:	90                   	nop
   17c85:	c9                   	leave  
   17c86:	c3                   	ret    

00017c87 <update_cursor>:
update_cursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:25
KERNEL_DATA_SECTION uint8_t savedPosY[10];
KERNEL_DATA_SECTION int8_t savedPosPointer=0;
KERNEL_DATA_SECTION uint8_t kTerminalHeight;

void update_cursor()
 {
   17c87:	55                   	push   ebp
   17c88:	89 e5                	mov    ebp,esp
   17c8a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:26
    unsigned short position=(terminal_row*VGA_WIDTH) + terminal_column;
   17c8d:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17c92:	89 c2                	mov    edx,eax
   17c94:	b8 50 00 00 00       	mov    eax,0x50
   17c99:	0f af c2             	imul   eax,edx
   17c9c:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17ca2:	01 d0                	add    eax,edx
   17ca4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:29
 
    // cursor LOW port to vga INDEX register
    outb(0x3D4, 0x0F);
   17ca8:	6a 0f                	push   0xf
   17caa:	68 d4 03 00 00       	push   0x3d4
   17caf:	e8 b4 ff ff ff       	call   17c68 <outb>
   17cb4:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:30
    outb(0x3D5, (unsigned char)(position&0xFF));
   17cb7:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17cbb:	0f b6 c0             	movzx  eax,al
   17cbe:	50                   	push   eax
   17cbf:	68 d5 03 00 00       	push   0x3d5
   17cc4:	e8 9f ff ff ff       	call   17c68 <outb>
   17cc9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:32
    // cursor HIGH port to vga INDEX register
    outb(0x3D4, 0x0E);
   17ccc:	6a 0e                	push   0xe
   17cce:	68 d4 03 00 00       	push   0x3d4
   17cd3:	e8 90 ff ff ff       	call   17c68 <outb>
   17cd8:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:33
    outb(0x3D5, (unsigned char )((position>>8)&0xFF));
   17cdb:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17cdf:	66 c1 e8 08          	shr    ax,0x8
   17ce3:	0f b6 c0             	movzx  eax,al
   17ce6:	50                   	push   eax
   17ce7:	68 d5 03 00 00       	push   0x3d5
   17cec:	e8 77 ff ff ff       	call   17c68 <outb>
   17cf1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:35
    //Move the cursor in the bios data area
 }
   17cf4:	90                   	nop
   17cf5:	c9                   	leave  
   17cf6:	c3                   	ret    

00017cf7 <make_color>:
make_color():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:37

uint8_t make_color(enum vga_color fg, enum vga_color bg) {
   17cf7:	55                   	push   ebp
   17cf8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:38
        return fg | bg << 4;
   17cfa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17cfd:	c1 e0 04             	shl    eax,0x4
   17d00:	89 c2                	mov    edx,eax
   17d02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17d05:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:39
}
   17d07:	5d                   	pop    ebp
   17d08:	c3                   	ret    

00017d09 <make_vgaentry>:
make_vgaentry():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:41

uint16_t make_vgaentry(char c, uint8_t color) {
   17d09:	55                   	push   ebp
   17d0a:	89 e5                	mov    ebp,esp
   17d0c:	83 ec 18             	sub    esp,0x18
   17d0f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17d12:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17d15:	88 55 ec             	mov    BYTE PTR [ebp-0x14],dl
   17d18:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:42
        uint16_t c16 = c;
   17d1b:	66 0f be 45 ec       	movsx  ax,BYTE PTR [ebp-0x14]
   17d20:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:43
        uint16_t color16 = color;
   17d24:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   17d28:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:44
        return c16 | color16 << 8;
   17d2c:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   17d30:	c1 e0 08             	shl    eax,0x8
   17d33:	89 c2                	mov    edx,eax
   17d35:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   17d39:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:45
}
   17d3b:	c9                   	leave  
   17d3c:	c3                   	ret    

00017d3d <terminal_setcolor>:
terminal_setcolor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:48


void terminal_setcolor(uint8_t color) {
   17d3d:	55                   	push   ebp
   17d3e:	89 e5                	mov    ebp,esp
   17d40:	83 ec 04             	sub    esp,0x4
   17d43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17d46:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:49
        terminal_color = color;
   17d49:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   17d4d:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:50
}
   17d52:	90                   	nop
   17d53:	c9                   	leave  
   17d54:	c3                   	ret    

00017d55 <terminal_putentryat>:
terminal_putentryat():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:52

void terminal_putentryat(char c, uint8_t color, size_t x, size_t y) {
   17d55:	55                   	push   ebp
   17d56:	89 e5                	mov    ebp,esp
   17d58:	53                   	push   ebx
   17d59:	83 ec 18             	sub    esp,0x18
   17d5c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   17d5f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17d62:	88 55 e8             	mov    BYTE PTR [ebp-0x18],dl
   17d65:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:53
    const size_t index = y * VGA_WIDTH + x;
   17d68:	b8 50 00 00 00       	mov    eax,0x50
   17d6d:	0f af 45 14          	imul   eax,DWORD PTR [ebp+0x14]
   17d71:	89 c2                	mov    edx,eax
   17d73:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   17d76:	01 d0                	add    eax,edx
   17d78:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:54
        terminal_buffer[index] = make_vgaentry(c, color);
   17d7b:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17d80:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   17d83:	01 d2                	add    edx,edx
   17d85:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17d88:	0f b6 55 e4          	movzx  edx,BYTE PTR [ebp-0x1c]
   17d8c:	0f be 45 e8          	movsx  eax,BYTE PTR [ebp-0x18]
   17d90:	52                   	push   edx
   17d91:	50                   	push   eax
   17d92:	e8 72 ff ff ff       	call   17d09 <make_vgaentry>
   17d97:	83 c4 08             	add    esp,0x8
   17d9a:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:55
}
   17d9d:	90                   	nop
   17d9e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17da1:	c9                   	leave  
   17da2:	c3                   	ret    

00017da3 <cursorSavePosition>:
cursorSavePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:58

void cursorSavePosition()
{
   17da3:	55                   	push   ebp
   17da4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:59
    if (savedPosPointer < 10)
   17da6:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17dad:	3c 09                	cmp    al,0x9
   17daf:	7f 3b                	jg     17dec <cursorSavePosition+0x49>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:61
    {
        savedPosX[++savedPosPointer] = terminal_column;
   17db1:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17db8:	83 c0 01             	add    eax,0x1
   17dbb:	a2 26 00 12 00       	mov    ds:0x120026,al
   17dc0:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17dc7:	0f be c0             	movsx  eax,al
   17dca:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17dd0:	88 90 10 00 12 00    	mov    BYTE PTR [eax+0x120010],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:62
        savedPosY[savedPosPointer] = terminal_row;
   17dd6:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17ddd:	0f be c0             	movsx  eax,al
   17de0:	8b 15 00 00 12 00    	mov    edx,DWORD PTR ds:0x120000
   17de6:	88 90 1c 00 12 00    	mov    BYTE PTR [eax+0x12001c],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:64
    }
}
   17dec:	90                   	nop
   17ded:	5d                   	pop    ebp
   17dee:	c3                   	ret    

00017def <cursorRestorePosition>:
cursorRestorePosition():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:67

void cursorRestorePosition()
{
   17def:	55                   	push   ebp
   17df0:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:68
    if (savedPosPointer > 0)
   17df2:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17df9:	84 c0                	test   al,al
   17dfb:	7e 42                	jle    17e3f <cursorRestorePosition+0x50>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:70
    {
        terminal_column = savedPosX[savedPosPointer];
   17dfd:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17e04:	0f be c0             	movsx  eax,al
   17e07:	0f b6 80 10 00 12 00 	movzx  eax,BYTE PTR [eax+0x120010]
   17e0e:	0f b6 c0             	movzx  eax,al
   17e11:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:71
        terminal_row = savedPosY[savedPosPointer--];
   17e16:	0f b6 05 26 00 12 00 	movzx  eax,BYTE PTR ds:0x120026
   17e1d:	89 c2                	mov    edx,eax
   17e1f:	83 ea 01             	sub    edx,0x1
   17e22:	88 15 26 00 12 00    	mov    BYTE PTR ds:0x120026,dl
   17e28:	0f be c0             	movsx  eax,al
   17e2b:	0f b6 80 1c 00 12 00 	movzx  eax,BYTE PTR [eax+0x12001c]
   17e32:	0f b6 c0             	movzx  eax,al
   17e35:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:72
        update_cursor();
   17e3a:	e8 48 fe ff ff       	call   17c87 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:74
    }
}
   17e3f:	90                   	nop
   17e40:	5d                   	pop    ebp
   17e41:	c3                   	ret    

00017e42 <terminal_clear>:
terminal_clear():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:77

void terminal_clear()
{
   17e42:	55                   	push   ebp
   17e43:	89 e5                	mov    ebp,esp
   17e45:	53                   	push   ebx
   17e46:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   17e49:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   17e50:	eb 53                	jmp    17ea5 <terminal_clear+0x63>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   17e52:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   17e59:	eb 3c                	jmp    17e97 <terminal_clear+0x55>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:81 (discriminator 3)
                        const size_t index = y * VGA_WIDTH + x;
   17e5b:	b8 50 00 00 00       	mov    eax,0x50
   17e60:	0f af 45 f8          	imul   eax,DWORD PTR [ebp-0x8]
   17e64:	89 c2                	mov    edx,eax
   17e66:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   17e69:	01 d0                	add    eax,edx
   17e6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:82 (discriminator 3)
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   17e6e:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17e73:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   17e76:	01 d2                	add    edx,edx
   17e78:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17e7b:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17e82:	0f b6 c0             	movzx  eax,al
   17e85:	50                   	push   eax
   17e86:	6a 20                	push   0x20
   17e88:	e8 7c fe ff ff       	call   17d09 <make_vgaentry>
   17e8d:	83 c4 08             	add    esp,0x8
   17e90:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 3)

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
                for (size_t x = 0; x < VGA_WIDTH; x++) {
   17e93:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:80 (discriminator 1)
   17e97:	b8 50 00 00 00       	mov    eax,0x50
   17e9c:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   17e9f:	72 ba                	jb     17e5b <terminal_clear+0x19>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 2)
}

void terminal_clear()
{
    //terminal_color = make_color(COLOR_LIGHT_GREEN, COLOR_BLACK);
        for (size_t y = 0; y < kTerminalHeight; y++) {
   17ea1:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:79 (discriminator 1)
   17ea5:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   17eac:	0f b6 c0             	movzx  eax,al
   17eaf:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   17eb2:	77 9e                	ja     17e52 <terminal_clear+0x10>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:85
                for (size_t x = 0; x < VGA_WIDTH; x++) {
                        const size_t index = y * VGA_WIDTH + x;
                        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
                }
        }
    terminal_column=0;
   17eb4:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   17ebb:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:86
    terminal_row=0;
   17ebe:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   17ec5:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:87
    update_cursor();
   17ec8:	e8 ba fd ff ff       	call   17c87 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:88
}
   17ecd:	90                   	nop
   17ece:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17ed1:	c9                   	leave  
   17ed2:	c3                   	ret    

00017ed3 <terminal_clear_line>:
terminal_clear_line():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:91

void terminal_clear_line(unsigned lineNo)
{
   17ed3:	55                   	push   ebp
   17ed4:	89 e5                	mov    ebp,esp
   17ed6:	53                   	push   ebx
   17ed7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:92
    if (lineNo>SYS_VGA_HEIGHT-1)
   17eda:	83 7d 08 31          	cmp    DWORD PTR [ebp+0x8],0x31
   17ede:	77 51                	ja     17f31 <terminal_clear_line+0x5e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   17ee0:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   17ee7:	eb 3c                	jmp    17f25 <terminal_clear_line+0x52>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:96 (discriminator 3)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
   17ee9:	b8 50 00 00 00       	mov    eax,0x50
   17eee:	0f af 45 08          	imul   eax,DWORD PTR [ebp+0x8]
   17ef2:	89 c2                	mov    edx,eax
   17ef4:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   17ef7:	01 d0                	add    eax,edx
   17ef9:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:97 (discriminator 3)
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
   17efc:	a1 0c 00 12 00       	mov    eax,ds:0x12000c
   17f01:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   17f04:	01 d2                	add    edx,edx
   17f06:	8d 1c 10             	lea    ebx,[eax+edx*1]
   17f09:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17f10:	0f b6 c0             	movzx  eax,al
   17f13:	50                   	push   eax
   17f14:	6a 20                	push   0x20
   17f16:	e8 ee fd ff ff       	call   17d09 <make_vgaentry>
   17f1b:	83 c4 08             	add    esp,0x8
   17f1e:	66 89 03             	mov    WORD PTR [ebx],ax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 3)

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
   17f21:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:94 (discriminator 1)
   17f25:	b8 50 00 00 00       	mov    eax,0x50
   17f2a:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   17f2d:	72 ba                	jb     17ee9 <terminal_clear_line+0x16>
   17f2f:	eb 01                	jmp    17f32 <terminal_clear_line+0x5f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:93
}

void terminal_clear_line(unsigned lineNo)
{
    if (lineNo>SYS_VGA_HEIGHT-1)
        return;
   17f31:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:99
    for (unsigned cnt=0;cnt<VGA_WIDTH;cnt++)
    {
        const size_t index = lineNo * VGA_WIDTH + cnt;
        terminal_buffer[index] = make_vgaentry(' ', terminal_color);
    }
}
   17f32:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   17f35:	c9                   	leave  
   17f36:	c3                   	ret    

00017f37 <terminal_copyline>:
terminal_copyline():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:102

void terminal_copyline(unsigned dstLine, unsigned srcLine)
{
   17f37:	55                   	push   ebp
   17f38:	89 e5                	mov    ebp,esp
   17f3a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:103
    unsigned rowBytes = VGA_WIDTH*2;
   17f3d:	b8 50 00 00 00       	mov    eax,0x50
   17f42:	01 c0                	add    eax,eax
   17f44:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:104
    uintptr_t dest=(uintptr_t)TEXTMODE_MEMORY_START+(dstLine*rowBytes);
   17f47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17f4a:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   17f4e:	05 00 80 0b 00       	add    eax,0xb8000
   17f53:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:105
    uintptr_t src=(uintptr_t)TEXTMODE_MEMORY_START+(srcLine*rowBytes);
   17f56:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   17f59:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   17f5d:	05 00 80 0b 00       	add    eax,0xb8000
   17f62:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:107
    
    memcpy((void*)dest,(void*)src,rowBytes);
   17f65:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   17f68:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   17f6b:	83 ec 04             	sub    esp,0x4
   17f6e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   17f71:	52                   	push   edx
   17f72:	50                   	push   eax
   17f73:	e8 f4 de 00 00       	call   25e6c <memcpy>
   17f78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:108
}
   17f7b:	90                   	nop
   17f7c:	c9                   	leave  
   17f7d:	c3                   	ret    

00017f7e <terminal_putchar>:
terminal_putchar():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:110

void terminal_putchar(char c) {
   17f7e:	55                   	push   ebp
   17f7f:	89 e5                	mov    ebp,esp
   17f81:	53                   	push   ebx
   17f82:	83 ec 24             	sub    esp,0x24
   17f85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   17f88:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:111
    if (c=='\n')
   17f8b:	80 7d e4 0a          	cmp    BYTE PTR [ebp-0x1c],0xa
   17f8f:	75 1c                	jne    17fad <terminal_putchar+0x2f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:113
    {
            terminal_column = 0;
   17f91:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   17f98:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:114
            terminal_row += 1;
   17f9b:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17fa0:	83 c0 01             	add    eax,0x1
   17fa3:	a3 00 00 12 00       	mov    ds:0x120000,eax
   17fa8:	e9 1f 01 00 00       	jmp    180cc <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:116
    }
    else if (c=='\b')
   17fad:	80 7d e4 08          	cmp    BYTE PTR [ebp-0x1c],0x8
   17fb1:	75 58                	jne    1800b <terminal_putchar+0x8d>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:118
    {
        if (terminal_column > 1)
   17fb3:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17fb8:	83 f8 01             	cmp    eax,0x1
   17fbb:	76 0f                	jbe    17fcc <terminal_putchar+0x4e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:119
            terminal_column--;
   17fbd:	a1 04 00 12 00       	mov    eax,ds:0x120004
   17fc2:	83 e8 01             	sub    eax,0x1
   17fc5:	a3 04 00 12 00       	mov    ds:0x120004,eax
   17fca:	eb 17                	jmp    17fe3 <terminal_putchar+0x65>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:122
        else
        {
            terminal_row--;
   17fcc:	a1 00 00 12 00       	mov    eax,ds:0x120000
   17fd1:	83 e8 01             	sub    eax,0x1
   17fd4:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:123
            terminal_column=VGA_WIDTH;
   17fd9:	b8 50 00 00 00       	mov    eax,0x50
   17fde:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:125
        }
        terminal_putentryat(' ', terminal_color, terminal_column, terminal_row);
   17fe3:	8b 0d 00 00 12 00    	mov    ecx,DWORD PTR ds:0x120000
   17fe9:	8b 15 04 00 12 00    	mov    edx,DWORD PTR ds:0x120004
   17fef:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   17ff6:	0f b6 c0             	movzx  eax,al
   17ff9:	51                   	push   ecx
   17ffa:	52                   	push   edx
   17ffb:	50                   	push   eax
   17ffc:	6a 20                	push   0x20
   17ffe:	e8 52 fd ff ff       	call   17d55 <terminal_putentryat>
   18003:	83 c4 10             	add    esp,0x10
   18006:	e9 c1 00 00 00       	jmp    180cc <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:128
        
    }
    else if (c=='\t')
   1800b:	80 7d e4 09          	cmp    BYTE PTR [ebp-0x1c],0x9
   1800f:	75 59                	jne    1806a <terminal_putchar+0xec>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:130
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
   18011:	8b 1d 04 00 12 00    	mov    ebx,DWORD PTR ds:0x120004
   18017:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   1801d:	ba cd cc cc cc       	mov    edx,0xcccccccd
   18022:	89 c8                	mov    eax,ecx
   18024:	f7 e2                	mul    edx
   18026:	c1 ea 02             	shr    edx,0x2
   18029:	89 d0                	mov    eax,edx
   1802b:	c1 e0 02             	shl    eax,0x2
   1802e:	01 d0                	add    eax,edx
   18030:	29 c1                	sub    ecx,eax
   18032:	89 ca                	mov    edx,ecx
   18034:	89 d8                	mov    eax,ebx
   18036:	29 d0                	sub    eax,edx
   18038:	83 c0 05             	add    eax,0x5
   1803b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:131
        if (goTo==terminal_column)
   1803e:	a1 04 00 12 00       	mov    eax,ds:0x120004
   18043:	39 45 f4             	cmp    DWORD PTR [ebp-0xc],eax
   18046:	75 16                	jne    1805e <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:132
            goTo=SCREEN_SPACES_PER_TAB;
   18048:	c7 45 f4 05 00 00 00 	mov    DWORD PTR [ebp-0xc],0x5
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
        
        while (terminal_column < goTo)
   1804f:	eb 0d                	jmp    1805e <terminal_putchar+0xe0>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:135
            terminal_putchar(' ');;
   18051:	83 ec 0c             	sub    esp,0xc
   18054:	6a 20                	push   0x20
   18056:	e8 23 ff ff ff       	call   17f7e <terminal_putchar>
   1805b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:134
    {
        uint32_t goTo= terminal_column + (SCREEN_SPACES_PER_TAB - (terminal_column % SCREEN_SPACES_PER_TAB));
        if (goTo==terminal_column)
            goTo=SCREEN_SPACES_PER_TAB;
        
        while (terminal_column < goTo)
   1805e:	a1 04 00 12 00       	mov    eax,ds:0x120004
   18063:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   18066:	72 e9                	jb     18051 <terminal_putchar+0xd3>
   18068:	eb 62                	jmp    180cc <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:141
    
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
   1806a:	80 7d e4 0d          	cmp    BYTE PTR [ebp-0x1c],0xd
   1806e:	0f 84 b0 00 00 00    	je     18124 <terminal_putchar+0x1a6>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:146
        return;

        else
        {
                terminal_putentryat(c, terminal_color, terminal_column, terminal_row);
   18074:	8b 1d 00 00 12 00    	mov    ebx,DWORD PTR ds:0x120000
   1807a:	8b 0d 04 00 12 00    	mov    ecx,DWORD PTR ds:0x120004
   18080:	0f b6 05 08 00 12 00 	movzx  eax,BYTE PTR ds:0x120008
   18087:	0f b6 d0             	movzx  edx,al
   1808a:	0f be 45 e4          	movsx  eax,BYTE PTR [ebp-0x1c]
   1808e:	53                   	push   ebx
   1808f:	51                   	push   ecx
   18090:	52                   	push   edx
   18091:	50                   	push   eax
   18092:	e8 be fc ff ff       	call   17d55 <terminal_putentryat>
   18097:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:147
                if (++terminal_column == VGA_WIDTH) {
   1809a:	a1 04 00 12 00       	mov    eax,ds:0x120004
   1809f:	83 c0 01             	add    eax,0x1
   180a2:	a3 04 00 12 00       	mov    ds:0x120004,eax
   180a7:	a1 04 00 12 00       	mov    eax,ds:0x120004
   180ac:	ba 50 00 00 00       	mov    edx,0x50
   180b1:	39 d0                	cmp    eax,edx
   180b3:	75 17                	jne    180cc <terminal_putchar+0x14e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:148
                        terminal_column = 0;
   180b5:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   180bc:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:149
                        terminal_row++;
   180bf:	a1 00 00 12 00       	mov    eax,ds:0x120000
   180c4:	83 c0 01             	add    eax,0x1
   180c7:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:152
                }
        }
    if (terminal_row == kTerminalHeight)
   180cc:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   180d3:	0f b6 d0             	movzx  edx,al
   180d6:	a1 00 00 12 00       	mov    eax,ds:0x120000
   180db:	39 c2                	cmp    edx,eax
   180dd:	75 3e                	jne    1811d <terminal_putchar+0x19f>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   180df:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   180e6:	eb 19                	jmp    18101 <terminal_putchar+0x183>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:155 (discriminator 3)
            terminal_copyline(row, row+1);
   180e8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   180eb:	83 c0 01             	add    eax,0x1
   180ee:	83 ec 08             	sub    esp,0x8
   180f1:	50                   	push   eax
   180f2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   180f5:	e8 3d fe ff ff       	call   17f37 <terminal_copyline>
   180fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 3)
                        terminal_row++;
                }
        }
    if (terminal_row == kTerminalHeight)
    {
        for (unsigned row=0;row<kTerminalHeight;row++)
   180fd:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:154 (discriminator 1)
   18101:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   18108:	0f b6 c0             	movzx  eax,al
   1810b:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1810e:	77 d8                	ja     180e8 <terminal_putchar+0x16a>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:157
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
   18110:	a1 00 00 12 00       	mov    eax,ds:0x120000
   18115:	83 e8 01             	sub    eax,0x1
   18118:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:159
    }
    update_cursor();
   1811d:	e8 65 fb ff ff       	call   17c87 <update_cursor>
   18122:	eb 01                	jmp    18125 <terminal_putchar+0x1a7>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:142
    //6 - cnt=0 to (5-1) 4
    //8 - cnt= to (5-3) 2
    }
    //We're going to ignore carriage return since most systems don't use it.  Unfortunately the FAT library we are using does
    else if (c=='\r')
        return;
   18124:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:160
            terminal_copyline(row, row+1);
        //memcpy((void *)TEXTMODE_MEMORY_START, (void *)TEXTMODE_MEMORY_START+160, 160*25);
        terminal_row--;
    }
    update_cursor();
}
   18125:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   18128:	c9                   	leave  
   18129:	c3                   	ret    

0001812a <cursorUpdateBiosCursor>:
cursorUpdateBiosCursor():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:163

void cursorUpdateBiosCursor()
{
   1812a:	55                   	push   ebp
   1812b:	89 e5                	mov    ebp,esp
   1812d:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:164
    uint8_t* bda=(uint8_t*)0x450;
   18130:	c7 45 fc 50 04 00 00 	mov    DWORD PTR [ebp-0x4],0x450
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:165
    *bda=(uint8_t)(terminal_column & 0xFF);
   18137:	a1 04 00 12 00       	mov    eax,ds:0x120004
   1813c:	89 c2                	mov    edx,eax
   1813e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   18141:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:166
    bda++;
   18143:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:167
    *bda=(uint8_t)((terminal_row+3) & 0xFF);
   18147:	a1 00 00 12 00       	mov    eax,ds:0x120000
   1814c:	8d 50 03             	lea    edx,[eax+0x3]
   1814f:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   18152:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:168
}
   18154:	90                   	nop
   18155:	c9                   	leave  
   18156:	c3                   	ret    

00018157 <cursorMoveTo>:
cursorMoveTo():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:171

void cursorMoveTo(uint8_t x, uint8_t y)
{
   18157:	55                   	push   ebp
   18158:	89 e5                	mov    ebp,esp
   1815a:	83 ec 08             	sub    esp,0x8
   1815d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18160:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18163:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   18166:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:172
    terminal_row = y;
   18169:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   1816d:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:173
    terminal_column = x;
   18172:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18176:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:174
    update_cursor();
   1817b:	e8 07 fb ff ff       	call   17c87 <update_cursor>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:175
}
   18180:	90                   	nop
   18181:	c9                   	leave  
   18182:	c3                   	ret    

00018183 <cursorMoveToX>:
cursorMoveToX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:178

void cursorMoveToX(uint8_t x)
{
   18183:	55                   	push   ebp
   18184:	89 e5                	mov    ebp,esp
   18186:	83 ec 04             	sub    esp,0x4
   18189:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1818c:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:179
    terminal_column = x;
   1818f:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   18193:	a3 04 00 12 00       	mov    ds:0x120004,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:180
}
   18198:	90                   	nop
   18199:	c9                   	leave  
   1819a:	c3                   	ret    

0001819b <cursorMoveToY>:
cursorMoveToY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:183

void cursorMoveToY(uint8_t y)
{
   1819b:	55                   	push   ebp
   1819c:	89 e5                	mov    ebp,esp
   1819e:	83 ec 04             	sub    esp,0x4
   181a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   181a4:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:184
    terminal_row = y;
   181a7:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   181ab:	a3 00 00 12 00       	mov    ds:0x120000,eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:185
}
   181b0:	90                   	nop
   181b1:	c9                   	leave  
   181b2:	c3                   	ret    

000181b3 <cursorGetPosX>:
cursorGetPosX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:188

uint8_t cursorGetPosX()
{
   181b3:	55                   	push   ebp
   181b4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:189
    return terminal_column;
   181b6:	a1 04 00 12 00       	mov    eax,ds:0x120004
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:190
}
   181bb:	5d                   	pop    ebp
   181bc:	c3                   	ret    

000181bd <cursorGetMaxX>:
cursorGetMaxX():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:192
int cursorGetMaxX()
{
   181bd:	55                   	push   ebp
   181be:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:193
    return VGA_WIDTH;
   181c0:	b8 50 00 00 00       	mov    eax,0x50
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:194
}
   181c5:	5d                   	pop    ebp
   181c6:	c3                   	ret    

000181c7 <cursorGetMaxY>:
cursorGetMaxY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:197

int cursorGetMaxY()
{
   181c7:	55                   	push   ebp
   181c8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:198
    return kTerminalHeight;
   181ca:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   181d1:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:199
}
   181d4:	5d                   	pop    ebp
   181d5:	c3                   	ret    

000181d6 <displayGetMaxXY>:
displayGetMaxXY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:202

void displayGetMaxXY(int* maxX, int* maxY)
{
   181d6:	55                   	push   ebp
   181d7:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:203
    *maxX=VGA_WIDTH;
   181d9:	b8 50 00 00 00       	mov    eax,0x50
   181de:	89 c2                	mov    edx,eax
   181e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   181e3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:204
    *maxY=kTerminalHeight;
   181e5:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   181ec:	0f b6 d0             	movzx  edx,al
   181ef:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   181f2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:205
    return;
   181f4:	90                   	nop
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:206
}
   181f5:	5d                   	pop    ebp
   181f6:	c3                   	ret    

000181f7 <cursorGetPosY>:
cursorGetPosY():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:209

uint8_t cursorGetPosY()
{
   181f7:	55                   	push   ebp
   181f8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:210
    return terminal_row;
   181fa:	a1 00 00 12 00       	mov    eax,ds:0x120000
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:211
}
   181ff:	5d                   	pop    ebp
   18200:	c3                   	ret    

00018201 <kTermPrint>:
kTermPrint():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:213

void kTermPrint(const char* data) {
   18201:	55                   	push   ebp
   18202:	89 e5                	mov    ebp,esp
   18204:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:214
        size_t datalen = strlen(data);
   18207:	83 ec 0c             	sub    esp,0xc
   1820a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1820d:	e8 c6 f4 00 00       	call   276d8 <strlen>
   18212:	83 c4 10             	add    esp,0x10
   18215:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215
        for (size_t i = 0; i < datalen; i++)
   18218:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1821f:	eb 1e                	jmp    1823f <kTermPrint+0x3e>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:216 (discriminator 3)
                terminal_putchar(data[i]);
   18221:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18224:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18227:	01 d0                	add    eax,edx
   18229:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1822c:	0f be c0             	movsx  eax,al
   1822f:	83 ec 0c             	sub    esp,0xc
   18232:	50                   	push   eax
   18233:	e8 46 fd ff ff       	call   17f7e <terminal_putchar>
   18238:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 3)
    return terminal_row;
}

void kTermPrint(const char* data) {
        size_t datalen = strlen(data);
        for (size_t i = 0; i < datalen; i++)
   1823b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:215 (discriminator 1)
   1823f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18242:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   18245:	72 da                	jb     18221 <kTermPrint+0x20>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:217
                terminal_putchar(data[i]);
}
   18247:	90                   	nop
   18248:	c9                   	leave  
   18249:	c3                   	ret    

0001824a <kTermInit>:
kTermInit():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:220


void kTermInit() {
   1824a:	55                   	push   ebp
   1824b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:221
    kTerminalHeight=SYS_VGA_HEIGHT;
   1824d:	c6 05 27 00 12 00 32 	mov    BYTE PTR ds:0x120027,0x32
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:222
    terminal_row = 0;
   18254:	c7 05 00 00 12 00 00 	mov    DWORD PTR ds:0x120000,0x0
   1825b:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:223
    terminal_column = 0;
   1825e:	c7 05 04 00 12 00 00 	mov    DWORD PTR ds:0x120004,0x0
   18265:	00 00 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:224
    terminal_color = make_color(COLOR_LIGHT_BROWN, COLOR_BLACK);
   18268:	6a 00                	push   0x0
   1826a:	6a 0e                	push   0xe
   1826c:	e8 86 fa ff ff       	call   17cf7 <make_color>
   18271:	83 c4 08             	add    esp,0x8
   18274:	a2 08 00 12 00       	mov    ds:0x120008,al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:225
    terminal_buffer = (uint16_t*) TEXTMODE_MEMORY_START;
   18279:	c7 05 0c 00 12 00 00 	mov    DWORD PTR ds:0x12000c,0xb8000
   18280:	80 0b 00 
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:227
    //terminal_clear();
}
   18283:	90                   	nop
   18284:	c9                   	leave  
   18285:	c3                   	ret    

00018286 <puts>:
puts():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:230

void puts(char* in)
{
   18286:	55                   	push   ebp
   18287:	89 e5                	mov    ebp,esp
   18289:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    while (*in>'\0')
   1828c:	eb 1b                	jmp    182a9 <puts+0x23>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:233
    {
        terminal_putchar(*in++);
   1828e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18291:	8d 50 01             	lea    edx,[eax+0x1]
   18294:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   18297:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1829a:	0f be c0             	movsx  eax,al
   1829d:	83 ec 0c             	sub    esp,0xc
   182a0:	50                   	push   eax
   182a1:	e8 d8 fc ff ff       	call   17f7e <terminal_putchar>
   182a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:231
    //terminal_clear();
}

void puts(char* in)
{
    while (*in>'\0')
   182a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   182ac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   182af:	84 c0                	test   al,al
   182b1:	7f db                	jg     1828e <puts+0x8>
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:235
    {
        terminal_putchar(*in++);
    }
}
   182b3:	90                   	nop
   182b4:	c9                   	leave  
   182b5:	c3                   	ret    

000182b6 <putc>:
putc():
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:238

void putc(char c)
{
   182b6:	55                   	push   ebp
   182b7:	89 e5                	mov    ebp,esp
   182b9:	83 ec 18             	sub    esp,0x18
   182bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   182bf:	88 45 f4             	mov    BYTE PTR [ebp-0xc],al
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:239
    terminal_putchar(c);
   182c2:	0f be 45 f4          	movsx  eax,BYTE PTR [ebp-0xc]
   182c6:	83 ec 0c             	sub    esp,0xc
   182c9:	50                   	push   eax
   182ca:	e8 af fc ff ff       	call   17f7e <terminal_putchar>
   182cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/char/console/basic_display.c:240
   182d2:	90                   	nop
   182d3:	c9                   	leave  
   182d4:	c3                   	ret    
   182d5:	66 90                	xchg   ax,ax
   182d7:	90                   	nop

000182d8 <doRSDPSearch>:
doRSDPSearch():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:8
#include "i386/bits/types.h"

extern uint32_t kDebugLevel;

uint32_t doRSDPSearch(int from, int count)
{
   182d8:	55                   	push   ebp
   182d9:	89 e5                	mov    ebp,esp
   182db:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:9
    uint8_t* fromPtr=(uint8_t*)from;
   182de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   182e1:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:12
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   182e4:	a1 78 48 12 00       	mov    eax,ds:0x124878
   182e9:	25 00 04 00 00       	and    eax,0x400
   182ee:	85 c0                	test   eax,eax
   182f0:	74 1c                	je     1830e <doRSDPSearch+0x36>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:13
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
   182f2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   182f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   182f8:	01 d0                	add    eax,edx
   182fa:	50                   	push   eax
   182fb:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   182fe:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   18301:	68 48 2d 08 00       	push   0x82d48
   18306:	e8 fc f1 00 00       	call   27507 <printk>
   1830b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15
#endif
    for (int cnt=0;cnt<count;cnt++)
   1830e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18315:	e9 9f 00 00 00       	jmp    183b9 <doRSDPSearch+0xe1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
   1831a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1831d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18320:	01 d0                	add    eax,edx
   18322:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18325:	3c 52                	cmp    al,0x52
   18327:	0f 85 88 00 00 00    	jne    183b5 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 1)
   1832d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18330:	8d 50 01             	lea    edx,[eax+0x1]
   18333:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18336:	01 d0                	add    eax,edx
   18338:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1833b:	3c 53                	cmp    al,0x53
   1833d:	75 76                	jne    183b5 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 2)
   1833f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18342:	8d 50 02             	lea    edx,[eax+0x2]
   18345:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18348:	01 d0                	add    eax,edx
   1834a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1834d:	3c 44                	cmp    al,0x44
   1834f:	75 64                	jne    183b5 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 3)
   18351:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18354:	8d 50 03             	lea    edx,[eax+0x3]
   18357:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1835a:	01 d0                	add    eax,edx
   1835c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1835f:	3c 20                	cmp    al,0x20
   18361:	75 52                	jne    183b5 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 4)
   18363:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18366:	8d 50 04             	lea    edx,[eax+0x4]
   18369:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1836c:	01 d0                	add    eax,edx
   1836e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18371:	3c 50                	cmp    al,0x50
   18373:	75 40                	jne    183b5 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 5)
   18375:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18378:	8d 50 05             	lea    edx,[eax+0x5]
   1837b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1837e:	01 d0                	add    eax,edx
   18380:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18383:	3c 54                	cmp    al,0x54
   18385:	75 2e                	jne    183b5 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 6)
   18387:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1838a:	8d 50 06             	lea    edx,[eax+0x6]
   1838d:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18390:	01 d0                	add    eax,edx
   18392:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   18395:	3c 52                	cmp    al,0x52
   18397:	75 1c                	jne    183b5 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:16 (discriminator 7)
   18399:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1839c:	8d 50 07             	lea    edx,[eax+0x7]
   1839f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   183a2:	01 d0                	add    eax,edx
   183a4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   183a7:	3c 20                	cmp    al,0x20
   183a9:	75 0a                	jne    183b5 <doRSDPSearch+0xdd>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:18
        {
            return (uint32_t)&fromPtr[cnt];
   183ab:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   183ae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   183b1:	01 d0                	add    eax,edx
   183b3:	eb 15                	jmp    183ca <doRSDPSearch+0xf2>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 2)
    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
            printk("doRSDPSearch: 0x%08X(0x%08X)-0x%08X\n", from, &fromPtr[0], from+count);
#endif
    for (int cnt=0;cnt<count;cnt++)
   183b5:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:15 (discriminator 1)
   183b9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   183bc:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   183bf:	0f 8c 55 ff ff ff    	jl     1831a <doRSDPSearch+0x42>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:20
        if (fromPtr[cnt]=='R' && fromPtr[cnt+1]=='S' && fromPtr[cnt+2]=='D' && fromPtr[cnt+3]==' ' && fromPtr[cnt+4]=='P' && fromPtr[cnt+5]=='T' && fromPtr[cnt+6]=='R' && fromPtr[cnt+7]==' ')
        {
            return (uint32_t)&fromPtr[cnt];
        }
    return 0xFFFFFFFF;
   183c5:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:21
}
   183ca:	c9                   	leave  
   183cb:	c3                   	ret    

000183cc <acpiFindTable>:
acpiFindTable():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:24

acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
   183cc:	55                   	push   ebp
   183cd:	89 e5                	mov    ebp,esp
   183cf:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:25
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
   183d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   183d5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:26
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
   183d8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   183db:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   183de:	83 e8 24             	sub    eax,0x24
   183e1:	c1 e8 02             	shr    eax,0x2
   183e4:	83 c0 0a             	add    eax,0xa
   183e7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28
 
    for (int i = 0; i < entries; i++)
   183ea:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   183f1:	eb 48                	jmp    1843b <acpiFindTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:30
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t*)rsdt->PointerToOtherSDT[i];
   183f3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   183f6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   183f9:	83 c2 08             	add    edx,0x8
   183fc:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   18400:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:31
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   18403:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18406:	83 ec 04             	sub    esp,0x4
   18409:	50                   	push   eax
   1840a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1840d:	68 70 2d 08 00       	push   0x82d70
   18412:	e8 f0 f0 00 00       	call   27507 <printk>
   18417:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:32
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   1841a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1841d:	83 ec 04             	sub    esp,0x4
   18420:	6a 04                	push   0x4
   18422:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18425:	50                   	push   eax
   18426:	e8 2d 98 ff ff       	call   11c58 <strncmp>
   1842b:	83 c4 10             	add    esp,0x10
   1842e:	85 c0                	test   eax,eax
   18430:	75 05                	jne    18437 <acpiFindTable+0x6b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:33
            return (acpiFADT_t*)nextRSDT;
   18432:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18435:	eb 11                	jmp    18448 <acpiFindTable+0x7c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 2)
acpiFADT_t *acpiFindTable(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t* rsdt = (acpiRSDT_t*) RootSDT;
    int entries = ((rsdt->header.Length - sizeof(rsdt->header)) / 4)+10;
 
    for (int i = 0; i < entries; i++)
   18437:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:28 (discriminator 1)
   1843b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1843e:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   18441:	7c b0                	jl     183f3 <acpiFindTable+0x27>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:37
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (acpiFADT_t*)nextRSDT;
    }
 
    // No FACP found
    return NULL;
   18443:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:38
}
   18448:	c9                   	leave  
   18449:	c3                   	ret    

0001844a <acpiFindTable2>:
acpiFindTable2():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:40
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
   1844a:	55                   	push   ebp
   1844b:	89 e5                	mov    ebp,esp
   1844d:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:41
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
   18450:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18453:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:42
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
   18456:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18459:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1845c:	83 e8 24             	sub    eax,0x24
   1845f:	c1 e8 02             	shr    eax,0x2
   18462:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44
 
    for (int i = 0; i < entries; i++)
   18465:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1846c:	eb 48                	jmp    184b6 <acpiFindTable2+0x6c>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:46
    {
        acpiRSDT_t *nextRSDT = (acpiRSDT_t *) rsdt->PointerToOtherSDT[i];
   1846e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18471:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18474:	83 c2 08             	add    edx,0x8
   18477:	8b 44 90 04          	mov    eax,DWORD PTR [eax+edx*4+0x4]
   1847b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:47
        printk("***tableSignature=%s, header sig=%s***\n", tableSignature, nextRSDT->header.Signature);
   1847e:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18481:	83 ec 04             	sub    esp,0x4
   18484:	50                   	push   eax
   18485:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   18488:	68 70 2d 08 00       	push   0x82d70
   1848d:	e8 75 f0 00 00       	call   27507 <printk>
   18492:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:48
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
   18495:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18498:	83 ec 04             	sub    esp,0x4
   1849b:	6a 04                	push   0x4
   1849d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   184a0:	50                   	push   eax
   184a1:	e8 b2 97 ff ff       	call   11c58 <strncmp>
   184a6:	83 c4 10             	add    esp,0x10
   184a9:	85 c0                	test   eax,eax
   184ab:	75 05                	jne    184b2 <acpiFindTable2+0x68>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:49
            return (void *) nextRSDT;
   184ad:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   184b0:	eb 11                	jmp    184c3 <acpiFindTable2+0x79>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 2)
void *acpiFindTable2(void *RootSDT, char* tableSignature)
{
    acpiRSDT_t *rsdt = (acpiRSDT_t*) RootSDT;
    int entries = (rsdt->header.Length - sizeof(rsdt->header)) / 4;
 
    for (int i = 0; i < entries; i++)
   184b2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:44 (discriminator 1)
   184b6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   184b9:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   184bc:	7c b0                	jl     1846e <acpiFindTable2+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:53
        if (!strncmp(nextRSDT->header.Signature, tableSignature, 4))
            return (void *) nextRSDT;
    }
 
    // No FACP found
    return NULL;
   184be:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:54
}
   184c3:	c9                   	leave  
   184c4:	c3                   	ret    

000184c5 <acpiFindTables>:
acpiFindTables():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:56
void acpiFindTables()
{
   184c5:	55                   	push   ebp
   184c6:	89 e5                	mov    ebp,esp
   184c8:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:61
    acpiRSDPHeader_t* lRSDPTable;
    acpiRSDT_t* lRootSDP;
    acpiFADT_t* lFADTSDP;
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   184cb:	a1 78 48 12 00       	mov    eax,ds:0x124878
   184d0:	25 00 04 00 00       	and    eax,0x400
   184d5:	85 c0                	test   eax,eax
   184d7:	74 10                	je     184e9 <acpiFindTables+0x24>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:62
             printk("acpiFindTables: Looking for ACPI tables\n");
   184d9:	83 ec 0c             	sub    esp,0xc
   184dc:	68 98 2d 08 00       	push   0x82d98
   184e1:	e8 21 f0 00 00       	call   27507 <printk>
   184e6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:64
#endif
             uint16_t* lEBDABIOSPtr=(uint16_t*)0x40e;
   184e9:	c7 45 e8 0e 04 00 00 	mov    DWORD PTR [ebp-0x18],0x40e
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:65
    int32_t lRSDPPtr, lRSDPBaseAddress=0xFFFFFFFF;
   184f0:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:68
    
    //Start by looking in the bios for the extended bios data area (EBDA) segment address, and search there
    if (lEBDABIOSPtr != 0)
   184f7:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   184fb:	74 2b                	je     18528 <acpiFindTables+0x63>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:70
    {
        lRSDPPtr=*lEBDABIOSPtr*10;
   184fd:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18500:	0f b7 00             	movzx  eax,WORD PTR [eax]
   18503:	0f b7 d0             	movzx  edx,ax
   18506:	89 d0                	mov    eax,edx
   18508:	c1 e0 02             	shl    eax,0x2
   1850b:	01 d0                	add    eax,edx
   1850d:	01 c0                	add    eax,eax
   1850f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:71
        lRSDPBaseAddress = doRSDPSearch(lRSDPPtr, 0xFFFF);
   18512:	83 ec 08             	sub    esp,0x8
   18515:	68 ff ff 00 00       	push   0xffff
   1851a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1851d:	e8 b6 fd ff ff       	call   182d8 <doRSDPSearch>
   18522:	83 c4 10             	add    esp,0x10
   18525:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:74
    }
    //If we didn't find the RSDP table there, look from 0xE0000->0xFFFFF
    if (lRSDPBaseAddress==0xFFFFFFFF)
   18528:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   1852c:	75 18                	jne    18546 <acpiFindTables+0x81>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:76
    {
        lRSDPBaseAddress=doRSDPSearch(0xE0000, 0x1FFFF);
   1852e:	83 ec 08             	sub    esp,0x8
   18531:	68 ff ff 01 00       	push   0x1ffff
   18536:	68 00 00 0e 00       	push   0xe0000
   1853b:	e8 98 fd ff ff       	call   182d8 <doRSDPSearch>
   18540:	83 c4 10             	add    esp,0x10
   18543:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:78
    }
    if (lRSDPBaseAddress==-1)
   18546:	83 7d ec ff          	cmp    DWORD PTR [ebp-0x14],0xffffffff
   1854a:	75 2a                	jne    18576 <acpiFindTables+0xb1>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:81
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   1854c:	a1 78 48 12 00       	mov    eax,ds:0x124878
   18551:	25 00 04 00 00       	and    eax,0x400
   18556:	85 c0                	test   eax,eax
   18558:	0f 84 51 01 00 00    	je     186af <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:82
           printk(" table not found\n", lRSDPPtr);
   1855e:	83 ec 08             	sub    esp,0x8
   18561:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18564:	68 c1 2d 08 00       	push   0x82dc1
   18569:	e8 99 ef 00 00       	call   27507 <printk>
   1856e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
#endif
        return;
   18571:	e9 39 01 00 00       	jmp    186af <acpiFindTables+0x1ea>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:86
    }
    lRSDPTable=(acpiRSDPHeader_t*)lRSDPBaseAddress;
   18576:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   18579:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:88
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
   1857c:	a1 78 48 12 00       	mov    eax,ds:0x124878
   18581:	25 00 04 00 00       	and    eax,0x400
   18586:	85 c0                	test   eax,eax
   18588:	74 42                	je     185cc <acpiFindTables+0x107>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:90
    {
        printk(" table found at 0x%08X\n", lRSDPBaseAddress);
   1858a:	83 ec 08             	sub    esp,0x8
   1858d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   18590:	68 d3 2d 08 00       	push   0x82dd3
   18595:	e8 6d ef 00 00       	call   27507 <printk>
   1859a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91
        printk("ACPI version %s, RSPD OEM Id: %s\n", lRSDPTable->firstPart.Revision==0?"1.0":"2+", lRSDPTable->firstPart.OEMID);
   1859d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   185a0:	8d 50 09             	lea    edx,[eax+0x9]
   185a3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   185a6:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   185aa:	84 c0                	test   al,al
   185ac:	75 07                	jne    185b5 <acpiFindTables+0xf0>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 1)
   185ae:	b8 eb 2d 08 00       	mov    eax,0x82deb
   185b3:	eb 05                	jmp    185ba <acpiFindTables+0xf5>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 2)
   185b5:	b8 ef 2d 08 00       	mov    eax,0x82def
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:91 (discriminator 4)
   185ba:	83 ec 04             	sub    esp,0x4
   185bd:	52                   	push   edx
   185be:	50                   	push   eax
   185bf:	68 f4 2d 08 00       	push   0x82df4
   185c4:	e8 3e ef 00 00       	call   27507 <printk>
   185c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:93
    }
    if (lRSDPTable->firstPart.Revision==0)
   185cc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   185cf:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   185d3:	84 c0                	test   al,al
   185d5:	75 29                	jne    18600 <acpiFindTables+0x13b>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:95
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->firstPart.RsdtAddress;
   185d7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   185da:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   185dd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:96
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   185e0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   185e3:	8d 50 24             	lea    edx,[eax+0x24]
   185e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   185e9:	83 c0 0a             	add    eax,0xa
   185ec:	52                   	push   edx
   185ed:	50                   	push   eax
   185ee:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   185f1:	68 18 2e 08 00       	push   0x82e18
   185f6:	e8 0c ef 00 00       	call   27507 <printk>
   185fb:	83 c4 10             	add    esp,0x10
   185fe:	eb 2a                	jmp    1862a <acpiFindTables+0x165>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:100
    }
    else
    {
        lRootSDP=(acpiRSDT_t*)lRSDPTable->XsdtAddress;
   18600:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   18603:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   18606:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   18609:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:101
        printk("RSDP is at 0x%08X, OEM Id: %s, OSDT=0x%08X\n", lRootSDP, lRootSDP->header.OEMID, lRootSDP->PointerToOtherSDT);
   1860c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1860f:	8d 50 24             	lea    edx,[eax+0x24]
   18612:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18615:	83 c0 0a             	add    eax,0xa
   18618:	52                   	push   edx
   18619:	50                   	push   eax
   1861a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1861d:	68 18 2e 08 00       	push   0x82e18
   18622:	e8 e0 ee 00 00       	call   27507 <printk>
   18627:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:103
    }
    lFADTSDP=acpiFindTable(lRootSDP,"FACP");
   1862a:	83 ec 08             	sub    esp,0x8
   1862d:	68 44 2e 08 00       	push   0x82e44
   18632:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18635:	e8 92 fd ff ff       	call   183cc <acpiFindTable>
   1863a:	83 c4 10             	add    esp,0x10
   1863d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:104
    if (lFADTSDP!=NULL)
   18640:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   18644:	74 2e                	je     18674 <acpiFindTables+0x1af>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:106
    {
        printk("FACP found at 0x%08X. resetReg=0x%08X\n", lFADTSDP, lFADTSDP->ResetReg);
   18646:	83 ec 0c             	sub    esp,0xc
   18649:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1864c:	83 ec 0c             	sub    esp,0xc
   1864f:	89 e2                	mov    edx,esp
   18651:	8b 48 74             	mov    ecx,DWORD PTR [eax+0x74]
   18654:	89 0a                	mov    DWORD PTR [edx],ecx
   18656:	8b 48 78             	mov    ecx,DWORD PTR [eax+0x78]
   18659:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   1865c:	8b 40 7c             	mov    eax,DWORD PTR [eax+0x7c]
   1865f:	89 42 08             	mov    DWORD PTR [edx+0x8],eax
   18662:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18665:	68 4c 2e 08 00       	push   0x82e4c
   1866a:	e8 98 ee 00 00       	call   27507 <printk>
   1866f:	83 c4 20             	add    esp,0x20
   18672:	eb 10                	jmp    18684 <acpiFindTables+0x1bf>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:110
    }
    else
    {
        printk("Failed to find FACP table, cannot continue ACPI discovery.\n");
   18674:	83 ec 0c             	sub    esp,0xc
   18677:	68 74 2e 08 00       	push   0x82e74
   1867c:	e8 86 ee 00 00       	call   27507 <printk>
   18681:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:112
    }
    uint32_t* ltemp=acpiFindTable(lFADTSDP,"DSDT");
   18684:	83 ec 08             	sub    esp,0x8
   18687:	68 b0 2e 08 00       	push   0x82eb0
   1868c:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1868f:	e8 38 fd ff ff       	call   183cc <acpiFindTable>
   18694:	83 c4 10             	add    esp,0x10
   18697:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:113
    printk("lTemp=0x%08X\n", ltemp);
   1869a:	83 ec 08             	sub    esp,0x8
   1869d:	ff 75 dc             	push   DWORD PTR [ebp-0x24]
   186a0:	68 b5 2e 08 00       	push   0x82eb5
   186a5:	e8 5d ee 00 00       	call   27507 <printk>
   186aa:	83 c4 10             	add    esp,0x10
   186ad:	eb 01                	jmp    186b0 <acpiFindTables+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:84
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_ACPI) == DEBUG_ACPI)
           printk(" table not found\n", lRSDPPtr);
#endif
        return;
   186af:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:118
    printk("lTemp=0x%08X\n", ltemp);
    
#endif
    
   
}
   186b0:	c9                   	leave  
   186b1:	c3                   	ret    

000186b2 <acpiInitialize>:
acpiInitialize():
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:122
    
   
void acpiInitialize()
{
   186b2:	55                   	push   ebp
   186b3:	89 e5                	mov    ebp,esp
   186b5:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:123
    acpiFindTables();
   186b8:	e8 08 fe ff ff       	call   184c5 <acpiFindTables>
/home/yogi/src/os/chrisOS/src/cpu/acpi.c:125
    
}
   186bd:	90                   	nop
   186be:	c9                   	leave  
   186bf:	c3                   	ret    

000186c0 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   186c0:	55                   	push   ebp
   186c1:	89 e5                	mov    ebp,esp
   186c3:	53                   	push   ebx
   186c4:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   186c7:	9c                   	pushf  
   186c8:	9c                   	pushf  
   186c9:	5a                   	pop    edx
   186ca:	89 d0                	mov    eax,edx
   186cc:	81 f2 00 00 20 00    	xor    edx,0x200000
   186d2:	52                   	push   edx
   186d3:	9d                   	popf   
   186d4:	9c                   	pushf  
   186d5:	5a                   	pop    edx
   186d6:	9d                   	popf   
   186d7:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   186da:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   186dd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   186e0:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   186e3:	25 00 00 20 00       	and    eax,0x200000
   186e8:	85 c0                	test   eax,eax
   186ea:	75 07                	jne    186f3 <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   186ec:	b8 00 00 00 00       	mov    eax,0x0
   186f1:	eb 22                	jmp    18715 <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   186f3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   186f6:	0f a2                	cpuid  
   186f8:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   186fb:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   186fe:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18701:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   18704:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   18708:	74 08                	je     18712 <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   1870a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1870d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   18710:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   18712:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   18715:	83 c4 10             	add    esp,0x10
   18718:	5b                   	pop    ebx
   18719:	5d                   	pop    ebp
   1871a:	c3                   	ret    

0001871b <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   1871b:	55                   	push   ebp
   1871c:	89 e5                	mov    ebp,esp
   1871e:	56                   	push   esi
   1871f:	53                   	push   ebx
   18720:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   18723:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18726:	25 00 00 00 80       	and    eax,0x80000000
   1872b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   1872e:	6a 00                	push   0x0
   18730:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18733:	e8 88 ff ff ff       	call   186c0 <__get_cpuid_max>
   18738:	83 c4 08             	add    esp,0x8
   1873b:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1873e:	73 07                	jae    18747 <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   18740:	b8 00 00 00 00       	mov    eax,0x0
   18745:	eb 1e                	jmp    18765 <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   18747:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1874a:	0f a2                	cpuid  
   1874c:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   1874f:	89 06                	mov    DWORD PTR [esi],eax
   18751:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18754:	89 18                	mov    DWORD PTR [eax],ebx
   18756:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18759:	89 08                	mov    DWORD PTR [eax],ecx
   1875b:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   1875e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   18760:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   18765:	8d 65 f8             	lea    esp,[ebp-0x8]
   18768:	5b                   	pop    ebx
   18769:	5e                   	pop    esi
   1876a:	5d                   	pop    ebp
   1876b:	c3                   	ret    

0001876c <rdtsc>:
rdtsc():
/home/yogi/src/os/chrisOS/include/utility.h:57
void displayGDT();

#if defined(__i386__)

static __inline__ unsigned long long rdtsc(void)
{
   1876c:	55                   	push   ebp
   1876d:	89 e5                	mov    ebp,esp
   1876f:	83 ec 10             	sub    esp,0x10
   18772:	0f 31                	rdtsc  
/home/yogi/src/os/chrisOS/include/utility.h:59
    unsigned long long int x;
    __asm__ volatile (".byte 0x0f, 0x31" : "=A" (x));
   18774:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18777:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/include/utility.h:60
    return x;
   1877a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1877d:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/include/utility.h:61
}
   18780:	c9                   	leave  
   18781:	c3                   	ret    

00018782 <apicCheckFor>:
apicCheckFor():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:12
 *  and if the local APIC hasn't been disabled in MSRs
 *  note that this requires CPUID to be supported.
 */

extern cpu_t kCPU[];
bool apicCheckFor() {
   18782:	55                   	push   ebp
   18783:	89 e5                	mov    ebp,esp
   18785:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:13
   uint32_t eax=0, edx=0, notused=0;
   18788:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1878f:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   18796:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:14
   __get_cpuid(1, &eax, &notused, &notused, &edx);
   1879d:	8d 45 f8             	lea    eax,[ebp-0x8]
   187a0:	50                   	push   eax
   187a1:	8d 45 f4             	lea    eax,[ebp-0xc]
   187a4:	50                   	push   eax
   187a5:	8d 45 f4             	lea    eax,[ebp-0xc]
   187a8:	50                   	push   eax
   187a9:	8d 45 fc             	lea    eax,[ebp-0x4]
   187ac:	50                   	push   eax
   187ad:	6a 01                	push   0x1
   187af:	e8 67 ff ff ff       	call   1871b <__get_cpuid>
   187b4:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/apic.c:15
   return edx & CPUID_FLAG_APIC;
   187b7:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   187ba:	25 00 02 00 00       	and    eax,0x200
   187bf:	85 c0                	test   eax,eax
   187c1:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/apic.c:16
}
   187c4:	c9                   	leave  
   187c5:	c3                   	ret    

000187c6 <acpiGetAPICVersion>:
acpiGetAPICVersion():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:19

uint8_t acpiGetAPICVersion()
{
   187c6:	55                   	push   ebp
   187c7:	89 e5                	mov    ebp,esp
   187c9:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:20
    return apicReadRegister(APIC_REGISTER_VERSION);
   187cc:	83 ec 0c             	sub    esp,0xc
   187cf:	6a 30                	push   0x30
   187d1:	e8 3f 00 00 00       	call   18815 <apicReadRegister>
   187d6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:21
}
   187d9:	c9                   	leave  
   187da:	c3                   	ret    

000187db <apciGetAPICID>:
apciGetAPICID():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:24

uint8_t apciGetAPICID(unsigned whichAPIC)
{
   187db:	55                   	push   ebp
   187dc:	89 e5                	mov    ebp,esp
   187de:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/apic.c:25
    return apicReadRegister(APIC_REGISTER_APIC_ID_OFFSET);
   187e1:	83 ec 0c             	sub    esp,0xc
   187e4:	6a 20                	push   0x20
   187e6:	e8 2a 00 00 00       	call   18815 <apicReadRegister>
   187eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:26
}
   187ee:	c9                   	leave  
   187ef:	c3                   	ret    

000187f0 <apicGetAPICBase>:
apicGetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:29

uint32_t apicGetAPICBase(void)
{
   187f0:	55                   	push   ebp
   187f1:	89 e5                	mov    ebp,esp
   187f3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:31
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   187f6:	83 ec 04             	sub    esp,0x4
   187f9:	8d 45 f0             	lea    eax,[ebp-0x10]
   187fc:	50                   	push   eax
   187fd:	8d 45 f4             	lea    eax,[ebp-0xc]
   18800:	50                   	push   eax
   18801:	6a 1b                	push   0x1b
   18803:	e8 53 13 00 00       	call   19b5b <rdmsr32>
   18808:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:33

   return (eax & 0xfffff000);
   1880b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1880e:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:34
}
   18813:	c9                   	leave  
   18814:	c3                   	ret    

00018815 <apicReadRegister>:
apicReadRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:37

uint32_t apicReadRegister(uint32_t reg) 
{
   18815:	55                   	push   ebp
   18816:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:38
    return *((volatile uint32_t *) (kCPU[0].registerBase + reg));
   18818:	8b 15 a4 48 12 00    	mov    edx,DWORD PTR ds:0x1248a4
   1881e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18821:	01 d0                	add    eax,edx
   18823:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:39
}
   18825:	5d                   	pop    ebp
   18826:	c3                   	ret    

00018827 <apicWriteRegister>:
apicWriteRegister():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:41

void apicWriteRegister(uint32_t reg, uint32_t value) {
   18827:	55                   	push   ebp
   18828:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/apic.c:42
    *((volatile uint32_t *) (kCPU[0].registerBase + reg)) = value;
   1882a:	8b 15 a4 48 12 00    	mov    edx,DWORD PTR ds:0x1248a4
   18830:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18833:	01 d0                	add    eax,edx
   18835:	89 c2                	mov    edx,eax
   18837:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1883a:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:43
}
   1883c:	90                   	nop
   1883d:	5d                   	pop    ebp
   1883e:	c3                   	ret    

0001883f <apicSetAPICBase>:
apicSetAPICBase():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:46

/* Set the physical address for local APIC registers */
void apicSetAPICBase(uintptr_t apic) {
   1883f:	55                   	push   ebp
   18840:	89 e5                	mov    ebp,esp
   18842:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:47
   uint32_t edx = 0;
   18845:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:48
   uint32_t eax = (apic & 0xfffff100) | IA32_APIC_BASE_MSR_ENABLE;
   1884c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1884f:	25 00 f1 ff ff       	and    eax,0xfffff100
   18854:	80 cc 08             	or     ah,0x8
   18857:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:54
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   edx = (apic >> 32) & 0x0f;
#endif
 
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   1885a:	83 ec 04             	sub    esp,0x4
   1885d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18860:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18863:	6a 1b                	push   0x1b
   18865:	e8 47 13 00 00       	call   19bb1 <wrmsr32>
   1886a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:55
   kCPU[0].registerBase=apic;
   1886d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18870:	a3 a4 48 12 00       	mov    ds:0x1248a4,eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:56
}
   18875:	90                   	nop
   18876:	c9                   	leave  
   18877:	c3                   	ret    

00018878 <cpu_get_apic_base>:
cpu_get_apic_base():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:62
 
/**
 * Get the physical address of the APIC registers page
 * make sure you map it to virtual memory ;)
 */
uintptr_t cpu_get_apic_base() {
   18878:	55                   	push   ebp
   18879:	89 e5                	mov    ebp,esp
   1887b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:64
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   1887e:	83 ec 04             	sub    esp,0x4
   18881:	8d 45 f0             	lea    eax,[ebp-0x10]
   18884:	50                   	push   eax
   18885:	8d 45 f4             	lea    eax,[ebp-0xc]
   18888:	50                   	push   eax
   18889:	6a 1b                	push   0x1b
   1888b:	e8 cb 12 00 00       	call   19b5b <rdmsr32>
   18890:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:69
 
#ifdef __PHYSICAL_MEMORY_EXTENSION__
   return (eax & 0xfffff000) | ((edx & 0x0f) << 32);
#else
   return (eax & 0xfffff000);
   18893:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18896:	25 00 f0 ff ff       	and    eax,0xfffff000
/home/yogi/src/os/chrisOS/src/cpu/apic.c:71
#endif
}
   1889b:	c9                   	leave  
   1889c:	c3                   	ret    

0001889d <apicIsEnabled>:
apicIsEnabled():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:73

bool apicIsEnabled() {
   1889d:	55                   	push   ebp
   1889e:	89 e5                	mov    ebp,esp
   188a0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:75
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   188a3:	83 ec 04             	sub    esp,0x4
   188a6:	8d 45 f0             	lea    eax,[ebp-0x10]
   188a9:	50                   	push   eax
   188aa:	8d 45 f4             	lea    eax,[ebp-0xc]
   188ad:	50                   	push   eax
   188ae:	6a 1b                	push   0x1b
   188b0:	e8 a6 12 00 00       	call   19b5b <rdmsr32>
   188b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:76
   return (eax & (1<<11)) == (1<11);
   188b8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:77
} 
   188bd:	c9                   	leave  
   188be:	c3                   	ret    

000188bf <apicEnable>:
apicEnable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:79

void apicEnable() {
   188bf:	55                   	push   ebp
   188c0:	89 e5                	mov    ebp,esp
   188c2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:81
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   188c5:	83 ec 04             	sub    esp,0x4
   188c8:	8d 45 f0             	lea    eax,[ebp-0x10]
   188cb:	50                   	push   eax
   188cc:	8d 45 f4             	lea    eax,[ebp-0xc]
   188cf:	50                   	push   eax
   188d0:	6a 1b                	push   0x1b
   188d2:	e8 84 12 00 00       	call   19b5b <rdmsr32>
   188d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:82
   eax |=IA32_APIC_BASE_MSR_ENABLE;
   188da:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   188dd:	80 cc 08             	or     ah,0x8
   188e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/apic.c:83
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   188e3:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   188e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   188e9:	83 ec 04             	sub    esp,0x4
   188ec:	52                   	push   edx
   188ed:	50                   	push   eax
   188ee:	6a 1b                	push   0x1b
   188f0:	e8 bc 12 00 00       	call   19bb1 <wrmsr32>
   188f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:84
} 
   188f8:	90                   	nop
   188f9:	c9                   	leave  
   188fa:	c3                   	ret    

000188fb <apicDisable>:
apicDisable():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:86

void apicDisable() {
   188fb:	55                   	push   ebp
   188fc:	89 e5                	mov    ebp,esp
   188fe:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:88
   uint32_t eax, edx;
   rdmsr32(IA32_APIC_BASE_MSR, &eax, &edx);
   18901:	83 ec 04             	sub    esp,0x4
   18904:	8d 45 f0             	lea    eax,[ebp-0x10]
   18907:	50                   	push   eax
   18908:	8d 45 f4             	lea    eax,[ebp-0xc]
   1890b:	50                   	push   eax
   1890c:	6a 1b                	push   0x1b
   1890e:	e8 48 12 00 00       	call   19b5b <rdmsr32>
   18913:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:89
   eax&=!IA32_APIC_BASE_MSR_ENABLE;
   18916:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:90
   wrmsr32(IA32_APIC_BASE_MSR, eax, edx);
   1891d:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18920:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   18923:	83 ec 04             	sub    esp,0x4
   18926:	52                   	push   edx
   18927:	50                   	push   eax
   18928:	6a 1b                	push   0x1b
   1892a:	e8 82 12 00 00       	call   19bb1 <wrmsr32>
   1892f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:91
} 
   18932:	90                   	nop
   18933:	c9                   	leave  
   18934:	c3                   	ret    

00018935 <apicGetHZ>:
apicGetHZ():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:92
uint32_t apicGetHZ() {
   18935:	55                   	push   ebp
   18936:	89 e5                	mov    ebp,esp
   18938:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:94

    int timerTimeout=500;
   1893b:	c7 45 f4 f4 01 00 00 	mov    DWORD PTR [ebp-0xc],0x1f4
/home/yogi/src/os/chrisOS/src/cpu/apic.c:106
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
*/

    // Prepare the PIT to sleep for 10ms (10000µs)

    apicEnable();
   18942:	e8 78 ff ff ff       	call   188bf <apicEnable>
/home/yogi/src/os/chrisOS/src/cpu/apic.c:107
    apicWriteRegister(APIC_REGISTER_SPURIOUS, 39+APIC_SW_ENABLE);
   18947:	83 ec 08             	sub    esp,0x8
   1894a:	68 27 01 00 00       	push   0x127
   1894f:	68 f0 00 00 00       	push   0xf0
   18954:	e8 ce fe ff ff       	call   18827 <apicWriteRegister>
   18959:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:109
    // Set APIC init counter to -1
    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32 | APIC_TIMER_MODE_ONESHOT );
   1895c:	83 ec 08             	sub    esp,0x8
   1895f:	6a 20                	push   0x20
   18961:	68 20 03 00 00       	push   0x320
   18966:	e8 bc fe ff ff       	call   18827 <apicWriteRegister>
   1896b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:111
    // Tell APIC timer to use divider 16
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x11);
   1896e:	83 ec 08             	sub    esp,0x8
   18971:	6a 11                	push   0x11
   18973:	68 e0 03 00 00       	push   0x3e0
   18978:	e8 aa fe ff ff       	call   18827 <apicWriteRegister>
   1897d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:112
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, 0xFFFFFFFF);
   18980:	83 ec 08             	sub    esp,0x8
   18983:	6a ff                	push   0xffffffff
   18985:	68 80 03 00 00       	push   0x380
   1898a:	e8 98 fe ff ff       	call   18827 <apicWriteRegister>
   1898f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:115

    // Perform PIT-supported sleep
    wait(timerTimeout);
   18992:	83 ec 0c             	sub    esp,0xc
   18995:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   18998:	e8 a9 fd 00 00       	call   28746 <wait>
   1899d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:117

    apicWriteRegister(APIC_REGISTER_LVT_TIMER, APIC_TIMER_INT_DISABLE);
   189a0:	83 ec 08             	sub    esp,0x8
   189a3:	68 00 00 01 00       	push   0x10000
   189a8:	68 20 03 00 00       	push   0x320
   189ad:	e8 75 fe ff ff       	call   18827 <apicWriteRegister>
   189b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:119
    // Now we know how often the APIC timer has ticked in 10ms
    uint64_t ticksPer10ms = 0xFFFFFFFF - apicReadRegister(APIC_REGISTER_TIMER_CURRENT);
   189b5:	83 ec 0c             	sub    esp,0xc
   189b8:	68 90 03 00 00       	push   0x390
   189bd:	e8 53 fe ff ff       	call   18815 <apicReadRegister>
   189c2:	83 c4 10             	add    esp,0x10
   189c5:	f7 d0                	not    eax
   189c7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   189ca:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/apic.c:120
    ticksPer10ms=ticksPer10ms/(timerTimeout/10);
   189d1:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   189d4:	ba 67 66 66 66       	mov    edx,0x66666667
   189d9:	89 c8                	mov    eax,ecx
   189db:	f7 ea                	imul   edx
   189dd:	c1 fa 02             	sar    edx,0x2
   189e0:	89 c8                	mov    eax,ecx
   189e2:	c1 f8 1f             	sar    eax,0x1f
   189e5:	29 c2                	sub    edx,eax
   189e7:	89 d0                	mov    eax,edx
   189e9:	99                   	cdq    
   189ea:	52                   	push   edx
   189eb:	50                   	push   eax
   189ec:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   189ef:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   189f2:	e8 99 fe 00 00       	call   28890 <__udivdi3>
   189f7:	83 c4 10             	add    esp,0x10
   189fa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   189fd:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:124
    
    // Start timer as periodic on IRQ 0, divider 16, with the number of ticks we counted
//    apicWriteRegister(APIC_REGISTER_LVT_TIMER, 32  | APIC_TIMER_MODE_PERIODIC ); //clears the INT DISABLE pin
    apicWriteRegister(APIC_REGISTER_TIMER_DIV, 0x3);
   18a00:	83 ec 08             	sub    esp,0x8
   18a03:	6a 03                	push   0x3
   18a05:	68 e0 03 00 00       	push   0x3e0
   18a0a:	e8 18 fe ff ff       	call   18827 <apicWriteRegister>
   18a0f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:125
    apicWriteRegister(APIC_REGISTER_TIMER_INITIAL, ticksPer10ms);
   18a12:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   18a15:	83 ec 08             	sub    esp,0x8
   18a18:	50                   	push   eax
   18a19:	68 80 03 00 00       	push   0x380
   18a1e:	e8 04 fe ff ff       	call   18827 <apicWriteRegister>
   18a23:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:126
    return ticksPer10ms;
   18a26:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/cpu/apic.c:127
}
   18a29:	c9                   	leave  
   18a2a:	c3                   	ret    

00018a2b <tscGetTicksPerSecond>:
tscGetTicksPerSecond():
/home/yogi/src/os/chrisOS/src/cpu/apic.c:130

int tscGetTicksPerSecond()
{
   18a2b:	55                   	push   ebp
   18a2c:	89 e5                	mov    ebp,esp
   18a2e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/apic.c:131
    uint64_t ticksBefore=rdtsc();
   18a31:	e8 36 fd ff ff       	call   1876c <rdtsc>
   18a36:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   18a39:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:132
    wait(1000);
   18a3c:	83 ec 0c             	sub    esp,0xc
   18a3f:	68 e8 03 00 00       	push   0x3e8
   18a44:	e8 fd fc 00 00       	call   28746 <wait>
   18a49:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/apic.c:133
    return rdtsc()-ticksBefore;
   18a4c:	e8 1b fd ff ff       	call   1876c <rdtsc>
   18a51:	89 c2                	mov    edx,eax
   18a53:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18a56:	29 c2                	sub    edx,eax
   18a58:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/cpu/apic.c:134
   18a5a:	c9                   	leave  
   18a5b:	c3                   	ret    

00018a5c <bitsSet>:
bitsSet():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:5
#include <stdint.h>
#include <stdbool.h>

bool bitsSet(volatile uint32_t* array, uint32_t bit)
{
   18a5c:	55                   	push   ebp
   18a5d:	89 e5                	mov    ebp,esp
   18a5f:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:6
    int lRetVal=0;
   18a62:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:7
    __asm__ volatile ("bts [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18a69:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18a6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18a6f:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18a72:	0f ab 02             	bts    DWORD PTR [edx],eax
   18a75:	b8 00 00 00 00       	mov    eax,0x0
   18a7a:	0f 92 c0             	setb   al
   18a7d:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:8
    return lRetVal;
   18a80:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18a84:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:9
}
   18a87:	c9                   	leave  
   18a88:	c3                   	ret    

00018a89 <bitsReset>:
bitsReset():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:11
bool bitsReset(volatile uint32_t* array, uint32_t bit)
{
   18a89:	55                   	push   ebp
   18a8a:	89 e5                	mov    ebp,esp
   18a8c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:12
    int lRetVal=0;
   18a8f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:13
    __asm__ volatile ("btr [%[array]],%[bit]\nmov eax,0\nsetc al\n" : [array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18a96:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18a99:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18a9c:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18a9f:	0f b3 02             	btr    DWORD PTR [edx],eax
   18aa2:	b8 00 00 00 00       	mov    eax,0x0
   18aa7:	0f 92 c0             	setb   al
   18aaa:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:14
    return lRetVal;
   18aad:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18ab1:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:15
}
   18ab4:	c9                   	leave  
   18ab5:	c3                   	ret    

00018ab6 <bitsTest>:
bitsTest():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:17
bool bitsTest(volatile uint32_t* array, uint32_t bit)
{
   18ab6:	55                   	push   ebp
   18ab7:	89 e5                	mov    ebp,esp
   18ab9:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:18
    int lRetVal=0;
   18abc:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:19
    __asm__ volatile ("bt [%[array]],%[bit]\nmov eax,0\nsetc al\n" :[array] "+m" (*array), "=a" (lRetVal) : [bit] "r" (bit));
   18ac3:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18ac6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18ac9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18acc:	0f a3 02             	bt     DWORD PTR [edx],eax
   18acf:	b8 00 00 00 00       	mov    eax,0x0
   18ad4:	0f 92 c0             	setb   al
   18ad7:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/bits.c:20
    return lRetVal;
   18ada:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   18ade:	0f 95 c0             	setne  al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:21
}
   18ae1:	c9                   	leave  
   18ae2:	c3                   	ret    

00018ae3 <bitsScanF>:
bitsScanF():
/home/yogi/src/os/chrisOS/src/cpu/bits.c:24

int bitsScanF(volatile uint32_t* array)
{
   18ae3:	55                   	push   ebp
   18ae4:	89 e5                	mov    ebp,esp
   18ae6:	53                   	push   ebx
   18ae7:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/bits.c:25
    int lRetVal=0;
   18aea:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:26
    bool lErr=false;
   18af1:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/bits.c:27
    __asm__ volatile ("bsf %[ret],[%[array]]\nsetz cl\n" : [ret] "=b" (lRetVal), [lErr] "=c" (lErr) : [array] "m" (*array));
   18af5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18af8:	0f bc 18             	bsf    ebx,DWORD PTR [eax]
   18afb:	0f 94 c1             	sete   cl
   18afe:	89 c8                	mov    eax,ecx
   18b00:	89 da                	mov    edx,ebx
   18b02:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   18b05:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/bits.c:28
    if (lErr==false)
   18b08:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   18b0c:	83 f0 01             	xor    eax,0x1
   18b0f:	84 c0                	test   al,al
   18b11:	74 05                	je     18b18 <bitsScanF+0x35>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:29
        return lRetVal;
   18b13:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   18b16:	eb 05                	jmp    18b1d <bitsScanF+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/bits.c:31
    else
        return -1;
   18b18:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/cpu/bits.c:32
   18b1d:	83 c4 10             	add    esp,0x10
   18b20:	5b                   	pop    ebx
   18b21:	5d                   	pop    ebp
   18b22:	c3                   	ret    
   18b23:	90                   	nop

00018b24 <getNonKernelCodeGDTIndex>:
getNonKernelCodeGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:11
extern sGDT* rmGdt;
extern sGDT* bootGdt;
extern uint32_t* kGDTSlotAvailableInd;

uint16_t HIGH_CODE_SECTION getNonKernelCodeGDTIndex()
{
   18b24:	55                   	push   ebp
   18b25:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:12
    return 7<<3;
   18b27:	b8 38 00 00 00       	mov    eax,0x38
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:13
}
   18b2c:	5d                   	pop    ebp
   18b2d:	c3                   	ret    

00018b2e <getNonKernelDataGDTIndex>:
getNonKernelDataGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:16

uint16_t HIGH_CODE_SECTION getNonKernelDataGDTIndex()
{
   18b2e:	55                   	push   ebp
   18b2f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:17
    return 6<<3;
   18b31:	b8 30 00 00 00       	mov    eax,0x30
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:18
}
   18b36:	5d                   	pop    ebp
   18b37:	c3                   	ret    

00018b38 <getKernelCodeGDTIndex>:
getKernelCodeGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:21

uint16_t HIGH_CODE_SECTION getKernelCodeGDTIndex()
{
   18b38:	55                   	push   ebp
   18b39:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:22
    return 4<<3;
   18b3b:	b8 20 00 00 00       	mov    eax,0x20
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:23
}
   18b40:	5d                   	pop    ebp
   18b41:	c3                   	ret    

00018b42 <getKernelDataGDTIndex>:
getKernelDataGDTIndex():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:26

uint16_t HIGH_CODE_SECTION getKernelDataGDTIndex()
{
   18b42:	55                   	push   ebp
   18b43:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:27
    return 2<<3;
   18b45:	b8 10 00 00 00       	mov    eax,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:28
}
   18b4a:	5d                   	pop    ebp
   18b4b:	c3                   	ret    

00018b4c <getNewGDTEntry>:
getNewGDTEntry():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:31

sGDT* HIGH_CODE_SECTION getNewGDTEntry()
{
   18b4c:	55                   	push   ebp
   18b4d:	89 e5                	mov    ebp,esp
   18b4f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:32
   int cnt=0,slot=0;
   18b52:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   18b59:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:33
   uint32_t* ptr=kGDTSlotAvailableInd;
   18b60:	a1 2c 49 12 00       	mov    eax,ds:0x12492c
   18b65:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:34
    slot=bitsScanF(ptr);
   18b68:	83 ec 0c             	sub    esp,0xc
   18b6b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   18b6e:	e8 70 ff ff ff       	call   18ae3 <bitsScanF>
   18b73:	83 c4 10             	add    esp,0x10
   18b76:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:35
   sGDT* gdt=bootGdt+slot; 
   18b79:	a1 84 49 12 00       	mov    eax,ds:0x124984
   18b7e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   18b81:	c1 e2 03             	shl    edx,0x3
   18b84:	01 d0                	add    eax,edx
   18b86:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:36
   return gdt;
   18b89:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:37
}
   18b8c:	c9                   	leave  
   18b8d:	c3                   	ret    

00018b8e <gdtEntry>:
gdtEntry():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:41

//Create/modify entries in the protected mode GDT
void HIGH_CODE_SECTION gdtEntry(int entryNo, int base, int limit, char access, char flags,bool inUse)
{
   18b8e:	55                   	push   ebp
   18b8f:	89 e5                	mov    ebp,esp
   18b91:	83 ec 18             	sub    esp,0x18
   18b94:	8b 4d 14             	mov    ecx,DWORD PTR [ebp+0x14]
   18b97:	8b 55 18             	mov    edx,DWORD PTR [ebp+0x18]
   18b9a:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   18b9d:	88 4d f4             	mov    BYTE PTR [ebp-0xc],cl
   18ba0:	88 55 f0             	mov    BYTE PTR [ebp-0x10],dl
   18ba3:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:42
    bootGdt[entryNo].base_low        = base & 0xFFFF;
   18ba6:	a1 84 49 12 00       	mov    eax,ds:0x124984
   18bab:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18bae:	c1 e2 03             	shl    edx,0x3
   18bb1:	01 d0                	add    eax,edx
   18bb3:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18bb6:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:43
    bootGdt[entryNo].base_middle     = (base >> 16) & 0xFF;
   18bba:	a1 84 49 12 00       	mov    eax,ds:0x124984
   18bbf:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18bc2:	c1 e2 03             	shl    edx,0x3
   18bc5:	01 d0                	add    eax,edx
   18bc7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18bca:	c1 fa 10             	sar    edx,0x10
   18bcd:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:44
    bootGdt[entryNo].base_high       = (base >> 24) & 0xFF;
   18bd0:	a1 84 49 12 00       	mov    eax,ds:0x124984
   18bd5:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18bd8:	c1 e2 03             	shl    edx,0x3
   18bdb:	01 d0                	add    eax,edx
   18bdd:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18be0:	c1 ea 18             	shr    edx,0x18
   18be3:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:45
    bootGdt[entryNo].limit_low       = limit & 0xFFFF;
   18be6:	a1 84 49 12 00       	mov    eax,ds:0x124984
   18beb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18bee:	c1 e2 03             	shl    edx,0x3
   18bf1:	01 d0                	add    eax,edx
   18bf3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   18bf6:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:46
    bootGdt[entryNo].flags_and_limit = flags | (((limit >> 8) & 0xF));
   18bf9:	a1 84 49 12 00       	mov    eax,ds:0x124984
   18bfe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c01:	c1 e2 03             	shl    edx,0x3
   18c04:	01 c2                	add    edx,eax
   18c06:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18c09:	c1 f8 08             	sar    eax,0x8
   18c0c:	83 e0 0f             	and    eax,0xf
   18c0f:	0a 45 f0             	or     al,BYTE PTR [ebp-0x10]
   18c12:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:47
    bootGdt[entryNo].access          = access | 0x10;
   18c15:	a1 84 49 12 00       	mov    eax,ds:0x124984
   18c1a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c1d:	c1 e2 03             	shl    edx,0x3
   18c20:	01 d0                	add    eax,edx
   18c22:	0f b6 55 f4          	movzx  edx,BYTE PTR [ebp-0xc]
   18c26:	83 ca 10             	or     edx,0x10
   18c29:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:48
    if (inUse)
   18c2c:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   18c30:	74 17                	je     18c49 <gdtEntry+0xbb>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:49
        bitsReset(kGDTSlotAvailableInd,entryNo);
   18c32:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c35:	a1 2c 49 12 00       	mov    eax,ds:0x12492c
   18c3a:	83 ec 08             	sub    esp,0x8
   18c3d:	52                   	push   edx
   18c3e:	50                   	push   eax
   18c3f:	e8 45 fe ff ff       	call   18a89 <bitsReset>
   18c44:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:52
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
}
   18c47:	eb 15                	jmp    18c5e <gdtEntry+0xd0>
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:51
    bootGdt[entryNo].flags_and_limit = flags | (((limit >> 8) & 0xF));
    bootGdt[entryNo].access          = access | 0x10;
    if (inUse)
        bitsReset(kGDTSlotAvailableInd,entryNo);
    else
        bitsSet(kGDTSlotAvailableInd,entryNo);
   18c49:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c4c:	a1 2c 49 12 00       	mov    eax,ds:0x12492c
   18c51:	83 ec 08             	sub    esp,0x8
   18c54:	52                   	push   edx
   18c55:	50                   	push   eax
   18c56:	e8 01 fe ff ff       	call   18a5c <bitsSet>
   18c5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:52
}
   18c5e:	90                   	nop
   18c5f:	c9                   	leave  
   18c60:	c3                   	ret    

00018c61 <gdtEntryRM>:
gdtEntryRM():
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:56

//Create entries in the real mode GDT table
void HIGH_CODE_SECTION gdtEntryRM(int entryNo, int base, int limit, char access, char flags)
{
   18c61:	55                   	push   ebp
   18c62:	89 e5                	mov    ebp,esp
   18c64:	83 ec 08             	sub    esp,0x8
   18c67:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   18c6a:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   18c6d:	88 55 fc             	mov    BYTE PTR [ebp-0x4],dl
   18c70:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:57
    rmGdt[entryNo].base_low        = base & 0xFFFF;
   18c73:	a1 80 49 12 00       	mov    eax,ds:0x124980
   18c78:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c7b:	c1 e2 03             	shl    edx,0x3
   18c7e:	01 d0                	add    eax,edx
   18c80:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18c83:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:58
    rmGdt[entryNo].base_middle     = base >> 16 & 0xFF;
   18c87:	a1 80 49 12 00       	mov    eax,ds:0x124980
   18c8c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18c8f:	c1 e2 03             	shl    edx,0x3
   18c92:	01 d0                	add    eax,edx
   18c94:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18c97:	c1 fa 10             	sar    edx,0x10
   18c9a:	88 50 04             	mov    BYTE PTR [eax+0x4],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:59
    rmGdt[entryNo].base_high       = base >> 24 & 0xFF;
   18c9d:	a1 80 49 12 00       	mov    eax,ds:0x124980
   18ca2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18ca5:	c1 e2 03             	shl    edx,0x3
   18ca8:	01 d0                	add    eax,edx
   18caa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18cad:	c1 ea 18             	shr    edx,0x18
   18cb0:	88 50 07             	mov    BYTE PTR [eax+0x7],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:60
    rmGdt[entryNo].limit_low       = limit & 0xFFFF;
   18cb3:	a1 80 49 12 00       	mov    eax,ds:0x124980
   18cb8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18cbb:	c1 e2 03             	shl    edx,0x3
   18cbe:	01 d0                	add    eax,edx
   18cc0:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   18cc3:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:61
    rmGdt[entryNo].flags_and_limit = flags | (limit >> 8 & 0xF);
   18cc6:	a1 80 49 12 00       	mov    eax,ds:0x124980
   18ccb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18cce:	c1 e2 03             	shl    edx,0x3
   18cd1:	01 c2                	add    edx,eax
   18cd3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18cd6:	c1 f8 08             	sar    eax,0x8
   18cd9:	83 e0 0f             	and    eax,0xf
   18cdc:	0a 45 f8             	or     al,BYTE PTR [ebp-0x8]
   18cdf:	88 42 06             	mov    BYTE PTR [edx+0x6],al
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:62
    rmGdt[entryNo].access          = access | 0x10;
   18ce2:	a1 80 49 12 00       	mov    eax,ds:0x124980
   18ce7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   18cea:	c1 e2 03             	shl    edx,0x3
   18ced:	01 d0                	add    eax,edx
   18cef:	0f b6 55 fc          	movzx  edx,BYTE PTR [ebp-0x4]
   18cf3:	83 ca 10             	or     edx,0x10
   18cf6:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/gdt.c:63
}
   18cf9:	90                   	nop
   18cfa:	c9                   	leave  
   18cfb:	c3                   	ret    

00018cfc <identifyCPUFeatures>:
identifyCPUFeatures():
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:8

extern cpuid_features_t kCPUFeatures;


void identifyCPUFeatures(cpuid_features_t* cpuFeatures)
{
   18cfc:	55                   	push   ebp
   18cfd:	89 e5                	mov    ebp,esp
   18cff:	53                   	push   ebx
   18d00:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:11
    uint32_t eax, ebx, ecx, edx;

    __cpuid(1, eax, ebx, cpuFeatures->cpuid_feature_bits_2.cpuid_feature_bits_ecx_reg, cpuFeatures->cpuid_feature_bits.cpuid_features_edx_reg);
   18d03:	b8 01 00 00 00       	mov    eax,0x1
   18d08:	0f a2                	cpuid  
   18d0a:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18d0d:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   18d10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18d13:	89 48 04             	mov    DWORD PTR [eax+0x4],ecx
   18d16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18d19:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:12
    __cpuid(7, eax, cpuFeatures->cpuid_extended_feature_bits_3.cpuid_extended_feature_bits_ebx_reg , ecx, edx);
   18d1b:	b8 07 00 00 00       	mov    eax,0x7
   18d20:	0f a2                	cpuid  
   18d22:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   18d25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18d28:	89 58 08             	mov    DWORD PTR [eax+0x8],ebx
   18d2b:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   18d2e:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/src/os/chrisOS/src/cpu/identify_cpu_features.c:13
}
   18d31:	90                   	nop
   18d32:	83 c4 10             	add    esp,0x10
   18d35:	5b                   	pop    ebx
   18d36:	5d                   	pop    ebp
   18d37:	c3                   	ret    

00018d38 <idt_set_gate>:
idt_set_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:10
//extern void idt_load();//Defined in CPU.h

/* Use this function to set an entry in the IDT. Alot simpler
*  than twiddling with the GDT ;) */
void idt_set_gate(struct idt_entry *idt, unsigned short sel, uint32_t base, unsigned char flags)
{
   18d38:	55                   	push   ebp
   18d39:	89 e5                	mov    ebp,esp
   18d3b:	83 ec 08             	sub    esp,0x8
   18d3e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   18d41:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   18d44:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   18d48:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:11
  idt->base_lo = base & 0xFFFF;
   18d4b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18d4e:	89 c2                	mov    edx,eax
   18d50:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18d53:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:12
  idt->sel = sel;
   18d56:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18d59:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   18d5d:	66 89 50 02          	mov    WORD PTR [eax+0x2],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:13
  idt->flags = flags | 0x80;
   18d61:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   18d65:	83 c8 80             	or     eax,0xffffff80
   18d68:	89 c2                	mov    edx,eax
   18d6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18d6d:	88 50 05             	mov    BYTE PTR [eax+0x5],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:14
  idt->base_hi = (base >> 16) & 0xFFFF;}
   18d70:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   18d73:	c1 e8 10             	shr    eax,0x10
   18d76:	89 c2                	mov    edx,eax
   18d78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   18d7b:	66 89 50 06          	mov    WORD PTR [eax+0x6],dx
   18d7f:	90                   	nop
   18d80:	c9                   	leave  
   18d81:	c3                   	ret    

00018d82 <idt_install>:
idt_install():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:18

/* Installs the IDT */
void idt_install(struct idt_ptr* idtp)
{
   18d82:	55                   	push   ebp
   18d83:	89 e5                	mov    ebp,esp
   18d85:	57                   	push   edi
   18d86:	56                   	push   esi
   18d87:	53                   	push   ebx
   18d88:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/cpu/idt.c:20
    /* Sets the special IDT pointer up, just like in 'gdt.c' */
    idtp->limit = (sizeof (struct idt_entry) * 256) - 1;
   18d8b:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18d8e:	66 c7 01 ff 07       	mov    WORD PTR [ecx],0x7ff
/home/yogi/src/os/chrisOS/src/cpu/idt.c:21
    idtp->base = (int)IDT_TABLE_ADDRESS;
   18d93:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18d96:	c7 41 02 00 30 16 00 	mov    DWORD PTR [ecx+0x2],0x163000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:29
    //memset(&idt, 0, sizeof(struct idt_entry) * 256);

    /* Add any new ISRs to the IDT here using idt_set_gate */

    /* Points the processor's internal register to the new IDT */
    idt_load((uint64_t)((uint64_t)(idtp->limit)<<32 | idtp->base));
   18d9d:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   18da0:	0f b7 31             	movzx  esi,WORD PTR [ecx]
   18da3:	0f b7 ce             	movzx  ecx,si
   18da6:	bb 00 00 00 00       	mov    ebx,0x0
   18dab:	89 cb                	mov    ebx,ecx
   18dad:	b9 00 00 00 00       	mov    ecx,0x0
   18db2:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
   18db5:	8b 76 02             	mov    esi,DWORD PTR [esi+0x2]
   18db8:	bf 00 00 00 00       	mov    edi,0x0
   18dbd:	89 c8                	mov    eax,ecx
   18dbf:	09 f0                	or     eax,esi
   18dc1:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   18dc4:	89 d8                	mov    eax,ebx
   18dc6:	09 f8                	or     eax,edi
   18dc8:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   18dcb:	83 ec 08             	sub    esp,0x8
   18dce:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   18dd1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   18dd4:	e8 87 83 fe ff       	call   1160 <idt_load>
   18dd9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:30
}
   18ddc:	90                   	nop
   18ddd:	8d 65 f4             	lea    esp,[ebp-0xc]
   18de0:	5b                   	pop    ebx
   18de1:	5e                   	pop    esi
   18de2:	5f                   	pop    edi
   18de3:	5d                   	pop    ebp
   18de4:	c3                   	ret    

00018de5 <idt_init>:
idt_init():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:33

void idt_init(struct idt_ptr* idtp, int remap_offset)
{
   18de5:	55                   	push   ebp
   18de6:	89 e5                	mov    ebp,esp
   18de8:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/idt.c:36
    //CLR 05/02/2016 - Left off here, ITD stuff isn't working, have an endless loop in cpuFunc.s idt_load
/* setting up the exception handlers and timer, keyboard ISRs */
    struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   18deb:	c7 45 f0 00 30 16 00 	mov    DWORD PTR [ebp-0x10],0x163000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:37
    idt_set_gate (&idtTable[0], 0x08, (int)&_isr_00_wrapper, ACS_INT); //Move this out of the way of the exception handlers
   18df2:	b8 20 00 01 00       	mov    eax,0x10020
   18df7:	68 8e 00 00 00       	push   0x8e
   18dfc:	50                   	push   eax
   18dfd:	6a 08                	push   0x8
   18dff:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   18e02:	e8 31 ff ff ff       	call   18d38 <idt_set_gate>
   18e07:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:38
    idt_set_gate (&idtTable[0+remap_offset], 0x08, (int)&_irq0_handler, ACS_INT); //Move this out of the way of the exception handlers
   18e0a:	b9 92 05 01 00       	mov    ecx,0x10592
   18e0f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18e12:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18e19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e1c:	01 d0                	add    eax,edx
   18e1e:	68 8e 00 00 00       	push   0x8e
   18e23:	51                   	push   ecx
   18e24:	6a 08                	push   0x8
   18e26:	50                   	push   eax
   18e27:	e8 0c ff ff ff       	call   18d38 <idt_set_gate>
   18e2c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:39
    idt_set_gate (&idtTable[1+remap_offset], 0x08, (int)&_isr_01_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18e2f:	b9 d9 05 01 00       	mov    ecx,0x105d9
   18e34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   18e37:	83 c0 01             	add    eax,0x1
   18e3a:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   18e41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e44:	01 d0                	add    eax,edx
   18e46:	68 8e 00 00 00       	push   0x8e
   18e4b:	51                   	push   ecx
   18e4c:	6a 08                	push   0x8
   18e4e:	50                   	push   eax
   18e4f:	e8 e4 fe ff ff       	call   18d38 <idt_set_gate>
   18e54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:40
    idt_set_gate (&idtTable[1], 0x08, (int)&_isr_31_wrapper, ACS_INT); //move this out of the way of the exception handlers
   18e57:	ba af 04 01 00       	mov    edx,0x104af
   18e5c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e5f:	83 c0 08             	add    eax,0x8
   18e62:	68 8e 00 00 00       	push   0x8e
   18e67:	52                   	push   edx
   18e68:	6a 08                	push   0x8
   18e6a:	50                   	push   eax
   18e6b:	e8 c8 fe ff ff       	call   18d38 <idt_set_gate>
   18e70:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:41
    idt_set_gate (&idtTable[2], 0x08, (int)&_isr_02_wrapper, ACS_INT);
   18e73:	ba 3c 00 01 00       	mov    edx,0x1003c
   18e78:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e7b:	83 c0 10             	add    eax,0x10
   18e7e:	68 8e 00 00 00       	push   0x8e
   18e83:	52                   	push   edx
   18e84:	6a 08                	push   0x8
   18e86:	50                   	push   eax
   18e87:	e8 ac fe ff ff       	call   18d38 <idt_set_gate>
   18e8c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:42
    idt_set_gate (&idtTable[3], 0x08, (int)&_isr_03_wrapper, ACS_INT);
   18e8f:	ba 58 00 01 00       	mov    edx,0x10058
   18e94:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18e97:	83 c0 18             	add    eax,0x18
   18e9a:	68 8e 00 00 00       	push   0x8e
   18e9f:	52                   	push   edx
   18ea0:	6a 08                	push   0x8
   18ea2:	50                   	push   eax
   18ea3:	e8 90 fe ff ff       	call   18d38 <idt_set_gate>
   18ea8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:43
    idt_set_gate (&idtTable[4], 0x08, (int)&_isr_04_wrapper, ACS_INT);
   18eab:	ba 68 00 01 00       	mov    edx,0x10068
   18eb0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18eb3:	83 c0 20             	add    eax,0x20
   18eb6:	68 8e 00 00 00       	push   0x8e
   18ebb:	52                   	push   edx
   18ebc:	6a 08                	push   0x8
   18ebe:	50                   	push   eax
   18ebf:	e8 74 fe ff ff       	call   18d38 <idt_set_gate>
   18ec4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:44
    idt_set_gate (&idtTable[5], 0x08, (int)&_isr_05_wrapper, ACS_INT);
   18ec7:	ba 84 00 01 00       	mov    edx,0x10084
   18ecc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18ecf:	83 c0 28             	add    eax,0x28
   18ed2:	68 8e 00 00 00       	push   0x8e
   18ed7:	52                   	push   edx
   18ed8:	6a 08                	push   0x8
   18eda:	50                   	push   eax
   18edb:	e8 58 fe ff ff       	call   18d38 <idt_set_gate>
   18ee0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:45
    idt_set_gate (&idtTable[0x6], 0x08, (int)&_isr_06_wrapper, ACS_INT);    //Invalid Opcode
   18ee3:	ba a0 00 01 00       	mov    edx,0x100a0
   18ee8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18eeb:	83 c0 30             	add    eax,0x30
   18eee:	68 8e 00 00 00       	push   0x8e
   18ef3:	52                   	push   edx
   18ef4:	6a 08                	push   0x8
   18ef6:	50                   	push   eax
   18ef7:	e8 3c fe ff ff       	call   18d38 <idt_set_gate>
   18efc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:46
    idt_set_gate (&idtTable[0x7], 0x08, (int)&_isr_07_wrapper, ACS_INT);
   18eff:	ba bc 00 01 00       	mov    edx,0x100bc
   18f04:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f07:	83 c0 38             	add    eax,0x38
   18f0a:	68 8e 00 00 00       	push   0x8e
   18f0f:	52                   	push   edx
   18f10:	6a 08                	push   0x8
   18f12:	50                   	push   eax
   18f13:	e8 20 fe ff ff       	call   18d38 <idt_set_gate>
   18f18:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:47
    idt_set_gate (&idtTable[0x8], 0x08, (int)&_isr_08_wrapper, ACS_INT);   //Double Fault
   18f1b:	ba d8 00 01 00       	mov    edx,0x100d8
   18f20:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f23:	83 c0 40             	add    eax,0x40
   18f26:	68 8e 00 00 00       	push   0x8e
   18f2b:	52                   	push   edx
   18f2c:	6a 08                	push   0x8
   18f2e:	50                   	push   eax
   18f2f:	e8 04 fe ff ff       	call   18d38 <idt_set_gate>
   18f34:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:48
    idt_set_gate (&idtTable[0x9], 0x08, (int)&_isr_09_wrapper, ACS_INT);
   18f37:	ba 05 01 01 00       	mov    edx,0x10105
   18f3c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f3f:	83 c0 48             	add    eax,0x48
   18f42:	68 8e 00 00 00       	push   0x8e
   18f47:	52                   	push   edx
   18f48:	6a 08                	push   0x8
   18f4a:	50                   	push   eax
   18f4b:	e8 e8 fd ff ff       	call   18d38 <idt_set_gate>
   18f50:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:49
    idt_set_gate (&idtTable[0xa], 0x08, (int)&_isr_10_wrapper, ACS_INT);
   18f53:	ba 1e 01 01 00       	mov    edx,0x1011e
   18f58:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f5b:	83 c0 50             	add    eax,0x50
   18f5e:	68 8e 00 00 00       	push   0x8e
   18f63:	52                   	push   edx
   18f64:	6a 08                	push   0x8
   18f66:	50                   	push   eax
   18f67:	e8 cc fd ff ff       	call   18d38 <idt_set_gate>
   18f6c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:50
    idt_set_gate (&idtTable[0xb], 0x08, (int)&_isr_11_wrapper, ACS_INT);
   18f6f:	ba 37 01 01 00       	mov    edx,0x10137
   18f74:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f77:	83 c0 58             	add    eax,0x58
   18f7a:	68 8e 00 00 00       	push   0x8e
   18f7f:	52                   	push   edx
   18f80:	6a 08                	push   0x8
   18f82:	50                   	push   eax
   18f83:	e8 b0 fd ff ff       	call   18d38 <idt_set_gate>
   18f88:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:51
    idt_set_gate (&idtTable[0xc], 0x08, (int)&_isr_12_wrapper, ACS_INT);
   18f8b:	ba 50 01 01 00       	mov    edx,0x10150
   18f90:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18f93:	83 c0 60             	add    eax,0x60
   18f96:	68 8e 00 00 00       	push   0x8e
   18f9b:	52                   	push   edx
   18f9c:	6a 08                	push   0x8
   18f9e:	50                   	push   eax
   18f9f:	e8 94 fd ff ff       	call   18d38 <idt_set_gate>
   18fa4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:52
    idt_set_gate (&idtTable[0xd/*+remap_offset*/], 0x08, (int)&_isr_13_wrapper, ACS_INT);
   18fa7:	ba 69 01 01 00       	mov    edx,0x10169
   18fac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18faf:	83 c0 68             	add    eax,0x68
   18fb2:	68 8e 00 00 00       	push   0x8e
   18fb7:	52                   	push   edx
   18fb8:	6a 08                	push   0x8
   18fba:	50                   	push   eax
   18fbb:	e8 78 fd ff ff       	call   18d38 <idt_set_gate>
   18fc0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:53
    idt_set_gate (&idtTable[0xe/*+remap_offset*/], 0x08, (int)&_isr_14_wrapper, ACS_INT);   //paging exception
   18fc3:	ba 83 01 01 00       	mov    edx,0x10183
   18fc8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18fcb:	83 c0 70             	add    eax,0x70
   18fce:	68 8e 00 00 00       	push   0x8e
   18fd3:	52                   	push   edx
   18fd4:	6a 08                	push   0x8
   18fd6:	50                   	push   eax
   18fd7:	e8 5c fd ff ff       	call   18d38 <idt_set_gate>
   18fdc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:54
    idt_set_gate (&idtTable[0xf], 0x08, (int)&_isr_15_wrapper, ACS_INT);
   18fdf:	ba ef 02 01 00       	mov    edx,0x102ef
   18fe4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   18fe7:	83 c0 78             	add    eax,0x78
   18fea:	68 8e 00 00 00       	push   0x8e
   18fef:	52                   	push   edx
   18ff0:	6a 08                	push   0x8
   18ff2:	50                   	push   eax
   18ff3:	e8 40 fd ff ff       	call   18d38 <idt_set_gate>
   18ff8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:55
    idt_set_gate (&idtTable[0x10], 0x08, (int)&_isr_16_wrapper, ACS_INT);
   18ffb:	ba 0b 03 01 00       	mov    edx,0x1030b
   19000:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19003:	83 e8 80             	sub    eax,0xffffff80
   19006:	68 8e 00 00 00       	push   0x8e
   1900b:	52                   	push   edx
   1900c:	6a 08                	push   0x8
   1900e:	50                   	push   eax
   1900f:	e8 24 fd ff ff       	call   18d38 <idt_set_gate>
   19014:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:56
    idt_set_gate (&idtTable[0x11], 0x08, (int)&_isr_17_wrapper, ACS_INT);
   19017:	ba 27 03 01 00       	mov    edx,0x10327
   1901c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1901f:	05 88 00 00 00       	add    eax,0x88
   19024:	68 8e 00 00 00       	push   0x8e
   19029:	52                   	push   edx
   1902a:	6a 08                	push   0x8
   1902c:	50                   	push   eax
   1902d:	e8 06 fd ff ff       	call   18d38 <idt_set_gate>
   19032:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:57
    idt_set_gate (&idtTable[0x12], 0x08, (int)&_isr_18_wrapper, ACS_INT);
   19035:	ba 43 03 01 00       	mov    edx,0x10343
   1903a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1903d:	05 90 00 00 00       	add    eax,0x90
   19042:	68 8e 00 00 00       	push   0x8e
   19047:	52                   	push   edx
   19048:	6a 08                	push   0x8
   1904a:	50                   	push   eax
   1904b:	e8 e8 fc ff ff       	call   18d38 <idt_set_gate>
   19050:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:58
    idt_set_gate (&idtTable[0x13], 0x08, (int)&_isr_19_wrapper, ACS_INT);
   19053:	ba 5f 03 01 00       	mov    edx,0x1035f
   19058:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1905b:	05 98 00 00 00       	add    eax,0x98
   19060:	68 8e 00 00 00       	push   0x8e
   19065:	52                   	push   edx
   19066:	6a 08                	push   0x8
   19068:	50                   	push   eax
   19069:	e8 ca fc ff ff       	call   18d38 <idt_set_gate>
   1906e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:59
    idt_set_gate (&idtTable[0x14+remap_offset], 0x08, (int)&_isr_20_wrapper, ACS_INT);   
   19071:	b9 7b 03 01 00       	mov    ecx,0x1037b
   19076:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19079:	83 c0 14             	add    eax,0x14
   1907c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19083:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19086:	01 d0                	add    eax,edx
   19088:	68 8e 00 00 00       	push   0x8e
   1908d:	51                   	push   ecx
   1908e:	6a 08                	push   0x8
   19090:	50                   	push   eax
   19091:	e8 a2 fc ff ff       	call   18d38 <idt_set_gate>
   19096:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:60
    idt_set_gate (&idtTable[0x15+remap_offset], 0x08, (int)&_isr_21_wrapper, ACS_INT);  //leave this alone because this is the initially remapped keyboard irq
   19099:	b9 97 03 01 00       	mov    ecx,0x10397
   1909e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   190a1:	83 c0 15             	add    eax,0x15
   190a4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   190ab:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190ae:	01 d0                	add    eax,edx
   190b0:	68 8e 00 00 00       	push   0x8e
   190b5:	51                   	push   ecx
   190b6:	6a 08                	push   0x8
   190b8:	50                   	push   eax
   190b9:	e8 7a fc ff ff       	call   18d38 <idt_set_gate>
   190be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:61
    idt_set_gate (&idtTable[0x16], 0x08, (int)&_isr_22_wrapper, ACS_INT);
   190c1:	ba b3 03 01 00       	mov    edx,0x103b3
   190c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190c9:	05 b0 00 00 00       	add    eax,0xb0
   190ce:	68 8e 00 00 00       	push   0x8e
   190d3:	52                   	push   edx
   190d4:	6a 08                	push   0x8
   190d6:	50                   	push   eax
   190d7:	e8 5c fc ff ff       	call   18d38 <idt_set_gate>
   190dc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:62
    idt_set_gate (&idtTable[0x17], 0x08, (int)&_isr_23_wrapper, ACS_INT);
   190df:	ba cf 03 01 00       	mov    edx,0x103cf
   190e4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   190e7:	05 b8 00 00 00       	add    eax,0xb8
   190ec:	68 8e 00 00 00       	push   0x8e
   190f1:	52                   	push   edx
   190f2:	6a 08                	push   0x8
   190f4:	50                   	push   eax
   190f5:	e8 3e fc ff ff       	call   18d38 <idt_set_gate>
   190fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:63
    idt_set_gate (&idtTable[0x18], 0x08, (int)&_isr_24_wrapper, ACS_INT);
   190fd:	ba eb 03 01 00       	mov    edx,0x103eb
   19102:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19105:	05 c0 00 00 00       	add    eax,0xc0
   1910a:	68 8e 00 00 00       	push   0x8e
   1910f:	52                   	push   edx
   19110:	6a 08                	push   0x8
   19112:	50                   	push   eax
   19113:	e8 20 fc ff ff       	call   18d38 <idt_set_gate>
   19118:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:64
    idt_set_gate (&idtTable[0x19], 0x08, (int)&_isr_25_wrapper, ACS_INT);
   1911b:	ba 07 04 01 00       	mov    edx,0x10407
   19120:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19123:	05 c8 00 00 00       	add    eax,0xc8
   19128:	68 8e 00 00 00       	push   0x8e
   1912d:	52                   	push   edx
   1912e:	6a 08                	push   0x8
   19130:	50                   	push   eax
   19131:	e8 02 fc ff ff       	call   18d38 <idt_set_gate>
   19136:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:65
    idt_set_gate (&idtTable[0x1a], 0x08, (int)&_isr_26_wrapper, ACS_INT);
   19139:	ba 23 04 01 00       	mov    edx,0x10423
   1913e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19141:	05 d0 00 00 00       	add    eax,0xd0
   19146:	68 8e 00 00 00       	push   0x8e
   1914b:	52                   	push   edx
   1914c:	6a 08                	push   0x8
   1914e:	50                   	push   eax
   1914f:	e8 e4 fb ff ff       	call   18d38 <idt_set_gate>
   19154:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:66
    idt_set_gate (&idtTable[0x1b], 0x08, (int)&_isr_27_wrapper, ACS_INT);
   19157:	ba 3f 04 01 00       	mov    edx,0x1043f
   1915c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1915f:	05 d8 00 00 00       	add    eax,0xd8
   19164:	68 8e 00 00 00       	push   0x8e
   19169:	52                   	push   edx
   1916a:	6a 08                	push   0x8
   1916c:	50                   	push   eax
   1916d:	e8 c6 fb ff ff       	call   18d38 <idt_set_gate>
   19172:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:67
    idt_set_gate (&idtTable[0x1c], 0x08, (int)&_isr_28_wrapper, ACS_INT);
   19175:	ba 5b 04 01 00       	mov    edx,0x1045b
   1917a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1917d:	05 e0 00 00 00       	add    eax,0xe0
   19182:	68 8e 00 00 00       	push   0x8e
   19187:	52                   	push   edx
   19188:	6a 08                	push   0x8
   1918a:	50                   	push   eax
   1918b:	e8 a8 fb ff ff       	call   18d38 <idt_set_gate>
   19190:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:68
    idt_set_gate (&idtTable[0x1d], 0x08, (int)&_isr_29_wrapper, ACS_INT);
   19193:	ba 77 04 01 00       	mov    edx,0x10477
   19198:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1919b:	05 e8 00 00 00       	add    eax,0xe8
   191a0:	68 8e 00 00 00       	push   0x8e
   191a5:	52                   	push   edx
   191a6:	6a 08                	push   0x8
   191a8:	50                   	push   eax
   191a9:	e8 8a fb ff ff       	call   18d38 <idt_set_gate>
   191ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:69
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
   191b1:	ba 93 04 01 00       	mov    edx,0x10493
   191b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   191b9:	05 f0 00 00 00       	add    eax,0xf0
   191be:	68 8e 00 00 00       	push   0x8e
   191c3:	52                   	push   edx
   191c4:	6a 08                	push   0x8
   191c6:	50                   	push   eax
   191c7:	e8 6c fb ff ff       	call   18d38 <idt_set_gate>
   191cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:70
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
   191cf:	ba af 04 01 00       	mov    edx,0x104af
   191d4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   191d7:	05 f8 00 00 00       	add    eax,0xf8
   191dc:	68 8e 00 00 00       	push   0x8e
   191e1:	52                   	push   edx
   191e2:	6a 08                	push   0x8
   191e4:	50                   	push   eax
   191e5:	e8 4e fb ff ff       	call   18d38 <idt_set_gate>
   191ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:71
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   191ed:	b9 76 05 01 00       	mov    ecx,0x10576
   191f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   191f5:	83 c0 20             	add    eax,0x20
   191f8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   191ff:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19202:	01 d0                	add    eax,edx
   19204:	68 8e 00 00 00       	push   0x8e
   19209:	51                   	push   ecx
   1920a:	6a 08                	push   0x8
   1920c:	50                   	push   eax
   1920d:	e8 26 fb ff ff       	call   18d38 <idt_set_gate>
   19212:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:72
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
   19215:	b9 76 05 01 00       	mov    ecx,0x10576
   1921a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1921d:	83 c0 21             	add    eax,0x21
   19220:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19227:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1922a:	01 d0                	add    eax,edx
   1922c:	68 8e 00 00 00       	push   0x8e
   19231:	51                   	push   ecx
   19232:	6a 08                	push   0x8
   19234:	50                   	push   eax
   19235:	e8 fe fa ff ff       	call   18d38 <idt_set_gate>
   1923a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74

    for (int cnt=0x22;cnt<0xff;cnt++)
   1923d:	c7 45 f4 22 00 00 00 	mov    DWORD PTR [ebp-0xc],0x22
   19244:	eb 29                	jmp    1926f <idt_init+0x48a>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:75 (discriminator 3)
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
   19246:	b9 76 05 01 00       	mov    ecx,0x10576
   1924b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1924e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19255:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19258:	01 d0                	add    eax,edx
   1925a:	68 8e 00 00 00       	push   0x8e
   1925f:	51                   	push   ecx
   19260:	6a 08                	push   0x8
   19262:	50                   	push   eax
   19263:	e8 d0 fa ff ff       	call   18d38 <idt_set_gate>
   19268:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 3)
    idt_set_gate (&idtTable[0x1e], 0x08, (int)&_isr_30_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x1f], 0x08, (int)&_isr_31_wrapper, ACS_INT);
    idt_set_gate (&idtTable[0x20+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //
    idt_set_gate (&idtTable[0x21+remap_offset], 0x08, (int)&_isr_32_wrapper, ACS_INT);               //

    for (int cnt=0x22;cnt<0xff;cnt++)
   1926b:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/idt.c:74 (discriminator 1)
   1926f:	81 7d f4 fe 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xfe
   19276:	7e ce                	jle    19246 <idt_init+0x461>
/home/yogi/src/os/chrisOS/src/cpu/idt.c:76
        idt_set_gate (&idtTable[cnt], 0x08, (int)&_isr_32_wrapper, ACS_INT);
    idt_install(idtp);
   19278:	83 ec 0c             	sub    esp,0xc
   1927b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1927e:	e8 ff fa ff ff       	call   18d82 <idt_install>
   19283:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:78

    idt_set_gate (&idtTable[0x80], 0x3b, (int)&_call_gate_wrapper, ACS_TASK_GATE | ACS_DPL_3);               //
   19286:	ba 7c 06 01 00       	mov    edx,0x1067c
   1928b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1928e:	05 00 04 00 00       	add    eax,0x400
   19293:	6a 65                	push   0x65
   19295:	52                   	push   edx
   19296:	6a 3b                	push   0x3b
   19298:	50                   	push   eax
   19299:	e8 9a fa ff ff       	call   18d38 <idt_set_gate>
   1929e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:80
    
}
   192a1:	90                   	nop
   192a2:	c9                   	leave  
   192a3:	c3                   	ret    

000192a4 <idt_get_gate>:
idt_get_gate():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:84

//void idt_get_gate(struct idt_entry* idtTable, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned *char flags)
void idt_get_gate(struct idt_entry *idt, uint8_t idtIndex, unsigned short *sel, uint32_t *base, unsigned char *flags)
{
   192a4:	55                   	push   ebp
   192a5:	89 e5                	mov    ebp,esp
   192a7:	83 ec 04             	sub    esp,0x4
   192aa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   192ad:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/cpu/idt.c:85
    *sel = idt[idtIndex].sel;
   192b0:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   192b4:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   192bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   192be:	01 d0                	add    eax,edx
   192c0:	0f b7 50 02          	movzx  edx,WORD PTR [eax+0x2]
   192c4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   192c7:	66 89 10             	mov    WORD PTR [eax],dx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:86
    *base = (idt[idtIndex].base_hi << 16) | idt[idtIndex].base_lo;
   192ca:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   192ce:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   192d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   192d8:	01 d0                	add    eax,edx
   192da:	0f b7 40 06          	movzx  eax,WORD PTR [eax+0x6]
   192de:	0f b7 c0             	movzx  eax,ax
   192e1:	c1 e0 10             	shl    eax,0x10
   192e4:	89 c2                	mov    edx,eax
   192e6:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   192ea:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   192f1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   192f4:	01 c8                	add    eax,ecx
   192f6:	0f b7 00             	movzx  eax,WORD PTR [eax]
   192f9:	0f b7 c0             	movzx  eax,ax
   192fc:	09 d0                	or     eax,edx
   192fe:	89 c2                	mov    edx,eax
   19300:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   19303:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/idt.c:87
    *flags = idt[idtIndex].flags;
   19305:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   19309:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   19310:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19313:	01 d0                	add    eax,edx
   19315:	0f b6 50 05          	movzx  edx,BYTE PTR [eax+0x5]
   19319:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   1931c:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/idt.c:88
}
   1931e:	90                   	nop
   1931f:	c9                   	leave  
   19320:	c3                   	ret    

00019321 <idt_get_gate_address>:
idt_get_gate_address():
/home/yogi/src/os/chrisOS/src/cpu/idt.c:91

uintptr_t idt_get_gate_address(int vector)
{
   19321:	55                   	push   ebp
   19322:	89 e5                	mov    ebp,esp
   19324:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/idt.c:92
   struct idt_entry* idtTable=(struct idt_entry*)IDT_TABLE_ADDRESS;
   19327:	c7 45 fc 00 30 16 00 	mov    DWORD PTR [ebp-0x4],0x163000
/home/yogi/src/os/chrisOS/src/cpu/idt.c:96
    unsigned short sel;
    uint32_t base;
    unsigned char flags;
    idt_get_gate(idtTable,vector,&sel,&base,&flags);
   1932e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19331:	0f b6 c0             	movzx  eax,al
   19334:	8d 55 f3             	lea    edx,[ebp-0xd]
   19337:	52                   	push   edx
   19338:	8d 55 f4             	lea    edx,[ebp-0xc]
   1933b:	52                   	push   edx
   1933c:	8d 55 fa             	lea    edx,[ebp-0x6]
   1933f:	52                   	push   edx
   19340:	50                   	push   eax
   19341:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   19344:	e8 5b ff ff ff       	call   192a4 <idt_get_gate>
   19349:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/idt.c:97
    return base;
   1934c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/cpu/idt.c:98
   1934f:	c9                   	leave  
   19350:	c3                   	ret    
   19351:	66 90                	xchg   ax,ax
   19353:	90                   	nop

00019354 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   19354:	55                   	push   ebp
   19355:	89 e5                	mov    ebp,esp
   19357:	83 ec 08             	sub    esp,0x8
   1935a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1935d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19360:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   19364:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   19367:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   1936b:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   1936f:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   19370:	90                   	nop
   19371:	c9                   	leave  
   19372:	c3                   	ret    

00019373 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   19373:	55                   	push   ebp
   19374:	89 e5                	mov    ebp,esp
   19376:	83 ec 14             	sub    esp,0x14
   19379:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1937c:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19380:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   19384:	89 c2                	mov    edx,eax
   19386:	ec                   	in     al,dx
   19387:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   1938a:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   1938e:	c9                   	leave  
   1938f:	c3                   	ret    

00019390 <irq0_handler>:
irq0_handler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:42
unsigned volatile char kKeyStatus[11];
extern struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf);
extern void kpagingUpdatePresentFlagA(uint32_t address, bool present);

void irq0_handler()
{
   19390:	55                   	push   ebp
   19391:	89 e5                	mov    ebp,esp
   19393:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:47
#ifndef DEBUG_NONE
static char currTime[50];
static struct tm theDateTime;
#endif
        *kTicksSinceStart=*kTicksSinceStart+1;
   19396:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   1939b:	8b 15 a0 47 12 00    	mov    edx,DWORD PTR ds:0x1247a0
   193a1:	8b 12                	mov    edx,DWORD PTR [edx]
   193a3:	83 c2 01             	add    edx,0x1
   193a6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:48
        if (*kTicksSinceStart % kTicksPerSecond == 0)
   193a8:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   193ad:	8b 00                	mov    eax,DWORD PTR [eax]
   193af:	8b 15 c0 47 12 00    	mov    edx,DWORD PTR ds:0x1247c0
   193b5:	89 d1                	mov    ecx,edx
   193b7:	ba 00 00 00 00       	mov    edx,0x0
   193bc:	f7 f1                	div    ecx
   193be:	89 d0                	mov    eax,edx
   193c0:	85 c0                	test   eax,eax
   193c2:	75 0d                	jne    193d1 <irq0_handler+0x41>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:49
            kSystemCurrentTime++;
   193c4:	a1 cc 47 12 00       	mov    eax,ds:0x1247cc
   193c9:	83 c0 01             	add    eax,0x1
   193cc:	a3 cc 47 12 00       	mov    ds:0x1247cc,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:51
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_EXPANDED_TICK) == DEBUG_EXPANDED_TICK)
   193d1:	a1 78 48 12 00       	mov    eax,ds:0x124878
   193d6:	83 e0 04             	and    eax,0x4
   193d9:	85 c0                	test   eax,eax
   193db:	0f 84 83 00 00 00    	je     19464 <irq0_handler+0xd4>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:53
        {
            cursorSavePosition();
   193e1:	e8 bd e9 ff ff       	call   17da3 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:54
            gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   193e6:	83 ec 08             	sub    esp,0x8
   193e9:	68 e0 a4 09 00       	push   0x9a4e0
   193ee:	68 cc 47 12 00       	push   0x1247cc
   193f3:	e8 71 e7 00 00       	call   27b69 <gmtime_r>
   193f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:55
            strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   193fb:	68 e0 a4 09 00       	push   0x9a4e0
   19400:	68 e0 2f 08 00       	push   0x82fe0
   19405:	6a 32                	push   0x32
   19407:	68 20 a5 09 00       	push   0x9a520
   1940c:	e8 9f 72 ff ff       	call   106b0 <strftime>
   19411:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:56
            cursorMoveTo(0,24);
   19414:	83 ec 08             	sub    esp,0x8
   19417:	6a 18                	push   0x18
   19419:	6a 00                	push   0x0
   1941b:	e8 37 ed ff ff       	call   18157 <cursorMoveTo>
   19420:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:57
            printk("The time is currently %s", &currTime);
   19423:	83 ec 08             	sub    esp,0x8
   19426:	68 20 a5 09 00       	push   0x9a520
   1942b:	68 f2 2f 08 00       	push   0x82ff2
   19430:	e8 d2 e0 00 00       	call   27507 <printk>
   19435:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:58
            cursorMoveTo(65,24);
   19438:	83 ec 08             	sub    esp,0x8
   1943b:	6a 18                	push   0x18
   1943d:	6a 41                	push   0x41
   1943f:	e8 13 ed ff ff       	call   18157 <cursorMoveTo>
   19444:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:59
            printk("ticks=%d", *kTicksSinceStart);
   19447:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   1944c:	8b 00                	mov    eax,DWORD PTR [eax]
   1944e:	83 ec 08             	sub    esp,0x8
   19451:	50                   	push   eax
   19452:	68 0b 30 08 00       	push   0x8300b
   19457:	e8 ab e0 00 00       	call   27507 <printk>
   1945c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:60
            cursorRestorePosition();
   1945f:	e8 8b e9 ff ff       	call   17def <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:64
        }
#endif
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_TICK) == DEBUG_TICK)
   19464:	a1 78 48 12 00       	mov    eax,ds:0x124878
   19469:	83 e0 02             	and    eax,0x2
   1946c:	85 c0                	test   eax,eax
   1946e:	74 68                	je     194d8 <irq0_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:66
        {
            cursorSavePosition();
   19470:	e8 2e e9 ff ff       	call   17da3 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:67
            cursorMoveTo(55,SYS_VGA_HEIGHT-1);
   19475:	83 ec 08             	sub    esp,0x8
   19478:	6a 31                	push   0x31
   1947a:	6a 37                	push   0x37
   1947c:	e8 d6 ec ff ff       	call   18157 <cursorMoveTo>
   19481:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:70
            //printf("0x%04X:0x%08X 0x%08X",exceptionCS, exceptionEIP, exceptionFlags);
            //kTermMoveTo(65,0);
            printk("%u",*kTicksSinceStart);
   19484:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   19489:	8b 00                	mov    eax,DWORD PTR [eax]
   1948b:	83 ec 08             	sub    esp,0x8
   1948e:	50                   	push   eax
   1948f:	68 14 30 08 00       	push   0x83014
   19494:	e8 6e e0 00 00       	call   27507 <printk>
   19499:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71
            printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   1949c:	8b 15 38 47 12 00    	mov    edx,DWORD PTR ds:0x124738
   194a2:	a1 3c 47 12 00       	mov    eax,ds:0x12473c
   194a7:	8b 0d 30 47 12 00    	mov    ecx,DWORD PTR ds:0x124730
   194ad:	81 e1 00 02 00 00    	and    ecx,0x200
   194b3:	85 c9                	test   ecx,ecx
   194b5:	74 07                	je     194be <irq0_handler+0x12e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71 (discriminator 1)
   194b7:	b9 49 00 00 00       	mov    ecx,0x49
   194bc:	eb 05                	jmp    194c3 <irq0_handler+0x133>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71 (discriminator 2)
   194be:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:71 (discriminator 4)
   194c3:	52                   	push   edx
   194c4:	50                   	push   eax
   194c5:	51                   	push   ecx
   194c6:	68 17 30 08 00       	push   0x83017
   194cb:	e8 37 e0 00 00       	call   27507 <printk>
   194d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:76 (discriminator 4)
            //gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
            //strftime((char*)&currTime, 50, "%H:%M:%S", &theDateTime);
            //kTermMoveTo(65,0);
            //printf("%s",currTime);
            cursorRestorePosition();
   194d3:	e8 17 e9 ff ff       	call   17def <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:79
        }
#endif
}
   194d8:	90                   	nop
   194d9:	c9                   	leave  
   194da:	c3                   	ret    

000194db <kbd_handler>:
kbd_handler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:82

void kbd_handler()
{
   194db:	55                   	push   ebp
   194dc:	89 e5                	mov    ebp,esp
   194de:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:83
    unsigned char lKeyControlVal=0;
   194e1:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:84
    unsigned char rawKey=0;
   194e5:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:85
    unsigned char translatedKeypress=0;
   194e9:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:89
    static char currTime[50];
    static struct tm theDateTime;
   
    rawKey = inb(KEYB_DATA_PORT);
   194ed:	6a 60                	push   0x60
   194ef:	e8 7f fe ff ff       	call   19373 <inb>
   194f4:	83 c4 04             	add    esp,0x4
   194f7:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:90
    kKeyChar = rawKey;//& 0x80;
   194fa:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   194fe:	a2 c0 a4 09 00       	mov    ds:0x9a4c0,al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:92

    __asm__("cli\n");
   19503:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:94
    
    switch(rawKey)  
   19504:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   19508:	3d 9d 00 00 00       	cmp    eax,0x9d
   1950d:	74 53                	je     19562 <kbd_handler+0x87>
   1950f:	3d 9d 00 00 00       	cmp    eax,0x9d
   19514:	7f 11                	jg     19527 <kbd_handler+0x4c>
   19516:	83 f8 2a             	cmp    eax,0x2a
   19519:	74 23                	je     1953e <kbd_handler+0x63>
   1951b:	83 f8 38             	cmp    eax,0x38
   1951e:	74 4e                	je     1956e <kbd_handler+0x93>
   19520:	83 f8 1d             	cmp    eax,0x1d
   19523:	74 31                	je     19556 <kbd_handler+0x7b>
   19525:	eb 75                	jmp    1959c <kbd_handler+0xc1>
   19527:	3d b8 00 00 00       	cmp    eax,0xb8
   1952c:	74 4c                	je     1957a <kbd_handler+0x9f>
   1952e:	3d ba 00 00 00       	cmp    eax,0xba
   19533:	74 51                	je     19586 <kbd_handler+0xab>
   19535:	3d aa 00 00 00       	cmp    eax,0xaa
   1953a:	74 0e                	je     1954a <kbd_handler+0x6f>
   1953c:	eb 5e                	jmp    1959c <kbd_handler+0xc1>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:96
    {
        case KEY_SHIFT_DN: kKeyStatus[INDEX_SHIFT]=1;break;
   1953e:	c6 05 64 65 09 00 01 	mov    BYTE PTR ds:0x96564,0x1
   19545:	e9 10 03 00 00       	jmp    1985a <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:97
        case KEY_SHIFT_UP: kKeyStatus[INDEX_SHIFT]=0;break;
   1954a:	c6 05 64 65 09 00 00 	mov    BYTE PTR ds:0x96564,0x0
   19551:	e9 04 03 00 00       	jmp    1985a <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:98
        case KEY_CTRL_DN: kKeyStatus[INDEX_CTRL]=1;break;
   19556:	c6 05 65 65 09 00 01 	mov    BYTE PTR ds:0x96565,0x1
   1955d:	e9 f8 02 00 00       	jmp    1985a <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:99
        case KEY_CTRL_UP: kKeyStatus[INDEX_CTRL]=0;break;
   19562:	c6 05 65 65 09 00 00 	mov    BYTE PTR ds:0x96565,0x0
   19569:	e9 ec 02 00 00       	jmp    1985a <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:100
        case KEY_ALT_DN: kKeyStatus[INDEX_ALT]=1;break;
   1956e:	c6 05 66 65 09 00 01 	mov    BYTE PTR ds:0x96566,0x1
   19575:	e9 e0 02 00 00       	jmp    1985a <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:101
        case KEY_ALT_UP: kKeyStatus[INDEX_ALT]=0;break;
   1957a:	c6 05 66 65 09 00 00 	mov    BYTE PTR ds:0x96566,0x0
   19581:	e9 d4 02 00 00       	jmp    1985a <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:102
        case KEY_CAPSLOCK_UP: kKeyStatus[INDEX_CAPSLOCK]=!kKeyStatus[INDEX_CAPSLOCK];break;
   19586:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   1958d:	84 c0                	test   al,al
   1958f:	0f 94 c0             	sete   al
   19592:	a2 67 65 09 00       	mov    ds:0x96567,al
   19597:	e9 be 02 00 00       	jmp    1985a <kbd_handler+0x37f>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110
//        case MAKE_UP: kKeyStatus[INDEX_UP]=0;break;
//        case MAKE_DOWN: kKeyStatus[INDEX_DOWN]=0;break;
       default:
//printk("%02X",rawKey);
           //changed from if rawkey & 0x80, so that keydown triggers the key being input
           if (rawKey==BREAK_RIGHT || rawKey==BREAK_LEFT || rawKey==BREAK_UP || rawKey==BREAK_DOWN)
   1959c:	80 7d f5 cd          	cmp    BYTE PTR [ebp-0xb],0xcd
   195a0:	74 12                	je     195b4 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 1)
   195a2:	80 7d f5 cb          	cmp    BYTE PTR [ebp-0xb],0xcb
   195a6:	74 0c                	je     195b4 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 2)
   195a8:	80 7d f5 c8          	cmp    BYTE PTR [ebp-0xb],0xc8
   195ac:	74 06                	je     195b4 <kbd_handler+0xd9>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:110 (discriminator 3)
   195ae:	80 7d f5 d0          	cmp    BYTE PTR [ebp-0xb],0xd0
   195b2:	75 2f                	jne    195e3 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:111
               if (kKeyboardBufferPtr<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   195b4:	a1 60 49 12 00       	mov    eax,ds:0x124960
   195b9:	3d 2f 25 16 00       	cmp    eax,0x16252f
   195be:	77 23                	ja     195e3 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:111 (discriminator 1)
   195c0:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   195c7:	84 c0                	test   al,al
   195c9:	75 18                	jne    195e3 <kbd_handler+0x108>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:114
               //CLR 01/10/2017: Increment the buffer pointer first
               {    
                   kKeyboardBufferPtr++;
   195cb:	a1 60 49 12 00       	mov    eax,ds:0x124960
   195d0:	83 c0 01             	add    eax,0x1
   195d3:	a3 60 49 12 00       	mov    ds:0x124960,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:115
                   *kKeyboardBufferPtr=rawKey;
   195d8:	a1 60 49 12 00       	mov    eax,ds:0x124960
   195dd:	0f b6 55 f5          	movzx  edx,BYTE PTR [ebp-0xb]
   195e1:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:117
               }
           if (!(rawKey & 0x80))
   195e3:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   195e7:	84 c0                	test   al,al
   195e9:	0f 88 6a 02 00 00    	js     19859 <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:121
           {
                //rawKey &= 0x7f;
               //printk("%02X",rawKey); 48=up, 50=down
                 if (kKeyStatus[INDEX_SHIFT] || kKeyStatus[INDEX_CAPSLOCK])
   195ef:	0f b6 05 64 65 09 00 	movzx  eax,BYTE PTR ds:0x96564
   195f6:	84 c0                	test   al,al
   195f8:	75 0b                	jne    19605 <kbd_handler+0x12a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:121 (discriminator 1)
   195fa:	0f b6 05 67 65 09 00 	movzx  eax,BYTE PTR ds:0x96567
   19601:	84 c0                	test   al,al
   19603:	74 10                	je     19615 <kbd_handler+0x13a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:123
                 {
                     translatedKeypress=keyboard_map_up[rawKey];
   19605:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   19609:	0f b6 80 60 2f 08 00 	movzx  eax,BYTE PTR [eax+0x82f60]
   19610:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
   19613:	eb 0e                	jmp    19623 <kbd_handler+0x148>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:126
                 }
                 else
                     translatedKeypress=keyboard_map[rawKey];
   19615:	0f b6 45 f5          	movzx  eax,BYTE PTR [ebp-0xb]
   19619:	0f b6 80 e0 2e 08 00 	movzx  eax,BYTE PTR [eax+0x82ee0]
   19620:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:133
//                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
//                 {
//                      printf("%u, %u, %c\n",kKeyChar, rawKey, translatedKeypress);
//                 }
#endif
                if (kKeyStatus[INDEX_CTRL])
   19623:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   1962a:	84 c0                	test   al,al
   1962c:	74 14                	je     19642 <kbd_handler+0x167>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:135
                {
                    printk("^");
   1962e:	83 ec 0c             	sub    esp,0xc
   19631:	68 25 30 08 00       	push   0x83025
   19636:	e8 cc de 00 00       	call   27507 <printk>
   1963b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:136
                    translatedKeypress-=32;
   1963e:	80 6d f7 20          	sub    BYTE PTR [ebp-0x9],0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:138
                }
            if (kKeyboardBufferPtr<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
   19642:	a1 60 49 12 00       	mov    eax,ds:0x124960
   19647:	3d 2f 25 16 00       	cmp    eax,0x16252f
   1964c:	77 78                	ja     196c6 <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:138 (discriminator 1)
   1964e:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   19655:	84 c0                	test   al,al
   19657:	75 6d                	jne    196c6 <kbd_handler+0x1eb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:141
            {
                //CLR 01/10/2017: Increment the buffer pointer first
                {   kKeyboardBufferPtr++;
   19659:	a1 60 49 12 00       	mov    eax,ds:0x124960
   1965e:	83 c0 01             	add    eax,0x1
   19661:	a3 60 49 12 00       	mov    ds:0x124960,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:142
                    *kKeyboardBufferPtr=translatedKeypress;
   19666:	a1 60 49 12 00       	mov    eax,ds:0x124960
   1966b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   1966f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:145
                }
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   19671:	a1 78 48 12 00       	mov    eax,ds:0x124878
   19676:	83 e0 10             	and    eax,0x10
   19679:	85 c0                	test   eax,eax
   1967b:	74 1c                	je     19699 <kbd_handler+0x1be>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:146
                    printk("kbd_handler: %c-(%08X)\n",translatedKeypress, kKeyboardBufferPtr);
   1967d:	8b 15 60 49 12 00    	mov    edx,DWORD PTR ds:0x124960
   19683:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   19687:	83 ec 04             	sub    esp,0x4
   1968a:	52                   	push   edx
   1968b:	50                   	push   eax
   1968c:	68 27 30 08 00       	push   0x83027
   19691:	e8 71 de 00 00       	call   27507 <printk>
   19696:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:148
#endif
                cursorSavePosition();
   19699:	e8 05 e7 ff ff       	call   17da3 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:149
                cursorMoveTo(78,0);
   1969e:	83 ec 08             	sub    esp,0x8
   196a1:	6a 00                	push   0x0
   196a3:	6a 4e                	push   0x4e
   196a5:	e8 ad ea ff ff       	call   18157 <cursorMoveTo>
   196aa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:150
                printk("%c",'k');
   196ad:	83 ec 08             	sub    esp,0x8
   196b0:	6a 6b                	push   0x6b
   196b2:	68 3f 30 08 00       	push   0x8303f
   196b7:	e8 4b de 00 00       	call   27507 <printk>
   196bc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:151
                cursorRestorePosition();
   196bf:	e8 2b e7 ff ff       	call   17def <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:139
                {
                    printk("^");
                    translatedKeypress-=32;
                }
            if (kKeyboardBufferPtr<(char*)KEYBOARD_BUFFER_ADDRESS+KEYBOARD_BUFFER_SIZE && !kKeyStatus[INDEX_ALT])
            {
   196c4:	eb 4d                	jmp    19713 <kbd_handler+0x238>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:156
                cursorRestorePosition();
            }
            else
            {
#ifndef DEBUG_NONE
                if ((kDebugLevel & DEBUG_KEYBOARD) == DEBUG_KEYBOARD)
   196c6:	a1 78 48 12 00       	mov    eax,ds:0x124878
   196cb:	83 e0 10             	and    eax,0x10
   196ce:	85 c0                	test   eax,eax
   196d0:	74 16                	je     196e8 <kbd_handler+0x20d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:157
                      printk("noRoomForKey: %c\n",kKeyboardBufferPtr);
   196d2:	a1 60 49 12 00       	mov    eax,ds:0x124960
   196d7:	83 ec 08             	sub    esp,0x8
   196da:	50                   	push   eax
   196db:	68 42 30 08 00       	push   0x83042
   196e0:	e8 22 de 00 00       	call   27507 <printk>
   196e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:159
#endif
                cursorSavePosition();
   196e8:	e8 b6 e6 ff ff       	call   17da3 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:160
                cursorMoveTo(78,0);
   196ed:	83 ec 08             	sub    esp,0x8
   196f0:	6a 00                	push   0x0
   196f2:	6a 4e                	push   0x4e
   196f4:	e8 5e ea ff ff       	call   18157 <cursorMoveTo>
   196f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:161
                printk("%c",'K');
   196fc:	83 ec 08             	sub    esp,0x8
   196ff:	6a 4b                	push   0x4b
   19701:	68 3f 30 08 00       	push   0x8303f
   19706:	e8 fc dd 00 00       	call   27507 <printk>
   1970b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:162
                cursorRestorePosition();
   1970e:	e8 dc e6 ff ff       	call   17def <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:165
            }
                 //Debug
                 if (kKeyStatus[INDEX_ALT] && translatedKeypress==0x6A)
   19713:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1971a:	84 c0                	test   al,al
   1971c:	74 07                	je     19725 <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:165 (discriminator 1)
   1971e:	80 7d f7 6a          	cmp    BYTE PTR [ebp-0x9],0x6a
   19722:	75 01                	jne    19725 <kbd_handler+0x24a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:167
                 {
                     __asm("int 0x3");
   19724:	cc                   	int3   
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:169
                 }
            if (kKeyStatus[INDEX_ALT] && kKeyStatus[INDEX_CTRL] && translatedKeypress==0xE0)
   19725:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   1972c:	84 c0                	test   al,al
   1972e:	74 22                	je     19752 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:169 (discriminator 1)
   19730:	0f b6 05 65 65 09 00 	movzx  eax,BYTE PTR ds:0x96565
   19737:	84 c0                	test   al,al
   19739:	74 17                	je     19752 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:169 (discriminator 2)
   1973b:	80 7d f7 e0          	cmp    BYTE PTR [ebp-0x9],0xe0
   1973f:	75 11                	jne    19752 <kbd_handler+0x277>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:171
            {
                translatedKeypress=0;
   19741:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:172
                reboot(false);
   19745:	83 ec 0c             	sub    esp,0xc
   19748:	6a 00                	push   0x0
   1974a:	e8 7e c2 00 00       	call   259cd <reboot>
   1974f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:174
            }
            if (kKeyStatus[INDEX_ALT])
   19752:	0f b6 05 66 65 09 00 	movzx  eax,BYTE PTR ds:0x96566
   19759:	84 c0                	test   al,al
   1975b:	0f 84 f8 00 00 00    	je     19859 <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:176
            {
                if (translatedKeypress=='c')
   19761:	80 7d f7 63          	cmp    BYTE PTR [ebp-0x9],0x63
   19765:	75 4f                	jne    197b6 <kbd_handler+0x2db>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:178
                {
                    printk("%u",*kTicksSinceStart);
   19767:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   1976c:	8b 00                	mov    eax,DWORD PTR [eax]
   1976e:	83 ec 08             	sub    esp,0x8
   19771:	50                   	push   eax
   19772:	68 14 30 08 00       	push   0x83014
   19777:	e8 8b dd 00 00       	call   27507 <printk>
   1977c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:179
                    printk("-%c-%04X:%08X",(exceptionFlags & 0x200)==0x200?'I':'i',exceptionCS, exceptionEIP);
   1977f:	8b 15 38 47 12 00    	mov    edx,DWORD PTR ds:0x124738
   19785:	a1 3c 47 12 00       	mov    eax,ds:0x12473c
   1978a:	8b 0d 30 47 12 00    	mov    ecx,DWORD PTR ds:0x124730
   19790:	81 e1 00 02 00 00    	and    ecx,0x200
   19796:	85 c9                	test   ecx,ecx
   19798:	74 07                	je     197a1 <kbd_handler+0x2c6>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:179 (discriminator 1)
   1979a:	b9 49 00 00 00       	mov    ecx,0x49
   1979f:	eb 05                	jmp    197a6 <kbd_handler+0x2cb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:179 (discriminator 2)
   197a1:	b9 69 00 00 00       	mov    ecx,0x69
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:179 (discriminator 4)
   197a6:	52                   	push   edx
   197a7:	50                   	push   eax
   197a8:	51                   	push   ecx
   197a9:	68 17 30 08 00       	push   0x83017
   197ae:	e8 54 dd 00 00       	call   27507 <printk>
   197b3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:181
                }
                if (translatedKeypress=='b')
   197b6:	80 7d f7 62          	cmp    BYTE PTR [ebp-0x9],0x62
   197ba:	0f 85 83 00 00 00    	jne    19843 <kbd_handler+0x368>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:183
                {
                    cursorSavePosition();
   197c0:	e8 de e5 ff ff       	call   17da3 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:184
                    gmtime_r((time_t*)&kSystemCurrentTime,&theDateTime);
   197c5:	83 ec 08             	sub    esp,0x8
   197c8:	68 60 a5 09 00       	push   0x9a560
   197cd:	68 cc 47 12 00       	push   0x1247cc
   197d2:	e8 92 e3 00 00       	call   27b69 <gmtime_r>
   197d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:185
                    strftime((char*)&currTime, 50, "%m/%d/%Y %H:%M:%S", &theDateTime);
   197da:	68 60 a5 09 00       	push   0x9a560
   197df:	68 e0 2f 08 00       	push   0x82fe0
   197e4:	6a 32                	push   0x32
   197e6:	68 a0 a5 09 00       	push   0x9a5a0
   197eb:	e8 c0 6e ff ff       	call   106b0 <strftime>
   197f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:186
                    cursorMoveTo(0,SYS_VGA_HEIGHT-1);
   197f3:	83 ec 08             	sub    esp,0x8
   197f6:	6a 31                	push   0x31
   197f8:	6a 00                	push   0x0
   197fa:	e8 58 e9 ff ff       	call   18157 <cursorMoveTo>
   197ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:187
                    printk("The time is currently %s", &currTime);
   19802:	83 ec 08             	sub    esp,0x8
   19805:	68 a0 a5 09 00       	push   0x9a5a0
   1980a:	68 f2 2f 08 00       	push   0x82ff2
   1980f:	e8 f3 dc 00 00       	call   27507 <printk>
   19814:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:188
                    cursorMoveTo(65,SYS_VGA_HEIGHT-1);
   19817:	83 ec 08             	sub    esp,0x8
   1981a:	6a 31                	push   0x31
   1981c:	6a 41                	push   0x41
   1981e:	e8 34 e9 ff ff       	call   18157 <cursorMoveTo>
   19823:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:189
                    printk("ticks=%d", *kTicksSinceStart);
   19826:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   1982b:	8b 00                	mov    eax,DWORD PTR [eax]
   1982d:	83 ec 08             	sub    esp,0x8
   19830:	50                   	push   eax
   19831:	68 0b 30 08 00       	push   0x8300b
   19836:	e8 cc dc 00 00       	call   27507 <printk>
   1983b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:190
                    cursorRestorePosition();
   1983e:	e8 ac e5 ff ff       	call   17def <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:192
                }
                if (translatedKeypress=='d')
   19843:	80 7d f7 64          	cmp    BYTE PTR [ebp-0x9],0x64
   19847:	75 05                	jne    1984e <kbd_handler+0x373>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:194
                {
                    printDumpedRegs();
   19849:	e8 73 be 00 00       	call   256c1 <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:196
                }
                if (translatedKeypress=='e')
   1984e:	80 7d f7 65          	cmp    BYTE PTR [ebp-0x9],0x65
   19852:	75 05                	jne    19859 <kbd_handler+0x37e>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:198
                {
                    dumpKernelAddresses();
   19854:	e8 f0 c1 00 00       	call   25a49 <dumpKernelAddresses>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:202
                }
            }
        }
        break;
   19859:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:205
    }
        
    lKeyControlVal = inb(KEYB_CTRL_PORT);
   1985a:	83 ec 0c             	sub    esp,0xc
   1985d:	6a 61                	push   0x61
   1985f:	e8 0f fb ff ff       	call   19373 <inb>
   19864:	83 c4 10             	add    esp,0x10
   19867:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:206
    lKeyControlVal |= 0x82;
   1986a:	80 4d f6 82          	or     BYTE PTR [ebp-0xa],0x82
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:207
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   1986e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   19872:	83 ec 08             	sub    esp,0x8
   19875:	50                   	push   eax
   19876:	6a 61                	push   0x61
   19878:	e8 d7 fa ff ff       	call   19354 <outb>
   1987d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:208
    lKeyControlVal &= 0x7f;
   19880:	80 65 f6 7f          	and    BYTE PTR [ebp-0xa],0x7f
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:209
    outb(KEYB_CTRL_PORT, lKeyControlVal);
   19884:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   19888:	83 ec 08             	sub    esp,0x8
   1988b:	50                   	push   eax
   1988c:	6a 61                	push   0x61
   1988e:	e8 c1 fa ff ff       	call   19354 <outb>
   19893:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:210
    return;
   19896:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:211
}
   19897:	c9                   	leave  
   19898:	c3                   	ret    

00019899 <pagingExceptionHandler>:
pagingExceptionHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:214

void pagingExceptionHandler()
{
   19899:	55                   	push   ebp
   1989a:	89 e5                	mov    ebp,esp
   1989c:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:215
    uint32_t lPDEValue=0;
   1989f:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:216
    uint32_t lPTEValue=0;
   198a6:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:217
    uint32_t lPDEAddress=0, lPTEAddress=0;
   198ad:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   198b4:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:218
    uint32_t lOldDebugLevel=0;
   198bb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:220

    if (exceptionNumber==0x0e)
   198c2:	0f b7 05 e4 46 12 00 	movzx  eax,WORD PTR ds:0x1246e4
   198c9:	66 83 f8 0e          	cmp    ax,0xe
   198cd:	75 14                	jne    198e3 <pagingExceptionHandler+0x4a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:222
        //Get the address of the page table entry for the exception
        lPTEAddress=kPagingGet4kPTEntryAddress(exceptionCR2);
   198cf:	a1 40 47 12 00       	mov    eax,ds:0x124740
   198d4:	83 ec 0c             	sub    esp,0xc
   198d7:	50                   	push   eax
   198d8:	e8 e0 7b ff ff       	call   114bd <kPagingGet4kPTEntryAddress>
   198dd:	83 c4 10             	add    esp,0x10
   198e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:225

#ifndef DEBUG_NONE
    if (!kPagingInitDone)
   198e3:	0f b6 05 e1 47 12 00 	movzx  eax,BYTE PTR ds:0x1247e1
   198ea:	83 f0 01             	xor    eax,0x1
   198ed:	84 c0                	test   al,al
   198ef:	74 12                	je     19903 <pagingExceptionHandler+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:227
    {
        lOldDebugLevel=kDebugLevel;
   198f1:	a1 78 48 12 00       	mov    eax,ds:0x124878
   198f6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:228
        kDebugLevel&=!DEBUG_EXCEPTIONS;
   198f9:	c7 05 78 48 12 00 00 	mov    DWORD PTR ds:0x124878,0x0
   19900:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:230
    }
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19903:	a1 78 48 12 00       	mov    eax,ds:0x124878
   19908:	25 00 10 00 00       	and    eax,0x1000
   1990d:	85 c0                	test   eax,eax
   1990f:	0f 84 99 00 00 00    	je     199ae <pagingExceptionHandler+0x115>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:232
    {
        lPDEValue=kPagingGet4kPDEntryValue(exceptionCR2);
   19915:	a1 40 47 12 00       	mov    eax,ds:0x124740
   1991a:	83 ec 0c             	sub    esp,0xc
   1991d:	50                   	push   eax
   1991e:	e8 e8 7a ff ff       	call   1140b <kPagingGet4kPDEntryValue>
   19923:	83 c4 10             	add    esp,0x10
   19926:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:233
        lPTEValue=kPagingGet4kPTEntryValue(exceptionCR2);
   19929:	a1 40 47 12 00       	mov    eax,ds:0x124740
   1992e:	83 ec 0c             	sub    esp,0xc
   19931:	50                   	push   eax
   19932:	e8 ee 7b ff ff       	call   11525 <kPagingGet4kPTEntryValue>
   19937:	83 c4 10             	add    esp,0x10
   1993a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:234
        lPDEAddress=kPagingGet4kPDEntryAddress(exceptionCR2);
   1993d:	a1 40 47 12 00       	mov    eax,ds:0x124740
   19942:	83 ec 0c             	sub    esp,0xc
   19945:	50                   	push   eax
   19946:	e8 1e 7b ff ff       	call   11469 <kPagingGet4kPDEntryAddress>
   1994b:	83 c4 10             	add    esp,0x10
   1994e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:235
        if (exceptionNumber==0x0e)
   19951:	0f b7 05 e4 46 12 00 	movzx  eax,WORD PTR ds:0x1246e4
   19958:	66 83 f8 0e          	cmp    ax,0xe
   1995c:	75 16                	jne    19974 <pagingExceptionHandler+0xdb>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:236
          printk("\nPaging handler called for virtual address 0x%02X\n",exceptionCR2);
   1995e:	a1 40 47 12 00       	mov    eax,ds:0x124740
   19963:	83 ec 08             	sub    esp,0x8
   19966:	50                   	push   eax
   19967:	68 54 30 08 00       	push   0x83054
   1996c:	e8 96 db 00 00       	call   27507 <printk>
   19971:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:237
          printk("PDE@0x%08X=0x%08X, PTE@0x%08X=0x%08X\n", lPDEAddress, lPDEValue, lPTEAddress, lPTEValue);
   19974:	83 ec 0c             	sub    esp,0xc
   19977:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1997a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1997d:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   19980:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   19983:	68 88 30 08 00       	push   0x83088
   19988:	e8 7a db 00 00       	call   27507 <printk>
   1998d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:238
          printDumpedRegs();
   19990:	e8 2c bd 00 00       	call   256c1 <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:239
          printk("handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   19995:	a1 b8 47 12 00       	mov    eax,ds:0x1247b8
   1999a:	83 c0 01             	add    eax,0x1
   1999d:	83 ec 08             	sub    esp,0x8
   199a0:	50                   	push   eax
   199a1:	68 b0 30 08 00       	push   0x830b0
   199a6:	e8 5c db 00 00       	call   27507 <printk>
   199ab:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:242
    }
#endif
    if (lOldDebugLevel)
   199ae:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   199b2:	74 08                	je     199bc <pagingExceptionHandler+0x123>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:243
        kDebugLevel=lOldDebugLevel;
   199b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   199b7:	a3 78 48 12 00       	mov    ds:0x124878,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:244
    if ((exceptionCR2&0xFFFFF000)==0xC0000000 && (!kPagingInitDone))
   199bc:	a1 40 47 12 00       	mov    eax,ds:0x124740
   199c1:	25 00 f0 ff ff       	and    eax,0xfffff000
   199c6:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   199cb:	75 41                	jne    19a0e <pagingExceptionHandler+0x175>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:244 (discriminator 1)
   199cd:	0f b6 05 e1 47 12 00 	movzx  eax,BYTE PTR ds:0x1247e1
   199d4:	83 f0 01             	xor    eax,0x1
   199d7:	84 c0                	test   al,al
   199d9:	74 33                	je     19a0e <pagingExceptionHandler+0x175>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:247
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_PAGING) == DEBUG_PAGING)
   199db:	a1 78 48 12 00       	mov    eax,ds:0x124878
   199e0:	83 e0 40             	and    eax,0x40
   199e3:	85 c0                	test   eax,eax
   199e5:	74 16                	je     199fd <pagingExceptionHandler+0x164>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:248
            printk("\n\tpagingExceptionHandler: Updating 0x%08X to read/write for WP test ...\n\t",exceptionCR2);
   199e7:	a1 40 47 12 00       	mov    eax,ds:0x124740
   199ec:	83 ec 08             	sub    esp,0x8
   199ef:	50                   	push   eax
   199f0:	68 dc 30 08 00       	push   0x830dc
   199f5:	e8 0d db 00 00       	call   27507 <printk>
   199fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:250
#endif
        kPagingSetPageReadOnlyFlag((uintptr_t*)lPTEAddress, false);
   199fd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19a00:	83 ec 08             	sub    esp,0x8
   19a03:	6a 00                	push   0x0
   19a05:	50                   	push   eax
   19a06:	e8 35 7b ff ff       	call   11540 <kPagingSetPageReadOnlyFlag>
   19a0b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:253
    }
    
    kPagingExceptionsSinceStart++;
   19a0e:	a1 b8 47 12 00       	mov    eax,ds:0x1247b8
   19a13:	83 c0 01             	add    eax,0x1
   19a16:	a3 b8 47 12 00       	mov    ds:0x1247b8,eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:260
//    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
//    {
//        waitForKeyboardKey();
//    }
#endif
    __asm__("push eax\n mov eax,0\nmov cr2,eax\npop eax\n  #reset CR2 after paging exception handled");
   19a1b:	50                   	push   eax
   19a1c:	b8 00 00 00 00       	mov    eax,0x0
   19a21:	0f 22 d0             	mov    cr2,eax
   19a24:	58                   	pop    eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:261
    if ((!kPagingInitDone) && exceptionCR2==0xC0000000)
   19a25:	0f b6 05 e1 47 12 00 	movzx  eax,BYTE PTR ds:0x1247e1
   19a2c:	83 f0 01             	xor    eax,0x1
   19a2f:	84 c0                	test   al,al
   19a31:	74 18                	je     19a4b <pagingExceptionHandler+0x1b2>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:261 (discriminator 1)
   19a33:	a1 40 47 12 00       	mov    eax,ds:0x124740
   19a38:	3d 00 00 00 c0       	cmp    eax,0xc0000000
   19a3d:	75 0c                	jne    19a4b <pagingExceptionHandler+0x1b2>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:263
    {
        exceptionCR2=0;
   19a3f:	c7 05 40 47 12 00 00 	mov    DWORD PTR ds:0x124740,0x0
   19a46:	00 00 00 
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:264
        return;
   19a49:	eb 04                	jmp    19a4f <pagingExceptionHandler+0x1b6>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:266
    }
    __asm__("sti\n");
   19a4b:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:267 (discriminator 1)
    pagingExceptionStop: __asm__("hlt\n"); goto pagingExceptionStop;
   19a4c:	f4                   	hlt    
   19a4d:	eb fd                	jmp    19a4c <pagingExceptionHandler+0x1b3>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:270
    __asm__("cli");
    __asm__("hlt");
}
   19a4f:	c9                   	leave  
   19a50:	c3                   	ret    

00019a51 <defaultISRHandler>:
defaultISRHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:273

void defaultISRHandler()
{
   19a51:	55                   	push   ebp
   19a52:	89 e5                	mov    ebp,esp
   19a54:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:276
    //terminal_clear();
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_EXCEPTIONS) == DEBUG_EXCEPTIONS)
   19a57:	a1 78 48 12 00       	mov    eax,ds:0x124878
   19a5c:	25 00 10 00 00       	and    eax,0x1000
   19a61:	85 c0                	test   eax,eax
   19a63:	74 3e                	je     19aa3 <defaultISRHandler+0x52>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:278
    {
        printk("Exception handler called for exception # 0x%02x\n\n", exceptionNumber);
   19a65:	0f b7 05 e4 46 12 00 	movzx  eax,WORD PTR ds:0x1246e4
   19a6c:	0f b7 c0             	movzx  eax,ax
   19a6f:	83 ec 08             	sub    esp,0x8
   19a72:	50                   	push   eax
   19a73:	68 28 31 08 00       	push   0x83128
   19a78:	e8 8a da 00 00       	call   27507 <printk>
   19a7d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:279
        printDumpedRegs();
   19a80:	e8 3c bc 00 00       	call   256c1 <printDumpedRegs>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:280
        printd(DEBUG_EXCEPTIONS,"handler called %u times since system start\n",kPagingExceptionsSinceStart+1);
   19a85:	a1 b8 47 12 00       	mov    eax,ds:0x1247b8
   19a8a:	83 c0 01             	add    eax,0x1
   19a8d:	83 ec 04             	sub    esp,0x4
   19a90:	50                   	push   eax
   19a91:	68 b0 30 08 00       	push   0x830b0
   19a96:	68 00 10 00 00       	push   0x1000
   19a9b:	e8 87 da 00 00       	call   27527 <printd>
   19aa0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:294 (discriminator 1)

//    __asm__("mov eax,%0\nmov ebx,%1\n"::"r" (exceptionAX), "r" (exceptionEIP));
//    return;
    
defaultHandlerLoop:
    __asm__("cli");
   19aa3:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:295 (discriminator 1)
    __asm__("hlt");
   19aa4:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:296 (discriminator 1)
    goto defaultHandlerLoop;
   19aa5:	eb fc                	jmp    19aa3 <defaultISRHandler+0x52>

00019aa7 <doubleFaultHandler>:
doubleFaultHandler():
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:300
}

void doubleFaultHandler()
{
   19aa7:	55                   	push   ebp
   19aa8:	89 e5                	mov    ebp,esp
   19aaa:	53                   	push   ebx
   19aab:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:301
    uint32_t esp = (uint32_t)exceptionSavedESP;
   19aae:	a1 2c 47 12 00       	mov    eax,ds:0x12472c
   19ab3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:302
        terminal_clear();
   19ab6:	e8 87 e3 ff ff       	call   17e42 <terminal_clear>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:303
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
   19abb:	8b 1d 40 47 12 00    	mov    ebx,DWORD PTR ds:0x124740
   19ac1:	8b 0d 38 47 12 00    	mov    ecx,DWORD PTR ds:0x124738
   19ac7:	8b 15 3c 47 12 00    	mov    edx,DWORD PTR ds:0x12473c
   19acd:	0f b7 05 e4 46 12 00 	movzx  eax,WORD PTR ds:0x1246e4
   19ad4:	0f b7 c0             	movzx  eax,ax
   19ad7:	83 ec 0c             	sub    esp,0xc
   19ada:	53                   	push   ebx
   19adb:	51                   	push   ecx
   19adc:	52                   	push   edx
   19add:	50                   	push   eax
   19ade:	68 5c 31 08 00       	push   0x8315c
   19ae3:	e8 1f da 00 00       	call   27507 <printk>
   19ae8:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:304
        printk ("Stack:\n");
   19aeb:	83 ec 0c             	sub    esp,0xc
   19aee:	68 9f 31 08 00       	push   0x8319f
   19af3:	e8 0f da 00 00       	call   27507 <printk>
   19af8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:305
        for (int cnt=0;cnt<10;cnt++)
   19afb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   19b02:	eb 2b                	jmp    19b2f <doubleFaultHandler+0x88>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:307 (discriminator 3)
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   19b04:	a1 e8 46 12 00       	mov    eax,ds:0x1246e8
   19b09:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   19b0c:	c1 e2 02             	shl    edx,0x2
   19b0f:	01 d0                	add    eax,edx
   19b11:	8b 00                	mov    eax,DWORD PTR [eax]
   19b13:	83 ec 04             	sub    esp,0x4
   19b16:	50                   	push   eax
   19b17:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   19b1a:	68 a7 31 08 00       	push   0x831a7
   19b1f:	e8 e3 d9 00 00       	call   27507 <printk>
   19b24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:308 (discriminator 3)
            esp+=4;
   19b27:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:305 (discriminator 3)
{
    uint32_t esp = (uint32_t)exceptionSavedESP;
        terminal_clear();
        printk("Double Fault for exception %02X, CS:EIP = %04X:%08x, error = %08X\n", exceptionNumber, exceptionCS, exceptionEIP, exceptionCR2);
        printk ("Stack:\n");
        for (int cnt=0;cnt<10;cnt++)
   19b2b:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:305 (discriminator 1)
   19b2f:	83 7d f0 09          	cmp    DWORD PTR [ebp-0x10],0x9
   19b33:	7e cf                	jle    19b04 <doubleFaultHandler+0x5d>
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:310
        {
            printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
            esp+=4;
        }
    __asm__("cli");
   19b35:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:311
    __asm__("hlt");
   19b36:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/cpu/irqHandlers.c:312
   19b37:	90                   	nop
   19b38:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19b3b:	c9                   	leave  
   19b3c:	c3                   	ret    
   19b3d:	66 90                	xchg   ax,ax
   19b3f:	90                   	nop

00019b40 <rdmsr64>:
rdmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:4
#include "i386/cpu.h"

uint64_t rdmsr64(unsigned index)
{
   19b40:	55                   	push   ebp
   19b41:	89 e5                	mov    ebp,esp
   19b43:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:7
    unsigned long long ret;

    __asm__ ("rdmsr" : "=A"(ret) : "c"(index));
   19b46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19b49:	89 c1                	mov    ecx,eax
   19b4b:	0f 32                	rdmsr  
   19b4d:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19b50:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:8
    return ret;
   19b53:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19b56:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/cpu/msr.c:9
}
   19b59:	c9                   	leave  
   19b5a:	c3                   	ret    

00019b5b <rdmsr32>:
rdmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:12

void rdmsr32(unsigned index,uint32_t* loVal, uint32_t* hiVal)
{
   19b5b:	55                   	push   ebp
   19b5c:	89 e5                	mov    ebp,esp
   19b5e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:13
    unsigned long long lTemp = rdmsr64(index);
   19b61:	83 ec 04             	sub    esp,0x4
   19b64:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19b67:	e8 d4 ff ff ff       	call   19b40 <rdmsr64>
   19b6c:	83 c4 08             	add    esp,0x8
   19b6f:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19b72:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:14
    *hiVal = lTemp >> 32;
   19b75:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19b78:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   19b7b:	89 d0                	mov    eax,edx
   19b7d:	31 d2                	xor    edx,edx
   19b7f:	89 c2                	mov    edx,eax
   19b81:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   19b84:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:15
    *loVal = lTemp & 0xFFFFFFFF;
   19b86:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   19b89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19b8c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/cpu/msr.c:16
}
   19b8e:	90                   	nop
   19b8f:	c9                   	leave  
   19b90:	c3                   	ret    

00019b91 <wrmsr64>:
wrmsr64():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:19

void wrmsr64(unsigned index, uint64_t val)
{
   19b91:	55                   	push   ebp
   19b92:	89 e5                	mov    ebp,esp
   19b94:	83 ec 08             	sub    esp,0x8
   19b97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19b9a:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   19b9d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   19ba0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/cpu/msr.c:20
    __asm__ volatile ("wrmsr" : : "c"(index), "A"(val));
   19ba3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   19ba6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   19ba9:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   19bac:	0f 30                	wrmsr  
/home/yogi/src/os/chrisOS/src/cpu/msr.c:21
}
   19bae:	90                   	nop
   19baf:	c9                   	leave  
   19bb0:	c3                   	ret    

00019bb1 <wrmsr32>:
wrmsr32():
/home/yogi/src/os/chrisOS/src/cpu/msr.c:24

void wrmsr32(unsigned index, uint32_t loVal, uint32_t hiVal)
{
   19bb1:	55                   	push   ebp
   19bb2:	89 e5                	mov    ebp,esp
   19bb4:	57                   	push   edi
   19bb5:	56                   	push   esi
   19bb6:	53                   	push   ebx
   19bb7:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/cpu/msr.c:27
    //NOTE: hiVal=EDX, loVal=EAX
    //asm volatile ("wrmsr" : : "c"(index), "a"(eaxVal), "d" edxVal);
    wrmsr64(index, ((uint64_t)hiVal << 32) | loVal);
   19bba:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   19bbd:	bb 00 00 00 00       	mov    ebx,0x0
   19bc2:	89 cb                	mov    ebx,ecx
   19bc4:	b9 00 00 00 00       	mov    ecx,0x0
   19bc9:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   19bcc:	bf 00 00 00 00       	mov    edi,0x0
   19bd1:	89 c8                	mov    eax,ecx
   19bd3:	09 f0                	or     eax,esi
   19bd5:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   19bd8:	89 d8                	mov    eax,ebx
   19bda:	09 f8                	or     eax,edi
   19bdc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   19bdf:	83 ec 04             	sub    esp,0x4
   19be2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   19be5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   19be8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19beb:	e8 a1 ff ff ff       	call   19b91 <wrmsr64>
   19bf0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/msr.c:29
    
}
   19bf3:	90                   	nop
   19bf4:	8d 65 f4             	lea    esp,[ebp-0xc]
   19bf7:	5b                   	pop    ebx
   19bf8:	5e                   	pop    esi
   19bf9:	5f                   	pop    edi
   19bfa:	5d                   	pop    ebp
   19bfb:	c3                   	ret    

00019bfc <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   19bfc:	55                   	push   ebp
   19bfd:	89 e5                	mov    ebp,esp
   19bff:	83 ec 08             	sub    esp,0x8
   19c02:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19c05:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19c08:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   19c0c:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   19c0f:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   19c13:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   19c17:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   19c18:	90                   	nop
   19c19:	c9                   	leave  
   19c1a:	c3                   	ret    

00019c1b <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   19c1b:	55                   	push   ebp
   19c1c:	89 e5                	mov    ebp,esp
   19c1e:	83 ec 14             	sub    esp,0x14
   19c21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19c24:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   19c28:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   19c2c:	89 c2                	mov    edx,eax
   19c2e:	ec                   	in     al,dx
   19c2f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   19c32:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   19c36:	c9                   	leave  
   19c37:	c3                   	ret    

00019c38 <IRQ_set_mask>:
IRQ_set_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:4
#include "io.h"
#include "i386/bits/types.h"

void IRQ_set_mask(unsigned char IRQline) {
   19c38:	55                   	push   ebp
   19c39:	89 e5                	mov    ebp,esp
   19c3b:	53                   	push   ebx
   19c3c:	83 ec 14             	sub    esp,0x14
   19c3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19c42:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:8
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   19c45:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19c49:	77 08                	ja     19c53 <IRQ_set_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:9
        port = PIC1_DATA;
   19c4b:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19c51:	eb 0a                	jmp    19c5d <IRQ_set_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:11
    } else {
        port = PIC2_DATA;
   19c53:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:12
        IRQline -= 8;
   19c59:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:14
    }
    value = inb(port) | (1 << IRQline);
   19c5d:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19c61:	50                   	push   eax
   19c62:	e8 b4 ff ff ff       	call   19c1b <inb>
   19c67:	83 c4 04             	add    esp,0x4
   19c6a:	89 c3                	mov    ebx,eax
   19c6c:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19c70:	ba 01 00 00 00       	mov    edx,0x1
   19c75:	89 c1                	mov    ecx,eax
   19c77:	d3 e2                	shl    edx,cl
   19c79:	89 d0                	mov    eax,edx
   19c7b:	09 d8                	or     eax,ebx
   19c7d:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:15
    outb(port, value);        
   19c80:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   19c84:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19c88:	52                   	push   edx
   19c89:	50                   	push   eax
   19c8a:	e8 6d ff ff ff       	call   19bfc <outb>
   19c8f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:16
}
   19c92:	90                   	nop
   19c93:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19c96:	c9                   	leave  
   19c97:	c3                   	ret    

00019c98 <IRQ_clear_mask>:
IRQ_clear_mask():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:18
 
void IRQ_clear_mask(unsigned char IRQline) {
   19c98:	55                   	push   ebp
   19c99:	89 e5                	mov    ebp,esp
   19c9b:	53                   	push   ebx
   19c9c:	83 ec 14             	sub    esp,0x14
   19c9f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19ca2:	88 45 e8             	mov    BYTE PTR [ebp-0x18],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:22
    uint16_t port;
    uint8_t value;
 
    if(IRQline < 8) {
   19ca5:	80 7d e8 07          	cmp    BYTE PTR [ebp-0x18],0x7
   19ca9:	77 08                	ja     19cb3 <IRQ_clear_mask+0x1b>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:23
        port = PIC1_DATA;
   19cab:	66 c7 45 fa 21 00    	mov    WORD PTR [ebp-0x6],0x21
   19cb1:	eb 0a                	jmp    19cbd <IRQ_clear_mask+0x25>
/home/yogi/src/os/chrisOS/src/cpu/ports.c:25
    } else {
        port = PIC2_DATA;
   19cb3:	66 c7 45 fa a1 00    	mov    WORD PTR [ebp-0x6],0xa1
/home/yogi/src/os/chrisOS/src/cpu/ports.c:26
        IRQline -= 8;
   19cb9:	80 6d e8 08          	sub    BYTE PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:28
    }
    value = inb(port) & ~(1 << IRQline);
   19cbd:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19cc1:	50                   	push   eax
   19cc2:	e8 54 ff ff ff       	call   19c1b <inb>
   19cc7:	83 c4 04             	add    esp,0x4
   19cca:	89 c2                	mov    edx,eax
   19ccc:	0f b6 45 e8          	movzx  eax,BYTE PTR [ebp-0x18]
   19cd0:	bb 01 00 00 00       	mov    ebx,0x1
   19cd5:	89 c1                	mov    ecx,eax
   19cd7:	d3 e3                	shl    ebx,cl
   19cd9:	89 d8                	mov    eax,ebx
   19cdb:	f7 d0                	not    eax
   19cdd:	21 d0                	and    eax,edx
   19cdf:	88 45 f9             	mov    BYTE PTR [ebp-0x7],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:29
    outb(port, value);        
   19ce2:	0f b6 55 f9          	movzx  edx,BYTE PTR [ebp-0x7]
   19ce6:	0f b7 45 fa          	movzx  eax,WORD PTR [ebp-0x6]
   19cea:	52                   	push   edx
   19ceb:	50                   	push   eax
   19cec:	e8 0b ff ff ff       	call   19bfc <outb>
   19cf1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:30
}
   19cf4:	90                   	nop
   19cf5:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   19cf8:	c9                   	leave  
   19cf9:	c3                   	ret    

00019cfa <PIC_remap>:
PIC_remap():
/home/yogi/src/os/chrisOS/src/cpu/ports.c:54
	offset1 - vector offset for master PIC
		vectors on the master become offset1..offset1+7
	offset2 - same for slave PIC: offset2..offset2+7
*/
void PIC_remap(int offset1, int offset2)
{
   19cfa:	55                   	push   ebp
   19cfb:	89 e5                	mov    ebp,esp
   19cfd:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/ports.c:57
	unsigned char a1, a2;
 
	a1 = inb(PIC1_DATA);                        // save masks
   19d00:	6a 21                	push   0x21
   19d02:	e8 14 ff ff ff       	call   19c1b <inb>
   19d07:	83 c4 04             	add    esp,0x4
   19d0a:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:58
	a2 = inb(PIC2_DATA);
   19d0d:	68 a1 00 00 00       	push   0xa1
   19d12:	e8 04 ff ff ff       	call   19c1b <inb>
   19d17:	83 c4 04             	add    esp,0x4
   19d1a:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/cpu/ports.c:60
 
	outb(PIC1_CMD, ICW1_INIT+ICW1_ICW4);  // starts the initialization sequence (in cascade mode)
   19d1d:	6a 11                	push   0x11
   19d1f:	6a 20                	push   0x20
   19d21:	e8 d6 fe ff ff       	call   19bfc <outb>
   19d26:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:61
	__asm__("nop;");
   19d29:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:62
	outb(PIC2_CMD, ICW1_INIT+ICW1_ICW4);
   19d2a:	6a 11                	push   0x11
   19d2c:	68 a0 00 00 00       	push   0xa0
   19d31:	e8 c6 fe ff ff       	call   19bfc <outb>
   19d36:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:63
	__asm__("nop;");
   19d39:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:64
	outb(PIC1_DATA, offset1);                 // ICW2: Master PIC vector offset
   19d3a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19d3d:	0f b6 c0             	movzx  eax,al
   19d40:	50                   	push   eax
   19d41:	6a 21                	push   0x21
   19d43:	e8 b4 fe ff ff       	call   19bfc <outb>
   19d48:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:65
	__asm__("nop;");
   19d4b:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:66
	outb(PIC2_DATA, offset2);                 // ICW2: Slave PIC vector offset
   19d4c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19d4f:	0f b6 c0             	movzx  eax,al
   19d52:	50                   	push   eax
   19d53:	68 a1 00 00 00       	push   0xa1
   19d58:	e8 9f fe ff ff       	call   19bfc <outb>
   19d5d:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:67
	__asm__("nop;");
   19d60:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:68
	outb(PIC1_DATA, 4);                       // ICW3: tell Master PIC that there is a slave PIC at IRQ2 (0000 0100)
   19d61:	6a 04                	push   0x4
   19d63:	6a 21                	push   0x21
   19d65:	e8 92 fe ff ff       	call   19bfc <outb>
   19d6a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:69
	__asm__("nop;");
   19d6d:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:70
	outb(PIC2_DATA, 2);                       // ICW3: tell Slave PIC its cascade identity (0000 0010)
   19d6e:	6a 02                	push   0x2
   19d70:	68 a1 00 00 00       	push   0xa1
   19d75:	e8 82 fe ff ff       	call   19bfc <outb>
   19d7a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:71
	__asm__("nop;");
   19d7d:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:73
 
	outb(PIC1_DATA, ICW4_8086);
   19d7e:	6a 01                	push   0x1
   19d80:	6a 21                	push   0x21
   19d82:	e8 75 fe ff ff       	call   19bfc <outb>
   19d87:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:74
	__asm__("nop;");
   19d8a:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:75
	outb(PIC2_DATA, ICW4_8086);
   19d8b:	6a 01                	push   0x1
   19d8d:	68 a1 00 00 00       	push   0xa1
   19d92:	e8 65 fe ff ff       	call   19bfc <outb>
   19d97:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:76
	__asm__("nop;");
   19d9a:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/ports.c:78
 
	outb(PIC1_DATA, a1);   // restore saved masks.
   19d9b:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   19d9f:	50                   	push   eax
   19da0:	6a 21                	push   0x21
   19da2:	e8 55 fe ff ff       	call   19bfc <outb>
   19da7:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:79
	outb(PIC2_DATA, a2);
   19daa:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   19dae:	50                   	push   eax
   19daf:	68 a1 00 00 00       	push   0xa1
   19db4:	e8 43 fe ff ff       	call   19bfc <outb>
   19db9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/cpu/ports.c:80
   19dbc:	90                   	nop
   19dbd:	c9                   	leave  
   19dbe:	c3                   	ret    
   19dbf:	90                   	nop

00019dc0 <mpScanForConfig>:
mpScanForConfig():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:19
extern uint32_t kDebugLevel;
extern mpConfig_t* kMPConfigTable;
extern uintptr_t* kIOAPICPtr;

bool HIGH_CODE_SECTION mpScanForConfig(int start, int length)
{
   19dc0:	55                   	push   ebp
   19dc1:	89 e5                	mov    ebp,esp
   19dc3:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:22
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19dc6:	a1 78 48 12 00       	mov    eax,ds:0x124878
   19dcb:	25 00 08 00 00       	and    eax,0x800
   19dd0:	85 c0                	test   eax,eax
   19dd2:	74 1e                	je     19df2 <mpScanForConfig+0x32>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:23
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
   19dd4:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19dd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19dda:	01 d0                	add    eax,edx
   19ddc:	50                   	push   eax
   19ddd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   19de0:	68 c0 32 08 00       	push   0x832c0
   19de5:	68 00 08 00 00       	push   0x800
   19dea:	e8 38 d7 00 00       	call   27527 <printd>
   19def:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19df2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   19df5:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   19df8:	eb 33                	jmp    19e2d <mpScanForConfig+0x6d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:27
    {
        lMP=(struct mpf_intel*)cnt;
   19dfa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19dfd:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:28
        if(!strncmp(lMP->signature,"_MP_",4))
   19e00:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19e03:	83 ec 04             	sub    esp,0x4
   19e06:	6a 04                	push   0x4
   19e08:	68 e2 32 08 00       	push   0x832e2
   19e0d:	50                   	push   eax
   19e0e:	e8 45 7e ff ff       	call   11c58 <strncmp>
   19e13:	83 c4 10             	add    esp,0x10
   19e16:	85 c0                	test   eax,eax
   19e18:	75 0f                	jne    19e29 <mpScanForConfig+0x69>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:30
        {
            mp=(struct mpf_intel*)cnt;
   19e1a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   19e1d:	a3 70 65 09 00       	mov    ds:0x96570,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:31
            return true;
   19e22:	b8 01 00 00 00       	mov    eax,0x1
   19e27:	eb 16                	jmp    19e3f <mpScanForConfig+0x7f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 2)
    struct mpf_intel* lMP;
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
        printd(DEBUG_MP,"mpScanForConfig; 0x%08X-->0x%08X\n", start, start+length);
#endif
    for (int cnt=start;cnt<start+length;cnt++)
   19e29:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:25 (discriminator 1)
   19e2d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   19e30:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   19e33:	01 d0                	add    eax,edx
   19e35:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   19e38:	7f c0                	jg     19dfa <mpScanForConfig+0x3a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:34
        {
            mp=(struct mpf_intel*)cnt;
            return true;
        }
    }
    return false;
   19e3a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:35
}
   19e3f:	c9                   	leave  
   19e40:	c3                   	ret    

00019e41 <mpFindTables>:
mpFindTables():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:38

bool HIGH_CODE_SECTION  mpFindTables()
{
   19e41:	55                   	push   ebp
   19e42:	89 e5                	mov    ebp,esp
   19e44:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/cpu/smp.c:39
    uint16_t* lEBDAPtr=(uint16_t*)0x40e;
   19e47:	c7 45 f0 0e 04 00 00 	mov    DWORD PTR [ebp-0x10],0x40e
/home/yogi/src/os/chrisOS/src/cpu/smp.c:42
    bool lResult;
    
    if (lEBDAPtr != 0)
   19e4e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   19e52:	74 20                	je     19e74 <mpFindTables+0x33>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:43
        lResult=mpScanForConfig(*lEBDAPtr<<4, 0x400);
   19e54:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   19e57:	0f b7 00             	movzx  eax,WORD PTR [eax]
   19e5a:	0f b7 c0             	movzx  eax,ax
   19e5d:	c1 e0 04             	shl    eax,0x4
   19e60:	83 ec 08             	sub    esp,0x8
   19e63:	68 00 04 00 00       	push   0x400
   19e68:	50                   	push   eax
   19e69:	e8 52 ff ff ff       	call   19dc0 <mpScanForConfig>
   19e6e:	83 c4 10             	add    esp,0x10
   19e71:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:44
    if (!lResult)
   19e74:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   19e78:	83 f0 01             	xor    eax,0x1
   19e7b:	84 c0                	test   al,al
   19e7d:	74 62                	je     19ee1 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:45
        if (!mpScanForConfig(0x9fc00, 0x400))
   19e7f:	83 ec 08             	sub    esp,0x8
   19e82:	68 00 04 00 00       	push   0x400
   19e87:	68 00 fc 09 00       	push   0x9fc00
   19e8c:	e8 2f ff ff ff       	call   19dc0 <mpScanForConfig>
   19e91:	83 c4 10             	add    esp,0x10
   19e94:	83 f0 01             	xor    eax,0x1
   19e97:	84 c0                	test   al,al
   19e99:	74 46                	je     19ee1 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:46
            if (!mpScanForConfig(0xF0000, 0xFFFF))
   19e9b:	83 ec 08             	sub    esp,0x8
   19e9e:	68 ff ff 00 00       	push   0xffff
   19ea3:	68 00 00 0f 00       	push   0xf0000
   19ea8:	e8 13 ff ff ff       	call   19dc0 <mpScanForConfig>
   19ead:	83 c4 10             	add    esp,0x10
   19eb0:	83 f0 01             	xor    eax,0x1
   19eb3:	84 c0                	test   al,al
   19eb5:	74 2a                	je     19ee1 <mpFindTables+0xa0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:49
            {
#ifndef DEBUG_NONE
                 if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19eb7:	a1 78 48 12 00       	mov    eax,ds:0x124878
   19ebc:	25 00 08 00 00       	and    eax,0x800
   19ec1:	85 c0                	test   eax,eax
   19ec3:	74 15                	je     19eda <mpFindTables+0x99>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:50
                    printd(DEBUG_MP,"MP tables not found, MP not allowed, proceeding as single processor.\n");
   19ec5:	83 ec 08             	sub    esp,0x8
   19ec8:	68 e8 32 08 00       	push   0x832e8
   19ecd:	68 00 08 00 00       	push   0x800
   19ed2:	e8 50 d6 00 00       	call   27527 <printd>
   19ed7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:52
#endif
                return false;
   19eda:	b8 00 00 00 00       	mov    eax,0x0
   19edf:	eb 38                	jmp    19f19 <mpFindTables+0xd8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:55
            }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_MP) == DEBUG_MP)
   19ee1:	a1 78 48 12 00       	mov    eax,ds:0x124878
   19ee6:	25 00 08 00 00       	and    eax,0x800
   19eeb:	85 c0                	test   eax,eax
   19eed:	74 25                	je     19f14 <mpFindTables+0xd3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:56
        printd(DEBUG_MP,"MP tables found at 0x%08X, spec %c\n", mp, mp->specification);
   19eef:	a1 70 65 09 00       	mov    eax,ds:0x96570
   19ef4:	0f b6 40 09          	movzx  eax,BYTE PTR [eax+0x9]
   19ef8:	0f b6 d0             	movzx  edx,al
   19efb:	a1 70 65 09 00       	mov    eax,ds:0x96570
   19f00:	52                   	push   edx
   19f01:	50                   	push   eax
   19f02:	68 30 33 08 00       	push   0x83330
   19f07:	68 00 08 00 00       	push   0x800
   19f0c:	e8 16 d6 00 00       	call   27527 <printd>
   19f11:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:58
#endif
    return true;
   19f14:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:60
        
}
   19f19:	c9                   	leave  
   19f1a:	c3                   	ret    

00019f1b <printMPTable>:
printMPTable():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:63

void HIGH_CODE_SECTION printMPTable()
{
   19f1b:	55                   	push   ebp
   19f1c:	89 e5                	mov    ebp,esp
   19f1e:	57                   	push   edi
   19f1f:	56                   	push   esi
   19f20:	53                   	push   ebx
   19f21:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:64
    mpConfig_t* mpptr=kMPConfigTable;
   19f24:	a1 80 48 12 00       	mov    eax,ds:0x124880
   19f29:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:65
    int cnt=0;
   19f2c:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   19f33:	e9 d5 03 00 00       	jmp    1a30d <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:69
    {
        switch (mpptr->recType)
   19f38:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f3b:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   19f3e:	83 f8 04             	cmp    eax,0x4
   19f41:	0f 87 d7 03 00 00    	ja     1a31e <printMPTable+0x403>
   19f47:	8b 04 85 98 34 08 00 	mov    eax,DWORD PTR [eax*4+0x83498]
   19f4e:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72
        {
            case CPU:
                printk("CPU: APICId=%u, Enabled=%s, %s\n", mpptr->cpu.apicid, (mpptr->cpu.cpuflag&0x1)?"yes":"no", (mpptr->cpu.cpuflag&0x2)?"BSP":"");
   19f50:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f53:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19f57:	0f b6 c0             	movzx  eax,al
   19f5a:	83 e0 02             	and    eax,0x2
   19f5d:	85 c0                	test   eax,eax
   19f5f:	74 07                	je     19f68 <printMPTable+0x4d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 1)
   19f61:	b9 54 33 08 00       	mov    ecx,0x83354
   19f66:	eb 05                	jmp    19f6d <printMPTable+0x52>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 2)
   19f68:	b9 58 33 08 00       	mov    ecx,0x83358
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 4)
   19f6d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f70:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19f74:	0f b6 c0             	movzx  eax,al
   19f77:	83 e0 01             	and    eax,0x1
   19f7a:	85 c0                	test   eax,eax
   19f7c:	74 07                	je     19f85 <printMPTable+0x6a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 5)
   19f7e:	ba 59 33 08 00       	mov    edx,0x83359
   19f83:	eb 05                	jmp    19f8a <printMPTable+0x6f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 6)
   19f85:	ba 5d 33 08 00       	mov    edx,0x8335d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:72 (discriminator 8)
   19f8a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19f8d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19f91:	0f b6 c0             	movzx  eax,al
   19f94:	51                   	push   ecx
   19f95:	52                   	push   edx
   19f96:	50                   	push   eax
   19f97:	68 60 33 08 00       	push   0x83360
   19f9c:	e8 66 d5 00 00       	call   27507 <printk>
   19fa1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:73 (discriminator 8)
                break;
   19fa4:	e9 16 03 00 00       	jmp    1a2bf <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:75
            case BUS:
                printk("BUS: ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", mpptr->bus.busid, mpptr->bus.bustype[0], mpptr->bus.bustype[1], mpptr->bus.bustype[2], mpptr->bus.bustype[3], mpptr->bus.bustype[4], mpptr->bus.bustype[5], mpptr->bus.type );
   19fa9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   19faf:	0f b6 c8             	movzx  ecx,al
   19fb2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fb5:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   19fb9:	0f b6 c0             	movzx  eax,al
   19fbc:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
   19fbf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fc2:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   19fc6:	0f b6 f0             	movzx  esi,al
   19fc9:	89 75 d0             	mov    DWORD PTR [ebp-0x30],esi
   19fcc:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fcf:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   19fd3:	0f b6 f8             	movzx  edi,al
   19fd6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fd9:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   19fdd:	0f b6 f0             	movzx  esi,al
   19fe0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fe3:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   19fe7:	0f b6 d8             	movzx  ebx,al
   19fea:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19fed:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   19ff1:	0f b6 d0             	movzx  edx,al
   19ff4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   19ff7:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   19ffb:	0f b6 c0             	movzx  eax,al
   19ffe:	83 ec 0c             	sub    esp,0xc
   1a001:	51                   	push   ecx
   1a002:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a005:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   1a008:	57                   	push   edi
   1a009:	56                   	push   esi
   1a00a:	53                   	push   ebx
   1a00b:	52                   	push   edx
   1a00c:	50                   	push   eax
   1a00d:	68 80 33 08 00       	push   0x83380
   1a012:	e8 f0 d4 00 00       	call   27507 <printk>
   1a017:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:76
                break;
   1a01a:	e9 a0 02 00 00       	jmp    1a2bf <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
   1a01f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a022:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a026:	0f b6 c0             	movzx  eax,al
   1a029:	83 e0 01             	and    eax,0x1
   1a02c:	85 c0                	test   eax,eax
   1a02e:	74 07                	je     1a037 <printMPTable+0x11c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 1)
   1a030:	b9 59 33 08 00       	mov    ecx,0x83359
   1a035:	eb 05                	jmp    1a03c <printMPTable+0x121>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 2)
   1a037:	b9 5d 33 08 00       	mov    ecx,0x8335d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:78 (discriminator 4)
   1a03c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a03f:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1a042:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a045:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a049:	0f b6 c0             	movzx  eax,al
   1a04c:	51                   	push   ecx
   1a04d:	52                   	push   edx
   1a04e:	50                   	push   eax
   1a04f:	68 ac 33 08 00       	push   0x833ac
   1a054:	e8 ae d4 00 00       	call   27507 <printk>
   1a059:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:79 (discriminator 4)
                break;
   1a05c:	e9 5e 02 00 00       	jmp    1a2bf <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a061:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a064:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a068:	0f b6 c0             	movzx  eax,al
   1a06b:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a06e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a071:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a075:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a078:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a07b:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a07f:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:93
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
   1a082:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a085:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a089:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:90
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
   1a08c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a08f:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a093:	0f b7 c0             	movzx  eax,ax
   1a096:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a099:	85 c0                	test   eax,eax
   1a09b:	74 39                	je     1a0d6 <printMPTable+0x1bb>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:91
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
   1a09d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a0a0:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a0a4:	0f b7 c0             	movzx  eax,ax
   1a0a7:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   1a0aa:	83 f8 04             	cmp    eax,0x4
   1a0ad:	74 20                	je     1a0cf <printMPTable+0x1b4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 1)
   1a0af:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a0b2:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a0b6:	0f b7 c0             	movzx  eax,ax
   1a0b9:	83 e0 0c             	and    eax,0xc
   1a0bc:	83 f8 08             	cmp    eax,0x8
   1a0bf:	75 07                	jne    1a0c8 <printMPTable+0x1ad>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 3)
   1a0c1:	b9 d8 33 08 00       	mov    ecx,0x833d8
   1a0c6:	eb 13                	jmp    1a0db <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 4)
   1a0c8:	b9 da 33 08 00       	mov    ecx,0x833da
   1a0cd:	eb 0c                	jmp    1a0db <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:92 (discriminator 2)
   1a0cf:	b9 dc 33 08 00       	mov    ecx,0x833dc
   1a0d4:	eb 05                	jmp    1a0db <printMPTable+0x1c0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 1)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a0d6:	b9 e1 33 08 00       	mov    ecx,0x833e1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:87 (discriminator 3)
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
   1a0db:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a0de:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a0e2:	0f b7 c0             	movzx  eax,ax
   1a0e5:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 3)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a0e8:	85 c0                	test   eax,eax
   1a0ea:	74 39                	je     1a125 <printMPTable+0x20a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:88
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (mpptr->irqSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->irqSrc.irqflag&0x3)==0x1?"AH"
   1a0ec:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a0ef:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a0f3:	0f b7 c0             	movzx  eax,ax
   1a0f6:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a0f9:	83 f8 01             	cmp    eax,0x1
   1a0fc:	74 20                	je     1a11e <printMPTable+0x203>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 1)
   1a0fe:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a101:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a105:	0f b7 c0             	movzx  eax,ax
   1a108:	83 e0 03             	and    eax,0x3
   1a10b:	83 f8 02             	cmp    eax,0x2
   1a10e:	75 07                	jne    1a117 <printMPTable+0x1fc>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 3)
   1a110:	ba e3 33 08 00       	mov    edx,0x833e3
   1a115:	eb 13                	jmp    1a12a <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 4)
   1a117:	ba e7 33 08 00       	mov    edx,0x833e7
   1a11c:	eb 0c                	jmp    1a12a <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:89 (discriminator 2)
   1a11e:	ba ed 33 08 00       	mov    edx,0x833ed
   1a123:	eb 05                	jmp    1a12a <printMPTable+0x20f>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 4)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a125:	ba f0 33 08 00       	mov    edx,0x833f0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:82 (discriminator 6)
                        mpptr->irqSrc.irqtype==0?"INT"                      
   1a12a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a12d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 6)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a131:	84 c0                	test   al,al
   1a133:	74 3d                	je     1a172 <printMPTable+0x257>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:83
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
   1a135:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a138:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84
                            :mpptr->irqSrc.irqtype==2?"SMI"
   1a13c:	3c 01                	cmp    al,0x1
   1a13e:	74 2b                	je     1a16b <printMPTable+0x250>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 1)
   1a140:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a143:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 1)
                            :mpptr->irqSrc.irqtype==3?"Ext"
   1a147:	3c 02                	cmp    al,0x2
   1a149:	74 19                	je     1a164 <printMPTable+0x249>
   1a14b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a14e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 1)
                            :"unk",                                 //iType
   1a152:	3c 03                	cmp    al,0x3
   1a154:	75 07                	jne    1a15d <printMPTable+0x242>
   1a156:	b8 f3 33 08 00       	mov    eax,0x833f3
   1a15b:	eb 1a                	jmp    1a177 <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:86 (discriminator 2)
   1a15d:	b8 f7 33 08 00       	mov    eax,0x833f7
   1a162:	eb 13                	jmp    1a177 <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:85 (discriminator 2)
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
                            :mpptr->irqSrc.irqtype==3?"Ext"
   1a164:	b8 fb 33 08 00       	mov    eax,0x833fb
   1a169:	eb 0c                	jmp    1a177 <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:84 (discriminator 2)
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
                        mpptr->irqSrc.irqtype==0?"INT"                      
                            :mpptr->irqSrc.irqtype==1?"NMI"
                            :mpptr->irqSrc.irqtype==2?"SMI"
   1a16b:	b8 ff 33 08 00       	mov    eax,0x833ff
   1a170:	eb 05                	jmp    1a177 <printMPTable+0x25c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 7)
                break;
            case IOAPIC:
                printk("IO APIC: ID=%02X Address=0x%08X Enabled=%s\n",mpptr->apic.apicid, mpptr->apic.apicaddr, mpptr->apic.flags&0x1?"yes":"no");
                break;
            case IOINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dI=%02X\n", 
   1a172:	b8 03 34 08 00       	mov    eax,0x83403
/home/yogi/src/os/chrisOS/src/cpu/smp.c:81 (discriminator 9)
   1a177:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a17a:	57                   	push   edi
   1a17b:	56                   	push   esi
   1a17c:	53                   	push   ebx
   1a17d:	51                   	push   ecx
   1a17e:	52                   	push   edx
   1a17f:	50                   	push   eax
   1a180:	68 08 34 08 00       	push   0x83408
   1a185:	e8 7d d3 00 00       	call   27507 <printk>
   1a18a:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:94 (discriminator 9)
                            :(mpptr->irqSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->irqSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
   1a18d:	e9 2d 01 00 00       	jmp    1a2bf <printMPTable+0x3a4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a192:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a195:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a199:	0f b6 c0             	movzx  eax,al
   1a19c:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a19f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1a2:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a1a6:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a1a9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1ac:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a1b0:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:108
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
   1a1b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1b6:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a1ba:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:105
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
   1a1bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1c0:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a1c4:	0f b7 c0             	movzx  eax,ax
   1a1c7:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a1ca:	85 c0                	test   eax,eax
   1a1cc:	74 39                	je     1a207 <printMPTable+0x2ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:106
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
   1a1ce:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1d1:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a1d5:	0f b7 c0             	movzx  eax,ax
   1a1d8:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
   1a1db:	83 f8 04             	cmp    eax,0x4
   1a1de:	74 20                	je     1a200 <printMPTable+0x2e5>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 1)
   1a1e0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a1e3:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a1e7:	0f b7 c0             	movzx  eax,ax
   1a1ea:	83 e0 0c             	and    eax,0xc
   1a1ed:	83 f8 08             	cmp    eax,0x8
   1a1f0:	75 07                	jne    1a1f9 <printMPTable+0x2de>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 3)
   1a1f2:	b9 d8 33 08 00       	mov    ecx,0x833d8
   1a1f7:	eb 13                	jmp    1a20c <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 4)
   1a1f9:	b9 da 33 08 00       	mov    ecx,0x833da
   1a1fe:	eb 0c                	jmp    1a20c <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:107 (discriminator 2)
   1a200:	b9 dc 33 08 00       	mov    ecx,0x833dc
   1a205:	eb 05                	jmp    1a20c <printMPTable+0x2f1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 1)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a207:	b9 e1 33 08 00       	mov    ecx,0x833e1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:102 (discriminator 3)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
   1a20c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a20f:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a213:	0f b7 c0             	movzx  eax,ax
   1a216:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 3)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a219:	85 c0                	test   eax,eax
   1a21b:	74 39                	je     1a256 <printMPTable+0x33b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:103
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
                            :"unk", //iType
                        (mpptr->lintSrc.irqflag&0x3)==0x0?"AL"
                            :(mpptr->lintSrc.irqflag&0x3)==0x1?"AH"
   1a21d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a220:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a224:	0f b7 c0             	movzx  eax,ax
   1a227:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1a22a:	83 f8 01             	cmp    eax,0x1
   1a22d:	74 20                	je     1a24f <printMPTable+0x334>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 1)
   1a22f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a232:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1a236:	0f b7 c0             	movzx  eax,ax
   1a239:	83 e0 03             	and    eax,0x3
   1a23c:	83 f8 02             	cmp    eax,0x2
   1a23f:	75 07                	jne    1a248 <printMPTable+0x32d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 3)
   1a241:	ba e3 33 08 00       	mov    edx,0x833e3
   1a246:	eb 13                	jmp    1a25b <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 4)
   1a248:	ba e7 33 08 00       	mov    edx,0x833e7
   1a24d:	eb 0c                	jmp    1a25b <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:104 (discriminator 2)
   1a24f:	ba ed 33 08 00       	mov    edx,0x833ed
   1a254:	eb 05                	jmp    1a25b <printMPTable+0x340>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 4)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a256:	ba f0 33 08 00       	mov    edx,0x833f0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:97 (discriminator 6)
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
   1a25b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a25e:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 6)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a262:	84 c0                	test   al,al
   1a264:	74 3d                	je     1a2a3 <printMPTable+0x388>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:98
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
   1a266:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a269:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99
                            :mpptr->lintSrc.irqtype==2?"SMI"
   1a26d:	3c 01                	cmp    al,0x1
   1a26f:	74 2b                	je     1a29c <printMPTable+0x381>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 1)
   1a271:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a274:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 1)
                            :mpptr->lintSrc.irqtype==3?"Ext"
   1a278:	3c 02                	cmp    al,0x2
   1a27a:	74 19                	je     1a295 <printMPTable+0x37a>
   1a27c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a27f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 1)
                            :"unk", //iType
   1a283:	3c 03                	cmp    al,0x3
   1a285:	75 07                	jne    1a28e <printMPTable+0x373>
   1a287:	b8 f3 33 08 00       	mov    eax,0x833f3
   1a28c:	eb 1a                	jmp    1a2a8 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:101 (discriminator 2)
   1a28e:	b8 f7 33 08 00       	mov    eax,0x833f7
   1a293:	eb 13                	jmp    1a2a8 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:100 (discriminator 2)
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
                            :mpptr->lintSrc.irqtype==3?"Ext"
   1a295:	b8 fb 33 08 00       	mov    eax,0x833fb
   1a29a:	eb 0c                	jmp    1a2a8 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:99 (discriminator 2)
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
                             mpptr->lintSrc.irqtype==0?"INT"                      //type
                            :mpptr->lintSrc.irqtype==1?"NMI"
                            :mpptr->lintSrc.irqtype==2?"SMI"
   1a29c:	b8 ff 33 08 00       	mov    eax,0x833ff
   1a2a1:	eb 05                	jmp    1a2a8 <printMPTable+0x38d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 7)
                            :(mpptr->irqSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->irqSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->irqSrc.srcbus, mpptr->irqSrc.srcbusirq, mpptr->irqSrc.dstapic, mpptr->irqSrc.dstirq);
                break;
            case LOCALINTASS:
                printk("Type=%s Pol=%s Trig=%s sB=%02X sI=%02X dA=%02X dL=%02X\n", 
   1a2a3:	b8 03 34 08 00       	mov    eax,0x83403
/home/yogi/src/os/chrisOS/src/cpu/smp.c:96 (discriminator 9)
   1a2a8:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   1a2ab:	57                   	push   edi
   1a2ac:	56                   	push   esi
   1a2ad:	53                   	push   ebx
   1a2ae:	51                   	push   ecx
   1a2af:	52                   	push   edx
   1a2b0:	50                   	push   eax
   1a2b1:	68 40 34 08 00       	push   0x83440
   1a2b6:	e8 4c d2 00 00       	call   27507 <printk>
   1a2bb:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:109 (discriminator 9)
                            :(mpptr->lintSrc.irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (mpptr->lintSrc.irqflag&0xc)==0x0?"E"
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
   1a2be:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:113
            default:
                return;
        }
        mpptr++;
   1a2bf:	83 45 e4 20          	add    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:114
        cnt++;
   1a2c3:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   1a2c7:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a2cb:	7e 40                	jle    1a30d <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:115 (discriminator 1)
   1a2cd:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1a2d0:	8d 58 02             	lea    ebx,[eax+0x2]
   1a2d3:	e8 ef de ff ff       	call   181c7 <cursorGetMaxY>
   1a2d8:	89 c1                	mov    ecx,eax
   1a2da:	89 d8                	mov    eax,ebx
   1a2dc:	99                   	cdq    
   1a2dd:	f7 f9                	idiv   ecx
   1a2df:	89 d0                	mov    eax,edx
   1a2e1:	85 c0                	test   eax,eax
   1a2e3:	75 28                	jne    1a30d <printMPTable+0x3f2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:117
        {
            puts("Paused, press a key to continue");
   1a2e5:	83 ec 0c             	sub    esp,0xc
   1a2e8:	68 78 34 08 00       	push   0x83478
   1a2ed:	e8 94 df ff ff       	call   18286 <puts>
   1a2f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:118
            waitForKeyboardKey();
   1a2f5:	e8 2e 6f ff ff       	call   11228 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:119
            cursorMoveTo(0,cursorGetPosY());
   1a2fa:	e8 f8 de ff ff       	call   181f7 <cursorGetPosY>
   1a2ff:	83 ec 08             	sub    esp,0x8
   1a302:	50                   	push   eax
   1a303:	6a 00                	push   0x0
   1a305:	e8 4d de ff ff       	call   18157 <cursorMoveTo>
   1a30a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:67
void HIGH_CODE_SECTION printMPTable()
{
    mpConfig_t* mpptr=kMPConfigTable;
    int cnt=0;
    
    while (mpptr->nextRecAddress!=0xFFFFFFFF)
   1a30d:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a310:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1a313:	83 f8 ff             	cmp    eax,0xffffffff
   1a316:	0f 85 1c fc ff ff    	jne    19f38 <printMPTable+0x1d>
   1a31c:	eb 01                	jmp    1a31f <printMPTable+0x404>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:111
                            :(mpptr->lintSrc.irqflag&0xc)==0x4?"E(2)"
                            :(mpptr->lintSrc.irqflag&0xc)==0x8?"R":"L", //Trigger
                        mpptr->lintSrc.srcbusid, mpptr->lintSrc.srcbusirq, mpptr->lintSrc.destapic, mpptr->lintSrc.destapiclint);
                break;
            default:
                return;
   1a31e:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:123
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }

    }
}
   1a31f:	8d 65 f4             	lea    esp,[ebp-0xc]
   1a322:	5b                   	pop    ebx
   1a323:	5e                   	pop    esi
   1a324:	5f                   	pop    edi
   1a325:	5d                   	pop    ebp
   1a326:	c3                   	ret    

0001a327 <mpInit>:
mpInit():
/home/yogi/src/os/chrisOS/src/cpu/smp.c:126

unsigned HIGH_CODE_SECTION mpInit()
{
   1a327:	55                   	push   ebp
   1a328:	89 e5                	mov    ebp,esp
   1a32a:	57                   	push   edi
   1a32b:	56                   	push   esi
   1a32c:	53                   	push   ebx
   1a32d:	83 ec 5c             	sub    esp,0x5c
/home/yogi/src/os/chrisOS/src/cpu/smp.c:129
    uint8_t* recPtr;
    char lTempString[15];
    memset(lTempString, 0, 15);
   1a330:	83 ec 04             	sub    esp,0x4
   1a333:	6a 0f                	push   0xf
   1a335:	6a 00                	push   0x0
   1a337:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a33a:	50                   	push   eax
   1a33b:	e8 81 b0 00 00       	call   253c1 <memset>
   1a340:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:130
    mpFindTables();
   1a343:	e8 f9 fa ff ff       	call   19e41 <mpFindTables>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:131
    printd(DEBUG_MP,"MP table found @ 0x%08X, sig=%c%c%c%c, features=%u/%u/%u/%u/%u, length=%u\n", mp, mp->signature[0], mp->signature[1], mp->signature[2], mp->signature[3], mp->feature1, mp->feature2, mp->feature3, mp->feature4, mp->feature5, mp->length);
   1a348:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a34d:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1a351:	0f b6 f0             	movzx  esi,al
   1a354:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a359:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1a35d:	0f b6 f8             	movzx  edi,al
   1a360:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a365:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1a369:	0f b6 c0             	movzx  eax,al
   1a36c:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a36f:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a374:	0f b6 40 0d          	movzx  eax,BYTE PTR [eax+0xd]
   1a378:	0f b6 d8             	movzx  ebx,al
   1a37b:	89 5d b0             	mov    DWORD PTR [ebp-0x50],ebx
   1a37e:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a383:	0f b6 40 0c          	movzx  eax,BYTE PTR [eax+0xc]
   1a387:	0f b6 c8             	movzx  ecx,al
   1a38a:	89 4d ac             	mov    DWORD PTR [ebp-0x54],ecx
   1a38d:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a392:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a396:	0f b6 d0             	movzx  edx,al
   1a399:	89 55 a8             	mov    DWORD PTR [ebp-0x58],edx
   1a39c:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a3a1:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a3a5:	0f be c0             	movsx  eax,al
   1a3a8:	89 45 a4             	mov    DWORD PTR [ebp-0x5c],eax
   1a3ab:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a3b0:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a3b4:	0f be d8             	movsx  ebx,al
   1a3b7:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a3bc:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a3c0:	0f be c8             	movsx  ecx,al
   1a3c3:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a3c8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a3cb:	0f be d0             	movsx  edx,al
   1a3ce:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a3d3:	83 ec 0c             	sub    esp,0xc
   1a3d6:	56                   	push   esi
   1a3d7:	57                   	push   edi
   1a3d8:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a3db:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a3de:	ff 75 ac             	push   DWORD PTR [ebp-0x54]
   1a3e1:	ff 75 a8             	push   DWORD PTR [ebp-0x58]
   1a3e4:	ff 75 a4             	push   DWORD PTR [ebp-0x5c]
   1a3e7:	53                   	push   ebx
   1a3e8:	51                   	push   ecx
   1a3e9:	52                   	push   edx
   1a3ea:	50                   	push   eax
   1a3eb:	68 ac 34 08 00       	push   0x834ac
   1a3f0:	68 00 08 00 00       	push   0x800
   1a3f5:	e8 2d d1 00 00       	call   27527 <printd>
   1a3fa:	83 c4 40             	add    esp,0x40
/home/yogi/src/os/chrisOS/src/cpu/smp.c:132
    if (mp->feature1!=0)
   1a3fd:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a402:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a406:	84 c0                	test   al,al
   1a408:	74 27                	je     1a431 <mpInit+0x10a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:134
    {
        printk("NOTE: need to implement Intel MP default configurations (%u)",mp->feature1);
   1a40a:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a40f:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1a413:	0f b6 c0             	movzx  eax,al
   1a416:	83 ec 08             	sub    esp,0x8
   1a419:	50                   	push   eax
   1a41a:	68 f8 34 08 00       	push   0x834f8
   1a41f:	e8 e3 d0 00 00       	call   27507 <printk>
   1a424:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:135
        return false;
   1a427:	b8 00 00 00 00       	mov    eax,0x0
   1a42c:	e9 12 0a 00 00       	jmp    1ae43 <mpInit+0xb1c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:137
    }
    mc=(struct mpc_table*)mp->physptr;
   1a431:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a436:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a439:	a3 6c 65 09 00       	mov    ds:0x9656c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:138
    printd(DEBUG_MP,"MC table found @ 0x%08X, sig=%c%c%c%c, length=%u, lapic=0x%08X, OEM tbl=0x%08X\n", mc, mc->signature[0], mc->signature[1], mc->signature[2], mc->signature[3], mc->length, mc->lapic, mc->oemptr);
   1a43e:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a443:	8b 48 1c             	mov    ecx,DWORD PTR [eax+0x1c]
   1a446:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a44b:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   1a44e:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a451:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a456:	0f b7 40 04          	movzx  eax,WORD PTR [eax+0x4]
   1a45a:	0f b7 f0             	movzx  esi,ax
   1a45d:	89 75 b0             	mov    DWORD PTR [ebp-0x50],esi
   1a460:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a465:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a469:	0f be f8             	movsx  edi,al
   1a46c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a471:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a475:	0f be f0             	movsx  esi,al
   1a478:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a47d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a481:	0f be d8             	movsx  ebx,al
   1a484:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a489:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a48c:	0f be d0             	movsx  edx,al
   1a48f:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a494:	83 ec 08             	sub    esp,0x8
   1a497:	51                   	push   ecx
   1a498:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a49b:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a49e:	57                   	push   edi
   1a49f:	56                   	push   esi
   1a4a0:	53                   	push   ebx
   1a4a1:	52                   	push   edx
   1a4a2:	50                   	push   eax
   1a4a3:	68 38 35 08 00       	push   0x83538
   1a4a8:	68 00 08 00 00       	push   0x800
   1a4ad:	e8 75 d0 00 00       	call   27527 <printd>
   1a4b2:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:139
    memcpy(lTempString, mc->oem,4);
   1a4b5:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a4ba:	83 c0 08             	add    eax,0x8
   1a4bd:	83 ec 04             	sub    esp,0x4
   1a4c0:	6a 04                	push   0x4
   1a4c2:	50                   	push   eax
   1a4c3:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a4c6:	50                   	push   eax
   1a4c7:	e8 a0 b9 00 00       	call   25e6c <memcpy>
   1a4cc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:140
    printd(DEBUG_MP,"\tMPC OEM '%s'", lTempString);
   1a4cf:	83 ec 04             	sub    esp,0x4
   1a4d2:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a4d5:	50                   	push   eax
   1a4d6:	68 88 35 08 00       	push   0x83588
   1a4db:	68 00 08 00 00       	push   0x800
   1a4e0:	e8 42 d0 00 00       	call   27527 <printd>
   1a4e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:141
    memset(lTempString, 0, 15);
   1a4e8:	83 ec 04             	sub    esp,0x4
   1a4eb:	6a 0f                	push   0xf
   1a4ed:	6a 00                	push   0x0
   1a4ef:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a4f2:	50                   	push   eax
   1a4f3:	e8 c9 ae 00 00       	call   253c1 <memset>
   1a4f8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:142
        memcpy(lTempString, mc->productid,12);
   1a4fb:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a500:	83 c0 10             	add    eax,0x10
   1a503:	83 ec 04             	sub    esp,0x4
   1a506:	6a 0c                	push   0xc
   1a508:	50                   	push   eax
   1a509:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a50c:	50                   	push   eax
   1a50d:	e8 5a b9 00 00       	call   25e6c <memcpy>
   1a512:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:143
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
   1a515:	83 ec 04             	sub    esp,0x4
   1a518:	8d 45 bd             	lea    eax,[ebp-0x43]
   1a51b:	50                   	push   eax
   1a51c:	68 96 35 08 00       	push   0x83596
   1a521:	68 00 08 00 00       	push   0x800
   1a526:	e8 fc cf 00 00       	call   27527 <printd>
   1a52b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:144
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
   1a52e:	a1 70 65 09 00       	mov    eax,ds:0x96570
   1a533:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a536:	83 c0 2c             	add    eax,0x2c
   1a539:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:145
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
   1a53c:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a541:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a545:	0f b7 c0             	movzx  eax,ax
   1a548:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a54b:	50                   	push   eax
   1a54c:	68 ac 35 08 00       	push   0x835ac
   1a551:	68 00 08 00 00       	push   0x800
   1a556:	e8 cc cf 00 00       	call   27527 <printd>
   1a55b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146
    for (int cnt=0;cnt< mc->count;cnt++)
   1a55e:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   1a565:	e9 6f 08 00 00       	jmp    1add9 <mpInit+0xab2>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:148
    {
        switch((int)*(uint8_t*)recPtr)
   1a56a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a56d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a570:	0f b6 c0             	movzx  eax,al
   1a573:	83 f8 04             	cmp    eax,0x4
   1a576:	0f 87 04 08 00 00    	ja     1ad80 <mpInit+0xa59>
   1a57c:	8b 04 85 18 37 08 00 	mov    eax,DWORD PTR [eax*4+0x83718]
   1a583:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:152
        {
            case 0:
                //TODO: Add all this info to a kernel structure
                printd(DEBUG_MP,"\tCPU:  ");
   1a585:	83 ec 08             	sub    esp,0x8
   1a588:	68 d3 35 08 00       	push   0x835d3
   1a58d:	68 00 08 00 00       	push   0x800
   1a592:	e8 90 cf 00 00       	call   27527 <printd>
   1a597:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:153
                struct mpc_cpu* cpu=(struct mpc_cpu*)recPtr;
   1a59a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a59d:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:154
                memcpy(kMPConfigTable[cnt].rec,recPtr,20);
   1a5a0:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a5a5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a5a8:	c1 e2 05             	shl    edx,0x5
   1a5ab:	01 d0                	add    eax,edx
   1a5ad:	83 ec 04             	sub    esp,0x4
   1a5b0:	6a 14                	push   0x14
   1a5b2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a5b5:	50                   	push   eax
   1a5b6:	e8 b1 b8 00 00       	call   25e6c <memcpy>
   1a5bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:155
                if (cnt==0)
   1a5be:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a5c2:	75 16                	jne    1a5da <mpInit+0x2b3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:156
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a5c4:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a5c9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a5cc:	c1 e2 05             	shl    edx,0x5
   1a5cf:	01 d0                	add    eax,edx
   1a5d1:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a5d8:	eb 72                	jmp    1a64c <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:157
                else if (cnt==mc->count-1)
   1a5da:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a5df:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a5e3:	0f b7 c0             	movzx  eax,ax
   1a5e6:	83 e8 01             	sub    eax,0x1
   1a5e9:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a5ec:	75 16                	jne    1a604 <mpInit+0x2dd>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:158
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a5ee:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a5f3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a5f6:	c1 e2 05             	shl    edx,0x5
   1a5f9:	01 d0                	add    eax,edx
   1a5fb:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a602:	eb 48                	jmp    1a64c <mpInit+0x325>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:161
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a604:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a609:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a60c:	c1 e2 05             	shl    edx,0x5
   1a60f:	01 d0                	add    eax,edx
   1a611:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1a617:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a61a:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a620:	c1 e1 05             	shl    ecx,0x5
   1a623:	01 ca                	add    edx,ecx
   1a625:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:162
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a628:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a62d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a630:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a636:	c1 e2 05             	shl    edx,0x5
   1a639:	01 d0                	add    eax,edx
   1a63b:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1a641:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a644:	c1 e1 05             	shl    ecx,0x5
   1a647:	01 ca                	add    edx,ecx
   1a649:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:164
                }
                kMPConfigTable[cnt].recType=CPU;
   1a64c:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a651:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a654:	c1 e2 05             	shl    edx,0x5
   1a657:	01 d0                	add    eax,edx
   1a659:	c7 40 14 00 00 00 00 	mov    DWORD PTR [eax+0x14],0x0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165
                printd(DEBUG_MP,"APICId=%u, Enabled=%s, %s\n", cpu->apicid, (cpu->cpuflag&0x1)?"yes":"no", (cpu->cpuflag&0x2)?"BSP":"");
   1a660:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a663:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a667:	0f b6 c0             	movzx  eax,al
   1a66a:	83 e0 02             	and    eax,0x2
   1a66d:	85 c0                	test   eax,eax
   1a66f:	74 07                	je     1a678 <mpInit+0x351>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 1)
   1a671:	b9 54 33 08 00       	mov    ecx,0x83354
   1a676:	eb 05                	jmp    1a67d <mpInit+0x356>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 2)
   1a678:	b9 58 33 08 00       	mov    ecx,0x83358
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 4)
   1a67d:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a680:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a684:	0f b6 c0             	movzx  eax,al
   1a687:	83 e0 01             	and    eax,0x1
   1a68a:	85 c0                	test   eax,eax
   1a68c:	74 07                	je     1a695 <mpInit+0x36e>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 5)
   1a68e:	ba 59 33 08 00       	mov    edx,0x83359
   1a693:	eb 05                	jmp    1a69a <mpInit+0x373>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 6)
   1a695:	ba 5d 33 08 00       	mov    edx,0x8335d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:165 (discriminator 8)
   1a69a:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1a69d:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a6a1:	0f b6 c0             	movzx  eax,al
   1a6a4:	83 ec 0c             	sub    esp,0xc
   1a6a7:	51                   	push   ecx
   1a6a8:	52                   	push   edx
   1a6a9:	50                   	push   eax
   1a6aa:	68 db 35 08 00       	push   0x835db
   1a6af:	68 00 08 00 00       	push   0x800
   1a6b4:	e8 6e ce 00 00       	call   27527 <printd>
   1a6b9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:166 (discriminator 8)
                recPtr+=20;
   1a6bc:	83 45 e4 14          	add    DWORD PTR [ebp-0x1c],0x14
/home/yogi/src/os/chrisOS/src/cpu/smp.c:167 (discriminator 8)
                break;
   1a6c0:	e9 df 06 00 00       	jmp    1ada4 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:169
            case 1:
                printd(DEBUG_MP,"\tBus:  ");
   1a6c5:	83 ec 08             	sub    esp,0x8
   1a6c8:	68 f6 35 08 00       	push   0x835f6
   1a6cd:	68 00 08 00 00       	push   0x800
   1a6d2:	e8 50 ce 00 00       	call   27527 <printd>
   1a6d7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:170
                struct mpc_bus* bus=(struct mpc_bus*)recPtr;
   1a6da:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a6dd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:171
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a6e0:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a6e5:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a6e8:	c1 e2 05             	shl    edx,0x5
   1a6eb:	01 d0                	add    eax,edx
   1a6ed:	83 ec 04             	sub    esp,0x4
   1a6f0:	6a 08                	push   0x8
   1a6f2:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a6f5:	50                   	push   eax
   1a6f6:	e8 71 b7 00 00       	call   25e6c <memcpy>
   1a6fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:172
                if (cnt==0)
   1a6fe:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a702:	75 16                	jne    1a71a <mpInit+0x3f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:173
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a704:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a709:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a70c:	c1 e2 05             	shl    edx,0x5
   1a70f:	01 d0                	add    eax,edx
   1a711:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a718:	eb 72                	jmp    1a78c <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:174
                else if (cnt==mc->count-1)
   1a71a:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a71f:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a723:	0f b7 c0             	movzx  eax,ax
   1a726:	83 e8 01             	sub    eax,0x1
   1a729:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a72c:	75 16                	jne    1a744 <mpInit+0x41d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:175
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a72e:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a733:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a736:	c1 e2 05             	shl    edx,0x5
   1a739:	01 d0                	add    eax,edx
   1a73b:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a742:	eb 48                	jmp    1a78c <mpInit+0x465>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:178
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a744:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a749:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a74c:	c1 e2 05             	shl    edx,0x5
   1a74f:	01 d0                	add    eax,edx
   1a751:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1a757:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a75a:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a760:	c1 e1 05             	shl    ecx,0x5
   1a763:	01 ca                	add    edx,ecx
   1a765:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:179
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a768:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a76d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a770:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a776:	c1 e2 05             	shl    edx,0x5
   1a779:	01 d0                	add    eax,edx
   1a77b:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1a781:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a784:	c1 e1 05             	shl    ecx,0x5
   1a787:	01 ca                	add    edx,ecx
   1a789:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:181
                }
                recPtr+=8;
   1a78c:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:182
                kMPConfigTable[cnt].recType=BUS;
   1a790:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a795:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a798:	c1 e2 05             	shl    edx,0x5
   1a79b:	01 d0                	add    eax,edx
   1a79d:	c7 40 14 01 00 00 00 	mov    DWORD PTR [eax+0x14],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:183
                printd(DEBUG_MP,"ID=%u, BusType=%c%c%c%c%c%c, Type=%c\n", bus->busid, bus->bustype[0], bus->bustype[1], bus->bustype[2], bus->bustype[3], bus->bustype[4], bus->bustype[5], bus->type );
   1a7a4:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a7a7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1a7aa:	0f b6 c8             	movzx  ecx,al
   1a7ad:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a7b0:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
   1a7b4:	0f b6 c0             	movzx  eax,al
   1a7b7:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
   1a7ba:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a7bd:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   1a7c1:	0f b6 f8             	movzx  edi,al
   1a7c4:	89 7d b0             	mov    DWORD PTR [ebp-0x50],edi
   1a7c7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a7ca:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   1a7ce:	0f b6 f8             	movzx  edi,al
   1a7d1:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a7d4:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
   1a7d8:	0f b6 f0             	movzx  esi,al
   1a7db:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a7de:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a7e2:	0f b6 d8             	movzx  ebx,al
   1a7e5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a7e8:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   1a7ec:	0f b6 d0             	movzx  edx,al
   1a7ef:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1a7f2:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a7f6:	0f b6 c0             	movzx  eax,al
   1a7f9:	83 ec 08             	sub    esp,0x8
   1a7fc:	51                   	push   ecx
   1a7fd:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1a800:	ff 75 b0             	push   DWORD PTR [ebp-0x50]
   1a803:	57                   	push   edi
   1a804:	56                   	push   esi
   1a805:	53                   	push   ebx
   1a806:	52                   	push   edx
   1a807:	50                   	push   eax
   1a808:	68 00 36 08 00       	push   0x83600
   1a80d:	68 00 08 00 00       	push   0x800
   1a812:	e8 10 cd 00 00       	call   27527 <printd>
   1a817:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:184
                break;
   1a81a:	e9 85 05 00 00       	jmp    1ada4 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:186
            case 2:
                printd(DEBUG_MP,"\tAPIC: ");
   1a81f:	83 ec 08             	sub    esp,0x8
   1a822:	68 26 36 08 00       	push   0x83626
   1a827:	68 00 08 00 00       	push   0x800
   1a82c:	e8 f6 cc 00 00       	call   27527 <printd>
   1a831:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:187
                struct mpc_ioapic* apic=(struct mpc_ioapic*)recPtr;
   1a834:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a837:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:188
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a83a:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a83f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a842:	c1 e2 05             	shl    edx,0x5
   1a845:	01 d0                	add    eax,edx
   1a847:	83 ec 04             	sub    esp,0x4
   1a84a:	6a 08                	push   0x8
   1a84c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a84f:	50                   	push   eax
   1a850:	e8 17 b6 00 00       	call   25e6c <memcpy>
   1a855:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:189
                if (cnt==0)
   1a858:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a85c:	75 16                	jne    1a874 <mpInit+0x54d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:190
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a85e:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a863:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a866:	c1 e2 05             	shl    edx,0x5
   1a869:	01 d0                	add    eax,edx
   1a86b:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a872:	eb 72                	jmp    1a8e6 <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:191
                else if (cnt==mc->count-1)
   1a874:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a879:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a87d:	0f b7 c0             	movzx  eax,ax
   1a880:	83 e8 01             	sub    eax,0x1
   1a883:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a886:	75 16                	jne    1a89e <mpInit+0x577>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:192
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a888:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a88d:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a890:	c1 e2 05             	shl    edx,0x5
   1a893:	01 d0                	add    eax,edx
   1a895:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a89c:	eb 48                	jmp    1a8e6 <mpInit+0x5bf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:195
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a89e:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a8a3:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8a6:	c1 e2 05             	shl    edx,0x5
   1a8a9:	01 d0                	add    eax,edx
   1a8ab:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1a8b1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a8b4:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a8ba:	c1 e1 05             	shl    ecx,0x5
   1a8bd:	01 ca                	add    edx,ecx
   1a8bf:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:196
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a8c2:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a8c7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8ca:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1a8d0:	c1 e2 05             	shl    edx,0x5
   1a8d3:	01 d0                	add    eax,edx
   1a8d5:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1a8db:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a8de:	c1 e1 05             	shl    ecx,0x5
   1a8e1:	01 ca                	add    edx,ecx
   1a8e3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:198
                }
                kMPConfigTable[cnt].recType=IOAPIC;
   1a8e6:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a8eb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a8ee:	c1 e2 05             	shl    edx,0x5
   1a8f1:	01 d0                	add    eax,edx
   1a8f3:	c7 40 14 02 00 00 00 	mov    DWORD PTR [eax+0x14],0x2
/home/yogi/src/os/chrisOS/src/cpu/smp.c:199
                recPtr+=8;
   1a8fa:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200
                printd(DEBUG_MP,"ID=%02X, Address=0x%08X, Enabled=%s\n",apic->apicid, apic->apicaddr, apic->flags&0x1?"yes":"no");
   1a8fe:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a901:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   1a905:	0f b6 c0             	movzx  eax,al
   1a908:	83 e0 01             	and    eax,0x1
   1a90b:	85 c0                	test   eax,eax
   1a90d:	74 07                	je     1a916 <mpInit+0x5ef>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 1)
   1a90f:	b9 59 33 08 00       	mov    ecx,0x83359
   1a914:	eb 05                	jmp    1a91b <mpInit+0x5f4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 2)
   1a916:	b9 5d 33 08 00       	mov    ecx,0x8335d
/home/yogi/src/os/chrisOS/src/cpu/smp.c:200 (discriminator 4)
   1a91b:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a91e:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1a921:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a924:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   1a928:	0f b6 c0             	movzx  eax,al
   1a92b:	83 ec 0c             	sub    esp,0xc
   1a92e:	51                   	push   ecx
   1a92f:	52                   	push   edx
   1a930:	50                   	push   eax
   1a931:	68 30 36 08 00       	push   0x83630
   1a936:	68 00 08 00 00       	push   0x800
   1a93b:	e8 e7 cb 00 00       	call   27527 <printd>
   1a940:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:201 (discriminator 4)
                kIOAPICPtr=(uintptr_t*)apic->apicaddr;
   1a943:	8b 45 d4             	mov    eax,DWORD PTR [ebp-0x2c]
   1a946:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1a949:	a3 7c 48 12 00       	mov    ds:0x12487c,eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:202 (discriminator 4)
                break;
   1a94e:	e9 51 04 00 00       	jmp    1ada4 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:204
            case 3:
                printd(DEBUG_MP,"\tIRQ:  ");
   1a953:	83 ec 08             	sub    esp,0x8
   1a956:	68 55 36 08 00       	push   0x83655
   1a95b:	68 00 08 00 00       	push   0x800
   1a960:	e8 c2 cb 00 00       	call   27527 <printd>
   1a965:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:205
                struct mpc_intsrc*intr=(struct mpc_intsrc*)recPtr;
   1a968:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1a96b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:206
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1a96e:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a973:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a976:	c1 e2 05             	shl    edx,0x5
   1a979:	01 d0                	add    eax,edx
   1a97b:	83 ec 04             	sub    esp,0x4
   1a97e:	6a 08                	push   0x8
   1a980:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1a983:	50                   	push   eax
   1a984:	e8 e3 b4 00 00       	call   25e6c <memcpy>
   1a989:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:207
                if (cnt==0)
   1a98c:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1a990:	75 16                	jne    1a9a8 <mpInit+0x681>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:208
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1a992:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a997:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a99a:	c1 e2 05             	shl    edx,0x5
   1a99d:	01 d0                	add    eax,edx
   1a99f:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1a9a6:	eb 72                	jmp    1aa1a <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:209
                else if (cnt==mc->count-1)
   1a9a8:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1a9ad:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1a9b1:	0f b7 c0             	movzx  eax,ax
   1a9b4:	83 e8 01             	sub    eax,0x1
   1a9b7:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1a9ba:	75 16                	jne    1a9d2 <mpInit+0x6ab>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:210
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1a9bc:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a9c1:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a9c4:	c1 e2 05             	shl    edx,0x5
   1a9c7:	01 d0                	add    eax,edx
   1a9c9:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1a9d0:	eb 48                	jmp    1aa1a <mpInit+0x6f3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:213
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1a9d2:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a9d7:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a9da:	c1 e2 05             	shl    edx,0x5
   1a9dd:	01 d0                	add    eax,edx
   1a9df:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1a9e5:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1a9e8:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1a9ee:	c1 e1 05             	shl    ecx,0x5
   1a9f1:	01 ca                	add    edx,ecx
   1a9f3:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:214
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1a9f6:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1a9fb:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1a9fe:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1aa04:	c1 e2 05             	shl    edx,0x5
   1aa07:	01 d0                	add    eax,edx
   1aa09:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1aa0f:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1aa12:	c1 e1 05             	shl    ecx,0x5
   1aa15:	01 ca                	add    edx,ecx
   1aa17:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:216
                }
                kMPConfigTable[cnt].recType = IOINTASS;
   1aa1a:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1aa1f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1aa22:	c1 e2 05             	shl    edx,0x5
   1aa25:	01 d0                	add    eax,edx
   1aa27:	c7 40 14 03 00 00 00 	mov    DWORD PTR [eax+0x14],0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:217
                recPtr+=8;
   1aa2e:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1aa32:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aa35:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1aa39:	0f b6 c0             	movzx  eax,al
   1aa3c:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1aa3f:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aa42:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1aa46:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1aa49:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aa4c:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1aa50:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:230
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
   1aa53:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aa56:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1aa5a:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:227
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
   1aa5d:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aa60:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aa64:	0f b7 c0             	movzx  eax,ax
   1aa67:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1aa6a:	85 c0                	test   eax,eax
   1aa6c:	74 39                	je     1aaa7 <mpInit+0x780>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:228
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
   1aa6e:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aa71:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aa75:	0f b7 c0             	movzx  eax,ax
   1aa78:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
   1aa7b:	83 f8 04             	cmp    eax,0x4
   1aa7e:	74 20                	je     1aaa0 <mpInit+0x779>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 1)
   1aa80:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aa83:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aa87:	0f b7 c0             	movzx  eax,ax
   1aa8a:	83 e0 0c             	and    eax,0xc
   1aa8d:	83 f8 08             	cmp    eax,0x8
   1aa90:	75 07                	jne    1aa99 <mpInit+0x772>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 3)
   1aa92:	b9 d8 33 08 00       	mov    ecx,0x833d8
   1aa97:	eb 13                	jmp    1aaac <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 4)
   1aa99:	b9 da 33 08 00       	mov    ecx,0x833da
   1aa9e:	eb 0c                	jmp    1aaac <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:229 (discriminator 2)
   1aaa0:	b9 dc 33 08 00       	mov    ecx,0x833dc
   1aaa5:	eb 05                	jmp    1aaac <mpInit+0x785>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1aaa7:	b9 e1 33 08 00       	mov    ecx,0x833e1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:224 (discriminator 3)
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
   1aaac:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aaaf:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aab3:	0f b7 c0             	movzx  eax,ax
   1aab6:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1aab9:	85 c0                	test   eax,eax
   1aabb:	74 39                	je     1aaf6 <mpInit+0x7cf>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:225
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
                            :"unk",                                 //iType
                        (intr->irqflag&0x3)==0x0?"AL"
                            :(intr->irqflag&0x3)==0x1?"AH"
   1aabd:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aac0:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aac4:	0f b7 c0             	movzx  eax,ax
   1aac7:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1aaca:	83 f8 01             	cmp    eax,0x1
   1aacd:	74 20                	je     1aaef <mpInit+0x7c8>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 1)
   1aacf:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aad2:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1aad6:	0f b7 c0             	movzx  eax,ax
   1aad9:	83 e0 03             	and    eax,0x3
   1aadc:	83 f8 02             	cmp    eax,0x2
   1aadf:	75 07                	jne    1aae8 <mpInit+0x7c1>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 3)
   1aae1:	ba e3 33 08 00       	mov    edx,0x833e3
   1aae6:	eb 13                	jmp    1aafb <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 4)
   1aae8:	ba e7 33 08 00       	mov    edx,0x833e7
   1aaed:	eb 0c                	jmp    1aafb <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:226 (discriminator 2)
   1aaef:	ba ed 33 08 00       	mov    edx,0x833ed
   1aaf4:	eb 05                	jmp    1aafb <mpInit+0x7d4>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1aaf6:	ba f0 33 08 00       	mov    edx,0x833f0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:219 (discriminator 6)
                        intr->irqtype==0?"INT"                      
   1aafb:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1aafe:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ab02:	84 c0                	test   al,al
   1ab04:	74 3d                	je     1ab43 <mpInit+0x81c>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:220
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
   1ab06:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ab09:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221
                            :intr->irqtype==2?"SMI"
   1ab0d:	3c 01                	cmp    al,0x1
   1ab0f:	74 2b                	je     1ab3c <mpInit+0x815>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 1)
   1ab11:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ab14:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 1)
                            :intr->irqtype==3?"Ext"
   1ab18:	3c 02                	cmp    al,0x2
   1ab1a:	74 19                	je     1ab35 <mpInit+0x80e>
   1ab1c:	8b 45 d0             	mov    eax,DWORD PTR [ebp-0x30]
   1ab1f:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 1)
                            :"unk",                                 //iType
   1ab23:	3c 03                	cmp    al,0x3
   1ab25:	75 07                	jne    1ab2e <mpInit+0x807>
   1ab27:	b8 f3 33 08 00       	mov    eax,0x833f3
   1ab2c:	eb 1a                	jmp    1ab48 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:223 (discriminator 2)
   1ab2e:	b8 f7 33 08 00       	mov    eax,0x833f7
   1ab33:	eb 13                	jmp    1ab48 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:222 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
                            :intr->irqtype==3?"Ext"
   1ab35:	b8 fb 33 08 00       	mov    eax,0x833fb
   1ab3a:	eb 0c                	jmp    1ab48 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:221 (discriminator 2)
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
                        intr->irqtype==0?"INT"                      
                            :intr->irqtype==1?"NMI"
                            :intr->irqtype==2?"SMI"
   1ab3c:	b8 ff 33 08 00       	mov    eax,0x833ff
   1ab41:	eb 05                	jmp    1ab48 <mpInit+0x821>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = IOINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dI=%02X\n", 
   1ab43:	b8 03 34 08 00       	mov    eax,0x83403
/home/yogi/src/os/chrisOS/src/cpu/smp.c:218 (discriminator 9)
   1ab48:	83 ec 0c             	sub    esp,0xc
   1ab4b:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1ab4e:	57                   	push   edi
   1ab4f:	56                   	push   esi
   1ab50:	53                   	push   ebx
   1ab51:	51                   	push   ecx
   1ab52:	52                   	push   edx
   1ab53:	50                   	push   eax
   1ab54:	68 60 36 08 00       	push   0x83660
   1ab59:	68 00 08 00 00       	push   0x800
   1ab5e:	e8 c4 c9 00 00       	call   27527 <printd>
   1ab63:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:231 (discriminator 9)
                            :(intr->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (intr->irqflag&0xc)==0x0?"E"
                            :(intr->irqflag&0xc)==0x4?"E(2)"
                            :(intr->irqflag&0xc)==0x8?"R":"L", //Trigger
                        intr->srcbus, intr->srcbusirq, intr->dstapic, intr->dstirq);
                break;
   1ab66:	e9 39 02 00 00       	jmp    1ada4 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:233
            case 4:
                printd(DEBUG_MP,"\tLINT: ");
   1ab6b:	83 ec 08             	sub    esp,0x8
   1ab6e:	68 9e 36 08 00       	push   0x8369e
   1ab73:	68 00 08 00 00       	push   0x800
   1ab78:	e8 aa c9 00 00       	call   27527 <printd>
   1ab7d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:234
                struct mpc_lintsrc* lint=(struct mpc_lintsrc*)recPtr;
   1ab80:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1ab83:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:235
                memcpy(kMPConfigTable[cnt].rec,recPtr,8);
   1ab86:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1ab8b:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ab8e:	c1 e2 05             	shl    edx,0x5
   1ab91:	01 d0                	add    eax,edx
   1ab93:	83 ec 04             	sub    esp,0x4
   1ab96:	6a 08                	push   0x8
   1ab98:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1ab9b:	50                   	push   eax
   1ab9c:	e8 cb b2 00 00       	call   25e6c <memcpy>
   1aba1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:236
                if (cnt==0)
   1aba4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1aba8:	75 16                	jne    1abc0 <mpInit+0x899>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:237
                    kMPConfigTable[cnt].prevRecAddress=0xFFFFFFFF;
   1abaa:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1abaf:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1abb2:	c1 e2 05             	shl    edx,0x5
   1abb5:	01 d0                	add    eax,edx
   1abb7:	c7 40 18 ff ff ff ff 	mov    DWORD PTR [eax+0x18],0xffffffff
   1abbe:	eb 72                	jmp    1ac32 <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:238
                else if (cnt==mc->count-1)
   1abc0:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1abc5:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1abc9:	0f b7 c0             	movzx  eax,ax
   1abcc:	83 e8 01             	sub    eax,0x1
   1abcf:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1abd2:	75 16                	jne    1abea <mpInit+0x8c3>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:239
                    kMPConfigTable[cnt].nextRecAddress=0xFFFFFFFF;
   1abd4:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1abd9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1abdc:	c1 e2 05             	shl    edx,0x5
   1abdf:	01 d0                	add    eax,edx
   1abe1:	c7 40 1c ff ff ff ff 	mov    DWORD PTR [eax+0x1c],0xffffffff
   1abe8:	eb 48                	jmp    1ac32 <mpInit+0x90b>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:242
                else
                {
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
   1abea:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1abef:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1abf2:	c1 e2 05             	shl    edx,0x5
   1abf5:	01 d0                	add    eax,edx
   1abf7:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1abfd:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1ac00:	81 c1 ff ff ff 07    	add    ecx,0x7ffffff
   1ac06:	c1 e1 05             	shl    ecx,0x5
   1ac09:	01 ca                	add    edx,ecx
   1ac0b:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:243
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
   1ac0e:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1ac13:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ac16:	81 c2 ff ff ff 07    	add    edx,0x7ffffff
   1ac1c:	c1 e2 05             	shl    edx,0x5
   1ac1f:	01 d0                	add    eax,edx
   1ac21:	8b 15 80 48 12 00    	mov    edx,DWORD PTR ds:0x124880
   1ac27:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1ac2a:	c1 e1 05             	shl    ecx,0x5
   1ac2d:	01 ca                	add    edx,ecx
   1ac2f:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/cpu/smp.c:245
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
   1ac32:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1ac37:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1ac3a:	c1 e2 05             	shl    edx,0x5
   1ac3d:	01 d0                	add    eax,edx
   1ac3f:	c7 40 14 04 00 00 00 	mov    DWORD PTR [eax+0x14],0x4
/home/yogi/src/os/chrisOS/src/cpu/smp.c:246
                recPtr+=8;
   1ac46:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1ac4a:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ac4d:	0f b6 40 07          	movzx  eax,BYTE PTR [eax+0x7]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ac51:	0f b6 c0             	movzx  eax,al
   1ac54:	89 45 b4             	mov    DWORD PTR [ebp-0x4c],eax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1ac57:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ac5a:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ac5e:	0f b6 f8             	movzx  edi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1ac61:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ac64:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ac68:	0f b6 f0             	movzx  esi,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:259
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
   1ac6b:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ac6e:	0f b6 40 04          	movzx  eax,BYTE PTR [eax+0x4]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ac72:	0f b6 d8             	movzx  ebx,al
/home/yogi/src/os/chrisOS/src/cpu/smp.c:256
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
   1ac75:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ac78:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac7c:	0f b7 c0             	movzx  eax,ax
   1ac7f:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ac82:	85 c0                	test   eax,eax
   1ac84:	74 39                	je     1acbf <mpInit+0x998>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:257
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
   1ac86:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ac89:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac8d:	0f b7 c0             	movzx  eax,ax
   1ac90:	83 e0 0c             	and    eax,0xc
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
   1ac93:	83 f8 04             	cmp    eax,0x4
   1ac96:	74 20                	je     1acb8 <mpInit+0x991>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 1)
   1ac98:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ac9b:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1ac9f:	0f b7 c0             	movzx  eax,ax
   1aca2:	83 e0 0c             	and    eax,0xc
   1aca5:	83 f8 08             	cmp    eax,0x8
   1aca8:	75 07                	jne    1acb1 <mpInit+0x98a>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 3)
   1acaa:	b9 d8 33 08 00       	mov    ecx,0x833d8
   1acaf:	eb 13                	jmp    1acc4 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 4)
   1acb1:	b9 da 33 08 00       	mov    ecx,0x833da
   1acb6:	eb 0c                	jmp    1acc4 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:258 (discriminator 2)
   1acb8:	b9 dc 33 08 00       	mov    ecx,0x833dc
   1acbd:	eb 05                	jmp    1acc4 <mpInit+0x99d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 1)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1acbf:	b9 e1 33 08 00       	mov    ecx,0x833e1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:253 (discriminator 3)
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
   1acc4:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1acc7:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1accb:	0f b7 c0             	movzx  eax,ax
   1acce:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 3)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1acd1:	85 c0                	test   eax,eax
   1acd3:	74 39                	je     1ad0e <mpInit+0x9e7>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:254
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
                            :"unk", //iType
                        (lint->irqflag&0x3)==0x0?"AL"
                            :(lint->irqflag&0x3)==0x1?"AH"
   1acd5:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1acd8:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1acdc:	0f b7 c0             	movzx  eax,ax
   1acdf:	83 e0 03             	and    eax,0x3
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
   1ace2:	83 f8 01             	cmp    eax,0x1
   1ace5:	74 20                	je     1ad07 <mpInit+0x9e0>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 1)
   1ace7:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1acea:	0f b7 40 02          	movzx  eax,WORD PTR [eax+0x2]
   1acee:	0f b7 c0             	movzx  eax,ax
   1acf1:	83 e0 03             	and    eax,0x3
   1acf4:	83 f8 02             	cmp    eax,0x2
   1acf7:	75 07                	jne    1ad00 <mpInit+0x9d9>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 3)
   1acf9:	ba e3 33 08 00       	mov    edx,0x833e3
   1acfe:	eb 13                	jmp    1ad13 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 4)
   1ad00:	ba e7 33 08 00       	mov    edx,0x833e7
   1ad05:	eb 0c                	jmp    1ad13 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:255 (discriminator 2)
   1ad07:	ba ed 33 08 00       	mov    edx,0x833ed
   1ad0c:	eb 05                	jmp    1ad13 <mpInit+0x9ec>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 4)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ad0e:	ba f0 33 08 00       	mov    edx,0x833f0
/home/yogi/src/os/chrisOS/src/cpu/smp.c:248 (discriminator 6)
                             lint->irqtype==0?"INT"                      //type
   1ad13:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ad16:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 6)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ad1a:	84 c0                	test   al,al
   1ad1c:	74 3d                	je     1ad5b <mpInit+0xa34>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:249
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
   1ad1e:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ad21:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250
                            :lint->irqtype==2?"SMI"
   1ad25:	3c 01                	cmp    al,0x1
   1ad27:	74 2b                	je     1ad54 <mpInit+0xa2d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 1)
   1ad29:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ad2c:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 1)
                            :lint->irqtype==3?"Ext"
   1ad30:	3c 02                	cmp    al,0x2
   1ad32:	74 19                	je     1ad4d <mpInit+0xa26>
   1ad34:	8b 45 cc             	mov    eax,DWORD PTR [ebp-0x34]
   1ad37:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 1)
                            :"unk", //iType
   1ad3b:	3c 03                	cmp    al,0x3
   1ad3d:	75 07                	jne    1ad46 <mpInit+0xa1f>
   1ad3f:	b8 f3 33 08 00       	mov    eax,0x833f3
   1ad44:	eb 1a                	jmp    1ad60 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:252 (discriminator 2)
   1ad46:	b8 f7 33 08 00       	mov    eax,0x833f7
   1ad4b:	eb 13                	jmp    1ad60 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:251 (discriminator 2)
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
                            :lint->irqtype==3?"Ext"
   1ad4d:	b8 fb 33 08 00       	mov    eax,0x833fb
   1ad52:	eb 0c                	jmp    1ad60 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:250 (discriminator 2)
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
                             lint->irqtype==0?"INT"                      //type
                            :lint->irqtype==1?"NMI"
                            :lint->irqtype==2?"SMI"
   1ad54:	b8 ff 33 08 00       	mov    eax,0x833ff
   1ad59:	eb 05                	jmp    1ad60 <mpInit+0xa39>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 7)
                    kMPConfigTable[cnt].prevRecAddress=(uint32_t)&kMPConfigTable[cnt-1];
                    kMPConfigTable[cnt-1].nextRecAddress=(uint32_t)&kMPConfigTable[cnt];
                }
                kMPConfigTable[cnt].recType = LOCALINTASS;
                recPtr+=8;
                printd(DEBUG_MP,"Type=%s, Pol=%s, Trig=%s, sB=%02X, sI=%02X, dA=%02X, dL=%02X\n", 
   1ad5b:	b8 03 34 08 00       	mov    eax,0x83403
/home/yogi/src/os/chrisOS/src/cpu/smp.c:247 (discriminator 9)
   1ad60:	83 ec 0c             	sub    esp,0xc
   1ad63:	ff 75 b4             	push   DWORD PTR [ebp-0x4c]
   1ad66:	57                   	push   edi
   1ad67:	56                   	push   esi
   1ad68:	53                   	push   ebx
   1ad69:	51                   	push   ecx
   1ad6a:	52                   	push   edx
   1ad6b:	50                   	push   eax
   1ad6c:	68 a8 36 08 00       	push   0x836a8
   1ad71:	68 00 08 00 00       	push   0x800
   1ad76:	e8 ac c7 00 00       	call   27527 <printd>
   1ad7b:	83 c4 30             	add    esp,0x30
/home/yogi/src/os/chrisOS/src/cpu/smp.c:260 (discriminator 9)
                            :(lint->irqflag&0x3)==0x2?"Res":"AL(2)", //Polarity
                        (lint->irqflag&0xc)==0x0?"E"
                            :(lint->irqflag&0xc)==0x4?"E(2)"
                            :(lint->irqflag&0xc)==0x8?"R":"L", //Trigger
                        lint->srcbusid, lint->srcbusirq, lint->destapic, lint->destapiclint);
                break;
   1ad7e:	eb 24                	jmp    1ada4 <mpInit+0xa7d>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:262
            default:
                printd(DEBUG_MP,"\tue %04X, ", (int)*(uint8_t*)recPtr);
   1ad80:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1ad83:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ad86:	0f b6 c0             	movzx  eax,al
   1ad89:	83 ec 04             	sub    esp,0x4
   1ad8c:	50                   	push   eax
   1ad8d:	68 e6 36 08 00       	push   0x836e6
   1ad92:	68 00 08 00 00       	push   0x800
   1ad97:	e8 8b c7 00 00       	call   27527 <printd>
   1ad9c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/cpu/smp.c:263
                recPtr+=8;
   1ad9f:	83 45 e4 08          	add    DWORD PTR [ebp-0x1c],0x8
/home/yogi/src/os/chrisOS/src/cpu/smp.c:264
                break;
   1ada3:	90                   	nop
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266
        }
        if (cnt > 0 && cnt%250==0)
   1ada4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1ada8:	7e 2b                	jle    1add5 <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:266 (discriminator 1)
   1adaa:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1adad:	ba d3 4d 62 10       	mov    edx,0x10624dd3
   1adb2:	89 c8                	mov    eax,ecx
   1adb4:	f7 ea                	imul   edx
   1adb6:	c1 fa 04             	sar    edx,0x4
   1adb9:	89 c8                	mov    eax,ecx
   1adbb:	c1 f8 1f             	sar    eax,0x1f
   1adbe:	29 c2                	sub    edx,eax
   1adc0:	89 d0                	mov    eax,edx
   1adc2:	69 c0 fa 00 00 00    	imul   eax,eax,0xfa
   1adc8:	29 c1                	sub    ecx,eax
   1adca:	89 c8                	mov    eax,ecx
   1adcc:	85 c0                	test   eax,eax
   1adce:	75 05                	jne    1add5 <mpInit+0xaae>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:267
            waitForKeyboardKey();
   1add0:	e8 53 64 ff ff       	call   11228 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 2)
    memset(lTempString, 0, 15);
        memcpy(lTempString, mc->productid,12);
    printd(DEBUG_MP,", product '%s': %s\n", lTempString);
    recPtr=(uint8_t*)mp->physptr+sizeof(struct mpc_table);
    printd(DEBUG_MP,"Parsing MC %u table entries at 0x%08X\n", mc->count, recPtr);
    for (int cnt=0;cnt< mc->count;cnt++)
   1add5:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/cpu/smp.c:146 (discriminator 1)
   1add9:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1adde:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1ade2:	0f b7 c0             	movzx  eax,ax
   1ade5:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1ade8:	0f 8f 7c f7 ff ff    	jg     1a56a <mpInit+0x243>
/home/yogi/src/os/chrisOS/src/cpu/smp.c:269
                break;
        }
        if (cnt > 0 && cnt%250==0)
            waitForKeyboardKey();
    }
    printd(DEBUG_MP,"rec5 pp=%08X(%08X),np=%08X(%08X)\n", kMPConfigTable[5].prevRecAddress, &kMPConfigTable[4], kMPConfigTable[5].nextRecAddress, &kMPConfigTable[6]);
   1adee:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1adf3:	8d 98 c0 00 00 00    	lea    ebx,[eax+0xc0]
   1adf9:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1adfe:	05 a0 00 00 00       	add    eax,0xa0
   1ae03:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1ae06:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1ae0b:	8d 88 80 00 00 00    	lea    ecx,[eax+0x80]
   1ae11:	a1 80 48 12 00       	mov    eax,ds:0x124880
   1ae16:	05 a0 00 00 00       	add    eax,0xa0
   1ae1b:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   1ae1e:	83 ec 08             	sub    esp,0x8
   1ae21:	53                   	push   ebx
   1ae22:	52                   	push   edx
   1ae23:	51                   	push   ecx
   1ae24:	50                   	push   eax
   1ae25:	68 f4 36 08 00       	push   0x836f4
   1ae2a:	68 00 08 00 00       	push   0x800
   1ae2f:	e8 f3 c6 00 00       	call   27527 <printd>
   1ae34:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/cpu/smp.c:270
    return mc->count;
   1ae37:	a1 6c 65 09 00       	mov    eax,ds:0x9656c
   1ae3c:	0f b7 40 22          	movzx  eax,WORD PTR [eax+0x22]
   1ae40:	0f b7 c0             	movzx  eax,ax
/home/yogi/src/os/chrisOS/src/cpu/smp.c:271 (discriminator 1)
   1ae43:	8d 65 f4             	lea    esp,[ebp-0xc]
   1ae46:	5b                   	pop    ebx
   1ae47:	5e                   	pop    esi
   1ae48:	5f                   	pop    edi
   1ae49:	5d                   	pop    ebp
   1ae4a:	c3                   	ret    
   1ae4b:	90                   	nop

0001ae4c <activateDebugger>:
activateDebugger():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:19
extern uint8_t kTerminalHeight;
extern uint32_t exceptionCS;
extern uint32_t debugReturnFlags;

void activateDebugger()
{
   1ae4c:	55                   	push   ebp
   1ae4d:	89 e5                	mov    ebp,esp
   1ae4f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:20
    kDebuggerActive=!kDebuggerActive;
   1ae52:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1ae59:	0f b6 c0             	movzx  eax,al
   1ae5c:	85 c0                	test   eax,eax
   1ae5e:	0f 95 c0             	setne  al
   1ae61:	83 f0 01             	xor    eax,0x1
   1ae64:	0f b6 c0             	movzx  eax,al
   1ae67:	83 e0 01             	and    eax,0x1
   1ae6a:	a2 d4 a5 09 00       	mov    ds:0x9a5d4,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:21
    if (kDebuggerActive)
   1ae6f:	0f b6 05 d4 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d4
   1ae76:	84 c0                	test   al,al
   1ae78:	0f 84 87 00 00 00    	je     1af05 <activateDebugger+0xb9>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:24
    {
        //Activate the debugger
        savedTermHeight=kTerminalHeight;
   1ae7e:	0f b6 05 27 00 12 00 	movzx  eax,BYTE PTR ds:0x120027
   1ae85:	a2 d5 a5 09 00       	mov    ds:0x9a5d5,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:25
        kTerminalHeight=20;
   1ae8a:	c6 05 27 00 12 00 14 	mov    BYTE PTR ds:0x120027,0x14
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:26
        cursorSavePosition();
   1ae91:	e8 0d cf ff ff       	call   17da3 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:27
        cursorMoveTo(70,0);
   1ae96:	83 ec 08             	sub    esp,0x8
   1ae99:	6a 00                	push   0x0
   1ae9b:	6a 46                	push   0x46
   1ae9d:	e8 b5 d2 ff ff       	call   18157 <cursorMoveTo>
   1aea2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:28
        printk("D");
   1aea5:	83 ec 0c             	sub    esp,0xc
   1aea8:	68 40 38 08 00       	push   0x83840
   1aead:	e8 55 c6 00 00       	call   27507 <printk>
   1aeb2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1aeb5:	c7 45 f4 15 00 00 00 	mov    DWORD PTR [ebp-0xc],0x15
   1aebc:	eb 12                	jmp    1aed0 <activateDebugger+0x84>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:30 (discriminator 3)
            terminal_clear_line(cnt);
   1aebe:	83 ec 0c             	sub    esp,0xc
   1aec1:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1aec4:	e8 0a d0 ff ff       	call   17ed3 <terminal_clear_line>
   1aec9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 3)
        savedTermHeight=kTerminalHeight;
        kTerminalHeight=20;
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk("D");
        for (int cnt=21;cnt<savedTermHeight;cnt++)
   1aecc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:29 (discriminator 1)
   1aed0:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1aed7:	0f b6 c0             	movzx  eax,al
   1aeda:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1aedd:	7f df                	jg     1aebe <activateDebugger+0x72>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:31
            terminal_clear_line(cnt);
        cursorMoveTo(0,21);
   1aedf:	83 ec 08             	sub    esp,0x8
   1aee2:	6a 15                	push   0x15
   1aee4:	6a 00                	push   0x0
   1aee6:	e8 6c d2 ff ff       	call   18157 <cursorMoveTo>
   1aeeb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:32
        printk("-------------------------------- DEBUG --------------------------------");
   1aeee:	83 ec 0c             	sub    esp,0xc
   1aef1:	68 44 38 08 00       	push   0x83844
   1aef6:	e8 0c c6 00 00       	call   27507 <printk>
   1aefb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:33
        cursorRestorePosition();
   1aefe:	e8 ec ce ff ff       	call   17def <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
        cursorSavePosition();
        cursorMoveTo(70,0);
        printk(" ");
        cursorRestorePosition();
    }
}
   1af03:	eb 35                	jmp    1af3a <activateDebugger+0xee>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:37
        printk("-------------------------------- DEBUG --------------------------------");
        cursorRestorePosition();
    }
    else    //Deactivate the debugger
    {
        kTerminalHeight=savedTermHeight;
   1af05:	0f b6 05 d5 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d5
   1af0c:	a2 27 00 12 00       	mov    ds:0x120027,al
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:38
        cursorSavePosition();
   1af11:	e8 8d ce ff ff       	call   17da3 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:39
        cursorMoveTo(70,0);
   1af16:	83 ec 08             	sub    esp,0x8
   1af19:	6a 00                	push   0x0
   1af1b:	6a 46                	push   0x46
   1af1d:	e8 35 d2 ff ff       	call   18157 <cursorMoveTo>
   1af22:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:40
        printk(" ");
   1af25:	83 ec 0c             	sub    esp,0xc
   1af28:	68 8c 38 08 00       	push   0x8388c
   1af2d:	e8 d5 c5 00 00       	call   27507 <printk>
   1af32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:41
        cursorRestorePosition();
   1af35:	e8 b5 ce ff ff       	call   17def <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:43
    }
}
   1af3a:	90                   	nop
   1af3b:	c9                   	leave  
   1af3c:	c3                   	ret    

0001af3d <debugStep>:
debugStep():
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:46

void debugStep()
{
   1af3d:	55                   	push   ebp
   1af3e:	89 e5                	mov    ebp,esp
   1af40:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:47
    cursorSavePosition();
   1af43:	e8 5b ce ff ff       	call   17da3 <cursorSavePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:48
    cursorMoveTo(0,22);
   1af48:	83 ec 08             	sub    esp,0x8
   1af4b:	6a 16                	push   0x16
   1af4d:	6a 00                	push   0x0
   1af4f:	e8 03 d2 ff ff       	call   18157 <cursorMoveTo>
   1af54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:49
    printDebugRegs();
   1af57:	e8 e2 a8 00 00       	call   2583e <printDebugRegs>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:50
    cursorRestorePosition();
   1af5c:	e8 8e ce ff ff       	call   17def <cursorRestorePosition>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:51
    waitForKeyboardKey();
   1af61:	e8 c2 62 ff ff       	call   11228 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:52
    return;
   1af66:	90                   	nop
/home/yogi/src/os/chrisOS/src/debugger/debugger.c:53
}
   1af67:	c9                   	leave  
   1af68:	c3                   	ret    
   1af69:	66 90                	xchg   ax,ax
   1af6b:	90                   	nop

0001af6c <fatfs_init>:
fatfs_init():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:44

//-----------------------------------------------------------------------------
// fatfs_init: Load FAT Parameters
//-----------------------------------------------------------------------------
int fatfs_init(struct fatfs *fs)
{
   1af6c:	55                   	push   ebp
   1af6d:	89 e5                	mov    ebp,esp
   1af6f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:52
    uint32 FATSz;
    uint32 root_dir_sectors;
    uint32 total_sectors;
    uint32 data_sectors;
    uint32 count_of_clusters;
    uint8 valid_partition = 0;
   1af72:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:54

    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1af76:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af79:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1af80:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:55
    fs->currentsector.dirty = 0;
   1af83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af86:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1af8d:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:57

    fs->next_free_cluster = 0; // Invalid
   1af90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1af93:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:59

    fatfs_fat_init(fs);
   1af9a:	83 ec 0c             	sub    esp,0xc
   1af9d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1afa0:	e8 43 56 00 00       	call   205e8 <fatfs_fat_init>
   1afa5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:62

    // Make sure we have a read function (write function is optional)
    if (!fs->disk_io.read_media)
   1afa8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afab:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1afae:	85 c0                	test   eax,eax
   1afb0:	75 0a                	jne    1afbc <fatfs_init+0x50>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:63
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1afb2:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1afb7:	e9 46 05 00 00       	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:69

    // MBR: Sector 0 on the disk
    // NOTE: Some removeable media does not have this.

    // Load MBR (LBA 0) into the 512 byte buffer
    if (!fs->disk_io.read_media(0, fs->currentsector.sector, 1))
   1afbc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afbf:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1afc2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1afc5:	83 c2 44             	add    edx,0x44
   1afc8:	83 ec 04             	sub    esp,0x4
   1afcb:	6a 01                	push   0x1
   1afcd:	52                   	push   edx
   1afce:	6a 00                	push   0x0
   1afd0:	ff d0                	call   eax
   1afd2:	83 c4 10             	add    esp,0x10
   1afd5:	85 c0                	test   eax,eax
   1afd7:	75 0a                	jne    1afe3 <fatfs_init+0x77>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:70
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1afd9:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1afde:	e9 1f 05 00 00       	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74

    // Make Sure 0x55 and 0xAA are at end of sector
    // (this should be the case regardless of the MBR or boot sector)
    if (fs->currentsector.sector[SIGNATURE_POSITION] != 0x55 || fs->currentsector.sector[SIGNATURE_POSITION+1] != 0xAA)
   1afe3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1afe6:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1afed:	3c 55                	cmp    al,0x55
   1afef:	75 0e                	jne    1afff <fatfs_init+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:74 (discriminator 1)
   1aff1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1aff4:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1affb:	3c aa                	cmp    al,0xaa
   1affd:	74 0a                	je     1b009 <fatfs_init+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:75
        return FAT_INIT_INVALID_SIGNATURE;
   1afff:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1b004:	e9 f9 04 00 00       	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:78

    // Now check again using the access function to prove endian conversion function
    if (GET_16BIT_WORD(fs->currentsector.sector, SIGNATURE_POSITION) != SIGNATURE_VALUE)
   1b009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b00c:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1b013:	0f b6 c0             	movzx  eax,al
   1b016:	c1 e0 08             	shl    eax,0x8
   1b019:	89 c2                	mov    edx,eax
   1b01b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b01e:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1b025:	0f b6 c0             	movzx  eax,al
   1b028:	01 d0                	add    eax,edx
   1b02a:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1b02f:	74 0a                	je     1b03b <fatfs_init+0xcf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:79
        return FAT_INIT_ENDIAN_ERROR;
   1b031:	b8 fc ff ff ff       	mov    eax,0xfffffffc
   1b036:	e9 c7 04 00 00       	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:86
    // Verify packed structures
    if (sizeof(struct fat_dir_entry) != FAT_DIR_ENTRY_SIZE)
        return FAT_INIT_STRUCT_PACKING;

    // Check the partition type code
    switch(fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION])
   1b03b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b03e:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1b045:	0f b6 c0             	movzx  eax,al
   1b048:	83 f8 0f             	cmp    eax,0xf
   1b04b:	77 15                	ja     1b062 <fatfs_init+0xf6>
   1b04d:	8b 04 85 90 38 08 00 	mov    eax,DWORD PTR [eax*4+0x83890]
   1b054:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:94
        case 0x06:
        case 0x0C:
        case 0x0E:
        case 0x0F:
        case 0x05:
            valid_partition = 1;
   1b056:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:95
        break;
   1b05a:	eb 19                	jmp    1b075 <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:97
        case 0x00:
            valid_partition = 0;
   1b05c:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:98
            break;
   1b060:	eb 13                	jmp    1b075 <fatfs_init+0x109>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:100
        default:
            if (fs->currentsector.sector[PARTITION1_TYPECODE_LOCATION] <= 0x06)
   1b062:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b065:	0f b6 80 06 02 00 00 	movzx  eax,BYTE PTR [eax+0x206]
   1b06c:	3c 06                	cmp    al,0x6
   1b06e:	77 04                	ja     1b074 <fatfs_init+0x108>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:101
                valid_partition = 1;
   1b070:	c6 45 ef 01          	mov    BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:102
        break;
   1b074:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:106
    }

    // Read LBA Begin for the file system
    if (valid_partition)
   1b075:	80 7d ef 00          	cmp    BYTE PTR [ebp-0x11],0x0
   1b079:	74 4d                	je     1b0c8 <fatfs_init+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:107
        fs->lba_begin = GET_32BIT_WORD(fs->currentsector.sector, PARTITION1_LBA_BEGIN_LOCATION);
   1b07b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b07e:	0f b6 80 0d 02 00 00 	movzx  eax,BYTE PTR [eax+0x20d]
   1b085:	0f b6 c0             	movzx  eax,al
   1b088:	c1 e0 18             	shl    eax,0x18
   1b08b:	89 c2                	mov    edx,eax
   1b08d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b090:	0f b6 80 0c 02 00 00 	movzx  eax,BYTE PTR [eax+0x20c]
   1b097:	0f b6 c0             	movzx  eax,al
   1b09a:	c1 e0 10             	shl    eax,0x10
   1b09d:	01 c2                	add    edx,eax
   1b09f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0a2:	0f b6 80 0b 02 00 00 	movzx  eax,BYTE PTR [eax+0x20b]
   1b0a9:	0f b6 c0             	movzx  eax,al
   1b0ac:	c1 e0 08             	shl    eax,0x8
   1b0af:	01 c2                	add    edx,eax
   1b0b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0b4:	0f b6 80 0a 02 00 00 	movzx  eax,BYTE PTR [eax+0x20a]
   1b0bb:	0f b6 c0             	movzx  eax,al
   1b0be:	01 c2                	add    edx,eax
   1b0c0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0c3:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
   1b0c6:	eb 0a                	jmp    1b0d2 <fatfs_init+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:110
    // Else possibly MBR less disk
    else
        fs->lba_begin = 0;
   1b0c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0cb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:114

    // Load Volume 1 table into sector buffer
    // (We may already have this in the buffer if MBR less drive!)
    if (!fs->disk_io.read_media(fs->lba_begin, fs->currentsector.sector, 1))
   1b0d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b0d5:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b0d8:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b0db:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b0de:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b0e1:	8b 52 1c             	mov    edx,DWORD PTR [edx+0x1c]
   1b0e4:	83 ec 04             	sub    esp,0x4
   1b0e7:	6a 01                	push   0x1
   1b0e9:	51                   	push   ecx
   1b0ea:	52                   	push   edx
   1b0eb:	ff d0                	call   eax
   1b0ed:	83 c4 10             	add    esp,0x10
   1b0f0:	85 c0                	test   eax,eax
   1b0f2:	75 0a                	jne    1b0fe <fatfs_init+0x192>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:115
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1b0f4:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1b0f9:	e9 04 04 00 00       	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:118

    // Make sure there are 512 bytes per cluster
    if (GET_16BIT_WORD(fs->currentsector.sector, 0x0B) != FAT_SECTOR_SIZE)
   1b0fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b101:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b105:	0f b6 c0             	movzx  eax,al
   1b108:	c1 e0 08             	shl    eax,0x8
   1b10b:	89 c2                	mov    edx,eax
   1b10d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b110:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b114:	0f b6 c0             	movzx  eax,al
   1b117:	01 d0                	add    eax,edx
   1b119:	3d 00 02 00 00       	cmp    eax,0x200
   1b11e:	74 0a                	je     1b12a <fatfs_init+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:119
        return FAT_INIT_INVALID_SECTOR_SIZE;
   1b120:	b8 fe ff ff ff       	mov    eax,0xfffffffe
   1b125:	e9 d8 03 00 00       	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:122

    // Load Parameters of FAT partition
    fs->sectors_per_cluster = fs->currentsector.sector[BPB_SECPERCLUS];
   1b12a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b12d:	0f b6 50 51          	movzx  edx,BYTE PTR [eax+0x51]
   1b131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b134:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:123
    reserved_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT);
   1b136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b139:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1b13d:	0f b6 c0             	movzx  eax,al
   1b140:	c1 e0 08             	shl    eax,0x8
   1b143:	89 c2                	mov    edx,eax
   1b145:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b148:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1b14c:	0f b6 c0             	movzx  eax,al
   1b14f:	01 d0                	add    eax,edx
   1b151:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:124
    num_of_fats = fs->currentsector.sector[BPB_NUMFATS];
   1b155:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b158:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1b15c:	88 45 eb             	mov    BYTE PTR [ebp-0x15],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:125
    fs->root_entry_count = GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT);
   1b15f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b162:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1b166:	0f b6 c0             	movzx  eax,al
   1b169:	c1 e0 08             	shl    eax,0x8
   1b16c:	89 c2                	mov    edx,eax
   1b16e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b171:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1b175:	0f b6 c0             	movzx  eax,al
   1b178:	01 c2                	add    edx,eax
   1b17a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b17d:	66 89 50 28          	mov    WORD PTR [eax+0x28],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:127

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1b181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b184:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b188:	0f b6 c0             	movzx  eax,al
   1b18b:	c1 e0 08             	shl    eax,0x8
   1b18e:	89 c2                	mov    edx,eax
   1b190:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b193:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b197:	0f b6 c0             	movzx  eax,al
   1b19a:	01 d0                	add    eax,edx
   1b19c:	85 c0                	test   eax,eax
   1b19e:	74 25                	je     1b1c5 <fatfs_init+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:128
        fs->fat_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1b1a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1a3:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b1a7:	0f b6 c0             	movzx  eax,al
   1b1aa:	c1 e0 08             	shl    eax,0x8
   1b1ad:	89 c2                	mov    edx,eax
   1b1af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1b2:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b1b6:	0f b6 c0             	movzx  eax,al
   1b1b9:	01 d0                	add    eax,edx
   1b1bb:	89 c2                	mov    edx,eax
   1b1bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1c0:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
   1b1c3:	eb 3f                	jmp    1b204 <fatfs_init+0x298>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:130
    else
        fs->fat_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1b1c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1c8:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1b1cc:	0f b6 c0             	movzx  eax,al
   1b1cf:	c1 e0 18             	shl    eax,0x18
   1b1d2:	89 c2                	mov    edx,eax
   1b1d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1d7:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1b1db:	0f b6 c0             	movzx  eax,al
   1b1de:	c1 e0 10             	shl    eax,0x10
   1b1e1:	01 c2                	add    edx,eax
   1b1e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1e6:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1b1ea:	0f b6 c0             	movzx  eax,al
   1b1ed:	c1 e0 08             	shl    eax,0x8
   1b1f0:	01 c2                	add    edx,eax
   1b1f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b1f5:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1b1f9:	0f b6 c0             	movzx  eax,al
   1b1fc:	01 c2                	add    edx,eax
   1b1fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b201:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:133

    // For FAT32 (which this may be)
    fs->rootdir_first_cluster = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_ROOTCLUS);
   1b204:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b207:	0f b6 40 73          	movzx  eax,BYTE PTR [eax+0x73]
   1b20b:	0f b6 c0             	movzx  eax,al
   1b20e:	c1 e0 18             	shl    eax,0x18
   1b211:	89 c2                	mov    edx,eax
   1b213:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b216:	0f b6 40 72          	movzx  eax,BYTE PTR [eax+0x72]
   1b21a:	0f b6 c0             	movzx  eax,al
   1b21d:	c1 e0 10             	shl    eax,0x10
   1b220:	01 c2                	add    edx,eax
   1b222:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b225:	0f b6 40 71          	movzx  eax,BYTE PTR [eax+0x71]
   1b229:	0f b6 c0             	movzx  eax,al
   1b22c:	c1 e0 08             	shl    eax,0x8
   1b22f:	01 c2                	add    edx,eax
   1b231:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b234:	0f b6 40 70          	movzx  eax,BYTE PTR [eax+0x70]
   1b238:	0f b6 c0             	movzx  eax,al
   1b23b:	01 c2                	add    edx,eax
   1b23d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b240:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:134
    fs->fs_info_sector = GET_16BIT_WORD(fs->currentsector.sector, BPB_FAT32_FSINFO);
   1b243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b246:	0f b6 40 75          	movzx  eax,BYTE PTR [eax+0x75]
   1b24a:	0f b6 c0             	movzx  eax,al
   1b24d:	c1 e0 08             	shl    eax,0x8
   1b250:	89 c2                	mov    edx,eax
   1b252:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b255:	0f b6 40 74          	movzx  eax,BYTE PTR [eax+0x74]
   1b259:	0f b6 c0             	movzx  eax,al
   1b25c:	01 c2                	add    edx,eax
   1b25e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b261:	66 89 50 18          	mov    WORD PTR [eax+0x18],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:137

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = reserved_sectors + (num_of_fats * fs->fat_sectors);
   1b265:	0f b7 55 ec          	movzx  edx,WORD PTR [ebp-0x14]
   1b269:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1b26d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b270:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1b273:	0f af c1             	imul   eax,ecx
   1b276:	01 c2                	add    edx,eax
   1b278:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b27b:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:138
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1b27e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b281:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1b285:	0f b7 c0             	movzx  eax,ax
   1b288:	c1 e0 05             	shl    eax,0x5
   1b28b:	05 ff 01 00 00       	add    eax,0x1ff
   1b290:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1b296:	85 c0                	test   eax,eax
   1b298:	0f 48 c2             	cmovs  eax,edx
   1b29b:	c1 f8 09             	sar    eax,0x9
   1b29e:	89 c2                	mov    edx,eax
   1b2a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2a3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:141

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + reserved_sectors;
   1b2a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2a9:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b2ac:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   1b2b0:	01 c2                	add    edx,eax
   1b2b2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2b5:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:144

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (num_of_fats * fs->fat_sectors);
   1b2b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2bb:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1b2be:	0f b6 4d eb          	movzx  ecx,BYTE PTR [ebp-0x15]
   1b2c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2c5:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1b2c8:	0f af c1             	imul   eax,ecx
   1b2cb:	01 c2                	add    edx,eax
   1b2cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2d0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:146

    if (GET_16BIT_WORD(fs->currentsector.sector, 0x1FE) != 0xAA55) // This signature should be AA55
   1b2d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2d6:	0f b6 80 43 02 00 00 	movzx  eax,BYTE PTR [eax+0x243]
   1b2dd:	0f b6 c0             	movzx  eax,al
   1b2e0:	c1 e0 08             	shl    eax,0x8
   1b2e3:	89 c2                	mov    edx,eax
   1b2e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b2e8:	0f b6 80 42 02 00 00 	movzx  eax,BYTE PTR [eax+0x242]
   1b2ef:	0f b6 c0             	movzx  eax,al
   1b2f2:	01 d0                	add    eax,edx
   1b2f4:	3d 55 aa 00 00       	cmp    eax,0xaa55
   1b2f9:	74 0a                	je     1b305 <fatfs_init+0x399>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:147
        return FAT_INIT_INVALID_SIGNATURE;
   1b2fb:	b8 fd ff ff ff       	mov    eax,0xfffffffd
   1b300:	e9 fd 01 00 00       	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:150

    // Calculate the root dir sectors
    root_dir_sectors = ((GET_16BIT_WORD(fs->currentsector.sector, BPB_ROOTENTCNT) * 32) + (GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC) - 1)) / GET_16BIT_WORD(fs->currentsector.sector, BPB_BYTSPERSEC);
   1b305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b308:	0f b6 40 56          	movzx  eax,BYTE PTR [eax+0x56]
   1b30c:	0f b6 c0             	movzx  eax,al
   1b30f:	c1 e0 08             	shl    eax,0x8
   1b312:	89 c2                	mov    edx,eax
   1b314:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b317:	0f b6 40 55          	movzx  eax,BYTE PTR [eax+0x55]
   1b31b:	0f b6 c0             	movzx  eax,al
   1b31e:	01 d0                	add    eax,edx
   1b320:	c1 e0 05             	shl    eax,0x5
   1b323:	89 c2                	mov    edx,eax
   1b325:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b328:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b32c:	0f b6 c0             	movzx  eax,al
   1b32f:	c1 e0 08             	shl    eax,0x8
   1b332:	89 c1                	mov    ecx,eax
   1b334:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b337:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b33b:	0f b6 c0             	movzx  eax,al
   1b33e:	01 c8                	add    eax,ecx
   1b340:	83 e8 01             	sub    eax,0x1
   1b343:	01 c2                	add    edx,eax
   1b345:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b348:	0f b6 40 50          	movzx  eax,BYTE PTR [eax+0x50]
   1b34c:	0f b6 c0             	movzx  eax,al
   1b34f:	c1 e0 08             	shl    eax,0x8
   1b352:	89 c1                	mov    ecx,eax
   1b354:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b357:	0f b6 40 4f          	movzx  eax,BYTE PTR [eax+0x4f]
   1b35b:	0f b6 c0             	movzx  eax,al
   1b35e:	01 c1                	add    ecx,eax
   1b360:	89 d0                	mov    eax,edx
   1b362:	99                   	cdq    
   1b363:	f7 f9                	idiv   ecx
   1b365:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:152

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16) != 0)
   1b368:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b36b:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b36f:	0f b6 c0             	movzx  eax,al
   1b372:	c1 e0 08             	shl    eax,0x8
   1b375:	89 c2                	mov    edx,eax
   1b377:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b37a:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b37e:	0f b6 c0             	movzx  eax,al
   1b381:	01 d0                	add    eax,edx
   1b383:	85 c0                	test   eax,eax
   1b385:	74 20                	je     1b3a7 <fatfs_init+0x43b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:153
        FATSz = GET_16BIT_WORD(fs->currentsector.sector, BPB_FATSZ16);
   1b387:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b38a:	0f b6 40 5b          	movzx  eax,BYTE PTR [eax+0x5b]
   1b38e:	0f b6 c0             	movzx  eax,al
   1b391:	c1 e0 08             	shl    eax,0x8
   1b394:	89 c2                	mov    edx,eax
   1b396:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b399:	0f b6 40 5a          	movzx  eax,BYTE PTR [eax+0x5a]
   1b39d:	0f b6 c0             	movzx  eax,al
   1b3a0:	01 d0                	add    eax,edx
   1b3a2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1b3a5:	eb 3c                	jmp    1b3e3 <fatfs_init+0x477>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:155
    else
        FATSz = GET_32BIT_WORD(fs->currentsector.sector, BPB_FAT32_FATSZ32);
   1b3a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3aa:	0f b6 40 6b          	movzx  eax,BYTE PTR [eax+0x6b]
   1b3ae:	0f b6 c0             	movzx  eax,al
   1b3b1:	c1 e0 18             	shl    eax,0x18
   1b3b4:	89 c2                	mov    edx,eax
   1b3b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3b9:	0f b6 40 6a          	movzx  eax,BYTE PTR [eax+0x6a]
   1b3bd:	0f b6 c0             	movzx  eax,al
   1b3c0:	c1 e0 10             	shl    eax,0x10
   1b3c3:	01 c2                	add    edx,eax
   1b3c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3c8:	0f b6 40 69          	movzx  eax,BYTE PTR [eax+0x69]
   1b3cc:	0f b6 c0             	movzx  eax,al
   1b3cf:	c1 e0 08             	shl    eax,0x8
   1b3d2:	01 c2                	add    edx,eax
   1b3d4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3d7:	0f b6 40 68          	movzx  eax,BYTE PTR [eax+0x68]
   1b3db:	0f b6 c0             	movzx  eax,al
   1b3de:	01 d0                	add    eax,edx
   1b3e0:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:157

    if(GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16) != 0)
   1b3e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3e6:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b3ea:	0f b6 c0             	movzx  eax,al
   1b3ed:	c1 e0 08             	shl    eax,0x8
   1b3f0:	89 c2                	mov    edx,eax
   1b3f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b3f5:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b3f9:	0f b6 c0             	movzx  eax,al
   1b3fc:	01 d0                	add    eax,edx
   1b3fe:	85 c0                	test   eax,eax
   1b400:	74 20                	je     1b422 <fatfs_init+0x4b6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:158
        total_sectors = GET_16BIT_WORD(fs->currentsector.sector, BPB_TOTSEC16);
   1b402:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b405:	0f b6 40 58          	movzx  eax,BYTE PTR [eax+0x58]
   1b409:	0f b6 c0             	movzx  eax,al
   1b40c:	c1 e0 08             	shl    eax,0x8
   1b40f:	89 c2                	mov    edx,eax
   1b411:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b414:	0f b6 40 57          	movzx  eax,BYTE PTR [eax+0x57]
   1b418:	0f b6 c0             	movzx  eax,al
   1b41b:	01 d0                	add    eax,edx
   1b41d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1b420:	eb 3c                	jmp    1b45e <fatfs_init+0x4f2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:160
    else
        total_sectors = GET_32BIT_WORD(fs->currentsector.sector, BPB_TOTSEC32);
   1b422:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b425:	0f b6 40 67          	movzx  eax,BYTE PTR [eax+0x67]
   1b429:	0f b6 c0             	movzx  eax,al
   1b42c:	c1 e0 18             	shl    eax,0x18
   1b42f:	89 c2                	mov    edx,eax
   1b431:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b434:	0f b6 40 66          	movzx  eax,BYTE PTR [eax+0x66]
   1b438:	0f b6 c0             	movzx  eax,al
   1b43b:	c1 e0 10             	shl    eax,0x10
   1b43e:	01 c2                	add    edx,eax
   1b440:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b443:	0f b6 40 65          	movzx  eax,BYTE PTR [eax+0x65]
   1b447:	0f b6 c0             	movzx  eax,al
   1b44a:	c1 e0 08             	shl    eax,0x8
   1b44d:	01 c2                	add    edx,eax
   1b44f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b452:	0f b6 40 64          	movzx  eax,BYTE PTR [eax+0x64]
   1b456:	0f b6 c0             	movzx  eax,al
   1b459:	01 d0                	add    eax,edx
   1b45b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:162

    data_sectors = total_sectors - (GET_16BIT_WORD(fs->currentsector.sector, BPB_RSVDSECCNT) + (fs->currentsector.sector[BPB_NUMFATS] * FATSz) + root_dir_sectors);
   1b45e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b461:	0f b6 40 53          	movzx  eax,BYTE PTR [eax+0x53]
   1b465:	0f b6 c0             	movzx  eax,al
   1b468:	c1 e0 08             	shl    eax,0x8
   1b46b:	89 c2                	mov    edx,eax
   1b46d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b470:	0f b6 40 52          	movzx  eax,BYTE PTR [eax+0x52]
   1b474:	0f b6 c0             	movzx  eax,al
   1b477:	01 d0                	add    eax,edx
   1b479:	89 c2                	mov    edx,eax
   1b47b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b47e:	0f b6 40 54          	movzx  eax,BYTE PTR [eax+0x54]
   1b482:	0f b6 c0             	movzx  eax,al
   1b485:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   1b489:	01 c2                	add    edx,eax
   1b48b:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1b48e:	01 c2                	add    edx,eax
   1b490:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b493:	29 d0                	sub    eax,edx
   1b495:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:165

    // Find out which version of FAT this is...
    if (fs->sectors_per_cluster != 0)
   1b498:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b49b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b49e:	84 c0                	test   al,al
   1b4a0:	74 5b                	je     1b4fd <fatfs_init+0x591>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:167
    {
        count_of_clusters = data_sectors / fs->sectors_per_cluster;
   1b4a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4a5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b4a8:	0f b6 c8             	movzx  ecx,al
   1b4ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1b4ae:	ba 00 00 00 00       	mov    edx,0x0
   1b4b3:	f7 f1                	div    ecx
   1b4b5:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:169

        if(count_of_clusters < 4085)
   1b4b8:	81 7d dc f4 0f 00 00 	cmp    DWORD PTR [ebp-0x24],0xff4
   1b4bf:	77 07                	ja     1b4c8 <fatfs_init+0x55c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:171
            // Volume is FAT12
            return FAT_INIT_WRONG_FILESYS_TYPE;
   1b4c1:	b8 fb ff ff ff       	mov    eax,0xfffffffb
   1b4c6:	eb 3a                	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:172
        else if(count_of_clusters < 65525)
   1b4c8:	81 7d dc f4 ff 00 00 	cmp    DWORD PTR [ebp-0x24],0xfff4
   1b4cf:	77 1b                	ja     1b4ec <fatfs_init+0x580>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:175
        {
            // Clear this FAT32 specific param
            fs->rootdir_first_cluster = 0;
   1b4d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4d4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:178

            // Volume is FAT16
            fs->fat_type = FAT_TYPE_16;
   1b4db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4de:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:179
            return FAT_INIT_OK;
   1b4e5:	b8 00 00 00 00       	mov    eax,0x0
   1b4ea:	eb 16                	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:184
        }
        else
        {
            // Volume is FAT32
            fs->fat_type = FAT_TYPE_32;
   1b4ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b4ef:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:185
            return FAT_INIT_OK;
   1b4f6:	b8 00 00 00 00       	mov    eax,0x0
   1b4fb:	eb 05                	jmp    1b502 <fatfs_init+0x596>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:189
        }
    }
    else
        return FAT_INIT_WRONG_FILESYS_TYPE;
   1b4fd:	b8 fb ff ff ff       	mov    eax,0xfffffffb
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:190
}
   1b502:	c9                   	leave  
   1b503:	c3                   	ret    

0001b504 <fatfs_lba_of_cluster>:
fatfs_lba_of_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:196
//-----------------------------------------------------------------------------
// fatfs_lba_of_cluster: This function converts a cluster number into a sector /
// LBA number.
//-----------------------------------------------------------------------------
uint32 fatfs_lba_of_cluster(struct fatfs *fs, uint32 Cluster_Number)
{
   1b504:	55                   	push   ebp
   1b505:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:197
    if (fs->fat_type == FAT_TYPE_16)
   1b507:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b50a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b50d:	85 c0                	test   eax,eax
   1b50f:	75 39                	jne    1b54a <fatfs_lba_of_cluster+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:198
        return (fs->cluster_begin_lba + (fs->root_entry_count * 32 / FAT_SECTOR_SIZE) + ((Cluster_Number-2) * fs->sectors_per_cluster));
   1b511:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b514:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b517:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b51a:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1b51e:	0f b7 c0             	movzx  eax,ax
   1b521:	c1 e0 05             	shl    eax,0x5
   1b524:	8d 88 ff 01 00 00    	lea    ecx,[eax+0x1ff]
   1b52a:	85 c0                	test   eax,eax
   1b52c:	0f 48 c1             	cmovs  eax,ecx
   1b52f:	c1 f8 09             	sar    eax,0x9
   1b532:	01 c2                	add    edx,eax
   1b534:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b537:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b53a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b53d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b540:	0f b6 c0             	movzx  eax,al
   1b543:	0f af c1             	imul   eax,ecx
   1b546:	01 d0                	add    eax,edx
   1b548:	eb 1a                	jmp    1b564 <fatfs_lba_of_cluster+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:200
    else
        return ((fs->cluster_begin_lba + ((Cluster_Number-2)*fs->sectors_per_cluster)));
   1b54a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b54d:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1b550:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b553:	8d 48 fe             	lea    ecx,[eax-0x2]
   1b556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b559:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b55c:	0f b6 c0             	movzx  eax,al
   1b55f:	0f af c1             	imul   eax,ecx
   1b562:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:201
}
   1b564:	5d                   	pop    ebp
   1b565:	c3                   	ret    

0001b566 <fatfs_sector_read>:
fatfs_sector_read():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:206
//-----------------------------------------------------------------------------
// fatfs_sector_read:
//-----------------------------------------------------------------------------
int fatfs_sector_read(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b566:	55                   	push   ebp
   1b567:	89 e5                	mov    ebp,esp
   1b569:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:207
    return fs->disk_io.read_media(lba, target, count);
   1b56c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b56f:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b572:	83 ec 04             	sub    esp,0x4
   1b575:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b578:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b57b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b57e:	ff d0                	call   eax
   1b580:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:208
}
   1b583:	c9                   	leave  
   1b584:	c3                   	ret    

0001b585 <fatfs_sector_write>:
fatfs_sector_write():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:213
//-----------------------------------------------------------------------------
// fatfs_sector_write:
//-----------------------------------------------------------------------------
int fatfs_sector_write(struct fatfs *fs, uint32 lba, uint8 *target, uint32 count)
{
   1b585:	55                   	push   ebp
   1b586:	89 e5                	mov    ebp,esp
   1b588:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:214
    return fs->disk_io.write_media(lba, target, count);
   1b58b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b58e:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b591:	83 ec 04             	sub    esp,0x4
   1b594:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b597:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1b59a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b59d:	ff d0                	call   eax
   1b59f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:215
}
   1b5a2:	c9                   	leave  
   1b5a3:	c3                   	ret    

0001b5a4 <fatfs_sector_reader>:
fatfs_sector_reader():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:221
//-----------------------------------------------------------------------------
// fatfs_sector_reader: From the provided startcluster and sector offset
// Returns True if success, returns False if not (including if read out of range)
//-----------------------------------------------------------------------------
int fatfs_sector_reader(struct fatfs *fs, uint32 start_cluster, uint32 offset, uint8 *target)
{
   1b5a4:	55                   	push   ebp
   1b5a5:	89 e5                	mov    ebp,esp
   1b5a7:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:222
    uint32 sector_to_read = 0;
   1b5aa:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:223
    uint32 cluster_to_read = 0;
   1b5b1:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:224
    uint32 cluster_chain = 0;
   1b5b8:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229
    uint32 i;
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
   1b5bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5c2:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b5c5:	85 c0                	test   eax,eax
   1b5c7:	75 36                	jne    1b5ff <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:229 (discriminator 1)
   1b5c9:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b5cd:	75 30                	jne    1b5ff <fatfs_sector_reader+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    {
        if (offset < fs->rootdir_sectors)
   1b5cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5d2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b5d5:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b5d8:	76 1b                	jbe    1b5f5 <fatfs_sector_reader+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:232
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
   1b5da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5dd:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b5e0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b5e3:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b5e6:	01 c2                	add    edx,eax
   1b5e8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b5eb:	01 d0                	add    eax,edx
   1b5ed:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:231
    uint32 lba;

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && start_cluster == 0)
    {
        if (offset < fs->rootdir_sectors)
   1b5f0:	e9 8e 00 00 00       	jmp    1b683 <fatfs_sector_reader+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:234
            lba = fs->lba_begin + fs->rootdir_first_sector + offset;
        else
            return 0;
   1b5f5:	b8 00 00 00 00       	mov    eax,0x0
   1b5fa:	e9 e4 00 00 00       	jmp    1b6e3 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:240
    }
    // FAT16/32 Other
    else
    {
        // Set start of cluster chain to initial value
        cluster_chain = start_cluster;
   1b5ff:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1b602:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:243

        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
   1b605:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b608:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b60b:	0f b6 c8             	movzx  ecx,al
   1b60e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b611:	ba 00 00 00 00       	mov    edx,0x0
   1b616:	f7 f1                	div    ecx
   1b618:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:244
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);
   1b61b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b61e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b621:	0f b6 c0             	movzx  eax,al
   1b624:	0f af 45 e4          	imul   eax,DWORD PTR [ebp-0x1c]
   1b628:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1b62b:	29 c2                	sub    edx,eax
   1b62d:	89 d0                	mov    eax,edx
   1b62f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b632:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1b639:	eb 18                	jmp    1b653 <fatfs_sector_reader+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:248 (discriminator 3)
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);
   1b63b:	83 ec 08             	sub    esp,0x8
   1b63e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b641:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b644:	e8 f9 52 00 00       	call   20942 <fatfs_find_next_cluster>
   1b649:	83 c4 10             	add    esp,0x10
   1b64c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 3)
        // Find parameters
        cluster_to_read = offset / fs->sectors_per_cluster;
        sector_to_read = offset - (cluster_to_read*fs->sectors_per_cluster);

        // Follow chain to find cluster to read
        for (i=0; i<cluster_to_read; i++)
   1b64f:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:247 (discriminator 1)
   1b653:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1b656:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   1b659:	72 e0                	jb     1b63b <fatfs_sector_reader+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:251
            cluster_chain = fatfs_find_next_cluster(fs, cluster_chain);

        // If end of cluster chain then return false
        if (cluster_chain == FAT32_LAST_CLUSTER)
   1b65b:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1b65f:	75 07                	jne    1b668 <fatfs_sector_reader+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:252
            return 0;
   1b661:	b8 00 00 00 00       	mov    eax,0x0
   1b666:	eb 7b                	jmp    1b6e3 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:255

        // Calculate sector address
        lba = fatfs_lba_of_cluster(fs, cluster_chain)+sector_to_read;
   1b668:	83 ec 08             	sub    esp,0x8
   1b66b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b66e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b671:	e8 8e fe ff ff       	call   1b504 <fatfs_lba_of_cluster>
   1b676:	83 c4 10             	add    esp,0x10
   1b679:	89 c2                	mov    edx,eax
   1b67b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1b67e:	01 d0                	add    eax,edx
   1b680:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:259
    }

    // User provided target array
    if (target)
   1b683:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b687:	74 18                	je     1b6a1 <fatfs_sector_reader+0xfd>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:260
        return fs->disk_io.read_media(lba, target, 1);
   1b689:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b68c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b68f:	83 ec 04             	sub    esp,0x4
   1b692:	6a 01                	push   0x1
   1b694:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b697:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1b69a:	ff d0                	call   eax
   1b69c:	83 c4 10             	add    esp,0x10
   1b69f:	eb 42                	jmp    1b6e3 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:262
    // Else read sector if not already loaded
    else if (lba != fs->currentsector.address)
   1b6a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6a4:	8b 80 44 02 00 00    	mov    eax,DWORD PTR [eax+0x244]
   1b6aa:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1b6ad:	74 2f                	je     1b6de <fatfs_sector_reader+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:264
    {
        fs->currentsector.address = lba;
   1b6af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6b2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1b6b5:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:265
        return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b6bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6be:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b6c1:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b6c4:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b6c7:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b6ca:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b6d0:	83 ec 04             	sub    esp,0x4
   1b6d3:	6a 01                	push   0x1
   1b6d5:	51                   	push   ecx
   1b6d6:	52                   	push   edx
   1b6d7:	ff d0                	call   eax
   1b6d9:	83 c4 10             	add    esp,0x10
   1b6dc:	eb 05                	jmp    1b6e3 <fatfs_sector_reader+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:268
    }
    else
        return 1;
   1b6de:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:269
}
   1b6e3:	c9                   	leave  
   1b6e4:	c3                   	ret    

0001b6e5 <fatfs_read_sector>:
fatfs_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:275
//-----------------------------------------------------------------------------
// fatfs_read_sector: Read from the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
int fatfs_read_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b6e5:	55                   	push   ebp
   1b6e6:	89 e5                	mov    ebp,esp
   1b6e8:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277
    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b6eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b6ee:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b6f1:	85 c0                	test   eax,eax
   1b6f3:	0f 85 83 00 00 00    	jne    1b77c <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:277 (discriminator 1)
   1b6f9:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b6fd:	75 7d                	jne    1b77c <fatfs_read_sector+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:282
    {
        uint32 lba;

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
   1b6ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b702:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b705:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b708:	76 1e                	jbe    1b728 <fatfs_read_sector+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:283
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b70a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b70d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b710:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b713:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b716:	01 c2                	add    edx,eax
   1b718:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b71b:	01 d0                	add    eax,edx
   1b71d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:288
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b720:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b724:	74 27                	je     1b74d <fatfs_read_sector+0x68>
   1b726:	eb 0a                	jmp    1b732 <fatfs_read_sector+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:285

        // In FAT16, there are a limited amount of sectors in root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b728:	b8 00 00 00 00       	mov    eax,0x0
   1b72d:	e9 c5 00 00 00       	jmp    1b7f7 <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:291

        // User target buffer passed in
        if (target)
        {
            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b732:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b735:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b738:	83 ec 04             	sub    esp,0x4
   1b73b:	6a 01                	push   0x1
   1b73d:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b740:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b743:	ff d0                	call   eax
   1b745:	83 c4 10             	add    esp,0x10
   1b748:	e9 aa 00 00 00       	jmp    1b7f7 <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:296
        }
        else
        {
            // Calculate read address
            fs->currentsector.address = lba;
   1b74d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b750:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b753:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:299

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b759:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b75c:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b75f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b762:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b765:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b768:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b76e:	83 ec 04             	sub    esp,0x4
   1b771:	6a 01                	push   0x1
   1b773:	51                   	push   ecx
   1b774:	52                   	push   edx
   1b775:	ff d0                	call   eax
   1b777:	83 c4 10             	add    esp,0x10
   1b77a:	eb 7b                	jmp    1b7f7 <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:306
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b77c:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b780:	74 33                	je     1b7b5 <fatfs_read_sector+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:309
        {
            // Calculate read address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b782:	83 ec 08             	sub    esp,0x8
   1b785:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b788:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b78b:	e8 74 fd ff ff       	call   1b504 <fatfs_lba_of_cluster>
   1b790:	83 c4 10             	add    esp,0x10
   1b793:	89 c2                	mov    edx,eax
   1b795:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b798:	01 d0                	add    eax,edx
   1b79a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:312

            // Read from disk
            return fs->disk_io.read_media(lba, target, 1);
   1b79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7a0:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b7a3:	83 ec 04             	sub    esp,0x4
   1b7a6:	6a 01                	push   0x1
   1b7a8:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b7ab:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b7ae:	ff d0                	call   eax
   1b7b0:	83 c4 10             	add    esp,0x10
   1b7b3:	eb 42                	jmp    1b7f7 <fatfs_read_sector+0x112>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:317
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b7b5:	83 ec 08             	sub    esp,0x8
   1b7b8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b7bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b7be:	e8 41 fd ff ff       	call   1b504 <fatfs_lba_of_cluster>
   1b7c3:	83 c4 10             	add    esp,0x10
   1b7c6:	89 c2                	mov    edx,eax
   1b7c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b7cb:	01 c2                	add    edx,eax
   1b7cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7d0:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:320

            // Read from disk
            return fs->disk_io.read_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b7d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b7d9:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1b7dc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b7df:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b7e2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b7e5:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b7eb:	83 ec 04             	sub    esp,0x4
   1b7ee:	6a 01                	push   0x1
   1b7f0:	51                   	push   ecx
   1b7f1:	52                   	push   edx
   1b7f2:	ff d0                	call   eax
   1b7f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:323
        }
    }
}
   1b7f7:	c9                   	leave  
   1b7f8:	c3                   	ret    

0001b7f9 <fatfs_write_sector>:
fatfs_write_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:330
// fatfs_write_sector: Write to the provided cluster and sector offset
// Returns True if success, returns False if not
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_write_sector(struct fatfs *fs, uint32 cluster, uint32 sector, uint8 *target)
{
   1b7f9:	55                   	push   ebp
   1b7fa:	89 e5                	mov    ebp,esp
   1b7fc:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:332
    // No write access?
    if (!fs->disk_io.write_media)
   1b7ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b802:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b805:	85 c0                	test   eax,eax
   1b807:	75 0a                	jne    1b813 <fatfs_write_sector+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:333
        return 0;
   1b809:	b8 00 00 00 00       	mov    eax,0x0
   1b80e:	e9 0c 01 00 00       	jmp    1b91f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336

    // FAT16 Root directory
    if (fs->fat_type == FAT_TYPE_16 && cluster == 0)
   1b813:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b816:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b819:	85 c0                	test   eax,eax
   1b81b:	0f 85 83 00 00 00    	jne    1b8a4 <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:336 (discriminator 1)
   1b821:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1b825:	75 7d                	jne    1b8a4 <fatfs_write_sector+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:341
    {
        uint32 lba;

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
   1b827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b82a:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1b82d:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1b830:	76 1e                	jbe    1b850 <fatfs_write_sector+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:342
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
   1b832:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b835:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1b838:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b83b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1b83e:	01 c2                	add    edx,eax
   1b840:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b843:	01 d0                	add    eax,edx
   1b845:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:347
        else
            return 0;

        // User target buffer passed in
        if (target)
   1b848:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b84c:	74 27                	je     1b875 <fatfs_write_sector+0x7c>
   1b84e:	eb 0a                	jmp    1b85a <fatfs_write_sector+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:344

        // In FAT16 we cannot extend the root dir!
        if (sector < fs->rootdir_sectors)
            lba = fs->lba_begin + fs->rootdir_first_sector + sector;
        else
            return 0;
   1b850:	b8 00 00 00 00       	mov    eax,0x0
   1b855:	e9 c5 00 00 00       	jmp    1b91f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:350

        // User target buffer passed in
        if (target)
        {
            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1b85a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b85d:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b860:	83 ec 04             	sub    esp,0x4
   1b863:	6a 01                	push   0x1
   1b865:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b868:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1b86b:	ff d0                	call   eax
   1b86d:	83 c4 10             	add    esp,0x10
   1b870:	e9 aa 00 00 00       	jmp    1b91f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:355
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = lba;
   1b875:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b878:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1b87b:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:358

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b881:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b884:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b887:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b88a:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b88d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b890:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b896:	83 ec 04             	sub    esp,0x4
   1b899:	6a 01                	push   0x1
   1b89b:	51                   	push   ecx
   1b89c:	52                   	push   edx
   1b89d:	ff d0                	call   eax
   1b89f:	83 c4 10             	add    esp,0x10
   1b8a2:	eb 7b                	jmp    1b91f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:365
    }
    // FAT16/32 Other
    else
    {
        // User target buffer passed in
        if (target)
   1b8a4:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1b8a8:	74 33                	je     1b8dd <fatfs_write_sector+0xe4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:368
        {
            // Calculate write address
            uint32 lba = fatfs_lba_of_cluster(fs, cluster) + sector;
   1b8aa:	83 ec 08             	sub    esp,0x8
   1b8ad:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b8b0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b8b3:	e8 4c fc ff ff       	call   1b504 <fatfs_lba_of_cluster>
   1b8b8:	83 c4 10             	add    esp,0x10
   1b8bb:	89 c2                	mov    edx,eax
   1b8bd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b8c0:	01 d0                	add    eax,edx
   1b8c2:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:371

            // Write to disk
            return fs->disk_io.write_media(lba, target, 1);
   1b8c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8c8:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b8cb:	83 ec 04             	sub    esp,0x4
   1b8ce:	6a 01                	push   0x1
   1b8d0:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1b8d3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1b8d6:	ff d0                	call   eax
   1b8d8:	83 c4 10             	add    esp,0x10
   1b8db:	eb 42                	jmp    1b91f <fatfs_write_sector+0x126>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:376
        }
        else
        {
            // Calculate write address
            fs->currentsector.address = fatfs_lba_of_cluster(fs, cluster)+sector;
   1b8dd:	83 ec 08             	sub    esp,0x8
   1b8e0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1b8e3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1b8e6:	e8 19 fc ff ff       	call   1b504 <fatfs_lba_of_cluster>
   1b8eb:	83 c4 10             	add    esp,0x10
   1b8ee:	89 c2                	mov    edx,eax
   1b8f0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1b8f3:	01 c2                	add    edx,eax
   1b8f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b8f8:	89 90 44 02 00 00    	mov    DWORD PTR [eax+0x244],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:379

            // Write to disk
            return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1b8fe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b901:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1b904:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b907:	8d 4a 44             	lea    ecx,[edx+0x44]
   1b90a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1b90d:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1b913:	83 ec 04             	sub    esp,0x4
   1b916:	6a 01                	push   0x1
   1b918:	51                   	push   ecx
   1b919:	52                   	push   edx
   1b91a:	ff d0                	call   eax
   1b91c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:382
        }
    }
}
   1b91f:	c9                   	leave  
   1b920:	c3                   	ret    

0001b921 <fatfs_show_details>:
fatfs_show_details():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:388
#endif
//-----------------------------------------------------------------------------
// fatfs_show_details: Show the details about the filesystem
//-----------------------------------------------------------------------------
void fatfs_show_details(struct fatfs *fs)
{
   1b921:	55                   	push   ebp
   1b922:	89 e5                	mov    ebp,esp
   1b924:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:389
    FAT_PRINTF(("FAT details:\r\n"));
   1b927:	83 ec 0c             	sub    esp,0xc
   1b92a:	68 d0 38 08 00       	push   0x838d0
   1b92f:	e8 d3 bb 00 00       	call   27507 <printk>
   1b934:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390
    FAT_PRINTF((" Type =%s", (fs->fat_type == FAT_TYPE_32) ? "FAT32": "FAT16"));
   1b937:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b93a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   1b93d:	83 f8 01             	cmp    eax,0x1
   1b940:	75 07                	jne    1b949 <fatfs_show_details+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 1)
   1b942:	b8 df 38 08 00       	mov    eax,0x838df
   1b947:	eb 05                	jmp    1b94e <fatfs_show_details+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 2)
   1b949:	b8 e5 38 08 00       	mov    eax,0x838e5
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:390 (discriminator 4)
   1b94e:	83 ec 08             	sub    esp,0x8
   1b951:	50                   	push   eax
   1b952:	68 eb 38 08 00       	push   0x838eb
   1b957:	e8 ab bb 00 00       	call   27507 <printk>
   1b95c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:391 (discriminator 4)
    FAT_PRINTF((" Root Dir First Cluster = %x\r\n", fs->rootdir_first_cluster));
   1b95f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b962:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1b965:	83 ec 08             	sub    esp,0x8
   1b968:	50                   	push   eax
   1b969:	68 f8 38 08 00       	push   0x838f8
   1b96e:	e8 94 bb 00 00       	call   27507 <printk>
   1b973:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:392 (discriminator 4)
    FAT_PRINTF((" FAT Begin LBA = 0x%x\r\n",fs->fat_begin_lba));
   1b976:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b979:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1b97c:	83 ec 08             	sub    esp,0x8
   1b97f:	50                   	push   eax
   1b980:	68 17 39 08 00       	push   0x83917
   1b985:	e8 7d bb 00 00       	call   27507 <printk>
   1b98a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:393 (discriminator 4)
    FAT_PRINTF((" Cluster Begin LBA = 0x%x\r\n",fs->cluster_begin_lba));
   1b98d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b990:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1b993:	83 ec 08             	sub    esp,0x8
   1b996:	50                   	push   eax
   1b997:	68 2f 39 08 00       	push   0x8392f
   1b99c:	e8 66 bb 00 00       	call   27507 <printk>
   1b9a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:394 (discriminator 4)
    FAT_PRINTF((" Sectors Per Cluster = %d\r\n", fs->sectors_per_cluster));
   1b9a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9a7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1b9aa:	0f b6 c0             	movzx  eax,al
   1b9ad:	83 ec 08             	sub    esp,0x8
   1b9b0:	50                   	push   eax
   1b9b1:	68 4b 39 08 00       	push   0x8394b
   1b9b6:	e8 4c bb 00 00       	call   27507 <printk>
   1b9bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:395 (discriminator 4)
}
   1b9be:	90                   	nop
   1b9bf:	c9                   	leave  
   1b9c0:	c3                   	ret    

0001b9c1 <fatfs_get_root_cluster>:
fatfs_get_root_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:400
//-----------------------------------------------------------------------------
// fatfs_get_root_cluster: Get the root dir cluster
//-----------------------------------------------------------------------------
uint32 fatfs_get_root_cluster(struct fatfs *fs)
{
   1b9c1:	55                   	push   ebp
   1b9c2:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:402
    // NOTE: On FAT16 this will be 0 which has a special meaning...
    return fs->rootdir_first_cluster;
   1b9c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1b9c7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:403
}
   1b9ca:	5d                   	pop    ebp
   1b9cb:	c3                   	ret    

0001b9cc <fatfs_get_file_entry>:
fatfs_get_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:408
//-------------------------------------------------------------
// fatfs_get_file_entry: Find the file entry for a filename
//-------------------------------------------------------------
uint32 fatfs_get_file_entry(struct fatfs *fs, uint32 Cluster, char *name_to_find, struct fat_dir_entry *sfEntry)
{
   1b9cc:	55                   	push   ebp
   1b9cd:	89 e5                	mov    ebp,esp
   1b9cf:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:409
    uint8 item=0;
   1b9d5:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:410
    uint16 recordoffset = 0;
   1b9d9:	66 c7 45 ea 00 00    	mov    WORD PTR [ebp-0x16],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:411
    uint8 i=0;
   1b9df:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:412
    int x=0;
   1b9e3:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:413
    char *long_filename = NULL;
   1b9ea:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:416
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1b9f1:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:419
    struct fat_dir_entry *directoryEntry;

    fatfs_lfn_cache_init(&lfn, 1);
   1b9f8:	83 ec 08             	sub    esp,0x8
   1b9fb:	6a 01                	push   0x1
   1b9fd:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1ba03:	50                   	push   eax
   1ba04:	e8 8f 39 00 00       	call   1f398 <fatfs_lfn_cache_init>
   1ba09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:425

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1ba0c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ba0f:	8d 50 01             	lea    edx,[eax+0x1]
   1ba12:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1ba15:	6a 00                	push   0x0
   1ba17:	50                   	push   eax
   1ba18:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ba1b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ba1e:	e8 81 fb ff ff       	call   1b5a4 <fatfs_sector_reader>
   1ba23:	83 c4 10             	add    esp,0x10
   1ba26:	85 c0                	test   eax,eax
   1ba28:	0f 84 13 02 00 00    	je     1bc41 <fatfs_get_file_entry+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1ba2e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1ba32:	e9 fb 01 00 00       	jmp    1bc32 <fatfs_get_file_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:431
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1ba37:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1ba3b:	c1 e0 05             	shl    eax,0x5
   1ba3e:	66 89 45 ea          	mov    WORD PTR [ebp-0x16],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:434

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1ba42:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba45:	8d 50 44             	lea    edx,[eax+0x44]
   1ba48:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1ba4c:	01 d0                	add    eax,edx
   1ba4e:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:438

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1ba51:	83 ec 0c             	sub    esp,0xc
   1ba54:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1ba57:	e8 56 3c 00 00       	call   1f6b2 <fatfs_entry_lfn_text>
   1ba5c:	83 c4 10             	add    esp,0x10
   1ba5f:	85 c0                	test   eax,eax
   1ba61:	74 24                	je     1ba87 <fatfs_get_file_entry+0xbb>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:439
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1ba63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ba66:	8d 50 44             	lea    edx,[eax+0x44]
   1ba69:	0f b7 45 ea          	movzx  eax,WORD PTR [ebp-0x16]
   1ba6d:	01 d0                	add    eax,edx
   1ba6f:	83 ec 08             	sub    esp,0x8
   1ba72:	50                   	push   eax
   1ba73:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1ba79:	50                   	push   eax
   1ba7a:	e8 6f 39 00 00       	call   1f3ee <fatfs_lfn_cache_entry>
   1ba7f:	83 c4 10             	add    esp,0x10
   1ba82:	e9 a1 01 00 00       	jmp    1bc28 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:442

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1ba87:	83 ec 0c             	sub    esp,0xc
   1ba8a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1ba8d:	e8 43 3c 00 00       	call   1f6d5 <fatfs_entry_lfn_invalid>
   1ba92:	83 c4 10             	add    esp,0x10
   1ba95:	85 c0                	test   eax,eax
   1ba97:	74 19                	je     1bab2 <fatfs_get_file_entry+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:443
                    fatfs_lfn_cache_init(&lfn, 0);
   1ba99:	83 ec 08             	sub    esp,0x8
   1ba9c:	6a 00                	push   0x0
   1ba9e:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1baa4:	50                   	push   eax
   1baa5:	e8 ee 38 00 00       	call   1f398 <fatfs_lfn_cache_init>
   1baaa:	83 c4 10             	add    esp,0x10
   1baad:	e9 76 01 00 00       	jmp    1bc28 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:446

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1bab2:	83 ec 08             	sub    esp,0x8
   1bab5:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bab8:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1babe:	50                   	push   eax
   1babf:	e8 52 3c 00 00       	call   1f716 <fatfs_entry_lfn_exists>
   1bac4:	83 c4 10             	add    esp,0x10
   1bac7:	85 c0                	test   eax,eax
   1bac9:	74 60                	je     1bb2b <fatfs_get_file_entry+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:448
                {
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1bacb:	83 ec 0c             	sub    esp,0xc
   1bace:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bad4:	50                   	push   eax
   1bad5:	e8 80 3b 00 00       	call   1f65a <fatfs_lfn_cache_get>
   1bada:	83 c4 10             	add    esp,0x10
   1badd:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:451

                    // Compare names to see if they match
                    if (fatfs_compare_names(long_filename, name_to_find))
   1bae0:	83 ec 08             	sub    esp,0x8
   1bae3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bae6:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1bae9:	e8 5d 47 00 00       	call   2024b <fatfs_compare_names>
   1baee:	83 c4 10             	add    esp,0x10
   1baf1:	85 c0                	test   eax,eax
   1baf3:	74 1d                	je     1bb12 <fatfs_get_file_entry+0x146>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:453
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1baf5:	83 ec 04             	sub    esp,0x4
   1baf8:	6a 20                	push   0x20
   1bafa:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bafd:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1bb00:	e8 67 a3 00 00       	call   25e6c <memcpy>
   1bb05:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:454
                        return 1;
   1bb08:	b8 01 00 00 00       	mov    eax,0x1
   1bb0d:	e9 35 01 00 00       	jmp    1bc47 <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:457
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1bb12:	83 ec 08             	sub    esp,0x8
   1bb15:	6a 00                	push   0x0
   1bb17:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bb1d:	50                   	push   eax
   1bb1e:	e8 75 38 00 00       	call   1f398 <fatfs_lfn_cache_init>
   1bb23:	83 c4 10             	add    esp,0x10
   1bb26:	e9 fd 00 00 00       	jmp    1bc28 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:462
                }
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bb2b:	83 ec 0c             	sub    esp,0xc
   1bb2e:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bb31:	e8 3a 3c 00 00       	call   1f770 <fatfs_entry_sfn_only>
   1bb36:	83 c4 10             	add    esp,0x10
   1bb39:	85 c0                	test   eax,eax
   1bb3b:	0f 84 e7 00 00 00    	je     1bc28 <fatfs_get_file_entry+0x25c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:464
                {
                    memset(short_filename, 0, sizeof(short_filename));
   1bb41:	83 ec 04             	sub    esp,0x4
   1bb44:	6a 0d                	push   0xd
   1bb46:	6a 00                	push   0x0
   1bb48:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1bb4b:	50                   	push   eax
   1bb4c:	e8 70 98 00 00       	call   253c1 <memset>
   1bb51:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467

                    // Copy name to string
                    for (i=0; i<8; i++)
   1bb54:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   1bb58:	eb 1d                	jmp    1bb77 <fatfs_get_file_entry+0x1ab>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:468 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1bb5a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bb5e:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   1bb62:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1bb65:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1bb69:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 3)
                if (fatfs_entry_sfn_only(directoryEntry) )
                {
                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1bb6d:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bb71:	83 c0 01             	add    eax,0x1
   1bb74:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:467 (discriminator 1)
   1bb77:	80 7d f6 07          	cmp    BYTE PTR [ebp-0xa],0x7
   1bb7b:	76 dd                	jbe    1bb5a <fatfs_get_file_entry+0x18e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:471
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1bb7d:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472
                    for (i=8; i<11; i++)
   1bb84:	c6 45 f6 08          	mov    BYTE PTR [ebp-0xa],0x8
   1bb88:	eb 36                	jmp    1bbc0 <fatfs_get_file_entry+0x1f4>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:474
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1bb8a:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bb8e:	8d 48 01             	lea    ecx,[eax+0x1]
   1bb91:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bb95:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1bb98:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1bb9c:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:475
                        if (directoryEntry->Name[i] != ' ')
   1bba0:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bba4:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1bba7:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1bbab:	3c 20                	cmp    al,0x20
   1bbad:	74 07                	je     1bbb6 <fatfs_get_file_entry+0x1ea>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:476
                            dotRequired = 1;
   1bbaf:	c7 45 ec 01 00 00 00 	mov    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1bbb6:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1bbba:	83 c0 01             	add    eax,0x1
   1bbbd:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:472 (discriminator 1)
   1bbc0:	80 7d f6 0a          	cmp    BYTE PTR [ebp-0xa],0xa
   1bbc4:	76 c4                	jbe    1bb8a <fatfs_get_file_entry+0x1be>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:480
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1bbc6:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1bbca:	74 14                	je     1bbe0 <fatfs_get_file_entry+0x214>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:483
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1bbcc:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1bbd0:	3c 2e                	cmp    al,0x2e
   1bbd2:	74 06                	je     1bbda <fatfs_get_file_entry+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:484
                            short_filename[8] = '.';
   1bbd4:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1bbd8:	eb 0a                	jmp    1bbe4 <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:486
                        else
                            short_filename[8] = ' ';
   1bbda:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1bbde:	eb 04                	jmp    1bbe4 <fatfs_get_file_entry+0x218>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:489
                    }
                    else
                        short_filename[8] = ' ';
   1bbe0:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:492

                    // Compare names to see if they match
                    if (fatfs_compare_names(short_filename, name_to_find))
   1bbe4:	83 ec 08             	sub    esp,0x8
   1bbe7:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bbea:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1bbed:	50                   	push   eax
   1bbee:	e8 58 46 00 00       	call   2024b <fatfs_compare_names>
   1bbf3:	83 c4 10             	add    esp,0x10
   1bbf6:	85 c0                	test   eax,eax
   1bbf8:	74 1a                	je     1bc14 <fatfs_get_file_entry+0x248>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:494
                    {
                        memcpy(sfEntry,directoryEntry,sizeof(struct fat_dir_entry));
   1bbfa:	83 ec 04             	sub    esp,0x4
   1bbfd:	6a 20                	push   0x20
   1bbff:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1bc02:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1bc05:	e8 62 a2 00 00       	call   25e6c <memcpy>
   1bc0a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:495
                        return 1;
   1bc0d:	b8 01 00 00 00       	mov    eax,0x1
   1bc12:	eb 33                	jmp    1bc47 <fatfs_get_file_entry+0x27b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:498
                    }

                    fatfs_lfn_cache_init(&lfn, 0);
   1bc14:	83 ec 08             	sub    esp,0x8
   1bc17:	6a 00                	push   0x0
   1bc19:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1bc1f:	50                   	push   eax
   1bc20:	e8 73 37 00 00       	call   1f398 <fatfs_lfn_cache_init>
   1bc25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bc28:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bc2c:	83 c0 01             	add    eax,0x1
   1bc2f:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:428 (discriminator 1)
   1bc32:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bc36:	0f 86 fb fd ff ff    	jbe    1ba37 <fatfs_get_file_entry+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:504 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1bc3c:	e9 cb fd ff ff       	jmp    1ba0c <fatfs_get_file_entry+0x40>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:503
                    fatfs_lfn_cache_init(&lfn, 0);
                }
            } // End of if
        }
        else
            break;
   1bc41:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:506
    } // End of while loop

    return 0;
   1bc42:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:507 (discriminator 2)
}
   1bc47:	c9                   	leave  
   1bc48:	c3                   	ret    

0001bc49 <fatfs_sfn_exists>:
fatfs_sfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:514
// fatfs_sfn_exists: Check if a short filename exists.
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_sfn_exists(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1bc49:	55                   	push   ebp
   1bc4a:	89 e5                	mov    ebp,esp
   1bc4c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:515
    uint8 item=0;
   1bc4f:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:516
    uint16 recordoffset = 0;
   1bc53:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:517
    int x=0;
   1bc59:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:524

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bc60:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bc63:	8d 50 01             	lea    edx,[eax+0x1]
   1bc66:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bc69:	6a 00                	push   0x0
   1bc6b:	50                   	push   eax
   1bc6c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bc6f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bc72:	e8 2d f9 ff ff       	call   1b5a4 <fatfs_sector_reader>
   1bc77:	83 c4 10             	add    esp,0x10
   1bc7a:	85 c0                	test   eax,eax
   1bc7c:	0f 84 8a 00 00 00    	je     1bd0c <fatfs_sfn_exists+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bc82:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bc86:	eb 79                	jmp    1bd01 <fatfs_sfn_exists+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:530
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bc88:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bc8c:	c1 e0 05             	shl    eax,0x5
   1bc8f:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:533

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bc93:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bc96:	8d 50 44             	lea    edx,[eax+0x44]
   1bc99:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bc9d:	01 d0                	add    eax,edx
   1bc9f:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:537

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bca2:	83 ec 0c             	sub    esp,0xc
   1bca5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bca8:	e8 05 3a 00 00       	call   1f6b2 <fatfs_entry_lfn_text>
   1bcad:	83 c4 10             	add    esp,0x10
   1bcb0:	85 c0                	test   eax,eax
   1bcb2:	75 43                	jne    1bcf7 <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:541
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bcb4:	83 ec 0c             	sub    esp,0xc
   1bcb7:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bcba:	e8 16 3a 00 00       	call   1f6d5 <fatfs_entry_lfn_invalid>
   1bcbf:	83 c4 10             	add    esp,0x10
   1bcc2:	85 c0                	test   eax,eax
   1bcc4:	75 31                	jne    1bcf7 <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:546
                    ;
                else
#endif
                // Normal Entry, only 8.3 Text
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bcc6:	83 ec 0c             	sub    esp,0xc
   1bcc9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bccc:	e8 9f 3a 00 00       	call   1f770 <fatfs_entry_sfn_only>
   1bcd1:	83 c4 10             	add    esp,0x10
   1bcd4:	85 c0                	test   eax,eax
   1bcd6:	74 1f                	je     1bcf7 <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:548
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1bcd8:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bcdb:	83 ec 04             	sub    esp,0x4
   1bcde:	6a 0b                	push   0xb
   1bce0:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bce3:	50                   	push   eax
   1bce4:	e8 6f 5f ff ff       	call   11c58 <strncmp>
   1bce9:	83 c4 10             	add    esp,0x10
   1bcec:	85 c0                	test   eax,eax
   1bcee:	75 07                	jne    1bcf7 <fatfs_sfn_exists+0xae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:549
                        return 1;
   1bcf0:	b8 01 00 00 00       	mov    eax,0x1
   1bcf5:	eb 1b                	jmp    1bd12 <fatfs_sfn_exists+0xc9>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bcf7:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bcfb:	83 c0 01             	add    eax,0x1
   1bcfe:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:527 (discriminator 1)
   1bd01:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bd05:	76 81                	jbe    1bc88 <fatfs_sfn_exists+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:555 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1bd07:	e9 54 ff ff ff       	jmp    1bc60 <fatfs_sfn_exists+0x17>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:554
                        return 1;
                }
            } // End of if
        }
        else
            break;
   1bd0c:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:557
    } // End of while loop

    return 0;
   1bd0d:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:558
}
   1bd12:	c9                   	leave  
   1bd13:	c3                   	ret    

0001bd14 <fatfs_update_timestamps>:
fatfs_update_timestamps():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:565
//-------------------------------------------------------------
// fatfs_update_timestamps: Update date/time details
//-------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
int fatfs_update_timestamps(struct fat_dir_entry *directoryEntry, int create, int modify, int access)
{
   1bd14:	55                   	push   ebp
   1bd15:	89 e5                	mov    ebp,esp
   1bd17:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:572
    struct tm * time_info;
    uint16 fat_time;
    uint16 fat_date;

    // Get system time
    time(&time_now);
   1bd1a:	83 ec 0c             	sub    esp,0xc
   1bd1d:	8d 45 ec             	lea    eax,[ebp-0x14]
   1bd20:	50                   	push   eax
   1bd21:	e8 2e be 00 00       	call   27b54 <time>
   1bd26:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:575

    // Convert to local time
    time_info = localtime(&time_now);
   1bd29:	83 ec 0c             	sub    esp,0xc
   1bd2c:	8d 45 ec             	lea    eax,[ebp-0x14]
   1bd2f:	50                   	push   eax
   1bd30:	e8 3d c1 00 00       	call   27e72 <localtime>
   1bd35:	83 c4 10             	add    esp,0x10
   1bd38:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:578

    // Convert time to FAT format
    fat_time = fatfs_convert_to_fat_time(time_info->tm_hour, time_info->tm_min, time_info->tm_sec);
   1bd3b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bd3e:	8b 08                	mov    ecx,DWORD PTR [eax]
   1bd40:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bd43:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1bd46:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bd49:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1bd4c:	83 ec 04             	sub    esp,0x4
   1bd4f:	51                   	push   ecx
   1bd50:	52                   	push   edx
   1bd51:	50                   	push   eax
   1bd52:	e8 e9 40 00 00       	call   1fe40 <fatfs_convert_to_fat_time>
   1bd57:	83 c4 10             	add    esp,0x10
   1bd5a:	66 89 45 f2          	mov    WORD PTR [ebp-0xe],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:581

    // Convert date to FAT format
    fat_date = fatfs_convert_to_fat_date(time_info->tm_mday, time_info->tm_mon + 1, time_info->tm_year + 1900);
   1bd5e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bd61:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   1bd64:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   1bd6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bd6d:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1bd70:	8d 50 01             	lea    edx,[eax+0x1]
   1bd73:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1bd76:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1bd79:	83 ec 04             	sub    esp,0x4
   1bd7c:	51                   	push   ecx
   1bd7d:	52                   	push   edx
   1bd7e:	50                   	push   eax
   1bd7f:	e8 0e 41 00 00       	call   1fe92 <fatfs_convert_to_fat_date>
   1bd84:	83 c4 10             	add    esp,0x10
   1bd87:	66 89 45 f0          	mov    WORD PTR [ebp-0x10],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:584

    // Update requested fields
    if (create)
   1bd8b:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1bd8f:	74 38                	je     1bdc9 <fatfs_update_timestamps+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:586
    {
        directoryEntry->CrtTime[1] = fat_time >> 8;
   1bd91:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bd95:	66 c1 e8 08          	shr    ax,0x8
   1bd99:	89 c2                	mov    edx,eax
   1bd9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bd9e:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:587
        directoryEntry->CrtTime[0] = fat_time >> 0;
   1bda1:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bda5:	89 c2                	mov    edx,eax
   1bda7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bdaa:	88 50 0e             	mov    BYTE PTR [eax+0xe],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:588
        directoryEntry->CrtDate[1] = fat_date >> 8;
   1bdad:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bdb1:	66 c1 e8 08          	shr    ax,0x8
   1bdb5:	89 c2                	mov    edx,eax
   1bdb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bdba:	88 50 11             	mov    BYTE PTR [eax+0x11],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:589
        directoryEntry->CrtDate[0] = fat_date >> 0;
   1bdbd:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bdc1:	89 c2                	mov    edx,eax
   1bdc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bdc6:	88 50 10             	mov    BYTE PTR [eax+0x10],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:592
    }

    if (modify)
   1bdc9:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1bdcd:	74 38                	je     1be07 <fatfs_update_timestamps+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:594
    {
        directoryEntry->WrtTime[1] = fat_time >> 8;
   1bdcf:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bdd3:	66 c1 e8 08          	shr    ax,0x8
   1bdd7:	89 c2                	mov    edx,eax
   1bdd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bddc:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:595
        directoryEntry->WrtTime[0] = fat_time >> 0;
   1bddf:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1bde3:	89 c2                	mov    edx,eax
   1bde5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bde8:	88 50 16             	mov    BYTE PTR [eax+0x16],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:596
        directoryEntry->WrtDate[1] = fat_date >> 8;
   1bdeb:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bdef:	66 c1 e8 08          	shr    ax,0x8
   1bdf3:	89 c2                	mov    edx,eax
   1bdf5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bdf8:	88 50 19             	mov    BYTE PTR [eax+0x19],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:597
        directoryEntry->WrtDate[0] = fat_date >> 0;
   1bdfb:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1bdff:	89 c2                	mov    edx,eax
   1be01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be04:	88 50 18             	mov    BYTE PTR [eax+0x18],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:600
    }

    if (access)
   1be07:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1be0b:	74 38                	je     1be45 <fatfs_update_timestamps+0x131>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:602
    {
        directoryEntry->LstAccDate[1] = fat_time >> 8;
   1be0d:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1be11:	66 c1 e8 08          	shr    ax,0x8
   1be15:	89 c2                	mov    edx,eax
   1be17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be1a:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:603
        directoryEntry->LstAccDate[0] = fat_time >> 0;
   1be1d:	0f b7 45 f2          	movzx  eax,WORD PTR [ebp-0xe]
   1be21:	89 c2                	mov    edx,eax
   1be23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be26:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:604
        directoryEntry->LstAccDate[1] = fat_date >> 8;
   1be29:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1be2d:	66 c1 e8 08          	shr    ax,0x8
   1be31:	89 c2                	mov    edx,eax
   1be33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be36:	88 50 13             	mov    BYTE PTR [eax+0x13],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:605
        directoryEntry->LstAccDate[0] = fat_date >> 0;
   1be39:	0f b7 45 f0          	movzx  eax,WORD PTR [ebp-0x10]
   1be3d:	89 c2                	mov    edx,eax
   1be3f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be42:	88 50 12             	mov    BYTE PTR [eax+0x12],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:608
    }

    return 1;
   1be45:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:609
}
   1be4a:	c9                   	leave  
   1be4b:	c3                   	ret    

0001be4c <fatfs_update_file_length>:
fatfs_update_file_length():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:617
// fatfs_update_file_length: Find a SFN entry and update it
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_update_file_length(struct fatfs *fs, uint32 Cluster, char *shortname, uint32 fileLength)
{
   1be4c:	55                   	push   ebp
   1be4d:	89 e5                	mov    ebp,esp
   1be4f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:618
    uint8 item=0;
   1be52:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:619
    uint16 recordoffset = 0;
   1be56:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:620
    int x=0;
   1be5c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:624
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1be63:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1be66:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1be69:	85 c0                	test   eax,eax
   1be6b:	75 0a                	jne    1be77 <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:625
        return 0;
   1be6d:	b8 00 00 00 00       	mov    eax,0x0
   1be72:	e9 14 01 00 00       	jmp    1bf8b <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:631

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1be77:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1be7a:	8d 50 01             	lea    edx,[eax+0x1]
   1be7d:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1be80:	6a 00                	push   0x0
   1be82:	50                   	push   eax
   1be83:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1be86:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1be89:	e8 16 f7 ff ff       	call   1b5a4 <fatfs_sector_reader>
   1be8e:	83 c4 10             	add    esp,0x10
   1be91:	85 c0                	test   eax,eax
   1be93:	0f 84 ec 00 00 00    	je     1bf85 <fatfs_update_file_length+0x139>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1be99:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1be9d:	e9 d4 00 00 00       	jmp    1bf76 <fatfs_update_file_length+0x12a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:637
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bea2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bea6:	c1 e0 05             	shl    eax,0x5
   1bea9:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:640

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bead:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1beb0:	8d 50 44             	lea    edx,[eax+0x44]
   1beb3:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1beb7:	01 d0                	add    eax,edx
   1beb9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:644

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bebc:	83 ec 0c             	sub    esp,0xc
   1bebf:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bec2:	e8 eb 37 00 00       	call   1f6b2 <fatfs_entry_lfn_text>
   1bec7:	83 c4 10             	add    esp,0x10
   1beca:	85 c0                	test   eax,eax
   1becc:	0f 85 9a 00 00 00    	jne    1bf6c <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:648
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1bed2:	83 ec 0c             	sub    esp,0xc
   1bed5:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bed8:	e8 f8 37 00 00       	call   1f6d5 <fatfs_entry_lfn_invalid>
   1bedd:	83 c4 10             	add    esp,0x10
   1bee0:	85 c0                	test   eax,eax
   1bee2:	0f 85 84 00 00 00    	jne    1bf6c <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:654
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1bee8:	83 ec 0c             	sub    esp,0xc
   1beeb:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1beee:	e8 7d 38 00 00       	call   1f770 <fatfs_entry_sfn_only>
   1bef3:	83 c4 10             	add    esp,0x10
   1bef6:	85 c0                	test   eax,eax
   1bef8:	74 72                	je     1bf6c <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:656
                {
                    if (strncmp((const char*)directoryEntry->Name, shortname, 11)==0)
   1befa:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1befd:	83 ec 04             	sub    esp,0x4
   1bf00:	6a 0b                	push   0xb
   1bf02:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1bf05:	50                   	push   eax
   1bf06:	e8 4d 5d ff ff       	call   11c58 <strncmp>
   1bf0b:	83 c4 10             	add    esp,0x10
   1bf0e:	85 c0                	test   eax,eax
   1bf10:	75 5a                	jne    1bf6c <fatfs_update_file_length+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:658
                    {
                        directoryEntry->FileSize = FAT_HTONL(fileLength);
   1bf12:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1bf15:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1bf18:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:662

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1bf1b:	6a 01                	push   0x1
   1bf1d:	6a 01                	push   0x1
   1bf1f:	6a 00                	push   0x0
   1bf21:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bf24:	e8 eb fd ff ff       	call   1bd14 <fatfs_update_timestamps>
   1bf29:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:666
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1bf2c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf2f:	8d 50 44             	lea    edx,[eax+0x44]
   1bf32:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bf36:	01 d0                	add    eax,edx
   1bf38:	83 ec 04             	sub    esp,0x4
   1bf3b:	6a 20                	push   0x20
   1bf3d:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1bf40:	50                   	push   eax
   1bf41:	e8 26 9f 00 00       	call   25e6c <memcpy>
   1bf46:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:669

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1bf49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bf4c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bf4f:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bf52:	8d 4a 44             	lea    ecx,[edx+0x44]
   1bf55:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1bf58:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1bf5e:	83 ec 04             	sub    esp,0x4
   1bf61:	6a 01                	push   0x1
   1bf63:	51                   	push   ecx
   1bf64:	52                   	push   edx
   1bf65:	ff d0                	call   eax
   1bf67:	83 c4 10             	add    esp,0x10
   1bf6a:	eb 1f                	jmp    1bf8b <fatfs_update_file_length+0x13f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bf6c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bf70:	83 c0 01             	add    eax,0x1
   1bf73:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:634 (discriminator 1)
   1bf76:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1bf7a:	0f 86 22 ff ff ff    	jbe    1bea2 <fatfs_update_file_length+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:676 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1bf80:	e9 f2 fe ff ff       	jmp    1be77 <fatfs_update_file_length+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:675
                    }
                }
            } // End of if
        }
        else
            break;
   1bf85:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:678
    } // End of while loop

    return 0;
   1bf86:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:679
}
   1bf8b:	c9                   	leave  
   1bf8c:	c3                   	ret    

0001bf8d <fatfs_mark_file_deleted>:
fatfs_mark_file_deleted():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:687
// fatfs_mark_file_deleted: Find a SFN entry and mark if as deleted
// NOTE: shortname is XXXXXXXXYYY not XXXXXXXX.YYY
//-------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_mark_file_deleted(struct fatfs *fs, uint32 Cluster, char *shortname)
{
   1bf8d:	55                   	push   ebp
   1bf8e:	89 e5                	mov    ebp,esp
   1bf90:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:688
    uint8 item=0;
   1bf93:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:689
    uint16 recordoffset = 0;
   1bf97:	66 c7 45 ee 00 00    	mov    WORD PTR [ebp-0x12],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:690
    int x=0;
   1bf9d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:694
    struct fat_dir_entry *directoryEntry;

    // No write access?
    if (!fs->disk_io.write_media)
   1bfa4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bfa7:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1bfaa:	85 c0                	test   eax,eax
   1bfac:	75 0a                	jne    1bfb8 <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:695
        return 0;
   1bfae:	b8 00 00 00 00       	mov    eax,0x0
   1bfb3:	e9 11 01 00 00       	jmp    1c0c9 <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:701

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
   1bfb8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1bfbb:	8d 50 01             	lea    edx,[eax+0x1]
   1bfbe:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   1bfc1:	6a 00                	push   0x0
   1bfc3:	50                   	push   eax
   1bfc4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1bfc7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1bfca:	e8 d5 f5 ff ff       	call   1b5a4 <fatfs_sector_reader>
   1bfcf:	83 c4 10             	add    esp,0x10
   1bfd2:	85 c0                	test   eax,eax
   1bfd4:	0f 84 e9 00 00 00    	je     1c0c3 <fatfs_mark_file_deleted+0x136>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1bfda:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1bfde:	e9 d1 00 00 00       	jmp    1c0b4 <fatfs_mark_file_deleted+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:707
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1bfe3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1bfe7:	c1 e0 05             	shl    eax,0x5
   1bfea:	66 89 45 ee          	mov    WORD PTR [ebp-0x12],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:710

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1bfee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1bff1:	8d 50 44             	lea    edx,[eax+0x44]
   1bff4:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1bff8:	01 d0                	add    eax,edx
   1bffa:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:714

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if (fatfs_entry_lfn_text(directoryEntry) )
   1bffd:	83 ec 0c             	sub    esp,0xc
   1c000:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c003:	e8 aa 36 00 00       	call   1f6b2 <fatfs_entry_lfn_text>
   1c008:	83 c4 10             	add    esp,0x10
   1c00b:	85 c0                	test   eax,eax
   1c00d:	0f 85 97 00 00 00    	jne    1c0aa <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:718
                    ;

                // If Invalid record found delete any long file name information collated
                else if (fatfs_entry_lfn_invalid(directoryEntry) )
   1c013:	83 ec 0c             	sub    esp,0xc
   1c016:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c019:	e8 b7 36 00 00       	call   1f6d5 <fatfs_entry_lfn_invalid>
   1c01e:	83 c4 10             	add    esp,0x10
   1c021:	85 c0                	test   eax,eax
   1c023:	0f 85 81 00 00 00    	jne    1c0aa <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:724
                    ;

                // Normal Entry, only 8.3 Text
                else
#endif
                if (fatfs_entry_sfn_only(directoryEntry) )
   1c029:	83 ec 0c             	sub    esp,0xc
   1c02c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c02f:	e8 3c 37 00 00       	call   1f770 <fatfs_entry_sfn_only>
   1c034:	83 c4 10             	add    esp,0x10
   1c037:	85 c0                	test   eax,eax
   1c039:	74 6f                	je     1c0aa <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:726
                {
                    if (strncmp((const char *)directoryEntry->Name, shortname, 11)==0)
   1c03b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c03e:	83 ec 04             	sub    esp,0x4
   1c041:	6a 0b                	push   0xb
   1c043:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1c046:	50                   	push   eax
   1c047:	e8 0c 5c ff ff       	call   11c58 <strncmp>
   1c04c:	83 c4 10             	add    esp,0x10
   1c04f:	85 c0                	test   eax,eax
   1c051:	75 57                	jne    1c0aa <fatfs_mark_file_deleted+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:729
                    {
                        // Mark as deleted
                        directoryEntry->Name[0] = FILE_HEADER_DELETED;
   1c053:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1c056:	c6 00 e5             	mov    BYTE PTR [eax],0xe5
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:733

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update access / modify time & date
                        fatfs_update_timestamps(directoryEntry, 0, 1, 1);
   1c059:	6a 01                	push   0x1
   1c05b:	6a 01                	push   0x1
   1c05d:	6a 00                	push   0x0
   1c05f:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c062:	e8 ad fc ff ff       	call   1bd14 <fatfs_update_timestamps>
   1c067:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:737
#endif

                        // Update sfn entry
                        memcpy((uint8*)(fs->currentsector.sector+recordoffset), (uint8*)directoryEntry, sizeof(struct fat_dir_entry));
   1c06a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c06d:	8d 50 44             	lea    edx,[eax+0x44]
   1c070:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1c074:	01 d0                	add    eax,edx
   1c076:	83 ec 04             	sub    esp,0x4
   1c079:	6a 20                	push   0x20
   1c07b:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1c07e:	50                   	push   eax
   1c07f:	e8 e8 9d 00 00       	call   25e6c <memcpy>
   1c084:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:740

                        // Write sector back
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   1c087:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c08a:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1c08d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c090:	8d 4a 44             	lea    ecx,[edx+0x44]
   1c093:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1c096:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   1c09c:	83 ec 04             	sub    esp,0x4
   1c09f:	6a 01                	push   0x1
   1c0a1:	51                   	push   ecx
   1c0a2:	52                   	push   edx
   1c0a3:	ff d0                	call   eax
   1c0a5:	83 c4 10             	add    esp,0x10
   1c0a8:	eb 1f                	jmp    1c0c9 <fatfs_mark_file_deleted+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, Cluster, x++, 0)) // If sector read was successfull
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c0aa:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c0ae:	83 c0 01             	add    eax,0x1
   1c0b1:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:704 (discriminator 1)
   1c0b4:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   1c0b8:	0f 86 25 ff ff ff    	jbe    1bfe3 <fatfs_mark_file_deleted+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:747 (discriminator 1)
                }
            } // End of if
        }
        else
            break;
    } // End of while loop
   1c0be:	e9 f5 fe ff ff       	jmp    1bfb8 <fatfs_mark_file_deleted+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:746
                    }
                }
            } // End of if
        }
        else
            break;
   1c0c3:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:749
    } // End of while loop

    return 0;
   1c0c4:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:750
}
   1c0c9:	c9                   	leave  
   1c0ca:	c3                   	ret    

0001c0cb <fatfs_list_directory_start>:
fatfs_list_directory_start():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:757
//-----------------------------------------------------------------------------
// fatfs_list_directory_start: Initialise a directory listing procedure
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fatfs_list_directory_start(struct fatfs *fs, struct fs_dir_list_status *dirls, uint32 StartCluster)
{
   1c0cb:	55                   	push   ebp
   1c0cc:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:758
    dirls->cluster = StartCluster;
   1c0ce:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c0d1:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c0d4:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:759
    dirls->sector = 0;
   1c0d7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c0da:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:760
    dirls->offset = 0;
   1c0e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c0e3:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:761
}
   1c0e7:	90                   	nop
   1c0e8:	5d                   	pop    ebp
   1c0e9:	c3                   	ret    

0001c0ea <fatfs_list_directory_next>:
fatfs_list_directory_next():
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:769
// fatfs_list_directory_next: Get the next entry in the directory.
// Returns: 1 = found, 0 = end of listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fatfs_list_directory_next(struct fatfs *fs, struct fs_dir_list_status *dirls, struct fs_dir_ent *entry)
{
   1c0ea:	55                   	push   ebp
   1c0eb:	89 e5                	mov    ebp,esp
   1c0ed:	81 ec 38 01 00 00    	sub    esp,0x138
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:773
    uint8 i,item;
    uint16 recordoffset;
    struct fat_dir_entry *directoryEntry;
    char *long_filename = NULL;
   1c0f3:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:776
    char short_filename[13];
    struct lfn_cache lfn;
    int dotRequired = 0;
   1c0fa:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:777
    int result = 0;
   1c101:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:780

    // Initialise LFN cache first
    fatfs_lfn_cache_init(&lfn, 0);
   1c108:	83 ec 08             	sub    esp,0x8
   1c10b:	6a 00                	push   0x0
   1c10d:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c113:	50                   	push   eax
   1c114:	e8 7f 32 00 00       	call   1f398 <fatfs_lfn_cache_init>
   1c119:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:785

    while (1)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
   1c11c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c11f:	8b 10                	mov    edx,DWORD PTR [eax]
   1c121:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c124:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c127:	6a 00                	push   0x0
   1c129:	52                   	push   edx
   1c12a:	50                   	push   eax
   1c12b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c12e:	e8 71 f4 ff ff       	call   1b5a4 <fatfs_sector_reader>
   1c133:	83 c4 10             	add    esp,0x10
   1c136:	85 c0                	test   eax,eax
   1c138:	0f 84 56 04 00 00    	je     1c594 <fatfs_list_directory_next+0x4aa>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c13e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c141:	0f b6 40 08          	movzx  eax,BYTE PTR [eax+0x8]
   1c145:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
   1c148:	e9 24 04 00 00       	jmp    1c571 <fatfs_list_directory_next+0x487>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:791
            {
                // Increase directory offset
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   1c14d:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c151:	c1 e0 05             	shl    eax,0x5
   1c154:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:794

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   1c158:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c15b:	8d 50 44             	lea    edx,[eax+0x44]
   1c15e:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1c162:	01 d0                	add    eax,edx
   1c164:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:798

#if FATFS_INC_LFN_SUPPORT
                // Long File Name Text Found
                if ( fatfs_entry_lfn_text(directoryEntry) )
   1c167:	83 ec 0c             	sub    esp,0xc
   1c16a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c16d:	e8 40 35 00 00       	call   1f6b2 <fatfs_entry_lfn_text>
   1c172:	83 c4 10             	add    esp,0x10
   1c175:	85 c0                	test   eax,eax
   1c177:	74 24                	je     1c19d <fatfs_list_directory_next+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:799
                    fatfs_lfn_cache_entry(&lfn, fs->currentsector.sector+recordoffset);
   1c179:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c17c:	8d 50 44             	lea    edx,[eax+0x44]
   1c17f:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   1c183:	01 d0                	add    eax,edx
   1c185:	83 ec 08             	sub    esp,0x8
   1c188:	50                   	push   eax
   1c189:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c18f:	50                   	push   eax
   1c190:	e8 59 32 00 00       	call   1f3ee <fatfs_lfn_cache_entry>
   1c195:	83 c4 10             	add    esp,0x10
   1c198:	e9 ca 03 00 00       	jmp    1c567 <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:802

                // If Invalid record found delete any long file name information collated
                else if ( fatfs_entry_lfn_invalid(directoryEntry) )
   1c19d:	83 ec 0c             	sub    esp,0xc
   1c1a0:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c1a3:	e8 2d 35 00 00       	call   1f6d5 <fatfs_entry_lfn_invalid>
   1c1a8:	83 c4 10             	add    esp,0x10
   1c1ab:	85 c0                	test   eax,eax
   1c1ad:	74 19                	je     1c1c8 <fatfs_list_directory_next+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:803
                    fatfs_lfn_cache_init(&lfn, 0);
   1c1af:	83 ec 08             	sub    esp,0x8
   1c1b2:	6a 00                	push   0x0
   1c1b4:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c1ba:	50                   	push   eax
   1c1bb:	e8 d8 31 00 00       	call   1f398 <fatfs_lfn_cache_init>
   1c1c0:	83 c4 10             	add    esp,0x10
   1c1c3:	e9 9f 03 00 00       	jmp    1c567 <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:806

                // Normal SFN Entry and Long text exists
                else if (fatfs_entry_lfn_exists(&lfn, directoryEntry) )
   1c1c8:	83 ec 08             	sub    esp,0x8
   1c1cb:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c1ce:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c1d4:	50                   	push   eax
   1c1d5:	e8 3c 35 00 00       	call   1f716 <fatfs_entry_lfn_exists>
   1c1da:	83 c4 10             	add    esp,0x10
   1c1dd:	85 c0                	test   eax,eax
   1c1df:	0f 84 67 01 00 00    	je     1c34c <fatfs_list_directory_next+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:809
                {
                    // Get text
                    long_filename = fatfs_lfn_cache_get(&lfn);
   1c1e5:	83 ec 0c             	sub    esp,0xc
   1c1e8:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c1ee:	50                   	push   eax
   1c1ef:	e8 66 34 00 00       	call   1f65a <fatfs_lfn_cache_get>
   1c1f4:	83 c4 10             	add    esp,0x10
   1c1f7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:810
                    strncpy(entry->filename, long_filename, FATFS_MAX_LONG_FILENAME-1);
   1c1fa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c1fd:	83 ec 04             	sub    esp,0x4
   1c200:	6a 7f                	push   0x7f
   1c202:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1c205:	50                   	push   eax
   1c206:	e8 ad 5a ff ff       	call   11cb8 <strncpy>
   1c20b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:812

                    if (fatfs_entry_is_dir(directoryEntry))
   1c20e:	83 ec 0c             	sub    esp,0xc
   1c211:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c214:	e8 a3 35 00 00       	call   1f7bc <fatfs_entry_is_dir>
   1c219:	83 c4 10             	add    esp,0x10
   1c21c:	85 c0                	test   eax,eax
   1c21e:	74 0c                	je     1c22c <fatfs_list_directory_next+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:813
                        entry->is_dir = 1;
   1c220:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c223:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1c22a:	eb 0a                	jmp    1c236 <fatfs_list_directory_next+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:815
                    else
                        entry->is_dir = 0;
   1c22c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c22f:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:819

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1c236:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c239:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1c23d:	0f b6 c0             	movzx  eax,al
   1c240:	c1 e0 08             	shl    eax,0x8
   1c243:	89 c2                	mov    edx,eax
   1c245:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c248:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1c24c:	0f b6 c0             	movzx  eax,al
   1c24f:	09 d0                	or     eax,edx
   1c251:	89 c2                	mov    edx,eax
   1c253:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c256:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:820
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1c25d:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c260:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1c264:	0f b6 c0             	movzx  eax,al
   1c267:	c1 e0 08             	shl    eax,0x8
   1c26a:	89 c2                	mov    edx,eax
   1c26c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c26f:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1c273:	0f b6 c0             	movzx  eax,al
   1c276:	09 d0                	or     eax,edx
   1c278:	89 c2                	mov    edx,eax
   1c27a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c27d:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:821
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1c284:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c287:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1c28b:	0f b6 c0             	movzx  eax,al
   1c28e:	c1 e0 08             	shl    eax,0x8
   1c291:	89 c2                	mov    edx,eax
   1c293:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c296:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1c29a:	0f b6 c0             	movzx  eax,al
   1c29d:	09 d0                	or     eax,edx
   1c29f:	89 c2                	mov    edx,eax
   1c2a1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c2a4:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:822
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c2ab:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c2ae:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c2b2:	0f b6 c0             	movzx  eax,al
   1c2b5:	c1 e0 08             	shl    eax,0x8
   1c2b8:	89 c2                	mov    edx,eax
   1c2ba:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c2bd:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c2c1:	0f b6 c0             	movzx  eax,al
   1c2c4:	09 d0                	or     eax,edx
   1c2c6:	89 c2                	mov    edx,eax
   1c2c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c2cb:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:823
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c2d2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c2d5:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c2d9:	0f b6 c0             	movzx  eax,al
   1c2dc:	c1 e0 08             	shl    eax,0x8
   1c2df:	89 c2                	mov    edx,eax
   1c2e1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c2e4:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c2e8:	0f b6 c0             	movzx  eax,al
   1c2eb:	09 d0                	or     eax,edx
   1c2ed:	89 c2                	mov    edx,eax
   1c2ef:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c2f2:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:826
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c2f9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c2fc:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c2ff:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c302:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:827
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c308:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c30b:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c30f:	0f b7 c0             	movzx  eax,ax
   1c312:	c1 e0 10             	shl    eax,0x10
   1c315:	89 c2                	mov    edx,eax
   1c317:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c31a:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c31e:	0f b7 c0             	movzx  eax,ax
   1c321:	09 d0                	or     eax,edx
   1c323:	89 c2                	mov    edx,eax
   1c325:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c328:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:830

                    // Next starting position
                    dirls->offset = item + 1;
   1c32e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c332:	8d 50 01             	lea    edx,[eax+0x1]
   1c335:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c338:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:831
                    result = 1;
   1c33b:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:832
                    return 1;
   1c342:	b8 01 00 00 00       	mov    eax,0x1
   1c347:	e9 4c 02 00 00       	jmp    1c598 <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:837
                }
                // Normal Entry, only 8.3 Text
                else
#endif
                if ( fatfs_entry_sfn_only(directoryEntry) )
   1c34c:	83 ec 0c             	sub    esp,0xc
   1c34f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c352:	e8 19 34 00 00       	call   1f770 <fatfs_entry_sfn_only>
   1c357:	83 c4 10             	add    esp,0x10
   1c35a:	85 c0                	test   eax,eax
   1c35c:	0f 84 05 02 00 00    	je     1c567 <fatfs_list_directory_next+0x47d>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:839
                {
                    fatfs_lfn_cache_init(&lfn, 0);
   1c362:	83 ec 08             	sub    esp,0x8
   1c365:	6a 00                	push   0x0
   1c367:	8d 85 cd fe ff ff    	lea    eax,[ebp-0x133]
   1c36d:	50                   	push   eax
   1c36e:	e8 25 30 00 00       	call   1f398 <fatfs_lfn_cache_init>
   1c373:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:841

                    memset(short_filename, 0, sizeof(short_filename));
   1c376:	83 ec 04             	sub    esp,0x4
   1c379:	6a 0d                	push   0xd
   1c37b:	6a 00                	push   0x0
   1c37d:	8d 45 d3             	lea    eax,[ebp-0x2d]
   1c380:	50                   	push   eax
   1c381:	e8 3b 90 00 00       	call   253c1 <memset>
   1c386:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c389:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   1c38d:	eb 1d                	jmp    1c3ac <fatfs_list_directory_next+0x2c2>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:845 (discriminator 3)
                        short_filename[i] = directoryEntry->Name[i];
   1c38f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c393:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   1c397:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1c39a:	0f b6 14 11          	movzx  edx,BYTE PTR [ecx+edx*1]
   1c39e:	88 54 05 d3          	mov    BYTE PTR [ebp+eax*1-0x2d],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 3)
                    fatfs_lfn_cache_init(&lfn, 0);

                    memset(short_filename, 0, sizeof(short_filename));

                    // Copy name to string
                    for (i=0; i<8; i++)
   1c3a2:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c3a6:	83 c0 01             	add    eax,0x1
   1c3a9:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:844 (discriminator 1)
   1c3ac:	80 7d f7 07          	cmp    BYTE PTR [ebp-0x9],0x7
   1c3b0:	76 dd                	jbe    1c38f <fatfs_list_directory_next+0x2a5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:848
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
   1c3b2:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849
                    for (i=8; i<11; i++)
   1c3b9:	c6 45 f7 08          	mov    BYTE PTR [ebp-0x9],0x8
   1c3bd:	eb 36                	jmp    1c3f5 <fatfs_list_directory_next+0x30b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:851
                    {
                        short_filename[i+1] = directoryEntry->Name[i];
   1c3bf:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c3c3:	8d 48 01             	lea    ecx,[eax+0x1]
   1c3c6:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c3ca:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c3cd:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c3d1:	88 44 0d d3          	mov    BYTE PTR [ebp+ecx*1-0x2d],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:852
                        if (directoryEntry->Name[i] != ' ')
   1c3d5:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c3d9:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1c3dc:	0f b6 04 02          	movzx  eax,BYTE PTR [edx+eax*1]
   1c3e0:	3c 20                	cmp    al,0x20
   1c3e2:	74 07                	je     1c3eb <fatfs_list_directory_next+0x301>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:853
                            dotRequired = 1;
   1c3e4:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 2)
                    for (i=0; i<8; i++)
                        short_filename[i] = directoryEntry->Name[i];

                    // Extension
                    dotRequired = 0;
                    for (i=8; i<11; i++)
   1c3eb:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   1c3ef:	83 c0 01             	add    eax,0x1
   1c3f2:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:849 (discriminator 1)
   1c3f5:	80 7d f7 0a          	cmp    BYTE PTR [ebp-0x9],0xa
   1c3f9:	76 c4                	jbe    1c3bf <fatfs_list_directory_next+0x2d5>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:857
                        if (directoryEntry->Name[i] != ' ')
                            dotRequired = 1;
                    }

                    // Dot only required if extension present
                    if (dotRequired)
   1c3fb:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1c3ff:	74 14                	je     1c415 <fatfs_list_directory_next+0x32b>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:860
                    {
                        // If not . or .. entry
                        if (short_filename[0]!='.')
   1c401:	0f b6 45 d3          	movzx  eax,BYTE PTR [ebp-0x2d]
   1c405:	3c 2e                	cmp    al,0x2e
   1c407:	74 06                	je     1c40f <fatfs_list_directory_next+0x325>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:861
                            short_filename[8] = '.';
   1c409:	c6 45 db 2e          	mov    BYTE PTR [ebp-0x25],0x2e
   1c40d:	eb 0a                	jmp    1c419 <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:863
                        else
                            short_filename[8] = ' ';
   1c40f:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
   1c413:	eb 04                	jmp    1c419 <fatfs_list_directory_next+0x32f>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:866
                    }
                    else
                        short_filename[8] = ' ';
   1c415:	c6 45 db 20          	mov    BYTE PTR [ebp-0x25],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:868

                    fatfs_get_sfn_display_name(entry->filename, short_filename);
   1c419:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c41c:	83 ec 08             	sub    esp,0x8
   1c41f:	8d 55 d3             	lea    edx,[ebp-0x2d]
   1c422:	52                   	push   edx
   1c423:	50                   	push   eax
   1c424:	e8 d7 3f 00 00       	call   20400 <fatfs_get_sfn_display_name>
   1c429:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:870

                    if (fatfs_entry_is_dir(directoryEntry))
   1c42c:	83 ec 0c             	sub    esp,0xc
   1c42f:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1c432:	e8 85 33 00 00       	call   1f7bc <fatfs_entry_is_dir>
   1c437:	83 c4 10             	add    esp,0x10
   1c43a:	85 c0                	test   eax,eax
   1c43c:	74 0c                	je     1c44a <fatfs_list_directory_next+0x360>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:871
                        entry->is_dir = 1;
   1c43e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c441:	c6 80 80 00 00 00 01 	mov    BYTE PTR [eax+0x80],0x1
   1c448:	eb 0a                	jmp    1c454 <fatfs_list_directory_next+0x36a>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:873
                    else
                        entry->is_dir = 0;
   1c44a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c44d:	c6 80 80 00 00 00 00 	mov    BYTE PTR [eax+0x80],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:877

#if FATFS_INC_TIME_DATE_SUPPORT
                    // Get time / dates
                    entry->create_time = ((uint16)directoryEntry->CrtTime[1] << 8) | directoryEntry->CrtTime[0];
   1c454:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c457:	0f b6 40 0f          	movzx  eax,BYTE PTR [eax+0xf]
   1c45b:	0f b6 c0             	movzx  eax,al
   1c45e:	c1 e0 08             	shl    eax,0x8
   1c461:	89 c2                	mov    edx,eax
   1c463:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c466:	0f b6 40 0e          	movzx  eax,BYTE PTR [eax+0xe]
   1c46a:	0f b6 c0             	movzx  eax,al
   1c46d:	09 d0                	or     eax,edx
   1c46f:	89 c2                	mov    edx,eax
   1c471:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c474:	66 89 90 94 00 00 00 	mov    WORD PTR [eax+0x94],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:878
                    entry->create_date = ((uint16)directoryEntry->CrtDate[1] << 8) | directoryEntry->CrtDate[0];
   1c47b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c47e:	0f b6 40 11          	movzx  eax,BYTE PTR [eax+0x11]
   1c482:	0f b6 c0             	movzx  eax,al
   1c485:	c1 e0 08             	shl    eax,0x8
   1c488:	89 c2                	mov    edx,eax
   1c48a:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c48d:	0f b6 40 10          	movzx  eax,BYTE PTR [eax+0x10]
   1c491:	0f b6 c0             	movzx  eax,al
   1c494:	09 d0                	or     eax,edx
   1c496:	89 c2                	mov    edx,eax
   1c498:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c49b:	66 89 90 92 00 00 00 	mov    WORD PTR [eax+0x92],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:879
                    entry->access_date = ((uint16)directoryEntry->LstAccDate[1] << 8) | directoryEntry->LstAccDate[0];
   1c4a2:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c4a5:	0f b6 40 13          	movzx  eax,BYTE PTR [eax+0x13]
   1c4a9:	0f b6 c0             	movzx  eax,al
   1c4ac:	c1 e0 08             	shl    eax,0x8
   1c4af:	89 c2                	mov    edx,eax
   1c4b1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c4b4:	0f b6 40 12          	movzx  eax,BYTE PTR [eax+0x12]
   1c4b8:	0f b6 c0             	movzx  eax,al
   1c4bb:	09 d0                	or     eax,edx
   1c4bd:	89 c2                	mov    edx,eax
   1c4bf:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4c2:	66 89 90 8c 00 00 00 	mov    WORD PTR [eax+0x8c],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:880
                    entry->write_time  = ((uint16)directoryEntry->WrtTime[1] << 8) | directoryEntry->WrtTime[0];
   1c4c9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c4cc:	0f b6 40 17          	movzx  eax,BYTE PTR [eax+0x17]
   1c4d0:	0f b6 c0             	movzx  eax,al
   1c4d3:	c1 e0 08             	shl    eax,0x8
   1c4d6:	89 c2                	mov    edx,eax
   1c4d8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c4db:	0f b6 40 16          	movzx  eax,BYTE PTR [eax+0x16]
   1c4df:	0f b6 c0             	movzx  eax,al
   1c4e2:	09 d0                	or     eax,edx
   1c4e4:	89 c2                	mov    edx,eax
   1c4e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c4e9:	66 89 90 8e 00 00 00 	mov    WORD PTR [eax+0x8e],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:881
                    entry->write_date  = ((uint16)directoryEntry->WrtDate[1] << 8) | directoryEntry->WrtDate[0];
   1c4f0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c4f3:	0f b6 40 19          	movzx  eax,BYTE PTR [eax+0x19]
   1c4f7:	0f b6 c0             	movzx  eax,al
   1c4fa:	c1 e0 08             	shl    eax,0x8
   1c4fd:	89 c2                	mov    edx,eax
   1c4ff:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c502:	0f b6 40 18          	movzx  eax,BYTE PTR [eax+0x18]
   1c506:	0f b6 c0             	movzx  eax,al
   1c509:	09 d0                	or     eax,edx
   1c50b:	89 c2                	mov    edx,eax
   1c50d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c510:	66 89 90 90 00 00 00 	mov    WORD PTR [eax+0x90],dx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:884
#endif

                    entry->size = FAT_HTONL(directoryEntry->FileSize);
   1c517:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c51a:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1c51d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c520:	89 90 88 00 00 00    	mov    DWORD PTR [eax+0x88],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:885
                    entry->cluster = (FAT_HTONS(directoryEntry->FstClusHI)<<16) | FAT_HTONS(directoryEntry->FstClusLO);
   1c526:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c529:	0f b7 40 14          	movzx  eax,WORD PTR [eax+0x14]
   1c52d:	0f b7 c0             	movzx  eax,ax
   1c530:	c1 e0 10             	shl    eax,0x10
   1c533:	89 c2                	mov    edx,eax
   1c535:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1c538:	0f b7 40 1a          	movzx  eax,WORD PTR [eax+0x1a]
   1c53c:	0f b7 c0             	movzx  eax,ax
   1c53f:	09 d0                	or     eax,edx
   1c541:	89 c2                	mov    edx,eax
   1c543:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c546:	89 90 84 00 00 00    	mov    DWORD PTR [eax+0x84],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:888

                    // Next starting position
                    dirls->offset = item + 1;
   1c54c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c550:	8d 50 01             	lea    edx,[eax+0x1]
   1c553:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c556:	88 50 08             	mov    BYTE PTR [eax+0x8],dl
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:889
                    result = 1;
   1c559:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:890
                    return 1;
   1c560:	b8 01 00 00 00       	mov    eax,0x1
   1c565:	eb 31                	jmp    1c598 <fatfs_list_directory_next+0x4ae>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 2)
    {
        // If data read OK
        if (fatfs_sector_reader(fs, dirls->cluster, dirls->sector, 0))
        {
            // Maximum of 16 directory entries
            for (item = dirls->offset; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   1c567:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   1c56b:	83 c0 01             	add    eax,0x1
   1c56e:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:788 (discriminator 1)
   1c571:	80 7d f6 0f          	cmp    BYTE PTR [ebp-0xa],0xf
   1c575:	0f 86 d2 fb ff ff    	jbe    1c14d <fatfs_list_directory_next+0x63>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:895
                    return 1;
                }
            }// end of for

            // If reached end of the dir move onto next sector
            dirls->sector++;
   1c57b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c57e:	8b 00                	mov    eax,DWORD PTR [eax]
   1c580:	8d 50 01             	lea    edx,[eax+0x1]
   1c583:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c586:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:896
            dirls->offset = 0;
   1c588:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c58b:	c6 40 08 00          	mov    BYTE PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:900
        }
        else
            break;
    }
   1c58f:	e9 88 fb ff ff       	jmp    1c11c <fatfs_list_directory_next+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:899
            // If reached end of the dir move onto next sector
            dirls->sector++;
            dirls->offset = 0;
        }
        else
            break;
   1c594:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:902
    }

    return result;
   1c595:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
/home/yogi/src/os/chrisOS/src/fat/fat_access.c:903 (discriminator 1)
}
   1c598:	c9                   	leave  
   1c599:	c3                   	ret    
   1c59a:	66 90                	xchg   ax,ax

0001c59c <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c59c:	55                   	push   ebp
   1c59d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c59f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5a2:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c5a9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5ac:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c5af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5b2:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c5b4:	90                   	nop
   1c5b5:	5d                   	pop    ebp
   1c5b6:	c3                   	ret    

0001c5b7 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c5b7:	55                   	push   ebp
   1c5b8:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c5ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c5bd:	8b 00                	mov    eax,DWORD PTR [eax]
   1c5bf:	85 c0                	test   eax,eax
   1c5c1:	75 0d                	jne    1c5d0 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c5c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c5c6:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c5c9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5cc:	89 10                	mov    DWORD PTR [eax],edx
   1c5ce:	eb 0e                	jmp    1c5de <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c5d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c5d3:	8b 00                	mov    eax,DWORD PTR [eax]
   1c5d5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c5d8:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c5db:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c5de:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c5e1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c5e4:	85 c0                	test   eax,eax
   1c5e6:	75 0d                	jne    1c5f5 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c5e8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c5eb:	8b 10                	mov    edx,DWORD PTR [eax]
   1c5ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c5f0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c5f3:	eb 0d                	jmp    1c602 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c5f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c5f8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c5fb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c5fe:	8b 12                	mov    edx,DWORD PTR [edx]
   1c600:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1c602:	90                   	nop
   1c603:	5d                   	pop    ebp
   1c604:	c3                   	ret    

0001c605 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c605:	55                   	push   ebp
   1c606:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c608:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c60b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c60e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c610:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c613:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c616:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c619:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c61c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c61f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c622:	85 c0                	test   eax,eax
   1c624:	75 0b                	jne    1c631 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c629:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c62c:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c62f:	eb 0b                	jmp    1c63c <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c631:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c634:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c637:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c63a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c63c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c63f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c642:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1c645:	90                   	nop
   1c646:	5d                   	pop    ebp
   1c647:	c3                   	ret    

0001c648 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c648:	55                   	push   ebp
   1c649:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c64b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c64e:	8b 10                	mov    edx,DWORD PTR [eax]
   1c650:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c653:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c655:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c658:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c65b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c65e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c661:	8b 00                	mov    eax,DWORD PTR [eax]
   1c663:	85 c0                	test   eax,eax
   1c665:	75 0a                	jne    1c671 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c66a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c66d:	89 10                	mov    DWORD PTR [eax],edx
   1c66f:	eb 0b                	jmp    1c67c <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c671:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c674:	8b 00                	mov    eax,DWORD PTR [eax]
   1c676:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c679:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c67c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c67f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c682:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1c684:	90                   	nop
   1c685:	5d                   	pop    ebp
   1c686:	c3                   	ret    

0001c687 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c687:	55                   	push   ebp
   1c688:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c68a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c68d:	8b 00                	mov    eax,DWORD PTR [eax]
   1c68f:	85 c0                	test   eax,eax
   1c691:	75 26                	jne    1c6b9 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c696:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c699:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c69b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c69e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c6a1:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c6a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c6a7:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c6ad:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c6b0:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c6b7:	eb 14                	jmp    1c6cd <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c6b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c6bc:	8b 00                	mov    eax,DWORD PTR [eax]
   1c6be:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c6c1:	50                   	push   eax
   1c6c2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c6c5:	e8 7e ff ff ff       	call   1c648 <fat_list_insert_before>
   1c6ca:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1c6cd:	90                   	nop
   1c6ce:	c9                   	leave  
   1c6cf:	c3                   	ret    

0001c6d0 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c6d0:	55                   	push   ebp
   1c6d1:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c6d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c6d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c6d9:	85 c0                	test   eax,eax
   1c6db:	75 10                	jne    1c6ed <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c6dd:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c6e0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c6e3:	e8 9f ff ff ff       	call   1c687 <fat_list_insert_first>
   1c6e8:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c6eb:	eb 15                	jmp    1c702 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c6ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c6f0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c6f3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c6f6:	50                   	push   eax
   1c6f7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c6fa:	e8 06 ff ff ff       	call   1c605 <fat_list_insert_after>
   1c6ff:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1c702:	90                   	nop
   1c703:	c9                   	leave  
   1c704:	c3                   	ret    

0001c705 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c705:	55                   	push   ebp
   1c706:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c70b:	8b 00                	mov    eax,DWORD PTR [eax]
   1c70d:	85 c0                	test   eax,eax
   1c70f:	0f 94 c0             	sete   al
   1c712:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1c715:	5d                   	pop    ebp
   1c716:	c3                   	ret    

0001c717 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c717:	55                   	push   ebp
   1c718:	89 e5                	mov    ebp,esp
   1c71a:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c71d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c720:	8b 00                	mov    eax,DWORD PTR [eax]
   1c722:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c725:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c729:	74 0e                	je     1c739 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c72b:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c72e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c731:	e8 81 fe ff ff       	call   1c5b7 <fat_list_remove>
   1c736:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1c739:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1c73c:	c9                   	leave  
   1c73d:	c3                   	ret    

0001c73e <fatfs_cache_init>:
fatfs_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:43

//-----------------------------------------------------------------------------
// fatfs_cache_init:
//-----------------------------------------------------------------------------
int fatfs_cache_init(struct fatfs *fs, FL_FILE *file)
{
   1c73e:	55                   	push   ebp
   1c73f:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:54
        file->cluster_cache_idx[i] = 0xFFFFFFFF; // Not used
        file->cluster_cache_data[i] = 0;
    }
#endif

    return 1;
   1c741:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:55
}
   1c746:	5d                   	pop    ebp
   1c747:	c3                   	ret    

0001c748 <fatfs_cache_get_next_cluster>:
fatfs_cache_get_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:60
//-----------------------------------------------------------------------------
// fatfs_cache_get_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_get_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 *pNextCluster)
{
   1c748:	55                   	push   ebp
   1c749:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:71
        *pNextCluster = file->cluster_cache_data[slot];
        return 1;
    }
#endif

    return 0;
   1c74b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:72
}
   1c750:	5d                   	pop    ebp
   1c751:	c3                   	ret    

0001c752 <fatfs_cache_set_next_cluster>:
fatfs_cache_set_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:77
//-----------------------------------------------------------------------------
// fatfs_cache_set_next_cluster:
//-----------------------------------------------------------------------------
int fatfs_cache_set_next_cluster(struct fatfs *fs, FL_FILE *file, uint32 clusterIdx, uint32 nextCluster)
{
   1c752:	55                   	push   ebp
   1c753:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:90
        file->cluster_cache_idx[slot] = clusterIdx;
        file->cluster_cache_data[slot] = nextCluster;
    }
#endif

    return 1;
   1c755:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_cache.c:91
}
   1c75a:	5d                   	pop    ebp
   1c75b:	c3                   	ret    

0001c75c <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   1c75c:	55                   	push   ebp
   1c75d:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   1c75f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c762:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   1c769:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c76c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c76f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c772:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   1c774:	90                   	nop
   1c775:	5d                   	pop    ebp
   1c776:	c3                   	ret    

0001c777 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   1c777:	55                   	push   ebp
   1c778:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   1c77a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c77d:	8b 00                	mov    eax,DWORD PTR [eax]
   1c77f:	85 c0                	test   eax,eax
   1c781:	75 0d                	jne    1c790 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   1c783:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c786:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c789:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c78c:	89 10                	mov    DWORD PTR [eax],edx
   1c78e:	eb 0e                	jmp    1c79e <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   1c790:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c793:	8b 00                	mov    eax,DWORD PTR [eax]
   1c795:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c798:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   1c79b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   1c79e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7a1:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7a4:	85 c0                	test   eax,eax
   1c7a6:	75 0d                	jne    1c7b5 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   1c7a8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7ab:	8b 10                	mov    edx,DWORD PTR [eax]
   1c7ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c7b0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   1c7b3:	eb 0d                	jmp    1c7c2 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   1c7b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7b8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7bb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c7be:	8b 12                	mov    edx,DWORD PTR [edx]
   1c7c0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   1c7c2:	90                   	nop
   1c7c3:	5d                   	pop    ebp
   1c7c4:	c3                   	ret    

0001c7c5 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c7c5:	55                   	push   ebp
   1c7c6:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   1c7c8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c7cb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c7ce:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   1c7d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7d3:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1c7d6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c7d9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   1c7dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7df:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7e2:	85 c0                	test   eax,eax
   1c7e4:	75 0b                	jne    1c7f1 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   1c7e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c7e9:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c7ec:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   1c7ef:	eb 0b                	jmp    1c7fc <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   1c7f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7f4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c7f7:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c7fa:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   1c7fc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c7ff:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c802:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   1c805:	90                   	nop
   1c806:	5d                   	pop    ebp
   1c807:	c3                   	ret    

0001c808 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   1c808:	55                   	push   ebp
   1c809:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   1c80b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c80e:	8b 10                	mov    edx,DWORD PTR [eax]
   1c810:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c813:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   1c815:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1c818:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c81b:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   1c81e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c821:	8b 00                	mov    eax,DWORD PTR [eax]
   1c823:	85 c0                	test   eax,eax
   1c825:	75 0a                	jne    1c831 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   1c827:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c82a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c82d:	89 10                	mov    DWORD PTR [eax],edx
   1c82f:	eb 0b                	jmp    1c83c <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   1c831:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c834:	8b 00                	mov    eax,DWORD PTR [eax]
   1c836:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c839:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   1c83c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c83f:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1c842:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   1c844:	90                   	nop
   1c845:	5d                   	pop    ebp
   1c846:	c3                   	ret    

0001c847 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   1c847:	55                   	push   ebp
   1c848:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   1c84a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c84d:	8b 00                	mov    eax,DWORD PTR [eax]
   1c84f:	85 c0                	test   eax,eax
   1c851:	75 26                	jne    1c879 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   1c853:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c856:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c859:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   1c85b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c85e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1c861:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   1c864:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c867:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   1c86d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1c870:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   1c877:	eb 14                	jmp    1c88d <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   1c879:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c87c:	8b 00                	mov    eax,DWORD PTR [eax]
   1c87e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c881:	50                   	push   eax
   1c882:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c885:	e8 7e ff ff ff       	call   1c808 <fat_list_insert_before>
   1c88a:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   1c88d:	90                   	nop
   1c88e:	c9                   	leave  
   1c88f:	c3                   	ret    

0001c890 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   1c890:	55                   	push   ebp
   1c891:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   1c893:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c896:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c899:	85 c0                	test   eax,eax
   1c89b:	75 10                	jne    1c8ad <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   1c89d:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c8a0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c8a3:	e8 9f ff ff ff       	call   1c847 <fat_list_insert_first>
   1c8a8:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   1c8ab:	eb 15                	jmp    1c8c2 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   1c8ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c8b0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c8b3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1c8b6:	50                   	push   eax
   1c8b7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c8ba:	e8 06 ff ff ff       	call   1c7c5 <fat_list_insert_after>
   1c8bf:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   1c8c2:	90                   	nop
   1c8c3:	c9                   	leave  
   1c8c4:	c3                   	ret    

0001c8c5 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   1c8c5:	55                   	push   ebp
   1c8c6:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   1c8c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c8cb:	8b 00                	mov    eax,DWORD PTR [eax]
   1c8cd:	85 c0                	test   eax,eax
   1c8cf:	0f 94 c0             	sete   al
   1c8d2:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   1c8d5:	5d                   	pop    ebp
   1c8d6:	c3                   	ret    

0001c8d7 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   1c8d7:	55                   	push   ebp
   1c8d8:	89 e5                	mov    ebp,esp
   1c8da:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   1c8dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c8e0:	8b 00                	mov    eax,DWORD PTR [eax]
   1c8e2:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   1c8e5:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c8e9:	74 0e                	je     1c8f9 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   1c8eb:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c8ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1c8f1:	e8 81 fe ff ff       	call   1c777 <fat_list_remove>
   1c8f6:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   1c8f9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   1c8fc:	c9                   	leave  
   1c8fd:	c3                   	ret    

0001c8fe <_allocate_file>:
_allocate_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:72

//-----------------------------------------------------------------------------
// _allocate_file: Find a slot in the open files buffer for a new file
//-----------------------------------------------------------------------------
static FL_FILE* _allocate_file(void)
{
   1c8fe:	55                   	push   ebp
   1c8ff:	89 e5                	mov    ebp,esp
   1c901:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:74
    // Allocate free file
    struct fat_node *node = fat_list_pop_head(&_free_file_list);
   1c904:	68 70 45 12 00       	push   0x124570
   1c909:	e8 c9 ff ff ff       	call   1c8d7 <fat_list_pop_head>
   1c90e:	83 c4 04             	add    esp,0x4
   1c911:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:77

    // Add to open list
    if (node)
   1c914:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c918:	74 10                	je     1c92a <_allocate_file+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:78
        fat_list_insert_last(&_open_file_list, node);
   1c91a:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   1c91d:	68 68 45 12 00       	push   0x124568
   1c922:	e8 69 ff ff ff       	call   1c890 <fat_list_insert_last>
   1c927:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80

    return fat_list_entry(node, FL_FILE, list_node);
   1c92a:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   1c92e:	74 0a                	je     1c93a <_allocate_file+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 1)
   1c930:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1c933:	2d 34 03 00 00       	sub    eax,0x334
   1c938:	eb 05                	jmp    1c93f <_allocate_file+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:80 (discriminator 2)
   1c93a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:81 (discriminator 5)
}
   1c93f:	c9                   	leave  
   1c940:	c3                   	ret    

0001c941 <_check_file_open>:
_check_file_open():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:86
//-----------------------------------------------------------------------------
// _check_file_open: Returns true if the file is already open
//-----------------------------------------------------------------------------
static int _check_file_open(FL_FILE* file)
{
   1c941:	55                   	push   ebp
   1c942:	89 e5                	mov    ebp,esp
   1c944:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1c947:	a1 68 45 12 00       	mov    eax,ds:0x124568
   1c94c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1c94f:	eb 6f                	jmp    1c9c0 <_check_file_open+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92
    {
        FL_FILE* openFile = fat_list_entry(node, FL_FILE, list_node);
   1c951:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1c955:	74 0a                	je     1c961 <_check_file_open+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 1)
   1c957:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1c95a:	2d 34 03 00 00       	sub    eax,0x334
   1c95f:	eb 05                	jmp    1c966 <_check_file_open+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 2)
   1c961:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:92 (discriminator 4)
   1c966:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:95 (discriminator 4)

        // If not the current file
        if (openFile != file)
   1c969:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c96c:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1c96f:	74 46                	je     1c9b7 <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98
        {
            // Compare path and name
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
   1c971:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c974:	8d 50 14             	lea    edx,[eax+0x14]
   1c977:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c97a:	83 c0 14             	add    eax,0x14
   1c97d:	83 ec 08             	sub    esp,0x8
   1c980:	52                   	push   edx
   1c981:	50                   	push   eax
   1c982:	e8 c4 38 00 00       	call   2024b <fatfs_compare_names>
   1c987:	83 c4 10             	add    esp,0x10
   1c98a:	85 c0                	test   eax,eax
   1c98c:	74 29                	je     1c9b7 <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:98 (discriminator 1)
   1c98e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c991:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1c997:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1c99a:	05 94 00 00 00       	add    eax,0x94
   1c99f:	83 ec 08             	sub    esp,0x8
   1c9a2:	52                   	push   edx
   1c9a3:	50                   	push   eax
   1c9a4:	e8 a2 38 00 00       	call   2024b <fatfs_compare_names>
   1c9a9:	83 c4 10             	add    esp,0x10
   1c9ac:	85 c0                	test   eax,eax
   1c9ae:	74 07                	je     1c9b7 <_check_file_open+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:99
                return 1;
   1c9b0:	b8 01 00 00 00       	mov    eax,0x1
   1c9b5:	eb 14                	jmp    1c9cb <_check_file_open+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 2)
static int _check_file_open(FL_FILE* file)
{
    struct fat_node *node;

    // Compare open files
    fat_list_for_each(&_open_file_list, node)
   1c9b7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1c9ba:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1c9bd:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:90 (discriminator 1)
   1c9c0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1c9c4:	75 8b                	jne    1c951 <_check_file_open+0x10>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:103
            if ( (fatfs_compare_names(openFile->path,file->path)) && (fatfs_compare_names(openFile->filename,file->filename)) )
                return 1;
        }
    }

    return 0;
   1c9c6:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:104
}
   1c9cb:	c9                   	leave  
   1c9cc:	c3                   	ret    

0001c9cd <_free_file>:
_free_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:109
//-----------------------------------------------------------------------------
// _free_file: Free open file handle
//-----------------------------------------------------------------------------
static void _free_file(FL_FILE* file)
{
   1c9cd:	55                   	push   ebp
   1c9ce:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:111
    // Remove from open list
    fat_list_remove(&_open_file_list, &file->list_node);
   1c9d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9d3:	05 34 03 00 00       	add    eax,0x334
   1c9d8:	50                   	push   eax
   1c9d9:	68 68 45 12 00       	push   0x124568
   1c9de:	e8 94 fd ff ff       	call   1c777 <fat_list_remove>
   1c9e3:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:114

    // Add to free list
    fat_list_insert_last(&_free_file_list, &file->list_node);
   1c9e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1c9e9:	05 34 03 00 00       	add    eax,0x334
   1c9ee:	50                   	push   eax
   1c9ef:	68 70 45 12 00       	push   0x124570
   1c9f4:	e8 97 fe ff ff       	call   1c890 <fat_list_insert_last>
   1c9f9:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:115
}
   1c9fc:	90                   	nop
   1c9fd:	c9                   	leave  
   1c9fe:	c3                   	ret    

0001c9ff <_open_directory>:
_open_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:126
//-----------------------------------------------------------------------------
// _open_directory: Cycle through path string to find the start cluster
// address of the highest subdir.
//-----------------------------------------------------------------------------
static int _open_directory(char *path, uint32 *pathCluster)
{
   1c9ff:	55                   	push   ebp
   1ca00:	89 e5                	mov    ebp,esp
   1ca02:	81 ec b8 00 00 00    	sub    esp,0xb8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:134
    char currentfolder[FATFS_MAX_LONG_FILENAME];
    struct fat_dir_entry sfEntry;
    uint32 startcluster;

    // Set starting cluster to root cluster
    startcluster = fatfs_get_root_cluster(&_fs);
   1ca08:	83 ec 0c             	sub    esp,0xc
   1ca0b:	68 00 41 12 00       	push   0x124100
   1ca10:	e8 ac ef ff ff       	call   1b9c1 <fatfs_get_root_cluster>
   1ca15:	83 c4 10             	add    esp,0x10
   1ca18:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:137

    // Find number of levels
    levels = fatfs_total_path_levels(path);
   1ca1b:	83 ec 0c             	sub    esp,0xc
   1ca1e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ca21:	e8 c2 34 00 00       	call   1fee8 <fatfs_total_path_levels>
   1ca26:	83 c4 10             	add    esp,0x10
   1ca29:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1ca2c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1ca33:	e9 93 00 00 00       	jmp    1cacb <_open_directory+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:142
    {
        if (fatfs_get_substring(path, sublevel, currentfolder, sizeof(currentfolder)) == -1)
   1ca38:	68 80 00 00 00       	push   0x80
   1ca3d:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1ca43:	50                   	push   eax
   1ca44:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1ca47:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1ca4a:	e8 29 35 00 00       	call   1ff78 <fatfs_get_substring>
   1ca4f:	83 c4 10             	add    esp,0x10
   1ca52:	83 f8 ff             	cmp    eax,0xffffffff
   1ca55:	75 0a                	jne    1ca61 <_open_directory+0x62>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:143
            return 0;
   1ca57:	b8 00 00 00 00       	mov    eax,0x0
   1ca5c:	e9 86 00 00 00       	jmp    1cae7 <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:146

        // Find clusteraddress for folder (currentfolder)
        if (fatfs_get_file_entry(&_fs, startcluster, currentfolder,&sfEntry))
   1ca61:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1ca67:	50                   	push   eax
   1ca68:	8d 85 6c ff ff ff    	lea    eax,[ebp-0x94]
   1ca6e:	50                   	push   eax
   1ca6f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1ca72:	68 00 41 12 00       	push   0x124100
   1ca77:	e8 50 ef ff ff       	call   1b9cc <fatfs_get_file_entry>
   1ca7c:	83 c4 10             	add    esp,0x10
   1ca7f:	85 c0                	test   eax,eax
   1ca81:	74 3d                	je     1cac0 <_open_directory+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:149
        {
            // Check entry is folder
            if (fatfs_entry_is_dir(&sfEntry))
   1ca83:	83 ec 0c             	sub    esp,0xc
   1ca86:	8d 85 4c ff ff ff    	lea    eax,[ebp-0xb4]
   1ca8c:	50                   	push   eax
   1ca8d:	e8 2a 2d 00 00       	call   1f7bc <fatfs_entry_is_dir>
   1ca92:	83 c4 10             	add    esp,0x10
   1ca95:	85 c0                	test   eax,eax
   1ca97:	74 20                	je     1cab9 <_open_directory+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:150
                startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1ca99:	0f b7 85 60 ff ff ff 	movzx  eax,WORD PTR [ebp-0xa0]
   1caa0:	0f b7 c0             	movzx  eax,ax
   1caa3:	c1 e0 10             	shl    eax,0x10
   1caa6:	89 c2                	mov    edx,eax
   1caa8:	0f b7 85 66 ff ff ff 	movzx  eax,WORD PTR [ebp-0x9a]
   1caaf:	0f b7 c0             	movzx  eax,ax
   1cab2:	01 d0                	add    eax,edx
   1cab4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   1cab7:	eb 0e                	jmp    1cac7 <_open_directory+0xc8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:152
            else
                return 0;
   1cab9:	b8 00 00 00 00       	mov    eax,0x0
   1cabe:	eb 27                	jmp    1cae7 <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:155
        }
        else
            return 0;
   1cac0:	b8 00 00 00 00       	mov    eax,0x0
   1cac5:	eb 20                	jmp    1cae7 <_open_directory+0xe8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 2)

    // Find number of levels
    levels = fatfs_total_path_levels(path);

    // Cycle through each level and get the start sector
    for (sublevel=0;sublevel<(levels+1);sublevel++)
   1cac7:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:140 (discriminator 1)
   1cacb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cace:	83 c0 01             	add    eax,0x1
   1cad1:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1cad4:	0f 8f 5e ff ff ff    	jg     1ca38 <_open_directory+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:158
        }
        else
            return 0;
    }

    *pathCluster = startcluster;
   1cada:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1cadd:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1cae0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:159
    return 1;
   1cae2:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:160 (discriminator 1)
}
   1cae7:	c9                   	leave  
   1cae8:	c3                   	ret    

0001cae9 <_create_directory>:
_create_directory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:166
//-----------------------------------------------------------------------------
// _create_directory: Cycle through path string and create the end directory
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static int _create_directory(char *path)
{
   1cae9:	55                   	push   ebp
   1caea:	89 e5                	mov    ebp,esp
   1caec:	53                   	push   ebx
   1caed:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:170
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1caf0:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:174
    int i;

    // Allocate a new file handle
    file = _allocate_file();
   1caf7:	e8 02 fe ff ff       	call   1c8fe <_allocate_file>
   1cafc:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:175
    if (!file)
   1caff:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   1cb03:	75 0a                	jne    1cb0f <_create_directory+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:176
        return 0;
   1cb05:	b8 00 00 00 00       	mov    eax,0x0
   1cb0a:	e9 94 03 00 00       	jmp    1cea3 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:179

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1cb0f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb12:	83 c0 14             	add    eax,0x14
   1cb15:	83 ec 04             	sub    esp,0x4
   1cb18:	68 80 00 00 00       	push   0x80
   1cb1d:	6a 00                	push   0x0
   1cb1f:	50                   	push   eax
   1cb20:	e8 9c 88 00 00       	call   253c1 <memset>
   1cb25:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:180
    memset(file->filename, '\0', sizeof(file->filename));
   1cb28:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb2b:	05 94 00 00 00       	add    eax,0x94
   1cb30:	83 ec 04             	sub    esp,0x4
   1cb33:	68 80 00 00 00       	push   0x80
   1cb38:	6a 00                	push   0x0
   1cb3a:	50                   	push   eax
   1cb3b:	e8 81 88 00 00       	call   253c1 <memset>
   1cb40:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:183

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1cb43:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb46:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1cb4c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cb4f:	83 c0 14             	add    eax,0x14
   1cb52:	83 ec 0c             	sub    esp,0xc
   1cb55:	68 80 00 00 00       	push   0x80
   1cb5a:	52                   	push   edx
   1cb5b:	68 80 00 00 00       	push   0x80
   1cb60:	50                   	push   eax
   1cb61:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cb64:	e8 14 35 00 00       	call   2007d <fatfs_split_path>
   1cb69:	83 c4 20             	add    esp,0x20
   1cb6c:	83 f8 ff             	cmp    eax,0xffffffff
   1cb6f:	75 18                	jne    1cb89 <_create_directory+0xa0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:185
    {
        _free_file(file);
   1cb71:	83 ec 0c             	sub    esp,0xc
   1cb74:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cb77:	e8 51 fe ff ff       	call   1c9cd <_free_file>
   1cb7c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:186
        return 0;
   1cb7f:	b8 00 00 00 00       	mov    eax,0x0
   1cb84:	e9 1a 03 00 00       	jmp    1cea3 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:190
    }

    // Check if file already open
    if (_check_file_open(file))
   1cb89:	83 ec 0c             	sub    esp,0xc
   1cb8c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cb8f:	e8 ad fd ff ff       	call   1c941 <_check_file_open>
   1cb94:	83 c4 10             	add    esp,0x10
   1cb97:	85 c0                	test   eax,eax
   1cb99:	74 18                	je     1cbb3 <_create_directory+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:192
    {
        _free_file(file);
   1cb9b:	83 ec 0c             	sub    esp,0xc
   1cb9e:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cba1:	e8 27 fe ff ff       	call   1c9cd <_free_file>
   1cba6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:193
        return 0;
   1cba9:	b8 00 00 00 00       	mov    eax,0x0
   1cbae:	e9 f0 02 00 00       	jmp    1cea3 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:197
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1cbb3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cbb6:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1cbba:	84 c0                	test   al,al
   1cbbc:	75 19                	jne    1cbd7 <_create_directory+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:198
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1cbbe:	83 ec 0c             	sub    esp,0xc
   1cbc1:	68 00 41 12 00       	push   0x124100
   1cbc6:	e8 f6 ed ff ff       	call   1b9c1 <fatfs_get_root_cluster>
   1cbcb:	83 c4 10             	add    esp,0x10
   1cbce:	89 c2                	mov    edx,eax
   1cbd0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cbd3:	89 10                	mov    DWORD PTR [eax],edx
   1cbd5:	eb 32                	jmp    1cc09 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:202
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1cbd7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cbda:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1cbdd:	83 c2 14             	add    edx,0x14
   1cbe0:	83 ec 08             	sub    esp,0x8
   1cbe3:	50                   	push   eax
   1cbe4:	52                   	push   edx
   1cbe5:	e8 15 fe ff ff       	call   1c9ff <_open_directory>
   1cbea:	83 c4 10             	add    esp,0x10
   1cbed:	85 c0                	test   eax,eax
   1cbef:	75 18                	jne    1cc09 <_create_directory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:204
        {
            _free_file(file);
   1cbf1:	83 ec 0c             	sub    esp,0xc
   1cbf4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cbf7:	e8 d1 fd ff ff       	call   1c9cd <_free_file>
   1cbfc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:205
            return 0;
   1cbff:	b8 00 00 00 00       	mov    eax,0x0
   1cc04:	e9 9a 02 00 00       	jmp    1cea3 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:210
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1cc09:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cc0c:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cc12:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cc15:	8b 00                	mov    eax,DWORD PTR [eax]
   1cc17:	8d 55 cc             	lea    edx,[ebp-0x34]
   1cc1a:	52                   	push   edx
   1cc1b:	51                   	push   ecx
   1cc1c:	50                   	push   eax
   1cc1d:	68 00 41 12 00       	push   0x124100
   1cc22:	e8 a5 ed ff ff       	call   1b9cc <fatfs_get_file_entry>
   1cc27:	83 c4 10             	add    esp,0x10
   1cc2a:	83 f8 01             	cmp    eax,0x1
   1cc2d:	75 18                	jne    1cc47 <_create_directory+0x15e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:212
    {
        _free_file(file);
   1cc2f:	83 ec 0c             	sub    esp,0xc
   1cc32:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cc35:	e8 93 fd ff ff       	call   1c9cd <_free_file>
   1cc3a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:213
        return 0;
   1cc3d:	b8 00 00 00 00       	mov    eax,0x0
   1cc42:	e9 5c 02 00 00       	jmp    1cea3 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:216
    }

    file->startcluster = 0;
   1cc47:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cc4a:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:219

    // Create the file space for the folder (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1cc51:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cc54:	83 c0 04             	add    eax,0x4
   1cc57:	6a 01                	push   0x1
   1cc59:	50                   	push   eax
   1cc5a:	6a 01                	push   0x1
   1cc5c:	68 00 41 12 00       	push   0x124100
   1cc61:	e8 da 44 00 00       	call   21140 <fatfs_allocate_free_space>
   1cc66:	83 c4 10             	add    esp,0x10
   1cc69:	85 c0                	test   eax,eax
   1cc6b:	75 18                	jne    1cc85 <_create_directory+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:221
    {
        _free_file(file);
   1cc6d:	83 ec 0c             	sub    esp,0xc
   1cc70:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cc73:	e8 55 fd ff ff       	call   1c9cd <_free_file>
   1cc78:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:222
        return 0;
   1cc7b:	b8 00 00 00 00       	mov    eax,0x0
   1cc80:	e9 1e 02 00 00       	jmp    1cea3 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:226
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1cc85:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cc88:	05 28 01 00 00       	add    eax,0x128
   1cc8d:	83 ec 04             	sub    esp,0x4
   1cc90:	68 00 02 00 00       	push   0x200
   1cc95:	6a 00                	push   0x0
   1cc97:	50                   	push   eax
   1cc98:	e8 24 87 00 00       	call   253c1 <memset>
   1cc9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1cca0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   1cca7:	eb 42                	jmp    1cceb <_create_directory+0x202>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:229
    {
        if (!fatfs_write_sector(&_fs, file->startcluster, i, file->file_data_sector))
   1cca9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ccac:	8d 88 28 01 00 00    	lea    ecx,[eax+0x128]
   1ccb2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1ccb5:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ccb8:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ccbb:	51                   	push   ecx
   1ccbc:	52                   	push   edx
   1ccbd:	50                   	push   eax
   1ccbe:	68 00 41 12 00       	push   0x124100
   1ccc3:	e8 31 eb ff ff       	call   1b7f9 <fatfs_write_sector>
   1ccc8:	83 c4 10             	add    esp,0x10
   1cccb:	85 c0                	test   eax,eax
   1cccd:	75 18                	jne    1cce7 <_create_directory+0x1fe>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:231
        {
            _free_file(file);
   1cccf:	83 ec 0c             	sub    esp,0xc
   1ccd2:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ccd5:	e8 f3 fc ff ff       	call   1c9cd <_free_file>
   1ccda:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:232
            return 0;
   1ccdd:	b8 00 00 00 00       	mov    eax,0x0
   1cce2:	e9 bc 01 00 00       	jmp    1cea3 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 2)
        return 0;
    }

    // Erase new directory cluster
    memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
    for (i=0;i<_fs.sectors_per_cluster;i++)
   1cce7:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:227 (discriminator 1)
   1cceb:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1ccf2:	0f b6 c0             	movzx  eax,al
   1ccf5:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1ccf8:	7f af                	jg     1cca9 <_create_directory+0x1c0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:239
    }

#if FATFS_INC_LFN_SUPPORT

    // Generate a short filename & tail
    tailNum = 0;
   1ccfa:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:243
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1cd01:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd04:	05 94 00 00 00       	add    eax,0x94
   1cd09:	83 ec 08             	sub    esp,0x8
   1cd0c:	50                   	push   eax
   1cd0d:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1cd10:	50                   	push   eax
   1cd11:	e8 66 2d 00 00       	call   1fa7c <fatfs_lfn_create_sfn>
   1cd16:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:246

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1cd19:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1cd1d:	74 1f                	je     1cd3e <_create_directory+0x255>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:247
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1cd1f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cd22:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1cd25:	81 c2 14 01 00 00    	add    edx,0x114
   1cd2b:	83 ec 04             	sub    esp,0x4
   1cd2e:	50                   	push   eax
   1cd2f:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1cd32:	50                   	push   eax
   1cd33:	52                   	push   edx
   1cd34:	e8 c9 2f 00 00       	call   1fd02 <fatfs_lfn_generate_tail>
   1cd39:	83 c4 10             	add    esp,0x10
   1cd3c:	eb 1b                	jmp    1cd59 <_create_directory+0x270>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:250
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1cd3e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd41:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cd47:	83 ec 04             	sub    esp,0x4
   1cd4a:	6a 0b                	push   0xb
   1cd4c:	8d 45 c1             	lea    eax,[ebp-0x3f]
   1cd4f:	50                   	push   eax
   1cd50:	52                   	push   edx
   1cd51:	e8 16 91 00 00       	call   25e6c <memcpy>
   1cd56:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:253

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1cd59:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd5c:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1cd62:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd65:	8b 00                	mov    eax,DWORD PTR [eax]
   1cd67:	83 ec 04             	sub    esp,0x4
   1cd6a:	52                   	push   edx
   1cd6b:	50                   	push   eax
   1cd6c:	68 00 41 12 00       	push   0x124100
   1cd71:	e8 d3 ee ff ff       	call   1bc49 <fatfs_sfn_exists>
   1cd76:	83 c4 10             	add    esp,0x10
   1cd79:	85 c0                	test   eax,eax
   1cd7b:	74 13                	je     1cd90 <_create_directory+0x2a7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:256
            break;

        tailNum++;
   1cd7d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:258
    }
    while (tailNum < 9999);
   1cd81:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1cd88:	0f 8e 73 ff ff ff    	jle    1cd01 <_create_directory+0x218>
   1cd8e:	eb 01                	jmp    1cd91 <_create_directory+0x2a8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:254
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1cd90:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:261
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1cd91:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1cd98:	75 2f                	jne    1cdc9 <_create_directory+0x2e0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:264
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1cd9a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cd9d:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1cda0:	83 ec 08             	sub    esp,0x8
   1cda3:	50                   	push   eax
   1cda4:	68 00 41 12 00       	push   0x124100
   1cda9:	e8 d8 40 00 00       	call   20e86 <fatfs_free_cluster_chain>
   1cdae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:266

        _free_file(file);
   1cdb1:	83 ec 0c             	sub    esp,0xc
   1cdb4:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1cdb7:	e8 11 fc ff ff       	call   1c9cd <_free_file>
   1cdbc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:267
        return 0;
   1cdbf:	b8 00 00 00 00       	mov    eax,0x0
   1cdc4:	e9 da 00 00 00       	jmp    1cea3 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:295
        return 0;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 1))
   1cdc9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cdcc:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1cdcf:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cdd2:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1cdd8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cddb:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cde1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1cde4:	8b 00                	mov    eax,DWORD PTR [eax]
   1cde6:	83 ec 04             	sub    esp,0x4
   1cde9:	6a 01                	push   0x1
   1cdeb:	6a 00                	push   0x0
   1cded:	52                   	push   edx
   1cdee:	53                   	push   ebx
   1cdef:	51                   	push   ecx
   1cdf0:	50                   	push   eax
   1cdf1:	68 00 41 12 00       	push   0x124100
   1cdf6:	e8 5d 46 00 00       	call   21458 <fatfs_add_file_entry>
   1cdfb:	83 c4 20             	add    esp,0x20
   1cdfe:	85 c0                	test   eax,eax
   1ce00:	75 2c                	jne    1ce2e <_create_directory+0x345>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:298
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1ce02:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce05:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1ce08:	83 ec 08             	sub    esp,0x8
   1ce0b:	50                   	push   eax
   1ce0c:	68 00 41 12 00       	push   0x124100
   1ce11:	e8 70 40 00 00       	call   20e86 <fatfs_free_cluster_chain>
   1ce16:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:300

        _free_file(file);
   1ce19:	83 ec 0c             	sub    esp,0xc
   1ce1c:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ce1f:	e8 a9 fb ff ff       	call   1c9cd <_free_file>
   1ce24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:301
        return 0;
   1ce27:	b8 00 00 00 00       	mov    eax,0x0
   1ce2c:	eb 75                	jmp    1cea3 <_create_directory+0x3ba>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:305
    }

    // General
    file->filelength = 0;
   1ce2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce31:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:306
    file->bytenum = 0;
   1ce38:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce3b:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:307
    file->file_data_address = 0xFFFFFFFF;
   1ce42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce45:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1ce4c:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:308
    file->file_data_dirty = 0;
   1ce4f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce52:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1ce59:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:309
    file->filelength_changed = 0;
   1ce5c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce5f:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:312

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1ce66:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce69:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1ce70:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:313
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1ce73:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1ce76:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1ce7d:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:315

    fatfs_fat_purge(&_fs);
   1ce80:	83 ec 0c             	sub    esp,0xc
   1ce83:	68 00 41 12 00       	push   0x124100
   1ce88:	e8 5f 3a 00 00       	call   208ec <fatfs_fat_purge>
   1ce8d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:317

    _free_file(file);
   1ce90:	83 ec 0c             	sub    esp,0xc
   1ce93:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   1ce96:	e8 32 fb ff ff       	call   1c9cd <_free_file>
   1ce9b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:318
    return 1;
   1ce9e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:319 (discriminator 1)
}
   1cea3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1cea6:	c9                   	leave  
   1cea7:	c3                   	ret    

0001cea8 <_open_file>:
_open_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:325
#endif
//-----------------------------------------------------------------------------
// _open_file: Open a file for reading
//-----------------------------------------------------------------------------
static FL_FILE* _open_file(const char *path)
{
   1cea8:	55                   	push   ebp
   1cea9:	89 e5                	mov    ebp,esp
   1ceab:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:330
    FL_FILE* file;
    struct fat_dir_entry sfEntry;

    // Allocate a new file handle
    file = _allocate_file();
   1ceae:	e8 4b fa ff ff       	call   1c8fe <_allocate_file>
   1ceb3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:331
    if (!file)
   1ceb6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1ceba:	75 0a                	jne    1cec6 <_open_file+0x1e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:332
        return NULL;
   1cebc:	b8 00 00 00 00       	mov    eax,0x0
   1cec1:	e9 fc 01 00 00       	jmp    1d0c2 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:335

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1cec6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cec9:	83 c0 14             	add    eax,0x14
   1cecc:	83 ec 04             	sub    esp,0x4
   1cecf:	68 80 00 00 00       	push   0x80
   1ced4:	6a 00                	push   0x0
   1ced6:	50                   	push   eax
   1ced7:	e8 e5 84 00 00       	call   253c1 <memset>
   1cedc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:336
    memset(file->filename, '\0', sizeof(file->filename));
   1cedf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cee2:	05 94 00 00 00       	add    eax,0x94
   1cee7:	83 ec 04             	sub    esp,0x4
   1ceea:	68 80 00 00 00       	push   0x80
   1ceef:	6a 00                	push   0x0
   1cef1:	50                   	push   eax
   1cef2:	e8 ca 84 00 00       	call   253c1 <memset>
   1cef7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:339

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)path, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1cefa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cefd:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1cf03:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cf06:	83 c0 14             	add    eax,0x14
   1cf09:	83 ec 0c             	sub    esp,0xc
   1cf0c:	68 80 00 00 00       	push   0x80
   1cf11:	52                   	push   edx
   1cf12:	68 80 00 00 00       	push   0x80
   1cf17:	50                   	push   eax
   1cf18:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1cf1b:	e8 5d 31 00 00       	call   2007d <fatfs_split_path>
   1cf20:	83 c4 20             	add    esp,0x20
   1cf23:	83 f8 ff             	cmp    eax,0xffffffff
   1cf26:	75 18                	jne    1cf40 <_open_file+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:341
    {
        _free_file(file);
   1cf28:	83 ec 0c             	sub    esp,0xc
   1cf2b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cf2e:	e8 9a fa ff ff       	call   1c9cd <_free_file>
   1cf33:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:342
        return NULL;
   1cf36:	b8 00 00 00 00       	mov    eax,0x0
   1cf3b:	e9 82 01 00 00       	jmp    1d0c2 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:346
    }

    // Check if file already open
    if (_check_file_open(file))
   1cf40:	83 ec 0c             	sub    esp,0xc
   1cf43:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cf46:	e8 f6 f9 ff ff       	call   1c941 <_check_file_open>
   1cf4b:	83 c4 10             	add    esp,0x10
   1cf4e:	85 c0                	test   eax,eax
   1cf50:	74 18                	je     1cf6a <_open_file+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:348
    {
        _free_file(file);
   1cf52:	83 ec 0c             	sub    esp,0xc
   1cf55:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cf58:	e8 70 fa ff ff       	call   1c9cd <_free_file>
   1cf5d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:349
        return NULL;
   1cf60:	b8 00 00 00 00       	mov    eax,0x0
   1cf65:	e9 58 01 00 00       	jmp    1d0c2 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:353
    }

    // If file is in the root dir
    if (file->path[0]==0)
   1cf6a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cf6d:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1cf71:	84 c0                	test   al,al
   1cf73:	75 19                	jne    1cf8e <_open_file+0xe6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:354
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1cf75:	83 ec 0c             	sub    esp,0xc
   1cf78:	68 00 41 12 00       	push   0x124100
   1cf7d:	e8 3f ea ff ff       	call   1b9c1 <fatfs_get_root_cluster>
   1cf82:	83 c4 10             	add    esp,0x10
   1cf85:	89 c2                	mov    edx,eax
   1cf87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cf8a:	89 10                	mov    DWORD PTR [eax],edx
   1cf8c:	eb 32                	jmp    1cfc0 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:358
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1cf8e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cf91:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1cf94:	83 c2 14             	add    edx,0x14
   1cf97:	83 ec 08             	sub    esp,0x8
   1cf9a:	50                   	push   eax
   1cf9b:	52                   	push   edx
   1cf9c:	e8 5e fa ff ff       	call   1c9ff <_open_directory>
   1cfa1:	83 c4 10             	add    esp,0x10
   1cfa4:	85 c0                	test   eax,eax
   1cfa6:	75 18                	jne    1cfc0 <_open_file+0x118>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:360
        {
            _free_file(file);
   1cfa8:	83 ec 0c             	sub    esp,0xc
   1cfab:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1cfae:	e8 1a fa ff ff       	call   1c9cd <_free_file>
   1cfb3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:361
            return NULL;
   1cfb6:	b8 00 00 00 00       	mov    eax,0x0
   1cfbb:	e9 02 01 00 00       	jmp    1d0c2 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:366
        }
    }

    // Using dir cluster address search for filename
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry))
   1cfc0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cfc3:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1cfc9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1cfcc:	8b 00                	mov    eax,DWORD PTR [eax]
   1cfce:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1cfd1:	52                   	push   edx
   1cfd2:	51                   	push   ecx
   1cfd3:	50                   	push   eax
   1cfd4:	68 00 41 12 00       	push   0x124100
   1cfd9:	e8 ee e9 ff ff       	call   1b9cc <fatfs_get_file_entry>
   1cfde:	83 c4 10             	add    esp,0x10
   1cfe1:	85 c0                	test   eax,eax
   1cfe3:	0f 84 c6 00 00 00    	je     1d0af <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:368
        // Make sure entry is file not dir!
        if (fatfs_entry_is_file(&sfEntry))
   1cfe9:	83 ec 0c             	sub    esp,0xc
   1cfec:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1cfef:	50                   	push   eax
   1cff0:	e8 e9 27 00 00       	call   1f7de <fatfs_entry_is_file>
   1cff5:	83 c4 10             	add    esp,0x10
   1cff8:	85 c0                	test   eax,eax
   1cffa:	0f 84 af 00 00 00    	je     1d0af <_open_file+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:371
        {
            // Initialise file details
            memcpy(file->shortfilename, sfEntry.Name, FAT_SFN_SIZE_FULL);
   1d000:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d003:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d009:	83 ec 04             	sub    esp,0x4
   1d00c:	6a 0b                	push   0xb
   1d00e:	8d 45 d4             	lea    eax,[ebp-0x2c]
   1d011:	50                   	push   eax
   1d012:	52                   	push   edx
   1d013:	e8 54 8e 00 00       	call   25e6c <memcpy>
   1d018:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:372
            file->filelength = FAT_HTONL(sfEntry.FileSize);
   1d01b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d01e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d021:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:373
            file->bytenum = 0;
   1d024:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d027:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:374
            file->startcluster = ((FAT_HTONS((uint32)sfEntry.FstClusHI))<<16) + FAT_HTONS(sfEntry.FstClusLO);
   1d02e:	0f b7 45 e8          	movzx  eax,WORD PTR [ebp-0x18]
   1d032:	0f b7 c0             	movzx  eax,ax
   1d035:	c1 e0 10             	shl    eax,0x10
   1d038:	89 c2                	mov    edx,eax
   1d03a:	0f b7 45 ee          	movzx  eax,WORD PTR [ebp-0x12]
   1d03e:	0f b7 c0             	movzx  eax,ax
   1d041:	01 c2                	add    edx,eax
   1d043:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d046:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:375
            file->file_data_address = 0xFFFFFFFF;
   1d049:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d04c:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1d053:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:376
            file->file_data_dirty = 0;
   1d056:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d059:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d060:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:377
            file->filelength_changed = 0;
   1d063:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d066:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:380

            // Quick lookup for next link in the chain
            file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d06d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d070:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1d077:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:381
            file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d07a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d07d:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1d084:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:383

            fatfs_cache_init(&_fs, file);
   1d087:	83 ec 08             	sub    esp,0x8
   1d08a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d08d:	68 00 41 12 00       	push   0x124100
   1d092:	e8 a7 f6 ff ff       	call   1c73e <fatfs_cache_init>
   1d097:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:385

            fatfs_fat_purge(&_fs);
   1d09a:	83 ec 0c             	sub    esp,0xc
   1d09d:	68 00 41 12 00       	push   0x124100
   1d0a2:	e8 45 38 00 00       	call   208ec <fatfs_fat_purge>
   1d0a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:387

            return file;
   1d0aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d0ad:	eb 13                	jmp    1d0c2 <_open_file+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:390
        }

    _free_file(file);
   1d0af:	83 ec 0c             	sub    esp,0xc
   1d0b2:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d0b5:	e8 13 f9 ff ff       	call   1c9cd <_free_file>
   1d0ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:391
    return NULL;
   1d0bd:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:392 (discriminator 1)
}
   1d0c2:	c9                   	leave  
   1d0c3:	c3                   	ret    

0001d0c4 <_create_file>:
_create_file():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:398
//-----------------------------------------------------------------------------
// _create_file: Create a new file
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static FL_FILE* _create_file(const char *filename)
{
   1d0c4:	55                   	push   ebp
   1d0c5:	89 e5                	mov    ebp,esp
   1d0c7:	53                   	push   ebx
   1d0c8:	83 ec 44             	sub    esp,0x44
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:402
    FL_FILE* file;
    struct fat_dir_entry sfEntry;
    char shortFilename[FAT_SFN_SIZE_FULL];
    int tailNum = 0;
   1d0cb:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:405

    // No write access?
    if (!_fs.disk_io.write_media)
   1d0d2:	a1 38 41 12 00       	mov    eax,ds:0x124138
   1d0d7:	85 c0                	test   eax,eax
   1d0d9:	75 0a                	jne    1d0e5 <_create_file+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:406
        return NULL;
   1d0db:	b8 00 00 00 00       	mov    eax,0x0
   1d0e0:	e9 3a 03 00 00       	jmp    1d41f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:409

    // Allocate a new file handle
    file = _allocate_file();
   1d0e5:	e8 14 f8 ff ff       	call   1c8fe <_allocate_file>
   1d0ea:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:410
    if (!file)
   1d0ed:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d0f1:	75 0a                	jne    1d0fd <_create_file+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:411
        return NULL;
   1d0f3:	b8 00 00 00 00       	mov    eax,0x0
   1d0f8:	e9 22 03 00 00       	jmp    1d41f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:414

    // Clear filename
    memset(file->path, '\0', sizeof(file->path));
   1d0fd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d100:	83 c0 14             	add    eax,0x14
   1d103:	83 ec 04             	sub    esp,0x4
   1d106:	68 80 00 00 00       	push   0x80
   1d10b:	6a 00                	push   0x0
   1d10d:	50                   	push   eax
   1d10e:	e8 ae 82 00 00       	call   253c1 <memset>
   1d113:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:415
    memset(file->filename, '\0', sizeof(file->filename));
   1d116:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d119:	05 94 00 00 00       	add    eax,0x94
   1d11e:	83 ec 04             	sub    esp,0x4
   1d121:	68 80 00 00 00       	push   0x80
   1d126:	6a 00                	push   0x0
   1d128:	50                   	push   eax
   1d129:	e8 93 82 00 00       	call   253c1 <memset>
   1d12e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:418

    // Split full path into filename and directory path
    if (fatfs_split_path((char*)filename, file->path, sizeof(file->path), file->filename, sizeof(file->filename)) == -1)
   1d131:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d134:	8d 90 94 00 00 00    	lea    edx,[eax+0x94]
   1d13a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d13d:	83 c0 14             	add    eax,0x14
   1d140:	83 ec 0c             	sub    esp,0xc
   1d143:	68 80 00 00 00       	push   0x80
   1d148:	52                   	push   edx
   1d149:	68 80 00 00 00       	push   0x80
   1d14e:	50                   	push   eax
   1d14f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d152:	e8 26 2f 00 00       	call   2007d <fatfs_split_path>
   1d157:	83 c4 20             	add    esp,0x20
   1d15a:	83 f8 ff             	cmp    eax,0xffffffff
   1d15d:	75 18                	jne    1d177 <_create_file+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:420
    {
        _free_file(file);
   1d15f:	83 ec 0c             	sub    esp,0xc
   1d162:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d165:	e8 63 f8 ff ff       	call   1c9cd <_free_file>
   1d16a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:421
        return NULL;
   1d16d:	b8 00 00 00 00       	mov    eax,0x0
   1d172:	e9 a8 02 00 00       	jmp    1d41f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:425
    }

    // Check if file already open
    if (_check_file_open(file))
   1d177:	83 ec 0c             	sub    esp,0xc
   1d17a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d17d:	e8 bf f7 ff ff       	call   1c941 <_check_file_open>
   1d182:	83 c4 10             	add    esp,0x10
   1d185:	85 c0                	test   eax,eax
   1d187:	74 18                	je     1d1a1 <_create_file+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:427
    {
        _free_file(file);
   1d189:	83 ec 0c             	sub    esp,0xc
   1d18c:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d18f:	e8 39 f8 ff ff       	call   1c9cd <_free_file>
   1d194:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:428
        return NULL;
   1d197:	b8 00 00 00 00       	mov    eax,0x0
   1d19c:	e9 7e 02 00 00       	jmp    1d41f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:432
    }

    // If file is in the root dir
    if (file->path[0] == 0)
   1d1a1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d1a4:	0f b6 40 14          	movzx  eax,BYTE PTR [eax+0x14]
   1d1a8:	84 c0                	test   al,al
   1d1aa:	75 19                	jne    1d1c5 <_create_file+0x101>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:433
        file->parentcluster = fatfs_get_root_cluster(&_fs);
   1d1ac:	83 ec 0c             	sub    esp,0xc
   1d1af:	68 00 41 12 00       	push   0x124100
   1d1b4:	e8 08 e8 ff ff       	call   1b9c1 <fatfs_get_root_cluster>
   1d1b9:	83 c4 10             	add    esp,0x10
   1d1bc:	89 c2                	mov    edx,eax
   1d1be:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d1c1:	89 10                	mov    DWORD PTR [eax],edx
   1d1c3:	eb 32                	jmp    1d1f7 <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:437
    else
    {
        // Find parent directory start cluster
        if (!_open_directory(file->path, &file->parentcluster))
   1d1c5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d1c8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d1cb:	83 c2 14             	add    edx,0x14
   1d1ce:	83 ec 08             	sub    esp,0x8
   1d1d1:	50                   	push   eax
   1d1d2:	52                   	push   edx
   1d1d3:	e8 27 f8 ff ff       	call   1c9ff <_open_directory>
   1d1d8:	83 c4 10             	add    esp,0x10
   1d1db:	85 c0                	test   eax,eax
   1d1dd:	75 18                	jne    1d1f7 <_create_file+0x133>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:439
        {
            _free_file(file);
   1d1df:	83 ec 0c             	sub    esp,0xc
   1d1e2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d1e5:	e8 e3 f7 ff ff       	call   1c9cd <_free_file>
   1d1ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:440
            return NULL;
   1d1ed:	b8 00 00 00 00       	mov    eax,0x0
   1d1f2:	e9 28 02 00 00       	jmp    1d41f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:445
        }
    }

    // Check if same filename exists in directory
    if (fatfs_get_file_entry(&_fs, file->parentcluster, file->filename,&sfEntry) == 1)
   1d1f7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d1fa:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d200:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d203:	8b 00                	mov    eax,DWORD PTR [eax]
   1d205:	8d 55 d0             	lea    edx,[ebp-0x30]
   1d208:	52                   	push   edx
   1d209:	51                   	push   ecx
   1d20a:	50                   	push   eax
   1d20b:	68 00 41 12 00       	push   0x124100
   1d210:	e8 b7 e7 ff ff       	call   1b9cc <fatfs_get_file_entry>
   1d215:	83 c4 10             	add    esp,0x10
   1d218:	83 f8 01             	cmp    eax,0x1
   1d21b:	75 18                	jne    1d235 <_create_file+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:447
    {
        _free_file(file);
   1d21d:	83 ec 0c             	sub    esp,0xc
   1d220:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d223:	e8 a5 f7 ff ff       	call   1c9cd <_free_file>
   1d228:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:448
        return NULL;
   1d22b:	b8 00 00 00 00       	mov    eax,0x0
   1d230:	e9 ea 01 00 00       	jmp    1d41f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:451
    }

    file->startcluster = 0;
   1d235:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d238:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:454

    // Create the file space for the file (at least one clusters worth!)
    if (!fatfs_allocate_free_space(&_fs, 1, &file->startcluster, 1))
   1d23f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d242:	83 c0 04             	add    eax,0x4
   1d245:	6a 01                	push   0x1
   1d247:	50                   	push   eax
   1d248:	6a 01                	push   0x1
   1d24a:	68 00 41 12 00       	push   0x124100
   1d24f:	e8 ec 3e 00 00       	call   21140 <fatfs_allocate_free_space>
   1d254:	83 c4 10             	add    esp,0x10
   1d257:	85 c0                	test   eax,eax
   1d259:	75 18                	jne    1d273 <_create_file+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:456
    {
        _free_file(file);
   1d25b:	83 ec 0c             	sub    esp,0xc
   1d25e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d261:	e8 67 f7 ff ff       	call   1c9cd <_free_file>
   1d266:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:457
        return NULL;
   1d269:	b8 00 00 00 00       	mov    eax,0x0
   1d26e:	e9 ac 01 00 00       	jmp    1d41f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:462
    }

#if FATFS_INC_LFN_SUPPORT
    // Generate a short filename & tail
    tailNum = 0;
   1d273:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:466
    do
    {
        // Create a standard short filename (without tail)
        fatfs_lfn_create_sfn(shortFilename, file->filename);
   1d27a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d27d:	05 94 00 00 00       	add    eax,0x94
   1d282:	83 ec 08             	sub    esp,0x8
   1d285:	50                   	push   eax
   1d286:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d289:	50                   	push   eax
   1d28a:	e8 ed 27 00 00       	call   1fa7c <fatfs_lfn_create_sfn>
   1d28f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:469

        // If second hit or more, generate a ~n tail
        if (tailNum != 0)
   1d292:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d296:	74 1f                	je     1d2b7 <_create_file+0x1f3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:470
            fatfs_lfn_generate_tail((char*)file->shortfilename, shortFilename, tailNum);
   1d298:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d29b:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1d29e:	81 c2 14 01 00 00    	add    edx,0x114
   1d2a4:	83 ec 04             	sub    esp,0x4
   1d2a7:	50                   	push   eax
   1d2a8:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d2ab:	50                   	push   eax
   1d2ac:	52                   	push   edx
   1d2ad:	e8 50 2a 00 00       	call   1fd02 <fatfs_lfn_generate_tail>
   1d2b2:	83 c4 10             	add    esp,0x10
   1d2b5:	eb 1b                	jmp    1d2d2 <_create_file+0x20e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:473
        // Try with no tail if first entry
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);
   1d2b7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d2ba:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d2c0:	83 ec 04             	sub    esp,0x4
   1d2c3:	6a 0b                	push   0xb
   1d2c5:	8d 45 c5             	lea    eax,[ebp-0x3b]
   1d2c8:	50                   	push   eax
   1d2c9:	52                   	push   edx
   1d2ca:	e8 9d 8b 00 00       	call   25e6c <memcpy>
   1d2cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:476

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
   1d2d2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d2d5:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1d2db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d2de:	8b 00                	mov    eax,DWORD PTR [eax]
   1d2e0:	83 ec 04             	sub    esp,0x4
   1d2e3:	52                   	push   edx
   1d2e4:	50                   	push   eax
   1d2e5:	68 00 41 12 00       	push   0x124100
   1d2ea:	e8 5a e9 ff ff       	call   1bc49 <fatfs_sfn_exists>
   1d2ef:	83 c4 10             	add    esp,0x10
   1d2f2:	85 c0                	test   eax,eax
   1d2f4:	74 13                	je     1d309 <_create_file+0x245>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:479
            break;

        tailNum++;
   1d2f6:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:481
    }
    while (tailNum < 9999);
   1d2fa:	81 7d f4 0e 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270e
   1d301:	0f 8e 73 ff ff ff    	jle    1d27a <_create_file+0x1b6>
   1d307:	eb 01                	jmp    1d30a <_create_file+0x246>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:477
        else
            memcpy(file->shortfilename, shortFilename, FAT_SFN_SIZE_FULL);

        // Check if entry exists already or not
        if (fatfs_sfn_exists(&_fs, file->parentcluster, (char*)file->shortfilename) == 0)
            break;
   1d309:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:484
        tailNum++;
    }
    while (tailNum < 9999);

    // We reached the max number of duplicate short file names (unlikely!)
    if (tailNum == 9999)
   1d30a:	81 7d f4 0f 27 00 00 	cmp    DWORD PTR [ebp-0xc],0x270f
   1d311:	75 2f                	jne    1d342 <_create_file+0x27e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:487
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d313:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d316:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d319:	83 ec 08             	sub    esp,0x8
   1d31c:	50                   	push   eax
   1d31d:	68 00 41 12 00       	push   0x124100
   1d322:	e8 5f 3b 00 00       	call   20e86 <fatfs_free_cluster_chain>
   1d327:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:489

        _free_file(file);
   1d32a:	83 ec 0c             	sub    esp,0xc
   1d32d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d330:	e8 98 f6 ff ff       	call   1c9cd <_free_file>
   1d335:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:490
        return NULL;
   1d338:	b8 00 00 00 00       	mov    eax,0x0
   1d33d:	e9 dd 00 00 00       	jmp    1d41f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:518
        return NULL;
    }
#endif

    // Add file to disk
    if (!fatfs_add_file_entry(&_fs, file->parentcluster, (char*)file->filename, (char*)file->shortfilename, file->startcluster, 0, 0))
   1d342:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d345:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   1d348:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d34b:	8d 98 14 01 00 00    	lea    ebx,[eax+0x114]
   1d351:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d354:	8d 88 94 00 00 00    	lea    ecx,[eax+0x94]
   1d35a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d35d:	8b 00                	mov    eax,DWORD PTR [eax]
   1d35f:	83 ec 04             	sub    esp,0x4
   1d362:	6a 00                	push   0x0
   1d364:	6a 00                	push   0x0
   1d366:	52                   	push   edx
   1d367:	53                   	push   ebx
   1d368:	51                   	push   ecx
   1d369:	50                   	push   eax
   1d36a:	68 00 41 12 00       	push   0x124100
   1d36f:	e8 e4 40 00 00       	call   21458 <fatfs_add_file_entry>
   1d374:	83 c4 20             	add    esp,0x20
   1d377:	85 c0                	test   eax,eax
   1d379:	75 2c                	jne    1d3a7 <_create_file+0x2e3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:521
    {
        // Delete allocated space
        fatfs_free_cluster_chain(&_fs, file->startcluster);
   1d37b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d37e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d381:	83 ec 08             	sub    esp,0x8
   1d384:	50                   	push   eax
   1d385:	68 00 41 12 00       	push   0x124100
   1d38a:	e8 f7 3a 00 00       	call   20e86 <fatfs_free_cluster_chain>
   1d38f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:523

        _free_file(file);
   1d392:	83 ec 0c             	sub    esp,0xc
   1d395:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d398:	e8 30 f6 ff ff       	call   1c9cd <_free_file>
   1d39d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:524
        return NULL;
   1d3a0:	b8 00 00 00 00       	mov    eax,0x0
   1d3a5:	eb 78                	jmp    1d41f <_create_file+0x35b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:528
    }

    // General
    file->filelength = 0;
   1d3a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3aa:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:529
    file->bytenum = 0;
   1d3b1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3b4:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:530
    file->file_data_address = 0xFFFFFFFF;
   1d3bb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3be:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1d3c5:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:531
    file->file_data_dirty = 0;
   1d3c8:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3cb:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1d3d2:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:532
    file->filelength_changed = 0;
   1d3d5:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3d8:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:535

    // Quick lookup for next link in the chain
    file->last_fat_lookup.ClusterIdx = 0xFFFFFFFF;
   1d3df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3e2:	c7 80 20 01 00 00 ff 	mov    DWORD PTR [eax+0x120],0xffffffff
   1d3e9:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:536
    file->last_fat_lookup.CurrentCluster = 0xFFFFFFFF;
   1d3ec:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d3ef:	c7 80 24 01 00 00 ff 	mov    DWORD PTR [eax+0x124],0xffffffff
   1d3f6:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:538

    fatfs_cache_init(&_fs, file);
   1d3f9:	83 ec 08             	sub    esp,0x8
   1d3fc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d3ff:	68 00 41 12 00       	push   0x124100
   1d404:	e8 35 f3 ff ff       	call   1c73e <fatfs_cache_init>
   1d409:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:540

    fatfs_fat_purge(&_fs);
   1d40c:	83 ec 0c             	sub    esp,0xc
   1d40f:	68 00 41 12 00       	push   0x124100
   1d414:	e8 d3 34 00 00       	call   208ec <fatfs_fat_purge>
   1d419:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:542

    return file;
   1d41c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:543 (discriminator 1)
}
   1d41f:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1d422:	c9                   	leave  
   1d423:	c3                   	ret    

0001d424 <_read_sectors>:
_read_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:549
#endif
//-----------------------------------------------------------------------------
// _read_sectors: Read sector(s) from disk to file
//-----------------------------------------------------------------------------
static uint32 _read_sectors(FL_FILE* file, uint32 offset, uint8 *buffer, uint32 count)
{
   1d424:	55                   	push   ebp
   1d425:	89 e5                	mov    ebp,esp
   1d427:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:550
    uint32 Sector = 0;
   1d42a:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:551
    uint32 ClusterIdx = 0;
   1d431:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:552
    uint32 Cluster = 0;
   1d438:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:557
    uint32 i;
    uint32 lba;

    // Find cluster index within file & sector with cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d43f:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1d446:	0f b6 c8             	movzx  ecx,al
   1d449:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d44c:	ba 00 00 00 00       	mov    edx,0x0
   1d451:	f7 f1                	div    ecx
   1d453:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:558
    Sector = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d456:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1d45d:	0f b6 c0             	movzx  eax,al
   1d460:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d464:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d467:	29 c2                	sub    edx,eax
   1d469:	89 d0                	mov    eax,edx
   1d46b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:561

    // Limit number of sectors read to the number remaining in this cluster
    if ((Sector + count) > _fs.sectors_per_cluster)
   1d46e:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d471:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d474:	01 c2                	add    edx,eax
   1d476:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1d47d:	0f b6 c0             	movzx  eax,al
   1d480:	39 c2                	cmp    edx,eax
   1d482:	76 10                	jbe    1d494 <_read_sectors+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:562
        count = _fs.sectors_per_cluster - Sector;
   1d484:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1d48b:	0f b6 c0             	movzx  eax,al
   1d48e:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d491:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:565

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d497:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d49d:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d4a0:	75 11                	jne    1d4b3 <_read_sectors+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:566
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d4a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d4a5:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d4ab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d4ae:	e9 bb 00 00 00       	jmp    1d56e <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d4b3:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d4b7:	74 2b                	je     1d4e4 <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:571 (discriminator 1)
   1d4b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d4bc:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d4c2:	83 c0 01             	add    eax,0x1
   1d4c5:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d4c8:	75 1a                	jne    1d4e4 <_read_sectors+0xc0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:573
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d4ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d4cd:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d4d3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:574
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d4d6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d4d9:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d4df:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d4e2:	eb 10                	jmp    1d4f4 <_read_sectors+0xd0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:580
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d4e4:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:581
            Cluster = file->startcluster;
   1d4eb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d4ee:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d4f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d4f4:	eb 52                	jmp    1d548 <_read_sectors+0x124>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:590
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d4f6:	8d 45 e0             	lea    eax,[ebp-0x20]
   1d4f9:	50                   	push   eax
   1d4fa:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d4fd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d500:	68 00 41 12 00       	push   0x124100
   1d505:	e8 3e f2 ff ff       	call   1c748 <fatfs_cache_get_next_cluster>
   1d50a:	83 c4 10             	add    esp,0x10
   1d50d:	85 c0                	test   eax,eax
   1d50f:	75 2d                	jne    1d53e <_read_sectors+0x11a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:593
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d511:	83 ec 08             	sub    esp,0x8
   1d514:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d517:	68 00 41 12 00       	push   0x124100
   1d51c:	e8 21 34 00 00       	call   20942 <fatfs_find_next_cluster>
   1d521:	83 c4 10             	add    esp,0x10
   1d524:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:596

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d527:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d52a:	50                   	push   eax
   1d52b:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d52e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d531:	68 00 41 12 00       	push   0x124100
   1d536:	e8 17 f2 ff ff       	call   1c752 <fatfs_cache_set_next_cluster>
   1d53b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:599
            }

            Cluster = nextCluster;
   1d53e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1d541:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d544:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:585 (discriminator 1)
   1d548:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d54b:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d54e:	72 a6                	jb     1d4f6 <_read_sectors+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:603

            Cluster = nextCluster;
        }

        // Record current cluster lookup details (if valid)
        if (Cluster != FAT32_LAST_CLUSTER)
   1d550:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d554:	74 18                	je     1d56e <_read_sectors+0x14a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:605
        {
            file->last_fat_lookup.CurrentCluster = Cluster;
   1d556:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d559:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d55c:	89 90 24 01 00 00    	mov    DWORD PTR [eax+0x124],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:606
            file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1d562:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d565:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1d568:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:611
        }
    }

    // If end of cluster chain then return false
    if (Cluster == FAT32_LAST_CLUSTER)
   1d56e:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d572:	75 07                	jne    1d57b <_read_sectors+0x157>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:612
        return 0;
   1d574:	b8 00 00 00 00       	mov    eax,0x0
   1d579:	eb 41                	jmp    1d5bc <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:615

    // Calculate sector address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + Sector;
   1d57b:	83 ec 08             	sub    esp,0x8
   1d57e:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d581:	68 00 41 12 00       	push   0x124100
   1d586:	e8 79 df ff ff       	call   1b504 <fatfs_lba_of_cluster>
   1d58b:	83 c4 10             	add    esp,0x10
   1d58e:	89 c2                	mov    edx,eax
   1d590:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1d593:	01 d0                	add    eax,edx
   1d595:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:618

    // Read sector of file
    if (fatfs_sector_read(&_fs, lba, buffer, count))
   1d598:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1d59b:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1d59e:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1d5a1:	68 00 41 12 00       	push   0x124100
   1d5a6:	e8 bb df ff ff       	call   1b566 <fatfs_sector_read>
   1d5ab:	83 c4 10             	add    esp,0x10
   1d5ae:	85 c0                	test   eax,eax
   1d5b0:	74 05                	je     1d5b7 <_read_sectors+0x193>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:619
        return count;
   1d5b2:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d5b5:	eb 05                	jmp    1d5bc <_read_sectors+0x198>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:621
    else
        return 0;
   1d5b7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:622
}
   1d5bc:	c9                   	leave  
   1d5bd:	c3                   	ret    

0001d5be <fl_init>:
fl_init():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:632

//-----------------------------------------------------------------------------
// fl_init: Initialise library
//-----------------------------------------------------------------------------
void __attribute__ ((constructor)) fl_init(void)
{
   1d5be:	55                   	push   ebp
   1d5bf:	89 e5                	mov    ebp,esp
   1d5c1:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:638
    int i;

    //printk("fl_init: Entered\n");
    
    //printk("fl_init: About to initialize free file list\n");
    fat_list_init(&_free_file_list);
   1d5c4:	68 70 45 12 00       	push   0x124570
   1d5c9:	e8 8e f1 ff ff       	call   1c75c <fat_list_init>
   1d5ce:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:641
    //printk("fl_init: Initialized free file list\n");
    //printk("fl_init: About to initialize open file list\n");
    fat_list_init(&_open_file_list);
   1d5d1:	68 68 45 12 00       	push   0x124568
   1d5d6:	e8 81 f1 ff ff       	call   1c75c <fat_list_init>
   1d5db:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d5de:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1d5e5:	eb 28                	jmp    1d60f <fl_init+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:647 (discriminator 3)
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);
   1d5e7:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1d5ea:	69 c0 3c 03 00 00    	imul   eax,eax,0x33c
   1d5f0:	05 30 03 00 00       	add    eax,0x330
   1d5f5:	05 40 00 12 00       	add    eax,0x120040
   1d5fa:	83 c0 04             	add    eax,0x4
   1d5fd:	50                   	push   eax
   1d5fe:	68 70 45 12 00       	push   0x124570
   1d603:	e8 88 f2 ff ff       	call   1c890 <fat_list_insert_last>
   1d608:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 3)
    fat_list_init(&_open_file_list);
    //printk("fl_init: Initialized open file list\n");

    //printk("fl_init: Adding all objects to free list\n");
    // Add all file objects to free list
    for (i=0;i<FATFS_MAX_OPEN_FILES;i++)
   1d60b:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:646 (discriminator 1)
   1d60f:	83 7d fc 13          	cmp    DWORD PTR [ebp-0x4],0x13
   1d613:	7e d2                	jle    1d5e7 <fl_init+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:650
        fat_list_insert_last(&_free_file_list, &_files[i].list_node);

    //printk("fl_init: Returning\n");
    _filelib_init = 1;
   1d615:	c7 05 f0 40 12 00 01 	mov    DWORD PTR ds:0x1240f0,0x1
   1d61c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:651
}
   1d61f:	90                   	nop
   1d620:	c9                   	leave  
   1d621:	c3                   	ret    

0001d622 <fl_attach_locks>:
fl_attach_locks():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:656
//-----------------------------------------------------------------------------
// fl_attach_locks:
//-----------------------------------------------------------------------------
void fl_attach_locks(void (*lock)(void), void (*unlock)(void))
{
   1d622:	55                   	push   ebp
   1d623:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:657
    _fs.fl_lock = lock;
   1d625:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d628:	a3 3c 41 12 00       	mov    ds:0x12413c,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:658
    _fs.fl_unlock = unlock;
   1d62d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d630:	a3 40 41 12 00       	mov    ds:0x124140,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:659
}
   1d635:	90                   	nop
   1d636:	5d                   	pop    ebp
   1d637:	c3                   	ret    

0001d638 <fl_attach_media>:
fl_attach_media():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:664
//-----------------------------------------------------------------------------
// fl_attach_media:
//-----------------------------------------------------------------------------
int fl_attach_media(fn_diskio_read rd, fn_diskio_write wr)
{
   1d638:	55                   	push   ebp
   1d639:	89 e5                	mov    ebp,esp
   1d63b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669
    int res;

    //printk("fl_attach_media: Entered\n");
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d63e:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1d643:	85 c0                	test   eax,eax
   1d645:	75 05                	jne    1d64c <fl_attach_media+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:669 (discriminator 1)
   1d647:	e8 72 ff ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:671
    //FAT_PRINTF(("fl_attach_media: CHEKC_FL_INIT returned\n")); //clr
    _fs.disk_io.read_media = rd;
   1d64c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d64f:	a3 34 41 12 00       	mov    ds:0x124134,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:672
    _fs.disk_io.write_media = wr;
   1d654:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d657:	a3 38 41 12 00       	mov    ds:0x124138,eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:675

    // Initialise FAT parameters
    if ((res = fatfs_init(&_fs)) != FAT_INIT_OK)
   1d65c:	83 ec 0c             	sub    esp,0xc
   1d65f:	68 00 41 12 00       	push   0x124100
   1d664:	e8 03 d9 ff ff       	call   1af6c <fatfs_init>
   1d669:	83 c4 10             	add    esp,0x10
   1d66c:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d66f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1d673:	74 18                	je     1d68d <fl_attach_media+0x55>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:677
    {
        FAT_PRINTF(("FAT_FS: Error could not load FAT details (%d)!\r\n", res));
   1d675:	83 ec 08             	sub    esp,0x8
   1d678:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d67b:	68 68 39 08 00       	push   0x83968
   1d680:	e8 82 9e 00 00       	call   27507 <printk>
   1d685:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:678
        return res;
   1d688:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d68b:	eb 0f                	jmp    1d69c <fl_attach_media+0x64>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:682
    }

    //FAT_PRINTF(("fl_attach_media: returning valid=1\n")); //clr
    _filelib_valid = 1;
   1d68d:	c7 05 f4 40 12 00 01 	mov    DWORD PTR ds:0x1240f4,0x1
   1d694:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:683
    return FAT_INIT_OK;
   1d697:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:684
}
   1d69c:	c9                   	leave  
   1d69d:	c3                   	ret    

0001d69e <fl_shutdown>:
fl_shutdown():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:689
//-----------------------------------------------------------------------------
// fl_shutdown: Call before shutting down system
//-----------------------------------------------------------------------------
 void __attribute__ ((destructor))fl_shutdown(void)
{
   1d69e:	55                   	push   ebp
   1d69f:	89 e5                	mov    ebp,esp
   1d6a1:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691
    // If first call to library, initialise
    CHECK_FL_INIT();
   1d6a4:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1d6a9:	85 c0                	test   eax,eax
   1d6ab:	75 05                	jne    1d6b2 <fl_shutdown+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:691 (discriminator 1)
   1d6ad:	e8 0c ff ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693

    FL_LOCK(&_fs);
   1d6b2:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1d6b7:	85 c0                	test   eax,eax
   1d6b9:	74 07                	je     1d6c2 <fl_shutdown+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:693 (discriminator 1)
   1d6bb:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1d6c0:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:694
    fatfs_fat_purge(&_fs);
   1d6c2:	83 ec 0c             	sub    esp,0xc
   1d6c5:	68 00 41 12 00       	push   0x124100
   1d6ca:	e8 1d 32 00 00       	call   208ec <fatfs_fat_purge>
   1d6cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695
    FL_UNLOCK(&_fs);
   1d6d2:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1d6d7:	85 c0                	test   eax,eax
   1d6d9:	74 07                	je     1d6e2 <fl_shutdown+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:695 (discriminator 1)
   1d6db:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1d6e0:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:696
}
   1d6e2:	90                   	nop
   1d6e3:	c9                   	leave  
   1d6e4:	c3                   	ret    

0001d6e5 <fl_fopen>:
fl_fopen():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:701
//-----------------------------------------------------------------------------
// fopen: Open or Create a file for reading or writing
//-----------------------------------------------------------------------------
void* fl_fopen(const char *path, const char *mode)
{
   1d6e5:	55                   	push   ebp
   1d6e6:	89 e5                	mov    ebp,esp
   1d6e8:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:704
    int i;
    FL_FILE* file;
    uint8 flags = 0;
   1d6eb:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707

    // If first call to library, initialise
    CHECK_FL_INIT();
   1d6ef:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1d6f4:	85 c0                	test   eax,eax
   1d6f6:	75 05                	jne    1d6fd <fl_fopen+0x18>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:707 (discriminator 1)
   1d6f8:	e8 c1 fe ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:709

    if (!_filelib_valid)
   1d6fd:	a1 f4 40 12 00       	mov    eax,ds:0x1240f4
   1d702:	85 c0                	test   eax,eax
   1d704:	75 0a                	jne    1d710 <fl_fopen+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:710
        return NULL;
   1d706:	b8 00 00 00 00       	mov    eax,0x0
   1d70b:	e9 8c 01 00 00       	jmp    1d89c <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712

    if (!path || !mode)
   1d710:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1d714:	74 06                	je     1d71c <fl_fopen+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:712 (discriminator 1)
   1d716:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1d71a:	75 0a                	jne    1d726 <fl_fopen+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:713
        return NULL;
   1d71c:	b8 00 00 00 00       	mov    eax,0x0
   1d721:	e9 76 01 00 00       	jmp    1d89c <fl_fopen+0x1b7>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d726:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1d72d:	e9 93 00 00 00       	jmp    1d7c5 <fl_fopen+0xe0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:735
    {
        switch (mode[i])
   1d732:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1d735:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d738:	01 d0                	add    eax,edx
   1d73a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1d73d:	0f be c0             	movsx  eax,al
   1d740:	83 e8 2b             	sub    eax,0x2b
   1d743:	83 f8 4c             	cmp    eax,0x4c
   1d746:	77 79                	ja     1d7c1 <fl_fopen+0xdc>
   1d748:	8b 04 85 9c 39 08 00 	mov    eax,DWORD PTR [eax*4+0x8399c]
   1d74f:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:739
        {
        case 'r':
        case 'R':
            flags |= FILE_READ;
   1d751:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:740
            break;
   1d755:	eb 6a                	jmp    1d7c1 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:743
        case 'w':
        case 'W':
            flags |= FILE_WRITE;
   1d757:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:744
            flags |= FILE_ERASE;
   1d75b:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:745
            flags |= FILE_CREATE;
   1d75f:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:746
            break;
   1d763:	eb 5c                	jmp    1d7c1 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:749
        case 'a':
        case 'A':
            flags |= FILE_WRITE;
   1d765:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:750
            flags |= FILE_APPEND;
   1d769:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:751
            flags |= FILE_CREATE;
   1d76d:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:752
            break;
   1d771:	eb 4e                	jmp    1d7c1 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:754
        case '+':
            if (flags & FILE_READ)
   1d773:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d777:	83 e0 01             	and    eax,0x1
   1d77a:	85 c0                	test   eax,eax
   1d77c:	74 06                	je     1d784 <fl_fopen+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:755
                flags |= FILE_WRITE;
   1d77e:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d782:	eb 3c                	jmp    1d7c0 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:756
            flags |= FILE_CREATE;
            break;
        case '+':
            if (flags & FILE_READ)
                flags |= FILE_WRITE;
            else if (flags & FILE_WRITE)
   1d784:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d788:	83 e0 02             	and    eax,0x2
   1d78b:	85 c0                	test   eax,eax
   1d78d:	74 0e                	je     1d79d <fl_fopen+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:758
            {
                flags |= FILE_READ;
   1d78f:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:759
                flags |= FILE_ERASE;
   1d793:	80 4d ef 10          	or     BYTE PTR [ebp-0x11],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:760
                flags |= FILE_CREATE;
   1d797:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d79b:	eb 23                	jmp    1d7c0 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:762
            {
                flags |= FILE_READ;
                flags |= FILE_ERASE;
                flags |= FILE_CREATE;
            }
            else if (flags & FILE_APPEND)
   1d79d:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d7a1:	83 e0 04             	and    eax,0x4
   1d7a4:	85 c0                	test   eax,eax
   1d7a6:	74 18                	je     1d7c0 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:764
            {
                flags |= FILE_READ;
   1d7a8:	80 4d ef 01          	or     BYTE PTR [ebp-0x11],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:765
                flags |= FILE_WRITE;
   1d7ac:	80 4d ef 02          	or     BYTE PTR [ebp-0x11],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:766
                flags |= FILE_APPEND;
   1d7b0:	80 4d ef 04          	or     BYTE PTR [ebp-0x11],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:767
                flags |= FILE_CREATE;
   1d7b4:	80 4d ef 20          	or     BYTE PTR [ebp-0x11],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
            }
            break;
   1d7b8:	eb 06                	jmp    1d7c0 <fl_fopen+0xdb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:772
        case 'b':
        case 'B':
            flags |= FILE_BINARY;
   1d7ba:	80 4d ef 08          	or     BYTE PTR [ebp-0x11],0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:773
            break;
   1d7be:	eb 01                	jmp    1d7c1 <fl_fopen+0xdc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:769
                flags |= FILE_READ;
                flags |= FILE_WRITE;
                flags |= FILE_APPEND;
                flags |= FILE_CREATE;
            }
            break;
   1d7c0:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 2)
    //        All writing operations are performed at the end of the file, protecting the previous content to be overwritten.
    //        You can reposition (fseek, rewind) the internal pointer to anywhere in the file for reading, but writing operations
    //        will move it back to the end of file.
    //        The file is created if it does not exist.

    for (i=0;i<(int)strlen(mode);i++)
   1d7c1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:733 (discriminator 1)
   1d7c5:	83 ec 0c             	sub    esp,0xc
   1d7c8:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1d7cb:	e8 08 9f 00 00       	call   276d8 <strlen>
   1d7d0:	83 c4 10             	add    esp,0x10
   1d7d3:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1d7d6:	0f 8f 56 ff ff ff    	jg     1d732 <fl_fopen+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:777
            flags |= FILE_BINARY;
            break;
        }
    }

    file = NULL;
   1d7dc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:785
    // No write support!
    flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
#endif

    // No write access - remove write/modify flags
    if (!_fs.disk_io.write_media)
   1d7e3:	a1 38 41 12 00       	mov    eax,ds:0x124138
   1d7e8:	85 c0                	test   eax,eax
   1d7ea:	75 04                	jne    1d7f0 <fl_fopen+0x10b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:786
        flags &= ~(FILE_CREATE | FILE_WRITE | FILE_APPEND);
   1d7ec:	80 65 ef d9          	and    BYTE PTR [ebp-0x11],0xd9
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788

    FL_LOCK(&_fs);
   1d7f0:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1d7f5:	85 c0                	test   eax,eax
   1d7f7:	74 07                	je     1d800 <fl_fopen+0x11b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:788 (discriminator 1)
   1d7f9:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1d7fe:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:791

    // Read
    if (flags & FILE_READ)
   1d800:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d804:	83 e0 01             	and    eax,0x1
   1d807:	85 c0                	test   eax,eax
   1d809:	74 11                	je     1d81c <fl_fopen+0x137>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:792
        file = _open_file(path);
   1d80b:	83 ec 0c             	sub    esp,0xc
   1d80e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d811:	e8 92 f6 ff ff       	call   1cea8 <_open_file>
   1d816:	83 c4 10             	add    esp,0x10
   1d819:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796

    // Create New
#if FATFS_INC_WRITE_SUPPORT
    if (!file && (flags & FILE_CREATE))
   1d81c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d820:	75 1c                	jne    1d83e <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:796 (discriminator 1)
   1d822:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d826:	83 e0 20             	and    eax,0x20
   1d829:	85 c0                	test   eax,eax
   1d82b:	74 11                	je     1d83e <fl_fopen+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:797
        file = _create_file(path);
   1d82d:	83 ec 0c             	sub    esp,0xc
   1d830:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d833:	e8 8c f8 ff ff       	call   1d0c4 <_create_file>
   1d838:	83 c4 10             	add    esp,0x10
   1d83b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:801
#endif

    // Write Existing (and not open due to read or create)
    if (!(flags & FILE_READ))
   1d83e:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d842:	83 e0 01             	and    eax,0x1
   1d845:	85 c0                	test   eax,eax
   1d847:	75 2d                	jne    1d876 <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802
        if ((flags & FILE_CREATE) && !file)
   1d849:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d84d:	83 e0 20             	and    eax,0x20
   1d850:	85 c0                	test   eax,eax
   1d852:	74 22                	je     1d876 <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:802 (discriminator 1)
   1d854:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d858:	75 1c                	jne    1d876 <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:803
            if (flags & (FILE_WRITE | FILE_APPEND))
   1d85a:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   1d85e:	83 e0 06             	and    eax,0x6
   1d861:	85 c0                	test   eax,eax
   1d863:	74 11                	je     1d876 <fl_fopen+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:804
                file = _open_file(path);
   1d865:	83 ec 0c             	sub    esp,0xc
   1d868:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d86b:	e8 38 f6 ff ff       	call   1cea8 <_open_file>
   1d870:	83 c4 10             	add    esp,0x10
   1d873:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:806

    if (file)
   1d876:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1d87a:	74 0d                	je     1d889 <fl_fopen+0x1a4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:807
        file->flags = flags;
   1d87c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d87f:	0f b6 55 ef          	movzx  edx,BYTE PTR [ebp-0x11]
   1d883:	88 90 30 03 00 00    	mov    BYTE PTR [eax+0x330],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809

    FL_UNLOCK(&_fs);
   1d889:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1d88e:	85 c0                	test   eax,eax
   1d890:	74 07                	je     1d899 <fl_fopen+0x1b4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:809 (discriminator 1)
   1d892:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1d897:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:810
    return file;
   1d899:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:811
}
   1d89c:	c9                   	leave  
   1d89d:	c3                   	ret    

0001d89e <_write_sectors>:
_write_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:817
//-----------------------------------------------------------------------------
// _write_sectors: Write sector(s) to disk
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
static uint32 _write_sectors(FL_FILE* file, uint32 offset, uint8 *buf, uint32 count)
{
   1d89e:	55                   	push   ebp
   1d89f:	89 e5                	mov    ebp,esp
   1d8a1:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:818
    uint32 SectorNumber = 0;
   1d8a4:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:819
    uint32 ClusterIdx = 0;
   1d8ab:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:820
    uint32 Cluster = 0;
   1d8b2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:821
    uint32 LastCluster = FAT32_LAST_CLUSTER;
   1d8b9:	c7 45 dc ff ff ff ff 	mov    DWORD PTR [ebp-0x24],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:824
    uint32 i;
    uint32 lba;
    uint32 TotalWriteCount = count;
   1d8c0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d8c3:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:827

    // Find values for Cluster index & sector within cluster
    ClusterIdx = offset / _fs.sectors_per_cluster;
   1d8c6:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1d8cd:	0f b6 c8             	movzx  ecx,al
   1d8d0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1d8d3:	ba 00 00 00 00       	mov    edx,0x0
   1d8d8:	f7 f1                	div    ecx
   1d8da:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:828
    SectorNumber = offset - (ClusterIdx * _fs.sectors_per_cluster);
   1d8dd:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1d8e4:	0f b6 c0             	movzx  eax,al
   1d8e7:	0f af 45 e8          	imul   eax,DWORD PTR [ebp-0x18]
   1d8eb:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1d8ee:	29 c2                	sub    edx,eax
   1d8f0:	89 d0                	mov    eax,edx
   1d8f2:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:831

    // Limit number of sectors written to the number remaining in this cluster
    if ((SectorNumber + count) > _fs.sectors_per_cluster)
   1d8f5:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   1d8f8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1d8fb:	01 c2                	add    edx,eax
   1d8fd:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1d904:	0f b6 c0             	movzx  eax,al
   1d907:	39 c2                	cmp    edx,eax
   1d909:	76 10                	jbe    1d91b <_write_sectors+0x7d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:832
        count = _fs.sectors_per_cluster - SectorNumber;
   1d90b:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1d912:	0f b6 c0             	movzx  eax,al
   1d915:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1d918:	89 45 14             	mov    DWORD PTR [ebp+0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:835

    // Quick lookup for next link in the chain
    if (ClusterIdx == file->last_fat_lookup.ClusterIdx)
   1d91b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d91e:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d924:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d927:	75 11                	jne    1d93a <_write_sectors+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:836
        Cluster = file->last_fat_lookup.CurrentCluster;
   1d929:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d92c:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d932:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d935:	e9 13 01 00 00       	jmp    1da4d <_write_sectors+0x1af>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841
    // Else walk the chain
    else
    {
        // Starting from last recorded cluster?
        if (ClusterIdx && ClusterIdx == file->last_fat_lookup.ClusterIdx + 1)
   1d93a:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1d93e:	74 2b                	je     1d96b <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:841 (discriminator 1)
   1d940:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d943:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d949:	83 c0 01             	add    eax,0x1
   1d94c:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d94f:	75 1a                	jne    1d96b <_write_sectors+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:843
        {
            i = file->last_fat_lookup.ClusterIdx;
   1d951:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d954:	8b 80 20 01 00 00    	mov    eax,DWORD PTR [eax+0x120]
   1d95a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:844
            Cluster = file->last_fat_lookup.CurrentCluster;
   1d95d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d960:	8b 80 24 01 00 00    	mov    eax,DWORD PTR [eax+0x124]
   1d966:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1d969:	eb 10                	jmp    1d97b <_write_sectors+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:850
        }
        // Start searching from the beginning..
        else
        {
            // Set start of cluster chain to initial value
            i = 0;
   1d96b:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:851
            Cluster = file->startcluster;
   1d972:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1d975:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1d978:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d97b:	eb 5e                	jmp    1d9db <_write_sectors+0x13d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:860
        {
            uint32 nextCluster;

            // Does the entry exist in the cache?
            if (!fatfs_cache_get_next_cluster(&_fs, file, i, &nextCluster))
   1d97d:	8d 45 d8             	lea    eax,[ebp-0x28]
   1d980:	50                   	push   eax
   1d981:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d984:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d987:	68 00 41 12 00       	push   0x124100
   1d98c:	e8 b7 ed ff ff       	call   1c748 <fatfs_cache_get_next_cluster>
   1d991:	83 c4 10             	add    esp,0x10
   1d994:	85 c0                	test   eax,eax
   1d996:	75 2d                	jne    1d9c5 <_write_sectors+0x127>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:863
            {
                // Scan file linked list to find next entry
                nextCluster = fatfs_find_next_cluster(&_fs, Cluster);
   1d998:	83 ec 08             	sub    esp,0x8
   1d99b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1d99e:	68 00 41 12 00       	push   0x124100
   1d9a3:	e8 9a 2f 00 00       	call   20942 <fatfs_find_next_cluster>
   1d9a8:	83 c4 10             	add    esp,0x10
   1d9ab:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:866

                // Push entry into cache
                fatfs_cache_set_next_cluster(&_fs, file, i, nextCluster);
   1d9ae:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1d9b1:	50                   	push   eax
   1d9b2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1d9b5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1d9b8:	68 00 41 12 00       	push   0x124100
   1d9bd:	e8 90 ed ff ff       	call   1c752 <fatfs_cache_set_next_cluster>
   1d9c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:869
            }

            LastCluster = Cluster;
   1d9c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1d9c8:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:870
            Cluster = nextCluster;
   1d9cb:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1d9ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:873

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
   1d9d1:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d9d5:	74 0e                	je     1d9e5 <_write_sectors+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855
            i = 0;
            Cluster = file->startcluster;
        }

        // Follow chain to find cluster to read
        for ( ;i<ClusterIdx; i++)
   1d9d7:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:855 (discriminator 1)
   1d9db:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1d9de:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1d9e1:	72 9a                	jb     1d97d <_write_sectors+0xdf>
   1d9e3:	eb 01                	jmp    1d9e6 <_write_sectors+0x148>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:874
            LastCluster = Cluster;
            Cluster = nextCluster;

            // Dont keep following a dead end
            if (Cluster == FAT32_LAST_CLUSTER)
                break;
   1d9e5:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:878
        }

        // If we have reached the end of the chain, allocate more!
        if (Cluster == FAT32_LAST_CLUSTER)
   1d9e6:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   1d9ea:	75 49                	jne    1da35 <_write_sectors+0x197>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:881
        {
            // Add some more cluster(s) to the last good cluster chain
            if (!fatfs_add_free_space(&_fs, &LastCluster,  (TotalWriteCount + _fs.sectors_per_cluster -1) / _fs.sectors_per_cluster))
   1d9ec:	0f b6 05 00 41 12 00 	movzx  eax,BYTE PTR ds:0x124100
   1d9f3:	0f b6 d0             	movzx  edx,al
   1d9f6:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1d9f9:	01 d0                	add    eax,edx
   1d9fb:	83 e8 01             	sub    eax,0x1
   1d9fe:	0f b6 15 00 41 12 00 	movzx  edx,BYTE PTR ds:0x124100
   1da05:	0f b6 ca             	movzx  ecx,dl
   1da08:	ba 00 00 00 00       	mov    edx,0x0
   1da0d:	f7 f1                	div    ecx
   1da0f:	83 ec 04             	sub    esp,0x4
   1da12:	50                   	push   eax
   1da13:	8d 45 dc             	lea    eax,[ebp-0x24]
   1da16:	50                   	push   eax
   1da17:	68 00 41 12 00       	push   0x124100
   1da1c:	e8 77 36 00 00       	call   21098 <fatfs_add_free_space>
   1da21:	83 c4 10             	add    esp,0x10
   1da24:	85 c0                	test   eax,eax
   1da26:	75 07                	jne    1da2f <_write_sectors+0x191>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:882
                return 0;
   1da28:	b8 00 00 00 00       	mov    eax,0x0
   1da2d:	eb 5f                	jmp    1da8e <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:884

            Cluster = LastCluster;
   1da2f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1da32:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:888
        }

        // Record current cluster lookup details
        file->last_fat_lookup.CurrentCluster = Cluster;
   1da35:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1da38:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1da3b:	89 90 24 01 00 00    	mov    DWORD PTR [eax+0x124],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:889
        file->last_fat_lookup.ClusterIdx = ClusterIdx;
   1da41:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1da44:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1da47:	89 90 20 01 00 00    	mov    DWORD PTR [eax+0x120],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:893
    }

    // Calculate write address
    lba = fatfs_lba_of_cluster(&_fs, Cluster) + SectorNumber;
   1da4d:	83 ec 08             	sub    esp,0x8
   1da50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1da53:	68 00 41 12 00       	push   0x124100
   1da58:	e8 a7 da ff ff       	call   1b504 <fatfs_lba_of_cluster>
   1da5d:	83 c4 10             	add    esp,0x10
   1da60:	89 c2                	mov    edx,eax
   1da62:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1da65:	01 d0                	add    eax,edx
   1da67:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:895

    if (fatfs_sector_write(&_fs, lba, buf, count))
   1da6a:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1da6d:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1da70:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1da73:	68 00 41 12 00       	push   0x124100
   1da78:	e8 08 db ff ff       	call   1b585 <fatfs_sector_write>
   1da7d:	83 c4 10             	add    esp,0x10
   1da80:	85 c0                	test   eax,eax
   1da82:	74 05                	je     1da89 <_write_sectors+0x1eb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:896
        return count;
   1da84:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1da87:	eb 05                	jmp    1da8e <_write_sectors+0x1f0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:898
    else
        return 0;
   1da89:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:899 (discriminator 1)
}
   1da8e:	c9                   	leave  
   1da8f:	c3                   	ret    

0001da90 <fl_fflush>:
fl_fflush():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:905
#endif
//-----------------------------------------------------------------------------
// fl_fflush: Flush un-written data to the file
//-----------------------------------------------------------------------------
int fl_fflush(void *f)
{
   1da90:	55                   	push   ebp
   1da91:	89 e5                	mov    ebp,esp
   1da93:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:907
#if FATFS_INC_WRITE_SUPPORT
    FL_FILE *file = (FL_FILE *)f;
   1da96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1da99:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910

    // If first call to library, initialise
    CHECK_FL_INIT();
   1da9c:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1daa1:	85 c0                	test   eax,eax
   1daa3:	75 05                	jne    1daaa <fl_fflush+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:910 (discriminator 1)
   1daa5:	e8 14 fb ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:912

    if (file)
   1daaa:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1daae:	74 5f                	je     1db0f <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914
    {
        FL_LOCK(&_fs);
   1dab0:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1dab5:	85 c0                	test   eax,eax
   1dab7:	74 07                	je     1dac0 <fl_fflush+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:914 (discriminator 1)
   1dab9:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1dabe:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:917

        // If some write data still in buffer
        if (file->file_data_dirty)
   1dac0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dac3:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1dac9:	85 c0                	test   eax,eax
   1dacb:	74 32                	je     1daff <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:920
        {
            // Write back current sector before loading next
            if (_write_sectors(file, file->file_data_address, file->file_data_sector, 1))
   1dacd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dad0:	8d 90 28 01 00 00    	lea    edx,[eax+0x128]
   1dad6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dad9:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1dadf:	6a 01                	push   0x1
   1dae1:	52                   	push   edx
   1dae2:	50                   	push   eax
   1dae3:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dae6:	e8 b3 fd ff ff       	call   1d89e <_write_sectors>
   1daeb:	83 c4 10             	add    esp,0x10
   1daee:	85 c0                	test   eax,eax
   1daf0:	74 0d                	je     1daff <fl_fflush+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:921
                file->file_data_dirty = 0;
   1daf2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1daf5:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1dafc:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924
        }

        FL_UNLOCK(&_fs);
   1daff:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1db04:	85 c0                	test   eax,eax
   1db06:	74 07                	je     1db0f <fl_fflush+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:924 (discriminator 1)
   1db08:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1db0d:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:927
    }
#endif
    return 0;
   1db0f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:928
}
   1db14:	c9                   	leave  
   1db15:	c3                   	ret    

0001db16 <fl_fclose>:
fl_fclose():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:933
//-----------------------------------------------------------------------------
// fl_fclose: Close an open file
//-----------------------------------------------------------------------------
void fl_fclose(void *f)
{
   1db16:	55                   	push   ebp
   1db17:	89 e5                	mov    ebp,esp
   1db19:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:934
    FL_FILE *file = (FL_FILE *)f;
   1db1c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1db1f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937

    // If first call to library, initialise
    CHECK_FL_INIT();
   1db22:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1db27:	85 c0                	test   eax,eax
   1db29:	75 05                	jne    1db30 <fl_fclose+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:937 (discriminator 1)
   1db2b:	e8 8e fa ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:939

    if (file)
   1db30:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1db34:	0f 84 c6 00 00 00    	je     1dc00 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941
    {
        FL_LOCK(&_fs);
   1db3a:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1db3f:	85 c0                	test   eax,eax
   1db41:	74 07                	je     1db4a <fl_fclose+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:941 (discriminator 1)
   1db43:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1db48:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:944

        // Flush un-written data to file
        fl_fflush(f);
   1db4a:	83 ec 0c             	sub    esp,0xc
   1db4d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1db50:	e8 3b ff ff ff       	call   1da90 <fl_fflush>
   1db55:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:947

        // File size changed?
        if (file->filelength_changed)
   1db58:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1db5b:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1db5e:	85 c0                	test   eax,eax
   1db60:	74 2e                	je     1db90 <fl_fclose+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:951
        {
#if FATFS_INC_WRITE_SUPPORT
            // Update filesize in directory
            fatfs_update_file_length(&_fs, file->parentcluster, (char*)file->shortfilename, file->filelength);
   1db62:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1db65:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1db68:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1db6b:	8d 88 14 01 00 00    	lea    ecx,[eax+0x114]
   1db71:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1db74:	8b 00                	mov    eax,DWORD PTR [eax]
   1db76:	52                   	push   edx
   1db77:	51                   	push   ecx
   1db78:	50                   	push   eax
   1db79:	68 00 41 12 00       	push   0x124100
   1db7e:	e8 c9 e2 ff ff       	call   1be4c <fatfs_update_file_length>
   1db83:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:953
#endif
            file->filelength_changed = 0;
   1db86:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1db89:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:956
        }

        file->bytenum = 0;
   1db90:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1db93:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:957
        file->filelength = 0;
   1db9a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1db9d:	c7 40 0c 00 00 00 00 	mov    DWORD PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:958
        file->startcluster = 0;
   1dba4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dba7:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:959
        file->file_data_address = 0xFFFFFFFF;
   1dbae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dbb1:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1dbb8:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:960
        file->file_data_dirty = 0;
   1dbbb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dbbe:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1dbc5:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:961
        file->filelength_changed = 0;
   1dbc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dbcb:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:964

        // Free file handle
        _free_file(file);
   1dbd2:	83 ec 0c             	sub    esp,0xc
   1dbd5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1dbd8:	e8 f0 ed ff ff       	call   1c9cd <_free_file>
   1dbdd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:966

        fatfs_fat_purge(&_fs);
   1dbe0:	83 ec 0c             	sub    esp,0xc
   1dbe3:	68 00 41 12 00       	push   0x124100
   1dbe8:	e8 ff 2c 00 00       	call   208ec <fatfs_fat_purge>
   1dbed:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968

        FL_UNLOCK(&_fs);
   1dbf0:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1dbf5:	85 c0                	test   eax,eax
   1dbf7:	74 07                	je     1dc00 <fl_fclose+0xea>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:968 (discriminator 1)
   1dbf9:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1dbfe:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:970
    }
}
   1dc00:	90                   	nop
   1dc01:	c9                   	leave  
   1dc02:	c3                   	ret    

0001dc03 <fl_fgetc>:
fl_fgetc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:975
//-----------------------------------------------------------------------------
// fl_fgetc: Get a character in the stream
//-----------------------------------------------------------------------------
int fl_fgetc(void *f)
{
   1dc03:	55                   	push   ebp
   1dc04:	89 e5                	mov    ebp,esp
   1dc06:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:977
    int res;
    uint8 data = 0;
   1dc09:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:979

    res = fl_fread(&data, 1, 1, f);
   1dc0d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1dc10:	6a 01                	push   0x1
   1dc12:	6a 01                	push   0x1
   1dc14:	8d 45 f3             	lea    eax,[ebp-0xd]
   1dc17:	50                   	push   eax
   1dc18:	e8 95 00 00 00       	call   1dcb2 <fl_fread>
   1dc1d:	83 c4 10             	add    esp,0x10
   1dc20:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:980
    if (res == 1)
   1dc23:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1dc27:	75 09                	jne    1dc32 <fl_fgetc+0x2f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:981
        return (int)data;
   1dc29:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   1dc2d:	0f b6 c0             	movzx  eax,al
   1dc30:	eb 03                	jmp    1dc35 <fl_fgetc+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:983
    else
        return res;
   1dc32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:984 (discriminator 1)
}
   1dc35:	c9                   	leave  
   1dc36:	c3                   	ret    

0001dc37 <fl_fgets>:
fl_fgets():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:989
//-----------------------------------------------------------------------------
// fl_fgets: Get a string from a stream
//-----------------------------------------------------------------------------
char *fl_fgets(char *s, int n, void *f)
{
   1dc37:	55                   	push   ebp
   1dc38:	89 e5                	mov    ebp,esp
   1dc3a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:990
    int idx = 0;
   1dc3d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:993

    // Space for null terminator?
    if (n > 0)
   1dc44:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1dc48:	7e 56                	jle    1dca0 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1dc4a:	eb 32                	jmp    1dc7e <fl_fgets+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:998
        {
            int ch = fl_fgetc(f);
   1dc4c:	83 ec 0c             	sub    esp,0xc
   1dc4f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1dc52:	e8 ac ff ff ff       	call   1dc03 <fl_fgetc>
   1dc57:	83 c4 10             	add    esp,0x10
   1dc5a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1001

            // EOF / Error?
            if (ch < 0)
   1dc5d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dc61:	78 28                	js     1dc8b <fl_fgets+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1005
                break;

            // Store character read from stream
            s[idx++] = (char)ch;
   1dc63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1dc66:	8d 50 01             	lea    edx,[eax+0x1]
   1dc69:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   1dc6c:	89 c2                	mov    edx,eax
   1dc6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dc71:	01 d0                	add    eax,edx
   1dc73:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1dc76:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1008

            // End of line?
            if (ch == '\n')
   1dc78:	83 7d f0 0a          	cmp    DWORD PTR [ebp-0x10],0xa
   1dc7c:	74 10                	je     1dc8e <fl_fgets+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:996

    // Space for null terminator?
    if (n > 0)
    {
        // While space (+space for null terminator)
        while (idx < (n-1))
   1dc7e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dc81:	83 e8 01             	sub    eax,0x1
   1dc84:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1dc87:	7f c3                	jg     1dc4c <fl_fgets+0x15>
   1dc89:	eb 04                	jmp    1dc8f <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1002
        {
            int ch = fl_fgetc(f);

            // EOF / Error?
            if (ch < 0)
                break;
   1dc8b:	90                   	nop
   1dc8c:	eb 01                	jmp    1dc8f <fl_fgets+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1009
            // Store character read from stream
            s[idx++] = (char)ch;

            // End of line?
            if (ch == '\n')
                break;
   1dc8e:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1012
        }

        if (idx > 0)
   1dc8f:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1dc93:	7e 0b                	jle    1dca0 <fl_fgets+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1013
            s[idx] = '\0';
   1dc95:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1dc98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dc9b:	01 d0                	add    eax,edx
   1dc9d:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016
    }

    return (idx > 0) ? s : 0;
   1dca0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1dca4:	7e 05                	jle    1dcab <fl_fgets+0x74>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 1)
   1dca6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1dca9:	eb 05                	jmp    1dcb0 <fl_fgets+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1016 (discriminator 2)
   1dcab:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1017 (discriminator 5)
}
   1dcb0:	c9                   	leave  
   1dcb1:	c3                   	ret    

0001dcb2 <fl_fread>:
fl_fread():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1022
//-----------------------------------------------------------------------------
// fl_fread: Read a block of data from the file
//-----------------------------------------------------------------------------
int fl_fread(void * buffer, int size, int length, void *f )
{
   1dcb2:	55                   	push   ebp
   1dcb3:	89 e5                	mov    ebp,esp
   1dcb5:	53                   	push   ebx
   1dcb6:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1026
    uint32 sector;
    uint32 offset;
    int copyCount;
    int count = size * length;
   1dcb9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dcbc:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1dcc0:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1027
    int bytesRead = 0;
   1dcc3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1029

    FL_FILE *file = (FL_FILE *)f;
   1dcca:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1dccd:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032

    // If first call to library, initialise
    CHECK_FL_INIT();
   1dcd0:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1dcd5:	85 c0                	test   eax,eax
   1dcd7:	75 05                	jne    1dcde <fl_fread+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1032 (discriminator 1)
   1dcd9:	e8 e0 f8 ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034

    if (buffer==NULL || file==NULL)
   1dcde:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1dce2:	74 06                	je     1dcea <fl_fread+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1034 (discriminator 1)
   1dce4:	83 7d e0 00          	cmp    DWORD PTR [ebp-0x20],0x0
   1dce8:	75 0a                	jne    1dcf4 <fl_fread+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1035
        return -1;
   1dcea:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dcef:	e9 d8 01 00 00       	jmp    1decc <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1038

    // No read permissions
    if (!(file->flags & FILE_READ))
   1dcf4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dcf7:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1dcfe:	0f b6 c0             	movzx  eax,al
   1dd01:	83 e0 01             	and    eax,0x1
   1dd04:	85 c0                	test   eax,eax
   1dd06:	75 0a                	jne    1dd12 <fl_fread+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1039
        return -1;
   1dd08:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dd0d:	e9 ba 01 00 00       	jmp    1decc <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1042

    // Nothing to be done
    if (!count)
   1dd12:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   1dd16:	75 0a                	jne    1dd22 <fl_fread+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1043
        return 0;
   1dd18:	b8 00 00 00 00       	mov    eax,0x0
   1dd1d:	e9 aa 01 00 00       	jmp    1decc <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1046

    // Check if read starts past end of file
    if (file->bytenum >= file->filelength)
   1dd22:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dd25:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dd28:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dd2b:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dd2e:	39 c2                	cmp    edx,eax
   1dd30:	72 0a                	jb     1dd3c <fl_fread+0x8a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1047
        return -1;
   1dd32:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1dd37:	e9 90 01 00 00       	jmp    1decc <fl_fread+0x21a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1050

    // Limit to file size
    if ( (file->bytenum + count) > file->filelength )
   1dd3c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dd3f:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dd42:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dd45:	01 c2                	add    edx,eax
   1dd47:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dd4a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dd4d:	39 c2                	cmp    edx,eax
   1dd4f:	76 13                	jbe    1dd64 <fl_fread+0xb2>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1051
        count = file->filelength - file->bytenum;
   1dd51:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dd54:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dd57:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dd5a:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dd5d:	29 c2                	sub    edx,eax
   1dd5f:	89 d0                	mov    eax,edx
   1dd61:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1054

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1dd64:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dd67:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dd6a:	c1 e8 09             	shr    eax,0x9
   1dd6d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1057

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1dd70:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dd73:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1dd76:	25 ff 01 00 00       	and    eax,0x1ff
   1dd7b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059

    while (bytesRead < count)
   1dd7e:	e9 34 01 00 00       	jmp    1deb7 <fl_fread+0x205>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
   1dd83:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1dd87:	75 63                	jne    1ddec <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1062 (discriminator 1)
   1dd89:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dd8c:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1dd8f:	3d ff 01 00 00       	cmp    eax,0x1ff
   1dd94:	7e 56                	jle    1ddec <fl_fread+0x13a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1065
        {
            // Read as many sectors as possible into target buffer
            uint32 sectorsRead = _read_sectors(file, sector, (uint8*)((uint8*)buffer + bytesRead), (count - bytesRead) / FAT_SECTOR_SIZE);
   1dd96:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1dd99:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1dd9c:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1dda2:	85 c0                	test   eax,eax
   1dda4:	0f 48 c2             	cmovs  eax,edx
   1dda7:	c1 f8 09             	sar    eax,0x9
   1ddaa:	89 c1                	mov    ecx,eax
   1ddac:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   1ddaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ddb2:	01 d0                	add    eax,edx
   1ddb4:	51                   	push   ecx
   1ddb5:	50                   	push   eax
   1ddb6:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1ddb9:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1ddbc:	e8 63 f6 ff ff       	call   1d424 <_read_sectors>
   1ddc1:	83 c4 10             	add    esp,0x10
   1ddc4:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1066
            if (sectorsRead)
   1ddc7:	83 7d dc 00          	cmp    DWORD PTR [ebp-0x24],0x0
   1ddcb:	0f 84 f4 00 00 00    	je     1dec5 <fl_fread+0x213>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1069
            {
                // We have upto one sector to copy
                copyCount = FAT_SECTOR_SIZE * sectorsRead;
   1ddd1:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1ddd4:	c1 e0 09             	shl    eax,0x9
   1ddd7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1072

                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
   1ddda:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   1dddd:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1073
                offset = 0;
   1dde0:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1063

    while (bytesRead < count)
    {
        // Read whole sector, read from media directly into target buffer
        if ((offset == 0) && ((count - bytesRead) >= FAT_SECTOR_SIZE))
        {
   1dde7:	e9 b4 00 00 00       	jmp    1dea0 <fl_fread+0x1ee>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1081
                break;
        }
        else
        {
            // Do we need to re-read the sector?
            if (file->file_data_address != sector)
   1ddec:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1ddef:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1ddf5:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1ddf8:	74 55                	je     1de4f <fl_fread+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1084
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1ddfa:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1ddfd:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1de03:	85 c0                	test   eax,eax
   1de05:	74 0e                	je     1de15 <fl_fread+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1085
                    fl_fflush(file);
   1de07:	83 ec 0c             	sub    esp,0xc
   1de0a:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1de0d:	e8 7e fc ff ff       	call   1da90 <fl_fflush>
   1de12:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1088

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1de15:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1de18:	05 28 01 00 00       	add    eax,0x128
   1de1d:	6a 01                	push   0x1
   1de1f:	50                   	push   eax
   1de20:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1de23:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   1de26:	e8 f9 f5 ff ff       	call   1d424 <_read_sectors>
   1de2b:	83 c4 10             	add    esp,0x10
   1de2e:	85 c0                	test   eax,eax
   1de30:	0f 84 92 00 00 00    	je     1dec8 <fl_fread+0x216>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1092
                    // Read failed - out of range (probably)
                    break;

                file->file_data_address = sector;
   1de36:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1de39:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1de3c:	89 90 28 03 00 00    	mov    DWORD PTR [eax+0x328],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1093
                file->file_data_dirty = 0;
   1de42:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1de45:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1de4c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1097
            }

            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1de4f:	b8 00 02 00 00       	mov    eax,0x200
   1de54:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1de57:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1100

            // Only require some of this sector?
            if (copyCount > (count - bytesRead))
   1de5a:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1de5d:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1de60:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   1de63:	7d 09                	jge    1de6e <fl_fread+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1101
                copyCount = (count - bytesRead);
   1de65:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1de68:	2b 45 e4             	sub    eax,DWORD PTR [ebp-0x1c]
   1de6b:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1104

            // Copy to application buffer
            memcpy( (uint8*)((uint8*)buffer + bytesRead), (uint8*)(file->file_data_sector + offset), copyCount);
   1de6e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1de71:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   1de74:	8d 8a 28 01 00 00    	lea    ecx,[edx+0x128]
   1de7a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   1de7d:	01 d1                	add    ecx,edx
   1de7f:	8b 5d e4             	mov    ebx,DWORD PTR [ebp-0x1c]
   1de82:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1de85:	01 da                	add    edx,ebx
   1de87:	83 ec 04             	sub    esp,0x4
   1de8a:	50                   	push   eax
   1de8b:	51                   	push   ecx
   1de8c:	52                   	push   edx
   1de8d:	e8 da 7f 00 00       	call   25e6c <memcpy>
   1de92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1107

            // Move onto next sector and reset copy offset
            sector++;
   1de95:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1108
            offset = 0;
   1de99:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1112
        }

        // Increase total read count
        bytesRead += copyCount;
   1dea0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1dea3:	01 45 e4             	add    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1115

        // Increment file pointer
        file->bytenum += copyCount;
   1dea6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1dea9:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1deac:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1deaf:	01 c2                	add    edx,eax
   1deb1:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1deb4:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1059
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesRead < count)
   1deb7:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1deba:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1debd:	0f 8c c0 fe ff ff    	jl     1dd83 <fl_fread+0xd1>
   1dec3:	eb 04                	jmp    1dec9 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1076
                // Move onto next sector and reset copy offset
                sector+= sectorsRead;
                offset = 0;
            }
            else
                break;
   1dec5:	90                   	nop
   1dec6:	eb 01                	jmp    1dec9 <fl_fread+0x217>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1090
                    fl_fflush(file);

                // Get LBA of sector offset within file
                if (!_read_sectors(file, sector, file->file_data_sector, 1))
                    // Read failed - out of range (probably)
                    break;
   1dec8:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1118

        // Increment file pointer
        file->bytenum += copyCount;
    }

    return bytesRead;
   1dec9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1119
}
   1decc:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1decf:	c9                   	leave  
   1ded0:	c3                   	ret    

0001ded1 <fl_fseek>:
fl_fseek():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1124
//-----------------------------------------------------------------------------
// fl_fseek: Seek to a specific place in the file
//-----------------------------------------------------------------------------
int fl_fseek( void *f, long offset, int origin )
{
   1ded1:	55                   	push   ebp
   1ded2:	89 e5                	mov    ebp,esp
   1ded4:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1125
    FL_FILE *file = (FL_FILE *)f;
   1ded7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1deda:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1126
    int res = -1;
   1dedd:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129

    // If first call to library, initialise
    CHECK_FL_INIT();
   1dee4:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1dee9:	85 c0                	test   eax,eax
   1deeb:	75 05                	jne    1def2 <fl_fseek+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1129 (discriminator 1)
   1deed:	e8 cc f6 ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1131

    if (!file)
   1def2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1def6:	75 0a                	jne    1df02 <fl_fseek+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1132
        return -1;
   1def8:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1defd:	e9 1d 01 00 00       	jmp    1e01f <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134

    if (origin == SEEK_END && offset != 0)
   1df02:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1df06:	75 10                	jne    1df18 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1134 (discriminator 1)
   1df08:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1df0c:	74 0a                	je     1df18 <fl_fseek+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1135
        return -1;
   1df0e:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1df13:	e9 07 01 00 00       	jmp    1e01f <fl_fseek+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137

    FL_LOCK(&_fs);
   1df18:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1df1d:	85 c0                	test   eax,eax
   1df1f:	74 07                	je     1df28 <fl_fseek+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1137 (discriminator 1)
   1df21:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1df26:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1140

    // Invalidate file buffer
    file->file_data_address = 0xFFFFFFFF;
   1df28:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df2b:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1df32:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1141
    file->file_data_dirty = 0;
   1df35:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df38:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1df3f:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1143

    if (origin == SEEK_SET)
   1df42:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   1df46:	75 31                	jne    1df79 <fl_fseek+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1145
    {
        file->bytenum = (uint32)offset;
   1df48:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1df4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df4e:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1147

        if (file->bytenum > file->filelength)
   1df51:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df54:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1df57:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df5a:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1df5d:	39 c2                	cmp    edx,eax
   1df5f:	76 0c                	jbe    1df6d <fl_fseek+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1148
            file->bytenum = file->filelength;
   1df61:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df64:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1df67:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df6a:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1150

        res = 0;
   1df6d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1df74:	e9 93 00 00 00       	jmp    1e00c <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1152
    }
    else if (origin == SEEK_CUR)
   1df79:	83 7d 10 01          	cmp    DWORD PTR [ebp+0x10],0x1
   1df7d:	75 6b                	jne    1dfea <fl_fseek+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1155
    {
        // Positive shift
        if (offset >= 0)
   1df7f:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1df83:	78 2f                	js     1dfb4 <fl_fseek+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1157
        {
            file->bytenum += offset;
   1df85:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df88:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1df8b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1df8e:	01 c2                	add    edx,eax
   1df90:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df93:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1159

            if (file->bytenum > file->filelength)
   1df96:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df99:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1df9c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1df9f:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1dfa2:	39 c2                	cmp    edx,eax
   1dfa4:	76 3b                	jbe    1dfe1 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1160
                file->bytenum = file->filelength;
   1dfa6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dfa9:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dfac:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dfaf:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
   1dfb2:	eb 2d                	jmp    1dfe1 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1166
        }
        // Negative shift
        else
        {
            // Make shift positive
            offset = -offset;
   1dfb4:	f7 5d 0c             	neg    DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1169

            // Limit to negative shift to start of file
            if ((uint32)offset > file->bytenum)
   1dfb7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dfba:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dfbd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dfc0:	39 c2                	cmp    edx,eax
   1dfc2:	73 0c                	jae    1dfd0 <fl_fseek+0xff>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1170
                file->bytenum = 0;
   1dfc4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dfc7:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
   1dfce:	eb 11                	jmp    1dfe1 <fl_fseek+0x110>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1172
            else
                file->bytenum-= offset;
   1dfd0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dfd3:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1dfd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1dfd9:	29 c2                	sub    edx,eax
   1dfdb:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dfde:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1175
        }

        res = 0;
   1dfe1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1dfe8:	eb 22                	jmp    1e00c <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1177
    }
    else if (origin == SEEK_END)
   1dfea:	83 7d 10 02          	cmp    DWORD PTR [ebp+0x10],0x2
   1dfee:	75 15                	jne    1e005 <fl_fseek+0x134>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1179
    {
        file->bytenum = file->filelength;
   1dff0:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dff3:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1dff6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1dff9:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1180
        res = 0;
   1dffc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e003:	eb 07                	jmp    1e00c <fl_fseek+0x13b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1183
    }
    else
        res = -1;
   1e005:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185

    FL_UNLOCK(&_fs);
   1e00c:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e011:	85 c0                	test   eax,eax
   1e013:	74 07                	je     1e01c <fl_fseek+0x14b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1185 (discriminator 1)
   1e015:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e01a:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1187

    return res;
   1e01c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1188
}
   1e01f:	c9                   	leave  
   1e020:	c3                   	ret    

0001e021 <fl_fgetpos>:
fl_fgetpos():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1193
//-----------------------------------------------------------------------------
// fl_fgetpos: Get the current file position
//-----------------------------------------------------------------------------
int fl_fgetpos(void *f , uint32 * position)
{
   1e021:	55                   	push   ebp
   1e022:	89 e5                	mov    ebp,esp
   1e024:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1194
    FL_FILE *file = (FL_FILE *)f;
   1e027:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e02a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1196

    if (!file)
   1e02d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e031:	75 07                	jne    1e03a <fl_fgetpos+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1197
        return -1;
   1e033:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e038:	eb 30                	jmp    1e06a <fl_fgetpos+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199

    FL_LOCK(&_fs);
   1e03a:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e03f:	85 c0                	test   eax,eax
   1e041:	74 07                	je     1e04a <fl_fgetpos+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1199 (discriminator 1)
   1e043:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e048:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1202

    // Get position
    *position = file->bytenum;
   1e04a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e04d:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e050:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e053:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204

    FL_UNLOCK(&_fs);
   1e055:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e05a:	85 c0                	test   eax,eax
   1e05c:	74 07                	je     1e065 <fl_fgetpos+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1204 (discriminator 1)
   1e05e:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e063:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1206

    return 0;
   1e065:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1207
}
   1e06a:	c9                   	leave  
   1e06b:	c3                   	ret    

0001e06c <fl_ftell>:
fl_ftell():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1212
//-----------------------------------------------------------------------------
// fl_ftell: Get the current file position
//-----------------------------------------------------------------------------
long fl_ftell(void *f)
{
   1e06c:	55                   	push   ebp
   1e06d:	89 e5                	mov    ebp,esp
   1e06f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1213
    uint32 pos = 0;
   1e072:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1215

    fl_fgetpos(f, &pos);
   1e079:	83 ec 08             	sub    esp,0x8
   1e07c:	8d 45 f4             	lea    eax,[ebp-0xc]
   1e07f:	50                   	push   eax
   1e080:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e083:	e8 99 ff ff ff       	call   1e021 <fl_fgetpos>
   1e088:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1217

    return (long)pos;
   1e08b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1218
}
   1e08e:	c9                   	leave  
   1e08f:	c3                   	ret    

0001e090 <fl_feof>:
fl_feof():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1223
//-----------------------------------------------------------------------------
// fl_feof: Is the file pointer at the end of the stream?
//-----------------------------------------------------------------------------
int fl_feof(void *f)
{
   1e090:	55                   	push   ebp
   1e091:	89 e5                	mov    ebp,esp
   1e093:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1224
    FL_FILE *file = (FL_FILE *)f;
   1e096:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e099:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1227
    int res;

    if (!file)
   1e09c:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e0a0:	75 07                	jne    1e0a9 <fl_feof+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1228
        return -1;
   1e0a2:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e0a7:	eb 43                	jmp    1e0ec <fl_feof+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230

    FL_LOCK(&_fs);
   1e0a9:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e0ae:	85 c0                	test   eax,eax
   1e0b0:	74 07                	je     1e0b9 <fl_feof+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1230 (discriminator 1)
   1e0b2:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e0b7:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1232

    if (file->bytenum == file->filelength)
   1e0b9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e0bc:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e0bf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e0c2:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e0c5:	39 c2                	cmp    edx,eax
   1e0c7:	75 09                	jne    1e0d2 <fl_feof+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1233
        res = EOF;
   1e0c9:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
   1e0d0:	eb 07                	jmp    1e0d9 <fl_feof+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1235
    else
        res = 0;
   1e0d2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237

    FL_UNLOCK(&_fs);
   1e0d9:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e0de:	85 c0                	test   eax,eax
   1e0e0:	74 07                	je     1e0e9 <fl_feof+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1237 (discriminator 1)
   1e0e2:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e0e7:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1239

    return res;
   1e0e9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1240
}
   1e0ec:	c9                   	leave  
   1e0ed:	c3                   	ret    

0001e0ee <fl_fputc>:
fl_fputc():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1246
//-----------------------------------------------------------------------------
// fl_fputc: Write a character to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputc(int c, void *f)
{
   1e0ee:	55                   	push   ebp
   1e0ef:	89 e5                	mov    ebp,esp
   1e0f1:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1247
    uint8 data = (uint8)c;
   1e0f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e0f7:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1250
    int res;

    res = fl_fwrite(&data, 1, 1, f);
   1e0fa:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e0fd:	6a 01                	push   0x1
   1e0ff:	6a 01                	push   0x1
   1e101:	8d 45 f3             	lea    eax,[ebp-0xd]
   1e104:	50                   	push   eax
   1e105:	e8 16 00 00 00       	call   1e120 <fl_fwrite>
   1e10a:	83 c4 10             	add    esp,0x10
   1e10d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1251
    if (res == 1)
   1e110:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   1e114:	75 05                	jne    1e11b <fl_fputc+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1252
        return c;
   1e116:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e119:	eb 03                	jmp    1e11e <fl_fputc+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1254
    else
        return res;
   1e11b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1255 (discriminator 1)
}
   1e11e:	c9                   	leave  
   1e11f:	c3                   	ret    

0001e120 <fl_fwrite>:
fl_fwrite():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1262
//-----------------------------------------------------------------------------
// fl_fwrite: Write a block of data to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fwrite(const void * data, int size, int count, void *f )
{
   1e120:	55                   	push   ebp
   1e121:	89 e5                	mov    ebp,esp
   1e123:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1263
    FL_FILE *file = (FL_FILE *)f;
   1e126:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1e129:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1266
    uint32 sector;
    uint32 offset;
    uint32 length = (size*count);
   1e12c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e12f:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
   1e133:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1267
    uint8 *buffer = (uint8 *)data;
   1e136:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e139:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1268
    uint32 bytesWritten = 0;
   1e13c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272
    uint32 copyCount;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e143:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1e148:	85 c0                	test   eax,eax
   1e14a:	75 05                	jne    1e151 <fl_fwrite+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1272 (discriminator 1)
   1e14c:	e8 6d f4 ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1274

    if (!file)
   1e151:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   1e155:	75 0a                	jne    1e161 <fl_fwrite+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1275
        return -1;
   1e157:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e15c:	e9 8a 02 00 00       	jmp    1e3eb <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277

    FL_LOCK(&_fs);
   1e161:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e166:	85 c0                	test   eax,eax
   1e168:	74 07                	je     1e171 <fl_fwrite+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1277 (discriminator 1)
   1e16a:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e16f:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1280

    // No write permissions
    if (!(file->flags & FILE_WRITE))
   1e171:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e174:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1e17b:	0f b6 c0             	movzx  eax,al
   1e17e:	83 e0 02             	and    eax,0x2
   1e181:	85 c0                	test   eax,eax
   1e183:	75 1a                	jne    1e19f <fl_fwrite+0x7f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282
    {
        FL_UNLOCK(&_fs);
   1e185:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e18a:	85 c0                	test   eax,eax
   1e18c:	74 07                	je     1e195 <fl_fwrite+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1282 (discriminator 1)
   1e18e:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e193:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1283
        return -1;
   1e195:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1e19a:	e9 4c 02 00 00       	jmp    1e3eb <fl_fwrite+0x2cb>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1287
    }

    // Append writes to end of file
    if (file->flags & FILE_APPEND)
   1e19f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e1a2:	0f b6 80 30 03 00 00 	movzx  eax,BYTE PTR [eax+0x330]
   1e1a9:	0f b6 c0             	movzx  eax,al
   1e1ac:	83 e0 04             	and    eax,0x4
   1e1af:	85 c0                	test   eax,eax
   1e1b1:	74 0c                	je     1e1bf <fl_fwrite+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1288
        file->bytenum = file->filelength;
   1e1b3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e1b6:	8b 50 0c             	mov    edx,DWORD PTR [eax+0xc]
   1e1b9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e1bc:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1292
    // Else write to current position

    // Calculate start sector
    sector = file->bytenum / FAT_SECTOR_SIZE;
   1e1bf:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e1c2:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e1c5:	c1 e8 09             	shr    eax,0x9
   1e1c8:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1295

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;
   1e1cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e1ce:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1e1d1:	25 ff 01 00 00       	and    eax,0x1ff
   1e1d6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297

    while (bytesWritten < length)
   1e1d9:	e9 b7 01 00 00       	jmp    1e395 <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
   1e1de:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e1e2:	0f 85 b6 00 00 00    	jne    1e29e <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1300 (discriminator 1)
   1e1e8:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e1eb:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e1ee:	3d ff 01 00 00       	cmp    eax,0x1ff
   1e1f3:	0f 86 a5 00 00 00    	jbe    1e29e <fl_fwrite+0x17e>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1305
        {
            uint32 sectorsWrote;

            // Buffered sector, flush back to disk
            if (file->file_data_address != 0xFFFFFFFF)
   1e1f9:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e1fc:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1e202:	83 f8 ff             	cmp    eax,0xffffffff
   1e205:	74 35                	je     1e23c <fl_fwrite+0x11c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1308
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1e207:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e20a:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1e210:	85 c0                	test   eax,eax
   1e212:	74 0e                	je     1e222 <fl_fwrite+0x102>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1309
                    fl_fflush(file);
   1e214:	83 ec 0c             	sub    esp,0xc
   1e217:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e21a:	e8 71 f8 ff ff       	call   1da90 <fl_fflush>
   1e21f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1311

                file->file_data_address = 0xFFFFFFFF;
   1e222:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e225:	c7 80 28 03 00 00 ff 	mov    DWORD PTR [eax+0x328],0xffffffff
   1e22c:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1312
                file->file_data_dirty = 0;
   1e22f:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e232:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1e239:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1316
            }

            // Write as many sectors as possible
            sectorsWrote = _write_sectors(file, sector, (uint8*)(buffer + bytesWritten), (length - bytesWritten) / FAT_SECTOR_SIZE);
   1e23c:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e23f:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e242:	c1 e8 09             	shr    eax,0x9
   1e245:	89 c2                	mov    edx,eax
   1e247:	8b 4d dc             	mov    ecx,DWORD PTR [ebp-0x24]
   1e24a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e24d:	01 c8                	add    eax,ecx
   1e24f:	52                   	push   edx
   1e250:	50                   	push   eax
   1e251:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e254:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e257:	e8 42 f6 ff ff       	call   1d89e <_write_sectors>
   1e25c:	83 c4 10             	add    esp,0x10
   1e25f:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1317
            copyCount = FAT_SECTOR_SIZE * sectorsWrote;
   1e262:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e265:	c1 e0 09             	shl    eax,0x9
   1e268:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1320

            // Increase total read count
            bytesWritten += copyCount;
   1e26b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e26e:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1323

            // Increment file pointer
            file->bytenum += copyCount;
   1e271:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e274:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e277:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e27a:	01 c2                	add    edx,eax
   1e27c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e27f:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1326

            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
   1e282:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e285:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1327
            offset = 0;
   1e288:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1329

            if (!sectorsWrote)
   1e28f:	83 7d d8 00          	cmp    DWORD PTR [ebp-0x28],0x0
   1e293:	0f 84 0a 01 00 00    	je     1e3a3 <fl_fwrite+0x283>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1301

    while (bytesWritten < length)
    {
        // Whole sector or more to be written?
        if ((offset == 0) && ((length - bytesWritten) >= FAT_SECTOR_SIZE))
        {
   1e299:	e9 f7 00 00 00       	jmp    1e395 <fl_fwrite+0x275>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1335
                break;
        }
        else
        {
            // We have upto one sector to copy
            copyCount = FAT_SECTOR_SIZE - offset;
   1e29e:	b8 00 02 00 00       	mov    eax,0x200
   1e2a3:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   1e2a6:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1338

            // Only require some of this sector?
            if (copyCount > (length - bytesWritten))
   1e2a9:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e2ac:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e2af:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1e2b2:	73 09                	jae    1e2bd <fl_fwrite+0x19d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1339
                copyCount = (length - bytesWritten);
   1e2b4:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   1e2b7:	2b 45 ec             	sub    eax,DWORD PTR [ebp-0x14]
   1e2ba:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1342

            // Do we need to read a new sector?
            if (file->file_data_address != sector)
   1e2bd:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e2c0:	8b 80 28 03 00 00    	mov    eax,DWORD PTR [eax+0x328]
   1e2c6:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e2c9:	74 75                	je     1e340 <fl_fwrite+0x220>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1345
            {
                // Flush un-written data to file
                if (file->file_data_dirty)
   1e2cb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e2ce:	8b 80 2c 03 00 00    	mov    eax,DWORD PTR [eax+0x32c]
   1e2d4:	85 c0                	test   eax,eax
   1e2d6:	74 0e                	je     1e2e6 <fl_fwrite+0x1c6>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1346
                    fl_fflush(file);
   1e2d8:	83 ec 0c             	sub    esp,0xc
   1e2db:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e2de:	e8 ad f7 ff ff       	call   1da90 <fl_fflush>
   1e2e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1349

                // If we plan to overwrite the whole sector, we don't need to read it first!
                if (copyCount != FAT_SECTOR_SIZE)
   1e2e6:	81 7d e8 00 02 00 00 	cmp    DWORD PTR [ebp-0x18],0x200
   1e2ed:	74 38                	je     1e327 <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1356
                    // NOTE: This does not have succeed; if last sector of file
                    // reached, no valid data will be read in, but write will
                    // allocate some more space for new data.

                    // Get LBA of sector offset within file
                    if (!_read_sectors(file, sector, file->file_data_sector, 1))
   1e2ef:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e2f2:	05 28 01 00 00       	add    eax,0x128
   1e2f7:	6a 01                	push   0x1
   1e2f9:	50                   	push   eax
   1e2fa:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e2fd:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   1e300:	e8 1f f1 ff ff       	call   1d424 <_read_sectors>
   1e305:	83 c4 10             	add    esp,0x10
   1e308:	85 c0                	test   eax,eax
   1e30a:	75 1b                	jne    1e327 <fl_fwrite+0x207>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1357
                        memset(file->file_data_sector, 0x00, FAT_SECTOR_SIZE);
   1e30c:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e30f:	05 28 01 00 00       	add    eax,0x128
   1e314:	83 ec 04             	sub    esp,0x4
   1e317:	68 00 02 00 00       	push   0x200
   1e31c:	6a 00                	push   0x0
   1e31e:	50                   	push   eax
   1e31f:	e8 9d 70 00 00       	call   253c1 <memset>
   1e324:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1360
                }

                file->file_data_address = sector;
   1e327:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e32a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1e32d:	89 90 28 03 00 00    	mov    DWORD PTR [eax+0x328],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1361
                file->file_data_dirty = 0;
   1e333:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e336:	c7 80 2c 03 00 00 00 	mov    DWORD PTR [eax+0x32c],0x0
   1e33d:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1365
            }

            // Copy from application buffer into sector buffer
            memcpy((uint8*)(file->file_data_sector + offset), (uint8*)(buffer + bytesWritten), copyCount);
   1e340:	8b 55 dc             	mov    edx,DWORD PTR [ebp-0x24]
   1e343:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e346:	01 c2                	add    edx,eax
   1e348:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e34b:	8d 88 28 01 00 00    	lea    ecx,[eax+0x128]
   1e351:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e354:	01 c8                	add    eax,ecx
   1e356:	83 ec 04             	sub    esp,0x4
   1e359:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   1e35c:	52                   	push   edx
   1e35d:	50                   	push   eax
   1e35e:	e8 09 7b 00 00       	call   25e6c <memcpy>
   1e363:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1368

            // Mark buffer as dirty
            file->file_data_dirty = 1;
   1e366:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e369:	c7 80 2c 03 00 00 01 	mov    DWORD PTR [eax+0x32c],0x1
   1e370:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1371

            // Increase total read count
            bytesWritten += copyCount;
   1e373:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e376:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1374

            // Increment file pointer
            file->bytenum += copyCount;
   1e379:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e37c:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e37f:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   1e382:	01 c2                	add    edx,eax
   1e384:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e387:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1377

            // Move onto next sector and reset copy offset
            sector++;
   1e38a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1378
            offset = 0;
   1e38e:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1297
    sector = file->bytenum / FAT_SECTOR_SIZE;

    // Offset to start copying data from first sector
    offset = file->bytenum % FAT_SECTOR_SIZE;

    while (bytesWritten < length)
   1e395:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e398:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   1e39b:	0f 82 3d fe ff ff    	jb     1e1de <fl_fwrite+0xbe>
   1e3a1:	eb 01                	jmp    1e3a4 <fl_fwrite+0x284>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1330
            // Move onto next sector and reset copy offset
            sector+= sectorsWrote;
            offset = 0;

            if (!sectorsWrote)
                break;
   1e3a3:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1383
            offset = 0;
        }
    }

    // Write increased extent of the file?
    if (file->bytenum > file->filelength)
   1e3a4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3a7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e3aa:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3ad:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1e3b0:	39 c2                	cmp    edx,eax
   1e3b2:	76 16                	jbe    1e3ca <fl_fwrite+0x2aa>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1386
    {
        // Increase file size to new point
        file->filelength = file->bytenum;
   1e3b4:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3b7:	8b 50 08             	mov    edx,DWORD PTR [eax+0x8]
   1e3ba:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3bd:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1390

        // We are changing the file length and this
        // will need to be writen back at some point
        file->filelength_changed = 1;
   1e3c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3c3:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1396
    }

#if FATFS_INC_TIME_DATE_SUPPORT
    // If time & date support is enabled, always force directory entry to be
    // written in-order to update file modify / access time & date.
    file->filelength_changed = 1;
   1e3ca:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   1e3cd:	c7 40 10 01 00 00 00 	mov    DWORD PTR [eax+0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399
#endif

    FL_UNLOCK(&_fs);
   1e3d4:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e3d9:	85 c0                	test   eax,eax
   1e3db:	74 07                	je     1e3e4 <fl_fwrite+0x2c4>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1399 (discriminator 1)
   1e3dd:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e3e2:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1401

    return (size*count);
   1e3e4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e3e7:	0f af 45 10          	imul   eax,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1402
}
   1e3eb:	c9                   	leave  
   1e3ec:	c3                   	ret    

0001e3ed <fl_fputs>:
fl_fputs():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1409
//-----------------------------------------------------------------------------
// fl_fputs: Write a character string to the stream
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_fputs(const char * str, void *f)
{
   1e3ed:	55                   	push   ebp
   1e3ee:	89 e5                	mov    ebp,esp
   1e3f0:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1410
    int len = (int)strlen(str);
   1e3f3:	83 ec 0c             	sub    esp,0xc
   1e3f6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e3f9:	e8 da 92 00 00       	call   276d8 <strlen>
   1e3fe:	83 c4 10             	add    esp,0x10
   1e401:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1411
    int res = fl_fwrite(str, 1, len, f);
   1e404:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e407:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   1e40a:	6a 01                	push   0x1
   1e40c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e40f:	e8 0c fd ff ff       	call   1e120 <fl_fwrite>
   1e414:	83 c4 10             	add    esp,0x10
   1e417:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1413

    if (res == len)
   1e41a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e41d:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1e420:	75 05                	jne    1e427 <fl_fputs+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1414
        return len;
   1e422:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e425:	eb 03                	jmp    1e42a <fl_fputs+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1416
    else
        return res;
   1e427:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1417
}
   1e42a:	c9                   	leave  
   1e42b:	c3                   	ret    

0001e42c <fl_remove>:
fl_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1424
//-----------------------------------------------------------------------------
// fl_remove: Remove a file from the filesystem
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_remove( const char * filename )
{
   1e42c:	55                   	push   ebp
   1e42d:	89 e5                	mov    ebp,esp
   1e42f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1426
    FL_FILE* file;
    int res = -1;
   1e432:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428

    FL_LOCK(&_fs);
   1e439:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e43e:	85 c0                	test   eax,eax
   1e440:	74 07                	je     1e449 <fl_remove+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1428 (discriminator 1)
   1e442:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e447:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1431

    // Use read_file as this will check if the file is already open!
    file = fl_fopen((char*)filename, "r");
   1e449:	83 ec 08             	sub    esp,0x8
   1e44c:	68 d0 3a 08 00       	push   0x83ad0
   1e451:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e454:	e8 8c f2 ff ff       	call   1d6e5 <fl_fopen>
   1e459:	83 c4 10             	add    esp,0x10
   1e45c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1432
    if (file)
   1e45f:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e463:	74 54                	je     1e4b9 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1435
    {
        // Delete allocated space
        if (fatfs_free_cluster_chain(&_fs, file->startcluster))
   1e465:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e468:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   1e46b:	83 ec 08             	sub    esp,0x8
   1e46e:	50                   	push   eax
   1e46f:	68 00 41 12 00       	push   0x124100
   1e474:	e8 0d 2a 00 00       	call   20e86 <fatfs_free_cluster_chain>
   1e479:	83 c4 10             	add    esp,0x10
   1e47c:	85 c0                	test   eax,eax
   1e47e:	74 39                	je     1e4b9 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1438
        {
            // Remove directory entries
            if (fatfs_mark_file_deleted(&_fs, file->parentcluster, (char*)file->shortfilename))
   1e480:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e483:	8d 90 14 01 00 00    	lea    edx,[eax+0x114]
   1e489:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1e48c:	8b 00                	mov    eax,DWORD PTR [eax]
   1e48e:	83 ec 04             	sub    esp,0x4
   1e491:	52                   	push   edx
   1e492:	50                   	push   eax
   1e493:	68 00 41 12 00       	push   0x124100
   1e498:	e8 f0 da ff ff       	call   1bf8d <fatfs_mark_file_deleted>
   1e49d:	83 c4 10             	add    esp,0x10
   1e4a0:	85 c0                	test   eax,eax
   1e4a2:	74 15                	je     1e4b9 <fl_remove+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1442
            {
                // Close the file handle (this should not write anything to the file
                // as we have not changed the file since opening it!)
                fl_fclose(file);
   1e4a4:	83 ec 0c             	sub    esp,0xc
   1e4a7:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   1e4aa:	e8 67 f6 ff ff       	call   1db16 <fl_fclose>
   1e4af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1444

                res = 0;
   1e4b2:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449
            }
        }
    }

    FL_UNLOCK(&_fs);
   1e4b9:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e4be:	85 c0                	test   eax,eax
   1e4c0:	74 07                	je     1e4c9 <fl_remove+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1449 (discriminator 1)
   1e4c2:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e4c7:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1451

    return res;
   1e4c9:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1452
}
   1e4cc:	c9                   	leave  
   1e4cd:	c3                   	ret    

0001e4ce <fl_createdirectory>:
fl_createdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1459
//-----------------------------------------------------------------------------
// fl_createdirectory: Create a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fl_createdirectory(const char *path)
{
   1e4ce:	55                   	push   ebp
   1e4cf:	89 e5                	mov    ebp,esp
   1e4d1:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463
    int res;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e4d4:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1e4d9:	85 c0                	test   eax,eax
   1e4db:	75 05                	jne    1e4e2 <fl_createdirectory+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1463 (discriminator 1)
   1e4dd:	e8 dc f0 ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465

    FL_LOCK(&_fs);
   1e4e2:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e4e7:	85 c0                	test   eax,eax
   1e4e9:	74 07                	je     1e4f2 <fl_createdirectory+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1465 (discriminator 1)
   1e4eb:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e4f0:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1466
    res =_create_directory((char*)path);
   1e4f2:	83 ec 0c             	sub    esp,0xc
   1e4f5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e4f8:	e8 ec e5 ff ff       	call   1cae9 <_create_directory>
   1e4fd:	83 c4 10             	add    esp,0x10
   1e500:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467
    FL_UNLOCK(&_fs);
   1e503:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e508:	85 c0                	test   eax,eax
   1e50a:	74 07                	je     1e513 <fl_createdirectory+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1467 (discriminator 1)
   1e50c:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e511:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1469

    return res;
   1e513:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1470
}
   1e516:	c9                   	leave  
   1e517:	c3                   	ret    

0001e518 <fl_listdirectory>:
fl_listdirectory():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1477
//-----------------------------------------------------------------------------
// fl_listdirectory: List a directory based on a path
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
void fl_listdirectory(const char *path)
{
   1e518:	55                   	push   ebp
   1e519:	89 e5                	mov    ebp,esp
   1e51b:	56                   	push   esi
   1e51c:	53                   	push   ebx
   1e51d:	81 ec c0 00 00 00    	sub    esp,0xc0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481
    FL_DIR dirstat;

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e523:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1e528:	85 c0                	test   eax,eax
   1e52a:	75 05                	jne    1e531 <fl_listdirectory+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1481 (discriminator 1)
   1e52c:	e8 8d f0 ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1483

    FAT_PRINTF(("\r\nDirectory %s\r\n", path));
   1e531:	83 ec 08             	sub    esp,0x8
   1e534:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e537:	68 d2 3a 08 00       	push   0x83ad2
   1e53c:	e8 c6 8f 00 00       	call   27507 <printk>
   1e541:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484
        FL_LOCK(&_fs);
   1e544:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e549:	85 c0                	test   eax,eax
   1e54b:	74 07                	je     1e554 <fl_listdirectory+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1484 (discriminator 1)
   1e54d:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e552:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1487


        if (fl_opendir(path, &dirstat))
   1e554:	83 ec 08             	sub    esp,0x8
   1e557:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e55a:	50                   	push   eax
   1e55b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e55e:	e8 ed 00 00 00       	call   1e650 <fl_opendir>
   1e563:	83 c4 10             	add    esp,0x10
   1e566:	85 c0                	test   eax,eax
   1e568:	0f 84 ca 00 00 00    	je     1e638 <fl_listdirectory+0x120>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e56e:	e9 98 00 00 00       	jmp    1e60b <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1495
        {
#if FATFS_INC_TIME_DATE_SUPPORT
            int d,m,y,h,mn,s;
            fatfs_convert_from_fat_time(dirent.write_time, &h,&m,&s);
   1e573:	0f b7 45 ca          	movzx  eax,WORD PTR [ebp-0x36]
   1e577:	0f b7 c0             	movzx  eax,ax
   1e57a:	8d 55 d4             	lea    edx,[ebp-0x2c]
   1e57d:	52                   	push   edx
   1e57e:	8d 55 e4             	lea    edx,[ebp-0x1c]
   1e581:	52                   	push   edx
   1e582:	8d 55 dc             	lea    edx,[ebp-0x24]
   1e585:	52                   	push   edx
   1e586:	50                   	push   eax
   1e587:	e8 07 18 00 00       	call   1fd93 <fatfs_convert_from_fat_time>
   1e58c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1496
            fatfs_convert_from_fat_date(dirent.write_date, &d,&mn,&y);
   1e58f:	0f b7 45 cc          	movzx  eax,WORD PTR [ebp-0x34]
   1e593:	0f b7 c0             	movzx  eax,ax
   1e596:	8d 55 e0             	lea    edx,[ebp-0x20]
   1e599:	52                   	push   edx
   1e59a:	8d 55 d8             	lea    edx,[ebp-0x28]
   1e59d:	52                   	push   edx
   1e59e:	8d 55 e8             	lea    edx,[ebp-0x18]
   1e5a1:	52                   	push   edx
   1e5a2:	50                   	push   eax
   1e5a3:	e8 40 18 00 00       	call   1fde8 <fatfs_convert_from_fat_date>
   1e5a8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1497
            FAT_PRINTF(("%02d/%02d/%04d  %02d:%02d      ", mn,d,y,h,m));
   1e5ab:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   1e5ae:	8b 5d dc             	mov    ebx,DWORD PTR [ebp-0x24]
   1e5b1:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   1e5b4:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1e5b7:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   1e5ba:	83 ec 08             	sub    esp,0x8
   1e5bd:	56                   	push   esi
   1e5be:	53                   	push   ebx
   1e5bf:	51                   	push   ecx
   1e5c0:	52                   	push   edx
   1e5c1:	50                   	push   eax
   1e5c2:	68 e4 3a 08 00       	push   0x83ae4
   1e5c7:	e8 3b 8f 00 00       	call   27507 <printk>
   1e5cc:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1500
#endif

            if (dirent.is_dir)
   1e5cf:	0f b6 45 bc          	movzx  eax,BYTE PTR [ebp-0x44]
   1e5d3:	84 c0                	test   al,al
   1e5d5:	74 19                	je     1e5f0 <fl_listdirectory+0xd8>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1502
            {
                FAT_PRINTF(("%s <DIR>\r\n", dirent.filename));
   1e5d7:	83 ec 08             	sub    esp,0x8
   1e5da:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e5e0:	50                   	push   eax
   1e5e1:	68 04 3b 08 00       	push   0x83b04
   1e5e6:	e8 1c 8f 00 00       	call   27507 <printk>
   1e5eb:	83 c4 10             	add    esp,0x10
   1e5ee:	eb 1b                	jmp    1e60b <fl_listdirectory+0xf3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1506
            }
            else
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
   1e5f0:	8b 45 c4             	mov    eax,DWORD PTR [ebp-0x3c]
   1e5f3:	83 ec 04             	sub    esp,0x4
   1e5f6:	50                   	push   eax
   1e5f7:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e5fd:	50                   	push   eax
   1e5fe:	68 0f 3b 08 00       	push   0x83b0f
   1e603:	e8 ff 8e 00 00       	call   27507 <printk>
   1e608:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1491

        if (fl_opendir(path, &dirstat))
    {
        struct fs_dir_ent dirent;

        while (fl_readdir(&dirstat, &dirent) == 0)
   1e60b:	83 ec 08             	sub    esp,0x8
   1e60e:	8d 85 3c ff ff ff    	lea    eax,[ebp-0xc4]
   1e614:	50                   	push   eax
   1e615:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e618:	50                   	push   eax
   1e619:	e8 e9 00 00 00       	call   1e707 <fl_readdir>
   1e61e:	83 c4 10             	add    esp,0x10
   1e621:	85 c0                	test   eax,eax
   1e623:	0f 84 4a ff ff ff    	je     1e573 <fl_listdirectory+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1510
            {
                FAT_PRINTF(("%s [%d bytes]\r\n", dirent.filename, dirent.size));
            }
        }

        fl_closedir(&dirstat);
   1e629:	83 ec 0c             	sub    esp,0xc
   1e62c:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e62f:	50                   	push   eax
   1e630:	e8 3a 01 00 00       	call   1e76f <fl_closedir>
   1e635:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513
    }

    FL_UNLOCK(&_fs);
   1e638:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e63d:	85 c0                	test   eax,eax
   1e63f:	74 07                	je     1e648 <fl_listdirectory+0x130>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1513 (discriminator 1)
   1e641:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e646:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1514
}
   1e648:	90                   	nop
   1e649:	8d 65 f8             	lea    esp,[ebp-0x8]
   1e64c:	5b                   	pop    ebx
   1e64d:	5e                   	pop    esi
   1e64e:	5d                   	pop    ebp
   1e64f:	c3                   	ret    

0001e650 <fl_opendir>:
fl_opendir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1521
//-----------------------------------------------------------------------------
// fl_opendir: Opens a directory for listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
FL_DIR* fl_opendir(const char* path, FL_DIR *dir)
{
   1e650:	55                   	push   ebp
   1e651:	89 e5                	mov    ebp,esp
   1e653:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1523
    int levels;
    int res = 1;
   1e656:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1524
    uint32 cluster = FAT32_INVALID_CLUSTER;
   1e65d:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e664:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1e669:	85 c0                	test   eax,eax
   1e66b:	75 05                	jne    1e672 <fl_opendir+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1527 (discriminator 1)
   1e66d:	e8 4c ef ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529

    FL_LOCK(&_fs);
   1e672:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e677:	85 c0                	test   eax,eax
   1e679:	74 07                	je     1e682 <fl_opendir+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1529 (discriminator 1)
   1e67b:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e680:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1531

    levels = fatfs_total_path_levels((char*)path) + 1;
   1e682:	83 ec 0c             	sub    esp,0xc
   1e685:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e688:	e8 5b 18 00 00       	call   1fee8 <fatfs_total_path_levels>
   1e68d:	83 c4 10             	add    esp,0x10
   1e690:	83 c0 01             	add    eax,0x1
   1e693:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1534

    // If path is in the root dir
    if (levels == 0)
   1e696:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   1e69a:	75 15                	jne    1e6b1 <fl_opendir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1535
        cluster = fatfs_get_root_cluster(&_fs);
   1e69c:	83 ec 0c             	sub    esp,0xc
   1e69f:	68 00 41 12 00       	push   0x124100
   1e6a4:	e8 18 d3 ff ff       	call   1b9c1 <fatfs_get_root_cluster>
   1e6a9:	83 c4 10             	add    esp,0x10
   1e6ac:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   1e6af:	eb 15                	jmp    1e6c6 <fl_opendir+0x76>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1538
    // Find parent directory start cluster
    else
        res = _open_directory((char*)path, &cluster);
   1e6b1:	83 ec 08             	sub    esp,0x8
   1e6b4:	8d 45 ec             	lea    eax,[ebp-0x14]
   1e6b7:	50                   	push   eax
   1e6b8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e6bb:	e8 3f e3 ff ff       	call   1c9ff <_open_directory>
   1e6c0:	83 c4 10             	add    esp,0x10
   1e6c3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1540

    if (res)
   1e6c6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e6ca:	74 17                	je     1e6e3 <fl_opendir+0x93>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1541
        fatfs_list_directory_start(&_fs, dir, cluster);
   1e6cc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e6cf:	83 ec 04             	sub    esp,0x4
   1e6d2:	50                   	push   eax
   1e6d3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e6d6:	68 00 41 12 00       	push   0x124100
   1e6db:	e8 eb d9 ff ff       	call   1c0cb <fatfs_list_directory_start>
   1e6e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543

    FL_UNLOCK(&_fs);
   1e6e3:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e6e8:	85 c0                	test   eax,eax
   1e6ea:	74 07                	je     1e6f3 <fl_opendir+0xa3>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1543 (discriminator 1)
   1e6ec:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e6f1:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545

    return cluster != FAT32_INVALID_CLUSTER ? dir : 0;
   1e6f3:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1e6f6:	83 f8 ff             	cmp    eax,0xffffffff
   1e6f9:	74 05                	je     1e700 <fl_opendir+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 1)
   1e6fb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1e6fe:	eb 05                	jmp    1e705 <fl_opendir+0xb5>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1545 (discriminator 2)
   1e700:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1546
}
   1e705:	c9                   	leave  
   1e706:	c3                   	ret    

0001e707 <fl_readdir>:
fl_readdir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1553
//-----------------------------------------------------------------------------
// fl_readdir: Get next item in directory
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_readdir(FL_DIR *dirls, fl_dirent *entry)
{
   1e707:	55                   	push   ebp
   1e708:	89 e5                	mov    ebp,esp
   1e70a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1554
    int res = 0;
   1e70d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557

    // If first call to library, initialise
    CHECK_FL_INIT();
   1e714:	a1 f0 40 12 00       	mov    eax,ds:0x1240f0
   1e719:	85 c0                	test   eax,eax
   1e71b:	75 05                	jne    1e722 <fl_readdir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1557 (discriminator 1)
   1e71d:	e8 9c ee ff ff       	call   1d5be <fl_init>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559

    FL_LOCK(&_fs);
   1e722:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e727:	85 c0                	test   eax,eax
   1e729:	74 07                	je     1e732 <fl_readdir+0x2b>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1559 (discriminator 1)
   1e72b:	a1 3c 41 12 00       	mov    eax,ds:0x12413c
   1e730:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1561

    res = fatfs_list_directory_next(&_fs, dirls, entry);
   1e732:	83 ec 04             	sub    esp,0x4
   1e735:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e738:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e73b:	68 00 41 12 00       	push   0x124100
   1e740:	e8 a5 d9 ff ff       	call   1c0ea <fatfs_list_directory_next>
   1e745:	83 c4 10             	add    esp,0x10
   1e748:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563

    FL_UNLOCK(&_fs);
   1e74b:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e750:	85 c0                	test   eax,eax
   1e752:	74 07                	je     1e75b <fl_readdir+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1563 (discriminator 1)
   1e754:	a1 40 41 12 00       	mov    eax,ds:0x124140
   1e759:	ff d0                	call   eax
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565

    return res ? 0 : -1;
   1e75b:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1e75f:	74 07                	je     1e768 <fl_readdir+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 1)
   1e761:	b8 00 00 00 00       	mov    eax,0x0
   1e766:	eb 05                	jmp    1e76d <fl_readdir+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1565 (discriminator 2)
   1e768:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1566 (discriminator 5)
}
   1e76d:	c9                   	leave  
   1e76e:	c3                   	ret    

0001e76f <fl_closedir>:
fl_closedir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1573
//-----------------------------------------------------------------------------
// fl_closedir: Close directory after listing
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_closedir(FL_DIR* dir)
{
   1e76f:	55                   	push   ebp
   1e770:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1575
    // Not used
    return 0;
   1e772:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1576
}
   1e777:	5d                   	pop    ebp
   1e778:	c3                   	ret    

0001e779 <fl_is_dir>:
fl_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1583
//-----------------------------------------------------------------------------
// fl_is_dir: Is this a directory?
//-----------------------------------------------------------------------------
#if FATFS_DIR_LIST_SUPPORT
int fl_is_dir(const char *path)
{
   1e779:	55                   	push   ebp
   1e77a:	89 e5                	mov    ebp,esp
   1e77c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1584
    int res = 0;
   1e77f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1587
    FL_DIR dir;

    if (fl_opendir(path, &dir))
   1e786:	83 ec 08             	sub    esp,0x8
   1e789:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e78c:	50                   	push   eax
   1e78d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e790:	e8 bb fe ff ff       	call   1e650 <fl_opendir>
   1e795:	83 c4 10             	add    esp,0x10
   1e798:	85 c0                	test   eax,eax
   1e79a:	74 16                	je     1e7b2 <fl_is_dir+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1589
    {
        res = 1;
   1e79c:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1590
        fl_closedir(&dir);
   1e7a3:	83 ec 0c             	sub    esp,0xc
   1e7a6:	8d 45 e8             	lea    eax,[ebp-0x18]
   1e7a9:	50                   	push   eax
   1e7aa:	e8 c0 ff ff ff       	call   1e76f <fl_closedir>
   1e7af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1593
    }

    return res;
   1e7b2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1594
}
   1e7b5:	c9                   	leave  
   1e7b6:	c3                   	ret    

0001e7b7 <fl_format>:
fl_format():
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1601
//-----------------------------------------------------------------------------
// fl_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
#if FATFS_INC_FORMAT_SUPPORT
int fl_format(uint32 volume_sectors, const char *name)
{
   1e7b7:	55                   	push   ebp
   1e7b8:	89 e5                	mov    ebp,esp
   1e7ba:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1602
    return fatfs_format(&_fs, volume_sectors, name);
   1e7bd:	83 ec 04             	sub    esp,0x4
   1e7c0:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1e7c3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1e7c6:	68 00 41 12 00       	push   0x124100
   1e7cb:	e8 8a 0b 00 00       	call   1f35a <fatfs_format>
   1e7d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_filelib.c:1603
}
   1e7d3:	c9                   	leave  
   1e7d4:	c3                   	ret    
   1e7d5:	66 90                	xchg   ax,ax
   1e7d7:	90                   	nop

0001e7d8 <fatfs_calc_cluster_size>:
fatfs_calc_cluster_size():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:78

//-----------------------------------------------------------------------------
// fatfs_calc_cluster_size: Calculate what cluster size should be used
//-----------------------------------------------------------------------------
static uint8 fatfs_calc_cluster_size(uint32 sectors, int is_fat32)
{
   1e7d8:	55                   	push   ebp
   1e7d9:	89 e5                	mov    ebp,esp
   1e7db:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:81
    int i;

    if (!is_fat32)
   1e7de:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1e7e2:	75 3a                	jne    1e81e <fatfs_calc_cluster_size+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1e7e4:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1e7eb:	eb 20                	jmp    1e80d <fatfs_calc_cluster_size+0x35>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:84
            if (sectors <= _cluster_size_table16[i].sectors)
   1e7ed:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e7f0:	8b 04 c5 60 dd 02 00 	mov    eax,DWORD PTR [eax*8+0x2dd60]
   1e7f7:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1e7fa:	72 0d                	jb     1e809 <fatfs_calc_cluster_size+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:85
                return _cluster_size_table16[i].sectors_per_cluster;
   1e7fc:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e7ff:	0f b6 04 c5 64 dd 02 	movzx  eax,BYTE PTR [eax*8+0x2dd64]
   1e806:	00 
   1e807:	eb 52                	jmp    1e85b <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 2)
{
    int i;

    if (!is_fat32)
    {
        for (i=0; _cluster_size_table16[i].sectors_per_cluster != 0;i++)
   1e809:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:83 (discriminator 1)
   1e80d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e810:	0f b6 04 c5 64 dd 02 	movzx  eax,BYTE PTR [eax*8+0x2dd64]
   1e817:	00 
   1e818:	84 c0                	test   al,al
   1e81a:	75 d1                	jne    1e7ed <fatfs_calc_cluster_size+0x15>
   1e81c:	eb 38                	jmp    1e856 <fatfs_calc_cluster_size+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1e81e:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1e825:	eb 20                	jmp    1e847 <fatfs_calc_cluster_size+0x6f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:90
            if (sectors <= _cluster_size_table32[i].sectors)
   1e827:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e82a:	8b 04 c5 a0 dd 02 00 	mov    eax,DWORD PTR [eax*8+0x2dda0]
   1e831:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   1e834:	72 0d                	jb     1e843 <fatfs_calc_cluster_size+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:91
                return _cluster_size_table32[i].sectors_per_cluster;
   1e836:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e839:	0f b6 04 c5 a4 dd 02 	movzx  eax,BYTE PTR [eax*8+0x2dda4]
   1e840:	00 
   1e841:	eb 18                	jmp    1e85b <fatfs_calc_cluster_size+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 2)
            if (sectors <= _cluster_size_table16[i].sectors)
                return _cluster_size_table16[i].sectors_per_cluster;
    }
    else
    {
        for (i=0; _cluster_size_table32[i].sectors_per_cluster != 0;i++)
   1e843:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:89 (discriminator 1)
   1e847:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1e84a:	0f b6 04 c5 a4 dd 02 	movzx  eax,BYTE PTR [eax*8+0x2dda4]
   1e851:	00 
   1e852:	84 c0                	test   al,al
   1e854:	75 d1                	jne    1e827 <fatfs_calc_cluster_size+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:94
            if (sectors <= _cluster_size_table32[i].sectors)
                return _cluster_size_table32[i].sectors_per_cluster;
    }

    return 0;
   1e856:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:95
}
   1e85b:	c9                   	leave  
   1e85c:	c3                   	ret    

0001e85d <fatfs_erase_sectors>:
fatfs_erase_sectors():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:100
//-----------------------------------------------------------------------------
// fatfs_erase_sectors: Erase a number of sectors
//-----------------------------------------------------------------------------
static int fatfs_erase_sectors(struct fatfs *fs, uint32 lba, int count)
{
   1e85d:	55                   	push   ebp
   1e85e:	89 e5                	mov    ebp,esp
   1e860:	53                   	push   ebx
   1e861:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:104
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1e864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e867:	83 c0 44             	add    eax,0x44
   1e86a:	83 ec 04             	sub    esp,0x4
   1e86d:	68 00 02 00 00       	push   0x200
   1e872:	6a 00                	push   0x0
   1e874:	50                   	push   eax
   1e875:	e8 47 6b 00 00       	call   253c1 <memset>
   1e87a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106

    for (i=0;i<count;i++)
   1e87d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1e884:	eb 2f                	jmp    1e8b5 <fatfs_erase_sectors+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:107
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
   1e886:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e889:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1e88c:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1e88f:	8d 4a 44             	lea    ecx,[edx+0x44]
   1e892:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   1e895:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1e898:	01 da                	add    edx,ebx
   1e89a:	83 ec 04             	sub    esp,0x4
   1e89d:	6a 01                	push   0x1
   1e89f:	51                   	push   ecx
   1e8a0:	52                   	push   edx
   1e8a1:	ff d0                	call   eax
   1e8a3:	83 c4 10             	add    esp,0x10
   1e8a6:	85 c0                	test   eax,eax
   1e8a8:	75 07                	jne    1e8b1 <fatfs_erase_sectors+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:108
            return 0;
   1e8aa:	b8 00 00 00 00       	mov    eax,0x0
   1e8af:	eb 11                	jmp    1e8c2 <fatfs_erase_sectors+0x65>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 2)
    int i;

    // Zero sector first
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);

    for (i=0;i<count;i++)
   1e8b1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:106 (discriminator 1)
   1e8b5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1e8b8:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1e8bb:	7c c9                	jl     1e886 <fatfs_erase_sectors+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:110
        if (!fs->disk_io.write_media(lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1e8bd:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:111
}
   1e8c2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1e8c5:	c9                   	leave  
   1e8c6:	c3                   	ret    

0001e8c7 <fatfs_create_boot_sector>:
fatfs_create_boot_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:116
//-----------------------------------------------------------------------------
// fatfs_create_boot_sector: Create the boot sector
//-----------------------------------------------------------------------------
static int fatfs_create_boot_sector(struct fatfs *fs, uint32 boot_sector_lba, uint32 vol_sectors, const char *name, int is_fat32)
{
   1e8c7:	55                   	push   ebp
   1e8c8:	89 e5                	mov    ebp,esp
   1e8ca:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:121
    uint32 total_clusters;
    int i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1e8cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8d0:	83 c0 44             	add    eax,0x44
   1e8d3:	83 ec 04             	sub    esp,0x4
   1e8d6:	68 00 02 00 00       	push   0x200
   1e8db:	6a 00                	push   0x0
   1e8dd:	50                   	push   eax
   1e8de:	e8 de 6a 00 00       	call   253c1 <memset>
   1e8e3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:124

    // OEM Name & Jump Code
    fs->currentsector.sector[0] = 0xEB;
   1e8e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8e9:	c6 40 44 eb          	mov    BYTE PTR [eax+0x44],0xeb
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:125
    fs->currentsector.sector[1] = 0x3C;
   1e8ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8f0:	c6 40 45 3c          	mov    BYTE PTR [eax+0x45],0x3c
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:126
    fs->currentsector.sector[2] = 0x90;
   1e8f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8f7:	c6 40 46 90          	mov    BYTE PTR [eax+0x46],0x90
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:127
    fs->currentsector.sector[3] = 0x4D;
   1e8fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e8fe:	c6 40 47 4d          	mov    BYTE PTR [eax+0x47],0x4d
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:128
    fs->currentsector.sector[4] = 0x53;
   1e902:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e905:	c6 40 48 53          	mov    BYTE PTR [eax+0x48],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:129
    fs->currentsector.sector[5] = 0x44;
   1e909:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e90c:	c6 40 49 44          	mov    BYTE PTR [eax+0x49],0x44
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:130
    fs->currentsector.sector[6] = 0x4F;
   1e910:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e913:	c6 40 4a 4f          	mov    BYTE PTR [eax+0x4a],0x4f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:131
    fs->currentsector.sector[7] = 0x53;
   1e917:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e91a:	c6 40 4b 53          	mov    BYTE PTR [eax+0x4b],0x53
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:132
    fs->currentsector.sector[8] = 0x35;
   1e91e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e921:	c6 40 4c 35          	mov    BYTE PTR [eax+0x4c],0x35
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:133
    fs->currentsector.sector[9] = 0x2E;
   1e925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e928:	c6 40 4d 2e          	mov    BYTE PTR [eax+0x4d],0x2e
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:134
    fs->currentsector.sector[10] = 0x30;
   1e92c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e92f:	c6 40 4e 30          	mov    BYTE PTR [eax+0x4e],0x30
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:137

    // Bytes per sector
    fs->currentsector.sector[11] = (FAT_SECTOR_SIZE >> 0) & 0xFF;
   1e933:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e936:	c6 40 4f 00          	mov    BYTE PTR [eax+0x4f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:138
    fs->currentsector.sector[12] = (FAT_SECTOR_SIZE >> 8) & 0xFF;
   1e93a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e93d:	c6 40 50 02          	mov    BYTE PTR [eax+0x50],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:141

    // Get sectors per cluster size for the disk
    fs->sectors_per_cluster = fatfs_calc_cluster_size(vol_sectors, is_fat32);
   1e941:	83 ec 08             	sub    esp,0x8
   1e944:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   1e947:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1e94a:	e8 89 fe ff ff       	call   1e7d8 <fatfs_calc_cluster_size>
   1e94f:	83 c4 10             	add    esp,0x10
   1e952:	89 c2                	mov    edx,eax
   1e954:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e957:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:142
    if (!fs->sectors_per_cluster)
   1e959:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e95c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1e95f:	84 c0                	test   al,al
   1e961:	75 0a                	jne    1e96d <fatfs_create_boot_sector+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:143
        return 0; // Invalid disk size
   1e963:	b8 00 00 00 00       	mov    eax,0x0
   1e968:	e9 dc 04 00 00       	jmp    1ee49 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:146

    // Sectors per cluster
    fs->currentsector.sector[13] = fs->sectors_per_cluster;
   1e96d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e970:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   1e973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e976:	88 50 51             	mov    BYTE PTR [eax+0x51],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:149

    // Reserved Sectors
    if (!is_fat32)
   1e979:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e97d:	75 0b                	jne    1e98a <fatfs_create_boot_sector+0xc3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:150
        fs->reserved_sectors = 8;
   1e97f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e982:	66 c7 40 2a 08 00    	mov    WORD PTR [eax+0x2a],0x8
   1e988:	eb 09                	jmp    1e993 <fatfs_create_boot_sector+0xcc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:152
    else
        fs->reserved_sectors = 32;
   1e98a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e98d:	66 c7 40 2a 20 00    	mov    WORD PTR [eax+0x2a],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:153
    fs->currentsector.sector[14] = (fs->reserved_sectors >> 0) & 0xFF;
   1e993:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e996:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1e99a:	89 c2                	mov    edx,eax
   1e99c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e99f:	88 50 52             	mov    BYTE PTR [eax+0x52],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:154
    fs->currentsector.sector[15] = (fs->reserved_sectors >> 8) & 0xFF;
   1e9a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9a5:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1e9a9:	66 c1 e8 08          	shr    ax,0x8
   1e9ad:	89 c2                	mov    edx,eax
   1e9af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9b2:	88 50 53             	mov    BYTE PTR [eax+0x53],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:157

    // Number of FATS
    fs->num_of_fats = 2;
   1e9b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9b8:	c6 40 2c 02          	mov    BYTE PTR [eax+0x2c],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:158
    fs->currentsector.sector[16] = fs->num_of_fats;
   1e9bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9bf:	0f b6 50 2c          	movzx  edx,BYTE PTR [eax+0x2c]
   1e9c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9c6:	88 50 54             	mov    BYTE PTR [eax+0x54],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:161

    // Max entries in root dir (FAT16 only)
    if (!is_fat32)
   1e9c9:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1e9cd:	75 2d                	jne    1e9fc <fatfs_create_boot_sector+0x135>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:163
    {
        fs->root_entry_count = 512;
   1e9cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9d2:	66 c7 40 28 00 02    	mov    WORD PTR [eax+0x28],0x200
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:164
        fs->currentsector.sector[17] = (fs->root_entry_count >> 0) & 0xFF;
   1e9d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9db:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1e9df:	89 c2                	mov    edx,eax
   1e9e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9e4:	88 50 55             	mov    BYTE PTR [eax+0x55],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:165
        fs->currentsector.sector[18] = (fs->root_entry_count >> 8) & 0xFF;
   1e9e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9ea:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1e9ee:	66 c1 e8 08          	shr    ax,0x8
   1e9f2:	89 c2                	mov    edx,eax
   1e9f4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9f7:	88 50 56             	mov    BYTE PTR [eax+0x56],dl
   1e9fa:	eb 17                	jmp    1ea13 <fatfs_create_boot_sector+0x14c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:169
    }
    else
    {
        fs->root_entry_count = 0;
   1e9fc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1e9ff:	66 c7 40 28 00 00    	mov    WORD PTR [eax+0x28],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:170
        fs->currentsector.sector[17] = 0;
   1ea05:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea08:	c6 40 55 00          	mov    BYTE PTR [eax+0x55],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:171
        fs->currentsector.sector[18] = 0;
   1ea0c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea0f:	c6 40 56 00          	mov    BYTE PTR [eax+0x56],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:175
    }

    // [FAT16] Total sectors (use FAT32 count instead)
    fs->currentsector.sector[19] = 0x00;
   1ea13:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea16:	c6 40 57 00          	mov    BYTE PTR [eax+0x57],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:176
    fs->currentsector.sector[20] = 0x00;
   1ea1a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea1d:	c6 40 58 00          	mov    BYTE PTR [eax+0x58],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:179

    // Media type
    fs->currentsector.sector[21] = 0xF8;
   1ea21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea24:	c6 40 59 f8          	mov    BYTE PTR [eax+0x59],0xf8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:183


    // FAT16 BS Details
    if (!is_fat32)
   1ea28:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1ea2c:	0f 85 8c 01 00 00    	jne    1ebbe <fatfs_create_boot_sector+0x2f7>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:186
    {
        // Count of sectors used by the FAT table (FAT16 only)
        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1ea32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea35:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ea38:	0f b6 c8             	movzx  ecx,al
   1ea3b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ea3e:	ba 00 00 00 00       	mov    edx,0x0
   1ea43:	f7 f1                	div    ecx
   1ea45:	83 c0 01             	add    eax,0x1
   1ea48:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:187
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/2)) + 1;
   1ea4b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ea4e:	c1 e8 08             	shr    eax,0x8
   1ea51:	8d 50 01             	lea    edx,[eax+0x1]
   1ea54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea57:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:188
        fs->currentsector.sector[22] = (uint8)((fs->fat_sectors >> 0) & 0xFF);
   1ea5a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea5d:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ea60:	89 c2                	mov    edx,eax
   1ea62:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea65:	88 50 5a             	mov    BYTE PTR [eax+0x5a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:189
        fs->currentsector.sector[23] = (uint8)((fs->fat_sectors >> 8) & 0xFF);
   1ea68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea6b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ea6e:	c1 e8 08             	shr    eax,0x8
   1ea71:	89 c2                	mov    edx,eax
   1ea73:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea76:	88 50 5b             	mov    BYTE PTR [eax+0x5b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:192

        // Sectors per track
        fs->currentsector.sector[24] = 0x00;
   1ea79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea7c:	c6 40 5c 00          	mov    BYTE PTR [eax+0x5c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:193
        fs->currentsector.sector[25] = 0x00;
   1ea80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea83:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:196

        // Heads
        fs->currentsector.sector[26] = 0x00;
   1ea87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea8a:	c6 40 5e 00          	mov    BYTE PTR [eax+0x5e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:197
        fs->currentsector.sector[27] = 0x00;
   1ea8e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea91:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:200

        // Hidden sectors
        fs->currentsector.sector[28] = 0x20;
   1ea95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea98:	c6 40 60 20          	mov    BYTE PTR [eax+0x60],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:201
        fs->currentsector.sector[29] = 0x00;
   1ea9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ea9f:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:202
        fs->currentsector.sector[30] = 0x00;
   1eaa3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaa6:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:203
        fs->currentsector.sector[31] = 0x00;
   1eaaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaad:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:206

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1eab1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1eab4:	89 c2                	mov    edx,eax
   1eab6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eab9:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:207
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1eabc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1eabf:	c1 e8 08             	shr    eax,0x8
   1eac2:	89 c2                	mov    edx,eax
   1eac4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eac7:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:208
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1eaca:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1eacd:	c1 e8 10             	shr    eax,0x10
   1ead0:	89 c2                	mov    edx,eax
   1ead2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ead5:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:209
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1ead8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1eadb:	c1 e8 18             	shr    eax,0x18
   1eade:	89 c2                	mov    edx,eax
   1eae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eae3:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:212

        // Drive number
        fs->currentsector.sector[36] = 0x00;
   1eae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eae9:	c6 40 68 00          	mov    BYTE PTR [eax+0x68],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:215

        // Reserved
        fs->currentsector.sector[37] = 0x00;
   1eaed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaf0:	c6 40 69 00          	mov    BYTE PTR [eax+0x69],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:218

        // Boot signature
        fs->currentsector.sector[38] = 0x29;
   1eaf4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eaf7:	c6 40 6a 29          	mov    BYTE PTR [eax+0x6a],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:221

        // Volume ID
        fs->currentsector.sector[39] = 0x12;
   1eafb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eafe:	c6 40 6b 12          	mov    BYTE PTR [eax+0x6b],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:222
        fs->currentsector.sector[40] = 0x34;
   1eb02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb05:	c6 40 6c 34          	mov    BYTE PTR [eax+0x6c],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:223
        fs->currentsector.sector[41] = 0x56;
   1eb09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb0c:	c6 40 6d 56          	mov    BYTE PTR [eax+0x6d],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:224
        fs->currentsector.sector[42] = 0x78;
   1eb10:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb13:	c6 40 6e 78          	mov    BYTE PTR [eax+0x6e],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227

        // Volume name
        for (i=0;i<11;i++)
   1eb17:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1eb1e:	eb 41                	jmp    1eb61 <fatfs_create_boot_sector+0x29a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:229
        {
            if (i < (int)strlen(name))
   1eb20:	83 ec 0c             	sub    esp,0xc
   1eb23:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1eb26:	e8 ad 8b 00 00       	call   276d8 <strlen>
   1eb2b:	83 c4 10             	add    esp,0x10
   1eb2e:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1eb31:	7e 1c                	jle    1eb4f <fatfs_create_boot_sector+0x288>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:230
                fs->currentsector.sector[i+43] = name[i];
   1eb33:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1eb36:	8d 50 2b             	lea    edx,[eax+0x2b]
   1eb39:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1eb3c:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1eb3f:	01 c8                	add    eax,ecx
   1eb41:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1eb44:	89 c1                	mov    ecx,eax
   1eb46:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb49:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1eb4d:	eb 0e                	jmp    1eb5d <fatfs_create_boot_sector+0x296>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:232
            else
                fs->currentsector.sector[i+43] = ' ';
   1eb4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1eb52:	8d 50 2b             	lea    edx,[eax+0x2b]
   1eb55:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb58:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 2)
        fs->currentsector.sector[40] = 0x34;
        fs->currentsector.sector[41] = 0x56;
        fs->currentsector.sector[42] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1eb5d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:227 (discriminator 1)
   1eb61:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1eb65:	7e b9                	jle    1eb20 <fatfs_create_boot_sector+0x259>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:236
            else
                fs->currentsector.sector[i+43] = ' ';
        }

        // File sys type
        fs->currentsector.sector[54] = 'F';
   1eb67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb6a:	c6 40 7a 46          	mov    BYTE PTR [eax+0x7a],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:237
        fs->currentsector.sector[55] = 'A';
   1eb6e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb71:	c6 40 7b 41          	mov    BYTE PTR [eax+0x7b],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:238
        fs->currentsector.sector[56] = 'T';
   1eb75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb78:	c6 40 7c 54          	mov    BYTE PTR [eax+0x7c],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:239
        fs->currentsector.sector[57] = '1';
   1eb7c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb7f:	c6 40 7d 31          	mov    BYTE PTR [eax+0x7d],0x31
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:240
        fs->currentsector.sector[58] = '6';
   1eb83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb86:	c6 40 7e 36          	mov    BYTE PTR [eax+0x7e],0x36
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:241
        fs->currentsector.sector[59] = ' ';
   1eb8a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb8d:	c6 40 7f 20          	mov    BYTE PTR [eax+0x7f],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:242
        fs->currentsector.sector[60] = ' ';
   1eb91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb94:	c6 80 80 00 00 00 20 	mov    BYTE PTR [eax+0x80],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:243
        fs->currentsector.sector[61] = ' ';
   1eb9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eb9e:	c6 80 81 00 00 00 20 	mov    BYTE PTR [eax+0x81],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:246

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1eba5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eba8:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:247
        fs->currentsector.sector[511] = 0xAA;
   1ebaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebb2:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
   1ebb9:	e9 61 02 00 00       	jmp    1ee1f <fatfs_create_boot_sector+0x558>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:253
    }
    // FAT32 BS Details
    else
    {
        // Count of sectors used by the FAT table (FAT16 only)
        fs->currentsector.sector[22] = 0;
   1ebbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebc1:	c6 40 5a 00          	mov    BYTE PTR [eax+0x5a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:254
        fs->currentsector.sector[23] = 0;
   1ebc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebc8:	c6 40 5b 00          	mov    BYTE PTR [eax+0x5b],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:257

        // Sectors per track (default)
        fs->currentsector.sector[24] = 0x3F;
   1ebcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebcf:	c6 40 5c 3f          	mov    BYTE PTR [eax+0x5c],0x3f
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:258
        fs->currentsector.sector[25] = 0x00;
   1ebd3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebd6:	c6 40 5d 00          	mov    BYTE PTR [eax+0x5d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:261

        // Heads (default)
        fs->currentsector.sector[26] = 0xFF;
   1ebda:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebdd:	c6 40 5e ff          	mov    BYTE PTR [eax+0x5e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:262
        fs->currentsector.sector[27] = 0x00;
   1ebe1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebe4:	c6 40 5f 00          	mov    BYTE PTR [eax+0x5f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:265

        // Hidden sectors
        fs->currentsector.sector[28] = 0x00;
   1ebe8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebeb:	c6 40 60 00          	mov    BYTE PTR [eax+0x60],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:266
        fs->currentsector.sector[29] = 0x00;
   1ebef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebf2:	c6 40 61 00          	mov    BYTE PTR [eax+0x61],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:267
        fs->currentsector.sector[30] = 0x00;
   1ebf6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ebf9:	c6 40 62 00          	mov    BYTE PTR [eax+0x62],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:268
        fs->currentsector.sector[31] = 0x00;
   1ebfd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec00:	c6 40 63 00          	mov    BYTE PTR [eax+0x63],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:271

        // Total sectors for this volume
        fs->currentsector.sector[32] = (uint8)((vol_sectors>>0)&0xFF);
   1ec04:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ec07:	89 c2                	mov    edx,eax
   1ec09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec0c:	88 50 64             	mov    BYTE PTR [eax+0x64],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:272
        fs->currentsector.sector[33] = (uint8)((vol_sectors>>8)&0xFF);
   1ec0f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ec12:	c1 e8 08             	shr    eax,0x8
   1ec15:	89 c2                	mov    edx,eax
   1ec17:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec1a:	88 50 65             	mov    BYTE PTR [eax+0x65],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:273
        fs->currentsector.sector[34] = (uint8)((vol_sectors>>16)&0xFF);
   1ec1d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ec20:	c1 e8 10             	shr    eax,0x10
   1ec23:	89 c2                	mov    edx,eax
   1ec25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec28:	88 50 66             	mov    BYTE PTR [eax+0x66],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:274
        fs->currentsector.sector[35] = (uint8)((vol_sectors>>24)&0xFF);
   1ec2b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ec2e:	c1 e8 18             	shr    eax,0x18
   1ec31:	89 c2                	mov    edx,eax
   1ec33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec36:	88 50 67             	mov    BYTE PTR [eax+0x67],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:276

        total_clusters = (vol_sectors / fs->sectors_per_cluster) + 1;
   1ec39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec3c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ec3f:	0f b6 c8             	movzx  ecx,al
   1ec42:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1ec45:	ba 00 00 00 00       	mov    edx,0x0
   1ec4a:	f7 f1                	div    ecx
   1ec4c:	83 c0 01             	add    eax,0x1
   1ec4f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:277
        fs->fat_sectors = (total_clusters/(FAT_SECTOR_SIZE/4)) + 1;
   1ec52:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1ec55:	c1 e8 07             	shr    eax,0x7
   1ec58:	8d 50 01             	lea    edx,[eax+0x1]
   1ec5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec5e:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:280

        // BPB_FATSz32
        fs->currentsector.sector[36] = (uint8)((fs->fat_sectors>>0)&0xFF);
   1ec61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec64:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ec67:	89 c2                	mov    edx,eax
   1ec69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec6c:	88 50 68             	mov    BYTE PTR [eax+0x68],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:281
        fs->currentsector.sector[37] = (uint8)((fs->fat_sectors>>8)&0xFF);
   1ec6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec72:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ec75:	c1 e8 08             	shr    eax,0x8
   1ec78:	89 c2                	mov    edx,eax
   1ec7a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec7d:	88 50 69             	mov    BYTE PTR [eax+0x69],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:282
        fs->currentsector.sector[38] = (uint8)((fs->fat_sectors>>16)&0xFF);
   1ec80:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec83:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ec86:	c1 e8 10             	shr    eax,0x10
   1ec89:	89 c2                	mov    edx,eax
   1ec8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec8e:	88 50 6a             	mov    BYTE PTR [eax+0x6a],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:283
        fs->currentsector.sector[39] = (uint8)((fs->fat_sectors>>24)&0xFF);
   1ec91:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec94:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1ec97:	c1 e8 18             	shr    eax,0x18
   1ec9a:	89 c2                	mov    edx,eax
   1ec9c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ec9f:	88 50 6b             	mov    BYTE PTR [eax+0x6b],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:286

        // BPB_ExtFlags
        fs->currentsector.sector[40] = 0;
   1eca2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eca5:	c6 40 6c 00          	mov    BYTE PTR [eax+0x6c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:287
        fs->currentsector.sector[41] = 0;
   1eca9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecac:	c6 40 6d 00          	mov    BYTE PTR [eax+0x6d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:290

        // BPB_FSVer
        fs->currentsector.sector[42] = 0;
   1ecb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecb3:	c6 40 6e 00          	mov    BYTE PTR [eax+0x6e],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:291
        fs->currentsector.sector[43] = 0;
   1ecb7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecba:	c6 40 6f 00          	mov    BYTE PTR [eax+0x6f],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:294

        // BPB_RootClus
        fs->currentsector.sector[44] = (uint8)((fs->rootdir_first_cluster>>0)&0xFF);
   1ecbe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecc1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ecc4:	89 c2                	mov    edx,eax
   1ecc6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecc9:	88 50 70             	mov    BYTE PTR [eax+0x70],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:295
        fs->currentsector.sector[45] = (uint8)((fs->rootdir_first_cluster>>8)&0xFF);
   1eccc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eccf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ecd2:	c1 e8 08             	shr    eax,0x8
   1ecd5:	89 c2                	mov    edx,eax
   1ecd7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecda:	88 50 71             	mov    BYTE PTR [eax+0x71],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:296
        fs->currentsector.sector[46] = (uint8)((fs->rootdir_first_cluster>>16)&0xFF);
   1ecdd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ece0:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ece3:	c1 e8 10             	shr    eax,0x10
   1ece6:	89 c2                	mov    edx,eax
   1ece8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eceb:	88 50 72             	mov    BYTE PTR [eax+0x72],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:297
        fs->currentsector.sector[47] = (uint8)((fs->rootdir_first_cluster>>24)&0xFF);
   1ecee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecf1:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1ecf4:	c1 e8 18             	shr    eax,0x18
   1ecf7:	89 c2                	mov    edx,eax
   1ecf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ecfc:	88 50 73             	mov    BYTE PTR [eax+0x73],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:300

        // BPB_FSInfo
        fs->currentsector.sector[48] = (uint8)((fs->fs_info_sector>>0)&0xFF);
   1ecff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed02:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1ed06:	89 c2                	mov    edx,eax
   1ed08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed0b:	88 50 74             	mov    BYTE PTR [eax+0x74],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:301
        fs->currentsector.sector[49] = (uint8)((fs->fs_info_sector>>8)&0xFF);
   1ed0e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed11:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1ed15:	66 c1 e8 08          	shr    ax,0x8
   1ed19:	89 c2                	mov    edx,eax
   1ed1b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed1e:	88 50 75             	mov    BYTE PTR [eax+0x75],dl
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:304

        // BPB_BkBootSec
        fs->currentsector.sector[50] = 6;
   1ed21:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed24:	c6 40 76 06          	mov    BYTE PTR [eax+0x76],0x6
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:305
        fs->currentsector.sector[51] = 0;
   1ed28:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed2b:	c6 40 77 00          	mov    BYTE PTR [eax+0x77],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:308

        // Drive number
        fs->currentsector.sector[64] = 0x00;
   1ed2f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed32:	c6 80 84 00 00 00 00 	mov    BYTE PTR [eax+0x84],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:311

        // Boot signature
        fs->currentsector.sector[66] = 0x29;
   1ed39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed3c:	c6 80 86 00 00 00 29 	mov    BYTE PTR [eax+0x86],0x29
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:314

        // Volume ID
        fs->currentsector.sector[67] = 0x12;
   1ed43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed46:	c6 80 87 00 00 00 12 	mov    BYTE PTR [eax+0x87],0x12
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:315
        fs->currentsector.sector[68] = 0x34;
   1ed4d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed50:	c6 80 88 00 00 00 34 	mov    BYTE PTR [eax+0x88],0x34
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:316
        fs->currentsector.sector[69] = 0x56;
   1ed57:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed5a:	c6 80 89 00 00 00 56 	mov    BYTE PTR [eax+0x89],0x56
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:317
        fs->currentsector.sector[70] = 0x78;
   1ed61:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed64:	c6 80 8a 00 00 00 78 	mov    BYTE PTR [eax+0x8a],0x78
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320

        // Volume name
        for (i=0;i<11;i++)
   1ed6b:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1ed72:	eb 41                	jmp    1edb5 <fatfs_create_boot_sector+0x4ee>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:322
        {
            if (i < (int)strlen(name))
   1ed74:	83 ec 0c             	sub    esp,0xc
   1ed77:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   1ed7a:	e8 59 89 00 00       	call   276d8 <strlen>
   1ed7f:	83 c4 10             	add    esp,0x10
   1ed82:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1ed85:	7e 1c                	jle    1eda3 <fatfs_create_boot_sector+0x4dc>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:323
                fs->currentsector.sector[i+71] = name[i];
   1ed87:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1ed8a:	8d 50 47             	lea    edx,[eax+0x47]
   1ed8d:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1ed90:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1ed93:	01 c8                	add    eax,ecx
   1ed95:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ed98:	89 c1                	mov    ecx,eax
   1ed9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ed9d:	88 4c 10 44          	mov    BYTE PTR [eax+edx*1+0x44],cl
   1eda1:	eb 0e                	jmp    1edb1 <fatfs_create_boot_sector+0x4ea>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:325
            else
                fs->currentsector.sector[i+71] = ' ';
   1eda3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1eda6:	8d 50 47             	lea    edx,[eax+0x47]
   1eda9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edac:	c6 44 10 44 20       	mov    BYTE PTR [eax+edx*1+0x44],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 2)
        fs->currentsector.sector[68] = 0x34;
        fs->currentsector.sector[69] = 0x56;
        fs->currentsector.sector[70] = 0x78;

        // Volume name
        for (i=0;i<11;i++)
   1edb1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:320 (discriminator 1)
   1edb5:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1edb9:	7e b9                	jle    1ed74 <fatfs_create_boot_sector+0x4ad>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:329
            else
                fs->currentsector.sector[i+71] = ' ';
        }

        // File sys type
        fs->currentsector.sector[82] = 'F';
   1edbb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edbe:	c6 80 96 00 00 00 46 	mov    BYTE PTR [eax+0x96],0x46
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:330
        fs->currentsector.sector[83] = 'A';
   1edc5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edc8:	c6 80 97 00 00 00 41 	mov    BYTE PTR [eax+0x97],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:331
        fs->currentsector.sector[84] = 'T';
   1edcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edd2:	c6 80 98 00 00 00 54 	mov    BYTE PTR [eax+0x98],0x54
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:332
        fs->currentsector.sector[85] = '3';
   1edd9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eddc:	c6 80 99 00 00 00 33 	mov    BYTE PTR [eax+0x99],0x33
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:333
        fs->currentsector.sector[86] = '2';
   1ede3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ede6:	c6 80 9a 00 00 00 32 	mov    BYTE PTR [eax+0x9a],0x32
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:334
        fs->currentsector.sector[87] = ' ';
   1eded:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edf0:	c6 80 9b 00 00 00 20 	mov    BYTE PTR [eax+0x9b],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:335
        fs->currentsector.sector[88] = ' ';
   1edf7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1edfa:	c6 80 9c 00 00 00 20 	mov    BYTE PTR [eax+0x9c],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:336
        fs->currentsector.sector[89] = ' ';
   1ee01:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee04:	c6 80 9d 00 00 00 20 	mov    BYTE PTR [eax+0x9d],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:339

        // Signature
        fs->currentsector.sector[510] = 0x55;
   1ee0b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee0e:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:340
        fs->currentsector.sector[511] = 0xAA;
   1ee15:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee18:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:343
    }

    if (fs->disk_io.write_media(boot_sector_lba, fs->currentsector.sector, 1))
   1ee1f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee22:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ee25:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ee28:	83 c2 44             	add    edx,0x44
   1ee2b:	83 ec 04             	sub    esp,0x4
   1ee2e:	6a 01                	push   0x1
   1ee30:	52                   	push   edx
   1ee31:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ee34:	ff d0                	call   eax
   1ee36:	83 c4 10             	add    esp,0x10
   1ee39:	85 c0                	test   eax,eax
   1ee3b:	74 07                	je     1ee44 <fatfs_create_boot_sector+0x57d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:344
        return 1;
   1ee3d:	b8 01 00 00 00       	mov    eax,0x1
   1ee42:	eb 05                	jmp    1ee49 <fatfs_create_boot_sector+0x582>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:346
    else
        return 0;
   1ee44:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:347
}
   1ee49:	c9                   	leave  
   1ee4a:	c3                   	ret    

0001ee4b <fatfs_create_fsinfo_sector>:
fatfs_create_fsinfo_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:352
//-----------------------------------------------------------------------------
// fatfs_create_fsinfo_sector: Create the FSInfo sector (FAT32)
//-----------------------------------------------------------------------------
static int fatfs_create_fsinfo_sector(struct fatfs *fs, uint32 sector_lba)
{
   1ee4b:	55                   	push   ebp
   1ee4c:	89 e5                	mov    ebp,esp
   1ee4e:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:354
    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1ee51:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee54:	83 c0 44             	add    eax,0x44
   1ee57:	83 ec 04             	sub    esp,0x4
   1ee5a:	68 00 02 00 00       	push   0x200
   1ee5f:	6a 00                	push   0x0
   1ee61:	50                   	push   eax
   1ee62:	e8 5a 65 00 00       	call   253c1 <memset>
   1ee67:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:357

    // FSI_LeadSig
    fs->currentsector.sector[0] = 0x52;
   1ee6a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee6d:	c6 40 44 52          	mov    BYTE PTR [eax+0x44],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:358
    fs->currentsector.sector[1] = 0x52;
   1ee71:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee74:	c6 40 45 52          	mov    BYTE PTR [eax+0x45],0x52
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:359
    fs->currentsector.sector[2] = 0x61;
   1ee78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee7b:	c6 40 46 61          	mov    BYTE PTR [eax+0x46],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:360
    fs->currentsector.sector[3] = 0x41;
   1ee7f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee82:	c6 40 47 41          	mov    BYTE PTR [eax+0x47],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:363

    // FSI_StrucSig
    fs->currentsector.sector[484] = 0x72;
   1ee86:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee89:	c6 80 28 02 00 00 72 	mov    BYTE PTR [eax+0x228],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:364
    fs->currentsector.sector[485] = 0x72;
   1ee90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee93:	c6 80 29 02 00 00 72 	mov    BYTE PTR [eax+0x229],0x72
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:365
    fs->currentsector.sector[486] = 0x41;
   1ee9a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ee9d:	c6 80 2a 02 00 00 41 	mov    BYTE PTR [eax+0x22a],0x41
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:366
    fs->currentsector.sector[487] = 0x61;
   1eea4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eea7:	c6 80 2b 02 00 00 61 	mov    BYTE PTR [eax+0x22b],0x61
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:369

    // FSI_Free_Count
    fs->currentsector.sector[488] = 0xFF;
   1eeae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeb1:	c6 80 2c 02 00 00 ff 	mov    BYTE PTR [eax+0x22c],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:370
    fs->currentsector.sector[489] = 0xFF;
   1eeb8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eebb:	c6 80 2d 02 00 00 ff 	mov    BYTE PTR [eax+0x22d],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:371
    fs->currentsector.sector[490] = 0xFF;
   1eec2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eec5:	c6 80 2e 02 00 00 ff 	mov    BYTE PTR [eax+0x22e],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:372
    fs->currentsector.sector[491] = 0xFF;
   1eecc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eecf:	c6 80 2f 02 00 00 ff 	mov    BYTE PTR [eax+0x22f],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:375

    // FSI_Nxt_Free
    fs->currentsector.sector[492] = 0xFF;
   1eed6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eed9:	c6 80 30 02 00 00 ff 	mov    BYTE PTR [eax+0x230],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:376
    fs->currentsector.sector[493] = 0xFF;
   1eee0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eee3:	c6 80 31 02 00 00 ff 	mov    BYTE PTR [eax+0x231],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:377
    fs->currentsector.sector[494] = 0xFF;
   1eeea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eeed:	c6 80 32 02 00 00 ff 	mov    BYTE PTR [eax+0x232],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:378
    fs->currentsector.sector[495] = 0xFF;
   1eef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1eef7:	c6 80 33 02 00 00 ff 	mov    BYTE PTR [eax+0x233],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:381

    // Signature
    fs->currentsector.sector[510] = 0x55;
   1eefe:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef01:	c6 80 42 02 00 00 55 	mov    BYTE PTR [eax+0x242],0x55
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:382
    fs->currentsector.sector[511] = 0xAA;
   1ef08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef0b:	c6 80 43 02 00 00 aa 	mov    BYTE PTR [eax+0x243],0xaa
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:384

    if (fs->disk_io.write_media(sector_lba, fs->currentsector.sector, 1))
   1ef12:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef15:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1ef18:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1ef1b:	83 c2 44             	add    edx,0x44
   1ef1e:	83 ec 04             	sub    esp,0x4
   1ef21:	6a 01                	push   0x1
   1ef23:	52                   	push   edx
   1ef24:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1ef27:	ff d0                	call   eax
   1ef29:	83 c4 10             	add    esp,0x10
   1ef2c:	85 c0                	test   eax,eax
   1ef2e:	74 07                	je     1ef37 <fatfs_create_fsinfo_sector+0xec>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:385
        return 1;
   1ef30:	b8 01 00 00 00       	mov    eax,0x1
   1ef35:	eb 05                	jmp    1ef3c <fatfs_create_fsinfo_sector+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:387
    else
        return 0;
   1ef37:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:388
}
   1ef3c:	c9                   	leave  
   1ef3d:	c3                   	ret    

0001ef3e <fatfs_erase_fat>:
fatfs_erase_fat():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:393
//-----------------------------------------------------------------------------
// fatfs_erase_fat: Erase FAT table using fs details in fs struct
//-----------------------------------------------------------------------------
static int fatfs_erase_fat(struct fatfs *fs, int is_fat32)
{
   1ef3e:	55                   	push   ebp
   1ef3f:	89 e5                	mov    ebp,esp
   1ef41:	53                   	push   ebx
   1ef42:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:397
    uint32 i;

    // Zero sector initially
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1ef45:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef48:	83 c0 44             	add    eax,0x44
   1ef4b:	83 ec 04             	sub    esp,0x4
   1ef4e:	68 00 02 00 00       	push   0x200
   1ef53:	6a 00                	push   0x0
   1ef55:	50                   	push   eax
   1ef56:	e8 66 64 00 00       	call   253c1 <memset>
   1ef5b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:400

    // Initialise default allocate / reserved clusters
    if (!is_fat32)
   1ef5e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1ef62:	75 1e                	jne    1ef82 <fatfs_erase_fat+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:402
    {
        SET_16BIT_WORD(fs->currentsector.sector, 0, 0xFFF8);
   1ef64:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef67:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1ef6b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef6e:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:403
        SET_16BIT_WORD(fs->currentsector.sector, 2, 0xFFFF);
   1ef72:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef75:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1ef79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef7c:	c6 40 47 ff          	mov    BYTE PTR [eax+0x47],0xff
   1ef80:	eb 54                	jmp    1efd6 <fatfs_erase_fat+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:407
    }
    else
    {
        SET_32BIT_WORD(fs->currentsector.sector, 0, 0x0FFFFFF8);
   1ef82:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef85:	c6 40 44 f8          	mov    BYTE PTR [eax+0x44],0xf8
   1ef89:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef8c:	c6 40 45 ff          	mov    BYTE PTR [eax+0x45],0xff
   1ef90:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef93:	c6 40 46 ff          	mov    BYTE PTR [eax+0x46],0xff
   1ef97:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ef9a:	c6 40 47 0f          	mov    BYTE PTR [eax+0x47],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:408
        SET_32BIT_WORD(fs->currentsector.sector, 4, 0xFFFFFFFF);
   1ef9e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efa1:	c6 40 48 ff          	mov    BYTE PTR [eax+0x48],0xff
   1efa5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efa8:	c6 40 49 ff          	mov    BYTE PTR [eax+0x49],0xff
   1efac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efaf:	c6 40 4a ff          	mov    BYTE PTR [eax+0x4a],0xff
   1efb3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efb6:	c6 40 4b ff          	mov    BYTE PTR [eax+0x4b],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:409
        SET_32BIT_WORD(fs->currentsector.sector, 8, 0x0FFFFFFF);
   1efba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efbd:	c6 40 4c ff          	mov    BYTE PTR [eax+0x4c],0xff
   1efc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efc4:	c6 40 4d ff          	mov    BYTE PTR [eax+0x4d],0xff
   1efc8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efcb:	c6 40 4e ff          	mov    BYTE PTR [eax+0x4e],0xff
   1efcf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efd2:	c6 40 4f 0f          	mov    BYTE PTR [eax+0x4f],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:412
    }

    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
   1efd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1efd9:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1efdc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1efdf:	8d 4a 44             	lea    ecx,[edx+0x44]
   1efe2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1efe5:	8b 52 14             	mov    edx,DWORD PTR [edx+0x14]
   1efe8:	83 ec 04             	sub    esp,0x4
   1efeb:	6a 01                	push   0x1
   1efed:	51                   	push   ecx
   1efee:	52                   	push   edx
   1efef:	ff d0                	call   eax
   1eff1:	83 c4 10             	add    esp,0x10
   1eff4:	85 c0                	test   eax,eax
   1eff6:	75 07                	jne    1efff <fatfs_erase_fat+0xc1>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:413
        return 0;
   1eff8:	b8 00 00 00 00       	mov    eax,0x0
   1effd:	eb 71                	jmp    1f070 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:416

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
   1efff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f002:	83 c0 44             	add    eax,0x44
   1f005:	83 ec 04             	sub    esp,0x4
   1f008:	68 00 02 00 00       	push   0x200
   1f00d:	6a 00                	push   0x0
   1f00f:	50                   	push   eax
   1f010:	e8 ac 63 00 00       	call   253c1 <memset>
   1f015:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1f018:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   1f01f:	eb 32                	jmp    1f053 <fatfs_erase_fat+0x115>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:418
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
   1f021:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f024:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f027:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f02a:	8d 4a 44             	lea    ecx,[edx+0x44]
   1f02d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f030:	8b 5a 14             	mov    ebx,DWORD PTR [edx+0x14]
   1f033:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f036:	01 da                	add    edx,ebx
   1f038:	83 ec 04             	sub    esp,0x4
   1f03b:	6a 01                	push   0x1
   1f03d:	51                   	push   ecx
   1f03e:	52                   	push   edx
   1f03f:	ff d0                	call   eax
   1f041:	83 c4 10             	add    esp,0x10
   1f044:	85 c0                	test   eax,eax
   1f046:	75 07                	jne    1f04f <fatfs_erase_fat+0x111>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:419
            return 0;
   1f048:	b8 00 00 00 00       	mov    eax,0x0
   1f04d:	eb 21                	jmp    1f070 <fatfs_erase_fat+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 2)
    if (!fs->disk_io.write_media(fs->fat_begin_lba + 0, fs->currentsector.sector, 1))
        return 0;

    // Zero remaining FAT sectors
    memset(fs->currentsector.sector, 0, FAT_SECTOR_SIZE);
    for (i=1;i<fs->fat_sectors*fs->num_of_fats;i++)
   1f04f:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:417 (discriminator 1)
   1f053:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f056:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   1f059:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f05c:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f060:	0f b6 c0             	movzx  eax,al
   1f063:	0f af c2             	imul   eax,edx
   1f066:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1f069:	77 b6                	ja     1f021 <fatfs_erase_fat+0xe3>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:421
        if (!fs->disk_io.write_media(fs->fat_begin_lba + i, fs->currentsector.sector, 1))
            return 0;

    return 1;
   1f06b:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:422
}
   1f070:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1f073:	c9                   	leave  
   1f074:	c3                   	ret    

0001f075 <fatfs_format_fat16>:
fatfs_format_fat16():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:427
//-----------------------------------------------------------------------------
// fatfs_format_fat16: Format a FAT16 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat16(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f075:	55                   	push   ebp
   1f076:	89 e5                	mov    ebp,esp
   1f078:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:428
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1f07b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f07e:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1f085:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:429
    fs->currentsector.dirty = 0;
   1f088:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f08b:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1f092:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:431

    fs->next_free_cluster = 0; // Invalid
   1f095:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f098:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:433

    fatfs_fat_init(fs);
   1f09f:	83 ec 0c             	sub    esp,0xc
   1f0a2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f0a5:	e8 3e 15 00 00       	call   205e8 <fatfs_fat_init>
   1f0aa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1f0ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0b0:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1f0b3:	85 c0                	test   eax,eax
   1f0b5:	74 0a                	je     1f0c1 <fatfs_format_fat16+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:436 (discriminator 1)
   1f0b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0ba:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f0bd:	85 c0                	test   eax,eax
   1f0bf:	75 0a                	jne    1f0cb <fatfs_format_fat16+0x56>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:437
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1f0c1:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1f0c6:	e9 29 01 00 00       	jmp    1f1f4 <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:440

    // Volume is FAT16
    fs->fat_type = FAT_TYPE_16;
   1f0cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0ce:	c7 40 30 00 00 00 00 	mov    DWORD PTR [eax+0x30],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:443

    // Not valid for FAT16
    fs->fs_info_sector = 0;
   1f0d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0d8:	66 c7 40 18 00 00    	mov    WORD PTR [eax+0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:444
    fs->rootdir_first_cluster = 0;
   1f0de:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0e1:	c7 40 08 00 00 00 00 	mov    DWORD PTR [eax+0x8],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:448

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1f0e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0eb:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:449
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 0))
   1f0f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f0f5:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1f0f8:	83 ec 0c             	sub    esp,0xc
   1f0fb:	6a 00                	push   0x0
   1f0fd:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f100:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f103:	50                   	push   eax
   1f104:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f107:	e8 bb f7 ff ff       	call   1e8c7 <fatfs_create_boot_sector>
   1f10c:	83 c4 20             	add    esp,0x20
   1f10f:	85 c0                	test   eax,eax
   1f111:	75 0a                	jne    1f11d <fatfs_format_fat16+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:450
        return 0;
   1f113:	b8 00 00 00 00       	mov    eax,0x0
   1f118:	e9 d7 00 00 00       	jmp    1f1f4 <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:453

    // For FAT16 (which this may be), rootdir_first_cluster is actuall rootdir_first_sector
    fs->rootdir_first_sector = fs->reserved_sectors + (fs->num_of_fats * fs->fat_sectors);
   1f11d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f120:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f124:	0f b7 d0             	movzx  edx,ax
   1f127:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f12a:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f12e:	0f b6 c8             	movzx  ecx,al
   1f131:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f134:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f137:	0f af c1             	imul   eax,ecx
   1f13a:	01 c2                	add    edx,eax
   1f13c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f13f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:454
    fs->rootdir_sectors = ((fs->root_entry_count * 32) + (FAT_SECTOR_SIZE - 1)) / FAT_SECTOR_SIZE;
   1f142:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f145:	0f b7 40 28          	movzx  eax,WORD PTR [eax+0x28]
   1f149:	0f b7 c0             	movzx  eax,ax
   1f14c:	c1 e0 05             	shl    eax,0x5
   1f14f:	05 ff 01 00 00       	add    eax,0x1ff
   1f154:	8d 90 ff 01 00 00    	lea    edx,[eax+0x1ff]
   1f15a:	85 c0                	test   eax,eax
   1f15c:	0f 48 c2             	cmovs  eax,edx
   1f15f:	c1 f8 09             	sar    eax,0x9
   1f162:	89 c2                	mov    edx,eax
   1f164:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f167:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:457

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1f16a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f16d:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f173:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f177:	0f b7 c0             	movzx  eax,ax
   1f17a:	01 c2                	add    edx,eax
   1f17c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f17f:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:460

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1f182:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f185:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1f188:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f18b:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f18f:	0f b6 c8             	movzx  ecx,al
   1f192:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f195:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f198:	0f af c1             	imul   eax,ecx
   1f19b:	01 c2                	add    edx,eax
   1f19d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1a0:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:463

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 0))
   1f1a3:	83 ec 08             	sub    esp,0x8
   1f1a6:	6a 00                	push   0x0
   1f1a8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f1ab:	e8 8e fd ff ff       	call   1ef3e <fatfs_erase_fat>
   1f1b0:	83 c4 10             	add    esp,0x10
   1f1b3:	85 c0                	test   eax,eax
   1f1b5:	75 07                	jne    1f1be <fatfs_format_fat16+0x149>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:464
        return 0;
   1f1b7:	b8 00 00 00 00       	mov    eax,0x0
   1f1bc:	eb 36                	jmp    1f1f4 <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:467

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fs->lba_begin + fs->rootdir_first_sector, fs->rootdir_sectors))
   1f1be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1c1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   1f1c4:	89 c1                	mov    ecx,eax
   1f1c6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1c9:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f1cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f1cf:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   1f1d2:	01 d0                	add    eax,edx
   1f1d4:	83 ec 04             	sub    esp,0x4
   1f1d7:	51                   	push   ecx
   1f1d8:	50                   	push   eax
   1f1d9:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f1dc:	e8 7c f6 ff ff       	call   1e85d <fatfs_erase_sectors>
   1f1e1:	83 c4 10             	add    esp,0x10
   1f1e4:	85 c0                	test   eax,eax
   1f1e6:	75 07                	jne    1f1ef <fatfs_format_fat16+0x17a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:468
        return 0;
   1f1e8:	b8 00 00 00 00       	mov    eax,0x0
   1f1ed:	eb 05                	jmp    1f1f4 <fatfs_format_fat16+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:470

    return 1;
   1f1ef:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:471
}
   1f1f4:	c9                   	leave  
   1f1f5:	c3                   	ret    

0001f1f6 <fatfs_format_fat32>:
fatfs_format_fat32():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:476
//-----------------------------------------------------------------------------
// fatfs_format_fat32: Format a FAT32 partition
//-----------------------------------------------------------------------------
int fatfs_format_fat32(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f1f6:	55                   	push   ebp
   1f1f7:	89 e5                	mov    ebp,esp
   1f1f9:	53                   	push   ebx
   1f1fa:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:477
    fs->currentsector.address = FAT32_INVALID_CLUSTER;
   1f1fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f200:	c7 80 44 02 00 00 ff 	mov    DWORD PTR [eax+0x244],0xffffffff
   1f207:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:478
    fs->currentsector.dirty = 0;
   1f20a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f20d:	c7 80 48 02 00 00 00 	mov    DWORD PTR [eax+0x248],0x0
   1f214:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:480

    fs->next_free_cluster = 0; // Invalid
   1f217:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f21a:	c7 40 24 00 00 00 00 	mov    DWORD PTR [eax+0x24],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:482

    fatfs_fat_init(fs);
   1f221:	83 ec 0c             	sub    esp,0xc
   1f224:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f227:	e8 bc 13 00 00       	call   205e8 <fatfs_fat_init>
   1f22c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485

    // Make sure we have read + write functions
    if (!fs->disk_io.read_media || !fs->disk_io.write_media)
   1f22f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f232:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   1f235:	85 c0                	test   eax,eax
   1f237:	74 0a                	je     1f243 <fatfs_format_fat32+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:485 (discriminator 1)
   1f239:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f23c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   1f23f:	85 c0                	test   eax,eax
   1f241:	75 0a                	jne    1f24d <fatfs_format_fat32+0x57>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:486
        return FAT_INIT_MEDIA_ACCESS_ERROR;
   1f243:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1f248:	e9 08 01 00 00       	jmp    1f355 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:489

    // Volume is FAT32
    fs->fat_type = FAT_TYPE_32;
   1f24d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f250:	c7 40 30 01 00 00 00 	mov    DWORD PTR [eax+0x30],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:492

    // Basic defaults for normal FAT32 partitions
    fs->fs_info_sector = 1;
   1f257:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f25a:	66 c7 40 18 01 00    	mov    WORD PTR [eax+0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:493
    fs->rootdir_first_cluster = 2;
   1f260:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f263:	c7 40 08 02 00 00 00 	mov    DWORD PTR [eax+0x8],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:497

    // Sector 0: Boot sector
    // NOTE: We don't need an MBR, it is a waste of a good sector!
    fs->lba_begin = 0;
   1f26a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f26d:	c7 40 1c 00 00 00 00 	mov    DWORD PTR [eax+0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:498
    if (!fatfs_create_boot_sector(fs, fs->lba_begin, volume_sectors, name, 1))
   1f274:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f277:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   1f27a:	83 ec 0c             	sub    esp,0xc
   1f27d:	6a 01                	push   0x1
   1f27f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f282:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f285:	50                   	push   eax
   1f286:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f289:	e8 39 f6 ff ff       	call   1e8c7 <fatfs_create_boot_sector>
   1f28e:	83 c4 20             	add    esp,0x20
   1f291:	85 c0                	test   eax,eax
   1f293:	75 0a                	jne    1f29f <fatfs_format_fat32+0xa9>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:499
        return 0;
   1f295:	b8 00 00 00 00       	mov    eax,0x0
   1f29a:	e9 b6 00 00 00       	jmp    1f355 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:502

    // First FAT LBA address
    fs->fat_begin_lba = fs->lba_begin + fs->reserved_sectors;
   1f29f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2a2:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   1f2a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2a8:	0f b7 40 2a          	movzx  eax,WORD PTR [eax+0x2a]
   1f2ac:	0f b7 c0             	movzx  eax,ax
   1f2af:	01 c2                	add    edx,eax
   1f2b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2b4:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:505

    // The address of the first data cluster on this volume
    fs->cluster_begin_lba = fs->fat_begin_lba + (fs->num_of_fats * fs->fat_sectors);
   1f2b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2ba:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   1f2bd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2c0:	0f b6 40 2c          	movzx  eax,BYTE PTR [eax+0x2c]
   1f2c4:	0f b6 c8             	movzx  ecx,al
   1f2c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2ca:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   1f2cd:	0f af c1             	imul   eax,ecx
   1f2d0:	01 c2                	add    edx,eax
   1f2d2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2d5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:508

    // Initialise FSInfo sector
    if (!fatfs_create_fsinfo_sector(fs, fs->fs_info_sector))
   1f2d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f2db:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   1f2df:	0f b7 c0             	movzx  eax,ax
   1f2e2:	83 ec 08             	sub    esp,0x8
   1f2e5:	50                   	push   eax
   1f2e6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f2e9:	e8 5d fb ff ff       	call   1ee4b <fatfs_create_fsinfo_sector>
   1f2ee:	83 c4 10             	add    esp,0x10
   1f2f1:	85 c0                	test   eax,eax
   1f2f3:	75 07                	jne    1f2fc <fatfs_format_fat32+0x106>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:509
        return 0;
   1f2f5:	b8 00 00 00 00       	mov    eax,0x0
   1f2fa:	eb 59                	jmp    1f355 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:512

    // Initialise FAT sectors
    if (!fatfs_erase_fat(fs, 1))
   1f2fc:	83 ec 08             	sub    esp,0x8
   1f2ff:	6a 01                	push   0x1
   1f301:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f304:	e8 35 fc ff ff       	call   1ef3e <fatfs_erase_fat>
   1f309:	83 c4 10             	add    esp,0x10
   1f30c:	85 c0                	test   eax,eax
   1f30e:	75 07                	jne    1f317 <fatfs_format_fat32+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:513
        return 0;
   1f310:	b8 00 00 00 00       	mov    eax,0x0
   1f315:	eb 3e                	jmp    1f355 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:516

    // Erase Root directory
    if (!fatfs_erase_sectors(fs, fatfs_lba_of_cluster(fs, fs->rootdir_first_cluster), fs->sectors_per_cluster))
   1f317:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f31a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f31d:	0f b6 d8             	movzx  ebx,al
   1f320:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f323:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   1f326:	83 ec 08             	sub    esp,0x8
   1f329:	50                   	push   eax
   1f32a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f32d:	e8 d2 c1 ff ff       	call   1b504 <fatfs_lba_of_cluster>
   1f332:	83 c4 10             	add    esp,0x10
   1f335:	83 ec 04             	sub    esp,0x4
   1f338:	53                   	push   ebx
   1f339:	50                   	push   eax
   1f33a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f33d:	e8 1b f5 ff ff       	call   1e85d <fatfs_erase_sectors>
   1f342:	83 c4 10             	add    esp,0x10
   1f345:	85 c0                	test   eax,eax
   1f347:	75 07                	jne    1f350 <fatfs_format_fat32+0x15a>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:517
        return 0;
   1f349:	b8 00 00 00 00       	mov    eax,0x0
   1f34e:	eb 05                	jmp    1f355 <fatfs_format_fat32+0x15f>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:519

    return 1;
   1f350:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:520
}
   1f355:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   1f358:	c9                   	leave  
   1f359:	c3                   	ret    

0001f35a <fatfs_format>:
fatfs_format():
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:525
//-----------------------------------------------------------------------------
// fatfs_format: Format a partition with either FAT16 or FAT32 based on size
//-----------------------------------------------------------------------------
int fatfs_format(struct fatfs *fs, uint32 volume_sectors, const char *name)
{
   1f35a:	55                   	push   ebp
   1f35b:	89 e5                	mov    ebp,esp
   1f35d:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:527
    // 2GB - 32K limit for safe behaviour for FAT16
    if (volume_sectors <= 4194304)
   1f360:	81 7d 0c 00 00 40 00 	cmp    DWORD PTR [ebp+0xc],0x400000
   1f367:	77 16                	ja     1f37f <fatfs_format+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:528
        return fatfs_format_fat16(fs, volume_sectors, name);
   1f369:	83 ec 04             	sub    esp,0x4
   1f36c:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f36f:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f372:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f375:	e8 fb fc ff ff       	call   1f075 <fatfs_format_fat16>
   1f37a:	83 c4 10             	add    esp,0x10
   1f37d:	eb 14                	jmp    1f393 <fatfs_format+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:530
    else
        return fatfs_format_fat32(fs, volume_sectors, name);
   1f37f:	83 ec 04             	sub    esp,0x4
   1f382:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1f385:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f388:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f38b:	e8 66 fe ff ff       	call   1f1f6 <fatfs_format_fat32>
   1f390:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_format.c:531
}
   1f393:	c9                   	leave  
   1f394:	c3                   	ret    
   1f395:	66 90                	xchg   ax,ax
   1f397:	90                   	nop

0001f398 <fatfs_lfn_cache_init>:
fatfs_lfn_cache_init():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:40

//-----------------------------------------------------------------------------
// fatfs_lfn_cache_init: Clear long file name cache
//-----------------------------------------------------------------------------
void fatfs_lfn_cache_init(struct lfn_cache *lfn, int wipeTable)
{
   1f398:	55                   	push   ebp
   1f399:	89 e5                	mov    ebp,esp
   1f39b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:41
    int i = 0;
   1f39e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:43

    lfn->no_of_strings = 0;
   1f3a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f3a8:	c6 80 05 01 00 00 00 	mov    BYTE PTR [eax+0x105],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:48

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
   1f3af:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   1f3b3:	74 36                	je     1f3eb <fatfs_lfn_cache_init+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f3b5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f3bc:	eb 27                	jmp    1f3e5 <fatfs_lfn_cache_init+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:50 (discriminator 3)
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
   1f3be:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f3c1:	89 d0                	mov    eax,edx
   1f3c3:	01 c0                	add    eax,eax
   1f3c5:	01 d0                	add    eax,edx
   1f3c7:	c1 e0 02             	shl    eax,0x2
   1f3ca:	01 d0                	add    eax,edx
   1f3cc:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f3cf:	01 d0                	add    eax,edx
   1f3d1:	83 ec 04             	sub    esp,0x4
   1f3d4:	6a 0d                	push   0xd
   1f3d6:	6a 00                	push   0x0
   1f3d8:	50                   	push   eax
   1f3d9:	e8 e3 5f 00 00       	call   253c1 <memset>
   1f3de:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 3)

#if FATFS_INC_LFN_SUPPORT

    // Zero out buffer also
    if (wipeTable)
        for (i=0;i<MAX_LONGFILENAME_ENTRIES;i++)
   1f3e1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:49 (discriminator 1)
   1f3e5:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   1f3e9:	7e d3                	jle    1f3be <fatfs_lfn_cache_init+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:52
            memset(lfn->String[i], 0x00, MAX_LFN_ENTRY_LENGTH);
#endif
}
   1f3eb:	90                   	nop
   1f3ec:	c9                   	leave  
   1f3ed:	c3                   	ret    

0001f3ee <fatfs_lfn_cache_entry>:
fatfs_lfn_cache_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:59
// fatfs_lfn_cache_entry - Function extracts long file name text from sector
// at a specific offset
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_lfn_cache_entry(struct lfn_cache *lfn, uint8 *entryBuffer)
{
   1f3ee:	55                   	push   ebp
   1f3ef:	89 e5                	mov    ebp,esp
   1f3f1:	53                   	push   ebx
   1f3f2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:61
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;
   1f3f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f3f8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f3fb:	83 e0 1f             	and    eax,0x1f
   1f3fe:	88 45 fa             	mov    BYTE PTR [ebp-0x6],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:64

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
   1f401:	80 7d fa 14          	cmp    BYTE PTR [ebp-0x6],0x14
   1f405:	0f 87 45 02 00 00    	ja     1f650 <fatfs_lfn_cache_entry+0x262>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:68
        return ;

    // This is an error condition
    if (LFNIndex == 0)
   1f40b:	80 7d fa 00          	cmp    BYTE PTR [ebp-0x6],0x0
   1f40f:	0f 84 3e 02 00 00    	je     1f653 <fatfs_lfn_cache_entry+0x265>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:71
        return ;

    if (lfn->no_of_strings == 0)
   1f415:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f418:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f41f:	84 c0                	test   al,al
   1f421:	75 0d                	jne    1f430 <fatfs_lfn_cache_entry+0x42>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:72
        lfn->no_of_strings = LFNIndex;
   1f423:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f426:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   1f42a:	88 90 05 01 00 00    	mov    BYTE PTR [eax+0x105],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:74

    lfn->String[LFNIndex-1][0] = entryBuffer[1];
   1f430:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f434:	8d 50 ff             	lea    edx,[eax-0x1]
   1f437:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f43a:	0f b6 48 01          	movzx  ecx,BYTE PTR [eax+0x1]
   1f43e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f441:	89 d0                	mov    eax,edx
   1f443:	01 c0                	add    eax,eax
   1f445:	01 d0                	add    eax,edx
   1f447:	c1 e0 02             	shl    eax,0x2
   1f44a:	01 d0                	add    eax,edx
   1f44c:	01 d8                	add    eax,ebx
   1f44e:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:75
    lfn->String[LFNIndex-1][1] = entryBuffer[3];
   1f450:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f454:	8d 50 ff             	lea    edx,[eax-0x1]
   1f457:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f45a:	0f b6 48 03          	movzx  ecx,BYTE PTR [eax+0x3]
   1f45e:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f461:	89 d0                	mov    eax,edx
   1f463:	01 c0                	add    eax,eax
   1f465:	01 d0                	add    eax,edx
   1f467:	c1 e0 02             	shl    eax,0x2
   1f46a:	01 d0                	add    eax,edx
   1f46c:	01 d8                	add    eax,ebx
   1f46e:	83 c0 01             	add    eax,0x1
   1f471:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:76
    lfn->String[LFNIndex-1][2] = entryBuffer[5];
   1f473:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f477:	8d 50 ff             	lea    edx,[eax-0x1]
   1f47a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f47d:	0f b6 48 05          	movzx  ecx,BYTE PTR [eax+0x5]
   1f481:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f484:	89 d0                	mov    eax,edx
   1f486:	01 c0                	add    eax,eax
   1f488:	01 d0                	add    eax,edx
   1f48a:	c1 e0 02             	shl    eax,0x2
   1f48d:	01 d0                	add    eax,edx
   1f48f:	01 d8                	add    eax,ebx
   1f491:	83 c0 02             	add    eax,0x2
   1f494:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:77
    lfn->String[LFNIndex-1][3] = entryBuffer[7];
   1f496:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f49a:	8d 50 ff             	lea    edx,[eax-0x1]
   1f49d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f4a0:	0f b6 48 07          	movzx  ecx,BYTE PTR [eax+0x7]
   1f4a4:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f4a7:	89 d0                	mov    eax,edx
   1f4a9:	01 c0                	add    eax,eax
   1f4ab:	01 d0                	add    eax,edx
   1f4ad:	c1 e0 02             	shl    eax,0x2
   1f4b0:	01 d0                	add    eax,edx
   1f4b2:	01 d8                	add    eax,ebx
   1f4b4:	83 c0 03             	add    eax,0x3
   1f4b7:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:78
    lfn->String[LFNIndex-1][4] = entryBuffer[9];
   1f4b9:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f4bd:	8d 50 ff             	lea    edx,[eax-0x1]
   1f4c0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f4c3:	0f b6 48 09          	movzx  ecx,BYTE PTR [eax+0x9]
   1f4c7:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f4ca:	89 d0                	mov    eax,edx
   1f4cc:	01 c0                	add    eax,eax
   1f4ce:	01 d0                	add    eax,edx
   1f4d0:	c1 e0 02             	shl    eax,0x2
   1f4d3:	01 d0                	add    eax,edx
   1f4d5:	01 d8                	add    eax,ebx
   1f4d7:	83 c0 04             	add    eax,0x4
   1f4da:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:79
    lfn->String[LFNIndex-1][5] = entryBuffer[0x0E];
   1f4dc:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f4e0:	8d 50 ff             	lea    edx,[eax-0x1]
   1f4e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f4e6:	0f b6 48 0e          	movzx  ecx,BYTE PTR [eax+0xe]
   1f4ea:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f4ed:	89 d0                	mov    eax,edx
   1f4ef:	01 c0                	add    eax,eax
   1f4f1:	01 d0                	add    eax,edx
   1f4f3:	c1 e0 02             	shl    eax,0x2
   1f4f6:	01 d0                	add    eax,edx
   1f4f8:	01 d8                	add    eax,ebx
   1f4fa:	83 c0 05             	add    eax,0x5
   1f4fd:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:80
    lfn->String[LFNIndex-1][6] = entryBuffer[0x10];
   1f4ff:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f503:	8d 50 ff             	lea    edx,[eax-0x1]
   1f506:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f509:	0f b6 48 10          	movzx  ecx,BYTE PTR [eax+0x10]
   1f50d:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f510:	89 d0                	mov    eax,edx
   1f512:	01 c0                	add    eax,eax
   1f514:	01 d0                	add    eax,edx
   1f516:	c1 e0 02             	shl    eax,0x2
   1f519:	01 d0                	add    eax,edx
   1f51b:	01 d8                	add    eax,ebx
   1f51d:	83 c0 06             	add    eax,0x6
   1f520:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:81
    lfn->String[LFNIndex-1][7] = entryBuffer[0x12];
   1f522:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f526:	8d 50 ff             	lea    edx,[eax-0x1]
   1f529:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f52c:	0f b6 48 12          	movzx  ecx,BYTE PTR [eax+0x12]
   1f530:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f533:	89 d0                	mov    eax,edx
   1f535:	01 c0                	add    eax,eax
   1f537:	01 d0                	add    eax,edx
   1f539:	c1 e0 02             	shl    eax,0x2
   1f53c:	01 d0                	add    eax,edx
   1f53e:	01 d8                	add    eax,ebx
   1f540:	83 c0 07             	add    eax,0x7
   1f543:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:82
    lfn->String[LFNIndex-1][8] = entryBuffer[0x14];
   1f545:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f549:	8d 50 ff             	lea    edx,[eax-0x1]
   1f54c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f54f:	0f b6 48 14          	movzx  ecx,BYTE PTR [eax+0x14]
   1f553:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f556:	89 d0                	mov    eax,edx
   1f558:	01 c0                	add    eax,eax
   1f55a:	01 d0                	add    eax,edx
   1f55c:	c1 e0 02             	shl    eax,0x2
   1f55f:	01 d0                	add    eax,edx
   1f561:	01 d8                	add    eax,ebx
   1f563:	83 c0 08             	add    eax,0x8
   1f566:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:83
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
   1f568:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f56c:	8d 50 ff             	lea    edx,[eax-0x1]
   1f56f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f572:	0f b6 48 16          	movzx  ecx,BYTE PTR [eax+0x16]
   1f576:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f579:	89 d0                	mov    eax,edx
   1f57b:	01 c0                	add    eax,eax
   1f57d:	01 d0                	add    eax,edx
   1f57f:	c1 e0 02             	shl    eax,0x2
   1f582:	01 d0                	add    eax,edx
   1f584:	01 d8                	add    eax,ebx
   1f586:	83 c0 09             	add    eax,0x9
   1f589:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:84
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
   1f58b:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f58f:	8d 50 ff             	lea    edx,[eax-0x1]
   1f592:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f595:	0f b6 48 18          	movzx  ecx,BYTE PTR [eax+0x18]
   1f599:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f59c:	89 d0                	mov    eax,edx
   1f59e:	01 c0                	add    eax,eax
   1f5a0:	01 d0                	add    eax,edx
   1f5a2:	c1 e0 02             	shl    eax,0x2
   1f5a5:	01 d0                	add    eax,edx
   1f5a7:	01 d8                	add    eax,ebx
   1f5a9:	83 c0 0a             	add    eax,0xa
   1f5ac:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:85
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
   1f5ae:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f5b2:	8d 50 ff             	lea    edx,[eax-0x1]
   1f5b5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f5b8:	0f b6 48 1c          	movzx  ecx,BYTE PTR [eax+0x1c]
   1f5bc:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f5bf:	89 d0                	mov    eax,edx
   1f5c1:	01 c0                	add    eax,eax
   1f5c3:	01 d0                	add    eax,edx
   1f5c5:	c1 e0 02             	shl    eax,0x2
   1f5c8:	01 d0                	add    eax,edx
   1f5ca:	01 d8                	add    eax,ebx
   1f5cc:	83 c0 0b             	add    eax,0xb
   1f5cf:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:86
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];
   1f5d1:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f5d5:	8d 50 ff             	lea    edx,[eax-0x1]
   1f5d8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f5db:	0f b6 48 1e          	movzx  ecx,BYTE PTR [eax+0x1e]
   1f5df:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f5e2:	89 d0                	mov    eax,edx
   1f5e4:	01 c0                	add    eax,eax
   1f5e6:	01 d0                	add    eax,edx
   1f5e8:	c1 e0 02             	shl    eax,0x2
   1f5eb:	01 d0                	add    eax,edx
   1f5ed:	01 d8                	add    eax,ebx
   1f5ef:	83 c0 0c             	add    eax,0xc
   1f5f2:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f5f4:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
   1f5f8:	eb 4e                	jmp    1f648 <fatfs_lfn_cache_entry+0x25a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:89
        if (lfn->String[LFNIndex-1][i]==0xFF)
   1f5fa:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f5fe:	8d 50 ff             	lea    edx,[eax-0x1]
   1f601:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f605:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f608:	89 d0                	mov    eax,edx
   1f60a:	01 c0                	add    eax,eax
   1f60c:	01 d0                	add    eax,edx
   1f60e:	c1 e0 02             	shl    eax,0x2
   1f611:	01 d0                	add    eax,edx
   1f613:	01 d8                	add    eax,ebx
   1f615:	01 c8                	add    eax,ecx
   1f617:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f61a:	3c ff                	cmp    al,0xff
   1f61c:	75 20                	jne    1f63e <fatfs_lfn_cache_entry+0x250>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:90
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
   1f61e:	0f b6 45 fa          	movzx  eax,BYTE PTR [ebp-0x6]
   1f622:	8d 50 ff             	lea    edx,[eax-0x1]
   1f625:	0f b6 4d fb          	movzx  ecx,BYTE PTR [ebp-0x5]
   1f629:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1f62c:	89 d0                	mov    eax,edx
   1f62e:	01 c0                	add    eax,eax
   1f630:	01 d0                	add    eax,edx
   1f632:	c1 e0 02             	shl    eax,0x2
   1f635:	01 d0                	add    eax,edx
   1f637:	01 d8                	add    eax,ebx
   1f639:	01 c8                	add    eax,ecx
   1f63b:	c6 00 20             	mov    BYTE PTR [eax],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 2)
    lfn->String[LFNIndex-1][9] = entryBuffer[0x16];
    lfn->String[LFNIndex-1][10] = entryBuffer[0x18];
    lfn->String[LFNIndex-1][11] = entryBuffer[0x1C];
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
   1f63e:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   1f642:	83 c0 01             	add    eax,0x1
   1f645:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:88 (discriminator 1)
   1f648:	80 7d fb 0c          	cmp    BYTE PTR [ebp-0x5],0xc
   1f64c:	76 ac                	jbe    1f5fa <fatfs_lfn_cache_entry+0x20c>
   1f64e:	eb 04                	jmp    1f654 <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:65
    uint8 LFNIndex, i;
    LFNIndex = entryBuffer[0] & 0x1F;

    // Limit file name to cache size!
    if (LFNIndex > MAX_LONGFILENAME_ENTRIES)
        return ;
   1f650:	90                   	nop
   1f651:	eb 01                	jmp    1f654 <fatfs_lfn_cache_entry+0x266>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:69

    // This is an error condition
    if (LFNIndex == 0)
        return ;
   1f653:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:91
    lfn->String[LFNIndex-1][12] = entryBuffer[0x1E];

    for (i=0; i<MAX_LFN_ENTRY_LENGTH; i++)
        if (lfn->String[LFNIndex-1][i]==0xFF)
            lfn->String[LFNIndex-1][i] = 0x20; // Replace with spaces
}
   1f654:	83 c4 10             	add    esp,0x10
   1f657:	5b                   	pop    ebx
   1f658:	5d                   	pop    ebp
   1f659:	c3                   	ret    

0001f65a <fatfs_lfn_cache_get>:
fatfs_lfn_cache_get():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:98
//-----------------------------------------------------------------------------
// fatfs_lfn_cache_get: Get a reference to the long filename
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
char* fatfs_lfn_cache_get(struct lfn_cache *lfn)
{
   1f65a:	55                   	push   ebp
   1f65b:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:100
    // Null terminate long filename
    if (lfn->no_of_strings == MAX_LONGFILENAME_ENTRIES)
   1f65d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f660:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f667:	3c 14                	cmp    al,0x14
   1f669:	75 0c                	jne    1f677 <fatfs_lfn_cache_get+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:101
        lfn->Null = '\0';
   1f66b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f66e:	c6 80 04 01 00 00 00 	mov    BYTE PTR [eax+0x104],0x0
   1f675:	eb 36                	jmp    1f6ad <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:102
    else if (lfn->no_of_strings)
   1f677:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f67a:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f681:	84 c0                	test   al,al
   1f683:	74 22                	je     1f6a7 <fatfs_lfn_cache_get+0x4d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:103
        lfn->String[lfn->no_of_strings][0] = '\0';
   1f685:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f688:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
   1f68f:	0f b6 d0             	movzx  edx,al
   1f692:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   1f695:	89 d0                	mov    eax,edx
   1f697:	01 c0                	add    eax,eax
   1f699:	01 d0                	add    eax,edx
   1f69b:	c1 e0 02             	shl    eax,0x2
   1f69e:	01 d0                	add    eax,edx
   1f6a0:	01 c8                	add    eax,ecx
   1f6a2:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f6a5:	eb 06                	jmp    1f6ad <fatfs_lfn_cache_get+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:105
    else
        lfn->String[0][0] = '\0';
   1f6a7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f6aa:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:107

    return (char*)&lfn->String[0][0];
   1f6ad:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:108
}
   1f6b0:	5d                   	pop    ebp
   1f6b1:	c3                   	ret    

0001f6b2 <fatfs_entry_lfn_text>:
fatfs_entry_lfn_text():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:115
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_text: If LFN text entry found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_text(struct fat_dir_entry *entry)
{
   1f6b2:	55                   	push   ebp
   1f6b3:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:116
    if ((entry->Attr & FILE_ATTR_LFN_TEXT) == FILE_ATTR_LFN_TEXT)
   1f6b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f6b8:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f6bc:	0f b6 c0             	movzx  eax,al
   1f6bf:	83 e0 0f             	and    eax,0xf
   1f6c2:	83 f8 0f             	cmp    eax,0xf
   1f6c5:	75 07                	jne    1f6ce <fatfs_entry_lfn_text+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:117
        return 1;
   1f6c7:	b8 01 00 00 00       	mov    eax,0x1
   1f6cc:	eb 05                	jmp    1f6d3 <fatfs_entry_lfn_text+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:119
    else
        return 0;
   1f6ce:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:120
}
   1f6d3:	5d                   	pop    ebp
   1f6d4:	c3                   	ret    

0001f6d5 <fatfs_entry_lfn_invalid>:
fatfs_entry_lfn_invalid():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:127
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
   1f6d5:	55                   	push   ebp
   1f6d6:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f6d8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f6db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f6de:	84 c0                	test   al,al
   1f6e0:	74 26                	je     1f708 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129 (discriminator 1)
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f6e2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f6e5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:128 (discriminator 1)
// fatfs_entry_lfn_invalid: If SFN found not relating to LFN
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
   1f6e8:	3c e5                	cmp    al,0xe5
   1f6ea:	74 1c                	je     1f708 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f6ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f6ef:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:129
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
   1f6f3:	3c 08                	cmp    al,0x8
   1f6f5:	74 11                	je     1f708 <fatfs_entry_lfn_invalid+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:131
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
         (entry->Attr & FILE_ATTR_SYSHID) )
   1f6f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f6fa:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f6fe:	0f b6 c0             	movzx  eax,al
   1f701:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:130
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_invalid(struct fat_dir_entry *entry)
{
    if ( (entry->Name[0]==FILE_HEADER_BLANK)  ||
         (entry->Name[0]==FILE_HEADER_DELETED)||
         (entry->Attr==FILE_ATTR_VOLUME_ID) ||
   1f704:	85 c0                	test   eax,eax
   1f706:	74 07                	je     1f70f <fatfs_entry_lfn_invalid+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:132
         (entry->Attr & FILE_ATTR_SYSHID) )
        return 1;
   1f708:	b8 01 00 00 00       	mov    eax,0x1
   1f70d:	eb 05                	jmp    1f714 <fatfs_entry_lfn_invalid+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:134
    else
        return 0;
   1f70f:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:135
}
   1f714:	5d                   	pop    ebp
   1f715:	c3                   	ret    

0001f716 <fatfs_entry_lfn_exists>:
fatfs_entry_lfn_exists():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:142
//-----------------------------------------------------------------------------
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
   1f716:	55                   	push   ebp
   1f717:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f719:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f71c:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f720:	3c 0f                	cmp    al,0xf
   1f722:	74 45                	je     1f769 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f724:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f727:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:143 (discriminator 1)
// fatfs_entry_lfn_exists: If LFN exists and correlation SFN found
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f72a:	84 c0                	test   al,al
   1f72c:	74 3b                	je     1f769 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f72e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f731:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:144
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f734:	3c e5                	cmp    al,0xe5
   1f736:	74 31                	je     1f769 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f738:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f73b:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:145
#if FATFS_INC_LFN_SUPPORT
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f73f:	3c 08                	cmp    al,0x8
   1f741:	74 26                	je     1f769 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f743:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f746:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f74a:	0f b6 c0             	movzx  eax,al
   1f74d:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:146
int fatfs_entry_lfn_exists(struct lfn_cache *lfn, struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f750:	85 c0                	test   eax,eax
   1f752:	75 15                	jne    1f769 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:148
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
         (lfn->no_of_strings) )
   1f754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f757:	0f b6 80 05 01 00 00 	movzx  eax,BYTE PTR [eax+0x105]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:147
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) &&
   1f75e:	84 c0                	test   al,al
   1f760:	74 07                	je     1f769 <fatfs_entry_lfn_exists+0x53>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:149
         (lfn->no_of_strings) )
        return 1;
   1f762:	b8 01 00 00 00       	mov    eax,0x1
   1f767:	eb 05                	jmp    1f76e <fatfs_entry_lfn_exists+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:151
    else
        return 0;
   1f769:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:152
}
   1f76e:	5d                   	pop    ebp
   1f76f:	c3                   	ret    

0001f770 <fatfs_entry_sfn_only>:
fatfs_entry_sfn_only():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:158
#endif
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
   1f770:	55                   	push   ebp
   1f771:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f773:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f776:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f77a:	3c 0f                	cmp    al,0xf
   1f77c:	74 37                	je     1f7b5 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160 (discriminator 1)
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f77e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f781:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:159 (discriminator 1)
//-----------------------------------------------------------------------------
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
   1f784:	84 c0                	test   al,al
   1f786:	74 2d                	je     1f7b5 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f788:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f78b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:160
// fatfs_entry_sfn_only: If SFN only exists
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
   1f78e:	3c e5                	cmp    al,0xe5
   1f790:	74 23                	je     1f7b5 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f792:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f795:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:161
//-----------------------------------------------------------------------------
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
   1f799:	3c 08                	cmp    al,0x8
   1f79b:	74 18                	je     1f7b5 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:163
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
   1f79d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f7a0:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f7a4:	0f b6 c0             	movzx  eax,al
   1f7a7:	83 e0 06             	and    eax,0x6
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:162
int fatfs_entry_sfn_only(struct fat_dir_entry *entry)
{
    if ( (entry->Attr!=FILE_ATTR_LFN_TEXT) &&
         (entry->Name[0]!=FILE_HEADER_BLANK) &&
         (entry->Name[0]!=FILE_HEADER_DELETED) &&
         (entry->Attr!=FILE_ATTR_VOLUME_ID) &&
   1f7aa:	85 c0                	test   eax,eax
   1f7ac:	75 07                	jne    1f7b5 <fatfs_entry_sfn_only+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:164
         (!(entry->Attr&FILE_ATTR_SYSHID)) )
        return 1;
   1f7ae:	b8 01 00 00 00       	mov    eax,0x1
   1f7b3:	eb 05                	jmp    1f7ba <fatfs_entry_sfn_only+0x4a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:166
    else
        return 0;
   1f7b5:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:167
}
   1f7ba:	5d                   	pop    ebp
   1f7bb:	c3                   	ret    

0001f7bc <fatfs_entry_is_dir>:
fatfs_entry_is_dir():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:173
// TODO: FILE_ATTR_SYSHID ?!?!??!
//-----------------------------------------------------------------------------
// fatfs_entry_is_dir: Returns 1 if a directory
//-----------------------------------------------------------------------------
int fatfs_entry_is_dir(struct fat_dir_entry *entry)
{
   1f7bc:	55                   	push   ebp
   1f7bd:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:174
    if (entry->Attr & FILE_TYPE_DIR)
   1f7bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f7c2:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f7c6:	0f b6 c0             	movzx  eax,al
   1f7c9:	83 e0 10             	and    eax,0x10
   1f7cc:	85 c0                	test   eax,eax
   1f7ce:	74 07                	je     1f7d7 <fatfs_entry_is_dir+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:175
        return 1;
   1f7d0:	b8 01 00 00 00       	mov    eax,0x1
   1f7d5:	eb 05                	jmp    1f7dc <fatfs_entry_is_dir+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:177
    else
        return 0;
   1f7d7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:178
}
   1f7dc:	5d                   	pop    ebp
   1f7dd:	c3                   	ret    

0001f7de <fatfs_entry_is_file>:
fatfs_entry_is_file():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:183
//-----------------------------------------------------------------------------
// fatfs_entry_is_file: Returns 1 is a file entry
//-----------------------------------------------------------------------------
int fatfs_entry_is_file(struct fat_dir_entry *entry)
{
   1f7de:	55                   	push   ebp
   1f7df:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:184
    if (entry->Attr & FILE_TYPE_FILE)
   1f7e1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f7e4:	0f b6 40 0b          	movzx  eax,BYTE PTR [eax+0xb]
   1f7e8:	0f b6 c0             	movzx  eax,al
   1f7eb:	83 e0 20             	and    eax,0x20
   1f7ee:	85 c0                	test   eax,eax
   1f7f0:	74 07                	je     1f7f9 <fatfs_entry_is_file+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:185
        return 1;
   1f7f2:	b8 01 00 00 00       	mov    eax,0x1
   1f7f7:	eb 05                	jmp    1f7fe <fatfs_entry_is_file+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:187
    else
        return 0;
   1f7f9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:188
}
   1f7fe:	5d                   	pop    ebp
   1f7ff:	c3                   	ret    

0001f800 <fatfs_lfn_entries_required>:
fatfs_lfn_entries_required():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:194
//-----------------------------------------------------------------------------
// fatfs_lfn_entries_required: Calculate number of 13 characters entries
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
int fatfs_lfn_entries_required(char *filename)
{
   1f800:	55                   	push   ebp
   1f801:	89 e5                	mov    ebp,esp
   1f803:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:195
    int length = (int)strlen(filename);
   1f806:	83 ec 0c             	sub    esp,0xc
   1f809:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f80c:	e8 c7 7e 00 00       	call   276d8 <strlen>
   1f811:	83 c4 10             	add    esp,0x10
   1f814:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:197

    if (length)
   1f817:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   1f81b:	74 1d                	je     1f83a <fatfs_lfn_entries_required+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:198
        return (length + MAX_LFN_ENTRY_LENGTH - 1) / MAX_LFN_ENTRY_LENGTH;
   1f81d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f820:	8d 48 0c             	lea    ecx,[eax+0xc]
   1f823:	ba 4f ec c4 4e       	mov    edx,0x4ec4ec4f
   1f828:	89 c8                	mov    eax,ecx
   1f82a:	f7 ea                	imul   edx
   1f82c:	c1 fa 02             	sar    edx,0x2
   1f82f:	89 c8                	mov    eax,ecx
   1f831:	c1 f8 1f             	sar    eax,0x1f
   1f834:	29 c2                	sub    edx,eax
   1f836:	89 d0                	mov    eax,edx
   1f838:	eb 05                	jmp    1f83f <fatfs_lfn_entries_required+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:200
    else
        return 0;
   1f83a:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:201
}
   1f83f:	c9                   	leave  
   1f840:	c3                   	ret    

0001f841 <fatfs_filename_to_lfn>:
fatfs_filename_to_lfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:208
//-----------------------------------------------------------------------------
// fatfs_filename_to_lfn:
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
void fatfs_filename_to_lfn(char *filename, uint8 *buffer, int entry, uint8 sfnChk)
{
   1f841:	55                   	push   ebp
   1f842:	89 e5                	mov    ebp,esp
   1f844:	83 ec 68             	sub    esp,0x68
   1f847:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f84a:	88 45 a4             	mov    BYTE PTR [ebp-0x5c],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:210
    int i;
    int nameIndexes[MAX_LFN_ENTRY_LENGTH] = {1,3,5,7,9,0x0E,0x10,0x12,0x14,0x16,0x18,0x1C,0x1E};
   1f84d:	c7 45 b4 01 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x1
   1f854:	c7 45 b8 03 00 00 00 	mov    DWORD PTR [ebp-0x48],0x3
   1f85b:	c7 45 bc 05 00 00 00 	mov    DWORD PTR [ebp-0x44],0x5
   1f862:	c7 45 c0 07 00 00 00 	mov    DWORD PTR [ebp-0x40],0x7
   1f869:	c7 45 c4 09 00 00 00 	mov    DWORD PTR [ebp-0x3c],0x9
   1f870:	c7 45 c8 0e 00 00 00 	mov    DWORD PTR [ebp-0x38],0xe
   1f877:	c7 45 cc 10 00 00 00 	mov    DWORD PTR [ebp-0x34],0x10
   1f87e:	c7 45 d0 12 00 00 00 	mov    DWORD PTR [ebp-0x30],0x12
   1f885:	c7 45 d4 14 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x14
   1f88c:	c7 45 d8 16 00 00 00 	mov    DWORD PTR [ebp-0x28],0x16
   1f893:	c7 45 dc 18 00 00 00 	mov    DWORD PTR [ebp-0x24],0x18
   1f89a:	c7 45 e0 1c 00 00 00 	mov    DWORD PTR [ebp-0x20],0x1c
   1f8a1:	c7 45 e4 1e 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:213

    // 13 characters entries
    int length = (int)strlen(filename);
   1f8a8:	83 ec 0c             	sub    esp,0xc
   1f8ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f8ae:	e8 25 7e 00 00       	call   276d8 <strlen>
   1f8b3:	83 c4 10             	add    esp,0x10
   1f8b6:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:214
    int entriesRequired = fatfs_lfn_entries_required(filename);
   1f8b9:	83 ec 0c             	sub    esp,0xc
   1f8bc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1f8bf:	e8 3c ff ff ff       	call   1f800 <fatfs_lfn_entries_required>
   1f8c4:	83 c4 10             	add    esp,0x10
   1f8c7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:217

    // Filename offset
    int start = entry * MAX_LFN_ENTRY_LENGTH;
   1f8ca:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   1f8cd:	89 d0                	mov    eax,edx
   1f8cf:	01 c0                	add    eax,eax
   1f8d1:	01 d0                	add    eax,edx
   1f8d3:	c1 e0 02             	shl    eax,0x2
   1f8d6:	01 d0                	add    eax,edx
   1f8d8:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:220

    // Initialise to zeros
    memset(buffer, 0x00, FAT_DIR_ENTRY_SIZE);
   1f8db:	83 ec 04             	sub    esp,0x4
   1f8de:	6a 20                	push   0x20
   1f8e0:	6a 00                	push   0x0
   1f8e2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1f8e5:	e8 d7 5a 00 00       	call   253c1 <memset>
   1f8ea:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223

    // LFN entry number
    buffer[0] = (uint8)(((entriesRequired-1)==entry)?(0x40|(entry+1)):(entry+1));
   1f8ed:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1f8f0:	83 e8 01             	sub    eax,0x1
   1f8f3:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   1f8f6:	75 0d                	jne    1f905 <fatfs_filename_to_lfn+0xc4>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 1)
   1f8f8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f8fb:	83 c0 01             	add    eax,0x1
   1f8fe:	83 c8 40             	or     eax,0x40
   1f901:	89 c2                	mov    edx,eax
   1f903:	eb 06                	jmp    1f90b <fatfs_filename_to_lfn+0xca>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 2)
   1f905:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1f908:	8d 50 01             	lea    edx,[eax+0x1]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:223 (discriminator 4)
   1f90b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f90e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:226 (discriminator 4)

    // LFN flag
    buffer[11] = 0x0F;
   1f910:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f913:	83 c0 0b             	add    eax,0xb
   1f916:	c6 00 0f             	mov    BYTE PTR [eax],0xf
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:229 (discriminator 4)

    // Checksum of short filename
    buffer[13] = sfnChk;
   1f919:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f91c:	8d 50 0d             	lea    edx,[eax+0xd]
   1f91f:	0f b6 45 a4          	movzx  eax,BYTE PTR [ebp-0x5c]
   1f923:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 4)

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1f925:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1f92c:	eb 78                	jmp    1f9a6 <fatfs_filename_to_lfn+0x165>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:234
    {
        if ( (start+i) < length )
   1f92e:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1f931:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f934:	01 d0                	add    eax,edx
   1f936:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1f939:	7d 24                	jge    1f95f <fatfs_filename_to_lfn+0x11e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:235
            buffer[nameIndexes[i]] = filename[start+i];
   1f93b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f93e:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f942:	89 c2                	mov    edx,eax
   1f944:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f947:	01 d0                	add    eax,edx
   1f949:	8b 4d e8             	mov    ecx,DWORD PTR [ebp-0x18]
   1f94c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1f94f:	01 ca                	add    edx,ecx
   1f951:	89 d1                	mov    ecx,edx
   1f953:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1f956:	01 ca                	add    edx,ecx
   1f958:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1f95b:	88 10                	mov    BYTE PTR [eax],dl
   1f95d:	eb 43                	jmp    1f9a2 <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:236
        else if ( (start+i) == length )
   1f95f:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   1f962:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f965:	01 d0                	add    eax,edx
   1f967:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   1f96a:	75 13                	jne    1f97f <fatfs_filename_to_lfn+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:237
            buffer[nameIndexes[i]] = 0x00;
   1f96c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f96f:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f973:	89 c2                	mov    edx,eax
   1f975:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f978:	01 d0                	add    eax,edx
   1f97a:	c6 00 00             	mov    BYTE PTR [eax],0x0
   1f97d:	eb 23                	jmp    1f9a2 <fatfs_filename_to_lfn+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:240
        else
        {
            buffer[nameIndexes[i]] = 0xFF;
   1f97f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f982:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f986:	89 c2                	mov    edx,eax
   1f988:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f98b:	01 d0                	add    eax,edx
   1f98d:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:241
            buffer[nameIndexes[i]+1] = 0xFF;
   1f990:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1f993:	8b 44 85 b4          	mov    eax,DWORD PTR [ebp+eax*4-0x4c]
   1f997:	8d 50 01             	lea    edx,[eax+0x1]
   1f99a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1f99d:	01 d0                	add    eax,edx
   1f99f:	c6 00 ff             	mov    BYTE PTR [eax],0xff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 2)

    // Checksum of short filename
    buffer[13] = sfnChk;

    // Copy to buffer
    for (i=0;i<MAX_LFN_ENTRY_LENGTH;i++)
   1f9a2:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:232 (discriminator 1)
   1f9a6:	83 7d f4 0c          	cmp    DWORD PTR [ebp-0xc],0xc
   1f9aa:	7e 82                	jle    1f92e <fatfs_filename_to_lfn+0xed>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:244
        {
            buffer[nameIndexes[i]] = 0xFF;
            buffer[nameIndexes[i]+1] = 0xFF;
        }
    }
}
   1f9ac:	90                   	nop
   1f9ad:	c9                   	leave  
   1f9ae:	c3                   	ret    

0001f9af <fatfs_sfn_create_entry>:
fatfs_sfn_create_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:251
//-----------------------------------------------------------------------------
// fatfs_sfn_create_entry: Create the short filename directory entry
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
   1f9af:	55                   	push   ebp
   1f9b0:	89 e5                	mov    ebp,esp
   1f9b2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1f9b5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
   1f9bc:	eb 1b                	jmp    1f9d9 <fatfs_sfn_create_entry+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:256 (discriminator 3)
        entry->Name[i] = shortfilename[i];
   1f9be:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   1f9c1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1f9c4:	01 d0                	add    eax,edx
   1f9c6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1f9c9:	89 c1                	mov    ecx,eax
   1f9cb:	8b 55 14             	mov    edx,DWORD PTR [ebp+0x14]
   1f9ce:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1f9d1:	01 d0                	add    eax,edx
   1f9d3:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 3)
void fatfs_sfn_create_entry(char *shortfilename, uint32 size, uint32 startCluster, struct fat_dir_entry *entry, int dir)
{
    int i;

    // Copy short filename
    for (i=0;i<FAT_SFN_SIZE_FULL;i++)
   1f9d5:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:255 (discriminator 1)
   1f9d9:	83 7d fc 0a          	cmp    DWORD PTR [ebp-0x4],0xa
   1f9dd:	7e df                	jle    1f9be <fatfs_sfn_create_entry+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:259
        entry->Name[i] = shortfilename[i];

    // Unless we have a RTC we might as well set these to 1980
    entry->CrtTimeTenth = 0x00;
   1f9df:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f9e2:	c6 40 0d 00          	mov    BYTE PTR [eax+0xd],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:260
    entry->CrtTime[1] = entry->CrtTime[0] = 0x00;
   1f9e6:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f9e9:	c6 40 0e 00          	mov    BYTE PTR [eax+0xe],0x0
   1f9ed:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f9f0:	0f b6 50 0e          	movzx  edx,BYTE PTR [eax+0xe]
   1f9f4:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f9f7:	88 50 0f             	mov    BYTE PTR [eax+0xf],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:261
    entry->CrtDate[1] = 0x00;
   1f9fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1f9fd:	c6 40 11 00          	mov    BYTE PTR [eax+0x11],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:262
    entry->CrtDate[0] = 0x20;
   1fa01:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa04:	c6 40 10 20          	mov    BYTE PTR [eax+0x10],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:263
    entry->LstAccDate[1] = 0x00;
   1fa08:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa0b:	c6 40 13 00          	mov    BYTE PTR [eax+0x13],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:264
    entry->LstAccDate[0] = 0x20;
   1fa0f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa12:	c6 40 12 20          	mov    BYTE PTR [eax+0x12],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:265
    entry->WrtTime[1] = entry->WrtTime[0] = 0x00;
   1fa16:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa19:	c6 40 16 00          	mov    BYTE PTR [eax+0x16],0x0
   1fa1d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa20:	0f b6 50 16          	movzx  edx,BYTE PTR [eax+0x16]
   1fa24:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa27:	88 50 17             	mov    BYTE PTR [eax+0x17],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:266
    entry->WrtDate[1] = 0x00;
   1fa2a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa2d:	c6 40 19 00          	mov    BYTE PTR [eax+0x19],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:267
    entry->WrtDate[0] = 0x20;
   1fa31:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa34:	c6 40 18 20          	mov    BYTE PTR [eax+0x18],0x20
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:269

    if (!dir)
   1fa38:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   1fa3c:	75 09                	jne    1fa47 <fatfs_sfn_create_entry+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:270
        entry->Attr = FILE_TYPE_FILE;
   1fa3e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa41:	c6 40 0b 20          	mov    BYTE PTR [eax+0xb],0x20
   1fa45:	eb 07                	jmp    1fa4e <fatfs_sfn_create_entry+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:272
    else
        entry->Attr = FILE_TYPE_DIR;
   1fa47:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa4a:	c6 40 0b 10          	mov    BYTE PTR [eax+0xb],0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:274

    entry->NTRes = 0x00;
   1fa4e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa51:	c6 40 0c 00          	mov    BYTE PTR [eax+0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:276

    entry->FstClusHI = FAT_HTONS((uint16)((startCluster>>16) & 0xFFFF));
   1fa55:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fa58:	c1 e8 10             	shr    eax,0x10
   1fa5b:	89 c2                	mov    edx,eax
   1fa5d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa60:	66 89 50 14          	mov    WORD PTR [eax+0x14],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:277
    entry->FstClusLO = FAT_HTONS((uint16)((startCluster>>0) & 0xFFFF));
   1fa64:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fa67:	89 c2                	mov    edx,eax
   1fa69:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa6c:	66 89 50 1a          	mov    WORD PTR [eax+0x1a],dx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:278
    entry->FileSize = FAT_HTONL(size);
   1fa70:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fa73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1fa76:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:279
}
   1fa79:	90                   	nop
   1fa7a:	c9                   	leave  
   1fa7b:	c3                   	ret    

0001fa7c <fatfs_lfn_create_sfn>:
fatfs_lfn_create_sfn():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:286
//-----------------------------------------------------------------------------
// fatfs_lfn_create_sfn: Create a padded SFN
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_create_sfn(char *sfn_output, char *filename)
{
   1fa7c:	55                   	push   ebp
   1fa7d:	89 e5                	mov    ebp,esp
   1fa7f:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:288
    int i;
    int dotPos = -1;
   1fa82:	c7 45 f0 ff ff ff ff 	mov    DWORD PTR [ebp-0x10],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:291
    char ext[3];
    int pos;
    int len = (int)strlen(filename);
   1fa89:	83 ec 0c             	sub    esp,0xc
   1fa8c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fa8f:	e8 44 7c 00 00       	call   276d8 <strlen>
   1fa94:	83 c4 10             	add    esp,0x10
   1fa97:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:294

    // Invalid to start with .
    if (filename[0]=='.')
   1fa9a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fa9d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1faa0:	3c 2e                	cmp    al,0x2e
   1faa2:	75 0a                	jne    1faae <fatfs_lfn_create_sfn+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:295
        return 0;
   1faa4:	b8 00 00 00 00       	mov    eax,0x0
   1faa9:	e9 a5 01 00 00       	jmp    1fc53 <fatfs_lfn_create_sfn+0x1d7>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:297

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
   1faae:	83 ec 04             	sub    esp,0x4
   1fab1:	6a 0b                	push   0xb
   1fab3:	6a 20                	push   0x20
   1fab5:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fab8:	e8 04 59 00 00       	call   253c1 <memset>
   1fabd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:298
    memset(ext, ' ', 3);
   1fac0:	83 ec 04             	sub    esp,0x4
   1fac3:	6a 03                	push   0x3
   1fac5:	6a 20                	push   0x20
   1fac7:	8d 45 e5             	lea    eax,[ebp-0x1b]
   1faca:	50                   	push   eax
   1facb:	e8 f1 58 00 00       	call   253c1 <memset>
   1fad0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301

    // Find dot seperator
    for (i = 0; i< len; i++)
   1fad3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fada:	eb 19                	jmp    1faf5 <fatfs_lfn_create_sfn+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:303
    {
        if (filename[i]=='.')
   1fadc:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fadf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fae2:	01 d0                	add    eax,edx
   1fae4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fae7:	3c 2e                	cmp    al,0x2e
   1fae9:	75 06                	jne    1faf1 <fatfs_lfn_create_sfn+0x75>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:304
            dotPos = i;
   1faeb:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1faee:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 2)

    memset(sfn_output, ' ', FAT_SFN_SIZE_FULL);
    memset(ext, ' ', 3);

    // Find dot seperator
    for (i = 0; i< len; i++)
   1faf1:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:301 (discriminator 1)
   1faf5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1faf8:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1fafb:	7c df                	jl     1fadc <fatfs_lfn_create_sfn+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:308
        if (filename[i]=='.')
            dotPos = i;
    }

    // Extract extensions
    if (dotPos!=-1)
   1fafd:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   1fb01:	74 44                	je     1fb47 <fatfs_lfn_create_sfn+0xcb>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1fb03:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fb06:	83 c0 01             	add    eax,0x1
   1fb09:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   1fb0c:	eb 28                	jmp    1fb36 <fatfs_lfn_create_sfn+0xba>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:312
            if (i<len)
   1fb0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fb11:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1fb14:	7d 1c                	jge    1fb32 <fatfs_lfn_create_sfn+0xb6>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:313
                ext[i-(dotPos+1)] = filename[i];
   1fb16:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fb19:	8d 50 01             	lea    edx,[eax+0x1]
   1fb1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fb1f:	29 d0                	sub    eax,edx
   1fb21:	89 c2                	mov    edx,eax
   1fb23:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1fb26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb29:	01 c8                	add    eax,ecx
   1fb2b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fb2e:	88 44 15 e5          	mov    BYTE PTR [ebp+edx*1-0x1b],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 2)

    // Extract extensions
    if (dotPos!=-1)
    {
        // Copy first three chars of extension
        for (i = (dotPos+1); i < (dotPos+1+3); i++)
   1fb32:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:311 (discriminator 1)
   1fb36:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fb39:	83 c0 04             	add    eax,0x4
   1fb3c:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   1fb3f:	7f cd                	jg     1fb0e <fatfs_lfn_create_sfn+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:316
            if (i<len)
                ext[i-(dotPos+1)] = filename[i];

        // Shorten the length to the dot position
        len = dotPos;
   1fb41:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   1fb44:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:320
    }

    // Add filename part
    pos = 0;
   1fb47:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321
    for (i=0;i<len;i++)
   1fb4e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   1fb55:	e9 85 00 00 00       	jmp    1fbdf <fatfs_lfn_create_sfn+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323
    {
        if ( (filename[i]!=' ') && (filename[i]!='.') )
   1fb5a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fb5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb60:	01 d0                	add    eax,edx
   1fb62:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fb65:	3c 20                	cmp    al,0x20
   1fb67:	74 6c                	je     1fbd5 <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:323 (discriminator 1)
   1fb69:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fb6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb6f:	01 d0                	add    eax,edx
   1fb71:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fb74:	3c 2e                	cmp    al,0x2e
   1fb76:	74 5d                	je     1fbd5 <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325
        {
            if (filename[i] >= 'a' && filename[i] <= 'z')
   1fb78:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fb7b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb7e:	01 d0                	add    eax,edx
   1fb80:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fb83:	3c 60                	cmp    al,0x60
   1fb85:	7e 31                	jle    1fbb8 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:325 (discriminator 1)
   1fb87:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fb8a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fb8d:	01 d0                	add    eax,edx
   1fb8f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fb92:	3c 7a                	cmp    al,0x7a
   1fb94:	7f 22                	jg     1fbb8 <fatfs_lfn_create_sfn+0x13c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:326
                sfn_output[pos++] = filename[i] - 'a' + 'A';
   1fb96:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fb99:	8d 50 01             	lea    edx,[eax+0x1]
   1fb9c:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1fb9f:	89 c2                	mov    edx,eax
   1fba1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fba4:	01 d0                	add    eax,edx
   1fba6:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1fba9:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   1fbac:	01 ca                	add    edx,ecx
   1fbae:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1fbb1:	83 ea 20             	sub    edx,0x20
   1fbb4:	88 10                	mov    BYTE PTR [eax],dl
   1fbb6:	eb 1d                	jmp    1fbd5 <fatfs_lfn_create_sfn+0x159>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:328
            else
                sfn_output[pos++] = filename[i];
   1fbb8:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   1fbbb:	8d 50 01             	lea    edx,[eax+0x1]
   1fbbe:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   1fbc1:	89 c2                	mov    edx,eax
   1fbc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fbc6:	01 c2                	add    edx,eax
   1fbc8:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   1fbcb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fbce:	01 c8                	add    eax,ecx
   1fbd0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1fbd3:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:332
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
   1fbd5:	83 7d ec 08          	cmp    DWORD PTR [ebp-0x14],0x8
   1fbd9:	74 12                	je     1fbed <fatfs_lfn_create_sfn+0x171>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 2)
        len = dotPos;
    }

    // Add filename part
    pos = 0;
    for (i=0;i<len;i++)
   1fbdb:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:321 (discriminator 1)
   1fbdf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbe2:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   1fbe5:	0f 8c 6f ff ff ff    	jl     1fb5a <fatfs_lfn_create_sfn+0xde>
   1fbeb:	eb 01                	jmp    1fbee <fatfs_lfn_create_sfn+0x172>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:333
                sfn_output[pos++] = filename[i];
        }

        // Fill upto 8 characters
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
   1fbed:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1fbee:	c7 45 f4 08 00 00 00 	mov    DWORD PTR [ebp-0xc],0x8
   1fbf5:	eb 51                	jmp    1fc48 <fatfs_lfn_create_sfn+0x1cc>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339
    {
        if (ext[i-FAT_SFN_SIZE_PARTIAL] >= 'a' && ext[i-FAT_SFN_SIZE_PARTIAL] <= 'z')
   1fbf7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fbfa:	83 e8 08             	sub    eax,0x8
   1fbfd:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1fc02:	3c 60                	cmp    al,0x60
   1fc04:	7e 29                	jle    1fc2f <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:339 (discriminator 1)
   1fc06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fc09:	83 e8 08             	sub    eax,0x8
   1fc0c:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1fc11:	3c 7a                	cmp    al,0x7a
   1fc13:	7f 1a                	jg     1fc2f <fatfs_lfn_create_sfn+0x1b3>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:340
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
   1fc15:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fc18:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc1b:	01 d0                	add    eax,edx
   1fc1d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fc20:	83 ea 08             	sub    edx,0x8
   1fc23:	0f b6 54 15 e5       	movzx  edx,BYTE PTR [ebp+edx*1-0x1b]
   1fc28:	83 ea 20             	sub    edx,0x20
   1fc2b:	88 10                	mov    BYTE PTR [eax],dl
   1fc2d:	eb 15                	jmp    1fc44 <fatfs_lfn_create_sfn+0x1c8>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:342
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
   1fc2f:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   1fc32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fc35:	01 c2                	add    edx,eax
   1fc37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fc3a:	83 e8 08             	sub    eax,0x8
   1fc3d:	0f b6 44 05 e5       	movzx  eax,BYTE PTR [ebp+eax*1-0x1b]
   1fc42:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 2)
        if (pos==FAT_SFN_SIZE_PARTIAL)
            break;
    }

    // Add extension part
    for (i=FAT_SFN_SIZE_PARTIAL;i<FAT_SFN_SIZE_FULL;i++)
   1fc44:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:337 (discriminator 1)
   1fc48:	83 7d f4 0a          	cmp    DWORD PTR [ebp-0xc],0xa
   1fc4c:	7e a9                	jle    1fbf7 <fatfs_lfn_create_sfn+0x17b>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:345
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL] - 'a' + 'A';
        else
            sfn_output[i] = ext[i-FAT_SFN_SIZE_PARTIAL];
    }

    return 1;
   1fc4e:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:346 (discriminator 1)
}
   1fc53:	c9                   	leave  
   1fc54:	c3                   	ret    

0001fc55 <fatfs_itoa>:
fatfs_itoa():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:351
//-----------------------------------------------------------------------------
// fatfs_itoa:
//-----------------------------------------------------------------------------
static void fatfs_itoa(uint32 num, char *s)
{
   1fc55:	55                   	push   ebp
   1fc56:	89 e5                	mov    ebp,esp
   1fc58:	53                   	push   ebx
   1fc59:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:354
    char* cp;
    char outbuf[12];
    const char digits[] = "0123456789ABCDEF";
   1fc5c:	c7 45 db 30 31 32 33 	mov    DWORD PTR [ebp-0x25],0x33323130
   1fc63:	c7 45 df 34 35 36 37 	mov    DWORD PTR [ebp-0x21],0x37363534
   1fc6a:	c7 45 e3 38 39 41 42 	mov    DWORD PTR [ebp-0x1d],0x42413938
   1fc71:	c7 45 e7 43 44 45 46 	mov    DWORD PTR [ebp-0x19],0x46454443
   1fc78:	c6 45 eb 00          	mov    BYTE PTR [ebp-0x15],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:357

    // Build string backwards
    cp = outbuf;
   1fc7c:	8d 45 ec             	lea    eax,[ebp-0x14]
   1fc7f:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:360 (discriminator 1)
    do
    {
        *cp++ = digits[(int)(num % 10)];
   1fc82:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   1fc85:	8d 41 01             	lea    eax,[ecx+0x1]
   1fc88:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   1fc8b:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   1fc8e:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1fc93:	89 d8                	mov    eax,ebx
   1fc95:	f7 e2                	mul    edx
   1fc97:	c1 ea 03             	shr    edx,0x3
   1fc9a:	89 d0                	mov    eax,edx
   1fc9c:	c1 e0 02             	shl    eax,0x2
   1fc9f:	01 d0                	add    eax,edx
   1fca1:	01 c0                	add    eax,eax
   1fca3:	29 c3                	sub    ebx,eax
   1fca5:	89 da                	mov    edx,ebx
   1fca7:	89 d0                	mov    eax,edx
   1fca9:	0f b6 44 05 db       	movzx  eax,BYTE PTR [ebp+eax*1-0x25]
   1fcae:	88 01                	mov    BYTE PTR [ecx],al
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:362 (discriminator 1)
    }
    while ((num /= 10) > 0);
   1fcb0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fcb3:	ba cd cc cc cc       	mov    edx,0xcccccccd
   1fcb8:	f7 e2                	mul    edx
   1fcba:	89 d0                	mov    eax,edx
   1fcbc:	c1 e8 03             	shr    eax,0x3
   1fcbf:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   1fcc2:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1fcc6:	75 ba                	jne    1fc82 <fatfs_itoa+0x2d>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:364

    *cp-- = 0;
   1fcc8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   1fccb:	8d 50 ff             	lea    edx,[eax-0x1]
   1fcce:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   1fcd1:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367

    // Copy in forwards
    while (cp >= outbuf)
   1fcd4:	eb 17                	jmp    1fced <fatfs_itoa+0x98>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:368
        *s++ = *cp--;
   1fcd6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fcd9:	8d 50 01             	lea    edx,[eax+0x1]
   1fcdc:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   1fcdf:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   1fce2:	8d 4a ff             	lea    ecx,[edx-0x1]
   1fce5:	89 4d f8             	mov    DWORD PTR [ebp-0x8],ecx
   1fce8:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   1fceb:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:367
    while ((num /= 10) > 0);

    *cp-- = 0;

    // Copy in forwards
    while (cp >= outbuf)
   1fced:	8d 45 ec             	lea    eax,[ebp-0x14]
   1fcf0:	39 45 f8             	cmp    DWORD PTR [ebp-0x8],eax
   1fcf3:	73 e1                	jae    1fcd6 <fatfs_itoa+0x81>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:370
        *s++ = *cp--;

    *s = 0;
   1fcf5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fcf8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:371
}
   1fcfb:	90                   	nop
   1fcfc:	83 c4 30             	add    esp,0x30
   1fcff:	5b                   	pop    ebx
   1fd00:	5d                   	pop    ebp
   1fd01:	c3                   	ret    

0001fd02 <fatfs_lfn_generate_tail>:
fatfs_lfn_generate_tail():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:381
// sfn_output = Output short filename with tail
//-----------------------------------------------------------------------------
#if FATFS_INC_LFN_SUPPORT
#if FATFS_INC_WRITE_SUPPORT
int fatfs_lfn_generate_tail(char *sfn_output, char *sfn_input, uint32 tailNum)
{
   1fd02:	55                   	push   ebp
   1fd03:	89 e5                	mov    ebp,esp
   1fd05:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:385
    int tail_chars;
    char tail_str[12];

    if (tailNum > 99999)
   1fd08:	81 7d 10 9f 86 01 00 	cmp    DWORD PTR [ebp+0x10],0x1869f
   1fd0f:	76 07                	jbe    1fd18 <fatfs_lfn_generate_tail+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:386
        return 0;
   1fd11:	b8 00 00 00 00       	mov    eax,0x0
   1fd16:	eb 79                	jmp    1fd91 <fatfs_lfn_generate_tail+0x8f>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:389

    // Convert to number
    memset(tail_str, 0x00, sizeof(tail_str));
   1fd18:	83 ec 04             	sub    esp,0x4
   1fd1b:	6a 0c                	push   0xc
   1fd1d:	6a 00                	push   0x0
   1fd1f:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fd22:	50                   	push   eax
   1fd23:	e8 99 56 00 00       	call   253c1 <memset>
   1fd28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:390
    tail_str[0] = '~';
   1fd2b:	c6 45 e8 7e          	mov    BYTE PTR [ebp-0x18],0x7e
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:391
    fatfs_itoa(tailNum, tail_str+1);
   1fd2f:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fd32:	83 c0 01             	add    eax,0x1
   1fd35:	83 ec 08             	sub    esp,0x8
   1fd38:	50                   	push   eax
   1fd39:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   1fd3c:	e8 14 ff ff ff       	call   1fc55 <fatfs_itoa>
   1fd41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:394

    // Copy in base filename
    memcpy(sfn_output, sfn_input, FAT_SFN_SIZE_FULL);
   1fd44:	83 ec 04             	sub    esp,0x4
   1fd47:	6a 0b                	push   0xb
   1fd49:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   1fd4c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fd4f:	e8 18 61 00 00       	call   25e6c <memcpy>
   1fd54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:397

    // Overwrite with tail
    tail_chars = (int)strlen(tail_str);
   1fd57:	83 ec 0c             	sub    esp,0xc
   1fd5a:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fd5d:	50                   	push   eax
   1fd5e:	e8 75 79 00 00       	call   276d8 <strlen>
   1fd63:	83 c4 10             	add    esp,0x10
   1fd66:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:398
    memcpy(sfn_output+(FAT_SFN_SIZE_PARTIAL-tail_chars), tail_str, tail_chars);
   1fd69:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   1fd6c:	ba 08 00 00 00       	mov    edx,0x8
   1fd71:	2b 55 f4             	sub    edx,DWORD PTR [ebp-0xc]
   1fd74:	89 d1                	mov    ecx,edx
   1fd76:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   1fd79:	01 ca                	add    edx,ecx
   1fd7b:	83 ec 04             	sub    esp,0x4
   1fd7e:	50                   	push   eax
   1fd7f:	8d 45 e8             	lea    eax,[ebp-0x18]
   1fd82:	50                   	push   eax
   1fd83:	52                   	push   edx
   1fd84:	e8 e3 60 00 00       	call   25e6c <memcpy>
   1fd89:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:400

    return 1;
   1fd8c:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:401 (discriminator 1)
}
   1fd91:	c9                   	leave  
   1fd92:	c3                   	ret    

0001fd93 <fatfs_convert_from_fat_time>:
fatfs_convert_from_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:409
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_time: Convert FAT time to h/m/s
//-----------------------------------------------------------------------------
#if FATFS_INC_TIME_DATE_SUPPORT
void fatfs_convert_from_fat_time(uint16 fat_time, int *hours, int *minutes, int *seconds)
{
   1fd93:	55                   	push   ebp
   1fd94:	89 e5                	mov    ebp,esp
   1fd96:	83 ec 04             	sub    esp,0x4
   1fd99:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fd9c:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:410
    *hours = (fat_time >> FAT_TIME_HOURS_SHIFT) & FAT_TIME_HOURS_MASK;
   1fda0:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fda4:	66 c1 e8 0b          	shr    ax,0xb
   1fda8:	0f b7 c0             	movzx  eax,ax
   1fdab:	83 e0 1f             	and    eax,0x1f
   1fdae:	89 c2                	mov    edx,eax
   1fdb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fdb3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:411
    *minutes = (fat_time >> FAT_TIME_MINUTES_SHIFT) & FAT_TIME_MINUTES_MASK;
   1fdb5:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fdb9:	66 c1 e8 05          	shr    ax,0x5
   1fdbd:	0f b7 c0             	movzx  eax,ax
   1fdc0:	83 e0 3f             	and    eax,0x3f
   1fdc3:	89 c2                	mov    edx,eax
   1fdc5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fdc8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:412
    *seconds = (fat_time >> FAT_TIME_SECONDS_SHIFT) & FAT_TIME_SECONDS_MASK;
   1fdca:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fdce:	83 e0 1f             	and    eax,0x1f
   1fdd1:	89 c2                	mov    edx,eax
   1fdd3:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fdd6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:413
    *seconds = *seconds * FAT_TIME_SECONDS_SCALE;
   1fdd8:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fddb:	8b 00                	mov    eax,DWORD PTR [eax]
   1fddd:	8d 14 00             	lea    edx,[eax+eax*1]
   1fde0:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fde3:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:414
}
   1fde5:	90                   	nop
   1fde6:	c9                   	leave  
   1fde7:	c3                   	ret    

0001fde8 <fatfs_convert_from_fat_date>:
fatfs_convert_from_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:419
//-----------------------------------------------------------------------------
// fatfs_convert_from_fat_date: Convert FAT date to d/m/y
//-----------------------------------------------------------------------------
void fatfs_convert_from_fat_date(uint16 fat_date, int *day, int *month, int *year)
{
   1fde8:	55                   	push   ebp
   1fde9:	89 e5                	mov    ebp,esp
   1fdeb:	83 ec 04             	sub    esp,0x4
   1fdee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fdf1:	66 89 45 fc          	mov    WORD PTR [ebp-0x4],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:420
    *day = (fat_date >> FAT_DATE_DAY_SHIFT) & FAT_DATE_DAY_MASK;
   1fdf5:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fdf9:	83 e0 1f             	and    eax,0x1f
   1fdfc:	89 c2                	mov    edx,eax
   1fdfe:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe01:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:421
    *month = (fat_date >> FAT_DATE_MONTH_SHIFT) & FAT_DATE_MONTH_MASK;
   1fe03:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fe07:	66 c1 e8 05          	shr    ax,0x5
   1fe0b:	0f b7 c0             	movzx  eax,ax
   1fe0e:	83 e0 0f             	and    eax,0xf
   1fe11:	89 c2                	mov    edx,eax
   1fe13:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fe16:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:422
    *year = (fat_date >> FAT_DATE_YEAR_SHIFT) & FAT_DATE_YEAR_MASK;
   1fe18:	0f b7 45 fc          	movzx  eax,WORD PTR [ebp-0x4]
   1fe1c:	66 c1 e8 09          	shr    ax,0x9
   1fe20:	0f b7 c0             	movzx  eax,ax
   1fe23:	83 e0 7f             	and    eax,0x7f
   1fe26:	89 c2                	mov    edx,eax
   1fe28:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fe2b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:423
    *year = *year + FAT_DATE_YEAR_OFFSET;
   1fe2d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fe30:	8b 00                	mov    eax,DWORD PTR [eax]
   1fe32:	8d 90 bc 07 00 00    	lea    edx,[eax+0x7bc]
   1fe38:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   1fe3b:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:424
}
   1fe3d:	90                   	nop
   1fe3e:	c9                   	leave  
   1fe3f:	c3                   	ret    

0001fe40 <fatfs_convert_to_fat_time>:
fatfs_convert_to_fat_time():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:429
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_time: Convert h/m/s to FAT time
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_time(int hours, int minutes, int seconds)
{
   1fe40:	55                   	push   ebp
   1fe41:	89 e5                	mov    ebp,esp
   1fe43:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:430
    uint16 fat_time = 0;
   1fe46:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:433

    // Most FAT times are to a resolution of 2 seconds
    seconds /= FAT_TIME_SECONDS_SCALE;
   1fe4c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fe4f:	89 c2                	mov    edx,eax
   1fe51:	c1 ea 1f             	shr    edx,0x1f
   1fe54:	01 d0                	add    eax,edx
   1fe56:	d1 f8                	sar    eax,1
   1fe58:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:435

    fat_time = (hours & FAT_TIME_HOURS_MASK) << FAT_TIME_HOURS_SHIFT;
   1fe5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1fe5e:	c1 e0 0b             	shl    eax,0xb
   1fe61:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:436
    fat_time|= (minutes & FAT_TIME_MINUTES_MASK) << FAT_TIME_MINUTES_SHIFT;
   1fe65:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1fe68:	83 e0 3f             	and    eax,0x3f
   1fe6b:	c1 e0 05             	shl    eax,0x5
   1fe6e:	89 c2                	mov    edx,eax
   1fe70:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fe74:	09 d0                	or     eax,edx
   1fe76:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:437
    fat_time|= (seconds & FAT_TIME_SECONDS_MASK) << FAT_TIME_SECONDS_SHIFT;
   1fe7a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fe7d:	83 e0 1f             	and    eax,0x1f
   1fe80:	89 c2                	mov    edx,eax
   1fe82:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fe86:	09 d0                	or     eax,edx
   1fe88:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:439

    return fat_time;
   1fe8c:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:440
}
   1fe90:	c9                   	leave  
   1fe91:	c3                   	ret    

0001fe92 <fatfs_convert_to_fat_date>:
fatfs_convert_to_fat_date():
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:445
//-----------------------------------------------------------------------------
// fatfs_convert_to_fat_date: Convert d/m/y to FAT date
//-----------------------------------------------------------------------------
uint16 fatfs_convert_to_fat_date(int day, int month, int year)
{
   1fe92:	55                   	push   ebp
   1fe93:	89 e5                	mov    ebp,esp
   1fe95:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:446
    uint16 fat_date = 0;
   1fe98:	66 c7 45 fe 00 00    	mov    WORD PTR [ebp-0x2],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:449

    // FAT dates are relative to 1980
    if (year >= FAT_DATE_YEAR_OFFSET)
   1fe9e:	81 7d 10 bb 07 00 00 	cmp    DWORD PTR [ebp+0x10],0x7bb
   1fea5:	7e 07                	jle    1feae <fatfs_convert_to_fat_date+0x1c>
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:450
        year -= FAT_DATE_YEAR_OFFSET;
   1fea7:	81 6d 10 bc 07 00 00 	sub    DWORD PTR [ebp+0x10],0x7bc
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:452

    fat_date = (day & FAT_DATE_DAY_MASK) << FAT_DATE_DAY_SHIFT;
   1feae:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1feb1:	83 e0 1f             	and    eax,0x1f
   1feb4:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:453
    fat_date|= (month & FAT_DATE_MONTH_MASK) << FAT_DATE_MONTH_SHIFT;
   1feb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   1febb:	83 e0 0f             	and    eax,0xf
   1febe:	c1 e0 05             	shl    eax,0x5
   1fec1:	89 c2                	mov    edx,eax
   1fec3:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fec7:	09 d0                	or     eax,edx
   1fec9:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:454
    fat_date|= (year & FAT_DATE_YEAR_MASK) << FAT_DATE_YEAR_SHIFT;
   1fecd:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   1fed0:	c1 e0 09             	shl    eax,0x9
   1fed3:	89 c2                	mov    edx,eax
   1fed5:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
   1fed9:	09 d0                	or     eax,edx
   1fedb:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:456

    return fat_date;
   1fedf:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/src/fat/fat_misc.c:457
}
   1fee3:	c9                   	leave  
   1fee4:	c3                   	ret    
   1fee5:	66 90                	xchg   ax,ax
   1fee7:	90                   	nop

0001fee8 <fatfs_total_path_levels>:
fatfs_total_path_levels():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:45
//        c:\folder\file.zip
//        /dev/etc/samba.conf
// Returns: -1 = Error, 0 or more = Ok
//-----------------------------------------------------------------------------
int fatfs_total_path_levels(char *path)
{
   1fee8:	55                   	push   ebp
   1fee9:	89 e5                	mov    ebp,esp
   1feeb:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:46
    int levels = 0;
   1feee:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:49
    char expectedchar;

    if (!path)
   1fef5:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1fef9:	75 07                	jne    1ff02 <fatfs_total_path_levels+0x1a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:50
        return -1;
   1fefb:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ff00:	eb 74                	jmp    1ff76 <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:55

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   1ff02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff05:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff08:	3c 2f                	cmp    al,0x2f
   1ff0a:	75 0a                	jne    1ff16 <fatfs_total_path_levels+0x2e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:57
    {
        expectedchar = '/';
   1ff0c:	c6 45 fb 2f          	mov    BYTE PTR [ebp-0x5],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:58
        path++;
   1ff10:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1ff14:	eb 50                	jmp    1ff66 <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60
    }
    else if (path[1] == ':' || path[2] == '\\')
   1ff16:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff19:	83 c0 01             	add    eax,0x1
   1ff1c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff1f:	3c 3a                	cmp    al,0x3a
   1ff21:	74 0d                	je     1ff30 <fatfs_total_path_levels+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:60 (discriminator 1)
   1ff23:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff26:	83 c0 02             	add    eax,0x2
   1ff29:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff2c:	3c 5c                	cmp    al,0x5c
   1ff2e:	75 0a                	jne    1ff3a <fatfs_total_path_levels+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:62
    {
        expectedchar = '\\';
   1ff30:	c6 45 fb 5c          	mov    BYTE PTR [ebp-0x5],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:63
        path += 3;
   1ff34:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   1ff38:	eb 07                	jmp    1ff41 <fatfs_total_path_levels+0x59>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:66
    }
    else
        return -1;
   1ff3a:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ff3f:	eb 35                	jmp    1ff76 <fatfs_total_path_levels+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69

    // Count levels in path string
    while (*path)
   1ff41:	eb 23                	jmp    1ff66 <fatfs_total_path_levels+0x7e>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
        {
            // If slash detected escape from for loop
            if (*path == expectedchar) { path++; break; }
   1ff43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff46:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff49:	3a 45 fb             	cmp    al,BYTE PTR [ebp-0x5]
   1ff4c:	75 06                	jne    1ff54 <fatfs_total_path_levels+0x6c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:75 (discriminator 1)
   1ff4e:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1ff52:	eb 0e                	jmp    1ff62 <fatfs_total_path_levels+0x7a>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:76
            path++;
   1ff54:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:72

    // Count levels in path string
    while (*path)
    {
        // Fast forward through actual subdir text to next slash
        for (; *path; )
   1ff58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff5b:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff5e:	84 c0                	test   al,al
   1ff60:	75 e1                	jne    1ff43 <fatfs_total_path_levels+0x5b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:80
            if (*path == expectedchar) { path++; break; }
            path++;
        }

        // Increase number of subdirs founds
        levels++;
   1ff62:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:69
    }
    else
        return -1;

    // Count levels in path string
    while (*path)
   1ff66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ff69:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ff6c:	84 c0                	test   al,al
   1ff6e:	75 e8                	jne    1ff58 <fatfs_total_path_levels+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:84
        // Increase number of subdirs founds
        levels++;
    }

    // Subtract the file itself
    return levels-1;
   1ff70:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   1ff73:	83 e8 01             	sub    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:85
}
   1ff76:	c9                   	leave  
   1ff77:	c3                   	ret    

0001ff78 <fatfs_get_substring>:
fatfs_get_substring():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:93
// (or file) at the specified level.
// E.g. C:\folder\file.zip : Level 0 = C:\folder, Level 1 = file.zip
// Returns: -1 = Error, 0 = Ok
//-----------------------------------------------------------------------------
int fatfs_get_substring(char *path, int levelreq, char *output, int max_len)
{
   1ff78:	55                   	push   ebp
   1ff79:	89 e5                	mov    ebp,esp
   1ff7b:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:95
    int i;
    int pathlen=0;
   1ff7e:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:96
    int levels=0;
   1ff85:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:97
    int copypnt=0;
   1ff8c:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100
    char expectedchar;

    if (!path || max_len <= 0)
   1ff93:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   1ff97:	74 06                	je     1ff9f <fatfs_get_substring+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:100 (discriminator 1)
   1ff99:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   1ff9d:	7f 0a                	jg     1ffa9 <fatfs_get_substring+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:101
        return -1;
   1ff9f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ffa4:	e9 d2 00 00 00       	jmp    2007b <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:106

    // Acceptable formats:
    //  c:\folder\file.zip
    //  /dev/etc/samba.conf
    if (*path == '/')
   1ffa9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ffac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ffaf:	3c 2f                	cmp    al,0x2f
   1ffb1:	75 0a                	jne    1ffbd <fatfs_get_substring+0x45>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:108
    {
        expectedchar = '/';
   1ffb3:	c6 45 eb 2f          	mov    BYTE PTR [ebp-0x15],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:109
        path++;
   1ffb7:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
   1ffbb:	eb 2e                	jmp    1ffeb <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111
    }
    else if (path[1] == ':' || path[2] == '\\')
   1ffbd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ffc0:	83 c0 01             	add    eax,0x1
   1ffc3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ffc6:	3c 3a                	cmp    al,0x3a
   1ffc8:	74 0d                	je     1ffd7 <fatfs_get_substring+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:111 (discriminator 1)
   1ffca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   1ffcd:	83 c0 02             	add    eax,0x2
   1ffd0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   1ffd3:	3c 5c                	cmp    al,0x5c
   1ffd5:	75 0a                	jne    1ffe1 <fatfs_get_substring+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:113
    {
        expectedchar = '\\';
   1ffd7:	c6 45 eb 5c          	mov    BYTE PTR [ebp-0x15],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:114
        path += 3;
   1ffdb:	83 45 08 03          	add    DWORD PTR [ebp+0x8],0x3
   1ffdf:	eb 0a                	jmp    1ffeb <fatfs_get_substring+0x73>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:117
    }
    else
        return -1;
   1ffe1:	b8 ff ff ff ff       	mov    eax,0xffffffff
   1ffe6:	e9 90 00 00 00       	jmp    2007b <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:120

    // Get string length of path
    pathlen = (int)strlen (path);
   1ffeb:	83 ec 0c             	sub    esp,0xc
   1ffee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   1fff1:	e8 e2 76 00 00       	call   276d8 <strlen>
   1fff6:	83 c4 10             	add    esp,0x10
   1fff9:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   1fffc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20003:	eb 4d                	jmp    20052 <fatfs_get_substring+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126
    {
        // If a '\' is found then increase level
        if (*path == expectedchar) levels++;
   20005:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20008:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2000b:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   2000e:	75 04                	jne    20014 <fatfs_get_substring+0x9c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:126 (discriminator 1)
   20010:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129

        // If correct level and the character is not a '\' or '/' then copy text to 'output'
        if ( (levels == levelreq) && (*path != expectedchar) && (copypnt < (max_len-1)))
   20014:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20017:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   2001a:	75 2e                	jne    2004a <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 1)
   2001c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2001f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20022:	3a 45 eb             	cmp    al,BYTE PTR [ebp-0x15]
   20025:	74 23                	je     2004a <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:129 (discriminator 2)
   20027:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2002a:	83 e8 01             	sub    eax,0x1
   2002d:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   20030:	7e 18                	jle    2004a <fatfs_get_substring+0xd2>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:130
            output[copypnt++] = *path;
   20032:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20035:	8d 50 01             	lea    edx,[eax+0x1]
   20038:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
   2003b:	89 c2                	mov    edx,eax
   2003d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20040:	01 c2                	add    edx,eax
   20042:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20045:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20048:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:133 (discriminator 2)

        // Increment through path string
        path++;
   2004a:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 2)

    // Get string length of path
    pathlen = (int)strlen (path);

    // Loop through the number of times as characters in 'path'
    for (i = 0; i<pathlen; i++)
   2004e:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:123 (discriminator 1)
   20052:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20055:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   20058:	7c ab                	jl     20005 <fatfs_get_substring+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:137
        // Increment through path string
        path++;
    }

    // Null Terminate
    output[copypnt] = '\0';
   2005a:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2005d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20060:	01 d0                	add    eax,edx
   20062:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:140

    // If a string was copied return 0 else return 1
    if (output[0] != '\0')
   20065:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20068:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2006b:	84 c0                	test   al,al
   2006d:	74 07                	je     20076 <fatfs_get_substring+0xfe>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:141
        return 0;    // OK
   2006f:	b8 00 00 00 00       	mov    eax,0x0
   20074:	eb 05                	jmp    2007b <fatfs_get_substring+0x103>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:143
    else
        return -1;    // Error
   20076:	b8 ff ff ff ff       	mov    eax,0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:144
}
   2007b:	c9                   	leave  
   2007c:	c3                   	ret    

0002007d <fatfs_split_path>:
fatfs_split_path():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:152
// Returned is the path string and file Name string
// E.g. C:\folder\file.zip -> path = C:\folder  filename = file.zip
// E.g. C:\file.zip -> path = [blank]  filename = file.zip
//-----------------------------------------------------------------------------
int fatfs_split_path(char *full_path, char *path, int max_path, char *filename, int max_filename)
{
   2007d:	55                   	push   ebp
   2007e:	89 e5                	mov    ebp,esp
   20080:	53                   	push   ebx
   20081:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:156
    int strindex;

    // Count the levels to the filepath
    int levels = fatfs_total_path_levels(full_path);
   20084:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20087:	e8 5c fe ff ff       	call   1fee8 <fatfs_total_path_levels>
   2008c:	83 c4 04             	add    esp,0x4
   2008f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:157
    if (levels == -1)
   20092:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   20096:	75 0a                	jne    200a2 <fatfs_split_path+0x25>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:158
        return -1;
   20098:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2009d:	e9 88 00 00 00       	jmp    2012a <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:161

    // Get filename part of string
    if (fatfs_get_substring(full_path, levels, filename, max_filename) != 0)
   200a2:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   200a5:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   200a8:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   200ab:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   200ae:	e8 c5 fe ff ff       	call   1ff78 <fatfs_get_substring>
   200b3:	83 c4 10             	add    esp,0x10
   200b6:	85 c0                	test   eax,eax
   200b8:	74 07                	je     200c1 <fatfs_split_path+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:162
        return -1;
   200ba:	b8 ff ff ff ff       	mov    eax,0xffffffff
   200bf:	eb 69                	jmp    2012a <fatfs_split_path+0xad>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:165

    // If root file
    if (levels == 0)
   200c1:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   200c5:	75 08                	jne    200cf <fatfs_split_path+0x52>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:166
        path[0] = '\0';
   200c7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   200ca:	c6 00 00             	mov    BYTE PTR [eax],0x0
   200cd:	eb 56                	jmp    20125 <fatfs_split_path+0xa8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:169
    else
    {
        strindex = (int)strlen(full_path) - (int)strlen(filename);
   200cf:	83 ec 0c             	sub    esp,0xc
   200d2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   200d5:	e8 fe 75 00 00       	call   276d8 <strlen>
   200da:	83 c4 10             	add    esp,0x10
   200dd:	89 c3                	mov    ebx,eax
   200df:	83 ec 0c             	sub    esp,0xc
   200e2:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   200e5:	e8 ee 75 00 00       	call   276d8 <strlen>
   200ea:	83 c4 10             	add    esp,0x10
   200ed:	29 c3                	sub    ebx,eax
   200ef:	89 d8                	mov    eax,ebx
   200f1:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:170
        if (strindex > max_path)
   200f4:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   200f7:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   200fa:	7e 06                	jle    20102 <fatfs_split_path+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:171
            strindex = max_path;
   200fc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   200ff:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:173

        memcpy(path, full_path, strindex);
   20102:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20105:	83 ec 04             	sub    esp,0x4
   20108:	50                   	push   eax
   20109:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2010c:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2010f:	e8 58 5d 00 00       	call   25e6c <memcpy>
   20114:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:174
        path[strindex-1] = '\0';
   20117:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2011a:	8d 50 ff             	lea    edx,[eax-0x1]
   2011d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20120:	01 d0                	add    eax,edx
   20122:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:177
    }

    return 0;
   20125:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:178
}
   2012a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2012d:	c9                   	leave  
   2012e:	c3                   	ret    

0002012f <FileString_StrCmpNoCase>:
FileString_StrCmpNoCase():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:183
//-----------------------------------------------------------------------------
// FileString_StrCmpNoCase: Compare two strings case with case sensitivity
//-----------------------------------------------------------------------------
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
   2012f:	55                   	push   ebp
   20130:	89 e5                	mov    ebp,esp
   20132:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
    int diff;
    char a,b;

    while (n--)
   20135:	eb 74                	jmp    201ab <FileString_StrCmpNoCase+0x7c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:189
    {
        a = *s1;
   20137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2013a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2013d:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:190
        b = *s2;
   20140:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20143:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20146:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193

        // Make lower case if uppercase
        if ((a>='A') && (a<='Z'))
   20149:	80 7d ff 40          	cmp    BYTE PTR [ebp-0x1],0x40
   2014d:	7e 10                	jle    2015f <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:193 (discriminator 1)
   2014f:	80 7d ff 5a          	cmp    BYTE PTR [ebp-0x1],0x5a
   20153:	7f 0a                	jg     2015f <FileString_StrCmpNoCase+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:194
            a+= 32;
   20155:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   20159:	83 c0 20             	add    eax,0x20
   2015c:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195
        if ((b>='A') && (b<='Z'))
   2015f:	80 7d fe 40          	cmp    BYTE PTR [ebp-0x2],0x40
   20163:	7e 10                	jle    20175 <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:195 (discriminator 1)
   20165:	80 7d fe 5a          	cmp    BYTE PTR [ebp-0x2],0x5a
   20169:	7f 0a                	jg     20175 <FileString_StrCmpNoCase+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:196
            b+= 32;
   2016b:	0f b6 45 fe          	movzx  eax,BYTE PTR [ebp-0x2]
   2016f:	83 c0 20             	add    eax,0x20
   20172:	88 45 fe             	mov    BYTE PTR [ebp-0x2],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:198

        diff = a - b;
   20175:	0f be 55 ff          	movsx  edx,BYTE PTR [ebp-0x1]
   20179:	0f be 45 fe          	movsx  eax,BYTE PTR [ebp-0x2]
   2017d:	29 c2                	sub    edx,eax
   2017f:	89 d0                	mov    eax,edx
   20181:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:201

        // If different
        if (diff)
   20184:	83 7d f8 00          	cmp    DWORD PTR [ebp-0x8],0x0
   20188:	74 05                	je     2018f <FileString_StrCmpNoCase+0x60>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:202
            return diff;
   2018a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2018d:	eb 32                	jmp    201c1 <FileString_StrCmpNoCase+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205

        // If run out of strings
        if ( (*s1 == 0) || (*s2 == 0) )
   2018f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20192:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20195:	84 c0                	test   al,al
   20197:	74 23                	je     201bc <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:205 (discriminator 1)
   20199:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2019c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2019f:	84 c0                	test   al,al
   201a1:	74 19                	je     201bc <FileString_StrCmpNoCase+0x8d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:208
            break;

        s1++;
   201a3:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:209
        s2++;
   201a7:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:187
static int FileString_StrCmpNoCase(char *s1, char *s2, int n)
{
    int diff;
    char a,b;

    while (n--)
   201ab:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   201ae:	8d 50 ff             	lea    edx,[eax-0x1]
   201b1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   201b4:	85 c0                	test   eax,eax
   201b6:	0f 85 7b ff ff ff    	jne    20137 <FileString_StrCmpNoCase+0x8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:211
            break;

        s1++;
        s2++;
    }
    return 0;
   201bc:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:212
}
   201c1:	c9                   	leave  
   201c2:	c3                   	ret    

000201c3 <FileString_GetExtension>:
FileString_GetExtension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:218
//-----------------------------------------------------------------------------
// FileString_GetExtension: Get index to extension within filename
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_GetExtension(char *str)
{
   201c3:	55                   	push   ebp
   201c4:	89 e5                	mov    ebp,esp
   201c6:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:219
    int dotPos = -1;
   201c9:	c7 45 fc ff ff ff ff 	mov    DWORD PTR [ebp-0x4],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:220
    char *strSrc = str;
   201d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201d3:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223

    // Find last '.' in string (if at all)
    while (*strSrc)
   201d6:	eb 1b                	jmp    201f3 <FileString_GetExtension+0x30>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:225
    {
        if (*strSrc=='.')
   201d8:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   201db:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201de:	3c 2e                	cmp    al,0x2e
   201e0:	75 0d                	jne    201ef <FileString_GetExtension+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:226
            dotPos = (int)(strSrc-str);
   201e2:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   201e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   201e8:	29 c2                	sub    edx,eax
   201ea:	89 d0                	mov    eax,edx
   201ec:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:228

        strSrc++;
   201ef:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:223
{
    int dotPos = -1;
    char *strSrc = str;

    // Find last '.' in string (if at all)
    while (*strSrc)
   201f3:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   201f6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   201f9:	84 c0                	test   al,al
   201fb:	75 db                	jne    201d8 <FileString_GetExtension+0x15>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:231
            dotPos = (int)(strSrc-str);

        strSrc++;
    }

    return dotPos;
   201fd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:232
}
   20200:	c9                   	leave  
   20201:	c3                   	ret    

00020202 <FileString_TrimLength>:
FileString_TrimLength():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:238
//-----------------------------------------------------------------------------
// FileString_TrimLength: Get length of string excluding trailing spaces
// Returns -1 if not found or index otherwise
//-----------------------------------------------------------------------------
static int FileString_TrimLength(char *str, int strLen)
{
   20202:	55                   	push   ebp
   20203:	89 e5                	mov    ebp,esp
   20205:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:239
    int length = strLen;
   20208:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2020b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:240
    char *strSrc = str+strLen-1;
   2020e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20211:	8d 50 ff             	lea    edx,[eax-0x1]
   20214:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20217:	01 d0                	add    eax,edx
   20219:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243

    // Find last non white space
    while (strLen != 0)
   2021c:	eb 1f                	jmp    2023d <FileString_TrimLength+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:245
    {
        if (*strSrc == ' ')
   2021e:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   20221:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20224:	3c 20                	cmp    al,0x20
   20226:	75 1d                	jne    20245 <FileString_TrimLength+0x43>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:246
            length = (int)(strSrc - str);
   20228:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   2022b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2022e:	29 c2                	sub    edx,eax
   20230:	89 d0                	mov    eax,edx
   20232:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:250
        else
            break;

        strSrc--;
   20235:	83 6d f8 01          	sub    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:251
        strLen--;
   20239:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:243
{
    int length = strLen;
    char *strSrc = str+strLen-1;

    // Find last non white space
    while (strLen != 0)
   2023d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20241:	75 db                	jne    2021e <FileString_TrimLength+0x1c>
   20243:	eb 01                	jmp    20246 <FileString_TrimLength+0x44>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:248
    {
        if (*strSrc == ' ')
            length = (int)(strSrc - str);
        else
            break;
   20245:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:254

        strSrc--;
        strLen--;
    }

    return length;
   20246:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:255
}
   20249:	c9                   	leave  
   2024a:	c3                   	ret    

0002024b <fatfs_compare_names>:
fatfs_compare_names():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:261
//-----------------------------------------------------------------------------
// fatfs_compare_names: Compare two filenames (without copying or changing origonals)
// Returns 1 if match, 0 if not
//-----------------------------------------------------------------------------
int fatfs_compare_names(char* strA, char* strB)
{
   2024b:	55                   	push   ebp
   2024c:	89 e5                	mov    ebp,esp
   2024e:	53                   	push   ebx
   2024f:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:262
    char *ext1 = NULL;
   20252:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:263
    char *ext2 = NULL;
   20259:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:268
    int ext1Pos, ext2Pos;
    int file1Len, file2Len;

    // Get both files extension
    ext1Pos = FileString_GetExtension(strA);
   20260:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20263:	e8 5b ff ff ff       	call   201c3 <FileString_GetExtension>
   20268:	83 c4 04             	add    esp,0x4
   2026b:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:269
    ext2Pos = FileString_GetExtension(strB);
   2026e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20271:	e8 4d ff ff ff       	call   201c3 <FileString_GetExtension>
   20276:	83 c4 04             	add    esp,0x4
   20279:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274

    // NOTE: Extension position can be different for matching
    // filename if trailing space are present before it!
    // Check that if one has an extension, so does the other
    if ((ext1Pos==-1) && (ext2Pos!=-1))
   2027c:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   20280:	75 10                	jne    20292 <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:274 (discriminator 1)
   20282:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   20286:	74 0a                	je     20292 <fatfs_compare_names+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:275
        return 0;
   20288:	b8 00 00 00 00       	mov    eax,0x0
   2028d:	e9 21 01 00 00       	jmp    203b3 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276
    if ((ext2Pos==-1) && (ext1Pos!=-1))
   20292:	83 7d e0 ff          	cmp    DWORD PTR [ebp-0x20],0xffffffff
   20296:	75 10                	jne    202a8 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:276 (discriminator 1)
   20298:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   2029c:	74 0a                	je     202a8 <fatfs_compare_names+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:277
        return 0;
   2029e:	b8 00 00 00 00       	mov    eax,0x0
   202a3:	e9 0b 01 00 00       	jmp    203b3 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:280

    // If they both have extensions, compare them
    if (ext1Pos!=-1)
   202a8:	83 7d e4 ff          	cmp    DWORD PTR [ebp-0x1c],0xffffffff
   202ac:	0f 84 84 00 00 00    	je     20336 <fatfs_compare_names+0xeb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:283
    {
        // Set pointer to start of extension
        ext1 = strA+ext1Pos+1;
   202b2:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   202b5:	8d 50 01             	lea    edx,[eax+0x1]
   202b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   202bb:	01 d0                	add    eax,edx
   202bd:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:284
        ext2 = strB+ext2Pos+1;
   202c0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   202c3:	8d 50 01             	lea    edx,[eax+0x1]
   202c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   202c9:	01 d0                	add    eax,edx
   202cb:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:287

        // Verify that the file extension lengths match!
        if (strlen(ext1) != strlen(ext2))
   202ce:	83 ec 0c             	sub    esp,0xc
   202d1:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   202d4:	e8 ff 73 00 00       	call   276d8 <strlen>
   202d9:	83 c4 10             	add    esp,0x10
   202dc:	89 c3                	mov    ebx,eax
   202de:	83 ec 0c             	sub    esp,0xc
   202e1:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   202e4:	e8 ef 73 00 00       	call   276d8 <strlen>
   202e9:	83 c4 10             	add    esp,0x10
   202ec:	39 c3                	cmp    ebx,eax
   202ee:	74 0a                	je     202fa <fatfs_compare_names+0xaf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:288
            return 0;
   202f0:	b8 00 00 00 00       	mov    eax,0x0
   202f5:	e9 b9 00 00 00       	jmp    203b3 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:291

        // If they dont match
        if (FileString_StrCmpNoCase(ext1, ext2, (int)strlen(ext1))!=0)
   202fa:	83 ec 0c             	sub    esp,0xc
   202fd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   20300:	e8 d3 73 00 00       	call   276d8 <strlen>
   20305:	83 c4 10             	add    esp,0x10
   20308:	83 ec 04             	sub    esp,0x4
   2030b:	50                   	push   eax
   2030c:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   2030f:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   20312:	e8 18 fe ff ff       	call   2012f <FileString_StrCmpNoCase>
   20317:	83 c4 10             	add    esp,0x10
   2031a:	85 c0                	test   eax,eax
   2031c:	74 0a                	je     20328 <fatfs_compare_names+0xdd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:292
            return 0;
   2031e:	b8 00 00 00 00       	mov    eax,0x0
   20323:	e9 8b 00 00 00       	jmp    203b3 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:295

        // Filelength is upto extensions
        file1Len = ext1Pos;
   20328:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2032b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:296
        file2Len = ext2Pos;
   2032e:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   20331:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   20334:	eb 22                	jmp    20358 <fatfs_compare_names+0x10d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:302
    }
    // No extensions
    else
    {
        // Filelength is actual filelength
        file1Len = (int)strlen(strA);
   20336:	83 ec 0c             	sub    esp,0xc
   20339:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2033c:	e8 97 73 00 00       	call   276d8 <strlen>
   20341:	83 c4 10             	add    esp,0x10
   20344:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:303
        file2Len = (int)strlen(strB);
   20347:	83 ec 0c             	sub    esp,0xc
   2034a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2034d:	e8 86 73 00 00       	call   276d8 <strlen>
   20352:	83 c4 10             	add    esp,0x10
   20355:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:307
    }

    // Find length without trailing spaces (before ext)
    file1Len = FileString_TrimLength(strA, file1Len);
   20358:	83 ec 08             	sub    esp,0x8
   2035b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2035e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20361:	e8 9c fe ff ff       	call   20202 <FileString_TrimLength>
   20366:	83 c4 10             	add    esp,0x10
   20369:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:308
    file2Len = FileString_TrimLength(strB, file2Len);
   2036c:	83 ec 08             	sub    esp,0x8
   2036f:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20372:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20375:	e8 88 fe ff ff       	call   20202 <FileString_TrimLength>
   2037a:	83 c4 10             	add    esp,0x10
   2037d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:311

    // Check the file lengths match
    if (file1Len!=file2Len)
   20380:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20383:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   20386:	74 07                	je     2038f <fatfs_compare_names+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:312
        return 0;
   20388:	b8 00 00 00 00       	mov    eax,0x0
   2038d:	eb 24                	jmp    203b3 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:315

    // Compare main part of filenames
    if (FileString_StrCmpNoCase(strA, strB, file1Len)!=0)
   2038f:	83 ec 04             	sub    esp,0x4
   20392:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20395:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   20398:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2039b:	e8 8f fd ff ff       	call   2012f <FileString_StrCmpNoCase>
   203a0:	83 c4 10             	add    esp,0x10
   203a3:	85 c0                	test   eax,eax
   203a5:	74 07                	je     203ae <fatfs_compare_names+0x163>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:316
        return 0;
   203a7:	b8 00 00 00 00       	mov    eax,0x0
   203ac:	eb 05                	jmp    203b3 <fatfs_compare_names+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:318
    else
        return 1;
   203ae:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:319
}
   203b3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   203b6:	c9                   	leave  
   203b7:	c3                   	ret    

000203b8 <fatfs_string_ends_with_slash>:
fatfs_string_ends_with_slash():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:324
//-----------------------------------------------------------------------------
// fatfs_string_ends_with_slash: Does the string end with a slash (\ or /)
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
   203b8:	55                   	push   ebp
   203b9:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:325
    if (path)
   203bb:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   203bf:	74 38                	je     203f9 <fatfs_string_ends_with_slash+0x41>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
    {
        while (*path)
   203c1:	eb 2c                	jmp    203ef <fatfs_string_ends_with_slash+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:330
        {
            // Last character?
            if (!(*(path+1)))
   203c3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203c6:	83 c0 01             	add    eax,0x1
   203c9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   203cc:	84 c0                	test   al,al
   203ce:	75 1b                	jne    203eb <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332
            {
                if (*path == '\\' || *path == '/')
   203d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203d3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   203d6:	3c 5c                	cmp    al,0x5c
   203d8:	74 0a                	je     203e4 <fatfs_string_ends_with_slash+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:332 (discriminator 1)
   203da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203dd:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   203e0:	3c 2f                	cmp    al,0x2f
   203e2:	75 07                	jne    203eb <fatfs_string_ends_with_slash+0x33>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:333
                    return 1;
   203e4:	b8 01 00 00 00       	mov    eax,0x1
   203e9:	eb 13                	jmp    203fe <fatfs_string_ends_with_slash+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:336
            }

            path++;
   203eb:	83 45 08 01          	add    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:327
//-----------------------------------------------------------------------------
int fatfs_string_ends_with_slash(char *path)
{
    if (path)
    {
        while (*path)
   203ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   203f2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   203f5:	84 c0                	test   al,al
   203f7:	75 ca                	jne    203c3 <fatfs_string_ends_with_slash+0xb>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:340

            path++;
        }
    }

    return 0;
   203f9:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:341
}
   203fe:	5d                   	pop    ebp
   203ff:	c3                   	ret    

00020400 <fatfs_get_sfn_display_name>:
fatfs_get_sfn_display_name():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:346
//-----------------------------------------------------------------------------
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
   20400:	55                   	push   ebp
   20401:	89 e5                	mov    ebp,esp
   20403:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:347
    int len = 0;
   20406:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
    while (*in && len <= 11)
   2040d:	eb 40                	jmp    2044f <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:350
    {
        char a = *in++;
   2040f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20412:	8d 50 01             	lea    edx,[eax+0x1]
   20415:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   20418:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2041b:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:352

        if (a == ' ')
   2041e:	80 7d fb 20          	cmp    BYTE PTR [ebp-0x5],0x20
   20422:	75 02                	jne    20426 <fatfs_get_sfn_display_name+0x26>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:353
            continue;
   20424:	eb 29                	jmp    2044f <fatfs_get_sfn_display_name+0x4f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355
        // Make lower case if uppercase
        else if ((a>='A') && (a<='Z'))
   20426:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   2042a:	7e 10                	jle    2043c <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:355 (discriminator 1)
   2042c:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   20430:	7f 0a                	jg     2043c <fatfs_get_sfn_display_name+0x3c>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:356
            a+= 32;
   20432:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   20436:	83 c0 20             	add    eax,0x20
   20439:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:358

        *out++ = a;
   2043c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2043f:	8d 50 01             	lea    edx,[eax+0x1]
   20442:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   20445:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   20449:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:359
        len++;
   2044b:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348
// fatfs_get_sfn_display_name: Get display name for SFN entry
//-----------------------------------------------------------------------------
int fatfs_get_sfn_display_name(char* out, char* in)
{
    int len = 0;
    while (*in && len <= 11)
   2044f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20452:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20455:	84 c0                	test   al,al
   20457:	74 06                	je     2045f <fatfs_get_sfn_display_name+0x5f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:348 (discriminator 1)
   20459:	83 7d fc 0b          	cmp    DWORD PTR [ebp-0x4],0xb
   2045d:	7e b0                	jle    2040f <fatfs_get_sfn_display_name+0xf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:362

        *out++ = a;
        len++;
    }

    *out = '\0';
   2045f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20462:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:363
    return 1;
   20465:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:364
}
   2046a:	c9                   	leave  
   2046b:	c3                   	ret    

0002046c <fatfs_get_extension>:
fatfs_get_extension():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:371
// fatfs_get_extension: Get extension of filename passed in 'filename'.
// Returned extension is always lower case.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_get_extension(char* filename, char* out, int maxlen)
{
   2046c:	55                   	push   ebp
   2046d:	89 e5                	mov    ebp,esp
   2046f:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:372
    int len = 0;
   20472:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:375

    // Get files extension offset
    int ext_pos = FileString_GetExtension(filename);
   20479:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2047c:	e8 42 fd ff ff       	call   201c3 <FileString_GetExtension>
   20481:	83 c4 04             	add    esp,0x4
   20484:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377

    if (ext_pos > 0 && out && maxlen)
   20487:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   2048b:	7e 71                	jle    204fe <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 1)
   2048d:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20491:	74 6b                	je     204fe <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:377 (discriminator 2)
   20493:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   20497:	74 65                	je     204fe <fatfs_get_extension+0x92>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:379
    {
        filename += ext_pos + 1;
   20499:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2049c:	83 c0 01             	add    eax,0x1
   2049f:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

        while (*filename && len < (maxlen-1))
   204a2:	eb 38                	jmp    204dc <fatfs_get_extension+0x70>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:383
        {
            char a = *filename++;
   204a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   204a7:	8d 50 01             	lea    edx,[eax+0x1]
   204aa:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   204ad:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   204b0:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386

            // Make lowercase if uppercase
            if ((a>='A') && (a<='Z'))
   204b3:	80 7d fb 40          	cmp    BYTE PTR [ebp-0x5],0x40
   204b7:	7e 10                	jle    204c9 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:386 (discriminator 1)
   204b9:	80 7d fb 5a          	cmp    BYTE PTR [ebp-0x5],0x5a
   204bd:	7f 0a                	jg     204c9 <fatfs_get_extension+0x5d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:387
                a+= 32;
   204bf:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   204c3:	83 c0 20             	add    eax,0x20
   204c6:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:389

            *out++ = a;
   204c9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   204cc:	8d 50 01             	lea    edx,[eax+0x1]
   204cf:	89 55 0c             	mov    DWORD PTR [ebp+0xc],edx
   204d2:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   204d6:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:390
            len++;
   204d8:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381

    if (ext_pos > 0 && out && maxlen)
    {
        filename += ext_pos + 1;

        while (*filename && len < (maxlen-1))
   204dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   204df:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   204e2:	84 c0                	test   al,al
   204e4:	74 0b                	je     204f1 <fatfs_get_extension+0x85>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:381 (discriminator 1)
   204e6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   204e9:	83 e8 01             	sub    eax,0x1
   204ec:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   204ef:	7f b3                	jg     204a4 <fatfs_get_extension+0x38>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:393

            *out++ = a;
            len++;
        }

        *out = '\0';
   204f1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   204f4:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:394
        return 1;
   204f7:	b8 01 00 00 00       	mov    eax,0x1
   204fc:	eb 05                	jmp    20503 <fatfs_get_extension+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:397
    }

    return 0;
   204fe:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:398
}
   20503:	c9                   	leave  
   20504:	c3                   	ret    

00020505 <fatfs_create_path_string>:
fatfs_create_path_string():
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:404
//-----------------------------------------------------------------------------
// fatfs_create_path_string: Append path & filename to create file path string.
// Returns: 1 if ok, 0 if not.
//-----------------------------------------------------------------------------
int fatfs_create_path_string(char* path, char *filename, char* out, int maxlen)
{
   20505:	55                   	push   ebp
   20506:	89 e5                	mov    ebp,esp
   20508:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:405
    int len = 0;
   2050b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:406
    char last = 0;
   20512:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:407
    char seperator = '/';
   20516:	c6 45 fa 2f          	mov    BYTE PTR [ebp-0x6],0x2f
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409

    if (path && filename && out && maxlen > 0)
   2051a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2051e:	0f 84 bb 00 00 00    	je     205df <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 1)
   20524:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   20528:	0f 84 b1 00 00 00    	je     205df <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 2)
   2052e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   20532:	0f 84 a7 00 00 00    	je     205df <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:409 (discriminator 3)
   20538:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   2053c:	0f 8e 9d 00 00 00    	jle    205df <fatfs_create_path_string+0xda>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    {
        while (*path && len < (maxlen-2))
   20542:	eb 2c                	jmp    20570 <fatfs_create_path_string+0x6b>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:413
        {
            last = *path++;
   20544:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20547:	8d 50 01             	lea    edx,[eax+0x1]
   2054a:	89 55 08             	mov    DWORD PTR [ebp+0x8],edx
   2054d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20550:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:414
            if (last == '\\')
   20553:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   20557:	75 04                	jne    2055d <fatfs_create_path_string+0x58>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:415
                seperator = '\\';
   20559:	c6 45 fa 5c          	mov    BYTE PTR [ebp-0x6],0x5c
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:416
            *out++ = last;
   2055d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20560:	8d 50 01             	lea    edx,[eax+0x1]
   20563:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   20566:	0f b6 55 fb          	movzx  edx,BYTE PTR [ebp-0x5]
   2056a:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:417
            len++;
   2056c:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411
    char last = 0;
    char seperator = '/';

    if (path && filename && out && maxlen > 0)
    {
        while (*path && len < (maxlen-2))
   20570:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20573:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20576:	84 c0                	test   al,al
   20578:	74 0b                	je     20585 <fatfs_create_path_string+0x80>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:411 (discriminator 1)
   2057a:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   2057d:	83 e8 02             	sub    eax,0x2
   20580:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   20583:	7f bf                	jg     20544 <fatfs_create_path_string+0x3f>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421
            *out++ = last;
            len++;
        }

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
   20585:	80 7d fb 5c          	cmp    BYTE PTR [ebp-0x5],0x5c
   20589:	74 32                	je     205bd <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:421 (discriminator 1)
   2058b:	80 7d fb 2f          	cmp    BYTE PTR [ebp-0x5],0x2f
   2058f:	74 2c                	je     205bd <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:422
            *out++ = seperator;
   20591:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20594:	8d 50 01             	lea    edx,[eax+0x1]
   20597:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2059a:	0f b6 55 fa          	movzx  edx,BYTE PTR [ebp-0x6]
   2059e:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        while (*filename && len < (maxlen-1))
   205a0:	eb 1b                	jmp    205bd <fatfs_create_path_string+0xb8>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:426
        {
            *out++ = *filename++;
   205a2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   205a5:	8d 50 01             	lea    edx,[eax+0x1]
   205a8:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   205ab:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   205ae:	8d 4a 01             	lea    ecx,[edx+0x1]
   205b1:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   205b4:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   205b7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:427
            len++;
   205b9:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424

        // Add a seperator if trailing one not found
        if (last != '\\' && last != '/')
            *out++ = seperator;

        while (*filename && len < (maxlen-1))
   205bd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   205c0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   205c3:	84 c0                	test   al,al
   205c5:	74 0b                	je     205d2 <fatfs_create_path_string+0xcd>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:424 (discriminator 1)
   205c7:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   205ca:	83 e8 01             	sub    eax,0x1
   205cd:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   205d0:	7f d0                	jg     205a2 <fatfs_create_path_string+0x9d>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:430
        {
            *out++ = *filename++;
            len++;
        }

        *out = '\0';
   205d2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   205d5:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:432

        return 1;
   205d8:	b8 01 00 00 00       	mov    eax,0x1
   205dd:	eb 05                	jmp    205e4 <fatfs_create_path_string+0xdf>
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:435
    }

    return 0;
   205df:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_string.c:436
}
   205e4:	c9                   	leave  
   205e5:	c3                   	ret    
   205e6:	66 90                	xchg   ax,ax

000205e8 <fatfs_fat_init>:
fatfs_fat_init():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:61

//-----------------------------------------------------------------------------
// fatfs_fat_init:
//-----------------------------------------------------------------------------
void fatfs_fat_init(struct fatfs *fs)
{
   205e8:	55                   	push   ebp
   205e9:	89 e5                	mov    ebp,esp
   205eb:	53                   	push   ebx
   205ec:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:65
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;
   205ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   205f2:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   205f9:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67

    for (i=0;i<FAT_BUFFERS;i++)
   205fc:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20603:	e9 cf 00 00 00       	jmp    206d7 <fatfs_fat_init+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:70 (discriminator 3)
    {
        // Initialise buffers to invalid
        fs->fat_buffers[i].address = FAT32_INVALID_CLUSTER;
   20608:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2060b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2060e:	c1 e0 04             	shl    eax,0x4
   20611:	89 c1                	mov    ecx,eax
   20613:	c1 e1 05             	shl    ecx,0x5
   20616:	01 c8                	add    eax,ecx
   20618:	01 d0                	add    eax,edx
   2061a:	05 58 04 00 00       	add    eax,0x458
   2061f:	c7 00 ff ff ff ff    	mov    DWORD PTR [eax],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:71 (discriminator 3)
        fs->fat_buffers[i].dirty = 0;
   20625:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20628:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2062b:	c1 e0 04             	shl    eax,0x4
   2062e:	89 c1                	mov    ecx,eax
   20630:	c1 e1 05             	shl    ecx,0x5
   20633:	01 c8                	add    eax,ecx
   20635:	01 d0                	add    eax,edx
   20637:	05 5c 04 00 00       	add    eax,0x45c
   2063c:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:72 (discriminator 3)
        memset(fs->fat_buffers[i].sector, 0x00, sizeof(fs->fat_buffers[i].sector));
   20642:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20645:	c1 e0 04             	shl    eax,0x4
   20648:	89 c2                	mov    edx,eax
   2064a:	c1 e2 05             	shl    edx,0x5
   2064d:	01 d0                	add    eax,edx
   2064f:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   20655:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20658:	01 d0                	add    eax,edx
   2065a:	83 c0 08             	add    eax,0x8
   2065d:	83 ec 04             	sub    esp,0x4
   20660:	68 00 02 00 00       	push   0x200
   20665:	6a 00                	push   0x0
   20667:	50                   	push   eax
   20668:	e8 54 4d 00 00       	call   253c1 <memset>
   2066d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:73 (discriminator 3)
        fs->fat_buffers[i].ptr = NULL;
   20670:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   20673:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20676:	c1 e0 04             	shl    eax,0x4
   20679:	89 c1                	mov    ecx,eax
   2067b:	c1 e1 05             	shl    ecx,0x5
   2067e:	01 c8                	add    eax,ecx
   20680:	01 d0                	add    eax,edx
   20682:	05 60 04 00 00       	add    eax,0x460
   20687:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:76 (discriminator 3)

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
   2068d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20690:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   20696:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   20699:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2069c:	c1 e0 04             	shl    eax,0x4
   2069f:	89 c3                	mov    ebx,eax
   206a1:	c1 e3 05             	shl    ebx,0x5
   206a4:	01 d8                	add    eax,ebx
   206a6:	01 c8                	add    eax,ecx
   206a8:	05 64 04 00 00       	add    eax,0x464
   206ad:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:77 (discriminator 3)
        fs->fat_buffer_head = &fs->fat_buffers[i];
   206af:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   206b2:	c1 e0 04             	shl    eax,0x4
   206b5:	89 c2                	mov    edx,eax
   206b7:	c1 e2 05             	shl    edx,0x5
   206ba:	01 d0                	add    eax,edx
   206bc:	8d 90 50 02 00 00    	lea    edx,[eax+0x250]
   206c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   206c5:	01 d0                	add    eax,edx
   206c7:	8d 50 08             	lea    edx,[eax+0x8]
   206ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   206cd:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 3)
    int i;

    // FAT buffer chain head
    fs->fat_buffer_head = NULL;

    for (i=0;i<FAT_BUFFERS;i++)
   206d3:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:67 (discriminator 1)
   206d7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   206db:	0f 8e 27 ff ff ff    	jle    20608 <fatfs_fat_init+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:79

        // Add to head of queue
        fs->fat_buffers[i].next = fs->fat_buffer_head;
        fs->fat_buffer_head = &fs->fat_buffers[i];
    }
}
   206e1:	90                   	nop
   206e2:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   206e5:	c9                   	leave  
   206e6:	c3                   	ret    

000206e7 <fatfs_fat_writeback>:
fatfs_fat_writeback():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:84
//-----------------------------------------------------------------------------
// fatfs_fat_writeback: Writeback 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
static int fatfs_fat_writeback(struct fatfs *fs, struct fat_buffer *pcur)
{
   206e7:	55                   	push   ebp
   206e8:	89 e5                	mov    ebp,esp
   206ea:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:85
    if (pcur)
   206ed:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   206f1:	0f 84 9b 00 00 00    	je     20792 <fatfs_fat_writeback+0xab>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:88
    {
        // Writeback sector if changed
        if (pcur->dirty)
   206f7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   206fa:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20700:	85 c0                	test   eax,eax
   20702:	0f 84 83 00 00 00    	je     2078b <fatfs_fat_writeback+0xa4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:90
        {
            if (fs->disk_io.write_media)
   20708:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2070b:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2070e:	85 c0                	test   eax,eax
   20710:	74 6c                	je     2077e <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:92
            {
                uint32 sectors = FAT_BUFFER_SECTORS;
   20712:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:93
                uint32 offset = pcur->address - fs->fat_begin_lba;
   20719:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2071c:	8b 90 00 02 00 00    	mov    edx,DWORD PTR [eax+0x200]
   20722:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20725:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   20728:	29 c2                	sub    edx,eax
   2072a:	89 d0                	mov    eax,edx
   2072c:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:96

                // Limit to sectors used for the FAT
                if ((offset + FAT_BUFFER_SECTORS) <= fs->fat_sectors)
   2072f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20732:	8d 50 01             	lea    edx,[eax+0x1]
   20735:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20738:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   2073b:	39 c2                	cmp    edx,eax
   2073d:	77 09                	ja     20748 <fatfs_fat_writeback+0x61>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:97
                    sectors = FAT_BUFFER_SECTORS;
   2073f:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [ebp-0xc],0x1
   20746:	eb 0c                	jmp    20754 <fatfs_fat_writeback+0x6d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:99
                else
                    sectors = fs->fat_sectors - offset;
   20748:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2074b:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   2074e:	2b 45 f0             	sub    eax,DWORD PTR [ebp-0x10]
   20751:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:101

                if (!fs->disk_io.write_media(pcur->address, pcur->sector, sectors))
   20754:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20757:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   2075a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   2075d:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20760:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   20766:	83 ec 04             	sub    esp,0x4
   20769:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2076c:	51                   	push   ecx
   2076d:	52                   	push   edx
   2076e:	ff d0                	call   eax
   20770:	83 c4 10             	add    esp,0x10
   20773:	85 c0                	test   eax,eax
   20775:	75 07                	jne    2077e <fatfs_fat_writeback+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:102
                    return 0;
   20777:	b8 00 00 00 00       	mov    eax,0x0
   2077c:	eb 19                	jmp    20797 <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:105
            }

            pcur->dirty = 0;
   2077e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20781:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   20788:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:108
        }

        return 1;
   2078b:	b8 01 00 00 00       	mov    eax,0x1
   20790:	eb 05                	jmp    20797 <fatfs_fat_writeback+0xb0>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:111
    }
    else
        return 0;
   20792:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:112
}
   20797:	c9                   	leave  
   20798:	c3                   	ret    

00020799 <fatfs_fat_read_sector>:
fatfs_fat_read_sector():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:117
//-----------------------------------------------------------------------------
// fatfs_fat_read_sector: Read a FAT sector
//-----------------------------------------------------------------------------
static struct fat_buffer *fatfs_fat_read_sector(struct fatfs *fs, uint32 sector)
{
   20799:	55                   	push   ebp
   2079a:	89 e5                	mov    ebp,esp
   2079c:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:118
    struct fat_buffer *last = NULL;
   2079f:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:119
    struct fat_buffer *pcur = fs->fat_buffer_head;
   207a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207a9:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   207af:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122

    // Itterate through sector buffer list
    while (pcur)
   207b2:	eb 60                	jmp    20814 <fatfs_fat_read_sector+0x7b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
   207b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   207b7:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   207bd:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   207c0:	77 11                	ja     207d3 <fatfs_fat_read_sector+0x3a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:125 (discriminator 1)
   207c2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   207c5:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   207cb:	83 c0 01             	add    eax,0x1
   207ce:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   207d1:	77 49                	ja     2081c <fatfs_fat_read_sector+0x83>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:129
            break;

        // End of list?
        if (pcur->next == NULL)
   207d3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   207d6:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   207dc:	85 c0                	test   eax,eax
   207de:	75 22                	jne    20802 <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:132
        {
            // Remove buffer from list
            if (last)
   207e0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   207e4:	74 0f                	je     207f5 <fatfs_fat_read_sector+0x5c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:133
                last->next = NULL;
   207e6:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   207e9:	c7 80 0c 02 00 00 00 	mov    DWORD PTR [eax+0x20c],0x0
   207f0:	00 00 00 
   207f3:	eb 0d                	jmp    20802 <fatfs_fat_read_sector+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:136
            // We the first and last buffer in the chain?
            else
                fs->fat_buffer_head = NULL;
   207f5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   207f8:	c7 80 54 02 00 00 00 	mov    DWORD PTR [eax+0x254],0x0
   207ff:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:139
        }

        last = pcur;
   20802:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20805:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:140
        pcur = pcur->next;
   20808:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2080b:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20811:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:122
{
    struct fat_buffer *last = NULL;
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   20814:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20818:	75 9a                	jne    207b4 <fatfs_fat_read_sector+0x1b>
   2081a:	eb 01                	jmp    2081d <fatfs_fat_read_sector+0x84>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:126
    {
        // Sector within this buffer?
        if ((sector >= pcur->address) && (sector < (pcur->address + FAT_BUFFER_SECTORS)))
            break;
   2081c:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:144
        last = pcur;
        pcur = pcur->next;
    }

    // We found the sector already in FAT buffer chain
    if (pcur)
   2081d:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20821:	74 29                	je     2084c <fatfs_fat_read_sector+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:146
    {
        pcur->ptr = (uint8 *)(pcur->sector + ((sector - pcur->address) * FAT_SECTOR_SIZE));
   20823:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20826:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20829:	8b 80 00 02 00 00    	mov    eax,DWORD PTR [eax+0x200]
   2082f:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   20832:	29 c1                	sub    ecx,eax
   20834:	89 c8                	mov    eax,ecx
   20836:	c1 e0 09             	shl    eax,0x9
   20839:	01 c2                	add    edx,eax
   2083b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2083e:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:147
        return pcur;
   20844:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20847:	e9 9e 00 00 00       	jmp    208ea <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:151
    }

    // Else, we removed the last item from the list
    pcur = last;
   2084c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2084f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:154

    // Add to start of sector buffer list (now newest sector)
    pcur->next = fs->fat_buffer_head;
   20852:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20855:	8b 90 54 02 00 00    	mov    edx,DWORD PTR [eax+0x254]
   2085b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2085e:	89 90 0c 02 00 00    	mov    DWORD PTR [eax+0x20c],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:155
    fs->fat_buffer_head = pcur;
   20864:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20867:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2086a:	89 90 54 02 00 00    	mov    DWORD PTR [eax+0x254],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:158

    // Writeback sector if changed
    if (pcur->dirty)
   20870:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20873:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20879:	85 c0                	test   eax,eax
   2087b:	74 1c                	je     20899 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:159
        if (!fatfs_fat_writeback(fs, pcur))
   2087d:	83 ec 08             	sub    esp,0x8
   20880:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20883:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20886:	e8 5c fe ff ff       	call   206e7 <fatfs_fat_writeback>
   2088b:	83 c4 10             	add    esp,0x10
   2088e:	85 c0                	test   eax,eax
   20890:	75 07                	jne    20899 <fatfs_fat_read_sector+0x100>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:160
            return 0;
   20892:	b8 00 00 00 00       	mov    eax,0x0
   20897:	eb 51                	jmp    208ea <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:163

    // Address is now new sector
    pcur->address = sector;
   20899:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2089c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2089f:	89 90 00 02 00 00    	mov    DWORD PTR [eax+0x200],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:166

    // Read next sector
    if (!fs->disk_io.read_media(pcur->address, pcur->sector, FAT_BUFFER_SECTORS))
   208a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208a8:	8b 40 34             	mov    eax,DWORD PTR [eax+0x34]
   208ab:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   208ae:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   208b1:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   208b7:	83 ec 04             	sub    esp,0x4
   208ba:	6a 01                	push   0x1
   208bc:	51                   	push   ecx
   208bd:	52                   	push   edx
   208be:	ff d0                	call   eax
   208c0:	83 c4 10             	add    esp,0x10
   208c3:	85 c0                	test   eax,eax
   208c5:	75 14                	jne    208db <fatfs_fat_read_sector+0x142>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:169
    {
        // Read failed, invalidate buffer address
        pcur->address = FAT32_INVALID_CLUSTER;
   208c7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   208ca:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   208d1:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:170
        return NULL;
   208d4:	b8 00 00 00 00       	mov    eax,0x0
   208d9:	eb 0f                	jmp    208ea <fatfs_fat_read_sector+0x151>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:173
    }

    pcur->ptr = pcur->sector;
   208db:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   208de:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   208e1:	89 90 08 02 00 00    	mov    DWORD PTR [eax+0x208],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:174
    return pcur;
   208e7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:175
}
   208ea:	c9                   	leave  
   208eb:	c3                   	ret    

000208ec <fatfs_fat_purge>:
fatfs_fat_purge():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:180
//-----------------------------------------------------------------------------
// fatfs_fat_purge: Purge 'dirty' FAT sectors to disk
//-----------------------------------------------------------------------------
int fatfs_fat_purge(struct fatfs *fs)
{
   208ec:	55                   	push   ebp
   208ed:	89 e5                	mov    ebp,esp
   208ef:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:181
    struct fat_buffer *pcur = fs->fat_buffer_head;
   208f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   208f5:	8b 80 54 02 00 00    	mov    eax,DWORD PTR [eax+0x254]
   208fb:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184

    // Itterate through sector buffer list
    while (pcur)
   208fe:	eb 35                	jmp    20935 <fatfs_fat_purge+0x49>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:187
    {
        // Writeback sector if changed
        if (pcur->dirty)
   20900:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20903:	8b 80 04 02 00 00    	mov    eax,DWORD PTR [eax+0x204]
   20909:	85 c0                	test   eax,eax
   2090b:	74 1c                	je     20929 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:188
            if (!fatfs_fat_writeback(fs, pcur))
   2090d:	83 ec 08             	sub    esp,0x8
   20910:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20913:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20916:	e8 cc fd ff ff       	call   206e7 <fatfs_fat_writeback>
   2091b:	83 c4 10             	add    esp,0x10
   2091e:	85 c0                	test   eax,eax
   20920:	75 07                	jne    20929 <fatfs_fat_purge+0x3d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:189
                return 0;
   20922:	b8 00 00 00 00       	mov    eax,0x0
   20927:	eb 17                	jmp    20940 <fatfs_fat_purge+0x54>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:191

        pcur = pcur->next;
   20929:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2092c:	8b 80 0c 02 00 00    	mov    eax,DWORD PTR [eax+0x20c]
   20932:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:184
int fatfs_fat_purge(struct fatfs *fs)
{
    struct fat_buffer *pcur = fs->fat_buffer_head;

    // Itterate through sector buffer list
    while (pcur)
   20935:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20939:	75 c5                	jne    20900 <fatfs_fat_purge+0x14>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:194
                return 0;

        pcur = pcur->next;
    }

    return 1;
   2093b:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:195
}
   20940:	c9                   	leave  
   20941:	c3                   	ret    

00020942 <fatfs_find_next_cluster>:
fatfs_find_next_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:206
//-----------------------------------------------------------------------------
// fatfs_find_next_cluster: Return cluster number of next cluster in chain by
// reading FAT table and traversing it. Return 0xffffffff for end of chain.
//-----------------------------------------------------------------------------
uint32 fatfs_find_next_cluster(struct fatfs *fs, uint32 current_cluster)
{
   20942:	55                   	push   ebp
   20943:	89 e5                	mov    ebp,esp
   20945:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:212
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    struct fat_buffer *pbuf;

    // Why is '..' labelled with cluster 0 when it should be 2 ??
    if (current_cluster == 0)
   20948:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   2094c:	75 07                	jne    20955 <fatfs_find_next_cluster+0x13>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:213
        current_cluster = 2;
   2094e:	c7 45 0c 02 00 00 00 	mov    DWORD PTR [ebp+0xc],0x2
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:216

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   20955:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20958:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   2095b:	85 c0                	test   eax,eax
   2095d:	75 0b                	jne    2096a <fatfs_find_next_cluster+0x28>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:217
        fat_sector_offset = current_cluster / 256;
   2095f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20962:	c1 e8 08             	shr    eax,0x8
   20965:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20968:	eb 09                	jmp    20973 <fatfs_find_next_cluster+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:219
    else
        fat_sector_offset = current_cluster / 128;
   2096a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2096d:	c1 e8 07             	shr    eax,0x7
   20970:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:222

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20973:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20976:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20979:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2097c:	01 d0                	add    eax,edx
   2097e:	83 ec 08             	sub    esp,0x8
   20981:	50                   	push   eax
   20982:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20985:	e8 0f fe ff ff       	call   20799 <fatfs_fat_read_sector>
   2098a:	83 c4 10             	add    esp,0x10
   2098d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:223
    if (!pbuf)
   20990:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   20994:	75 0a                	jne    209a0 <fatfs_find_next_cluster+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:224
        return (FAT32_LAST_CLUSTER);
   20996:	b8 ff ff ff ff       	mov    eax,0xffffffff
   2099b:	e9 2a 01 00 00       	jmp    20aca <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:226

    if (fs->fat_type == FAT_TYPE_16)
   209a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   209a3:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   209a6:	85 c0                	test   eax,eax
   209a8:	75 71                	jne    20a1b <fatfs_find_next_cluster+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:229
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 256)) * 2;
   209aa:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   209ad:	c1 e0 08             	shl    eax,0x8
   209b0:	89 c2                	mov    edx,eax
   209b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   209b5:	29 d0                	sub    eax,edx
   209b7:	01 c0                	add    eax,eax
   209b9:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:232

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   209bc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   209bf:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   209c5:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   209c8:	0f b7 d2             	movzx  edx,dx
   209cb:	83 c2 01             	add    edx,0x1
   209ce:	01 d0                	add    eax,edx
   209d0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209d3:	0f b6 c0             	movzx  eax,al
   209d6:	c1 e0 08             	shl    eax,0x8
   209d9:	89 c1                	mov    ecx,eax
   209db:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   209de:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   209e4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   209e7:	0f b7 c0             	movzx  eax,ax
   209ea:	01 d0                	add    eax,edx
   209ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   209ef:	0f b6 c0             	movzx  eax,al
   209f2:	01 c8                	add    eax,ecx
   209f4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235

        // If end of chain found
        if (nextcluster >= 0xFFF8 && nextcluster <= 0xFFFF)
   209f7:	81 7d f0 f7 ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xfff7
   209fe:	0f 86 c3 00 00 00    	jbe    20ac7 <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:235 (discriminator 1)
   20a04:	81 7d f0 ff ff 00 00 	cmp    DWORD PTR [ebp-0x10],0xffff
   20a0b:	0f 87 b6 00 00 00    	ja     20ac7 <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:236
            return (FAT32_LAST_CLUSTER);
   20a11:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20a16:	e9 af 00 00 00       	jmp    20aca <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:241
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (current_cluster - (fat_sector_offset * 128)) * 4;
   20a1b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20a1e:	c1 e0 07             	shl    eax,0x7
   20a21:	89 c2                	mov    edx,eax
   20a23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20a26:	29 d0                	sub    eax,edx
   20a28:	c1 e0 02             	shl    eax,0x2
   20a2b:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:244

        // Read Next Clusters value from Sector Buffer
        nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   20a2e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20a31:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20a37:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20a3a:	0f b7 d2             	movzx  edx,dx
   20a3d:	83 c2 03             	add    edx,0x3
   20a40:	01 d0                	add    eax,edx
   20a42:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20a45:	0f b6 c0             	movzx  eax,al
   20a48:	c1 e0 18             	shl    eax,0x18
   20a4b:	89 c1                	mov    ecx,eax
   20a4d:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20a50:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20a56:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20a59:	0f b7 d2             	movzx  edx,dx
   20a5c:	83 c2 02             	add    edx,0x2
   20a5f:	01 d0                	add    eax,edx
   20a61:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20a64:	0f b6 c0             	movzx  eax,al
   20a67:	c1 e0 10             	shl    eax,0x10
   20a6a:	01 c1                	add    ecx,eax
   20a6c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20a6f:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20a75:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   20a78:	0f b7 d2             	movzx  edx,dx
   20a7b:	83 c2 01             	add    edx,0x1
   20a7e:	01 d0                	add    eax,edx
   20a80:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20a83:	0f b6 c0             	movzx  eax,al
   20a86:	c1 e0 08             	shl    eax,0x8
   20a89:	01 c1                	add    ecx,eax
   20a8b:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20a8e:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20a94:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20a97:	0f b7 c0             	movzx  eax,ax
   20a9a:	01 d0                	add    eax,edx
   20a9c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20a9f:	0f b6 c0             	movzx  eax,al
   20aa2:	01 c8                	add    eax,ecx
   20aa4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:247

        // Mask out MS 4 bits (its 28bit addressing)
        nextcluster = nextcluster & 0x0FFFFFFF;
   20aa7:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250

        // If end of chain found
        if (nextcluster >= 0x0FFFFFF8 && nextcluster <= 0x0FFFFFFF)
   20aae:	81 7d f0 f7 ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xffffff7
   20ab5:	76 10                	jbe    20ac7 <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:250 (discriminator 1)
   20ab7:	81 7d f0 ff ff ff 0f 	cmp    DWORD PTR [ebp-0x10],0xfffffff
   20abe:	77 07                	ja     20ac7 <fatfs_find_next_cluster+0x185>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:251
            return (FAT32_LAST_CLUSTER);
   20ac0:	b8 ff ff ff ff       	mov    eax,0xffffffff
   20ac5:	eb 03                	jmp    20aca <fatfs_find_next_cluster+0x188>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:255
    }

    // Else return next cluster
    return (nextcluster);
   20ac7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:256
}
   20aca:	c9                   	leave  
   20acb:	c3                   	ret    

00020acc <fatfs_set_fs_info_next_free_cluster>:
fatfs_set_fs_info_next_free_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:261
//-----------------------------------------------------------------------------
// fatfs_set_fs_info_next_free_cluster: Write the next free cluster to the FSINFO table
//-----------------------------------------------------------------------------
void fatfs_set_fs_info_next_free_cluster(struct fatfs *fs, uint32 newValue)
{
   20acc:	55                   	push   ebp
   20acd:	89 e5                	mov    ebp,esp
   20acf:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:262
    if (fs->fat_type == FAT_TYPE_16)
   20ad2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20ad5:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20ad8:	85 c0                	test   eax,eax
   20ada:	0f 84 de 00 00 00    	je     20bbe <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:267
        ;
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
   20ae0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20ae3:	8b 50 1c             	mov    edx,DWORD PTR [eax+0x1c]
   20ae6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20ae9:	0f b7 40 18          	movzx  eax,WORD PTR [eax+0x18]
   20aed:	0f b7 c0             	movzx  eax,ax
   20af0:	01 d0                	add    eax,edx
   20af2:	83 ec 08             	sub    esp,0x8
   20af5:	50                   	push   eax
   20af6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20af9:	e8 9b fc ff ff       	call   20799 <fatfs_fat_read_sector>
   20afe:	83 c4 10             	add    esp,0x10
   20b01:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:268
        if (!pbuf)
   20b04:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20b08:	0f 84 af 00 00 00    	je     20bbd <fatfs_set_fs_info_next_free_cluster+0xf1>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:272
            return ;

        // Change
        FAT32_SET_32BIT_WORD(pbuf, 492, newValue);
   20b0e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b11:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b17:	05 ec 01 00 00       	add    eax,0x1ec
   20b1c:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20b1f:	88 10                	mov    BYTE PTR [eax],dl
   20b21:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b24:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b2a:	05 ed 01 00 00       	add    eax,0x1ed
   20b2f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20b32:	c1 ea 08             	shr    edx,0x8
   20b35:	88 10                	mov    BYTE PTR [eax],dl
   20b37:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b3a:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b40:	05 ee 01 00 00       	add    eax,0x1ee
   20b45:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20b48:	c1 ea 10             	shr    edx,0x10
   20b4b:	88 10                	mov    BYTE PTR [eax],dl
   20b4d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b50:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20b56:	05 ef 01 00 00       	add    eax,0x1ef
   20b5b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20b5e:	c1 ea 18             	shr    edx,0x18
   20b61:	88 10                	mov    BYTE PTR [eax],dl
   20b63:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20b66:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20b6d:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:273
        fs->next_free_cluster = newValue;
   20b70:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20b73:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   20b76:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:276

        // Write back FSINFO sector to disk
        if (fs->disk_io.write_media)
   20b79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20b7c:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20b7f:	85 c0                	test   eax,eax
   20b81:	74 1e                	je     20ba1 <fatfs_set_fs_info_next_free_cluster+0xd5>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:277
            fs->disk_io.write_media(pbuf->address, pbuf->sector, 1);
   20b83:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20b86:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   20b89:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   20b8c:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   20b8f:	8b 92 00 02 00 00    	mov    edx,DWORD PTR [edx+0x200]
   20b95:	83 ec 04             	sub    esp,0x4
   20b98:	6a 01                	push   0x1
   20b9a:	51                   	push   ecx
   20b9b:	52                   	push   edx
   20b9c:	ff d0                	call   eax
   20b9e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:280

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
   20ba1:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20ba4:	c7 80 00 02 00 00 ff 	mov    DWORD PTR [eax+0x200],0xffffffff
   20bab:	ff ff ff 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:281
        pbuf->dirty = 0;
   20bae:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20bb1:	c7 80 04 02 00 00 00 	mov    DWORD PTR [eax+0x204],0x0
   20bb8:	00 00 00 
   20bbb:	eb 01                	jmp    20bbe <fatfs_set_fs_info_next_free_cluster+0xf2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:269
    else
    {
        // Load sector to change it
        struct fat_buffer *pbuf = fatfs_fat_read_sector(fs, fs->lba_begin+fs->fs_info_sector);
        if (!pbuf)
            return ;
   20bbd:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:283

        // Invalidate cache entry
        pbuf->address = FAT32_INVALID_CLUSTER;
        pbuf->dirty = 0;
    }
}
   20bbe:	c9                   	leave  
   20bbf:	c3                   	ret    

00020bc0 <fatfs_find_blank_cluster>:
fatfs_find_blank_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:289
//-----------------------------------------------------------------------------
// fatfs_find_blank_cluster: Find a free cluster entry by reading the FAT
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_find_blank_cluster(struct fatfs *fs, uint32 start_cluster, uint32 *free_cluster)
{
   20bc0:	55                   	push   ebp
   20bc1:	89 e5                	mov    ebp,esp
   20bc3:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:292
    uint32 fat_sector_offset, position;
    uint32 nextcluster;
    uint32 current_cluster = start_cluster;
   20bc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20bc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:298
    struct fat_buffer *pbuf;

    do
    {
        // Find which sector of FAT table to read
        if (fs->fat_type == FAT_TYPE_16)
   20bcc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20bcf:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20bd2:	85 c0                	test   eax,eax
   20bd4:	75 0b                	jne    20be1 <fatfs_find_blank_cluster+0x21>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:299
            fat_sector_offset = current_cluster / 256;
   20bd6:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20bd9:	c1 e8 08             	shr    eax,0x8
   20bdc:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20bdf:	eb 09                	jmp    20bea <fatfs_find_blank_cluster+0x2a>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:301
        else
            fat_sector_offset = current_cluster / 128;
   20be1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20be4:	c1 e8 07             	shr    eax,0x7
   20be7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:303

        if ( fat_sector_offset < fs->fat_sectors)
   20bea:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20bed:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   20bf0:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   20bf3:	0f 86 28 01 00 00    	jbe    20d21 <fatfs_find_blank_cluster+0x161>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:306
        {
            // Read FAT sector into buffer
            pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20bf9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20bfc:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20bff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20c02:	01 d0                	add    eax,edx
   20c04:	83 ec 08             	sub    esp,0x8
   20c07:	50                   	push   eax
   20c08:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20c0b:	e8 89 fb ff ff       	call   20799 <fatfs_fat_read_sector>
   20c10:	83 c4 10             	add    esp,0x10
   20c13:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:307
            if (!pbuf)
   20c16:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   20c1a:	75 0a                	jne    20c26 <fatfs_find_blank_cluster+0x66>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:308
                return 0;
   20c1c:	b8 00 00 00 00       	mov    eax,0x0
   20c21:	e9 19 01 00 00       	jmp    20d3f <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:310

            if (fs->fat_type == FAT_TYPE_16)
   20c26:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20c29:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20c2c:	85 c0                	test   eax,eax
   20c2e:	75 52                	jne    20c82 <fatfs_find_blank_cluster+0xc2>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:313
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 256)) * 2;
   20c30:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20c33:	c1 e0 08             	shl    eax,0x8
   20c36:	89 c2                	mov    edx,eax
   20c38:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20c3b:	29 d0                	sub    eax,edx
   20c3d:	01 c0                	add    eax,eax
   20c3f:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:316

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT16_GET_16BIT_WORD(pbuf, (uint16)position);
   20c42:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20c45:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20c4b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20c4e:	0f b7 d2             	movzx  edx,dx
   20c51:	83 c2 01             	add    edx,0x1
   20c54:	01 d0                	add    eax,edx
   20c56:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20c59:	0f b6 c0             	movzx  eax,al
   20c5c:	c1 e0 08             	shl    eax,0x8
   20c5f:	89 c1                	mov    ecx,eax
   20c61:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20c64:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20c6a:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20c6d:	0f b7 c0             	movzx  eax,ax
   20c70:	01 d0                	add    eax,edx
   20c72:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20c75:	0f b6 c0             	movzx  eax,al
   20c78:	01 c8                	add    eax,ecx
   20c7a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   20c7d:	e9 93 00 00 00       	jmp    20d15 <fatfs_find_blank_cluster+0x155>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:321
            }
            else
            {
                // Find 32 bit entry of current sector relating to cluster number
                position = (current_cluster - (fat_sector_offset * 128)) * 4;
   20c82:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20c85:	c1 e0 07             	shl    eax,0x7
   20c88:	89 c2                	mov    edx,eax
   20c8a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20c8d:	29 d0                	sub    eax,edx
   20c8f:	c1 e0 02             	shl    eax,0x2
   20c92:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:324

                // Read Next Clusters value from Sector Buffer
                nextcluster = FAT32_GET_32BIT_WORD(pbuf, (uint16)position);
   20c95:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20c98:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20c9e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20ca1:	0f b7 d2             	movzx  edx,dx
   20ca4:	83 c2 03             	add    edx,0x3
   20ca7:	01 d0                	add    eax,edx
   20ca9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20cac:	0f b6 c0             	movzx  eax,al
   20caf:	c1 e0 18             	shl    eax,0x18
   20cb2:	89 c1                	mov    ecx,eax
   20cb4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20cb7:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cbd:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20cc0:	0f b7 d2             	movzx  edx,dx
   20cc3:	83 c2 02             	add    edx,0x2
   20cc6:	01 d0                	add    eax,edx
   20cc8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20ccb:	0f b6 c0             	movzx  eax,al
   20cce:	c1 e0 10             	shl    eax,0x10
   20cd1:	01 c1                	add    ecx,eax
   20cd3:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20cd6:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20cdc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   20cdf:	0f b7 d2             	movzx  edx,dx
   20ce2:	83 c2 01             	add    edx,0x1
   20ce5:	01 d0                	add    eax,edx
   20ce7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20cea:	0f b6 c0             	movzx  eax,al
   20ced:	c1 e0 08             	shl    eax,0x8
   20cf0:	01 c1                	add    ecx,eax
   20cf2:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20cf5:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20cfb:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   20cfe:	0f b7 c0             	movzx  eax,ax
   20d01:	01 d0                	add    eax,edx
   20d03:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20d06:	0f b6 c0             	movzx  eax,al
   20d09:	01 c8                	add    eax,ecx
   20d0b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:327

                // Mask out MS 4 bits (its 28bit addressing)
                nextcluster = nextcluster & 0x0FFFFFFF;
   20d0e:	81 65 f0 ff ff ff 0f 	and    DWORD PTR [ebp-0x10],0xfffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:330
            }

            if (nextcluster !=0 )
   20d15:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20d19:	74 0d                	je     20d28 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:331
                current_cluster++;
   20d1b:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   20d1f:	eb 07                	jmp    20d28 <fatfs_find_blank_cluster+0x168>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:335
        }
        else
            // Otherwise, run out of FAT sectors to check...
            return 0;
   20d21:	b8 00 00 00 00       	mov    eax,0x0
   20d26:	eb 17                	jmp    20d3f <fatfs_find_blank_cluster+0x17f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:337
    }
    while (nextcluster != 0x0);
   20d28:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20d2c:	0f 85 9a fe ff ff    	jne    20bcc <fatfs_find_blank_cluster+0xc>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:340

    // Found blank entry
    *free_cluster = current_cluster;
   20d32:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   20d35:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20d38:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:341
    return 1;
   20d3a:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:342
}
   20d3f:	c9                   	leave  
   20d40:	c3                   	ret    

00020d41 <fatfs_fat_set_cluster>:
fatfs_fat_set_cluster():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:350
// fatfs_fat_set_cluster: Set a cluster link in the chain. NOTE: Immediate
// write (slow).
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_set_cluster(struct fatfs *fs, uint32 cluster, uint32 next_cluster)
{
   20d41:	55                   	push   ebp
   20d42:	89 e5                	mov    ebp,esp
   20d44:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:355
    struct fat_buffer *pbuf;
    uint32 fat_sector_offset, position;

    // Find which sector of FAT table to read
    if (fs->fat_type == FAT_TYPE_16)
   20d47:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d4a:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20d4d:	85 c0                	test   eax,eax
   20d4f:	75 0b                	jne    20d5c <fatfs_fat_set_cluster+0x1b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:356
        fat_sector_offset = cluster / 256;
   20d51:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20d54:	c1 e8 08             	shr    eax,0x8
   20d57:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   20d5a:	eb 09                	jmp    20d65 <fatfs_fat_set_cluster+0x24>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:358
    else
        fat_sector_offset = cluster / 128;
   20d5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20d5f:	c1 e8 07             	shr    eax,0x7
   20d62:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:361

    // Read FAT sector into buffer
    pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba+fat_sector_offset);
   20d65:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d68:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20d6b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20d6e:	01 d0                	add    eax,edx
   20d70:	83 ec 08             	sub    esp,0x8
   20d73:	50                   	push   eax
   20d74:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20d77:	e8 1d fa ff ff       	call   20799 <fatfs_fat_read_sector>
   20d7c:	83 c4 10             	add    esp,0x10
   20d7f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:362
    if (!pbuf)
   20d82:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20d86:	75 0a                	jne    20d92 <fatfs_fat_set_cluster+0x51>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:363
        return 0;
   20d88:	b8 00 00 00 00       	mov    eax,0x0
   20d8d:	e9 f2 00 00 00       	jmp    20e84 <fatfs_fat_set_cluster+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:365

    if (fs->fat_type == FAT_TYPE_16)
   20d92:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20d95:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20d98:	85 c0                	test   eax,eax
   20d9a:	75 59                	jne    20df5 <fatfs_fat_set_cluster+0xb4>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:368
    {
        // Find 16 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 256)) * 2;
   20d9c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20d9f:	c1 e0 08             	shl    eax,0x8
   20da2:	89 c2                	mov    edx,eax
   20da4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20da7:	29 d0                	sub    eax,edx
   20da9:	01 c0                	add    eax,eax
   20dab:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:371

        // Write Next Clusters value to Sector Buffer
        FAT16_SET_16BIT_WORD(pbuf, (uint16)position, ((uint16)next_cluster));
   20dae:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20db1:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20db7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20dba:	0f b7 c0             	movzx  eax,ax
   20dbd:	01 d0                	add    eax,edx
   20dbf:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20dc2:	88 10                	mov    BYTE PTR [eax],dl
   20dc4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20dc7:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20dcd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20dd0:	0f b7 d2             	movzx  edx,dx
   20dd3:	83 c2 01             	add    edx,0x1
   20dd6:	01 d0                	add    eax,edx
   20dd8:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20ddb:	0f b7 d2             	movzx  edx,dx
   20dde:	c1 fa 08             	sar    edx,0x8
   20de1:	88 10                	mov    BYTE PTR [eax],dl
   20de3:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20de6:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20ded:	00 00 00 
   20df0:	e9 8a 00 00 00       	jmp    20e7f <fatfs_fat_set_cluster+0x13e>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:376
    }
    else
    {
        // Find 32 bit entry of current sector relating to cluster number
        position = (cluster - (fat_sector_offset * 128)) * 4;
   20df5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20df8:	c1 e0 07             	shl    eax,0x7
   20dfb:	89 c2                	mov    edx,eax
   20dfd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20e00:	29 d0                	sub    eax,edx
   20e02:	c1 e0 02             	shl    eax,0x2
   20e05:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:379

        // Write Next Clusters value to Sector Buffer
        FAT32_SET_32BIT_WORD(pbuf, (uint16)position, next_cluster);
   20e08:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20e0b:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20e11:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   20e14:	0f b7 c0             	movzx  eax,ax
   20e17:	01 d0                	add    eax,edx
   20e19:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20e1c:	88 10                	mov    BYTE PTR [eax],dl
   20e1e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20e21:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20e27:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20e2a:	0f b7 d2             	movzx  edx,dx
   20e2d:	83 c2 01             	add    edx,0x1
   20e30:	01 d0                	add    eax,edx
   20e32:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20e35:	c1 ea 08             	shr    edx,0x8
   20e38:	88 10                	mov    BYTE PTR [eax],dl
   20e3a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20e3d:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20e43:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20e46:	0f b7 d2             	movzx  edx,dx
   20e49:	83 c2 02             	add    edx,0x2
   20e4c:	01 d0                	add    eax,edx
   20e4e:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20e51:	c1 ea 10             	shr    edx,0x10
   20e54:	88 10                	mov    BYTE PTR [eax],dl
   20e56:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20e59:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20e5f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   20e62:	0f b7 d2             	movzx  edx,dx
   20e65:	83 c2 03             	add    edx,0x3
   20e68:	01 d0                	add    eax,edx
   20e6a:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   20e6d:	c1 ea 18             	shr    edx,0x18
   20e70:	88 10                	mov    BYTE PTR [eax],dl
   20e72:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20e75:	c7 80 04 02 00 00 01 	mov    DWORD PTR [eax+0x204],0x1
   20e7c:	00 00 00 
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:382
    }

    return 1;
   20e7f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:383
}
   20e84:	c9                   	leave  
   20e85:	c3                   	ret    

00020e86 <fatfs_free_cluster_chain>:
fatfs_free_cluster_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:390
//-----------------------------------------------------------------------------
// fatfs_free_cluster_chain: Follow a chain marking each element as free
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_free_cluster_chain(struct fatfs *fs, uint32 start_cluster)
{
   20e86:	55                   	push   ebp
   20e87:	89 e5                	mov    ebp,esp
   20e89:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:392
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;
   20e8c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20e8f:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   20e92:	eb 2d                	jmp    20ec1 <fatfs_free_cluster_chain+0x3b>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:397
    {
        last_cluster = next_cluster;
   20e94:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20e97:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:400

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   20e9a:	83 ec 08             	sub    esp,0x8
   20e9d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20ea0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20ea3:	e8 9a fa ff ff       	call   20942 <fatfs_find_next_cluster>
   20ea8:	83 c4 10             	add    esp,0x10
   20eab:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:403

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
   20eae:	83 ec 04             	sub    esp,0x4
   20eb1:	6a 00                	push   0x0
   20eb3:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20eb6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20eb9:	e8 83 fe ff ff       	call   20d41 <fatfs_fat_set_cluster>
   20ebe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395
{
    uint32 last_cluster;
    uint32 next_cluster = start_cluster;

    // Loop until end of chain
    while ( (next_cluster != FAT32_LAST_CLUSTER) && (next_cluster != 0x00000000) )
   20ec1:	83 7d f4 ff          	cmp    DWORD PTR [ebp-0xc],0xffffffff
   20ec5:	74 06                	je     20ecd <fatfs_free_cluster_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:395 (discriminator 1)
   20ec7:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   20ecb:	75 c7                	jne    20e94 <fatfs_free_cluster_chain+0xe>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:406

        // Clear last link
        fatfs_fat_set_cluster(fs, last_cluster, 0x00000000);
    }

    return 1;
   20ecd:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:407
}
   20ed2:	c9                   	leave  
   20ed3:	c3                   	ret    

00020ed4 <fatfs_fat_add_cluster_to_chain>:
fatfs_fat_add_cluster_to_chain():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:415
// fatfs_fat_add_cluster_to_chain: Follow a chain marking and then add a new entry
// to the current tail.
//-----------------------------------------------------------------------------
#if FATFS_INC_WRITE_SUPPORT
int fatfs_fat_add_cluster_to_chain(struct fatfs *fs, uint32 start_cluster, uint32 newEntry)
{
   20ed4:	55                   	push   ebp
   20ed5:	89 e5                	mov    ebp,esp
   20ed7:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:416
    uint32 last_cluster = FAT32_LAST_CLUSTER;
   20eda:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:417
    uint32 next_cluster = start_cluster;
   20ee1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   20ee4:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:419

    if (start_cluster == FAT32_LAST_CLUSTER)
   20ee7:	83 7d 0c ff          	cmp    DWORD PTR [ebp+0xc],0xffffffff
   20eeb:	75 2e                	jne    20f1b <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:420
        return 0;
   20eed:	b8 00 00 00 00       	mov    eax,0x0
   20ef2:	eb 59                	jmp    20f4d <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:425

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
    {
        last_cluster = next_cluster;
   20ef4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20ef7:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:428

        // Find next link
        next_cluster = fatfs_find_next_cluster(fs, next_cluster);
   20efa:	83 ec 08             	sub    esp,0x8
   20efd:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   20f00:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20f03:	e8 3a fa ff ff       	call   20942 <fatfs_find_next_cluster>
   20f08:	83 c4 10             	add    esp,0x10
   20f0b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:429
        if (!next_cluster)
   20f0e:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   20f12:	75 07                	jne    20f1b <fatfs_fat_add_cluster_to_chain+0x47>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:430
            return 0;
   20f14:	b8 00 00 00 00       	mov    eax,0x0
   20f19:	eb 32                	jmp    20f4d <fatfs_fat_add_cluster_to_chain+0x79>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:423

    if (start_cluster == FAT32_LAST_CLUSTER)
        return 0;

    // Loop until end of chain
    while ( next_cluster != FAT32_LAST_CLUSTER )
   20f1b:	83 7d f0 ff          	cmp    DWORD PTR [ebp-0x10],0xffffffff
   20f1f:	75 d3                	jne    20ef4 <fatfs_fat_add_cluster_to_chain+0x20>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:434
        if (!next_cluster)
            return 0;
    }

    // Add link in for new cluster
    fatfs_fat_set_cluster(fs, last_cluster, newEntry);
   20f21:	83 ec 04             	sub    esp,0x4
   20f24:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   20f27:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   20f2a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20f2d:	e8 0f fe ff ff       	call   20d41 <fatfs_fat_set_cluster>
   20f32:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:437

    // Mark new cluster as end of chain
    fatfs_fat_set_cluster(fs, newEntry, FAT32_LAST_CLUSTER);
   20f35:	83 ec 04             	sub    esp,0x4
   20f38:	6a ff                	push   0xffffffff
   20f3a:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   20f3d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20f40:	e8 fc fd ff ff       	call   20d41 <fatfs_fat_set_cluster>
   20f45:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:439

    return 1;
   20f48:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:440
}
   20f4d:	c9                   	leave  
   20f4e:	c3                   	ret    

00020f4f <fatfs_count_free_clusters>:
fatfs_count_free_clusters():
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:446
#endif
//-----------------------------------------------------------------------------
// fatfs_count_free_clusters:
//-----------------------------------------------------------------------------
uint32 fatfs_count_free_clusters(struct fatfs *fs)
{
   20f4f:	55                   	push   ebp
   20f50:	89 e5                	mov    ebp,esp
   20f52:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:448
    uint32 i,j;
    uint32 count = 0;
   20f55:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   20f5c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   20f63:	e9 19 01 00 00       	jmp    21081 <fatfs_count_free_clusters+0x132>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:454
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
   20f68:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20f6b:	8b 50 14             	mov    edx,DWORD PTR [eax+0x14]
   20f6e:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   20f71:	01 d0                	add    eax,edx
   20f73:	83 ec 08             	sub    esp,0x8
   20f76:	50                   	push   eax
   20f77:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   20f7a:	e8 1a f8 ff ff       	call   20799 <fatfs_fat_read_sector>
   20f7f:	83 c4 10             	add    esp,0x10
   20f82:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:455
        if (!pbuf)
   20f85:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   20f89:	0f 84 03 01 00 00    	je     21092 <fatfs_count_free_clusters+0x143>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   20f8f:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   20f96:	e9 d5 00 00 00       	jmp    21070 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:460
        {
            if (fs->fat_type == FAT_TYPE_16)
   20f9b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   20f9e:	8b 40 30             	mov    eax,DWORD PTR [eax+0x30]
   20fa1:	85 c0                	test   eax,eax
   20fa3:	75 49                	jne    20fee <fatfs_count_free_clusters+0x9f>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:462
            {
                if (FAT16_GET_16BIT_WORD(pbuf, (uint16)j) == 0)
   20fa5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20fa8:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20fae:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20fb1:	0f b7 d2             	movzx  edx,dx
   20fb4:	83 c2 01             	add    edx,0x1
   20fb7:	01 d0                	add    eax,edx
   20fb9:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20fbc:	0f b6 c0             	movzx  eax,al
   20fbf:	c1 e0 08             	shl    eax,0x8
   20fc2:	89 c1                	mov    ecx,eax
   20fc4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20fc7:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   20fcd:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   20fd0:	0f b7 c0             	movzx  eax,ax
   20fd3:	01 d0                	add    eax,edx
   20fd5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   20fd8:	0f b6 c0             	movzx  eax,al
   20fdb:	01 c8                	add    eax,ecx
   20fdd:	85 c0                	test   eax,eax
   20fdf:	75 04                	jne    20fe5 <fatfs_count_free_clusters+0x96>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:463
                    count++;
   20fe1:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:465

                j += 2;
   20fe5:	83 45 f0 02          	add    DWORD PTR [ebp-0x10],0x2
   20fe9:	e9 82 00 00 00       	jmp    21070 <fatfs_count_free_clusters+0x121>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:469
            }
            else
            {
                if (FAT32_GET_32BIT_WORD(pbuf, (uint16)j) == 0)
   20fee:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   20ff1:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   20ff7:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   20ffa:	0f b7 d2             	movzx  edx,dx
   20ffd:	83 c2 03             	add    edx,0x3
   21000:	01 d0                	add    eax,edx
   21002:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21005:	0f b6 c0             	movzx  eax,al
   21008:	c1 e0 18             	shl    eax,0x18
   2100b:	89 c1                	mov    ecx,eax
   2100d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   21010:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   21016:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   21019:	0f b7 d2             	movzx  edx,dx
   2101c:	83 c2 02             	add    edx,0x2
   2101f:	01 d0                	add    eax,edx
   21021:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21024:	0f b6 c0             	movzx  eax,al
   21027:	c1 e0 10             	shl    eax,0x10
   2102a:	01 c1                	add    ecx,eax
   2102c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2102f:	8b 80 08 02 00 00    	mov    eax,DWORD PTR [eax+0x208]
   21035:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   21038:	0f b7 d2             	movzx  edx,dx
   2103b:	83 c2 01             	add    edx,0x1
   2103e:	01 d0                	add    eax,edx
   21040:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21043:	0f b6 c0             	movzx  eax,al
   21046:	c1 e0 08             	shl    eax,0x8
   21049:	01 c1                	add    ecx,eax
   2104b:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2104e:	8b 90 08 02 00 00    	mov    edx,DWORD PTR [eax+0x208]
   21054:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21057:	0f b7 c0             	movzx  eax,ax
   2105a:	01 d0                	add    eax,edx
   2105c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2105f:	0f b6 c0             	movzx  eax,al
   21062:	01 c8                	add    eax,ecx
   21064:	85 c0                	test   eax,eax
   21066:	75 04                	jne    2106c <fatfs_count_free_clusters+0x11d>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:470
                    count++;
   21068:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:472

                j += 4;
   2106c:	83 45 f0 04          	add    DWORD PTR [ebp-0x10],0x4
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:458 (discriminator 1)
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;

        for (j = 0; j < FAT_SECTOR_SIZE; )
   21070:	81 7d f0 ff 01 00 00 	cmp    DWORD PTR [ebp-0x10],0x1ff
   21077:	0f 86 1e ff ff ff    	jbe    20f9b <fatfs_count_free_clusters+0x4c>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 2)
{
    uint32 i,j;
    uint32 count = 0;
    struct fat_buffer *pbuf;

    for (i = 0; i < fs->fat_sectors; i++)
   2107d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:451 (discriminator 1)
   21081:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21084:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21087:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   2108a:	0f 87 d8 fe ff ff    	ja     20f68 <fatfs_count_free_clusters+0x19>
   21090:	eb 01                	jmp    21093 <fatfs_count_free_clusters+0x144>
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:456
    {
        // Read FAT sector into buffer
        pbuf = fatfs_fat_read_sector(fs, fs->fat_begin_lba + i);
        if (!pbuf)
            break;
   21092:	90                   	nop
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:477
                j += 4;
            }
        }
    }

    return count;
   21093:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
/home/yogi/src/os/chrisOS/src/fat/fat_table.c:478
}
   21096:	c9                   	leave  
   21097:	c3                   	ret    

00021098 <fatfs_add_free_space>:
fatfs_add_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:46
//-----------------------------------------------------------------------------
// fatfs_add_free_space: Allocate another cluster of free space to the end
// of a files cluster chain.
//-----------------------------------------------------------------------------
int fatfs_add_free_space(struct fatfs *fs, uint32 *startCluster, uint32 clusters)
{
   21098:	55                   	push   ebp
   21099:	89 e5                	mov    ebp,esp
   2109b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:49
    uint32 i;
    uint32 nextcluster;
    uint32 start = *startCluster;
   2109e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   210a1:	8b 00                	mov    eax,DWORD PTR [eax]
   210a3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:52

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   210a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   210a9:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   210ac:	83 f8 ff             	cmp    eax,0xffffffff
   210af:	74 10                	je     210c1 <fatfs_add_free_space+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:53
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   210b1:	83 ec 08             	sub    esp,0x8
   210b4:	6a ff                	push   0xffffffff
   210b6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   210b9:	e8 0e fa ff ff       	call   20acc <fatfs_set_fs_info_next_free_cluster>
   210be:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55

    for (i=0;i<clusters;i++)
   210c1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   210c8:	eb 67                	jmp    21131 <fatfs_add_free_space+0x99>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:58
    {
        // Start looking for free clusters from the beginning
        if (fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   210ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   210cd:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   210d0:	83 ec 04             	sub    esp,0x4
   210d3:	8d 55 ec             	lea    edx,[ebp-0x14]
   210d6:	52                   	push   edx
   210d7:	50                   	push   eax
   210d8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   210db:	e8 e0 fa ff ff       	call   20bc0 <fatfs_find_blank_cluster>
   210e0:	83 c4 10             	add    esp,0x10
   210e3:	85 c0                	test   eax,eax
   210e5:	74 3f                	je     21126 <fatfs_add_free_space+0x8e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:61
        {
            // Point last to this
            fatfs_fat_set_cluster(fs, start, nextcluster);
   210e7:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   210ea:	83 ec 04             	sub    esp,0x4
   210ed:	50                   	push   eax
   210ee:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   210f1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   210f4:	e8 48 fc ff ff       	call   20d41 <fatfs_fat_set_cluster>
   210f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:64

            // Point this to end of file
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   210fc:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   210ff:	83 ec 04             	sub    esp,0x4
   21102:	6a ff                	push   0xffffffff
   21104:	50                   	push   eax
   21105:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21108:	e8 34 fc ff ff       	call   20d41 <fatfs_fat_set_cluster>
   2110d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:67

            // Adjust argument reference
            start = nextcluster;
   21110:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21113:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:68
            if (i == 0)
   21116:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   2111a:	75 11                	jne    2112d <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:69
                *startCluster = nextcluster;
   2111c:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2111f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21122:	89 10                	mov    DWORD PTR [eax],edx
   21124:	eb 07                	jmp    2112d <fatfs_add_free_space+0x95>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:72
        }
        else
            return 0;
   21126:	b8 00 00 00 00       	mov    eax,0x0
   2112b:	eb 11                	jmp    2113e <fatfs_add_free_space+0xa6>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 2)

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);

    for (i=0;i<clusters;i++)
   2112d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:55 (discriminator 1)
   21131:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   21134:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   21137:	72 91                	jb     210ca <fatfs_add_free_space+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:75
        }
        else
            return 0;
    }

    return 1;
   21139:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:76 (discriminator 1)
}
   2113e:	c9                   	leave  
   2113f:	c3                   	ret    

00021140 <fatfs_allocate_free_space>:
fatfs_allocate_free_space():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:83
// fatfs_allocate_free_space: Add an ammount of free space to a file either from
// 'startCluster' if newFile = false, or allocating a new start to the chain if
// newFile = true.
//-----------------------------------------------------------------------------
int fatfs_allocate_free_space(struct fatfs *fs, int newFile, uint32 *startCluster, uint32 size)
{
   21140:	55                   	push   ebp
   21141:	89 e5                	mov    ebp,esp
   21143:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:88
    uint32 clusterSize;
    uint32 clusterCount;
    uint32 nextcluster;

    if (size==0)
   21146:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   2114a:	75 0a                	jne    21156 <fatfs_allocate_free_space+0x16>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:89
        return 0;
   2114c:	b8 00 00 00 00       	mov    eax,0x0
   21151:	e9 c8 00 00 00       	jmp    2121e <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:92

    // Set the next free cluster hint to unknown
    if (fs->next_free_cluster != FAT32_LAST_CLUSTER)
   21156:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21159:	8b 40 24             	mov    eax,DWORD PTR [eax+0x24]
   2115c:	83 f8 ff             	cmp    eax,0xffffffff
   2115f:	74 10                	je     21171 <fatfs_allocate_free_space+0x31>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:93
        fatfs_set_fs_info_next_free_cluster(fs, FAT32_LAST_CLUSTER);
   21161:	83 ec 08             	sub    esp,0x8
   21164:	6a ff                	push   0xffffffff
   21166:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21169:	e8 5e f9 ff ff       	call   20acc <fatfs_set_fs_info_next_free_cluster>
   2116e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:96

    // Work out size and clusters
    clusterSize = fs->sectors_per_cluster * FAT_SECTOR_SIZE;
   21171:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21174:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21177:	0f b6 c0             	movzx  eax,al
   2117a:	c1 e0 09             	shl    eax,0x9
   2117d:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:97
    clusterCount = (size / clusterSize);
   21180:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   21183:	ba 00 00 00 00       	mov    edx,0x0
   21188:	f7 75 f0             	div    DWORD PTR [ebp-0x10]
   2118b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:100

    // If any left over
    if (size-(clusterSize*clusterCount))
   2118e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21191:	0f af 45 f4          	imul   eax,DWORD PTR [ebp-0xc]
   21195:	3b 45 14             	cmp    eax,DWORD PTR [ebp+0x14]
   21198:	74 04                	je     2119e <fatfs_allocate_free_space+0x5e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:101
        clusterCount++;
   2119a:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:104

    // Allocated first link in the chain if a new file
    if (newFile)
   2119e:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   211a2:	74 4d                	je     211f1 <fatfs_allocate_free_space+0xb1>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:106
    {
        if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &nextcluster))
   211a4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   211a7:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   211aa:	83 ec 04             	sub    esp,0x4
   211ad:	8d 55 ec             	lea    edx,[ebp-0x14]
   211b0:	52                   	push   edx
   211b1:	50                   	push   eax
   211b2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   211b5:	e8 06 fa ff ff       	call   20bc0 <fatfs_find_blank_cluster>
   211ba:	83 c4 10             	add    esp,0x10
   211bd:	85 c0                	test   eax,eax
   211bf:	75 07                	jne    211c8 <fatfs_allocate_free_space+0x88>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:107
            return 0;
   211c1:	b8 00 00 00 00       	mov    eax,0x0
   211c6:	eb 56                	jmp    2121e <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:110

        // If this is all that is needed then all done
        if (clusterCount==1)
   211c8:	83 7d f4 01          	cmp    DWORD PTR [ebp-0xc],0x1
   211cc:	75 2b                	jne    211f9 <fatfs_allocate_free_space+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:112
        {
            fatfs_fat_set_cluster(fs, nextcluster, FAT32_LAST_CLUSTER);
   211ce:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   211d1:	83 ec 04             	sub    esp,0x4
   211d4:	6a ff                	push   0xffffffff
   211d6:	50                   	push   eax
   211d7:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   211da:	e8 62 fb ff ff       	call   20d41 <fatfs_fat_set_cluster>
   211df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:113
            *startCluster = nextcluster;
   211e2:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   211e5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   211e8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:114
            return 1;
   211ea:	b8 01 00 00 00       	mov    eax,0x1
   211ef:	eb 2d                	jmp    2121e <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:119
        }
    }
    // Allocate from end of current chain (startCluster is end of chain)
    else
        nextcluster = *startCluster;
   211f1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   211f4:	8b 00                	mov    eax,DWORD PTR [eax]
   211f6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:121

    if (!fatfs_add_free_space(fs, &nextcluster, clusterCount))
   211f9:	83 ec 04             	sub    esp,0x4
   211fc:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   211ff:	8d 45 ec             	lea    eax,[ebp-0x14]
   21202:	50                   	push   eax
   21203:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21206:	e8 8d fe ff ff       	call   21098 <fatfs_add_free_space>
   2120b:	83 c4 10             	add    esp,0x10
   2120e:	85 c0                	test   eax,eax
   21210:	75 07                	jne    21219 <fatfs_allocate_free_space+0xd9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:122
            return 0;
   21212:	b8 00 00 00 00       	mov    eax,0x0
   21217:	eb 05                	jmp    2121e <fatfs_allocate_free_space+0xde>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:124

    return 1;
   21219:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:125 (discriminator 1)
}
   2121e:	c9                   	leave  
   2121f:	c3                   	ret    

00021220 <fatfs_find_free_dir_offset>:
fatfs_find_free_dir_offset():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:131
//-----------------------------------------------------------------------------
// fatfs_find_free_dir_offset: Find a free space in the directory for a new entry
// which takes up 'entryCount' blocks (or allocate some more)
//-----------------------------------------------------------------------------
static int fatfs_find_free_dir_offset(struct fatfs *fs, uint32 dirCluster, int entryCount, uint32 *pSector, uint8 *pOffset)
{
   21220:	55                   	push   ebp
   21221:	89 e5                	mov    ebp,esp
   21223:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:133
    struct fat_dir_entry *directoryEntry;
    uint8 item=0;
   21226:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:134
    uint16 recordoffset = 0;
   2122a:	66 c7 45 e6 00 00    	mov    WORD PTR [ebp-0x1a],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:135
    uint8 i=0;
   21230:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:136
    int x=0;
   21234:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:137
    int possible_spaces = 0;
   2123b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:138
    int start_recorded = 0;
   21242:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:141

    // No entries required?
    if (entryCount == 0)
   21249:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2124d:	75 0a                	jne    21259 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:142
        return 0;
   2124f:	b8 00 00 00 00       	mov    eax,0x0
   21254:	e9 fd 01 00 00       	jmp    21456 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:148

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   21259:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2125c:	8d 50 01             	lea    edx,[eax+0x1]
   2125f:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   21262:	6a 00                	push   0x0
   21264:	50                   	push   eax
   21265:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21268:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2126b:	e8 34 a3 ff ff       	call   1b5a4 <fatfs_sector_reader>
   21270:	83 c4 10             	add    esp,0x10
   21273:	85 c0                	test   eax,eax
   21275:	0f 84 1a 01 00 00    	je     21395 <fatfs_find_free_dir_offset+0x175>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   2127b:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   2127f:	e9 02 01 00 00       	jmp    21386 <fatfs_find_free_dir_offset+0x166>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:154
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   21284:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   21288:	c1 e0 05             	shl    eax,0x5
   2128b:	66 89 45 e6          	mov    WORD PTR [ebp-0x1a],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:157

                // Overlay directory entry over buffer
                directoryEntry = (struct fat_dir_entry*)(fs->currentsector.sector+recordoffset);
   2128f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21292:	8d 50 44             	lea    edx,[eax+0x44]
   21295:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   21299:	01 d0                	add    eax,edx
   2129b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:160

                // LFN Entry
                if (fatfs_entry_lfn_text(directoryEntry))
   2129e:	83 ec 0c             	sub    esp,0xc
   212a1:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   212a4:	e8 09 e4 ff ff       	call   1f6b2 <fatfs_entry_lfn_text>
   212a9:	83 c4 10             	add    esp,0x10
   212ac:	85 c0                	test   eax,eax
   212ae:	74 2c                	je     212dc <fatfs_find_free_dir_offset+0xbc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:163
                {
                    // First entry?
                    if (possible_spaces == 0)
   212b0:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   212b4:	75 1d                	jne    212d3 <fatfs_find_free_dir_offset+0xb3>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:166
                    {
                        // Store start
                        *pSector = x-1;
   212b6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   212b9:	83 e8 01             	sub    eax,0x1
   212bc:	89 c2                	mov    edx,eax
   212be:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   212c1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:167
                        *pOffset = item;
   212c3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   212c6:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   212ca:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:168
                        start_recorded = 1;
   212cc:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:173
                    }

                    // Increment the count in-case the file turns
                    // out to be deleted...
                    possible_spaces++;
   212d3:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
   212d7:	e9 a0 00 00 00       	jmp    2137c <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:179
                }
                // SFN Entry
                else
                {
                    // Has file been deleted?
                    if (fs->currentsector.sector[recordoffset] == FILE_HEADER_DELETED)
   212dc:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   212e0:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   212e3:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   212e8:	3c e5                	cmp    al,0xe5
   212ea:	75 39                	jne    21325 <fatfs_find_free_dir_offset+0x105>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:182
                    {
                        // First entry?
                        if (possible_spaces == 0)
   212ec:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   212f0:	75 1d                	jne    2130f <fatfs_find_free_dir_offset+0xef>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:185
                        {
                            // Store start
                            *pSector = x-1;
   212f2:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   212f5:	83 e8 01             	sub    eax,0x1
   212f8:	89 c2                	mov    edx,eax
   212fa:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   212fd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:186
                            *pOffset = item;
   212ff:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   21302:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   21306:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:187
                            start_recorded = 1;
   21308:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:190
                        }

                        possible_spaces++;
   2130f:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:193

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   21313:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   21316:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   21319:	7c 61                	jl     2137c <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:194
                            return 1;
   2131b:	b8 01 00 00 00       	mov    eax,0x1
   21320:	e9 31 01 00 00       	jmp    21456 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:199

                        // Else continue counting until we find a valid entry!
                    }
                    // Is the file entry empty?
                    else if (fs->currentsector.sector[recordoffset] == FILE_HEADER_BLANK)
   21325:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   21329:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2132c:	0f b6 44 02 44       	movzx  eax,BYTE PTR [edx+eax*1+0x44]
   21331:	84 c0                	test   al,al
   21333:	75 39                	jne    2136e <fatfs_find_free_dir_offset+0x14e>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:202
                    {
                        // First entry?
                        if (possible_spaces == 0)
   21335:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   21339:	75 1d                	jne    21358 <fatfs_find_free_dir_offset+0x138>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:205
                        {
                            // Store start
                            *pSector = x-1;
   2133b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2133e:	83 e8 01             	sub    eax,0x1
   21341:	89 c2                	mov    edx,eax
   21343:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   21346:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:206
                            *pOffset = item;
   21348:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   2134b:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   2134f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:207
                            start_recorded = 1;
   21351:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:211
                        }

                        // Increment the blank entries count
                        possible_spaces++;
   21358:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:214

                        // We have found enough space?
                        if (possible_spaces >= entryCount)
   2135c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2135f:	3b 45 10             	cmp    eax,DWORD PTR [ebp+0x10]
   21362:	7c 18                	jl     2137c <fatfs_find_free_dir_offset+0x15c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:215
                            return 1;
   21364:	b8 01 00 00 00       	mov    eax,0x1
   21369:	e9 e8 00 00 00       	jmp    21456 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:221
                    }
                    // File entry is valid
                    else
                    {
                        // Reset all flags
                        possible_spaces = 0;
   2136e:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:222
                        start_recorded = 0;
   21375:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   2137c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   21380:	83 c0 01             	add    eax,0x1
   21383:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:151 (discriminator 1)
   21386:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   2138a:	0f 86 f4 fe ff ff    	jbe    21284 <fatfs_find_free_dir_offset+0x64>
   21390:	e9 c4 fe ff ff       	jmp    21259 <fatfs_find_free_dir_offset+0x39>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:233
        else
        {
            uint32 newCluster;

            // Get a new cluster for directory
            if (!fatfs_find_blank_cluster(fs, fs->rootdir_first_cluster, &newCluster))
   21395:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21398:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   2139b:	83 ec 04             	sub    esp,0x4
   2139e:	8d 55 dc             	lea    edx,[ebp-0x24]
   213a1:	52                   	push   edx
   213a2:	50                   	push   eax
   213a3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   213a6:	e8 15 f8 ff ff       	call   20bc0 <fatfs_find_blank_cluster>
   213ab:	83 c4 10             	add    esp,0x10
   213ae:	85 c0                	test   eax,eax
   213b0:	75 0a                	jne    213bc <fatfs_find_free_dir_offset+0x19c>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:234
                return 0;
   213b2:	b8 00 00 00 00       	mov    eax,0x0
   213b7:	e9 9a 00 00 00       	jmp    21456 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:237

            // Add cluster to end of directory tree
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
   213bc:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   213bf:	83 ec 04             	sub    esp,0x4
   213c2:	50                   	push   eax
   213c3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   213c6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   213c9:	e8 06 fb ff ff       	call   20ed4 <fatfs_fat_add_cluster_to_chain>
   213ce:	83 c4 10             	add    esp,0x10
   213d1:	85 c0                	test   eax,eax
   213d3:	75 07                	jne    213dc <fatfs_find_free_dir_offset+0x1bc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:238
                return 0;
   213d5:	b8 00 00 00 00       	mov    eax,0x0
   213da:	eb 7a                	jmp    21456 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:241

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
   213dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   213df:	83 c0 44             	add    eax,0x44
   213e2:	83 ec 04             	sub    esp,0x4
   213e5:	68 00 02 00 00       	push   0x200
   213ea:	6a 00                	push   0x0
   213ec:	50                   	push   eax
   213ed:	e8 cf 3f 00 00       	call   253c1 <memset>
   213f2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242
            for (i=0;i<fs->sectors_per_cluster;i++)
   213f5:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
   213f9:	eb 2b                	jmp    21426 <fatfs_find_free_dir_offset+0x206>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:244
            {
                if (!fatfs_write_sector(fs, newCluster, i, 0))
   213fb:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   213ff:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   21402:	6a 00                	push   0x0
   21404:	52                   	push   edx
   21405:	50                   	push   eax
   21406:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21409:	e8 eb a3 ff ff       	call   1b7f9 <fatfs_write_sector>
   2140e:	83 c4 10             	add    esp,0x10
   21411:	85 c0                	test   eax,eax
   21413:	75 07                	jne    2141c <fatfs_find_free_dir_offset+0x1fc>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:245
                    return 0;
   21415:	b8 00 00 00 00       	mov    eax,0x0
   2141a:	eb 3a                	jmp    21456 <fatfs_find_free_dir_offset+0x236>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 2)
            if (!fatfs_fat_add_cluster_to_chain(fs, dirCluster, newCluster))
                return 0;

            // Erase new directory cluster
            memset(fs->currentsector.sector, 0x00, FAT_SECTOR_SIZE);
            for (i=0;i<fs->sectors_per_cluster;i++)
   2141c:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   21420:	83 c0 01             	add    eax,0x1
   21423:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:242 (discriminator 1)
   21426:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21429:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2142c:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   2142f:	77 ca                	ja     213fb <fatfs_find_free_dir_offset+0x1db>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:249
                if (!fatfs_write_sector(fs, newCluster, i, 0))
                    return 0;
            }

            // If non of the name fitted on previous sectors
            if (!start_recorded)
   21431:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   21435:	75 1a                	jne    21451 <fatfs_find_free_dir_offset+0x231>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:252
            {
                // Store start
                *pSector = (x-1);
   21437:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2143a:	83 e8 01             	sub    eax,0x1
   2143d:	89 c2                	mov    edx,eax
   2143f:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   21442:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:253
                *pOffset = 0;
   21444:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   21447:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:254
                start_recorded = 1;
   2144a:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:257
            }

            return 1;
   21451:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:262 (discriminator 2)
        }
    } // End of while loop

    return 0;
}
   21456:	c9                   	leave  
   21457:	c3                   	ret    

00021458 <fatfs_add_file_entry>:
fatfs_add_file_entry():
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:267
//-----------------------------------------------------------------------------
// fatfs_add_file_entry: Add a directory entry to a location found by FindFreeOffset
//-----------------------------------------------------------------------------
int fatfs_add_file_entry(struct fatfs *fs, uint32 dirCluster, char *filename, char *shortfilename, uint32 startCluster, uint32 size, int dir)
{
   21458:	55                   	push   ebp
   21459:	89 e5                	mov    ebp,esp
   2145b:	83 ec 58             	sub    esp,0x58
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:268
    uint8 item=0;
   2145e:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:269
    uint16 recordoffset = 0;
   21462:	66 c7 45 da 00 00    	mov    WORD PTR [ebp-0x26],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:270
    uint8 i=0;
   21468:	c6 45 f6 00          	mov    BYTE PTR [ebp-0xa],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:271
    uint32 x=0;
   2146c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:274
    int entryCount;
    struct fat_dir_entry shortEntry;
    int dirtySector = 0;
   21473:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:276

    uint32 dirSector = 0;
   2147a:	c7 45 b4 00 00 00 00 	mov    DWORD PTR [ebp-0x4c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:277
    uint8 dirOffset = 0;
   21481:	c6 45 b3 00          	mov    BYTE PTR [ebp-0x4d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:278
    int foundEnd = 0;
   21485:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:284

    uint8 checksum;
    uint8 *pSname;

    // No write access?
    if (!fs->disk_io.write_media)
   2148c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2148f:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   21492:	85 c0                	test   eax,eax
   21494:	75 0a                	jne    214a0 <fatfs_add_file_entry+0x48>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:285
        return 0;
   21496:	b8 00 00 00 00       	mov    eax,0x0
   2149b:	e9 0c 02 00 00       	jmp    216ac <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:290

#if FATFS_INC_LFN_SUPPORT
    // How many LFN entries are required?
    // NOTE: We always request one LFN even if it would fit in a SFN!
    entryCount = fatfs_lfn_entries_required(filename);
   214a0:	83 ec 0c             	sub    esp,0xc
   214a3:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   214a6:	e8 55 e3 ff ff       	call   1f800 <fatfs_lfn_entries_required>
   214ab:	83 c4 10             	add    esp,0x10
   214ae:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:291
    if (!entryCount)
   214b1:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   214b5:	75 0a                	jne    214c1 <fatfs_add_file_entry+0x69>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:292
        return 0;
   214b7:	b8 00 00 00 00       	mov    eax,0x0
   214bc:	e9 eb 01 00 00       	jmp    216ac <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:299
    entryCount = 0;
#endif

    // Find space in the directory for this filename (or allocate some more)
    // NOTE: We need to find space for at least the LFN + SFN (or just the SFN if LFNs not supported).
    if (!fatfs_find_free_dir_offset(fs, dirCluster, entryCount + 1, &dirSector, &dirOffset))
   214c1:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   214c4:	8d 50 01             	lea    edx,[eax+0x1]
   214c7:	83 ec 0c             	sub    esp,0xc
   214ca:	8d 45 b3             	lea    eax,[ebp-0x4d]
   214cd:	50                   	push   eax
   214ce:	8d 45 b4             	lea    eax,[ebp-0x4c]
   214d1:	50                   	push   eax
   214d2:	52                   	push   edx
   214d3:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   214d6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   214d9:	e8 42 fd ff ff       	call   21220 <fatfs_find_free_dir_offset>
   214de:	83 c4 20             	add    esp,0x20
   214e1:	85 c0                	test   eax,eax
   214e3:	75 0a                	jne    214ef <fatfs_add_file_entry+0x97>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:300
        return 0;
   214e5:	b8 00 00 00 00       	mov    eax,0x0
   214ea:	e9 bd 01 00 00       	jmp    216ac <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:303

    // Generate checksum of short filename
    pSname = (uint8*)shortfilename;
   214ef:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   214f2:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:304
    checksum = 0;
   214f5:	c6 45 e3 00          	mov    BYTE PTR [ebp-0x1d],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305
    for (i=11; i!=0; i--) checksum = ((checksum & 1) ? 0x80 : 0) + (checksum >> 1) + *pSname++;
   214f9:	c6 45 f6 0b          	mov    BYTE PTR [ebp-0xa],0xb
   214fd:	eb 3b                	jmp    2153a <fatfs_add_file_entry+0xe2>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 7)
   214ff:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   21503:	83 e0 01             	and    eax,0x1
   21506:	85 c0                	test   eax,eax
   21508:	74 07                	je     21511 <fatfs_add_file_entry+0xb9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 2)
   2150a:	ba 80 ff ff ff       	mov    edx,0xffffff80
   2150f:	eb 05                	jmp    21516 <fatfs_add_file_entry+0xbe>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 3)
   21511:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 5)
   21516:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   2151a:	d0 e8                	shr    al,1
   2151c:	8d 0c 02             	lea    ecx,[edx+eax*1]
   2151f:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   21522:	8d 50 01             	lea    edx,[eax+0x1]
   21525:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
   21528:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2152b:	01 c8                	add    eax,ecx
   2152d:	88 45 e3             	mov    BYTE PTR [ebp-0x1d],al
   21530:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   21534:	83 e8 01             	sub    eax,0x1
   21537:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:305 (discriminator 6)
   2153a:	80 7d f6 00          	cmp    BYTE PTR [ebp-0xa],0x0
   2153e:	75 bf                	jne    214ff <fatfs_add_file_entry+0xa7>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:308

    // Start from current sector where space was found!
    x = dirSector;
   21540:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   21543:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:314

    // Main cluster following loop
    while (1)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
   21546:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21549:	8d 50 01             	lea    edx,[eax+0x1]
   2154c:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   2154f:	6a 00                	push   0x0
   21551:	50                   	push   eax
   21552:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21555:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21558:	e8 47 a0 ff ff       	call   1b5a4 <fatfs_sector_reader>
   2155d:	83 c4 10             	add    esp,0x10
   21560:	85 c0                	test   eax,eax
   21562:	0f 84 3f 01 00 00    	je     216a7 <fatfs_add_file_entry+0x24f>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21568:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   2156c:	e9 ea 00 00 00       	jmp    2165b <fatfs_add_file_entry+0x203>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:320
            {
                // Create the multiplier for sector access
                recordoffset = FAT_DIR_ENTRY_SIZE * item;
   21571:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   21575:	c1 e0 05             	shl    eax,0x5
   21578:	66 89 45 da          	mov    WORD PTR [ebp-0x26],ax
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:323

                // If the start position for the entry has been found
                if (foundEnd==0)
   2157c:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   21580:	75 1d                	jne    2159f <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324
                    if ( (dirSector==(x-1)) && (dirOffset==item) )
   21582:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   21585:	8d 50 ff             	lea    edx,[eax-0x1]
   21588:	8b 45 b4             	mov    eax,DWORD PTR [ebp-0x4c]
   2158b:	39 c2                	cmp    edx,eax
   2158d:	75 10                	jne    2159f <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:324 (discriminator 1)
   2158f:	0f b6 45 b3          	movzx  eax,BYTE PTR [ebp-0x4d]
   21593:	3a 45 f7             	cmp    al,BYTE PTR [ebp-0x9]
   21596:	75 07                	jne    2159f <fatfs_add_file_entry+0x147>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:325
                        foundEnd = 1;
   21598:	c7 45 e4 01 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:328

                // Start adding filename
                if (foundEnd)
   2159f:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   215a3:	0f 84 a8 00 00 00    	je     21651 <fatfs_add_file_entry+0x1f9>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:330
                {
                    if (entryCount==0)
   215a9:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   215ad:	75 74                	jne    21623 <fatfs_add_file_entry+0x1cb>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:333
                    {
                        // Short filename
                        fatfs_sfn_create_entry(shortfilename, size, startCluster, &shortEntry, dir);
   215af:	83 ec 0c             	sub    esp,0xc
   215b2:	ff 75 20             	push   DWORD PTR [ebp+0x20]
   215b5:	8d 45 ba             	lea    eax,[ebp-0x46]
   215b8:	50                   	push   eax
   215b9:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   215bc:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   215bf:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   215c2:	e8 e8 e3 ff ff       	call   1f9af <fatfs_sfn_create_entry>
   215c7:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:337

#if FATFS_INC_TIME_DATE_SUPPORT
                        // Update create, access & modify time & date
                        fatfs_update_timestamps(&shortEntry, 1, 1, 1);
   215ca:	6a 01                	push   0x1
   215cc:	6a 01                	push   0x1
   215ce:	6a 01                	push   0x1
   215d0:	8d 45 ba             	lea    eax,[ebp-0x46]
   215d3:	50                   	push   eax
   215d4:	e8 3b a7 ff ff       	call   1bd14 <fatfs_update_timestamps>
   215d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:340
#endif

                        memcpy(&fs->currentsector.sector[recordoffset], &shortEntry, sizeof(shortEntry));
   215dc:	0f b7 45 da          	movzx  eax,WORD PTR [ebp-0x26]
   215e0:	8d 50 40             	lea    edx,[eax+0x40]
   215e3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   215e6:	01 d0                	add    eax,edx
   215e8:	8d 50 04             	lea    edx,[eax+0x4]
   215eb:	83 ec 04             	sub    esp,0x4
   215ee:	6a 20                	push   0x20
   215f0:	8d 45 ba             	lea    eax,[ebp-0x46]
   215f3:	50                   	push   eax
   215f4:	52                   	push   edx
   215f5:	e8 72 48 00 00       	call   25e6c <memcpy>
   215fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:343

                        // Writeback
                        return fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1);
   215fd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21600:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   21603:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21606:	8d 4a 44             	lea    ecx,[edx+0x44]
   21609:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2160c:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   21612:	83 ec 04             	sub    esp,0x4
   21615:	6a 01                	push   0x1
   21617:	51                   	push   ecx
   21618:	52                   	push   edx
   21619:	ff d0                	call   eax
   2161b:	83 c4 10             	add    esp,0x10
   2161e:	e9 89 00 00 00       	jmp    216ac <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:348
                    }
#if FATFS_INC_LFN_SUPPORT
                    else
                    {
                        entryCount--;
   21623:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:351

                        // Copy entry to directory buffer
                        fatfs_filename_to_lfn(filename, &fs->currentsector.sector[recordoffset], entryCount, checksum);
   21627:	0f b6 45 e3          	movzx  eax,BYTE PTR [ebp-0x1d]
   2162b:	0f b7 55 da          	movzx  edx,WORD PTR [ebp-0x26]
   2162f:	8d 4a 40             	lea    ecx,[edx+0x40]
   21632:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21635:	01 ca                	add    edx,ecx
   21637:	83 c2 04             	add    edx,0x4
   2163a:	50                   	push   eax
   2163b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2163e:	52                   	push   edx
   2163f:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   21642:	e8 fa e1 ff ff       	call   1f841 <fatfs_filename_to_lfn>
   21647:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:352
                        dirtySector = 1;
   2164a:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 2)
    {
        // Read sector
        if (fatfs_sector_reader(fs, dirCluster, x++, 0))
        {
            // Analyse Sector
            for (item = 0; item < FAT_DIR_ENTRIES_PER_SECTOR; item++)
   21651:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   21655:	83 c0 01             	add    eax,0x1
   21658:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:317 (discriminator 1)
   2165b:	80 7d f7 0f          	cmp    BYTE PTR [ebp-0x9],0xf
   2165f:	0f 86 0c ff ff ff    	jbe    21571 <fatfs_add_file_entry+0x119>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:359
#endif
                }
            } // End of if

            // Write back to disk before loading another sector
            if (dirtySector)
   21665:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   21669:	0f 84 d7 fe ff ff    	je     21546 <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:361
            {
                if (!fs->disk_io.write_media(fs->currentsector.address, fs->currentsector.sector, 1))
   2166f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21672:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   21675:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21678:	8d 4a 44             	lea    ecx,[edx+0x44]
   2167b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2167e:	8b 92 44 02 00 00    	mov    edx,DWORD PTR [edx+0x244]
   21684:	83 ec 04             	sub    esp,0x4
   21687:	6a 01                	push   0x1
   21689:	51                   	push   ecx
   2168a:	52                   	push   edx
   2168b:	ff d0                	call   eax
   2168d:	83 c4 10             	add    esp,0x10
   21690:	85 c0                	test   eax,eax
   21692:	75 07                	jne    2169b <fatfs_add_file_entry+0x243>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:362
                    return 0;
   21694:	b8 00 00 00 00       	mov    eax,0x0
   21699:	eb 11                	jmp    216ac <fatfs_add_file_entry+0x254>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:364

                dirtySector = 0;
   2169b:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   216a2:	e9 9f fe ff ff       	jmp    21546 <fatfs_add_file_entry+0xee>
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:368
            }
        }
        else
            return 0;
   216a7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/fat/fat_write.c:372 (discriminator 2)
    } // End of while loop

    return 0;
}
   216ac:	c9                   	leave  
   216ad:	c3                   	ret    
   216ae:	66 90                	xchg   ax,ax

000216b0 <printMBR>:
printMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:13
uint8_t partBuffer[512*20]; //10240
gptHeader_t* gptHdr;
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
   216b0:	55                   	push   ebp
   216b1:	89 e5                	mov    ebp,esp
   216b3:	57                   	push   edi
   216b4:	56                   	push   esi
   216b5:	53                   	push   ebx
   216b6:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:14
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
   216b9:	83 ec 0c             	sub    esp,0xc
   216bc:	68 20 3b 08 00       	push   0x83b20
   216c1:	e8 41 5e 00 00       	call   27507 <printk>
   216c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   216c9:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   216d0:	e9 8b 00 00 00       	jmp    21760 <printMBR+0xb0>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:17
    {
        if (mbr->parts[cnt].partStartSector>0)
   216d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   216d8:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   216db:	c1 e2 04             	shl    edx,0x4
   216de:	01 d0                	add    eax,edx
   216e0:	8b 00                	mov    eax,DWORD PTR [eax]
   216e2:	85 c0                	test   eax,eax
   216e4:	74 76                	je     2175c <printMBR+0xac>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
   216e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   216e9:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   216ec:	c1 e2 04             	shl    edx,0x4
   216ef:	01 d0                	add    eax,edx
   216f1:	83 c0 0c             	add    eax,0xc
   216f4:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   216f7:	84 c0                	test   al,al
   216f9:	74 07                	je     21702 <printMBR+0x52>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 1)
   216fb:	bf 47 3b 08 00       	mov    edi,0x83b47
   21700:	eb 05                	jmp    21707 <printMBR+0x57>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 2)
   21702:	bf 49 3b 08 00       	mov    edi,0x83b49
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:18 (discriminator 4)
   21707:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2170a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2170d:	c1 e2 04             	shl    edx,0x4
   21710:	01 d0                	add    eax,edx
   21712:	83 c0 0d             	add    eax,0xd
   21715:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   21718:	0f b6 d8             	movzx  ebx,al
   2171b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2171e:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   21721:	c1 e2 04             	shl    edx,0x4
   21724:	01 d0                	add    eax,edx
   21726:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   21729:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2172c:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2172f:	c1 e2 04             	shl    edx,0x4
   21732:	01 d0                	add    eax,edx
   21734:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   21737:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2173a:	8b 75 e4             	mov    esi,DWORD PTR [ebp-0x1c]
   2173d:	c1 e6 04             	shl    esi,0x4
   21740:	01 f0                	add    eax,esi
   21742:	8b 00                	mov    eax,DWORD PTR [eax]
   21744:	83 ec 04             	sub    esp,0x4
   21747:	57                   	push   edi
   21748:	53                   	push   ebx
   21749:	51                   	push   ecx
   2174a:	52                   	push   edx
   2174b:	50                   	push   eax
   2174c:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   2174f:	68 4b 3b 08 00       	push   0x83b4b
   21754:	e8 ae 5d 00 00       	call   27507 <printk>
   21759:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 2)
gptPartEntry_t* gptPart;

void printMBR(struct mbr_t* mbr)
{
    printk("Part#\tStart\tEnd\t\tTotal\t\tPartType\tBoot\n");
    for (int cnt=0;cnt<mbr->partCount;cnt++)
   2175c:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:15 (discriminator 1)
   21760:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21763:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   21769:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   2176c:	0f 8f 63 ff ff ff    	jg     216d5 <printMBR+0x25>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:20
    {
        if (mbr->parts[cnt].partStartSector>0)
            printk("%u\t\t%u\t\t%u\t%u\t\t%u\t\t%s\n",cnt,mbr->parts[cnt].partStartSector, mbr->parts[cnt].partEndSector, mbr->parts[cnt].partTotalSectors,mbr->parts[cnt].systemID,mbr->parts[cnt].bootable?"Y":"N");
    }
    printk("\n");
   21772:	83 ec 0c             	sub    esp,0xc
   21775:	68 62 3b 08 00       	push   0x83b62
   2177a:	e8 88 5d 00 00       	call   27507 <printk>
   2177f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:21
}
   21782:	90                   	nop
   21783:	8d 65 f4             	lea    esp,[ebp-0xc]
   21786:	5b                   	pop    ebx
   21787:	5e                   	pop    esi
   21788:	5f                   	pop    edi
   21789:	5d                   	pop    ebp
   2178a:	c3                   	ret    

0002178b <parseMBR>:
parseMBR():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:24
    
bool parseMBR(struct ataDeviceInfo_t* devInfo, struct mbr_t* mbr)
{
   2178b:	55                   	push   ebp
   2178c:	89 e5                	mov    ebp,esp
   2178e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:25
    HBA_PORT* port=(HBA_PORT*)devInfo->ioPort;
   21791:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21794:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2179a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:27
    
    memset(mbr,0,sizeof(struct mbr_t));
   2179d:	83 ec 04             	sub    esp,0x4
   217a0:	68 17 04 00 00       	push   0x417
   217a5:	6a 00                	push   0x0
   217a7:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   217aa:	e8 12 3c 00 00       	call   253c1 <memset>
   217af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:28
    mbr->parts[0].partStartSector=0;
   217b2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   217b5:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:29
    printd(DEBUG_HARDDRIVE,"devInfo->ABAR=0x%08X\n",devInfo->ABAR);
   217bb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   217be:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   217c4:	83 ec 04             	sub    esp,0x4
   217c7:	50                   	push   eax
   217c8:	68 64 3b 08 00       	push   0x83b64
   217cd:	6a 08                	push   0x8
   217cf:	e8 53 5d 00 00       	call   27527 <printd>
   217d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:30
    if (devInfo->ABAR)
   217d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   217da:	8b 80 6f 02 00 00    	mov    eax,DWORD PTR [eax+0x26f]
   217e0:	85 c0                	test   eax,eax
   217e2:	74 66                	je     2184a <parseMBR+0xbf>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:32
    {
        printd(DEBUG_HARDDRIVE,"Disk is SATA\n");
   217e4:	83 ec 08             	sub    esp,0x8
   217e7:	68 7a 3b 08 00       	push   0x83b7a
   217ec:	6a 08                	push   0x8
   217ee:	e8 34 5d 00 00       	call   27527 <printd>
   217f3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:33
        ahciSetCurrentDisk(port);
   217f6:	83 ec 0c             	sub    esp,0xc
   217f9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   217fc:	e8 e2 39 ff ff       	call   151e3 <ahciSetCurrentDisk>
   21801:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:34
        bool lResult=ahciRead(port,0,mbrBuffer,1);
   21804:	6a 01                	push   0x1
   21806:	68 a0 8d 09 00       	push   0x98da0
   2180b:	6a 00                	push   0x0
   2180d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21810:	e8 02 3a ff ff       	call   15217 <ahciRead>
   21815:	83 c4 10             	add    esp,0x10
   21818:	85 c0                	test   eax,eax
   2181a:	0f 95 c0             	setne  al
   2181d:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:35
        if (!lResult)
   21820:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   21824:	83 f0 01             	xor    eax,0x1
   21827:	84 c0                	test   al,al
   21829:	74 75                	je     218a0 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:37
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   2182b:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   2182f:	83 ec 08             	sub    esp,0x8
   21832:	50                   	push   eax
   21833:	68 88 3b 08 00       	push   0x83b88
   21838:	e8 ca 5c 00 00       	call   27507 <printk>
   2183d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:38
            return false;
   21840:	b8 00 00 00 00       	mov    eax,0x0
   21845:	e9 98 03 00 00       	jmp    21be2 <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:43
        }
    }
    else
    {
        printd(DEBUG_HARDDRIVE,"Disk is ATA\n");
   2184a:	83 ec 08             	sub    esp,0x8
   2184d:	68 a8 3b 08 00       	push   0x83ba8
   21852:	6a 08                	push   0x8
   21854:	e8 ce 5c 00 00       	call   27527 <printd>
   21859:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:44
        int lResult=ataReadDisk(devInfo, mbr->parts, 0, mbrBuffer, 1);
   2185c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2185f:	83 ec 0c             	sub    esp,0xc
   21862:	6a 01                	push   0x1
   21864:	68 a0 8d 09 00       	push   0x98da0
   21869:	6a 00                	push   0x0
   2186b:	50                   	push   eax
   2186c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2186f:	e8 ff 14 00 00       	call   22d73 <ataReadDisk>
   21874:	83 c4 20             	add    esp,0x20
   21877:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:45
        if (lResult!=512)
   2187a:	81 7d ec 00 02 00 00 	cmp    DWORD PTR [ebp-0x14],0x200
   21881:	74 1d                	je     218a0 <parseMBR+0x115>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:47
        {
            printk("Could not read ATA MBR (0x%08X)", lResult);
   21883:	83 ec 08             	sub    esp,0x8
   21886:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   21889:	68 88 3b 08 00       	push   0x83b88
   2188e:	e8 74 5c 00 00       	call   27507 <printk>
   21893:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:48
            return false;
   21896:	b8 00 00 00 00       	mov    eax,0x0
   2189b:	e9 42 03 00 00       	jmp    21be2 <parseMBR+0x457>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:51
        }
    }
    memcpy(mbr->diskID, &mbrBuffer[0x1b4], 10);
   218a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218a3:	05 04 04 00 00       	add    eax,0x404
   218a8:	83 ec 04             	sub    esp,0x4
   218ab:	6a 0a                	push   0xa
   218ad:	68 54 8f 09 00       	push   0x98f54
   218b2:	50                   	push   eax
   218b3:	e8 b4 45 00 00       	call   25e6c <memcpy>
   218b8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52
    mbr->validBootSector=mbrBuffer[0x1FE]==0x55 && mbrBuffer[0x1FF]==0xAA;
   218bb:	0f b6 05 9e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9e
   218c2:	3c 55                	cmp    al,0x55
   218c4:	75 12                	jne    218d8 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 1)
   218c6:	0f b6 05 9f 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9f
   218cd:	3c aa                	cmp    al,0xaa
   218cf:	75 07                	jne    218d8 <parseMBR+0x14d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 3)
   218d1:	b8 01 00 00 00       	mov    eax,0x1
   218d6:	eb 05                	jmp    218dd <parseMBR+0x152>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 4)
   218d8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:52 (discriminator 6)
   218dd:	83 e0 01             	and    eax,0x1
   218e0:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   218e3:	88 82 0e 04 00 00    	mov    BYTE PTR [edx+0x40e],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:53 (discriminator 6)
    mbr->parts[0].bootable = mbrBuffer[MBR_PART1_OFFSET+0]==0x80;
   218e9:	0f b6 05 5e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f5e
   218f0:	3c 80                	cmp    al,0x80
   218f2:	0f 94 c2             	sete   dl
   218f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   218f8:	88 50 0c             	mov    BYTE PTR [eax+0xc],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:54 (discriminator 6)
    mbr->parts[0].systemID = mbrBuffer[MBR_PART1_OFFSET+4];
   218fb:	0f b6 15 62 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f62
   21902:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21905:	88 50 0d             	mov    BYTE PTR [eax+0xd],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:55 (discriminator 6)
    mbr->parts[0].partStartSector = mbrBuffer[MBR_PART1_OFFSET+8] | (mbrBuffer[MBR_PART1_OFFSET+9]<<8) | (mbrBuffer[MBR_PART1_OFFSET+10]<<16) | (mbrBuffer[MBR_PART1_OFFSET+11]<<24);
   21908:	0f b6 05 66 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f66
   2190f:	0f b6 c0             	movzx  eax,al
   21912:	0f b6 15 67 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f67
   21919:	0f b6 d2             	movzx  edx,dl
   2191c:	c1 e2 08             	shl    edx,0x8
   2191f:	09 c2                	or     edx,eax
   21921:	0f b6 05 68 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f68
   21928:	0f b6 c0             	movzx  eax,al
   2192b:	c1 e0 10             	shl    eax,0x10
   2192e:	09 c2                	or     edx,eax
   21930:	0f b6 05 69 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f69
   21937:	0f b6 c0             	movzx  eax,al
   2193a:	c1 e0 18             	shl    eax,0x18
   2193d:	09 d0                	or     eax,edx
   2193f:	89 c2                	mov    edx,eax
   21941:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21944:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:56 (discriminator 6)
    mbr->parts[0].partTotalSectors = mbrBuffer[MBR_PART1_OFFSET+12] | (mbrBuffer[MBR_PART1_OFFSET+13]<<8) | (mbrBuffer[MBR_PART1_OFFSET+14]<<16) | (mbrBuffer[MBR_PART1_OFFSET+15]<<24);
   21946:	0f b6 05 6a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6a
   2194d:	0f b6 c0             	movzx  eax,al
   21950:	0f b6 15 6b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f6b
   21957:	0f b6 d2             	movzx  edx,dl
   2195a:	c1 e2 08             	shl    edx,0x8
   2195d:	09 c2                	or     edx,eax
   2195f:	0f b6 05 6c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6c
   21966:	0f b6 c0             	movzx  eax,al
   21969:	c1 e0 10             	shl    eax,0x10
   2196c:	09 c2                	or     edx,eax
   2196e:	0f b6 05 6d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6d
   21975:	0f b6 c0             	movzx  eax,al
   21978:	c1 e0 18             	shl    eax,0x18
   2197b:	09 d0                	or     eax,edx
   2197d:	89 c2                	mov    edx,eax
   2197f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21982:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:57 (discriminator 6)
    mbr->parts[0].partEndSector = mbr->parts[0].partStartSector + mbr->parts[0].partTotalSectors;
   21985:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21988:	8b 10                	mov    edx,DWORD PTR [eax]
   2198a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2198d:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   21990:	01 c2                	add    edx,eax
   21992:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21995:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:59 (discriminator 6)

    mbr->parts[1].bootable = mbrBuffer[MBR_PART2_OFFSET+0]==0x80;
   21998:	0f b6 05 6e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f6e
   2199f:	3c 80                	cmp    al,0x80
   219a1:	0f 94 c2             	sete   dl
   219a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   219a7:	88 50 1c             	mov    BYTE PTR [eax+0x1c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:60 (discriminator 6)
    mbr->parts[1].systemID = mbrBuffer[MBR_PART2_OFFSET+4];
   219aa:	0f b6 15 72 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f72
   219b1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   219b4:	88 50 1d             	mov    BYTE PTR [eax+0x1d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:61 (discriminator 6)
    mbr->parts[1].partStartSector = mbrBuffer[MBR_PART2_OFFSET+8] | (mbrBuffer[MBR_PART2_OFFSET+9]<<8) | (mbrBuffer[MBR_PART2_OFFSET+10]<<16) | (mbrBuffer[MBR_PART2_OFFSET+11]<<24);
   219b7:	0f b6 05 76 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f76
   219be:	0f b6 c0             	movzx  eax,al
   219c1:	0f b6 15 77 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f77
   219c8:	0f b6 d2             	movzx  edx,dl
   219cb:	c1 e2 08             	shl    edx,0x8
   219ce:	09 c2                	or     edx,eax
   219d0:	0f b6 05 78 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f78
   219d7:	0f b6 c0             	movzx  eax,al
   219da:	c1 e0 10             	shl    eax,0x10
   219dd:	09 c2                	or     edx,eax
   219df:	0f b6 05 79 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f79
   219e6:	0f b6 c0             	movzx  eax,al
   219e9:	c1 e0 18             	shl    eax,0x18
   219ec:	09 d0                	or     eax,edx
   219ee:	89 c2                	mov    edx,eax
   219f0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   219f3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:62 (discriminator 6)
    mbr->parts[1].partTotalSectors = mbrBuffer[MBR_PART2_OFFSET+12] | (mbrBuffer[MBR_PART2_OFFSET+13]<<8) | (mbrBuffer[MBR_PART2_OFFSET+14]<<16) | (mbrBuffer[MBR_PART2_OFFSET+15]<<24);
   219f6:	0f b6 05 7a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7a
   219fd:	0f b6 c0             	movzx  eax,al
   21a00:	0f b6 15 7b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f7b
   21a07:	0f b6 d2             	movzx  edx,dl
   21a0a:	c1 e2 08             	shl    edx,0x8
   21a0d:	09 c2                	or     edx,eax
   21a0f:	0f b6 05 7c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7c
   21a16:	0f b6 c0             	movzx  eax,al
   21a19:	c1 e0 10             	shl    eax,0x10
   21a1c:	09 c2                	or     edx,eax
   21a1e:	0f b6 05 7d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7d
   21a25:	0f b6 c0             	movzx  eax,al
   21a28:	c1 e0 18             	shl    eax,0x18
   21a2b:	09 d0                	or     eax,edx
   21a2d:	89 c2                	mov    edx,eax
   21a2f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a32:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:63 (discriminator 6)
    mbr->parts[1].partEndSector = mbr->parts[1].partStartSector + mbr->parts[1].partTotalSectors;
   21a35:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a38:	8b 50 10             	mov    edx,DWORD PTR [eax+0x10]
   21a3b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a3e:	8b 40 18             	mov    eax,DWORD PTR [eax+0x18]
   21a41:	01 c2                	add    edx,eax
   21a43:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a46:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:65 (discriminator 6)

    mbr->parts[2].bootable = mbrBuffer[MBR_PART3_OFFSET+0]==0x80;
   21a49:	0f b6 05 7e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f7e
   21a50:	3c 80                	cmp    al,0x80
   21a52:	0f 94 c2             	sete   dl
   21a55:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a58:	88 50 2c             	mov    BYTE PTR [eax+0x2c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:66 (discriminator 6)
    mbr->parts[2].systemID = mbrBuffer[MBR_PART3_OFFSET+4];
   21a5b:	0f b6 15 82 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f82
   21a62:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21a65:	88 50 2d             	mov    BYTE PTR [eax+0x2d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:67 (discriminator 6)
    mbr->parts[2].partStartSector = mbrBuffer[MBR_PART3_OFFSET+8] | (mbrBuffer[MBR_PART3_OFFSET+9]<<8) | (mbrBuffer[MBR_PART3_OFFSET+10]<<16) | (mbrBuffer[MBR_PART3_OFFSET+11]<<24);
   21a68:	0f b6 05 86 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f86
   21a6f:	0f b6 c0             	movzx  eax,al
   21a72:	0f b6 15 87 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f87
   21a79:	0f b6 d2             	movzx  edx,dl
   21a7c:	c1 e2 08             	shl    edx,0x8
   21a7f:	09 c2                	or     edx,eax
   21a81:	0f b6 05 88 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f88
   21a88:	0f b6 c0             	movzx  eax,al
   21a8b:	c1 e0 10             	shl    eax,0x10
   21a8e:	09 c2                	or     edx,eax
   21a90:	0f b6 05 89 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f89
   21a97:	0f b6 c0             	movzx  eax,al
   21a9a:	c1 e0 18             	shl    eax,0x18
   21a9d:	09 d0                	or     eax,edx
   21a9f:	89 c2                	mov    edx,eax
   21aa1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21aa4:	89 50 20             	mov    DWORD PTR [eax+0x20],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:68 (discriminator 6)
    mbr->parts[2].partTotalSectors = mbrBuffer[MBR_PART3_OFFSET+12] | (mbrBuffer[MBR_PART3_OFFSET+13]<<8) | (mbrBuffer[MBR_PART3_OFFSET+14]<<16) | (mbrBuffer[MBR_PART3_OFFSET+15]<<24);
   21aa7:	0f b6 05 8a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8a
   21aae:	0f b6 c0             	movzx  eax,al
   21ab1:	0f b6 15 8b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f8b
   21ab8:	0f b6 d2             	movzx  edx,dl
   21abb:	c1 e2 08             	shl    edx,0x8
   21abe:	09 c2                	or     edx,eax
   21ac0:	0f b6 05 8c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8c
   21ac7:	0f b6 c0             	movzx  eax,al
   21aca:	c1 e0 10             	shl    eax,0x10
   21acd:	09 c2                	or     edx,eax
   21acf:	0f b6 05 8d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8d
   21ad6:	0f b6 c0             	movzx  eax,al
   21ad9:	c1 e0 18             	shl    eax,0x18
   21adc:	09 d0                	or     eax,edx
   21ade:	89 c2                	mov    edx,eax
   21ae0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ae3:	89 50 28             	mov    DWORD PTR [eax+0x28],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:69 (discriminator 6)
    mbr->parts[2].partEndSector = mbr->parts[2].partStartSector + mbr->parts[2].partTotalSectors;
   21ae6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ae9:	8b 50 20             	mov    edx,DWORD PTR [eax+0x20]
   21aec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21aef:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   21af2:	01 c2                	add    edx,eax
   21af4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21af7:	89 50 24             	mov    DWORD PTR [eax+0x24],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:71 (discriminator 6)

    mbr->parts[3].bootable = mbrBuffer[MBR_PART4_OFFSET+0]==0x80;
   21afa:	0f b6 05 8e 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f8e
   21b01:	3c 80                	cmp    al,0x80
   21b03:	0f 94 c2             	sete   dl
   21b06:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b09:	88 50 3c             	mov    BYTE PTR [eax+0x3c],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:72 (discriminator 6)
    mbr->parts[3].systemID = mbrBuffer[MBR_PART4_OFFSET+4];
   21b0c:	0f b6 15 92 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f92
   21b13:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b16:	88 50 3d             	mov    BYTE PTR [eax+0x3d],dl
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:73 (discriminator 6)
    mbr->parts[3].partStartSector = mbrBuffer[MBR_PART4_OFFSET+8] | (mbrBuffer[MBR_PART4_OFFSET+9]<<8) | (mbrBuffer[MBR_PART4_OFFSET+10]<<16) | (mbrBuffer[MBR_PART4_OFFSET+11]<<24);
   21b19:	0f b6 05 96 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f96
   21b20:	0f b6 c0             	movzx  eax,al
   21b23:	0f b6 15 97 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f97
   21b2a:	0f b6 d2             	movzx  edx,dl
   21b2d:	c1 e2 08             	shl    edx,0x8
   21b30:	09 c2                	or     edx,eax
   21b32:	0f b6 05 98 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f98
   21b39:	0f b6 c0             	movzx  eax,al
   21b3c:	c1 e0 10             	shl    eax,0x10
   21b3f:	09 c2                	or     edx,eax
   21b41:	0f b6 05 99 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f99
   21b48:	0f b6 c0             	movzx  eax,al
   21b4b:	c1 e0 18             	shl    eax,0x18
   21b4e:	09 d0                	or     eax,edx
   21b50:	89 c2                	mov    edx,eax
   21b52:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b55:	89 50 30             	mov    DWORD PTR [eax+0x30],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:74 (discriminator 6)
    mbr->parts[3].partTotalSectors = mbrBuffer[MBR_PART4_OFFSET+12] | (mbrBuffer[MBR_PART4_OFFSET+13]<<8) | (mbrBuffer[MBR_PART4_OFFSET+14]<<16) | (mbrBuffer[MBR_PART4_OFFSET+15]<<24);
   21b58:	0f b6 05 9a 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9a
   21b5f:	0f b6 c0             	movzx  eax,al
   21b62:	0f b6 15 9b 8f 09 00 	movzx  edx,BYTE PTR ds:0x98f9b
   21b69:	0f b6 d2             	movzx  edx,dl
   21b6c:	c1 e2 08             	shl    edx,0x8
   21b6f:	09 c2                	or     edx,eax
   21b71:	0f b6 05 9c 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9c
   21b78:	0f b6 c0             	movzx  eax,al
   21b7b:	c1 e0 10             	shl    eax,0x10
   21b7e:	09 c2                	or     edx,eax
   21b80:	0f b6 05 9d 8f 09 00 	movzx  eax,BYTE PTR ds:0x98f9d
   21b87:	0f b6 c0             	movzx  eax,al
   21b8a:	c1 e0 18             	shl    eax,0x18
   21b8d:	09 d0                	or     eax,edx
   21b8f:	89 c2                	mov    edx,eax
   21b91:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b94:	89 50 38             	mov    DWORD PTR [eax+0x38],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:75 (discriminator 6)
    mbr->parts[3].partEndSector = mbr->parts[3].partStartSector + mbr->parts[3].partTotalSectors;
   21b97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21b9a:	8b 50 30             	mov    edx,DWORD PTR [eax+0x30]
   21b9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ba0:	8b 40 38             	mov    eax,DWORD PTR [eax+0x38]
   21ba3:	01 c2                	add    edx,eax
   21ba5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21ba8:	89 50 34             	mov    DWORD PTR [eax+0x34],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:76 (discriminator 6)
    mbr->partCount=4;
   21bab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bae:	c7 80 00 04 00 00 04 	mov    DWORD PTR [eax+0x400],0x4
   21bb5:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:77 (discriminator 6)
    if (mbr->parts[0].systemID=0xEE)
   21bb8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bbb:	c6 40 0d ee          	mov    BYTE PTR [eax+0xd],0xee
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:79 (discriminator 6)
    {
        printd(DEBUG_HARDDRIVE,"Found GPT partition table\n");
   21bbf:	83 ec 08             	sub    esp,0x8
   21bc2:	68 b5 3b 08 00       	push   0x83bb5
   21bc7:	6a 08                	push   0x8
   21bc9:	e8 59 59 00 00       	call   27527 <printd>
   21bce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:80 (discriminator 6)
        return parseGPT(port, mbr);
   21bd1:	83 ec 08             	sub    esp,0x8
   21bd4:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   21bd7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21bda:	e8 05 00 00 00       	call   21be4 <parseGPT>
   21bdf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:83
    }
    return true;
}
   21be2:	c9                   	leave  
   21be3:	c3                   	ret    

00021be4 <parseGPT>:
parseGPT():
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:86

bool parseGPT(HBA_PORT* port, struct mbr_t* mbr)
{
   21be4:	55                   	push   ebp
   21be5:	89 e5                	mov    ebp,esp
   21be7:	53                   	push   ebx
   21be8:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:87
int readLen=0;
   21beb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:89

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
   21bf2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21bf5:	8b 00                	mov    eax,DWORD PTR [eax]
   21bf7:	6a 01                	push   0x1
   21bf9:	68 a0 8d 09 00       	push   0x98da0
   21bfe:	50                   	push   eax
   21bff:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21c02:	e8 10 36 ff ff       	call   15217 <ahciRead>
   21c07:	83 c4 10             	add    esp,0x10
   21c0a:	85 c0                	test   eax,eax
   21c0c:	0f 95 c0             	setne  al
   21c0f:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:90
    gptHdr=mbrBuffer;
   21c12:	c7 05 84 8d 09 00 a0 	mov    DWORD PTR ds:0x98d84,0x98da0
   21c19:	8d 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:96

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
   21c1c:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21c21:	8b 58 30             	mov    ebx,DWORD PTR [eax+0x30]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:95
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
   21c24:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21c29:	8b 48 54             	mov    ecx,DWORD PTR [eax+0x54]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:94
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
   21c2c:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21c31:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:93
            gptHdr->partEntryLBAL,
   21c34:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:92
int readLen=0;

    bool lResult=ahciRead(port,mbr->parts[0].partStartSector,mbrBuffer,1);
    gptHdr=mbrBuffer;

    printd(DEBUG_HARDDRIVE,"GPT PT LBA=%u, PT entries=%04x, PT entry len=%04x, last usable LBA=%08x\n",
   21c39:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21c3c:	83 ec 08             	sub    esp,0x8
   21c3f:	53                   	push   ebx
   21c40:	51                   	push   ecx
   21c41:	52                   	push   edx
   21c42:	50                   	push   eax
   21c43:	68 d0 3b 08 00       	push   0x83bd0
   21c48:	6a 08                	push   0x8
   21c4a:	e8 d8 58 00 00       	call   27527 <printd>
   21c4f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:97
            gptHdr->partEntryLBAL,
            gptHdr->partEntryCount,
            gptHdr->partEntrySize,
            gptHdr->lastUsableLBAL);
    readLen=((gptHdr->partEntryCount*gptHdr->partEntrySize)/512)+1;
   21c52:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21c57:	8b 50 50             	mov    edx,DWORD PTR [eax+0x50]
   21c5a:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21c5f:	8b 40 54             	mov    eax,DWORD PTR [eax+0x54]
   21c62:	0f af c2             	imul   eax,edx
   21c65:	c1 e8 09             	shr    eax,0x9
   21c68:	83 c0 01             	add    eax,0x1
   21c6b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:99
    
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
   21c6e:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21c73:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21c76:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   21c79:	50                   	push   eax
   21c7a:	68 1c 3c 08 00       	push   0x83c1c
   21c7f:	6a 08                	push   0x8
   21c81:	e8 a1 58 00 00       	call   27527 <printd>
   21c86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:100
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
   21c89:	a1 84 8d 09 00       	mov    eax,ds:0x98d84
   21c8e:	8b 40 48             	mov    eax,DWORD PTR [eax+0x48]
   21c91:	6a 0a                	push   0xa
   21c93:	68 80 65 09 00       	push   0x96580
   21c98:	50                   	push   eax
   21c99:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   21c9c:	e8 76 35 ff ff       	call   15217 <ahciRead>
   21ca1:	83 c4 10             	add    esp,0x10
   21ca4:	85 c0                	test   eax,eax
   21ca6:	0f 95 c0             	setne  al
   21ca9:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:102
    
    gptPart=partBuffer;
   21cac:	c7 05 80 8d 09 00 80 	mov    DWORD PTR ds:0x98d80,0x96580
   21cb3:	65 09 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:103
    mbr->partCount=0;
   21cb6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21cb9:	c7 80 00 04 00 00 00 	mov    DWORD PTR [eax+0x400],0x0
   21cc0:	00 00 00 
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104
    for (int cnt=0;cnt<20;cnt++)
   21cc3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   21cca:	e9 b6 00 00 00       	jmp    21d85 <parseGPT+0x1a1>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:106
    {
        printd(DEBUG_HARDDRIVE,"Part %u, first=%u\n",cnt,gptPart[cnt].partFirstLBAL);
   21ccf:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21cd4:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21cd7:	c1 e2 07             	shl    edx,0x7
   21cda:	01 d0                	add    eax,edx
   21cdc:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21cdf:	50                   	push   eax
   21ce0:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   21ce3:	68 51 3c 08 00       	push   0x83c51
   21ce8:	6a 08                	push   0x8
   21cea:	e8 38 58 00 00       	call   27527 <printd>
   21cef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:107
        if (gptPart[cnt].partFirstLBAL>0)
   21cf2:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21cf7:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21cfa:	c1 e2 07             	shl    edx,0x7
   21cfd:	01 d0                	add    eax,edx
   21cff:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21d02:	85 c0                	test   eax,eax
   21d04:	74 7b                	je     21d81 <parseGPT+0x19d>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:109
        {
            mbr->parts[cnt].partStartSector=gptPart[cnt].partFirstLBAL;
   21d06:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21d0b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21d0e:	c1 e2 07             	shl    edx,0x7
   21d11:	01 d0                	add    eax,edx
   21d13:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   21d16:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21d19:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21d1c:	c1 e1 04             	shl    ecx,0x4
   21d1f:	01 ca                	add    edx,ecx
   21d21:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:110
            mbr->parts[cnt].partEndSector=gptPart[cnt].partLastLBAL;
   21d23:	a1 80 8d 09 00       	mov    eax,ds:0x98d80
   21d28:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21d2b:	c1 e2 07             	shl    edx,0x7
   21d2e:	01 d0                	add    eax,edx
   21d30:	8b 40 28             	mov    eax,DWORD PTR [eax+0x28]
   21d33:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   21d36:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21d39:	c1 e1 04             	shl    ecx,0x4
   21d3c:	01 ca                	add    edx,ecx
   21d3e:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:111
            mbr->parts[cnt].partTotalSectors=mbr->parts[cnt].partEndSector-mbr->parts[cnt].partStartSector;
   21d41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d44:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   21d47:	c1 e2 04             	shl    edx,0x4
   21d4a:	01 d0                	add    eax,edx
   21d4c:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   21d4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d52:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21d55:	c1 e1 04             	shl    ecx,0x4
   21d58:	01 c8                	add    eax,ecx
   21d5a:	8b 00                	mov    eax,DWORD PTR [eax]
   21d5c:	29 c2                	sub    edx,eax
   21d5e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d61:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   21d64:	c1 e1 04             	shl    ecx,0x4
   21d67:	01 c8                	add    eax,ecx
   21d69:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:113
            //mbr->parts[cnt].systemID
            mbr->partCount++;
   21d6c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d6f:	8b 80 00 04 00 00    	mov    eax,DWORD PTR [eax+0x400]
   21d75:	8d 50 01             	lea    edx,[eax+0x1]
   21d78:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21d7b:	89 90 00 04 00 00    	mov    DWORD PTR [eax+0x400],edx
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 2)
    printd(DEBUG_HARDDRIVE,"Reading GPT partition table @ lba %u for %u sectors\n",gptHdr->partEntryLBAL,readLen);
    lResult=ahciRead(port,gptHdr->partEntryLBAL,partBuffer,10);
    
    gptPart=partBuffer;
    mbr->partCount=0;
    for (int cnt=0;cnt<20;cnt++)
   21d81:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:104 (discriminator 1)
   21d85:	83 7d f4 13          	cmp    DWORD PTR [ebp-0xc],0x13
   21d89:	0f 8e 40 ff ff ff    	jle    21ccf <parseGPT+0xeb>
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:118
            mbr->partCount++;
        }
    }


    return true;
   21d8f:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/filesystem/mbr.c:120
        
}
   21d94:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   21d97:	c9                   	leave  
   21d98:	c3                   	ret    
   21d99:	66 90                	xchg   ax,ax
   21d9b:	90                   	nop

00021d9c <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   21d9c:	55                   	push   ebp
   21d9d:	89 e5                	mov    ebp,esp
   21d9f:	83 ec 08             	sub    esp,0x8
   21da2:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   21da5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21da8:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   21dac:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   21daf:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   21db3:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   21db7:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   21db8:	90                   	nop
   21db9:	c9                   	leave  
   21dba:	c3                   	ret    

00021dbb <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   21dbb:	55                   	push   ebp
   21dbc:	89 e5                	mov    ebp,esp
   21dbe:	83 ec 14             	sub    esp,0x14
   21dc1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21dc4:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   21dc8:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   21dcc:	89 c2                	mov    edx,eax
   21dce:	ec                   	in     al,dx
   21dcf:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   21dd2:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   21dd6:	c9                   	leave  
   21dd7:	c3                   	ret    

00021dd8 <inw>:
inw():
/home/yogi/src/os/chrisOS/include/io.h:44

static __inline unsigned short inw(unsigned short __port)
{
   21dd8:	55                   	push   ebp
   21dd9:	89 e5                	mov    ebp,esp
   21ddb:	83 ec 14             	sub    esp,0x14
   21dde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21de1:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:46
	unsigned short __val;
	__asm__ volatile ("inw %0, %1" : "=a" (__val) : "dN" (__port));
   21de5:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   21de9:	89 c2                	mov    edx,eax
   21deb:	66 ed                	in     ax,dx
   21ded:	66 89 45 fe          	mov    WORD PTR [ebp-0x2],ax
/home/yogi/src/os/chrisOS/include/io.h:47
	return __val;
   21df1:	0f b7 45 fe          	movzx  eax,WORD PTR [ebp-0x2]
/home/yogi/src/os/chrisOS/include/io.h:48
}
   21df5:	c9                   	leave  
   21df6:	c3                   	ret    

00021df7 <insw>:
insw():
/home/yogi/src/os/chrisOS/include/io.h:86
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}

static __inline void insw(unsigned short __port, void *__buf, unsigned long __n)
{
   21df7:	55                   	push   ebp
   21df8:	89 e5                	mov    ebp,esp
   21dfa:	57                   	push   edi
   21dfb:	53                   	push   ebx
   21dfc:	83 ec 04             	sub    esp,0x4
   21dff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21e02:	66 89 45 f4          	mov    WORD PTR [ebp-0xc],ax
/home/yogi/src/os/chrisOS/include/io.h:87
	__asm__ volatile ("cld; rep; insw"
   21e06:	0f b7 55 f4          	movzx  edx,WORD PTR [ebp-0xc]
   21e0a:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   21e0d:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   21e10:	89 cb                	mov    ebx,ecx
   21e12:	89 df                	mov    edi,ebx
   21e14:	89 c1                	mov    ecx,eax
   21e16:	fc                   	cld    
   21e17:	f3 66 6d             	rep ins WORD PTR es:[edi],dx
   21e1a:	89 c8                	mov    eax,ecx
   21e1c:	89 fb                	mov    ebx,edi
   21e1e:	89 5d 0c             	mov    DWORD PTR [ebp+0xc],ebx
   21e21:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/include/io.h:90
		      : "+D" (__buf), "+c" (__n)
		      : "d" (__port));
}
   21e24:	90                   	nop
   21e25:	83 c4 04             	add    esp,0x4
   21e28:	5b                   	pop    ebx
   21e29:	5f                   	pop    edi
   21e2a:	5d                   	pop    ebp
   21e2b:	c3                   	ret    

00021e2c <ataWaitForDRQ>:
ataWaitForDRQ():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:22
float ticks=0;
struct ataDeviceInfo_t* atablockingReadDev;

//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
   21e2c:	55                   	push   ebp
   21e2d:	89 e5                	mov    ebp,esp
   21e2f:	83 ec 14             	sub    esp,0x14
   21e32:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   21e35:	88 45 ec             	mov    BYTE PTR [ebp-0x14],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:23
    int ticks = forHowManyMS*kTicksPerMS;
   21e38:	a1 c4 47 12 00       	mov    eax,ds:0x1247c4
   21e3d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   21e40:	0f af c2             	imul   eax,edx
   21e43:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:24
    uint8_t inValue=0;
   21e46:	c6 45 fb 00          	mov    BYTE PTR [ebp-0x5],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
    while (ticks > 0)
   21e4a:	eb 57                	jmp    21ea3 <ataWaitForDRQ+0x77>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:27
    {
        STI
   21e4c:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:29
        //waitTicks(1);
        __asm__("sti\nhlt\n");
   21e4d:	fb                   	sti    
   21e4e:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:30
        inValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21e4f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21e52:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21e58:	83 c0 07             	add    eax,0x7
   21e5b:	0f b7 c0             	movzx  eax,ax
   21e5e:	50                   	push   eax
   21e5f:	e8 57 ff ff ff       	call   21dbb <inb>
   21e64:	83 c4 04             	add    esp,0x4
   21e67:	88 45 fb             	mov    BYTE PTR [ebp-0x5],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31
        if (toBeSet && (inValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ)
   21e6a:	80 7d ec 00          	cmp    BYTE PTR [ebp-0x14],0x0
   21e6e:	74 12                	je     21e82 <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:31 (discriminator 1)
   21e70:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   21e74:	83 e0 08             	and    eax,0x8
   21e77:	85 c0                	test   eax,eax
   21e79:	74 07                	je     21e82 <ataWaitForDRQ+0x56>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:32
                return 0;
   21e7b:	b8 00 00 00 00       	mov    eax,0x0
   21e80:	eb 5e                	jmp    21ee0 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
   21e82:	0f b6 45 ec          	movzx  eax,BYTE PTR [ebp-0x14]
   21e86:	83 f0 01             	xor    eax,0x1
   21e89:	84 c0                	test   al,al
   21e8b:	74 12                	je     21e9f <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:33 (discriminator 1)
   21e8d:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
   21e91:	83 e0 08             	and    eax,0x8
   21e94:	85 c0                	test   eax,eax
   21e96:	75 07                	jne    21e9f <ataWaitForDRQ+0x73>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:34
                return 0;
   21e98:	b8 00 00 00 00       	mov    eax,0x0
   21e9d:	eb 41                	jmp    21ee0 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:35
        ticks--;
   21e9f:	83 6d fc 01          	sub    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:25
//Returns non-zero value IF TIMEOUT
uint8_t __attribute__((noinline)) ataWaitForDRQ(struct ataDeviceInfo_t* devInfo, bool toBeSet, int forHowManyMS)
{
    int ticks = forHowManyMS*kTicksPerMS;
    uint8_t inValue=0;
    while (ticks > 0)
   21ea3:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   21ea7:	7f a3                	jg     21e4c <ataWaitForDRQ+0x20>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:37
                return 0;
        else if ((!toBeSet && (inValue & ATA_STATUS_DRQ) != ATA_STATUS_DRQ))
                return 0;
        ticks--;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   21ea9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21eac:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21eb2:	83 c0 01             	add    eax,0x1
   21eb5:	0f b7 c0             	movzx  eax,ax
   21eb8:	50                   	push   eax
   21eb9:	e8 fd fe ff ff       	call   21dbb <inb>
   21ebe:	83 c4 04             	add    esp,0x4
   21ec1:	0f b6 c0             	movzx  eax,al
   21ec4:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:38
    if ((hdError & 0x4)==0x4)
   21ec9:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   21ece:	83 e0 04             	and    eax,0x4
   21ed1:	85 c0                	test   eax,eax
   21ed3:	74 07                	je     21edc <ataWaitForDRQ+0xb0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:39
        return 0;
   21ed5:	b8 00 00 00 00       	mov    eax,0x0
   21eda:	eb 04                	jmp    21ee0 <ataWaitForDRQ+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:40
    return inValue;
   21edc:	0f b6 45 fb          	movzx  eax,BYTE PTR [ebp-0x5]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:41
}
   21ee0:	c9                   	leave  
   21ee1:	c3                   	ret    

00021ee2 <ataWaitForIdle>:
ataWaitForIdle():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:44

uint8_t ataWaitForIdle(struct ataDeviceInfo_t* devInfo)
{
   21ee2:	55                   	push   ebp
   21ee3:	89 e5                	mov    ebp,esp
   21ee5:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:45
    ticks = 0;
   21ee8:	d9 ee                	fldz   
   21eea:	d9 1d e8 a5 09 00    	fstp   DWORD PTR ds:0x9a5e8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:46
    uint8_t lValue=0;
   21ef0:	c6 45 ff 00          	mov    BYTE PTR [ebp-0x1],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:48
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21ef4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21ef7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21efd:	83 c0 07             	add    eax,0x7
   21f00:	0f b7 c0             	movzx  eax,ax
   21f03:	50                   	push   eax
   21f04:	e8 b2 fe ff ff       	call   21dbb <inb>
   21f09:	83 c4 04             	add    esp,0x4
   21f0c:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
   21f0f:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21f13:	83 e0 08             	and    eax,0x8
   21f16:	85 c0                	test   eax,eax
   21f18:	74 76                	je     21f90 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:49 (discriminator 1)
   21f1a:	d9 05 e8 a5 09 00    	fld    DWORD PTR ds:0x9a5e8
   21f20:	d9 ee                	fldz   
   21f22:	df e9                	fucomip st,st(1)
   21f24:	7a 0a                	jp     21f30 <ataWaitForIdle+0x4e>
   21f26:	d9 ee                	fldz   
   21f28:	df e9                	fucomip st,st(1)
   21f2a:	dd d8                	fstp   st(0)
   21f2c:	74 19                	je     21f47 <ataWaitForIdle+0x65>
   21f2e:	eb 02                	jmp    21f32 <ataWaitForIdle+0x50>
   21f30:	dd d8                	fstp   st(0)
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:50
        inw(devInfo->ioPort+ATA_PORT_DATA);
   21f32:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f35:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f3b:	0f b7 c0             	movzx  eax,ax
   21f3e:	50                   	push   eax
   21f3f:	e8 94 fe ff ff       	call   21dd8 <inw>
   21f44:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21f47:	eb 47                	jmp    21f90 <ataWaitForIdle+0xae>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:53
    {
        __asm__("sti\nhlt\n");
   21f49:	fb                   	sti    
   21f4a:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:54
        lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
   21f4b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21f4e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21f54:	83 c0 07             	add    eax,0x7
   21f57:	0f b7 c0             	movzx  eax,ax
   21f5a:	50                   	push   eax
   21f5b:	e8 5b fe ff ff       	call   21dbb <inb>
   21f60:	83 c4 04             	add    esp,0x4
   21f63:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:56
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
   21f66:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   21f6a:	25 88 00 00 00       	and    eax,0x88
   21f6f:	85 c0                	test   eax,eax
   21f71:	75 07                	jne    21f7a <ataWaitForIdle+0x98>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:57
                    return 0;
   21f73:	b8 00 00 00 00       	mov    eax,0x0
   21f78:	eb 73                	jmp    21fed <ataWaitForIdle+0x10b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:58
        ticks++;
   21f7a:	d9 05 e8 a5 09 00    	fld    DWORD PTR ds:0x9a5e8
   21f80:	d9 e8                	fld1   
   21f82:	de c1                	faddp  st(1),st
   21f84:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21f87:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21f8a:	d9 1d e8 a5 09 00    	fstp   DWORD PTR ds:0x9a5e8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:51
    uint8_t lValue=0;
    //printk("aaWaitForIdle: ticks(%u@0x%08X)=ATA_STANDARD_WAIT_MS(%d)*kTicksPerMS((%d@0x%08X))\n", ticks, &ticks, (ATA_STANDARD_WAIT_MS), kTicksPerMS, &kTicksPerMS);
    lValue=inb(devInfo->ioPort+ATA_PORT_STATUS);
    if ((lValue & ATA_STATUS_DRQ) == ATA_STATUS_DRQ && ticks)
        inw(devInfo->ioPort+ATA_PORT_DATA);
    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   21f90:	d9 05 e8 a5 09 00    	fld    DWORD PTR ds:0x9a5e8
   21f96:	d9 c0                	fld    st(0)
   21f98:	d9 e8                	fld1   
   21f9a:	de c1                	faddp  st(1),st
   21f9c:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21f9f:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21fa2:	d9 1d e8 a5 09 00    	fstp   DWORD PTR ds:0x9a5e8
   21fa8:	8b 15 c4 47 12 00    	mov    edx,DWORD PTR ds:0x1247c4
   21fae:	89 d0                	mov    eax,edx
   21fb0:	c1 e0 02             	shl    eax,0x2
   21fb3:	01 d0                	add    eax,edx
   21fb5:	01 c0                	add    eax,eax
   21fb7:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   21fba:	db 45 e8             	fild   DWORD PTR [ebp-0x18]
   21fbd:	d9 5d ec             	fstp   DWORD PTR [ebp-0x14]
   21fc0:	d9 45 ec             	fld    DWORD PTR [ebp-0x14]
   21fc3:	df e9                	fucomip st,st(1)
   21fc5:	dd d8                	fstp   st(0)
   21fc7:	73 80                	jae    21f49 <ataWaitForIdle+0x67>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:60
            //If both BUSY and DRQ are zero, then, the command is probably complete. 
        if ((lValue & (ATA_STATUS_DRQ | ATA_STATUS_BUSY)) == 0 )
                    return 0;
        ticks++;
    }
    hdError=inb(devInfo->ioPort+ATA_PORT_ERROR);
   21fc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   21fcc:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   21fd2:	83 c0 01             	add    eax,0x1
   21fd5:	0f b7 c0             	movzx  eax,ax
   21fd8:	50                   	push   eax
   21fd9:	e8 dd fd ff ff       	call   21dbb <inb>
   21fde:	83 c4 04             	add    esp,0x4
   21fe1:	0f b6 c0             	movzx  eax,al
   21fe4:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:61
    return lValue;
   21fe9:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:62
}
   21fed:	c9                   	leave  
   21fee:	c3                   	ret    

00021fef <ataControllerIsReady>:
ataControllerIsReady():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:66


uint8_t ataControllerIsReady(struct ataDeviceInfo_t* devInfo)
{
   21fef:	55                   	push   ebp
   21ff0:	89 e5                	mov    ebp,esp
   21ff2:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:67
    int ticks = 0;
   21ff5:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:69
    
    int lStatus=0;
   21ffc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:70
    uint8_t err=0;
   22003:	c6 45 ef 00          	mov    BYTE PTR [ebp-0x11],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   22007:	eb 4a                	jmp    22053 <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:74
    {
        lStatus=inb(devInfo->ioPort+ATA_PORT_STATUS);
   22009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2200c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22012:	83 c0 07             	add    eax,0x7
   22015:	0f b7 c0             	movzx  eax,ax
   22018:	50                   	push   eax
   22019:	e8 9d fd ff ff       	call   21dbb <inb>
   2201e:	83 c4 04             	add    esp,0x4
   22021:	0f b6 c0             	movzx  eax,al
   22024:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:75
        wait(1);
   22027:	83 ec 0c             	sub    esp,0xc
   2202a:	6a 01                	push   0x1
   2202c:	e8 15 67 00 00       	call   28746 <wait>
   22031:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:76
        ticks++;
   22034:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:77
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
   22038:	81 65 f0 d0 00 00 00 	and    DWORD PTR [ebp-0x10],0xd0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:78
        if (lStatus & ATA_STATUS_READY )
   2203f:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   22042:	83 e0 40             	and    eax,0x40
   22045:	85 c0                	test   eax,eax
   22047:	74 0a                	je     22053 <ataControllerIsReady+0x64>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:79
                return true;
   22049:	b8 01 00 00 00       	mov    eax,0x1
   2204e:	e9 9c 00 00 00       	jmp    220ef <ataControllerIsReady+0x100>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:72
    int ticks = 0;
    
    int lStatus=0;
    uint8_t err=0;

    while (ticks++<=ATA_STANDARD_WAIT_MS*kTicksPerMS)
   22053:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   22056:	8d 42 01             	lea    eax,[edx+0x1]
   22059:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
   2205c:	8b 0d c4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247c4
   22062:	89 c8                	mov    eax,ecx
   22064:	c1 e0 02             	shl    eax,0x2
   22067:	01 c8                	add    eax,ecx
   22069:	01 c0                	add    eax,eax
   2206b:	39 c2                	cmp    edx,eax
   2206d:	7e 9a                	jle    22009 <ataControllerIsReady+0x1a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82
	lStatus &= (ATA_STATUS_BUSY | ATA_STATUS_READY| ATA_STATUS_SEEK);
        if (lStatus & ATA_STATUS_READY )
                return true;
    }

    if (lStatus==ATA_STATUS_ERROR || lStatus==ATA_STATUS_BUSY)
   2206f:	83 7d f0 01          	cmp    DWORD PTR [ebp-0x10],0x1
   22073:	74 09                	je     2207e <ataControllerIsReady+0x8f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:82 (discriminator 1)
   22075:	81 7d f0 80 00 00 00 	cmp    DWORD PTR [ebp-0x10],0x80
   2207c:	75 36                	jne    220b4 <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:84
    {
         err=inb(0x1f1);
   2207e:	83 ec 0c             	sub    esp,0xc
   22081:	68 f1 01 00 00       	push   0x1f1
   22086:	e8 30 fd ff ff       	call   21dbb <inb>
   2208b:	83 c4 10             	add    esp,0x10
   2208e:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:86
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22091:	a1 78 48 12 00       	mov    eax,ds:0x124878
   22096:	83 e0 08             	and    eax,0x8
   22099:	85 c0                	test   eax,eax
   2209b:	74 17                	je     220b4 <ataControllerIsReady+0xc5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:87
            printd(DEBUG_HARDDRIVE,"ataControllerIsReady: DRQ wait failed, lStatus=%02X, err=%02X\n",lStatus,err);
   2209d:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   220a1:	50                   	push   eax
   220a2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   220a5:	68 80 3d 08 00       	push   0x83d80
   220aa:	6a 08                	push   0x8
   220ac:	e8 76 54 00 00       	call   27527 <printd>
   220b1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90
#endif
    }
    if ( (lStatus & ATA_STATUS_READY)==0 && err==4)
   220b4:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   220b7:	83 e0 40             	and    eax,0x40
   220ba:	85 c0                	test   eax,eax
   220bc:	75 0d                	jne    220cb <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:90 (discriminator 1)
   220be:	80 7d ef 04          	cmp    BYTE PTR [ebp-0x11],0x4
   220c2:	75 07                	jne    220cb <ataControllerIsReady+0xdc>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:91
        lStatus=ATA_STATUS_READY;
   220c4:	c7 45 f0 40 00 00 00 	mov    DWORD PTR [ebp-0x10],0x40
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:93
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   220cb:	a1 78 48 12 00       	mov    eax,ds:0x124878
   220d0:	83 e0 08             	and    eax,0x8
   220d3:	85 c0                	test   eax,eax
   220d5:	74 13                	je     220ea <ataControllerIsReady+0xfb>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:94
            printk("ataControllerIsReady: returning %02X\n",lStatus);
   220d7:	83 ec 08             	sub    esp,0x8
   220da:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   220dd:	68 c0 3d 08 00       	push   0x83dc0
   220e2:	e8 20 54 00 00       	call   27507 <printk>
   220e7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:96
#endif
    return true;
   220ea:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:97
}
   220ef:	c9                   	leave  
   220f0:	c3                   	ret    

000220f1 <ataStatusIsOk>:
ataStatusIsOk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:100

static bool ataStatusIsOk(struct ataDeviceInfo_t* devInfo)
{
   220f1:	55                   	push   ebp
   220f2:	89 e5                	mov    ebp,esp
   220f4:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:101
	unsigned char status = inb(devInfo->ioPort+ATA_PORT_STATUS);
   220f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   220fa:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22100:	83 c0 07             	add    eax,0x7
   22103:	0f b7 c0             	movzx  eax,ax
   22106:	50                   	push   eax
   22107:	e8 af fc ff ff       	call   21dbb <inb>
   2210c:	83 c4 04             	add    esp,0x4
   2210f:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:103

	if (status & ATA_STATUS_BUSY)
   22112:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   22116:	84 c0                	test   al,al
   22118:	79 07                	jns    22121 <ataStatusIsOk+0x30>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:104
		return false;
   2211a:	b8 00 00 00 00       	mov    eax,0x0
   2211f:	eb 3b                	jmp    2215c <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:105
	if (status & ATA_STATUS_WRITE_ERROR)
   22121:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   22125:	83 e0 20             	and    eax,0x20
   22128:	85 c0                	test   eax,eax
   2212a:	74 07                	je     22133 <ataStatusIsOk+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:106
		return true;
   2212c:	b8 01 00 00 00       	mov    eax,0x1
   22131:	eb 29                	jmp    2215c <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:107
	if (!(status & ATA_STATUS_READY))
   22133:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   22137:	83 e0 40             	and    eax,0x40
   2213a:	85 c0                	test   eax,eax
   2213c:	75 07                	jne    22145 <ataStatusIsOk+0x54>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:108
		return true;
   2213e:	b8 01 00 00 00       	mov    eax,0x1
   22143:	eb 17                	jmp    2215c <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:109
	if (!(status & ATA_STATUS_SEEK))
   22145:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
   22149:	83 e0 10             	and    eax,0x10
   2214c:	85 c0                	test   eax,eax
   2214e:	75 07                	jne    22157 <ataStatusIsOk+0x66>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:110
		return true;
   22150:	b8 01 00 00 00       	mov    eax,0x1
   22155:	eb 05                	jmp    2215c <ataStatusIsOk+0x6b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:111
	return 1;
   22157:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:112
}
   2215c:	c9                   	leave  
   2215d:	c3                   	ret    

0002215e <ataSelectDrive>:
ataSelectDrive():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:115

bool ataSelectDrive(struct ataDeviceInfo_t* devInfo, uint8_t head)
{
   2215e:	55                   	push   ebp
   2215f:	89 e5                	mov    ebp,esp
   22161:	83 ec 28             	sub    esp,0x28
   22164:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22167:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:116
    ataWaitForIdle(devInfo);
   2216a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2216d:	e8 70 fd ff ff       	call   21ee2 <ataWaitForIdle>
   22172:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:117
    outb(devInfo->ioPort+ATA_DRIVE_SELECT, devInfo->driveHeadPortDesignation | (head& 0xF) ); 
   22175:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22178:	0f b6 80 6e 02 00 00 	movzx  eax,BYTE PTR [eax+0x26e]
   2217f:	89 c2                	mov    edx,eax
   22181:	0f b6 45 e4          	movzx  eax,BYTE PTR [ebp-0x1c]
   22185:	83 e0 0f             	and    eax,0xf
   22188:	09 d0                	or     eax,edx
   2218a:	0f b6 d0             	movzx  edx,al
   2218d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22190:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22196:	83 c0 06             	add    eax,0x6
   22199:	0f b7 c0             	movzx  eax,ax
   2219c:	52                   	push   edx
   2219d:	50                   	push   eax
   2219e:	e8 f9 fb ff ff       	call   21d9c <outb>
   221a3:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:119
    //printk("Sending 0x%02X", drive==master?ATA_DRIVE_MASTER:ATA_DRIVE_SLAVE | (head& 0xF));
    if (!ataStatusIsOk(devInfo))
   221a6:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   221a9:	e8 43 ff ff ff       	call   220f1 <ataStatusIsOk>
   221ae:	83 c4 04             	add    esp,0x4
   221b1:	83 f0 01             	xor    eax,0x1
   221b4:	84 c0                	test   al,al
   221b6:	74 6e                	je     22226 <ataSelectDrive+0xc8>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:122
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   221b8:	a1 78 48 12 00       	mov    eax,ds:0x124878
   221bd:	83 e0 08             	and    eax,0x8
   221c0:	85 c0                	test   eax,eax
   221c2:	74 3d                	je     22201 <ataSelectDrive+0xa3>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:123
            printk("ataSelectDrive: Failed to select drive %u, bus %u, status=0x%02X is not ok\n", devInfo->driveNo, devInfo->bus, inb(devInfo->ioPort+ATA_PORT_STATUS));
   221c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221c7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   221cd:	83 c0 07             	add    eax,0x7
   221d0:	0f b7 c0             	movzx  eax,ax
   221d3:	50                   	push   eax
   221d4:	e8 e2 fb ff ff       	call   21dbb <inb>
   221d9:	83 c4 04             	add    esp,0x4
   221dc:	0f b6 c8             	movzx  ecx,al
   221df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221e2:	8b 90 61 02 00 00    	mov    edx,DWORD PTR [eax+0x261]
   221e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   221eb:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   221f1:	51                   	push   ecx
   221f2:	52                   	push   edx
   221f3:	50                   	push   eax
   221f4:	68 e8 3d 08 00       	push   0x83de8
   221f9:	e8 09 53 00 00       	call   27507 <printk>
   221fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:125
#endif
            return inb(devInfo->ioPort+ATA_PORT_STATUS);
   22201:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22204:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2220a:	83 c0 07             	add    eax,0x7
   2220d:	0f b7 c0             	movzx  eax,ax
   22210:	83 ec 0c             	sub    esp,0xc
   22213:	50                   	push   eax
   22214:	e8 a2 fb ff ff       	call   21dbb <inb>
   22219:	83 c4 10             	add    esp,0x10
   2221c:	84 c0                	test   al,al
   2221e:	0f 95 c0             	setne  al
   22221:	e9 96 00 00 00       	jmp    222bc <ataSelectDrive+0x15e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:128
    }
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22226:	a1 78 48 12 00       	mov    eax,ds:0x124878
   2222b:	83 e0 08             	and    eax,0x8
   2222e:	85 c0                	test   eax,eax
   22230:	0f 84 81 00 00 00    	je     222b7 <ataSelectDrive+0x159>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:130
    {
        wait(10);
   22236:	83 ec 0c             	sub    esp,0xc
   22239:	6a 0a                	push   0xa
   2223b:	e8 06 65 00 00       	call   28746 <wait>
   22240:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:131
        unsigned lDrive=inb(devInfo->ioPort+ATA_DRIVE_SELECT);
   22243:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22246:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2224c:	83 c0 06             	add    eax,0x6
   2224f:	0f b7 c0             	movzx  eax,ax
   22252:	83 ec 0c             	sub    esp,0xc
   22255:	50                   	push   eax
   22256:	e8 60 fb ff ff       	call   21dbb <inb>
   2225b:	83 c4 10             	add    esp,0x10
   2225e:	0f b6 c0             	movzx  eax,al
   22261:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132
            printk("ataSelectDrive: Drive selected: %s (%u, 0x%02X), err=0x%02X\n", (lDrive & (1<<4)) == 1<<4?"Slave":"Master", devInfo->driveNo, lDrive, inb(devInfo->ioPort+ATA_PORT_ERROR));
   22264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22267:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2226d:	83 c0 01             	add    eax,0x1
   22270:	0f b7 c0             	movzx  eax,ax
   22273:	83 ec 0c             	sub    esp,0xc
   22276:	50                   	push   eax
   22277:	e8 3f fb ff ff       	call   21dbb <inb>
   2227c:	83 c4 10             	add    esp,0x10
   2227f:	0f b6 d0             	movzx  edx,al
   22282:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22285:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   2228b:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   2228e:	83 e1 10             	and    ecx,0x10
   22291:	85 c9                	test   ecx,ecx
   22293:	74 07                	je     2229c <ataSelectDrive+0x13e>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 1)
   22295:	b9 34 3e 08 00       	mov    ecx,0x83e34
   2229a:	eb 05                	jmp    222a1 <ataSelectDrive+0x143>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 2)
   2229c:	b9 3a 3e 08 00       	mov    ecx,0x83e3a
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:132 (discriminator 4)
   222a1:	83 ec 0c             	sub    esp,0xc
   222a4:	52                   	push   edx
   222a5:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   222a8:	50                   	push   eax
   222a9:	51                   	push   ecx
   222aa:	68 44 3e 08 00       	push   0x83e44
   222af:	e8 53 52 00 00       	call   27507 <printk>
   222b4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:136
    }
#endif
        
    return 0;
   222b7:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:137
}
   222bc:	c9                   	leave  
   222bd:	c3                   	ret    

000222be <ataResetController>:
ataResetController():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:161
	outb(++port, 0xA0 |(drive<<4)|head);
	outb(++port, cmd);
}
*/
static void ataResetController(struct ataDeviceInfo_t* devInfo)
{
   222be:	55                   	push   ebp
   222bf:	89 e5                	mov    ebp,esp
   222c1:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:162
        outb(devInfo->ioPort+ATA_PORT_COMMAND, 4);
   222c4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   222c7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   222cd:	83 c0 07             	add    eax,0x7
   222d0:	0f b7 c0             	movzx  eax,ax
   222d3:	6a 04                	push   0x4
   222d5:	50                   	push   eax
   222d6:	e8 c1 fa ff ff       	call   21d9c <outb>
   222db:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:163
        waitTicks(kTicksPerSecond/10);
   222de:	8b 0d c0 47 12 00    	mov    ecx,DWORD PTR ds:0x1247c0
   222e4:	ba 67 66 66 66       	mov    edx,0x66666667
   222e9:	89 c8                	mov    eax,ecx
   222eb:	f7 ea                	imul   edx
   222ed:	c1 fa 02             	sar    edx,0x2
   222f0:	89 c8                	mov    eax,ecx
   222f2:	c1 f8 1f             	sar    eax,0x1f
   222f5:	29 c2                	sub    edx,eax
   222f7:	89 d0                	mov    eax,edx
   222f9:	83 ec 0c             	sub    esp,0xc
   222fc:	50                   	push   eax
   222fd:	e8 29 64 00 00       	call   2872b <waitTicks>
   22302:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:164
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 1<<2);
   22305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22308:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2230e:	66 05 f6 03          	add    ax,0x3f6
   22312:	0f b7 c0             	movzx  eax,ax
   22315:	83 ec 08             	sub    esp,0x8
   22318:	6a 04                	push   0x4
   2231a:	50                   	push   eax
   2231b:	e8 7c fa ff ff       	call   21d9c <outb>
   22320:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:165
        wait(10);
   22323:	83 ec 0c             	sub    esp,0xc
   22326:	6a 0a                	push   0xa
   22328:	e8 19 64 00 00       	call   28746 <wait>
   2232d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:166
        outb(devInfo->ioPort+ATA_PORT_CONTROL, 0);
   22330:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22333:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22339:	66 05 f6 03          	add    ax,0x3f6
   2233d:	0f b7 c0             	movzx  eax,ax
   22340:	83 ec 08             	sub    esp,0x8
   22343:	6a 00                	push   0x0
   22345:	50                   	push   eax
   22346:	e8 51 fa ff ff       	call   21d9c <outb>
   2234b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:167
        if (!ataControllerIsReady(devInfo))
   2234e:	83 ec 0c             	sub    esp,0xc
   22351:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22354:	e8 96 fc ff ff       	call   21fef <ataControllerIsReady>
   22359:	83 c4 10             	add    esp,0x10
   2235c:	84 c0                	test   al,al
   2235e:	75 1c                	jne    2237c <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:169
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22360:	a1 78 48 12 00       	mov    eax,ds:0x124878
   22365:	83 e0 08             	and    eax,0x8
   22368:	85 c0                	test   eax,eax
   2236a:	74 10                	je     2237c <ataResetController+0xbe>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:170
            printk("HD-controller still busy\n");
   2236c:	83 ec 0c             	sub    esp,0xc
   2236f:	68 81 3e 08 00       	push   0x83e81
   22374:	e8 8e 51 00 00       	call   27507 <printk>
   22379:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172
#endif
        if ((hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 0 && (hdError = inb(devInfo->ioPort+ATA_PORT_ERROR)) != 4)
   2237c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2237f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22385:	83 c0 01             	add    eax,0x1
   22388:	0f b7 c0             	movzx  eax,ax
   2238b:	83 ec 0c             	sub    esp,0xc
   2238e:	50                   	push   eax
   2238f:	e8 27 fa ff ff       	call   21dbb <inb>
   22394:	83 c4 10             	add    esp,0x10
   22397:	0f b6 c0             	movzx  eax,al
   2239a:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
   2239f:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   223a4:	85 c0                	test   eax,eax
   223a6:	74 5d                	je     22405 <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:172 (discriminator 1)
   223a8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   223ab:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   223b1:	83 c0 01             	add    eax,0x1
   223b4:	0f b7 c0             	movzx  eax,ax
   223b7:	83 ec 0c             	sub    esp,0xc
   223ba:	50                   	push   eax
   223bb:	e8 fb f9 ff ff       	call   21dbb <inb>
   223c0:	83 c4 10             	add    esp,0x10
   223c3:	0f b6 c0             	movzx  eax,al
   223c6:	a3 dc a5 09 00       	mov    ds:0x9a5dc,eax
   223cb:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   223d0:	83 f8 04             	cmp    eax,0x4
   223d3:	74 30                	je     22405 <ataResetController+0x147>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173
            printk("Controller reset failed on %s bus: %02x\n",devInfo->bus==0?"Primary":"Secondary", hdError);
   223d5:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   223da:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   223dd:	8b 92 61 02 00 00    	mov    edx,DWORD PTR [edx+0x261]
   223e3:	85 d2                	test   edx,edx
   223e5:	75 07                	jne    223ee <ataResetController+0x130>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 1)
   223e7:	ba 9b 3e 08 00       	mov    edx,0x83e9b
   223ec:	eb 05                	jmp    223f3 <ataResetController+0x135>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 2)
   223ee:	ba a3 3e 08 00       	mov    edx,0x83ea3
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:173 (discriminator 4)
   223f3:	83 ec 04             	sub    esp,0x4
   223f6:	50                   	push   eax
   223f7:	52                   	push   edx
   223f8:	68 b0 3e 08 00       	push   0x83eb0
   223fd:	e8 05 51 00 00       	call   27507 <printk>
   22402:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:175
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22405:	a1 78 48 12 00       	mov    eax,ds:0x124878
   2240a:	83 e0 08             	and    eax,0x8
   2240d:	85 c0                	test   eax,eax
   2240f:	74 10                	je     22421 <ataResetController+0x163>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:176
            printk("ataResetController: controller is ready\n");
   22411:	83 ec 0c             	sub    esp,0xc
   22414:	68 dc 3e 08 00       	push   0x83edc
   22419:	e8 e9 50 00 00       	call   27507 <printk>
   2241e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:178
#endif
}
   22421:	90                   	nop
   22422:	c9                   	leave  
   22423:	c3                   	ret    

00022424 <ataInit>:
ataInit():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:180
int ataInit(struct ataDeviceInfo_t* devInfo)
{
   22424:	55                   	push   ebp
   22425:	89 e5                	mov    ebp,esp
   22427:	53                   	push   ebx
   22428:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:181
    ataResetController(devInfo);
   2242b:	83 ec 0c             	sub    esp,0xc
   2242e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22431:	e8 88 fe ff ff       	call   222be <ataResetController>
   22436:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:182
    int cStatus=0, ticks=0;
   22439:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   22440:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:183
    ataSelectDrive(devInfo,0);
   22447:	83 ec 08             	sub    esp,0x8
   2244a:	6a 00                	push   0x0
   2244c:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2244f:	e8 0a fd ff ff       	call   2215e <ataSelectDrive>
   22454:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:184
    outb(devInfo->ioPort+ATA_PORT_SECTORCOUNT, 0x55);
   22457:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2245a:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22460:	83 c0 02             	add    eax,0x2
   22463:	0f b7 c0             	movzx  eax,ax
   22466:	83 ec 08             	sub    esp,0x8
   22469:	6a 55                	push   0x55
   2246b:	50                   	push   eax
   2246c:	e8 2b f9 ff ff       	call   21d9c <outb>
   22471:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:185
    outb(devInfo->ioPort+ATA_PORT_SECTOR_NUMBER, 0xAA);
   22474:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22477:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2247d:	83 c0 03             	add    eax,0x3
   22480:	0f b7 c0             	movzx  eax,ax
   22483:	83 ec 08             	sub    esp,0x8
   22486:	68 aa 00 00 00       	push   0xaa
   2248b:	50                   	push   eax
   2248c:	e8 0b f9 ff ff       	call   21d9c <outb>
   22491:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:186
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW,0x55);
   22494:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22497:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2249d:	83 c0 04             	add    eax,0x4
   224a0:	0f b7 c0             	movzx  eax,ax
   224a3:	83 ec 08             	sub    esp,0x8
   224a6:	6a 55                	push   0x55
   224a8:	50                   	push   eax
   224a9:	e8 ee f8 ff ff       	call   21d9c <outb>
   224ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:187
    outb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH,0xAA);
   224b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224b4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   224ba:	83 c0 05             	add    eax,0x5
   224bd:	0f b7 c0             	movzx  eax,ax
   224c0:	83 ec 08             	sub    esp,0x8
   224c3:	68 aa 00 00 00       	push   0xaa
   224c8:	50                   	push   eax
   224c9:	e8 ce f8 ff ff       	call   21d9c <outb>
   224ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:188
    outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   224d1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   224d4:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   224da:	83 c0 07             	add    eax,0x7
   224dd:	0f b7 c0             	movzx  eax,ax
   224e0:	83 ec 08             	sub    esp,0x8
   224e3:	68 ec 00 00 00       	push   0xec
   224e8:	50                   	push   eax
   224e9:	e8 ae f8 ff ff       	call   21d9c <outb>
   224ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:189
    wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   224f1:	8b 15 c4 47 12 00    	mov    edx,DWORD PTR ds:0x1247c4
   224f7:	89 d0                	mov    eax,edx
   224f9:	c1 e0 02             	shl    eax,0x2
   224fc:	01 d0                	add    eax,edx
   224fe:	01 c0                	add    eax,eax
   22500:	83 ec 0c             	sub    esp,0xc
   22503:	50                   	push   eax
   22504:	e8 3d 62 00 00       	call   28746 <wait>
   22509:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:190
    cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   2250c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2250f:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22515:	83 c0 07             	add    eax,0x7
   22518:	0f b7 c0             	movzx  eax,ax
   2251b:	83 ec 0c             	sub    esp,0xc
   2251e:	50                   	push   eax
   2251f:	e8 97 f8 ff ff       	call   21dbb <inb>
   22524:	83 c4 10             	add    esp,0x10
   22527:	0f b6 c0             	movzx  eax,al
   2252a:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:191
    if (cStatus==0)
   2252d:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   22531:	75 33                	jne    22566 <ataInit+0x142>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:194
    {
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22533:	a1 78 48 12 00       	mov    eax,ds:0x124878
   22538:	83 e0 08             	and    eax,0x8
   2253b:	85 c0                	test   eax,eax
   2253d:	74 1d                	je     2255c <ataInit+0x138>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:195
            printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   2253f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22542:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22548:	83 ec 04             	sub    esp,0x4
   2254b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2254e:	50                   	push   eax
   2254f:	68 05 3f 08 00       	push   0x83f05
   22554:	e8 ae 4f 00 00       	call   27507 <printk>
   22559:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:197
#endif
        return false;
   2255c:	b8 00 00 00 00       	mov    eax,0x0
   22561:	e9 f3 01 00 00       	jmp    22759 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:199
    }
    if ((cStatus & 1) == 1)
   22566:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22569:	83 e0 01             	and    eax,0x1
   2256c:	85 c0                	test   eax,eax
   2256e:	0f 84 bb 00 00 00    	je     2262f <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:201
    {
        int err = inb(devInfo->ioPort+ATA_PORT_ERROR);
   22574:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22577:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2257d:	83 c0 01             	add    eax,0x1
   22580:	0f b7 c0             	movzx  eax,ax
   22583:	83 ec 0c             	sub    esp,0xc
   22586:	50                   	push   eax
   22587:	e8 2f f8 ff ff       	call   21dbb <inb>
   2258c:	83 c4 10             	add    esp,0x10
   2258f:	0f b6 c0             	movzx  eax,al
   22592:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:203
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22595:	a1 78 48 12 00       	mov    eax,ds:0x124878
   2259a:	83 e0 08             	and    eax,0x8
   2259d:	85 c0                	test   eax,eax
   2259f:	74 1d                	je     225be <ataInit+0x19a>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:204
            printk("drive %02X, cStatus=%02X, errreg=%02X\n",devInfo->driveNo, cStatus,err);
   225a1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225a4:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   225aa:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   225ad:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   225b0:	50                   	push   eax
   225b1:	68 24 3f 08 00       	push   0x83f24
   225b6:	e8 4c 4f 00 00       	call   27507 <printk>
   225bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:206
#endif
        if (err!=4)
   225be:	83 7d ec 04          	cmp    DWORD PTR [ebp-0x14],0x4
   225c2:	74 0a                	je     225ce <ataInit+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:207
            return false;
   225c4:	b8 00 00 00 00       	mov    eax,0x0
   225c9:	e9 8b 01 00 00       	jmp    22759 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:208
        useCDROMIdentify = true;
   225ce:	c6 05 d8 a5 09 00 01 	mov    BYTE PTR ds:0x9a5d8,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:209
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   225d5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   225d8:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   225de:	83 c0 07             	add    eax,0x7
   225e1:	0f b7 c0             	movzx  eax,ax
   225e4:	83 ec 0c             	sub    esp,0xc
   225e7:	50                   	push   eax
   225e8:	e8 ce f7 ff ff       	call   21dbb <inb>
   225ed:	83 c4 10             	add    esp,0x10
   225f0:	0f b6 c0             	movzx  eax,al
   225f3:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:210
        if (cStatus==0)
   225f6:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   225fa:	75 33                	jne    2262f <ataInit+0x20b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:213
        {
#ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   225fc:	a1 78 48 12 00       	mov    eax,ds:0x124878
   22601:	83 e0 08             	and    eax,0x8
   22604:	85 c0                	test   eax,eax
   22606:	74 1d                	je     22625 <ataInit+0x201>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:214
                printk("Drive %02X, not ready(%02X)\n",devInfo->driveNo, cStatus);
   22608:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2260b:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   22611:	83 ec 04             	sub    esp,0x4
   22614:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22617:	50                   	push   eax
   22618:	68 05 3f 08 00       	push   0x83f05
   2261d:	e8 e5 4e 00 00       	call   27507 <printk>
   22622:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:216
#endif
            return false;
   22625:	b8 00 00 00 00       	mov    eax,0x0
   2262a:	e9 2a 01 00 00       	jmp    22759 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:219
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
   2262f:	8b 15 c4 47 12 00    	mov    edx,DWORD PTR ds:0x1247c4
   22635:	89 d0                	mov    eax,edx
   22637:	c1 e0 02             	shl    eax,0x2
   2263a:	01 d0                	add    eax,edx
   2263c:	01 c0                	add    eax,eax
   2263e:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   22641:	eb 32                	jmp    22675 <ataInit+0x251>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:222
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
   22643:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22646:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   2264c:	83 c0 07             	add    eax,0x7
   2264f:	0f b7 c0             	movzx  eax,ax
   22652:	83 ec 0c             	sub    esp,0xc
   22655:	50                   	push   eax
   22656:	e8 60 f7 ff ff       	call   21dbb <inb>
   2265b:	83 c4 10             	add    esp,0x10
   2265e:	0f b6 c0             	movzx  eax,al
   22661:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:223
        wait(1);
   22664:	83 ec 0c             	sub    esp,0xc
   22667:	6a 01                	push   0x1
   22669:	e8 d8 60 00 00       	call   28746 <wait>
   2266e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:224
        ticks--;
   22671:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220
#endif
            return false;
        }
    }
    ticks=ATA_STANDARD_WAIT_MS*kTicksPerMS;
    while ((cStatus & ATA_STATUS_BUSY) == ATA_STATUS_BUSY && (ticks>0))
   22675:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22678:	25 80 00 00 00       	and    eax,0x80
   2267d:	85 c0                	test   eax,eax
   2267f:	74 06                	je     22687 <ataInit+0x263>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:220 (discriminator 1)
   22681:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   22685:	7f bc                	jg     22643 <ataInit+0x21f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:226
    {
        cStatus = inb(devInfo->ioPort+ATA_PORT_STATUS);
        wait(1);
        ticks--;
    }
    if (!ataControllerIsReady(devInfo))
   22687:	83 ec 0c             	sub    esp,0xc
   2268a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2268d:	e8 5d f9 ff ff       	call   21fef <ataControllerIsReady>
   22692:	83 c4 10             	add    esp,0x10
   22695:	84 c0                	test   al,al
   22697:	75 0a                	jne    226a3 <ataInit+0x27f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:227
        return false;
   22699:	b8 00 00 00 00       	mov    eax,0x0
   2269e:	e9 b6 00 00 00       	jmp    22759 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228
    if (inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW)!=0x55 || inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH)!=0xaa)
   226a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226a6:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   226ac:	83 c0 04             	add    eax,0x4
   226af:	0f b7 c0             	movzx  eax,ax
   226b2:	83 ec 0c             	sub    esp,0xc
   226b5:	50                   	push   eax
   226b6:	e8 00 f7 ff ff       	call   21dbb <inb>
   226bb:	83 c4 10             	add    esp,0x10
   226be:	3c 55                	cmp    al,0x55
   226c0:	75 1f                	jne    226e1 <ataInit+0x2bd>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:228 (discriminator 1)
   226c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226c5:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   226cb:	83 c0 05             	add    eax,0x5
   226ce:	0f b7 c0             	movzx  eax,ax
   226d1:	83 ec 0c             	sub    esp,0xc
   226d4:	50                   	push   eax
   226d5:	e8 e1 f6 ff ff       	call   21dbb <inb>
   226da:	83 c4 10             	add    esp,0x10
   226dd:	3c aa                	cmp    al,0xaa
   226df:	74 73                	je     22754 <ataInit+0x330>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:231
    {
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   226e1:	a1 78 48 12 00       	mov    eax,ds:0x124878
   226e6:	83 e0 08             	and    eax,0x8
   226e9:	85 c0                	test   eax,eax
   226eb:	74 4e                	je     2273b <ataInit+0x317>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:232
        printk("Cylinder port non-zero (%X,%X), device is non-ATA\n",inb(devInfo->ioPort+ATA_PORT_CYLINDER_LOW), inb(devInfo->ioPort+ATA_PORT_CYLINDER_HIGH));
   226ed:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   226f0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   226f6:	83 c0 05             	add    eax,0x5
   226f9:	0f b7 c0             	movzx  eax,ax
   226fc:	83 ec 0c             	sub    esp,0xc
   226ff:	50                   	push   eax
   22700:	e8 b6 f6 ff ff       	call   21dbb <inb>
   22705:	83 c4 10             	add    esp,0x10
   22708:	0f b6 d8             	movzx  ebx,al
   2270b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2270e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22714:	83 c0 04             	add    eax,0x4
   22717:	0f b7 c0             	movzx  eax,ax
   2271a:	83 ec 0c             	sub    esp,0xc
   2271d:	50                   	push   eax
   2271e:	e8 98 f6 ff ff       	call   21dbb <inb>
   22723:	83 c4 10             	add    esp,0x10
   22726:	0f b6 c0             	movzx  eax,al
   22729:	83 ec 04             	sub    esp,0x4
   2272c:	53                   	push   ebx
   2272d:	50                   	push   eax
   2272e:	68 4c 3f 08 00       	push   0x83f4c
   22733:	e8 cf 4d 00 00       	call   27507 <printk>
   22738:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:234
#endif
        if (useCDROMIdentify)
   2273b:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22742:	84 c0                	test   al,al
   22744:	74 07                	je     2274d <ataInit+0x329>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:235
            return true;
   22746:	b8 01 00 00 00       	mov    eax,0x1
   2274b:	eb 0c                	jmp    22759 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:237
        else
            return false;
   2274d:	b8 00 00 00 00       	mov    eax,0x0
   22752:	eb 05                	jmp    22759 <ataInit+0x335>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:239
    }
    return true;
   22754:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:240
}
   22759:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2275c:	c9                   	leave  
   2275d:	c3                   	ret    

0002275e <ataGetModelFromIdentify>:
ataGetModelFromIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:243

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
   2275e:	55                   	push   ebp
   2275f:	89 e5                	mov    ebp,esp
   22761:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:244
    uint16_t* ident=devInfo->ATAIdentifyData+27;
   22764:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22767:	83 c0 36             	add    eax,0x36
   2276a:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245
    for (int cnt=0;cnt<40;cnt+=2)
   2276d:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   22774:	eb 3d                	jmp    227b3 <ataGetModelFromIdentify+0x55>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:247 (discriminator 3)
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
   22776:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   22779:	0f b7 00             	movzx  eax,WORD PTR [eax]
   2277c:	66 c1 e8 08          	shr    ax,0x8
   22780:	89 c1                	mov    ecx,eax
   22782:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   22785:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   22788:	01 d0                	add    eax,edx
   2278a:	05 00 02 00 00       	add    eax,0x200
   2278f:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:248 (discriminator 3)
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
   22791:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   22794:	8d 48 01             	lea    ecx,[eax+0x1]
   22797:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   2279a:	8d 50 02             	lea    edx,[eax+0x2]
   2279d:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   227a0:	0f b7 00             	movzx  eax,WORD PTR [eax]
   227a3:	89 c2                	mov    edx,eax
   227a5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   227a8:	88 94 08 00 02 00 00 	mov    BYTE PTR [eax+ecx*1+0x200],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 3)
}

void ataGetModelFromIdentify(struct ataDeviceInfo_t* devInfo)
{
    uint16_t* ident=devInfo->ATAIdentifyData+27;
    for (int cnt=0;cnt<40;cnt+=2)
   227af:	83 45 f8 02          	add    DWORD PTR [ebp-0x8],0x2
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:245 (discriminator 1)
   227b3:	83 7d f8 27          	cmp    DWORD PTR [ebp-0x8],0x27
   227b7:	7e bd                	jle    22776 <ataGetModelFromIdentify+0x18>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:250
    {
        devInfo->ATADeviceModel[cnt]=(*ident >> 8) & 0xFF;
        devInfo->ATADeviceModel[cnt+1]=(*ident++) & 0xFF;
    }
    devInfo->ATADeviceModel[79]='\0';
   227b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   227bc:	c6 80 4f 02 00 00 00 	mov    BYTE PTR [eax+0x24f],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:251
}
   227c3:	90                   	nop
   227c4:	c9                   	leave  
   227c5:	c3                   	ret    

000227c6 <ataIdentify>:
ataIdentify():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:254

int ataIdentify(struct ataDeviceInfo_t* devInfo)
{
   227c6:	55                   	push   ebp
   227c7:	89 e5                	mov    ebp,esp
   227c9:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:256
    //For ATA devices, read the identity data.  For SATA, we've already read it into ATAIdentityData
    if (devInfo->queryATAData)
   227cc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   227cf:	0f b6 80 50 02 00 00 	movzx  eax,BYTE PTR [eax+0x250]
   227d6:	84 c0                	test   al,al
   227d8:	0f 84 9c 00 00 00    	je     2287a <ataIdentify+0xb4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:258
    {
        if (useCDROMIdentify)
   227de:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   227e5:	84 c0                	test   al,al
   227e7:	74 1f                	je     22808 <ataIdentify+0x42>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:259
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
   227e9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   227ec:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   227f2:	83 c0 07             	add    eax,0x7
   227f5:	0f b7 c0             	movzx  eax,ax
   227f8:	68 a1 00 00 00       	push   0xa1
   227fd:	50                   	push   eax
   227fe:	e8 99 f5 ff ff       	call   21d9c <outb>
   22803:	83 c4 08             	add    esp,0x8
   22806:	eb 1d                	jmp    22825 <ataIdentify+0x5f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:261
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
   22808:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2280b:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22811:	83 c0 07             	add    eax,0x7
   22814:	0f b7 c0             	movzx  eax,ax
   22817:	68 ec 00 00 00       	push   0xec
   2281c:	50                   	push   eax
   2281d:	e8 7a f5 ff ff       	call   21d9c <outb>
   22822:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:262
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22825:	8b 15 c4 47 12 00    	mov    edx,DWORD PTR ds:0x1247c4
   2282b:	89 d0                	mov    eax,edx
   2282d:	c1 e0 02             	shl    eax,0x2
   22830:	01 d0                	add    eax,edx
   22832:	01 c0                	add    eax,eax
   22834:	83 ec 0c             	sub    esp,0xc
   22837:	50                   	push   eax
   22838:	e8 09 5f 00 00       	call   28746 <wait>
   2283d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263
        for (int readCount=0;readCount<=255;readCount++)
   22840:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   22847:	eb 28                	jmp    22871 <ataIdentify+0xab>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:265 (discriminator 3)
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
   22849:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2284c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22852:	0f b7 c0             	movzx  eax,ax
   22855:	83 ec 0c             	sub    esp,0xc
   22858:	50                   	push   eax
   22859:	e8 7a f5 ff ff       	call   21dd8 <inw>
   2285e:	83 c4 10             	add    esp,0x10
   22861:	89 c1                	mov    ecx,eax
   22863:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22866:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   22869:	66 89 0c 50          	mov    WORD PTR [eax+edx*2],cx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 3)
        if (useCDROMIdentify)
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_CDROM_COMMAND);
        else
            outb(devInfo->ioPort+ATA_PORT_COMMAND, ATA_IDENTIFY_COMMAND);
        wait(ATA_STANDARD_WAIT_MS*kTicksPerMS);
        for (int readCount=0;readCount<=255;readCount++)
   2286d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:263 (discriminator 1)
   22871:	81 7d f4 ff 00 00 00 	cmp    DWORD PTR [ebp-0xc],0xff
   22878:	7e cf                	jle    22849 <ataIdentify+0x83>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:268
        {
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
   2287a:	83 ec 0c             	sub    esp,0xc
   2287d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   22880:	e8 d9 fe ff ff       	call   2275e <ataGetModelFromIdentify>
   22885:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:269
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
   22888:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2288b:	0f b7 40 78          	movzx  eax,WORD PTR [eax+0x78]
   2288f:	0f b7 d0             	movzx  edx,ax
   22892:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22895:	0f b7 40 7a          	movzx  eax,WORD PTR [eax+0x7a]
   22899:	0f b7 c0             	movzx  eax,ax
   2289c:	c1 e0 10             	shl    eax,0x10
   2289f:	09 d0                	or     eax,edx
   228a1:	89 c2                	mov    edx,eax
   228a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   228a6:	89 90 56 02 00 00    	mov    DWORD PTR [eax+0x256],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   228ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   228af:	0f b7 80 d4 00 00 00 	movzx  eax,WORD PTR [eax+0xd4]
   228b6:	0f b7 c0             	movzx  eax,ax
   228b9:	25 00 10 00 00       	and    eax,0x1000
   228be:	85 c0                	test   eax,eax
   228c0:	74 20                	je     228e2 <ataIdentify+0x11c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:271 (discriminator 1)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
   228c2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   228c5:	0f b7 80 ea 00 00 00 	movzx  eax,WORD PTR [eax+0xea]
   228cc:	0f b7 d0             	movzx  edx,ax
   228cf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   228d2:	0f b7 40 24          	movzx  eax,WORD PTR [eax+0x24]
   228d6:	0f b7 c0             	movzx  eax,ax
   228d9:	c1 e0 10             	shl    eax,0x10
   228dc:	09 d0                	or     eax,edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 1)
            devInfo->ATAIdentifyData[readCount]=inw(devInfo->ioPort+ATA_PORT_DATA);
        }
    }
    ataGetModelFromIdentify(devInfo);
    devInfo->totalSectorCount = devInfo->ATAIdentifyData[60] | (devInfo->ATAIdentifyData[61]<<16);
    devInfo->sectorSize = (devInfo->ATAIdentifyData[106] & 1<<12)==1<<12
   228de:	89 c2                	mov    edx,eax
   228e0:	eb 05                	jmp    228e7 <ataIdentify+0x121>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 2)
   228e2:	ba 00 02 00 00       	mov    edx,0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:270 (discriminator 4)
   228e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   228ea:	89 90 5a 02 00 00    	mov    DWORD PTR [eax+0x25a],edx
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:273 (discriminator 4)
            ?devInfo->ATAIdentifyData[117] | (devInfo->ATAIdentifyData[18]<<16)
            :512;
    devInfo->dmaSupported=devInfo->ATAIdentifyData[49]>>8 & 0x1;
   228f0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   228f3:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   228f7:	66 c1 e8 08          	shr    ax,0x8
   228fb:	0f b7 c0             	movzx  eax,ax
   228fe:	83 e0 01             	and    eax,0x1
   22901:	85 c0                	test   eax,eax
   22903:	0f 95 c2             	setne  dl
   22906:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22909:	88 90 60 02 00 00    	mov    BYTE PTR [eax+0x260],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:274 (discriminator 4)
    devInfo->lbaSupported=devInfo->ATAIdentifyData[49]>>9 & 0x1;
   2290f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22912:	0f b7 40 62          	movzx  eax,WORD PTR [eax+0x62]
   22916:	66 c1 e8 09          	shr    ax,0x9
   2291a:	0f b7 c0             	movzx  eax,ax
   2291d:	83 e0 01             	and    eax,0x1
   22920:	85 c0                	test   eax,eax
   22922:	0f 95 c2             	setne  dl
   22925:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22928:	88 90 5e 02 00 00    	mov    BYTE PTR [eax+0x25e],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:275 (discriminator 4)
    devInfo->lba48Supported=devInfo->ATAIdentifyData[83]>>10 & 0x1;
   2292e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22931:	0f b7 80 a6 00 00 00 	movzx  eax,WORD PTR [eax+0xa6]
   22938:	66 c1 e8 0a          	shr    ax,0xa
   2293c:	0f b7 c0             	movzx  eax,ax
   2293f:	83 e0 01             	and    eax,0x1
   22942:	85 c0                	test   eax,eax
   22944:	0f 95 c2             	setne  dl
   22947:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2294a:	88 90 5f 02 00 00    	mov    BYTE PTR [eax+0x25f],dl
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:278 (discriminator 4)
    
#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22950:	a1 78 48 12 00       	mov    eax,ds:0x124878
   22955:	83 e0 08             	and    eax,0x8
   22958:	85 c0                	test   eax,eax
   2295a:	74 24                	je     22980 <ataIdentify+0x1ba>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:279
        printk("drive %d, model=%s\n",devInfo->driveNo, devInfo->ATADeviceModel);
   2295c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2295f:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   22965:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22968:	8b 80 65 02 00 00    	mov    eax,DWORD PTR [eax+0x265]
   2296e:	83 ec 04             	sub    esp,0x4
   22971:	52                   	push   edx
   22972:	50                   	push   eax
   22973:	68 7f 3f 08 00       	push   0x83f7f
   22978:	e8 8a 4b 00 00       	call   27507 <printk>
   2297d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:281
#endif
    return 1;
   22980:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:282
}
   22985:	c9                   	leave  
   22986:	c3                   	ret    

00022987 <ataScanForHarddrives>:
ataScanForHarddrives():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:285

int ataScanForHarddrives()
{
   22987:	55                   	push   ebp
   22988:	89 e5                	mov    ebp,esp
   2298a:	53                   	push   ebx
   2298b:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:286
    kATADeviceInfo[0].bus=ATAPrimary;
   2298e:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22993:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   2299a:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:287
    kATADeviceInfo[0].driveNo=0;
   2299d:	a1 00 48 12 00       	mov    eax,ds:0x124800
   229a2:	c7 80 65 02 00 00 00 	mov    DWORD PTR [eax+0x265],0x0
   229a9:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:288
    kATADeviceInfo[0].ioPort=0x1F0;
   229ac:	a1 00 48 12 00       	mov    eax,ds:0x124800
   229b1:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   229b8:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:289
    kATADeviceInfo[0].irqNum=0x14;
   229bb:	a1 00 48 12 00       	mov    eax,ds:0x124800
   229c0:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:290
    kATADeviceInfo[0].driveHeadPortDesignation=0xA0;
   229c7:	a1 00 48 12 00       	mov    eax,ds:0x124800
   229cc:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:291
    kATADeviceInfo[0].queryATAData=true;
   229d3:	a1 00 48 12 00       	mov    eax,ds:0x124800
   229d8:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:292
    kATADeviceInfo[0].ATADeviceAvailable=ataInit(&kATADeviceInfo[0]);
   229df:	8b 1d 00 48 12 00    	mov    ebx,DWORD PTR ds:0x124800
   229e5:	a1 00 48 12 00       	mov    eax,ds:0x124800
   229ea:	83 ec 0c             	sub    esp,0xc
   229ed:	50                   	push   eax
   229ee:	e8 31 fa ff ff       	call   22424 <ataInit>
   229f3:	83 c4 10             	add    esp,0x10
   229f6:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:293
    if (kATADeviceInfo[0].ATADeviceAvailable)
   229fc:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22a01:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22a08:	84 c0                	test   al,al
   22a0a:	74 3c                	je     22a48 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:295
    {
        ataIdentify(&kATADeviceInfo[0]);
   22a0c:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22a11:	83 ec 0c             	sub    esp,0xc
   22a14:	50                   	push   eax
   22a15:	e8 ac fd ff ff       	call   227c6 <ataIdentify>
   22a1a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:296
        if (useCDROMIdentify)
   22a1d:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22a24:	84 c0                	test   al,al
   22a26:	74 11                	je     22a39 <ataScanForHarddrives+0xb2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:297
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22a28:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22a2d:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22a34:	00 00 00 
   22a37:	eb 0f                	jmp    22a48 <ataScanForHarddrives+0xc1>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:299
        else
            kATADeviceInfo[0].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22a39:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22a3e:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22a45:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:301
    }
    useCDROMIdentify=false;
   22a48:	c6 05 d8 a5 09 00 00 	mov    BYTE PTR ds:0x9a5d8,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:303

    kATADeviceInfo[1].bus=ATAPrimary;
   22a4f:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22a54:	05 73 02 00 00       	add    eax,0x273
   22a59:	c7 80 61 02 00 00 00 	mov    DWORD PTR [eax+0x261],0x0
   22a60:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:304
    kATADeviceInfo[1].driveNo=1;
   22a63:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22a68:	05 73 02 00 00       	add    eax,0x273
   22a6d:	c7 80 65 02 00 00 01 	mov    DWORD PTR [eax+0x265],0x1
   22a74:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:305
    kATADeviceInfo[1].ioPort=0x1F0;
   22a77:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22a7c:	05 73 02 00 00       	add    eax,0x273
   22a81:	c7 80 69 02 00 00 f0 	mov    DWORD PTR [eax+0x269],0x1f0
   22a88:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:306
    kATADeviceInfo[1].irqNum=0x14;
   22a8b:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22a90:	05 73 02 00 00       	add    eax,0x273
   22a95:	c6 80 6d 02 00 00 14 	mov    BYTE PTR [eax+0x26d],0x14
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:307
    kATADeviceInfo[1].driveHeadPortDesignation=0xB0;
   22a9c:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22aa1:	05 73 02 00 00       	add    eax,0x273
   22aa6:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:308
    kATADeviceInfo[1].queryATAData=true;
   22aad:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22ab2:	05 73 02 00 00       	add    eax,0x273
   22ab7:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:309
    kATADeviceInfo[1].ATADeviceAvailable=ataInit(&kATADeviceInfo[1]);
   22abe:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22ac3:	8d 98 73 02 00 00    	lea    ebx,[eax+0x273]
   22ac9:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22ace:	05 73 02 00 00       	add    eax,0x273
   22ad3:	83 ec 0c             	sub    esp,0xc
   22ad6:	50                   	push   eax
   22ad7:	e8 48 f9 ff ff       	call   22424 <ataInit>
   22adc:	83 c4 10             	add    esp,0x10
   22adf:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:310
    if (kATADeviceInfo[1].ATADeviceAvailable)
   22ae5:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22aea:	05 73 02 00 00       	add    eax,0x273
   22aef:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22af6:	84 c0                	test   al,al
   22af8:	74 4b                	je     22b45 <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:312
    {
        ataIdentify(&kATADeviceInfo[1]);
   22afa:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22aff:	05 73 02 00 00       	add    eax,0x273
   22b04:	83 ec 0c             	sub    esp,0xc
   22b07:	50                   	push   eax
   22b08:	e8 b9 fc ff ff       	call   227c6 <ataIdentify>
   22b0d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:313
        if (useCDROMIdentify)
   22b10:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22b17:	84 c0                	test   al,al
   22b19:	74 16                	je     22b31 <ataScanForHarddrives+0x1aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:314
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22b1b:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22b20:	05 73 02 00 00       	add    eax,0x273
   22b25:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22b2c:	00 00 00 
   22b2f:	eb 14                	jmp    22b45 <ataScanForHarddrives+0x1be>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:316
        else
            kATADeviceInfo[1].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22b31:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22b36:	05 73 02 00 00       	add    eax,0x273
   22b3b:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22b42:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:318
    }
    kATADeviceInfo[2].bus=ATASecondary;
   22b45:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22b4a:	05 e6 04 00 00       	add    eax,0x4e6
   22b4f:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   22b56:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:319
    kATADeviceInfo[2].driveNo=2;
   22b59:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22b5e:	05 e6 04 00 00       	add    eax,0x4e6
   22b63:	c7 80 65 02 00 00 02 	mov    DWORD PTR [eax+0x265],0x2
   22b6a:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:320
    kATADeviceInfo[2].ioPort=0x170;
   22b6d:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22b72:	05 e6 04 00 00       	add    eax,0x4e6
   22b77:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   22b7e:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:321
    kATADeviceInfo[2].irqNum=0x15;
   22b81:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22b86:	05 e6 04 00 00       	add    eax,0x4e6
   22b8b:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:322
    kATADeviceInfo[2].driveHeadPortDesignation=0xA0;
   22b92:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22b97:	05 e6 04 00 00       	add    eax,0x4e6
   22b9c:	c6 80 6e 02 00 00 a0 	mov    BYTE PTR [eax+0x26e],0xa0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:323
    kATADeviceInfo[2].queryATAData=false;
   22ba3:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22ba8:	05 e6 04 00 00       	add    eax,0x4e6
   22bad:	c6 80 50 02 00 00 00 	mov    BYTE PTR [eax+0x250],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:324
    kATADeviceInfo[2].ATADeviceAvailable=ataInit(&kATADeviceInfo[2]);
   22bb4:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22bb9:	8d 98 e6 04 00 00    	lea    ebx,[eax+0x4e6]
   22bbf:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22bc4:	05 e6 04 00 00       	add    eax,0x4e6
   22bc9:	83 ec 0c             	sub    esp,0xc
   22bcc:	50                   	push   eax
   22bcd:	e8 52 f8 ff ff       	call   22424 <ataInit>
   22bd2:	83 c4 10             	add    esp,0x10
   22bd5:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:325
    if (kATADeviceInfo[2].ATADeviceAvailable)
   22bdb:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22be0:	05 e6 04 00 00       	add    eax,0x4e6
   22be5:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22bec:	84 c0                	test   al,al
   22bee:	74 4b                	je     22c3b <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:327
    {
        ataIdentify(&kATADeviceInfo[2]);
   22bf0:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22bf5:	05 e6 04 00 00       	add    eax,0x4e6
   22bfa:	83 ec 0c             	sub    esp,0xc
   22bfd:	50                   	push   eax
   22bfe:	e8 c3 fb ff ff       	call   227c6 <ataIdentify>
   22c03:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:328
        if (useCDROMIdentify)
   22c06:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22c0d:	84 c0                	test   al,al
   22c0f:	74 16                	je     22c27 <ataScanForHarddrives+0x2a0>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:329
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22c11:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22c16:	05 e6 04 00 00       	add    eax,0x4e6
   22c1b:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22c22:	00 00 00 
   22c25:	eb 14                	jmp    22c3b <ataScanForHarddrives+0x2b4>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:331
        else
            kATADeviceInfo[2].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22c27:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22c2c:	05 e6 04 00 00       	add    eax,0x4e6
   22c31:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22c38:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:334
    }

    kATADeviceInfo[3].bus=ATASecondary;
   22c3b:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22c40:	05 59 07 00 00       	add    eax,0x759
   22c45:	c7 80 61 02 00 00 01 	mov    DWORD PTR [eax+0x261],0x1
   22c4c:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:335
    kATADeviceInfo[3].driveNo=3;
   22c4f:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22c54:	05 59 07 00 00       	add    eax,0x759
   22c59:	c7 80 65 02 00 00 03 	mov    DWORD PTR [eax+0x265],0x3
   22c60:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:336
    kATADeviceInfo[3].ioPort=0x170;
   22c63:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22c68:	05 59 07 00 00       	add    eax,0x759
   22c6d:	c7 80 69 02 00 00 70 	mov    DWORD PTR [eax+0x269],0x170
   22c74:	01 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:337
    kATADeviceInfo[3].irqNum=0x15;
   22c77:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22c7c:	05 59 07 00 00       	add    eax,0x759
   22c81:	c6 80 6d 02 00 00 15 	mov    BYTE PTR [eax+0x26d],0x15
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:338
    kATADeviceInfo[3].driveHeadPortDesignation=0xB0;
   22c88:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22c8d:	05 59 07 00 00       	add    eax,0x759
   22c92:	c6 80 6e 02 00 00 b0 	mov    BYTE PTR [eax+0x26e],0xb0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:339
    kATADeviceInfo[3].queryATAData=true;
   22c99:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22c9e:	05 59 07 00 00       	add    eax,0x759
   22ca3:	c6 80 50 02 00 00 01 	mov    BYTE PTR [eax+0x250],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:340
    kATADeviceInfo[3].ATADeviceAvailable=ataInit(&kATADeviceInfo[3]);
   22caa:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22caf:	8d 98 59 07 00 00    	lea    ebx,[eax+0x759]
   22cb5:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22cba:	05 59 07 00 00       	add    eax,0x759
   22cbf:	83 ec 0c             	sub    esp,0xc
   22cc2:	50                   	push   eax
   22cc3:	e8 5c f7 ff ff       	call   22424 <ataInit>
   22cc8:	83 c4 10             	add    esp,0x10
   22ccb:	88 83 51 02 00 00    	mov    BYTE PTR [ebx+0x251],al
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:341
    if (kATADeviceInfo[3].ATADeviceAvailable)
   22cd1:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22cd6:	05 59 07 00 00       	add    eax,0x759
   22cdb:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   22ce2:	84 c0                	test   al,al
   22ce4:	74 4b                	je     22d31 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:343
    {
        ataIdentify(&kATADeviceInfo[3]);
   22ce6:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22ceb:	05 59 07 00 00       	add    eax,0x759
   22cf0:	83 ec 0c             	sub    esp,0xc
   22cf3:	50                   	push   eax
   22cf4:	e8 cd fa ff ff       	call   227c6 <ataIdentify>
   22cf9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:344
        if (useCDROMIdentify)
   22cfc:	0f b6 05 d8 a5 09 00 	movzx  eax,BYTE PTR ds:0x9a5d8
   22d03:	84 c0                	test   al,al
   22d05:	74 16                	je     22d1d <ataScanForHarddrives+0x396>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:345
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_CD;
   22d07:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22d0c:	05 59 07 00 00       	add    eax,0x759
   22d11:	c7 80 52 02 00 00 01 	mov    DWORD PTR [eax+0x252],0x1
   22d18:	00 00 00 
   22d1b:	eb 14                	jmp    22d31 <ataScanForHarddrives+0x3aa>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:347
        else
            kATADeviceInfo[3].ATADeviceType=ATA_DEVICE_TYPE_HD;
   22d1d:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22d22:	05 59 07 00 00       	add    eax,0x759
   22d27:	c7 80 52 02 00 00 00 	mov    DWORD PTR [eax+0x252],0x0
   22d2e:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:351
    }

#ifndef DEBUG_NONE
    if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22d31:	a1 78 48 12 00       	mov    eax,ds:0x124878
   22d36:	83 e0 08             	and    eax,0x8
   22d39:	85 c0                	test   eax,eax
   22d3b:	74 2c                	je     22d69 <ataScanForHarddrives+0x3e2>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:352
        printk("INIT: Disk1=%s  Disk2=%s\n", kATADeviceInfo[0].ATADeviceModel, kATADeviceInfo[1].ATADeviceModel);
   22d3d:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22d42:	05 73 02 00 00       	add    eax,0x273
   22d47:	8d 90 00 02 00 00    	lea    edx,[eax+0x200]
   22d4d:	a1 00 48 12 00       	mov    eax,ds:0x124800
   22d52:	05 00 02 00 00       	add    eax,0x200
   22d57:	83 ec 04             	sub    esp,0x4
   22d5a:	52                   	push   edx
   22d5b:	50                   	push   eax
   22d5c:	68 93 3f 08 00       	push   0x83f93
   22d61:	e8 a1 47 00 00       	call   27507 <printk>
   22d66:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:354
#endif
            return 0;
   22d69:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:355
}
   22d6e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   22d71:	c9                   	leave  
   22d72:	c3                   	ret    

00022d73 <ataReadDisk>:
ataReadDisk():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:357
int ataReadDisk(struct ataDeviceInfo_t* devInfo, uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22d73:	55                   	push   ebp
   22d74:	89 e5                	mov    ebp,esp
   22d76:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:358
    atablockingReadDev = devInfo;
   22d79:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22d7c:	a3 a0 8f 09 00       	mov    ds:0x98fa0,eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:359
    if (sector_count==0)    //this function can be called with a sector_count of 0 in order to set partOffset
   22d81:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   22d85:	75 07                	jne    22d8e <ataReadDisk+0x1b>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:360
        return -1;
   22d87:	b8 ff ff ff ff       	mov    eax,0xffffffff
   22d8c:	eb 14                	jmp    22da2 <ataReadDisk+0x2f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:361
    return ataBlockingRead28(sector, buffer, sector_count);
   22d8e:	83 ec 04             	sub    esp,0x4
   22d91:	ff 75 14             	push   DWORD PTR [ebp+0x14]
   22d94:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   22d97:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   22d9a:	e8 05 00 00 00       	call   22da4 <ataBlockingRead28>
   22d9f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:362
}
   22da2:	c9                   	leave  
   22da3:	c3                   	ret    

00022da4 <ataBlockingRead28>:
ataBlockingRead28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:365

int ataBlockingRead28(uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   22da4:	55                   	push   ebp
   22da5:	89 e5                	mov    ebp,esp
   22da7:	83 ec 28             	sub    esp,0x28
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:367
    //For now if the FAT library calls this, we assume we've already read the same partition most recently
    int lResult=0;
   22daa:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:368
    uint8_t* bufp=buffer;
   22db1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   22db4:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:369
    uint32_t lSectorsLeft=sector_count;
   22db7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22dba:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:370
    uint32_t lSector=sector+partOffset; //this represents the start of the partition
   22dbd:	a1 e0 a5 09 00       	mov    eax,ds:0x9a5e0
   22dc2:	89 c2                	mov    edx,eax
   22dc4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   22dc7:	01 d0                	add    eax,edx
   22dc9:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:373

#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22dcc:	a1 78 48 12 00       	mov    eax,ds:0x124878
   22dd1:	83 e0 08             	and    eax,0x8
   22dd4:	85 c0                	test   eax,eax
   22dd6:	74 1b                	je     22df3 <ataBlockingRead28+0x4f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:375
        {
            printk("ataBlockingRead28: sec: 0x%08X, buf 0x%08X, cnt 0x%08X\n", lSector, bufp, sector_count);
   22dd8:	ff 75 10             	push   DWORD PTR [ebp+0x10]
   22ddb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22dde:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   22de1:	68 b0 3f 08 00       	push   0x83fb0
   22de6:	e8 1c 47 00 00       	call   27507 <printk>
   22deb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:376
            waitForKeyboardKey();
   22dee:	e8 35 e4 fe ff       	call   11228 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:379
        }
#endif
    lResult=ataWaitForIdle(atablockingReadDev);
   22df3:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22df8:	83 ec 0c             	sub    esp,0xc
   22dfb:	50                   	push   eax
   22dfc:	e8 e1 f0 ff ff       	call   21ee2 <ataWaitForIdle>
   22e01:	83 c4 10             	add    esp,0x10
   22e04:	0f b6 c0             	movzx  eax,al
   22e07:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:380
    if (lResult)
   22e0a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22e0e:	74 13                	je     22e23 <ataBlockingRead28+0x7f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:381
        panic("ataBlockingRead28: Timeout waiting for DRQ and BSY to be clear (0x%02X)", lResult);
   22e10:	83 ec 08             	sub    esp,0x8
   22e13:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22e16:	68 e8 3f 08 00       	push   0x83fe8
   22e1b:	e8 68 42 00 00       	call   27088 <panic>
   22e20:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:386
        //Select the drive we want
        //NOTE: Drive selected prior to calling this function
        //ataSelectDrive(drive,0);
        //Magic bit (6) to set LBA mode and top 4 bits of LBA28 sector # go in bottom 4
    outb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT, inb(atablockingReadDev->ioPort+ATA_DRIVE_SELECT) | (1 << 6) | ((lSector >> 24) & 0x0F));
   22e23:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22e28:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22e2e:	83 c0 06             	add    eax,0x6
   22e31:	0f b7 c0             	movzx  eax,ax
   22e34:	83 ec 0c             	sub    esp,0xc
   22e37:	50                   	push   eax
   22e38:	e8 7e ef ff ff       	call   21dbb <inb>
   22e3d:	83 c4 10             	add    esp,0x10
   22e40:	89 c2                	mov    edx,eax
   22e42:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22e45:	c1 e8 18             	shr    eax,0x18
   22e48:	83 e0 0f             	and    eax,0xf
   22e4b:	09 d0                	or     eax,edx
   22e4d:	83 c8 40             	or     eax,0x40
   22e50:	0f b6 d0             	movzx  edx,al
   22e53:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22e58:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22e5e:	83 c0 06             	add    eax,0x6
   22e61:	0f b7 c0             	movzx  eax,ax
   22e64:	83 ec 08             	sub    esp,0x8
   22e67:	52                   	push   edx
   22e68:	50                   	push   eax
   22e69:	e8 2e ef ff ff       	call   21d9c <outb>
   22e6e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:389

    //Send the sector count (8 bit))
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTORCOUNT, sector_count);
   22e71:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   22e74:	0f b6 d0             	movzx  edx,al
   22e77:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22e7c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22e82:	83 c0 02             	add    eax,0x2
   22e85:	0f b7 c0             	movzx  eax,ax
   22e88:	83 ec 08             	sub    esp,0x8
   22e8b:	52                   	push   edx
   22e8c:	50                   	push   eax
   22e8d:	e8 0a ef ff ff       	call   21d9c <outb>
   22e92:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:392

    //Send the LBA sector number in the next 3 fields + high bit in the 
    outb(atablockingReadDev->ioPort+ATA_PORT_SECTOR_NUMBER, (lSector) & 0xFF);
   22e95:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22e98:	0f b6 d0             	movzx  edx,al
   22e9b:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22ea0:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22ea6:	83 c0 03             	add    eax,0x3
   22ea9:	0f b7 c0             	movzx  eax,ax
   22eac:	83 ec 08             	sub    esp,0x8
   22eaf:	52                   	push   edx
   22eb0:	50                   	push   eax
   22eb1:	e8 e6 ee ff ff       	call   21d9c <outb>
   22eb6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:393
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_LOW, (lSector >> 8) & 0xFF);
   22eb9:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22ebc:	c1 e8 08             	shr    eax,0x8
   22ebf:	0f b6 d0             	movzx  edx,al
   22ec2:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22ec7:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22ecd:	83 c0 04             	add    eax,0x4
   22ed0:	0f b7 c0             	movzx  eax,ax
   22ed3:	83 ec 08             	sub    esp,0x8
   22ed6:	52                   	push   edx
   22ed7:	50                   	push   eax
   22ed8:	e8 bf ee ff ff       	call   21d9c <outb>
   22edd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:394
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
   22ee0:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   22ee3:	c1 e8 10             	shr    eax,0x10
   22ee6:	0f b6 d0             	movzx  edx,al
   22ee9:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22eee:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22ef4:	83 c0 05             	add    eax,0x5
   22ef7:	0f b7 c0             	movzx  eax,ax
   22efa:	83 ec 08             	sub    esp,0x8
   22efd:	52                   	push   edx
   22efe:	50                   	push   eax
   22eff:	e8 98 ee ff ff       	call   21d9c <outb>
   22f04:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:395
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
   22f07:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22f0c:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22f12:	83 c0 07             	add    eax,0x7
   22f15:	0f b7 c0             	movzx  eax,ax
   22f18:	83 ec 08             	sub    esp,0x8
   22f1b:	6a 20                	push   0x20
   22f1d:	50                   	push   eax
   22f1e:	e8 79 ee ff ff       	call   21d9c <outb>
   22f23:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:396
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   22f26:	8b 15 c4 47 12 00    	mov    edx,DWORD PTR ds:0x1247c4
   22f2c:	89 d0                	mov    eax,edx
   22f2e:	c1 e0 02             	shl    eax,0x2
   22f31:	01 d0                	add    eax,edx
   22f33:	01 c0                	add    eax,eax
   22f35:	89 c2                	mov    edx,eax
   22f37:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22f3c:	83 ec 04             	sub    esp,0x4
   22f3f:	52                   	push   edx
   22f40:	6a 01                	push   0x1
   22f42:	50                   	push   eax
   22f43:	e8 e4 ee ff ff       	call   21e2c <ataWaitForDRQ>
   22f48:	83 c4 10             	add    esp,0x10
   22f4b:	0f b6 c0             	movzx  eax,al
   22f4e:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:397
    if (lResult)
   22f51:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   22f55:	0f 84 35 01 00 00    	je     23090 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:398
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   22f5b:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   22f60:	83 ec 04             	sub    esp,0x4
   22f63:	50                   	push   eax
   22f64:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   22f67:	68 30 40 08 00       	push   0x84030
   22f6c:	e8 17 41 00 00       	call   27088 <panic>
   22f71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    while (lSectorsLeft)
   22f74:	e9 17 01 00 00       	jmp    23090 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:401
    {
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
   22f79:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   22f7e:	8b 80 69 02 00 00    	mov    eax,DWORD PTR [eax+0x269]
   22f84:	0f b7 c0             	movzx  eax,ax
   22f87:	83 ec 04             	sub    esp,0x4
   22f8a:	68 00 01 00 00       	push   0x100
   22f8f:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   22f92:	50                   	push   eax
   22f93:	e8 5f ee ff ff       	call   21df7 <insw>
   22f98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:403
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   22f9b:	a1 78 48 12 00       	mov    eax,ds:0x124878
   22fa0:	83 e0 08             	and    eax,0x8
   22fa3:	85 c0                	test   eax,eax
   22fa5:	74 52                	je     22ff9 <ataBlockingRead28+0x255>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:405
            {
                printk("ataBlockingRead28: Debugging: ");
   22fa7:	83 ec 0c             	sub    esp,0xc
   22faa:	68 80 40 08 00       	push   0x84080
   22faf:	e8 53 45 00 00       	call   27507 <printk>
   22fb4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406
                for (int cnt2=0;cnt2<20;cnt2++)
   22fb7:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   22fbe:	eb 23                	jmp    22fe3 <ataBlockingRead28+0x23f>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:407 (discriminator 3)
                    printk("%02X ", bufp[cnt2]);
   22fc0:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   22fc3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   22fc6:	01 d0                	add    eax,edx
   22fc8:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   22fcb:	0f b6 c0             	movzx  eax,al
   22fce:	83 ec 08             	sub    esp,0x8
   22fd1:	50                   	push   eax
   22fd2:	68 9f 40 08 00       	push   0x8409f
   22fd7:	e8 2b 45 00 00       	call   27507 <printk>
   22fdc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 3)
        insw(atablockingReadDev->ioPort+ATA_PORT_DATA, bufp, 256);
        #ifndef DEBUG_NONE
            if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            {
                printk("ataBlockingRead28: Debugging: ");
                for (int cnt2=0;cnt2<20;cnt2++)
   22fdf:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:406 (discriminator 1)
   22fe3:	83 7d e8 13          	cmp    DWORD PTR [ebp-0x18],0x13
   22fe7:	7e d7                	jle    22fc0 <ataBlockingRead28+0x21c>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:408
                    printk("%02X ", bufp[cnt2]);
                printk("\n");
   22fe9:	83 ec 0c             	sub    esp,0xc
   22fec:	68 a5 40 08 00       	push   0x840a5
   22ff1:	e8 11 45 00 00       	call   27507 <printk>
   22ff6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:411
            }
        #endif
        if (--lSectorsLeft>0) //zero based vs 1 based
   22ff9:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
   22ffd:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   23001:	0f 84 89 00 00 00    	je     23090 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:413
        {
            wait(50);
   23007:	83 ec 0c             	sub    esp,0xc
   2300a:	6a 32                	push   0x32
   2300c:	e8 35 57 00 00       	call   28746 <wait>
   23011:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:414
            lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
   23014:	8b 15 c4 47 12 00    	mov    edx,DWORD PTR ds:0x1247c4
   2301a:	89 d0                	mov    eax,edx
   2301c:	c1 e0 02             	shl    eax,0x2
   2301f:	01 d0                	add    eax,edx
   23021:	01 c0                	add    eax,eax
   23023:	89 c2                	mov    edx,eax
   23025:	a1 a0 8f 09 00       	mov    eax,ds:0x98fa0
   2302a:	83 ec 04             	sub    esp,0x4
   2302d:	52                   	push   edx
   2302e:	6a 01                	push   0x1
   23030:	50                   	push   eax
   23031:	e8 f6 ed ff ff       	call   21e2c <ataWaitForDRQ>
   23036:	83 c4 10             	add    esp,0x10
   23039:	0f b6 c0             	movzx  eax,al
   2303c:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:415
            bufp+=512;
   2303f:	81 45 f4 00 02 00 00 	add    DWORD PTR [ebp-0xc],0x200
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:416
            lSector++;
   23046:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:417
            if (lResult)
   2304a:	83 7d e4 00          	cmp    DWORD PTR [ebp-0x1c],0x0
   2304e:	74 19                	je     23069 <ataBlockingRead28+0x2c5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:418
                panic("ataBlockingRead28: Timeout in read loop, waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
   23050:	a1 dc a5 09 00       	mov    eax,ds:0x9a5dc
   23055:	83 ec 04             	sub    esp,0x4
   23058:	50                   	push   eax
   23059:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   2305c:	68 a8 40 08 00       	push   0x840a8
   23061:	e8 22 40 00 00       	call   27088 <panic>
   23066:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:420
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
   23069:	a1 78 48 12 00       	mov    eax,ds:0x124878
   2306e:	83 e0 08             	and    eax,0x8
   23071:	85 c0                	test   eax,eax
   23073:	74 1b                	je     23090 <ataBlockingRead28+0x2ec>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:422
        {
            printk("ataBlockingRead28: sec=0x%08X, buf=0x%08X, rep=0x%08X    \n", lSector, bufp, lSectorsLeft);
   23075:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   23078:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2307b:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   2307e:	68 04 41 08 00       	push   0x84104
   23083:	e8 7f 44 00 00       	call   27507 <printk>
   23088:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:423
            waitForKeyboardKey();
   2308b:	e8 98 e1 fe ff       	call   11228 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:399
    outb(atablockingReadDev->ioPort+ATA_PORT_CYLINDER_HIGH, (lSector >> 16) & 0xFF);
    outb(atablockingReadDev->ioPort+ATA_PORT_COMMAND, ATA_COMMAND_READ_SECTOR);
    lResult=ataWaitForDRQ(atablockingReadDev, true, ATA_STANDARD_WAIT_MS*kTicksPerMS);
    if (lResult)
        panic("ataBlockingRead28: Timeout waiting for DRQ to be set Stts=0x%02X, Err=0x%02X", lResult, hdError);
    while (lSectorsLeft)
   23090:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   23094:	0f 85 df fe ff ff    	jne    22f79 <ataBlockingRead28+0x1d5>
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:428
            waitForKeyboardKey();
        }
#endif
        }
    }
    return 512*sector_count;
   2309a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2309d:	c1 e0 09             	shl    eax,0x9
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:429
}
   230a0:	c9                   	leave  
   230a1:	c3                   	ret    

000230a2 <ataBlockingWrite28>:
ataBlockingWrite28():
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:432

int ataBlockingWrite28(/*unsigned drive, */uint32_t sector, uint8_t *buffer, uint32_t sector_count)
{
   230a2:	55                   	push   ebp
   230a3:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/ata_disk.c:468
#ifndef DEBUG_NONE
        if ((kDebugLevel & DEBUG_HARDDRIVE) == DEBUG_HARDDRIVE)
            printk("ataBlockingWrite28: Finished sending data\n");
#endif
    return 512;
*/}
   230a5:	90                   	nop
   230a6:	5d                   	pop    ebp
   230a7:	c3                   	ret    

000230a8 <__get_cpuid_max>:
__get_cpuid_max():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:179
   pointer is non-null, then first four bytes of the signature
   (as found in ebx register) are returned in location pointed by sig.  */

static __inline unsigned int
__get_cpuid_max (unsigned int __ext, unsigned int *__sig)
{
   230a8:	55                   	push   ebp
   230a9:	89 e5                	mov    ebp,esp
   230ab:	53                   	push   ebx
   230ac:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:185
  unsigned int __eax, __ebx, __ecx, __edx;

#ifndef __x86_64__
  /* See if we can use cpuid.  On AMD64 we always can.  */
#if __GNUC__ >= 3
  __asm__ ("pushf{l|d}\n\t"
   230af:	9c                   	pushf  
   230b0:	9c                   	pushf  
   230b1:	5a                   	pop    edx
   230b2:	89 d0                	mov    eax,edx
   230b4:	81 f2 00 00 20 00    	xor    edx,0x200000
   230ba:	52                   	push   edx
   230bb:	9d                   	popf   
   230bc:	9c                   	pushf  
   230bd:	5a                   	pop    edx
   230be:	9d                   	popf   
   230bf:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   230c2:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:214
	   "popfl\n\t"
	   : "=&r" (__eax), "=&r" (__ebx)
	   : "i" (0x00200000));
#endif

  if (!((__eax ^ __ebx) & 0x00200000))
   230c5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   230c8:	33 45 f4             	xor    eax,DWORD PTR [ebp-0xc]
   230cb:	25 00 00 20 00       	and    eax,0x200000
   230d0:	85 c0                	test   eax,eax
   230d2:	75 07                	jne    230db <__get_cpuid_max+0x33>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:215
    return 0;
   230d4:	b8 00 00 00 00       	mov    eax,0x0
   230d9:	eb 22                	jmp    230fd <__get_cpuid_max+0x55>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:219
#endif

  /* Host supports cpuid.  Return highest supported cpuid input value.  */
  __cpuid (__ext, __eax, __ebx, __ecx, __edx);
   230db:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   230de:	0f a2                	cpuid  
   230e0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
   230e3:	89 5d f4             	mov    DWORD PTR [ebp-0xc],ebx
   230e6:	89 4d f0             	mov    DWORD PTR [ebp-0x10],ecx
   230e9:	89 55 ec             	mov    DWORD PTR [ebp-0x14],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:221

  if (__sig)
   230ec:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   230f0:	74 08                	je     230fa <__get_cpuid_max+0x52>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:222
    *__sig = __ebx;
   230f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   230f5:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   230f8:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:224

  return __eax;
   230fa:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:225
}
   230fd:	83 c4 10             	add    esp,0x10
   23100:	5b                   	pop    ebx
   23101:	5d                   	pop    ebp
   23102:	c3                   	ret    

00023103 <__get_cpuid>:
__get_cpuid():
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:236

static __inline int
__get_cpuid (unsigned int __level,
	     unsigned int *__eax, unsigned int *__ebx,
	     unsigned int *__ecx, unsigned int *__edx)
{
   23103:	55                   	push   ebp
   23104:	89 e5                	mov    ebp,esp
   23106:	56                   	push   esi
   23107:	53                   	push   ebx
   23108:	83 ec 10             	sub    esp,0x10
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:237
  unsigned int __ext = __level & 0x80000000;
   2310b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2310e:	25 00 00 00 80       	and    eax,0x80000000
   23113:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:239

  if (__get_cpuid_max (__ext, 0) < __level)
   23116:	6a 00                	push   0x0
   23118:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2311b:	e8 88 ff ff ff       	call   230a8 <__get_cpuid_max>
   23120:	83 c4 08             	add    esp,0x8
   23123:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   23126:	73 07                	jae    2312f <__get_cpuid+0x2c>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:240
    return 0;
   23128:	b8 00 00 00 00       	mov    eax,0x0
   2312d:	eb 1e                	jmp    2314d <__get_cpuid+0x4a>
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:242

  __cpuid (__level, *__eax, *__ebx, *__ecx, *__edx);
   2312f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23132:	0f a2                	cpuid  
   23134:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
   23137:	89 06                	mov    DWORD PTR [esi],eax
   23139:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2313c:	89 18                	mov    DWORD PTR [eax],ebx
   2313e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   23141:	89 08                	mov    DWORD PTR [eax],ecx
   23143:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23146:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:243
  return 1;
   23148:	b8 01 00 00 00       	mov    eax,0x1
/home/yogi/opt/cross/lib/gcc/i686-pc-linux-gnu/5.3.0/include/cpuid.h:244
}
   2314d:	8d 65 f8             	lea    esp,[ebp-0x8]
   23150:	5b                   	pop    ebx
   23151:	5e                   	pop    esi
   23152:	5d                   	pop    ebp
   23153:	c3                   	ret    

00023154 <detect_cpu>:
detect_cpu():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:45
void printregs(int eax, int ebx, int ecx, int edx);
extern struct cpuinfo_t kcpuInfo;


/* Simply call this function detect_cpu(); */
int HIGH_CODE_SECTION detect_cpu(void) { /* or main() if your trying to port this as an independant application */
   23154:	55                   	push   ebp
   23155:	89 e5                	mov    ebp,esp
   23157:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:47
	unsigned int ebx, unused;
        __get_cpuid(0, &unused, &ebx, &unused, &unused);
   2315a:	8d 45 f0             	lea    eax,[ebp-0x10]
   2315d:	50                   	push   eax
   2315e:	8d 45 f0             	lea    eax,[ebp-0x10]
   23161:	50                   	push   eax
   23162:	8d 45 f4             	lea    eax,[ebp-0xc]
   23165:	50                   	push   eax
   23166:	8d 45 f0             	lea    eax,[ebp-0x10]
   23169:	50                   	push   eax
   2316a:	6a 00                	push   0x0
   2316c:	e8 92 ff ff ff       	call   23103 <__get_cpuid>
   23171:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:48
	switch(ebx) {
   23174:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23177:	3d 41 75 74 68       	cmp    eax,0x68747541
   2317c:	74 0e                	je     2318c <detect_cpu+0x38>
   2317e:	3d 47 65 6e 75       	cmp    eax,0x756e6547
   23183:	75 0e                	jne    23193 <detect_cpu+0x3f>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:50
		case 0x756e6547: /* Intel Magic Code */
		do_intel();
   23185:	e8 2a 00 00 00       	call   231b4 <do_intel>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:51
		break;
   2318a:	eb 21                	jmp    231ad <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:53
		case 0x68747541: /* AMD Magic Code */
		do_amd();
   2318c:	e8 27 06 00 00       	call   237b8 <do_amd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:54
		break;
   23191:	eb 1a                	jmp    231ad <detect_cpu+0x59>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:56
		default:
		printk("Unknown x86 CPU Detected\n");
   23193:	83 ec 0c             	sub    esp,0xc
   23196:	68 40 41 08 00       	push   0x84140
   2319b:	e8 67 43 00 00       	call   27507 <printk>
   231a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:57
                __asm__("pushf\n pop eax\n and eax,0xFFDFFFFF\n push eax\n popf\n");
   231a3:	9c                   	pushf  
   231a4:	58                   	pop    eax
   231a5:	25 ff ff df ff       	and    eax,0xffdfffff
   231aa:	50                   	push   eax
   231ab:	9d                   	popf   
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:58
		break;
   231ac:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:60
	}
	return 0;
   231ad:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:61
}
   231b2:	c9                   	leave  
   231b3:	c3                   	ret    

000231b4 <do_intel>:
do_intel():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:120
	"Reserved", 
	"Reserved"
};

/* Intel-specific information */
int HIGH_CODE_SECTION do_intel(void) {
   231b4:	55                   	push   ebp
   231b5:	89 e5                	mov    ebp,esp
   231b7:	53                   	push   ebx
   231b8:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:121
	unsigned int eax=0, ebx=0, ecx=0, edx=0, max_eax=0, signature, unused;
   231bb:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   231c2:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   231c9:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   231d0:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   231d7:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:122
	sprintf(kcpuInfo.vendor,"Intel");
   231de:	83 ec 08             	sub    esp,0x8
   231e1:	68 97 43 08 00       	push   0x84397
   231e6:	68 b8 45 12 00       	push   0x1245b8
   231eb:	e8 6b 43 00 00       	call   2755b <sprintf>
   231f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:123
        __get_cpuid(1, &eax, &ebx, &unused, &unused);
   231f3:	83 ec 0c             	sub    esp,0xc
   231f6:	8d 45 dc             	lea    eax,[ebp-0x24]
   231f9:	50                   	push   eax
   231fa:	8d 45 dc             	lea    eax,[ebp-0x24]
   231fd:	50                   	push   eax
   231fe:	8d 45 ec             	lea    eax,[ebp-0x14]
   23201:	50                   	push   eax
   23202:	8d 45 f0             	lea    eax,[ebp-0x10]
   23205:	50                   	push   eax
   23206:	6a 01                	push   0x1
   23208:	e8 f6 fe ff ff       	call   23103 <__get_cpuid>
   2320d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:124
	kcpuInfo.model = (eax >> 4) & 0xf;
   23210:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23213:	c1 e8 04             	shr    eax,0x4
   23216:	83 e0 0f             	and    eax,0xf
   23219:	a3 a4 45 12 00       	mov    ds:0x1245a4,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:125
	kcpuInfo.family = (eax >> 8) & 0xf;
   2321e:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23221:	c1 e8 08             	shr    eax,0x8
   23224:	83 e0 0f             	and    eax,0xf
   23227:	a3 a0 45 12 00       	mov    ds:0x1245a0,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:126
	kcpuInfo.type = (eax >> 12) & 0x3;
   2322c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2322f:	c1 e8 0c             	shr    eax,0xc
   23232:	83 e0 03             	and    eax,0x3
   23235:	a3 ac 45 12 00       	mov    ds:0x1245ac,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:127
	kcpuInfo.brand = ebx & 0xff;
   2323a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2323d:	0f b6 c0             	movzx  eax,al
   23240:	a3 b0 45 12 00       	mov    ds:0x1245b0,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:128
	kcpuInfo.stepping = eax & 0xf;
   23245:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23248:	83 e0 0f             	and    eax,0xf
   2324b:	a3 a8 45 12 00       	mov    ds:0x1245a8,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:129
	signature = eax;
   23250:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23253:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:130
	switch(kcpuInfo.type) {
   23256:	a1 ac 45 12 00       	mov    eax,ds:0x1245ac
   2325b:	83 f8 01             	cmp    eax,0x1
   2325e:	74 2e                	je     2328e <do_intel+0xda>
   23260:	83 f8 01             	cmp    eax,0x1
   23263:	7f 06                	jg     2326b <do_intel+0xb7>
   23265:	85 c0                	test   eax,eax
   23267:	74 0e                	je     23277 <do_intel+0xc3>
   23269:	eb 67                	jmp    232d2 <do_intel+0x11e>
   2326b:	83 f8 02             	cmp    eax,0x2
   2326e:	74 35                	je     232a5 <do_intel+0xf1>
   23270:	83 f8 03             	cmp    eax,0x3
   23273:	74 47                	je     232bc <do_intel+0x108>
   23275:	eb 5b                	jmp    232d2 <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:132
		case 0:
		sprintf(kcpuInfo.type_name,"Original OEM");
   23277:	83 ec 08             	sub    esp,0x8
   2327a:	68 9d 43 08 00       	push   0x8439d
   2327f:	68 4e 46 12 00       	push   0x12464e
   23284:	e8 d2 42 00 00       	call   2755b <sprintf>
   23289:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:133
		break;
   2328c:	eb 44                	jmp    232d2 <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:135
		case 1:
		sprintf(kcpuInfo.type_name,"Overdrive");
   2328e:	83 ec 08             	sub    esp,0x8
   23291:	68 aa 43 08 00       	push   0x843aa
   23296:	68 4e 46 12 00       	push   0x12464e
   2329b:	e8 bb 42 00 00       	call   2755b <sprintf>
   232a0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:136
		break;
   232a3:	eb 2d                	jmp    232d2 <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:138
		case 2:
		sprintf(kcpuInfo.type_name,"Dual-capable");
   232a5:	83 ec 08             	sub    esp,0x8
   232a8:	68 b4 43 08 00       	push   0x843b4
   232ad:	68 4e 46 12 00       	push   0x12464e
   232b2:	e8 a4 42 00 00       	call   2755b <sprintf>
   232b7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:139
		break;
   232ba:	eb 16                	jmp    232d2 <do_intel+0x11e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:141
		case 3:
		sprintf(kcpuInfo.type_name,"Reserved");
   232bc:	83 ec 08             	sub    esp,0x8
   232bf:	68 de 41 08 00       	push   0x841de
   232c4:	68 4e 46 12 00       	push   0x12464e
   232c9:	e8 8d 42 00 00       	call   2755b <sprintf>
   232ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:142
		break;
   232d1:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:144
	}
	switch(kcpuInfo.family) {
   232d2:	a1 a0 45 12 00       	mov    eax,ds:0x1245a0
   232d7:	83 e8 03             	sub    eax,0x3
   232da:	83 f8 0c             	cmp    eax,0xc
   232dd:	77 7a                	ja     23359 <do_intel+0x1a5>
   232df:	8b 04 85 ec 44 08 00 	mov    eax,DWORD PTR [eax*4+0x844ec]
   232e6:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:146
		case 3:
		sprintf(kcpuInfo.family_name,"i386");
   232e8:	83 ec 08             	sub    esp,0x8
   232eb:	68 c1 43 08 00       	push   0x843c1
   232f0:	68 80 46 12 00       	push   0x124680
   232f5:	e8 61 42 00 00       	call   2755b <sprintf>
   232fa:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:147
		break;
   232fd:	eb 5a                	jmp    23359 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:149
		case 4:
		sprintf(kcpuInfo.family_name,"i486");
   232ff:	83 ec 08             	sub    esp,0x8
   23302:	68 c6 43 08 00       	push   0x843c6
   23307:	68 80 46 12 00       	push   0x124680
   2330c:	e8 4a 42 00 00       	call   2755b <sprintf>
   23311:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:150
		break;
   23314:	eb 43                	jmp    23359 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:152
		case 5:
		sprintf(kcpuInfo.family_name,"Pentium");
   23316:	83 ec 08             	sub    esp,0x8
   23319:	68 cb 43 08 00       	push   0x843cb
   2331e:	68 80 46 12 00       	push   0x124680
   23323:	e8 33 42 00 00       	call   2755b <sprintf>
   23328:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:153
		break;
   2332b:	eb 2c                	jmp    23359 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:155
		case 6:
		sprintf(kcpuInfo.family_name,"Pentium Pro");
   2332d:	83 ec 08             	sub    esp,0x8
   23330:	68 d3 43 08 00       	push   0x843d3
   23335:	68 80 46 12 00       	push   0x124680
   2333a:	e8 1c 42 00 00       	call   2755b <sprintf>
   2333f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:156
		break;
   23342:	eb 15                	jmp    23359 <do_intel+0x1a5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:158
		case 15:
		sprintf(kcpuInfo.family_name,"Pentium 4");
   23344:	83 ec 08             	sub    esp,0x8
   23347:	68 df 43 08 00       	push   0x843df
   2334c:	68 80 46 12 00       	push   0x124680
   23351:	e8 05 42 00 00       	call   2755b <sprintf>
   23356:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:160
	}
	if(kcpuInfo.family == 15) {
   23359:	a1 a0 45 12 00       	mov    eax,ds:0x1245a0
   2335e:	83 f8 0f             	cmp    eax,0xf
   23361:	75 0e                	jne    23371 <do_intel+0x1bd>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:161
		kcpuInfo.extended_family = (eax >> 20) & 0xff;
   23363:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23366:	c1 e8 14             	shr    eax,0x14
   23369:	0f b6 c0             	movzx  eax,al
   2336c:	a3 b4 45 12 00       	mov    ds:0x1245b4,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:163
	}
	switch(kcpuInfo.family) {
   23371:	a1 a0 45 12 00       	mov    eax,ds:0x1245a0
   23376:	83 e8 03             	sub    eax,0x3
   23379:	83 f8 0c             	cmp    eax,0xc
   2337c:	0f 87 f6 01 00 00    	ja     23578 <do_intel+0x3c4>
   23382:	8b 04 85 20 45 08 00 	mov    eax,DWORD PTR [eax*4+0x84520]
   23389:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:167
		case 3:
		break;
		case 4:
		switch(kcpuInfo.model) {
   2338b:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   23390:	83 f8 08             	cmp    eax,0x8
   23393:	0f 87 db 01 00 00    	ja     23574 <do_intel+0x3c0>
   23399:	8b 04 85 54 45 08 00 	mov    eax,DWORD PTR [eax*4+0x84554]
   233a0:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:170
			case 0:
			case 1:
			sprintf(kcpuInfo.model_name,"DX");
   233a2:	83 ec 08             	sub    esp,0x8
   233a5:	68 e9 43 08 00       	push   0x843e9
   233aa:	68 ea 45 12 00       	push   0x1245ea
   233af:	e8 a7 41 00 00       	call   2755b <sprintf>
   233b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:171
			break;
   233b7:	e9 89 00 00 00       	jmp    23445 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:173
			case 2:
			sprintf(kcpuInfo.model_name,"SX");
   233bc:	83 ec 08             	sub    esp,0x8
   233bf:	68 ec 43 08 00       	push   0x843ec
   233c4:	68 ea 45 12 00       	push   0x1245ea
   233c9:	e8 8d 41 00 00       	call   2755b <sprintf>
   233ce:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:174
			break;
   233d1:	eb 72                	jmp    23445 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:176
			case 3:
			sprintf(kcpuInfo.model_name,"487/DX2");
   233d3:	83 ec 08             	sub    esp,0x8
   233d6:	68 ef 43 08 00       	push   0x843ef
   233db:	68 ea 45 12 00       	push   0x1245ea
   233e0:	e8 76 41 00 00       	call   2755b <sprintf>
   233e5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:177
			break;
   233e8:	eb 5b                	jmp    23445 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:179
			case 4:
			sprintf(kcpuInfo.model_name,"SL");
   233ea:	83 ec 08             	sub    esp,0x8
   233ed:	68 f7 43 08 00       	push   0x843f7
   233f2:	68 ea 45 12 00       	push   0x1245ea
   233f7:	e8 5f 41 00 00       	call   2755b <sprintf>
   233fc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:180
			break;
   233ff:	eb 44                	jmp    23445 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:182
			case 5:
			sprintf(kcpuInfo.model_name,"SX2");
   23401:	83 ec 08             	sub    esp,0x8
   23404:	68 fa 43 08 00       	push   0x843fa
   23409:	68 ea 45 12 00       	push   0x1245ea
   2340e:	e8 48 41 00 00       	call   2755b <sprintf>
   23413:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:183
			break;
   23416:	eb 2d                	jmp    23445 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:185
			case 7:
			sprintf(kcpuInfo.model_name,"Write-back enhanced DX2");
   23418:	83 ec 08             	sub    esp,0x8
   2341b:	68 fe 43 08 00       	push   0x843fe
   23420:	68 ea 45 12 00       	push   0x1245ea
   23425:	e8 31 41 00 00       	call   2755b <sprintf>
   2342a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:186
			break;
   2342d:	eb 16                	jmp    23445 <do_intel+0x291>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:188
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
   2342f:	83 ec 08             	sub    esp,0x8
   23432:	68 16 44 08 00       	push   0x84416
   23437:	68 ea 45 12 00       	push   0x1245ea
   2343c:	e8 1a 41 00 00       	call   2755b <sprintf>
   23441:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:189
			break;
   23444:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
		}
		break;
   23445:	e9 2a 01 00 00       	jmp    23574 <do_intel+0x3c0>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
		case 5:
		switch(kcpuInfo.model) {
   2344a:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   2344f:	83 f8 02             	cmp    eax,0x2
   23452:	74 35                	je     23489 <do_intel+0x2d5>
   23454:	83 f8 02             	cmp    eax,0x2
   23457:	7f 0a                	jg     23463 <do_intel+0x2af>
   23459:	83 f8 01             	cmp    eax,0x1
   2345c:	74 14                	je     23472 <do_intel+0x2be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   2345e:	e9 15 01 00 00       	jmp    23578 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:193
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
   23463:	83 f8 03             	cmp    eax,0x3
   23466:	74 38                	je     234a0 <do_intel+0x2ec>
   23468:	83 f8 04             	cmp    eax,0x4
   2346b:	74 4a                	je     234b7 <do_intel+0x303>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
			break;
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
			break;
		}
		break;
   2346d:	e9 06 01 00 00       	jmp    23578 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:195
		}
		break;
		case 5:
		switch(kcpuInfo.model) {
			case 1:
			sprintf(kcpuInfo.model_name,"60/66");
   23472:	83 ec 08             	sub    esp,0x8
   23475:	68 1a 44 08 00       	push   0x8441a
   2347a:	68 ea 45 12 00       	push   0x1245ea
   2347f:	e8 d7 40 00 00       	call   2755b <sprintf>
   23484:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:196
			break;
   23487:	eb 44                	jmp    234cd <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:198
			case 2:
			sprintf(kcpuInfo.model_name,"75-200");
   23489:	83 ec 08             	sub    esp,0x8
   2348c:	68 20 44 08 00       	push   0x84420
   23491:	68 ea 45 12 00       	push   0x1245ea
   23496:	e8 c0 40 00 00       	call   2755b <sprintf>
   2349b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:199
			break;
   2349e:	eb 2d                	jmp    234cd <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:201
			case 3:
			sprintf(kcpuInfo.model_name,"for 486 system");
   234a0:	83 ec 08             	sub    esp,0x8
   234a3:	68 27 44 08 00       	push   0x84427
   234a8:	68 ea 45 12 00       	push   0x1245ea
   234ad:	e8 a9 40 00 00       	call   2755b <sprintf>
   234b2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:202
			break;
   234b5:	eb 16                	jmp    234cd <do_intel+0x319>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:204
			case 4:
			sprintf(kcpuInfo.model_name,"MMX");
   234b7:	83 ec 08             	sub    esp,0x8
   234ba:	68 36 44 08 00       	push   0x84436
   234bf:	68 ea 45 12 00       	push   0x1245ea
   234c4:	e8 92 40 00 00       	call   2755b <sprintf>
   234c9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:205
			break;
   234cc:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:207
		}
		break;
   234cd:	e9 a6 00 00 00       	jmp    23578 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:209
		case 6:
		switch(kcpuInfo.model) {
   234d2:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   234d7:	83 f8 08             	cmp    eax,0x8
   234da:	0f 87 97 00 00 00    	ja     23577 <do_intel+0x3c3>
   234e0:	8b 04 85 78 45 08 00 	mov    eax,DWORD PTR [eax*4+0x84578]
   234e7:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:211
			case 1:
			sprintf(kcpuInfo.model_name,"Pentium Pro");
   234e9:	83 ec 08             	sub    esp,0x8
   234ec:	68 d3 43 08 00       	push   0x843d3
   234f1:	68 ea 45 12 00       	push   0x1245ea
   234f6:	e8 60 40 00 00       	call   2755b <sprintf>
   234fb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:212
			break;
   234fe:	eb 72                	jmp    23572 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:214
			case 3:
			sprintf(kcpuInfo.model_name,"Pentium II Model 3");
   23500:	83 ec 08             	sub    esp,0x8
   23503:	68 3a 44 08 00       	push   0x8443a
   23508:	68 ea 45 12 00       	push   0x1245ea
   2350d:	e8 49 40 00 00       	call   2755b <sprintf>
   23512:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:215
			break;
   23515:	eb 5b                	jmp    23572 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:217
			case 5:
			sprintf(kcpuInfo.model_name,"Pentium II Model 5/Xeon/Celeron");
   23517:	83 ec 08             	sub    esp,0x8
   2351a:	68 50 44 08 00       	push   0x84450
   2351f:	68 ea 45 12 00       	push   0x1245ea
   23524:	e8 32 40 00 00       	call   2755b <sprintf>
   23529:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:218
			break;
   2352c:	eb 44                	jmp    23572 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:220
			case 6:
			sprintf(kcpuInfo.model_name,"Celeron");
   2352e:	83 ec 08             	sub    esp,0x8
   23531:	68 70 44 08 00       	push   0x84470
   23536:	68 ea 45 12 00       	push   0x1245ea
   2353b:	e8 1b 40 00 00       	call   2755b <sprintf>
   23540:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:221
			break;
   23543:	eb 2d                	jmp    23572 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:223
			case 7:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - external L2 cache");
   23545:	83 ec 08             	sub    esp,0x8
   23548:	68 78 44 08 00       	push   0x84478
   2354d:	68 ea 45 12 00       	push   0x1245ea
   23552:	e8 04 40 00 00       	call   2755b <sprintf>
   23557:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:224
			break;
   2355a:	eb 16                	jmp    23572 <do_intel+0x3be>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:226
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
   2355c:	83 ec 08             	sub    esp,0x8
   2355f:	68 ac 44 08 00       	push   0x844ac
   23564:	68 ea 45 12 00       	push   0x1245ea
   23569:	e8 ed 3f 00 00       	call   2755b <sprintf>
   2356e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:227
			break;
   23571:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
		}
		break;
   23572:	eb 03                	jmp    23577 <do_intel+0x3c3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:191
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"DX4");
			break;
		}
		break;
   23574:	90                   	nop
   23575:	eb 01                	jmp    23578 <do_intel+0x3c4>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:229
			break;
			case 8:
			sprintf(kcpuInfo.model_name,"Pentium III/Pentium III Xeon - internal L2 cache");
			break;
		}
		break;
   23577:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:233
		case 15:
		break;
	}
	__get_cpuid(0x80000000, &max_eax, &unused, &unused, &unused);
   23578:	83 ec 0c             	sub    esp,0xc
   2357b:	8d 45 dc             	lea    eax,[ebp-0x24]
   2357e:	50                   	push   eax
   2357f:	8d 45 dc             	lea    eax,[ebp-0x24]
   23582:	50                   	push   eax
   23583:	8d 45 dc             	lea    eax,[ebp-0x24]
   23586:	50                   	push   eax
   23587:	8d 45 e0             	lea    eax,[ebp-0x20]
   2358a:	50                   	push   eax
   2358b:	68 00 00 00 80       	push   0x80000000
   23590:	e8 6e fb ff ff       	call   23103 <__get_cpuid>
   23595:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:239
	/* Quok said: If the max extended eax value is high enough to support the processor brand string
	(values 0x80000002 to 0x80000004), then we'll use that information to return the brand information. 
	Otherwise, we'll refer back to the brand tables above for backwards compatibility with older processors. 
	According to the Sept. 2006 Intel Arch Software Developer's Guide, if extended eax values are supported, 
	then all 3 values for the processor brand string are supported, but we'll test just to make sure and be safe. */
	if(max_eax >= 0x80000004) {
   23598:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   2359b:	3d 03 00 00 80       	cmp    eax,0x80000003
   235a0:	0f 86 e1 00 00 00    	jbe    23687 <do_intel+0x4d3>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:240
		if(max_eax >= 0x80000002) {
   235a6:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   235a9:	3d 01 00 00 80       	cmp    eax,0x80000001
   235ae:	76 3e                	jbe    235ee <do_intel+0x43a>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:241
			__get_cpuid(0x80000002, &eax, &ebx, &ecx, &edx);
   235b0:	83 ec 0c             	sub    esp,0xc
   235b3:	8d 45 e4             	lea    eax,[ebp-0x1c]
   235b6:	50                   	push   eax
   235b7:	8d 45 e8             	lea    eax,[ebp-0x18]
   235ba:	50                   	push   eax
   235bb:	8d 45 ec             	lea    eax,[ebp-0x14]
   235be:	50                   	push   eax
   235bf:	8d 45 f0             	lea    eax,[ebp-0x10]
   235c2:	50                   	push   eax
   235c3:	68 02 00 00 80       	push   0x80000002
   235c8:	e8 36 fb ff ff       	call   23103 <__get_cpuid>
   235cd:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:242
			printregs(eax, ebx, ecx, edx);
   235d0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   235d3:	89 c3                	mov    ebx,eax
   235d5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   235d8:	89 c1                	mov    ecx,eax
   235da:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   235dd:	89 c2                	mov    edx,eax
   235df:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   235e2:	53                   	push   ebx
   235e3:	51                   	push   ecx
   235e4:	52                   	push   edx
   235e5:	50                   	push   eax
   235e6:	e8 28 01 00 00       	call   23713 <printregs>
   235eb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:244
		}
		if(max_eax >= 0x80000003) {
   235ee:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   235f1:	3d 02 00 00 80       	cmp    eax,0x80000002
   235f6:	76 3e                	jbe    23636 <do_intel+0x482>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:245
			__get_cpuid(0x80000003, &eax, &ebx, &ecx, &edx);
   235f8:	83 ec 0c             	sub    esp,0xc
   235fb:	8d 45 e4             	lea    eax,[ebp-0x1c]
   235fe:	50                   	push   eax
   235ff:	8d 45 e8             	lea    eax,[ebp-0x18]
   23602:	50                   	push   eax
   23603:	8d 45 ec             	lea    eax,[ebp-0x14]
   23606:	50                   	push   eax
   23607:	8d 45 f0             	lea    eax,[ebp-0x10]
   2360a:	50                   	push   eax
   2360b:	68 03 00 00 80       	push   0x80000003
   23610:	e8 ee fa ff ff       	call   23103 <__get_cpuid>
   23615:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:246
			printregs(eax, ebx, ecx, edx);
   23618:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2361b:	89 c3                	mov    ebx,eax
   2361d:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23620:	89 c1                	mov    ecx,eax
   23622:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23625:	89 c2                	mov    edx,eax
   23627:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2362a:	53                   	push   ebx
   2362b:	51                   	push   ecx
   2362c:	52                   	push   edx
   2362d:	50                   	push   eax
   2362e:	e8 e0 00 00 00       	call   23713 <printregs>
   23633:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:248
		}
		if(max_eax >= 0x80000004) {
   23636:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23639:	3d 03 00 00 80       	cmp    eax,0x80000003
   2363e:	0f 86 c5 00 00 00    	jbe    23709 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:249
			__get_cpuid(0x80000004, &eax, &ebx, &ecx, &edx);
   23644:	83 ec 0c             	sub    esp,0xc
   23647:	8d 45 e4             	lea    eax,[ebp-0x1c]
   2364a:	50                   	push   eax
   2364b:	8d 45 e8             	lea    eax,[ebp-0x18]
   2364e:	50                   	push   eax
   2364f:	8d 45 ec             	lea    eax,[ebp-0x14]
   23652:	50                   	push   eax
   23653:	8d 45 f0             	lea    eax,[ebp-0x10]
   23656:	50                   	push   eax
   23657:	68 04 00 00 80       	push   0x80000004
   2365c:	e8 a2 fa ff ff       	call   23103 <__get_cpuid>
   23661:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:250
			printregs(eax, ebx, ecx, edx);
   23664:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   23667:	89 c3                	mov    ebx,eax
   23669:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2366c:	89 c1                	mov    ecx,eax
   2366e:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23671:	89 c2                	mov    edx,eax
   23673:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23676:	53                   	push   ebx
   23677:	51                   	push   ecx
   23678:	52                   	push   edx
   23679:	50                   	push   eax
   2367a:	e8 94 00 00 00       	call   23713 <printregs>
   2367f:	83 c4 10             	add    esp,0x10
   23682:	e9 82 00 00 00       	jmp    23709 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:252
		}
	} else if(kcpuInfo.brand > 0) {
   23687:	a1 b0 45 12 00       	mov    eax,ds:0x1245b0
   2368c:	85 c0                	test   eax,eax
   2368e:	7e 79                	jle    23709 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:253
		if(kcpuInfo.brand < 0x18) {
   23690:	a1 b0 45 12 00       	mov    eax,ds:0x1245b0
   23695:	83 f8 17             	cmp    eax,0x17
   23698:	7f 5a                	jg     236f4 <do_intel+0x540>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254
			if(signature == 0x000006B1 || signature == 0x00000F13) {
   2369a:	81 7d f4 b1 06 00 00 	cmp    DWORD PTR [ebp-0xc],0x6b1
   236a1:	74 09                	je     236ac <do_intel+0x4f8>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:254 (discriminator 1)
   236a3:	81 7d f4 13 0f 00 00 	cmp    DWORD PTR [ebp-0xc],0xf13
   236aa:	75 24                	jne    236d0 <do_intel+0x51c>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:255
				sprintf(kcpuInfo.brand_name,"%s\n", Intel_Other[kcpuInfo.brand]);
   236ac:	a1 b0 45 12 00       	mov    eax,ds:0x1245b0
   236b1:	8b 04 85 40 de 02 00 	mov    eax,DWORD PTR [eax*4+0x2de40]
   236b8:	83 ec 04             	sub    esp,0x4
   236bb:	50                   	push   eax
   236bc:	68 dd 44 08 00       	push   0x844dd
   236c1:	68 b2 46 12 00       	push   0x1246b2
   236c6:	e8 90 3e 00 00       	call   2755b <sprintf>
   236cb:	83 c4 10             	add    esp,0x10
   236ce:	eb 39                	jmp    23709 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:257
			} else {
				sprintf(kcpuInfo.brand_name, "%s\n", Intel[kcpuInfo.brand]);
   236d0:	a1 b0 45 12 00       	mov    eax,ds:0x1245b0
   236d5:	8b 04 85 e0 dd 02 00 	mov    eax,DWORD PTR [eax*4+0x2dde0]
   236dc:	83 ec 04             	sub    esp,0x4
   236df:	50                   	push   eax
   236e0:	68 dd 44 08 00       	push   0x844dd
   236e5:	68 b2 46 12 00       	push   0x1246b2
   236ea:	e8 6c 3e 00 00       	call   2755b <sprintf>
   236ef:	83 c4 10             	add    esp,0x10
   236f2:	eb 15                	jmp    23709 <do_intel+0x555>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:260
			}
		} else {
			sprintf(kcpuInfo.brand_name, "Reserved\n");
   236f4:	83 ec 08             	sub    esp,0x8
   236f7:	68 e1 44 08 00       	push   0x844e1
   236fc:	68 b2 46 12 00       	push   0x1246b2
   23701:	e8 55 3e 00 00       	call   2755b <sprintf>
   23706:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:263
		}
	}
	return 0;
   23709:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:264
}
   2370e:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23711:	c9                   	leave  
   23712:	c3                   	ret    

00023713 <printregs>:
printregs():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:267

/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
   23713:	55                   	push   ebp
   23714:	89 e5                	mov    ebp,esp
   23716:	53                   	push   ebx
   23717:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:270
	int j;
	char string[17];
	string[16] = '\0';
   2371a:	c6 45 f3 00          	mov    BYTE PTR [ebp-0xd],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271
	for(j = 0; j < 4; j++) {
   2371e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   23725:	eb 6a                	jmp    23791 <printregs+0x7e>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:272 (discriminator 3)
		string[j] = eax >> (8 * j);
   23727:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2372a:	c1 e0 03             	shl    eax,0x3
   2372d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23730:	89 c1                	mov    ecx,eax
   23732:	d3 fa                	sar    edx,cl
   23734:	89 d0                	mov    eax,edx
   23736:	89 c1                	mov    ecx,eax
   23738:	8d 55 e3             	lea    edx,[ebp-0x1d]
   2373b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2373e:	01 d0                	add    eax,edx
   23740:	88 08                	mov    BYTE PTR [eax],cl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:273 (discriminator 3)
		string[j + 4] = ebx >> (8 * j);
   23742:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23745:	83 c0 04             	add    eax,0x4
   23748:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2374b:	c1 e2 03             	shl    edx,0x3
   2374e:	8b 5d 0c             	mov    ebx,DWORD PTR [ebp+0xc]
   23751:	89 d1                	mov    ecx,edx
   23753:	d3 fb                	sar    ebx,cl
   23755:	89 da                	mov    edx,ebx
   23757:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:274 (discriminator 3)
		string[j + 8] = ecx >> (8 * j);
   2375b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2375e:	83 c0 08             	add    eax,0x8
   23761:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23764:	c1 e2 03             	shl    edx,0x3
   23767:	8b 5d 10             	mov    ebx,DWORD PTR [ebp+0x10]
   2376a:	89 d1                	mov    ecx,edx
   2376c:	d3 fb                	sar    ebx,cl
   2376e:	89 da                	mov    edx,ebx
   23770:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:275 (discriminator 3)
		string[j + 12] = edx >> (8 * j);
   23774:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23777:	83 c0 0c             	add    eax,0xc
   2377a:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2377d:	c1 e2 03             	shl    edx,0x3
   23780:	8b 5d 14             	mov    ebx,DWORD PTR [ebp+0x14]
   23783:	89 d1                	mov    ecx,edx
   23785:	d3 fb                	sar    ebx,cl
   23787:	89 da                	mov    edx,ebx
   23789:	88 54 05 e3          	mov    BYTE PTR [ebp+eax*1-0x1d],dl
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 3)
/* Print Registers */
void HIGH_CODE_SECTION printregs(int eax, int ebx, int ecx, int edx) {
	int j;
	char string[17];
	string[16] = '\0';
	for(j = 0; j < 4; j++) {
   2378d:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:271 (discriminator 1)
   23791:	83 7d f4 03          	cmp    DWORD PTR [ebp-0xc],0x3
   23795:	7e 90                	jle    23727 <printregs+0x14>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:277
		string[j] = eax >> (8 * j);
		string[j + 4] = ebx >> (8 * j);
		string[j + 8] = ecx >> (8 * j);
		string[j + 12] = edx >> (8 * j);
	}
	sprintf(kcpuInfo.brand_name, "%s%s", kcpuInfo.brand_name, string);
   23797:	8d 45 e3             	lea    eax,[ebp-0x1d]
   2379a:	50                   	push   eax
   2379b:	68 b2 46 12 00       	push   0x1246b2
   237a0:	68 9c 45 08 00       	push   0x8459c
   237a5:	68 b2 46 12 00       	push   0x1246b2
   237aa:	e8 ac 3d 00 00       	call   2755b <sprintf>
   237af:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:278
}
   237b2:	90                   	nop
   237b3:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   237b6:	c9                   	leave  
   237b7:	c3                   	ret    

000237b8 <do_amd>:
do_amd():
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:281

/* AMD-specific information */
int HIGH_CODE_SECTION do_amd(void) {
   237b8:	55                   	push   ebp
   237b9:	89 e5                	mov    ebp,esp
   237bb:	53                   	push   ebx
   237bc:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:283
	//printf("AMD Specific Features:\n");
	unsigned int extended=0, eax=0, ebx=0, ecx=0, edx=0, unused=0;
   237bf:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   237c6:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   237cd:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   237d4:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   237db:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   237e2:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:284
	__get_cpuid(1, &eax, &unused, &unused, &unused);
   237e9:	8d 45 dc             	lea    eax,[ebp-0x24]
   237ec:	50                   	push   eax
   237ed:	8d 45 dc             	lea    eax,[ebp-0x24]
   237f0:	50                   	push   eax
   237f1:	8d 45 dc             	lea    eax,[ebp-0x24]
   237f4:	50                   	push   eax
   237f5:	8d 45 ec             	lea    eax,[ebp-0x14]
   237f8:	50                   	push   eax
   237f9:	6a 01                	push   0x1
   237fb:	e8 03 f9 ff ff       	call   23103 <__get_cpuid>
   23800:	83 c4 14             	add    esp,0x14
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:285
	kcpuInfo.model = (eax >> 4) & 0xf;
   23803:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23806:	c1 e8 04             	shr    eax,0x4
   23809:	83 e0 0f             	and    eax,0xf
   2380c:	a3 a4 45 12 00       	mov    ds:0x1245a4,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:286
	kcpuInfo.family = (eax >> 8) & 0xf;
   23811:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23814:	c1 e8 08             	shr    eax,0x8
   23817:	83 e0 0f             	and    eax,0xf
   2381a:	a3 a0 45 12 00       	mov    ds:0x1245a0,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:287
	kcpuInfo.stepping = eax & 0xf;
   2381f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23822:	83 e0 0f             	and    eax,0xf
   23825:	a3 a8 45 12 00       	mov    ds:0x1245a8,eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:289
	//reserved = eax >> 12;
	sprintf(kcpuInfo.vendor, "AMD");
   2382a:	83 ec 08             	sub    esp,0x8
   2382d:	68 a1 45 08 00       	push   0x845a1
   23832:	68 b8 45 12 00       	push   0x1245b8
   23837:	e8 1f 3d 00 00       	call   2755b <sprintf>
   2383c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:290
	switch(kcpuInfo.family) 
   2383f:	a1 a0 45 12 00       	mov    eax,ds:0x1245a0
   23844:	83 f8 05             	cmp    eax,0x5
   23847:	74 46                	je     2388f <do_amd+0xd7>
   23849:	83 f8 05             	cmp    eax,0x5
   2384c:	7f 0a                	jg     23858 <do_amd+0xa0>
   2384e:	83 f8 04             	cmp    eax,0x4
   23851:	74 1c                	je     2386f <do_amd+0xb7>
   23853:	e9 a1 01 00 00       	jmp    239f9 <do_amd+0x241>
   23858:	83 f8 06             	cmp    eax,0x6
   2385b:	0f 84 ad 00 00 00    	je     2390e <do_amd+0x156>
   23861:	83 f8 0f             	cmp    eax,0xf
   23864:	0f 84 37 01 00 00    	je     239a1 <do_amd+0x1e9>
   2386a:	e9 8a 01 00 00       	jmp    239f9 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:293
        {
		case 4:
		sprintf(kcpuInfo.model_name, "486 Model %d", kcpuInfo.model);
   2386f:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   23874:	83 ec 04             	sub    esp,0x4
   23877:	50                   	push   eax
   23878:	68 a5 45 08 00       	push   0x845a5
   2387d:	68 ea 45 12 00       	push   0x1245ea
   23882:	e8 d4 3c 00 00       	call   2755b <sprintf>
   23887:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:294
		break;
   2388a:	e9 6a 01 00 00       	jmp    239f9 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:296
		case 5:
		switch(kcpuInfo.model) {
   2388f:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   23894:	83 f8 09             	cmp    eax,0x9
   23897:	77 54                	ja     238ed <do_amd+0x135>
   23899:	8b 04 85 fc 46 08 00 	mov    eax,DWORD PTR [eax*4+0x846fc]
   238a0:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:304
			case 2:
			case 3:
			case 6:
			case 7:
			
                            sprintf(kcpuInfo.model_name, "K6 Model %d", kcpuInfo.model);
   238a2:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   238a7:	83 ec 04             	sub    esp,0x4
   238aa:	50                   	push   eax
   238ab:	68 b2 45 08 00       	push   0x845b2
   238b0:	68 ea 45 12 00       	push   0x1245ea
   238b5:	e8 a1 3c 00 00       	call   2755b <sprintf>
   238ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:305
			break;
   238bd:	eb 4a                	jmp    23909 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:307
			case 8:
			sprintf(kcpuInfo.model_name, "K6-2 Model 8");
   238bf:	83 ec 08             	sub    esp,0x8
   238c2:	68 be 45 08 00       	push   0x845be
   238c7:	68 ea 45 12 00       	push   0x1245ea
   238cc:	e8 8a 3c 00 00       	call   2755b <sprintf>
   238d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:308
			break;
   238d4:	eb 33                	jmp    23909 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:310
			case 9:
			sprintf(kcpuInfo.model_name, "K6-III Model 9");
   238d6:	83 ec 08             	sub    esp,0x8
   238d9:	68 cb 45 08 00       	push   0x845cb
   238de:	68 ea 45 12 00       	push   0x1245ea
   238e3:	e8 73 3c 00 00       	call   2755b <sprintf>
   238e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:311
			break;
   238eb:	eb 1c                	jmp    23909 <do_amd+0x151>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:313
			default:
			sprintf(kcpuInfo.model_name, "K5/K6 Model %d", kcpuInfo.model);
   238ed:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   238f2:	83 ec 04             	sub    esp,0x4
   238f5:	50                   	push   eax
   238f6:	68 da 45 08 00       	push   0x845da
   238fb:	68 ea 45 12 00       	push   0x1245ea
   23900:	e8 56 3c 00 00       	call   2755b <sprintf>
   23905:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:314
			break;
   23908:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:316
		}
		break;
   23909:	e9 eb 00 00 00       	jmp    239f9 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:318
		case 6:
		switch(kcpuInfo.model) {
   2390e:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   23913:	83 f8 07             	cmp    eax,0x7
   23916:	77 6b                	ja     23983 <do_amd+0x1cb>
   23918:	8b 04 85 24 47 08 00 	mov    eax,DWORD PTR [eax*4+0x84724]
   2391f:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:322
			case 1:
			case 2:
			case 4:
			sprintf(kcpuInfo.model_name, "Athlon Model %d", kcpuInfo.model);
   23921:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   23926:	83 ec 04             	sub    esp,0x4
   23929:	50                   	push   eax
   2392a:	68 e9 45 08 00       	push   0x845e9
   2392f:	68 ea 45 12 00       	push   0x1245ea
   23934:	e8 22 3c 00 00       	call   2755b <sprintf>
   23939:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:323
			break;
   2393c:	eb 61                	jmp    2399f <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:325
			case 3:
			sprintf(kcpuInfo.model_name, "Duron Model 3");
   2393e:	83 ec 08             	sub    esp,0x8
   23941:	68 f9 45 08 00       	push   0x845f9
   23946:	68 ea 45 12 00       	push   0x1245ea
   2394b:	e8 0b 3c 00 00       	call   2755b <sprintf>
   23950:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:326
			break;
   23953:	eb 4a                	jmp    2399f <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:328
			case 6:
			sprintf(kcpuInfo.model_name, "Athlon MP/Mobile Athlon Model 6");
   23955:	83 ec 08             	sub    esp,0x8
   23958:	68 08 46 08 00       	push   0x84608
   2395d:	68 ea 45 12 00       	push   0x1245ea
   23962:	e8 f4 3b 00 00       	call   2755b <sprintf>
   23967:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:329
			break;
   2396a:	eb 33                	jmp    2399f <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:331
			case 7:
			sprintf(kcpuInfo.model_name, "Mobile Duron Model 7");
   2396c:	83 ec 08             	sub    esp,0x8
   2396f:	68 28 46 08 00       	push   0x84628
   23974:	68 ea 45 12 00       	push   0x1245ea
   23979:	e8 dd 3b 00 00       	call   2755b <sprintf>
   2397e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:332
			break;
   23981:	eb 1c                	jmp    2399f <do_amd+0x1e7>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:334
			default:
			sprintf(kcpuInfo.model_name, "Duron/Athlon Model %d", kcpuInfo.model);
   23983:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   23988:	83 ec 04             	sub    esp,0x4
   2398b:	50                   	push   eax
   2398c:	68 3d 46 08 00       	push   0x8463d
   23991:	68 ea 45 12 00       	push   0x1245ea
   23996:	e8 c0 3b 00 00       	call   2755b <sprintf>
   2399b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:335
			break;
   2399e:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:337
		}
		break;
   2399f:	eb 58                	jmp    239f9 <do_amd+0x241>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:339
                case 15:
                    switch(kcpuInfo.model)
   239a1:	a1 a4 45 12 00       	mov    eax,ds:0x1245a4
   239a6:	83 f8 1e             	cmp    eax,0x1e
   239a9:	77 4d                	ja     239f8 <do_amd+0x240>
   239ab:	8b 04 85 44 47 08 00 	mov    eax,DWORD PTR [eax*4+0x84744]
   239b2:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:343
                    {
                        case 1:
                        case 2:
                            sprintf(kcpuInfo.model_name, "FX Series/Opertron (Piledriver)");
   239b4:	83 ec 08             	sub    esp,0x8
   239b7:	68 54 46 08 00       	push   0x84654
   239bc:	68 ea 45 12 00       	push   0x1245ea
   239c1:	e8 95 3b 00 00       	call   2755b <sprintf>
   239c6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:344
                            break;
   239c9:	eb 2d                	jmp    239f8 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:347
                        case 10:
                        case 13:
                            sprintf(kcpuInfo.model_name, "A/R-Series/Athlon/Semperon/Firepro (Piledriver)");
   239cb:	83 ec 08             	sub    esp,0x8
   239ce:	68 74 46 08 00       	push   0x84674
   239d3:	68 ea 45 12 00       	push   0x1245ea
   239d8:	e8 7e 3b 00 00       	call   2755b <sprintf>
   239dd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:348
                            break;
   239e0:	eb 16                	jmp    239f8 <do_amd+0x240>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:350
                        case 30:
                            sprintf(kcpuInfo.model_name, "Elite A-Series/R-Series/Opertron (SteamRoller)");
   239e2:	83 ec 08             	sub    esp,0x8
   239e5:	68 a4 46 08 00       	push   0x846a4
   239ea:	68 ea 45 12 00       	push   0x1245ea
   239ef:	e8 67 3b 00 00       	call   2755b <sprintf>
   239f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:351
                            break;
   239f7:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:353
                    }
                    break;
   239f8:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:355
	}
	__get_cpuid(0x80000000, &extended, &unused, &unused, &unused);
   239f9:	83 ec 0c             	sub    esp,0xc
   239fc:	8d 45 dc             	lea    eax,[ebp-0x24]
   239ff:	50                   	push   eax
   23a00:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a03:	50                   	push   eax
   23a04:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a07:	50                   	push   eax
   23a08:	8d 45 f0             	lea    eax,[ebp-0x10]
   23a0b:	50                   	push   eax
   23a0c:	68 00 00 00 80       	push   0x80000000
   23a11:	e8 ed f6 ff ff       	call   23103 <__get_cpuid>
   23a16:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:356
	if(extended == 0) {
   23a19:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23a1c:	85 c0                	test   eax,eax
   23a1e:	75 0a                	jne    23a2a <do_amd+0x272>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:357
		return 0;
   23a20:	b8 00 00 00 00       	mov    eax,0x0
   23a25:	e9 a5 00 00 00       	jmp    23acf <do_amd+0x317>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:359
	}
	if(extended >= 0x80000002) {
   23a2a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23a2d:	3d 01 00 00 80       	cmp    eax,0x80000001
   23a32:	76 52                	jbe    23a86 <do_amd+0x2ce>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   23a34:	c7 45 f4 02 00 00 80 	mov    DWORD PTR [ebp-0xc],0x80000002
   23a3b:	eb 40                	jmp    23a7d <do_amd+0x2c5>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:362 (discriminator 3)
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
   23a3d:	83 ec 0c             	sub    esp,0xc
   23a40:	8d 45 e0             	lea    eax,[ebp-0x20]
   23a43:	50                   	push   eax
   23a44:	8d 45 e4             	lea    eax,[ebp-0x1c]
   23a47:	50                   	push   eax
   23a48:	8d 45 e8             	lea    eax,[ebp-0x18]
   23a4b:	50                   	push   eax
   23a4c:	8d 45 ec             	lea    eax,[ebp-0x14]
   23a4f:	50                   	push   eax
   23a50:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   23a53:	e8 ab f6 ff ff       	call   23103 <__get_cpuid>
   23a58:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:363 (discriminator 3)
			printregs(eax, ebx, ecx, edx);
   23a5b:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23a5e:	89 c3                	mov    ebx,eax
   23a60:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   23a63:	89 c1                	mov    ecx,eax
   23a65:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   23a68:	89 c2                	mov    edx,eax
   23a6a:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   23a6d:	53                   	push   ebx
   23a6e:	51                   	push   ecx
   23a6f:	52                   	push   edx
   23a70:	50                   	push   eax
   23a71:	e8 9d fc ff ff       	call   23713 <printregs>
   23a76:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 3)
	if(extended == 0) {
		return 0;
	}
	if(extended >= 0x80000002) {
		unsigned int j;
		for(j = 0x80000002; j <= 0x80000004; j++) {
   23a79:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:361 (discriminator 1)
   23a7d:	81 7d f4 04 00 00 80 	cmp    DWORD PTR [ebp-0xc],0x80000004
   23a84:	76 b7                	jbe    23a3d <do_amd+0x285>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:366
			__get_cpuid(j, &eax, &ebx, &ecx, &edx);
			printregs(eax, ebx, ecx, edx);
		}
	}
	if(extended >= 0x80000007) {
   23a86:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23a89:	3d 06 00 00 80       	cmp    eax,0x80000006
   23a8e:	76 3a                	jbe    23aca <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:367
		__get_cpuid(0x80000007, &unused, &unused, &unused, &edx);
   23a90:	83 ec 0c             	sub    esp,0xc
   23a93:	8d 45 e0             	lea    eax,[ebp-0x20]
   23a96:	50                   	push   eax
   23a97:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a9a:	50                   	push   eax
   23a9b:	8d 45 dc             	lea    eax,[ebp-0x24]
   23a9e:	50                   	push   eax
   23a9f:	8d 45 dc             	lea    eax,[ebp-0x24]
   23aa2:	50                   	push   eax
   23aa3:	68 07 00 00 80       	push   0x80000007
   23aa8:	e8 56 f6 ff ff       	call   23103 <__get_cpuid>
   23aad:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:368
		if(edx & 1) {
   23ab0:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   23ab3:	83 e0 01             	and    eax,0x1
   23ab6:	85 c0                	test   eax,eax
   23ab8:	74 10                	je     23aca <do_amd+0x312>
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:369
			printk("Temperature Sensing Diode Detected!\n");
   23aba:	83 ec 0c             	sub    esp,0xc
   23abd:	68 d4 46 08 00       	push   0x846d4
   23ac2:	e8 40 3a 00 00       	call   27507 <printk>
   23ac7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:372
		}
	}
	return 0;
   23aca:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/cpudet-clean.c:373 (discriminator 1)
}
   23acf:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23ad2:	c9                   	leave  
   23ad3:	c3                   	ret    

00023ad4 <print_e820_entry>:
print_e820_entry():
/home/yogi/src/os/chrisOS/src/init/e820.c:10

extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
   23ad4:	55                   	push   ebp
   23ad5:	89 e5                	mov    ebp,esp
   23ad7:	53                   	push   ebx
   23ad8:	83 ec 04             	sub    esp,0x4
/home/yogi/src/os/chrisOS/src/init/e820.c:13
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   23adb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
/home/yogi/src/os/chrisOS/src/init/e820.c:11
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23ade:	83 f8 01             	cmp    eax,0x1
   23ae1:	74 34                	je     23b17 <print_e820_entry+0x43>
/home/yogi/src/os/chrisOS/src/init/e820.c:13
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
   23ae3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23ae6:	83 f8 02             	cmp    eax,0x2
   23ae9:	74 25                	je     23b10 <print_e820_entry+0x3c>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 1)
   23aeb:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23aee:	83 f8 03             	cmp    eax,0x3
   23af1:	74 16                	je     23b09 <print_e820_entry+0x35>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 3)
   23af3:	8b 45 18             	mov    eax,DWORD PTR [ebp+0x18]
   23af6:	83 f8 04             	cmp    eax,0x4
   23af9:	75 07                	jne    23b02 <print_e820_entry+0x2e>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 5)
   23afb:	b8 c0 48 08 00       	mov    eax,0x848c0
   23b00:	eb 1a                	jmp    23b1c <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 6)
   23b02:	b8 c4 48 08 00       	mov    eax,0x848c4
   23b07:	eb 13                	jmp    23b1c <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 4)
   23b09:	b8 c9 48 08 00       	mov    eax,0x848c9
   23b0e:	eb 0c                	jmp    23b1c <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:13 (discriminator 2)
   23b10:	b8 ce 48 08 00       	mov    eax,0x848ce
   23b15:	eb 05                	jmp    23b1c <print_e820_entry+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 1)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23b17:	b8 d6 48 08 00       	mov    eax,0x848d6
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
   23b1c:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
/home/yogi/src/os/chrisOS/src/init/e820.c:12 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
   23b1f:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
   23b22:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23b25:	01 da                	add    edx,ebx
/home/yogi/src/os/chrisOS/src/init/e820.c:11 (discriminator 3)
extern word kE820RecordCount;
extern SMAP_entry* KERNEL_DATA_SECTION smap_table;

void print_e820_entry(SMAP_entry buffer)
{
    printk("mem[%016X-%016X] (%016X) %s\n",buffer.BaseL, 
   23b27:	8d 5a ff             	lea    ebx,[edx-0x1]
   23b2a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23b2d:	83 ec 0c             	sub    esp,0xc
   23b30:	50                   	push   eax
   23b31:	51                   	push   ecx
   23b32:	53                   	push   ebx
   23b33:	52                   	push   edx
   23b34:	68 dd 48 08 00       	push   0x848dd
   23b39:	e8 c9 39 00 00       	call   27507 <printk>
   23b3e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:14 (discriminator 3)
                                           buffer.BaseL + buffer.LengthL -1 , buffer.LengthL,
                                            buffer.Type==1?"Usable":buffer.Type==2?"Rsvd(2)":buffer.Type==3?"Rclm":buffer.Type==4?"NVS":"Rsvd");
}
   23b41:	90                   	nop
   23b42:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23b45:	c9                   	leave  
   23b46:	c3                   	ret    

00023b47 <printE820Map>:
printE820Map():
/home/yogi/src/os/chrisOS/src/init/e820.c:17

void printE820Map()
{
   23b47:	55                   	push   ebp
   23b48:	89 e5                	mov    ebp,esp
   23b4a:	53                   	push   ebx
   23b4b:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/e820.c:18
    SMAP_entry* buffer=smap_table;
   23b4e:	a1 80 45 12 00       	mov    eax,ds:0x124580
   23b53:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:19
    int entryCount=kE820RecordCount;
   23b56:	0f b7 05 90 45 12 00 	movzx  eax,WORD PTR ds:0x124590
   23b5d:	98                   	cwde   
   23b5e:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:20
    print_e820_map(smap_table, kE820RecordCount);
   23b61:	0f b7 05 90 45 12 00 	movzx  eax,WORD PTR ds:0x124590
   23b68:	0f bf d0             	movsx  edx,ax
   23b6b:	a1 80 45 12 00       	mov    eax,ds:0x124580
   23b70:	83 ec 08             	sub    esp,0x8
   23b73:	52                   	push   edx
   23b74:	50                   	push   eax
   23b75:	e8 b4 00 00 00       	call   23c2e <print_e820_map>
   23b7a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21
        for (int cnt=0;cnt<entryCount;cnt++)
   23b7d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   23b84:	e9 93 00 00 00       	jmp    23c1c <printE820Map+0xd5>
/home/yogi/src/os/chrisOS/src/init/e820.c:23
        {
        print_e820_entry(buffer[cnt]);
   23b89:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23b8c:	89 d0                	mov    eax,edx
   23b8e:	01 c0                	add    eax,eax
   23b90:	01 d0                	add    eax,edx
   23b92:	c1 e0 03             	shl    eax,0x3
   23b95:	89 c2                	mov    edx,eax
   23b97:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   23b9a:	01 d0                	add    eax,edx
   23b9c:	83 ec 08             	sub    esp,0x8
   23b9f:	83 ec 18             	sub    esp,0x18
   23ba2:	89 e2                	mov    edx,esp
   23ba4:	8b 08                	mov    ecx,DWORD PTR [eax]
   23ba6:	89 0a                	mov    DWORD PTR [edx],ecx
   23ba8:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23bab:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23bae:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23bb1:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23bb4:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23bb7:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23bba:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23bbd:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23bc0:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23bc3:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23bc6:	e8 09 ff ff ff       	call   23ad4 <print_e820_entry>
   23bcb:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:24
        cnt++;
   23bce:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:25
        if (cnt>0 && ((cnt+2)%cursorGetMaxY())==0)
   23bd2:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   23bd6:	7e 40                	jle    23c18 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:25 (discriminator 1)
   23bd8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23bdb:	8d 58 02             	lea    ebx,[eax+0x2]
   23bde:	e8 e4 45 ff ff       	call   181c7 <cursorGetMaxY>
   23be3:	89 c1                	mov    ecx,eax
   23be5:	89 d8                	mov    eax,ebx
   23be7:	99                   	cdq    
   23be8:	f7 f9                	idiv   ecx
   23bea:	89 d0                	mov    eax,edx
   23bec:	85 c0                	test   eax,eax
   23bee:	75 28                	jne    23c18 <printE820Map+0xd1>
/home/yogi/src/os/chrisOS/src/init/e820.c:27
        {
            puts("Paused, press a key to continue");
   23bf0:	83 ec 0c             	sub    esp,0xc
   23bf3:	68 fc 48 08 00       	push   0x848fc
   23bf8:	e8 89 46 ff ff       	call   18286 <puts>
   23bfd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:28
            waitForKeyboardKey();
   23c00:	e8 23 d6 fe ff       	call   11228 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/init/e820.c:29
            cursorMoveTo(0,cursorGetPosY());
   23c05:	e8 ed 45 ff ff       	call   181f7 <cursorGetPosY>
   23c0a:	83 ec 08             	sub    esp,0x8
   23c0d:	50                   	push   eax
   23c0e:	6a 00                	push   0x0
   23c10:	e8 42 45 ff ff       	call   18157 <cursorMoveTo>
   23c15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 2)
void printE820Map()
{
    SMAP_entry* buffer=smap_table;
    int entryCount=kE820RecordCount;
    print_e820_map(smap_table, kE820RecordCount);
        for (int cnt=0;cnt<entryCount;cnt++)
   23c18:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:21 (discriminator 1)
   23c1c:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23c1f:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   23c22:	0f 8c 61 ff ff ff    	jl     23b89 <printE820Map+0x42>
/home/yogi/src/os/chrisOS/src/init/e820.c:32
            puts("Paused, press a key to continue");
            waitForKeyboardKey();
            cursorMoveTo(0,cursorGetPosY());
        }
        }
}
   23c28:	90                   	nop
   23c29:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   23c2c:	c9                   	leave  
   23c2d:	c3                   	ret    

00023c2e <print_e820_map>:
print_e820_map():
/home/yogi/src/os/chrisOS/src/init/e820.c:35

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
   23c2e:	55                   	push   ebp
   23c2f:	89 e5                	mov    ebp,esp
   23c31:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/e820.c:36
    bool printOnlyUsable=entryCount>10?true:false;
   23c34:	83 7d 0c 0a          	cmp    DWORD PTR [ebp+0xc],0xa
   23c38:	0f 9f c0             	setg   al
   23c3b:	88 45 f3             	mov    BYTE PTR [ebp-0xd],al
/home/yogi/src/os/chrisOS/src/init/e820.c:38
    
        for (int cnt=0;cnt<entryCount;cnt++)
   23c3e:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   23c45:	e9 bc 00 00 00       	jmp    23d06 <print_e820_map+0xd8>
/home/yogi/src/os/chrisOS/src/init/e820.c:40
        {
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
   23c4a:	0f b6 45 f3          	movzx  eax,BYTE PTR [ebp-0xd]
   23c4e:	83 f0 01             	xor    eax,0x1
   23c51:	84 c0                	test   al,al
   23c53:	75 21                	jne    23c76 <print_e820_map+0x48>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 1)
   23c55:	80 7d f3 00          	cmp    BYTE PTR [ebp-0xd],0x0
   23c59:	74 62                	je     23cbd <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:40 (discriminator 2)
   23c5b:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23c5e:	89 d0                	mov    eax,edx
   23c60:	01 c0                	add    eax,eax
   23c62:	01 d0                	add    eax,edx
   23c64:	c1 e0 03             	shl    eax,0x3
   23c67:	89 c2                	mov    edx,eax
   23c69:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23c6c:	01 d0                	add    eax,edx
   23c6e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23c71:	83 f8 01             	cmp    eax,0x1
   23c74:	75 47                	jne    23cbd <print_e820_map+0x8f>
/home/yogi/src/os/chrisOS/src/init/e820.c:41
                print_e820_entry(buffer[cnt]);
   23c76:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23c79:	89 d0                	mov    eax,edx
   23c7b:	01 c0                	add    eax,eax
   23c7d:	01 d0                	add    eax,edx
   23c7f:	c1 e0 03             	shl    eax,0x3
   23c82:	89 c2                	mov    edx,eax
   23c84:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23c87:	01 d0                	add    eax,edx
   23c89:	83 ec 08             	sub    esp,0x8
   23c8c:	83 ec 18             	sub    esp,0x18
   23c8f:	89 e2                	mov    edx,esp
   23c91:	8b 08                	mov    ecx,DWORD PTR [eax]
   23c93:	89 0a                	mov    DWORD PTR [edx],ecx
   23c95:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23c98:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23c9b:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23c9e:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23ca1:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23ca4:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23ca7:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23caa:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23cad:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23cb0:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23cb3:	e8 1c fe ff ff       	call   23ad4 <print_e820_entry>
   23cb8:	83 c4 20             	add    esp,0x20
   23cbb:	eb 45                	jmp    23d02 <print_e820_map+0xd4>
/home/yogi/src/os/chrisOS/src/init/e820.c:43
            else
                print_e820_entry(buffer[cnt]);
   23cbd:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   23cc0:	89 d0                	mov    eax,edx
   23cc2:	01 c0                	add    eax,eax
   23cc4:	01 d0                	add    eax,edx
   23cc6:	c1 e0 03             	shl    eax,0x3
   23cc9:	89 c2                	mov    edx,eax
   23ccb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23cce:	01 d0                	add    eax,edx
   23cd0:	83 ec 08             	sub    esp,0x8
   23cd3:	83 ec 18             	sub    esp,0x18
   23cd6:	89 e2                	mov    edx,esp
   23cd8:	8b 08                	mov    ecx,DWORD PTR [eax]
   23cda:	89 0a                	mov    DWORD PTR [edx],ecx
   23cdc:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   23cdf:	89 4a 04             	mov    DWORD PTR [edx+0x4],ecx
   23ce2:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   23ce5:	89 4a 08             	mov    DWORD PTR [edx+0x8],ecx
   23ce8:	8b 48 0c             	mov    ecx,DWORD PTR [eax+0xc]
   23ceb:	89 4a 0c             	mov    DWORD PTR [edx+0xc],ecx
   23cee:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   23cf1:	89 4a 10             	mov    DWORD PTR [edx+0x10],ecx
   23cf4:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   23cf7:	89 42 14             	mov    DWORD PTR [edx+0x14],eax
   23cfa:	e8 d5 fd ff ff       	call   23ad4 <print_e820_entry>
   23cff:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 2)

void print_e820_map(SMAP_entry* buffer, int entryCount)
{
    bool printOnlyUsable=entryCount>10?true:false;
    
        for (int cnt=0;cnt<entryCount;cnt++)
   23d02:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:38 (discriminator 1)
   23d06:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   23d09:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23d0c:	0f 8c 38 ff ff ff    	jl     23c4a <print_e820_map+0x1c>
/home/yogi/src/os/chrisOS/src/init/e820.c:45
            if ((!printOnlyUsable) || (printOnlyUsable && buffer[cnt].Type==1))
                print_e820_entry(buffer[cnt]);
            else
                print_e820_entry(buffer[cnt]);
        }
}
   23d12:	90                   	nop
   23d13:	c9                   	leave  
   23d14:	c3                   	ret    

00023d15 <sum_e820_usable_memory>:
sum_e820_usable_memory():
/home/yogi/src/os/chrisOS/src/init/e820.c:48

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
   23d15:	55                   	push   ebp
   23d16:	89 e5                	mov    ebp,esp
   23d18:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/e820.c:49
    qword lRetVal = 0;
   23d1b:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:51
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23d22:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   23d29:	eb 38                	jmp    23d63 <sum_e820_usable_memory+0x4e>
/home/yogi/src/os/chrisOS/src/init/e820.c:53
    {
        if (buffer[cnt].Type==1)    
   23d2b:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23d2e:	89 d0                	mov    eax,edx
   23d30:	01 c0                	add    eax,eax
   23d32:	01 d0                	add    eax,edx
   23d34:	c1 e0 03             	shl    eax,0x3
   23d37:	89 c2                	mov    edx,eax
   23d39:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23d3c:	01 d0                	add    eax,edx
   23d3e:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   23d41:	83 f8 01             	cmp    eax,0x1
   23d44:	75 19                	jne    23d5f <sum_e820_usable_memory+0x4a>
/home/yogi/src/os/chrisOS/src/init/e820.c:54
            lRetVal += buffer[cnt].LengthL;
   23d46:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   23d49:	89 d0                	mov    eax,edx
   23d4b:	01 c0                	add    eax,eax
   23d4d:	01 d0                	add    eax,edx
   23d4f:	c1 e0 03             	shl    eax,0x3
   23d52:	89 c2                	mov    edx,eax
   23d54:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23d57:	01 d0                	add    eax,edx
   23d59:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   23d5c:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 2)

uint64_t sum_e820_usable_memory(SMAP_entry* buffer, int entryCount)
{
    qword lRetVal = 0;
    
    for (int cnt=0;cnt<entryCount;cnt++)
   23d5f:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/e820.c:51 (discriminator 1)
   23d63:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   23d66:	3b 45 0c             	cmp    eax,DWORD PTR [ebp+0xc]
   23d69:	7c c0                	jl     23d2b <sum_e820_usable_memory+0x16>
/home/yogi/src/os/chrisOS/src/init/e820.c:56
    {
        if (buffer[cnt].Type==1)    
            lRetVal += buffer[cnt].LengthL;
    }
    return lRetVal;
   23d6b:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   23d6e:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/init/e820.c:57
   23d73:	c9                   	leave  
   23d74:	c3                   	ret    
   23d75:	66 90                	xchg   ax,ax
   23d77:	90                   	nop

00023d78 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   23d78:	55                   	push   ebp
   23d79:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   23d7b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23d7e:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   23d85:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23d88:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23d8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23d8e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:51
}
   23d90:	90                   	nop
   23d91:	5d                   	pop    ebp
   23d92:	c3                   	ret    

00023d93 <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   23d93:	55                   	push   ebp
   23d94:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   23d96:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23d99:	8b 00                	mov    eax,DWORD PTR [eax]
   23d9b:	85 c0                	test   eax,eax
   23d9d:	75 0d                	jne    23dac <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:61
        list->head = node->next;
   23d9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23da2:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23da5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23da8:	89 10                	mov    DWORD PTR [eax],edx
   23daa:	eb 0e                	jmp    23dba <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:63
    else
        node->previous->next = node->next;
   23dac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23daf:	8b 00                	mov    eax,DWORD PTR [eax]
   23db1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23db4:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   23db7:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:65

    if(!node->next)
   23dba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23dbd:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23dc0:	85 c0                	test   eax,eax
   23dc2:	75 0d                	jne    23dd1 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:66
        list->tail = node->previous;
   23dc4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23dc7:	8b 10                	mov    edx,DWORD PTR [eax]
   23dc9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23dcc:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   23dcf:	eb 0d                	jmp    23dde <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   23dd1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23dd4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23dd7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23dda:	8b 12                	mov    edx,DWORD PTR [edx]
   23ddc:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:69
}
   23dde:	90                   	nop
   23ddf:	5d                   	pop    ebp
   23de0:	c3                   	ret    

00023de1 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   23de1:	55                   	push   ebp
   23de2:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   23de4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23de7:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23dea:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:80
    new_node->next = node->next;
   23dec:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23def:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   23df2:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23df5:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:81
    if (!node->next)
   23df8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23dfb:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23dfe:	85 c0                	test   eax,eax
   23e00:	75 0b                	jne    23e0d <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:82
        list->tail = new_node;
   23e02:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23e05:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23e08:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   23e0b:	eb 0b                	jmp    23e18 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:84
    else
        node->next->previous = new_node;
   23e0d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23e10:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23e13:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23e16:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:85
    node->next = new_node;
   23e18:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23e1b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23e1e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:86
}
   23e21:	90                   	nop
   23e22:	5d                   	pop    ebp
   23e23:	c3                   	ret    

00023e24 <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   23e24:	55                   	push   ebp
   23e25:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   23e27:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23e2a:	8b 10                	mov    edx,DWORD PTR [eax]
   23e2c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23e2f:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:97
    new_node->next = node;
   23e31:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   23e34:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23e37:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:98
    if (!node->previous)
   23e3a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23e3d:	8b 00                	mov    eax,DWORD PTR [eax]
   23e3f:	85 c0                	test   eax,eax
   23e41:	75 0a                	jne    23e4d <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:99
        list->head = new_node;
   23e43:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23e46:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23e49:	89 10                	mov    DWORD PTR [eax],edx
   23e4b:	eb 0b                	jmp    23e58 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:101
    else
        node->previous->next = new_node;
   23e4d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23e50:	8b 00                	mov    eax,DWORD PTR [eax]
   23e52:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23e55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:102
    node->previous = new_node;
   23e58:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23e5b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   23e5e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:103
}
   23e60:	90                   	nop
   23e61:	5d                   	pop    ebp
   23e62:	c3                   	ret    

00023e63 <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   23e63:	55                   	push   ebp
   23e64:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   23e66:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23e69:	8b 00                	mov    eax,DWORD PTR [eax]
   23e6b:	85 c0                	test   eax,eax
   23e6d:	75 26                	jne    23e95 <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:114
    {
        list->head = node;
   23e6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23e72:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23e75:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:115
        list->tail = node;
   23e77:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23e7a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   23e7d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:116
        node->previous = 0;
   23e80:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23e83:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:117
        node->next = 0;
   23e89:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23e8c:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   23e93:	eb 14                	jmp    23ea9 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   23e95:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23e98:	8b 00                	mov    eax,DWORD PTR [eax]
   23e9a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23e9d:	50                   	push   eax
   23e9e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23ea1:	e8 7e ff ff ff       	call   23e24 <fat_list_insert_before>
   23ea6:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:121
}
   23ea9:	90                   	nop
   23eaa:	c9                   	leave  
   23eab:	c3                   	ret    

00023eac <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   23eac:	55                   	push   ebp
   23ead:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   23eaf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23eb2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23eb5:	85 c0                	test   eax,eax
   23eb7:	75 10                	jne    23ec9 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:131
        fat_list_insert_first(list, node);
   23eb9:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23ebc:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23ebf:	e8 9f ff ff ff       	call   23e63 <fat_list_insert_first>
   23ec4:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   23ec7:	eb 15                	jmp    23ede <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   23ec9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ecc:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   23ecf:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   23ed2:	50                   	push   eax
   23ed3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23ed6:	e8 06 ff ff ff       	call   23de1 <fat_list_insert_after>
   23edb:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:134
}
   23ede:	90                   	nop
   23edf:	c9                   	leave  
   23ee0:	c3                   	ret    

00023ee1 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   23ee1:	55                   	push   ebp
   23ee2:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   23ee4:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23ee7:	8b 00                	mov    eax,DWORD PTR [eax]
   23ee9:	85 c0                	test   eax,eax
   23eeb:	0f 94 c0             	sete   al
   23eee:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:143
}
   23ef1:	5d                   	pop    ebp
   23ef2:	c3                   	ret    

00023ef3 <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   23ef3:	55                   	push   ebp
   23ef4:	89 e5                	mov    ebp,esp
   23ef6:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   23ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   23efc:	8b 00                	mov    eax,DWORD PTR [eax]
   23efe:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:154
    if (node)
   23f01:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   23f05:	74 0e                	je     23f15 <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:155
        fat_list_remove(list, node);
   23f07:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   23f0a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   23f0d:	e8 81 fe ff ff       	call   23d93 <fat_list_remove>
   23f12:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:157

    return node;
   23f15:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/../fat/fat_list.h:158
}
   23f18:	c9                   	leave  
   23f19:	c3                   	ret    

00023f1a <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   23f1a:	55                   	push   ebp
   23f1b:	89 e5                	mov    ebp,esp
   23f1d:	83 ec 08             	sub    esp,0x8
   23f20:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   23f23:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   23f26:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   23f2a:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   23f2d:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   23f31:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   23f35:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   23f36:	90                   	nop
   23f37:	c9                   	leave  
   23f38:	c3                   	ret    

00023f39 <gdt_init>:
gdt_init():
/home/yogi/src/os/chrisOS/src/init/init.c:83
 3 (0x18) - data @ 0x0          <-- Non-kernel data (DS/ES/FS/GS/SS): Will always be 0x0
 4 (0x20) - code @ 0xC0000000   <-- will belong to the kernel proper
 5 (0x28) - code @ 0x0          <-- Non-kernel code (CS): Will always be 0x0
 */
void HIGH_CODE_SECTION gdt_init()
{
   23f39:	55                   	push   ebp
   23f3a:	89 e5                	mov    ebp,esp
   23f3c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:84
    gdtEntry(0x1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,       //Kernel code segment starting at 0x00
   23f3f:	83 ec 08             	sub    esp,0x8
   23f42:	6a 01                	push   0x1
   23f44:	6a c0                	push   0xffffffc0
   23f46:	6a 88                	push   0xffffff88
   23f48:	68 ff ff 0f 00       	push   0xfffff
   23f4d:	6a 00                	push   0x0
   23f4f:	6a 01                	push   0x1
   23f51:	e8 38 4c ff ff       	call   18b8e <gdtEntry>
   23f56:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:86
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,       //Kernel data segment starting at 0x0
   23f59:	83 ec 08             	sub    esp,0x8
   23f5c:	6a 01                	push   0x1
   23f5e:	6a c0                	push   0xffffffc0
   23f60:	6a 82                	push   0xffffff82
   23f62:	68 ff ff 0f 00       	push   0xfffff
   23f67:	6a 00                	push   0x0
   23f69:	6a 02                	push   0x2
   23f6b:	e8 1e 4c ff ff       	call   18b8e <gdtEntry>
   23f70:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:88
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x3, 0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,    //18 - kernel data segment starting at 0x0 ***Need to change this to KERNEL_PAGED_BASE_ADDRESS base
   23f73:	83 ec 08             	sub    esp,0x8
   23f76:	6a 01                	push   0x1
   23f78:	6a c0                	push   0xffffffc0
   23f7a:	6a 82                	push   0xffffff82
   23f7c:	6a ff                	push   0xffffffff
   23f7e:	6a 00                	push   0x0
   23f80:	6a 03                	push   0x3
   23f82:	e8 07 4c ff ff       	call   18b8e <gdtEntry>
   23f87:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:90
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x4, KERNEL_PAGED_BASE_ADDRESS , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,  //20 - Kernel code segment (main) starting at 0xC0000000
   23f8a:	83 ec 08             	sub    esp,0x8
   23f8d:	6a 01                	push   0x1
   23f8f:	6a c0                	push   0xffffffc0
   23f91:	6a 88                	push   0xffffff88
   23f93:	68 ff ff 0f 00       	push   0xfffff
   23f98:	68 00 00 00 c0       	push   0xc0000000
   23f9d:	6a 04                	push   0x4
   23f9f:	e8 ea 4b ff ff       	call   18b8e <gdtEntry>
   23fa4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:92
              GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(0x5, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE | GDT_GROW_DOWN,       //kernel data segment starting at 0x0
   23fa7:	83 ec 08             	sub    esp,0x8
   23faa:	6a 01                	push   0x1
   23fac:	6a c0                	push   0xffffffc0
   23fae:	6a 8c                	push   0xffffff8c
   23fb0:	68 ff ff 0f 00       	push   0xfffff
   23fb5:	6a 00                	push   0x0
   23fb7:	6a 05                	push   0x5
   23fb9:	e8 d0 4b ff ff       	call   18b8e <gdtEntry>
   23fbe:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:95
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x6, 0, 0xFFFFFFFF, GDT_PRESENT | GDT_DPL3 | GDT_DATA | GDT_WRITABLE,    //30 (33) - user data segment starting at 0x0
   23fc1:	83 ec 08             	sub    esp,0x8
   23fc4:	6a 01                	push   0x1
   23fc6:	6a c0                	push   0xffffffc0
   23fc8:	6a e2                	push   0xffffffe2
   23fca:	6a ff                	push   0xffffffff
   23fcc:	6a 00                	push   0x0
   23fce:	6a 06                	push   0x6
   23fd0:	e8 b9 4b ff ff       	call   18b8e <gdtEntry>
   23fd5:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:98
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x7, 0 , 0xFFFFF, GDT_PRESENT | GDT_DPL3 | GDT_CODE | GDT_READABLE ,       //38 (3b) - user code segment starting at 0x0
   23fd8:	83 ec 08             	sub    esp,0x8
   23fdb:	6a 01                	push   0x1
   23fdd:	6a c0                	push   0xffffffc0
   23fdf:	6a e8                	push   0xffffffe8
   23fe1:	68 ff ff 0f 00       	push   0xfffff
   23fe6:	6a 00                	push   0x0
   23fe8:	6a 07                	push   0x7
   23fea:	e8 9f 4b ff ff       	call   18b8e <gdtEntry>
   23fef:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:101
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x8, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL3 | GDT_DATA | GDT_WRITABLE | GDT_GROW_DOWN,       //40 (43) - user stack segment starting at 0x0
   23ff2:	83 ec 08             	sub    esp,0x8
   23ff5:	6a 01                	push   0x1
   23ff7:	6a c0                	push   0xffffffc0
   23ff9:	6a e6                	push   0xffffffe6
   23ffb:	68 ff ff 0f 00       	push   0xfffff
   24000:	6a 00                	push   0x0
   24002:	6a 08                	push   0x8
   24004:	e8 85 4b ff ff       	call   18b8e <gdtEntry>
   24009:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:104
          GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x20, 0x0 , 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,  //100 - Kernel code segment will always start at 0
   2400c:	83 ec 08             	sub    esp,0x8
   2400f:	6a 01                	push   0x1
   24011:	6a c0                	push   0xffffffc0
   24013:	6a 88                	push   0xffffff88
   24015:	68 ff ff 0f 00       	push   0xfffff
   2401a:	6a 00                	push   0x0
   2401c:	6a 20                	push   0x20
   2401e:	e8 6b 4b ff ff       	call   18b8e <gdtEntry>
   24023:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:107
              GDT_GRANULAR | GDT_32BIT,true);

    gdtEntry(0x21, 0x0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE | GDT_GROW_DOWN,       //108 Kernel stack segment starting at 0x0
   24026:	83 ec 08             	sub    esp,0x8
   24029:	6a 01                	push   0x1
   2402b:	6a c0                	push   0xffffffc0
   2402d:	6a 86                	push   0xffffff86
   2402f:	68 ff ff 0f 00       	push   0xfffff
   24034:	6a 00                	push   0x0
   24036:	6a 21                	push   0x21
   24038:	e8 51 4b ff ff       	call   18b8e <gdtEntry>
   2403d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:111
              GDT_GRANULAR | GDT_32BIT,true);
    
    
    gdtEntryRM(1, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   24040:	83 ec 0c             	sub    esp,0xc
   24043:	68 80 00 00 00       	push   0x80
   24048:	68 88 00 00 00       	push   0x88
   2404d:	68 ff ff 0f 00       	push   0xfffff
   24052:	6a 00                	push   0x0
   24054:	6a 01                	push   0x1
   24056:	e8 06 4c ff ff       	call   18c61 <gdtEntryRM>
   2405b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:113
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(2, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   2405e:	83 ec 0c             	sub    esp,0xc
   24061:	68 80 00 00 00       	push   0x80
   24066:	68 82 00 00 00       	push   0x82
   2406b:	68 ff ff 0f 00       	push   0xfffff
   24070:	6a 00                	push   0x0
   24072:	6a 02                	push   0x2
   24074:	e8 e8 4b ff ff       	call   18c61 <gdtEntryRM>
   24079:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:115
              GDT_GRANULAR | GDT_16BIT);
    gdtEntryRM(3, 0, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_WRITABLE,
   2407c:	83 ec 0c             	sub    esp,0xc
   2407f:	68 c0 00 00 00       	push   0xc0
   24084:	68 8a 00 00 00       	push   0x8a
   24089:	68 ff ff 0f 00       	push   0xfffff
   2408e:	6a 00                	push   0x0
   24090:	6a 03                	push   0x3
   24092:	e8 ca 4b ff ff       	call   18c61 <gdtEntryRM>
   24097:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:118
              GDT_GRANULAR | GDT_32BIT);

    kernelGDT.limit = 0x7ff; // (sizeof(sGDT) * GDT_ENTRIES) - 1;
   2409a:	66 c7 05 88 49 12 00 	mov    WORD PTR ds:0x124988,0x7ff
   240a1:	ff 07 
/home/yogi/src/os/chrisOS/src/init/init.c:119
    kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   240a3:	c7 05 8a 49 12 00 00 	mov    DWORD PTR ds:0x12498a,0x164800
   240aa:	48 16 00 
/home/yogi/src/os/chrisOS/src/init/init.c:120
    rmGdtp.limit = sizeof(sGDT) * GDT_ENTRIES - 1;
   240ad:	66 c7 05 78 49 12 00 	mov    WORD PTR ds:0x124978,0x31f
   240b4:	1f 03 
/home/yogi/src/os/chrisOS/src/init/init.c:121
    rmGdtp.base = (unsigned int)rmGdt;
   240b6:	a1 80 49 12 00       	mov    eax,ds:0x124980
   240bb:	a3 7a 49 12 00       	mov    ds:0x12497a,eax
/home/yogi/src/os/chrisOS/src/init/init.c:122
    set_gdt(&kernelGDT);
   240c0:	83 ec 0c             	sub    esp,0xc
   240c3:	68 88 49 12 00       	push   0x124988
   240c8:	e8 70 d0 fd ff       	call   113d <set_gdt>
   240cd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:123
}
   240d0:	90                   	nop
   240d1:	c9                   	leave  
   240d2:	c3                   	ret    

000240d3 <quietHardware>:
quietHardware():
/home/yogi/src/os/chrisOS/src/init/init.c:126

void HIGH_CODE_SECTION quietHardware()
{
   240d3:	55                   	push   ebp
   240d4:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/init.c:127
    outb(0xa1, 0x7f);
   240d6:	6a 7f                	push   0x7f
   240d8:	68 a1 00 00 00       	push   0xa1
   240dd:	e8 38 fe ff ff       	call   23f1a <outb>
   240e2:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:128
    outb(0x21, 0xff);
   240e5:	68 ff 00 00 00       	push   0xff
   240ea:	6a 21                	push   0x21
   240ec:	e8 29 fe ff ff       	call   23f1a <outb>
   240f1:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:129
}
   240f4:	90                   	nop
   240f5:	c9                   	leave  
   240f6:	c3                   	ret    

000240f7 <doHDSetup>:
doHDSetup():
/home/yogi/src/os/chrisOS/src/init/init.c:132

void doHDSetup()
{
   240f7:	55                   	push   ebp
   240f8:	89 e5                	mov    ebp,esp
   240fa:	57                   	push   edi
   240fb:	56                   	push   esi
   240fc:	53                   	push   ebx
   240fd:	81 ec 2c 08 00 00    	sub    esp,0x82c
/home/yogi/src/os/chrisOS/src/init/init.c:133
    printk("ATA: Scanning for hard drives on primary bus ...\n");
   24103:	83 ec 0c             	sub    esp,0xc
   24106:	68 00 4b 08 00       	push   0x84b00
   2410b:	e8 f7 33 00 00       	call   27507 <printk>
   24110:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:134
    ataScanForHarddrives();
   24113:	e8 6f e8 ff ff       	call   22987 <ataScanForHarddrives>
/home/yogi/src/os/chrisOS/src/init/init.c:136
    char* p1[512];
    memset(p1,0,512);
   24118:	83 ec 04             	sub    esp,0x4
   2411b:	68 00 02 00 00       	push   0x200
   24120:	6a 00                	push   0x0
   24122:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24128:	50                   	push   eax
   24129:	e8 93 12 00 00       	call   253c1 <memset>
   2412e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:138
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
   24131:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24136:	05 00 02 00 00       	add    eax,0x200
   2413b:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:139
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24141:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24146:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2414d:	3c 01                	cmp    al,0x1
   2414f:	75 14                	jne    24165 <doHDSetup+0x6e>
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 1)
   24151:	83 ec 0c             	sub    esp,0xc
   24154:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   2415a:	50                   	push   eax
   2415b:	e8 bc 38 00 00       	call   27a1c <strtrim>
   24160:	83 c4 10             	add    esp,0x10
   24163:	eb 05                	jmp    2416a <doHDSetup+0x73>
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 2)
   24165:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:139 (discriminator 4)
   2416a:	83 ec 08             	sub    esp,0x8
   2416d:	50                   	push   eax
   2416e:	68 38 4b 08 00       	push   0x84b38
   24173:	e8 8f 33 00 00       	call   27507 <printk>
   24178:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:140 (discriminator 4)
    if (kATADeviceInfo[0].ATADeviceAvailable)
   2417b:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24180:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24187:	84 c0                	test   al,al
   24189:	0f 84 92 00 00 00    	je     24221 <doHDSetup+0x12a>
/home/yogi/src/os/chrisOS/src/init/init.c:146
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
   2418f:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24194:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:142
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   2419b:	84 c0                	test   al,al
   2419d:	74 07                	je     241a6 <doHDSetup+0xaf>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 1)
   2419f:	bf 49 4b 08 00       	mov    edi,0x84b49
   241a4:	eb 05                	jmp    241ab <doHDSetup+0xb4>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 2)
   241a6:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:145 (discriminator 4)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
   241ab:	a1 00 48 12 00       	mov    eax,ds:0x124800
   241b0:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 4)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   241b7:	84 c0                	test   al,al
   241b9:	74 07                	je     241c2 <doHDSetup+0xcb>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 5)
   241bb:	be 4f 4b 08 00       	mov    esi,0x84b4f
   241c0:	eb 05                	jmp    241c7 <doHDSetup+0xd0>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 6)
   241c2:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:144 (discriminator 8)
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
   241c7:	a1 00 48 12 00       	mov    eax,ds:0x124800
   241cc:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 8)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   241d3:	84 c0                	test   al,al
   241d5:	74 07                	je     241de <doHDSetup+0xe7>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 9)
   241d7:	bb 56 4b 08 00       	mov    ebx,0x84b56
   241dc:	eb 05                	jmp    241e3 <doHDSetup+0xec>
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 10)
   241de:	bb 4e 4b 08 00       	mov    ebx,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:143 (discriminator 12)
                kATADeviceInfo[0].sectorSize,
   241e3:	a1 00 48 12 00       	mov    eax,ds:0x124800
/home/yogi/src/os/chrisOS/src/init/init.c:142 (discriminator 12)
    
    *p1=kATADeviceInfo[0].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[0].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[0].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[0].totalSectorCount*kATADeviceInfo[0].sectorSize) / (1024*1024),
   241e8:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   241ee:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   241f4:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   241fa:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24200:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   24206:	0f af d1             	imul   edx,ecx
   24209:	c1 ea 14             	shr    edx,0x14
   2420c:	83 ec 08             	sub    esp,0x8
   2420f:	57                   	push   edi
   24210:	56                   	push   esi
   24211:	53                   	push   ebx
   24212:	50                   	push   eax
   24213:	52                   	push   edx
   24214:	68 5b 4b 08 00       	push   0x84b5b
   24219:	e8 e9 32 00 00       	call   27507 <printk>
   2421e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:148
                kATADeviceInfo[0].sectorSize,
                kATADeviceInfo[0].lbaSupported?",LBA":"",
                kATADeviceInfo[0].lba48Supported?",LBA48":"",
                kATADeviceInfo[0].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
   24221:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24226:	05 73 02 00 00       	add    eax,0x273
   2422b:	05 00 02 00 00       	add    eax,0x200
   24230:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:149
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24236:	a1 00 48 12 00       	mov    eax,ds:0x124800
   2423b:	05 73 02 00 00       	add    eax,0x273
   24240:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24247:	3c 01                	cmp    al,0x1
   24249:	75 14                	jne    2425f <doHDSetup+0x168>
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 1)
   2424b:	83 ec 0c             	sub    esp,0xc
   2424e:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24254:	50                   	push   eax
   24255:	e8 c2 37 00 00       	call   27a1c <strtrim>
   2425a:	83 c4 10             	add    esp,0x10
   2425d:	eb 05                	jmp    24264 <doHDSetup+0x16d>
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 2)
   2425f:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:149 (discriminator 4)
   24264:	83 ec 08             	sub    esp,0x8
   24267:	50                   	push   eax
   24268:	68 70 4b 08 00       	push   0x84b70
   2426d:	e8 95 32 00 00       	call   27507 <printk>
   24272:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:150 (discriminator 4)
    if (kATADeviceInfo[1].ATADeviceAvailable)
   24275:	a1 00 48 12 00       	mov    eax,ds:0x124800
   2427a:	05 73 02 00 00       	add    eax,0x273
   2427f:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24286:	84 c0                	test   al,al
   24288:	0f 84 b2 00 00 00    	je     24340 <doHDSetup+0x249>
/home/yogi/src/os/chrisOS/src/init/init.c:156
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
   2428e:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24293:	05 73 02 00 00       	add    eax,0x273
   24298:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:152
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   2429f:	84 c0                	test   al,al
   242a1:	74 07                	je     242aa <doHDSetup+0x1b3>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 1)
   242a3:	bf 49 4b 08 00       	mov    edi,0x84b49
   242a8:	eb 05                	jmp    242af <doHDSetup+0x1b8>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 2)
   242aa:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:155 (discriminator 4)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
   242af:	a1 00 48 12 00       	mov    eax,ds:0x124800
   242b4:	05 73 02 00 00       	add    eax,0x273
   242b9:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 4)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   242c0:	84 c0                	test   al,al
   242c2:	74 07                	je     242cb <doHDSetup+0x1d4>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 5)
   242c4:	be 4f 4b 08 00       	mov    esi,0x84b4f
   242c9:	eb 05                	jmp    242d0 <doHDSetup+0x1d9>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 6)
   242cb:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:154 (discriminator 8)
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
   242d0:	a1 00 48 12 00       	mov    eax,ds:0x124800
   242d5:	05 73 02 00 00       	add    eax,0x273
   242da:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 8)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   242e1:	84 c0                	test   al,al
   242e3:	74 07                	je     242ec <doHDSetup+0x1f5>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 9)
   242e5:	bb 56 4b 08 00       	mov    ebx,0x84b56
   242ea:	eb 05                	jmp    242f1 <doHDSetup+0x1fa>
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 10)
   242ec:	bb 4e 4b 08 00       	mov    ebx,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:153 (discriminator 12)
                kATADeviceInfo[1].sectorSize,
   242f1:	a1 00 48 12 00       	mov    eax,ds:0x124800
   242f6:	05 73 02 00 00       	add    eax,0x273
/home/yogi/src/os/chrisOS/src/init/init.c:152 (discriminator 12)
    }
    *p1=kATADeviceInfo[1].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[1].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[1].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[1].totalSectorCount*kATADeviceInfo[1].sectorSize) / (1024*1024),
   242fb:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24301:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24307:	81 c2 73 02 00 00    	add    edx,0x273
   2430d:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   24313:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24319:	81 c2 73 02 00 00    	add    edx,0x273
   2431f:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   24325:	0f af d1             	imul   edx,ecx
   24328:	c1 ea 14             	shr    edx,0x14
   2432b:	83 ec 08             	sub    esp,0x8
   2432e:	57                   	push   edi
   2432f:	56                   	push   esi
   24330:	53                   	push   ebx
   24331:	50                   	push   eax
   24332:	52                   	push   edx
   24333:	68 81 4b 08 00       	push   0x84b81
   24338:	e8 ca 31 00 00       	call   27507 <printk>
   2433d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:158
                kATADeviceInfo[1].sectorSize,
                kATADeviceInfo[1].lbaSupported?",LBA":"",
                kATADeviceInfo[1].lba48Supported?",LBA48":"",
                kATADeviceInfo[1].dmaSupported?",DMA":"");
    }
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
   24340:	83 ec 0c             	sub    esp,0xc
   24343:	68 98 4b 08 00       	push   0x84b98
   24348:	e8 ba 31 00 00       	call   27507 <printk>
   2434d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:159
    *p1=kATADeviceInfo[2].ATADeviceModel;
   24350:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24355:	05 e6 04 00 00       	add    eax,0x4e6
   2435a:	05 00 02 00 00       	add    eax,0x200
   2435f:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:160
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24365:	a1 00 48 12 00       	mov    eax,ds:0x124800
   2436a:	05 e6 04 00 00       	add    eax,0x4e6
   2436f:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24376:	3c 01                	cmp    al,0x1
   24378:	75 14                	jne    2438e <doHDSetup+0x297>
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 1)
   2437a:	83 ec 0c             	sub    esp,0xc
   2437d:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24383:	50                   	push   eax
   24384:	e8 93 36 00 00       	call   27a1c <strtrim>
   24389:	83 c4 10             	add    esp,0x10
   2438c:	eb 05                	jmp    24393 <doHDSetup+0x29c>
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 2)
   2438e:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:160 (discriminator 4)
   24393:	83 ec 08             	sub    esp,0x8
   24396:	50                   	push   eax
   24397:	68 38 4b 08 00       	push   0x84b38
   2439c:	e8 66 31 00 00       	call   27507 <printk>
   243a1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:161 (discriminator 4)
    if (kATADeviceInfo[2].ATADeviceAvailable)
   243a4:	a1 00 48 12 00       	mov    eax,ds:0x124800
   243a9:	05 e6 04 00 00       	add    eax,0x4e6
   243ae:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   243b5:	84 c0                	test   al,al
   243b7:	0f 84 b2 00 00 00    	je     2446f <doHDSetup+0x378>
/home/yogi/src/os/chrisOS/src/init/init.c:167
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
   243bd:	a1 00 48 12 00       	mov    eax,ds:0x124800
   243c2:	05 e6 04 00 00       	add    eax,0x4e6
   243c7:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:163
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   243ce:	84 c0                	test   al,al
   243d0:	74 07                	je     243d9 <doHDSetup+0x2e2>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 1)
   243d2:	bf 49 4b 08 00       	mov    edi,0x84b49
   243d7:	eb 05                	jmp    243de <doHDSetup+0x2e7>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 2)
   243d9:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:166 (discriminator 4)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
   243de:	a1 00 48 12 00       	mov    eax,ds:0x124800
   243e3:	05 e6 04 00 00       	add    eax,0x4e6
   243e8:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 4)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   243ef:	84 c0                	test   al,al
   243f1:	74 07                	je     243fa <doHDSetup+0x303>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 5)
   243f3:	be 4f 4b 08 00       	mov    esi,0x84b4f
   243f8:	eb 05                	jmp    243ff <doHDSetup+0x308>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 6)
   243fa:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:165 (discriminator 8)
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
   243ff:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24404:	05 e6 04 00 00       	add    eax,0x4e6
   24409:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 8)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   24410:	84 c0                	test   al,al
   24412:	74 07                	je     2441b <doHDSetup+0x324>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 9)
   24414:	bb 56 4b 08 00       	mov    ebx,0x84b56
   24419:	eb 05                	jmp    24420 <doHDSetup+0x329>
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 10)
   2441b:	bb 4e 4b 08 00       	mov    ebx,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:164 (discriminator 12)
                kATADeviceInfo[2].sectorSize,
   24420:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24425:	05 e6 04 00 00       	add    eax,0x4e6
/home/yogi/src/os/chrisOS/src/init/init.c:163 (discriminator 12)
    printk("ATA: Scanning for hard drives on secondary bus ...\n");
    *p1=kATADeviceInfo[2].ATADeviceModel;
    printk("ATA: \tMaster: %s", kATADeviceInfo[2].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[2].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps%s%s%s)\n", (kATADeviceInfo[2].totalSectorCount*kATADeviceInfo[2].sectorSize) / (1024*1024),
   2442a:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   24430:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24436:	81 c2 e6 04 00 00    	add    edx,0x4e6
   2443c:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   24442:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24448:	81 c2 e6 04 00 00    	add    edx,0x4e6
   2444e:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   24454:	0f af d1             	imul   edx,ecx
   24457:	c1 ea 14             	shr    edx,0x14
   2445a:	83 ec 08             	sub    esp,0x8
   2445d:	57                   	push   edi
   2445e:	56                   	push   esi
   2445f:	53                   	push   ebx
   24460:	50                   	push   eax
   24461:	52                   	push   edx
   24462:	68 5b 4b 08 00       	push   0x84b5b
   24467:	e8 9b 30 00 00       	call   27507 <printk>
   2446c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:169
                kATADeviceInfo[2].sectorSize,
                kATADeviceInfo[2].lbaSupported?",LBA":"",
                kATADeviceInfo[2].lba48Supported?",LBA48":"",
                kATADeviceInfo[2].dmaSupported?",DMA":"");
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
   2446f:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24474:	05 59 07 00 00       	add    eax,0x759
   24479:	05 00 02 00 00       	add    eax,0x200
   2447e:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:170
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   24484:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24489:	05 59 07 00 00       	add    eax,0x759
   2448e:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24495:	3c 01                	cmp    al,0x1
   24497:	75 14                	jne    244ad <doHDSetup+0x3b6>
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 1)
   24499:	83 ec 0c             	sub    esp,0xc
   2449c:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   244a2:	50                   	push   eax
   244a3:	e8 74 35 00 00       	call   27a1c <strtrim>
   244a8:	83 c4 10             	add    esp,0x10
   244ab:	eb 05                	jmp    244b2 <doHDSetup+0x3bb>
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 2)
   244ad:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:170 (discriminator 4)
   244b2:	83 ec 08             	sub    esp,0x8
   244b5:	50                   	push   eax
   244b6:	68 70 4b 08 00       	push   0x84b70
   244bb:	e8 47 30 00 00       	call   27507 <printk>
   244c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:171 (discriminator 4)
    if (kATADeviceInfo[3].ATADeviceAvailable)
   244c3:	a1 00 48 12 00       	mov    eax,ds:0x124800
   244c8:	05 59 07 00 00       	add    eax,0x759
   244cd:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   244d4:	84 c0                	test   al,al
   244d6:	0f 84 b2 00 00 00    	je     2458e <doHDSetup+0x497>
/home/yogi/src/os/chrisOS/src/init/init.c:177
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
   244dc:	a1 00 48 12 00       	mov    eax,ds:0x124800
   244e1:	05 59 07 00 00       	add    eax,0x759
   244e6:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:173
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   244ed:	84 c0                	test   al,al
   244ef:	74 07                	je     244f8 <doHDSetup+0x401>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 1)
   244f1:	bf 49 4b 08 00       	mov    edi,0x84b49
   244f6:	eb 05                	jmp    244fd <doHDSetup+0x406>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 2)
   244f8:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:176 (discriminator 4)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
   244fd:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24502:	05 59 07 00 00       	add    eax,0x759
   24507:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 4)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   2450e:	84 c0                	test   al,al
   24510:	74 07                	je     24519 <doHDSetup+0x422>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 5)
   24512:	be 4f 4b 08 00       	mov    esi,0x84b4f
   24517:	eb 05                	jmp    2451e <doHDSetup+0x427>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 6)
   24519:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:175 (discriminator 8)
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
   2451e:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24523:	05 59 07 00 00       	add    eax,0x759
   24528:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 8)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   2452f:	84 c0                	test   al,al
   24531:	74 07                	je     2453a <doHDSetup+0x443>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 9)
   24533:	bb 56 4b 08 00       	mov    ebx,0x84b56
   24538:	eb 05                	jmp    2453f <doHDSetup+0x448>
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 10)
   2453a:	bb 4e 4b 08 00       	mov    ebx,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:174 (discriminator 12)
                kATADeviceInfo[3].sectorSize,
   2453f:	a1 00 48 12 00       	mov    eax,ds:0x124800
   24544:	05 59 07 00 00       	add    eax,0x759
/home/yogi/src/os/chrisOS/src/init/init.c:173 (discriminator 12)
    }
    *p1=kATADeviceInfo[3].ATADeviceModel;
    printk("ATA: \tSlave:  %s", kATADeviceInfo[3].ATADeviceAvailable==1?strtrim(&p1):"none\n");
    if (kATADeviceInfo[3].ATADeviceAvailable)
    {
        printk("\t%uMB (%ubps %s%s%s)\n", (kATADeviceInfo[3].totalSectorCount*kATADeviceInfo[3].sectorSize) / (1024*1024),
   24549:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   2454f:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24555:	81 c2 59 07 00 00    	add    edx,0x759
   2455b:	8b 8a 56 02 00 00    	mov    ecx,DWORD PTR [edx+0x256]
   24561:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24567:	81 c2 59 07 00 00    	add    edx,0x759
   2456d:	8b 92 5a 02 00 00    	mov    edx,DWORD PTR [edx+0x25a]
   24573:	0f af d1             	imul   edx,ecx
   24576:	c1 ea 14             	shr    edx,0x14
   24579:	83 ec 08             	sub    esp,0x8
   2457c:	57                   	push   edi
   2457d:	56                   	push   esi
   2457e:	53                   	push   ebx
   2457f:	50                   	push   eax
   24580:	52                   	push   edx
   24581:	68 81 4b 08 00       	push   0x84b81
   24586:	e8 7c 2f 00 00       	call   27507 <printk>
   2458b:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:179
                kATADeviceInfo[3].sectorSize,
                kATADeviceInfo[3].lbaSupported?",LBA":"",
                kATADeviceInfo[3].lba48Supported?",LBA48":"",
                kATADeviceInfo[3].dmaSupported?",DMA":"");
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
   2458e:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24593:	83 ec 04             	sub    esp,0x4
   24596:	50                   	push   eax
   24597:	68 cc 4b 08 00       	push   0x84bcc
   2459c:	68 e0 8f 09 00       	push   0x98fe0
   245a1:	e8 e0 01 00 00       	call   24786 <ParamExists>
   245a6:	83 c4 10             	add    esp,0x10
   245a9:	84 c0                	test   al,al
   245ab:	74 15                	je     245c2 <doHDSetup+0x4cb>
/home/yogi/src/os/chrisOS/src/init/init.c:180
        printk("AHCI: No scanning per parameter 'noahci'\n");
   245ad:	83 ec 0c             	sub    esp,0xc
   245b0:	68 d4 4b 08 00       	push   0x84bd4
   245b5:	e8 4d 2f 00 00       	call   27507 <printk>
   245ba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:200
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   245bd:	e9 bb 01 00 00       	jmp    2477d <doHDSetup+0x686>
/home/yogi/src/os/chrisOS/src/init/init.c:183
    }
    if (ParamExists(kBootParams,"noahci",kBootParamCount))
        printk("AHCI: No scanning per parameter 'noahci'\n");
    else
    {
        printk("AHCI: Initializing ...\n");
   245c2:	83 ec 0c             	sub    esp,0xc
   245c5:	68 fe 4b 08 00       	push   0x84bfe
   245ca:	e8 38 2f 00 00       	call   27507 <printk>
   245cf:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:184
        ahciInit();
   245d2:	e8 55 0f ff ff       	call   1552c <ahciInit>
/home/yogi/src/os/chrisOS/src/init/init.c:185
        printk(" done\n");
   245d7:	83 ec 0c             	sub    esp,0xc
   245da:	68 16 4c 08 00       	push   0x84c16
   245df:	e8 23 2f 00 00       	call   27507 <printk>
   245e4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:186
        printk("AHCI: SATA Disks:\n");
   245e7:	83 ec 0c             	sub    esp,0xc
   245ea:	68 1d 4c 08 00       	push   0x84c1d
   245ef:	e8 13 2f 00 00       	call   27507 <printk>
   245f4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:187
        for (int cnt=4;cnt<10;cnt++)
   245f7:	c7 45 e4 04 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x4
   245fe:	e9 70 01 00 00       	jmp    24773 <doHDSetup+0x67c>
/home/yogi/src/os/chrisOS/src/init/init.c:188
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
   24603:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24609:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2460c:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24612:	01 d0                	add    eax,edx
   24614:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   2461b:	84 c0                	test   al,al
   2461d:	0f 84 4c 01 00 00    	je     2476f <doHDSetup+0x678>
/home/yogi/src/os/chrisOS/src/init/init.c:190
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
   24623:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24629:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2462c:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24632:	01 d0                	add    eax,edx
   24634:	05 00 02 00 00       	add    eax,0x200
   24639:	89 85 e4 f7 ff ff    	mov    DWORD PTR [ebp-0x81c],eax
/home/yogi/src/os/chrisOS/src/init/init.c:191
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
   2463f:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24645:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24648:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   2464e:	01 d0                	add    eax,edx
   24650:	0f b6 80 51 02 00 00 	movzx  eax,BYTE PTR [eax+0x251]
   24657:	3c 01                	cmp    al,0x1
   24659:	75 14                	jne    2466f <doHDSetup+0x578>
/home/yogi/src/os/chrisOS/src/init/init.c:191 (discriminator 1)
   2465b:	83 ec 0c             	sub    esp,0xc
   2465e:	8d 85 e4 f7 ff ff    	lea    eax,[ebp-0x81c]
   24664:	50                   	push   eax
   24665:	e8 b2 33 00 00       	call   27a1c <strtrim>
   2466a:	83 c4 10             	add    esp,0x10
   2466d:	eb 05                	jmp    24674 <doHDSetup+0x57d>
/home/yogi/src/os/chrisOS/src/init/init.c:191 (discriminator 2)
   2466f:	b8 32 4b 08 00       	mov    eax,0x84b32
/home/yogi/src/os/chrisOS/src/init/init.c:191 (discriminator 4)
   24674:	83 ec 04             	sub    esp,0x4
   24677:	50                   	push   eax
   24678:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   2467b:	68 30 4c 08 00       	push   0x84c30
   24680:	e8 82 2e 00 00       	call   27507 <printk>
   24685:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:197 (discriminator 4)
                printk("\t%uMB (%ubps %s%s%s)\n", 
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
   24688:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   2468e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24691:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24697:	01 d0                	add    eax,edx
   24699:	0f b6 80 60 02 00 00 	movzx  eax,BYTE PTR [eax+0x260]
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   246a0:	84 c0                	test   al,al
   246a2:	74 0c                	je     246b0 <doHDSetup+0x5b9>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 1)
   246a4:	c7 85 d4 f7 ff ff 49 	mov    DWORD PTR [ebp-0x82c],0x84b49
   246ab:	4b 08 00 
   246ae:	eb 0a                	jmp    246ba <doHDSetup+0x5c3>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 2)
   246b0:	c7 85 d4 f7 ff ff 4e 	mov    DWORD PTR [ebp-0x82c],0x84b4e
   246b7:	4b 08 00 
/home/yogi/src/os/chrisOS/src/init/init.c:196 (discriminator 4)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
   246ba:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   246c0:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   246c3:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   246c9:	01 d0                	add    eax,edx
   246cb:	0f b6 80 5f 02 00 00 	movzx  eax,BYTE PTR [eax+0x25f]
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 4)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   246d2:	84 c0                	test   al,al
   246d4:	74 07                	je     246dd <doHDSetup+0x5e6>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 5)
   246d6:	bf 4f 4b 08 00       	mov    edi,0x84b4f
   246db:	eb 05                	jmp    246e2 <doHDSetup+0x5eb>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 6)
   246dd:	bf 4e 4b 08 00       	mov    edi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:195 (discriminator 8)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
   246e2:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   246e8:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   246eb:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   246f1:	01 d0                	add    eax,edx
   246f3:	0f b6 80 5e 02 00 00 	movzx  eax,BYTE PTR [eax+0x25e]
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 8)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   246fa:	84 c0                	test   al,al
   246fc:	74 07                	je     24705 <doHDSetup+0x60e>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 9)
   246fe:	be 56 4b 08 00       	mov    esi,0x84b56
   24703:	eb 05                	jmp    2470a <doHDSetup+0x613>
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 10)
   24705:	be 4e 4b 08 00       	mov    esi,0x84b4e
/home/yogi/src/os/chrisOS/src/init/init.c:194 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
                        kATADeviceInfo[cnt].sectorSize,
   2470a:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24710:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24713:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24719:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   2471b:	8b 88 5a 02 00 00    	mov    ecx,DWORD PTR [eax+0x25a]
/home/yogi/src/os/chrisOS/src/init/init.c:193 (discriminator 12)
                        (kATADeviceInfo[cnt].totalSectorCount*kATADeviceInfo[cnt].sectorSize) / (1024*1024),
   24721:	8b 15 00 48 12 00    	mov    edx,DWORD PTR ds:0x124800
   24727:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   2472a:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24730:	01 d0                	add    eax,edx
   24732:	8b 90 56 02 00 00    	mov    edx,DWORD PTR [eax+0x256]
   24738:	8b 1d 00 48 12 00    	mov    ebx,DWORD PTR ds:0x124800
   2473e:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   24741:	69 c0 73 02 00 00    	imul   eax,eax,0x273
   24747:	01 d8                	add    eax,ebx
   24749:	8b 80 5a 02 00 00    	mov    eax,DWORD PTR [eax+0x25a]
   2474f:	0f af c2             	imul   eax,edx
/home/yogi/src/os/chrisOS/src/init/init.c:192 (discriminator 12)
        for (int cnt=4;cnt<10;cnt++)
            if (kATADeviceInfo[cnt].ATADeviceAvailable)
            {
                *p1=kATADeviceInfo[cnt].ATADeviceModel;
                printk("AHCI: Device %u:  %s", cnt,kATADeviceInfo[cnt].ATADeviceAvailable==1?strtrim(&p1):"none\n");
                printk("\t%uMB (%ubps %s%s%s)\n", 
   24752:	c1 e8 14             	shr    eax,0x14
   24755:	83 ec 08             	sub    esp,0x8
   24758:	ff b5 d4 f7 ff ff    	push   DWORD PTR [ebp-0x82c]
   2475e:	57                   	push   edi
   2475f:	56                   	push   esi
   24760:	51                   	push   ecx
   24761:	50                   	push   eax
   24762:	68 81 4b 08 00       	push   0x84b81
   24767:	e8 9b 2d 00 00       	call   27507 <printk>
   2476c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:187 (discriminator 2)
    {
        printk("AHCI: Initializing ...\n");
        ahciInit();
        printk(" done\n");
        printk("AHCI: SATA Disks:\n");
        for (int cnt=4;cnt<10;cnt++)
   2476f:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:187 (discriminator 1)
   24773:	83 7d e4 09          	cmp    DWORD PTR [ebp-0x1c],0x9
   24777:	0f 8e 86 fe ff ff    	jle    24603 <doHDSetup+0x50c>
/home/yogi/src/os/chrisOS/src/init/init.c:200
                        kATADeviceInfo[cnt].lbaSupported?",LBA":"",
                        kATADeviceInfo[cnt].lba48Supported?",LBA48":"",
                        kATADeviceInfo[cnt].dmaSupported?",DMA":"");
            }
    }
}
   2477d:	90                   	nop
   2477e:	8d 65 f4             	lea    esp,[ebp-0xc]
   24781:	5b                   	pop    ebx
   24782:	5e                   	pop    esi
   24783:	5f                   	pop    edi
   24784:	5d                   	pop    ebp
   24785:	c3                   	ret    

00024786 <ParamExists>:
ParamExists():
/home/yogi/src/os/chrisOS/src/init/init.c:203

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
   24786:	55                   	push   ebp
   24787:	89 e5                	mov    ebp,esp
   24789:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/init.c:204
    for (int cnt=0;cnt<paramCount+1;cnt++)
   2478c:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   24793:	eb 2b                	jmp    247c0 <ParamExists+0x3a>
/home/yogi/src/os/chrisOS/src/init/init.c:205
        if (!strcmp(params[cnt],cmdToFind))
   24795:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24798:	c1 e0 09             	shl    eax,0x9
   2479b:	89 c2                	mov    edx,eax
   2479d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   247a0:	01 d0                	add    eax,edx
   247a2:	83 ec 08             	sub    esp,0x8
   247a5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   247a8:	50                   	push   eax
   247a9:	e8 66 2e 00 00       	call   27614 <strcmp>
   247ae:	83 c4 10             	add    esp,0x10
   247b1:	85 c0                	test   eax,eax
   247b3:	75 07                	jne    247bc <ParamExists+0x36>
/home/yogi/src/os/chrisOS/src/init/init.c:206
            return true;
   247b5:	b8 01 00 00 00       	mov    eax,0x1
   247ba:	eb 14                	jmp    247d0 <ParamExists+0x4a>
/home/yogi/src/os/chrisOS/src/init/init.c:204 (discriminator 2)
    }
}

bool HIGH_CODE_SECTION ParamExists(char params[MAX_PARAM_COUNT][MAX_PARAM_WIDTH], char* cmdToFind, int paramCount)
{
    for (int cnt=0;cnt<paramCount+1;cnt++)
   247bc:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/init/init.c:204 (discriminator 1)
   247c0:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   247c3:	83 c0 01             	add    eax,0x1
   247c6:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   247c9:	7f ca                	jg     24795 <ParamExists+0xf>
/home/yogi/src/os/chrisOS/src/init/init.c:207
        if (!strcmp(params[cnt],cmdToFind))
            return true;
    return false;
   247cb:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:208
}
   247d0:	c9                   	leave  
   247d1:	c3                   	ret    

000247d2 <testWPBit>:
testWPBit():
/home/yogi/src/os/chrisOS/src/init/init.c:212
void extern enableCR0_WP();

void HIGH_CODE_SECTION testWPBit()
{
   247d2:	55                   	push   ebp
   247d3:	89 e5                	mov    ebp,esp
   247d5:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/init.c:213
    enableCR0_WP();
   247d8:	e8 84 d5 fe ff       	call   11d61 <enableCR0_WP>
/home/yogi/src/os/chrisOS/src/init/init.c:214
    printk("PAGING: Kernel paged base: 0x%08X\n",KERNEL_PAGED_BASE_ADDRESS);
   247dd:	83 ec 08             	sub    esp,0x8
   247e0:	68 00 00 00 c0       	push   0xc0000000
   247e5:	68 48 4c 08 00       	push   0x84c48
   247ea:	e8 18 2d 00 00       	call   27507 <printk>
   247ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:215
    printk("PAGING: Making page @ 0x00000000 read only\n");
   247f2:	83 ec 0c             	sub    esp,0xc
   247f5:	68 6c 4c 08 00       	push   0x84c6c
   247fa:	e8 08 2d 00 00       	call   27507 <printk>
   247ff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:216
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   24802:	83 ec 04             	sub    esp,0x4
   24805:	6a 01                	push   0x1
   24807:	68 ff 0f 00 00       	push   0xfff
   2480c:	6a 00                	push   0x0
   2480e:	e8 fe d2 fe ff       	call   11b11 <kSetPhysicalRangeRO>
   24813:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:217
    printk("PAGING: Testing whether CPU honors WP flag ... ");
   24816:	83 ec 0c             	sub    esp,0xc
   24819:	68 98 4c 08 00       	push   0x84c98
   2481e:	e8 e4 2c 00 00       	call   27507 <printk>
   24823:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:218
  __asm__("cli\n");
   24826:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/init.c:219
  __asm__("mov %0,[0x0]\n":"=r" (kOriginalAddressZeroValue));
   24827:	a1 00 00 00 00       	mov    eax,ds:0x0
   2482c:	a3 20 49 12 00       	mov    ds:0x124920,eax
/home/yogi/src/os/chrisOS/src/init/init.c:220
  __asm__("mov eax,0xdeadbeef\n mov [0x0],eax\n");    //purposely write address 0 which we made "read only"
   24831:	b8 ef be ad de       	mov    eax,0xdeadbeef
   24836:	a3 00 00 00 00       	mov    ds:0x0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:221
  __asm__("mov eax,cr0\n":::"eax");
   2483b:	0f 20 c0             	mov    eax,cr0
/home/yogi/src/os/chrisOS/src/init/init.c:222
  if (kPagingExceptionsSinceStart==1)
   2483e:	a1 b8 47 12 00       	mov    eax,ds:0x1247b8
   24843:	83 f8 01             	cmp    eax,0x1
   24846:	75 12                	jne    2485a <testWPBit+0x88>
/home/yogi/src/os/chrisOS/src/init/init.c:223
    printk("WP bit works!\n");
   24848:	83 ec 0c             	sub    esp,0xc
   2484b:	68 c8 4c 08 00       	push   0x84cc8
   24850:	e8 b2 2c 00 00       	call   27507 <printk>
   24855:	83 c4 10             	add    esp,0x10
   24858:	eb 10                	jmp    2486a <testWPBit+0x98>
/home/yogi/src/os/chrisOS/src/init/init.c:225
  else
      printk("WP bit does not work\n");
   2485a:	83 ec 0c             	sub    esp,0xc
   2485d:	68 d7 4c 08 00       	push   0x84cd7
   24862:	e8 a0 2c 00 00       	call   27507 <printk>
   24867:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:227
  //Can't unmap page 0x0 or the memory manager will see it as free space, so set it read-only again
  __asm__("mov eax,0x0\n mov [0x0],eax\n");    //purposely write address 0 which we made "read only"
   2486a:	b8 00 00 00 00       	mov    eax,0x0
   2486f:	a3 00 00 00 00       	mov    ds:0x0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:228
  kSetPhysicalRangeRO(0x0,0xFFF,true);
   24874:	83 ec 04             	sub    esp,0x4
   24877:	6a 01                	push   0x1
   24879:	68 ff 0f 00 00       	push   0xfff
   2487e:	6a 00                	push   0x0
   24880:	e8 8c d2 fe ff       	call   11b11 <kSetPhysicalRangeRO>
   24885:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:229
}
   24888:	90                   	nop
   24889:	c9                   	leave  
   2488a:	c3                   	ret    

0002488b <kernel_main>:
kernel_main():
/home/yogi/src/os/chrisOS/src/init/init.c:231

void HIGH_CODE_SECTION kernel_main(/*multiboot_info_t* mbd, unsigned int magic*/) {
   2488b:	55                   	push   ebp
   2488c:	89 e5                	mov    ebp,esp
   2488e:	56                   	push   esi
   2488f:	53                   	push   ebx
   24890:	81 ec d0 00 00 00    	sub    esp,0xd0
/home/yogi/src/os/chrisOS/src/init/init.c:237
    
char currTime[150];
struct tm theDateTime;
    //Zero out all of the memory we will be using as rebooting a computer doesn't necessarily clear memory
    //memset(0x200000,0,0x1000000);
__asm__("sgdt [eax]\n"::"a" (&kernelGDT));
   24896:	b8 88 49 12 00       	mov    eax,0x124988
   2489b:	0f 01 00             	sgdtd  [eax]
/home/yogi/src/os/chrisOS/src/init/init.c:238
gdt_init();
   2489e:	e8 96 f6 ff ff       	call   23f39 <gdt_init>
/home/yogi/src/os/chrisOS/src/init/init.c:239
    kTicksPerSecond=TICKS_PER_SECOND;
   248a3:	c7 05 c0 47 12 00 64 	mov    DWORD PTR ds:0x1247c0,0x64
   248aa:	00 00 00 
/home/yogi/src/os/chrisOS/src/init/init.c:240
    kTermInit();
   248ad:	e8 98 39 ff ff       	call   1824a <kTermInit>
/home/yogi/src/os/chrisOS/src/init/init.c:241
    kInitDone=false;
   248b2:	c6 05 e0 47 12 00 00 	mov    BYTE PTR ds:0x1247e0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:242
    kPagingInitDone=false;
   248b9:	c6 05 e1 47 12 00 00 	mov    BYTE PTR ds:0x1247e1,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:243
    kTicksPerMS=1000/kTicksPerSecond;
   248c0:	8b 35 c0 47 12 00    	mov    esi,DWORD PTR ds:0x1247c0
   248c6:	b8 e8 03 00 00       	mov    eax,0x3e8
   248cb:	99                   	cdq    
   248cc:	f7 fe                	idiv   esi
   248ce:	a3 c4 47 12 00       	mov    ds:0x1247c4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:244
    kDebugStartsNow=false;
   248d3:	c6 05 f0 47 12 00 00 	mov    BYTE PTR ds:0x1247f0,0x0
/home/yogi/src/os/chrisOS/src/init/init.c:245
    memset(kATADeviceInfo,0x0,sizeof(struct ataDeviceInfo_t)*20);
   248da:	a1 00 48 12 00       	mov    eax,ds:0x124800
   248df:	83 ec 04             	sub    esp,0x4
   248e2:	68 fc 30 00 00       	push   0x30fc
   248e7:	6a 00                	push   0x0
   248e9:	50                   	push   eax
   248ea:	e8 d2 0a 00 00       	call   253c1 <memset>
   248ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:246
    memset(kGDTSlotAvailableInd,0xFF,GDT_TABLE_SIZE);
   248f2:	a1 2c 49 12 00       	mov    eax,ds:0x12492c
   248f7:	83 ec 04             	sub    esp,0x4
   248fa:	68 00 08 00 00       	push   0x800
   248ff:	68 ff 00 00 00       	push   0xff
   24904:	50                   	push   eax
   24905:	e8 b7 0a 00 00       	call   253c1 <memset>
   2490a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:247
    memset(kTaskSlotAvailableInd,0xFF,TASK_TABLE_SIZE);
   2490d:	a1 30 49 12 00       	mov    eax,ds:0x124930
   24912:	83 ec 04             	sub    esp,0x4
   24915:	68 00 00 19 00       	push   0x190000
   2491a:	68 ff 00 00 00       	push   0xff
   2491f:	50                   	push   eax
   24920:	e8 9c 0a 00 00       	call   253c1 <memset>
   24925:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:249

    __asm__("mov esp,0xff00\n" /*\
   24928:	bc 00 ff 00 00       	mov    esp,0xff00
/home/yogi/src/os/chrisOS/src/init/init.c:252
            "mov eax,0\nmov dr6,eax":::"eax"*/);
    /* Initialize terminal interface */
    *kTicksSinceStart=0;
   2492d:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   24932:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/init.c:253
    identify_data_sizes(&kDataSizes);
   24938:	83 ec 0c             	sub    esp,0xc
   2493b:	68 94 47 12 00       	push   0x124794
   24940:	e8 4a 0a 00 00       	call   2538f <identify_data_sizes>
   24945:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:254
    terminal_clear();
   24948:	e8 f5 34 ff ff       	call   17e42 <terminal_clear>
/home/yogi/src/os/chrisOS/src/init/init.c:255
    printk("Booting ...\n");
   2494d:	83 ec 0c             	sub    esp,0xc
   24950:	68 ed 4c 08 00       	push   0x84ced
   24955:	e8 ad 2b 00 00       	call   27507 <printk>
   2495a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:257

    quietHardware();
   2495d:	e8 71 f7 ff ff       	call   240d3 <quietHardware>
/home/yogi/src/os/chrisOS/src/init/init.c:258
    int lLowMemKB = getInt12Memory();
   24962:	e8 06 c7 fd ff       	call   106d <getInt12Memory>
   24967:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/init.c:259
    kE820Status = isE820Available(); //
   2496a:	e8 b9 c6 fd ff       	call   1028 <isE820Available>
   2496f:	a3 84 45 12 00       	mov    ds:0x124584,eax
/home/yogi/src/os/chrisOS/src/init/init.c:260
    if (kE820Status==0x534d4150)
   24974:	a1 84 45 12 00       	mov    eax,ds:0x124584
   24979:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   2497e:	75 0b                	jne    2498b <kernel_main+0x100>
/home/yogi/src/os/chrisOS/src/init/init.c:261
        kE820RecordCount = getE820Memory_asm();
   24980:	e8 b5 c8 fd ff       	call   123a <getE820Memory_asm>
   24985:	66 a3 90 45 12 00    	mov    ds:0x124590,ax
/home/yogi/src/os/chrisOS/src/init/init.c:263
    //Move the SMAP table from low memory up to where we want it
    memcpy(smap_table, lowSmapTablePtr, kE820RecordCount*24);
   2498b:	0f b7 05 90 45 12 00 	movzx  eax,WORD PTR ds:0x124590
   24992:	0f bf d0             	movsx  edx,ax
   24995:	89 d0                	mov    eax,edx
   24997:	01 c0                	add    eax,eax
   24999:	01 d0                	add    eax,edx
   2499b:	c1 e0 03             	shl    eax,0x3
   2499e:	89 c1                	mov    ecx,eax
   249a0:	8b 15 68 13 00 00    	mov    edx,DWORD PTR ds:0x1368
   249a6:	a1 80 45 12 00       	mov    eax,ds:0x124580
   249ab:	83 ec 04             	sub    esp,0x4
   249ae:	51                   	push   ecx
   249af:	52                   	push   edx
   249b0:	50                   	push   eax
   249b1:	e8 b6 14 00 00       	call   25e6c <memcpy>
   249b6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:264
    idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   249b9:	83 ec 08             	sub    esp,0x8
   249bc:	6a 20                	push   0x20
   249be:	68 e0 a3 09 00       	push   0x9a3e0
   249c3:	e8 1d 44 ff ff       	call   18de5 <idt_init>
   249c8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:265
    init_PIT(kTicksPerSecond);
   249cb:	a1 c0 47 12 00       	mov    eax,ds:0x1247c0
   249d0:	83 ec 0c             	sub    esp,0xc
   249d3:	50                   	push   eax
   249d4:	e8 b6 c7 fd ff       	call   118f <init_PIT>
   249d9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:267
    //Remap the exception vectors (0x0-0x1f)
    PIC_remap(0x00+PIC_REMAP_OFFSET, 0x8+PIC_REMAP_OFFSET);
   249dc:	83 ec 08             	sub    esp,0x8
   249df:	6a 28                	push   0x28
   249e1:	6a 20                	push   0x20
   249e3:	e8 12 53 ff ff       	call   19cfa <PIC_remap>
   249e8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:268
    IRQ_clear_mask(0);
   249eb:	83 ec 0c             	sub    esp,0xc
   249ee:	6a 00                	push   0x0
   249f0:	e8 a3 52 ff ff       	call   19c98 <IRQ_clear_mask>
   249f5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:269
    IRQ_clear_mask(1);
   249f8:	83 ec 0c             	sub    esp,0xc
   249fb:	6a 01                	push   0x1
   249fd:	e8 96 52 ff ff       	call   19c98 <IRQ_clear_mask>
   24a02:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:270
    initSystemDate();
   24a05:	e8 0e 0b 00 00       	call   25518 <initSystemDate>
/home/yogi/src/os/chrisOS/src/init/init.c:271
    gmtime_r(&kSystemStartTime,&theDateTime);
   24a0a:	83 ec 08             	sub    esp,0x8
   24a0d:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   24a13:	50                   	push   eax
   24a14:	68 c8 47 12 00       	push   0x1247c8
   24a19:	e8 4b 31 00 00       	call   27b69 <gmtime_r>
   24a1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:272
    printk("Boot: ");
   24a21:	83 ec 0c             	sub    esp,0xc
   24a24:	68 fa 4c 08 00       	push   0x84cfa
   24a29:	e8 d9 2a 00 00       	call   27507 <printk>
   24a2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:273
    gets(kBootCmd,150);
   24a31:	83 ec 08             	sub    esp,0x8
   24a34:	68 96 00 00 00       	push   0x96
   24a39:	68 00 a4 09 00       	push   0x9a400
   24a3e:	e8 76 c8 fe ff       	call   112b9 <gets>
   24a43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:274
    kBootParamCount=parseParamsShell(kBootCmd, kBootParams, MAX_PARAM_COUNT*MAX_PARAM_WIDTH);
   24a46:	83 ec 04             	sub    esp,0x4
   24a49:	68 00 14 00 00       	push   0x1400
   24a4e:	68 e0 8f 09 00       	push   0x98fe0
   24a53:	68 00 a4 09 00       	push   0x9a400
   24a58:	e8 57 da fe ff       	call   124b4 <parseParamsShell>
   24a5d:	83 c4 10             	add    esp,0x10
   24a60:	a3 c8 8f 09 00       	mov    ds:0x98fc8,eax
/home/yogi/src/os/chrisOS/src/init/init.c:275
    strftime((char*)&currTime, 50, "%H:%M:%S on %m/%d/%y", &theDateTime);
   24a65:	8d 85 30 ff ff ff    	lea    eax,[ebp-0xd0]
   24a6b:	50                   	push   eax
   24a6c:	68 01 4d 08 00       	push   0x84d01
   24a71:	6a 32                	push   0x32
   24a73:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24a79:	50                   	push   eax
   24a7a:	e8 31 bc fe ff       	call   106b0 <strftime>
   24a7f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:277
    //wait(50);
    printk("chrisOS %s booting @%s",  COMPLETE_VERSION, &currTime);
   24a82:	83 ec 04             	sub    esp,0x4
   24a85:	8d 85 5e ff ff ff    	lea    eax,[ebp-0xa2]
   24a8b:	50                   	push   eax
   24a8c:	68 16 4d 08 00       	push   0x84d16
   24a91:	68 2a 4d 08 00       	push   0x84d2a
   24a96:	e8 6c 2a 00 00       	call   27507 <printk>
   24a9b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:279
#ifndef DEBUG_NONE
    if (kDebugLevel > 0)
   24a9e:	a1 78 48 12 00       	mov    eax,ds:0x124878
   24aa3:	85 c0                	test   eax,eax
   24aa5:	74 16                	je     24abd <kernel_main+0x232>
/home/yogi/src/os/chrisOS/src/init/init.c:280
        printk ("(debug=%X)", kDebugLevel);
   24aa7:	a1 78 48 12 00       	mov    eax,ds:0x124878
   24aac:	83 ec 08             	sub    esp,0x8
   24aaf:	50                   	push   eax
   24ab0:	68 41 4d 08 00       	push   0x84d41
   24ab5:	e8 4d 2a 00 00       	call   27507 <printk>
   24aba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:282
#endif
    printk("\n");
   24abd:	83 ec 0c             	sub    esp,0xc
   24ac0:	68 4c 4d 08 00       	push   0x84d4c
   24ac5:	e8 3d 2a 00 00       	call   27507 <printk>
   24aca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:283
    if (kE820Status==0x534d4150)
   24acd:	a1 84 45 12 00       	mov    eax,ds:0x124584
   24ad2:	3d 50 41 4d 53       	cmp    eax,0x534d4150
   24ad7:	75 4f                	jne    24b28 <kernel_main+0x29d>
/home/yogi/src/os/chrisOS/src/init/init.c:285
    {
        printk("E820: available (%08X), translating ...", kE820Status);
   24ad9:	a1 84 45 12 00       	mov    eax,ds:0x124584
   24ade:	83 ec 08             	sub    esp,0x8
   24ae1:	50                   	push   eax
   24ae2:	68 50 4d 08 00       	push   0x84d50
   24ae7:	e8 1b 2a 00 00       	call   27507 <printk>
   24aec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:286
        kE820MemoryBytes = sum_e820_usable_memory(smap_table,kE820RecordCount);
   24aef:	0f b7 05 90 45 12 00 	movzx  eax,WORD PTR ds:0x124590
   24af6:	0f bf d0             	movsx  edx,ax
   24af9:	a1 80 45 12 00       	mov    eax,ds:0x124580
   24afe:	83 ec 08             	sub    esp,0x8
   24b01:	52                   	push   edx
   24b02:	50                   	push   eax
   24b03:	e8 0d f2 ff ff       	call   23d15 <sum_e820_usable_memory>
   24b08:	83 c4 10             	add    esp,0x10
   24b0b:	a3 88 45 12 00       	mov    ds:0x124588,eax
   24b10:	89 15 8c 45 12 00    	mov    DWORD PTR ds:0x12458c,edx
/home/yogi/src/os/chrisOS/src/init/init.c:287
        printk("done\n");
   24b16:	83 ec 0c             	sub    esp,0xc
   24b19:	68 78 4d 08 00       	push   0x84d78
   24b1e:	e8 e4 29 00 00       	call   27507 <printk>
   24b23:	83 c4 10             	add    esp,0x10
   24b26:	eb 16                	jmp    24b3e <kernel_main+0x2b3>
/home/yogi/src/os/chrisOS/src/init/init.c:291
        //print_e820_map(smap_table, kE820RecordCount);
    }
    else
        printk("E820: not available (%08X ... looking for alternatives.\n", kE820Status);
   24b28:	a1 84 45 12 00       	mov    eax,ds:0x124584
   24b2d:	83 ec 08             	sub    esp,0x8
   24b30:	50                   	push   eax
   24b31:	68 80 4d 08 00       	push   0x84d80
   24b36:	e8 cc 29 00 00       	call   27507 <printk>
   24b3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:293

    printk("E820: Usable memory: Low=%6d (INT12), Total=%10d (E820)\n",lLowMemKB * 1024, kE820MemoryBytes);
   24b3e:	a1 88 45 12 00       	mov    eax,ds:0x124588
   24b43:	8b 15 8c 45 12 00    	mov    edx,DWORD PTR ds:0x12458c
   24b49:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   24b4c:	c1 e1 0a             	shl    ecx,0xa
   24b4f:	52                   	push   edx
   24b50:	50                   	push   eax
   24b51:	51                   	push   ecx
   24b52:	68 bc 4d 08 00       	push   0x84dbc
   24b57:	e8 ab 29 00 00       	call   27507 <printk>
   24b5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:294
    if (kE820MemoryBytes < MINIMUM_USABLE_MEMORY)
   24b5f:	a1 88 45 12 00       	mov    eax,ds:0x124588
   24b64:	8b 15 8c 45 12 00    	mov    edx,DWORD PTR ds:0x12458c
   24b6a:	83 fa 00             	cmp    edx,0x0
   24b6d:	77 3b                	ja     24baa <kernel_main+0x31f>
   24b6f:	83 fa 00             	cmp    edx,0x0
   24b72:	72 07                	jb     24b7b <kernel_main+0x2f0>
   24b74:	3d ff ff ff 0f       	cmp    eax,0xfffffff
   24b79:	77 2f                	ja     24baa <kernel_main+0x31f>
/home/yogi/src/os/chrisOS/src/init/init.c:296
    {
        printk("\n\nE820: Either the available memory is less than the minimum required of %d MB\nor memory capacity cannot be determined\n.", MINIMUM_USABLE_MEMORY / 1024 / 1024);
   24b7b:	83 ec 08             	sub    esp,0x8
   24b7e:	68 00 01 00 00       	push   0x100
   24b83:	68 f8 4d 08 00       	push   0x84df8
   24b88:	e8 7a 29 00 00       	call   27507 <printk>
   24b8d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:297
        printk("3820: Ignore? ");
   24b90:	83 ec 0c             	sub    esp,0xc
   24b93:	68 71 4e 08 00       	push   0x84e71
   24b98:	e8 6a 29 00 00       	call   27507 <printk>
   24b9d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:299
        
        while (waitForKeyboardKey()!='y')
   24ba0:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:299 (discriminator 1)
   24ba1:	e8 82 c6 fe ff       	call   11228 <waitForKeyboardKey>
   24ba6:	3c 79                	cmp    al,0x79
   24ba8:	75 f7                	jne    24ba1 <kernel_main+0x316>
/home/yogi/src/os/chrisOS/src/init/init.c:302
        {}
    }
    __asm__ ("mov eax,%0\n push eax\n pop esp\n"::"r" (STACK_BASE_ADDRESS):"eax");
   24baa:	ba 00 ff ff 00       	mov    edx,0xffff00
   24baf:	89 d0                	mov    eax,edx
   24bb1:	50                   	push   eax
   24bb2:	5c                   	pop    esp
/home/yogi/src/os/chrisOS/src/init/init.c:303
    detect_cpu();
   24bb3:	e8 9c e5 ff ff       	call   23154 <detect_cpu>
/home/yogi/src/os/chrisOS/src/init/init.c:304
    printk("CPU: Detected CPU: %s\n", kcpuInfo.brand_name);
   24bb8:	83 ec 08             	sub    esp,0x8
   24bbb:	68 b2 46 12 00       	push   0x1246b2
   24bc0:	68 80 4e 08 00       	push   0x84e80
   24bc5:	e8 3d 29 00 00       	call   27507 <printk>
   24bca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:305
    identifyCPUFeatures(&kCPUFeatures);
   24bcd:	83 ec 0c             	sub    esp,0xc
   24bd0:	68 84 48 12 00       	push   0x124884
   24bd5:	e8 22 41 ff ff       	call   18cfc <identifyCPUFeatures>
   24bda:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:306
    if (apicCheckFor())
   24bdd:	e8 a0 3b ff ff       	call   18782 <apicCheckFor>
   24be2:	84 c0                	test   al,al
   24be4:	0f 84 ad 00 00 00    	je     24c97 <kernel_main+0x40c>
/home/yogi/src/os/chrisOS/src/init/init.c:308
    {
        kCPU[0].apicID=apciGetAPICID(0);
   24bea:	83 ec 0c             	sub    esp,0xc
   24bed:	6a 00                	push   0x0
   24bef:	e8 e7 3b ff ff       	call   187db <apciGetAPICID>
   24bf4:	83 c4 10             	add    esp,0x10
   24bf7:	0f b6 c0             	movzx  eax,al
   24bfa:	a3 a0 48 12 00       	mov    ds:0x1248a0,eax
/home/yogi/src/os/chrisOS/src/init/init.c:309
        kCPU[0].registerBase=apicGetAPICBase();
   24bff:	e8 ec 3b ff ff       	call   187f0 <apicGetAPICBase>
   24c04:	a3 a4 48 12 00       	mov    ds:0x1248a4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:310
        kCPU[0].ticksPerSecond=apicGetHZ();
   24c09:	e8 27 3d ff ff       	call   18935 <apicGetHZ>
   24c0e:	ba 00 00 00 00       	mov    edx,0x0
   24c13:	a3 a8 48 12 00       	mov    ds:0x1248a8,eax
   24c18:	89 15 ac 48 12 00    	mov    DWORD PTR ds:0x1248ac,edx
/home/yogi/src/os/chrisOS/src/init/init.c:312
        //IRQ_set_mask(0);
        printk("APIC: %s APIC %u Found, address %08X, initializing ... ", acpiGetAPICVersion()==0?"Discrete":"Integrated", kCPU[0].apicID, kCPU[0].registerBase);
   24c1e:	8b 35 a4 48 12 00    	mov    esi,DWORD PTR ds:0x1248a4
   24c24:	8b 1d a0 48 12 00    	mov    ebx,DWORD PTR ds:0x1248a0
   24c2a:	e8 97 3b ff ff       	call   187c6 <acpiGetAPICVersion>
   24c2f:	84 c0                	test   al,al
   24c31:	75 07                	jne    24c3a <kernel_main+0x3af>
/home/yogi/src/os/chrisOS/src/init/init.c:312 (discriminator 1)
   24c33:	b8 97 4e 08 00       	mov    eax,0x84e97
   24c38:	eb 05                	jmp    24c3f <kernel_main+0x3b4>
/home/yogi/src/os/chrisOS/src/init/init.c:312 (discriminator 2)
   24c3a:	b8 a0 4e 08 00       	mov    eax,0x84ea0
/home/yogi/src/os/chrisOS/src/init/init.c:312 (discriminator 4)
   24c3f:	56                   	push   esi
   24c40:	53                   	push   ebx
   24c41:	50                   	push   eax
   24c42:	68 ac 4e 08 00       	push   0x84eac
   24c47:	e8 bb 28 00 00       	call   27507 <printk>
   24c4c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:313 (discriminator 4)
        if (apicIsEnabled())
   24c4f:	e8 49 3c ff ff       	call   1889d <apicIsEnabled>
   24c54:	84 c0                	test   al,al
   24c56:	74 10                	je     24c68 <kernel_main+0x3dd>
/home/yogi/src/os/chrisOS/src/init/init.c:314
            printk("enabled ... ");
   24c58:	83 ec 0c             	sub    esp,0xc
   24c5b:	68 e4 4e 08 00       	push   0x84ee4
   24c60:	e8 a2 28 00 00       	call   27507 <printk>
   24c65:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:315
        printk("done\n");
   24c68:	83 ec 0c             	sub    esp,0xc
   24c6b:	68 78 4d 08 00       	push   0x84d78
   24c70:	e8 92 28 00 00       	call   27507 <printk>
   24c75:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:316
        printk("APIC: Timer running at %u hz.\n",kCPU[0].ticksPerSecond);
   24c78:	a1 a8 48 12 00       	mov    eax,ds:0x1248a8
   24c7d:	8b 15 ac 48 12 00    	mov    edx,DWORD PTR ds:0x1248ac
   24c83:	83 ec 04             	sub    esp,0x4
   24c86:	52                   	push   edx
   24c87:	50                   	push   eax
   24c88:	68 f4 4e 08 00       	push   0x84ef4
   24c8d:	e8 75 28 00 00       	call   27507 <printk>
   24c92:	83 c4 10             	add    esp,0x10
   24c95:	eb 10                	jmp    24ca7 <kernel_main+0x41c>
/home/yogi/src/os/chrisOS/src/init/init.c:319
    }
    else
        printk("APIC: not found\n");
   24c97:	83 ec 0c             	sub    esp,0xc
   24c9a:	68 13 4f 08 00       	push   0x84f13
   24c9f:	e8 63 28 00 00       	call   27507 <printk>
   24ca4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:320
    printk("TSC: ticks per 10 = %u\n", tscGetTicksPerSecond());
   24ca7:	e8 7f 3d ff ff       	call   18a2b <tscGetTicksPerSecond>
   24cac:	83 ec 08             	sub    esp,0x8
   24caf:	50                   	push   eax
   24cb0:	68 24 4f 08 00       	push   0x84f24
   24cb5:	e8 4d 28 00 00       	call   27507 <printk>
   24cba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:322
#ifndef DISABLE_PAGING
    kCPU[0].registerBase=apicGetAPICBase();
   24cbd:	e8 2e 3b ff ff       	call   187f0 <apicGetAPICBase>
   24cc2:	a3 a4 48 12 00       	mov    ds:0x1248a4,eax
/home/yogi/src/os/chrisOS/src/init/init.c:323
    printk("PAGING: enabling 4k paging\n");
   24cc7:	83 ec 0c             	sub    esp,0xc
   24cca:	68 3c 4f 08 00       	push   0x84f3c
   24ccf:	e8 33 28 00 00       	call   27507 <printk>
   24cd4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:324
    initializeKernelPaging();
   24cd7:	e8 08 02 00 00       	call   24ee4 <initializeKernelPaging>
/home/yogi/src/os/chrisOS/src/init/init.c:325
    printk("PAGING: remapping APIC from 0x%08X to 0x%08X\n", kCPU[0].registerBase, kAPICRegisterRemapAddress);
   24cdc:	8b 15 70 48 12 00    	mov    edx,DWORD PTR ds:0x124870
   24ce2:	a1 a4 48 12 00       	mov    eax,ds:0x1248a4
   24ce7:	83 ec 04             	sub    esp,0x4
   24cea:	52                   	push   edx
   24ceb:	50                   	push   eax
   24cec:	68 58 4f 08 00       	push   0x84f58
   24cf1:	e8 11 28 00 00       	call   27507 <printk>
   24cf6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:327
    //map APIC address 0xFEE00000 to 0x825000
    kMapPage(kAPICRegisterRemapAddress, kCPU[0].registerBase,0x13);  //0x63 + cache disabled
   24cf9:	8b 15 a4 48 12 00    	mov    edx,DWORD PTR ds:0x1248a4
   24cff:	a1 70 48 12 00       	mov    eax,ds:0x124870
   24d04:	83 ec 04             	sub    esp,0x4
   24d07:	6a 13                	push   0x13
   24d09:	52                   	push   edx
   24d0a:	50                   	push   eax
   24d0b:	e8 78 ca fe ff       	call   11788 <kMapPage>
   24d10:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:328
    kSetPhysicalRangeRO(0x0,0xFFF,true);
   24d13:	83 ec 04             	sub    esp,0x4
   24d16:	6a 01                	push   0x1
   24d18:	68 ff 0f 00 00       	push   0xfff
   24d1d:	6a 00                	push   0x0
   24d1f:	e8 ed cd fe ff       	call   11b11 <kSetPhysicalRangeRO>
   24d24:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:329
    testWPBit();
   24d27:	e8 a6 fa ff ff       	call   247d2 <testWPBit>
/home/yogi/src/os/chrisOS/src/init/init.c:330
    kPagingInitDone=true;
   24d2c:	c6 05 e1 47 12 00 01 	mov    BYTE PTR ds:0x1247e1,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:332
#endif
    printk("CLOCK: tick frequency is %uhz\n",kTicksPerSecond);
   24d33:	a1 c0 47 12 00       	mov    eax,ds:0x1247c0
   24d38:	83 ec 08             	sub    esp,0x8
   24d3b:	50                   	push   eax
   24d3c:	68 88 4f 08 00       	push   0x84f88
   24d41:	e8 c1 27 00 00       	call   27507 <printk>
   24d46:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:333
    printk("CLOCK: testing ... "); wait(100); printk("works\n");
   24d49:	83 ec 0c             	sub    esp,0xc
   24d4c:	68 a7 4f 08 00       	push   0x84fa7
   24d51:	e8 b1 27 00 00       	call   27507 <printk>
   24d56:	83 c4 10             	add    esp,0x10
   24d59:	83 ec 0c             	sub    esp,0xc
   24d5c:	6a 64                	push   0x64
   24d5e:	e8 e3 39 00 00       	call   28746 <wait>
   24d63:	83 c4 10             	add    esp,0x10
   24d66:	83 ec 0c             	sub    esp,0xc
   24d69:	68 bb 4f 08 00       	push   0x84fbb
   24d6e:	e8 94 27 00 00       	call   27507 <printk>
   24d73:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:336

#ifdef __SMP__
    if (ParamExists(kBootParams,"nosmp",kBootParamCount))
   24d76:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24d7b:	83 ec 04             	sub    esp,0x4
   24d7e:	50                   	push   eax
   24d7f:	68 c2 4f 08 00       	push   0x84fc2
   24d84:	68 e0 8f 09 00       	push   0x98fe0
   24d89:	e8 f8 f9 ff ff       	call   24786 <ParamExists>
   24d8e:	83 c4 10             	add    esp,0x10
   24d91:	84 c0                	test   al,al
   24d93:	74 12                	je     24da7 <kernel_main+0x51c>
/home/yogi/src/os/chrisOS/src/init/init.c:337
        printk("SMP: No AP processor startup per 'nosmp' parameter\n");
   24d95:	83 ec 0c             	sub    esp,0xc
   24d98:	68 c8 4f 08 00       	push   0x84fc8
   24d9d:	e8 65 27 00 00       	call   27507 <printk>
   24da2:	83 c4 10             	add    esp,0x10
   24da5:	eb 77                	jmp    24e1e <kernel_main+0x593>
/home/yogi/src/os/chrisOS/src/init/init.c:340
    else
    {
        printk("SMP: Initializing, ");
   24da7:	83 ec 0c             	sub    esp,0xc
   24daa:	68 fc 4f 08 00       	push   0x84ffc
   24daf:	e8 53 27 00 00       	call   27507 <printk>
   24db4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:341
        printk("%u MP records parsed\n",mpInit());
   24db7:	e8 6b 55 ff ff       	call   1a327 <mpInit>
   24dbc:	83 ec 08             	sub    esp,0x8
   24dbf:	50                   	push   eax
   24dc0:	68 10 50 08 00       	push   0x85010
   24dc5:	e8 3d 27 00 00       	call   27507 <printk>
   24dca:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:343
        //cursorUpdateBiosCursor();
        printk("SMP: Starting up AP processors\n");
   24dcd:	83 ec 0c             	sub    esp,0xc
   24dd0:	68 28 50 08 00       	push   0x85028
   24dd5:	e8 2d 27 00 00       	call   27507 <printk>
   24dda:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:344
        AP_startup();
   24ddd:	e8 e4 c7 fd ff       	call   15c6 <AP_startup>
/home/yogi/src/os/chrisOS/src/init/init.c:345
        wait(500);
   24de2:	83 ec 0c             	sub    esp,0xc
   24de5:	68 f4 01 00 00       	push   0x1f4
   24dea:	e8 57 39 00 00       	call   28746 <wait>
   24def:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:346
        printk("SMP: CPUs 2 thru %u (of %u total) started... done\n",smpBootCPUsStarted+1, smpBootCPUCount+1);
   24df2:	0f b6 05 a3 15 00 00 	movzx  eax,BYTE PTR ds:0x15a3
   24df9:	0f b6 c0             	movzx  eax,al
   24dfc:	8d 50 01             	lea    edx,[eax+0x1]
   24dff:	0f b6 05 a5 15 00 00 	movzx  eax,BYTE PTR ds:0x15a5
   24e06:	0f b6 c0             	movzx  eax,al
   24e09:	83 c0 01             	add    eax,0x1
   24e0c:	83 ec 04             	sub    esp,0x4
   24e0f:	52                   	push   edx
   24e10:	50                   	push   eax
   24e11:	68 48 50 08 00       	push   0x85048
   24e16:	e8 ec 26 00 00       	call   27507 <printk>
   24e1b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:351
        //if (kIOAPICPtr)
        //    kMapPage(CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS, (uintptr_t)kIOAPICPtr, 0x13);
    }
#endif
    if (ParamExists(kBootParams,"nopci",kBootParamCount))
   24e1e:	a1 c8 8f 09 00       	mov    eax,ds:0x98fc8
   24e23:	83 ec 04             	sub    esp,0x4
   24e26:	50                   	push   eax
   24e27:	68 7b 50 08 00       	push   0x8507b
   24e2c:	68 e0 8f 09 00       	push   0x98fe0
   24e31:	e8 50 f9 ff ff       	call   24786 <ParamExists>
   24e36:	83 c4 10             	add    esp,0x10
   24e39:	84 c0                	test   al,al
   24e3b:	74 12                	je     24e4f <kernel_main+0x5c4>
/home/yogi/src/os/chrisOS/src/init/init.c:352
        printk("PCI: No scanning per parameter 'nopci'\n");
   24e3d:	83 ec 0c             	sub    esp,0xc
   24e40:	68 84 50 08 00       	push   0x85084
   24e45:	e8 bd 26 00 00       	call   27507 <printk>
   24e4a:	83 c4 10             	add    esp,0x10
   24e4d:	eb 6e                	jmp    24ebd <kernel_main+0x632>
/home/yogi/src/os/chrisOS/src/init/init.c:355
    else
    {
        printk("PCI: initializing ...");
   24e4f:	83 ec 0c             	sub    esp,0xc
   24e52:	68 ac 50 08 00       	push   0x850ac
   24e57:	e8 ab 26 00 00       	call   27507 <printk>
   24e5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:356
        pciInitialize();
   24e5f:	e8 c1 2b ff ff       	call   17a25 <pciInitialize>
/home/yogi/src/os/chrisOS/src/init/init.c:357
        printk(" found %u %s, %u devices (%u bridges)\n",kPCIBusCount, kPCIBusCount<=1?"bus":"busses", kPCIDeviceCount, kPCIBridgeCount);
   24e64:	0f b6 05 ed 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ed
   24e6b:	0f b6 c8             	movzx  ecx,al
   24e6e:	0f b6 05 ec 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ec
   24e75:	0f b6 d0             	movzx  edx,al
   24e78:	0f b6 05 ef 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ef
   24e7f:	3c 01                	cmp    al,0x1
   24e81:	77 07                	ja     24e8a <kernel_main+0x5ff>
/home/yogi/src/os/chrisOS/src/init/init.c:357 (discriminator 1)
   24e83:	bb c2 50 08 00       	mov    ebx,0x850c2
   24e88:	eb 05                	jmp    24e8f <kernel_main+0x604>
/home/yogi/src/os/chrisOS/src/init/init.c:357 (discriminator 2)
   24e8a:	bb c6 50 08 00       	mov    ebx,0x850c6
/home/yogi/src/os/chrisOS/src/init/init.c:357 (discriminator 4)
   24e8f:	0f b6 05 ef 47 12 00 	movzx  eax,BYTE PTR ds:0x1247ef
   24e96:	0f b6 c0             	movzx  eax,al
   24e99:	83 ec 0c             	sub    esp,0xc
   24e9c:	51                   	push   ecx
   24e9d:	52                   	push   edx
   24e9e:	53                   	push   ebx
   24e9f:	50                   	push   eax
   24ea0:	68 d0 50 08 00       	push   0x850d0
   24ea5:	e8 5d 26 00 00       	call   27507 <printk>
   24eaa:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/init.c:358 (discriminator 4)
        printk("PCI: initialization complete ...\n");
   24ead:	83 ec 0c             	sub    esp,0xc
   24eb0:	68 f8 50 08 00       	push   0x850f8
   24eb5:	e8 4d 26 00 00       	call   27507 <printk>
   24eba:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/init.c:360
    }
    doHDSetup();
   24ebd:	e8 35 f2 ff ff       	call   240f7 <doHDSetup>
/home/yogi/src/os/chrisOS/src/init/init.c:361
kInitDone = true;
   24ec2:	c6 05 e0 47 12 00 01 	mov    BYTE PTR ds:0x1247e0,0x1
/home/yogi/src/os/chrisOS/src/init/init.c:362
    goto overStuff; /*******************************************/
   24ec9:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:414 (discriminator 1)
        //kpagingUpdatePresentFlagA(0x0,false);
//    __asm__("mov eax,0xdeadbead\n mov [0x0100],eax\n");    //purposely read address 0 which we made "read only"
        
//        terminal_clear();
MAINLOOPv:
        __asm__("nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n nop\n");
   24eca:	90                   	nop
   24ecb:	90                   	nop
   24ecc:	90                   	nop
   24ecd:	90                   	nop
   24ece:	90                   	nop
   24ecf:	90                   	nop
   24ed0:	90                   	nop
   24ed1:	90                   	nop
   24ed2:	90                   	nop
   24ed3:	90                   	nop
   24ed4:	90                   	nop
   24ed5:	90                   	nop
   24ed6:	90                   	nop
   24ed7:	90                   	nop
   24ed8:	90                   	nop
   24ed9:	90                   	nop
   24eda:	90                   	nop
   24edb:	90                   	nop
   24edc:	90                   	nop
/home/yogi/src/os/chrisOS/src/init/init.c:418 (discriminator 1)
//    char a[255];
//    gets(a,255);
//    if (!strncmp(a,"debug",5))
        biShell();
   24edd:	e8 2d e7 fe ff       	call   1360f <biShell>
/home/yogi/src/os/chrisOS/src/init/init.c:422 (discriminator 1)
//    if (a>0)
//        printk("%c",a);
//    __asm__("hlt\n");
    goto MAINLOOPv;
   24ee2:	eb e6                	jmp    24eca <kernel_main+0x63f>

00024ee4 <initializeKernelPaging>:
initializeKernelPaging():
/home/yogi/src/os/chrisOS/src/init/initPaging.c:13
extern struct idt_entry kInitialIDT[0x30];
extern struct idt_ptr kInitialIDTReg;
extern struct gdt_ptr kernelGDT;

void initializeKernelPaging()
{
   24ee4:	55                   	push   ebp
   24ee5:	89 e5                	mov    ebp,esp
   24ee7:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/initPaging.c:18
        uint32_t *ptr;
        uint32_t *ptrT;
        uint32_t *ptr2;
        uint32_t *kKernelPageTables;
        uint16_t tempEntries = (0xFFFFFFFF/0x400000)+1;  //Map entire 4GB memory space 
   24eea:	66 c7 45 e6 00 04    	mov    WORD PTR [ebp-0x1a],0x400
/home/yogi/src/os/chrisOS/src/init/initPaging.c:21

       
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
   24ef0:	83 ec 08             	sub    esp,0x8
   24ef3:	68 1c 51 08 00       	push   0x8511c
   24ef8:	6a 20                	push   0x20
   24efa:	e8 28 26 00 00       	call   27527 <printd>
   24eff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:22
        ptr=(uint32_t*)kKernelPageDir;
   24f02:	a1 e4 47 12 00       	mov    eax,ds:0x1247e4
   24f07:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:23
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   24f0a:	c7 45 f4 00 c0 4c 00 	mov    DWORD PTR [ebp-0xc],0x4cc000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:24
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
   24f11:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   24f14:	ff 75 e0             	push   DWORD PTR [ebp-0x20]
   24f17:	68 50 51 08 00       	push   0x85150
   24f1c:	6a 20                	push   0x20
   24f1e:	e8 04 26 00 00       	call   27527 <printd>
   24f23:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:25
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
   24f26:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   24f2a:	83 ec 04             	sub    esp,0x4
   24f2d:	50                   	push   eax
   24f2e:	68 8c 51 08 00       	push   0x8518c
   24f33:	6a 20                	push   0x20
   24f35:	e8 ed 25 00 00       	call   27527 <printd>
   24f3a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   24f3d:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   24f44:	eb 65                	jmp    24fab <initializeKernelPaging+0xc7>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:28
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x7;
   24f46:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   24f49:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24f50:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   24f53:	01 d0                	add    eax,edx
   24f55:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24f58:	81 c2 cc 04 00 00    	add    edx,0x4cc
   24f5e:	c1 e2 0c             	shl    edx,0xc
   24f61:	83 ca 07             	or     edx,0x7
   24f64:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   24f66:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   24f6d:	eb 28                	jmp    24f97 <initializeKernelPaging+0xb3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:32 (discriminator 3)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x7;
   24f6f:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   24f72:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   24f79:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   24f7c:	01 d0                	add    eax,edx
   24f7e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   24f81:	89 d1                	mov    ecx,edx
   24f83:	c1 e1 16             	shl    ecx,0x16
   24f86:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   24f89:	c1 e2 0c             	shl    edx,0xc
   24f8c:	01 ca                	add    edx,ecx
   24f8e:	83 ca 07             	or     edx,0x7
   24f91:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 3)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
        {
                ptr[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x7;
                //Create a guest page table for each Page Directory
                for (int cnt2=0;cnt2<1024;cnt2++)
   24f93:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:30 (discriminator 1)
   24f97:	81 7d ec ff 03 00 00 	cmp    DWORD PTR [ebp-0x14],0x3ff
   24f9e:	7e cf                	jle    24f6f <initializeKernelPaging+0x8b>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:34 (discriminator 2)
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x7;
                }
                ptrT += 0x400;
   24fa0:	81 45 f4 00 10 00 00 	add    DWORD PTR [ebp-0xc],0x1000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 2)
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Entering setupKernelPaging module\n");
        ptr=(uint32_t*)kKernelPageDir;
        ptrT=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Page directory at 0x%08X, table at 0x%08x\n", ptr, ptrT);
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: (0x%04X page directory entries)\n", tempEntries);
        for (uint32_t cnt=0;cnt < tempEntries; cnt++)
   24fa7:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:26 (discriminator 1)
   24fab:	0f b7 45 e6          	movzx  eax,WORD PTR [ebp-0x1a]
   24faf:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   24fb2:	77 92                	ja     24f46 <initializeKernelPaging+0x62>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:36
                {
                    ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x7;
                }
                ptrT += 0x400;
        }
        uint32_t pageDirEntrySize = 0x400000;
   24fb4:	c7 45 dc 00 00 40 00 	mov    DWORD PTR [ebp-0x24],0x400000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:37
        ptr2=(void*)KERNEL_PAGE_DIR_ADDRESS + (KERNEL_PAGED_BASE_ADDRESS / 0x400000)*4; //(((uint32_t)KERNEL_PAGED_BASE_ADDRESS / (uint32_t)0x400000) * 4);
   24fbb:	c7 45 d8 00 ac 4b 00 	mov    DWORD PTR [ebp-0x28],0x4bac00
/home/yogi/src/os/chrisOS/src/init/initPaging.c:38
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
   24fc2:	c7 45 d4 00 c0 4c 00 	mov    DWORD PTR [ebp-0x2c],0x4cc000
/home/yogi/src/os/chrisOS/src/init/initPaging.c:40
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
   24fc9:	ff 75 d4             	push   DWORD PTR [ebp-0x2c]
   24fcc:	ff 75 d8             	push   DWORD PTR [ebp-0x28]
   24fcf:	68 bc 51 08 00       	push   0x851bc
   24fd4:	6a 20                	push   0x20
   24fd6:	e8 4c 25 00 00       	call   27527 <printd>
   24fdb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:41
        uint32_t pageDirEntryCount= 0x100;   //Map C0000000-FFFFFFFF=00000000-3FFFFFFF 
   24fde:	c7 45 d0 00 01 00 00 	mov    DWORD PTR [ebp-0x30],0x100
/home/yogi/src/os/chrisOS/src/init/initPaging.c:42
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
   24fe5:	83 ec 04             	sub    esp,0x4
   24fe8:	ff 75 d0             	push   DWORD PTR [ebp-0x30]
   24feb:	68 f8 51 08 00       	push   0x851f8
   24ff0:	6a 20                	push   0x20
   24ff2:	e8 30 25 00 00       	call   27527 <printd>
   24ff7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   24ffa:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
   25001:	eb 24                	jmp    25027 <initializeKernelPaging+0x143>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:45 (discriminator 3)
        {
                ptr2[cnt] = (KERNEL_PAGE_TABLE_BASE_ADDRESS + (cnt*4096)) | 0x7;
   25003:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25006:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   2500d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   25010:	01 d0                	add    eax,edx
   25012:	8b 55 e8             	mov    edx,DWORD PTR [ebp-0x18]
   25015:	81 c2 cc 04 00 00    	add    edx,0x4cc
   2501b:	c1 e2 0c             	shl    edx,0xc
   2501e:	83 ca 07             	or     edx,0x7
   25021:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 3)
        kKernelPageTables=(uint32_t*)KERNEL_PAGE_TABLE_BASE_ADDRESS;
        //Initialize Kernel Page Directory
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: Kernel page dir at 0x%08X, table at 0x%08x\n", ptr2, kKernelPageTables);
        uint32_t pageDirEntryCount= 0x100;   //Map C0000000-FFFFFFFF=00000000-3FFFFFFF 
        printd(DEBUG_PAGING_CONFIG,"PAGING CONFIG: 0x%08X entries\n", pageDirEntryCount);
        for (uint32_t cnt=0;cnt <= pageDirEntryCount; cnt++)
   25023:	83 45 e8 01          	add    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/init/initPaging.c:43 (discriminator 1)
   25027:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2502a:	3b 45 d0             	cmp    eax,DWORD PTR [ebp-0x30]
   2502d:	76 d4                	jbe    25003 <initializeKernelPaging+0x11f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:64
            {
                ptrT[cnt2] = ((0x400000 * cnt)  + ((cnt2) << 12)) | 0x3;
            }
            ptrT += 0x400;
*/
            __asm__("mov cr3,%0\n":: "a" (KERNEL_PAGE_DIR_ADDRESS));
   2502f:	b8 00 a0 4b 00       	mov    eax,0x4ba000
   25034:	0f 22 d8             	mov    cr3,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:65
       __asm__("mov eax,cr0\n or eax,0x80000000\n mov cr0,eax\n");
   25037:	0f 20 c0             	mov    eax,cr0
   2503a:	0d 00 00 00 80       	or     eax,0x80000000
   2503f:	0f 22 c0             	mov    cr0,eax
/home/yogi/src/os/chrisOS/src/init/initPaging.c:74
/*BEFORE:
 0 - blank
 1 (0x08) - code @ 0x0
 2 (0x10) - data @ 0x0
*/
       gdtEntry(1, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_CODE | GDT_READABLE,
   25042:	83 ec 08             	sub    esp,0x8
   25045:	6a 01                	push   0x1
   25047:	6a c0                	push   0xffffffc0
   25049:	6a 88                	push   0xffffff88
   2504b:	68 ff ff 0f 00       	push   0xfffff
   25050:	68 00 00 00 c0       	push   0xc0000000
   25055:	6a 01                	push   0x1
   25057:	e8 32 3b ff ff       	call   18b8e <gdtEntry>
   2505c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:76
                  GDT_GRANULAR | GDT_32BIT,true);
    gdtEntry(2, KERNEL_PAGED_BASE_ADDRESS, 0xFFFFF, GDT_PRESENT | GDT_DPL0 | GDT_DATA | GDT_WRITABLE,
   2505f:	83 ec 08             	sub    esp,0x8
   25062:	6a 01                	push   0x1
   25064:	6a c0                	push   0xffffffc0
   25066:	6a 82                	push   0xffffff82
   25068:	68 ff ff 0f 00       	push   0xfffff
   2506d:	68 00 00 00 c0       	push   0xc0000000
   25072:	6a 02                	push   0x2
   25074:	e8 15 3b ff ff       	call   18b8e <gdtEntry>
   25079:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/initPaging.c:84
 0 - blank
 1 (0x08) - code @ 0xC0000000
 2 (0x10) - data @ 0xC0000000
*/

        kernelGDT.limit = sizeof(sGDT) * GDT_ENTRIES - 1;
   2507c:	66 c7 05 88 49 12 00 	mov    WORD PTR ds:0x124988,0x31f
   25083:	1f 03 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:85
        kernelGDT.base = (unsigned int)INIT_GDT_TABLE_ADDRESS;
   25085:	c7 05 8a 49 12 00 00 	mov    DWORD PTR ds:0x12498a,0x164800
   2508c:	48 16 00 
/home/yogi/src/os/chrisOS/src/init/initPaging.c:86
        set_gdt(&kernelGDT);
   2508f:	83 ec 0c             	sub    esp,0xc
   25092:	68 88 49 12 00       	push   0x124988
   25097:	e8 a1 c0 fd ff       	call   113d <set_gdt>
   2509c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:87
        idt_init(&kInitialIDTReg, PIC_REMAP_OFFSET);
   2509f:	83 ec 08             	sub    esp,0x8
   250a2:	6a 20                	push   0x20
   250a4:	68 e0 a3 09 00       	push   0x9a3e0
   250a9:	e8 37 3d ff ff       	call   18de5 <idt_init>
   250ae:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:88
        doPagingJump();
   250b1:	e8 73 c2 fd ff       	call   1329 <doPagingJump>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:92

    
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   250b6:	a1 78 48 12 00       	mov    eax,ds:0x124878
   250bb:	83 e0 20             	and    eax,0x20
   250be:	85 c0                	test   eax,eax
   250c0:	74 15                	je     250d7 <initializeKernelPaging+0x1f3>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:93
            printk("Clearing up temporary low page entries at 0x%08X\n", KERNEL_TEMP_LOW_PAGE_TABLE_BASE_ADDRESS);
   250c2:	83 ec 08             	sub    esp,0x8
   250c5:	68 00 00 09 05       	push   0x5090000
   250ca:	68 18 52 08 00       	push   0x85218
   250cf:	e8 33 24 00 00       	call   27507 <printk>
   250d4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:97
#endif
        //Now that we've fixed our IDT, lets restart interrupts!
#ifndef DEBUG_NONE
         if ((kDebugLevel & DEBUG_PAGING_CONFIG) == DEBUG_PAGING_CONFIG)
   250d7:	a1 78 48 12 00       	mov    eax,ds:0x124878
   250dc:	83 e0 20             	and    eax,0x20
   250df:	85 c0                	test   eax,eax
   250e1:	74 10                	je     250f3 <initializeKernelPaging+0x20f>
/home/yogi/src/os/chrisOS/src/init/initPaging.c:98
            printk("Exiting setupKernelPaging module\n");
   250e3:	83 ec 0c             	sub    esp,0xc
   250e6:	68 4c 52 08 00       	push   0x8524c
   250eb:	e8 17 24 00 00       	call   27507 <printk>
   250f0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/initPaging.c:100
#endif
}
   250f3:	90                   	nop
   250f4:	c9                   	leave  
   250f5:	c3                   	ret    
   250f6:	66 90                	xchg   ax,ax

000250f8 <outb>:
outb():
/home/yogi/src/os/chrisOS/include/io.h:22

void IRQ_set_mask(unsigned char IRQline);
void IRQ_clear_mask(unsigned char IRQline);

static __inline void outb(unsigned short __port, unsigned char __val)
{
   250f8:	55                   	push   ebp
   250f9:	89 e5                	mov    ebp,esp
   250fb:	83 ec 08             	sub    esp,0x8
   250fe:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   25101:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25104:	66 89 55 fc          	mov    WORD PTR [ebp-0x4],dx
   25108:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/include/io.h:23
	__asm__ volatile ("outb %1, %0" : : "a" (__val), "dN" (__port));
   2510b:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   2510f:	0f b7 55 fc          	movzx  edx,WORD PTR [ebp-0x4]
   25113:	ee                   	out    dx,al
/home/yogi/src/os/chrisOS/include/io.h:24
}
   25114:	90                   	nop
   25115:	c9                   	leave  
   25116:	c3                   	ret    

00025117 <inb>:
inb():
/home/yogi/src/os/chrisOS/include/io.h:37
{
	__asm__ volatile ("outd %1, %0" : : "a" (__val), "dN" (__port));
}

static __inline unsigned char inb(unsigned short __port)
{
   25117:	55                   	push   ebp
   25118:	89 e5                	mov    ebp,esp
   2511a:	83 ec 14             	sub    esp,0x14
   2511d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25120:	66 89 45 ec          	mov    WORD PTR [ebp-0x14],ax
/home/yogi/src/os/chrisOS/include/io.h:39
	unsigned char __val;
	__asm__ volatile ("inb %0, %1" : "=a" (__val) : "dN" (__port));
   25124:	0f b7 45 ec          	movzx  eax,WORD PTR [ebp-0x14]
   25128:	89 c2                	mov    edx,eax
   2512a:	ec                   	in     al,dx
   2512b:	88 45 ff             	mov    BYTE PTR [ebp-0x1],al
/home/yogi/src/os/chrisOS/include/io.h:40
	return __val;
   2512e:	0f b6 45 ff          	movzx  eax,BYTE PTR [ebp-0x1]
/home/yogi/src/os/chrisOS/include/io.h:41
}
   25132:	c9                   	leave  
   25133:	c3                   	ret    

00025134 <reverse>:
reverse():
/home/yogi/src/os/chrisOS/src/init/utility.c:30
//#include <string.h>

/* reverse:  reverse string s in place */
extern int strlen(char*);
 void reverse(char s[])
 {
   25134:	55                   	push   ebp
   25135:	89 e5                	mov    ebp,esp
   25137:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:34
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   2513a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   25141:	83 ec 0c             	sub    esp,0xc
   25144:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   25147:	e8 8c 25 00 00       	call   276d8 <strlen>
   2514c:	83 c4 10             	add    esp,0x10
   2514f:	83 e8 01             	sub    eax,0x1
   25152:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   25155:	eb 39                	jmp    25190 <reverse+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:35 (discriminator 3)
         c = s[i];
   25157:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   2515a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2515d:	01 d0                	add    eax,edx
   2515f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25162:	88 45 ef             	mov    BYTE PTR [ebp-0x11],al
/home/yogi/src/os/chrisOS/src/init/utility.c:36 (discriminator 3)
         s[i] = s[j];
   25165:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   25168:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2516b:	01 c2                	add    edx,eax
   2516d:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   25170:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25173:	01 c8                	add    eax,ecx
   25175:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25178:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:37 (discriminator 3)
         s[j] = c;
   2517a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2517d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25180:	01 c2                	add    edx,eax
   25182:	0f b6 45 ef          	movzx  eax,BYTE PTR [ebp-0x11]
   25186:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:34 (discriminator 3)
 void reverse(char s[])
 {
     int i, j;
     char c;

     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
   25188:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
   2518c:	83 6d f0 01          	sub    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:34 (discriminator 1)
   25190:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25193:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   25196:	7c bf                	jl     25157 <reverse+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:39
         c = s[i];
         s[i] = s[j];
         s[j] = c;
     }
 }
   25198:	90                   	nop
   25199:	c9                   	leave  
   2519a:	c3                   	ret    

0002519b <itoa>:
itoa():
/home/yogi/src/os/chrisOS/src/init/utility.c:41
 void itoa(int n, char s[])
 {
   2519b:	55                   	push   ebp
   2519c:	89 e5                	mov    ebp,esp
   2519e:	53                   	push   ebx
   2519f:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/init/utility.c:44
     int i, sign;

     if ((sign = n) < 0)  /* record sign */
   251a2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   251a5:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   251a8:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   251ac:	79 03                	jns    251b1 <itoa+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:45
         n = -n;          /* make n positive */
   251ae:	f7 5d 08             	neg    DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:46
     i = 0;
   251b1:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:48 (discriminator 1)
     do {       /* generate digits in reverse order */
         s[i++] = n % 10 + '0';   /* get next digit */
   251b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   251bb:	8d 50 01             	lea    edx,[eax+0x1]
   251be:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   251c1:	89 c2                	mov    edx,eax
   251c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   251c6:	8d 1c 02             	lea    ebx,[edx+eax*1]
   251c9:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   251cc:	ba 67 66 66 66       	mov    edx,0x66666667
   251d1:	89 c8                	mov    eax,ecx
   251d3:	f7 ea                	imul   edx
   251d5:	c1 fa 02             	sar    edx,0x2
   251d8:	89 c8                	mov    eax,ecx
   251da:	c1 f8 1f             	sar    eax,0x1f
   251dd:	29 c2                	sub    edx,eax
   251df:	89 d0                	mov    eax,edx
   251e1:	c1 e0 02             	shl    eax,0x2
   251e4:	01 d0                	add    eax,edx
   251e6:	01 c0                	add    eax,eax
   251e8:	29 c1                	sub    ecx,eax
   251ea:	89 ca                	mov    edx,ecx
   251ec:	89 d0                	mov    eax,edx
   251ee:	83 c0 30             	add    eax,0x30
   251f1:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:49 (discriminator 1)
     } while ((n /= 10) > 0);     /* delete it */
   251f3:	8b 4d 08             	mov    ecx,DWORD PTR [ebp+0x8]
   251f6:	ba 67 66 66 66       	mov    edx,0x66666667
   251fb:	89 c8                	mov    eax,ecx
   251fd:	f7 ea                	imul   edx
   251ff:	c1 fa 02             	sar    edx,0x2
   25202:	89 c8                	mov    eax,ecx
   25204:	c1 f8 1f             	sar    eax,0x1f
   25207:	29 c2                	sub    edx,eax
   25209:	89 d0                	mov    eax,edx
   2520b:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
   2520e:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   25212:	7f a4                	jg     251b8 <itoa+0x1d>
/home/yogi/src/os/chrisOS/src/init/utility.c:50
     if (sign < 0)
   25214:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   25218:	79 13                	jns    2522d <itoa+0x92>
/home/yogi/src/os/chrisOS/src/init/utility.c:51
         s[i++] = '-';
   2521a:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2521d:	8d 50 01             	lea    edx,[eax+0x1]
   25220:	89 55 f4             	mov    DWORD PTR [ebp-0xc],edx
   25223:	89 c2                	mov    edx,eax
   25225:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25228:	01 d0                	add    eax,edx
   2522a:	c6 00 2d             	mov    BYTE PTR [eax],0x2d
/home/yogi/src/os/chrisOS/src/init/utility.c:52
     s[i] = '\0';
   2522d:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   25230:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25233:	01 d0                	add    eax,edx
   25235:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:53
     reverse(s);
   25238:	83 ec 0c             	sub    esp,0xc
   2523b:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2523e:	e8 f1 fe ff ff       	call   25134 <reverse>
   25243:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:54
 }
   25246:	90                   	nop
   25247:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2524a:	c9                   	leave  
   2524b:	c3                   	ret    

0002524c <itox>:
itox():
/home/yogi/src/os/chrisOS/src/init/utility.c:56
void itox(unsigned int i, char *s)
{
   2524c:	55                   	push   ebp
   2524d:	89 e5                	mov    ebp,esp
   2524f:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:59
    unsigned char n;

    s += 4;
   25252:	83 45 0c 04          	add    DWORD PTR [ebp+0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:60
    *s = '\0';
   25256:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25259:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:62

    for (n = 8; n != 0; --n) {
   2525c:	c6 45 ff 08          	mov    BYTE PTR [ebp-0x1],0x8
   25260:	eb 1e                	jmp    25280 <itox+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:63 (discriminator 3)
        *--s = "0123456789ABCDEF"[i & 0x0F];
   25262:	83 6d 0c 01          	sub    DWORD PTR [ebp+0xc],0x1
   25266:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25269:	83 e0 0f             	and    eax,0xf
   2526c:	0f b6 90 80 53 08 00 	movzx  edx,BYTE PTR [eax+0x85380]
   25273:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25276:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:64 (discriminator 3)
        i >>= 4;
   25278:	c1 6d 08 04          	shr    DWORD PTR [ebp+0x8],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:62 (discriminator 3)
    unsigned char n;

    s += 4;
    *s = '\0';

    for (n = 8; n != 0; --n) {
   2527c:	80 6d ff 01          	sub    BYTE PTR [ebp-0x1],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:62 (discriminator 1)
   25280:	80 7d ff 00          	cmp    BYTE PTR [ebp-0x1],0x0
   25284:	75 dc                	jne    25262 <itox+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:66
        *--s = "0123456789ABCDEF"[i & 0x0F];
        i >>= 4;
    }
}
   25286:	90                   	nop
   25287:	c9                   	leave  
   25288:	c3                   	ret    

00025289 <atoi>:
atoi():
/home/yogi/src/os/chrisOS/src/init/utility.c:69
// A simple atoi() function - from http://www.geeksforgeeks.org/write-your-own-atoi
int atoi(char *str)
{
   25289:	55                   	push   ebp
   2528a:	89 e5                	mov    ebp,esp
   2528c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:70
    int res = 0; // Initialize result
   2528f:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:74
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   25296:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
   2529d:	eb 28                	jmp    252c7 <atoi+0x3e>
/home/yogi/src/os/chrisOS/src/init/utility.c:75 (discriminator 3)
        res = res*10 + str[i] - '0';
   2529f:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   252a2:	89 d0                	mov    eax,edx
   252a4:	c1 e0 02             	shl    eax,0x2
   252a7:	01 d0                	add    eax,edx
   252a9:	01 c0                	add    eax,eax
   252ab:	89 c1                	mov    ecx,eax
   252ad:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   252b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   252b3:	01 d0                	add    eax,edx
   252b5:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   252b8:	0f be c0             	movsx  eax,al
   252bb:	01 c8                	add    eax,ecx
   252bd:	83 e8 30             	sub    eax,0x30
   252c0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:74 (discriminator 3)
{
    int res = 0; // Initialize result
  
    // Iterate through all characters of input string and
    // update result
    for (int i = 0; str[i] != '\0'; ++i)
   252c3:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:74 (discriminator 1)
   252c7:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   252ca:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   252cd:	01 d0                	add    eax,edx
   252cf:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   252d2:	84 c0                	test   al,al
   252d4:	75 c9                	jne    2529f <atoi+0x16>
/home/yogi/src/os/chrisOS/src/init/utility.c:78
        res = res*10 + str[i] - '0';
  
    // return result.
    return res;
   252d6:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:79
}
   252d9:	c9                   	leave  
   252da:	c3                   	ret    

000252db <convert>:
convert():
/home/yogi/src/os/chrisOS/src/init/utility.c:82

int convert(int s)
{
   252db:	55                   	push   ebp
   252dc:	89 e5                	mov    ebp,esp
   252de:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:84
  int c;
  char hex[] = {'A', 'B', 'C', 'D', 'E', 'F'};
   252e1:	c6 45 f6 41          	mov    BYTE PTR [ebp-0xa],0x41
   252e5:	c6 45 f7 42          	mov    BYTE PTR [ebp-0x9],0x42
   252e9:	c6 45 f8 43          	mov    BYTE PTR [ebp-0x8],0x43
   252ed:	c6 45 f9 44          	mov    BYTE PTR [ebp-0x7],0x44
   252f1:	c6 45 fa 45          	mov    BYTE PTR [ebp-0x6],0x45
   252f5:	c6 45 fb 46          	mov    BYTE PTR [ebp-0x5],0x46
/home/yogi/src/os/chrisOS/src/init/utility.c:85
  c = (s >= 0 && s < 9) ? s + '0' : hex[s - 10];
   252f9:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   252fd:	78 0e                	js     2530d <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 1)
   252ff:	83 7d 08 08          	cmp    DWORD PTR [ebp+0x8],0x8
   25303:	7f 08                	jg     2530d <convert+0x32>
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 3)
   25305:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25308:	83 c0 30             	add    eax,0x30
   2530b:	eb 0e                	jmp    2531b <convert+0x40>
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 4)
   2530d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25310:	83 e8 0a             	sub    eax,0xa
   25313:	0f b6 44 05 f6       	movzx  eax,BYTE PTR [ebp+eax*1-0xa]
   25318:	0f be c0             	movsx  eax,al
/home/yogi/src/os/chrisOS/src/init/utility.c:85 (discriminator 6)
   2531b:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:86 (discriminator 6)
  return c;
   2531e:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:87 (discriminator 6)
}
   25321:	c9                   	leave  
   25322:	c3                   	ret    

00025323 <itoha>:
itoha():
/home/yogi/src/os/chrisOS/src/init/utility.c:90

void itoha(unsigned int n, char *buf)
{
   25323:	55                   	push   ebp
   25324:	89 e5                	mov    ebp,esp
   25326:	53                   	push   ebx
   25327:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:91
  int i = 0, j =0;
   2532a:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   25331:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:92
  j=7;
   25338:	c7 45 f8 07 00 00 00 	mov    DWORD PTR [ebp-0x8],0x7
/home/yogi/src/os/chrisOS/src/init/utility.c:93
  while(n != 0)
   2533f:	eb 37                	jmp    25378 <itoha+0x55>
/home/yogi/src/os/chrisOS/src/init/utility.c:95
  {
    i = n % 16;
   25341:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25344:	83 e0 0f             	and    eax,0xf
   25347:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:96
      buf[j--] = convert(i);
   2534a:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   2534d:	8d 50 ff             	lea    edx,[eax-0x1]
   25350:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   25353:	89 c2                	mov    edx,eax
   25355:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25358:	8d 1c 02             	lea    ebx,[edx+eax*1]
   2535b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2535e:	e8 78 ff ff ff       	call   252db <convert>
   25363:	83 c4 04             	add    esp,0x4
   25366:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/init/utility.c:97
      n = (n - i) / 16;
   25368:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2536b:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2536e:	29 c2                	sub    edx,eax
   25370:	89 d0                	mov    eax,edx
   25372:	c1 e8 04             	shr    eax,0x4
   25375:	89 45 08             	mov    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:93

void itoha(unsigned int n, char *buf)
{
  int i = 0, j =0;
  j=7;
  while(n != 0)
   25378:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2537c:	75 c3                	jne    25341 <itoha+0x1e>
/home/yogi/src/os/chrisOS/src/init/utility.c:99
  {
    i = n % 16;
      buf[j--] = convert(i);
      n = (n - i) / 16;
  }
  buf[j] = '\0';
   2537e:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   25381:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25384:	01 d0                	add    eax,edx
   25386:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:100
}
   25389:	90                   	nop
   2538a:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   2538d:	c9                   	leave  
   2538e:	c3                   	ret    

0002538f <identify_data_sizes>:
identify_data_sizes():
/home/yogi/src/os/chrisOS/src/init/utility.c:103

void identify_data_sizes(sizeof_t* sizes)
{
   2538f:	55                   	push   ebp
   25390:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/init/utility.c:104
    sizes->shortSize = sizeof(short);
   25392:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25395:	66 c7 00 02 00       	mov    WORD PTR [eax],0x2
/home/yogi/src/os/chrisOS/src/init/utility.c:105
    sizes->intSize = sizeof(int);
   2539a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2539d:	66 c7 40 02 04 00    	mov    WORD PTR [eax+0x2],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:106
    sizes->longSize = sizeof(long);
   253a3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253a6:	66 c7 40 04 04 00    	mov    WORD PTR [eax+0x4],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:107
    sizes->longLongSize = sizeof(long long);
   253ac:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253af:	66 c7 40 06 08 00    	mov    WORD PTR [eax+0x6],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:108
    sizes->longLongIntSize = sizeof(long long int);
   253b5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253b8:	66 c7 40 08 08 00    	mov    WORD PTR [eax+0x8],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:109
}
   253be:	90                   	nop
   253bf:	5d                   	pop    ebp
   253c0:	c3                   	ret    

000253c1 <memset>:
memset():
/home/yogi/src/os/chrisOS/src/init/utility.c:112

void *memset(void *d1, int val, size_t len)
{
   253c1:	55                   	push   ebp
   253c2:	89 e5                	mov    ebp,esp
   253c4:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:113
    uint8_t *d = d1;
   253c7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253ca:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:114
    uint16_t*e = d1;
   253cd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253d0:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:115
    uint16_t eVal=(val << 16) | (val << 8) | val;
   253d3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   253d6:	c1 e0 10             	shl    eax,0x10
   253d9:	89 c2                	mov    edx,eax
   253db:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   253de:	c1 e0 08             	shl    eax,0x8
   253e1:	09 c2                	or     edx,eax
   253e3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   253e6:	09 d0                	or     eax,edx
   253e8:	66 89 45 f6          	mov    WORD PTR [ebp-0xa],ax
/home/yogi/src/os/chrisOS/src/init/utility.c:116
    uint32_t*f = d1;
   253ec:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   253ef:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:117
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
   253f2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   253f5:	c1 e0 18             	shl    eax,0x18
   253f8:	89 c2                	mov    edx,eax
   253fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   253fd:	c1 e0 10             	shl    eax,0x10
   25400:	09 c2                	or     edx,eax
   25402:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25405:	c1 e0 08             	shl    eax,0x8
   25408:	09 d0                	or     eax,edx
   2540a:	0b 45 0c             	or     eax,DWORD PTR [ebp+0xc]
   2540d:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:119
    
    if ((len%4)==0)
   25410:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25413:	83 e0 03             	and    eax,0x3
   25416:	85 c0                	test   eax,eax
   25418:	75 1c                	jne    25436 <memset+0x75>
/home/yogi/src/os/chrisOS/src/init/utility.c:120
    while (len-=4) {
   2541a:	eb 0e                	jmp    2542a <memset+0x69>
/home/yogi/src/os/chrisOS/src/init/utility.c:121
        *d++ = fVal;
   2541c:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   2541f:	8d 50 01             	lea    edx,[eax+0x1]
   25422:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   25425:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25428:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:120
    uint16_t eVal=(val << 16) | (val << 8) | val;
    uint32_t*f = d1;
    uint32_t fVal=(val << 24) | (val << 16) | (val << 8) | val;
    
    if ((len%4)==0)
    while (len-=4) {
   2542a:	83 6d 10 04          	sub    DWORD PTR [ebp+0x10],0x4
   2542e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   25432:	75 e8                	jne    2541c <memset+0x5b>
   25434:	eb 42                	jmp    25478 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:123
        *d++ = fVal;
    }
    else if (((len%2)==0))
   25436:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25439:	83 e0 01             	and    eax,0x1
   2543c:	85 c0                	test   eax,eax
   2543e:	75 2b                	jne    2546b <memset+0xaa>
/home/yogi/src/os/chrisOS/src/init/utility.c:124
    while (len-=2) {
   25440:	eb 0f                	jmp    25451 <memset+0x90>
/home/yogi/src/os/chrisOS/src/init/utility.c:125
        *d++ = eVal;
   25442:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25445:	8d 50 01             	lea    edx,[eax+0x1]
   25448:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   2544b:	0f b7 55 f6          	movzx  edx,WORD PTR [ebp-0xa]
   2544f:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:124
    if ((len%4)==0)
    while (len-=4) {
        *d++ = fVal;
    }
    else if (((len%2)==0))
    while (len-=2) {
   25451:	83 6d 10 02          	sub    DWORD PTR [ebp+0x10],0x2
   25455:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   25459:	75 e7                	jne    25442 <memset+0x81>
   2545b:	eb 1b                	jmp    25478 <memset+0xb7>
/home/yogi/src/os/chrisOS/src/init/utility.c:129
        *d++ = eVal;
    }
    else
    while (len--) {
        *d++ = val;
   2545d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25460:	8d 50 01             	lea    edx,[eax+0x1]
   25463:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   25466:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   25469:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:128
    else if (((len%2)==0))
    while (len-=2) {
        *d++ = eVal;
    }
    else
    while (len--) {
   2546b:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2546e:	8d 50 ff             	lea    edx,[eax-0x1]
   25471:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25474:	85 c0                	test   eax,eax
   25476:	75 e5                	jne    2545d <memset+0x9c>
/home/yogi/src/os/chrisOS/src/init/utility.c:131
        *d++ = val;
    }
    return d1;
   25478:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:132
}
   2547b:	c9                   	leave  
   2547c:	c3                   	ret    

0002547d <bcdToDec>:
bcdToDec():
/home/yogi/src/os/chrisOS/src/init/utility.c:135

uint8_t bcdToDec(uint8_t val)
{
   2547d:	55                   	push   ebp
   2547e:	89 e5                	mov    ebp,esp
   25480:	83 ec 04             	sub    esp,0x4
   25483:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25486:	88 45 fc             	mov    BYTE PTR [ebp-0x4],al
/home/yogi/src/os/chrisOS/src/init/utility.c:136
  return ( (val/16*10) + (val%16) );
   25489:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   2548d:	c0 e8 04             	shr    al,0x4
   25490:	89 c2                	mov    edx,eax
   25492:	89 d0                	mov    eax,edx
   25494:	c1 e0 02             	shl    eax,0x2
   25497:	01 d0                	add    eax,edx
   25499:	01 c0                	add    eax,eax
   2549b:	89 c2                	mov    edx,eax
   2549d:	0f b6 45 fc          	movzx  eax,BYTE PTR [ebp-0x4]
   254a1:	83 e0 0f             	and    eax,0xf
   254a4:	01 d0                	add    eax,edx
/home/yogi/src/os/chrisOS/src/init/utility.c:137
}
   254a6:	c9                   	leave  
   254a7:	c3                   	ret    

000254a8 <decToBcd>:
decToBcd():
/home/yogi/src/os/chrisOS/src/init/utility.c:140

uint8_t decToBcd(uint8_t val)
{
   254a8:	55                   	push   ebp
   254a9:	89 e5                	mov    ebp,esp
   254ab:	53                   	push   ebx
   254ac:	83 ec 04             	sub    esp,0x4
   254af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   254b2:	88 45 f8             	mov    BYTE PTR [ebp-0x8],al
/home/yogi/src/os/chrisOS/src/init/utility.c:141
  return ( (val/10*16) + (val%10) );
   254b5:	0f b6 45 f8          	movzx  eax,BYTE PTR [ebp-0x8]
   254b9:	0f b6 d0             	movzx  edx,al
   254bc:	89 d0                	mov    eax,edx
   254be:	c1 e0 02             	shl    eax,0x2
   254c1:	01 d0                	add    eax,edx
   254c3:	c1 e0 03             	shl    eax,0x3
   254c6:	01 d0                	add    eax,edx
   254c8:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   254cf:	01 d0                	add    eax,edx
   254d1:	66 c1 e8 08          	shr    ax,0x8
   254d5:	c0 e8 03             	shr    al,0x3
   254d8:	c1 e0 04             	shl    eax,0x4
   254db:	89 c3                	mov    ebx,eax
   254dd:	0f b6 4d f8          	movzx  ecx,BYTE PTR [ebp-0x8]
   254e1:	0f b6 d1             	movzx  edx,cl
   254e4:	89 d0                	mov    eax,edx
   254e6:	c1 e0 02             	shl    eax,0x2
   254e9:	01 d0                	add    eax,edx
   254eb:	c1 e0 03             	shl    eax,0x3
   254ee:	01 d0                	add    eax,edx
   254f0:	8d 14 85 00 00 00 00 	lea    edx,[eax*4+0x0]
   254f7:	01 d0                	add    eax,edx
   254f9:	66 c1 e8 08          	shr    ax,0x8
   254fd:	89 c2                	mov    edx,eax
   254ff:	c0 ea 03             	shr    dl,0x3
   25502:	89 d0                	mov    eax,edx
   25504:	c1 e0 02             	shl    eax,0x2
   25507:	01 d0                	add    eax,edx
   25509:	01 c0                	add    eax,eax
   2550b:	29 c1                	sub    ecx,eax
   2550d:	89 ca                	mov    edx,ecx
   2550f:	8d 04 13             	lea    eax,[ebx+edx*1]
/home/yogi/src/os/chrisOS/src/init/utility.c:142
}
   25512:	83 c4 04             	add    esp,0x4
   25515:	5b                   	pop    ebx
   25516:	5d                   	pop    ebp
   25517:	c3                   	ret    

00025518 <initSystemDate>:
initSystemDate():
/home/yogi/src/os/chrisOS/src/init/utility.c:144
void initSystemDate()
{
   25518:	55                   	push   ebp
   25519:	89 e5                	mov    ebp,esp
   2551b:	83 ec 38             	sub    esp,0x38
/home/yogi/src/os/chrisOS/src/init/utility.c:147
    struct tm tmbuf;

    outb(0x70, 0x00);
   2551e:	6a 00                	push   0x0
   25520:	6a 70                	push   0x70
   25522:	e8 d1 fb ff ff       	call   250f8 <outb>
   25527:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:148
    tmbuf.tm_sec = bcdToDec(inb(0x71));
   2552a:	6a 71                	push   0x71
   2552c:	e8 e6 fb ff ff       	call   25117 <inb>
   25531:	83 c4 04             	add    esp,0x4
   25534:	0f b6 c0             	movzx  eax,al
   25537:	50                   	push   eax
   25538:	e8 40 ff ff ff       	call   2547d <bcdToDec>
   2553d:	83 c4 04             	add    esp,0x4
   25540:	0f b6 c0             	movzx  eax,al
   25543:	89 45 cc             	mov    DWORD PTR [ebp-0x34],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:149
    outb(0x70, 0x02);
   25546:	6a 02                	push   0x2
   25548:	6a 70                	push   0x70
   2554a:	e8 a9 fb ff ff       	call   250f8 <outb>
   2554f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:150
    tmbuf.tm_min = bcdToDec(inb(0x71));
   25552:	6a 71                	push   0x71
   25554:	e8 be fb ff ff       	call   25117 <inb>
   25559:	83 c4 04             	add    esp,0x4
   2555c:	0f b6 c0             	movzx  eax,al
   2555f:	50                   	push   eax
   25560:	e8 18 ff ff ff       	call   2547d <bcdToDec>
   25565:	83 c4 04             	add    esp,0x4
   25568:	0f b6 c0             	movzx  eax,al
   2556b:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:151
    outb(0x70, 0x04);
   2556e:	6a 04                	push   0x4
   25570:	6a 70                	push   0x70
   25572:	e8 81 fb ff ff       	call   250f8 <outb>
   25577:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:152
    tmbuf.tm_hour = bcdToDec(inb(0x71));
   2557a:	6a 71                	push   0x71
   2557c:	e8 96 fb ff ff       	call   25117 <inb>
   25581:	83 c4 04             	add    esp,0x4
   25584:	0f b6 c0             	movzx  eax,al
   25587:	50                   	push   eax
   25588:	e8 f0 fe ff ff       	call   2547d <bcdToDec>
   2558d:	83 c4 04             	add    esp,0x4
   25590:	0f b6 c0             	movzx  eax,al
   25593:	89 45 d4             	mov    DWORD PTR [ebp-0x2c],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:153
    outb(0x70, 0x07);
   25596:	6a 07                	push   0x7
   25598:	6a 70                	push   0x70
   2559a:	e8 59 fb ff ff       	call   250f8 <outb>
   2559f:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:154
    tmbuf.tm_mday = bcdToDec(inb(0x71));
   255a2:	6a 71                	push   0x71
   255a4:	e8 6e fb ff ff       	call   25117 <inb>
   255a9:	83 c4 04             	add    esp,0x4
   255ac:	0f b6 c0             	movzx  eax,al
   255af:	50                   	push   eax
   255b0:	e8 c8 fe ff ff       	call   2547d <bcdToDec>
   255b5:	83 c4 04             	add    esp,0x4
   255b8:	0f b6 c0             	movzx  eax,al
   255bb:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:155
    outb(0x70, 0x08);
   255be:	6a 08                	push   0x8
   255c0:	6a 70                	push   0x70
   255c2:	e8 31 fb ff ff       	call   250f8 <outb>
   255c7:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:156
    tmbuf.tm_mon = bcdToDec(inb(0x71));
   255ca:	6a 71                	push   0x71
   255cc:	e8 46 fb ff ff       	call   25117 <inb>
   255d1:	83 c4 04             	add    esp,0x4
   255d4:	0f b6 c0             	movzx  eax,al
   255d7:	50                   	push   eax
   255d8:	e8 a0 fe ff ff       	call   2547d <bcdToDec>
   255dd:	83 c4 04             	add    esp,0x4
   255e0:	0f b6 c0             	movzx  eax,al
   255e3:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:157
    outb(0x70, 0x09);
   255e6:	6a 09                	push   0x9
   255e8:	6a 70                	push   0x70
   255ea:	e8 09 fb ff ff       	call   250f8 <outb>
   255ef:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:158
    tmbuf.tm_year = bcdToDec(inb(0x71));
   255f2:	6a 71                	push   0x71
   255f4:	e8 1e fb ff ff       	call   25117 <inb>
   255f9:	83 c4 04             	add    esp,0x4
   255fc:	0f b6 c0             	movzx  eax,al
   255ff:	50                   	push   eax
   25600:	e8 78 fe ff ff       	call   2547d <bcdToDec>
   25605:	83 c4 04             	add    esp,0x4
   25608:	0f b6 c0             	movzx  eax,al
   2560b:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:159
    tmbuf.tm_isdst = -1;
   2560e:	c7 45 ec ff ff ff ff 	mov    DWORD PTR [ebp-0x14],0xffffffff
/home/yogi/src/os/chrisOS/src/init/utility.c:160
    tmbuf.tm_year += 2000;
   25615:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   25618:	05 d0 07 00 00       	add    eax,0x7d0
   2561d:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:161
    tmbuf.tm_year = tmbuf.tm_year - 1900;
   25620:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   25623:	2d 6c 07 00 00       	sub    eax,0x76c
   25628:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:162
    kSystemStartTime = mktime(&tmbuf);
   2562b:	83 ec 0c             	sub    esp,0xc
   2562e:	8d 45 cc             	lea    eax,[ebp-0x34]
   25631:	50                   	push   eax
   25632:	e8 8c 28 00 00       	call   27ec3 <mktime>
   25637:	83 c4 10             	add    esp,0x10
   2563a:	a3 c8 47 12 00       	mov    ds:0x1247c8,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:163
    kSystemCurrentTime = kSystemStartTime;
   2563f:	a1 c8 47 12 00       	mov    eax,ds:0x1247c8
   25644:	a3 cc 47 12 00       	mov    ds:0x1247cc,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:165
//printf("System Date = %d/%d/%d %d:%d:%d\n", tmbuf.tm_mon, tmbuf.tm_mday, tmbuf.tm_year, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec, tmbuf.tm_hour, tmbuf.tm_min, tmbuf.tm_sec);
}
   25649:	90                   	nop
   2564a:	c9                   	leave  
   2564b:	c3                   	ret    

0002564c <strtoupper>:
strtoupper():
/home/yogi/src/os/chrisOS/src/init/utility.c:167
char * strtoupper(char* pointerToString)
{
   2564c:	55                   	push   ebp
   2564d:	89 e5                	mov    ebp,esp
   2564f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/init/utility.c:168
    uint8_t start=0, length=strlen(pointerToString);
   25652:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   25656:	83 ec 0c             	sub    esp,0xc
   25659:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2565c:	e8 77 20 00 00       	call   276d8 <strlen>
   25661:	83 c4 10             	add    esp,0x10
   25664:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/init/utility.c:169
    char* myPtr=pointerToString;
   25667:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2566a:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:172
    
        // Trim.Start:
        while (start<length)
   2566d:	eb 44                	jmp    256b3 <strtoupper+0x67>
/home/yogi/src/os/chrisOS/src/init/utility.c:174
        {
            if (myPtr[start]>='a' && myPtr[start]<='z')
   2566f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   25673:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25676:	01 d0                	add    eax,edx
   25678:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2567b:	3c 60                	cmp    al,0x60
   2567d:	7e 2a                	jle    256a9 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:174 (discriminator 1)
   2567f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   25683:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25686:	01 d0                	add    eax,edx
   25688:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2568b:	3c 7a                	cmp    al,0x7a
   2568d:	7f 1a                	jg     256a9 <strtoupper+0x5d>
/home/yogi/src/os/chrisOS/src/init/utility.c:175
                myPtr[start]-=32;
   2568f:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   25693:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25696:	01 d0                	add    eax,edx
   25698:	0f b6 4d f7          	movzx  ecx,BYTE PTR [ebp-0x9]
   2569c:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2569f:	01 ca                	add    edx,ecx
   256a1:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   256a4:	83 ea 20             	sub    edx,0x20
   256a7:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/init/utility.c:176
            start++;
   256a9:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   256ad:	83 c0 01             	add    eax,0x1
   256b0:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:172
{
    uint8_t start=0, length=strlen(pointerToString);
    char* myPtr=pointerToString;
    
        // Trim.Start:
        while (start<length)
   256b3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   256b7:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   256ba:	72 b3                	jb     2566f <strtoupper+0x23>
/home/yogi/src/os/chrisOS/src/init/utility.c:179
            if (myPtr[start]>='a' && myPtr[start]<='z')
                myPtr[start]-=32;
            start++;
        }

    return pointerToString;
   256bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/init/utility.c:180
}
   256bf:	c9                   	leave  
   256c0:	c3                   	ret    

000256c1 <printDumpedRegs>:
printDumpedRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:183

void printDumpedRegs()
{
   256c1:	55                   	push   ebp
   256c2:	89 e5                	mov    ebp,esp
   256c4:	56                   	push   esi
   256c5:	53                   	push   ebx
   256c6:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:184
    uint32_t esp = exceptionSavedESP;
   256c9:	a1 2c 47 12 00       	mov    eax,ds:0x12472c
   256ce:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:188
    uint8_t* lCSIPPtr;

    
    lCSIPPtr=(uint8_t*)(exceptionEIP);
   256d1:	a1 38 47 12 00       	mov    eax,ds:0x124738
   256d6:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:189
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", exceptionAX, exceptionBX, exceptionCX, exceptionDX,exceptionFlags);
   256d9:	8b 35 30 47 12 00    	mov    esi,DWORD PTR ds:0x124730
   256df:	8b 1d fc 46 12 00    	mov    ebx,DWORD PTR ds:0x1246fc
   256e5:	8b 0d f8 46 12 00    	mov    ecx,DWORD PTR ds:0x1246f8
   256eb:	8b 15 f4 46 12 00    	mov    edx,DWORD PTR ds:0x1246f4
   256f1:	a1 f0 46 12 00       	mov    eax,ds:0x1246f0
   256f6:	83 ec 08             	sub    esp,0x8
   256f9:	56                   	push   esi
   256fa:	53                   	push   ebx
   256fb:	51                   	push   ecx
   256fc:	52                   	push   edx
   256fd:	50                   	push   eax
   256fe:	68 94 53 08 00       	push   0x85394
   25703:	e8 ff 1d 00 00       	call   27507 <printk>
   25708:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:190
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", exceptionBP, exceptionSI, exceptionDI, exceptionSavedESP);
   2570b:	8b 1d 2c 47 12 00    	mov    ebx,DWORD PTR ds:0x12472c
   25711:	8b 0d 04 47 12 00    	mov    ecx,DWORD PTR ds:0x124704
   25717:	8b 15 00 47 12 00    	mov    edx,DWORD PTR ds:0x124700
   2571d:	a1 08 47 12 00       	mov    eax,ds:0x124708
   25722:	83 ec 0c             	sub    esp,0xc
   25725:	53                   	push   ebx
   25726:	51                   	push   ecx
   25727:	52                   	push   edx
   25728:	50                   	push   eax
   25729:	68 c4 53 08 00       	push   0x853c4
   2572e:	e8 d4 1d 00 00       	call   27507 <printk>
   25733:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:191
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\tCR4=%08X\n", exceptionCR0, exceptionCR2, exceptionCR3, exceptionCR4);
   25736:	8b 1d 14 47 12 00    	mov    ebx,DWORD PTR ds:0x124714
   2573c:	8b 0d 10 47 12 00    	mov    ecx,DWORD PTR ds:0x124710
   25742:	8b 15 40 47 12 00    	mov    edx,DWORD PTR ds:0x124740
   25748:	a1 0c 47 12 00       	mov    eax,ds:0x12470c
   2574d:	83 ec 0c             	sub    esp,0xc
   25750:	53                   	push   ebx
   25751:	51                   	push   ecx
   25752:	52                   	push   edx
   25753:	50                   	push   eax
   25754:	68 ec 53 08 00       	push   0x853ec
   25759:	e8 a9 1d 00 00       	call   27507 <printk>
   2575e:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:192
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", exceptionDS, exceptionES, exceptionGS, exceptionFS);
   25761:	8b 1d 20 47 12 00    	mov    ebx,DWORD PTR ds:0x124720
   25767:	8b 0d 24 47 12 00    	mov    ecx,DWORD PTR ds:0x124724
   2576d:	8b 15 1c 47 12 00    	mov    edx,DWORD PTR ds:0x12471c
   25773:	a1 18 47 12 00       	mov    eax,ds:0x124718
   25778:	83 ec 0c             	sub    esp,0xc
   2577b:	53                   	push   ebx
   2577c:	51                   	push   ecx
   2577d:	52                   	push   edx
   2577e:	50                   	push   eax
   2577f:	68 14 54 08 00       	push   0x85414
   25784:	e8 7e 1d 00 00       	call   27507 <printk>
   25789:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:193
    printk("GDT=%08X\n",kernelGDT.base);
   2578c:	a1 8a 49 12 00       	mov    eax,ds:0x12498a
   25791:	83 ec 08             	sub    esp,0x8
   25794:	50                   	push   eax
   25795:	68 39 54 08 00       	push   0x85439
   2579a:	e8 68 1d 00 00       	call   27507 <printk>
   2579f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:194
    printk("CS:EIP = %04X:%08X, error code=%08X\n", exceptionCS, exceptionEIP, exceptionErrorCode);
   257a2:	8b 0d 34 47 12 00    	mov    ecx,DWORD PTR ds:0x124734
   257a8:	8b 15 38 47 12 00    	mov    edx,DWORD PTR ds:0x124738
   257ae:	a1 3c 47 12 00       	mov    eax,ds:0x12473c
   257b3:	51                   	push   ecx
   257b4:	52                   	push   edx
   257b5:	50                   	push   eax
   257b6:	68 44 54 08 00       	push   0x85444
   257bb:	e8 47 1d 00 00       	call   27507 <printk>
   257c0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:195
          printk("Bytes at CS:EIP: ");
   257c3:	83 ec 0c             	sub    esp,0xc
   257c6:	68 69 54 08 00       	push   0x85469
   257cb:	e8 37 1d 00 00       	call   27507 <printk>
   257d0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:198
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
   257d3:	83 ec 0c             	sub    esp,0xc
   257d6:	68 7b 54 08 00       	push   0x8547b
   257db:	e8 27 1d 00 00       	call   27507 <printk>
   257e0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:199
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
   257e3:	a1 28 47 12 00       	mov    eax,ds:0x124728
   257e8:	83 ec 04             	sub    esp,0x4
   257eb:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   257ee:	50                   	push   eax
   257ef:	68 7d 54 08 00       	push   0x8547d
   257f4:	e8 0e 1d 00 00       	call   27507 <printk>
   257f9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:200
          for (int cnt=0;cnt<10;cnt++)
   257fc:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25803:	eb 2b                	jmp    25830 <printDumpedRegs+0x16f>
/home/yogi/src/os/chrisOS/src/init/utility.c:202 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
   25805:	a1 e8 46 12 00       	mov    eax,ds:0x1246e8
   2580a:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2580d:	c1 e2 02             	shl    edx,0x2
   25810:	01 d0                	add    eax,edx
   25812:	8b 00                	mov    eax,DWORD PTR [eax]
   25814:	83 ec 04             	sub    esp,0x4
   25817:	50                   	push   eax
   25818:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2581b:	68 95 54 08 00       	push   0x85495
   25820:	e8 e2 1c 00 00       	call   27507 <printk>
   25825:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:203 (discriminator 3)
              esp+=4;
   25828:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:200 (discriminator 3)
          printk("Bytes at CS:EIP: ");
/*          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
*/          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",exceptionSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   2582c:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:200 (discriminator 1)
   25830:	83 7d f0 09          	cmp    DWORD PTR [ebp-0x10],0x9
   25834:	7e cf                	jle    25805 <printDumpedRegs+0x144>
/home/yogi/src/os/chrisOS/src/init/utility.c:207
              printk("\t0x%08X%: 0x%08X\n",esp, exceptionSavedStack[cnt]);
              esp+=4;
          }


}
   25836:	90                   	nop
   25837:	8d 65 f8             	lea    esp,[ebp-0x8]
   2583a:	5b                   	pop    ebx
   2583b:	5e                   	pop    esi
   2583c:	5d                   	pop    ebp
   2583d:	c3                   	ret    

0002583e <printDebugRegs>:
printDebugRegs():
/home/yogi/src/os/chrisOS/src/init/utility.c:210

void printDebugRegs()
{
   2583e:	55                   	push   ebp
   2583f:	89 e5                	mov    ebp,esp
   25841:	56                   	push   esi
   25842:	53                   	push   ebx
   25843:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:211
    uint32_t esp = debugSavedESP;
   25846:	a1 80 47 12 00       	mov    eax,ds:0x124780
   2584b:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:214
    uint8_t* lCSIPPtr;

    lCSIPPtr=(uint8_t*)(debugEIP);
   2584e:	a1 90 47 12 00       	mov    eax,ds:0x124790
   25853:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:215
    printk("EAX=%08X\tEBX=%08X\tECX=%08X\tEDX=%08X\tEFL=%08X\n", debugAX, debugBX, debugCX, debugDX,debugFlags);
   25856:	8b 35 84 47 12 00    	mov    esi,DWORD PTR ds:0x124784
   2585c:	8b 1d 50 47 12 00    	mov    ebx,DWORD PTR ds:0x124750
   25862:	8b 0d 4c 47 12 00    	mov    ecx,DWORD PTR ds:0x12474c
   25868:	8b 15 48 47 12 00    	mov    edx,DWORD PTR ds:0x124748
   2586e:	a1 44 47 12 00       	mov    eax,ds:0x124744
   25873:	83 ec 08             	sub    esp,0x8
   25876:	56                   	push   esi
   25877:	53                   	push   ebx
   25878:	51                   	push   ecx
   25879:	52                   	push   edx
   2587a:	50                   	push   eax
   2587b:	68 94 53 08 00       	push   0x85394
   25880:	e8 82 1c 00 00       	call   27507 <printk>
   25885:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:216
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
   25888:	8b 1d 80 47 12 00    	mov    ebx,DWORD PTR ds:0x124780
   2588e:	8b 0d 58 47 12 00    	mov    ecx,DWORD PTR ds:0x124758
   25894:	8b 15 54 47 12 00    	mov    edx,DWORD PTR ds:0x124754
   2589a:	a1 5c 47 12 00       	mov    eax,ds:0x12475c
   2589f:	83 ec 0c             	sub    esp,0xc
   258a2:	53                   	push   ebx
   258a3:	51                   	push   ecx
   258a4:	52                   	push   edx
   258a5:	50                   	push   eax
   258a6:	68 c4 53 08 00       	push   0x853c4
   258ab:	e8 57 1c 00 00       	call   27507 <printk>
   258b0:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:217
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
   258b3:	8b 0d 68 47 12 00    	mov    ecx,DWORD PTR ds:0x124768
   258b9:	8b 15 64 47 12 00    	mov    edx,DWORD PTR ds:0x124764
   258bf:	a1 60 47 12 00       	mov    eax,ds:0x124760
   258c4:	51                   	push   ecx
   258c5:	52                   	push   edx
   258c6:	50                   	push   eax
   258c7:	68 a7 54 08 00       	push   0x854a7
   258cc:	e8 36 1c 00 00       	call   27507 <printk>
   258d1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:218
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
   258d4:	8b 1d 74 47 12 00    	mov    ebx,DWORD PTR ds:0x124774
   258da:	8b 0d 78 47 12 00    	mov    ecx,DWORD PTR ds:0x124778
   258e0:	8b 15 70 47 12 00    	mov    edx,DWORD PTR ds:0x124770
   258e6:	a1 6c 47 12 00       	mov    eax,ds:0x12476c
   258eb:	83 ec 0c             	sub    esp,0xc
   258ee:	53                   	push   ebx
   258ef:	51                   	push   ecx
   258f0:	52                   	push   edx
   258f1:	50                   	push   eax
   258f2:	68 14 54 08 00       	push   0x85414
   258f7:	e8 0b 1c 00 00       	call   27507 <printk>
   258fc:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:219
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
   258ff:	8b 0d 88 47 12 00    	mov    ecx,DWORD PTR ds:0x124788
   25905:	8b 15 90 47 12 00    	mov    edx,DWORD PTR ds:0x124790
   2590b:	a1 8c 47 12 00       	mov    eax,ds:0x12478c
   25910:	51                   	push   ecx
   25911:	52                   	push   edx
   25912:	50                   	push   eax
   25913:	68 44 54 08 00       	push   0x85444
   25918:	e8 ea 1b 00 00       	call   27507 <printk>
   2591d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:220
          printk("Bytes at CS:EIP: ");
   25920:	83 ec 0c             	sub    esp,0xc
   25923:	68 69 54 08 00       	push   0x85469
   25928:	e8 da 1b 00 00       	call   27507 <printk>
   2592d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:221
          for (int cnt=0;cnt<19;cnt++)
   25930:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25937:	eb 23                	jmp    2595c <printDebugRegs+0x11e>
/home/yogi/src/os/chrisOS/src/init/utility.c:222 (discriminator 3)
              printk("%02X ", lCSIPPtr[cnt]);
   25939:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   2593c:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   2593f:	01 d0                	add    eax,edx
   25941:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   25944:	0f b6 c0             	movzx  eax,al
   25947:	83 ec 08             	sub    esp,0x8
   2594a:	50                   	push   eax
   2594b:	68 c3 54 08 00       	push   0x854c3
   25950:	e8 b2 1b 00 00       	call   27507 <printk>
   25955:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:221 (discriminator 3)
    printk("EBP=%08X\tESI=%08X\tEDI=%08X\tESP=%08X\n", debugBP, debugSI, debugDI, debugSavedESP);
    printk("CR0=%08X\tCR2=%08X\tCR3=%08X\n", debugCR0, debugCR3, debugCR4);
    printk(" DS=%08X\t ES=%08X\t FS=%08X\t GS=%08X\n", debugDS, debugES, debugGS, debugFS);
    printk("CS:EIP = %04X:%08X, error code=%08X\n", debugCS, debugEIP, debugErrorCode);
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
   25958:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:221 (discriminator 1)
   2595c:	83 7d f0 12          	cmp    DWORD PTR [ebp-0x10],0x12
   25960:	7e d7                	jle    25939 <printDebugRegs+0xfb>
/home/yogi/src/os/chrisOS/src/init/utility.c:223
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
   25962:	83 ec 0c             	sub    esp,0xc
   25965:	68 7b 54 08 00       	push   0x8547b
   2596a:	e8 98 1b 00 00       	call   27507 <printk>
   2596f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:224
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
   25972:	a1 7c 47 12 00       	mov    eax,ds:0x12477c
   25977:	83 ec 04             	sub    esp,0x4
   2597a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2597d:	50                   	push   eax
   2597e:	68 7d 54 08 00       	push   0x8547d
   25983:	e8 7f 1b 00 00       	call   27507 <printk>
   25988:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:225
          for (int cnt=0;cnt<10;cnt++)
   2598b:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   25992:	eb 2b                	jmp    259bf <printDebugRegs+0x181>
/home/yogi/src/os/chrisOS/src/init/utility.c:227 (discriminator 3)
          {
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
   25994:	a1 ec 46 12 00       	mov    eax,ds:0x1246ec
   25999:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2599c:	c1 e2 02             	shl    edx,0x2
   2599f:	01 d0                	add    eax,edx
   259a1:	8b 00                	mov    eax,DWORD PTR [eax]
   259a3:	83 ec 04             	sub    esp,0x4
   259a6:	50                   	push   eax
   259a7:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   259aa:	68 95 54 08 00       	push   0x85495
   259af:	e8 53 1b 00 00       	call   27507 <printk>
   259b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:228 (discriminator 3)
              esp+=4;
   259b7:	83 45 f4 04          	add    DWORD PTR [ebp-0xc],0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:225 (discriminator 3)
          printk("Bytes at CS:EIP: ");
          for (int cnt=0;cnt<19;cnt++)
              printk("%02X ", lCSIPPtr[cnt]);
          printk("\n");
          printk ("Stack @ 0x%08x:0x%08X:\n",debugSS, esp);
          for (int cnt=0;cnt<10;cnt++)
   259bb:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:225 (discriminator 1)
   259bf:	83 7d ec 09          	cmp    DWORD PTR [ebp-0x14],0x9
   259c3:	7e cf                	jle    25994 <printDebugRegs+0x156>
/home/yogi/src/os/chrisOS/src/init/utility.c:232
              printk("\t0x%08X%: 0x%08X\n",esp, debugSavedStack[cnt]);
              esp+=4;
          }


}
   259c5:	90                   	nop
   259c6:	8d 65 f8             	lea    esp,[ebp-0x8]
   259c9:	5b                   	pop    ebx
   259ca:	5e                   	pop    esi
   259cb:	5d                   	pop    ebp
   259cc:	c3                   	ret    

000259cd <reboot>:
reboot():
/home/yogi/src/os/chrisOS/src/init/utility.c:240
/* keyboard interface IO port: data and control
   READ:   status port
   WRITE:  control register */
 
void reboot(bool waitFirst)
{
   259cd:	55                   	push   ebp
   259ce:	89 e5                	mov    ebp,esp
   259d0:	83 ec 28             	sub    esp,0x28
   259d3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   259d6:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:243
    uint8_t temp;
 
    if (waitFirst)
   259d9:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   259dd:	74 21                	je     25a00 <reboot+0x33>
/home/yogi/src/os/chrisOS/src/init/utility.c:245
    {
        puts("Rebooting ... ");
   259df:	83 ec 0c             	sub    esp,0xc
   259e2:	68 c9 54 08 00       	push   0x854c9
   259e7:	e8 9a 28 ff ff       	call   18286 <puts>
   259ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:246
        __asm__("sti\n");
   259ef:	fb                   	sti    
/home/yogi/src/os/chrisOS/src/init/utility.c:247
        wait(3000);
   259f0:	83 ec 0c             	sub    esp,0xc
   259f3:	68 b8 0b 00 00       	push   0xbb8
   259f8:	e8 49 2d 00 00       	call   28746 <wait>
   259fd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:249
    }
    __asm__ volatile ("cli"); /* disable all interrupts */
   25a00:	fa                   	cli    
/home/yogi/src/os/chrisOS/src/init/utility.c:254
 
    /* Clear all keyboard buffers (output and command buffers) */
    do
    {
        temp = inb(KBRD_INTRFC); /* empty user data */
   25a01:	83 ec 0c             	sub    esp,0xc
   25a04:	6a 64                	push   0x64
   25a06:	e8 0c f7 ff ff       	call   25117 <inb>
   25a0b:	83 c4 10             	add    esp,0x10
   25a0e:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:255
        if (check_flag(temp, KBRD_BIT_KDATA) != 0)
   25a11:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25a15:	83 e0 01             	and    eax,0x1
   25a18:	85 c0                	test   eax,eax
   25a1a:	74 0d                	je     25a29 <reboot+0x5c>
/home/yogi/src/os/chrisOS/src/init/utility.c:256
            inb(KBRD_IO); /* empty keyboard data */
   25a1c:	83 ec 0c             	sub    esp,0xc
   25a1f:	6a 60                	push   0x60
   25a21:	e8 f1 f6 ff ff       	call   25117 <inb>
   25a26:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:257
    } while (check_flag(temp, KBRD_BIT_UDATA) != 0);
   25a29:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   25a2d:	83 e0 02             	and    eax,0x2
   25a30:	85 c0                	test   eax,eax
   25a32:	75 cd                	jne    25a01 <reboot+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:259
 
    outb(KBRD_INTRFC, KBRD_RESET); /* pulse CPU reset line */
   25a34:	83 ec 08             	sub    esp,0x8
   25a37:	68 fe 00 00 00       	push   0xfe
   25a3c:	6a 64                	push   0x64
   25a3e:	e8 b5 f6 ff ff       	call   250f8 <outb>
   25a43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:261 (discriminator 1)
loop:
    __asm__ volatile ("hlt"); /* if that didn't work, halt the CPU */
   25a46:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/init/utility.c:262 (discriminator 1)
    goto loop; /* if a NMI is received, halt again */
   25a47:	eb fd                	jmp    25a46 <reboot+0x79>

00025a49 <dumpKernelAddresses>:
dumpKernelAddresses():
/home/yogi/src/os/chrisOS/src/init/utility.c:266
}

void dumpKernelAddresses()
{
   25a49:	55                   	push   ebp
   25a4a:	89 e5                	mov    ebp,esp
   25a4c:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:267
printk("Kernel Variable List:\n");
   25a4f:	83 ec 0c             	sub    esp,0xc
   25a52:	68 d8 54 08 00       	push   0x854d8
   25a57:	e8 ab 1a 00 00       	call   27507 <printk>
   25a5c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:268
printk("\tKERNEL_OBJECT_BASE_ADDRESS=0x%08x\n",KERNEL_OBJECT_BASE_ADDRESS);
   25a5f:	83 ec 08             	sub    esp,0x8
   25a62:	68 00 00 16 00       	push   0x160000
   25a67:	68 f0 54 08 00       	push   0x854f0
   25a6c:	e8 96 1a 00 00       	call   27507 <printk>
   25a71:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:269
printk("\tE820_TABLE_ADDRESS=0x%08x (0x%08X)\n",E820_TABLE_ADDRESS);
   25a74:	83 ec 08             	sub    esp,0x8
   25a77:	68 00 00 16 00       	push   0x160000
   25a7c:	68 14 55 08 00       	push   0x85514
   25a81:	e8 81 1a 00 00       	call   27507 <printk>
   25a86:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:270
printk("\tMP_CONFIG_TABLE_ADDRESS=0x%08x\n",MP_CONFIG_TABLE_ADDRESS);
   25a89:	83 ec 08             	sub    esp,0x8
   25a8c:	68 b0 04 16 00       	push   0x1604b0
   25a91:	68 3c 55 08 00       	push   0x8553c
   25a96:	e8 6c 1a 00 00       	call   27507 <printk>
   25a9b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:271
printk("\tKEYBOARD_BUFFER_ADDRESS=0x%08x\n",KEYBOARD_BUFFER_ADDRESS);
   25a9e:	83 ec 08             	sub    esp,0x8
   25aa1:	68 b0 24 16 00       	push   0x1624b0
   25aa6:	68 60 55 08 00       	push   0x85560
   25aab:	e8 57 1a 00 00       	call   27507 <printk>
   25ab0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:272
printk("\tIDT_TABLE_ADDRESS=0x%08x\n",IDT_TABLE_ADDRESS);
   25ab3:	83 ec 08             	sub    esp,0x8
   25ab6:	68 00 30 16 00       	push   0x163000
   25abb:	68 81 55 08 00       	push   0x85581
   25ac0:	e8 42 1a 00 00       	call   27507 <printk>
   25ac5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:273
printk("\tINIT_GDT_TABLE_ADDRESS=0x%08x\n",INIT_GDT_TABLE_ADDRESS);
   25ac8:	83 ec 08             	sub    esp,0x8
   25acb:	68 00 48 16 00       	push   0x164800
   25ad0:	68 9c 55 08 00       	push   0x8559c
   25ad5:	e8 2d 1a 00 00       	call   27507 <printk>
   25ada:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:274
printk("\tTASK_TABLE_ADDRESS=0x%08x\n",TASK_TABLE_ADDRESS);
   25add:	83 ec 08             	sub    esp,0x8
   25ae0:	68 00 60 16 00       	push   0x166000
   25ae5:	68 bc 55 08 00       	push   0x855bc
   25aea:	e8 18 1a 00 00       	call   27507 <printk>
   25aef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:275
printk("\tTSS_TABLE_ADDRESS=0x%08x\n",TSS_TABLE_ADDRESS);
   25af2:	83 ec 08             	sub    esp,0x8
   25af5:	68 00 70 2f 00       	push   0x2f7000
   25afa:	68 d8 55 08 00       	push   0x855d8
   25aff:	e8 03 1a 00 00       	call   27507 <printk>
   25b04:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:276
printk("\tATA_MBR_ARRAY_ADDRESS=0x%08x\n",ATA_MBR_ARRAY_ADDRESS);
   25b07:	83 ec 08             	sub    esp,0x8
   25b0a:	68 00 70 49 00       	push   0x497000
   25b0f:	68 f4 55 08 00       	push   0x855f4
   25b14:	e8 ee 19 00 00       	call   27507 <printk>
   25b19:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:277
printk("\tPCI_DEVICE_LIST_ADDRESS=0x%08x\n",PCI_DEVICE_LIST_ADDRESS);
   25b1c:	83 ec 08             	sub    esp,0x8
   25b1f:	68 00 80 49 00       	push   0x498000
   25b24:	68 14 56 08 00       	push   0x85614
   25b29:	e8 d9 19 00 00       	call   27507 <printk>
   25b2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:278
printk("\tPCI_BRIDGE_LIST_ADDRESS=0x%08x\n",PCI_BRIDGE_LIST_ADDRESS);
   25b31:	83 ec 08             	sub    esp,0x8
   25b34:	68 00 80 4a 00       	push   0x4a8000
   25b39:	68 38 56 08 00       	push   0x85638
   25b3e:	e8 c4 19 00 00       	call   27507 <printk>
   25b43:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:279
printk("\tPCI_FUNCTION_LIST_ADDRESS=0x%08x\n",PCI_FUNCTION_LIST_ADDRESS);
   25b46:	83 ec 08             	sub    esp,0x8
   25b49:	68 00 80 4b 00       	push   0x4b8000
   25b4e:	68 5c 56 08 00       	push   0x8565c
   25b53:	e8 af 19 00 00       	call   27507 <printk>
   25b58:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:280
printk("\tGDT_PMODE_16BIT_TABLE_ADDRESS=0x%08x\n",GDT_PMODE_16BIT_TABLE_ADDRESS);
   25b5b:	83 ec 08             	sub    esp,0x8
   25b5e:	68 00 90 4b 00       	push   0x4b9000
   25b63:	68 80 56 08 00       	push   0x85680
   25b68:	e8 9a 19 00 00       	call   27507 <printk>
   25b6d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:281
printk("\tKERNEL_PAGE_DIR_ADDRESS=0x%08x\n",KERNEL_PAGE_DIR_ADDRESS);
   25b70:	83 ec 08             	sub    esp,0x8
   25b73:	68 00 a0 4b 00       	push   0x4ba000
   25b78:	68 a8 56 08 00       	push   0x856a8
   25b7d:	e8 85 19 00 00       	call   27507 <printk>
   25b82:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:282
printk("\tKERNEL_PAGE_TABLE_BASE_ADDRESS=0x%08x\n",KERNEL_PAGE_TABLE_BASE_ADDRESS);
   25b85:	83 ec 08             	sub    esp,0x8
   25b88:	68 00 c0 4c 00       	push   0x4cc000
   25b8d:	68 cc 56 08 00       	push   0x856cc
   25b92:	e8 70 19 00 00       	call   27507 <printk>
   25b97:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:283
printk("\tSAVED_STACK_FOR_EXCEPTIONS_ADDRESS=0x%08x\n",SAVED_STACK_FOR_EXCEPTIONS_ADDRESS);
   25b9a:	83 ec 08             	sub    esp,0x8
   25b9d:	68 00 d0 ac 00       	push   0xacd000
   25ba2:	68 f4 56 08 00       	push   0x856f4
   25ba7:	e8 5b 19 00 00       	call   27507 <printk>
   25bac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:284
printk("\tSAVED_STACK_FOR_DEBUGGING_ADDRESS=0x%08x\n",SAVED_STACK_FOR_DEBUGGING_ADDRESS);
   25baf:	83 ec 08             	sub    esp,0x8
   25bb2:	68 00 f0 ac 00       	push   0xacf000
   25bb7:	68 20 57 08 00       	push   0x85720
   25bbc:	e8 46 19 00 00       	call   27507 <printk>
   25bc1:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:285
printk("\tCPU_APIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_APIC_REGISTER_REMAP_BASE_ADDRESS);
   25bc4:	83 ec 08             	sub    esp,0x8
   25bc7:	68 00 10 ad 00       	push   0xad1000
   25bcc:	68 4c 57 08 00       	push   0x8574c
   25bd1:	e8 31 19 00 00       	call   27507 <printk>
   25bd6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:286
printk("\tCPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS=0x%08x\n",CPU_IOAPIC_REGISTER_REMAP_BASE_ADDRESS);
   25bd9:	83 ec 08             	sub    esp,0x8
   25bdc:	68 00 20 ad 00       	push   0xad2000
   25be1:	68 7c 57 08 00       	push   0x8577c
   25be6:	e8 1c 19 00 00       	call   27507 <printk>
   25beb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:287
printk("\tKERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS=0x%08x\n",KERNEL_TICKS_SINCE_START_VARIABLE_ADDRESS);
   25bee:	83 ec 08             	sub    esp,0x8
   25bf1:	68 04 20 ad 00       	push   0xad2004
   25bf6:	68 ac 57 08 00       	push   0x857ac
   25bfb:	e8 07 19 00 00       	call   27507 <printk>
   25c00:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:288
printk("\tAHCI_ABAR_REMAPPED_ADDRESS=0x%08x\n",AHCI_ABAR_REMAPPED_ADDRESS);
   25c03:	83 ec 08             	sub    esp,0x8
   25c06:	68 00 30 ad 00       	push   0xad3000
   25c0b:	68 e0 57 08 00       	push   0x857e0
   25c10:	e8 f2 18 00 00       	call   27507 <printk>
   25c15:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:289
printk("\tAHCI_PORT_BASE_REMAP_ADDRESS=0x%08x\n",AHCI_PORT_BASE_REMAP_ADDRESS);
   25c18:	83 ec 08             	sub    esp,0x8
   25c1b:	68 00 30 b1 00       	push   0xb13000
   25c20:	68 04 58 08 00       	push   0x85804
   25c25:	e8 dd 18 00 00       	call   27507 <printk>
   25c2a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:290
printk("\tAHCI_DISK_BUFFER_ADDRESS=0x%08x\n",AHCI_DISK_BUFFER_ADDRESS);
   25c2d:	83 ec 08             	sub    esp,0x8
   25c30:	68 00 30 c5 00       	push   0xc53000
   25c35:	68 2c 58 08 00       	push   0x8582c
   25c3a:	e8 c8 18 00 00       	call   27507 <printk>
   25c3f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:291
printk("\tATA_DEVICE_INFO_ADDRESS=0x%08x\n",ATA_DEVICE_INFO_ADDRESS);
   25c42:	83 ec 08             	sub    esp,0x8
   25c45:	68 00 30 d9 00       	push   0xd93000
   25c4a:	68 50 58 08 00       	push   0x85850
   25c4f:	e8 b3 18 00 00       	call   27507 <printk>
   25c54:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:292
printk("\tAHCI_CAPS_ADDRESS=0x%08x\n",AHCI_CAPS_ADDRESS);
   25c57:	83 ec 08             	sub    esp,0x8
   25c5a:	68 20 7e d9 00       	push   0xd97e20
   25c5f:	68 71 58 08 00       	push   0x85871
   25c64:	e8 9e 18 00 00       	call   27507 <printk>
   25c69:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:293
printk("\tTSS_AVAILABLE_ADDRESS=0x%08x\n",TASK_AVAILABLE_ADDRESS);
   25c6c:	83 ec 08             	sub    esp,0x8
   25c6f:	68 40 cc d9 00       	push   0xd9cc40
   25c74:	68 8c 58 08 00       	push   0x8588c
   25c79:	e8 89 18 00 00       	call   27507 <printk>
   25c7e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:294
printk("\tGDT_AVAILABLE_ADDRESS=0x%08x\n",GDT_AVAILABLE_ADDRESS);
   25c81:	83 ec 08             	sub    esp,0x8
   25c84:	68 40 d4 d9 00       	push   0xd9d440
   25c89:	68 ac 58 08 00       	push   0x858ac
   25c8e:	e8 74 18 00 00       	call   27507 <printk>
   25c93:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:295
printk("\tEXEC_FILE_LOAD_INFO=0x%08x\n",EXEC_FILE_LOAD_INFO);
   25c96:	83 ec 08             	sub    esp,0x8
   25c99:	68 40 dc d9 00       	push   0xd9dc40
   25c9e:	68 cb 58 08 00       	push   0x858cb
   25ca3:	e8 5f 18 00 00       	call   27507 <printk>
   25ca8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:296
printk("\tAHCI_ABAR_ADDRESS=0x%08x\n",AHCI_ABAR_ADDRESS);
   25cab:	83 ec 08             	sub    esp,0x8
   25cae:	68 e0 62 db 00       	push   0xdb62e0
   25cb3:	68 e8 58 08 00       	push   0x858e8
   25cb8:	e8 4a 18 00 00       	call   27507 <printk>
   25cbd:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:297
printk("\tEND_OF_KERNEL_OBJECTS_ADDRESS=0x%08x\n",END_OF_KERNEL_OBJECTS_ADDRESS);
   25cc0:	83 ec 08             	sub    esp,0x8
   25cc3:	68 e0 62 eb 00       	push   0xeb62e0
   25cc8:	68 04 59 08 00       	push   0x85904
   25ccd:	e8 35 18 00 00       	call   27507 <printk>
   25cd2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:298
}
   25cd5:	90                   	nop
   25cd6:	c9                   	leave  
   25cd7:	c3                   	ret    

00025cd8 <pauseDisplay>:
pauseDisplay():
/home/yogi/src/os/chrisOS/src/init/utility.c:301

bool pauseDisplay(bool offerToQuit)
{
   25cd8:	55                   	push   ebp
   25cd9:	89 e5                	mov    ebp,esp
   25cdb:	83 ec 28             	sub    esp,0x28
   25cde:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ce1:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/init/utility.c:302
    if (offerToQuit)
   25ce4:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25ce8:	74 12                	je     25cfc <pauseDisplay+0x24>
/home/yogi/src/os/chrisOS/src/init/utility.c:303
        printk("Press q to quit, any other key to continue ...");
   25cea:	83 ec 0c             	sub    esp,0xc
   25ced:	68 2c 59 08 00       	push   0x8592c
   25cf2:	e8 10 18 00 00       	call   27507 <printk>
   25cf7:	83 c4 10             	add    esp,0x10
   25cfa:	eb 10                	jmp    25d0c <pauseDisplay+0x34>
/home/yogi/src/os/chrisOS/src/init/utility.c:305
    else
        printk("Press a key to continue ... ");
   25cfc:	83 ec 0c             	sub    esp,0xc
   25cff:	68 5b 59 08 00       	push   0x8595b
   25d04:	e8 fe 17 00 00       	call   27507 <printk>
   25d09:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:306
    char lPressedKey=waitForKeyboardKey();
   25d0c:	e8 17 b5 fe ff       	call   11228 <waitForKeyboardKey>
   25d11:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/init/utility.c:307
    cursorMoveToX(0);
   25d14:	83 ec 0c             	sub    esp,0xc
   25d17:	6a 00                	push   0x0
   25d19:	e8 65 24 ff ff       	call   18183 <cursorMoveToX>
   25d1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:308
    printk("                                           ");
   25d21:	83 ec 0c             	sub    esp,0xc
   25d24:	68 78 59 08 00       	push   0x85978
   25d29:	e8 d9 17 00 00       	call   27507 <printk>
   25d2e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:309
    cursorMoveToX(0);
   25d31:	83 ec 0c             	sub    esp,0xc
   25d34:	6a 00                	push   0x0
   25d36:	e8 48 24 ff ff       	call   18183 <cursorMoveToX>
   25d3b:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:310
    if (lPressedKey=='q' && offerToQuit)
   25d3e:	80 7d f7 71          	cmp    BYTE PTR [ebp-0x9],0x71
   25d42:	75 0d                	jne    25d51 <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:310 (discriminator 1)
   25d44:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   25d48:	74 07                	je     25d51 <pauseDisplay+0x79>
/home/yogi/src/os/chrisOS/src/init/utility.c:311
        return true;
   25d4a:	b8 01 00 00 00       	mov    eax,0x1
   25d4f:	eb 05                	jmp    25d56 <pauseDisplay+0x7e>
/home/yogi/src/os/chrisOS/src/init/utility.c:312
    return false;
   25d51:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/init/utility.c:313
}
   25d56:	c9                   	leave  
   25d57:	c3                   	ret    

00025d58 <mallocTemp>:
mallocTemp():
/home/yogi/src/os/chrisOS/src/init/utility.c:317

int memPtr=0xe00000;
uintptr_t* mallocTemp(int size)
{
   25d58:	55                   	push   ebp
   25d59:	89 e5                	mov    ebp,esp
   25d5b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:318
    uintptr_t lRetVal = memPtr;
   25d5e:	a1 a0 de 02 00       	mov    eax,ds:0x2dea0
   25d63:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:319
    memPtr+=size;
   25d66:	8b 15 a0 de 02 00    	mov    edx,DWORD PTR ds:0x2dea0
   25d6c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25d6f:	01 d0                	add    eax,edx
   25d71:	a3 a0 de 02 00       	mov    ds:0x2dea0,eax
/home/yogi/src/os/chrisOS/src/init/utility.c:320
    return (uintptr_t*)lRetVal;
   25d76:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/init/utility.c:321
}
   25d79:	c9                   	leave  
   25d7a:	c3                   	ret    

00025d7b <displayGDT>:
displayGDT():
/home/yogi/src/os/chrisOS/src/init/utility.c:324

void displayGDT()
{
   25d7b:	55                   	push   ebp
   25d7c:	89 e5                	mov    ebp,esp
   25d7e:	56                   	push   esi
   25d7f:	53                   	push   ebx
   25d80:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:325
    sGDT* theGDT=bootGdt;
   25d83:	a1 84 49 12 00       	mov    eax,ds:0x124984
   25d88:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/init/utility.c:327
    
    printk("Listing GDT Table\n");
   25d8b:	83 ec 0c             	sub    esp,0xc
   25d8e:	68 a4 59 08 00       	push   0x859a4
   25d93:	e8 6f 17 00 00       	call   27507 <printk>
   25d98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:328
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
   25d9b:	83 ec 0c             	sub    esp,0xc
   25d9e:	68 b8 59 08 00       	push   0x859b8
   25da3:	e8 5f 17 00 00       	call   27507 <printk>
   25da8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:329
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
   25dab:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   25db2:	e9 94 00 00 00       	jmp    25e4b <displayGDT+0xd0>
/home/yogi/src/os/chrisOS/src/init/utility.c:331
    {
        if (theGDT->access!=0 || cnt==0)
   25db7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25dba:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
   25dbe:	84 c0                	test   al,al
   25dc0:	75 06                	jne    25dc8 <displayGDT+0x4d>
/home/yogi/src/os/chrisOS/src/init/utility.c:331 (discriminator 1)
   25dc2:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   25dc6:	75 7b                	jne    25e43 <displayGDT+0xc8>
/home/yogi/src/os/chrisOS/src/init/utility.c:342
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
   25dc8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25dcb:	0f b6 40 06          	movzx  eax,BYTE PTR [eax+0x6]
   25dcf:	0f be c0             	movsx  eax,al
   25dd2:	25 f0 00 00 00       	and    eax,0xf0
   25dd7:	c1 f8 04             	sar    eax,0x4
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   25dda:	0f b6 d0             	movzx  edx,al
/home/yogi/src/os/chrisOS/src/init/utility.c:341
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
   25ddd:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25de0:	0f b6 40 05          	movzx  eax,BYTE PTR [eax+0x5]
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   25de4:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/init/utility.c:340
                    "0x%08X\t"  /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
   25de7:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25dea:	0f b7 09             	movzx  ecx,WORD PTR [ecx]
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   25ded:	0f b7 d9             	movzx  ebx,cx
/home/yogi/src/os/chrisOS/src/init/utility.c:340
                    "0x%08X\t"  /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
   25df0:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25df3:	0f b6 49 06          	movzx  ecx,BYTE PTR [ecx+0x6]
   25df7:	0f be c9             	movsx  ecx,cl
   25dfa:	83 e1 0f             	and    ecx,0xf
   25dfd:	c1 e1 10             	shl    ecx,0x10
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   25e00:	09 cb                	or     ebx,ecx
/home/yogi/src/os/chrisOS/src/init/utility.c:339
                    "0x%08X\t"  /*base*/
                    "0x%08X\t"  /*limit*/
                    "0x%02X\t\t" /*Access*/
                    "0x%01X\n" ,  /*Flags*/
                    cnt,
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
   25e02:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25e05:	0f b6 49 07          	movzx  ecx,BYTE PTR [ecx+0x7]
   25e09:	0f be c9             	movsx  ecx,cl
   25e0c:	89 ce                	mov    esi,ecx
   25e0e:	c1 e6 18             	shl    esi,0x18
   25e11:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25e14:	0f b6 49 04          	movzx  ecx,BYTE PTR [ecx+0x4]
   25e18:	0f be c9             	movsx  ecx,cl
   25e1b:	c1 e1 10             	shl    ecx,0x10
   25e1e:	09 ce                	or     esi,ecx
   25e20:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   25e23:	0f b7 49 02          	movzx  ecx,WORD PTR [ecx+0x2]
/home/yogi/src/os/chrisOS/src/init/utility.c:333
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
    {
        if (theGDT->access!=0 || cnt==0)
        {
            printk("%u\t\t"     /*GDT#*/
   25e27:	0f b7 c9             	movzx  ecx,cx
   25e2a:	09 f1                	or     ecx,esi
   25e2c:	83 ec 08             	sub    esp,0x8
   25e2f:	52                   	push   edx
   25e30:	50                   	push   eax
   25e31:	53                   	push   ebx
   25e32:	51                   	push   ecx
   25e33:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   25e36:	68 dc 59 08 00       	push   0x859dc
   25e3b:	e8 c7 16 00 00       	call   27507 <printk>
   25e40:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/init/utility.c:344 (discriminator 2)
                    theGDT->base_high<<24 | theGDT->base_middle<<16 | theGDT->base_low,
                    theGDT->limit_low | (theGDT->flags_and_limit & 0x0F)<<16,
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
   25e43:	83 45 f4 08          	add    DWORD PTR [ebp-0xc],0x8
/home/yogi/src/os/chrisOS/src/init/utility.c:329 (discriminator 2)
{
    sGDT* theGDT=bootGdt;
    
    printk("Listing GDT Table\n");
    printk("Entry\tBase\t\t\tlimit\t\tAccess\tFlags\n");
    for (int cnt=0;cnt<(int)(kernelGDT.limit/sizeof(sGDT));cnt++)
   25e47:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/init/utility.c:329 (discriminator 1)
   25e4b:	0f b7 05 88 49 12 00 	movzx  eax,WORD PTR ds:0x124988
   25e52:	66 c1 e8 03          	shr    ax,0x3
   25e56:	0f b7 c0             	movzx  eax,ax
   25e59:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   25e5c:	0f 8f 55 ff ff ff    	jg     25db7 <displayGDT+0x3c>
/home/yogi/src/os/chrisOS/src/init/utility.c:346
                    (uint8_t)theGDT->access,
                    (uint8_t)((theGDT->flags_and_limit&0xF0)>>4));
        }
        theGDT++;
    }
   25e62:	90                   	nop
   25e63:	8d 65 f8             	lea    esp,[ebp-0x8]
   25e66:	5b                   	pop    ebx
   25e67:	5e                   	pop    esi
   25e68:	5d                   	pop    ebp
   25e69:	c3                   	ret    
   25e6a:	66 90                	xchg   ax,ax

00025e6c <memcpy>:
memcpy():
/home/yogi/src/os/chrisOS/src/memcpy.c:12
 */
//clr 05/26/2016: Modified to copy by 4 or 2 bytes if applicable
//This is needed for many memory mapped registers which cannot be
//copied a byte at a time
void * memcpy(void *dest, const void *src, size_t n)
{
   25e6c:	55                   	push   ebp
   25e6d:	89 e5                	mov    ebp,esp
   25e6f:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/memcpy.c:15
    bool dw,dd;
    
    dd=n%4==0;
   25e72:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25e75:	83 e0 03             	and    eax,0x3
   25e78:	85 c0                	test   eax,eax
   25e7a:	0f 94 c0             	sete   al
   25e7d:	88 45 e7             	mov    BYTE PTR [ebp-0x19],al
/home/yogi/src/os/chrisOS/src/memcpy.c:16
    dw=n%2==0;
   25e80:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25e83:	83 e0 01             	and    eax,0x1
   25e86:	85 c0                	test   eax,eax
   25e88:	0f 94 c0             	sete   al
   25e8b:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/memcpy.c:17
    if (dd)
   25e8e:	80 7d e7 00          	cmp    BYTE PTR [ebp-0x19],0x0
   25e92:	74 7d                	je     25f11 <memcpy+0xa5>
/home/yogi/src/os/chrisOS/src/memcpy.c:19
    {
        n /=4;
   25e94:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25e97:	c1 e8 02             	shr    eax,0x2
   25e9a:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:20
        const uint32_t *f = src;
   25e9d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25ea0:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:21
        uint32_t *t = dest;
   25ea3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25ea6:	89 45 f8             	mov    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:23

        if (f < t) {
   25ea9:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25eac:	3b 45 f8             	cmp    eax,DWORD PTR [ebp-0x8]
   25eaf:	73 4b                	jae    25efc <memcpy+0x90>
/home/yogi/src/os/chrisOS/src/memcpy.c:24
                f += n;
   25eb1:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25eb4:	c1 e0 02             	shl    eax,0x2
   25eb7:	01 45 fc             	add    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:25
                t += n;
   25eba:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25ebd:	c1 e0 02             	shl    eax,0x2
   25ec0:	01 45 f8             	add    DWORD PTR [ebp-0x8],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:26
                while ( (n)-- > 0)
   25ec3:	eb 12                	jmp    25ed7 <memcpy+0x6b>
/home/yogi/src/os/chrisOS/src/memcpy.c:27
                        *--t = *--f;
   25ec5:	83 6d f8 04          	sub    DWORD PTR [ebp-0x8],0x4
   25ec9:	83 6d fc 04          	sub    DWORD PTR [ebp-0x4],0x4
   25ecd:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   25ed0:	8b 10                	mov    edx,DWORD PTR [eax]
   25ed2:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25ed5:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:26
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   25ed7:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25eda:	8d 50 ff             	lea    edx,[eax-0x1]
   25edd:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25ee0:	85 c0                	test   eax,eax
   25ee2:	75 e1                	jne    25ec5 <memcpy+0x59>
   25ee4:	eb 23                	jmp    25f09 <memcpy+0x9d>
/home/yogi/src/os/chrisOS/src/memcpy.c:30
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   25ee6:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   25ee9:	8d 50 04             	lea    edx,[eax+0x4]
   25eec:	89 55 f8             	mov    DWORD PTR [ebp-0x8],edx
   25eef:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   25ef2:	8d 4a 04             	lea    ecx,[edx+0x4]
   25ef5:	89 4d fc             	mov    DWORD PTR [ebp-0x4],ecx
   25ef8:	8b 12                	mov    edx,DWORD PTR [edx]
   25efa:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:29
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   25efc:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25eff:	8d 50 ff             	lea    edx,[eax-0x1]
   25f02:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25f05:	85 c0                	test   eax,eax
   25f07:	75 dd                	jne    25ee6 <memcpy+0x7a>
/home/yogi/src/os/chrisOS/src/memcpy.c:31
                        *t++ = *f++;
        return dest;
   25f09:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f0c:	e9 ea 00 00 00       	jmp    25ffb <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:33
    }
    else if (dw)
   25f11:	80 7d e6 00          	cmp    BYTE PTR [ebp-0x1a],0x0
   25f15:	74 79                	je     25f90 <memcpy+0x124>
/home/yogi/src/os/chrisOS/src/memcpy.c:35
    {
        n /=2;
   25f17:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25f1a:	d1 e8                	shr    eax,1
   25f1c:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:36
        const uint32_t *f = src;
   25f1f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25f22:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:37
        uint32_t *t = dest;
   25f25:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f28:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:39

        if (f < t) {
   25f2b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25f2e:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   25f31:	73 4b                	jae    25f7e <memcpy+0x112>
/home/yogi/src/os/chrisOS/src/memcpy.c:40
                f += n;
   25f33:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25f36:	c1 e0 02             	shl    eax,0x2
   25f39:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:41
                t += n;
   25f3c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25f3f:	c1 e0 02             	shl    eax,0x2
   25f42:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:42
                while ( (n)-- > 0)
   25f45:	eb 12                	jmp    25f59 <memcpy+0xed>
/home/yogi/src/os/chrisOS/src/memcpy.c:43
                        *--t = *--f;
   25f47:	83 6d f0 04          	sub    DWORD PTR [ebp-0x10],0x4
   25f4b:	83 6d f4 04          	sub    DWORD PTR [ebp-0xc],0x4
   25f4f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   25f52:	8b 10                	mov    edx,DWORD PTR [eax]
   25f54:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25f57:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:42
        uint32_t *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while ( (n)-- > 0)
   25f59:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25f5c:	8d 50 ff             	lea    edx,[eax-0x1]
   25f5f:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25f62:	85 c0                	test   eax,eax
   25f64:	75 e1                	jne    25f47 <memcpy+0xdb>
   25f66:	eb 23                	jmp    25f8b <memcpy+0x11f>
/home/yogi/src/os/chrisOS/src/memcpy.c:46
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
                        *t++ = *f++;
   25f68:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   25f6b:	8d 50 04             	lea    edx,[eax+0x4]
   25f6e:	89 55 f0             	mov    DWORD PTR [ebp-0x10],edx
   25f71:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   25f74:	8d 4a 04             	lea    ecx,[edx+0x4]
   25f77:	89 4d f4             	mov    DWORD PTR [ebp-0xc],ecx
   25f7a:	8b 12                	mov    edx,DWORD PTR [edx]
   25f7c:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/memcpy.c:45
                f += n;
                t += n;
                while ( (n)-- > 0)
                        *--t = *--f;
        } else
                while ( (n)-- > 0)
   25f7e:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25f81:	8d 50 ff             	lea    edx,[eax-0x1]
   25f84:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25f87:	85 c0                	test   eax,eax
   25f89:	75 dd                	jne    25f68 <memcpy+0xfc>
/home/yogi/src/os/chrisOS/src/memcpy.c:47
                        *t++ = *f++;
        return dest;
   25f8b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f8e:	eb 6b                	jmp    25ffb <memcpy+0x18f>
/home/yogi/src/os/chrisOS/src/memcpy.c:51
    }
    else
    {
        const char *f = src;
   25f90:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   25f93:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:52
        char *t = dest;
   25f96:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   25f99:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:54

        if (f < t) {
   25f9c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   25f9f:	3b 45 e8             	cmp    eax,DWORD PTR [ebp-0x18]
   25fa2:	73 47                	jae    25feb <memcpy+0x17f>
/home/yogi/src/os/chrisOS/src/memcpy.c:55
                f += n;
   25fa4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25fa7:	01 45 ec             	add    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:56
                t += n;
   25faa:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25fad:	01 45 e8             	add    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/memcpy.c:57
                while (n-- > 0)
   25fb0:	eb 13                	jmp    25fc5 <memcpy+0x159>
/home/yogi/src/os/chrisOS/src/memcpy.c:58
                        *--t = *--f;
   25fb2:	83 6d e8 01          	sub    DWORD PTR [ebp-0x18],0x1
   25fb6:	83 6d ec 01          	sub    DWORD PTR [ebp-0x14],0x1
   25fba:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   25fbd:	0f b6 10             	movzx  edx,BYTE PTR [eax]
   25fc0:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25fc3:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:57
        char *t = dest;

        if (f < t) {
                f += n;
                t += n;
                while (n-- > 0)
   25fc5:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25fc8:	8d 50 ff             	lea    edx,[eax-0x1]
   25fcb:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25fce:	85 c0                	test   eax,eax
   25fd0:	75 e0                	jne    25fb2 <memcpy+0x146>
   25fd2:	eb 24                	jmp    25ff8 <memcpy+0x18c>
/home/yogi/src/os/chrisOS/src/memcpy.c:61
                        *--t = *--f;
        } else
                while (n-- > 0)
                        *t++ = *f++;
   25fd4:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   25fd7:	8d 50 01             	lea    edx,[eax+0x1]
   25fda:	89 55 e8             	mov    DWORD PTR [ebp-0x18],edx
   25fdd:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   25fe0:	8d 4a 01             	lea    ecx,[edx+0x1]
   25fe3:	89 4d ec             	mov    DWORD PTR [ebp-0x14],ecx
   25fe6:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   25fe9:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/memcpy.c:60
                f += n;
                t += n;
                while (n-- > 0)
                        *--t = *--f;
        } else
                while (n-- > 0)
   25feb:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   25fee:	8d 50 ff             	lea    edx,[eax-0x1]
   25ff1:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   25ff4:	85 c0                	test   eax,eax
   25ff6:	75 dc                	jne    25fd4 <memcpy+0x168>
/home/yogi/src/os/chrisOS/src/memcpy.c:62
                        *t++ = *f++;
        return dest;
   25ff8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/memcpy.c:64
    }
   25ffb:	c9                   	leave  
   25ffc:	c3                   	ret    
   25ffd:	66 90                	xchg   ax,ax
   25fff:	90                   	nop

00026000 <fat_list_init>:
fat_list_init():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:47

//-----------------------------------------------------------------
// fat_list_init:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_init(struct fat_list *list)
{
   26000:	55                   	push   ebp
   26001:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:50
    FAT_ASSERT(list);

    list->head = list->tail = 0;
   26003:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26006:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
   2600d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26010:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26013:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26016:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:51
}
   26018:	90                   	nop
   26019:	5d                   	pop    ebp
   2601a:	c3                   	ret    

0002601b <fat_list_remove>:
fat_list_remove():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:56
//-----------------------------------------------------------------
// fat_list_remove:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_remove(struct fat_list *list, struct fat_node *node)
{
   2601b:	55                   	push   ebp
   2601c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:60
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if(!node->previous)
   2601e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26021:	8b 00                	mov    eax,DWORD PTR [eax]
   26023:	85 c0                	test   eax,eax
   26025:	75 0d                	jne    26034 <fat_list_remove+0x19>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:61
        list->head = node->next;
   26027:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2602a:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2602d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26030:	89 10                	mov    DWORD PTR [eax],edx
   26032:	eb 0e                	jmp    26042 <fat_list_remove+0x27>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:63
    else
        node->previous->next = node->next;
   26034:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26037:	8b 00                	mov    eax,DWORD PTR [eax]
   26039:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2603c:	8b 52 04             	mov    edx,DWORD PTR [edx+0x4]
   2603f:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:65

    if(!node->next)
   26042:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26045:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26048:	85 c0                	test   eax,eax
   2604a:	75 0d                	jne    26059 <fat_list_remove+0x3e>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:66
        list->tail = node->previous;
   2604c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2604f:	8b 10                	mov    edx,DWORD PTR [eax]
   26051:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26054:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
    else
        node->next->previous = node->previous;
}
   26057:	eb 0d                	jmp    26066 <fat_list_remove+0x4b>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:68
        node->previous->next = node->next;

    if(!node->next)
        list->tail = node->previous;
    else
        node->next->previous = node->previous;
   26059:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2605c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2605f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26062:	8b 12                	mov    edx,DWORD PTR [edx]
   26064:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:69
}
   26066:	90                   	nop
   26067:	5d                   	pop    ebp
   26068:	c3                   	ret    

00026069 <fat_list_insert_after>:
fat_list_insert_after():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:74
//-----------------------------------------------------------------
// fat_list_insert_after:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_after(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   26069:	55                   	push   ebp
   2606a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:79
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node;
   2606c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2606f:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26072:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:80
    new_node->next = node->next;
   26074:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26077:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2607a:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2607d:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:81
    if (!node->next)
   26080:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26083:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26086:	85 c0                	test   eax,eax
   26088:	75 0b                	jne    26095 <fat_list_insert_after+0x2c>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:82
        list->tail = new_node;
   2608a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2608d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   26090:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
   26093:	eb 0b                	jmp    260a0 <fat_list_insert_after+0x37>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:84
    else
        node->next->previous = new_node;
   26095:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26098:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2609b:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   2609e:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:85
    node->next = new_node;
   260a0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   260a3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   260a6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:86
}
   260a9:	90                   	nop
   260aa:	5d                   	pop    ebp
   260ab:	c3                   	ret    

000260ac <fat_list_insert_before>:
fat_list_insert_before():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:91
//-----------------------------------------------------------------
// fat_list_insert_before:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_before(struct fat_list *list, struct fat_node *node, struct fat_node *new_node)
{
   260ac:	55                   	push   ebp
   260ad:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:96
    FAT_ASSERT(list);
    FAT_ASSERT(node);
    FAT_ASSERT(new_node);

    new_node->previous = node->previous;
   260af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   260b2:	8b 10                	mov    edx,DWORD PTR [eax]
   260b4:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   260b7:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:97
    new_node->next = node;
   260b9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   260bc:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   260bf:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:98
    if (!node->previous)
   260c2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   260c5:	8b 00                	mov    eax,DWORD PTR [eax]
   260c7:	85 c0                	test   eax,eax
   260c9:	75 0a                	jne    260d5 <fat_list_insert_before+0x29>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:99
        list->head = new_node;
   260cb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260ce:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   260d1:	89 10                	mov    DWORD PTR [eax],edx
   260d3:	eb 0b                	jmp    260e0 <fat_list_insert_before+0x34>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:101
    else
        node->previous->next = new_node;
   260d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   260d8:	8b 00                	mov    eax,DWORD PTR [eax]
   260da:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   260dd:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:102
    node->previous = new_node;
   260e0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   260e3:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   260e6:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:103
}
   260e8:	90                   	nop
   260e9:	5d                   	pop    ebp
   260ea:	c3                   	ret    

000260eb <fat_list_insert_first>:
fat_list_insert_first():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:108
//-----------------------------------------------------------------
// fat_list_insert_first:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_first(struct fat_list *list, struct fat_node *node)
{
   260eb:	55                   	push   ebp
   260ec:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:112
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->head)
   260ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260f1:	8b 00                	mov    eax,DWORD PTR [eax]
   260f3:	85 c0                	test   eax,eax
   260f5:	75 26                	jne    2611d <fat_list_insert_first+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:114
    {
        list->head = node;
   260f7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   260fa:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   260fd:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:115
        list->tail = node;
   260ff:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26102:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   26105:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:116
        node->previous = 0;
   26108:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2610b:	c7 00 00 00 00 00    	mov    DWORD PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:117
        node->next = 0;
   26111:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26114:	c7 40 04 00 00 00 00 	mov    DWORD PTR [eax+0x4],0x0
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
    }
    else
        fat_list_insert_before(list, list->head, node);
}
   2611b:	eb 14                	jmp    26131 <fat_list_insert_first+0x46>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:120
        list->tail = node;
        node->previous = 0;
        node->next = 0;
    }
    else
        fat_list_insert_before(list, list->head, node);
   2611d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26120:	8b 00                	mov    eax,DWORD PTR [eax]
   26122:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26125:	50                   	push   eax
   26126:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26129:	e8 7e ff ff ff       	call   260ac <fat_list_insert_before>
   2612e:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:121
}
   26131:	90                   	nop
   26132:	c9                   	leave  
   26133:	c3                   	ret    

00026134 <fat_list_insert_last>:
fat_list_insert_last():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:126
//-----------------------------------------------------------------
// fat_list_insert_last:
//-----------------------------------------------------------------
static FAT_INLINE void fat_list_insert_last(struct fat_list *list, struct fat_node *node)
{
   26134:	55                   	push   ebp
   26135:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:130
    FAT_ASSERT(list);
    FAT_ASSERT(node);

    if (!list->tail)
   26137:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2613a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2613d:	85 c0                	test   eax,eax
   2613f:	75 10                	jne    26151 <fat_list_insert_last+0x1d>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:131
        fat_list_insert_first(list, node);
   26141:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26144:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26147:	e8 9f ff ff ff       	call   260eb <fat_list_insert_first>
   2614c:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
     else
        fat_list_insert_after(list, list->tail, node);
}
   2614f:	eb 15                	jmp    26166 <fat_list_insert_last+0x32>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:133
    FAT_ASSERT(node);

    if (!list->tail)
        fat_list_insert_first(list, node);
     else
        fat_list_insert_after(list, list->tail, node);
   26151:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26154:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26157:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2615a:	50                   	push   eax
   2615b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2615e:	e8 06 ff ff ff       	call   26069 <fat_list_insert_after>
   26163:	83 c4 0c             	add    esp,0xc
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:134
}
   26166:	90                   	nop
   26167:	c9                   	leave  
   26168:	c3                   	ret    

00026169 <fat_list_is_empty>:
fat_list_is_empty():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:139
//-----------------------------------------------------------------
// fat_list_is_empty:
//-----------------------------------------------------------------
static FAT_INLINE int fat_list_is_empty(struct fat_list *list)
{
   26169:	55                   	push   ebp
   2616a:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:142
    FAT_ASSERT(list);

    return !list->head;
   2616c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2616f:	8b 00                	mov    eax,DWORD PTR [eax]
   26171:	85 c0                	test   eax,eax
   26173:	0f 94 c0             	sete   al
   26176:	0f b6 c0             	movzx  eax,al
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:143
}
   26179:	5d                   	pop    ebp
   2617a:	c3                   	ret    

0002617b <fat_list_pop_head>:
fat_list_pop_head():
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:148
//-----------------------------------------------------------------
// fat_list_pop_head:
//-----------------------------------------------------------------
static FAT_INLINE struct fat_node * fat_list_pop_head(struct fat_list *list)
{
   2617b:	55                   	push   ebp
   2617c:	89 e5                	mov    ebp,esp
   2617e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:153
    struct fat_node * node;

    FAT_ASSERT(list);

    node = fat_list_first(list);
   26181:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26184:	8b 00                	mov    eax,DWORD PTR [eax]
   26186:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:154
    if (node)
   26189:	83 7d fc 00          	cmp    DWORD PTR [ebp-0x4],0x0
   2618d:	74 0e                	je     2619d <fat_list_pop_head+0x22>
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:155
        fat_list_remove(list, node);
   2618f:	ff 75 fc             	push   DWORD PTR [ebp-0x4]
   26192:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26195:	e8 81 fe ff ff       	call   2601b <fat_list_remove>
   2619a:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:157

    return node;
   2619d:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/fat/fat_list.h:158
}
   261a0:	c9                   	leave  
   261a1:	c3                   	ret    

000261a2 <processELFDynamicSection>:
processELFDynamicSection():
/home/yogi/src/os/chrisOS/src/newloader.c:19
uint32_t libLoadOffset=LIBRARY_BASE_LOAD_ADDRESS;
extern int kExecLoadCount;
extern elfInfo_t* KERNEL_DATA_SECTION kExecLoadInfo;

void processELFDynamicSection(elfInfo_t* elfInfo)
{
   261a2:	55                   	push   ebp
   261a3:	89 e5                	mov    ebp,esp
   261a5:	57                   	push   edi
   261a6:	53                   	push   ebx
   261a7:	83 c4 80             	add    esp,0xffffff80
/home/yogi/src/os/chrisOS/src/newloader.c:20
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   261aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261ad:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   261b3:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:23

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
   261b6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261b9:	c7 80 a0 18 00 00 00 	mov    DWORD PTR [eax+0x18a0],0x0
   261c0:	00 00 00 
/home/yogi/src/os/chrisOS/src/newloader.c:24
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   261c3:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
   261ca:	e9 61 04 00 00       	jmp    26630 <processELFDynamicSection+0x48e>
/home/yogi/src/os/chrisOS/src/newloader.c:26
    {
        switch (dyn[cnt].d_tag)
   261cf:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   261d2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   261d9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   261dc:	01 d0                	add    eax,edx
   261de:	8b 00                	mov    eax,DWORD PTR [eax]
   261e0:	83 f8 1e             	cmp    eax,0x1e
   261e3:	0f 87 3f 04 00 00    	ja     26628 <processELFDynamicSection+0x486>
   261e9:	8b 04 85 1c 5c 08 00 	mov    eax,DWORD PTR [eax*4+0x85c1c]
   261f0:	ff e0                	jmp    eax
/home/yogi/src/os/chrisOS/src/newloader.c:30
        {
            //DT_NEEDED is a library which we need to load
            case DT_NEEDED:
                printk("ELF at: 0x%08X, copy to: 0x%08X, neededCount=0x%08X\n",elfInfo, elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount],elfInfo->dynamicInfo.neededCount);
   261f2:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   261f5:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   261fb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   261fe:	8b 92 a0 18 00 00    	mov    edx,DWORD PTR [edx+0x18a0]
   26204:	c1 e2 08             	shl    edx,0x8
   26207:	8d 8a 50 0e 00 00    	lea    ecx,[edx+0xe50]
   2620d:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   26210:	01 ca                	add    edx,ecx
   26212:	83 c2 04             	add    edx,0x4
   26215:	50                   	push   eax
   26216:	52                   	push   edx
   26217:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2621a:	68 00 5b 08 00       	push   0x85b00
   2621f:	e8 e3 12 00 00       	call   27507 <printk>
   26224:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:31
                strcpy(elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount++],(char*)(elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr));
   26227:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2622a:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   26230:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26233:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   2623a:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2623d:	01 c8                	add    eax,ecx
   2623f:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26242:	01 d0                	add    eax,edx
   26244:	89 c3                	mov    ebx,eax
   26246:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26249:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   2624f:	8d 48 01             	lea    ecx,[eax+0x1]
   26252:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   26255:	89 8a a0 18 00 00    	mov    DWORD PTR [edx+0x18a0],ecx
   2625b:	c1 e0 08             	shl    eax,0x8
   2625e:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   26264:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26267:	01 d0                	add    eax,edx
   26269:	83 c0 04             	add    eax,0x4
   2626c:	83 ec 08             	sub    esp,0x8
   2626f:	53                   	push   ebx
   26270:	50                   	push   eax
   26271:	e8 f2 13 00 00       	call   27668 <strcpy>
   26276:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:32
                char fileName[100]="/";
   26279:	c7 45 84 2f 00 00 00 	mov    DWORD PTR [ebp-0x7c],0x2f
   26280:	8d 55 88             	lea    edx,[ebp-0x78]
   26283:	b8 00 00 00 00       	mov    eax,0x0
   26288:	b9 18 00 00 00       	mov    ecx,0x18
   2628d:	89 d7                	mov    edi,edx
   2628f:	f3 ab                	rep stos DWORD PTR es:[edi],eax
/home/yogi/src/os/chrisOS/src/newloader.c:33
                strcat(fileName,elfInfo->dynamicInfo.neededName[elfInfo->dynamicInfo.neededCount-1]);
   26291:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26294:	8b 80 a0 18 00 00    	mov    eax,DWORD PTR [eax+0x18a0]
   2629a:	83 e8 01             	sub    eax,0x1
   2629d:	c1 e0 08             	shl    eax,0x8
   262a0:	8d 90 50 0e 00 00    	lea    edx,[eax+0xe50]
   262a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262a9:	01 d0                	add    eax,edx
   262ab:	83 c0 04             	add    eax,0x4
   262ae:	83 ec 08             	sub    esp,0x8
   262b1:	50                   	push   eax
   262b2:	8d 45 84             	lea    eax,[ebp-0x7c]
   262b5:	50                   	push   eax
   262b6:	e8 c5 12 00 00       	call   27580 <strcat>
   262bb:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:34
                printd(DEBUG_ELF_LOADER,"Found NEEDED, library name='%s', orig name='%s'\n",fileName,elfInfo->dynamicInfo.strTableAddress+dyn[cnt].d_un.d_ptr);
   262be:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   262c1:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   262c7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   262ca:	8d 0c c5 00 00 00 00 	lea    ecx,[eax*8+0x0]
   262d1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   262d4:	01 c8                	add    eax,ecx
   262d6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   262d9:	01 d0                	add    eax,edx
   262db:	50                   	push   eax
   262dc:	8d 45 84             	lea    eax,[ebp-0x7c]
   262df:	50                   	push   eax
   262e0:	68 38 5b 08 00       	push   0x85b38
   262e5:	68 00 02 00 00       	push   0x200
   262ea:	e8 38 12 00 00       	call   27527 <printd>
   262ef:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:35
                if (kDebugLevel&DEBUG_ELF_LOADER)
   262f2:	a1 78 48 12 00       	mov    eax,ds:0x124878
   262f7:	25 00 02 00 00       	and    eax,0x200
   262fc:	85 c0                	test   eax,eax
   262fe:	74 1e                	je     2631e <processELFDynamicSection+0x17c>
/home/yogi/src/os/chrisOS/src/newloader.c:37
                {
                    printd(DEBUG_ELF_LOADER,"loadElf: Calling loadElf again to load '%s' ... press a key to continue\n",&fileName);
   26300:	83 ec 04             	sub    esp,0x4
   26303:	8d 45 84             	lea    eax,[ebp-0x7c]
   26306:	50                   	push   eax
   26307:	68 6c 5b 08 00       	push   0x85b6c
   2630c:	68 00 02 00 00       	push   0x200
   26311:	e8 11 12 00 00       	call   27527 <printd>
   26316:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:38
                    waitForKeyboardKey();
   26319:	e8 0a af fe ff       	call   11228 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/newloader.c:40
                }
                void* fPtr=fopen(fileName, "r");
   2631e:	83 ec 08             	sub    esp,0x8
   26321:	68 b5 5b 08 00       	push   0x85bb5
   26326:	8d 45 84             	lea    eax,[ebp-0x7c]
   26329:	50                   	push   eax
   2632a:	e8 b6 73 ff ff       	call   1d6e5 <fl_fopen>
   2632f:	83 c4 10             	add    esp,0x10
   26332:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:41
                if (fPtr==0)
   26335:	83 7d ec 00          	cmp    DWORD PTR [ebp-0x14],0x0
   26339:	75 23                	jne    2635e <processELFDynamicSection+0x1bc>
/home/yogi/src/os/chrisOS/src/newloader.c:43
                {
                    printk("Error opening file '%s', cannot exec\n",fileName);
   2633b:	83 ec 08             	sub    esp,0x8
   2633e:	8d 45 84             	lea    eax,[ebp-0x7c]
   26341:	50                   	push   eax
   26342:	68 b8 5b 08 00       	push   0x85bb8
   26347:	e8 bb 11 00 00       	call   27507 <printk>
   2634c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:44
                    elfInfo->loadCompleted=false;
   2634f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26352:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:45
                    return;
   26359:	e9 e4 02 00 00       	jmp    26642 <processELFDynamicSection+0x4a0>
/home/yogi/src/os/chrisOS/src/newloader.c:47
                }   
                elfInfo->dynamicInfo.neededExecLoadNum[elfInfo->dynamicInfo.neededPtr++]=kExecLoadCount;
   2635e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26361:	8b 80 54 18 00 00    	mov    eax,DWORD PTR [eax+0x1854]
   26367:	8d 48 01             	lea    ecx,[eax+0x1]
   2636a:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2636d:	89 8a 54 18 00 00    	mov    DWORD PTR [edx+0x1854],ecx
   26373:	8b 0d 40 49 12 00    	mov    ecx,DWORD PTR ds:0x124940
   26379:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   2637c:	05 14 06 00 00       	add    eax,0x614
   26381:	89 4c 82 08          	mov    DWORD PTR [edx+eax*4+0x8],ecx
/home/yogi/src/os/chrisOS/src/newloader.c:48
                elfInfo_t* elfLibPtr=&kExecLoadInfo[kExecLoadCount++];
   26385:	8b 0d 3c 49 12 00    	mov    ecx,DWORD PTR ds:0x12493c
   2638b:	a1 40 49 12 00       	mov    eax,ds:0x124940
   26390:	8d 50 01             	lea    edx,[eax+0x1]
   26393:	89 15 40 49 12 00    	mov    DWORD PTR ds:0x124940,edx
   26399:	69 c0 dc 18 00 00    	imul   eax,eax,0x18dc
   2639f:	01 c8                	add    eax,ecx
   263a1:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/newloader.c:49
                loadElf(fPtr,elfLibPtr,true);
   263a4:	83 ec 04             	sub    esp,0x4
   263a7:	6a 01                	push   0x1
   263a9:	ff 75 e8             	push   DWORD PTR [ebp-0x18]
   263ac:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   263af:	e8 62 08 00 00       	call   26c16 <loadElf>
   263b4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:50
                fclose(fPtr);
   263b7:	83 ec 0c             	sub    esp,0xc
   263ba:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   263bd:	e8 54 77 ff ff       	call   1db16 <fl_fclose>
   263c2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:51
                if (!elfLibPtr->loadCompleted)
   263c5:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   263c8:	0f b6 80 d8 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d8]
   263cf:	83 f0 01             	xor    eax,0x1
   263d2:	84 c0                	test   al,al
   263d4:	0f 84 51 02 00 00    	je     2662b <processELFDynamicSection+0x489>
/home/yogi/src/os/chrisOS/src/newloader.c:53
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
   263da:	83 ec 08             	sub    esp,0x8
   263dd:	68 e0 5b 08 00       	push   0x85be0
   263e2:	68 00 02 00 00       	push   0x200
   263e7:	e8 3b 11 00 00       	call   27527 <printd>
   263ec:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:54
                    elfInfo->loadCompleted=false;
   263ef:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   263f2:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:55
                    return;
   263f9:	90                   	nop
   263fa:	e9 43 02 00 00       	jmp    26642 <processELFDynamicSection+0x4a0>
/home/yogi/src/os/chrisOS/src/newloader.c:59
                }
                break;
            case DT_PLTRELSZ:
                elfInfo->dynamicInfo.pltGOTTableTableSize=dyn[cnt].d_un.d_val;
   263ff:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26402:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26409:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2640c:	01 d0                	add    eax,edx
   2640e:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26411:	89 c2                	mov    edx,eax
   26413:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26416:	89 90 98 18 00 00    	mov    DWORD PTR [eax+0x1898],edx
/home/yogi/src/os/chrisOS/src/newloader.c:60
                break;
   2641c:	e9 0b 02 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:62
            case DT_PLTGOT:
                elfInfo->dynamicInfo.pltGOTTableAddress=dyn[cnt].d_un.d_ptr;
   26421:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26424:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2642b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2642e:	01 d0                	add    eax,edx
   26430:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26433:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26436:	89 90 b0 18 00 00    	mov    DWORD PTR [eax+0x18b0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:63
                break;
   2643c:	e9 eb 01 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:65
            case DT_HASH:
                elfInfo->dynamicInfo.hashTableAddress=dyn[cnt].d_un.d_ptr;
   26441:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26444:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2644b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2644e:	01 d0                	add    eax,edx
   26450:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26453:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26456:	89 90 b4 18 00 00    	mov    DWORD PTR [eax+0x18b4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:66
                break;
   2645c:	e9 cb 01 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:74
                break;
            case DT_SYMTAB:
                //Already found it above
                break;
            case DT_RELA:
                elfInfo->dynamicInfo.relATableAddress=dyn[cnt].d_un.d_ptr;
   26461:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26464:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2646b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2646e:	01 d0                	add    eax,edx
   26470:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26473:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26476:	89 90 c4 18 00 00    	mov    DWORD PTR [eax+0x18c4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:75
                break;
   2647c:	e9 ab 01 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:77
            case DT_RELASZ:
                elfInfo->dynamicInfo.relATableSize=dyn[cnt].d_un.d_val;
   26481:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26484:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2648b:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2648e:	01 d0                	add    eax,edx
   26490:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   26493:	89 c2                	mov    edx,eax
   26495:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26498:	89 90 84 18 00 00    	mov    DWORD PTR [eax+0x1884],edx
/home/yogi/src/os/chrisOS/src/newloader.c:78
                break;
   2649e:	e9 89 01 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:80
            case DT_RELAENT:
                elfInfo->dynamicInfo.relAEntrySize=dyn[cnt].d_un.d_val;
   264a3:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   264a6:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   264ad:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   264b0:	01 d0                	add    eax,edx
   264b2:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   264b5:	89 c2                	mov    edx,eax
   264b7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   264ba:	89 90 88 18 00 00    	mov    DWORD PTR [eax+0x1888],edx
/home/yogi/src/os/chrisOS/src/newloader.c:81
                break;
   264c0:	e9 67 01 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:83
            case DT_STRSZ:
                elfInfo->dynamicInfo.strTableSize=dyn[cnt].d_un.d_val;
   264c5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   264c8:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   264cf:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   264d2:	01 d0                	add    eax,edx
   264d4:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   264d7:	89 c2                	mov    edx,eax
   264d9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   264dc:	89 90 8c 18 00 00    	mov    DWORD PTR [eax+0x188c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:84
                break;
   264e2:	e9 45 01 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:86
            case DT_SYMENT:
                elfInfo->dynamicInfo.symEntrySize=dyn[cnt].d_un.d_val;
   264e7:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   264ea:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   264f1:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   264f4:	01 d0                	add    eax,edx
   264f6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   264f9:	89 c2                	mov    edx,eax
   264fb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   264fe:	89 90 90 18 00 00    	mov    DWORD PTR [eax+0x1890],edx
/home/yogi/src/os/chrisOS/src/newloader.c:87
                break;
   26504:	e9 23 01 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:89
            case DT_INIT:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   26509:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2650c:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26513:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26516:	01 d0                	add    eax,edx
   26518:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   2651b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2651e:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:90
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   26524:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26527:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   2652d:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   26532:	01 c2                	add    edx,eax
   26534:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26537:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:91
                break;
   2653d:	e9 ea 00 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:93
            case DT_FINI:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   26542:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26545:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   2654c:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   2654f:	01 d0                	add    eax,edx
   26551:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26554:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26557:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:94
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   2655d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26560:	8b 90 cc 18 00 00    	mov    edx,DWORD PTR [eax+0x18cc]
   26566:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   2656b:	01 c2                	add    edx,eax
   2656d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26570:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:95
                break;
   26576:	e9 b1 00 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:105
                //Can't find the relocation section this way, using section headers
                //elfInfo->dynamicInfo.relTableAddress=dyn[cnt].d_un.d_ptr;
                //printk("%s: Found DT_REL, address=0x%08X (0x%08X)\n",isLibrary?"library":"executable",dyn[cnt].d_un.d_ptr,elfInfo->dynamicInfo.relTableAddress);
                break;
            case DT_RELSZ:
                elfInfo->dynamicInfo.relTableSize=dyn[cnt].d_un.d_val;
   2657b:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2657e:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26585:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   26588:	01 d0                	add    eax,edx
   2658a:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2658d:	89 c2                	mov    edx,eax
   2658f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26592:	89 90 94 18 00 00    	mov    DWORD PTR [eax+0x1894],edx
/home/yogi/src/os/chrisOS/src/newloader.c:106
                break;
   26598:	e9 8f 00 00 00       	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:108
            case DT_RELENT:
                elfInfo->dynamicInfo.relEntrySize=dyn[cnt].d_un.d_val;
   2659d:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   265a0:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   265a7:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   265aa:	01 d0                	add    eax,edx
   265ac:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   265af:	89 c2                	mov    edx,eax
   265b1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   265b4:	89 90 9c 18 00 00    	mov    DWORD PTR [eax+0x189c],edx
/home/yogi/src/os/chrisOS/src/newloader.c:109
                break;
   265ba:	eb 70                	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:121
            case DT_JMPREL:
                break;
            case DT_BIND_NOW:
                break;
            case DT_INIT_ARRAY:
                elfInfo->dynamicInfo.initFunctionAddress=dyn[cnt].d_un.d_ptr;
   265bc:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   265bf:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   265c6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   265c9:	01 d0                	add    eax,edx
   265cb:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   265ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   265d1:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:122
                elfInfo->dynamicInfo.initFunctionAddress+=libLoadOffset;
   265d7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   265da:	8b 90 c8 18 00 00    	mov    edx,DWORD PTR [eax+0x18c8]
   265e0:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   265e5:	01 c2                	add    edx,eax
   265e7:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   265ea:	89 90 c8 18 00 00    	mov    DWORD PTR [eax+0x18c8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:123
                break;
   265f0:	eb 3a                	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:125
            case DT_FINI_ARRAY:
                elfInfo->dynamicInfo.termFunctionAddress=dyn[cnt].d_un.d_ptr;
   265f2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   265f5:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   265fc:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   265ff:	01 d0                	add    eax,edx
   26601:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26604:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26607:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:126
                elfInfo->dynamicInfo.termFunctionAddress+=libLoadOffset;
   2660d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26610:	8b 90 cc 18 00 00    	mov    edx,DWORD PTR [eax+0x18cc]
   26616:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   2661b:	01 c2                	add    edx,eax
   2661d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26620:	89 90 cc 18 00 00    	mov    DWORD PTR [eax+0x18cc],edx
/home/yogi/src/os/chrisOS/src/newloader.c:127
                break;
   26626:	eb 04                	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:135
            case DT_FINI_ARRAYSZ:
                break;
            case DT_FLAGS:
                break;
            default:
                break;
   26628:	90                   	nop
   26629:	eb 01                	jmp    2662c <processELFDynamicSection+0x48a>
/home/yogi/src/os/chrisOS/src/newloader.c:57
                {
                    printd(DEBUG_ELF_LOADER,"EXEC: processELFDynamicSection ... loading library failed.");
                    elfInfo->loadCompleted=false;
                    return;
                }
                break;
   2662b:	90                   	nop
/home/yogi/src/os/chrisOS/src/newloader.c:24
{
    Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

    //Next process the rest of the dynamic section entries
    elfInfo->dynamicInfo.neededCount=0;
    for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   2662c:	83 45 f4 01          	add    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:24 (discriminator 1)
   26630:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26633:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   26639:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   2663c:	0f 8f 8d fb ff ff    	jg     261cf <processELFDynamicSection+0x2d>
/home/yogi/src/os/chrisOS/src/newloader.c:139
            default:
                break;
        }
    }

}
   26642:	8d 65 f8             	lea    esp,[ebp-0x8]
   26645:	5b                   	pop    ebx
   26646:	5f                   	pop    edi
   26647:	5d                   	pop    ebp
   26648:	c3                   	ret    

00026649 <loadSections>:
loadSections():
/home/yogi/src/os/chrisOS/src/newloader.c:142

void loadSections(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   26649:	55                   	push   ebp
   2664a:	89 e5                	mov    ebp,esp
   2664c:	53                   	push   ebx
   2664d:	83 ec 24             	sub    esp,0x24
   26650:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26653:	88 45 e4             	mov    BYTE PTR [ebp-0x1c],al
/home/yogi/src/os/chrisOS/src/newloader.c:146
    uint8_t* loadAddress;

    //Go to the beginning of the file and get the elf header
    fl_fseek(file, 0, SEEK_SET);
   26656:	83 ec 04             	sub    esp,0x4
   26659:	6a 00                	push   0x0
   2665b:	6a 00                	push   0x0
   2665d:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26660:	e8 6c 78 ff ff       	call   1ded1 <fl_fseek>
   26665:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:147
    fl_fread(&elfInfo->hdr, sizeof(elfInfo->hdr),1,file);
   26668:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2666b:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2666e:	6a 01                	push   0x1
   26670:	6a 34                	push   0x34
   26672:	50                   	push   eax
   26673:	e8 3a 76 ff ff       	call   1dcb2 <fl_fread>
   26678:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:148
    if (elfInfo->hdr.e_ident[0] != 0x7F) 
   2667b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2667e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26681:	3c 7f                	cmp    al,0x7f
   26683:	74 66                	je     266eb <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:149
        if (elfInfo->hdr.e_ident[1] != 'E') 
   26685:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26688:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   2668c:	3c 45                	cmp    al,0x45
   2668e:	74 5b                	je     266eb <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:150
            if (elfInfo->hdr.e_ident[1] != 'L') 
   26690:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26693:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   26697:	3c 4c                	cmp    al,0x4c
   26699:	74 50                	je     266eb <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:151
                if (elfInfo->hdr.e_ident[2] != 'F')
   2669b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2669e:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   266a2:	3c 46                	cmp    al,0x46
   266a4:	74 45                	je     266eb <loadSections+0xa2>
/home/yogi/src/os/chrisOS/src/newloader.c:153
                {
                    printd(DEBUG_ELF_LOADER,"Invalid ELF magic '%c' '%c' '%c', cannot load", elfInfo->hdr.e_ident[1], elfInfo->hdr.e_ident[2], elfInfo->hdr.e_ident[3]);
   266a6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266a9:	0f b6 40 03          	movzx  eax,BYTE PTR [eax+0x3]
   266ad:	0f b6 c8             	movzx  ecx,al
   266b0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266b3:	0f b6 40 02          	movzx  eax,BYTE PTR [eax+0x2]
   266b7:	0f b6 d0             	movzx  edx,al
   266ba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266bd:	0f b6 40 01          	movzx  eax,BYTE PTR [eax+0x1]
   266c1:	0f b6 c0             	movzx  eax,al
   266c4:	83 ec 0c             	sub    esp,0xc
   266c7:	51                   	push   ecx
   266c8:	52                   	push   edx
   266c9:	50                   	push   eax
   266ca:	68 98 5c 08 00       	push   0x85c98
   266cf:	68 00 02 00 00       	push   0x200
   266d4:	e8 4e 0e 00 00       	call   27527 <printd>
   266d9:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:154
                    elfInfo->loadCompleted=false;
   266dc:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266df:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:155
                    return;
   266e6:	e9 26 05 00 00       	jmp    26c11 <loadSections+0x5c8>
/home/yogi/src/os/chrisOS/src/newloader.c:159
                }
    
    //Make sure the file is viable
    if (elfInfo->hdr.e_type!=ET_EXEC && elfInfo->hdr.e_type!=ET_DYN)
   266eb:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266ee:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   266f2:	66 83 f8 02          	cmp    ax,0x2
   266f6:	74 3c                	je     26734 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:159 (discriminator 1)
   266f8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   266fb:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   266ff:	66 83 f8 03          	cmp    ax,0x3
   26703:	74 2f                	je     26734 <loadSections+0xeb>
/home/yogi/src/os/chrisOS/src/newloader.c:161
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF type 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   26705:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26708:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   2670c:	0f b7 c0             	movzx  eax,ax
   2670f:	83 ec 04             	sub    esp,0x4
   26712:	50                   	push   eax
   26713:	68 c8 5c 08 00       	push   0x85cc8
   26718:	68 00 02 00 00       	push   0x200
   2671d:	e8 05 0e 00 00       	call   27527 <printd>
   26722:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:162
        elfInfo->loadCompleted=false;
   26725:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26728:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:163
        return;
   2672f:	e9 dd 04 00 00       	jmp    26c11 <loadSections+0x5c8>
/home/yogi/src/os/chrisOS/src/newloader.c:165
    }
    if (elfInfo->hdr.e_machine!=EM_386)
   26734:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26737:	0f b7 40 12          	movzx  eax,WORD PTR [eax+0x12]
   2673b:	66 83 f8 03          	cmp    ax,0x3
   2673f:	74 2f                	je     26770 <loadSections+0x127>
/home/yogi/src/os/chrisOS/src/newloader.c:167
    {
        printd(DEBUG_ELF_LOADER,"Wrong ELF architecture 0x%04X, cannot load\n", elfInfo->hdr.e_type);
   26741:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26744:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26748:	0f b7 c0             	movzx  eax,ax
   2674b:	83 ec 04             	sub    esp,0x4
   2674e:	50                   	push   eax
   2674f:	68 ec 5c 08 00       	push   0x85cec
   26754:	68 00 02 00 00       	push   0x200
   26759:	e8 c9 0d 00 00       	call   27527 <printd>
   2675e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:168
        elfInfo->loadCompleted=false;
   26761:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26764:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:169
        return;
   2676b:	e9 a1 04 00 00       	jmp    26c11 <loadSections+0x5c8>
/home/yogi/src/os/chrisOS/src/newloader.c:173
    }
    
    //Get the section header table
    printd(DEBUG_ELF_LOADER,"section header record count= %u\n", elfInfo->hdr.e_shnum);
   26770:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26773:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   26777:	0f b7 c0             	movzx  eax,ax
   2677a:	83 ec 04             	sub    esp,0x4
   2677d:	50                   	push   eax
   2677e:	68 18 5d 08 00       	push   0x85d18
   26783:	68 00 02 00 00       	push   0x200
   26788:	e8 9a 0d 00 00       	call   27527 <printd>
   2678d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:174
    printd(DEBUG_ELF_LOADER,"e_shentsize=%u, oursize=%u\n", elfInfo->hdr.e_shentsize, sizeof(Elf32_Shdr) );
   26790:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26793:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   26797:	0f b7 c0             	movzx  eax,ax
   2679a:	6a 28                	push   0x28
   2679c:	50                   	push   eax
   2679d:	68 39 5d 08 00       	push   0x85d39
   267a2:	68 00 02 00 00       	push   0x200
   267a7:	e8 7b 0d 00 00       	call   27527 <printd>
   267ac:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:175
    fl_fseek(file, elfInfo->hdr.e_shoff,SEEK_SET);
   267af:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   267b2:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   267b5:	83 ec 04             	sub    esp,0x4
   267b8:	6a 00                	push   0x0
   267ba:	50                   	push   eax
   267bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   267be:	e8 0e 77 ff ff       	call   1ded1 <fl_fseek>
   267c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:176
    printd(DEBUG_ELF_LOADER,"reading SHOFF\n",elfInfo->hdr.e_shoff);
   267c6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   267c9:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   267cc:	83 ec 04             	sub    esp,0x4
   267cf:	50                   	push   eax
   267d0:	68 55 5d 08 00       	push   0x85d55
   267d5:	68 00 02 00 00       	push   0x200
   267da:	e8 48 0d 00 00       	call   27527 <printd>
   267df:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:177
    fl_fread(elfInfo->secHdrTable, sizeof(Elf32_Shdr),elfInfo->hdr.e_shnum,file);
   267e2:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   267e5:	0f b7 40 30          	movzx  eax,WORD PTR [eax+0x30]
   267e9:	0f b7 c0             	movzx  eax,ax
   267ec:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   267ef:	83 c2 34             	add    edx,0x34
   267f2:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   267f5:	50                   	push   eax
   267f6:	6a 28                	push   0x28
   267f8:	52                   	push   edx
   267f9:	e8 b4 74 ff ff       	call   1dcb2 <fl_fread>
   267fe:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:180
    
    //Get the program header table
    printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->hdr.e_phoff);
   26801:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26804:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26807:	83 ec 04             	sub    esp,0x4
   2680a:	50                   	push   eax
   2680b:	68 64 5d 08 00       	push   0x85d64
   26810:	68 00 02 00 00       	push   0x200
   26815:	e8 0d 0d 00 00       	call   27527 <printd>
   2681a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:181
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
   2681d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26820:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   26823:	83 ec 04             	sub    esp,0x4
   26826:	50                   	push   eax
   26827:	68 7a 5d 08 00       	push   0x85d7a
   2682c:	68 00 02 00 00       	push   0x200
   26831:	e8 f1 0c 00 00       	call   27527 <printd>
   26836:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:182
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
   26839:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2683c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   2683f:	83 ec 04             	sub    esp,0x4
   26842:	6a 00                	push   0x0
   26844:	50                   	push   eax
   26845:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26848:	e8 84 76 ff ff       	call   1ded1 <fl_fseek>
   2684d:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:183
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
   26850:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26853:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   26857:	0f b7 c0             	movzx  eax,ax
   2685a:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2685d:	81 c2 04 08 00 00    	add    edx,0x804
   26863:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26866:	50                   	push   eax
   26867:	6a 20                	push   0x20
   26869:	52                   	push   edx
   2686a:	e8 43 74 ff ff       	call   1dcb2 <fl_fread>
   2686f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:186
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   26872:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
   26879:	e9 6b 03 00 00       	jmp    26be9 <loadSections+0x5a0>
/home/yogi/src/os/chrisOS/src/newloader.c:188
    {
        loadAddress = (uint8_t*)elfInfo->pgmHdrTable[cnt].p_vaddr;
   2687e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26881:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26884:	83 c2 40             	add    edx,0x40
   26887:	c1 e2 05             	shl    edx,0x5
   2688a:	01 d0                	add    eax,edx
   2688c:	83 c0 0c             	add    eax,0xc
   2688f:	8b 00                	mov    eax,DWORD PTR [eax]
   26891:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:189
        if (isLibrary)
   26894:	80 7d e4 00          	cmp    BYTE PTR [ebp-0x1c],0x0
   26898:	74 1e                	je     268b8 <loadSections+0x26f>
/home/yogi/src/os/chrisOS/src/newloader.c:191
        {
            loadAddress+=libLoadOffset;
   2689a:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   2689f:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:192
            elfInfo->pgmHdrTable[cnt].p_vaddr=loadAddress;
   268a2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   268a5:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   268a8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   268ab:	83 c1 40             	add    ecx,0x40
   268ae:	c1 e1 05             	shl    ecx,0x5
   268b1:	01 ca                	add    edx,ecx
   268b3:	83 c2 0c             	add    edx,0xc
   268b6:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/newloader.c:195
        }

        if (elfInfo->pgmHdrTable[cnt].p_vaddr==KERNEL_DATA_LOAD_ADDRESS)
   268b8:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268bb:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   268be:	83 c2 40             	add    edx,0x40
   268c1:	c1 e2 05             	shl    edx,0x5
   268c4:	01 d0                	add    eax,edx
   268c6:	83 c0 0c             	add    eax,0xc
   268c9:	8b 10                	mov    edx,DWORD PTR [eax]
   268cb:	0f b6 05 00 00 12 00 	movzx  eax,BYTE PTR ds:0x120000
   268d2:	0f be c0             	movsx  eax,al
   268d5:	39 c2                	cmp    edx,eax
   268d7:	75 1d                	jne    268f6 <loadSections+0x2ad>
/home/yogi/src/os/chrisOS/src/newloader.c:197
        {
            printd(DEBUG_ELF_LOADER,"Section %u load address is kernel data base address (0x%08X), skipping load\n",cnt,loadAddress);
   268d9:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   268dc:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   268df:	68 8c 5d 08 00       	push   0x85d8c
   268e4:	68 00 02 00 00       	push   0x200
   268e9:	e8 39 0c 00 00       	call   27527 <printd>
   268ee:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:198
            continue;
   268f1:	e9 ef 02 00 00       	jmp    26be5 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:200
        }
        else if (elfInfo->pgmHdrTable[cnt].p_offset==elfInfo->hdr.e_phoff)
   268f6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   268f9:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   268fc:	83 c2 40             	add    edx,0x40
   268ff:	c1 e2 05             	shl    edx,0x5
   26902:	01 d0                	add    eax,edx
   26904:	83 c0 08             	add    eax,0x8
   26907:	8b 10                	mov    edx,DWORD PTR [eax]
   26909:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2690c:	8b 40 1c             	mov    eax,DWORD PTR [eax+0x1c]
   2690f:	39 c2                	cmp    edx,eax
   26911:	75 2e                	jne    26941 <loadSections+0x2f8>
/home/yogi/src/os/chrisOS/src/newloader.c:202
        {
            printd(DEBUG_ELF_LOADER,"Section %u file offset is program header address (0x%08X),skipping load\n",cnt,elfInfo->pgmHdrTable[cnt].p_offset);
   26913:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26916:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26919:	83 c2 40             	add    edx,0x40
   2691c:	c1 e2 05             	shl    edx,0x5
   2691f:	01 d0                	add    eax,edx
   26921:	83 c0 08             	add    eax,0x8
   26924:	8b 00                	mov    eax,DWORD PTR [eax]
   26926:	50                   	push   eax
   26927:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   2692a:	68 dc 5d 08 00       	push   0x85ddc
   2692f:	68 00 02 00 00       	push   0x200
   26934:	e8 ee 0b 00 00       	call   27527 <printd>
   26939:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:203
            continue;
   2693c:	e9 a4 02 00 00       	jmp    26be5 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:205
        }
        if (loadAddress!=0 && elfInfo->libLoadAddress==0 && (elfInfo->hdr.e_type!=ET_REL && elfInfo->hdr.e_type!=ET_DYN))
   26941:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   26945:	74 4b                	je     26992 <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 1)
   26947:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2694a:	8b 80 d4 18 00 00    	mov    eax,DWORD PTR [eax+0x18d4]
   26950:	85 c0                	test   eax,eax
   26952:	75 3e                	jne    26992 <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 2)
   26954:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26957:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   2695b:	66 83 f8 01          	cmp    ax,0x1
   2695f:	74 31                	je     26992 <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:205 (discriminator 3)
   26961:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26964:	0f b7 40 10          	movzx  eax,WORD PTR [eax+0x10]
   26968:	66 83 f8 03          	cmp    ax,0x3
   2696c:	74 24                	je     26992 <loadSections+0x349>
/home/yogi/src/os/chrisOS/src/newloader.c:207
        {
            elfInfo->libLoadAddress=(uintptr_t)loadAddress;
   2696e:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   26971:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26974:	89 90 d4 18 00 00    	mov    DWORD PTR [eax+0x18d4],edx
/home/yogi/src/os/chrisOS/src/newloader.c:208
            printd(DEBUG_ELF_LOADER,"Setting main load address to 0x%08X\n",loadAddress);
   2697a:	83 ec 04             	sub    esp,0x4
   2697d:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26980:	68 28 5e 08 00       	push   0x85e28
   26985:	68 00 02 00 00       	push   0x200
   2698a:	e8 98 0b 00 00       	call   27527 <printd>
   2698f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:212
            
        }
        //printd(DEBUG_ELF_LOADER,"Next load address is 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_vaddr);
        if (elfInfo->pgmHdrTable[cnt].p_filesz>0)
   26992:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26995:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26998:	c1 e2 05             	shl    edx,0x5
   2699b:	01 d0                	add    eax,edx
   2699d:	05 14 08 00 00       	add    eax,0x814
   269a2:	8b 00                	mov    eax,DWORD PTR [eax]
   269a4:	85 c0                	test   eax,eax
   269a6:	0f 84 9f 01 00 00    	je     26b4b <loadSections+0x502>
/home/yogi/src/os/chrisOS/src/newloader.c:214
        {
            printd(DEBUG_ELF_LOADER,"seeking to 0x%08X ...",elfInfo->pgmHdrTable[cnt].p_offset);
   269ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269af:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   269b2:	83 c2 40             	add    edx,0x40
   269b5:	c1 e2 05             	shl    edx,0x5
   269b8:	01 d0                	add    eax,edx
   269ba:	83 c0 08             	add    eax,0x8
   269bd:	8b 00                	mov    eax,DWORD PTR [eax]
   269bf:	83 ec 04             	sub    esp,0x4
   269c2:	50                   	push   eax
   269c3:	68 64 5d 08 00       	push   0x85d64
   269c8:	68 00 02 00 00       	push   0x200
   269cd:	e8 55 0b 00 00       	call   27527 <printd>
   269d2:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:215
            fl_fseek(file, elfInfo->pgmHdrTable[cnt].p_offset, SEEK_SET);
   269d5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269d8:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   269db:	83 c2 40             	add    edx,0x40
   269de:	c1 e2 05             	shl    edx,0x5
   269e1:	01 d0                	add    eax,edx
   269e3:	83 c0 08             	add    eax,0x8
   269e6:	8b 00                	mov    eax,DWORD PTR [eax]
   269e8:	83 ec 04             	sub    esp,0x4
   269eb:	6a 00                	push   0x0
   269ed:	50                   	push   eax
   269ee:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   269f1:	e8 db 74 ff ff       	call   1ded1 <fl_fseek>
   269f6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:216
            printd(DEBUG_ELF_LOADER,"reading %u bytes to 0x%08X\n",elfInfo->pgmHdrTable[cnt].p_memsz,loadAddress);
   269f9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   269fc:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   269ff:	c1 e2 05             	shl    edx,0x5
   26a02:	01 d0                	add    eax,edx
   26a04:	05 18 08 00 00       	add    eax,0x818
   26a09:	8b 00                	mov    eax,DWORD PTR [eax]
   26a0b:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26a0e:	50                   	push   eax
   26a0f:	68 4d 5e 08 00       	push   0x85e4d
   26a14:	68 00 02 00 00       	push   0x200
   26a19:	e8 09 0b 00 00       	call   27527 <printd>
   26a1e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:217
            fl_fread(loadAddress, 1, elfInfo->pgmHdrTable[cnt].p_memsz, file);
   26a21:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a24:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26a27:	c1 e2 05             	shl    edx,0x5
   26a2a:	01 d0                	add    eax,edx
   26a2c:	05 18 08 00 00       	add    eax,0x818
   26a31:	8b 00                	mov    eax,DWORD PTR [eax]
   26a33:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26a36:	50                   	push   eax
   26a37:	6a 01                	push   0x1
   26a39:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26a3c:	e8 71 72 ff ff       	call   1dcb2 <fl_fread>
   26a41:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:218
            printd(DEBUG_ELF_LOADER,"Section %u loaded 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   26a44:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a47:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26a4a:	c1 e2 05             	shl    edx,0x5
   26a4d:	01 d0                	add    eax,edx
   26a4f:	05 18 08 00 00       	add    eax,0x818
   26a54:	8b 00                	mov    eax,DWORD PTR [eax]
   26a56:	83 ec 0c             	sub    esp,0xc
   26a59:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26a5c:	50                   	push   eax
   26a5d:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26a60:	68 6c 5e 08 00       	push   0x85e6c
   26a65:	68 00 02 00 00       	push   0x200
   26a6a:	e8 b8 0a 00 00       	call   27527 <printd>
   26a6f:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:219
            if (elfInfo->pgmHdrTable[cnt].p_filesz<elfInfo->pgmHdrTable[cnt].p_memsz)
   26a72:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a75:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26a78:	c1 e2 05             	shl    edx,0x5
   26a7b:	01 d0                	add    eax,edx
   26a7d:	05 14 08 00 00       	add    eax,0x814
   26a82:	8b 10                	mov    edx,DWORD PTR [eax]
   26a84:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26a87:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26a8a:	c1 e1 05             	shl    ecx,0x5
   26a8d:	01 c8                	add    eax,ecx
   26a8f:	05 18 08 00 00       	add    eax,0x818
   26a94:	8b 00                	mov    eax,DWORD PTR [eax]
   26a96:	39 c2                	cmp    edx,eax
   26a98:	0f 83 47 01 00 00    	jae    26be5 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:221
            {
                printd(DEBUG_ELF_LOADER,"Section %u has uninitialized data, zeroed 0x%08X bytes at 0x%08X\n", cnt, elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz, loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz);
   26a9e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26aa1:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26aa4:	c1 e2 05             	shl    edx,0x5
   26aa7:	01 d0                	add    eax,edx
   26aa9:	05 14 08 00 00       	add    eax,0x814
   26aae:	8b 10                	mov    edx,DWORD PTR [eax]
   26ab0:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26ab3:	01 c2                	add    edx,eax
   26ab5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ab8:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26abb:	c1 e1 05             	shl    ecx,0x5
   26abe:	01 c8                	add    eax,ecx
   26ac0:	05 18 08 00 00       	add    eax,0x818
   26ac5:	8b 08                	mov    ecx,DWORD PTR [eax]
   26ac7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26aca:	8b 5d f0             	mov    ebx,DWORD PTR [ebp-0x10]
   26acd:	c1 e3 05             	shl    ebx,0x5
   26ad0:	01 d8                	add    eax,ebx
   26ad2:	05 14 08 00 00       	add    eax,0x814
   26ad7:	8b 00                	mov    eax,DWORD PTR [eax]
   26ad9:	29 c1                	sub    ecx,eax
   26adb:	89 c8                	mov    eax,ecx
   26add:	83 ec 0c             	sub    esp,0xc
   26ae0:	52                   	push   edx
   26ae1:	50                   	push   eax
   26ae2:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26ae5:	68 98 5e 08 00       	push   0x85e98
   26aea:	68 00 02 00 00       	push   0x200
   26aef:	e8 33 0a 00 00       	call   27527 <printd>
   26af4:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:222
                memset(loadAddress+elfInfo->pgmHdrTable[cnt].p_filesz+1,0,elfInfo->pgmHdrTable[cnt].p_memsz-elfInfo->pgmHdrTable[cnt].p_filesz);
   26af7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26afa:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26afd:	c1 e2 05             	shl    edx,0x5
   26b00:	01 d0                	add    eax,edx
   26b02:	05 18 08 00 00       	add    eax,0x818
   26b07:	8b 10                	mov    edx,DWORD PTR [eax]
   26b09:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b0c:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26b0f:	c1 e1 05             	shl    ecx,0x5
   26b12:	01 c8                	add    eax,ecx
   26b14:	05 14 08 00 00       	add    eax,0x814
   26b19:	8b 00                	mov    eax,DWORD PTR [eax]
   26b1b:	29 c2                	sub    edx,eax
   26b1d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b20:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26b23:	c1 e1 05             	shl    ecx,0x5
   26b26:	01 c8                	add    eax,ecx
   26b28:	05 14 08 00 00       	add    eax,0x814
   26b2d:	8b 00                	mov    eax,DWORD PTR [eax]
   26b2f:	8d 48 01             	lea    ecx,[eax+0x1]
   26b32:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   26b35:	01 c8                	add    eax,ecx
   26b37:	83 ec 04             	sub    esp,0x4
   26b3a:	52                   	push   edx
   26b3b:	6a 00                	push   0x0
   26b3d:	50                   	push   eax
   26b3e:	e8 7e e8 ff ff       	call   253c1 <memset>
   26b43:	83 c4 10             	add    esp,0x10
   26b46:	e9 9a 00 00 00       	jmp    26be5 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:225
            }
        }
        else if (elfInfo->pgmHdrTable[cnt].p_memsz>0)
   26b4b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b4e:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26b51:	c1 e2 05             	shl    edx,0x5
   26b54:	01 d0                	add    eax,edx
   26b56:	05 18 08 00 00       	add    eax,0x818
   26b5b:	8b 00                	mov    eax,DWORD PTR [eax]
   26b5d:	85 c0                	test   eax,eax
   26b5f:	74 30                	je     26b91 <loadSections+0x548>
/home/yogi/src/os/chrisOS/src/newloader.c:227
        {
            printd(DEBUG_ELF_LOADER,"Section %u not loadable, zeroed 0x%08X bytes at 0x%08X\n",cnt, elfInfo->pgmHdrTable[cnt].p_memsz, loadAddress);
   26b61:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26b64:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26b67:	c1 e2 05             	shl    edx,0x5
   26b6a:	01 d0                	add    eax,edx
   26b6c:	05 18 08 00 00       	add    eax,0x818
   26b71:	8b 00                	mov    eax,DWORD PTR [eax]
   26b73:	83 ec 0c             	sub    esp,0xc
   26b76:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   26b79:	50                   	push   eax
   26b7a:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26b7d:	68 dc 5e 08 00       	push   0x85edc
   26b82:	68 00 02 00 00       	push   0x200
   26b87:	e8 9b 09 00 00       	call   27527 <printd>
   26b8c:	83 c4 20             	add    esp,0x20
   26b8f:	eb 54                	jmp    26be5 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:231
        }
#ifndef DEBUG_NONE
        else
            if ((kDebugLevel & DEBUG_ELF_LOADER) == DEBUG_ELF_LOADER)
   26b91:	a1 78 48 12 00       	mov    eax,ds:0x124878
   26b96:	25 00 02 00 00       	and    eax,0x200
   26b9b:	85 c0                	test   eax,eax
   26b9d:	74 46                	je     26be5 <loadSections+0x59c>
/home/yogi/src/os/chrisOS/src/newloader.c:232
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
   26b9f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ba2:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   26ba5:	c1 e2 05             	shl    edx,0x5
   26ba8:	01 d0                	add    eax,edx
   26baa:	05 18 08 00 00       	add    eax,0x818
   26baf:	8b 10                	mov    edx,DWORD PTR [eax]
   26bb1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bb4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   26bb7:	c1 e1 05             	shl    ecx,0x5
   26bba:	01 c8                	add    eax,ecx
   26bbc:	05 14 08 00 00       	add    eax,0x814
   26bc1:	8b 00                	mov    eax,DWORD PTR [eax]
   26bc3:	85 c0                	test   eax,eax
   26bc5:	0f 95 c0             	setne  al
   26bc8:	0f b6 c0             	movzx  eax,al
   26bcb:	83 ec 0c             	sub    esp,0xc
   26bce:	52                   	push   edx
   26bcf:	50                   	push   eax
   26bd0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26bd3:	68 14 5f 08 00       	push   0x85f14
   26bd8:	68 00 02 00 00       	push   0x200
   26bdd:	e8 45 09 00 00       	call   27527 <printd>
   26be2:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 2)
    printd(DEBUG_ELF_LOADER,"reading PHOFF\n",elfInfo->hdr.e_phoff);
    fl_fseek(file, elfInfo->hdr.e_phoff, SEEK_SET);
    fl_fread(elfInfo->pgmHdrTable, sizeof(Elf32_Phdr),elfInfo->hdr.e_phnum,file);
    
    //Process the program header table and load all of the sections in the file into memory
    for (int cnt=0;cnt<elfInfo->hdr.e_phnum;cnt++)
   26be5:	83 45 f0 01          	add    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:186 (discriminator 1)
   26be9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26bec:	0f b7 40 2c          	movzx  eax,WORD PTR [eax+0x2c]
   26bf0:	0f b7 c0             	movzx  eax,ax
   26bf3:	3b 45 f0             	cmp    eax,DWORD PTR [ebp-0x10]
   26bf6:	0f 8f 82 fc ff ff    	jg     2687e <loadSections+0x235>
/home/yogi/src/os/chrisOS/src/newloader.c:237
                printd(DEBUG_ELF_LOADER,"Section %u, file/mem sizes=0x%X/0x%X, not loading\n", cnt, elfInfo->pgmHdrTable[cnt].p_filesz>0,elfInfo->pgmHdrTable[cnt].p_memsz);
#endif

    }
    //Done processing the program header table
    printd(DEBUG_ELF_LOADER,"LoadElf: done loading file\n");
   26bfc:	83 ec 08             	sub    esp,0x8
   26bff:	68 47 5f 08 00       	push   0x85f47
   26c04:	68 00 02 00 00       	push   0x200
   26c09:	e8 19 09 00 00       	call   27527 <printd>
   26c0e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:239
    
}
   26c11:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   26c14:	c9                   	leave  
   26c15:	c3                   	ret    

00026c16 <loadElf>:
loadElf():
/home/yogi/src/os/chrisOS/src/newloader.c:242

void loadElf(void* file,elfInfo_t* elfInfo, bool isLibrary)
{
   26c16:	55                   	push   ebp
   26c17:	89 e5                	mov    ebp,esp
   26c19:	57                   	push   edi
   26c1a:	56                   	push   esi
   26c1b:	53                   	push   ebx
   26c1c:	83 ec 2c             	sub    esp,0x2c
   26c1f:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   26c22:	88 45 d4             	mov    BYTE PTR [ebp-0x2c],al
/home/yogi/src/os/chrisOS/src/newloader.c:243
    char* sectStringTable=(char*)0x1900000;  //TODO: Fix this!!!
   26c25:	c7 45 dc 00 00 90 01 	mov    DWORD PTR [ebp-0x24],0x1900000
/home/yogi/src/os/chrisOS/src/newloader.c:246

    //Initialize the structs we will be using
    memset(elfInfo,0,sizeof(elfInfo_t));
   26c2c:	83 ec 04             	sub    esp,0x4
   26c2f:	68 dc 18 00 00       	push   0x18dc
   26c34:	6a 00                	push   0x0
   26c36:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26c39:	e8 83 e7 ff ff       	call   253c1 <memset>
   26c3e:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:247
    memset(&elfInfo->dynamicInfo,0,sizeof(elfDynamic_t));
   26c41:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c44:	05 54 0e 00 00       	add    eax,0xe54
   26c49:	83 ec 04             	sub    esp,0x4
   26c4c:	68 80 0a 00 00       	push   0xa80
   26c51:	6a 00                	push   0x0
   26c53:	50                   	push   eax
   26c54:	e8 68 e7 ff ff       	call   253c1 <memset>
   26c59:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:249

    elfInfo->loadCompleted=true;
   26c5c:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26c5f:	c6 80 d8 18 00 00 01 	mov    BYTE PTR [eax+0x18d8],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:251
    //Load all of the sections in the file to memory
    loadSections(file,elfInfo,isLibrary);
   26c66:	0f b6 45 d4          	movzx  eax,BYTE PTR [ebp-0x2c]
   26c6a:	83 ec 04             	sub    esp,0x4
   26c6d:	50                   	push   eax
   26c6e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26c71:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   26c74:	e8 d0 f9 ff ff       	call   26649 <loadSections>
   26c79:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:255
    

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
   26c7c:	a1 78 48 12 00       	mov    eax,ds:0x124878
   26c81:	25 00 02 00 00       	and    eax,0x200
   26c86:	85 c0                	test   eax,eax
   26c88:	0f 84 12 01 00 00    	je     26da0 <loadElf+0x18a>
/home/yogi/src/os/chrisOS/src/newloader.c:257
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
   26c8e:	83 ec 08             	sub    esp,0x8
   26c91:	68 64 5f 08 00       	push   0x85f64
   26c96:	68 00 02 00 00       	push   0x200
   26c9b:	e8 87 08 00 00       	call   27527 <printd>
   26ca0:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:258
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   26ca3:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
   26caa:	e9 c4 00 00 00       	jmp    26d73 <loadElf+0x15d>
/home/yogi/src/os/chrisOS/src/newloader.c:260
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
   26caf:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26cb2:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26cb5:	89 d0                	mov    eax,edx
   26cb7:	c1 e0 02             	shl    eax,0x2
   26cba:	01 d0                	add    eax,edx
   26cbc:	c1 e0 03             	shl    eax,0x3
   26cbf:	01 c8                	add    eax,ecx
   26cc1:	83 c0 34             	add    eax,0x34
   26cc4:	8b 10                	mov    edx,DWORD PTR [eax]
   26cc6:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   26cc9:	01 d0                	add    eax,edx
   26ccb:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   26cce:	0f be c0             	movsx  eax,al
   26cd1:	85 c0                	test   eax,eax
   26cd3:	0f 84 96 00 00 00    	je     26d6f <loadElf+0x159>
/home/yogi/src/os/chrisOS/src/newloader.c:261
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   26cd9:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26cdc:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26cdf:	89 d0                	mov    eax,edx
   26ce1:	c1 e0 02             	shl    eax,0x2
   26ce4:	01 d0                	add    eax,edx
   26ce6:	c1 e0 03             	shl    eax,0x3
   26ce9:	01 c8                	add    eax,ecx
   26ceb:	83 c0 38             	add    eax,0x38
   26cee:	8b 38                	mov    edi,DWORD PTR [eax]
   26cf0:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26cf3:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26cf6:	89 d0                	mov    eax,edx
   26cf8:	c1 e0 02             	shl    eax,0x2
   26cfb:	01 d0                	add    eax,edx
   26cfd:	c1 e0 03             	shl    eax,0x3
   26d00:	01 c8                	add    eax,ecx
   26d02:	83 c0 48             	add    eax,0x48
   26d05:	8b 30                	mov    esi,DWORD PTR [eax]
   26d07:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26d0a:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26d0d:	89 d0                	mov    eax,edx
   26d0f:	c1 e0 02             	shl    eax,0x2
   26d12:	01 d0                	add    eax,edx
   26d14:	c1 e0 03             	shl    eax,0x3
   26d17:	01 c8                	add    eax,ecx
   26d19:	83 c0 44             	add    eax,0x44
   26d1c:	8b 18                	mov    ebx,DWORD PTR [eax]
   26d1e:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   26d21:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26d24:	89 d0                	mov    eax,edx
   26d26:	c1 e0 02             	shl    eax,0x2
   26d29:	01 d0                	add    eax,edx
   26d2b:	c1 e0 03             	shl    eax,0x3
   26d2e:	01 c8                	add    eax,ecx
   26d30:	83 c0 40             	add    eax,0x40
   26d33:	8b 08                	mov    ecx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:262
                        sectStringTable+elfInfo->secHdrTable[cnt].sh_name,
   26d35:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d38:	89 45 d0             	mov    DWORD PTR [ebp-0x30],eax
   26d3b:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   26d3e:	89 d0                	mov    eax,edx
   26d40:	c1 e0 02             	shl    eax,0x2
   26d43:	01 d0                	add    eax,edx
   26d45:	c1 e0 03             	shl    eax,0x3
   26d48:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
   26d4b:	83 c0 34             	add    eax,0x34
   26d4e:	8b 10                	mov    edx,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/newloader.c:261
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
        {
            if ((uint8_t*)*(sectStringTable+elfInfo->secHdrTable[cnt].sh_name)>0)
                printd(DEBUG_ELF_LOADER,"%-10s\t0x%08X\t0x%08X\t0x%08X\t0x%08X\n",
   26d50:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
   26d53:	01 d0                	add    eax,edx
   26d55:	83 ec 04             	sub    esp,0x4
   26d58:	57                   	push   edi
   26d59:	56                   	push   esi
   26d5a:	53                   	push   ebx
   26d5b:	51                   	push   ecx
   26d5c:	50                   	push   eax
   26d5d:	68 90 5f 08 00       	push   0x85f90
   26d62:	68 00 02 00 00       	push   0x200
   26d67:	e8 bb 07 00 00       	call   27527 <printd>
   26d6c:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 2)

    //List the sections (debugging)
    if (kDebugLevel&DEBUG_ELF_LOADER)
    {
        printd(DEBUG_ELF_LOADER,"Table\t     MemAddr\t\tFileAddr\t\tSize\ttype\n");
        for (int cnt=0;cnt<elfInfo->hdr.e_shentsize;cnt++)
   26d6f:	83 45 e4 01          	add    DWORD PTR [ebp-0x1c],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:258 (discriminator 1)
   26d73:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26d76:	0f b7 40 2e          	movzx  eax,WORD PTR [eax+0x2e]
   26d7a:	0f b7 c0             	movzx  eax,ax
   26d7d:	3b 45 e4             	cmp    eax,DWORD PTR [ebp-0x1c]
   26d80:	0f 8f 29 ff ff ff    	jg     26caf <loadElf+0x99>
/home/yogi/src/os/chrisOS/src/newloader.c:268
                        elfInfo->secHdrTable[cnt].sh_addr,
                        elfInfo->secHdrTable[cnt].sh_offset,
                        elfInfo->secHdrTable[cnt].sh_size, 
                        elfInfo->secHdrTable[cnt].sh_type);
        }
        printd(DEBUG_ELF_LOADER,"End of section table... press a key to continue\n");
   26d86:	83 ec 08             	sub    esp,0x8
   26d89:	68 b4 5f 08 00       	push   0x85fb4
   26d8e:	68 00 02 00 00       	push   0x200
   26d93:	e8 8f 07 00 00       	call   27527 <printd>
   26d98:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:269
        waitForKeyboardKey();
   26d9b:	e8 88 a4 fe ff       	call   11228 <waitForKeyboardKey>
/home/yogi/src/os/chrisOS/src/newloader.c:273
    }
    
    //Find the symbol and string tables in the dynamic section
    if (elfInfo->dynamicSectionAddress>0)
   26da0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26da3:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26da9:	85 c0                	test   eax,eax
   26dab:	0f 84 94 01 00 00    	je     26f45 <loadElf+0x32f>
/home/yogi/src/os/chrisOS/src/newloader.c:275
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
   26db1:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26db4:	8b 90 4c 0e 00 00    	mov    edx,DWORD PTR [eax+0xe4c]
   26dba:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26dbd:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26dc3:	52                   	push   edx
   26dc4:	50                   	push   eax
   26dc5:	68 e8 5f 08 00       	push   0x85fe8
   26dca:	68 00 02 00 00       	push   0x200
   26dcf:	e8 53 07 00 00       	call   27527 <printd>
   26dd4:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:276
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;
   26dd7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26dda:	8b 80 50 0e 00 00    	mov    eax,DWORD PTR [eax+0xe50]
   26de0:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/newloader.c:279

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26de3:	c7 45 e0 00 00 00 00 	mov    DWORD PTR [ebp-0x20],0x0
   26dea:	e9 e4 00 00 00       	jmp    26ed3 <loadElf+0x2bd>
/home/yogi/src/os/chrisOS/src/newloader.c:281
        {
            if (dyn[cnt].d_tag==DT_STRTAB)
   26def:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26df2:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26df9:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26dfc:	01 d0                	add    eax,edx
   26dfe:	8b 00                	mov    eax,DWORD PTR [eax]
   26e00:	83 f8 05             	cmp    eax,0x5
   26e03:	75 5b                	jne    26e60 <loadElf+0x24a>
/home/yogi/src/os/chrisOS/src/newloader.c:283
            {
                elfInfo->dynamicInfo.strTableAddress=dyn[cnt].d_un.d_ptr;
   26e05:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26e08:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26e0f:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26e12:	01 d0                	add    eax,edx
   26e14:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26e17:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e1a:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:284
                if (isLibrary)
   26e20:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   26e24:	74 19                	je     26e3f <loadElf+0x229>
/home/yogi/src/os/chrisOS/src/newloader.c:285
                    elfInfo->dynamicInfo.strTableAddress+=libLoadOffset;
   26e26:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e29:	8b 90 b8 18 00 00    	mov    edx,DWORD PTR [eax+0x18b8]
   26e2f:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   26e34:	01 c2                	add    edx,eax
   26e36:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e39:	89 90 b8 18 00 00    	mov    DWORD PTR [eax+0x18b8],edx
/home/yogi/src/os/chrisOS/src/newloader.c:286
                printd(DEBUG_ELF_LOADER,"Found dynamic string table address 0x%08X\n",elfInfo->dynamicInfo.strTableAddress);
   26e3f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e42:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26e48:	83 ec 04             	sub    esp,0x4
   26e4b:	50                   	push   eax
   26e4c:	68 24 60 08 00       	push   0x86024
   26e51:	68 00 02 00 00       	push   0x200
   26e56:	e8 cc 06 00 00       	call   27527 <printd>
   26e5b:	83 c4 10             	add    esp,0x10
   26e5e:	eb 6f                	jmp    26ecf <loadElf+0x2b9>
/home/yogi/src/os/chrisOS/src/newloader.c:288
            }
            else if (dyn[cnt].d_tag==DT_SYMTAB)
   26e60:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26e63:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26e6a:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26e6d:	01 d0                	add    eax,edx
   26e6f:	8b 00                	mov    eax,DWORD PTR [eax]
   26e71:	83 f8 06             	cmp    eax,0x6
   26e74:	75 59                	jne    26ecf <loadElf+0x2b9>
/home/yogi/src/os/chrisOS/src/newloader.c:290
            {
                elfInfo->dynamicInfo.symTableAddress=dyn[cnt].d_un.d_ptr;
   26e76:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   26e79:	8d 14 c5 00 00 00 00 	lea    edx,[eax*8+0x0]
   26e80:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   26e83:	01 d0                	add    eax,edx
   26e85:	8b 50 04             	mov    edx,DWORD PTR [eax+0x4]
   26e88:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e8b:	89 90 c0 18 00 00    	mov    DWORD PTR [eax+0x18c0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:291
                if (isLibrary)
   26e91:	80 7d d4 00          	cmp    BYTE PTR [ebp-0x2c],0x0
   26e95:	74 19                	je     26eb0 <loadElf+0x29a>
/home/yogi/src/os/chrisOS/src/newloader.c:292
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
   26e97:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26e9a:	8b 90 c0 18 00 00    	mov    edx,DWORD PTR [eax+0x18c0]
   26ea0:	a1 ec a5 09 00       	mov    eax,ds:0x9a5ec
   26ea5:	01 c2                	add    edx,eax
   26ea7:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26eaa:	89 90 c0 18 00 00    	mov    DWORD PTR [eax+0x18c0],edx
/home/yogi/src/os/chrisOS/src/newloader.c:293
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
   26eb0:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26eb3:	8b 80 c0 18 00 00    	mov    eax,DWORD PTR [eax+0x18c0]
   26eb9:	83 ec 04             	sub    esp,0x4
   26ebc:	50                   	push   eax
   26ebd:	68 50 60 08 00       	push   0x86050
   26ec2:	68 00 02 00 00       	push   0x200
   26ec7:	e8 5b 06 00 00       	call   27527 <printd>
   26ecc:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:279 (discriminator 2)
    {
        printd(DEBUG_ELF_LOADER,"Processing dynamic sect, section address=0x%08X, count=%u\n",elfInfo->dynamicSectionAddress,elfInfo->dynamicRecordCount);
        Elf32_Dyn* dyn=(Elf32_Dyn*)elfInfo->dynamicSectionAddress;

        //First iterate the section to find the string & symbol tables
        for (int cnt=0;cnt<elfInfo->dynamicRecordCount;cnt++)
   26ecf:	83 45 e0 01          	add    DWORD PTR [ebp-0x20],0x1
/home/yogi/src/os/chrisOS/src/newloader.c:279 (discriminator 1)
   26ed3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ed6:	8b 80 4c 0e 00 00    	mov    eax,DWORD PTR [eax+0xe4c]
   26edc:	3b 45 e0             	cmp    eax,DWORD PTR [ebp-0x20]
   26edf:	0f 8f 0a ff ff ff    	jg     26def <loadElf+0x1d9>
/home/yogi/src/os/chrisOS/src/newloader.c:296
                if (isLibrary)
                    elfInfo->dynamicInfo.symTableAddress+=libLoadOffset;
                printd(DEBUG_ELF_LOADER,"Found dynamic symbol table address 0x%08X\n",elfInfo->dynamicInfo.symTableAddress);
            }
        }
        if (!elfInfo->dynamicInfo.strTableAddress)
   26ee5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26ee8:	8b 80 b8 18 00 00    	mov    eax,DWORD PTR [eax+0x18b8]
   26eee:	85 c0                	test   eax,eax
   26ef0:	75 1c                	jne    26f0e <loadElf+0x2f8>
/home/yogi/src/os/chrisOS/src/newloader.c:298
        {
            printk("EXEC: Dynamic loading, unable to find dynamic string table address, cannot execute.\n");
   26ef2:	83 ec 0c             	sub    esp,0xc
   26ef5:	68 7c 60 08 00       	push   0x8607c
   26efa:	e8 08 06 00 00       	call   27507 <printk>
   26eff:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:299
            elfInfo->loadCompleted=false;
   26f02:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f05:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:300
            return;
   26f0c:	eb 37                	jmp    26f45 <loadElf+0x32f>
/home/yogi/src/os/chrisOS/src/newloader.c:302
        }
        else if (!elfInfo->dynamicInfo.symTableAddress)
   26f0e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f11:	8b 80 c0 18 00 00    	mov    eax,DWORD PTR [eax+0x18c0]
   26f17:	85 c0                	test   eax,eax
   26f19:	75 1c                	jne    26f37 <loadElf+0x321>
/home/yogi/src/os/chrisOS/src/newloader.c:304
        {
            printk("EXEC: Dynamic loading, unable to find dynamic symbol table address, cannot execute.\n");
   26f1b:	83 ec 0c             	sub    esp,0xc
   26f1e:	68 d4 60 08 00       	push   0x860d4
   26f23:	e8 df 05 00 00       	call   27507 <printk>
   26f28:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:305
            elfInfo->loadCompleted=false;
   26f2b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   26f2e:	c6 80 d8 18 00 00 00 	mov    BYTE PTR [eax+0x18d8],0x0
/home/yogi/src/os/chrisOS/src/newloader.c:306
            return;
   26f35:	eb 0e                	jmp    26f45 <loadElf+0x32f>
/home/yogi/src/os/chrisOS/src/newloader.c:309
        }

     processELFDynamicSection(elfInfo);   
   26f37:	83 ec 0c             	sub    esp,0xc
   26f3a:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   26f3d:	e8 60 f2 ff ff       	call   261a2 <processELFDynamicSection>
   26f42:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:312
    
    }
}
   26f45:	8d 65 f4             	lea    esp,[ebp-0xc]
   26f48:	5b                   	pop    ebx
   26f49:	5e                   	pop    esi
   26f4a:	5f                   	pop    edi
   26f4b:	5d                   	pop    ebp
   26f4c:	c3                   	ret    

00026f4d <exec>:
exec():
/home/yogi/src/os/chrisOS/src/newloader.c:315

int exec(char* fileName,int argc,char** argv)
{
   26f4d:	55                   	push   ebp
   26f4e:	89 e5                	mov    ebp,esp
   26f50:	53                   	push   ebx
   26f51:	83 ec 14             	sub    esp,0x14
/home/yogi/src/os/chrisOS/src/newloader.c:316
    int lRetVal=-1;
   26f54:	c7 45 f4 ff ff ff ff 	mov    DWORD PTR [ebp-0xc],0xffffffff
/home/yogi/src/os/chrisOS/src/newloader.c:320
    register int *eax __asm__("eax");
    
    //Open the executable
    void* fPtr=fopen(fileName, "r");
   26f5b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26f5e:	83 ec 08             	sub    esp,0x8
   26f61:	68 b5 5b 08 00       	push   0x85bb5
   26f66:	50                   	push   eax
   26f67:	e8 79 67 ff ff       	call   1d6e5 <fl_fopen>
   26f6c:	83 c4 10             	add    esp,0x10
   26f6f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/newloader.c:321
    if (fPtr==0)
   26f72:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   26f76:	75 21                	jne    26f99 <exec+0x4c>
/home/yogi/src/os/chrisOS/src/newloader.c:323
    {
        printk("Error opening file '%s' (0x%08X), cannot exec\n",fileName,fPtr);
   26f78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   26f7b:	83 ec 04             	sub    esp,0x4
   26f7e:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26f81:	50                   	push   eax
   26f82:	68 2c 61 08 00       	push   0x8612c
   26f87:	e8 7b 05 00 00       	call   27507 <printk>
   26f8c:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:324
        return -1;
   26f8f:	b8 ff ff ff ff       	mov    eax,0xffffffff
   26f94:	e9 ea 00 00 00       	jmp    27083 <exec+0x136>
/home/yogi/src/os/chrisOS/src/newloader.c:328
    } 
    
    //Get a slot in the load info
    elfInfo_t* elf=&kExecLoadInfo[kExecLoadCount++];
   26f99:	8b 0d 3c 49 12 00    	mov    ecx,DWORD PTR ds:0x12493c
   26f9f:	a1 40 49 12 00       	mov    eax,ds:0x124940
   26fa4:	8d 50 01             	lea    edx,[eax+0x1]
   26fa7:	89 15 40 49 12 00    	mov    DWORD PTR ds:0x124940,edx
   26fad:	69 c0 dc 18 00 00    	imul   eax,eax,0x18dc
   26fb3:	01 c8                	add    eax,ecx
   26fb5:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/newloader.c:331
    
    //Load the executable
    loadElf(fPtr,elf,false);
   26fb8:	83 ec 04             	sub    esp,0x4
   26fbb:	6a 00                	push   0x0
   26fbd:	ff 75 ec             	push   DWORD PTR [ebp-0x14]
   26fc0:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   26fc3:	e8 4e fc ff ff       	call   26c16 <loadElf>
   26fc8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:332
    printd(DEBUG_ELF_LOADER,"exec: back from loading ELF file, result=%s\n",elf->loadCompleted?"Success":"Failure");;
   26fcb:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   26fce:	0f b6 80 d8 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d8]
   26fd5:	84 c0                	test   al,al
   26fd7:	74 07                	je     26fe0 <exec+0x93>
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 1)
   26fd9:	b8 5b 61 08 00       	mov    eax,0x8615b
   26fde:	eb 05                	jmp    26fe5 <exec+0x98>
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 2)
   26fe0:	b8 63 61 08 00       	mov    eax,0x86163
/home/yogi/src/os/chrisOS/src/newloader.c:332 (discriminator 4)
   26fe5:	83 ec 04             	sub    esp,0x4
   26fe8:	50                   	push   eax
   26fe9:	68 6c 61 08 00       	push   0x8616c
   26fee:	68 00 02 00 00       	push   0x200
   26ff3:	e8 2f 05 00 00       	call   27527 <printd>
   26ff8:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:333 (discriminator 4)
    fclose(fPtr);
   26ffb:	83 ec 0c             	sub    esp,0xc
   26ffe:	ff 75 f0             	push   DWORD PTR [ebp-0x10]
   27001:	e8 10 6b ff ff       	call   1db16 <fl_fclose>
   27006:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/newloader.c:336 (discriminator 4)
    
    //If loaded successfully then execute
    if (elf->loadCompleted)
   27009:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2700c:	0f b6 80 d8 18 00 00 	movzx  eax,BYTE PTR [eax+0x18d8]
   27013:	84 c0                	test   al,al
   27015:	74 69                	je     27080 <exec+0x133>
/home/yogi/src/os/chrisOS/src/newloader.c:338
    {
        printd(DEBUG_ELF_LOADER,"exec: Executing %s at 0x%08X, return address is =0x%08X\n", fileName, elf->hdr.e_entry, __builtin_return_address(0));
   27017:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   2701a:	89 c1                	mov    ecx,eax
   2701c:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2701f:	8b 50 18             	mov    edx,DWORD PTR [eax+0x18]
   27022:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27025:	83 ec 0c             	sub    esp,0xc
   27028:	51                   	push   ecx
   27029:	52                   	push   edx
   2702a:	50                   	push   eax
   2702b:	68 9c 61 08 00       	push   0x8619c
   27030:	68 00 02 00 00       	push   0x200
   27035:	e8 ed 04 00 00       	call   27527 <printd>
   2703a:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:339
        __asm__("push ebx\npush ecx\n"::[argvp] "b" (argv), [argcv] "c" (argc));
   2703d:	8b 55 10             	mov    edx,DWORD PTR [ebp+0x10]
   27040:	8b 4d 0c             	mov    ecx,DWORD PTR [ebp+0xc]
   27043:	89 d3                	mov    ebx,edx
   27045:	53                   	push   ebx
   27046:	51                   	push   ecx
/home/yogi/src/os/chrisOS/src/newloader.c:340
        __asm__("mov edx,%[pgmptr]\n"::[pgmptr] "d" (elf->hdr.e_entry));
   27047:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2704a:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   2704d:	89 d2                	mov    edx,edx
/home/yogi/src/os/chrisOS/src/newloader.c:341
        __asm__("call edx\n"::[pgmptr] "d" (elf->hdr.e_entry));
   2704f:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   27052:	8b 52 18             	mov    edx,DWORD PTR [edx+0x18]
   27055:	ff d2                	call   edx
/home/yogi/src/os/chrisOS/src/newloader.c:342
        lRetVal=(uint32_t)eax;
   27057:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/newloader.c:343
        printd(DEBUG_ELF_LOADER,"exec: Back from executing %s, return value is 0x%08X, 0x%08X, __bra=0x%08X\n", fileName, lRetVal, &fileName, __builtin_return_address(0));
   2705a:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   2705d:	89 c2                	mov    edx,eax
   2705f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27062:	83 ec 08             	sub    esp,0x8
   27065:	52                   	push   edx
   27066:	8d 55 08             	lea    edx,[ebp+0x8]
   27069:	52                   	push   edx
   2706a:	ff 75 f4             	push   DWORD PTR [ebp-0xc]
   2706d:	50                   	push   eax
   2706e:	68 d8 61 08 00       	push   0x861d8
   27073:	68 00 02 00 00       	push   0x200
   27078:	e8 aa 04 00 00       	call   27527 <printd>
   2707d:	83 c4 20             	add    esp,0x20
/home/yogi/src/os/chrisOS/src/newloader.c:345
    }
    return lRetVal;
   27080:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
/home/yogi/src/os/chrisOS/src/newloader.c:346
}
   27083:	8b 5d fc             	mov    ebx,DWORD PTR [ebp-0x4]
   27086:	c9                   	leave  
   27087:	c3                   	ret    

00027088 <panic>:
panic():
/home/yogi/src/os/chrisOS/src/panic.c:8
#include <stdarg.h>
#include <time.h>
#include "printf.h"

void __attribute__((noinline))panic(const char *format, ...)
{
   27088:	55                   	push   ebp
   27089:	89 e5                	mov    ebp,esp
   2708b:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/panic.c:10
    va_list args;
    va_start( args, format );
   2708e:	8d 45 0c             	lea    eax,[ebp+0xc]
   27091:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/panic.c:11
    printk("\n>>>panic at instruction prior to address 0x%08X<<<\n", __builtin_return_address(0));
   27094:	8b 45 04             	mov    eax,DWORD PTR [ebp+0x4]
   27097:	83 ec 08             	sub    esp,0x8
   2709a:	50                   	push   eax
   2709b:	68 24 62 08 00       	push   0x86224
   270a0:	e8 62 04 00 00       	call   27507 <printk>
   270a5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:12
    printk("  >>>");
   270a8:	83 ec 0c             	sub    esp,0xc
   270ab:	68 59 62 08 00       	push   0x86259
   270b0:	e8 52 04 00 00       	call   27507 <printk>
   270b5:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:13
    printk_valist( format,args);
   270b8:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   270bb:	83 ec 08             	sub    esp,0x8
   270be:	50                   	push   eax
   270bf:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   270c2:	e8 25 04 00 00       	call   274ec <printk_valist>
   270c7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/panic.c:15 (discriminator 1)
    panicLoop: 
    __asm__("cli\nhlt\n");
   270ca:	fa                   	cli    
   270cb:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/panic.c:16 (discriminator 1)
    goto panicLoop;
   270cc:	eb fc                	jmp    270ca <panic+0x42>
   270ce:	66 90                	xchg   ax,ax

000270d0 <printchar>:
printchar():
/home/yogi/src/os/chrisOS/src/printf.c:41
//extern bool pauseDisplay(bool offerToQuit);
extern uint32_t kDebugLevel;
uint8_t printDLineCount;

static void printchar(char **str, int c)
{
   270d0:	55                   	push   ebp
   270d1:	89 e5                	mov    ebp,esp
   270d3:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:43
	
	if (str) {
   270d6:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   270da:	74 19                	je     270f5 <printchar+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:44
		**str = c;
   270dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   270df:	8b 00                	mov    eax,DWORD PTR [eax]
   270e1:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   270e4:	88 10                	mov    BYTE PTR [eax],dl
/home/yogi/src/os/chrisOS/src/printf.c:45
		++(*str);
   270e6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   270e9:	8b 00                	mov    eax,DWORD PTR [eax]
   270eb:	8d 50 01             	lea    edx,[eax+0x1]
   270ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   270f1:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/printf.c:48
	}
	else terminal_putchar((unsigned char)c);
}
   270f3:	eb 12                	jmp    27107 <printchar+0x37>
/home/yogi/src/os/chrisOS/src/printf.c:47
	
	if (str) {
		**str = c;
		++(*str);
	}
	else terminal_putchar((unsigned char)c);
   270f5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   270f8:	0f b6 c0             	movzx  eax,al
   270fb:	83 ec 0c             	sub    esp,0xc
   270fe:	50                   	push   eax
   270ff:	e8 7a 0e ff ff       	call   17f7e <terminal_putchar>
   27104:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:48
}
   27107:	90                   	nop
   27108:	c9                   	leave  
   27109:	c3                   	ret    

0002710a <prints>:
prints():
/home/yogi/src/os/chrisOS/src/printf.c:54

#define PAD_RIGHT 1
#define PAD_ZERO 2

static int prints(char **out, const char *string, int width, int pad)
{
   2710a:	55                   	push   ebp
   2710b:	89 e5                	mov    ebp,esp
   2710d:	57                   	push   edi
   2710e:	56                   	push   esi
   2710f:	53                   	push   ebx
   27110:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:55
	register int pc = 0, padchar = ' ';
   27113:	bb 00 00 00 00       	mov    ebx,0x0
   27118:	c7 45 e4 20 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x20
/home/yogi/src/os/chrisOS/src/printf.c:57

	if (width > 0) {
   2711f:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27123:	7e 39                	jle    2715e <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:58
		register int len = 0;
   27125:	be 00 00 00 00       	mov    esi,0x0
/home/yogi/src/os/chrisOS/src/printf.c:60
		register const char *ptr;
		for (ptr = string; *ptr; ++ptr) ++len;
   2712a:	8b 7d 0c             	mov    edi,DWORD PTR [ebp+0xc]
   2712d:	eb 06                	jmp    27135 <prints+0x2b>
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 3)
   2712f:	83 c6 01             	add    esi,0x1
   27132:	83 c7 01             	add    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:60 (discriminator 1)
   27135:	0f b6 07             	movzx  eax,BYTE PTR [edi]
   27138:	84 c0                	test   al,al
   2713a:	75 f3                	jne    2712f <prints+0x25>
/home/yogi/src/os/chrisOS/src/printf.c:61
		if (len >= width) width = 0;
   2713c:	3b 75 10             	cmp    esi,DWORD PTR [ebp+0x10]
   2713f:	7c 09                	jl     2714a <prints+0x40>
/home/yogi/src/os/chrisOS/src/printf.c:61 (discriminator 1)
   27141:	c7 45 10 00 00 00 00 	mov    DWORD PTR [ebp+0x10],0x0
   27148:	eb 03                	jmp    2714d <prints+0x43>
/home/yogi/src/os/chrisOS/src/printf.c:62
		else width -= len;
   2714a:	29 75 10             	sub    DWORD PTR [ebp+0x10],esi
/home/yogi/src/os/chrisOS/src/printf.c:63
		if (pad & PAD_ZERO) padchar = '0';
   2714d:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   27150:	83 e0 02             	and    eax,0x2
   27153:	85 c0                	test   eax,eax
   27155:	74 07                	je     2715e <prints+0x54>
/home/yogi/src/os/chrisOS/src/printf.c:63 (discriminator 1)
   27157:	c7 45 e4 30 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x30
/home/yogi/src/os/chrisOS/src/printf.c:65
	}
	if (!(pad & PAD_RIGHT)) {
   2715e:	8b 45 14             	mov    eax,DWORD PTR [ebp+0x14]
   27161:	83 e0 01             	and    eax,0x1
   27164:	85 c0                	test   eax,eax
   27166:	75 41                	jne    271a9 <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:66
		for ( ; width > 0; --width) {
   27168:	eb 18                	jmp    27182 <prints+0x78>
/home/yogi/src/os/chrisOS/src/printf.c:67 (discriminator 2)
			printchar (out, padchar);
   2716a:	83 ec 08             	sub    esp,0x8
   2716d:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   27170:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27173:	e8 58 ff ff ff       	call   270d0 <printchar>
   27178:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:68 (discriminator 2)
			++pc;
   2717b:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 2)
		if (len >= width) width = 0;
		else width -= len;
		if (pad & PAD_ZERO) padchar = '0';
	}
	if (!(pad & PAD_RIGHT)) {
		for ( ; width > 0; --width) {
   2717e:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:66 (discriminator 1)
   27182:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27186:	7f e2                	jg     2716a <prints+0x60>
/home/yogi/src/os/chrisOS/src/printf.c:71
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   27188:	eb 1f                	jmp    271a9 <prints+0x9f>
/home/yogi/src/os/chrisOS/src/printf.c:72 (discriminator 2)
		printchar (out, *string);
   2718a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2718d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27190:	0f be c0             	movsx  eax,al
   27193:	83 ec 08             	sub    esp,0x8
   27196:	50                   	push   eax
   27197:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2719a:	e8 31 ff ff ff       	call   270d0 <printchar>
   2719f:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:73 (discriminator 2)
		++pc;
   271a2:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 2)
		for ( ; width > 0; --width) {
			printchar (out, padchar);
			++pc;
		}
	}
	for ( ; *string ; ++string) {
   271a5:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:71 (discriminator 1)
   271a9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   271ac:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   271af:	84 c0                	test   al,al
   271b1:	75 d7                	jne    2718a <prints+0x80>
/home/yogi/src/os/chrisOS/src/printf.c:75
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   271b3:	eb 18                	jmp    271cd <prints+0xc3>
/home/yogi/src/os/chrisOS/src/printf.c:76 (discriminator 2)
		printchar (out, padchar);
   271b5:	83 ec 08             	sub    esp,0x8
   271b8:	ff 75 e4             	push   DWORD PTR [ebp-0x1c]
   271bb:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   271be:	e8 0d ff ff ff       	call   270d0 <printchar>
   271c3:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:77 (discriminator 2)
		++pc;
   271c6:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 2)
	}
	for ( ; *string ; ++string) {
		printchar (out, *string);
		++pc;
	}
	for ( ; width > 0; --width) {
   271c9:	83 6d 10 01          	sub    DWORD PTR [ebp+0x10],0x1
/home/yogi/src/os/chrisOS/src/printf.c:75 (discriminator 1)
   271cd:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   271d1:	7f e2                	jg     271b5 <prints+0xab>
/home/yogi/src/os/chrisOS/src/printf.c:80
		printchar (out, padchar);
		++pc;
	}

	return pc;
   271d3:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:81
}
   271d5:	8d 65 f4             	lea    esp,[ebp-0xc]
   271d8:	5b                   	pop    ebx
   271d9:	5e                   	pop    esi
   271da:	5f                   	pop    edi
   271db:	5d                   	pop    ebp
   271dc:	c3                   	ret    

000271dd <printi>:
printi():
/home/yogi/src/os/chrisOS/src/printf.c:87

/* the following should be enough for 32 bit int */
#define PRINT_BUF_LEN 12

static int printi(char **out, int i, int b, int sg, int width, int pad, int letbase)
{
   271dd:	55                   	push   ebp
   271de:	89 e5                	mov    ebp,esp
   271e0:	57                   	push   edi
   271e1:	56                   	push   esi
   271e2:	53                   	push   ebx
   271e3:	83 ec 2c             	sub    esp,0x2c
/home/yogi/src/os/chrisOS/src/printf.c:90
	char print_buf[PRINT_BUF_LEN];
	register char *s;
	register int t, neg = 0, pc = 0;
   271e6:	c7 45 d4 00 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x0
   271ed:	c7 45 d0 00 00 00 00 	mov    DWORD PTR [ebp-0x30],0x0
/home/yogi/src/os/chrisOS/src/printf.c:91
	register unsigned int u = i;
   271f4:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/printf.c:93

	if (i == 0) {
   271f7:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   271fb:	75 22                	jne    2721f <printi+0x42>
/home/yogi/src/os/chrisOS/src/printf.c:94
		print_buf[0] = '0';
   271fd:	c6 45 dc 30          	mov    BYTE PTR [ebp-0x24],0x30
/home/yogi/src/os/chrisOS/src/printf.c:95
		print_buf[1] = '\0';
   27201:	c6 45 dd 00          	mov    BYTE PTR [ebp-0x23],0x0
/home/yogi/src/os/chrisOS/src/printf.c:96
		return prints (out, print_buf, width, pad);
   27205:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   27208:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   2720b:	8d 45 dc             	lea    eax,[ebp-0x24]
   2720e:	50                   	push   eax
   2720f:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27212:	e8 f3 fe ff ff       	call   2710a <prints>
   27217:	83 c4 10             	add    esp,0x10
   2721a:	e9 af 00 00 00       	jmp    272ce <printi+0xf1>
/home/yogi/src/os/chrisOS/src/printf.c:99
	}

	if (sg && b == 10 && i < 0) {
   2721f:	83 7d 14 00          	cmp    DWORD PTR [ebp+0x14],0x0
   27223:	74 1a                	je     2723f <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 1)
   27225:	83 7d 10 0a          	cmp    DWORD PTR [ebp+0x10],0xa
   27229:	75 14                	jne    2723f <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:99 (discriminator 2)
   2722b:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   2722f:	79 0e                	jns    2723f <printi+0x62>
/home/yogi/src/os/chrisOS/src/printf.c:100
		neg = 1;
   27231:	c7 45 d4 01 00 00 00 	mov    DWORD PTR [ebp-0x2c],0x1
/home/yogi/src/os/chrisOS/src/printf.c:101
		u = -i;
   27238:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2723b:	f7 d8                	neg    eax
   2723d:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:104
	}

	s = print_buf + PRINT_BUF_LEN-1;
   2723f:	8d 5d dc             	lea    ebx,[ebp-0x24]
   27242:	83 c3 0b             	add    ebx,0xb
/home/yogi/src/os/chrisOS/src/printf.c:105
	*s = '\0';
   27245:	c6 03 00             	mov    BYTE PTR [ebx],0x0
/home/yogi/src/os/chrisOS/src/printf.c:107

	while (u) {
   27248:	eb 35                	jmp    2727f <printi+0xa2>
/home/yogi/src/os/chrisOS/src/printf.c:108
		t = u % b;
   2724a:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   2724d:	89 f0                	mov    eax,esi
   2724f:	ba 00 00 00 00       	mov    edx,0x0
   27254:	f7 f1                	div    ecx
   27256:	89 d0                	mov    eax,edx
   27258:	89 c7                	mov    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:109
		if( t >= 10 )
   2725a:	83 ff 09             	cmp    edi,0x9
   2725d:	7e 08                	jle    27267 <printi+0x8a>
/home/yogi/src/os/chrisOS/src/printf.c:110
			t += letbase - '0' - 10;
   2725f:	8b 45 20             	mov    eax,DWORD PTR [ebp+0x20]
   27262:	83 e8 3a             	sub    eax,0x3a
   27265:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/printf.c:111
		*--s = t + '0';
   27267:	83 eb 01             	sub    ebx,0x1
   2726a:	89 f8                	mov    eax,edi
   2726c:	83 c0 30             	add    eax,0x30
   2726f:	88 03                	mov    BYTE PTR [ebx],al
/home/yogi/src/os/chrisOS/src/printf.c:112
		u /= b;
   27271:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27274:	89 f0                	mov    eax,esi
   27276:	ba 00 00 00 00       	mov    edx,0x0
   2727b:	f7 f1                	div    ecx
   2727d:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:107
	}

	s = print_buf + PRINT_BUF_LEN-1;
	*s = '\0';

	while (u) {
   2727f:	85 f6                	test   esi,esi
   27281:	75 c7                	jne    2724a <printi+0x6d>
/home/yogi/src/os/chrisOS/src/printf.c:115
			t += letbase - '0' - 10;
		*--s = t + '0';
		u /= b;
	}

	if (neg) {
   27283:	83 7d d4 00          	cmp    DWORD PTR [ebp-0x2c],0x0
   27287:	74 30                	je     272b9 <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:116
		if( width && (pad & PAD_ZERO) ) {
   27289:	83 7d 18 00          	cmp    DWORD PTR [ebp+0x18],0x0
   2728d:	74 24                	je     272b3 <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:116 (discriminator 1)
   2728f:	8b 45 1c             	mov    eax,DWORD PTR [ebp+0x1c]
   27292:	83 e0 02             	and    eax,0x2
   27295:	85 c0                	test   eax,eax
   27297:	74 1a                	je     272b3 <printi+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:117
			printchar (out, '-');
   27299:	83 ec 08             	sub    esp,0x8
   2729c:	6a 2d                	push   0x2d
   2729e:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   272a1:	e8 2a fe ff ff       	call   270d0 <printchar>
   272a6:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:118
			++pc;
   272a9:	83 45 d0 01          	add    DWORD PTR [ebp-0x30],0x1
/home/yogi/src/os/chrisOS/src/printf.c:119
			--width;
   272ad:	83 6d 18 01          	sub    DWORD PTR [ebp+0x18],0x1
   272b1:	eb 06                	jmp    272b9 <printi+0xdc>
/home/yogi/src/os/chrisOS/src/printf.c:122
		}
		else {
			*--s = '-';
   272b3:	83 eb 01             	sub    ebx,0x1
   272b6:	c6 03 2d             	mov    BYTE PTR [ebx],0x2d
/home/yogi/src/os/chrisOS/src/printf.c:126
		}
	}

	return pc + prints (out, s, width, pad);
   272b9:	ff 75 1c             	push   DWORD PTR [ebp+0x1c]
   272bc:	ff 75 18             	push   DWORD PTR [ebp+0x18]
   272bf:	53                   	push   ebx
   272c0:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   272c3:	e8 42 fe ff ff       	call   2710a <prints>
   272c8:	83 c4 10             	add    esp,0x10
   272cb:	03 45 d0             	add    eax,DWORD PTR [ebp-0x30]
/home/yogi/src/os/chrisOS/src/printf.c:127 (discriminator 1)
}
   272ce:	8d 65 f4             	lea    esp,[ebp-0xc]
   272d1:	5b                   	pop    ebx
   272d2:	5e                   	pop    esi
   272d3:	5f                   	pop    edi
   272d4:	5d                   	pop    ebp
   272d5:	c3                   	ret    

000272d6 <print>:
print():
/home/yogi/src/os/chrisOS/src/printf.c:130

static int print(char **out, const char *format, va_list args )
{
   272d6:	55                   	push   ebp
   272d7:	89 e5                	mov    ebp,esp
   272d9:	57                   	push   edi
   272da:	56                   	push   esi
   272db:	53                   	push   ebx
   272dc:	83 ec 1c             	sub    esp,0x1c
/home/yogi/src/os/chrisOS/src/printf.c:132
	register int width, pad;
	register int pc = 0;
   272df:	bb 00 00 00 00       	mov    ebx,0x0
/home/yogi/src/os/chrisOS/src/printf.c:135
	char scr[2];

	for (; *format != 0; ++format) {
   272e4:	e9 da 01 00 00       	jmp    274c3 <print+0x1ed>
/home/yogi/src/os/chrisOS/src/printf.c:136
		if (*format == '%') {
   272e9:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   272ec:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   272ef:	3c 25                	cmp    al,0x25
   272f1:	0f 85 ad 01 00 00    	jne    274a4 <print+0x1ce>
/home/yogi/src/os/chrisOS/src/printf.c:137
			++format;
   272f7:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:138
			width = pad = 0;
   272fb:	bf 00 00 00 00       	mov    edi,0x0
   27300:	89 fe                	mov    esi,edi
/home/yogi/src/os/chrisOS/src/printf.c:139
			if (*format == '\0') break;
   27302:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27305:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27308:	84 c0                	test   al,al
   2730a:	0f 84 c3 01 00 00    	je     274d3 <print+0x1fd>
/home/yogi/src/os/chrisOS/src/printf.c:140
			if (*format == '%') goto out;
   27310:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27313:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27316:	3c 25                	cmp    al,0x25
   27318:	0f 84 85 01 00 00    	je     274a3 <print+0x1cd>
/home/yogi/src/os/chrisOS/src/printf.c:141
			if (*format == '-') {
   2731e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27321:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27324:	3c 2d                	cmp    al,0x2d
   27326:	75 12                	jne    2733a <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:142
				++format;
   27328:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:143
				pad = PAD_RIGHT;
   2732c:	bf 01 00 00 00       	mov    edi,0x1
/home/yogi/src/os/chrisOS/src/printf.c:145
			}
			while (*format == '0') {
   27331:	eb 07                	jmp    2733a <print+0x64>
/home/yogi/src/os/chrisOS/src/printf.c:146
				++format;
   27333:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:147
				pad |= PAD_ZERO;
   27337:	83 cf 02             	or     edi,0x2
/home/yogi/src/os/chrisOS/src/printf.c:145
			if (*format == '%') goto out;
			if (*format == '-') {
				++format;
				pad = PAD_RIGHT;
			}
			while (*format == '0') {
   2733a:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2733d:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27340:	3c 30                	cmp    al,0x30
   27342:	74 ef                	je     27333 <print+0x5d>
/home/yogi/src/os/chrisOS/src/printf.c:149
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   27344:	eb 1d                	jmp    27363 <print+0x8d>
/home/yogi/src/os/chrisOS/src/printf.c:150 (discriminator 3)
				width *= 10;
   27346:	89 f0                	mov    eax,esi
   27348:	c1 e0 02             	shl    eax,0x2
   2734b:	01 f0                	add    eax,esi
   2734d:	01 c0                	add    eax,eax
   2734f:	89 c6                	mov    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:151 (discriminator 3)
				width += *format - '0';
   27351:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27354:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27357:	0f be c0             	movsx  eax,al
   2735a:	83 e8 30             	sub    eax,0x30
   2735d:	01 c6                	add    esi,eax
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 3)
			}
			while (*format == '0') {
				++format;
				pad |= PAD_ZERO;
			}
			for ( ; *format >= '0' && *format <= '9'; ++format) {
   2735f:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 1)
   27363:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27366:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27369:	3c 2f                	cmp    al,0x2f
   2736b:	7e 0a                	jle    27377 <print+0xa1>
/home/yogi/src/os/chrisOS/src/printf.c:149 (discriminator 2)
   2736d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27370:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27373:	3c 39                	cmp    al,0x39
   27375:	7e cf                	jle    27346 <print+0x70>
/home/yogi/src/os/chrisOS/src/printf.c:153
				width *= 10;
				width += *format - '0';
			}
			if( *format == 's' ) {
   27377:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   2737a:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2737d:	3c 73                	cmp    al,0x73
   2737f:	75 2b                	jne    273ac <print+0xd6>
/home/yogi/src/os/chrisOS/src/printf.c:154
				register char *s = (char *)va_arg( args, int );
   27381:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27384:	8d 50 04             	lea    edx,[eax+0x4]
   27387:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   2738a:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/printf.c:155
				pc += prints (out, s?s:"(null)", width, pad);
   2738c:	85 c0                	test   eax,eax
   2738e:	74 02                	je     27392 <print+0xbc>
   27390:	eb 05                	jmp    27397 <print+0xc1>
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 2)
   27392:	b8 5f 62 08 00       	mov    eax,0x8625f
/home/yogi/src/os/chrisOS/src/printf.c:155 (discriminator 4)
   27397:	57                   	push   edi
   27398:	56                   	push   esi
   27399:	50                   	push   eax
   2739a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2739d:	e8 68 fd ff ff       	call   2710a <prints>
   273a2:	83 c4 10             	add    esp,0x10
   273a5:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:156 (discriminator 4)
				continue;
   273a7:	e9 13 01 00 00       	jmp    274bf <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:158
			}
			if( *format == 'd' ) {
   273ac:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   273af:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   273b2:	3c 64                	cmp    al,0x64
   273b4:	75 29                	jne    273df <print+0x109>
/home/yogi/src/os/chrisOS/src/printf.c:159
				pc += printi (out, va_arg( args, int ), 10, 1, width, pad, 'a');
   273b6:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   273b9:	8d 50 04             	lea    edx,[eax+0x4]
   273bc:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   273bf:	8b 00                	mov    eax,DWORD PTR [eax]
   273c1:	83 ec 04             	sub    esp,0x4
   273c4:	6a 61                	push   0x61
   273c6:	57                   	push   edi
   273c7:	56                   	push   esi
   273c8:	6a 01                	push   0x1
   273ca:	6a 0a                	push   0xa
   273cc:	50                   	push   eax
   273cd:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   273d0:	e8 08 fe ff ff       	call   271dd <printi>
   273d5:	83 c4 20             	add    esp,0x20
   273d8:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:160
				continue;
   273da:	e9 e0 00 00 00       	jmp    274bf <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:162
			}
			if( *format == 'x' ) {
   273df:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   273e2:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   273e5:	3c 78                	cmp    al,0x78
   273e7:	75 29                	jne    27412 <print+0x13c>
/home/yogi/src/os/chrisOS/src/printf.c:163
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'a');
   273e9:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   273ec:	8d 50 04             	lea    edx,[eax+0x4]
   273ef:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   273f2:	8b 00                	mov    eax,DWORD PTR [eax]
   273f4:	83 ec 04             	sub    esp,0x4
   273f7:	6a 61                	push   0x61
   273f9:	57                   	push   edi
   273fa:	56                   	push   esi
   273fb:	6a 00                	push   0x0
   273fd:	6a 10                	push   0x10
   273ff:	50                   	push   eax
   27400:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27403:	e8 d5 fd ff ff       	call   271dd <printi>
   27408:	83 c4 20             	add    esp,0x20
   2740b:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:164
				continue;
   2740d:	e9 ad 00 00 00       	jmp    274bf <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:166
			}
			if( *format == 'X' ) {
   27412:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27415:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27418:	3c 58                	cmp    al,0x58
   2741a:	75 26                	jne    27442 <print+0x16c>
/home/yogi/src/os/chrisOS/src/printf.c:167
				pc += printi (out, va_arg( args, int ), 16, 0, width, pad, 'A');
   2741c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2741f:	8d 50 04             	lea    edx,[eax+0x4]
   27422:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27425:	8b 00                	mov    eax,DWORD PTR [eax]
   27427:	83 ec 04             	sub    esp,0x4
   2742a:	6a 41                	push   0x41
   2742c:	57                   	push   edi
   2742d:	56                   	push   esi
   2742e:	6a 00                	push   0x0
   27430:	6a 10                	push   0x10
   27432:	50                   	push   eax
   27433:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27436:	e8 a2 fd ff ff       	call   271dd <printi>
   2743b:	83 c4 20             	add    esp,0x20
   2743e:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:168
				continue;
   27440:	eb 7d                	jmp    274bf <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:170
			}
			if( *format == 'u' ) {
   27442:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27445:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27448:	3c 75                	cmp    al,0x75
   2744a:	75 26                	jne    27472 <print+0x19c>
/home/yogi/src/os/chrisOS/src/printf.c:171
				pc += printi (out, va_arg( args, int ), 10, 0, width, pad, 'a');
   2744c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2744f:	8d 50 04             	lea    edx,[eax+0x4]
   27452:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27455:	8b 00                	mov    eax,DWORD PTR [eax]
   27457:	83 ec 04             	sub    esp,0x4
   2745a:	6a 61                	push   0x61
   2745c:	57                   	push   edi
   2745d:	56                   	push   esi
   2745e:	6a 00                	push   0x0
   27460:	6a 0a                	push   0xa
   27462:	50                   	push   eax
   27463:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27466:	e8 72 fd ff ff       	call   271dd <printi>
   2746b:	83 c4 20             	add    esp,0x20
   2746e:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:172
				continue;
   27470:	eb 4d                	jmp    274bf <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:174
			}
			if( *format == 'c' ) {
   27472:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27475:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27478:	3c 63                	cmp    al,0x63
   2747a:	75 43                	jne    274bf <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:176
				/* char are converted to int then pushed on the stack */
				scr[0] = (char)va_arg( args, int );
   2747c:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   2747f:	8d 50 04             	lea    edx,[eax+0x4]
   27482:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   27485:	8b 00                	mov    eax,DWORD PTR [eax]
   27487:	88 45 e6             	mov    BYTE PTR [ebp-0x1a],al
/home/yogi/src/os/chrisOS/src/printf.c:177
				scr[1] = '\0';
   2748a:	c6 45 e7 00          	mov    BYTE PTR [ebp-0x19],0x0
/home/yogi/src/os/chrisOS/src/printf.c:178
				pc += prints (out, scr, width, pad);
   2748e:	57                   	push   edi
   2748f:	56                   	push   esi
   27490:	8d 45 e6             	lea    eax,[ebp-0x1a]
   27493:	50                   	push   eax
   27494:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27497:	e8 6e fc ff ff       	call   2710a <prints>
   2749c:	83 c4 10             	add    esp,0x10
   2749f:	01 c3                	add    ebx,eax
/home/yogi/src/os/chrisOS/src/printf.c:179
				continue;
   274a1:	eb 1c                	jmp    274bf <print+0x1e9>
/home/yogi/src/os/chrisOS/src/printf.c:140
	for (; *format != 0; ++format) {
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
			if (*format == '%') goto out;
   274a3:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:184
				continue;
			}
		}
		else {
		out:
			printchar (out, *format);
   274a4:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   274a7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   274aa:	0f be c0             	movsx  eax,al
   274ad:	83 ec 08             	sub    esp,0x8
   274b0:	50                   	push   eax
   274b1:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   274b4:	e8 17 fc ff ff       	call   270d0 <printchar>
   274b9:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:185
			++pc;
   274bc:	83 c3 01             	add    ebx,0x1
/home/yogi/src/os/chrisOS/src/printf.c:135
{
	register int width, pad;
	register int pc = 0;
	char scr[2];

	for (; *format != 0; ++format) {
   274bf:	83 45 0c 01          	add    DWORD PTR [ebp+0xc],0x1
/home/yogi/src/os/chrisOS/src/printf.c:135 (discriminator 1)
   274c3:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   274c6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   274c9:	84 c0                	test   al,al
   274cb:	0f 85 18 fe ff ff    	jne    272e9 <print+0x13>
   274d1:	eb 01                	jmp    274d4 <print+0x1fe>
/home/yogi/src/os/chrisOS/src/printf.c:139
		if (*format == '%') {
			++format;
			width = pad = 0;
			if (*format == '\0') break;
   274d3:	90                   	nop
/home/yogi/src/os/chrisOS/src/printf.c:188
		out:
			printchar (out, *format);
			++pc;
		}
	}
	if (out) **out = '\0';
   274d4:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   274d8:	74 08                	je     274e2 <print+0x20c>
/home/yogi/src/os/chrisOS/src/printf.c:188 (discriminator 1)
   274da:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   274dd:	8b 00                	mov    eax,DWORD PTR [eax]
   274df:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/printf.c:190
	va_end( args );
	return pc;
   274e2:	89 d8                	mov    eax,ebx
/home/yogi/src/os/chrisOS/src/printf.c:191
}
   274e4:	8d 65 f4             	lea    esp,[ebp-0xc]
   274e7:	5b                   	pop    ebx
   274e8:	5e                   	pop    esi
   274e9:	5f                   	pop    edi
   274ea:	5d                   	pop    ebp
   274eb:	c3                   	ret    

000274ec <printk_valist>:
printk_valist():
/home/yogi/src/os/chrisOS/src/printf.c:194

int printk_valist(const char *format, va_list args)
{
   274ec:	55                   	push   ebp
   274ed:	89 e5                	mov    ebp,esp
   274ef:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/printf.c:195
    return print(0, format, args);
   274f2:	83 ec 04             	sub    esp,0x4
   274f5:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   274f8:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   274fb:	6a 00                	push   0x0
   274fd:	e8 d4 fd ff ff       	call   272d6 <print>
   27502:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:196
}
   27505:	c9                   	leave  
   27506:	c3                   	ret    

00027507 <printk>:
printk():
/home/yogi/src/os/chrisOS/src/printf.c:199

int printk(const char *format, ...)
{
   27507:	55                   	push   ebp
   27508:	89 e5                	mov    ebp,esp
   2750a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:201
        va_list args;
        va_start( args, format );
   2750d:	8d 45 0c             	lea    eax,[ebp+0xc]
   27510:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:202
        return printk_valist(format, args);
   27513:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27516:	83 ec 08             	sub    esp,0x8
   27519:	50                   	push   eax
   2751a:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2751d:	e8 ca ff ff ff       	call   274ec <printk_valist>
   27522:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:203
}
   27525:	c9                   	leave  
   27526:	c3                   	ret    

00027527 <printd>:
printd():
/home/yogi/src/os/chrisOS/src/printf.c:209

#ifdef DEBUG_NONE
int printd() {}
#else
int printd(uint32_t DebugLevel, const char *format, ...)
{
   27527:	55                   	push   ebp
   27528:	89 e5                	mov    ebp,esp
   2752a:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:210
    if ((kDebugLevel & DebugLevel) == DebugLevel)    
   2752d:	a1 78 48 12 00       	mov    eax,ds:0x124878
   27532:	23 45 08             	and    eax,DWORD PTR [ebp+0x8]
   27535:	3b 45 08             	cmp    eax,DWORD PTR [ebp+0x8]
   27538:	75 1a                	jne    27554 <printd+0x2d>
/home/yogi/src/os/chrisOS/src/printf.c:214
    {
        va_list args;

        va_start( args, format );
   2753a:	8d 45 10             	lea    eax,[ebp+0x10]
   2753d:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:220
//        if (++printDLineCount==SYS_VGA_HEIGHT-1)
//        {
//            pauseDisplay(false);
//            printDLineCount=0;
//        }
        return printk_valist(format, args);
   27540:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27543:	83 ec 08             	sub    esp,0x8
   27546:	50                   	push   eax
   27547:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   2754a:	e8 9d ff ff ff       	call   274ec <printk_valist>
   2754f:	83 c4 10             	add    esp,0x10
   27552:	eb 05                	jmp    27559 <printd+0x32>
/home/yogi/src/os/chrisOS/src/printf.c:222
    }
    return 0;
   27554:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/printf.c:223 (discriminator 1)
}
   27559:	c9                   	leave  
   2755a:	c3                   	ret    

0002755b <sprintf>:
sprintf():
/home/yogi/src/os/chrisOS/src/printf.c:227
#endif

int sprintf(char *out, const char *format, ...)
{
   2755b:	55                   	push   ebp
   2755c:	89 e5                	mov    ebp,esp
   2755e:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/printf.c:230
        va_list args;
        
        va_start( args, format );
   27561:	8d 45 10             	lea    eax,[ebp+0x10]
   27564:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/printf.c:231
        return print( &out, format, args );
   27567:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   2756a:	83 ec 04             	sub    esp,0x4
   2756d:	50                   	push   eax
   2756e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27571:	8d 45 08             	lea    eax,[ebp+0x8]
   27574:	50                   	push   eax
   27575:	e8 5c fd ff ff       	call   272d6 <print>
   2757a:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/printf.c:232
}
   2757d:	c9                   	leave  
   2757e:	c3                   	ret    
   2757f:	90                   	nop

00027580 <strcat>:
strcat():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:30
   #endif
   
   /* Append SRC on the end of DEST.  */
   char *
   STRCAT (char *dest, const char *src)
   {
   27580:	55                   	push   ebp
   27581:	89 e5                	mov    ebp,esp
   27583:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/strcat.c:31
     strcpy (dest + strlen (dest), src);
   27586:	83 ec 0c             	sub    esp,0xc
   27589:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   2758c:	e8 47 01 00 00       	call   276d8 <strlen>
   27591:	83 c4 10             	add    esp,0x10
   27594:	89 c2                	mov    edx,eax
   27596:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27599:	01 d0                	add    eax,edx
   2759b:	83 ec 08             	sub    esp,0x8
   2759e:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   275a1:	50                   	push   eax
   275a2:	e8 c1 00 00 00       	call   27668 <strcpy>
   275a7:	83 c4 10             	add    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:32
     return dest;
   275aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcat.c:33
   }
   275ad:	c9                   	leave  
   275ae:	c3                   	ret    

000275af <concatenate>:
concatenate():
/home/yogi/src/os/chrisOS/src/strings/strcat.c:35

   void concatenate(char p[], char q[]) {
   275af:	55                   	push   ebp
   275b0:	89 e5                	mov    ebp,esp
   275b2:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcat.c:38
   int c, d;
 
   c = 0;
   275b5:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
 
   while (p[c] != '\0') {
   275bc:	eb 04                	jmp    275c2 <concatenate+0x13>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:41
      c++;  	
   275be:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:40
   void concatenate(char p[], char q[]) {
   int c, d;
 
   c = 0;
 
   while (p[c] != '\0') {
   275c2:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   275c5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   275c8:	01 d0                	add    eax,edx
   275ca:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275cd:	84 c0                	test   al,al
   275cf:	75 ed                	jne    275be <concatenate+0xf>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:44
      c++;  	
   }
 
   d = 0;
   275d1:	c7 45 f8 00 00 00 00 	mov    DWORD PTR [ebp-0x8],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
 
   while (q[d] != '\0') {
   275d8:	eb 1d                	jmp    275f7 <concatenate+0x48>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:47
      p[c] = q[d];
   275da:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   275dd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   275e0:	01 c2                	add    edx,eax
   275e2:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   275e5:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   275e8:	01 c8                	add    eax,ecx
   275ea:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   275ed:	88 02                	mov    BYTE PTR [edx],al
/home/yogi/src/os/chrisOS/src/strings/strcat.c:48
      d++;
   275ef:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:49
      c++;	
   275f3:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strcat.c:46
      c++;  	
   }
 
   d = 0;
 
   while (q[d] != '\0') {
   275f7:	8b 55 f8             	mov    edx,DWORD PTR [ebp-0x8]
   275fa:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   275fd:	01 d0                	add    eax,edx
   275ff:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27602:	84 c0                	test   al,al
   27604:	75 d4                	jne    275da <concatenate+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strcat.c:52
      p[c] = q[d];
      d++;
      c++;	
   }
 
   p[c] = '\0';
   27606:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27609:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2760c:	01 d0                	add    eax,edx
   2760e:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strcat.c:53
   27611:	90                   	nop
   27612:	c9                   	leave  
   27613:	c3                   	ret    

00027614 <strcmp>:
strcmp():
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:25

/* Compare S1 and S2, returning less than, equal to or
   greater than zero if S1 is lexicographically less than,
   equal to or greater than S2.  */
int strcmp (const char *p1, const char *p2)
{
   27614:	55                   	push   ebp
   27615:	89 e5                	mov    ebp,esp
   27617:	56                   	push   esi
   27618:	53                   	push   ebx
   27619:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:26
  register const unsigned char *s1 = (const unsigned char *) p1;
   2761c:	8b 5d 08             	mov    ebx,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:27
  register const unsigned char *s2 = (const unsigned char *) p2;
   2761f:	8b 75 0c             	mov    esi,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:32
  unsigned char c1, c2;

  do
    {
      c1 = (unsigned char) *s1++;
   27622:	89 d8                	mov    eax,ebx
   27624:	8d 58 01             	lea    ebx,[eax+0x1]
   27627:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2762a:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:33
      c2 = (unsigned char) *s2++;
   2762d:	89 f0                	mov    eax,esi
   2762f:	8d 70 01             	lea    esi,[eax+0x1]
   27632:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27635:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:34
      if (c1 == '\0')
   27638:	80 7d f7 00          	cmp    BYTE PTR [ebp-0x9],0x0
   2763c:	75 0e                	jne    2764c <strcmp+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:35
	return c1 - c2;
   2763e:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   27642:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27646:	29 c2                	sub    edx,eax
   27648:	89 d0                	mov    eax,edx
   2764a:	eb 15                	jmp    27661 <strcmp+0x4d>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:37
    }
  while (c1 == c2);
   2764c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27650:	3a 45 f6             	cmp    al,BYTE PTR [ebp-0xa]
   27653:	74 cd                	je     27622 <strcmp+0xe>
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:39

  return c1 - c2;
   27655:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   27659:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   2765d:	29 c2                	sub    edx,eax
   2765f:	89 d0                	mov    eax,edx
/home/yogi/src/os/chrisOS/src/strings/strcmp.c:40
}
   27661:	83 c4 10             	add    esp,0x10
   27664:	5b                   	pop    ebx
   27665:	5e                   	pop    esi
   27666:	5d                   	pop    ebp
   27667:	c3                   	ret    

00027668 <strcpy>:
strcpy():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:5
#include "strings.h"

char *
strcpy(char *s1, const char *s2)
{
   27668:	55                   	push   ebp
   27669:	89 e5                	mov    ebp,esp
   2766b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:6
    char *s = s1;
   2766e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27671:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7
    while ((*s++ = *s2++) != 0)
   27674:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:7 (discriminator 1)
   27675:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27678:	8d 50 01             	lea    edx,[eax+0x1]
   2767b:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   2767e:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27681:	8d 4a 01             	lea    ecx,[edx+0x1]
   27684:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   27687:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   2768a:	88 10                	mov    BYTE PTR [eax],dl
   2768c:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2768f:	84 c0                	test   al,al
   27691:	75 e2                	jne    27675 <strcpy+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:9
	;
    return (s1);
   27693:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:10
}
   27696:	c9                   	leave  
   27697:	c3                   	ret    

00027698 <strcpyc>:
strcpyc():
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:14

char *
strcpyc(char *s1, const char *s2, unsigned count)
{
   27698:	55                   	push   ebp
   27699:	89 e5                	mov    ebp,esp
   2769b:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:15
    char *s = s1;
   2769e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   276a1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16
    while ((*s++ = *s2++) != 0 && count-->0)
   276a4:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 2)
   276a5:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   276a8:	8d 50 01             	lea    edx,[eax+0x1]
   276ab:	89 55 fc             	mov    DWORD PTR [ebp-0x4],edx
   276ae:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   276b1:	8d 4a 01             	lea    ecx,[edx+0x1]
   276b4:	89 4d 0c             	mov    DWORD PTR [ebp+0xc],ecx
   276b7:	0f b6 12             	movzx  edx,BYTE PTR [edx]
   276ba:	88 10                	mov    BYTE PTR [eax],dl
   276bc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276bf:	84 c0                	test   al,al
   276c1:	74 0d                	je     276d0 <strcpyc+0x38>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:16 (discriminator 1)
   276c3:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   276c6:	8d 50 ff             	lea    edx,[eax-0x1]
   276c9:	89 55 10             	mov    DWORD PTR [ebp+0x10],edx
   276cc:	85 c0                	test   eax,eax
   276ce:	75 d5                	jne    276a5 <strcpyc+0xd>
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:18
	;
    return (s1);
   276d0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strcpy.c:19
}
   276d3:	c9                   	leave  
   276d4:	c3                   	ret    
   276d5:	66 90                	xchg   ax,ax
   276d7:	90                   	nop

000276d8 <strlen>:
strlen():
/home/yogi/src/os/chrisOS/src/strings/strlen.c:3
#include <stddef.h>

size_t strlen(const char* str) {
   276d8:	55                   	push   ebp
   276d9:	89 e5                	mov    ebp,esp
   276db:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/strings/strlen.c:4
          size_t ret = 0;
   276de:	c7 45 fc 00 00 00 00 	mov    DWORD PTR [ebp-0x4],0x0
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
        while ( str[ret] != 0 )
   276e5:	eb 04                	jmp    276eb <strlen+0x13>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:6
                ret++;
   276e7:	83 45 fc 01          	add    DWORD PTR [ebp-0x4],0x1
/home/yogi/src/os/chrisOS/src/strings/strlen.c:5
#include <stddef.h>

size_t strlen(const char* str) {
          size_t ret = 0;
        while ( str[ret] != 0 )
   276eb:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   276ee:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   276f1:	01 d0                	add    eax,edx
   276f3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   276f6:	84 c0                	test   al,al
   276f8:	75 ed                	jne    276e7 <strlen+0xf>
/home/yogi/src/os/chrisOS/src/strings/strlen.c:7
                ret++;
        return ret;
   276fa:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
/home/yogi/src/os/chrisOS/src/strings/strlen.c:8
}
   276fd:	c9                   	leave  
   276fe:	c3                   	ret    
   276ff:	90                   	nop

00027700 <strtoul>:
strtoul():
/home/yogi/src/os/chrisOS/src/strings/stroul.c:60
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
unsigned long
strtoul(const char *nptr, char **endptr, register int base)
{
   27700:	55                   	push   ebp
   27701:	89 e5                	mov    ebp,esp
   27703:	57                   	push   edi
   27704:	56                   	push   esi
   27705:	53                   	push   ebx
   27706:	83 ec 08             	sub    esp,0x8
/home/yogi/src/os/chrisOS/src/strings/stroul.c:61
	register const char *s = nptr;
   27709:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:65
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   2770c:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:71 (discriminator 1)

	/*
	 * See strtol for comments as to the logic used.
	 */
	do {
		c = *s++;
   27713:	89 f0                	mov    eax,esi
   27715:	8d 70 01             	lea    esi,[eax+0x1]
   27718:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   2771b:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:72 (discriminator 1)
	} while (c==' ');
   2771e:	83 fb 20             	cmp    ebx,0x20
   27721:	74 f0                	je     27713 <strtoul+0x13>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:73
	if (c == '-') {
   27723:	83 fb 2d             	cmp    ebx,0x2d
   27726:	75 14                	jne    2773c <strtoul+0x3c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:74
		neg = 1;
   27728:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:75
		c = *s++;
   2772f:	89 f0                	mov    eax,esi
   27731:	8d 70 01             	lea    esi,[eax+0x1]
   27734:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27737:	0f be d8             	movsx  ebx,al
   2773a:	eb 10                	jmp    2774c <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:76
	} else if (c == '+')
   2773c:	83 fb 2b             	cmp    ebx,0x2b
   2773f:	75 0b                	jne    2774c <strtoul+0x4c>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:77
		c = *s++;
   27741:	89 f0                	mov    eax,esi
   27743:	8d 70 01             	lea    esi,[eax+0x1]
   27746:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27749:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78
	if ((base == 0 || base == 16) &&
   2774c:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27750:	74 06                	je     27758 <strtoul+0x58>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 2)
   27752:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   27756:	75 26                	jne    2777e <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:78 (discriminator 3)
   27758:	83 fb 30             	cmp    ebx,0x30
   2775b:	75 21                	jne    2777e <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2775d:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27760:	3c 78                	cmp    al,0x78
   27762:	74 07                	je     2776b <strtoul+0x6b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:79 (discriminator 1)
   27764:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   27767:	3c 58                	cmp    al,0x58
   27769:	75 13                	jne    2777e <strtoul+0x7e>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:80
		c = s[1];
   2776b:	8d 46 01             	lea    eax,[esi+0x1]
   2776e:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27771:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:81
		s += 2;
   27774:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/stroul.c:82
		base = 16;
   27777:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/stroul.c:84
	}
	if (base == 0)
   2777e:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   27782:	75 14                	jne    27798 <strtoul+0x98>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85
		base = c == '0' ? 8 : 10;
   27784:	83 fb 30             	cmp    ebx,0x30
   27787:	75 07                	jne    27790 <strtoul+0x90>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 1)
   27789:	b8 08 00 00 00       	mov    eax,0x8
   2778e:	eb 05                	jmp    27795 <strtoul+0x95>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 2)
   27790:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/stroul.c:85 (discriminator 4)
   27795:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:86
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
   27798:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   2779b:	b8 ff ff ff ff       	mov    eax,0xffffffff
   277a0:	ba 00 00 00 00       	mov    edx,0x0
   277a5:	f7 f1                	div    ecx
   277a7:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:87
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
   277aa:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   277ad:	b8 ff ff ff ff       	mov    eax,0xffffffff
   277b2:	ba 00 00 00 00       	mov    edx,0x0
   277b7:	f7 f1                	div    ecx
   277b9:	89 d0                	mov    eax,edx
   277bb:	89 c2                	mov    edx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	for (acc = 0, any = 0;; c = *s++) {
   277bd:	bf 00 00 00 00       	mov    edi,0x0
   277c2:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/stroul.c:89
		if (ISDIGIT(c))
   277c7:	8d 43 d0             	lea    eax,[ebx-0x30]
   277ca:	83 f8 09             	cmp    eax,0x9
   277cd:	77 05                	ja     277d4 <strtoul+0xd4>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:90
			c -= '0';
   277cf:	83 eb 30             	sub    ebx,0x30
   277d2:	eb 25                	jmp    277f9 <strtoul+0xf9>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:91
		else if (ISALPHA(c))
   277d4:	89 d8                	mov    eax,ebx
   277d6:	83 c8 20             	or     eax,0x20
   277d9:	83 e8 61             	sub    eax,0x61
   277dc:	83 f8 19             	cmp    eax,0x19
   277df:	77 56                	ja     27837 <strtoul+0x137>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   277e1:	83 fb 40             	cmp    ebx,0x40
   277e4:	7e 0c                	jle    277f2 <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 1)
   277e6:	83 fb 5a             	cmp    ebx,0x5a
   277e9:	7f 07                	jg     277f2 <strtoul+0xf2>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 3)
   277eb:	b8 37 00 00 00       	mov    eax,0x37
   277f0:	eb 05                	jmp    277f7 <strtoul+0xf7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 4)
   277f2:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/stroul.c:92 (discriminator 6)
   277f7:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:95
		else
			break;
		if (c >= base)
   277f9:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   277fc:	7d 3c                	jge    2783a <strtoul+0x13a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   277fe:	89 c8                	mov    eax,ecx
   27800:	85 c0                	test   eax,eax
   27802:	78 10                	js     27814 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 1)
   27804:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   27807:	77 0b                	ja     27814 <strtoul+0x114>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 2)
   27809:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   2780c:	75 0d                	jne    2781b <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:97 (discriminator 3)
   2780e:	89 d0                	mov    eax,edx
   27810:	39 c3                	cmp    ebx,eax
   27812:	7e 07                	jle    2781b <strtoul+0x11b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:98
			any = -1;
   27814:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   27819:	eb 0f                	jmp    2782a <strtoul+0x12a>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:100
		else {
			any = 1;
   2781b:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/stroul.c:101
			acc *= base;
   27820:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   27823:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:102
			acc += c;
   27826:	89 d8                	mov    eax,ebx
   27828:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:88
	}
	if (base == 0)
		base = c == '0' ? 8 : 10;
	cutoff = (unsigned long)ULONG_MAX / (unsigned long)base;
	cutlim = (unsigned long)ULONG_MAX % (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   2782a:	89 f0                	mov    eax,esi
   2782c:	8d 70 01             	lea    esi,[eax+0x1]
   2782f:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27832:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/stroul.c:104
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   27835:	eb 90                	jmp    277c7 <strtoul+0xc7>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:94
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   27837:	90                   	nop
   27838:	eb 01                	jmp    2783b <strtoul+0x13b>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:96
		if (c >= base)
			break;
   2783a:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/stroul.c:105
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   2783b:	89 c8                	mov    eax,ecx
   2783d:	85 c0                	test   eax,eax
   2783f:	79 07                	jns    27848 <strtoul+0x148>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:106
		acc = ULONG_MAX;
   27841:	bf ff ff ff ff       	mov    edi,0xffffffff
   27846:	eb 08                	jmp    27850 <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:107
	} else if (neg)
   27848:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   2784c:	74 02                	je     27850 <strtoul+0x150>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:108
		acc = -acc;
   2784e:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:109
	if (endptr != 0)
   27850:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   27854:	74 13                	je     27869 <strtoul+0x169>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110
		*endptr = (char *) (any ? s - 1 : nptr);
   27856:	89 c8                	mov    eax,ecx
   27858:	85 c0                	test   eax,eax
   2785a:	74 05                	je     27861 <strtoul+0x161>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 1)
   2785c:	8d 46 ff             	lea    eax,[esi-0x1]
   2785f:	eb 03                	jmp    27864 <strtoul+0x164>
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 2)
   27861:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/stroul.c:110 (discriminator 4)
   27864:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27867:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/stroul.c:111
	return (acc);
   27869:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/stroul.c:112
}
   2786b:	83 c4 08             	add    esp,0x8
   2786e:	5b                   	pop    ebx
   2786f:	5e                   	pop    esi
   27870:	5f                   	pop    edi
   27871:	5d                   	pop    ebp
   27872:	c3                   	ret    
   27873:	90                   	nop

00027874 <strleft>:
strleft():
/home/yogi/src/os/chrisOS/src/strings/strparts.c:2
char* strleft(char* val, int cnt)
{
   27874:	55                   	push   ebp
   27875:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/strings/strparts.c:3
    val[cnt]='\0';
   27877:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   2787a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2787d:	01 d0                	add    eax,edx
   2787f:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strparts.c:4
    return val;
   27882:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strparts.c:5
}
   27885:	5d                   	pop    ebp
   27886:	c3                   	ret    
   27887:	90                   	nop

00027888 <strtol>:
strtol():
/home/yogi/src/os/chrisOS/src/strings/strtol.c:88
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long
strtol(const char *nptr, char **endptr, register int base)
{
   27888:	55                   	push   ebp
   27889:	89 e5                	mov    ebp,esp
   2788b:	57                   	push   edi
   2788c:	56                   	push   esi
   2788d:	53                   	push   ebx
   2788e:	83 ec 0c             	sub    esp,0xc
/home/yogi/src/os/chrisOS/src/strings/strtol.c:89
	register const char *s = nptr;
   27891:	8b 75 08             	mov    esi,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:93
	register unsigned long acc;
	register int c;
	register unsigned long cutoff;
	register int neg = 0, any, cutlim;
   27894:	c7 45 f0 00 00 00 00 	mov    DWORD PTR [ebp-0x10],0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:101 (discriminator 1)
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   2789b:	89 f0                	mov    eax,esi
   2789d:	8d 70 01             	lea    esi,[eax+0x1]
   278a0:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   278a3:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:102 (discriminator 1)
	} while (c==' ');
   278a6:	83 fb 20             	cmp    ebx,0x20
   278a9:	74 f0                	je     2789b <strtol+0x13>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:103
	if (c == '-') {
   278ab:	83 fb 2d             	cmp    ebx,0x2d
   278ae:	75 14                	jne    278c4 <strtol+0x3c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:104
		neg = 1;
   278b0:	c7 45 f0 01 00 00 00 	mov    DWORD PTR [ebp-0x10],0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:105
		c = *s++;
   278b7:	89 f0                	mov    eax,esi
   278b9:	8d 70 01             	lea    esi,[eax+0x1]
   278bc:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   278bf:	0f be d8             	movsx  ebx,al
   278c2:	eb 10                	jmp    278d4 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:106
	} else if (c == '+')
   278c4:	83 fb 2b             	cmp    ebx,0x2b
   278c7:	75 0b                	jne    278d4 <strtol+0x4c>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:107
		c = *s++;
   278c9:	89 f0                	mov    eax,esi
   278cb:	8d 70 01             	lea    esi,[eax+0x1]
   278ce:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   278d1:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108
	if ((base == 0 || base == 16) &&
   278d4:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   278d8:	74 06                	je     278e0 <strtol+0x58>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 2)
   278da:	83 7d 10 10          	cmp    DWORD PTR [ebp+0x10],0x10
   278de:	75 26                	jne    27906 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:108 (discriminator 3)
   278e0:	83 fb 30             	cmp    ebx,0x30
   278e3:	75 21                	jne    27906 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109
	    c == '0' && (*s == 'x' || *s == 'X')) {
   278e5:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   278e8:	3c 78                	cmp    al,0x78
   278ea:	74 07                	je     278f3 <strtol+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:109 (discriminator 1)
   278ec:	0f b6 06             	movzx  eax,BYTE PTR [esi]
   278ef:	3c 58                	cmp    al,0x58
   278f1:	75 13                	jne    27906 <strtol+0x7e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:110
		c = s[1];
   278f3:	8d 46 01             	lea    eax,[esi+0x1]
   278f6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   278f9:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:111
		s += 2;
   278fc:	83 c6 02             	add    esi,0x2
/home/yogi/src/os/chrisOS/src/strings/strtol.c:112
		base = 16;
   278ff:	c7 45 10 10 00 00 00 	mov    DWORD PTR [ebp+0x10],0x10
/home/yogi/src/os/chrisOS/src/strings/strtol.c:114
	}
	if (base == 0)
   27906:	83 7d 10 00          	cmp    DWORD PTR [ebp+0x10],0x0
   2790a:	75 14                	jne    27920 <strtol+0x98>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115
		base = c == '0' ? 8 : 10;
   2790c:	83 fb 30             	cmp    ebx,0x30
   2790f:	75 07                	jne    27918 <strtol+0x90>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 1)
   27911:	b8 08 00 00 00       	mov    eax,0x8
   27916:	eb 05                	jmp    2791d <strtol+0x95>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 2)
   27918:	b8 0a 00 00 00       	mov    eax,0xa
/home/yogi/src/os/chrisOS/src/strings/strtol.c:115 (discriminator 4)
   2791d:	89 45 10             	mov    DWORD PTR [ebp+0x10],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   27920:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   27924:	74 07                	je     2792d <strtol+0xa5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 1)
   27926:	b8 00 00 00 80       	mov    eax,0x80000000
   2792b:	eb 05                	jmp    27932 <strtol+0xaa>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:134 (discriminator 2)
   2792d:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:135 (discriminator 4)
	cutlim = cutoff % (unsigned long)base;
   27932:	8b 4d 10             	mov    ecx,DWORD PTR [ebp+0x10]
   27935:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
   27938:	ba 00 00 00 00       	mov    edx,0x0
   2793d:	f7 f1                	div    ecx
   2793f:	89 d1                	mov    ecx,edx
   27941:	89 c8                	mov    eax,ecx
   27943:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:136 (discriminator 4)
	cutoff /= (unsigned long)base;
   27946:	8b 7d 10             	mov    edi,DWORD PTR [ebp+0x10]
   27949:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2794c:	ba 00 00 00 00       	mov    edx,0x0
   27951:	f7 f7                	div    edi
   27953:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137 (discriminator 4)
	for (acc = 0, any = 0;; c = *s++) {
   27956:	bf 00 00 00 00       	mov    edi,0x0
   2795b:	b9 00 00 00 00       	mov    ecx,0x0
/home/yogi/src/os/chrisOS/src/strings/strtol.c:138
		if (ISDIGIT(c))
   27960:	8d 43 d0             	lea    eax,[ebx-0x30]
   27963:	83 f8 09             	cmp    eax,0x9
   27966:	77 05                	ja     2796d <strtol+0xe5>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:139
			c -= '0';
   27968:	83 eb 30             	sub    ebx,0x30
   2796b:	eb 25                	jmp    27992 <strtol+0x10a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:140
		else if (ISALPHA(c))
   2796d:	89 d8                	mov    eax,ebx
   2796f:	83 c8 20             	or     eax,0x20
   27972:	83 e8 61             	sub    eax,0x61
   27975:	83 f8 19             	cmp    eax,0x19
   27978:	77 55                	ja     279cf <strtol+0x147>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
   2797a:	83 fb 40             	cmp    ebx,0x40
   2797d:	7e 0c                	jle    2798b <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 1)
   2797f:	83 fb 5a             	cmp    ebx,0x5a
   27982:	7f 07                	jg     2798b <strtol+0x103>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 3)
   27984:	b8 37 00 00 00       	mov    eax,0x37
   27989:	eb 05                	jmp    27990 <strtol+0x108>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 4)
   2798b:	b8 57 00 00 00       	mov    eax,0x57
/home/yogi/src/os/chrisOS/src/strings/strtol.c:141 (discriminator 6)
   27990:	29 c3                	sub    ebx,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:144
		else
			break;
		if (c >= base)
   27992:	3b 5d 10             	cmp    ebx,DWORD PTR [ebp+0x10]
   27995:	7d 3b                	jge    279d2 <strtol+0x14a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146
			break;
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim))
   27997:	89 c8                	mov    eax,ecx
   27999:	85 c0                	test   eax,eax
   2799b:	78 0f                	js     279ac <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 1)
   2799d:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   279a0:	77 0a                	ja     279ac <strtol+0x124>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 2)
   279a2:	3b 7d ec             	cmp    edi,DWORD PTR [ebp-0x14]
   279a5:	75 0c                	jne    279b3 <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:146 (discriminator 3)
   279a7:	3b 5d e8             	cmp    ebx,DWORD PTR [ebp-0x18]
   279aa:	7e 07                	jle    279b3 <strtol+0x12b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:147
			any = -1;
   279ac:	b9 ff ff ff ff       	mov    ecx,0xffffffff
   279b1:	eb 0f                	jmp    279c2 <strtol+0x13a>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:149
		else {
			any = 1;
   279b3:	b9 01 00 00 00       	mov    ecx,0x1
/home/yogi/src/os/chrisOS/src/strings/strtol.c:150
			acc *= base;
   279b8:	8b 45 10             	mov    eax,DWORD PTR [ebp+0x10]
   279bb:	0f af f8             	imul   edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:151
			acc += c;
   279be:	89 d8                	mov    eax,ebx
   279c0:	01 c7                	add    edi,eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:137
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   279c2:	89 f0                	mov    eax,esi
   279c4:	8d 70 01             	lea    esi,[eax+0x1]
   279c7:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   279ca:	0f be d8             	movsx  ebx,al
/home/yogi/src/os/chrisOS/src/strings/strtol.c:153
		else {
			any = 1;
			acc *= base;
			acc += c;
		}
	}
   279cd:	eb 91                	jmp    27960 <strtol+0xd8>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:143
		if (ISDIGIT(c))
			c -= '0';
		else if (ISALPHA(c))
			c -= ISUPPER(c) ? 'A' - 10 : 'a' - 10;
		else
			break;
   279cf:	90                   	nop
   279d0:	eb 01                	jmp    279d3 <strtol+0x14b>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:145
		if (c >= base)
			break;
   279d2:	90                   	nop
/home/yogi/src/os/chrisOS/src/strings/strtol.c:154
			any = 1;
			acc *= base;
			acc += c;
		}
	}
	if (any < 0) {
   279d3:	89 c8                	mov    eax,ecx
   279d5:	85 c0                	test   eax,eax
   279d7:	79 16                	jns    279ef <strtol+0x167>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155
		acc = neg ? LONG_MIN : LONG_MAX;
   279d9:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   279dd:	74 07                	je     279e6 <strtol+0x15e>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 1)
   279df:	b8 00 00 00 80       	mov    eax,0x80000000
   279e4:	eb 05                	jmp    279eb <strtol+0x163>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 2)
   279e6:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
/home/yogi/src/os/chrisOS/src/strings/strtol.c:155 (discriminator 4)
   279eb:	89 c7                	mov    edi,eax
   279ed:	eb 08                	jmp    279f7 <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:156
	} else if (neg)
   279ef:	83 7d f0 00          	cmp    DWORD PTR [ebp-0x10],0x0
   279f3:	74 02                	je     279f7 <strtol+0x16f>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:157
		acc = -acc;
   279f5:	f7 df                	neg    edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:158
	if (endptr != 0)
   279f7:	83 7d 0c 00          	cmp    DWORD PTR [ebp+0xc],0x0
   279fb:	74 13                	je     27a10 <strtol+0x188>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159
		*endptr = (char *) (any ? s - 1 : nptr);
   279fd:	89 c8                	mov    eax,ecx
   279ff:	85 c0                	test   eax,eax
   27a01:	74 05                	je     27a08 <strtol+0x180>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 1)
   27a03:	8d 46 ff             	lea    eax,[esi-0x1]
   27a06:	eb 03                	jmp    27a0b <strtol+0x183>
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 2)
   27a08:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtol.c:159 (discriminator 4)
   27a0b:	8b 55 0c             	mov    edx,DWORD PTR [ebp+0xc]
   27a0e:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/strings/strtol.c:160
	return (acc);
   27a10:	89 f8                	mov    eax,edi
/home/yogi/src/os/chrisOS/src/strings/strtol.c:161
}
   27a12:	83 c4 0c             	add    esp,0xc
   27a15:	5b                   	pop    ebx
   27a16:	5e                   	pop    esi
   27a17:	5f                   	pop    edi
   27a18:	5d                   	pop    ebp
   27a19:	c3                   	ret    
   27a1a:	66 90                	xchg   ax,ax

00027a1c <strtrim>:
strtrim():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:5
#include "strings.h"

/*FROM: http://codereview.stackexchange.com/questions/20897/trim-function-in-c*/
char * strtrim(char * *pointerToString)
{
   27a1c:	55                   	push   ebp
   27a1d:	89 e5                	mov    ebp,esp
   27a1f:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:6
    uint8_t start=0, length=0;
   27a22:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   27a26:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:9

        // Trim.Start:
        length = strlen(*pointerToString);
   27a2a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a2d:	8b 00                	mov    eax,DWORD PTR [eax]
   27a2f:	83 ec 0c             	sub    esp,0xc
   27a32:	50                   	push   eax
   27a33:	e8 a0 fc ff ff       	call   276d8 <strlen>
   27a38:	83 c4 10             	add    esp,0x10
   27a3b:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10
        while ((*pointerToString)[start]==' ') start++;
   27a3e:	eb 0a                	jmp    27a4a <strtrim+0x2e>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 2)
   27a40:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27a44:	83 c0 01             	add    eax,0x1
   27a47:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:10 (discriminator 1)
   27a4a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a4d:	8b 10                	mov    edx,DWORD PTR [eax]
   27a4f:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27a53:	01 d0                	add    eax,edx
   27a55:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27a58:	3c 20                	cmp    al,0x20
   27a5a:	74 e4                	je     27a40 <strtrim+0x24>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:11
        (*pointerToString) += start;
   27a5c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a5f:	8b 10                	mov    edx,DWORD PTR [eax]
   27a61:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27a65:	01 c2                	add    edx,eax
   27a67:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a6a:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:13

        if (start < length) // Required for empty (ex. "    ") input
   27a6c:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27a70:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   27a73:	73 46                	jae    27abb <strtrim+0x9f>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:16
        {
            // Trim.End:
            uint8_t end = strlen(*pointerToString)-1; // Get string length again (after Trim.Start)
   27a75:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a78:	8b 00                	mov    eax,DWORD PTR [eax]
   27a7a:	83 ec 0c             	sub    esp,0xc
   27a7d:	50                   	push   eax
   27a7e:	e8 55 fc ff ff       	call   276d8 <strlen>
   27a83:	83 c4 10             	add    esp,0x10
   27a86:	83 e8 01             	sub    eax,0x1
   27a89:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17
            while ((*pointerToString)[end]==' ') end--;
   27a8c:	eb 0a                	jmp    27a98 <strtrim+0x7c>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 2)
   27a8e:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27a92:	83 e8 01             	sub    eax,0x1
   27a95:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:17 (discriminator 1)
   27a98:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27a9b:	8b 10                	mov    edx,DWORD PTR [eax]
   27a9d:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27aa1:	01 d0                	add    eax,edx
   27aa3:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27aa6:	3c 20                	cmp    al,0x20
   27aa8:	74 e4                	je     27a8e <strtrim+0x72>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:18
            (*pointerToString)[end+1] = 0;
   27aaa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27aad:	8b 00                	mov    eax,DWORD PTR [eax]
   27aaf:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   27ab3:	83 c2 01             	add    edx,0x1
   27ab6:	01 d0                	add    eax,edx
   27ab8:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:21
        }

    return *pointerToString;
   27abb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27abe:	8b 00                	mov    eax,DWORD PTR [eax]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:22
}
   27ac0:	c9                   	leave  
   27ac1:	c3                   	ret    

00027ac2 <strtrim2>:
strtrim2():
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:25

char * strtrim2(char* pointerToString)
{
   27ac2:	55                   	push   ebp
   27ac3:	89 e5                	mov    ebp,esp
   27ac5:	83 ec 18             	sub    esp,0x18
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:26
    uint8_t start=0, length=0;
   27ac8:	c6 45 f7 00          	mov    BYTE PTR [ebp-0x9],0x0
   27acc:	c6 45 f5 00          	mov    BYTE PTR [ebp-0xb],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:29

        // Trim.Start:
        length = strlen(pointerToString);
   27ad0:	83 ec 0c             	sub    esp,0xc
   27ad3:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27ad6:	e8 fd fb ff ff       	call   276d8 <strlen>
   27adb:	83 c4 10             	add    esp,0x10
   27ade:	88 45 f5             	mov    BYTE PTR [ebp-0xb],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30
        while ((pointerToString)[start]==' ') start++;
   27ae1:	eb 0a                	jmp    27aed <strtrim2+0x2b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 2)
   27ae3:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27ae7:	83 c0 01             	add    eax,0x1
   27aea:	88 45 f7             	mov    BYTE PTR [ebp-0x9],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:30 (discriminator 1)
   27aed:	0f b6 55 f7          	movzx  edx,BYTE PTR [ebp-0x9]
   27af1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27af4:	01 d0                	add    eax,edx
   27af6:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27af9:	3c 20                	cmp    al,0x20
   27afb:	74 e6                	je     27ae3 <strtrim2+0x21>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:31
        (pointerToString) += start;
   27afd:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27b01:	01 45 08             	add    DWORD PTR [ebp+0x8],eax
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:33

        if (start < length) // Required for empty (ex. "    ") input
   27b04:	0f b6 45 f7          	movzx  eax,BYTE PTR [ebp-0x9]
   27b08:	3a 45 f5             	cmp    al,BYTE PTR [ebp-0xb]
   27b0b:	73 3f                	jae    27b4c <strtrim2+0x8a>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:36
        {
            // Trim.End:
            uint8_t end = strlen(pointerToString)-1; // Get string length again (after Trim.Start)
   27b0d:	83 ec 0c             	sub    esp,0xc
   27b10:	ff 75 08             	push   DWORD PTR [ebp+0x8]
   27b13:	e8 c0 fb ff ff       	call   276d8 <strlen>
   27b18:	83 c4 10             	add    esp,0x10
   27b1b:	83 e8 01             	sub    eax,0x1
   27b1e:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37
            while ((pointerToString)[end]==' ') end--;
   27b21:	eb 0a                	jmp    27b2d <strtrim2+0x6b>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 2)
   27b23:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27b27:	83 e8 01             	sub    eax,0x1
   27b2a:	88 45 f6             	mov    BYTE PTR [ebp-0xa],al
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:37 (discriminator 1)
   27b2d:	0f b6 55 f6          	movzx  edx,BYTE PTR [ebp-0xa]
   27b31:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b34:	01 d0                	add    eax,edx
   27b36:	0f b6 00             	movzx  eax,BYTE PTR [eax]
   27b39:	3c 20                	cmp    al,0x20
   27b3b:	74 e6                	je     27b23 <strtrim2+0x61>
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:38
            (pointerToString)[end+1] = 0;
   27b3d:	0f b6 45 f6          	movzx  eax,BYTE PTR [ebp-0xa]
   27b41:	8d 50 01             	lea    edx,[eax+0x1]
   27b44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b47:	01 d0                	add    eax,edx
   27b49:	c6 00 00             	mov    BYTE PTR [eax],0x0
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:41
        }

    return pointerToString;
   27b4c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/strings/strtrim.c:42
}
   27b4f:	c9                   	leave  
   27b50:	c3                   	ret    
   27b51:	66 90                	xchg   ax,ax
   27b53:	90                   	nop

00027b54 <time>:
time():
/home/yogi/src/os/chrisOS/src/time.c:83
  {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31}
};

extern time_t kSystemCurrentTime;
time_t time(time_t* arg)
{
   27b54:	55                   	push   ebp
   27b55:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:84
    *arg = kSystemCurrentTime;
   27b57:	8b 15 cc 47 12 00    	mov    edx,DWORD PTR ds:0x1247cc
   27b5d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b60:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:85
    return kSystemCurrentTime;
   27b62:	a1 cc 47 12 00       	mov    eax,ds:0x1247cc
/home/yogi/src/os/chrisOS/src/time.c:86
}
   27b67:	5d                   	pop    ebp
   27b68:	c3                   	ret    

00027b69 <gmtime_r>:
gmtime_r():
/home/yogi/src/os/chrisOS/src/time.c:88

struct tm *gmtime_r(const time_t *timer, struct tm *tmbuf) {
   27b69:	55                   	push   ebp
   27b6a:	89 e5                	mov    ebp,esp
   27b6c:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:89
  time_t time = *timer;
   27b6f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27b72:	8b 00                	mov    eax,DWORD PTR [eax]
   27b74:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:91
  unsigned long dayclock, dayno;
  int year = EPOCH_YR;
   27b77:	c7 45 f8 b2 07 00 00 	mov    DWORD PTR [ebp-0x8],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:93

  dayclock = (unsigned long) time % SECS_DAY;
   27b7e:	8b 4d f4             	mov    ecx,DWORD PTR [ebp-0xc]
   27b81:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   27b86:	89 c8                	mov    eax,ecx
   27b88:	f7 e2                	mul    edx
   27b8a:	89 d0                	mov    eax,edx
   27b8c:	c1 e8 10             	shr    eax,0x10
   27b8f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   27b92:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27b95:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   27b9b:	29 c1                	sub    ecx,eax
   27b9d:	89 c8                	mov    eax,ecx
   27b9f:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:94
  dayno = (unsigned long) time / SECS_DAY;
   27ba2:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   27ba5:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   27baa:	f7 e2                	mul    edx
   27bac:	89 d0                	mov    eax,edx
   27bae:	c1 e8 10             	shr    eax,0x10
   27bb1:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:96

  tmbuf->tm_sec = dayclock % 60;
   27bb4:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   27bb7:	ba 89 88 88 88       	mov    edx,0x88888889
   27bbc:	89 c8                	mov    eax,ecx
   27bbe:	f7 e2                	mul    edx
   27bc0:	89 d0                	mov    eax,edx
   27bc2:	c1 e8 05             	shr    eax,0x5
   27bc5:	89 c2                	mov    edx,eax
   27bc7:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27bce:	89 c2                	mov    edx,eax
   27bd0:	89 d0                	mov    eax,edx
   27bd2:	c1 e0 04             	shl    eax,0x4
   27bd5:	29 d0                	sub    eax,edx
   27bd7:	29 c1                	sub    ecx,eax
   27bd9:	89 c8                	mov    eax,ecx
   27bdb:	89 c2                	mov    edx,eax
   27bdd:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27be0:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:97
  tmbuf->tm_min = (dayclock % 3600) / 60;
   27be2:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   27be5:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   27bea:	89 c8                	mov    eax,ecx
   27bec:	f7 e2                	mul    edx
   27bee:	89 d0                	mov    eax,edx
   27bf0:	c1 e8 0b             	shr    eax,0xb
   27bf3:	69 c0 10 0e 00 00    	imul   eax,eax,0xe10
   27bf9:	29 c1                	sub    ecx,eax
   27bfb:	89 c8                	mov    eax,ecx
   27bfd:	ba 89 88 88 88       	mov    edx,0x88888889
   27c02:	f7 e2                	mul    edx
   27c04:	89 d0                	mov    eax,edx
   27c06:	c1 e8 05             	shr    eax,0x5
   27c09:	89 c2                	mov    edx,eax
   27c0b:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27c0e:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:98
  tmbuf->tm_hour = dayclock / 3600;
   27c11:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   27c14:	ba c5 b3 a2 91       	mov    edx,0x91a2b3c5
   27c19:	f7 e2                	mul    edx
   27c1b:	89 d0                	mov    eax,edx
   27c1d:	c1 e8 0b             	shr    eax,0xb
   27c20:	89 c2                	mov    edx,eax
   27c22:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27c25:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:99
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
   27c28:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27c2b:	8d 48 04             	lea    ecx,[eax+0x4]
   27c2e:	ba 25 49 92 24       	mov    edx,0x24924925
   27c33:	89 c8                	mov    eax,ecx
   27c35:	f7 e2                	mul    edx
   27c37:	89 c8                	mov    eax,ecx
   27c39:	29 d0                	sub    eax,edx
   27c3b:	d1 e8                	shr    eax,1
   27c3d:	01 d0                	add    eax,edx
   27c3f:	c1 e8 02             	shr    eax,0x2
   27c42:	89 c2                	mov    edx,eax
   27c44:	c1 e2 03             	shl    edx,0x3
   27c47:	29 c2                	sub    edx,eax
   27c49:	89 c8                	mov    eax,ecx
   27c4b:	29 d0                	sub    eax,edx
   27c4d:	89 c2                	mov    edx,eax
   27c4f:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27c52:	89 50 18             	mov    DWORD PTR [eax+0x18],edx
/home/yogi/src/os/chrisOS/src/time.c:100
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   27c55:	eb 66                	jmp    27cbd <gmtime_r+0x154>
/home/yogi/src/os/chrisOS/src/time.c:101
    dayno -= YEARSIZE(year);
   27c57:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27c5a:	83 e0 03             	and    eax,0x3
   27c5d:	85 c0                	test   eax,eax
   27c5f:	75 50                	jne    27cb1 <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 1)
   27c61:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27c64:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27c69:	89 c8                	mov    eax,ecx
   27c6b:	f7 ea                	imul   edx
   27c6d:	c1 fa 05             	sar    edx,0x5
   27c70:	89 c8                	mov    eax,ecx
   27c72:	c1 f8 1f             	sar    eax,0x1f
   27c75:	29 c2                	sub    edx,eax
   27c77:	89 d0                	mov    eax,edx
   27c79:	6b c0 64             	imul   eax,eax,0x64
   27c7c:	29 c1                	sub    ecx,eax
   27c7e:	89 c8                	mov    eax,ecx
   27c80:	85 c0                	test   eax,eax
   27c82:	75 26                	jne    27caa <gmtime_r+0x141>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 4)
   27c84:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27c87:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27c8c:	89 c8                	mov    eax,ecx
   27c8e:	f7 ea                	imul   edx
   27c90:	c1 fa 07             	sar    edx,0x7
   27c93:	89 c8                	mov    eax,ecx
   27c95:	c1 f8 1f             	sar    eax,0x1f
   27c98:	29 c2                	sub    edx,eax
   27c9a:	89 d0                	mov    eax,edx
   27c9c:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27ca2:	29 c1                	sub    ecx,eax
   27ca4:	89 c8                	mov    eax,ecx
   27ca6:	85 c0                	test   eax,eax
   27ca8:	75 07                	jne    27cb1 <gmtime_r+0x148>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 5)
   27caa:	b8 6e 01 00 00       	mov    eax,0x16e
   27caf:	eb 05                	jmp    27cb6 <gmtime_r+0x14d>
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 6)
   27cb1:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:101 (discriminator 8)
   27cb6:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:102 (discriminator 8)
    year++;
   27cb9:	83 45 f8 01          	add    DWORD PTR [ebp-0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:100

  tmbuf->tm_sec = dayclock % 60;
  tmbuf->tm_min = (dayclock % 3600) / 60;
  tmbuf->tm_hour = dayclock / 3600;
  tmbuf->tm_wday = (dayno + 4) % 7; // Day 0 was a thursday
  while (dayno >= (unsigned long) YEARSIZE(year)) {
   27cbd:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27cc0:	83 e0 03             	and    eax,0x3
   27cc3:	85 c0                	test   eax,eax
   27cc5:	75 50                	jne    27d17 <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 1)
   27cc7:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27cca:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27ccf:	89 c8                	mov    eax,ecx
   27cd1:	f7 ea                	imul   edx
   27cd3:	c1 fa 05             	sar    edx,0x5
   27cd6:	89 c8                	mov    eax,ecx
   27cd8:	c1 f8 1f             	sar    eax,0x1f
   27cdb:	29 c2                	sub    edx,eax
   27cdd:	89 d0                	mov    eax,edx
   27cdf:	6b c0 64             	imul   eax,eax,0x64
   27ce2:	29 c1                	sub    ecx,eax
   27ce4:	89 c8                	mov    eax,ecx
   27ce6:	85 c0                	test   eax,eax
   27ce8:	75 26                	jne    27d10 <gmtime_r+0x1a7>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 4)
   27cea:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27ced:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27cf2:	89 c8                	mov    eax,ecx
   27cf4:	f7 ea                	imul   edx
   27cf6:	c1 fa 07             	sar    edx,0x7
   27cf9:	89 c8                	mov    eax,ecx
   27cfb:	c1 f8 1f             	sar    eax,0x1f
   27cfe:	29 c2                	sub    edx,eax
   27d00:	89 d0                	mov    eax,edx
   27d02:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27d08:	29 c1                	sub    ecx,eax
   27d0a:	89 c8                	mov    eax,ecx
   27d0c:	85 c0                	test   eax,eax
   27d0e:	75 07                	jne    27d17 <gmtime_r+0x1ae>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 5)
   27d10:	b8 6e 01 00 00       	mov    eax,0x16e
   27d15:	eb 05                	jmp    27d1c <gmtime_r+0x1b3>
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 6)
   27d17:	b8 6d 01 00 00       	mov    eax,0x16d
/home/yogi/src/os/chrisOS/src/time.c:100 (discriminator 8)
   27d1c:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   27d1f:	0f 86 32 ff ff ff    	jbe    27c57 <gmtime_r+0xee>
/home/yogi/src/os/chrisOS/src/time.c:104
    dayno -= YEARSIZE(year);
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
   27d25:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27d28:	8d 90 94 f8 ff ff    	lea    edx,[eax-0x76c]
   27d2e:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27d31:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:105
  tmbuf->tm_yday = dayno;
   27d34:	8b 55 fc             	mov    edx,DWORD PTR [ebp-0x4]
   27d37:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27d3a:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:106
  tmbuf->tm_mon = 0;
   27d3d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27d40:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:107
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   27d47:	e9 89 00 00 00       	jmp    27dd5 <gmtime_r+0x26c>
/home/yogi/src/os/chrisOS/src/time.c:108
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
   27d4c:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27d4f:	83 e0 03             	and    eax,0x3
   27d52:	85 c0                	test   eax,eax
   27d54:	75 50                	jne    27da6 <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 1)
   27d56:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27d59:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27d5e:	89 c8                	mov    eax,ecx
   27d60:	f7 ea                	imul   edx
   27d62:	c1 fa 05             	sar    edx,0x5
   27d65:	89 c8                	mov    eax,ecx
   27d67:	c1 f8 1f             	sar    eax,0x1f
   27d6a:	29 c2                	sub    edx,eax
   27d6c:	89 d0                	mov    eax,edx
   27d6e:	6b c0 64             	imul   eax,eax,0x64
   27d71:	29 c1                	sub    ecx,eax
   27d73:	89 c8                	mov    eax,ecx
   27d75:	85 c0                	test   eax,eax
   27d77:	75 26                	jne    27d9f <gmtime_r+0x236>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 4)
   27d79:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27d7c:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27d81:	89 c8                	mov    eax,ecx
   27d83:	f7 ea                	imul   edx
   27d85:	c1 fa 07             	sar    edx,0x7
   27d88:	89 c8                	mov    eax,ecx
   27d8a:	c1 f8 1f             	sar    eax,0x1f
   27d8d:	29 c2                	sub    edx,eax
   27d8f:	89 d0                	mov    eax,edx
   27d91:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27d97:	29 c1                	sub    ecx,eax
   27d99:	89 c8                	mov    eax,ecx
   27d9b:	85 c0                	test   eax,eax
   27d9d:	75 07                	jne    27da6 <gmtime_r+0x23d>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 5)
   27d9f:	ba 01 00 00 00       	mov    edx,0x1
   27da4:	eb 05                	jmp    27dab <gmtime_r+0x242>
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 6)
   27da6:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:108 (discriminator 8)
   27dab:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27dae:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27db1:	89 d0                	mov    eax,edx
   27db3:	01 c0                	add    eax,eax
   27db5:	01 d0                	add    eax,edx
   27db7:	c1 e0 02             	shl    eax,0x2
   27dba:	01 c8                	add    eax,ecx
   27dbc:	8b 04 85 80 62 08 00 	mov    eax,DWORD PTR [eax*4+0x86280]
   27dc3:	29 45 fc             	sub    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:109 (discriminator 8)
    tmbuf->tm_mon++;
   27dc6:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27dc9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   27dcc:	8d 50 01             	lea    edx,[eax+0x1]
   27dcf:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27dd2:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:107
    year++;
  }
  tmbuf->tm_year = year - YEAR0;
  tmbuf->tm_yday = dayno;
  tmbuf->tm_mon = 0;
  while (dayno >= (unsigned long) _ytab[LEAPYEAR(year)][tmbuf->tm_mon]) {
   27dd5:	8b 45 f8             	mov    eax,DWORD PTR [ebp-0x8]
   27dd8:	83 e0 03             	and    eax,0x3
   27ddb:	85 c0                	test   eax,eax
   27ddd:	75 50                	jne    27e2f <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 1)
   27ddf:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27de2:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27de7:	89 c8                	mov    eax,ecx
   27de9:	f7 ea                	imul   edx
   27deb:	c1 fa 05             	sar    edx,0x5
   27dee:	89 c8                	mov    eax,ecx
   27df0:	c1 f8 1f             	sar    eax,0x1f
   27df3:	29 c2                	sub    edx,eax
   27df5:	89 d0                	mov    eax,edx
   27df7:	6b c0 64             	imul   eax,eax,0x64
   27dfa:	29 c1                	sub    ecx,eax
   27dfc:	89 c8                	mov    eax,ecx
   27dfe:	85 c0                	test   eax,eax
   27e00:	75 26                	jne    27e28 <gmtime_r+0x2bf>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 4)
   27e02:	8b 4d f8             	mov    ecx,DWORD PTR [ebp-0x8]
   27e05:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   27e0a:	89 c8                	mov    eax,ecx
   27e0c:	f7 ea                	imul   edx
   27e0e:	c1 fa 07             	sar    edx,0x7
   27e11:	89 c8                	mov    eax,ecx
   27e13:	c1 f8 1f             	sar    eax,0x1f
   27e16:	29 c2                	sub    edx,eax
   27e18:	89 d0                	mov    eax,edx
   27e1a:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   27e20:	29 c1                	sub    ecx,eax
   27e22:	89 c8                	mov    eax,ecx
   27e24:	85 c0                	test   eax,eax
   27e26:	75 07                	jne    27e2f <gmtime_r+0x2c6>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 5)
   27e28:	ba 01 00 00 00       	mov    edx,0x1
   27e2d:	eb 05                	jmp    27e34 <gmtime_r+0x2cb>
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 6)
   27e2f:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:107 (discriminator 8)
   27e34:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27e37:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   27e3a:	89 d0                	mov    eax,edx
   27e3c:	01 c0                	add    eax,eax
   27e3e:	01 d0                	add    eax,edx
   27e40:	c1 e0 02             	shl    eax,0x2
   27e43:	01 c8                	add    eax,ecx
   27e45:	8b 04 85 80 62 08 00 	mov    eax,DWORD PTR [eax*4+0x86280]
   27e4c:	3b 45 fc             	cmp    eax,DWORD PTR [ebp-0x4]
   27e4f:	0f 86 f7 fe ff ff    	jbe    27d4c <gmtime_r+0x1e3>
/home/yogi/src/os/chrisOS/src/time.c:111
    dayno -= _ytab[LEAPYEAR(year)][tmbuf->tm_mon];
    tmbuf->tm_mon++;
  }
  tmbuf->tm_mday = dayno + 1;
   27e55:	8b 45 fc             	mov    eax,DWORD PTR [ebp-0x4]
   27e58:	83 c0 01             	add    eax,0x1
   27e5b:	89 c2                	mov    edx,eax
   27e5d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27e60:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:112
  tmbuf->tm_isdst = 0;
   27e63:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   27e66:	c7 40 20 00 00 00 00 	mov    DWORD PTR [eax+0x20],0x0
/home/yogi/src/os/chrisOS/src/time.c:113
  return tmbuf;
   27e6d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
/home/yogi/src/os/chrisOS/src/time.c:114
}
   27e70:	c9                   	leave  
   27e71:	c3                   	ret    

00027e72 <localtime>:
localtime():
/home/yogi/src/os/chrisOS/src/time.c:116

struct tm *localtime(const time_t *timer) {
   27e72:	55                   	push   ebp
   27e73:	89 e5                	mov    ebp,esp
   27e75:	83 ec 30             	sub    esp,0x30
/home/yogi/src/os/chrisOS/src/time.c:120
  time_t t;
  struct tm tmbuf;
  
  t = *timer - kTimeZone;
   27e78:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27e7b:	8b 10                	mov    edx,DWORD PTR [eax]
   27e7d:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
   27e82:	29 c2                	sub    edx,eax
   27e84:	89 d0                	mov    eax,edx
   27e86:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:121
  return gmtime_r(&t, &tmbuf);
   27e89:	8d 45 d0             	lea    eax,[ebp-0x30]
   27e8c:	50                   	push   eax
   27e8d:	8d 45 fc             	lea    eax,[ebp-0x4]
   27e90:	50                   	push   eax
   27e91:	e8 d3 fc ff ff       	call   27b69 <gmtime_r>
   27e96:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:122
}
   27e99:	c9                   	leave  
   27e9a:	c3                   	ret    

00027e9b <localtime_r>:
localtime_r():
/home/yogi/src/os/chrisOS/src/time.c:124

struct tm *localtime_r(const time_t *timer, struct tm *tmbuf) {
   27e9b:	55                   	push   ebp
   27e9c:	89 e5                	mov    ebp,esp
   27e9e:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:127
  time_t t;

  t = *timer - kTimeZone;
   27ea1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ea4:	8b 10                	mov    edx,DWORD PTR [eax]
   27ea6:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
   27eab:	29 c2                	sub    edx,eax
   27ead:	89 d0                	mov    eax,edx
   27eaf:	89 45 fc             	mov    DWORD PTR [ebp-0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:128
  return gmtime_r(&t, tmbuf);
   27eb2:	ff 75 0c             	push   DWORD PTR [ebp+0xc]
   27eb5:	8d 45 fc             	lea    eax,[ebp-0x4]
   27eb8:	50                   	push   eax
   27eb9:	e8 ab fc ff ff       	call   27b69 <gmtime_r>
   27ebe:	83 c4 08             	add    esp,0x8
/home/yogi/src/os/chrisOS/src/time.c:129
}
   27ec1:	c9                   	leave  
   27ec2:	c3                   	ret    

00027ec3 <mktime>:
mktime():
/home/yogi/src/os/chrisOS/src/time.c:131

time_t mktime(struct tm *tmbuf) {
   27ec3:	55                   	push   ebp
   27ec4:	89 e5                	mov    ebp,esp
   27ec6:	56                   	push   esi
   27ec7:	53                   	push   ebx
   27ec8:	83 ec 20             	sub    esp,0x20
/home/yogi/src/os/chrisOS/src/time.c:139
  int yday, month;
  /*unsigned*/ long seconds;
  int overflow;
  long dst;

  tmbuf->tm_min += tmbuf->tm_sec / 60;
   27ecb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ece:	8b 58 04             	mov    ebx,DWORD PTR [eax+0x4]
   27ed1:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ed4:	8b 08                	mov    ecx,DWORD PTR [eax]
   27ed6:	ba 89 88 88 88       	mov    edx,0x88888889
   27edb:	89 c8                	mov    eax,ecx
   27edd:	f7 ea                	imul   edx
   27edf:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27ee2:	c1 f8 05             	sar    eax,0x5
   27ee5:	89 c2                	mov    edx,eax
   27ee7:	89 c8                	mov    eax,ecx
   27ee9:	c1 f8 1f             	sar    eax,0x1f
   27eec:	29 c2                	sub    edx,eax
   27eee:	89 d0                	mov    eax,edx
   27ef0:	8d 14 03             	lea    edx,[ebx+eax*1]
   27ef3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27ef6:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:140
  tmbuf->tm_sec %= 60;
   27ef9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27efc:	8b 08                	mov    ecx,DWORD PTR [eax]
   27efe:	ba 89 88 88 88       	mov    edx,0x88888889
   27f03:	89 c8                	mov    eax,ecx
   27f05:	f7 ea                	imul   edx
   27f07:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27f0a:	c1 f8 05             	sar    eax,0x5
   27f0d:	89 c2                	mov    edx,eax
   27f0f:	89 c8                	mov    eax,ecx
   27f11:	c1 f8 1f             	sar    eax,0x1f
   27f14:	29 c2                	sub    edx,eax
   27f16:	89 d0                	mov    eax,edx
   27f18:	89 c2                	mov    edx,eax
   27f1a:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27f21:	89 c2                	mov    edx,eax
   27f23:	89 d0                	mov    eax,edx
   27f25:	c1 e0 04             	shl    eax,0x4
   27f28:	29 d0                	sub    eax,edx
   27f2a:	29 c1                	sub    ecx,eax
   27f2c:	89 c8                	mov    eax,ecx
   27f2e:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27f31:	89 02                	mov    DWORD PTR [edx],eax
/home/yogi/src/os/chrisOS/src/time.c:141
  if (tmbuf->tm_sec < 0) {
   27f33:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f36:	8b 00                	mov    eax,DWORD PTR [eax]
   27f38:	85 c0                	test   eax,eax
   27f3a:	79 1c                	jns    27f58 <mktime+0x95>
/home/yogi/src/os/chrisOS/src/time.c:142
    tmbuf->tm_sec += 60;
   27f3c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f3f:	8b 00                	mov    eax,DWORD PTR [eax]
   27f41:	8d 50 3c             	lea    edx,[eax+0x3c]
   27f44:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f47:	89 10                	mov    DWORD PTR [eax],edx
/home/yogi/src/os/chrisOS/src/time.c:143
    tmbuf->tm_min--;
   27f49:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f4c:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27f4f:	8d 50 ff             	lea    edx,[eax-0x1]
   27f52:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f55:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:145
  }
  tmbuf->tm_hour += tmbuf->tm_min / 60;
   27f58:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f5b:	8b 58 08             	mov    ebx,DWORD PTR [eax+0x8]
   27f5e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f61:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   27f64:	ba 89 88 88 88       	mov    edx,0x88888889
   27f69:	89 c8                	mov    eax,ecx
   27f6b:	f7 ea                	imul   edx
   27f6d:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27f70:	c1 f8 05             	sar    eax,0x5
   27f73:	89 c2                	mov    edx,eax
   27f75:	89 c8                	mov    eax,ecx
   27f77:	c1 f8 1f             	sar    eax,0x1f
   27f7a:	29 c2                	sub    edx,eax
   27f7c:	89 d0                	mov    eax,edx
   27f7e:	8d 14 03             	lea    edx,[ebx+eax*1]
   27f81:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f84:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:146
  tmbuf->tm_min = tmbuf->tm_min % 60;
   27f87:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27f8a:	8b 48 04             	mov    ecx,DWORD PTR [eax+0x4]
   27f8d:	ba 89 88 88 88       	mov    edx,0x88888889
   27f92:	89 c8                	mov    eax,ecx
   27f94:	f7 ea                	imul   edx
   27f96:	8d 04 0a             	lea    eax,[edx+ecx*1]
   27f99:	c1 f8 05             	sar    eax,0x5
   27f9c:	89 c2                	mov    edx,eax
   27f9e:	89 c8                	mov    eax,ecx
   27fa0:	c1 f8 1f             	sar    eax,0x1f
   27fa3:	29 c2                	sub    edx,eax
   27fa5:	89 d0                	mov    eax,edx
   27fa7:	89 c2                	mov    edx,eax
   27fa9:	8d 04 95 00 00 00 00 	lea    eax,[edx*4+0x0]
   27fb0:	89 c2                	mov    edx,eax
   27fb2:	89 d0                	mov    eax,edx
   27fb4:	c1 e0 04             	shl    eax,0x4
   27fb7:	29 d0                	sub    eax,edx
   27fb9:	29 c1                	sub    ecx,eax
   27fbb:	89 c8                	mov    eax,ecx
   27fbd:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   27fc0:	89 42 04             	mov    DWORD PTR [edx+0x4],eax
/home/yogi/src/os/chrisOS/src/time.c:147
  if (tmbuf->tm_min < 0) {
   27fc3:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27fc6:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27fc9:	85 c0                	test   eax,eax
   27fcb:	79 1e                	jns    27feb <mktime+0x128>
/home/yogi/src/os/chrisOS/src/time.c:148
    tmbuf->tm_min += 60;
   27fcd:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27fd0:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   27fd3:	8d 50 3c             	lea    edx,[eax+0x3c]
   27fd6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27fd9:	89 50 04             	mov    DWORD PTR [eax+0x4],edx
/home/yogi/src/os/chrisOS/src/time.c:149
    tmbuf->tm_hour--;
   27fdc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27fdf:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   27fe2:	8d 50 ff             	lea    edx,[eax-0x1]
   27fe5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27fe8:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:151
  }
  day = tmbuf->tm_hour / 24;
   27feb:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   27fee:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   27ff1:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   27ff6:	89 c8                	mov    eax,ecx
   27ff8:	f7 ea                	imul   edx
   27ffa:	c1 fa 02             	sar    edx,0x2
   27ffd:	89 c8                	mov    eax,ecx
   27fff:	c1 f8 1f             	sar    eax,0x1f
   28002:	29 c2                	sub    edx,eax
   28004:	89 d0                	mov    eax,edx
   28006:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:152
  tmbuf->tm_hour= tmbuf->tm_hour % 24;
   28009:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2800c:	8b 48 08             	mov    ecx,DWORD PTR [eax+0x8]
   2800f:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   28014:	89 c8                	mov    eax,ecx
   28016:	f7 ea                	imul   edx
   28018:	c1 fa 02             	sar    edx,0x2
   2801b:	89 c8                	mov    eax,ecx
   2801d:	c1 f8 1f             	sar    eax,0x1f
   28020:	29 c2                	sub    edx,eax
   28022:	89 d0                	mov    eax,edx
   28024:	01 c0                	add    eax,eax
   28026:	01 d0                	add    eax,edx
   28028:	c1 e0 03             	shl    eax,0x3
   2802b:	29 c1                	sub    ecx,eax
   2802d:	89 ca                	mov    edx,ecx
   2802f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28032:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:153
  if (tmbuf->tm_hour < 0) {
   28035:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28038:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   2803b:	85 c0                	test   eax,eax
   2803d:	79 13                	jns    28052 <mktime+0x18f>
/home/yogi/src/os/chrisOS/src/time.c:154
    tmbuf->tm_hour += 24;
   2803f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28042:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   28045:	8d 50 18             	lea    edx,[eax+0x18]
   28048:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2804b:	89 50 08             	mov    DWORD PTR [eax+0x8],edx
/home/yogi/src/os/chrisOS/src/time.c:155
    day--;
   2804e:	83 6d f4 01          	sub    DWORD PTR [ebp-0xc],0x1
/home/yogi/src/os/chrisOS/src/time.c:157
  }
  tmbuf->tm_year += tmbuf->tm_mon / 12;
   28052:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28055:	8b 58 14             	mov    ebx,DWORD PTR [eax+0x14]
   28058:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2805b:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   2805e:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   28063:	89 c8                	mov    eax,ecx
   28065:	f7 ea                	imul   edx
   28067:	d1 fa                	sar    edx,1
   28069:	89 c8                	mov    eax,ecx
   2806b:	c1 f8 1f             	sar    eax,0x1f
   2806e:	29 c2                	sub    edx,eax
   28070:	89 d0                	mov    eax,edx
   28072:	8d 14 03             	lea    edx,[ebx+eax*1]
   28075:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28078:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:158
  tmbuf->tm_mon %= 12;
   2807b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2807e:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   28081:	ba ab aa aa 2a       	mov    edx,0x2aaaaaab
   28086:	89 c8                	mov    eax,ecx
   28088:	f7 ea                	imul   edx
   2808a:	d1 fa                	sar    edx,1
   2808c:	89 c8                	mov    eax,ecx
   2808e:	c1 f8 1f             	sar    eax,0x1f
   28091:	29 c2                	sub    edx,eax
   28093:	89 d0                	mov    eax,edx
   28095:	01 c0                	add    eax,eax
   28097:	01 d0                	add    eax,edx
   28099:	c1 e0 02             	shl    eax,0x2
   2809c:	29 c1                	sub    ecx,eax
   2809e:	89 ca                	mov    edx,ecx
   280a0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280a3:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:159
  if (tmbuf->tm_mon < 0) {
   280a6:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280a9:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   280ac:	85 c0                	test   eax,eax
   280ae:	79 1e                	jns    280ce <mktime+0x20b>
/home/yogi/src/os/chrisOS/src/time.c:160
    tmbuf->tm_mon += 12;
   280b0:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280b3:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   280b6:	8d 50 0c             	lea    edx,[eax+0xc]
   280b9:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280bc:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
/home/yogi/src/os/chrisOS/src/time.c:161
    tmbuf->tm_year--;
   280bf:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280c2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   280c5:	8d 50 ff             	lea    edx,[eax-0x1]
   280c8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280cb:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:163
  }
  day += (tmbuf->tm_mday - 1);
   280ce:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280d1:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   280d4:	83 e8 01             	sub    eax,0x1
   280d7:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  while (day < 0) {
   280da:	e9 c1 00 00 00       	jmp    281a0 <mktime+0x2dd>
/home/yogi/src/os/chrisOS/src/time.c:165
    if(--tmbuf->tm_mon < 0) {
   280df:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280e2:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   280e5:	8d 50 ff             	lea    edx,[eax-0x1]
   280e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280eb:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   280ee:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280f1:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   280f4:	85 c0                	test   eax,eax
   280f6:	79 19                	jns    28111 <mktime+0x24e>
/home/yogi/src/os/chrisOS/src/time.c:166
      tmbuf->tm_year--;
   280f8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   280fb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   280fe:	8d 50 ff             	lea    edx,[eax-0x1]
   28101:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28104:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:167
      tmbuf->tm_mon = 11;
   28107:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2810a:	c7 40 10 0b 00 00 00 	mov    DWORD PTR [eax+0x10],0xb
/home/yogi/src/os/chrisOS/src/time.c:169
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   28111:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28114:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28117:	83 e0 03             	and    eax,0x3
   2811a:	85 c0                	test   eax,eax
   2811c:	75 62                	jne    28180 <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 1)
   2811e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28121:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28124:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   2812a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2812f:	89 c8                	mov    eax,ecx
   28131:	f7 ea                	imul   edx
   28133:	c1 fa 05             	sar    edx,0x5
   28136:	89 c8                	mov    eax,ecx
   28138:	c1 f8 1f             	sar    eax,0x1f
   2813b:	29 c2                	sub    edx,eax
   2813d:	89 d0                	mov    eax,edx
   2813f:	6b c0 64             	imul   eax,eax,0x64
   28142:	29 c1                	sub    ecx,eax
   28144:	89 c8                	mov    eax,ecx
   28146:	85 c0                	test   eax,eax
   28148:	75 2f                	jne    28179 <mktime+0x2b6>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 4)
   2814a:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2814d:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28150:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   28156:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2815b:	89 c8                	mov    eax,ecx
   2815d:	f7 ea                	imul   edx
   2815f:	c1 fa 07             	sar    edx,0x7
   28162:	89 c8                	mov    eax,ecx
   28164:	c1 f8 1f             	sar    eax,0x1f
   28167:	29 c2                	sub    edx,eax
   28169:	89 d0                	mov    eax,edx
   2816b:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28171:	29 c1                	sub    ecx,eax
   28173:	89 c8                	mov    eax,ecx
   28175:	85 c0                	test   eax,eax
   28177:	75 07                	jne    28180 <mktime+0x2bd>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 5)
   28179:	ba 01 00 00 00       	mov    edx,0x1
   2817e:	eb 05                	jmp    28185 <mktime+0x2c2>
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 6)
   28180:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:169 (discriminator 8)
   28185:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28188:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   2818b:	89 d0                	mov    eax,edx
   2818d:	01 c0                	add    eax,eax
   2818f:	01 d0                	add    eax,edx
   28191:	c1 e0 02             	shl    eax,0x2
   28194:	01 c8                	add    eax,ecx
   28196:	8b 04 85 80 62 08 00 	mov    eax,DWORD PTR [eax*4+0x86280]
   2819d:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:164
  if (tmbuf->tm_mon < 0) {
    tmbuf->tm_mon += 12;
    tmbuf->tm_year--;
  }
  day += (tmbuf->tm_mday - 1);
  while (day < 0) {
   281a0:	83 7d f4 00          	cmp    DWORD PTR [ebp-0xc],0x0
   281a4:	0f 88 35 ff ff ff    	js     280df <mktime+0x21c>
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   281aa:	e9 c2 00 00 00       	jmp    28271 <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:172
    day -= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
   281af:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281b2:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   281b5:	83 e0 03             	and    eax,0x3
   281b8:	85 c0                	test   eax,eax
   281ba:	75 62                	jne    2821e <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 1)
   281bc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281bf:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   281c2:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   281c8:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   281cd:	89 c8                	mov    eax,ecx
   281cf:	f7 ea                	imul   edx
   281d1:	c1 fa 05             	sar    edx,0x5
   281d4:	89 c8                	mov    eax,ecx
   281d6:	c1 f8 1f             	sar    eax,0x1f
   281d9:	29 c2                	sub    edx,eax
   281db:	89 d0                	mov    eax,edx
   281dd:	6b c0 64             	imul   eax,eax,0x64
   281e0:	29 c1                	sub    ecx,eax
   281e2:	89 c8                	mov    eax,ecx
   281e4:	85 c0                	test   eax,eax
   281e6:	75 2f                	jne    28217 <mktime+0x354>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 4)
   281e8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   281eb:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   281ee:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   281f4:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   281f9:	89 c8                	mov    eax,ecx
   281fb:	f7 ea                	imul   edx
   281fd:	c1 fa 07             	sar    edx,0x7
   28200:	89 c8                	mov    eax,ecx
   28202:	c1 f8 1f             	sar    eax,0x1f
   28205:	29 c2                	sub    edx,eax
   28207:	89 d0                	mov    eax,edx
   28209:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2820f:	29 c1                	sub    ecx,eax
   28211:	89 c8                	mov    eax,ecx
   28213:	85 c0                	test   eax,eax
   28215:	75 07                	jne    2821e <mktime+0x35b>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 5)
   28217:	ba 01 00 00 00       	mov    edx,0x1
   2821c:	eb 05                	jmp    28223 <mktime+0x360>
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 6)
   2821e:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:172 (discriminator 8)
   28223:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28226:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   28229:	89 d0                	mov    eax,edx
   2822b:	01 c0                	add    eax,eax
   2822d:	01 d0                	add    eax,edx
   2822f:	c1 e0 02             	shl    eax,0x2
   28232:	01 c8                	add    eax,ecx
   28234:	8b 04 85 80 62 08 00 	mov    eax,DWORD PTR [eax*4+0x86280]
   2823b:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:173 (discriminator 8)
    if (++(tmbuf->tm_mon) == 12) {
   2823e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28241:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28244:	8d 50 01             	lea    edx,[eax+0x1]
   28247:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2824a:	89 50 10             	mov    DWORD PTR [eax+0x10],edx
   2824d:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28250:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   28253:	83 f8 0c             	cmp    eax,0xc
   28256:	75 19                	jne    28271 <mktime+0x3ae>
/home/yogi/src/os/chrisOS/src/time.c:174
      tmbuf->tm_mon = 0;
   28258:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2825b:	c7 40 10 00 00 00 00 	mov    DWORD PTR [eax+0x10],0x0
/home/yogi/src/os/chrisOS/src/time.c:175
      tmbuf->tm_year++;
   28262:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28265:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28268:	8d 50 01             	lea    edx,[eax+0x1]
   2826b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2826e:	89 50 14             	mov    DWORD PTR [eax+0x14],edx
/home/yogi/src/os/chrisOS/src/time.c:171
      tmbuf->tm_year--;
      tmbuf->tm_mon = 11;
    }
    day += _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon];
  }
  while (day >= _ytab[LEAPYEAR(YEAR0 + tmbuf->tm_year)][tmbuf->tm_mon]) {
   28271:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28274:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28277:	83 e0 03             	and    eax,0x3
   2827a:	85 c0                	test   eax,eax
   2827c:	75 62                	jne    282e0 <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 1)
   2827e:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28281:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28284:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   2828a:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2828f:	89 c8                	mov    eax,ecx
   28291:	f7 ea                	imul   edx
   28293:	c1 fa 05             	sar    edx,0x5
   28296:	89 c8                	mov    eax,ecx
   28298:	c1 f8 1f             	sar    eax,0x1f
   2829b:	29 c2                	sub    edx,eax
   2829d:	89 d0                	mov    eax,edx
   2829f:	6b c0 64             	imul   eax,eax,0x64
   282a2:	29 c1                	sub    ecx,eax
   282a4:	89 c8                	mov    eax,ecx
   282a6:	85 c0                	test   eax,eax
   282a8:	75 2f                	jne    282d9 <mktime+0x416>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 4)
   282aa:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282ad:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   282b0:	8d 88 6c 07 00 00    	lea    ecx,[eax+0x76c]
   282b6:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   282bb:	89 c8                	mov    eax,ecx
   282bd:	f7 ea                	imul   edx
   282bf:	c1 fa 07             	sar    edx,0x7
   282c2:	89 c8                	mov    eax,ecx
   282c4:	c1 f8 1f             	sar    eax,0x1f
   282c7:	29 c2                	sub    edx,eax
   282c9:	89 d0                	mov    eax,edx
   282cb:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   282d1:	29 c1                	sub    ecx,eax
   282d3:	89 c8                	mov    eax,ecx
   282d5:	85 c0                	test   eax,eax
   282d7:	75 07                	jne    282e0 <mktime+0x41d>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 5)
   282d9:	ba 01 00 00 00       	mov    edx,0x1
   282de:	eb 05                	jmp    282e5 <mktime+0x422>
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 6)
   282e0:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:171 (discriminator 8)
   282e5:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   282e8:	8b 48 10             	mov    ecx,DWORD PTR [eax+0x10]
   282eb:	89 d0                	mov    eax,edx
   282ed:	01 c0                	add    eax,eax
   282ef:	01 d0                	add    eax,edx
   282f1:	c1 e0 02             	shl    eax,0x2
   282f4:	01 c8                	add    eax,ecx
   282f6:	8b 04 85 80 62 08 00 	mov    eax,DWORD PTR [eax*4+0x86280]
   282fd:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   28300:	0f 8e a9 fe ff ff    	jle    281af <mktime+0x2ec>
/home/yogi/src/os/chrisOS/src/time.c:178
    if (++(tmbuf->tm_mon) == 12) {
      tmbuf->tm_mon = 0;
      tmbuf->tm_year++;
    }
  }
  tmbuf->tm_mday = day + 1;
   28306:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   28309:	8d 50 01             	lea    edx,[eax+0x1]
   2830c:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2830f:	89 50 0c             	mov    DWORD PTR [eax+0xc],edx
/home/yogi/src/os/chrisOS/src/time.c:179
  year = EPOCH_YR;
   28312:	c7 45 e0 b2 07 00 00 	mov    DWORD PTR [ebp-0x20],0x7b2
/home/yogi/src/os/chrisOS/src/time.c:180
  if (tmbuf->tm_year < year - YEAR0) return (time_t) -999;
   28319:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2831c:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   2831f:	8b 55 e0             	mov    edx,DWORD PTR [ebp-0x20]
   28322:	81 ea 6c 07 00 00    	sub    edx,0x76c
   28328:	39 d0                	cmp    eax,edx
   2832a:	7d 0a                	jge    28336 <mktime+0x473>
/home/yogi/src/os/chrisOS/src/time.c:180 (discriminator 1)
   2832c:	b8 19 fc ff ff       	mov    eax,0xfffffc19
   28331:	e9 c0 03 00 00       	jmp    286f6 <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:181
  seconds = 0;
   28336:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
/home/yogi/src/os/chrisOS/src/time.c:182
  day = 0;                      // Means days since day 0 now
   2833d:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:183
  overflow = 0;
   28344:	c7 45 e8 00 00 00 00 	mov    DWORD PTR [ebp-0x18],0x0
/home/yogi/src/os/chrisOS/src/time.c:190
  // Assume that when day becomes negative, there will certainly
  // be overflow on seconds.
  // The check for overflow needs not to be done for leapyears
  // divisible by 400.
  // The code only works when year (1970) is not a leapyear.
  tm_year = tmbuf->tm_year + YEAR0;
   2834b:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2834e:	8b 40 14             	mov    eax,DWORD PTR [eax+0x14]
   28351:	05 6c 07 00 00       	add    eax,0x76c
   28356:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
/home/yogi/src/os/chrisOS/src/time.c:192

  if (TIME_MAX / 365 < tm_year - year) overflow=1;
   28359:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   2835c:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   2835f:	3d 7c c6 59 00       	cmp    eax,0x59c67c
   28364:	7e 07                	jle    2836d <mktime+0x4aa>
/home/yogi/src/os/chrisOS/src/time.c:192 (discriminator 1)
   28366:	c7 45 e8 01 00 00 00 	mov    DWORD PTR [ebp-0x18],0x1
/home/yogi/src/os/chrisOS/src/time.c:193
  day = (tm_year - year) * 365;
   2836d:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28370:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   28373:	69 c0 6d 01 00 00    	imul   eax,eax,0x16d
   28379:	89 45 f4             	mov    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:194
  if (TIME_MAX - day < (tm_year - year) / 4 + 1) overflow|=2;
   2837c:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   28381:	2b 45 f4             	sub    eax,DWORD PTR [ebp-0xc]
   28384:	89 c2                	mov    edx,eax
   28386:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28389:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   2838c:	8d 48 03             	lea    ecx,[eax+0x3]
   2838f:	85 c0                	test   eax,eax
   28391:	0f 48 c1             	cmovs  eax,ecx
   28394:	c1 f8 02             	sar    eax,0x2
   28397:	83 c0 01             	add    eax,0x1
   2839a:	39 c2                	cmp    edx,eax
   2839c:	7d 04                	jge    283a2 <mktime+0x4df>
/home/yogi/src/os/chrisOS/src/time.c:194 (discriminator 1)
   2839e:	83 4d e8 02          	or     DWORD PTR [ebp-0x18],0x2
/home/yogi/src/os/chrisOS/src/time.c:195
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
   283a2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   283a5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   283a8:	8d 50 03             	lea    edx,[eax+0x3]
   283ab:	85 c0                	test   eax,eax
   283ad:	0f 48 c2             	cmovs  eax,edx
   283b0:	c1 f8 02             	sar    eax,0x2
   283b3:	89 c1                	mov    ecx,eax
   283b5:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   283b8:	83 e0 03             	and    eax,0x3
   283bb:	85 c0                	test   eax,eax
   283bd:	74 29                	je     283e8 <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 1)
   283bf:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   283c2:	99                   	cdq    
   283c3:	c1 ea 1e             	shr    edx,0x1e
   283c6:	01 d0                	add    eax,edx
   283c8:	83 e0 03             	and    eax,0x3
   283cb:	29 d0                	sub    eax,edx
   283cd:	89 c3                	mov    ebx,eax
   283cf:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   283d2:	99                   	cdq    
   283d3:	c1 ea 1e             	shr    edx,0x1e
   283d6:	01 d0                	add    eax,edx
   283d8:	83 e0 03             	and    eax,0x3
   283db:	29 d0                	sub    eax,edx
   283dd:	39 c3                	cmp    ebx,eax
   283df:	7d 07                	jge    283e8 <mktime+0x525>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 3)
   283e1:	b8 01 00 00 00       	mov    eax,0x1
   283e6:	eb 05                	jmp    283ed <mktime+0x52a>
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 4)
   283e8:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:195 (discriminator 6)
   283ed:	01 c8                	add    eax,ecx
   283ef:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
   283f2:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   283f5:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   283f8:	89 c1                	mov    ecx,eax
   283fa:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   283ff:	89 c8                	mov    eax,ecx
   28401:	f7 ea                	imul   edx
   28403:	c1 fa 05             	sar    edx,0x5
   28406:	89 c8                	mov    eax,ecx
   28408:	c1 f8 1f             	sar    eax,0x1f
   2840b:	89 d6                	mov    esi,edx
   2840d:	29 c6                	sub    esi,eax
   2840f:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28412:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28417:	89 c8                	mov    eax,ecx
   28419:	f7 ea                	imul   edx
   2841b:	c1 fa 05             	sar    edx,0x5
   2841e:	89 c8                	mov    eax,ecx
   28420:	c1 f8 1f             	sar    eax,0x1f
   28423:	29 c2                	sub    edx,eax
   28425:	89 d0                	mov    eax,edx
   28427:	6b c0 64             	imul   eax,eax,0x64
   2842a:	29 c1                	sub    ecx,eax
   2842c:	89 c8                	mov    eax,ecx
   2842e:	85 c0                	test   eax,eax
   28430:	74 49                	je     2847b <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 1)
   28432:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28435:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   2843a:	89 c8                	mov    eax,ecx
   2843c:	f7 ea                	imul   edx
   2843e:	c1 fa 05             	sar    edx,0x5
   28441:	89 c8                	mov    eax,ecx
   28443:	c1 f8 1f             	sar    eax,0x1f
   28446:	89 d3                	mov    ebx,edx
   28448:	29 c3                	sub    ebx,eax
   2844a:	6b c3 64             	imul   eax,ebx,0x64
   2844d:	89 cb                	mov    ebx,ecx
   2844f:	29 c3                	sub    ebx,eax
   28451:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   28454:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28459:	89 c8                	mov    eax,ecx
   2845b:	f7 ea                	imul   edx
   2845d:	c1 fa 05             	sar    edx,0x5
   28460:	89 c8                	mov    eax,ecx
   28462:	c1 f8 1f             	sar    eax,0x1f
   28465:	29 c2                	sub    edx,eax
   28467:	89 d0                	mov    eax,edx
   28469:	6b c0 64             	imul   eax,eax,0x64
   2846c:	29 c1                	sub    ecx,eax
   2846e:	89 c8                	mov    eax,ecx
   28470:	39 c3                	cmp    ebx,eax
   28472:	7d 07                	jge    2847b <mktime+0x5b8>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 3)
   28474:	b8 01 00 00 00       	mov    eax,0x1
   28479:	eb 05                	jmp    28480 <mktime+0x5bd>
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 4)
   2847b:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:196 (discriminator 6)
   28480:	01 f0                	add    eax,esi
   28482:	29 45 f4             	sub    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);
   28485:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28488:	2b 45 e0             	sub    eax,DWORD PTR [ebp-0x20]
   2848b:	89 c1                	mov    ecx,eax
   2848d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28492:	89 c8                	mov    eax,ecx
   28494:	f7 ea                	imul   edx
   28496:	c1 fa 07             	sar    edx,0x7
   28499:	89 c8                	mov    eax,ecx
   2849b:	c1 f8 1f             	sar    eax,0x1f
   2849e:	89 d6                	mov    esi,edx
   284a0:	29 c6                	sub    esi,eax
   284a2:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   284a5:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   284aa:	89 c8                	mov    eax,ecx
   284ac:	f7 ea                	imul   edx
   284ae:	c1 fa 07             	sar    edx,0x7
   284b1:	89 c8                	mov    eax,ecx
   284b3:	c1 f8 1f             	sar    eax,0x1f
   284b6:	29 c2                	sub    edx,eax
   284b8:	89 d0                	mov    eax,edx
   284ba:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   284c0:	29 c1                	sub    ecx,eax
   284c2:	89 c8                	mov    eax,ecx
   284c4:	85 c0                	test   eax,eax
   284c6:	74 4f                	je     28517 <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 1)
   284c8:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   284cb:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   284d0:	89 c8                	mov    eax,ecx
   284d2:	f7 ea                	imul   edx
   284d4:	c1 fa 07             	sar    edx,0x7
   284d7:	89 c8                	mov    eax,ecx
   284d9:	c1 f8 1f             	sar    eax,0x1f
   284dc:	89 d3                	mov    ebx,edx
   284de:	29 c3                	sub    ebx,eax
   284e0:	69 c3 90 01 00 00    	imul   eax,ebx,0x190
   284e6:	89 cb                	mov    ebx,ecx
   284e8:	29 c3                	sub    ebx,eax
   284ea:	8b 4d e0             	mov    ecx,DWORD PTR [ebp-0x20]
   284ed:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   284f2:	89 c8                	mov    eax,ecx
   284f4:	f7 ea                	imul   edx
   284f6:	c1 fa 07             	sar    edx,0x7
   284f9:	89 c8                	mov    eax,ecx
   284fb:	c1 f8 1f             	sar    eax,0x1f
   284fe:	29 c2                	sub    edx,eax
   28500:	89 d0                	mov    eax,edx
   28502:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   28508:	29 c1                	sub    ecx,eax
   2850a:	89 c8                	mov    eax,ecx
   2850c:	39 c3                	cmp    ebx,eax
   2850e:	7d 07                	jge    28517 <mktime+0x654>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 3)
   28510:	b8 01 00 00 00       	mov    eax,0x1
   28515:	eb 05                	jmp    2851c <mktime+0x659>
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 4)
   28517:	b8 00 00 00 00       	mov    eax,0x0
/home/yogi/src/os/chrisOS/src/time.c:197 (discriminator 6)
   2851c:	01 f0                	add    eax,esi
   2851e:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:199 (discriminator 6)

  yday = month = 0;
   28521:	c7 45 ec 00 00 00 00 	mov    DWORD PTR [ebp-0x14],0x0
   28528:	8b 45 ec             	mov    eax,DWORD PTR [ebp-0x14]
   2852b:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:200 (discriminator 6)
  while (month < tmbuf->tm_mon) {
   2852e:	eb 7b                	jmp    285ab <mktime+0x6e8>
/home/yogi/src/os/chrisOS/src/time.c:201
    yday += _ytab[LEAPYEAR(tm_year)][month];
   28530:	8b 45 d8             	mov    eax,DWORD PTR [ebp-0x28]
   28533:	83 e0 03             	and    eax,0x3
   28536:	85 c0                	test   eax,eax
   28538:	75 50                	jne    2858a <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 1)
   2853a:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   2853d:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28542:	89 c8                	mov    eax,ecx
   28544:	f7 ea                	imul   edx
   28546:	c1 fa 05             	sar    edx,0x5
   28549:	89 c8                	mov    eax,ecx
   2854b:	c1 f8 1f             	sar    eax,0x1f
   2854e:	29 c2                	sub    edx,eax
   28550:	89 d0                	mov    eax,edx
   28552:	6b c0 64             	imul   eax,eax,0x64
   28555:	29 c1                	sub    ecx,eax
   28557:	89 c8                	mov    eax,ecx
   28559:	85 c0                	test   eax,eax
   2855b:	75 26                	jne    28583 <mktime+0x6c0>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 4)
   2855d:	8b 4d d8             	mov    ecx,DWORD PTR [ebp-0x28]
   28560:	ba 1f 85 eb 51       	mov    edx,0x51eb851f
   28565:	89 c8                	mov    eax,ecx
   28567:	f7 ea                	imul   edx
   28569:	c1 fa 07             	sar    edx,0x7
   2856c:	89 c8                	mov    eax,ecx
   2856e:	c1 f8 1f             	sar    eax,0x1f
   28571:	29 c2                	sub    edx,eax
   28573:	89 d0                	mov    eax,edx
   28575:	69 c0 90 01 00 00    	imul   eax,eax,0x190
   2857b:	29 c1                	sub    ecx,eax
   2857d:	89 c8                	mov    eax,ecx
   2857f:	85 c0                	test   eax,eax
   28581:	75 07                	jne    2858a <mktime+0x6c7>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 5)
   28583:	ba 01 00 00 00       	mov    edx,0x1
   28588:	eb 05                	jmp    2858f <mktime+0x6cc>
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 6)
   2858a:	ba 00 00 00 00       	mov    edx,0x0
/home/yogi/src/os/chrisOS/src/time.c:201 (discriminator 8)
   2858f:	89 d0                	mov    eax,edx
   28591:	01 c0                	add    eax,eax
   28593:	01 d0                	add    eax,edx
   28595:	c1 e0 02             	shl    eax,0x2
   28598:	8b 55 ec             	mov    edx,DWORD PTR [ebp-0x14]
   2859b:	01 d0                	add    eax,edx
   2859d:	8b 04 85 80 62 08 00 	mov    eax,DWORD PTR [eax*4+0x86280]
   285a4:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:202 (discriminator 8)
    month++;
   285a7:	83 45 ec 01          	add    DWORD PTR [ebp-0x14],0x1
/home/yogi/src/os/chrisOS/src/time.c:200
  day += (tm_year - year) / 4 + ((tm_year % 4) && tm_year % 4 < year % 4);
  day -= (tm_year - year) / 100 + ((tm_year % 100) && tm_year % 100 < year % 100);
  day += (tm_year - year) / 400 + ((tm_year % 400) && tm_year % 400 < year % 400);

  yday = month = 0;
  while (month < tmbuf->tm_mon) {
   285ab:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   285ae:	8b 40 10             	mov    eax,DWORD PTR [eax+0x10]
   285b1:	3b 45 ec             	cmp    eax,DWORD PTR [ebp-0x14]
   285b4:	0f 8f 76 ff ff ff    	jg     28530 <mktime+0x66d>
/home/yogi/src/os/chrisOS/src/time.c:204
    yday += _ytab[LEAPYEAR(tm_year)][month];
    month++;
  }
  yday += (tmbuf->tm_mday - 1);
   285ba:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   285bd:	8b 40 0c             	mov    eax,DWORD PTR [eax+0xc]
   285c0:	83 e8 01             	sub    eax,0x1
   285c3:	01 45 f0             	add    DWORD PTR [ebp-0x10],eax
/home/yogi/src/os/chrisOS/src/time.c:205
  if (day + yday < 0) overflow|=4;
   285c6:	8b 55 f4             	mov    edx,DWORD PTR [ebp-0xc]
   285c9:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   285cc:	01 d0                	add    eax,edx
   285ce:	85 c0                	test   eax,eax
   285d0:	79 04                	jns    285d6 <mktime+0x713>
/home/yogi/src/os/chrisOS/src/time.c:205 (discriminator 1)
   285d2:	83 4d e8 04          	or     DWORD PTR [ebp-0x18],0x4
/home/yogi/src/os/chrisOS/src/time.c:206
  day += yday;
   285d6:	8b 45 f0             	mov    eax,DWORD PTR [ebp-0x10]
   285d9:	01 45 f4             	add    DWORD PTR [ebp-0xc],eax
/home/yogi/src/os/chrisOS/src/time.c:208

  tmbuf->tm_yday = yday;
   285dc:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   285df:	8b 55 f0             	mov    edx,DWORD PTR [ebp-0x10]
   285e2:	89 50 1c             	mov    DWORD PTR [eax+0x1c],edx
/home/yogi/src/os/chrisOS/src/time.c:209
  tmbuf->tm_wday = (day + 4) % 7;               // Day 0 was thursday (4)
   285e5:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   285e8:	8d 48 04             	lea    ecx,[eax+0x4]
   285eb:	ba 93 24 49 92       	mov    edx,0x92492493
   285f0:	89 c8                	mov    eax,ecx
   285f2:	f7 ea                	imul   edx
   285f4:	8d 04 0a             	lea    eax,[edx+ecx*1]
   285f7:	c1 f8 02             	sar    eax,0x2
   285fa:	89 c2                	mov    edx,eax
   285fc:	89 c8                	mov    eax,ecx
   285fe:	c1 f8 1f             	sar    eax,0x1f
   28601:	29 c2                	sub    edx,eax
   28603:	89 d0                	mov    eax,edx
   28605:	89 c2                	mov    edx,eax
   28607:	c1 e2 03             	shl    edx,0x3
   2860a:	29 c2                	sub    edx,eax
   2860c:	89 c8                	mov    eax,ecx
   2860e:	29 d0                	sub    eax,edx
   28610:	8b 55 08             	mov    edx,DWORD PTR [ebp+0x8]
   28613:	89 42 18             	mov    DWORD PTR [edx+0x18],eax
/home/yogi/src/os/chrisOS/src/time.c:211

  seconds = ((tmbuf->tm_hour * 60L) + tmbuf->tm_min) * 60L + tmbuf->tm_sec;
   28616:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28619:	8b 40 08             	mov    eax,DWORD PTR [eax+0x8]
   2861c:	c1 e0 02             	shl    eax,0x2
   2861f:	89 c2                	mov    edx,eax
   28621:	c1 e2 04             	shl    edx,0x4
   28624:	29 c2                	sub    edx,eax
   28626:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28629:	8b 40 04             	mov    eax,DWORD PTR [eax+0x4]
   2862c:	01 d0                	add    eax,edx
   2862e:	c1 e0 02             	shl    eax,0x2
   28631:	89 c2                	mov    edx,eax
   28633:	c1 e2 04             	shl    edx,0x4
   28636:	29 c2                	sub    edx,eax
   28638:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2863b:	8b 00                	mov    eax,DWORD PTR [eax]
   2863d:	01 d0                	add    eax,edx
   2863f:	89 45 dc             	mov    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:213

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
   28642:	b8 ff ff ff 7f       	mov    eax,0x7fffffff
   28647:	2b 45 dc             	sub    eax,DWORD PTR [ebp-0x24]
   2864a:	89 c1                	mov    ecx,eax
   2864c:	ba 07 45 2e c2       	mov    edx,0xc22e4507
   28651:	89 c8                	mov    eax,ecx
   28653:	f7 ea                	imul   edx
   28655:	8d 04 0a             	lea    eax,[edx+ecx*1]
   28658:	c1 f8 10             	sar    eax,0x10
   2865b:	89 c2                	mov    edx,eax
   2865d:	89 c8                	mov    eax,ecx
   2865f:	c1 f8 1f             	sar    eax,0x1f
   28662:	29 c2                	sub    edx,eax
   28664:	89 d0                	mov    eax,edx
   28666:	3b 45 f4             	cmp    eax,DWORD PTR [ebp-0xc]
   28669:	7d 04                	jge    2866f <mktime+0x7ac>
/home/yogi/src/os/chrisOS/src/time.c:213 (discriminator 1)
   2866b:	83 4d e8 08          	or     DWORD PTR [ebp-0x18],0x8
/home/yogi/src/os/chrisOS/src/time.c:214
  seconds += day * SECS_DAY;
   2866f:	8b 45 f4             	mov    eax,DWORD PTR [ebp-0xc]
   28672:	69 c0 80 51 01 00    	imul   eax,eax,0x15180
   28678:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:217

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   2867b:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
   28680:	85 c0                	test   eax,eax
   28682:	7e 13                	jle    28697 <mktime+0x7d4>
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 1)
   28684:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
   28689:	ba ff ff ff 7f       	mov    edx,0x7fffffff
   2868e:	29 c2                	sub    edx,eax
   28690:	89 d0                	mov    eax,edx
   28692:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   28695:	7c 15                	jl     286ac <mktime+0x7e9>
/home/yogi/src/os/chrisOS/src/time.c:218 (discriminator 3)
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   28697:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
/home/yogi/src/os/chrisOS/src/time.c:217 (discriminator 3)

  if ((TIME_MAX - seconds) / SECS_DAY < day) overflow|=8;
  seconds += day * SECS_DAY;

  // Now adjust according to timezone and daylight saving time
  if (((kTimeZone > 0) && (TIME_MAX - kTimeZone < seconds)) || 
   2869c:	85 c0                	test   eax,eax
   2869e:	79 10                	jns    286b0 <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:218
      ((kTimeZone < 0) && (seconds < -kTimeZone))) {
   286a0:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
   286a5:	f7 d8                	neg    eax
   286a7:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   286aa:	7e 04                	jle    286b0 <mktime+0x7ed>
/home/yogi/src/os/chrisOS/src/time.c:219
          overflow|=16;
   286ac:	83 4d e8 10          	or     DWORD PTR [ebp-0x18],0x10
/home/yogi/src/os/chrisOS/src/time.c:221
  }
  seconds += kTimeZone;
   286b0:	a1 d0 47 12 00       	mov    eax,ds:0x1247d0
   286b5:	01 45 dc             	add    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:223

  if (tmbuf->tm_isdst) {
   286b8:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   286bb:	8b 40 20             	mov    eax,DWORD PTR [eax+0x20]
   286be:	85 c0                	test   eax,eax
   286c0:	74 0a                	je     286cc <mktime+0x809>
/home/yogi/src/os/chrisOS/src/time.c:224
    dst = _dstbias;
   286c2:	a1 68 49 12 00       	mov    eax,ds:0x124968
   286c7:	89 45 e4             	mov    DWORD PTR [ebp-0x1c],eax
   286ca:	eb 07                	jmp    286d3 <mktime+0x810>
/home/yogi/src/os/chrisOS/src/time.c:226
  } else {
    dst = 0;
   286cc:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:229
  }

  if (dst > seconds) overflow|=32;        // dst is always non-negative
   286d3:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   286d6:	3b 45 dc             	cmp    eax,DWORD PTR [ebp-0x24]
   286d9:	7e 04                	jle    286df <mktime+0x81c>
/home/yogi/src/os/chrisOS/src/time.c:229 (discriminator 1)
   286db:	83 4d e8 20          	or     DWORD PTR [ebp-0x18],0x20
/home/yogi/src/os/chrisOS/src/time.c:230
  seconds -= dst;
   286df:	8b 45 e4             	mov    eax,DWORD PTR [ebp-0x1c]
   286e2:	29 45 dc             	sub    DWORD PTR [ebp-0x24],eax
/home/yogi/src/os/chrisOS/src/time.c:232

  if (overflow) return (time_t) overflow-2;
   286e5:	83 7d e8 00          	cmp    DWORD PTR [ebp-0x18],0x0
   286e9:	74 08                	je     286f3 <mktime+0x830>
/home/yogi/src/os/chrisOS/src/time.c:232 (discriminator 1)
   286eb:	8b 45 e8             	mov    eax,DWORD PTR [ebp-0x18]
   286ee:	83 e8 02             	sub    eax,0x2
   286f1:	eb 03                	jmp    286f6 <mktime+0x833>
/home/yogi/src/os/chrisOS/src/time.c:235

  if ((time_t) seconds != seconds) return (time_t) -1;
  return (time_t) seconds;
   286f3:	8b 45 dc             	mov    eax,DWORD PTR [ebp-0x24]
/home/yogi/src/os/chrisOS/src/time.c:236
}
   286f6:	83 c4 20             	add    esp,0x20
   286f9:	5b                   	pop    ebx
   286fa:	5e                   	pop    esi
   286fb:	5d                   	pop    ebp
   286fc:	c3                   	ret    

000286fd <_strdate>:
_strdate():
/home/yogi/src/os/chrisOS/src/time.c:241

#if !defined(KERNEL) && !defined(OS_LIB)


char *_strdate(char *s) {
   286fd:	55                   	push   ebp
   286fe:	89 e5                	mov    ebp,esp
   28700:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:244
  time_t now;

  time(&now);
   28703:	8d 45 fc             	lea    eax,[ebp-0x4]
   28706:	50                   	push   eax
   28707:	e8 48 f4 ff ff       	call   27b54 <time>
   2870c:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:247
  //fix me!
  //  strftime(s, 9, "%D", localtime(&now));
  return s;
   2870f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:248
}
   28712:	c9                   	leave  
   28713:	c3                   	ret    

00028714 <_strtime>:
_strtime():
/home/yogi/src/os/chrisOS/src/time.c:250

char *_strtime(char *s) {
   28714:	55                   	push   ebp
   28715:	89 e5                	mov    ebp,esp
   28717:	83 ec 10             	sub    esp,0x10
/home/yogi/src/os/chrisOS/src/time.c:253
  time_t now;

  time(&now);
   2871a:	8d 45 fc             	lea    eax,[ebp-0x4]
   2871d:	50                   	push   eax
   2871e:	e8 31 f4 ff ff       	call   27b54 <time>
   28723:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:256
  //fix me
  //  strftime(s, 9, "%T", localtime(&now));
  return s;
   28726:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
/home/yogi/src/os/chrisOS/src/time.c:257
}
   28729:	c9                   	leave  
   2872a:	c3                   	ret    

0002872b <waitTicks>:
waitTicks():
/home/yogi/src/os/chrisOS/src/time.c:260

void __attribute__((noinline))waitTicks(int TicksToWait)
{
   2872b:	55                   	push   ebp
   2872c:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:262
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
   2872e:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   28732:	74 0f                	je     28743 <waitTicks+0x18>
/home/yogi/src/os/chrisOS/src/time.c:267 (discriminator 1)
        return;
    //printd(DEBUG_TIMER,"ttw=%08X", TicksToWait);
    do
    {
        __asm("sti\nhlt\n");
   28734:	fb                   	sti    
   28735:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:268 (discriminator 1)
        TicksToWait--;
   28736:	83 6d 08 01          	sub    DWORD PTR [ebp+0x8],0x1
/home/yogi/src/os/chrisOS/src/time.c:269 (discriminator 1)
    } while (TicksToWait>0);
   2873a:	83 7d 08 00          	cmp    DWORD PTR [ebp+0x8],0x0
   2873e:	7f f4                	jg     28734 <waitTicks+0x9>
/home/yogi/src/os/chrisOS/src/time.c:270 (discriminator 2)
    return;
   28740:	90                   	nop
   28741:	eb 01                	jmp    28744 <waitTicks+0x19>
/home/yogi/src/os/chrisOS/src/time.c:263

void __attribute__((noinline))waitTicks(int TicksToWait)
{
    //printf("ttw=%u",ttw);
    if (TicksToWait==0)
        return;
   28743:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:271
    {
        __asm("sti\nhlt\n");
        TicksToWait--;
    } while (TicksToWait>0);
    return;
}
   28744:	5d                   	pop    ebp
   28745:	c3                   	ret    

00028746 <wait>:
wait():
/home/yogi/src/os/chrisOS/src/time.c:274

void /*__attribute__((noinline))*/wait(int msToWait)
{
   28746:	55                   	push   ebp
   28747:	89 e5                	mov    ebp,esp
/home/yogi/src/os/chrisOS/src/time.c:277
    //printk("msToWait=%u, ticksperms=%u, ticksToWait=%u",msToWait, kTicksPerMS, msToWait*kTicksPerMS);
    //STOPHERE2
    waitTicks(msToWait/kTicksPerMS);
   28749:	8b 0d c4 47 12 00    	mov    ecx,DWORD PTR ds:0x1247c4
   2874f:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   28752:	99                   	cdq    
   28753:	f7 f9                	idiv   ecx
   28755:	50                   	push   eax
   28756:	e8 d0 ff ff ff       	call   2872b <waitTicks>
   2875b:	83 c4 04             	add    esp,0x4
/home/yogi/src/os/chrisOS/src/time.c:278
}
   2875e:	90                   	nop
   2875f:	c9                   	leave  
   28760:	c3                   	ret    

00028761 <wait3>:
wait3():
/home/yogi/src/os/chrisOS/src/time.c:281

void wait3(double msToWait)
{
   28761:	55                   	push   ebp
   28762:	89 e5                	mov    ebp,esp
   28764:	83 ec 28             	sub    esp,0x28
   28767:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2876a:	89 45 e8             	mov    DWORD PTR [ebp-0x18],eax
   2876d:	8b 45 0c             	mov    eax,DWORD PTR [ebp+0xc]
   28770:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:282
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);
   28773:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   28778:	8b 00                	mov    eax,DWORD PTR [eax]
   2877a:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   2877d:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   28784:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   28787:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   2878a:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   2878d:	dd 45 e8             	fld    QWORD PTR [ebp-0x18]
   28790:	8b 0d c0 47 12 00    	mov    ecx,DWORD PTR ds:0x1247c0
   28796:	b8 e8 03 00 00       	mov    eax,0x3e8
   2879b:	ba 00 00 00 00       	mov    edx,0x0
   287a0:	f7 f1                	div    ecx
   287a2:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   287a5:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   287ac:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   287af:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   287b2:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   287b5:	de f9                	fdivp  st(1),st
   287b7:	de c1                	faddp  st(1),st
   287b9:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   287bc:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   287bf:	dd 5d f8             	fstp   QWORD PTR [ebp-0x8]
/home/yogi/src/os/chrisOS/src/time.c:284

while (endTicks > (double)*kTicksSinceStart)
   287c2:	eb 02                	jmp    287c6 <wait3+0x65>
/home/yogi/src/os/chrisOS/src/time.c:285
    {__asm__("sti\n hlt\n");}
   287c4:	fb                   	sti    
   287c5:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:284

void wait3(double msToWait)
{
volatile double endTicks = (double)*kTicksSinceStart + msToWait/ (1000/kTicksPerSecond);

while (endTicks > (double)*kTicksSinceStart)
   287c6:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   287cb:	8b 00                	mov    eax,DWORD PTR [eax]
   287cd:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   287d0:	c7 45 dc 00 00 00 00 	mov    DWORD PTR [ebp-0x24],0x0
   287d7:	df 6d d8             	fild   QWORD PTR [ebp-0x28]
   287da:	dd 5d e0             	fstp   QWORD PTR [ebp-0x20]
   287dd:	dd 45 e0             	fld    QWORD PTR [ebp-0x20]
   287e0:	dd 45 f8             	fld    QWORD PTR [ebp-0x8]
   287e3:	df e9                	fucomip st,st(1)
   287e5:	dd d8                	fstp   st(0)
   287e7:	77 db                	ja     287c4 <wait3+0x63>
/home/yogi/src/os/chrisOS/src/time.c:287
    {__asm__("sti\n hlt\n");}
    
}
   287e9:	90                   	nop
   287ea:	c9                   	leave  
   287eb:	c3                   	ret    

000287ec <wait2>:
wait2():
/home/yogi/src/os/chrisOS/src/time.c:290

void wait2(unsigned msToWait)
{
   287ec:	55                   	push   ebp
   287ed:	89 e5                	mov    ebp,esp
   287ef:	53                   	push   ebx
   287f0:	83 ec 24             	sub    esp,0x24
/home/yogi/src/os/chrisOS/src/time.c:291
    uint64_t startTicks = *kTicksSinceStart;             //25
   287f3:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   287f8:	8b 00                	mov    eax,DWORD PTR [eax]
   287fa:	89 45 f0             	mov    DWORD PTR [ebp-0x10],eax
   287fd:	c7 45 f4 00 00 00 00 	mov    DWORD PTR [ebp-0xc],0x0
/home/yogi/src/os/chrisOS/src/time.c:292
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
   28804:	8b 1d c0 47 12 00    	mov    ebx,DWORD PTR ds:0x1247c0
   2880a:	b8 e8 03 00 00       	mov    eax,0x3e8
   2880f:	ba 00 00 00 00       	mov    edx,0x0
   28814:	f7 f3                	div    ebx
   28816:	89 45 ec             	mov    DWORD PTR [ebp-0x14],eax
/home/yogi/src/os/chrisOS/src/time.c:293
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
   28819:	8b 45 08             	mov    eax,DWORD PTR [ebp+0x8]
   2881c:	ba 00 00 00 00       	mov    edx,0x0
   28821:	f7 75 ec             	div    DWORD PTR [ebp-0x14]
   28824:	89 45 e0             	mov    DWORD PTR [ebp-0x20],eax
   28827:	c7 45 e4 00 00 00 00 	mov    DWORD PTR [ebp-0x1c],0x0
/home/yogi/src/os/chrisOS/src/time.c:294
    uint64_t endTicks = startTicks + totalTicksToWait;
   2882e:	8b 4d f0             	mov    ecx,DWORD PTR [ebp-0x10]
   28831:	8b 5d f4             	mov    ebx,DWORD PTR [ebp-0xc]
   28834:	8b 45 e0             	mov    eax,DWORD PTR [ebp-0x20]
   28837:	8b 55 e4             	mov    edx,DWORD PTR [ebp-0x1c]
   2883a:	01 c8                	add    eax,ecx
   2883c:	11 da                	adc    edx,ebx
   2883e:	89 45 d8             	mov    DWORD PTR [ebp-0x28],eax
   28841:	89 55 dc             	mov    DWORD PTR [ebp-0x24],edx
/home/yogi/src/os/chrisOS/src/time.c:296

    if (endTicks < *kTicksSinceStart)
   28844:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   28849:	8b 00                	mov    eax,DWORD PTR [eax]
   2884b:	ba 00 00 00 00       	mov    edx,0x0
   28850:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28853:	72 0d                	jb     28862 <wait2+0x76>
   28855:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28858:	77 25                	ja     2887f <wait2+0x93>
   2885a:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   2885d:	77 20                	ja     2887f <wait2+0x93>
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   2885f:	eb 01                	jmp    28862 <wait2+0x76>
/home/yogi/src/os/chrisOS/src/time.c:305
    {__asm__("hlt\n");}
   28861:	f4                   	hlt    
/home/yogi/src/os/chrisOS/src/time.c:304
    //waitTicks(totalTicksToWait);
    //return;
    //printf("Waiting %u, ticks since start=%u  ms", msToWait, kTicksSinceStart);
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
   28862:	a1 a0 47 12 00       	mov    eax,ds:0x1247a0
   28867:	8b 00                	mov    eax,DWORD PTR [eax]
   28869:	ba 00 00 00 00       	mov    edx,0x0
   2886e:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28871:	72 ee                	jb     28861 <wait2+0x75>
   28873:	3b 55 dc             	cmp    edx,DWORD PTR [ebp-0x24]
   28876:	77 08                	ja     28880 <wait2+0x94>
   28878:	3b 45 d8             	cmp    eax,DWORD PTR [ebp-0x28]
   2887b:	72 e4                	jb     28861 <wait2+0x75>
   2887d:	eb 01                	jmp    28880 <wait2+0x94>
/home/yogi/src/os/chrisOS/src/time.c:297
    unsigned msPerTick = 1000 / kTicksPerSecond;         //18
    uint64_t totalTicksToWait = msToWait/msPerTick;     //4321/18
    uint64_t endTicks = startTicks + totalTicksToWait;

    if (endTicks < *kTicksSinceStart)
        return;
   2887f:	90                   	nop
/home/yogi/src/os/chrisOS/src/time.c:307
    //printf ("startTicks=%u, msPerTick=%u, totalTicksToWait=%u, endTicks=%u, kTicksSinceStart=%u", startTicks, msPerTick, totalTicksToWait, endTicks, kTicksSinceStart);
    //printf("\nStart waiting ... endTicks=%u, kTicksSinceStart=%u\n",endTicks, kTicksSinceStart);
    while (endTicks > *kTicksSinceStart)
    {__asm__("hlt\n");}
    //printf("done waiting!\n");
}
   28880:	83 c4 24             	add    esp,0x24
   28883:	5b                   	pop    ebx
   28884:	5d                   	pop    ebp
   28885:	c3                   	ret    
   28886:	66 90                	xchg   ax,ax
   28888:	66 90                	xchg   ax,ax
   2888a:	66 90                	xchg   ax,ax
   2888c:	66 90                	xchg   ax,ax
   2888e:	66 90                	xchg   ax,ax

00028890 <__udivdi3>:
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   28890:	55                   	push   ebp
   28891:	57                   	push   edi
   28892:	56                   	push   esi
   28893:	53                   	push   ebx
   28894:	83 ec 1c             	sub    esp,0x1c
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
  const DWunion dd = {.ll = d};
   28897:	8b 74 24 3c          	mov    esi,DWORD PTR [esp+0x3c]
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1287
#endif

#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
   2889b:	8b 5c 24 30          	mov    ebx,DWORD PTR [esp+0x30]
   2889f:	8b 4c 24 34          	mov    ecx,DWORD PTR [esp+0x34]
   288a3:	8b 7c 24 38          	mov    edi,DWORD PTR [esp+0x38]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   288a7:	85 f6                	test   esi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1013
static inline __attribute__ ((__always_inline__))
#endif
UDWtype
__udivmoddi4 (UDWtype n, UDWtype d, UDWtype *rp)
{
  const DWunion nn = {.ll = n};
   288a9:	89 5c 24 08          	mov    DWORD PTR [esp+0x8],ebx
   288ad:	89 ca                	mov    edx,ecx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1014
  const DWunion dd = {.ll = d};
   288af:	89 f8                	mov    eax,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1026
  d1 = dd.s.high;
  n0 = nn.s.low;
  n1 = nn.s.high;

#if !UDIV_NEEDS_NORMALIZATION
  if (d1 == 0)
   288b1:	75 3d                	jne    288f0 <__udivdi3+0x60>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1028
    {
      if (d0 > n1)
   288b3:	39 cf                	cmp    edi,ecx
   288b5:	0f 87 c5 00 00 00    	ja     28980 <__udivdi3+0xf0>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1041
	}
      else
	{
	  /* qq = NN / 0d */

	  if (d0 == 0)
   288bb:	85 ff                	test   edi,edi
   288bd:	89 fd                	mov    ebp,edi
   288bf:	75 0b                	jne    288cc <__udivdi3+0x3c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1042
	    d0 = 1 / d0;	/* Divide intentionally by zero.  */
   288c1:	b8 01 00 00 00       	mov    eax,0x1
   288c6:	31 d2                	xor    edx,edx
   288c8:	f7 f7                	div    edi
   288ca:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1044

	  udiv_qrnnd (q1, n1, 0, n1, d0);
   288cc:	89 c8                	mov    eax,ecx
   288ce:	31 d2                	xor    edx,edx
   288d0:	f7 f5                	div    ebp
   288d2:	89 c1                	mov    ecx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1045
	  udiv_qrnnd (q0, n0, n1, n0, d0);
   288d4:	89 d8                	mov    eax,ebx
   288d6:	89 cf                	mov    edi,ecx
   288d8:	f7 f5                	div    ebp
   288da:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   288dc:	89 d8                	mov    eax,ebx
   288de:	89 fa                	mov    edx,edi
   288e0:	83 c4 1c             	add    esp,0x1c
   288e3:	5b                   	pop    ebx
   288e4:	5e                   	pop    esi
   288e5:	5f                   	pop    edi
   288e6:	5d                   	pop    ebp
   288e7:	c3                   	ret    
   288e8:	90                   	nop
   288e9:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   288f0:	39 ce                	cmp    esi,ecx
   288f2:	77 74                	ja     28968 <__udivdi3+0xd8>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1155
	}
      else
	{
	  /* 0q = NN / dd */

	  count_leading_zeros (bm, d1);
   288f4:	0f bd fe             	bsr    edi,esi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1156
	  if (bm == 0)
   288f7:	83 f7 1f             	xor    edi,0x1f
   288fa:	0f 84 98 00 00 00    	je     28998 <__udivdi3+0x108>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   28900:	bb 20 00 00 00       	mov    ebx,0x20
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   28905:	89 f9                	mov    ecx,edi
   28907:	89 c5                	mov    ebp,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1188
	  else
	    {
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;
   28909:	29 fb                	sub    ebx,edi
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190

	      d1 = (d1 << bm) | (d0 >> b);
   2890b:	d3 e6                	shl    esi,cl
   2890d:	89 d9                	mov    ecx,ebx
   2890f:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      d0 = d0 << bm;
   28911:	89 f9                	mov    ecx,edi
   28913:	d3 e0                	shl    eax,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1190
	      UWtype m1, m0;
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
   28915:	09 ee                	or     esi,ebp
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28917:	89 d9                	mov    ecx,ebx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1191
	      /* Normalize.  */

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
   28919:	89 44 24 0c          	mov    DWORD PTR [esp+0xc],eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192
	      n2 = n1 >> b;
   2891d:	89 d5                	mov    ebp,edx
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   2891f:	8b 44 24 08          	mov    eax,DWORD PTR [esp+0x8]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1192

	      b = W_TYPE_SIZE - bm;

	      d1 = (d1 << bm) | (d0 >> b);
	      d0 = d0 << bm;
	      n2 = n1 >> b;
   28923:	d3 ed                	shr    ebp,cl
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1193
	      n1 = (n1 << bm) | (n0 >> b);
   28925:	89 f9                	mov    ecx,edi
   28927:	d3 e2                	shl    edx,cl
   28929:	89 d9                	mov    ecx,ebx
   2892b:	d3 e8                	shr    eax,cl
   2892d:	09 c2                	or     edx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1196
	      n0 = n0 << bm;

	      udiv_qrnnd (q0, n1, n2, n1, d1);
   2892f:	89 d0                	mov    eax,edx
   28931:	89 ea                	mov    edx,ebp
   28933:	f7 f6                	div    esi
   28935:	89 d5                	mov    ebp,edx
   28937:	89 c3                	mov    ebx,eax
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1197
	      umul_ppmm (m1, m0, q0, d0);
   28939:	f7 64 24 0c          	mul    DWORD PTR [esp+0xc]
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1199

	      if (m1 > n1 || (m1 == n1 && m0 > n0))
   2893d:	39 d5                	cmp    ebp,edx
   2893f:	72 10                	jb     28951 <__udivdi3+0xc1>
   28941:	8b 74 24 08          	mov    esi,DWORD PTR [esp+0x8]
   28945:	89 f9                	mov    ecx,edi
   28947:	d3 e6                	shl    esi,cl
   28949:	39 c6                	cmp    esi,eax
   2894b:	73 07                	jae    28954 <__udivdi3+0xc4>
   2894d:	39 d5                	cmp    ebp,edx
   2894f:	75 03                	jne    28954 <__udivdi3+0xc4>
   28951:	83 eb 01             	sub    ebx,0x1
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1202
		{
		  q0--;
		  sub_ddmmss (m1, m0, m1, m0, d1, d0);
   28954:	31 ff                	xor    edi,edi
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28956:	89 d8                	mov    eax,ebx
   28958:	89 fa                	mov    edx,edi
   2895a:	83 c4 1c             	add    esp,0x1c
   2895d:	5b                   	pop    ebx
   2895e:	5e                   	pop    esi
   2895f:	5f                   	pop    edi
   28960:	5d                   	pop    ebp
   28961:	c3                   	ret    
   28962:	8d b6 00 00 00 00    	lea    esi,[esi+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1136
    }
#endif /* UDIV_NEEDS_NORMALIZATION */

  else
    {
      if (d1 > n1)
   28968:	31 ff                	xor    edi,edi
   2896a:	31 db                	xor    ebx,ebx
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   2896c:	89 d8                	mov    eax,ebx
   2896e:	89 fa                	mov    edx,edi
   28970:	83 c4 1c             	add    esp,0x1c
   28973:	5b                   	pop    ebx
   28974:	5e                   	pop    esi
   28975:	5f                   	pop    edi
   28976:	5d                   	pop    ebp
   28977:	c3                   	ret    
   28978:	90                   	nop
   28979:	8d b4 26 00 00 00 00 	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1032
    {
      if (d0 > n1)
	{
	  /* 0q = nn / 0D */

	  udiv_qrnnd (q0, n0, n1, n0, d0);
   28980:	89 d8                	mov    eax,ebx
   28982:	f7 f7                	div    edi
   28984:	31 ff                	xor    edi,edi
   28986:	89 c3                	mov    ebx,eax
__udivdi3():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1289
#ifdef L_udivdi3
UDWtype
__udivdi3 (UDWtype n, UDWtype d)
{
  return __udivmoddi4 (n, d, (UDWtype *) 0);
}
   28988:	89 d8                	mov    eax,ebx
   2898a:	89 fa                	mov    edx,edi
   2898c:	83 c4 1c             	add    esp,0x1c
   2898f:	5b                   	pop    ebx
   28990:	5e                   	pop    esi
   28991:	5f                   	pop    edi
   28992:	5d                   	pop    ebp
   28993:	c3                   	ret    
   28994:	8d 74 26 00          	lea    esi,[esi+eiz*1+0x0]
__udivmoddi4():
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1166

		 This special case is necessary, not an optimization.  */

	      /* The condition on the next line takes advantage of that
		 n1 >= d1 (true due to program flow).  */
	      if (n1 > d1 || n0 >= d0)
   28998:	39 ce                	cmp    esi,ecx
   2899a:	72 0c                	jb     289a8 <__udivdi3+0x118>
   2899c:	31 db                	xor    ebx,ebx
   2899e:	3b 44 24 08          	cmp    eax,DWORD PTR [esp+0x8]
   289a2:	0f 87 34 ff ff ff    	ja     288dc <__udivdi3+0x4c>
/home/yogi/src/gcc-curr-build/i686-pc-linux-gnu/libgcc/../../../gcc-5.3.0/libgcc/libgcc2.c:1169
		{
		  q0 = 1;
		  sub_ddmmss (n1, n0, n1, n0, d1, d0);
   289a8:	bb 01 00 00 00       	mov    ebx,0x1
   289ad:	e9 2a ff ff ff       	jmp    288dc <__udivdi3+0x4c>
